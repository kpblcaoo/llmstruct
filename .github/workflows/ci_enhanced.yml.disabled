name: Enhanced CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.11"
  
jobs:
  # –ë—ã—Å—Ç—Ä—ã–µ smoke —Ç–µ—Å—Ç—ã - –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–µ—Ä–≤—ã–º–∏
  smoke-tests:
    name: "üî• Smoke Tests"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install minimal dependencies
        run: |
          python -m pip install --upgrade pip
          pip install toml jsonschema
          
      - name: Run smoke tests
        run: |
          cd llmstruct
          python tests/test_project_health_smoke.py
          
      - name: Check critical files
        run: |
          cd llmstruct
          echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤..."
          test -f "pyproject.toml" || (echo "‚ùå pyproject.toml –Ω–µ –Ω–∞–π–¥–µ–Ω" && exit 1)
          test -f "src/llmstruct/__init__.py" || (echo "‚ùå __init__.py –Ω–µ –Ω–∞–π–¥–µ–Ω" && exit 1)
          test -f "data/init_enhanced.json" || (echo "‚ùå init_enhanced.json –Ω–µ –Ω–∞–π–¥–µ–Ω" && exit 1)
          echo "‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã"

  # –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  comprehensive-tests:
    name: "üß™ Comprehensive Tests" 
    runs-on: ubuntu-latest
    needs: smoke-tests
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: |
          cd llmstruct
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install pytest pytest-cov jsonschema
          
      - name: Run AI integration tests
        run: |
          cd llmstruct
          python tests/test_ai_integration_devops.py critical
          
      - name: Run performance tests
        run: |
          cd llmstruct
          python tests/test_ai_integration_devops.py performance
          
      - name: Run existing tests
        run: |
          cd llmstruct
          python -m pytest tests/ -v --tb=short
          
      - name: Validate JSON ecosystem
        run: |
          cd llmstruct
          echo "üîç –í–∞–ª–∏–¥–∞—Ü–∏—è JSON —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã..."
          python -c "
          import json
          from pathlib import Path
          
          json_files = list(Path('data').rglob('*.json'))
          json_files.append(Path('struct.json'))
          
          errors = []
          for file_path in json_files:
              if file_path.exists():
                  try:
                      with open(file_path, 'r', encoding='utf-8') as f:
                          json.load(f)
                      print(f'‚úÖ {file_path}')
                  except json.JSONDecodeError as e:
                      errors.append(f'{file_path}: {e}')
                      
          if errors:
              print('‚ùå JSON –æ—à–∏–±–∫–∏:')
              for error in errors:
                  print(f'  {error}')
              exit(1)
          else:
              print('üéâ –í—Å–µ JSON —Ñ–∞–π–ª—ã –≤–∞–ª–∏–¥–Ω—ã')
          "

  # –õ–∏–Ω—Ç–∏–Ω–≥ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ  
  code-quality:
    name: "üìã Code Quality"
    runs-on: ubuntu-latest
    needs: smoke-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy
          
      - name: Run flake8
        run: |
          cd llmstruct
          flake8 src/llmstruct --max-line-length=88 --extend-ignore=F541,E203,W503 --count --show-source --statistics
          
      - name: Check code formatting with black
        run: |
          cd llmstruct
          black --check --diff src/llmstruct/
          
      - name: Check import sorting
        run: |
          cd llmstruct
          isort --check-only --diff src/llmstruct/

  # Docker —Ç–µ—Å—Ç—ã
  docker-tests:
    name: "üê≥ Docker Tests"
    runs-on: ubuntu-latest
    needs: smoke-tests
    if: contains(github.event.head_commit.message, '[docker]') || github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Test Go parser Docker build
        run: |
          cd llmstruct
          if [ -f "docker/parser_go/Dockerfile" ]; then
            echo "üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Docker —Å–±–æ—Ä–∫–∏..."
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Dockerfile
            docker build --dry-run -f docker/parser_go/Dockerfile .
            echo "‚úÖ Dockerfile —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"
          else
            echo "‚ö†Ô∏è  Dockerfile –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º Docker —Ç–µ—Å—Ç—ã"
          fi

  # AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã health check
  ai-health-check:
    name: "ü§ñ AI Health Check"
    runs-on: ubuntu-latest
    needs: comprehensive-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install llmstruct
        run: |
          cd llmstruct
          pip install -e .
          
      - name: Run AI diagnostics (if available)
        run: |
          cd llmstruct
          if [ -f "run_ai_diagnostics.py" ]; then
            echo "ü§ñ –ó–∞–ø—É—Å–∫ AI –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏..."
            timeout 60 python run_ai_diagnostics.py || echo "‚ö†Ô∏è  AI –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç–æ–º"
          else
            echo "‚ÑπÔ∏è  AI –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
          fi
          
      - name: Check AI component configs
        run: |
          cd llmstruct
          python -c "
          import json
          from pathlib import Path
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
          configs_to_check = [
              'data/init_enhanced.json',
              'data/cursor/cursor_context_config.json'
          ]
          
          for config_path in configs_to_check:
              path = Path(config_path)
              if path.exists():
                  try:
                      with open(path, 'r') as f:
                          config = json.load(f)
                      print(f'‚úÖ {config_path} - –≤–∞–ª–∏–¥–µ–Ω')
                      
                      # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
                      if 'cursor_context_config.json' in config_path:
                          ai_delegation = config.get('ai_delegation', {})
                          if 'grok_threshold' in ai_delegation and 'claude_threshold' in ai_delegation:
                              print(f'   AI delegation: Grok={ai_delegation[\"grok_threshold\"]}, Claude={ai_delegation[\"claude_threshold\"]}')
                          
                  except Exception as e:
                      print(f'‚ùå {config_path}: {e}')
              else:
                  print(f'‚ö†Ô∏è  {config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω')
          "

  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ struct.json (—Ç–æ–ª—å–∫–æ –¥–ª—è main –≤–µ—Ç–∫–∏)
  update-structure:
    name: "üìä Update Project Structure"
    runs-on: ubuntu-latest
    needs: [comprehensive-tests, code-quality]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install llmstruct
        run: |
          cd llmstruct
          pip install -e .
          
      - name: Generate updated struct.json
        run: |
          cd llmstruct
          echo "üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞..."
          
          # –ü—ã—Ç–∞–µ–º—Å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å struct.json
          if python -m llmstruct parse . -o struct.json; then
            echo "‚úÖ struct.json —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω"
          else
            echo "‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å struct.json, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π"
          fi
          
      - name: Check for changes and commit
        run: |
          cd llmstruct
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
          git add struct.json
          if git diff --cached --quiet; then
            echo "‚ÑπÔ∏è  struct.json –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è"
          else
            echo "üìä –ö–æ–º–º–∏—Ç–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π struct.json"
            git commit -m "ü§ñ Auto-update struct.json via CI/CD [skip ci]"
            git push
          fi

  # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
  final-status:
    name: "üéØ Final Status"
    runs-on: ubuntu-latest
    needs: [smoke-tests, comprehensive-tests, code-quality, ai-health-check]
    if: always()
    
    steps:
      - name: Check overall status
        run: |
          echo "üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞..."
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö jobs
          if [[ "${{ needs.smoke-tests.result }}" == "success" ]]; then
            echo "‚úÖ Smoke tests: PASSED"
          else
            echo "‚ùå Smoke tests: FAILED"
            exit 1
          fi
          
          if [[ "${{ needs.comprehensive-tests.result }}" == "success" ]]; then
            echo "‚úÖ Comprehensive tests: PASSED"
          else
            echo "‚ùå Comprehensive tests: FAILED"
            exit 1
          fi
          
          if [[ "${{ needs.code-quality.result }}" == "success" ]]; then
            echo "‚úÖ Code quality: PASSED"
          else
            echo "‚ùå Code quality: FAILED"
            exit 1
          fi
          
          if [[ "${{ needs.ai-health-check.result }}" == "success" ]]; then
            echo "‚úÖ AI health check: PASSED"
          else
            echo "‚ö†Ô∏è  AI health check: FAILED (non-critical)"
          fi
          
          echo ""
          echo "üéâ CI/CD Pipeline completed successfully!"
          echo "üìä Project health: GOOD"
          echo "ü§ñ AI components: OPERATIONAL" 