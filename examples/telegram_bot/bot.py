#!/usr/bin/env python3
"""
Telegram Bot for LLMStruct Integration
–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ tmp –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
–° –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –ø–∞–º—è—Ç–∏ –∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import asyncio
import httpx
import json
import subprocess
import os
import logging
from typing import Optional
from memory_manager import TelegramMemoryManager

# –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç telegram –±–∏–±–ª–∏–æ—Ç–µ–∫
# –ò—Å–ø–æ–ª—å–∑—É–µ–º polling —á–µ—Ä–µ–∑ Bot API

class LLMStructTelegramBot:
    def __init__(self, bot_token: str, api_base: str = "http://localhost:8000"):
        self.bot_token = bot_token
        self.api_base = api_base
        self.api_key = "dev-key"  # –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        self.last_update_id = 0
        self.session_id = "telegram-bot-session"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏
        self.memory = TelegramMemoryManager()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(level=logging.INFO)
        self.logger = logging.getLogger(__name__)
        
        self.logger.info("üß† Memory system initialized")
        stats = self.memory.get_memory_stats()
        self.logger.info(f"üìä Memory stats: {stats['active_sessions']} sessions, {stats['total_messages']} messages, {stats['unique_users']} users")
        
    async def send_message(self, chat_id: int, text: str, parse_mode: str = "Markdown"):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
        
        data = {
            "chat_id": chat_id,
            "text": text[:4096],  # Telegram limit
            "parse_mode": parse_mode
        }
        
        async with httpx.AsyncClient() as client:
            try:
                response = await client.post(url, json=data)
                return response.json()
            except Exception as e:
                self.logger.error(f"Failed to send message: {e}")
                return None
    
    async def get_updates(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram"""
        url = f"https://api.telegram.org/bot{self.bot_token}/getUpdates"
        
        params = {
            "offset": self.last_update_id + 1,
            "timeout": 10
        }
        
        async with httpx.AsyncClient(timeout=15.0) as client:
            try:
                response = await client.get(url, params=params)
                return response.json()
            except Exception as e:
                self.logger.error(f"Failed to get updates: {e}")
                return {"ok": False, "result": []}
    
    async def execute_command(self, command: str) -> str:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ"""
        try:
            # –ü—Ä–æ—Å—Ç—ã–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            safe_commands = {
                "date": ["date"],
                "pwd": ["pwd"], 
                "ls": ["ls", "-la"],
                "ps": ["ps", "aux"],
                "df": ["df", "-h"],
                "free": ["free", "-h"],
                "uptime": ["uptime"],
                "whoami": ["whoami"]
            }
            
            if command in safe_commands:
                result = subprocess.run(
                    safe_commands[command], 
                    capture_output=True, 
                    text=True, 
                    timeout=10
                )
                return f"```\n{result.stdout}\n```" if result.stdout else f"Error: {result.stderr}"
            else:
                return f"‚ùå Command '{command}' not allowed. Available: {', '.join(safe_commands.keys())}"
                
        except Exception as e:
            return f"‚ùå Error executing command: {str(e)}"
    
    async def chat_with_llm(self, message: str, context_mode: str = "focused", session=None) -> str:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ LLM —á–µ—Ä–µ–∑ –Ω–∞—à API —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–∞–º—è—Ç–∏"""
        url = f"{self.api_base}/api/v1/chat/message"
        
        headers = {
            "X-API-Key": self.api_key,
            "Content-Type": "application/json"
        }
        
        # –°—Ç—Ä–æ–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        enhanced_message = message
        if session and len(session.messages) > 1:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            recent_context = []
            for msg in session.messages[-3:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è
                if msg.role == "user":
                    recent_context.append(f"üë§ {msg.content}")
                elif msg.role == "assistant":
                    recent_context.append(f"ü§ñ {msg.content[:100]}...")
            
            if recent_context:
                enhanced_message = f"–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:\n{chr(10).join(recent_context)}\n\n–¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å: {message}"
        
        data = {
            "content": enhanced_message,
            "context_mode": context_mode,
            "session_id": session.session_id if session else self.session_id
        }
        
        async with httpx.AsyncClient(timeout=30.0) as client:
            try:
                response = await client.post(url, headers=headers, json=data)
                if response.status_code == 200:
                    result = response.json()
                    return result.get("content", "No response from LLM")
                else:
                    return f"‚ùå API Error: {response.status_code}"
            except Exception as e:
                return f"‚ùå Failed to reach LLM API: {str(e)}"
    
    async def handle_message(self, update):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –ø–∞–º—è—Ç—å—é"""
        self.logger.info(f"üîç Raw update: {update}")
        
        message = update.get("message", {})
        chat_id = message.get("chat", {}).get("id")
        text = message.get("text", "")
        user_id = message.get("from", {}).get("id")
        user_name = message.get("from", {}).get("first_name", "User")
        
        self.logger.info(f"üì© Parsed - chat_id: {chat_id}, text: '{text}', user: {user_name}")
        
        if not chat_id or not text or not user_id:
            self.logger.warning(f"‚ùå Skipping message - missing required fields")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session = self.memory.get_or_create_session(chat_id, user_id, user_name)
        self.logger.info(f"üß† Using session: {session.session_id} (messages: {session.message_count})")
        
        # –ö–æ–º–∞–Ω–¥—ã
        if text.startswith("/cmd "):
            self.logger.info("üîß Processing /cmd command")
            command = text[5:].strip()
            await self.send_message(chat_id, f"üîß Executing: `{command}`")
            result = await self.execute_command(command)
            await self.send_message(chat_id, result)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
            self.memory.add_message(session, "user", f"/cmd {command}", user_name)
            self.memory.add_message(session, "assistant", result)
            
        elif text.startswith("/start"):
            self.logger.info("üöÄ Processing /start command")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_stats = self.memory.get_user_stats(user_id)
            
            welcome = """ü§ñ **LLMStruct Telegram Bot —Å –ø–∞–º—è—Ç—å—é**

**Commands:**
‚Ä¢ `/cmd <command>` - Execute system command
‚Ä¢ Regular message - Chat with LLM
‚Ä¢ `/status` - Check API status
‚Ä¢ `/memory` - Memory statistics
‚Ä¢ `/profile` - Your profile info

**Available commands:**
`date`, `pwd`, `ls`, `ps`, `df`, `free`, `uptime`, `whoami`
"""
            
            if user_stats["profile"]:
                interests = user_stats["profile"].get("interests", [])
                if interests:
                    welcome += f"\nüéØ **–í–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã:** {', '.join(interests[:5])}"
                
            welcome += "\nReady to help! üöÄ"
            await self.send_message(chat_id, welcome)
            
        elif text.startswith("/status"):
            self.logger.info("üìä Processing /status command")
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API
            try:
                async with httpx.AsyncClient() as client:
                    response = await client.get(f"{self.api_base}/api/v1/system/health")
                    if response.status_code == 200:
                        memory_stats = self.memory.get_memory_stats()
                        status_msg = f"""‚úÖ **LLMStruct API is online!**
                        
üß† **Memory System:**
‚Ä¢ Active sessions: {memory_stats['active_sessions']}
‚Ä¢ Total messages: {memory_stats['total_messages']}
‚Ä¢ Unique users: {memory_stats['unique_users']}"""
                        await self.send_message(chat_id, status_msg)
                    else:
                        await self.send_message(chat_id, f"‚ùå API Error: {response.status_code}")
            except Exception as e:
                await self.send_message(chat_id, f"‚ùå API unreachable: {str(e)}")
                
        elif text.startswith("/memory"):
            self.logger.info("üß† Processing /memory command")
            memory_stats = self.memory.get_memory_stats()
            user_stats = self.memory.get_user_stats(user_id)
            
            memory_info = f"""üß† **Memory Statistics**

**Global:**
‚Ä¢ Active sessions: {memory_stats['active_sessions']}
‚Ä¢ Total messages: {memory_stats['total_messages']}
‚Ä¢ Unique users: {memory_stats['unique_users']}

**Your session:**
‚Ä¢ Messages in session: {user_stats['active_session']['message_count']}
‚Ä¢ Started: {user_stats['active_session']['started_at'][:19] if user_stats['active_session']['started_at'] else 'Now'}
‚Ä¢ Total messages: {user_stats['profile'].get('message_count', 0)}"""
            
            await self.send_message(chat_id, memory_info)
            
        elif text.startswith("/profile"):
            self.logger.info("üë§ Processing /profile command")
            user_stats = self.memory.get_user_stats(user_id)
            profile = user_stats["profile"]
            
            if profile:
                profile_info = f"""üë§ **Your Profile**

‚Ä¢ First seen: {profile.get('first_seen', 'Unknown')[:19]}
‚Ä¢ Total messages: {profile.get('message_count', 0)}
‚Ä¢ Preferred language: {profile.get('preferred_language', 'Unknown')}
‚Ä¢ Interests: {', '.join(profile.get('interests', [])) or 'None detected yet'}"""
            else:
                profile_info = "üë§ No profile data yet. Start chatting to build your profile!"
                
            await self.send_message(chat_id, profile_info)
                
        else:
            # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ LLM —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø–∞–º—è—Ç–∏
            self.logger.info(f"ü§ñ Processing regular message for LLM: '{text}'")
            self.logger.info(f"üí≠ Session context: {len(session.messages)} previous messages")
            
            await self.send_message(chat_id, "ü§î *Thinking...*")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.memory.add_message(session, "user", text, user_name)
            
            self.logger.info("üí≠ Sending to LLM...")
            response = await self.chat_with_llm(text, session=session)
            self.logger.info(f"‚úÖ LLM response received: {response[:100]}...")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            self.memory.add_message(session, "assistant", response)
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
            if len(response) > 4000:
                parts = [response[i:i+4000] for i in range(0, len(response), 4000)]
                for i, part in enumerate(parts):
                    await self.send_message(chat_id, f"**Part {i+1}/{len(parts)}:**\n{part}")
            else:
                await self.send_message(chat_id, response)
    
    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞"""
        self.logger.info("ü§ñ LLMStruct Telegram Bot starting...")
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self.memory.cleanup_old_sessions()
        
        while True:
            try:
                updates = await self.get_updates()
                
                if updates.get("ok") and updates.get("result"):
                    for update in updates["result"]:
                        self.last_update_id = update["update_id"]
                        await self.handle_message(update)
                
                await asyncio.sleep(1)  # Polling interval
                
            except KeyboardInterrupt:
                self.logger.info("Bot stopping...")
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
                self.memory.save()
                break
            except Exception as e:
                self.logger.error(f"Error in main loop: {e}")
                await asyncio.sleep(5)

async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
    
    if not bot_token:
        print("‚ùå Please set TELEGRAM_BOT_TOKEN environment variable")
        print("Get token from @BotFather on Telegram")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ API –∑–∞–ø—É—â–µ–Ω
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get("http://localhost:8000/api/v1/system/health")
            if response.status_code != 200:
                print("‚ùå LLMStruct API is not running on localhost:8000")
                print("Start it with: source venv/bin/activate && python test_api.py")
                return
    except:
        print("‚ùå Cannot connect to LLMStruct API")
        print("Make sure it's running on localhost:8000")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = LLMStructTelegramBot(bot_token)
    await bot.run()

if __name__ == "__main__":
    asyncio.run(main()) 