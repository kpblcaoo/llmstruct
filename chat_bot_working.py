#!/usr/bin/env python3
"""
üöÄ ENHANCED Telegram Bot —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π FastAPI
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π FastAPI —Å–µ—Ä–≤–µ—Ä –¥–ª—è:
- –ö–µ—à–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ WebSocket
- –ü–∞–º—è—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ API endpoints
- –ú–µ—Ç—Ä–∏–∫ —á–µ—Ä–µ–∑ API

–ë–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–∏—Ö CLI –≤—ã–∑–æ–≤–æ–≤ - –≤—Å–µ —á–µ—Ä–µ–∑ API!
"""

import asyncio
import logging
import json
import aiohttp
import websockets
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot_fastapi.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class FastAPIIntegratedBot:
    """Telegram –±–æ—Ç —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π FastAPI"""
    
    def __init__(self, telegram_token: str, fastapi_base_url: str = "http://localhost:8000"):
        self.telegram_token = telegram_token
        self.fastapi_base_url = fastapi_base_url
        self.user_memory = {}  # –õ–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à + API —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
        self.session = None
        
        # –°–æ–∑–¥–∞–µ–º Telegram Application
        self.app = Application.builder().token(telegram_token).build()
        self.setup_handlers()
        
    async def setup_session(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è aiohttp —Å–µ—Å—Å–∏–∏"""
        if not self.session:
            self.session = aiohttp.ClientSession()
    
    async def close_session(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ aiohttp —Å–µ—Å—Å–∏–∏"""
        if self.session:
            await self.session.close()
    
    async def health_check_api(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ FastAPI —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            await self.setup_session()
            async with self.session.get(f"{self.fastapi_base_url}/api/v1/system/health") as resp:
                if resp.status == 200:
                    data = await resp.json()
                    logger.info(f"‚úÖ FastAPI server healthy: {data.get('status')}")
                    return True
                else:
                    logger.error(f"‚ùå FastAPI health check failed: {resp.status}")
                    return False
        except Exception as e:
            logger.error(f"‚ùå FastAPI connection failed: {e}")
            return False
    
    async def save_user_message_via_api(self, user_id: int, username: str, message: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ FastAPI"""
        try:
            await self.setup_session()
            payload = {
                "user_id": user_id,
                "username": username,
                "message": message,
                "timestamp": datetime.now().isoformat(),
                "type": "user_message"
            }
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º endpoint –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç–∏
            async with self.session.post(
                f"{self.fastapi_base_url}/api/v1/memory/save",
                json=payload
            ) as resp:
                if resp.status == 200:
                    logger.info(f"üíæ Message saved via API for user {username}")
                else:
                    logger.warning(f"‚ö†Ô∏è API save failed: {resp.status}")
                    
        except Exception as e:
            logger.error(f"‚ùå Failed to save via API: {e}")
            # Fallback to local memory
            if user_id not in self.user_memory:
                self.user_memory[user_id] = []
            self.user_memory[user_id].append({
                "username": username,
                "message": message,
                "timestamp": datetime.now().isoformat()
            })
    
    async def get_user_history_via_api(self, user_id: int, limit: int = 10) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ FastAPI"""
        try:
            await self.setup_session()
            async with self.session.get(
                f"{self.fastapi_base_url}/api/v1/memory/history/{user_id}?limit={limit}"
            ) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    logger.info(f"üìñ Retrieved {len(data.get('messages', []))} messages via API")
                    return data.get('messages', [])
                else:
                    logger.warning(f"‚ö†Ô∏è API history failed: {resp.status}")
                    
        except Exception as e:
            logger.error(f"‚ùå Failed to get history via API: {e}")
            
        # Fallback to local memory
        return self.user_memory.get(user_id, [])[-limit:]
    
    async def chat_with_ollama_via_api(self, message: str, context: str = "") -> str:
        """–ß–∞—Ç —Å Ollama —á–µ—Ä–µ–∑ FastAPI endpoint"""
        try:
            await self.setup_session()
            payload = {
                "message": message,
                "context_mode": "focused",
                "session_id": "telegram_bot",
                "model": "mistral:latest",
                "use_ollama": True
            }
            
            async with self.session.post(
                f"{self.fastapi_base_url}/api/v1/chat/ollama",
                json=payload
            ) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    logger.info(f"ü§ñ Ollama response via API: {data.get('tokens_used', 0)} tokens")
                    return data.get('response', 'No response from Ollama')
                else:
                    logger.error(f"‚ùå Ollama API failed: {resp.status}")
                    return f"‚ùå –û—à–∏–±–∫–∞ Ollama API: {resp.status}"
                    
        except Exception as e:
            logger.error(f"‚ùå Ollama chat failed: {e}")
            return f"‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)}"
    
    async def get_system_metrics_via_api(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —Å–∏—Å—Ç–µ–º—ã —á–µ—Ä–µ–∑ FastAPI"""
        try:
            await self.setup_session()
            async with self.session.get(f"{self.fastapi_base_url}/api/v1/system/status") as resp:
                if resp.status == 200:
                    return await resp.json()
                else:
                    return {"error": f"API status: {resp.status}"}
        except Exception as e:
            return {"error": str(e)}
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CommandHandler("memory", self.memory_command))
        self.app.add_handler(CommandHandler("history", self.history_command))
        self.app.add_handler(CommandHandler("health", self.health_command))
        self.app.add_handler(CommandHandler("metrics", self.metrics_command))
        self.app.add_handler(CommandHandler("ollama", self.ollama_command))
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user = update.effective_user
        await self.save_user_message_via_api(user.id, user.username or "unknown", "/start")
        
        welcome_text = f"""
üöÄ **FastAPI-Integrated LLMStruct Bot**

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≤–∞—à–µ–º—É FastAPI —Å–µ—Ä–≤–µ—Ä—É.

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/memory` - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ø–∞–º—è—Ç—å  
‚Ä¢ `/history` - –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é
‚Ä¢ `/health` - —Å—Ç–∞—Ç—É—Å FastAPI —Å–µ—Ä–≤–µ—Ä–∞
‚Ä¢ `/metrics` - –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ `/ollama <—Å–æ–æ–±—â–µ–Ω–∏–µ>` - —á–∞—Ç —Å Ollama

**–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**
‚úÖ –ü–∞–º—è—Ç—å —á–µ—Ä–µ–∑ FastAPI (–Ω–µ CLI!)
‚úÖ Ollama –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ API  
‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
‚úÖ WebSocket –ø–æ–¥–¥–µ—Ä–∂–∫–∞
        """
        
        await update.message.reply_text(welcome_text)
    
    async def memory_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /memory - —Ç–µ—Å—Ç –ø–∞–º—è—Ç–∏"""
        user = update.effective_user
        command_text = " ".join(context.args) if context.args else "–¢–µ—Å—Ç –ø–∞–º—è—Ç–∏"
        
        await self.save_user_message_via_api(user.id, user.username or "unknown", command_text)
        
        await update.message.reply_text(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ø–∞–º—è—Ç—å —á–µ—Ä–µ–∑ FastAPI: '{command_text}'")
    
    async def history_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /history - –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é"""
        user = update.effective_user
        limit = 5
        if context.args and context.args[0].isdigit():
            limit = int(context.args[0])
        
        messages = await self.get_user_history_via_api(user.id, limit)
        
        if not messages:
            await update.message.reply_text("üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")
            return
        
        history_text = f"üìñ **–ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π:**\n\n"
        for msg in messages[-limit:]:
            timestamp = msg.get('timestamp', 'N/A')[:16].replace('T', ' ')
            message = msg.get('message', 'N/A')[:50]
            history_text += f"`{timestamp}` | {message}...\n"
        
        await update.message.reply_text(history_text, parse_mode='Markdown')
    
    async def health_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /health - —Å—Ç–∞—Ç—É—Å FastAPI"""
        is_healthy = await self.health_check_api()
        
        if is_healthy:
            await update.message.reply_text("‚úÖ FastAPI —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!")
        else:
            await update.message.reply_text("‚ùå FastAPI —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    async def metrics_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /metrics - –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        metrics = await self.get_system_metrics_via_api()
        
        if "error" in metrics:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –º–µ—Ç—Ä–∏–∫: {metrics['error']}")
            return
        
        system = metrics.get('system', {})
        struct_json = metrics.get('struct_json', {})
        features = metrics.get('features', {})
        
        metrics_text = f"""
üìä **–ú–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã:**

üñ•Ô∏è **–°–∏—Å—Ç–µ–º–∞:**
Status: {system.get('status', 'N/A')}
Timestamp: {system.get('timestamp', 'N/A')}

üìÑ **struct.json:**
Status: {struct_json.get('status', 'N/A')}
Size: {struct_json.get('size_bytes', 0)} bytes
Modified: {struct_json.get('last_modified', 'N/A')[:16]}

üöÄ **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
Chat: {'‚úÖ' if features.get('chat') else '‚ùå'}
Metrics: {'‚úÖ' if features.get('metrics') else '‚ùå'}
Struct Analysis: {'‚úÖ' if features.get('struct_analysis') else '‚ùå'}
        """
        
        await update.message.reply_text(metrics_text)
    
    async def ollama_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /ollama - —á–∞—Ç —Å Ollama"""
        if not context.args:
            await update.message.reply_text("ü§ñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ollama <–≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ>")
            return
        
        user_message = " ".join(context.args)
        user = update.effective_user
        
        await self.save_user_message_via_api(user.id, user.username or "unknown", f"Ollama: {user_message}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
        status_msg = await update.message.reply_text("ü§ñ Ollama –¥—É–º–∞–µ—Ç...")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Ollama —á–µ—Ä–µ–∑ API
        response = await self.chat_with_ollama_via_api(user_message)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await status_msg.edit_text(f"ü§ñ **Ollama –æ—Ç–≤–µ—Ç:**\n{response}")
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        message_text = update.message.text
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç—å
        await self.save_user_message_via_api(user.id, user.username or "unknown", message_text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        if "–Ω–∞–ø–æ–º–Ω–∏" in message_text.lower() and "–∑–∞–ø—Ä–æ—Å" in message_text.lower():
            messages = await self.get_user_history_via_api(user.id, 3)
            if messages:
                history_text = "üìù **–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã:**\n\n"
                for i, msg in enumerate(messages[-3:], 1):
                    message = msg.get('message', 'N/A')
                    history_text += f"{i}. {message}\n"
                await update.message.reply_text(history_text)
            else:
                await update.message.reply_text("üì≠ –ó–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
        elif "–∫—É–∫—É–º–±–µ—Ä" in message_text.lower():
            await update.message.reply_text("ü•í –ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –∑–∞–ø–æ–º–Ω–µ–Ω–æ! Cucumber –≤ –ø–∞–º—è—Ç–∏ FastAPI.")
            
        elif message_text.startswith("@llmstruct_bot"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
            query = message_text.replace("@llmstruct_bot", "").strip()
            if query:
                response = await self.chat_with_ollama_via_api(query)
                await update.message.reply_text(f"ü§ñ {response}")
            else:
                await update.message.reply_text("üëã –Ø –∑–¥–µ—Å—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å.")
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            logger.info("üöÄ Starting FastAPI-Integrated Bot...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º FastAPI –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
            if await self.health_check_api():
                logger.info("‚úÖ FastAPI connection verified")
            else:
                logger.warning("‚ö†Ô∏è FastAPI not available, using fallback mode")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            await self.app.run_polling(drop_pending_updates=True)
            
        except Exception as e:
            logger.error(f"‚ùå Bot error: {e}")
        finally:
            await self.close_session()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import os
    
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    if not token:
        print("‚ùå TELEGRAM_BOT_TOKEN not set")
        exit(1)
    
    # –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å URL FastAPI —Å–µ—Ä–≤–µ—Ä–∞
    fastapi_url = os.getenv('FASTAPI_URL', 'http://localhost:8000')
    
    print("üöÄ Starting FastAPI-Integrated Bot...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º event loop –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        try:
            loop = asyncio.get_event_loop()
        except RuntimeError:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        bot = FastAPIIntegratedBot(token, fastapi_url)
        loop.run_until_complete(bot.run())
        
    except KeyboardInterrupt:
        print("üõë Bot stopped by user")
    except Exception as e:
        print(f"‚ùå Bot error: {e}")
        import traceback
        traceback.print_exc()
    finally:
        try:
            loop.close()
        except:
            pass

if __name__ == "__main__":
    asyncio.run(main()) 