#!/usr/bin/env python3
"""
üéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –≤–µ—Ä—Å–∏—è Telegram –±–æ—Ç–∞ –¥–ª—è LLMStruct
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å FastAPI ‚úÖ
- –û–±—Ä–∞–±–æ—Ç–∫–∞ SSL –æ—à–∏–±–æ–∫ ‚úÖ  
- –ê–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ ‚úÖ
- –ü–æ–ª–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ‚úÖ
"""

import os
import json
import time
import logging
import aiohttp
import asyncio
from datetime import datetime
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_file = Path("logs/telegram_bot_final.log")
log_file.parent.mkdir(exist_ok=True)

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_file),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

try:
    from telegram import Update, BotCommand
    from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
    from telegram.error import NetworkError, TimedOut, RetryAfter
except ImportError:
    print("‚ùå Missing telegram dependencies. Install with: pip install python-telegram-bot")
    exit(1)

class FinalLLMStructBot:
    def __init__(self, token: str, api_base_url: str = "http://localhost:8000"):
        self.token = token
        self.api_base_url = api_base_url
        self.session = None
        self.max_retries = 3
        self.retry_delay = 5
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        self.application = Application.builder().token(token).build()
        self.setup_handlers()
        
        logger.info("üéØ Final LLMStruct Bot initialized")
    
    async def get_session(self):
        if not self.session:
            timeout = aiohttp.ClientTimeout(total=30, connect=10)
            self.session = aiohttp.ClientSession(timeout=timeout)
        return self.session
    
    async def api_call(self, endpoint: str, method: str = "GET", data: dict = None) -> dict:
        """–£—Å—Ç–æ–π—á–∏–≤—ã–π –≤—ã–∑–æ–≤ API —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏"""
        session = await self.get_session()
        url = f"{self.api_base_url}/api/v1{endpoint}"
        
        for attempt in range(self.max_retries):
            try:
                if method == "GET":
                    async with session.get(url) as response:
                        if response.status == 200:
                            result = await response.json()
                            logger.debug(f"‚úÖ API {method} {endpoint} - OK")
                            return result
                        else:
                            logger.warning(f"‚ö†Ô∏è API {method} {endpoint} - {response.status}")
                            
                elif method == "POST":
                    async with session.post(url, json=data) as response:
                        if response.status == 200:
                            result = await response.json()
                            logger.debug(f"‚úÖ API {method} {endpoint} - OK")
                            return result
                        else:
                            logger.warning(f"‚ö†Ô∏è API {method} {endpoint} - {response.status}")
                            
            except Exception as e:
                logger.warning(f"üîÑ API attempt {attempt + 1}/{self.max_retries} failed: {e}")
                if attempt < self.max_retries - 1:
                    await asyncio.sleep(self.retry_delay)
                    
        logger.error(f"‚ùå API call failed after {self.max_retries} attempts: {endpoint}")
        return {"error": f"API unavailable after {self.max_retries} attempts"}
    
    async def save_user_message(self, user_id: int, username: str, message: str) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        result = await self.api_call("/memory/save", "POST", {
            "user_id": user_id,
            "username": username or "unknown",
            "message": message,
            "timestamp": datetime.now().isoformat()
        })
        
        success = "error" not in result
        if success:
            logger.info(f"üíæ Message saved: {username} - {message[:30]}...")
        return success
    
    async def get_user_history(self, user_id: int, limit: int = 5) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        result = await self.api_call(f"/memory/history/{user_id}?limit={limit}")
        
        if "error" not in result:
            messages = result.get("messages", [])
            logger.info(f"üìñ Retrieved {len(messages)} messages")
            return messages
        return []
    
    async def chat_with_ollama(self, message: str) -> str:
        """–ß–∞—Ç —Å Ollama"""
        result = await self.api_call("/chat/ollama", "POST", {
            "message": message,
            "model": "mistral:latest"
        })
        
        if "error" not in result:
            response = result.get("response", "No response")
            tokens = result.get("tokens_used", 0)
            logger.info(f"ü§ñ Ollama: {tokens} tokens")
            return response
        else:
            error_msg = "‚ùå Ollama –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            logger.error(f"Ollama error: {result.get('error')}")
            return error_msg
    
    async def get_system_status(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        return await self.api_call("/system/health")
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        self.application.add_handler(CommandHandler("memory", self.memory_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)
        
        logger.info("‚úÖ Handlers configured")
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user = update.effective_user
        await self.save_user_message(user.id, user.username, "/start")
        
        welcome = f"""üéØ **LLMStruct Bot Final**

–ü—Ä–∏–≤–µ—Ç, {user.first_name}!

ü§ñ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å FastAPI —Å–µ—Ä–≤–µ—Ä–æ–º
üìä –ü–∞–º—è—Ç—å –∏ –º–µ—Ç—Ä–∏–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç  
üß† Ollama –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —á–∞—Ç–∞

**–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/status` - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ `/memory` - —Ç–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è
‚Ä¢ `/help` - –ø–æ–º–æ—â—å

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ —Å –ò–ò!"""
        
        try:
            await update.message.reply_text(welcome)
            logger.info(f"üëã Start: {user.username} ({user.id})")
        except Exception as e:
            logger.error(f"‚ùå Failed to send start message: {e}")
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /status"""
        user = update.effective_user
        await self.save_user_message(user.id, user.username, "/status")
        
        status = await self.get_system_status()
        
        if "error" not in status:
            response = f"""‚úÖ **System Status**

üîß API: {status.get('status', 'unknown')}
üì¶ Version: {status.get('api_version', 'unknown')}  
üìä Metrics: {'‚úÖ' if status.get('metrics_enabled') else '‚ùå'}
ü§ñ Ollama: {'‚úÖ' if status.get('ollama_available') else '‚ùå'}
‚è∞ Time: {status.get('timestamp', 'unknown')}"""
        else:
            response = f"‚ùå **API Error**: {status.get('error')}"
        
        try:
            await update.message.reply_text(response)
            logger.info(f"üìä Status: {user.username}")
        except Exception as e:
            logger.error(f"‚ùå Failed to send status: {e}")
    
    async def memory_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /memory"""
        user = update.effective_user
        await self.save_user_message(user.id, user.username, "/memory")
        
        history = await self.get_user_history(user.id, 5)
        
        if history:
            response = "üìö **–¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è:**\n\n"
            for i, msg in enumerate(history[-5:], 1):
                timestamp = msg.get('timestamp', 'unknown')[:16]
                message = msg.get('message', 'no message')[:40] + "..."
                response += f"{i}. `{timestamp}` {message}\n"
        else:
            response = "üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        
        try:
            await update.message.reply_text(response)
            logger.info(f"üß† Memory: {user.username}")
        except Exception as e:
            logger.error(f"‚ùå Failed to send memory: {e}")
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = """üéØ **LLMStruct Bot Help**

**–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
‚Ä¢ `/status` - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ `/memory` - —Ç–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è
‚Ä¢ `/help` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–ß–∞—Ç:**
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –ò–ò!

**–õ–æ–≥–∏:** `logs/telegram_bot_final.log`"""
        
        try:
            await update.message.reply_text(help_text)
            logger.info(f"‚ùì Help: {update.effective_user.username}")
        except Exception as e:
            logger.error(f"‚ùå Failed to send help: {e}")
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        message = update.message.text
        
        logger.info(f"üí¨ Message from {user.username}: {message[:50]}...")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await self.save_user_message(user.id, user.username, message)
        
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –¥—É–º–∞–µ–º
            thinking_msg = await update.message.reply_text("ü§î –î—É–º–∞—é...")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Ollama
            response = await self.chat_with_ollama(message)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º
            await thinking_msg.edit_text(f"ü§ñ {response}")
            
            logger.info(f"‚úÖ Response sent to {user.username}")
            
        except Exception as e:
            logger.error(f"‚ùå Failed to handle message: {e}")
            try:
                await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
            except:
                pass
    
    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"üö® Bot error: {context.error}")
        
        # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø—Ä–∏ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–∫–∞—Ö
        if isinstance(context.error, (NetworkError, TimedOut)):
            logger.info("üîÑ Network error, will retry...")
            await asyncio.sleep(5)
        elif isinstance(context.error, RetryAfter):
            logger.info(f"üïê Rate limited, waiting {context.error.retry_after}s...")
            await asyncio.sleep(context.error.retry_after)
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self.session:
            await self.session.close()
            logger.info("üßπ Session closed")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        print("‚ùå TELEGRAM_BOT_TOKEN not set")
        return 1
    
    bot = FinalLLMStructBot(token)
    
    # –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    commands = [
        BotCommand("start", "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"),
        BotCommand("status", "–°—Ç–∞—Ç—É—Å API —Å–µ—Ä–≤–µ—Ä–∞"),
        BotCommand("memory", "–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"),
        BotCommand("help", "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"),
    ]
    
    logger.info("üöÄ Starting Final LLMStruct Bot...")
    
    try:
        # –£—Å—Ç–æ–π—á–∏–≤—ã–π –∑–∞–ø—É—Å–∫
        bot.application.run_polling(
            drop_pending_updates=True,
            allowed_updates=["message", "callback_query"]
        )
    except KeyboardInterrupt:
        logger.info("üõë Bot stopped by user")
        return 0
    except Exception as e:
        logger.error(f"‚ùå Fatal error: {e}")
        return 1
    finally:
        logger.info("‚úÖ Bot shutdown complete")
        return 0

if __name__ == "__main__":
    exit(main()) 