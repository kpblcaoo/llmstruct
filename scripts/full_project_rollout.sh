#!/bin/bash

# üöÄ FULL PROJECT ROLLOUT SCRIPT
# –ü–æ–ª–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–∫–∞—Ç –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ GitHub

set -e

echo "üöÄ Starting AI-Dogfooding Project Rollout..."
echo "=================================="

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_step() {
    echo -e "${BLUE}[$1/6]${NC} $2"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
    exit 1
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    print_step 1 "Checking dependencies..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
    if ! command -v python3 &> /dev/null; then
        print_error "Python3 is required but not installed"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Git
    if ! command -v git &> /dev/null; then
        print_error "Git is required but not installed"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ GitHub token (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ setup —Å–∫—Ä–∏–ø—Ç)
    if [ ! -f "scripts/setup_github_token.sh" ]; then
        print_error "setup_github_token.sh not found!"
    fi
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ GitHub —Ç–æ–∫–µ–Ω–∞
    print_info "Setting up GitHub token..."
    ./scripts/setup_github_token.sh
    if [ $? -ne 0 ]; then
        print_error "GitHub token setup failed!"
    fi
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ .env –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    if [ -f ".env" ]; then
        source .env
    fi
    
    if [ -z "$GITHUB_TOKEN" ]; then
        print_error "GITHUB_TOKEN is still not available after setup!"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ requests library
    if ! python3 -c "import requests" 2>/dev/null; then
        print_warning "Installing requests library..."
        pip install requests
    fi
    
    print_success "All dependencies are ready"
}

# –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
validate_data() {
    print_step 2 "Validating epic data..."
    
    if [ ! -f "epics/epics_data.json" ]; then
        print_error "epics/epics_data.json not found!"
    fi
    
    if [ ! -f "scripts/validate_epics.py" ]; then
        print_error "scripts/validate_epics.py not found!"
    fi
    
    python3 scripts/validate_epics.py
    if [ $? -ne 0 ]; then
        print_error "Epic validation failed!"
    fi
    
    print_success "Epic data is valid"
}

# –°–æ–∑–¥–∞–Ω–∏–µ GitHub Issues
create_github_issues() {
    print_step 3 "Creating GitHub issues..."
    
    if [ ! -f "scripts/create_github_issues.py" ]; then
        print_error "scripts/create_github_issues.py not found!"
    fi
    
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ bug –≤ —Å–∫—Ä–∏–ø—Ç–µ (owner/repo –≤ URL)
    python3 scripts/create_github_issues.py
    if [ $? -ne 0 ]; then
        print_error "Failed to create GitHub issues!"
    fi
    
    print_success "GitHub issues created successfully"
}

# –°–æ–∑–¥–∞–Ω–∏–µ AI-–≤–µ—Ç–∫–∏
create_ai_branch() {
    print_step 4 "Creating AI development branch..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –º—ã –Ω–µ –≤ ai-–≤–µ—Ç–∫–µ
    current_branch=$(git branch --show-current)
    if [[ $current_branch == ai/* ]]; then
        print_warning "Already in AI branch: $current_branch"
        return
    fi
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π ai-–≤–µ—Ç–∫–∏
    branch_name="ai/dogfood-implementation-$(date +%Y%m%d-%H%M)"
    git checkout -b $branch_name
    
    print_success "Created AI branch: $branch_name"
}

# –ö–æ–º–º–∏—Ç –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
commit_project_files() {
    print_step 5 "Committing project files..."
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    git add epics/
    git add .github/
    git add docs/
    git add scripts/
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ —á—Ç–æ –∫–æ–º–º–∏—Ç–∏—Ç—å
    if git diff --cached --quiet; then
        print_warning "No new files to commit"
        return
    fi
    
    # –ö–æ–º–º–∏—Ç
    git commit -m "üöÄ AI-Dogfooding Project Setup

‚úÖ Created complete epic structure:
- 4 EPICs with 19 detailed tasks
- GitHub issue templates
- Automation scripts
- Documentation

üéØ Ready for AI-powered development!

[AI-Dogfooding] [Project-Setup] [Epic-Structure]"
    
    print_success "Project files committed"
}

# –§–∏–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
show_next_steps() {
    print_step 6 "Project rollout complete!"
    
    echo ""
    echo "üéâ AI-DOGFOODING PROJECT READY!"
    echo "================================"
    echo ""
    echo "üìã WHAT WAS CREATED:"
    echo "  ‚úÖ 4 EPICs with 19 detailed tasks"
    echo "  ‚úÖ GitHub issue templates"
    echo "  ‚úÖ Automation scripts"
    echo "  ‚úÖ Complete documentation"
    echo "  ‚úÖ AI development branch"
    echo ""
    echo "üöÄ NEXT STEPS:"
    echo "  1. Check GitHub issues: https://github.com/$(git config remote.origin.url | sed 's/.*github.com[:/]\(.*\)\.git/\1/')/issues"
    echo "  2. Start first epic: python dogfood.py --epic 1 --task 1"
    echo "  3. Monitor progress: cat epics/README.md"
    echo ""
    echo "üéØ CURRENT BRANCH: $(git branch --show-current)"
    echo "üîó PROJECT STATUS: https://github.com/$(git config remote.origin.url | sed 's/.*github.com[:/]\(.*\)\.git/\1/')/projects"
    echo ""
    print_success "Ready for AI-augmented development!"
}

# –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
main() {
    check_dependencies
    validate_data
    create_github_issues
    create_ai_branch
    commit_project_files
    show_next_steps
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
trap 'echo -e "${RED}‚ùå Script failed at line $LINENO${NC}"' ERR

# –ó–∞–ø—É—Å–∫
main "$@" 