#!/usr/bin/env python3
"""
Boss CLI - –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π CLI –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
–í–∫–ª—é—á–∞–µ—Ç –≤—Å–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ + –±–∏–∑–Ω–µ—Å-–º–æ–¥—É–ª–∏
"""

import sys
import os
import json
import argparse
from pathlib import Path
from typing import Dict, Any, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "src"))

try:
    # –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    from llmstruct.ai_cli_integration import AISelfAwarenessCLIIntegration
    from llmstruct.cli_commands import CommandProcessor
    from llmstruct.cli_config import CLIConfig
    from llmstruct.cli_utils import CLIUtils
    
    # –ò–º–ø–æ—Ä—Ç—ã boss –º–æ–¥—É–ª–µ–π
    from business_planning import BusinessPlanningManager
    from team_management import TeamManagementSystem
    
    IMPORTS_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è Warning: Some imports failed: {e}")
    IMPORTS_AVAILABLE = False


class BossCLI:
    """
    Boss CLI - –ø–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è.
    –í–∫–ª—é—á–∞–µ—Ç –≤—Å–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ + –±–∏–∑–Ω–µ—Å-—Ñ—É–Ω–∫—Ü–∏–∏.
    """
    
    def __init__(self, project_root: str = None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Boss CLI."""
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç—å - –ø–æ–¥–Ω–∏–º–∞–µ–º—Å—è –Ω–∞ 3 —É—Ä–æ–≤–Ω—è –≤—ã—à–µ –æ—Ç .personal/boss/scripts/
        if project_root is None:
            boss_cli_file = Path(__file__).resolve()
            # .personal/boss/scripts/boss_cli.py -> .personal/boss/scripts -> .personal/boss -> .personal -> project_root
            self.project_root = str(boss_cli_file.parent.parent.parent)
        else:
            self.project_root = project_root
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º
        if IMPORTS_AVAILABLE:
            self.ai_integration = AISelfAwarenessCLIIntegration(self.project_root)
            
            config = CLIConfig(self.project_root)
            utils = CLIUtils()
            self.command_processor = CommandProcessor(self.project_root, config, utils)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-—Å–∏—Å—Ç–µ–º
            self.business_manager = BusinessPlanningManager()
            self.team_manager = TeamManagementSystem()
        else:
            self.ai_integration = None
            self.command_processor = None
            self.business_manager = None
            self.team_manager = None
        
        # –ö–æ–º–∞–Ω–¥—ã Boss CLI
        self.boss_commands = {
            # AI Enhancement Commands
            "ai-status": self.cmd_ai_status,
            "ai-audit": self.cmd_ai_audit,
            "ai-context": self.cmd_ai_context,
            "ai-queue": self.cmd_ai_queue,
            "ai-summary": self.cmd_ai_summary,
            
            # Business Management Commands
            "business-roadmap": self.cmd_business_roadmap,
            "financial-plan": self.cmd_financial_plan,
            "strategic-decision": self.cmd_strategic_decision,
            "business-analysis": self.cmd_business_analysis,
            "business-summary": self.cmd_business_summary,
            
            # Team Management Commands
            "team-strategy": self.cmd_team_strategy,
            "team-evaluation": self.cmd_team_evaluation,
            "hiring-plan": self.cmd_hiring_plan,
            "team-analysis": self.cmd_team_analysis,
            "team-report": self.cmd_team_report,
            
            # Technical Commands (–ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø)
            "technical": self.cmd_technical,
            "context-full": self.cmd_context_full,
            "workspace-override": self.cmd_workspace_override,
            
            # Meta Commands
            "help": self.cmd_help,
            "status": self.cmd_boss_status,
            "capabilities": self.cmd_capabilities
        }
    
    def run_interactive(self):
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ Boss CLI."""
        print("üöÄ Boss CLI - –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è")
        print("–î–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ + –±–∏–∑–Ω–µ—Å-–º–æ–¥—É–ª–∏")
        print("–í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–ª–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞\n")
        
        while True:
            try:
                user_input = input("Boss> ").strip()
                
                if user_input.lower() in ['exit', 'quit']:
                    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
                
                if not user_input:
                    continue
                
                self.process_command(user_input)
                
            except KeyboardInterrupt:
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    def process_command(self, command_line: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã."""
        parts = command_line.split()
        if not parts:
            return
        
        cmd = parts[0]
        args = parts[1:] if len(parts) > 1 else []
        
        if cmd in self.boss_commands:
            self.boss_commands[cmd](args)
        elif cmd.startswith('/') and self.command_processor:
            # –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π command processor
            self.command_processor.process_command(command_line[1:])
        else:
            # –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º –∫–∞–∫ –ø—Ä–æ–º–ø—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–π command processor
            if self.command_processor:
                self.command_processor.process_prompt(command_line)
            else:
                print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {cmd}")
    
    # AI Enhancement Commands
    def cmd_ai_status(self, args):
        """AI —Å–∏—Å—Ç–µ–º–∞ —Å—Ç–∞—Ç—É—Å."""
        if not self.ai_integration:
            print("‚ùå AI Integration –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        result = self.ai_integration.integrate_ai_status_command()
        print(json.dumps(result, indent=2, ensure_ascii=False))
    
    def cmd_ai_audit(self, args):
        """AI —Å–∏—Å—Ç–µ–º–∞ –∞—É–¥–∏—Ç."""
        if not self.ai_integration:
            print("‚ùå AI Integration –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        result = self.ai_integration.integrate_ai_audit_command()
        print(json.dumps(result, indent=2, ensure_ascii=False))
    
    def cmd_ai_context(self, args):
        """AI –∫–æ–Ω—Ç–µ–∫—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ."""
        if not self.ai_integration:
            print("‚ùå AI Integration –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        result = self.ai_integration.integrate_ai_context_command()
        print(json.dumps(result, indent=2, ensure_ascii=False))
    
    def cmd_ai_queue(self, args):
        """AI –æ—á–µ—Ä–µ–¥—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥."""
        if not self.ai_integration:
            print("‚ùå AI Integration –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        result = self.ai_integration.integrate_ai_queue_command()
        print(json.dumps(result, indent=2, ensure_ascii=False))
    
    def cmd_ai_summary(self, args):
        """AI —Å–∏—Å—Ç–µ–º–∞ summary."""
        if not self.ai_integration:
            print("‚ùå AI Integration –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        result = self.ai_integration.get_integration_summary()
        print(json.dumps(result, indent=2, ensure_ascii=False))
    
    # Business Management Commands
    def cmd_business_roadmap(self, args):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-—Ä–æ–∞–¥–º–∞–ø–æ–º."""
        if not self.business_manager:
            print("‚ùå Business Manager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        if not args:
            print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: business-roadmap <create|summary>")
            return
        
        action = args[0]
        if action == "create":
            roadmap_data = {
                "title": "Strategic Business Roadmap",
                "objectives": ["Market expansion", "Product development", "Team growth"],
                "timeline": "2025 Q1-Q4",
                "key_metrics": ["Revenue", "User base", "Market share"]
            }
            result = self.business_manager.create_business_roadmap(roadmap_data)
        elif action == "summary":
            result = self.business_manager.get_business_summary()
        else:
            print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
            return
        
        print(json.dumps(result, indent=2, ensure_ascii=False))
    
    def cmd_financial_plan(self, args):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
        if not self.business_manager:
            print("‚ùå Business Manager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        if not args:
            print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: financial-plan <create|analyze>")
            return
        
        action = args[0]
        if action == "create":
            plan_data = {
                "budget_categories": {
                    "development": 200000,
                    "marketing": 100000,
                    "operations": 50000
                },
                "revenue_projections": {
                    "q1": 50000,
                    "q2": 100000,
                    "q3": 150000,
                    "q4": 200000
                },
                "investment_areas": ["R&D", "Marketing", "Infrastructure"]
            }
            result = self.business_manager.create_financial_plan(plan_data)
        elif action == "analyze":
            result = self.business_manager.analyze_business_metrics()
        else:
            print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
            return
        
        print(json.dumps(result, indent=2, ensure_ascii=False))
    
    def cmd_strategic_decision(self, args):
        """–ó–∞–ø–∏—Å—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π."""
        if not self.business_manager:
            print("‚ùå Business Manager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        decision_data = {
            "decision": "Strategic technology pivot",
            "rationale": "Market demand and competitive advantage",
            "impact_level": "high",
            "stakeholders": ["Development team", "Product management"],
            "timeline": "Q2 2025"
        }
        
        result = self.business_manager.record_strategic_decision(decision_data)
        print(json.dumps(result, indent=2, ensure_ascii=False))
    
    def cmd_business_analysis(self, args):
        """–ê–Ω–∞–ª–∏–∑ –±–∏–∑–Ω–µ—Å-–º–µ—Ç—Ä–∏–∫."""
        if not self.business_manager:
            print("‚ùå Business Manager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        result = self.business_manager.analyze_business_metrics()
        print(json.dumps(result, indent=2, ensure_ascii=False))
    
    def cmd_business_summary(self, args):
        """–°–≤–æ–¥–∫–∞ –ø–æ –±–∏–∑–Ω–µ—Å—É."""
        if not self.business_manager:
            print("‚ùå Business Manager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        result = self.business_manager.get_business_summary()
        print(json.dumps(result, indent=2, ensure_ascii=False))
    
    # Team Management Commands
    def cmd_team_strategy(self, args):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π –∫–æ–º–∞–Ω–¥—ã."""
        if not self.team_manager:
            print("‚ùå Team Manager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        strategy_data = {
            "title": "Team Development Strategy",
            "objectives": ["Improve collaboration", "Increase productivity", "Enhance skills"],
            "methods": ["Regular training", "Team building", "Performance reviews"],
            "timeline": "2025"
        }
        
        result = self.team_manager.create_team_strategy(strategy_data)
        print(json.dumps(result, indent=2, ensure_ascii=False))
    
    def cmd_team_evaluation(self, args):
        """–ó–∞–ø–∏—Å—å –æ—Ü–µ–Ω–∫–∏ –∫–æ–º–∞–Ω–¥—ã."""
        if not self.team_manager:
            print("‚ùå Team Manager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        evaluation_data = {
            "evaluation_type": "quarterly_review",
            "period": "Q4 2024",
            "team_performance": "excellent",
            "key_achievements": ["Project delivery", "Process improvement"],
            "areas_for_improvement": ["Documentation", "Testing coverage"],
            "action_items": ["Training sessions", "Process updates"]
        }
        
        result = self.team_manager.record_team_evaluation(evaluation_data)
        print(json.dumps(result, indent=2, ensure_ascii=False))
    
    def cmd_hiring_plan(self, args):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–π–º–∞."""
        if not self.team_manager:
            print("‚ùå Team Manager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        plan_data = {
            "positions": [
                {"role": "Senior Backend Developer", "priority": "high"},
                {"role": "DevOps Engineer", "priority": "medium"},
                {"role": "UI/UX Designer", "priority": "low"}
            ],
            "timeline": "Q1-Q2 2025",
            "budget": 300000,
            "requirements": ["Remote work", "Competitive salary", "Growth opportunities"]
        }
        
        result = self.team_manager.create_hiring_plan(plan_data)
        print(json.dumps(result, indent=2, ensure_ascii=False))
    
    def cmd_team_analysis(self, args):
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã."""
        if not self.team_manager:
            print("‚ùå Team Manager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        result = self.team_manager.analyze_team_performance()
        print(json.dumps(result, indent=2, ensure_ascii=False))
    
    def cmd_team_report(self, args):
        """–û—Ç—á—ë—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ."""
        if not self.team_manager:
            print("‚ùå Team Manager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        result = self.team_manager.generate_team_report()
        print(json.dumps(result, indent=2, ensure_ascii=False))
    
    # Technical Commands
    def cmd_technical(self, args):
        """–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã (–ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø)."""
        if not args:
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:")
            print("- github-sync-enhanced")
            print("- epic-management-full")
            print("- deploy-operations")
            print("- comprehensive-indexing")
            return
        
        tech_cmd = args[0]
        print(f"üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã: {tech_cmd}")
        print("(–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–æ–ª–Ω—ã–º–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏)")
    
    def cmd_context_full(self, args):
        """–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É."""
        print("üß† Context FULL mode –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        print("–î–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ä–µ–∂–∏–º—ã: FULL/FOCUSED/MINIMAL")
        # –ó–¥–µ—Å—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å context orchestrator
    
    def cmd_workspace_override(self, args):
        """Emergency workspace overrides."""
        if not args:
            print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: workspace-override <level>")
            print("–£—Ä–æ–≤–Ω–∏: emergency, admin, override")
            return
        
        level = args[0]
        print(f"‚ö†Ô∏è Workspace override –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {level}")
        print("(–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å workspace management)")
    
    # Meta Commands
    def cmd_capabilities(self, args):
        """–ê–Ω–∞–ª–∏–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å–∏—Å—Ç–µ–º—ã."""
        capabilities = {
            "ai_integration": {
                "available": bool(self.ai_integration),
                "commands": ["ai-status", "ai-audit", "ai-context", "ai-queue", "ai-summary"]
            },
            "business_management": {
                "available": bool(self.business_manager),
                "commands": ["business-roadmap", "financial-plan", "strategic-decision", "business-analysis"]
            },
            "team_management": {
                "available": bool(self.team_manager),
                "commands": ["team-strategy", "team-evaluation", "hiring-plan", "team-analysis", "team-report"]
            },
            "technical_access": {
                "available": bool(self.command_processor),
                "full_system_access": True,
                "context_modes": ["FULL", "FOCUSED", "MINIMAL"],
                "emergency_overrides": True
            }
        }
        
        print(json.dumps(capabilities, indent=2, ensure_ascii=False))
    
    def cmd_boss_status(self, args):
        """–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å Boss CLI."""
        status = {
            "boss_cli_version": "1.0",
            "project_root": self.project_root,
            "imports_available": IMPORTS_AVAILABLE,
            "systems_status": {
                "ai_integration": "‚úÖ" if self.ai_integration else "‚ùå",
                "command_processor": "‚úÖ" if self.command_processor else "‚ùå",
                "business_manager": "‚úÖ" if self.business_manager else "‚ùå",
                "team_manager": "‚úÖ" if self.team_manager else "‚ùå"
            },
            "access_level": "BOSS - Full Access",
            "confidentiality": "boss_only"
        }
        
        print(json.dumps(status, indent=2, ensure_ascii=False))
    
    def cmd_help(self, args):
        """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º Boss CLI."""
        help_text = """
üöÄ Boss CLI - –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è

AI ENHANCEMENT COMMANDS:
  ai-status          - –°—Ç–∞—Ç—É—Å AI —Å–∏—Å—Ç–µ–º—ã
  ai-audit           - –ê—É–¥–∏—Ç AI –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
  ai-context         - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ AI –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
  ai-queue           - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ AI –æ—á–µ—Ä–µ–¥–∏
  ai-summary         - –°–≤–æ–¥–∫–∞ AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏

BUSINESS MANAGEMENT COMMANDS:
  business-roadmap   - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-—Ä–æ–∞–¥–º–∞–ø–æ–º
  financial-plan     - –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
  strategic-decision - –ó–∞–ø–∏—Å—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π
  business-analysis  - –ê–Ω–∞–ª–∏–∑ –±–∏–∑–Ω–µ—Å-–º–µ—Ç—Ä–∏–∫
  business-summary   - –°–≤–æ–¥–∫–∞ –ø–æ –±–∏–∑–Ω–µ—Å—É

TEAM MANAGEMENT COMMANDS:
  team-strategy      - –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∫–æ–º–∞–Ω–¥—ã
  team-evaluation    - –û—Ü–µ–Ω–∫–∞ –∫–æ–º–∞–Ω–¥—ã
  hiring-plan        - –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–π–º–∞
  team-analysis      - –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  team-report        - –û—Ç—á—ë—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ

TECHNICAL COMMANDS (–ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø):
  technical          - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
  context-full       - –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
  workspace-override - Emergency overrides
  /<command>         - –õ—é–±—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å /

META COMMANDS:
  capabilities       - –ê–Ω–∞–ª–∏–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
  status            - –°—Ç–∞—Ç—É—Å Boss CLI
  help              - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
  exit              - –í—ã—Ö–æ–¥

–ü–†–ò–ú–ï–†–´:
  business-roadmap create
  team-evaluation
  ai-status
  /context FULL
  /workspace override emergency
        """
        print(help_text)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    parser = argparse.ArgumentParser(description="Boss CLI - –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è")
    parser.add_argument("--project-root", help="–ü—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞")
    parser.add_argument("--command", help="–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
    
    args = parser.parse_args()
    
    boss_cli = BossCLI(args.project_root)
    
    if args.command:
        boss_cli.process_command(args.command)
    else:
        boss_cli.run_interactive()


if __name__ == "__main__":
    main() 