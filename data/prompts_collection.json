{
  "version": "1.0.0",
  "updated": "2025-05-26T00:35:00Z",
  "prompts": [
    {
      "id": "PROMPT-001",
      "title": "Архивирование project data перед изменениями",
      "description": "Проверь, что перед изменением любого project data JSON-файла создана архивная копия в data/archived_jsons/ и предложи команду для восстановления из git, если архив отсутствует.",
      "tags": ["archive", "workflow", "llm_context"],
      "template": "Перед изменением файла {file} создай архивную копию в data/archived_jsons/. Если архив отсутствует, предложи команду для восстановления из git: git show HEAD:{file} > data/archived_jsons/{file}.archived.json"
    },
    {
      "id": "PROMPT-002",
      "title": "Добавление lessons learned и инсайтов по workflow",
      "description": "После любого нештатного события или улучшения workflow зафиксируй инсайт в insights.json с тегами lessons_learned и workflow.",
      "tags": ["lessons_learned", "workflow", "automation"],
      "template": "Если обнаружена ошибка или улучшение в процессе работы, добавь запись в insights.json: {\"id\": \"INS-XXX\", \"type\": \"workflow_lesson\", ...} с тегами lessons_learned, workflow."
    },
    {
      "id": "PROMPT-003",
      "title": "Связывание задач, идей, инсайтов и PR",
      "description": "При добавлении новой задачи, идеи, инсайта или PR обязательно указывай поля epic, tags и related_* для сквозной навигации и автоматизации.",
      "tags": ["workflow", "llm_context", "automation"],
      "template": "Добавь к объекту поля: \"epic\": \"meta_workflow_management\", \"tags\": [...], \"related_tasks\": [...], \"related_ideas\": [...], \"related_insights\": [...], \"related_prs\": [...] (по необходимости)."
    },
    {
      "id": "PROMPT-004",
      "title": "Генерация CLI-команд для пользователя",
      "description": "После любого изменения project data предложи пользователю CLI-команды для проверки, фильтрации или автоматизации.",
      "tags": ["cli", "user_experience", "workflow"],
      "template": "После изменения файла {file} предложи команду для проверки: python scripts/epic_roadmap_manager.py epic --epic-id meta_workflow_management или аналогичную для фильтрации/отображения."
    },
    {
      "id": "PROMPT-005",
      "title": "Документирование best practices и справочников",
      "description": "При внедрении новых практик или меток обязательно обновляй tags_reference.json и/или раздел best practices в README.",
      "tags": ["documentation", "best_practices", "tags"],
      "template": "После добавления новой метки или практики обнови tags_reference.json: {\"tag\": \"new_tag\", ...} и/или раздел best practices в документации."
    },
    {
      "id": "epic_completion_standard",
      "title": "Стандартизированный процесс завершения эпика",
      "description": "Перед завершением эпика: финальный коммит, summary, анализ процесса, предложения по улучшениям, оформление PR по шаблону, архивация логов. Все действия фиксируются в event_log и tech_log.",
      "tags": ["meta", "workflow", "epic", "standards"],
      "template": "1. Финальный коммит\n2. Summary (что реализовано, ключевые файлы, lessons learned, рекомендации)\n3. Анализ процесса\n4. Оформление PR по шаблону\n5. Архивация логов эпика (перемещение/zip)\n6. Все действия фиксируются в event_log и tech_log."
    },
    {
      "id": "feature_justification_and_suggestion_v2",
      "title": "Обновлённый анализ целесообразности новых функций",
      "description": "AI не реализует новые функции без согласования, если нет явного запроса или сценария. В случае сомнений — фиксирует идею и выносит на согласование.",
      "tags": ["workflow", "feature_analysis", "best_practices", "automation"],
      "template": "Перед реализацией новой функции AI анализирует её необходимость. Если нет явного запроса — фиксирует идею в ideas.json и выносит на согласование с человеком."
    },
    {
      "id": "epic_retrospective_automation",
      "title": "Автоматизация ретроспективы по завершении эпика",
      "description": "AI по завершении каждого эпика обязан предложить summary, lessons learned, рекомендации и оформить их в insights.json.",
      "tags": ["workflow", "retrospective", "automation", "epic"],
      "template": "После завершения эпика AI формирует summary, lessons learned, рекомендации и добавляет их в insights.json."
    },
    {
      "id": "epic_pr_template",
      "title": "Шаблон оформления PR по эпику",
      "description": "В summary PR включать: что реализовано, ссылки на ключевые файлы, lessons learned, рекомендации.",
      "tags": ["workflow", "pr", "epic", "documentation"],
      "template": "epic(<epic_id>): summary изменений\n- Что реализовано\n- Ключевые файлы\n- Lessons learned\n- Рекомендации\n- (Опционально) ссылки на инсайты, идеи, задачи"
    },
    {
      "id": "epic_full_setup_standard",
      "title": "Стандарт оформления эпика (ветка, логи, инициирующая идея и задача)",
      "description": "При старте эпика: создать отдельную ветку от develop, оформить event_log и tech_log, добавить инициирующую идею и задачу в ideas.json и tasks.json.",
      "tags": ["meta", "workflow", "epic", "standards"],
      "template": "1. Создать ветку epic/<epic_id>-to-develop от develop\n2. Оформить event_log и tech_log для эпика\n3. Добавить инициирующую идею в ideas.json\n4. Добавить задачу в tasks.json\n5. Все действия фиксировать в логах"
    }
  ]
} 