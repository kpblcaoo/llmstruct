{
  "version": "1.0.0",
  "metadata": {
    "description": "Comprehensive developer onboarding guide for llmstruct project",
    "created_at": "2025-05-28T00:00:00Z",
    "target_audience": ["new_developers", "returning_contributors", "project_maintainers"],
    "estimated_setup_time": "15-30 minutes"
  },

  "quick_start": {
    "description": "Get up and running in under 5 minutes",
    "prerequisites": ["Python 3.8+", "Git", "Virtual environment support"],
    "commands": [
      {
        "step": 1,
        "description": "Clone and setup environment",
        "commands": [
          "git clone <repository_url>",
          "cd llmstruct",
          "python -m venv venv",
          "source venv/bin/activate  # Linux/Mac",
          "# OR: venv\\Scripts\\activate  # Windows",
          "pip install -r requirements.txt"
        ]
      },
      {
        "step": 2,
        "description": "Verify AI system health",
        "commands": [
          "python run_ai_diagnostics.py",
          "# Should show: ðŸŽ‰ ALL DIAGNOSTICS PASSED!"
        ]
      },
      {
        "step": 3,
        "description": "Explore the system",
        "commands": [
          "python -m llmstruct.cli --help",
          "python run_ai_diagnostics.py help"
        ]
      }
    ]
  },

  "development_workflow": {
    "daily_startup": {
      "description": "Recommended daily startup routine",
      "commands": [
        "cd llmstruct",
        "source venv/bin/activate",
        "python run_ai_diagnostics.py optimize",
        "git status",
        "git pull origin main"
      ],
      "expected_output": "System health check and optimization suggestions"
    },
    
    "before_coding": {
      "description": "Pre-development checks",
      "steps": [
        {
          "action": "Run health check",
          "command": "python run_ai_diagnostics.py health",
          "purpose": "Ensure all integrations are working"
        },
        {
          "action": "Check system status",
          "command": "python -c \"from llmstruct.ai_self_awareness import SystemCapabilityDiscovery; print(SystemCapabilityDiscovery('.').get_cursor_status_report())\"",
          "purpose": "Verify AI system readiness"
        },
        {
          "action": "Review current context",
          "files_to_check": ["data/init_enhanced.json", "data/tasks.json", "struct.json"],
          "purpose": "Understand current project state"
        }
      ]
    },

    "development_cycle": {
      "description": "Recommended development cycle",
      "phases": [
        {
          "phase": "Planning",
          "actions": [
            "Review data/tasks.json for current priorities",
            "Check data/cursor/cursor_personal_bridge.json for goal alignment",
            "Run: python run_ai_diagnostics.py optimize"
          ]
        },
        {
          "phase": "Implementation",
          "actions": [
            "Use Cursor IDE with llmstruct integration",
            "Follow 'transform rather than delete' philosophy",
            "Test changes with: python run_ai_diagnostics.py component <component_name>"
          ]
        },
        {
          "phase": "Testing",
          "actions": [
            "Run: python run_ai_diagnostics.py stress",
            "Verify: python run_ai_diagnostics.py",
            "Check integration: python run_ai_diagnostics.py health"
          ]
        },
        {
          "phase": "Documentation",
          "actions": [
            "Update relevant JSON files in data/",
            "Run: python -m llmstruct.cli scan",
            "Update struct.json if needed"
          ]
        }
      ]
    },

    "before_commit": {
      "description": "Pre-commit checklist",
      "required_checks": [
        {
          "check": "Full diagnostics pass",
          "command": "python run_ai_diagnostics.py",
          "expected": "100% success rate"
        },
        {
          "check": "No linting errors",
          "command": "python -m flake8 src/ --max-line-length=120",
          "expected": "No output (clean)"
        },
        {
          "check": "JSON files valid",
          "command": "python -c \"import json; [json.load(open(f)) for f in ['data/init_enhanced.json', 'data/cursor/cursor_context_config.json']]\"",
          "expected": "No exceptions"
        },
        {
          "check": "Structure updated",
          "command": "python -m llmstruct.cli scan",
          "expected": "struct.json updated if code changed"
        }
      ]
    }
  },

  "project_structure_guide": {
    "description": "Understanding the llmstruct architecture",
    "core_directories": {
      "src/llmstruct/": {
        "purpose": "Main Python package",
        "key_files": [
          "ai_self_awareness.py - AI system introspection",
          "cursor_integration.py - Cursor IDE integration", 
          "context_orchestrator.py - Smart context management",
          "cli.py - Command line interface",
          "copilot.py - VS Code Copilot integration"
        ]
      },
      "data/": {
        "purpose": "JSON ecosystem for AI context",
        "key_files": [
          "init_enhanced.json - Master context file",
          "cursor/ - Cursor IDE specific configs",
          "tasks.json - Project task management",
          "insights.json - AI-generated insights"
        ]
      },
      "schema/": {
        "purpose": "JSON schema validation",
        "key_files": [
          "llmstruct_schema.json - Main validation schema",
          "core.json - Core structure definitions"
        ]
      }
    },

    "json_ecosystem_flow": {
      "description": "How JSON files work together",
      "flow": [
        "init_enhanced.json â†’ Provides master context and orchestration rules",
        "struct.json â†’ Contains complete codebase analysis",
        "cursor/cursor_context_config.json â†’ Optimizes context for Cursor IDE",
        "cursor/cursor_personal_bridge.json â†’ Aligns with business goals",
        "tasks.json â†’ Manages development priorities",
        "insights.json â†’ Stores AI-generated improvements"
      ]
    }
  },

  "ai_integration_guide": {
    "description": "Working with the AI-enhanced development environment",
    "cursor_integration": {
      "setup": [
        "Ensure data/cursor/ directory exists with config files",
        "Run: python run_ai_diagnostics.py health",
        "Verify Cursor can access llmstruct context"
      ],
      "usage_patterns": [
        {
          "scenario": "Code analysis",
          "context_files": ["struct.json", "init_enhanced.json"],
          "ai_preference": "grok",
          "example_query": "Analyze the AI self-awareness system architecture"
        },
        {
          "scenario": "Personal planning",
          "context_files": ["cursor_personal_bridge.json"],
          "ai_preference": "claude",
          "example_query": "What features should I prioritize for monetization?"
        },
        {
          "scenario": "Documentation",
          "context_files": ["init_enhanced.json", "docs.json"],
          "ai_preference": "claude",
          "example_query": "Document the context orchestration system"
        }
      ]
    },

    "ai_delegation": {
      "description": "When to use which AI model",
      "grok_optimal_for": [
        "Code analysis and debugging",
        "Performance optimization",
        "Creative technical solutions",
        "Complex architecture decisions"
      ],
      "claude_optimal_for": [
        "Documentation and explanations",
        "Personal planning alignment",
        "Strategic analysis",
        "Privacy-sensitive tasks"
      ]
    }
  },

  "troubleshooting": {
    "common_issues": [
      {
        "issue": "Diagnostics failing",
        "symptoms": ["run_ai_diagnostics.py shows failures", "Import errors"],
        "solutions": [
          "Check virtual environment is activated",
          "Reinstall requirements: pip install -r requirements.txt",
          "Verify Python path: python -c \"import sys; print(sys.path)\""
        ]
      },
      {
        "issue": "Cursor integration not working",
        "symptoms": ["Context optimization fails", "AI delegation errors"],
        "solutions": [
          "Verify config files exist: ls data/cursor/",
          "Check JSON validity: python -m json.tool data/cursor/cursor_context_config.json",
          "Run: python run_ai_diagnostics.py component context_orchestrator"
        ]
      },
      {
        "issue": "Performance issues",
        "symptoms": ["Slow diagnostics", "High system load"],
        "solutions": [
          "Run: python run_ai_diagnostics.py optimize",
          "Check system resources: python run_ai_diagnostics.py monitor",
          "Clear cache: rm -rf data/ai_self_awareness/cache/"
        ]
      }
    ],

    "diagnostic_commands": {
      "system_health": "python run_ai_diagnostics.py",
      "specific_component": "python run_ai_diagnostics.py component <name>",
      "performance_check": "python run_ai_diagnostics.py stress",
      "optimization_hints": "python run_ai_diagnostics.py optimize",
      "continuous_monitoring": "python run_ai_diagnostics.py monitor"
    }
  },

  "contribution_guidelines": {
    "code_style": {
      "python": [
        "Follow PEP 8 with 120 character line limit",
        "Use type hints for function signatures",
        "Document classes and functions with docstrings",
        "Prefer composition over inheritance"
      ],
      "json": [
        "Use 2-space indentation",
        "Include metadata section in all JSON files",
        "Follow schema validation where available",
        "Use descriptive keys and comments"
      ]
    },

    "testing_requirements": [
      "All new features must pass full diagnostics suite",
      "Add component-specific tests to run_ai_diagnostics.py",
      "Update JSON schemas when adding new data structures",
      "Verify Cursor integration works with changes"
    ],

    "documentation_standards": [
      "Update relevant JSON files in data/ directory",
      "Add examples to developer_onboarding.json",
      "Include usage patterns in cursor integration configs",
      "Document AI delegation preferences for new features"
    ]
  },

  "advanced_workflows": {
    "ai_assisted_development": {
      "description": "Leveraging AI for enhanced productivity",
      "workflow": [
        "Start with: python run_ai_diagnostics.py optimize",
        "Use Cursor with llmstruct context for AI-guided coding",
        "Test with: python run_ai_diagnostics.py component <component>",
        "Get suggestions: Query AI about goal alignment",
        "Validate with: python run_ai_diagnostics.py health"
      ]
    },

    "multi_ai_coordination": {
      "description": "Using multiple AI models effectively",
      "strategy": [
        "Use Grok for technical implementation and debugging",
        "Use Claude for documentation and strategic planning",
        "Leverage AI delegation system in cursor_integration.py",
        "Monitor delegation success with diagnostics"
      ]
    },

    "continuous_improvement": {
      "description": "System self-optimization workflow",
      "process": [
        "Run daily: python run_ai_diagnostics.py optimize",
        "Review suggestions and implement improvements",
        "Update JSON configs based on learnings",
        "Share insights in data/insights.json",
        "Measure impact with performance benchmarks"
      ]
    }
  },

  "resources": {
    "key_files_to_understand": [
      "data/init_enhanced.json - Master context and project overview",
      "src/llmstruct/ai_self_awareness.py - Core AI introspection",
      "src/llmstruct/cursor_integration.py - Cursor IDE integration",
      "run_ai_diagnostics.py - Comprehensive testing suite"
    ],

    "useful_commands": {
      "project_overview": "python -c \"from llmstruct.ai_self_awareness import SystemCapabilityDiscovery; print(SystemCapabilityDiscovery('.').get_comprehensive_ai_status())\"",
      "context_status": "python -c \"from llmstruct.context_orchestrator import create_context_orchestrator; print(create_context_orchestrator('.').get_status())\"",
      "cursor_status": "python -c \"from llmstruct.cursor_integration import create_cursor_integration; print(create_cursor_integration('.').get_comprehensive_cursor_response('system status'))\"",
      "full_health_check": "python run_ai_diagnostics.py"
    },

    "learning_path": [
      "1. Run quick_start commands to get system working",
      "2. Explore run_ai_diagnostics.py modes to understand capabilities",
      "3. Read data/init_enhanced.json to understand project vision",
      "4. Experiment with Cursor integration using provided configs",
      "5. Contribute improvements following the development workflow"
    ]
  }
} 