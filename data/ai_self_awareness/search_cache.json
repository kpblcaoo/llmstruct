{"metadata": {"project_name": "llmstruct", "description": "Python project analysis for llmstruct", "language": "python", "version": "1.0.0", "authors": [{"name": "Universal Converter", "tool": "llmstruct-universal-converter"}], "goals": [], "stats": {"modules_count": 272, "functions_count": 1857, "classes_count": 183, "total_lines": 0}, "converter_config": {"include_ranges": true, "include_hashes": true, "include_tests": true}}, "toc": [{"module_id": "test_duplication_analysis", "path": "test_duplication_analysis.py", "category": "test", "functions": 1, "classes": 0, "summary": "Test script for analyzing function duplication using struct.json"}, {"module_id": "test_cli_integration", "path": "test_cli_integration.py", "category": "test", "functions": 1, "classes": 0, "summary": "Test script for CLI integration with new commands"}, {"module_id": "test_multi_llm_comparison", "path": "test_multi_llm_comparison.py", "category": "test", "functions": 8, "classes": 0, "summary": "Multi-LLM Comparison Test - \u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u0440\u0430\u0437\u043d\u044b\u0435 LLM API \u0441 \u043d\u0430\u0448\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439\n\u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c: Ollama, Grok, Anth"}, {"module_id": "test_final_validation", "path": "test_final_validation.py", "category": "test", "functions": 5, "classes": 0, "summary": "Final validation test for AI self-awareness system.\nTests all components after struct.json and cache"}, {"module_id": "test_efficiency", "path": "test_efficiency.py", "category": "test", "functions": 12, "classes": 0, "summary": ""}, {"module_id": "start_development", "path": "start_development.py", "category": "core", "functions": 12, "classes": 0, "summary": "LLMStruct Development Startup Script\nConvenient one-command startup for daily development workflow.\n"}, {"module_id": "test_cli", "path": "test_cli.py", "category": "test", "functions": 0, "classes": 0, "summary": ""}, {"module_id": "run_ai_diagnostics", "path": "run_ai_diagnostics.py", "category": "core", "functions": 19, "classes": 0, "summary": "Comprehensive AI Self-Awareness Diagnostics Runner\nEnhanced with Cursor integration testing, multi-A"}, {"module_id": "test_ai_cli_integration", "path": "test_ai_cli_integration.py", "category": "test", "functions": 14, "classes": 2, "summary": "AI CLI Integration Testing Suite\n\nAdvanced testing framework to validate how AI agents can populate "}, {"module_id": "collect_json", "path": "collect_json.py", "category": "core", "functions": 1, "classes": 0, "summary": ""}, {"module_id": "test_audit", "path": "test_audit.py", "category": "test", "functions": 1, "classes": 0, "summary": "Test script for audit functionality."}, {"module_id": "collector", "path": "collector.py", "category": "core", "functions": 3, "classes": 0, "summary": ""}, {"module_id": "debug_terminal", "path": "debug_terminal.py", "category": "core", "functions": 2, "classes": 0, "summary": "Debug Terminal Script - Fallback for when terminal output is not visible\nSaves all output to files f"}, {"module_id": "test_strict_mode", "path": "test_strict_mode.py", "category": "test", "functions": 1, "classes": 0, "summary": "\u0422\u0435\u0441\u0442 [strict] \u0440\u0435\u0436\u0438\u043c\u0430 \u0434\u043b\u044f \u044d\u043a\u0441\u0442\u0440\u0435\u043d\u043d\u043e\u0439 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438"}, {"module_id": "test_debug_analysis", "path": "test_debug_analysis.py", "category": "test", "functions": 1, "classes": 0, "summary": "Quick debug test for duplication analysis"}, {"module_id": "final_system_check", "path": "final_system_check.py", "category": "core", "functions": 1, "classes": 0, "summary": "Final System Status Check - LLMStruct Modular CLI Integration\nComprehensive validation of all comple"}, {"module_id": "monitor_system", "path": "monitor_system.py", "category": "core", "functions": 2, "classes": 0, "summary": "System Monitor - Continuous logging for debugging terminal issues\nRuns in background and logs system"}, {"module_id": "test_deep_integration", "path": "test_deep_integration.py", "category": "test", "functions": 4, "classes": 0, "summary": "Deep Integration Test - \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0420\u0415\u0410\u041b\u042c\u041d\u041e\u0415 \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\n\u0416\u0435\u0441\u0442\u043a\u0438\u0439 \u0442\u0435\u0441\u0442: \u0447\u0438\u0442\u0430\u0435\u0442 \u043b\u0438 AI \u0444\u0430\u0439\u043b\u044b \u0438 \u043c\u043e\u0436\u0435"}, {"module_id": "test_english_comparison", "path": "test_english_comparison.py", "category": "test", "functions": 4, "classes": 0, "summary": "English vs Russian Comparison - \u0422\u0435\u0441\u0442 \u044f\u0437\u044b\u043a\u0430 \u0441 \u043d\u0430\u0448\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439\n\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043b\u0438 \u043b\u0443\u0447\u0448\u0435 \u043d\u0430 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u043e"}, {"module_id": "board_cli", "path": "board_cli.py", "category": "core", "functions": 4, "classes": 0, "summary": "CLI Kanban Board for llmstruct tasks and ideas\n- Reads data/tasks.json and data/ideas.json\n- Shows b"}, {"module_id": "test_ai_cli_debug", "path": "test_ai_cli_debug.py", "category": "test", "functions": 2, "classes": 0, "summary": "Simple test for AI CLI Integration - Debug Version"}, {"module_id": "final_system_validation", "path": "final_system_validation.py", "category": "core", "functions": 1, "classes": 0, "summary": "Final system validation script for LLMStruct Modular CLI Integration"}, {"module_id": "test_enhanced_ai_awareness", "path": "test_enhanced_ai_awareness.py", "category": "test", "functions": 1, "classes": 0, "summary": "Test script for AI Self-Awareness Enhancement with Unused Function Integration"}, {"module_id": "force_ai_integration", "path": "force_ai_integration.py", "category": "core", "functions": 2, "classes": 0, "summary": "Force AI Integration Script\nInitializes middleware and monitoring to ensure AI uses llmstruct system"}, {"module_id": "validate_schemas", "path": "validate_schemas.py", "category": "core", "functions": 3, "classes": 1, "summary": "JSON Schema Validation Script for llmstruct\nValidates all enhanced JSON files against their appropri"}, {"module_id": "test_context_orchestration", "path": "test_context_orchestration.py", "category": "test", "functions": 23, "classes": 2, "summary": "LLM Context Orchestration Testing Suite\n\nComprehensive testing framework for validating context mode"}, {"module_id": "test_export", "path": "test_export.py", "category": "test", "functions": 0, "classes": 0, "summary": ""}, {"module_id": "test_modular_cli", "path": "test_modular_cli.py", "category": "test", "functions": 2, "classes": 0, "summary": "Test script for modular CLI structure"}, {"module_id": "validate_sessions", "path": "validate_sessions.py", "category": "core", "functions": 3, "classes": 1, "summary": "Session Schema Validation Script for llmstruct\nValidates session management JSON files against their"}, {"module_id": "test_ai_cli_simple", "path": "test_ai_cli_simple.py", "category": "test", "functions": 1, "classes": 0, "summary": "Simple AI CLI Integration Test\n\nQuick validation of AI agent CLI population capabilities."}, {"module_id": "verify_llm_response", "path": "verify_llm_response.py", "category": "core", "functions": 6, "classes": 0, "summary": ""}, {"module_id": "test_real_llm_integration", "path": "test_real_llm_integration.py", "category": "test", "functions": 8, "classes": 1, "summary": "Real LLM Integration Test\nTests our AI middleware with actual LLM API calls to remote ollama."}, {"module_id": "test_transpiler_demo", "path": "test_transpiler_demo.py", "category": "test", "functions": 2, "classes": 0, "summary": "Demo script for AI Transpiler\nCreates a small Python project and transpiles it to Go"}, {"module_id": "test_cli_demo", "path": "test_cli_demo.py", "category": "test", "functions": 1, "classes": 0, "summary": "Quick CLI test to demonstrate new commands"}, {"module_id": "test_ai_bridge", "path": "test_ai_bridge.py", "category": "test", "functions": 2, "classes": 0, "summary": "Test AI Bridge functionality - bypassing Cursor terminal issues"}, {"module_id": "examples.python_project_utils", "path": "examples/python_project_utils.py", "category": "core", "functions": 2, "classes": 0, "summary": "Utility functions for the sample project."}, {"module_id": "examples.python_project_main", "path": "examples/python_project_main.py", "category": "core", "functions": 2, "classes": 1, "summary": "Main module for the sample project."}, {"module_id": "docs.test_self_run", "path": "docs/test_self_run.py", "category": "test", "functions": 5, "classes": 0, "summary": ""}, {"module_id": "docs.cache", "path": "docs/cache.py", "category": "core", "functions": 6, "classes": 1, "summary": ""}, {"module_id": "docs.self_run", "path": "docs/self_run.py", "category": "core", "functions": 2, "classes": 0, "summary": ""}, {"module_id": "docs.json_selector", "path": "docs/json_selector.py", "category": "core", "functions": 2, "classes": 0, "summary": ""}, {"module_id": "docs.cli", "path": "docs/cli.py", "category": "core", "functions": 12, "classes": 0, "summary": ""}, {"module_id": "temp.quick_restore", "path": "temp/quick_restore.py", "category": "core", "functions": 7, "classes": 0, "summary": "Quick AI Context Restoration Script\nRun this after Cursor restart to verify system state and get imm"}, {"module_id": "temp.update-singbox.logging_setup", "path": "temp/update-singbox/logging_setup.py", "category": "core", "functions": 2, "classes": 0, "summary": ""}, {"module_id": "temp.update-singbox.install_wizard", "path": "temp/update-singbox/install_wizard.py", "category": "core", "functions": 16, "classes": 1, "summary": ""}, {"module_id": "temp.update-singbox.update_singbox", "path": "temp/update-singbox/update_singbox.py", "category": "core", "functions": 3, "classes": 0, "summary": "Update sing-box configuration from a remote JSON source.\n\nThis script fetches proxy configurations f"}, {"module_id": "temp.update-singbox.utils.callgraph", "path": "temp/update-singbox/utils/callgraph.py", "category": "core", "functions": 5, "classes": 1, "summary": ""}, {"module_id": "temp.update-singbox.utils.genstruct", "path": "temp/update-singbox/utils/genstruct.py", "category": "core", "functions": 5, "classes": 0, "summary": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b Python-\u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0432 JSON \u0441 \u0440\u0435\u0436\u0438\u043c\u0430\u043c\u0438 compact \u0438 detailed."}, {"module_id": "temp.update-singbox.modules.config_fetch", "path": "temp/update-singbox/modules/config_fetch.py", "category": "core", "functions": 2, "classes": 0, "summary": ""}, {"module_id": "temp.update-singbox.modules.__init__", "path": "temp/update-singbox/modules/__init__.py", "category": "cli", "functions": 0, "classes": 0, "summary": ""}, {"module_id": "temp.update-singbox.modules.protocol_validation", "path": "temp/update-singbox/modules/protocol_validation.py", "category": "core", "functions": 1, "classes": 0, "summary": ""}, {"module_id": "temp.update-singbox.modules.config_generate", "path": "temp/update-singbox/modules/config_generate.py", "category": "core", "functions": 1, "classes": 0, "summary": ""}, {"module_id": "temp.update-singbox.modules.utils", "path": "temp/update-singbox/modules/utils.py", "category": "core", "functions": 1, "classes": 0, "summary": ""}, {"module_id": "temp.update-singbox.modules.server_management", "path": "temp/update-singbox/modules/server_management.py", "category": "core", "functions": 12, "classes": 0, "summary": ""}, {"module_id": "temp.update-singbox.modules.service_manage", "path": "temp/update-singbox/modules/service_manage.py", "category": "core", "functions": 1, "classes": 0, "summary": ""}, {"module_id": "temp.update-singbox.modules.module_installer", "path": "temp/update-singbox/modules/module_installer.py", "category": "core", "functions": 1, "classes": 0, "summary": ""}, {"module_id": ".personal.commercial_planning", "path": ".personal/commercial_planning.py", "category": "core", "functions": 0, "classes": 0, "summary": ""}, {"module_id": ".personal.boss.scripts.boss_cli", "path": ".personal/boss/scripts/boss_cli.py", "category": "core", "functions": 25, "classes": 1, "summary": "Boss CLI - \u041f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 CLI \u0434\u043b\u044f \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f\n\u0412\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432\u0441\u0435 \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 + \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u043e"}, {"module_id": ".personal.boss.scripts.team_management", "path": ".personal/boss/scripts/team_management.py", "category": "core", "functions": 13, "classes": 1, "summary": "Team Management Module\n\u041c\u043e\u0434\u0443\u043b\u044c \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439, \u043e\u0446\u0435\u043d\u043a\u0438 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432 \u0438 HR-\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432.\n\u0414\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0442"}, {"module_id": ".personal.boss.scripts.business_planning", "path": ".personal/boss/scripts/business_planning.py", "category": "core", "functions": 9, "classes": 1, "summary": "Business Planning Module\n\u041c\u043e\u0434\u0443\u043b\u044c \u0434\u043b\u044f \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430.\n\u0414\u043e\u0441"}, {"module_id": ".personal.boss.scripts.__init__", "path": ".personal/boss/scripts/__init__.py", "category": "cli", "functions": 0, "classes": 0, "summary": ""}, {"module_id": "backup_before_separation_20250529_152219.docs.test_self_run", "path": "backup_before_separation_20250529_152219/docs/test_self_run.py", "category": "test", "functions": 5, "classes": 0, "summary": ""}, {"module_id": "backup_before_separation_20250529_152219.docs.cache", "path": "backup_before_separation_20250529_152219/docs/cache.py", "category": "core", "functions": 6, "classes": 1, "summary": ""}, {"module_id": "backup_before_separation_20250529_152219.docs.self_run", "path": "backup_before_separation_20250529_152219/docs/self_run.py", "category": "core", "functions": 2, "classes": 0, "summary": ""}, {"module_id": "backup_before_separation_20250529_152219.docs.json_selector", "path": "backup_before_separation_20250529_152219/docs/json_selector.py", "category": "core", "functions": 2, "classes": 0, "summary": ""}, {"module_id": "backup_before_separation_20250529_152219.docs.cli", "path": "backup_before_separation_20250529_152219/docs/cli.py", "category": "core", "functions": 12, "classes": 0, "summary": ""}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.workflow_orchestrator", "path": "backup_before_separation_20250529_152219/src/llmstruct/workflow_orchestrator.py", "category": "core", "functions": 27, "classes": 5, "summary": "AI Workflow Orchestrator - Integration Layer for Existing llmstruct Architecture\nExtends CopilotCont"}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.cli_config", "path": "backup_before_separation_20250529_152219/src/llmstruct/cli_config.py", "category": "core", "functions": 18, "classes": 1, "summary": "CLI configuration management."}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.ai_self_monitor", "path": "backup_before_separation_20250529_152219/src/llmstruct/ai_self_monitor.py", "category": "core", "functions": 16, "classes": 4, "summary": "AI Self-Monitoring System\nTracks AI usage patterns and ensures proper llmstruct integration."}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.grok", "path": "backup_before_separation_20250529_152219/src/llmstruct/grok.py", "category": "core", "functions": 3, "classes": 1, "summary": ""}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.cli_commands", "path": "backup_before_separation_20250529_152219/src/llmstruct/cli_commands.py", "category": "core", "functions": 22, "classes": 1, "summary": "CLI command processing and handlers."}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.context_orchestrator", "path": "backup_before_separation_20250529_152219/src/llmstruct/context_orchestrator.py", "category": "core", "functions": 20, "classes": 5, "summary": "Smart Context Orchestration for LLMStruct\nOptimizes context loading for different LLM usage scenario"}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.__init__", "path": "backup_before_separation_20250529_152219/src/llmstruct/__init__.py", "category": "cli", "functions": 0, "classes": 0, "summary": ""}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.ai_cli_integration", "path": "backup_before_separation_20250529_152219/src/llmstruct/ai_cli_integration.py", "category": "core", "functions": 14, "classes": 1, "summary": "AI Self-Awareness CLI Integration Module\nIntegrates unused CLI functions into the AI self-awareness "}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.__main__", "path": "backup_before_separation_20250529_152219/src/llmstruct/__main__.py", "category": "cli", "functions": 0, "classes": 0, "summary": ""}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.cli_utils", "path": "backup_before_separation_20250529_152219/src/llmstruct/cli_utils.py", "category": "core", "functions": 13, "classes": 1, "summary": "CLI utility functions."}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.copilot", "path": "backup_before_separation_20250529_152219/src/llmstruct/copilot.py", "category": "core", "functions": 26, "classes": 5, "summary": "LLMStruct Copilot Integration Module\nProvides context-aware development assistance with hybrid copil"}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.gh_view", "path": "backup_before_separation_20250529_152219/src/llmstruct/gh_view.py", "category": "core", "functions": 9, "classes": 1, "summary": "GitHub visualization/graph feature (gh-view-v1)\nExport consolidated tasks/ideas from JSON files to G"}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.llm_client", "path": "backup_before_separation_20250529_152219/src/llmstruct/llm_client.py", "category": "core", "functions": 6, "classes": 1, "summary": ""}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.ai_workflow_middleware", "path": "backup_before_separation_20250529_152219/src/llmstruct/ai_workflow_middleware.py", "category": "core", "functions": 22, "classes": 4, "summary": "AI Workflow Middleware - Forces AI Integration with LLMStruct\nIntercepts all AI requests and ensures"}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.ai_self_awareness", "path": "backup_before_separation_20250529_152219/src/llmstruct/ai_self_awareness.py", "category": "core", "functions": 47, "classes": 8, "summary": "AI Self-Awareness Enhancement Module\nProvides comprehensive system introspection and capability disc"}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.cache", "path": "backup_before_separation_20250529_152219/src/llmstruct/cache.py", "category": "core", "functions": 6, "classes": 1, "summary": ""}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.self_run", "path": "backup_before_separation_20250529_152219/src/llmstruct/self_run.py", "category": "core", "functions": 2, "classes": 0, "summary": ""}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.cursor_ai_bridge", "path": "backup_before_separation_20250529_152219/src/llmstruct/cursor_ai_bridge.py", "category": "core", "functions": 21, "classes": 1, "summary": "Cursor AI Bridge - API Layer for AI Assistant Integration\nProvides CLI and HTTP endpoints so Cursor "}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.transpiler", "path": "backup_before_separation_20250529_152219/src/llmstruct/transpiler.py", "category": "core", "functions": 10, "classes": 3, "summary": "AI-Powered Universal Transpiler\nConverts entire codebases from one language to another using LLM ana"}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.json_selector", "path": "backup_before_separation_20250529_152219/src/llmstruct/json_selector.py", "category": "core", "functions": 2, "classes": 0, "summary": ""}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.cli", "path": "backup_before_separation_20250529_152219/src/llmstruct/cli.py", "category": "core", "functions": 18, "classes": 0, "summary": "LLMStruct CLI - Main entry point for the command-line interface."}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.cursor_integration", "path": "backup_before_separation_20250529_152219/src/llmstruct/cursor_integration.py", "category": "core", "functions": 22, "classes": 6, "summary": "Cursor IDE Integration Module\nProvides seamless integration between llmstruct AI capabilities and Cu"}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.cli_core", "path": "backup_before_separation_20250529_152219/src/llmstruct/cli_core.py", "category": "core", "functions": 6, "classes": 1, "summary": "Core CLI functionality and main loop."}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.workspace", "path": "backup_before_separation_20250529_152219/src/llmstruct/workspace.py", "category": "core", "functions": 20, "classes": 1, "summary": "Workspace State & Mode Management System\nEnhanced AI-Human Collaboration with Context Boundaries"}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.parsers.__init__", "path": "backup_before_separation_20250529_152219/src/llmstruct/parsers/__init__.py", "category": "cli", "functions": 0, "classes": 0, "summary": "Language-specific parsers for extracting code structure data for LLMStruct JSON."}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.parsers.javascript_parser", "path": "backup_before_separation_20250529_152219/src/llmstruct/parsers/javascript_parser.py", "category": "core", "functions": 5, "classes": 1, "summary": ""}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.parsers.universal_converter", "path": "backup_before_separation_20250529_152219/src/llmstruct/parsers/universal_converter.py", "category": "core", "functions": 14, "classes": 3, "summary": "Universal Code Converter - Orchestrates all language parsers\nConverts any codebase to llmstruct JSON"}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.parsers.go_analyzer", "path": "backup_before_separation_20250529_152219/src/llmstruct/parsers/go_analyzer.py", "category": "core", "functions": 8, "classes": 1, "summary": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 Go \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043b\u044f Docker \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b: go/packages, go/ana"}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.parsers.python_parser", "path": "backup_before_separation_20250529_152219/src/llmstruct/parsers/python_parser.py", "category": "core", "functions": 9, "classes": 1, "summary": ""}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.templates.__init__", "path": "backup_before_separation_20250529_152219/src/llmstruct/templates/__init__.py", "category": "cli", "functions": 0, "classes": 0, "summary": "Templates for LLM prompts used in LLMStruct integration."}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.validators.__init__", "path": "backup_before_separation_20250529_152219/src/llmstruct/validators/__init__.py", "category": "cli", "functions": 0, "classes": 0, "summary": "Validation modules for ensuring LLMStruct JSON complies with the schema."}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.validators.json_validator", "path": "backup_before_separation_20250529_152219/src/llmstruct/validators/json_validator.py", "category": "core", "functions": 2, "classes": 0, "summary": ""}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.generators.json_generator", "path": "backup_before_separation_20250529_152219/src/llmstruct/generators/json_generator.py", "category": "core", "functions": 3, "classes": 0, "summary": ""}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.generators.__init__", "path": "backup_before_separation_20250529_152219/src/llmstruct/generators/__init__.py", "category": "cli", "functions": 0, "classes": 0, "summary": "Generator modules for creating LLMStruct JSON outputs from parsed code data."}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.generators.go_json_generator", "path": "backup_before_separation_20250529_152219/src/llmstruct/generators/go_json_generator.py", "category": "core", "functions": 4, "classes": 0, "summary": ""}, {"module_id": "backup_before_separation_20250529_152219.scripts.github_sync_manager", "path": "backup_before_separation_20250529_152219/scripts/github_sync_manager.py", "category": "core", "functions": 15, "classes": 1, "summary": "GitHub Sync Manager - \u0418\u0434\u0435\u043c\u043f\u043e\u0442\u0435\u043d\u0442\u043d\u0430\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f processing results \u0441 GitHub\nSupports: Issues, Epic"}, {"module_id": "backup_before_separation_20250529_152219.scripts.process_926_items", "path": "backup_before_separation_20250529_152219/scripts/process_926_items.py", "category": "core", "functions": 16, "classes": 1, "summary": "926 Items Processing Script - Updated Implementation\nProcesses items according to GitHub roadmap + p"}, {"module_id": "backup_before_separation_20250529_152219.scripts.github_sync_manager_enhanced", "path": "backup_before_separation_20250529_152219/scripts/github_sync_manager_enhanced.py", "category": "core", "functions": 28, "classes": 3, "summary": "Enhanced GitHub Sync Manager - \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u043b\u0443\u0447\u0448\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0438\u0437 full_project_rollout\n\u0418\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u0443\u0435\u0442: proce"}, {"module_id": "backup_before_separation_20250529_152219.scripts.collect_json", "path": "backup_before_separation_20250529_152219/scripts/collect_json.py", "category": "core", "functions": 1, "classes": 0, "summary": ""}, {"module_id": "backup_before_separation_20250529_152219.scripts.fix_github_script", "path": "backup_before_separation_20250529_152219/scripts/fix_github_script.py", "category": "core", "functions": 1, "classes": 0, "summary": "Quick fix for GitHub issues creation script\n\u0418\u0441\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u043e\u0439 JSON \u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445"}, {"module_id": "backup_before_separation_20250529_152219.scripts.collector", "path": "backup_before_separation_20250529_152219/scripts/collector.py", "category": "core", "functions": 4, "classes": 0, "summary": ""}, {"module_id": "backup_before_separation_20250529_152219.scripts.create_github_issues", "path": "backup_before_separation_20250529_152219/scripts/create_github_issues.py", "category": "core", "functions": 11, "classes": 1, "summary": "GitHub Issues Creator for AI-Dogfooding Project\n\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 GitHub issues \u0438\u0437 \u043d\u0430\u0448\u0438\u0445 \u044d\u043f\u0438\u043a\u043e"}, {"module_id": "backup_before_separation_20250529_152219.scripts.session_cli", "path": "backup_before_separation_20250529_152219/scripts/session_cli.py", "category": "core", "functions": 10, "classes": 1, "summary": "Session Management CLI\nAutomates session tracking, worklog updates, and session switching for llmstr"}, {"module_id": "backup_before_separation_20250529_152219.scripts.epic_roadmap_manager", "path": "backup_before_separation_20250529_152219/scripts/epic_roadmap_manager.py", "category": "core", "functions": 8, "classes": 1, "summary": "Epic Roadmap Manager - \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430\u043c\u0438 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0441\u0435\u0441\u0441\u0438\u0439\n\n\u0424\u0443\u043d\u043a\u0446\u0438\u0438:\n- \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 roadmap \u0438 \u043f\u043b\u0430\u043d\u043e\u0432\n- \u0421\u043e"}, {"module_id": "backup_before_separation_20250529_152219.scripts.auto_update_struct", "path": "backup_before_separation_20250529_152219/scripts/auto_update_struct.py", "category": "core", "functions": 8, "classes": 0, "summary": "Automatic struct.json update script\nThis script automatically parses the project and updates struct."}, {"module_id": "backup_before_separation_20250529_152219.scripts.create_comprehensive_index", "path": "backup_before_separation_20250529_152219/scripts/create_comprehensive_index.py", "category": "core", "functions": 37, "classes": 2, "summary": "Comprehensive Project Index Creator\nScans ALL project directories for tasks, ideas, sessions, and co"}, {"module_id": "backup_before_separation_20250529_152219.scripts.validate_schemas", "path": "backup_before_separation_20250529_152219/scripts/validate_schemas.py", "category": "core", "functions": 0, "classes": 0, "summary": ""}, {"module_id": "backup_before_separation_20250529_152219.scripts.export_to_github_projects", "path": "backup_before_separation_20250529_152219/scripts/export_to_github_projects.py", "category": "core", "functions": 8, "classes": 1, "summary": "Export script for GitHub Projects integration\nConverts official tasks.json and ideas.json to GitHub "}, {"module_id": "backup_before_separation_20250529_152219.scripts.validate_refs", "path": "backup_before_separation_20250529_152219/scripts/validate_refs.py", "category": "core", "functions": 2, "classes": 0, "summary": ""}, {"module_id": "backup_before_separation_20250529_152219.scripts.fix_hardcoded_usernames", "path": "backup_before_separation_20250529_152219/scripts/fix_hardcoded_usernames.py", "category": "core", "functions": 12, "classes": 2, "summary": "Fix Hardcoded Usernames Script\nAutomatically detects and replaces hardcoded usernames with dynamic v"}, {"module_id": "backup_before_separation_20250529_152219.scripts.deploy_embedded_files", "path": "backup_before_separation_20250529_152219/scripts/deploy_embedded_files.py", "category": "core", "functions": 4, "classes": 0, "summary": ""}, {"module_id": "backup_before_separation_20250529_152219.scripts.validate_epics", "path": "backup_before_separation_20250529_152219/scripts/validate_epics.py", "category": "core", "functions": 5, "classes": 0, "summary": "Epic Data Validator\n\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0445 \u044d\u043f\u0438\u043a\u043e\u0432 \u043f\u0435\u0440\u0435\u0434 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435\u043c GitHub issues"}, {"module_id": "backup_before_separation_20250529_152219.scripts.validate_json", "path": "backup_before_separation_20250529_152219/scripts/validate_json.py", "category": "core", "functions": 2, "classes": 0, "summary": "JSON Validation Script\nValidates JSON files against their respective schemas."}, {"module_id": "backup_before_separation_20250529_152219.scripts.create_tasks_index", "path": "backup_before_separation_20250529_152219/scripts/create_tasks_index.py", "category": "core", "functions": 18, "classes": 3, "summary": "Tasks Index Creator\nScans all documentation files and creates comprehensive index of tasks, EPICs, T"}, {"module_id": "backup_before_separation_20250529_152219.scripts.team.__init__", "path": "backup_before_separation_20250529_152219/scripts/team/__init__.py", "category": "cli", "functions": 0, "classes": 0, "summary": ""}, {"module_id": "src.llmstruct.workflow_orchestrator", "path": "src/llmstruct/workflow_orchestrator.py", "category": "core", "functions": 27, "classes": 5, "summary": "AI Workflow Orchestrator - Integration Layer for Existing llmstruct Architecture\nExtends CopilotCont"}, {"module_id": "src.llmstruct.cli_config", "path": "src/llmstruct/cli_config.py", "category": "core", "functions": 18, "classes": 1, "summary": "CLI configuration management."}, {"module_id": "src.llmstruct.ai_self_monitor", "path": "src/llmstruct/ai_self_monitor.py", "category": "core", "functions": 16, "classes": 4, "summary": "AI Self-Monitoring System\nTracks AI usage patterns and ensures proper llmstruct integration."}, {"module_id": "src.llmstruct.grok", "path": "src/llmstruct/grok.py", "category": "core", "functions": 3, "classes": 1, "summary": ""}, {"module_id": "src.llmstruct.cli_commands", "path": "src/llmstruct/cli_commands.py", "category": "core", "functions": 22, "classes": 1, "summary": "CLI command processing and handlers."}, {"module_id": "src.llmstruct.context_orchestrator", "path": "src/llmstruct/context_orchestrator.py", "category": "core", "functions": 20, "classes": 5, "summary": "Smart Context Orchestration for LLMStruct\nOptimizes context loading for different LLM usage scenario"}, {"module_id": "src.llmstruct.__init__", "path": "src/llmstruct/__init__.py", "category": "cli", "functions": 0, "classes": 0, "summary": ""}, {"module_id": "src.llmstruct.ai_cli_integration", "path": "src/llmstruct/ai_cli_integration.py", "category": "core", "functions": 14, "classes": 1, "summary": "AI Self-Awareness CLI Integration Module\nIntegrates unused CLI functions into the AI self-awareness "}, {"module_id": "src.llmstruct.__main__", "path": "src/llmstruct/__main__.py", "category": "cli", "functions": 0, "classes": 0, "summary": ""}, {"module_id": "src.llmstruct.cli_utils", "path": "src/llmstruct/cli_utils.py", "category": "core", "functions": 13, "classes": 1, "summary": "CLI utility functions."}, {"module_id": "src.llmstruct.copilot", "path": "src/llmstruct/copilot.py", "category": "core", "functions": 26, "classes": 5, "summary": "LLMStruct Copilot Integration Module\nProvides context-aware development assistance with hybrid copil"}, {"module_id": "src.llmstruct.gh_view", "path": "src/llmstruct/gh_view.py", "category": "core", "functions": 9, "classes": 1, "summary": "GitHub visualization/graph feature (gh-view-v1)\nExport consolidated tasks/ideas from JSON files to G"}, {"module_id": "src.llmstruct.llm_client", "path": "src/llmstruct/llm_client.py", "category": "core", "functions": 6, "classes": 1, "summary": ""}, {"module_id": "src.llmstruct.ai_workflow_middleware", "path": "src/llmstruct/ai_workflow_middleware.py", "category": "core", "functions": 22, "classes": 4, "summary": "AI Workflow Middleware - Forces AI Integration with LLMStruct\nIntercepts all AI requests and ensures"}, {"module_id": "src.llmstruct.ai_self_awareness", "path": "src/llmstruct/ai_self_awareness.py", "category": "core", "functions": 47, "classes": 8, "summary": "AI Self-Awareness Enhancement Module\nProvides comprehensive system introspection and capability disc"}, {"module_id": "src.llmstruct.cache", "path": "src/llmstruct/cache.py", "category": "core", "functions": 6, "classes": 1, "summary": ""}, {"module_id": "src.llmstruct.self_run", "path": "src/llmstruct/self_run.py", "category": "core", "functions": 2, "classes": 0, "summary": ""}, {"module_id": "src.llmstruct.cursor_ai_bridge", "path": "src/llmstruct/cursor_ai_bridge.py", "category": "core", "functions": 21, "classes": 1, "summary": "Cursor AI Bridge - API Layer for AI Assistant Integration\nProvides CLI and HTTP endpoints so Cursor "}, {"module_id": "src.llmstruct.transpiler", "path": "src/llmstruct/transpiler.py", "category": "core", "functions": 10, "classes": 3, "summary": "AI-Powered Universal Transpiler\nConverts entire codebases from one language to another using LLM ana"}, {"module_id": "src.llmstruct.json_selector", "path": "src/llmstruct/json_selector.py", "category": "core", "functions": 2, "classes": 0, "summary": ""}, {"module_id": "src.llmstruct.cli", "path": "src/llmstruct/cli.py", "category": "core", "functions": 18, "classes": 0, "summary": "LLMStruct CLI - Main entry point for the command-line interface."}, {"module_id": "src.llmstruct.cursor_integration", "path": "src/llmstruct/cursor_integration.py", "category": "core", "functions": 22, "classes": 6, "summary": "Cursor IDE Integration Module\nProvides seamless integration between llmstruct AI capabilities and Cu"}, {"module_id": "src.llmstruct.cli_core", "path": "src/llmstruct/cli_core.py", "category": "core", "functions": 6, "classes": 1, "summary": "Core CLI functionality and main loop."}, {"module_id": "src.llmstruct.workspace", "path": "src/llmstruct/workspace.py", "category": "core", "functions": 20, "classes": 1, "summary": "Workspace State & Mode Management System\nEnhanced AI-Human Collaboration with Context Boundaries"}, {"module_id": "src.llmstruct.parsers.__init__", "path": "src/llmstruct/parsers/__init__.py", "category": "cli", "functions": 0, "classes": 0, "summary": "Language-specific parsers for extracting code structure data for LLMStruct JSON."}, {"module_id": "src.llmstruct.parsers.javascript_parser", "path": "src/llmstruct/parsers/javascript_parser.py", "category": "core", "functions": 5, "classes": 1, "summary": ""}, {"module_id": "src.llmstruct.parsers.universal_converter", "path": "src/llmstruct/parsers/universal_converter.py", "category": "core", "functions": 14, "classes": 3, "summary": "Universal Code Converter - Orchestrates all language parsers\nConverts any codebase to llmstruct JSON"}, {"module_id": "src.llmstruct.parsers.go_analyzer", "path": "src/llmstruct/parsers/go_analyzer.py", "category": "core", "functions": 8, "classes": 1, "summary": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 Go \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043b\u044f Docker \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b: go/packages, go/ana"}, {"module_id": "src.llmstruct.parsers.python_parser", "path": "src/llmstruct/parsers/python_parser.py", "category": "core", "functions": 9, "classes": 1, "summary": ""}, {"module_id": "src.llmstruct.templates.__init__", "path": "src/llmstruct/templates/__init__.py", "category": "cli", "functions": 0, "classes": 0, "summary": "Templates for LLM prompts used in LLMStruct integration."}, {"module_id": "src.llmstruct.validators.__init__", "path": "src/llmstruct/validators/__init__.py", "category": "cli", "functions": 0, "classes": 0, "summary": "Validation modules for ensuring LLMStruct JSON complies with the schema."}, {"module_id": "src.llmstruct.validators.json_validator", "path": "src/llmstruct/validators/json_validator.py", "category": "core", "functions": 2, "classes": 0, "summary": ""}, {"module_id": "src.llmstruct.generators.json_generator", "path": "src/llmstruct/generators/json_generator.py", "category": "core", "functions": 3, "classes": 0, "summary": ""}, {"module_id": "src.llmstruct.generators.__init__", "path": "src/llmstruct/generators/__init__.py", "category": "cli", "functions": 0, "classes": 0, "summary": "Generator modules for creating LLMStruct JSON outputs from parsed code data."}, {"module_id": "src.llmstruct.generators.go_json_generator", "path": "src/llmstruct/generators/go_json_generator.py", "category": "core", "functions": 4, "classes": 0, "summary": ""}, {"module_id": "temp_workfiles.test_cli_integration", "path": "temp_workfiles/test_cli_integration.py", "category": "test", "functions": 1, "classes": 0, "summary": "Test script for CLI integration with new commands"}, {"module_id": "temp_workfiles.run_duplicate_analysis", "path": "temp_workfiles/run_duplicate_analysis.py", "category": "core", "functions": 3, "classes": 0, "summary": "Hash-based duplicate file detector for safe cleanup"}, {"module_id": "temp_workfiles.test_cli", "path": "temp_workfiles/test_cli.py", "category": "test", "functions": 1, "classes": 0, "summary": "Test script for the enhanced CLI functionality."}, {"module_id": "temp_workfiles.duplicate_detector", "path": "temp_workfiles/duplicate_detector.py", "category": "core", "functions": 4, "classes": 0, "summary": "Hash-based duplicate file detector for safe cleanup\nIdentifies actual duplicates by content hash, no"}, {"module_id": "temp_workfiles.struct_based_cleanup_analyzer_complete", "path": "temp_workfiles/struct_based_cleanup_analyzer_complete.py", "category": "core", "functions": 4, "classes": 0, "summary": "Struct.json-based File Cleanup Analyzer\nUses the comprehensive struct.json to intelligently categori"}, {"module_id": "temp_workfiles.final_system_check", "path": "temp_workfiles/final_system_check.py", "category": "core", "functions": 1, "classes": 0, "summary": "Final System Status Check - LLMStruct Modular CLI Integration\nComprehensive validation of all comple"}, {"module_id": "temp_workfiles.struct_based_cleanup_analyzer", "path": "temp_workfiles/struct_based_cleanup_analyzer.py", "category": "core", "functions": 5, "classes": 0, "summary": "Struct.json-based File Cleanup Analyzer\nUses the comprehensive struct.json to intelligently categori"}, {"module_id": "temp_workfiles.final_system_validation", "path": "temp_workfiles/final_system_validation.py", "category": "core", "functions": 1, "classes": 0, "summary": "Final system validation script for LLMStruct Modular CLI Integration"}, {"module_id": "temp_workfiles.test_modular_cli", "path": "temp_workfiles/test_modular_cli.py", "category": "test", "functions": 2, "classes": 0, "summary": "Test script for modular CLI structure"}, {"module_id": "temp_workfiles.test_cli_demo", "path": "temp_workfiles/test_cli_demo.py", "category": "test", "functions": 1, "classes": 0, "summary": "Quick CLI test to demonstrate new commands"}, {"module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_self_run", "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_self_run.py", "category": "core", "functions": 2, "classes": 0, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.22.05.25.collector (1)", "path": "temp_workfiles/unsorted_mess/22.05.25/collector (1).py", "category": "core", "functions": 4, "classes": 0, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.22.05.25.test_self_run", "path": "temp_workfiles/unsorted_mess/22.05.25/test_self_run.py", "category": "test", "functions": 5, "classes": 0, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.22.05.25.test_cli", "path": "temp_workfiles/unsorted_mess/22.05.25/test_cli.py", "category": "test", "functions": 2, "classes": 0, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.22.05.25.deploy_embedded_files (1)", "path": "temp_workfiles/unsorted_mess/22.05.25/deploy_embedded_files (1).py", "category": "core", "functions": 4, "classes": 0, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_json_selector", "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_json_selector.py", "category": "core", "functions": 2, "classes": 0, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.22.05.25.collector", "path": "temp_workfiles/unsorted_mess/22.05.25/collector.py", "category": "core", "functions": 1, "classes": 0, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.22.05.25.scripts_validate_refs", "path": "temp_workfiles/unsorted_mess/22.05.25/scripts_validate_refs.py", "category": "core", "functions": 2, "classes": 0, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_cache", "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_cache.py", "category": "core", "functions": 6, "classes": 1, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.22.05.25.cli_parser", "path": "temp_workfiles/unsorted_mess/22.05.25/cli_parser.py", "category": "core", "functions": 2, "classes": 0, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.22.05.25.scripts_collector", "path": "temp_workfiles/unsorted_mess/22.05.25/scripts_collector.py", "category": "core", "functions": 4, "classes": 0, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.22.05.25.cache", "path": "temp_workfiles/unsorted_mess/22.05.25/cache.py", "category": "core", "functions": 7, "classes": 1, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.22.05.25.validate_refs", "path": "temp_workfiles/unsorted_mess/22.05.25/validate_refs.py", "category": "core", "functions": 2, "classes": 0, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.22.05.25.test_deploy_embedded_files", "path": "temp_workfiles/unsorted_mess/22.05.25/test_deploy_embedded_files.py", "category": "test", "functions": 2, "classes": 0, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.22.05.25.cli", "path": "temp_workfiles/unsorted_mess/22.05.25/cli.py", "category": "core", "functions": 2, "classes": 0, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.22.05.25.deploy_embedded_files", "path": "temp_workfiles/unsorted_mess/22.05.25/deploy_embedded_files.py", "category": "core", "functions": 4, "classes": 0, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_cli", "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_cli.py", "category": "core", "functions": 12, "classes": 0, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.22.05.25.extract_artifacts", "path": "temp_workfiles/unsorted_mess/22.05.25/extract_artifacts.py", "category": "core", "functions": 6, "classes": 0, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.dump.dumper", "path": "temp_workfiles/unsorted_mess/dump/dumper.py", "category": "core", "functions": 1, "classes": 0, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_generators___init__", "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_generators___init__.py", "category": "core", "functions": 0, "classes": 0, "summary": "Generator modules for creating LLMStruct JSON outputs from parsed code data."}, {"module_id": "temp_workfiles.unsorted_mess.dump.examples_python_project_utils", "path": "temp_workfiles/unsorted_mess/dump/examples_python_project_utils.py", "category": "core", "functions": 2, "classes": 0, "summary": "Utility functions for the sample project."}, {"module_id": "temp_workfiles.unsorted_mess.dump.generate_ideas_tree", "path": "temp_workfiles/unsorted_mess/dump/generate_ideas_tree.py", "category": "core", "functions": 0, "classes": 0, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct___init__", "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct___init__.py", "category": "core", "functions": 0, "classes": 0, "summary": "LLMStruct: A tool for generating JSON-based code structures for LLM integration.\n\nThis package provi"}, {"module_id": "temp_workfiles.unsorted_mess.dump.test_efficiency1", "path": "temp_workfiles/unsorted_mess/dump/test_efficiency1.py", "category": "test", "functions": 7, "classes": 0, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.dump.test_efficiency", "path": "temp_workfiles/unsorted_mess/dump/test_efficiency.py", "category": "test", "functions": 6, "classes": 0, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.dump.grok", "path": "temp_workfiles/unsorted_mess/dump/grok.py", "category": "core", "functions": 3, "classes": 1, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct___main__", "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct___main__.py", "category": "core", "functions": 0, "classes": 0, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.dump.generate_ru_docs (1)", "path": "temp_workfiles/unsorted_mess/dump/generate_ru_docs (1).py", "category": "core", "functions": 0, "classes": 0, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.dump.test_efficiency (1)", "path": "temp_workfiles/unsorted_mess/dump/test_efficiency (1).py", "category": "test", "functions": 9, "classes": 0, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.dump.json_generator", "path": "temp_workfiles/unsorted_mess/dump/json_generator.py", "category": "core", "functions": 3, "classes": 0, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.dump.llm_client_engines", "path": "temp_workfiles/unsorted_mess/dump/llm_client_engines.py", "category": "core", "functions": 5, "classes": 0, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.dump.llm_client_config", "path": "temp_workfiles/unsorted_mess/dump/llm_client_config.py", "category": "core", "functions": 0, "classes": 0, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_parsers_python_parser", "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_parsers_python_parser.py", "category": "core", "functions": 11, "classes": 1, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_generators_json_generator", "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_generators_json_generator.py", "category": "core", "functions": 3, "classes": 0, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.dump.generate_llmstruct", "path": "temp_workfiles/unsorted_mess/dump/generate_llmstruct.py", "category": "core", "functions": 16, "classes": 1, "summary": "Generate JSON for workspace based on user instructions template.\n\nCreates structure:\n- metadata with"}, {"module_id": "temp_workfiles.unsorted_mess.dump.generate_docs (1)", "path": "temp_workfiles/unsorted_mess/dump/generate_docs (1).py", "category": "core", "functions": 4, "classes": 0, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.dump.generate_ru_docs", "path": "temp_workfiles/unsorted_mess/dump/generate_ru_docs.py", "category": "core", "functions": 0, "classes": 0, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.dump.collector", "path": "temp_workfiles/unsorted_mess/dump/collector.py", "category": "core", "functions": 2, "classes": 0, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.dump.collect_docs (1)", "path": "temp_workfiles/unsorted_mess/dump/collect_docs (1).py", "category": "core", "functions": 3, "classes": 0, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.dump.collect_docs", "path": "temp_workfiles/unsorted_mess/dump/collect_docs.py", "category": "core", "functions": 1, "classes": 0, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.dump.refactored_structure", "path": "temp_workfiles/unsorted_mess/dump/refactored_structure.py", "category": "core", "functions": 5, "classes": 3, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_parsers_python_parser (1)", "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_parsers_python_parser (1).py", "category": "core", "functions": 4, "classes": 1, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_templates___init__", "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_templates___init__.py", "category": "core", "functions": 0, "classes": 0, "summary": "Templates for LLM prompts used in LLMStruct integration."}, {"module_id": "temp_workfiles.unsorted_mess.dump.test_end_to_end (1)", "path": "temp_workfiles/unsorted_mess/dump/test_end_to_end (1).py", "category": "test", "functions": 1, "classes": 0, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.dump.generate_docs", "path": "temp_workfiles/unsorted_mess/dump/generate_docs.py", "category": "core", "functions": 4, "classes": 0, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.dump.examples_python_project_main", "path": "temp_workfiles/unsorted_mess/dump/examples_python_project_main.py", "category": "core", "functions": 2, "classes": 1, "summary": "Main module for the sample project."}, {"module_id": "temp_workfiles.unsorted_mess.dump.filter_llmstruct_json", "path": "temp_workfiles/unsorted_mess/dump/filter_llmstruct_json.py", "category": "core", "functions": 3, "classes": 0, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.dump.generate_ru_internal_docs", "path": "temp_workfiles/unsorted_mess/dump/generate_ru_internal_docs.py", "category": "core", "functions": 0, "classes": 0, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.dump.llm_client", "path": "temp_workfiles/unsorted_mess/dump/llm_client.py", "category": "core", "functions": 6, "classes": 1, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.dump.llm_client (3)", "path": "temp_workfiles/unsorted_mess/dump/llm_client (3).py", "category": "core", "functions": 6, "classes": 1, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.dump.tests___init__", "path": "temp_workfiles/unsorted_mess/dump/tests___init__.py", "category": "core", "functions": 0, "classes": 0, "summary": "Test suite for LLMStruct, covering parsers, generators, validators, and integration."}, {"module_id": "temp_workfiles.unsorted_mess.dump.check_docs", "path": "temp_workfiles/unsorted_mess/dump/check_docs.py", "category": "core", "functions": 3, "classes": 0, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.dump.javascript_parser", "path": "temp_workfiles/unsorted_mess/dump/javascript_parser.py", "category": "core", "functions": 5, "classes": 1, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.dump.self_run", "path": "temp_workfiles/unsorted_mess/dump/self_run.py", "category": "core", "functions": 2, "classes": 0, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_generators_json_generator (1)", "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_generators_json_generator (1).py", "category": "core", "functions": 3, "classes": 0, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.dump.test_end_to_end", "path": "temp_workfiles/unsorted_mess/dump/test_end_to_end.py", "category": "test", "functions": 1, "classes": 0, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.dump.python_parser", "path": "temp_workfiles/unsorted_mess/dump/python_parser.py", "category": "core", "functions": 6, "classes": 2, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_parsers___init__", "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_parsers___init__.py", "category": "core", "functions": 0, "classes": 0, "summary": "Language-specific parsers for extracting code structure data for LLMStruct JSON."}, {"module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_cli (1)", "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_cli (1).py", "category": "core", "functions": 3, "classes": 0, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.dump.test_efficiency_proxybypass", "path": "temp_workfiles/unsorted_mess/dump/test_efficiency_proxybypass.py", "category": "test", "functions": 8, "classes": 0, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.dump.scripts_setup_github", "path": "temp_workfiles/unsorted_mess/dump/scripts_setup_github.py", "category": "core", "functions": 6, "classes": 0, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct___init__ (1)", "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct___init__ (1).py", "category": "core", "functions": 0, "classes": 0, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.dump.cli", "path": "temp_workfiles/unsorted_mess/dump/cli.py", "category": "core", "functions": 12, "classes": 0, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_validators___init__", "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_validators___init__.py", "category": "core", "functions": 0, "classes": 0, "summary": "Validation modules for ensuring LLMStruct JSON complies with the schema."}, {"module_id": "temp_workfiles.unsorted_mess.dump.generate_llmstruct (1)", "path": "temp_workfiles/unsorted_mess/dump/generate_llmstruct (1).py", "category": "core", "functions": 15, "classes": 1, "summary": "Generate JSON for workspace based on user instructions template.\n\nCreates structure:\n- metadata with"}, {"module_id": "temp_workfiles.unsorted_mess.dump.json_validator", "path": "temp_workfiles/unsorted_mess/dump/json_validator.py", "category": "core", "functions": 2, "classes": 0, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.dump.validate_json", "path": "temp_workfiles/unsorted_mess/dump/validate_json.py", "category": "core", "functions": 1, "classes": 0, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_cli", "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_cli.py", "category": "core", "functions": 3, "classes": 0, "summary": ""}, {"module_id": "temp_workfiles.unsorted_mess.dump.clean.internal_cleaner", "path": "temp_workfiles/unsorted_mess/dump/clean/internal_cleaner.py", "category": "core", "functions": 1, "classes": 0, "summary": ""}, {"module_id": "temp_workfiles.dev_utils.test_efficiency", "path": "temp_workfiles/dev_utils/test_efficiency.py", "category": "test", "functions": 12, "classes": 0, "summary": ""}, {"module_id": "temp_workfiles.dev_utils.test_audit", "path": "temp_workfiles/dev_utils/test_audit.py", "category": "test", "functions": 1, "classes": 0, "summary": "Test script for audit functionality."}, {"module_id": "bak.20250522_102827.scripts.collector", "path": "bak/20250522_102827/scripts/collector.py", "category": "core", "functions": 4, "classes": 0, "summary": ""}, {"module_id": "bak.20250522_102827.scripts.validate_refs", "path": "bak/20250522_102827/scripts/validate_refs.py", "category": "core", "functions": 2, "classes": 0, "summary": ""}, {"module_id": "bak.20250522_102827.scripts.deploy_embedded_files", "path": "bak/20250522_102827/scripts/deploy_embedded_files.py", "category": "core", "functions": 4, "classes": 0, "summary": ""}, {"module_id": "bak.20250522_131121.scripts.collector", "path": "bak/20250522_131121/scripts/collector.py", "category": "core", "functions": 4, "classes": 0, "summary": ""}, {"module_id": "bak.20250522_131121.scripts.validate_refs", "path": "bak/20250522_131121/scripts/validate_refs.py", "category": "core", "functions": 2, "classes": 0, "summary": ""}, {"module_id": "bak.20250522_131121.scripts.deploy_embedded_files", "path": "bak/20250522_131121/scripts/deploy_embedded_files.py", "category": "core", "functions": 4, "classes": 0, "summary": ""}, {"module_id": "sorting_workspace.consolidate_changelog", "path": "sorting_workspace/consolidate_changelog.py", "category": "core", "functions": 7, "classes": 1, "summary": "Changelog Consolidation Tool\n\u0421\u043e\u0431\u0438\u0440\u0430\u0435\u0442 \u0438 \u043f\u043e\u0434\u0431\u0438\u0432\u0430\u0435\u0442 \u0447\u0435\u0439\u043d\u0434\u0436\u043b\u043e\u0433\u0438 \u0438\u0437 \u0440\u0430\u0437\u043d\u044b\u0445 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u043e\u0432"}, {"module_id": "sorting_workspace.validate_project_state", "path": "sorting_workspace/validate_project_state.py", "category": "core", "functions": 9, "classes": 1, "summary": "Project State Validator & Comparator\n\u041e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u0442 \u0442\u0435\u043a\u0443\u0449\u0435\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b"}, {"module_id": "sorting_workspace.sort_data", "path": "sorting_workspace/sort_data.py", "category": "core", "functions": 15, "classes": 1, "summary": "LLMStruct Data Sorting and Migration Tool\n\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u0431\u0430\u0440\u0430\u0445\u043b\u043e \u0432 structured JSON format"}, {"module_id": "sorting_workspace.smart_consolidator", "path": "sorting_workspace/smart_consolidator.py", "category": "core", "functions": 10, "classes": 1, "summary": "Smart LLM-assisted consolidation script for inconsistent data dumps\nUses content analysis and patter"}, {"module_id": "sorting_workspace.comprehensive_consolidator", "path": "sorting_workspace/comprehensive_consolidator.py", "category": "core", "functions": 13, "classes": 1, "summary": "Comprehensive Data Consolidator for llmstruct\nProcesses unsorted JSON files and consolidates them in"}, {"module_id": "sorting_workspace.debug_sort", "path": "sorting_workspace/debug_sort.py", "category": "core", "functions": 2, "classes": 0, "summary": "Debug version of sorting script to identify issues"}, {"module_id": "sorting_workspace.manual_consolidator", "path": "sorting_workspace/manual_consolidator.py", "category": "core", "functions": 8, "classes": 1, "summary": "Manual consolidation script for llmstruct data sorting\nBypasses the automatic detection and directly"}, {"module_id": "tests.test_self_run", "path": "tests/test_self_run.py", "category": "test", "functions": 5, "classes": 0, "summary": ""}, {"module_id": "tests.__init__", "path": "tests/__init__.py", "category": "test", "functions": 0, "classes": 0, "summary": "Test suite for LLMStruct, covering parsers, generators, validators, and integration."}, {"module_id": "scripts.github_sync_manager", "path": "scripts/github_sync_manager.py", "category": "core", "functions": 15, "classes": 1, "summary": "GitHub Sync Manager - \u0418\u0434\u0435\u043c\u043f\u043e\u0442\u0435\u043d\u0442\u043d\u0430\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f processing results \u0441 GitHub\nSupports: Issues, Epic"}, {"module_id": "scripts.process_926_items", "path": "scripts/process_926_items.py", "category": "core", "functions": 16, "classes": 1, "summary": "926 Items Processing Script - Updated Implementation\nProcesses items according to GitHub roadmap + p"}, {"module_id": "scripts.github_sync_manager_enhanced", "path": "scripts/github_sync_manager_enhanced.py", "category": "core", "functions": 28, "classes": 3, "summary": "Enhanced GitHub Sync Manager - \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u043b\u0443\u0447\u0448\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0438\u0437 full_project_rollout\n\u0418\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u0443\u0435\u0442: proce"}, {"module_id": "scripts.collect_json", "path": "scripts/collect_json.py", "category": "core", "functions": 1, "classes": 0, "summary": ""}, {"module_id": "scripts.fix_github_script", "path": "scripts/fix_github_script.py", "category": "core", "functions": 1, "classes": 0, "summary": "Quick fix for GitHub issues creation script\n\u0418\u0441\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u043e\u0439 JSON \u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445"}, {"module_id": "scripts.collector", "path": "scripts/collector.py", "category": "core", "functions": 4, "classes": 0, "summary": ""}, {"module_id": "scripts.create_github_issues", "path": "scripts/create_github_issues.py", "category": "core", "functions": 11, "classes": 1, "summary": "GitHub Issues Creator for AI-Dogfooding Project\n\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 GitHub issues \u0438\u0437 \u043d\u0430\u0448\u0438\u0445 \u044d\u043f\u0438\u043a\u043e"}, {"module_id": "scripts.session_cli", "path": "scripts/session_cli.py", "category": "core", "functions": 10, "classes": 1, "summary": "Session Management CLI\nAutomates session tracking, worklog updates, and session switching for llmstr"}, {"module_id": "scripts.epic_roadmap_manager", "path": "scripts/epic_roadmap_manager.py", "category": "core", "functions": 8, "classes": 1, "summary": "Epic Roadmap Manager - \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430\u043c\u0438 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0441\u0435\u0441\u0441\u0438\u0439\n\n\u0424\u0443\u043d\u043a\u0446\u0438\u0438:\n- \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 roadmap \u0438 \u043f\u043b\u0430\u043d\u043e\u0432\n- \u0421\u043e"}, {"module_id": "scripts.auto_update_struct", "path": "scripts/auto_update_struct.py", "category": "core", "functions": 8, "classes": 0, "summary": "Automatic struct.json update script\nThis script automatically parses the project and updates struct."}, {"module_id": "scripts.create_comprehensive_index", "path": "scripts/create_comprehensive_index.py", "category": "core", "functions": 37, "classes": 2, "summary": "Comprehensive Project Index Creator\nScans ALL project directories for tasks, ideas, sessions, and co"}, {"module_id": "scripts.validate_schemas", "path": "scripts/validate_schemas.py", "category": "core", "functions": 0, "classes": 0, "summary": ""}, {"module_id": "scripts.export_to_github_projects", "path": "scripts/export_to_github_projects.py", "category": "core", "functions": 8, "classes": 1, "summary": "Export script for GitHub Projects integration\nConverts official tasks.json and ideas.json to GitHub "}, {"module_id": "scripts.validate_refs", "path": "scripts/validate_refs.py", "category": "core", "functions": 2, "classes": 0, "summary": ""}, {"module_id": "scripts.fix_hardcoded_usernames", "path": "scripts/fix_hardcoded_usernames.py", "category": "core", "functions": 12, "classes": 2, "summary": "Fix Hardcoded Usernames Script\nAutomatically detects and replaces hardcoded usernames with dynamic v"}, {"module_id": "scripts.deploy_embedded_files", "path": "scripts/deploy_embedded_files.py", "category": "core", "functions": 4, "classes": 0, "summary": ""}, {"module_id": "scripts.validate_epics", "path": "scripts/validate_epics.py", "category": "core", "functions": 5, "classes": 0, "summary": "Epic Data Validator\n\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0445 \u044d\u043f\u0438\u043a\u043e\u0432 \u043f\u0435\u0440\u0435\u0434 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435\u043c GitHub issues"}, {"module_id": "scripts.validate_json", "path": "scripts/validate_json.py", "category": "core", "functions": 2, "classes": 0, "summary": "JSON Validation Script\nValidates JSON files against their respective schemas."}, {"module_id": "scripts.create_tasks_index", "path": "scripts/create_tasks_index.py", "category": "core", "functions": 18, "classes": 3, "summary": "Tasks Index Creator\nScans all documentation files and creates comprehensive index of tasks, EPICs, T"}, {"module_id": "scripts.team.__init__", "path": "scripts/team/__init__.py", "category": "cli", "functions": 0, "classes": 0, "summary": ""}], "modules": [{"module_id": "test_duplication_analysis", "path": "test_duplication_analysis.py", "category": "test", "module_doc": "Test script for analyzing function duplication using struct.json", "functions": [{"name": "main", "docstring": "", "line_range": [13, 111], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"main": ["struct_analysis.get", "print", "sorted", "complexity.get", "duplication_analysis.get", "context.get", "len", "r.get", "orchestrator.get_current_context", "orchestrator.analyze_codebase_for_duplicates", "enumerate", "stats.get", "duplicates.items", "analysis.get", "module_dist.items", "WorkflowOrchestrator", "arch_analysis.get"]}, "dependencies": ["WorkflowOrchestrator", "json", "llmstruct.workflow_orchestrator", "os", "sys"], "hash": "16ea99ccb454ff32a06a06729c37b4987c735b188891df5671391bb895274cf6"}, {"module_id": "test_cli_integration", "path": "test_cli_integration.py", "category": "test", "module_doc": "Test script for CLI integration with new commands", "functions": [{"name": "test_modular_cli_commands", "docstring": "Test new CLI commands integration", "line_range": [13, 164], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"test_modular_cli_commands": ["json.dump", "print", "events_data.append", "os.stat", "create_cli_core", "json.load", "int", "time.ctime", "os.makedirs", "open", "subprocess.run", "time.time"]}, "dependencies": ["CLIConfig", "CLICore", "CLIUtils", "CommandProcessor", "CopilotContextManager", "Path", "create_cli_core", "json", "llmstruct.cli_commands", "llmstruct.cli_config", "llmstruct.cli_core", "llmstruct.cli_utils", "llmstruct.copilot", "os", "pathlib", "subprocess", "sys", "time"], "hash": "cb07cac7298b34e98a1e4eebcfc32c4f1210622faebeb4979f498a8403cc0cfd"}, {"module_id": "test_multi_llm_comparison", "path": "test_multi_llm_comparison.py", "category": "test", "module_doc": "Multi-LLM Comparison Test - \u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u0440\u0430\u0437\u043d\u044b\u0435 LLM API \u0441 \u043d\u0430\u0448\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439\n\u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c: Ollama, Grok, Anthropic Claude", "functions": [{"name": "call_ollama", "docstring": "Call Ollama API.", "line_range": [38, 57], "parameters": ["prompt", "model"], "decorators": []}, {"name": "call_grok", "docstring": "Call Grok API (OpenAI-compatible).", "line_range": [59, 91], "parameters": ["prompt"], "decorators": []}, {"name": "call_anthropic", "docstring": "Call Anthropic Claude API.", "line_range": [93, 126], "parameters": ["prompt"], "decorators": []}, {"name": "call_llm_direct", "docstring": "Call LLM directly without middleware.", "line_range": [128, 137], "parameters": ["llm_name", "prompt"], "decorators": []}, {"name": "call_llm_with_middleware", "docstring": "Call LLM through our middleware.", "line_range": [139, 174], "parameters": ["llm_name", "query"], "decorators": []}, {"name": "test_multi_llm_comparison", "docstring": "Compare multiple LLMs with and without our middleware.", "line_range": [176, 285], "parameters": [], "decorators": []}, {"name": "create_llm_handler", "docstring": "", "line_range": [142, 165], "parameters": ["llm_name"], "decorators": []}, {"name": "llm_handler", "docstring": "", "line_range": [143, 164], "parameters": ["processed_query", "enhanced_context"], "decorators": []}], "classes": [], "callgraph": {"call_ollama": ["requests.post", "response.json", "result.get", "time.time", "str"], "call_grok": ["time.time", "requests.post", "str", "response.json"], "call_anthropic": ["time.time", "requests.post", "str", "response.json"], "call_llm_direct": ["call_grok", "call_anthropic", "call_ollama"], "call_llm_with_middleware": [], "create_llm_handler": [], "llm_handler": ["system_caps.get", "list", "enhanced_context.get", "call_llm_direct", "request_info.get", "llmstruct_context.get"], "test_multi_llm_comparison": ["print", "max", "word.lower", "ollama_response.get", "len", "call_llm_with_middleware", "middleware_response.lower", "call_llm_direct", "best_improvement.upper", "initialize_ai_middleware", "direct_result.get", "initialize_ai_monitor", "best_llm.upper", "results.values", "llm_name.upper", "results.items", "isinstance", "sum", "results.keys"]}, "dependencies": ["AIWorkflowMode", "Path", "initialize_ai_middleware", "initialize_ai_monitor", "json", "llmstruct.ai_self_monitor", "llmstruct.ai_workflow_middleware", "os", "pathlib", "process_ai_query", "requests", "sys", "time"], "hash": "d1c7756167702738c80eaa1cc42d44591058fdaeb32326b9f1a89c79bba77426"}, {"module_id": "test_final_validation", "path": "test_final_validation.py", "category": "test", "module_doc": "Final validation test for AI self-awareness system.\nTests all components after struct.json and cache system fixes.", "functions": [{"name": "test_struct_validation", "docstring": "Test struct.json validation with correct structure.", "line_range": [15, 40], "parameters": [], "decorators": []}, {"name": "test_cache_system", "docstring": "Test cache system with correct JSONCache methods.", "line_range": [42, 72], "parameters": [], "decorators": []}, {"name": "test_ai_awareness_system", "docstring": "Test the full AI self-awareness system.", "line_range": [74, 116], "parameters": [], "decorators": []}, {"name": "test_cli_integration", "docstring": "Test AI CLI integration.", "line_range": [118, 143], "parameters": [], "decorators": []}, {"name": "main", "docstring": "Run complete validation test.", "line_range": [145, 184], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"test_struct_validation": ["print", "list", "struct_file.exists", "Path", "open", "struct_data.keys", "json.load"], "test_cache_system": ["print", "cache.get_full_json", "cache.cache_json", "Path", "JSONCache", "retrieved.get", "time.time", "str"], "test_ai_awareness_system": ["print", "discovery.discover_all_capabilities", "discovery.get_enhanced_capabilities_summary", "len", "discovery.get_comprehensive_ai_status", "Path", "traceback.print_exc", "SystemCapabilityDiscovery", "str"], "test_cli_integration": ["print", "create_ai_cli_integration", "Path", "get_ai_enhanced_cli_summary", "str", "cli_integration.get_integration_summary"], "main": ["results.append", "test_func", "print", "len"]}, "dependencies": ["JSONCache", "Path", "SystemCapabilityDiscovery", "create_ai_cli_integration", "get_ai_enhanced_cli_summary", "json", "llmstruct.ai_cli_integration", "llmstruct.ai_self_awareness", "llmstruct.cache", "pathlib", "sys", "time", "traceback"], "hash": "674a1f3f44abb452b39ba0ffa66a0b0119675c0f4ed47ea3c206faebe7b9e039"}, {"module_id": "test_efficiency", "path": "test_efficiency.py", "category": "test", "module_doc": "", "functions": [{"name": "get_system_metrics", "docstring": "", "line_range": [15, 19], "parameters": [], "decorators": []}, {"name": "is_local_address", "docstring": "", "line_range": [22, 28], "parameters": ["url"], "decorators": []}, {"name": "setup_proxy", "docstring": "", "line_range": [31, 34], "parameters": ["proxy_url"], "decorators": []}, {"name": "check_ollama", "docstring": "", "line_range": [37, 42], "parameters": ["api_url"], "decorators": []}, {"name": "optimize_prompt", "docstring": "", "line_range": [45, 51], "parameters": ["struct_data", "max_tokens"], "decorators": []}, {"name": "run_llm_request", "docstring": "", "line_range": [54, 78], "parameters": ["api_url", "payload", "proxy"], "decorators": []}, {"name": "check_llmstruct_cli", "docstring": "", "line_range": [81, 82], "parameters": [], "decorators": []}, {"name": "test_with_llmstruct", "docstring": "", "line_range": [85, 112], "parameters": ["api_url", "project_path", "proxy", "use_placeholder"], "decorators": []}, {"name": "test_without_llmstruct", "docstring": "", "line_range": [115, 122], "parameters": ["api_url", "project_path", "proxy"], "decorators": []}, {"name": "test_with_grok", "docstring": "", "line_range": [125, 147], "parameters": ["api_key", "project_path", "proxy", "use_placeholder"], "decorators": []}, {"name": "evaluate_accuracy", "docstring": "", "line_range": [150, 152], "parameters": ["response_text", "expected"], "decorators": []}, {"name": "main", "docstring": "", "line_range": [155, 215], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"get_system_metrics": ["psutil.virtual_memory", "psutil.cpu_percent"], "is_local_address": ["urlparse", "ipaddress.ip_address"], "setup_proxy": ["os.getenv"], "check_ollama": ["str", "api_url.replace", "requests.get", "response.json"], "optimize_prompt": ["struct_data.split", "print", "len"], "run_llm_request": ["print", "get_system_metrics", "response.raise_for_status", "len", "is_local_address", "session.post", "response.json", "time.perf_counter", "requests.Session", "type"], "check_llmstruct_cli": ["shutil.which"], "test_with_llmstruct": ["json.dump", "optimize_prompt", "target_path.exists", "f.read", "FileNotFoundError", "Path", "open", "subprocess.run", "check_llmstruct_cli", "run_llm_request", "str"], "test_without_llmstruct": ["optimize_prompt", "Path", "open", "run_llm_request", "f.read"], "test_with_grok": ["json.dump", "optimize_prompt", "target_path.exists", "test_grok", "FileNotFoundError", "Path", "open", "f.read"], "evaluate_accuracy": ["len", "response_text.lower", "sum"], "main": ["check_ollama", "print", "parser.add_argument", "json.dump", "test_with_grok", "argparse.ArgumentParser", "evaluate_accuracy", "test_without_llmstruct", "range", "test_with_llmstruct", "open", "setup_proxy", "parser.parse_args", "check_llmstruct_cli", "str"]}, "dependencies": ["Path", "argparse", "ipaddress", "json", "os", "pathlib", "psutil", "requests", "shutil", "src.llmstruct.grok", "subprocess", "test_grok", "time", "urllib.parse", "urlparse"], "hash": "7b4013d0a2d724e83a08ce04311d7a101a98769aa8e78e15b258bd58b44b55c0"}, {"module_id": "start_development", "path": "start_development.py", "category": "core", "module_doc": "LLMStruct Development Startup Script\nConvenient one-command startup for daily development workflow.\nEnhanced with AI Workflow Middleware and Self-Monitoring for seamless llmstruct integration.", "functions": [{"name": "print_header", "docstring": "Print startup header.", "line_range": [17, 21], "parameters": [], "decorators": []}, {"name": "initialize_ai_integration_layer", "docstring": "Initialize AI integration layer - this is the NEW seamless integration", "line_range": [23, 73], "parameters": [], "decorators": []}, {"name": "check_environment", "docstring": "Check if development environment is properly set up.", "line_range": [75, 110], "parameters": [], "decorators": []}, {"name": "initialize_workflow_orchestrator", "docstring": "Initialize and test WorkflowOrchestrator integration.", "line_range": [112, 156], "parameters": [], "decorators": []}, {"name": "initialize_cursor_ai_bridge", "docstring": "Initialize and test CursorAIBridge integration.", "line_range": [158, 198], "parameters": [], "decorators": []}, {"name": "sync_architecture_components", "docstring": "Sync with existing llmstruct architecture components and AI integration.", "line_range": [200, 240], "parameters": ["orchestrator", "ai_integration"], "decorators": []}, {"name": "run_system_health_check", "docstring": "Run comprehensive system health check.", "line_range": [242, 263], "parameters": [], "decorators": []}, {"name": "get_optimization_suggestions", "docstring": "Get AI optimization suggestions with WorkflowOrchestrator integration.", "line_range": [265, 320], "parameters": ["orchestrator"], "decorators": []}, {"name": "check_git_status", "docstring": "Check git repository status.", "line_range": [322, 368], "parameters": [], "decorators": []}, {"name": "show_current_context", "docstring": "Show current project context and priorities.", "line_range": [370, 411], "parameters": [], "decorators": []}, {"name": "show_useful_commands", "docstring": "Show useful commands for development.", "line_range": [413, 472], "parameters": [], "decorators": []}, {"name": "main", "docstring": "Main startup routine with AI Workflow Middleware and WorkflowOrchestrator integration.", "line_range": [474, 593], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"print_header": ["print"], "initialize_ai_integration_layer": ["print", "record_ai_usage", "initialize_ai_monitor", "Path", "middleware.process_ai_request", "initialize_ai_middleware", "str"], "check_environment": ["Path", "print", "hasattr", "missing_files.append"], "initialize_workflow_orchestrator": ["struct_analysis.get", "print", "system_caps.get", "context.get", "len", "orchestrator.get_current_context", "dup_analysis.get", "stats.get", "copilot_status.get", "WorkflowOrchestrator"], "initialize_cursor_ai_bridge": ["print", "bridge.ai_analyze_task", "context.get", "len", "project_state.get", "CursorAIBridge", "ai_rec.get", "bridge.ai_get_context", "task_analysis.get"], "sync_architecture_components": ["middleware.get_middleware_stats", "print", "sync_results.items", "ai_integration.get", "orchestrator.sync_with_existing_architecture"], "run_system_health_check": ["subprocess.run", "print"], "get_optimization_suggestions": ["print", "suggestions.append", "r.get", "orchestrator.analyze_codebase_for_duplicates", "enumerate", "line.strip", "subprocess.run", "duplication_analysis.get"], "check_git_status": ["subprocess.run", "print", "changes.split", "len"], "show_current_context": ["print", "bridge_file.exists", "json.load", "init_data.get", "bridge_data.get", "enumerate", "vision.get", "Path", "business_obj.get", "open", "init_file.exists"], "show_useful_commands": ["print"], "main": ["middleware.get_middleware_stats", "print", "ai_integration.get", "run_system_health_check", "check_git_status", "show_useful_commands", "monitor.analyze_behavior_trends", "initialize_ai_integration_layer", "initialize_workflow_orchestrator", "get_optimization_suggestions", "check_environment", "print_header", "show_current_context", "initialize_cursor_ai_bridge", "sync_architecture_components"]}, "dependencies": ["AIWorkflowMode", "CursorAIBridge", "Path", "WorkflowOrchestrator", "initialize_ai_middleware", "initialize_ai_monitor", "json", "llmstruct.ai_self_monitor", "llmstruct.ai_workflow_middleware", "llmstruct.cursor_ai_bridge", "llmstruct.workflow_orchestrator", "os", "pathlib", "record_ai_usage", "subprocess", "sys"], "hash": "da3d9e91130a06f318e0844e82c02d253937154ac42bec34a1da2230c1e4329a"}, {"module_id": "test_cli", "path": "test_cli.py", "category": "test", "module_doc": "", "functions": [], "classes": [], "callgraph": {}, "dependencies": [], "hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"}, {"module_id": "run_ai_diagnostics", "path": "run_ai_diagnostics.py", "category": "core", "module_doc": "Comprehensive AI Self-Awareness Diagnostics Runner\nEnhanced with Cursor integration testing, multi-AI orchestration validation,\npersonal planning bridge testing, and real-time performance metrics.", "functions": [{"name": "print_section", "docstring": "Print a formatted section header.", "line_range": [20, 23], "parameters": ["title", "emoji"], "decorators": []}, {"name": "print_subsection", "docstring": "Print a formatted subsection header.", "line_range": [25, 28], "parameters": ["title", "emoji"], "decorators": []}, {"name": "test_basic_ai_awareness", "docstring": "Test basic AI self-awareness capabilities.", "line_range": [30, 51], "parameters": [], "decorators": []}, {"name": "test_cursor_integration", "docstring": "Test Cursor IDE integration capabilities.", "line_range": [53, 124], "parameters": [], "decorators": []}, {"name": "test_real_time_metrics", "docstring": "Test real-time metrics calculation.", "line_range": [126, 146], "parameters": [], "decorators": []}, {"name": "test_personal_planning_bridge", "docstring": "Test personal planning bridge functionality.", "line_range": [148, 196], "parameters": [], "decorators": []}, {"name": "test_session_management", "docstring": "Test session management capabilities.", "line_range": [198, 233], "parameters": [], "decorators": []}, {"name": "test_configuration_loading", "docstring": "Test configuration file loading.", "line_range": [235, 255], "parameters": [], "decorators": []}, {"name": "run_performance_benchmark", "docstring": "Run performance benchmarks for AI operations.", "line_range": [257, 287], "parameters": [], "decorators": []}, {"name": "generate_diagnostic_report", "docstring": "Generate a comprehensive diagnostic report.", "line_range": [289, 333], "parameters": [], "decorators": []}, {"name": "continuous_monitoring_mode", "docstring": "Run continuous monitoring of AI system health.", "line_range": [335, 382], "parameters": [], "decorators": []}, {"name": "test_specific_component", "docstring": "Test a specific AI component in detail.", "line_range": [384, 423], "parameters": ["component_name"], "decorators": []}, {"name": "test_cli_commands", "docstring": "Test CLI command processing capabilities.", "line_range": [425, 447], "parameters": [], "decorators": []}, {"name": "test_context_scenarios", "docstring": "Test context orchestrator scenarios.", "line_range": [449, 466], "parameters": [], "decorators": []}, {"name": "test_copilot_features", "docstring": "Test copilot manager features.", "line_range": [468, 485], "parameters": [], "decorators": []}, {"name": "run_integration_health_check", "docstring": "Run comprehensive integration health check.", "line_range": [487, 524], "parameters": [], "decorators": []}, {"name": "generate_optimization_suggestions", "docstring": "Generate automated optimization suggestions based on diagnostics.", "line_range": [526, 597], "parameters": [], "decorators": []}, {"name": "run_stress_test", "docstring": "Run stress test on AI system.", "line_range": [599, 651], "parameters": [], "decorators": []}, {"name": "main", "docstring": "Run comprehensive AI diagnostics.", "line_range": [653, 738], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"print_section": ["print", "len"], "print_subsection": ["print", "len"], "test_basic_ai_awareness": ["print", "discovery.discover_all_capabilities", "discovery.get_enhanced_capabilities_summary", "len", "discovery.get_comprehensive_ai_status", "print_section", "SystemCapabilityDiscovery"], "test_cursor_integration": ["response.get", "print", "create_cursor_integration", "len", "print_section", "print_subsection", "cursor_integration.get_comprehensive_cursor_response", "context_data.get", "delegation.get"], "test_real_time_metrics": ["discovery.get_cursor_status_report", "print", "print_section", "discovery._calculate_real_cache_hit_rate", "SystemCapabilityDiscovery", "discovery._get_real_system_load"], "test_personal_planning_bridge": ["print", "top_feature.get", "bridge.get_goal_aligned_suggestions", "len", "PersonalPlanningCursorBridge", "enumerate", "guidance.get", "print_section", "bridge.get_priority_guidance"], "test_session_management": ["print", "CursorSessionManager", "session_manager.start_session", "print_section", "session_manager.save_session_context"], "test_configuration_loading": ["print", "len", "print_section", "Path", "open", "json.load", "config_path.exists"], "run_performance_benchmark": ["print", "discovery.discover_all_capabilities", "create_cursor_integration", "print_section", "time.time", "SystemCapabilityDiscovery"], "generate_diagnostic_report": ["json.dump", "print", "discovery.discover_all_capabilities", "time.strftime", "len", "print_section", "Path", "open", "SystemCapabilityDiscovery"], "continuous_monitoring_mode": ["print", "discovery.discover_all_capabilities", "time.strftime", "len", "print_section", "discovery._calculate_real_cache_hit_rate", "time.sleep", "SystemCapabilityDiscovery", "discovery._get_real_system_load"], "test_specific_component": ["print", "discovery.discover_all_capabilities", "test_context_scenarios", "component_name.upper", "list", "test_copilot_features", "len", "enumerate", "print_section", "test_cli_commands", "SystemCapabilityDiscovery"], "test_cli_commands": ["print", "CLIConfig", "CLIUtils", "CommandProcessor"], "test_context_scenarios": ["print", "create_context_orchestrator"], "test_copilot_features": ["feature.replace", "print", "hasattr", "initialize_copilot"], "run_integration_health_check": ["response.get", "print", "create_cursor_integration", "print_section", "cursor_integration.get_comprehensive_cursor_response"], "generate_optimization_suggestions": ["print", "discovery.discover_all_capabilities", "suggestions.append", "len", "enumerate", "print_section", "SystemCapabilityDiscovery"], "run_stress_test": ["print", "discovery.discover_all_capabilities", "context_data.get", "create_cursor_integration", "enumerate", "print_section", "delegation.get", "time.time", "range", "SystemCapabilityDiscovery"], "main": ["test_func", "print", "continuous_monitoring_mode", "run_stress_test", "len", "run_integration_health_check", "print_section", "time.time", "generate_optimization_suggestions", "test_specific_component"]}, "dependencies": ["CLIConfig", "CLIUtils", "CommandProcessor", "CursorSessionManager", "Path", "PersonalPlanningCursorBridge", "SystemCapabilityDiscovery", "create_context_orchestrator", "create_cursor_integration", "initialize_copilot", "json", "llmstruct.ai_self_awareness", "llmstruct.cli_commands", "llmstruct.cli_config", "llmstruct.cli_utils", "llmstruct.context_orchestrator", "llmstruct.copilot", "llmstruct.cursor_integration", "os", "pathlib", "sys", "time"], "hash": "59644d1ec404ce42fe6b754b03781cfe0649dc8d2c57a88c3f1b654e78f01fd2"}, {"module_id": "test_ai_cli_integration", "path": "test_ai_cli_integration.py", "category": "test", "module_doc": "AI CLI Integration Testing Suite\n\nAdvanced testing framework to validate how AI agents can populate and interact\nwith the LLMStruct CLI system across different scenarios and use cases.", "functions": [{"name": "main", "docstring": "Main function for AI CLI integration testing.", "line_range": [373, 411], "parameters": [], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [34, 37], "parameters": ["self", "session_id"], "decorators": []}, {"name": "setup_logging", "docstring": "Set up logging for AI CLI integration testing.", "line_range": [39, 49], "parameters": ["self"], "decorators": []}, {"name": "test_ai_cli_scenario", "docstring": "Test a specific AI CLI integration scenario.", "line_range": [51, 101], "parameters": ["self", "scenario", "ai_agent"], "decorators": []}, {"name": "get_scenario_config", "docstring": "Get configuration for specific test scenario.", "line_range": [103, 142], "parameters": ["self", "scenario"], "decorators": []}, {"name": "simulate_ai_cli_execution", "docstring": "Simulate AI agent executing CLI command with context.", "line_range": [144, 165], "parameters": ["self", "command", "context_sources", "ai_agent"], "decorators": []}, {"name": "load_simulation_context", "docstring": "Load simulated context data for testing.", "line_range": [167, 184], "parameters": ["self", "sources"], "decorators": []}, {"name": "load_json_safely", "docstring": "Safely load JSON file for testing.", "line_range": [186, 195], "parameters": ["self", "filepath"], "decorators": []}, {"name": "estimate_context_tokens", "docstring": "Estimate token consumption for context data.", "line_range": [197, 200], "parameters": ["self", "context_data"], "decorators": []}, {"name": "calculate_output_quality", "docstring": "Calculate output quality score based on various factors.", "line_range": [202, 224], "parameters": ["self", "command", "context_data", "ai_agent"], "decorators": []}, {"name": "run_comprehensive_ai_cli_tests", "docstring": "Run comprehensive AI CLI integration test suite.", "line_range": [226, 248], "parameters": ["self"], "decorators": []}, {"name": "generate_ai_cli_report", "docstring": "Generate comprehensive AI CLI integration report.", "line_range": [250, 326], "parameters": ["self"], "decorators": []}, {"name": "calculate_scenario_complexity", "docstring": "Calculate complexity score for scenario.", "line_range": [328, 338], "parameters": ["self", "scenario"], "decorators": []}, {"name": "generate_ai_cli_recommendations", "docstring": "Generate recommendations based on AI CLI test results.", "line_range": [340, 370], "parameters": ["self"], "decorators": []}], "classes": [{"name": "AICliTestResult", "docstring": "Test result for AI CLI integration testing.", "line_range": [18, 29], "methods": [], "bases": []}, {"name": "AICliIntegrationTester", "docstring": "Advanced testing class for AI CLI integration capabilities.", "line_range": [31, 370], "methods": [{"name": "__init__", "docstring": "", "line_range": [34, 37], "parameters": ["self", "session_id"]}, {"name": "setup_logging", "docstring": "Set up logging for AI CLI integration testing.", "line_range": [39, 49], "parameters": ["self"]}, {"name": "test_ai_cli_scenario", "docstring": "Test a specific AI CLI integration scenario.", "line_range": [51, 101], "parameters": ["self", "scenario", "ai_agent"]}, {"name": "get_scenario_config", "docstring": "Get configuration for specific test scenario.", "line_range": [103, 142], "parameters": ["self", "scenario"]}, {"name": "simulate_ai_cli_execution", "docstring": "Simulate AI agent executing CLI command with context.", "line_range": [144, 165], "parameters": ["self", "command", "context_sources", "ai_agent"]}, {"name": "load_simulation_context", "docstring": "Load simulated context data for testing.", "line_range": [167, 184], "parameters": ["self", "sources"]}, {"name": "load_json_safely", "docstring": "Safely load JSON file for testing.", "line_range": [186, 195], "parameters": ["self", "filepath"]}, {"name": "estimate_context_tokens", "docstring": "Estimate token consumption for context data.", "line_range": [197, 200], "parameters": ["self", "context_data"]}, {"name": "calculate_output_quality", "docstring": "Calculate output quality score based on various factors.", "line_range": [202, 224], "parameters": ["self", "command", "context_data", "ai_agent"]}, {"name": "run_comprehensive_ai_cli_tests", "docstring": "Run comprehensive AI CLI integration test suite.", "line_range": [226, 248], "parameters": ["self"]}, {"name": "generate_ai_cli_report", "docstring": "Generate comprehensive AI CLI integration report.", "line_range": [250, 326], "parameters": ["self"]}, {"name": "calculate_scenario_complexity", "docstring": "Calculate complexity score for scenario.", "line_range": [328, 338], "parameters": ["self", "scenario"]}, {"name": "generate_ai_cli_recommendations", "docstring": "Generate recommendations based on AI CLI test results.", "line_range": [340, 370], "parameters": ["self"]}], "bases": []}], "callgraph": {"__init__": ["self.setup_logging"], "setup_logging": ["logging.StreamHandler", "logging.basicConfig", "logging.getLogger", "logging.FileHandler"], "test_ai_cli_scenario": ["self.get_scenario_config", "self.simulate_ai_cli_execution", "AICliTestResult", "ai_agent.replace", "execution_result.get", "time.time", "str"], "get_scenario_config": ["scenarios.get"], "simulate_ai_cli_execution": ["self.estimate_context_tokens", "self.load_simulation_context", "self.calculate_output_quality", "asyncio.sleep"], "load_simulation_context": ["self.load_json_safely"], "load_json_safely": ["Path", "path.exists", "json.load", "open"], "estimate_context_tokens": ["len", "json.dumps"], "calculate_output_quality": ["min", "len", "agent_bonuses.get", "command.split"], "run_comprehensive_ai_cli_tests": ["self.test_ai_cli_scenario", "self.generate_ai_cli_report"], "generate_ai_cli_report": ["self.generate_ai_cli_recommendations", "json.dump", "agent_results.items", "list", "len", "scenario_results.items", "agent_analysis.keys", "open", "Path", "sum", "self.calculate_scenario_complexity", "asdict"], "calculate_scenario_complexity": ["complexity_scores.get"], "generate_ai_cli_recommendations": ["recommendations.append", "len", "sum"], "main": ["print", "parser.add_argument", "argparse.ArgumentParser", "AICliIntegrationTester", "tester.run_comprehensive_ai_cli_tests", "parser.parse_args", "tester.test_ai_cli_scenario"]}, "dependencies": ["Any", "Dict", "List", "Optional", "Path", "argparse", "asdict", "asyncio", "dataclass", "dataclasses", "json", "logging", "pathlib", "time", "typing"], "hash": "be54db56dd13f1829ac895615579e1c406e5fc25744f44070f9e8b600fb67e29"}, {"module_id": "collect_json", "path": "collect_json.py", "category": "core", "module_doc": "", "functions": [{"name": "load_json_files", "docstring": "", "line_range": [5, 19], "parameters": ["base_dir"], "decorators": []}], "classes": [], "callgraph": {"load_json_files": ["sorted", "path.open", "json.load", "base_dir.rglob", "current.setdefault", "path.relative_to"]}, "dependencies": ["Path", "json", "pathlib"], "hash": "c8dff991d16ccd9c1a9ee3f83f68adf766195005a3b49ea64a9a99e34902eaa6"}, {"module_id": "test_audit", "path": "test_audit.py", "category": "test", "module_doc": "Test script for audit functionality.", "functions": [{"name": "test_audit_status", "docstring": "Test audit status directly.", "line_range": [7, 49], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"test_audit_status": ["print", "list", "tasks_file.exists", "tasks_data.keys", "ideas_file.exists", "len", "t.get", "Path", "open", "ideas_data.keys", "json.load", "i.get"]}, "dependencies": ["Path", "json", "pathlib"], "hash": "8b6349f6348dc17c2c2a03ede44c0f6317af552a1db5501689cf235c00b3bf0e"}, {"module_id": "collector", "path": "collector.py", "category": "core", "module_doc": "", "functions": [{"name": "load_gitignore", "docstring": "", "line_range": [13, 17], "parameters": [], "decorators": []}, {"name": "is_text_file", "docstring": "Check if file is likely a text file based on extension.", "line_range": [20, 31], "parameters": ["file_path"], "decorators": []}, {"name": "collect_project", "docstring": "", "line_range": [34, 66], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"load_gitignore": ["Path", "gitignore_parser.parse_gitignore", "gitignore_path.exists"], "is_text_file": [], "collect_project": ["gitignore", "json.dump", "logger.info", "load_gitignore", "logger.warning", "doc_files.items", "len", "is_text_file", "any", "file_path.is_file", "Path", "root_dir.rglob", "logger.error", "open", "f.read", "str"]}, "dependencies": ["Path", "gitignore_parser", "json", "logging", "pathlib"], "hash": "f6d7fb537d2ae878884758c22a853439c915eae11cf2f19fd92224e5adda61cd"}, {"module_id": "debug_terminal", "path": "debug_terminal.py", "category": "core", "module_doc": "Debug Terminal Script - Fallback for when terminal output is not visible\nSaves all output to files for manual inspection", "functions": [{"name": "run_with_output_capture", "docstring": "Run command and capture output to both console and file.", "line_range": [13, 78], "parameters": ["command", "description"], "decorators": []}, {"name": "main", "docstring": "Run common diagnostic commands with output capture.", "line_range": [80, 110], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"run_with_output_capture": ["print", "len", "f.write", "open", "subprocess.run"], "main": ["run_with_output_capture", "print", "results.append"]}, "dependencies": ["Path", "datetime", "os", "pathlib", "subprocess", "sys"], "hash": "e9551d20a760ee9b69bf1c62d1d4941c17440f6814b49505b86500c4e48acc4c"}, {"module_id": "test_strict_mode", "path": "test_strict_mode.py", "category": "test", "module_doc": "\u0422\u0435\u0441\u0442 [strict] \u0440\u0435\u0436\u0438\u043c\u0430 \u0434\u043b\u044f \u044d\u043a\u0441\u0442\u0440\u0435\u043d\u043d\u043e\u0439 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438", "functions": [{"name": "test_strict_mode", "docstring": "", "line_range": [14, 76], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"test_strict_mode": ["config.get", "print", "processor.validate_strict_mode", "len", "CLIUtils", "CLIConfig", "processor.cmd_mode", "CommandProcessor", "processor.parse_tags_from_prompt"]}, "dependencies": ["CLIConfig", "CLIUtils", "CommandProcessor", "llmstruct.cli_commands", "llmstruct.cli_config", "llmstruct.cli_utils", "os", "sys"], "hash": "1bc396bd2042162a48c2d05a56d42418ebef64a2d0cae646ba0c7e36cdb8f660"}, {"module_id": "test_debug_analysis", "path": "test_debug_analysis.py", "category": "test", "module_doc": "Quick debug test for duplication analysis", "functions": [{"name": "main", "docstring": "", "line_range": [11, 58], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"main": ["struct_analysis.get", "print", "orchestrator._get_struct_analysis", "duplication.get", "stats.get", "traceback.print_exc", "time.time", "WorkflowOrchestrator"]}, "dependencies": ["WorkflowOrchestrator", "llmstruct.workflow_orchestrator", "os", "sys", "time", "traceback"], "hash": "bc686743764ede79492e13588b0d41fd9dcfbb5fc5beb760587ca17726f7a0a5"}, {"module_id": "final_system_check", "path": "final_system_check.py", "category": "core", "module_doc": "Final System Status Check - LLMStruct Modular CLI Integration\nComprehensive validation of all completed components", "functions": [{"name": "check_system_status", "docstring": "Comprehensive system status check", "line_range": [12, 155], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"check_system_status": ["print", "len", "t.get", "json.load", "open", "data.get", "i.get"]}, "dependencies": ["Path", "json", "os", "pathlib", "sys"], "hash": "16e3482f7da9388c53726063af559a9e48ad8e5a6c5c49e064129c0e5cf68aa7"}, {"module_id": "monitor_system", "path": "monitor_system.py", "category": "core", "module_doc": "System Monitor - Continuous logging for debugging terminal issues\nRuns in background and logs system status to files", "functions": [{"name": "log_system_status", "docstring": "Log current system status to file.", "line_range": [15, 60], "parameters": [], "decorators": []}, {"name": "main", "docstring": "Run continuous monitoring.", "line_range": [62, 86], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"log_system_status": ["wo.get_current_context", "timestamp.strftime", "context.get", "len", "json.dumps", "timestamp.isoformat", "Path", "f.write", "open", "WorkflowOrchestrator", "str"], "main": ["log_system_status", "print", "time.sleep", "len"]}, "dependencies": ["Path", "WorkflowOrchestrator", "datetime", "json", "llmstruct.workflow_orchestrator", "os", "pathlib", "subprocess", "sys", "time"], "hash": "f35beeb4d7f6ff371d989ccb2058b27b1ae53801e295661f046650bcf801f397"}, {"module_id": "test_deep_integration", "path": "test_deep_integration.py", "category": "test", "module_doc": "Deep Integration Test - \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0420\u0415\u0410\u041b\u042c\u041d\u041e\u0415 \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\n\u0416\u0435\u0441\u0442\u043a\u0438\u0439 \u0442\u0435\u0441\u0442: \u0447\u0438\u0442\u0430\u0435\u0442 \u043b\u0438 AI \u0444\u0430\u0439\u043b\u044b \u0438 \u043c\u043e\u0436\u0435\u0442 \u043b\u0438 \u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u0434?", "functions": [{"name": "call_ollama_direct", "docstring": "Direct call to ollama without our middleware.", "line_range": [24, 51], "parameters": ["prompt", "model"], "decorators": []}, {"name": "call_ollama_with_middleware", "docstring": "Call ollama through our AI middleware with enhanced context.", "line_range": [53, 95], "parameters": ["query", "model"], "decorators": []}, {"name": "test_deep_understanding", "docstring": "Test deep project understanding and code generation.", "line_range": [97, 227], "parameters": [], "decorators": []}, {"name": "enhanced_ollama_handler", "docstring": "Enhanced handler that uses llmstruct context.", "line_range": [56, 85], "parameters": ["processed_query", "enhanced_context"], "decorators": []}], "classes": [], "callgraph": {"call_ollama_direct": ["requests.post", "response.json", "result.get", "time.time", "str"], "call_ollama_with_middleware": [], "enhanced_ollama_handler": ["system_caps.get", "list", "enhanced_context.get", "request_info.get", "llmstruct_context.get", "call_ollama_direct"], "test_deep_understanding": ["print", "middleware_response.lower", "initialize_ai_monitor", "call_ollama_with_middleware", "len", "ollama_response.get", "enumerate", "results.append", "isinstance", "initialize_ai_middleware", "sum", "check.lower", "call_ollama_direct"]}, "dependencies": ["AIWorkflowMode", "Path", "initialize_ai_middleware", "initialize_ai_monitor", "json", "llmstruct.ai_self_monitor", "llmstruct.ai_workflow_middleware", "pathlib", "process_ai_query", "record_ai_usage", "requests", "sys", "time"], "hash": "b963b1df1c7d9d49b5207ddc0d7761a056659b9b8388a63bda425a7798cda906"}, {"module_id": "test_english_comparison", "path": "test_english_comparison.py", "category": "test", "module_doc": "English vs Russian Comparison - \u0422\u0435\u0441\u0442 \u044f\u0437\u044b\u043a\u0430 \u0441 \u043d\u0430\u0448\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439\n\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043b\u0438 \u043b\u0443\u0447\u0448\u0435 \u043d\u0430 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u043e\u043c", "functions": [{"name": "call_ollama_direct", "docstring": "Direct call to ollama.", "line_range": [22, 40], "parameters": ["prompt", "model"], "decorators": []}, {"name": "call_ollama_with_middleware", "docstring": "Call ollama through middleware.", "line_range": [42, 73], "parameters": ["query", "model"], "decorators": []}, {"name": "test_language_comparison", "docstring": "Test English vs Russian with our middleware.", "line_range": [75, 239], "parameters": [], "decorators": []}, {"name": "enhanced_ollama_handler", "docstring": "", "line_range": [45, 65], "parameters": ["processed_query", "enhanced_context"], "decorators": []}], "classes": [], "callgraph": {"call_ollama_direct": ["requests.post", "response.json", "result.get", "time.time", "str"], "call_ollama_with_middleware": [], "enhanced_ollama_handler": ["system_caps.get", "list", "enhanced_context.get", "request_info.get", "llmstruct_context.get", "call_ollama_direct"], "test_language_comparison": ["print", "initialize_ai_monitor", "russian_direct.get", "call_ollama_with_middleware", "len", "ollama_response.get", "enumerate", "results.append", "isinstance", "english_direct.get", "initialize_ai_middleware", "sum", "check.lower", "call_ollama_direct"]}, "dependencies": ["AIWorkflowMode", "Path", "initialize_ai_middleware", "initialize_ai_monitor", "json", "llmstruct.ai_self_monitor", "llmstruct.ai_workflow_middleware", "pathlib", "process_ai_query", "requests", "sys", "time"], "hash": "2d6faa80cfaf30eb51b41ea9b4459fd4b8b64fd08a1c0d4561b08b534b6fe49a"}, {"module_id": "board_cli", "path": "board_cli.py", "category": "core", "module_doc": "CLI Kanban Board for llmstruct tasks and ideas\n- Reads data/tasks.json and data/ideas.json\n- Shows board in terminal: columns by status, rows by priority\n- Supports filtering, sorting, and shows links between tasks/ideas", "functions": [{"name": "load_json", "docstring": "", "line_range": [26, 28], "parameters": ["path"], "decorators": []}, {"name": "group_by_status_and_priority", "docstring": "", "line_range": [30, 36], "parameters": ["items", "kind"], "decorators": []}, {"name": "render_board", "docstring": "", "line_range": [38, 64], "parameters": ["board", "kind"], "decorators": []}, {"name": "main", "docstring": "", "line_range": [66, 74], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"load_json": ["json.load", "open"], "group_by_status_and_priority": ["defaultdict", "item.get"], "render_board": ["table.add_column", "table.add_row", "kind.capitalize", "Table", "links.extend", "item.get", "console.print", "links.append", "Panel"], "main": ["group_by_status_and_priority", "render_board", "console.rule", "ideas_data.get", "tasks_data.get", "load_json"]}, "dependencies": ["Console", "Panel", "Path", "Table", "box", "collections", "defaultdict", "json", "os", "pathlib", "rich", "rich.console", "rich.panel", "rich.table"], "hash": "3e733003df9f2e0946abd47f3fb0fa1ff5afb323c8aede68daeb854019e1b81f"}, {"module_id": "test_ai_cli_debug", "path": "test_ai_cli_debug.py", "category": "test", "module_doc": "Simple test for AI CLI Integration - Debug Version", "functions": [{"name": "test_basic_functionality", "docstring": "Test basic functionality step by step.", "line_range": [14, 80], "parameters": [], "decorators": []}, {"name": "test_ai_self_awareness", "docstring": "Test the main AI self-awareness system.", "line_range": [82, 116], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"test_basic_functionality": ["print", "len", "traceback.print_exc", "integration.get_integration_summary", "status_result.get", "AISelfAwarenessCLIIntegration", "integration.integrate_ai_status_command", "str"], "test_ai_self_awareness": ["print", "discovery.discover_all_capabilities", "discovery.get_enhanced_capabilities_summary", "len", "traceback.print_exc", "SystemCapabilityDiscovery", "str"]}, "dependencies": ["AISelfAwarenessCLIIntegration", "Path", "SystemCapabilityDiscovery", "os", "pathlib", "src.llmstruct.ai_cli_integration", "src.llmstruct.ai_self_awareness", "sys", "traceback"], "hash": "1f5a3e4b77cf999aaccea3f6fc847c680e513441c425daace4e2f3a35d17808e"}, {"module_id": "final_system_validation", "path": "final_system_validation.py", "category": "core", "module_doc": "Final system validation script for LLMStruct Modular CLI Integration", "functions": [{"name": "main", "docstring": "Run comprehensive system validation", "line_range": [13, 238], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"main": ["print", "status.upper", "task.get", "create_cli_core", "len", "getattr", "open", "subprocess.run", "json.load", "next", "__import__"]}, "dependencies": ["Path", "create_cli_core", "json", "llmstruct.cli_core", "os", "pathlib", "subprocess", "sys", "time"], "hash": "c3b078025b32ac31fe272f4904b6574157bf71caa271e8788941900ed828fac8"}, {"module_id": "test_enhanced_ai_awareness", "path": "test_enhanced_ai_awareness.py", "category": "test", "module_doc": "Test script for AI Self-Awareness Enhancement with Unused Function Integration", "functions": [{"name": "test_enhanced_ai_self_awareness", "docstring": "Test the enhanced AI self-awareness system.", "line_range": [12, 48], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"test_enhanced_ai_self_awareness": ["print", "discovery.discover_all_capabilities", "discovery.get_comprehensive_ai_status", "integration_metrics.get", "traceback.print_exc", "SystemCapabilityDiscovery"]}, "dependencies": ["SystemCapabilityDiscovery", "os", "src.llmstruct.ai_self_awareness", "sys", "traceback"], "hash": "b38250f3392e9c60364af43e921ed4f99f4cf87bd25838339acb7ac78cb0237b"}, {"module_id": "force_ai_integration", "path": "force_ai_integration.py", "category": "core", "module_doc": "Force AI Integration Script\nInitializes middleware and monitoring to ensure AI uses llmstruct system.", "functions": [{"name": "force_ai_integration", "docstring": "Force AI to use llmstruct system.", "line_range": [18, 106], "parameters": [], "decorators": []}, {"name": "check_integration_status", "docstring": "Check current AI integration status.", "line_range": [109, 138], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"force_ai_integration": ["json.dump", "print", "record_ai_usage", "initialize_ai_monitor", "monitor.get_real_time_guidance", "Path", "middleware.process_ai_request", "initialize_ai_middleware", "open", "config_file.exists", "str"], "check_integration_status": ["middleware.get_middleware_stats", "print", "get_ai_middleware", "monitor.analyze_behavior_trends", "get_ai_monitor"]}, "dependencies": ["AIWorkflowMode", "Path", "get_ai_middleware", "get_ai_monitor", "initialize_ai_middleware", "initialize_ai_monitor", "json", "llmstruct.ai_self_monitor", "llmstruct.ai_workflow_middleware", "pathlib", "record_ai_usage", "sys"], "hash": "783d4261c3f3167843c642d5e2b59e077bddb415dacdbe64a6911560dddf6312"}, {"module_id": "validate_schemas", "path": "validate_schemas.py", "category": "core", "module_doc": "JSON Schema Validation Script for llmstruct\nValidates all enhanced JSON files against their appropriate schemas.\nPart of TSK-130 implementation.", "functions": [{"name": "load_json", "docstring": "Load JSON file with error handling.", "line_range": [24, 34], "parameters": ["file_path"], "decorators": []}, {"name": "validate_json_against_schema", "docstring": "Validate JSON data against schema.", "line_range": [37, 53], "parameters": ["json_data", "schema_data", "file_name"], "decorators": []}, {"name": "main", "docstring": "", "line_range": [56, 193], "parameters": [], "decorators": []}], "classes": [{"name": "Colors", "docstring": "", "line_range": [15, 21], "methods": [], "bases": []}], "callgraph": {"load_json": ["print", "json.load", "open"], "validate_json_against_schema": ["print", "validate", "str"], "main": ["load_json", "print", "validate_json_against_schema", "errors.append"]}, "dependencies": ["Draft7Validator", "ValidationError", "json", "jsonschema", "sys", "validate"], "hash": "08ec72522f6c50cd1624a0680fe9edc8006176193c73e0c0b2b83cae8461719a"}, {"module_id": "test_context_orchestration", "path": "test_context_orchestration.py", "category": "test", "module_doc": "LLM Context Orchestration Testing Suite\n\nComprehensive testing framework for validating context modes, token budgets,\nand LLM integration capabilities across different scenarios.", "functions": [{"name": "main", "docstring": "Main function for CLI testing.", "line_range": [422, 461], "parameters": [], "decorators": []}, {"name": "test_relationship_context_focused", "docstring": "", "line_range": [467, 480], "parameters": [], "decorators": ["pytest.mark.asyncio"]}, {"name": "__init__", "docstring": "", "line_range": [44, 47], "parameters": ["self", "config_path"], "decorators": []}, {"name": "setup_logging", "docstring": "Set up logging for test execution.", "line_range": [49, 59], "parameters": ["self"], "decorators": []}, {"name": "load_test_config", "docstring": "Load context orchestration configuration.", "line_range": [61, 82], "parameters": ["self"], "decorators": []}, {"name": "test_context_mode", "docstring": "Test a specific context mode with given scenario.", "line_range": [84, 132], "parameters": ["self", "mode", "scenario"], "decorators": []}, {"name": "load_context_for_mode", "docstring": "Load context data based on mode and token budget.", "line_range": [134, 166], "parameters": ["self", "mode", "token_budget"], "decorators": []}, {"name": "load_json_file", "docstring": "Load JSON file with error handling.", "line_range": [168, 177], "parameters": ["self", "filepath"], "decorators": []}, {"name": "load_file_content", "docstring": "Load text file content.", "line_range": [179, 188], "parameters": ["self", "filepath"], "decorators": []}, {"name": "load_docs_summary", "docstring": "Load documentation summary.", "line_range": [190, 193], "parameters": ["self"], "decorators": []}, {"name": "load_src_summary", "docstring": "Load source code summary.", "line_range": [195, 198], "parameters": ["self"], "decorators": []}, {"name": "load_current_context", "docstring": "Load current working context.", "line_range": [200, 202], "parameters": ["self"], "decorators": []}, {"name": "load_project_summary", "docstring": "Load minimal project summary.", "line_range": [204, 206], "parameters": ["self"], "decorators": []}, {"name": "load_current_task", "docstring": "Load current task information.", "line_range": [208, 210], "parameters": ["self"], "decorators": []}, {"name": "load_session_context", "docstring": "Load AI session context.", "line_range": [212, 214], "parameters": ["self"], "decorators": []}, {"name": "estimate_tokens", "docstring": "Estimate token count for context data.", "line_range": [216, 226], "parameters": ["self", "context_data"], "decorators": []}, {"name": "trim_context_to_budget", "docstring": "Trim context data to fit within token budget.", "line_range": [228, 255], "parameters": ["self", "context_data", "budget"], "decorators": []}, {"name": "truncate_content", "docstring": "Truncate content to fit token budget.", "line_range": [257, 271], "parameters": ["self", "content", "token_budget"], "decorators": []}, {"name": "assess_response_quality", "docstring": "Assess the quality of context for LLM response.", "line_range": [273, 295], "parameters": ["self", "context_data", "scenario"], "decorators": []}, {"name": "run_comprehensive_test_suite", "docstring": "Run the complete test suite for all context modes and scenarios.", "line_range": [297, 318], "parameters": ["self"], "decorators": []}, {"name": "generate_test_report", "docstring": "Generate comprehensive test report.", "line_range": [320, 370], "parameters": ["self"], "decorators": []}, {"name": "generate_recommendations", "docstring": "Generate recommendations based on test results.", "line_range": [372, 405], "parameters": ["self"], "decorators": []}, {"name": "test_relationship_context_in_focused", "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0447\u0442\u043e \u0432 FOCUSED \u0440\u0435\u0436\u0438\u043c\u0435 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 relationship_context \u0438 \u043e\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043c\u043e\u0434\u0443\u043b\u0438 \u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438.", "line_range": [407, 419], "parameters": ["self"], "decorators": []}], "classes": [{"name": "ContextTestResult", "docstring": "Test result for context orchestration testing.", "line_range": [29, 39], "methods": [], "bases": []}, {"name": "LLMContextTester", "docstring": "Main testing class for LLM context capabilities.", "line_range": [41, 419], "methods": [{"name": "__init__", "docstring": "", "line_range": [44, 47], "parameters": ["self", "config_path"]}, {"name": "setup_logging", "docstring": "Set up logging for test execution.", "line_range": [49, 59], "parameters": ["self"]}, {"name": "load_test_config", "docstring": "Load context orchestration configuration.", "line_range": [61, 82], "parameters": ["self"]}, {"name": "test_context_mode", "docstring": "Test a specific context mode with given scenario.", "line_range": [84, 132], "parameters": ["self", "mode", "scenario"]}, {"name": "load_context_for_mode", "docstring": "Load context data based on mode and token budget.", "line_range": [134, 166], "parameters": ["self", "mode", "token_budget"]}, {"name": "load_json_file", "docstring": "Load JSON file with error handling.", "line_range": [168, 177], "parameters": ["self", "filepath"]}, {"name": "load_file_content", "docstring": "Load text file content.", "line_range": [179, 188], "parameters": ["self", "filepath"]}, {"name": "load_docs_summary", "docstring": "Load documentation summary.", "line_range": [190, 193], "parameters": ["self"]}, {"name": "load_src_summary", "docstring": "Load source code summary.", "line_range": [195, 198], "parameters": ["self"]}, {"name": "load_current_context", "docstring": "Load current working context.", "line_range": [200, 202], "parameters": ["self"]}, {"name": "load_project_summary", "docstring": "Load minimal project summary.", "line_range": [204, 206], "parameters": ["self"]}, {"name": "load_current_task", "docstring": "Load current task information.", "line_range": [208, 210], "parameters": ["self"]}, {"name": "load_session_context", "docstring": "Load AI session context.", "line_range": [212, 214], "parameters": ["self"]}, {"name": "estimate_tokens", "docstring": "Estimate token count for context data.", "line_range": [216, 226], "parameters": ["self", "context_data"]}, {"name": "trim_context_to_budget", "docstring": "Trim context data to fit within token budget.", "line_range": [228, 255], "parameters": ["self", "context_data", "budget"]}, {"name": "truncate_content", "docstring": "Truncate content to fit token budget.", "line_range": [257, 271], "parameters": ["self", "content", "token_budget"]}, {"name": "assess_response_quality", "docstring": "Assess the quality of context for LLM response.", "line_range": [273, 295], "parameters": ["self", "context_data", "scenario"]}, {"name": "run_comprehensive_test_suite", "docstring": "Run the complete test suite for all context modes and scenarios.", "line_range": [297, 318], "parameters": ["self"]}, {"name": "generate_test_report", "docstring": "Generate comprehensive test report.", "line_range": [320, 370], "parameters": ["self"]}, {"name": "generate_recommendations", "docstring": "Generate recommendations based on test results.", "line_range": [372, 405], "parameters": ["self"]}, {"name": "test_relationship_context_in_focused", "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0447\u0442\u043e \u0432 FOCUSED \u0440\u0435\u0436\u0438\u043c\u0435 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 relationship_context \u0438 \u043e\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043c\u043e\u0434\u0443\u043b\u0438 \u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438.", "line_range": [407, 419], "parameters": ["self"]}], "bases": []}], "callgraph": {"__init__": ["self.setup_logging", "Path"], "setup_logging": ["logging.StreamHandler", "logging.basicConfig", "logging.getLogger", "logging.FileHandler"], "load_test_config": ["json.load", "open"], "test_context_mode": ["self.assess_response_quality", "config.get", "ContextTestResult", "context_data.keys", "list", "mode_config.get", "self.load_test_config", "self.load_context_for_mode", "isinstance", "time.time", "self.estimate_tokens", "str"], "load_context_for_mode": ["self.load_current_context", "self.load_session_context", "self.load_file_content", "self.load_src_summary", "self.load_project_summary", "self.load_current_task", "self.trim_context_to_budget", "self.load_json_file", "self.load_docs_summary"], "load_json_file": ["Path", "path.exists", "json.load", "open"], "load_file_content": ["Path", "path.exists", "f.read", "open"], "load_docs_summary": [], "load_src_summary": [], "load_current_context": [], "load_project_summary": [], "load_current_task": [], "load_session_context": ["self.load_json_file"], "estimate_tokens": ["len", "json.dumps", "isinstance", "str"], "trim_context_to_budget": ["self.estimate_tokens", "self.truncate_content"], "truncate_content": ["len", "isinstance"], "assess_response_quality": ["min", "len"], "run_comprehensive_test_suite": ["self.test_context_mode", "self.generate_test_report"], "generate_test_report": ["json.dump", "self.generate_recommendations", "len", "open", "Path", "mode_results.items", "sum", "asdict"], "generate_recommendations": ["recommendations.append", "mode_success.items", "len", "sum"], "test_relationship_context_in_focused": ["len", "print", "isinstance", "self.load_context_for_mode"], "main": ["LLMContextTester", "parser.add_argument", "print", "tester.test_context_mode", "argparse.ArgumentParser", "tester.run_comprehensive_test_suite", "parser.parse_args"], "test_relationship_context_focused": ["print", "len", "isinstance", "os.getcwd", "SmartContextOrchestrator", "orchestrator.get_context_for_scenario"]}, "dependencies": ["Any", "CLICommands", "Dict", "List", "Optional", "Path", "SmartContextOrchestrator", "argparse", "asdict", "asyncio", "dataclass", "dataclasses", "json", "logging", "os", "pathlib", "pytest", "src.llmstruct.cli_commands", "src.llmstruct.context_orchestrator", "time", "typing"], "hash": "3443453e2e2f51401945637ece9d0a4b316afc584cc0eec8a39936cb1ed6d337"}, {"module_id": "test_export", "path": "test_export.py", "category": "test", "module_doc": "", "functions": [], "classes": [], "callgraph": {}, "dependencies": ["Path", "json", "pathlib", "sys"], "hash": "80ef869d790cf9d44eee4637e892bdb0bf80d41fea6788ab1bd9cb70f4c31a40"}, {"module_id": "test_modular_cli", "path": "test_modular_cli.py", "category": "test", "module_doc": "Test script for modular CLI structure", "functions": [{"name": "test_modular_cli", "docstring": "Test basic modular CLI functionality.", "line_range": [14, 63], "parameters": [], "decorators": []}, {"name": "test_copilot_integration", "docstring": "Test Copilot integration.", "line_range": [65, 100], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"test_modular_cli": ["print", "len", "create_cli_core", "CLIUtils", "utils.read_file_content", "config.get_cache_config", "CLIConfig", "traceback.print_exc", "tempfile.TemporaryDirectory", "CommandProcessor", "utils.write_file_content"], "test_copilot_integration": ["manager.get_context_status", "print", "CopilotEvent", "len", "manager.close", "initialize_copilot", "traceback.print_exc", "tempfile.TemporaryDirectory"]}, "dependencies": ["CLIConfig", "CLICore", "CLIUtils", "CommandProcessor", "CopilotContextManager", "CopilotEvent", "Path", "create_cli_core", "initialize_copilot", "llmstruct.cli_commands", "llmstruct.cli_config", "llmstruct.cli_core", "llmstruct.cli_utils", "llmstruct.copilot", "os", "pathlib", "sys", "tempfile", "traceback"], "hash": "fca8fcf0c93da190370ff4c5328dc1c04311c0091cb0db3adff8222f83cb4383"}, {"module_id": "validate_sessions", "path": "validate_sessions.py", "category": "core", "module_doc": "Session Schema Validation Script for llmstruct\nValidates session management JSON files against their schemas.\nFocused validation for session system only.", "functions": [{"name": "load_json", "docstring": "Load JSON file with error handling.", "line_range": [21, 31], "parameters": ["file_path"], "decorators": []}, {"name": "validate_json_against_schema", "docstring": "Validate JSON data against schema.", "line_range": [33, 52], "parameters": ["json_data", "schema_data", "file_name"], "decorators": []}, {"name": "main", "docstring": "", "line_range": [54, 124], "parameters": [], "decorators": []}], "classes": [{"name": "Colors", "docstring": "", "line_range": [13, 19], "methods": [], "bases": []}], "callgraph": {"load_json": ["print", "json.load", "open"], "validate_json_against_schema": ["print", "validator.iter_errors", "list", "Draft7Validator", "len", "str"], "main": ["load_json", "print", "validate_json_against_schema", "errors.append"]}, "dependencies": ["Draft7Validator", "ValidationError", "json", "jsonschema", "sys", "validate"], "hash": "924ffd47c5971a755cb58e7ad0b4714fd00f3e4541c6e8a39375e8a3c977fe77"}, {"module_id": "test_ai_cli_simple", "path": "test_ai_cli_simple.py", "category": "test", "module_doc": "Simple AI CLI Integration Test\n\nQuick validation of AI agent CLI population capabilities.", "functions": [{"name": "test_ai_cli_integration", "docstring": "Simple test for AI CLI integration.", "line_range": [12, 107], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"test_ai_cli_integration": ["scenario.replace", "json.dump", "print", "min", "len", "enumerate", "results.append", "open", "Path", "sum", "time.time", "time.sleep"]}, "dependencies": ["Path", "json", "pathlib", "time"], "hash": "e605a05aba97fe2fc01e43e9952211c3151c47ebb6d828b728aaff6f6055e6e2"}, {"module_id": "verify_llm_response", "path": "verify_llm_response.py", "category": "core", "module_doc": "", "functions": [{"name": "load_json_file", "docstring": "Load a JSON file and return its contents.", "line_range": [15, 25], "parameters": ["file_path"], "decorators": []}, {"name": "verify_response_with_struct", "docstring": "Verify llm_response.json against struct.json.", "line_range": [28, 71], "parameters": ["response_text", "struct_data"], "decorators": []}, {"name": "verify_response_without_struct", "docstring": "Verify llm_response.json based on LLMstruct principles.", "line_range": [74, 108], "parameters": ["response_text"], "decorators": []}, {"name": "generate_metrics", "docstring": "Generate metrics for the response per EXT-004.", "line_range": [111, 141], "parameters": ["response_data", "server_log"], "decorators": []}, {"name": "update_tasks_json", "docstring": "Append a new task to tasks.json.", "line_range": [144, 151], "parameters": ["tasks_file", "new_task"], "decorators": []}, {"name": "main", "docstring": "", "line_range": [154, 225], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"load_json_file": ["logging.error", "json.load", "open"], "verify_response_with_struct": ["logging.info", "set", "re.findall", "struct_data.get", "e.startswith", "expected_goals.issubset", "logging.error", "expected_files.issubset", "expected_extensions.issubset"], "verify_response_without_struct": ["logging.info", "re.findall", "set", "expected_goals.issubset", "logging.error", "response_text.lower", "expected_files.issubset", "principle.lower", "expected_extensions.issubset"], "generate_metrics": ["re.findall", "datetime.utcnow", "len", "server_log.get", "response_text.split"], "update_tasks_json": ["json.dump", "logging.info", "load_json_file", "open", "tasks.get"], "main": ["json.dump", "logging.info", "parser.add_argument", "verify_response_without_struct", "update_tasks_json", "argparse.ArgumentParser", "generate_metrics", "open", "load_json_file", "verify_response_with_struct", "parser.parse_args"]}, "dependencies": ["Any", "Dict", "Optional", "argparse", "datetime", "json", "logging", "os", "re", "typing"], "hash": "cc9835ed655495604e354911c11b62791d839a9336d76f7df5fa987ba674c57a"}, {"module_id": "test_real_llm_integration", "path": "test_real_llm_integration.py", "category": "test", "module_doc": "Real LLM Integration Test\nTests our AI middleware with actual LLM API calls to remote ollama.", "functions": [{"name": "test_ollama_connection", "docstring": "Test if ollama is accessible.", "line_range": [24, 40], "parameters": [], "decorators": []}, {"name": "call_ollama_direct", "docstring": "Direct call to ollama without our middleware.", "line_range": [42, 69], "parameters": ["prompt", "model"], "decorators": []}, {"name": "call_ollama_with_middleware", "docstring": "Call ollama through our AI middleware with enhanced context.", "line_range": [71, 122], "parameters": ["query", "model"], "decorators": []}, {"name": "run_comparison_test", "docstring": "Run side-by-side comparison test.", "line_range": [124, 222], "parameters": [], "decorators": []}, {"name": "test_api_wrapper", "docstring": "Test if we can create a transparent API wrapper.", "line_range": [224, 262], "parameters": [], "decorators": []}, {"name": "enhanced_ollama_handler", "docstring": "Enhanced handler that uses llmstruct context.", "line_range": [74, 112], "parameters": ["processed_query", "enhanced_context"], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [231, 233], "parameters": ["self", "base_url", "middleware"], "decorators": []}, {"name": "generate", "docstring": "Wrapper that processes all calls through middleware.", "line_range": [235, 251], "parameters": ["self", "prompt", "model"], "decorators": []}], "classes": [{"name": "LLMStructOllamaWrapper", "docstring": "", "line_range": [230, 251], "methods": [{"name": "__init__", "docstring": "", "line_range": [231, 233], "parameters": ["self", "base_url", "middleware"]}, {"name": "generate", "docstring": "Wrapper that processes all calls through middleware.", "line_range": [235, 251], "parameters": ["self", "prompt", "model"]}], "bases": []}], "callgraph": {"test_ollama_connection": ["print", "len", "requests.get", "response.json"], "call_ollama_direct": ["requests.post", "response.json", "result.get", "time.time", "str"], "call_ollama_with_middleware": [], "enhanced_ollama_handler": ["print", "system_caps.get", "list", "enhanced_context.get", "len", "request_info.get", "llmstruct_context.get", "call_ollama_direct"], "run_comparison_test": ["print", "record_ai_usage", "initialize_ai_monitor", "call_ollama_with_middleware", "len", "enumerate", "isinstance", "traceback.print_exc", "initialize_ai_middleware", "ollama_response.get", "middleware_ollama_response.lower", "type", "test_ollama_connection", "call_ollama_direct"], "test_api_wrapper": ["print"], "__init__": [], "generate": ["prompt.lower", "any", "call_ollama_with_middleware", "prompt.startswith"]}, "dependencies": ["AIWorkflowMode", "Path", "initialize_ai_middleware", "initialize_ai_monitor", "json", "llmstruct.ai_self_monitor", "llmstruct.ai_workflow_middleware", "pathlib", "process_ai_query", "record_ai_usage", "requests", "sys", "time", "traceback"], "hash": "4721c03d71c036314c19cf0fc23aef27936e3d9283fa96bd772ae81e27c173b3"}, {"module_id": "test_transpiler_demo", "path": "test_transpiler_demo.py", "category": "test", "module_doc": "Demo script for AI Transpiler\nCreates a small Python project and transpiles it to Go", "functions": [{"name": "create_demo_python_project", "docstring": "Create a small demo Python project", "line_range": [19, 248], "parameters": ["project_dir"], "decorators": []}, {"name": "main", "docstring": "Demo the AI transpiler", "line_range": [250, 330], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"create_demo_python_project": ["project_path.mkdir", "print", "Path", "str"], "main": ["TranspilerConfig", "print", "AITranspiler", "list", "shutil.rmtree", "len", "sample_file.read_text", "output_path.rglob", "create_demo_python_project", "Path", "traceback.print_exc", "tempfile.TemporaryDirectory", "sample_file.relative_to", "content.split", "transpiler.transpile_project", "shutil.copytree"]}, "dependencies": ["AITranspiler", "Language", "Path", "TranspilerConfig", "llmstruct.parsers.universal_converter", "llmstruct.transpiler", "os", "pathlib", "shutil", "sys", "tempfile", "traceback"], "hash": "de9283034095787ded25a62d6061cf966748b51e3b4adfd84976288f43793217"}, {"module_id": "test_cli_demo", "path": "test_cli_demo.py", "category": "test", "module_doc": "Quick CLI test to demonstrate new commands", "functions": [{"name": "test_interactive_cli", "docstring": "Test interactive CLI with new commands", "line_range": [10, 69], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"test_interactive_cli": ["subprocess.run", "print"]}, "dependencies": ["subprocess", "sys", "time"], "hash": "d763421f609cb8cc8edb0c8fa38b361ae6e95b375833371f9b78ac98555279f7"}, {"module_id": "test_ai_bridge", "path": "test_ai_bridge.py", "category": "test", "module_doc": "Test AI Bridge functionality - bypassing Cursor terminal issues", "functions": [{"name": "test_ai_bridge", "docstring": "Test AI Bridge functionality.", "line_range": [13, 100], "parameters": [], "decorators": []}, {"name": "run_specific_test", "docstring": "Run specific AI Bridge command.", "line_range": [102, 131], "parameters": ["command"], "decorators": []}], "classes": [], "callgraph": {"test_ai_bridge": ["duplicates.get", "print", "bridge.ai_analyze_task", "bridge.ai_get_onboarding_guide", "context.get", "len", "ai_guidance.get", "guide.get", "dup_summary.get", "traceback.print_exc", "CursorAIBridge", "bridge.ai_suggest", "bridge.ai_check_duplicates", "bridge.ai_get_context", "task_analysis.get", "suggestions.get"], "run_specific_test": ["bridge.ai_analyze_task", "print", "bridge.ai_get_onboarding_guide", "json.dumps", "CursorAIBridge", "bridge.ai_suggest", "bridge.ai_check_duplicates", "bridge.ai_get_context", "str"]}, "dependencies": ["CursorAIBridge", "Path", "json", "llmstruct.cursor_ai_bridge", "pathlib", "sys", "traceback"], "hash": "3160ea6601edcc6fb68e6fe3c10781ac4cdf61b30c31aed54401240563fd204b"}, {"module_id": "examples.python_project_utils", "path": "examples/python_project_utils.py", "category": "core", "module_doc": "Utility functions for the sample project.", "functions": [{"name": "helper", "docstring": "Help the main function.", "line_range": [6, 8], "parameters": [], "decorators": []}, {"name": "log", "docstring": "Log a message.", "line_range": [11, 13], "parameters": ["message"], "decorators": []}], "classes": [], "callgraph": {"helper": ["log"], "log": ["logging.info"]}, "dependencies": ["logging"], "hash": "70fff4b692f6900035193847d1d43f0c5a32cc21033f9bca1752854d86bad1ed"}, {"module_id": "examples.python_project_main", "path": "examples/python_project_main.py", "category": "core", "module_doc": "Main module for the sample project.", "functions": [{"name": "main", "docstring": "Run the program.", "line_range": [6, 9], "parameters": [], "decorators": []}, {"name": "run", "docstring": "Execute the app.", "line_range": [15, 17], "parameters": ["self"], "decorators": []}], "classes": [{"name": "App", "docstring": "Application class.", "line_range": [12, 17], "methods": [{"name": "run", "docstring": "Execute the app.", "line_range": [15, 17], "parameters": ["self"]}], "bases": []}], "callgraph": {"main": ["utils.helper", "print"], "run": ["utils.log"]}, "dependencies": ["utils"], "hash": "510144e1a60708ee61e9b3261f619e416139a7d102c2c038af07810087c672b6"}, {"module_id": "docs.test_self_run", "path": "docs/test_self_run.py", "category": "test", "module_doc": "", "functions": [{"name": "test_filter_json_init_json", "docstring": "Test filter_json with init.json structure.", "line_range": [15, 22], "parameters": ["tmp_path"], "decorators": []}, {"name": "test_select_json_partial", "docstring": "Test partial JSON loading.", "line_range": [24, 34], "parameters": ["tmp_path"], "decorators": []}, {"name": "test_cache_json", "docstring": "Test JSON caching.", "line_range": [36, 48], "parameters": ["tmp_path"], "decorators": []}, {"name": "test_attach_to_llm_request_init_json", "docstring": "Test attach_to_llm_request with init.json and cache.", "line_range": [50, 67], "parameters": ["tmp_path"], "decorators": []}, {"name": "test_attach_to_llm_request_missing_file", "docstring": "Test attach_to_llm_request with missing file.", "line_range": [69, 73], "parameters": ["tmp_path"], "decorators": []}], "classes": [], "callgraph": {"test_filter_json_init_json": ["filter_json"], "test_select_json_partial": ["json.dump", "select_json", "str", "open"], "test_cache_json": ["json.dump", "cache.close", "cache.get_full_json", "cache.get_metadata", "cache.cache_json", "JSONCache", "open", "str"], "test_attach_to_llm_request_init_json": ["json.dump", "cache.close", "attach_to_llm_request", "JSONCache", "open", "str"], "test_attach_to_llm_request_missing_file": ["attach_to_llm_request", "str"]}, "dependencies": ["JSONCache", "Path", "attach_to_llm_request", "filter_json", "filter_struct", "json", "llmstruct.cache", "llmstruct.json_selector", "llmstruct.self_run", "pathlib", "pytest", "select_json"], "hash": "b139aa6febfe24eec888f0597e061092ca4000fdfa3877fa4cc5c23a86c64bdb"}, {"module_id": "docs.cache", "path": "docs/cache.py", "category": "core", "module_doc": "", "functions": [{"name": "__init__", "docstring": "Initialize SQLite cache for JSON files.", "line_range": [18, 22], "parameters": ["self", "db_path"], "decorators": []}, {"name": "create_tables", "docstring": "Create tables for metadata and file paths.", "line_range": [24, 42], "parameters": ["self"], "decorators": []}, {"name": "cache_json", "docstring": "Cache JSON metadata and store full file path.", "line_range": [44, 64], "parameters": ["self", "json_path", "artifact_id", "summary", "tags"], "decorators": []}, {"name": "get_metadata", "docstring": "Retrieve metadata by artifact_id.", "line_range": [66, 79], "parameters": ["self", "artifact_id"], "decorators": []}, {"name": "get_full_json", "docstring": "Load full JSON by artifact_id.", "line_range": [81, 94], "parameters": ["self", "artifact_id"], "decorators": []}, {"name": "close", "docstring": "Close database connection.", "line_range": [96, 98], "parameters": ["self"], "decorators": []}], "classes": [{"name": "JSONCache", "docstring": "", "line_range": [17, 98], "methods": [{"name": "__init__", "docstring": "Initialize SQLite cache for JSON files.", "line_range": [18, 22], "parameters": ["self", "db_path"]}, {"name": "create_tables", "docstring": "Create tables for metadata and file paths.", "line_range": [24, 42], "parameters": ["self"]}, {"name": "cache_json", "docstring": "Cache JSON metadata and store full file path.", "line_range": [44, 64], "parameters": ["self", "json_path", "artifact_id", "summary", "tags"]}, {"name": "get_metadata", "docstring": "Retrieve metadata by artifact_id.", "line_range": [66, 79], "parameters": ["self", "artifact_id"]}, {"name": "get_full_json", "docstring": "Load full JSON by artifact_id.", "line_range": [81, 94], "parameters": ["self", "artifact_id"]}, {"name": "close", "docstring": "Close database connection.", "line_range": [96, 98], "parameters": ["self"]}], "bases": []}], "callgraph": {"__init__": ["self.create_tables", "sqlite3.connect"], "create_tables": [], "cache_json": ["logging.info", "hashlib.sha256", "json_file.exists", "json.dumps", "logging.error", "content.encode", "Path", "open", "str", "f.read"], "get_metadata": ["json.loads", "cursor.fetchone"], "get_full_json": ["logging.error", "cursor.fetchone", "json.load", "open"], "close": []}, "dependencies": ["Any", "Dict", "List", "Optional", "Path", "hashlib", "json", "logging", "pathlib", "sqlite3", "typing"], "hash": "0639e2f3c27b70d02596862e63d49bc84c48ca8d0d0c8778b2d42425598acc1e"}, {"module_id": "docs.self_run", "path": "docs/self_run.py", "category": "core", "module_doc": "", "functions": [{"name": "filter_struct", "docstring": "Filter struct.json or init.json based on prompt keywords.", "line_range": [17, 35], "parameters": ["struct", "prompt"], "decorators": []}, {"name": "attach_to_llm_request", "docstring": "Attach filtered JSON to LLM prompt, using cache if available.", "line_range": [37, 74], "parameters": ["context_path", "prompt", "cache"], "decorators": []}], "classes": [], "callgraph": {"filter_struct": ["any", "module.get", "prompt.lower", "struct.get", "filter_json"], "attach_to_llm_request": ["logging.info", "cache.get_full_json", "cache.get_metadata", "json.dumps", "select_json", "logging.error", "context_file.exists", "Path", "cache.cache_json", "filter_struct", "prompt.lower", "filter_json"]}, "dependencies": ["Any", "Dict", "JSONCache", "List", "Path", "cache", "filter_json", "json", "json_selector", "logging", "pathlib", "select_json", "typing"], "hash": "894d0cb3c48c80975d0bd6f3c6920b835e98f4dfe7de68ef5c6e01e1bb300534"}, {"module_id": "docs.json_selector", "path": "docs/json_selector.py", "category": "core", "module_doc": "", "functions": [{"name": "filter_json", "docstring": "Filter JSON data by key-value pair and select fields.", "line_range": [17, 29], "parameters": ["data", "filter_key", "filter_value", "fields"], "decorators": []}, {"name": "select_json", "docstring": "Load and filter JSON file, optionally parsing partially.", "line_range": [31, 72], "parameters": ["json_path", "filter_key", "filter_value", "fields", "partial"], "decorators": []}], "classes": [], "callgraph": {"filter_json": ["isinstance", "item.get", "data.get", "filtered.append"], "select_json": ["current_item.get", "json_file.exists", "prefix.startswith", "json.load", "logging.error", "Path", "filtered.append", "ijson.parse", "open", "path.append", "f.seek", "filter_json"]}, "dependencies": ["Any", "Dict", "List", "Optional", "Path", "argparse", "ijson", "json", "logging", "pathlib", "typing"], "hash": "21ea37c015ac1ab1932e3784ab8cbd041de37be59ba72d3ad9432d5d3391523f"}, {"module_id": "docs.cli", "path": "docs/cli.py", "category": "core", "module_doc": "", "functions": [{"name": "load_gitignore", "docstring": "Load and normalize patterns from .gitignore.", "line_range": [26, 36], "parameters": ["root_dir"], "decorators": []}, {"name": "load_config", "docstring": "Load settings from llmstruct.toml or return empty dict.", "line_range": [38, 47], "parameters": ["root_dir"], "decorators": []}, {"name": "read_file_content", "docstring": "Read content of a file if it exists and is a text file.", "line_range": [49, 58], "parameters": ["file_path"], "decorators": []}, {"name": "write_to_file", "docstring": "Write content to a file in base_dir (default /tmp) and return the path.", "line_range": [60, 74], "parameters": ["content", "filename", "base_dir"], "decorators": []}, {"name": "parse_files_from_response", "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).", "line_range": [76, 83], "parameters": ["response"], "decorators": []}, {"name": "interactive", "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.", "line_range": [85, 195], "parameters": ["args"], "decorators": []}, {"name": "parse", "docstring": "Parse codebase and generate struct.json.", "line_range": [197, 237], "parameters": ["args"], "decorators": []}, {"name": "query", "docstring": "Query LLMs with prompt and context.", "line_range": [239, 260], "parameters": ["args"], "decorators": []}, {"name": "context", "docstring": "Generate context.json from input JSON.", "line_range": [262, 264], "parameters": ["args"], "decorators": []}, {"name": "dogfood", "docstring": "Run dogfooding analysis.", "line_range": [266, 268], "parameters": ["args"], "decorators": []}, {"name": "review", "docstring": "Review codebase with LLM.", "line_range": [270, 272], "parameters": ["args"], "decorators": []}, {"name": "main", "docstring": "Command-line interface for LLMstruct.", "line_range": [274, 334], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"load_gitignore": ["line.startswith", "gitignore_path.open", "gitignore_path.exists", "logging.error", "Path", "line.strip"], "load_config": ["logging.error", "Path", "config_path\u30aa\u30fc\u30d7\u30f3", "toml.load", "config_path.exists"], "read_file_content": ["path.open", "path.is_file", "logging.error", "Path", "f.read"], "write_to_file": ["logging.warning", "logging.info", "base_path.mkdir", "file_path.exists", "logging.error", "Path", "f.write", "file_path.open", "str"], "parse_files_from_response": ["filename.strip", "files.append", "re.findall", "content.strip"], "interactive": ["logging.warning", "print", "cache.close", "os.listdir", "json.dumps", "logging.error", "Path", "LLMClient", "sorted", "load_gitignore", "input", "scan_match.group", "parse_files_from_response", "re.search", "client.query", "write_match.group", "files_to_write.append", "parse", "get_folder_structure", "JSONCache", "write_dir.startswith", "attach_to_llm_request", "write_to_file", "user_input.lower", "read_file_content"], "parse": ["config.get", "logging.warning", "json.dump", "logging.info", "cache.close", "load_gitignore", "load_config", "cache.cache_json", "logging.error", "Path", "JSONCache", "generate_json"], "query": ["json.dump", "logging.info", "cache.close", "client.query", "logging.error", "Path", "JSONCache", "LLMClient"], "context": ["logging.warning"], "dogfood": ["logging.warning"], "review": ["logging.warning"], "main": ["query_parser.add_argument", "context", "dogfood", "query", "argparse.ArgumentParser", "review", "context_parser.add_argument", "parse", "parse_parser.add_argument", "interactive_parser.add_argument", "review_parser.add_argument", "interactive", "parser.parse_args", "parser.add_subparsers", "dogfood_parser.add_argument", "asyncio.run", "subparsers.add_parser"]}, "dependencies": ["JSONCache", "LLMClient", "List", "Optional", "Path", "argparse", "asyncio", "attach_to_llm_request", "generate_json", "get_folder_structure", "json", "llmstruct", "llmstruct.cache", "llmstruct.generators.json_generator", "llmstruct.self_run", "logging", "os", "pathlib", "re", "toml", "typing", "uuid"], "hash": "26cffb7c31d1f379e0dcc75d668fd872ffe10d408cfb92cc81172aeca774fffc"}, {"module_id": "temp.quick_restore", "path": "temp/quick_restore.py", "category": "core", "module_doc": "Quick AI Context Restoration Script\nRun this after Cursor restart to verify system state and get immediate context", "functions": [{"name": "print_header", "docstring": "", "line_range": [12, 14], "parameters": [], "decorators": []}, {"name": "check_system_files", "docstring": "Check if all key files exist.", "line_range": [16, 38], "parameters": [], "decorators": []}, {"name": "test_workflow_orchestrator", "docstring": "Test WorkflowOrchestrator import and basic functionality.", "line_range": [40, 78], "parameters": [], "decorators": []}, {"name": "show_current_status", "docstring": "Show current system status summary.", "line_range": [80, 87], "parameters": [], "decorators": []}, {"name": "show_next_steps", "docstring": "Show recommended next steps.", "line_range": [89, 95], "parameters": [], "decorators": []}, {"name": "show_restoration_info", "docstring": "Show how to restore AI context.", "line_range": [97, 103], "parameters": [], "decorators": []}, {"name": "main", "docstring": "Main restoration check.", "line_range": [105, 128], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"print_header": ["print"], "check_system_files": ["print", "Path"], "test_workflow_orchestrator": ["print", "wo.get_current_context", "context.get", "len", "stats.get", "WorkflowOrchestrator"], "show_current_status": ["print"], "show_next_steps": ["print"], "show_restoration_info": ["print"], "main": ["check_system_files", "print", "test_workflow_orchestrator", "show_restoration_info", "print_header", "show_next_steps", "show_current_status"]}, "dependencies": ["Path", "WorkflowOrchestrator", "json", "llmstruct.workflow_orchestrator", "os", "pathlib", "sys"], "hash": "198942694df80d30c9be8eed1453e202540f1440e291a9b47a4250d550634eab"}, {"module_id": "temp.update-singbox.logging_setup", "path": "temp/update-singbox/logging_setup.py", "category": "core", "module_doc": "", "functions": [{"name": "setup_logging", "docstring": "Configure logging with file and syslog handlers.", "line_range": [5, 27], "parameters": ["debug_level", "log_file", "max_log_size"], "decorators": []}, {"name": "rotate_logs", "docstring": "Rotate log file if it exceeds max_log_size.", "line_range": [29, 41], "parameters": ["log_file", "max_log_size"], "decorators": []}], "classes": [], "callgraph": {"setup_logging": ["file_handler.setFormatter", "logging.Formatter", "logging.getLogger", "logger.setLevel", "logging.warning", "logger.addHandler", "syslog_handler.setFormatter", "rotate_logs", "logging.FileHandler"], "rotate_logs": ["range", "os.rename", "open"]}, "dependencies": ["logging", "logging.handlers", "os"], "hash": "8e9da24732a22dc62cbdc7f05b51625a8831cdf455cbad682751a260fd42f5fe"}, {"module_id": "temp.update-singbox.install_wizard", "path": "temp/update-singbox/install_wizard.py", "category": "core", "module_doc": "", "functions": [{"name": "check_inquirer_version", "docstring": "Check if python-inquirer is installed and log its version.", "line_range": [18, 33], "parameters": [], "decorators": []}, {"name": "create_dedicated_user", "docstring": "", "line_range": [42, 54], "parameters": ["username"], "decorators": []}, {"name": "set_directory_permissions", "docstring": "", "line_range": [56, 59], "parameters": ["username", "directories"], "decorators": []}, {"name": "create_virtualenv", "docstring": "", "line_range": [61, 68], "parameters": ["path"], "decorators": []}, {"name": "activate_virtualenv", "docstring": "", "line_range": [70, 73], "parameters": ["venv_path"], "decorators": []}, {"name": "get_file_hash", "docstring": "Compute SHA-256 hash of a file.", "line_range": [75, 83], "parameters": ["file_path"], "decorators": []}, {"name": "copy_files_to_installation_path", "docstring": "Copy files to destination, overwriting if contents differ.", "line_range": [85, 116], "parameters": ["source_files", "destination_path"], "decorators": []}, {"name": "get_server_list", "docstring": "Fetch server list using update_singbox.py -l.", "line_range": [118, 148], "parameters": ["url"], "decorators": []}, {"name": "get_server_list_with_exclusions", "docstring": "Fetch server list and mark exclusions.", "line_range": [150, 160], "parameters": ["url"], "decorators": []}, {"name": "parse_arguments", "docstring": "", "line_range": [162, 169], "parameters": [], "decorators": []}, {"name": "validate_url", "docstring": "", "line_range": [171, 180], "parameters": ["url"], "decorators": []}, {"name": "ensure_install_path", "docstring": "", "line_range": [182, 187], "parameters": ["path"], "decorators": []}, {"name": "setup_systemd_service", "docstring": "", "line_range": [189, 232], "parameters": ["install_path", "timer_frequency", "service_verbosity", "install_link"], "decorators": []}, {"name": "display_exclusions_table", "docstring": "Display exclusions in a table format (Name, ID, Reason).", "line_range": [234, 249], "parameters": [], "decorators": []}, {"name": "run_installation_wizard", "docstring": "", "line_range": [251, 424], "parameters": [], "decorators": []}, {"name": "render_choice", "docstring": "", "line_range": [37, 40], "parameters": ["self", "choice", "pointer"], "decorators": []}], "classes": [{"name": "CustomRender", "docstring": "Custom renderer to visually distinguish excluded servers.", "line_range": [35, 40], "methods": [{"name": "render_choice", "docstring": "", "line_range": [37, 40], "parameters": ["self", "choice", "pointer"]}], "bases": ["ConsoleRender"]}], "callgraph": {"check_inquirer_version": ["logging.info", "logging.warning", "print", "logging.error"], "render_choice": [], "create_dedicated_user": ["sudoers_file.write", "subprocess.run", "print", "open"], "set_directory_permissions": ["subprocess.run", "print"], "create_virtualenv": ["subprocess.run", "print"], "activate_virtualenv": ["subprocess.run"], "get_file_hash": ["hashlib.sha256", "iter", "sha256.update", "sha256.hexdigest", "open", "f.read"], "copy_files_to_installation_path": ["print", "os.walk", "shutil.copy", "os.makedirs", "get_file_hash", "shutil.copytree"], "get_server_list": ["logging.info", "print", "logging.warning", "set", "len", "seen_names.add", "line.split", "logging.error", "re.sub", "server_list.append", "subprocess.run"], "get_server_list_with_exclusions": ["get_server_list", "load_exclusions", "check_inquirer_version"], "parse_arguments": ["argparse.ArgumentParser", "range", "parser.add_argument", "parser.parse_args"], "validate_url": ["re.match", "re.compile"], "ensure_install_path": ["print", "os.makedirs"], "setup_systemd_service": ["print", "service_file.write", "timer_file.write", "open", "subprocess.run"], "display_exclusions_table": ["exclusion_choices.append", "ex.get", "print", "load_exclusions"], "run_installation_wizard": ["selected_indices.append", "print", "get_server_list", "logging.error", "setup_systemd_service", "map", "inquirer.prompt", "inquirer.List", "ensure_install_path", "parse_arguments", "re.sub", "all_servers.index", "get_server_list_with_exclusions", "create_virtualenv", "inquirer.Text", "save_exclusions", "validate_url", "activate_virtualenv", "copy_files_to_installation_path", "logging.info", "inquirer.Checkbox", "CustomRender", "subprocess.run", "display_exclusions_table"]}, "dependencies": ["ConsoleRender", "argparse", "exclude_servers", "get_server_list", "hashlib", "importlib.metadata", "inquirer", "inquirer.render.console", "load_exclusions", "logging", "modules.server_management", "os", "re", "save_exclusions", "shutil", "subprocess", "sys", "view_exclusions"], "hash": "977a0eb97b7b564145029fa8b7a5e077b341e859aee0eeb29106af6ec8117c66"}, {"module_id": "temp.update-singbox.update_singbox", "path": "temp/update-singbox/update_singbox.py", "category": "core", "module_doc": "Update sing-box configuration from a remote JSON source.\n\nThis script fetches proxy configurations from a specified URL, validates the\nselected protocol, generates a sing-box configuration file, and manages the\nsing-box service. It supports protocols like VLESS, Shadowsocks, VMess, Trojan,\nTUIC, and Hysteria2. By default, it enables auto-selection of servers using urltest.\nIf a specific server is selected by remarks or index, only that server is included.\n\nUsage:\n    python3 update_singbox.py -u <URL> [-r <remarks> | -i <index>] [-d]\n    Example: python3 update_singbox.py -u https://example.com/config -r \"Server1\"\n    Example: python3 update_singbox.py -u https://example.com/config -i 2 -d\n\nEnvironment Variables:\n    SINGBOX_LOG_FILE: Path to log file (default: /var/log/update_singbox.log)\n    SINGBOX_CONFIG_FILE: Path to config file (default: /etc/sing-box/config.json)\n    SINGBOX_BACKUP_FILE: Path to backup file (default: /etc/sing-box/config.json.bak)\n    SINGBOX_TEMPLATE_FILE: Path to template file (default: ./config.template.json)\n    SINGBOX_MAX_LOG_SIZE: Max log size in bytes (default: 1048576)\n    SINGBOX_URL: URL for proxy configuration (optional)\n    SINGBOX_REMARKS: Select server by remarks\n    SINGBOX_INDEX: Select server by index\n    SINGBOX_DEBUG: Set debug level: 0 for minimal, 1 for detailed, 2 for verbose\n    SINGBOX_PROXY: Proxy URL (e.g., socks5://127.0.0.1:1080 or https://proxy.example.com)", "functions": [{"name": "main", "docstring": "Main function to update sing-box configuration.", "line_range": [49, 195], "parameters": [], "decorators": []}, {"name": "generate_config_after_exclusion", "docstring": "Generate configuration after applying exclusions.", "line_range": [197, 234], "parameters": ["json_data", "debug_level"], "decorators": []}, {"name": "parse_comma_separated_values", "docstring": "", "line_range": [51, 52], "parameters": ["value"], "decorators": []}], "classes": [], "callgraph": {"main": [], "parse_comma_separated_values": ["v.strip", "int", "value.split"], "generate_config_after_exclusion": ["logging.warning", "logging.info", "validate_protocol", "outbound.get", "chr", "len", "excluded_ips.append", "enumerate", "apply_exclusions", "generate_config", "isinstance", "load_exclusions", "outbounds.append"]}, "dependencies": ["apply_exclusions", "argparse", "clear_exclusions", "exclude_servers", "fetch_json", "generate_config", "generate_server_id", "json", "list_servers", "load_exclusions", "load_selected_config", "logging", "logging_setup", "manage_service", "modules.config_fetch", "modules.config_generate", "modules.protocol_validation", "modules.server_management", "modules.service_manage", "os", "remove_exclusions", "save_selected_config", "select_config", "setup_logging", "sys", "validate_protocol", "view_exclusions"], "hash": "7217da3ecd5290b672fe1f194ef02705a88be2ec70ccbfc0ba8fa8102b3c28fb"}, {"module_id": "temp.update-singbox.utils.callgraph", "path": "temp/update-singbox/utils/callgraph.py", "category": "core", "module_doc": "", "functions": [{"name": "analyze_calls", "docstring": "", "line_range": [21, 35], "parameters": ["filepath"], "decorators": []}, {"name": "build_callgraph", "docstring": "", "line_range": [37, 49], "parameters": ["root_dir"], "decorators": []}, {"name": "main", "docstring": "", "line_range": [51, 61], "parameters": [], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [9, 10], "parameters": ["self"], "decorators": []}, {"name": "visit_Call", "docstring": "", "line_range": [12, 19], "parameters": ["self", "node"], "decorators": []}], "classes": [{"name": "CallVisitor", "docstring": "", "line_range": [8, 19], "methods": [{"name": "__init__", "docstring": "", "line_range": [9, 10], "parameters": ["self"]}, {"name": "visit_Call", "docstring": "", "line_range": [12, 19], "parameters": ["self", "node"]}], "bases": ["ast.NodeVisitor"]}], "callgraph": {"__init__": ["set"], "visit_Call": ["self.generic_visit", "isinstance"], "analyze_calls": ["CallVisitor", "sorted", "ast.parse", "isinstance", "open", "visitor.visit", "f.read"], "build_callgraph": ["os.walk", "dirpath.split", "any", "filename.endswith", "analyze_calls"], "main": ["json.dump", "print", "parser.add_argument", "argparse.ArgumentParser", "open", "parser.parse_args", "build_callgraph"]}, "dependencies": ["argparse", "ast", "json", "os"], "hash": "1ec4b0f01ea8ae7f690502b1ca616dc76c4e113392cdb6e0c4337b673431ffd4"}, {"module_id": "temp.update-singbox.utils.genstruct", "path": "temp/update-singbox/utils/genstruct.py", "category": "core", "module_doc": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b Python-\u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0432 JSON \u0441 \u0440\u0435\u0436\u0438\u043c\u0430\u043c\u0438 compact \u0438 detailed.", "functions": [{"name": "extract_compact", "docstring": "\u0418\u0437\u0432\u043b\u0435\u0447\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0438\u043c\u0435\u043d\u0430 \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0438 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0431\u0435\u0437 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432.", "line_range": [14, 28], "parameters": ["filepath"], "decorators": []}, {"name": "extract_detailed", "docstring": "\u0418\u0437\u0432\u043b\u0435\u0447\u044c \u0438\u043c\u0435\u043d\u0430, \u0441\u0438\u0433\u043d\u0430\u0442\u0443\u0440\u044b, \u0434\u043e\u043a\u0441\u0442\u0440\u0438\u043d\u0433\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0438 \u043a\u043b\u0430\u0441\u0441\u043e\u0432, \u0434\u043e\u043a\u0441\u0442\u0440\u0438\u043d\u0433 \u043c\u043e\u0434\u0443\u043b\u044f.", "line_range": [30, 65], "parameters": ["filepath"], "decorators": []}, {"name": "build_struct_json", "docstring": "", "line_range": [67, 97], "parameters": ["root_dir", "mode"], "decorators": []}, {"name": "main", "docstring": "", "line_range": [99, 110], "parameters": [], "decorators": []}, {"name": "get_signature", "docstring": "", "line_range": [43, 48], "parameters": ["func_node"], "decorators": []}], "classes": [], "callgraph": {"extract_compact": ["functions.append", "ast.walk", "file.read", "classes.append", "ast.parse", "isinstance", "open"], "extract_detailed": ["ast.parse", "ast.get_docstring", "file.read", "open"], "get_signature": ["args.append"], "build_struct_json": ["extract_compact", "os.walk", "dirpath.split", "any", "filename.endswith", "extract_detailed"], "main": ["json.dump", "print", "parser.add_argument", "argparse.ArgumentParser", "build_struct_json", "open", "parser.parse_args"]}, "dependencies": ["List", "Optional", "Tuple", "argparse", "ast", "json", "os", "typing"], "hash": "3e48eeb543b0e7d70a7d1302e7a6738ae4931e344d8d78ee2ca0e8fda2fc6669"}, {"module_id": "temp.update-singbox.modules.config_fetch", "path": "temp/update-singbox/modules/config_fetch.py", "category": "core", "module_doc": "", "functions": [{"name": "fetch_json", "docstring": "Fetch JSON from URL with optional proxy.", "line_range": [5, 30], "parameters": ["url", "proxy_url"], "decorators": []}, {"name": "select_config", "docstring": "Select proxy configuration by remarks or index.", "line_range": [32, 54], "parameters": ["json_data", "remarks", "index"], "decorators": []}], "classes": [], "callgraph": {"fetch_json": ["response.raise_for_status", "error", "requests.get", "response.json"], "select_config": ["outbound.get", "ValueError", "item.get", "isinstance"]}, "dependencies": ["error", "json", "logging", "requests"], "hash": "65416cca5dc4208552782aee9b9009344ec74a145509c6271cd7b7cd43f35001"}, {"module_id": "temp.update-singbox.modules.__init__", "path": "temp/update-singbox/modules/__init__.py", "category": "cli", "module_doc": "", "functions": [], "classes": [], "callgraph": {}, "dependencies": [], "hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"}, {"module_id": "temp.update-singbox.modules.protocol_validation", "path": "temp/update-singbox/modules/protocol_validation.py", "category": "core", "module_doc": "", "functions": [{"name": "validate_protocol", "docstring": "Validate protocol and extract parameters.", "line_range": [3, 88], "parameters": ["config", "supported_protocols"], "decorators": []}], "classes": [], "callgraph": {"validate_protocol": ["config.get", "outbound.update", "outbound.get", "error", "ValueError"]}, "dependencies": ["error", "logging", "warning"], "hash": "e09902feb50c53274e545ea215dc1e76a29dffba56756398efb849569a6886a8"}, {"module_id": "temp.update-singbox.modules.config_generate", "path": "temp/update-singbox/modules/config_generate.py", "category": "core", "module_doc": "", "functions": [{"name": "generate_config", "docstring": "Generate sing-box configuration from template.", "line_range": [6, 74], "parameters": ["outbounds", "template_file", "config_file", "backup_file", "excluded_ips"], "decorators": []}], "classes": [], "callgraph": {"generate_config": ["info", "rule.get", "current_config_file.read", "current_config.strip", "outbound.get", "json.dumps", "len", "enumerate", "FileNotFoundError", "o.get", "error", "f.write", "config.strip", "open", "subprocess.run", "os.rename", "json.load", "next"]}, "dependencies": ["error", "info", "json", "logging", "os", "subprocess"], "hash": "40cf9ca6ce6ec79923065db1ba3164d46b67ffca19f712b57de4cf40f238167f"}, {"module_id": "temp.update-singbox.modules.utils", "path": "temp/update-singbox/modules/utils.py", "category": "core", "module_doc": "", "functions": [{"name": "handle_temp_file", "docstring": "Write content to a temporary file, validate, and move to target path.", "line_range": [7, 20], "parameters": ["content", "target_path", "validate_fn"], "decorators": []}], "classes": [], "callgraph": {"handle_temp_file": ["tempfile.gettempdir", "ValueError", "json.dumps", "f.write", "error", "open", "validate_fn", "shutil.move"]}, "dependencies": ["error", "json", "logging", "os", "shutil", "tempfile"], "hash": "8f415c612ff475b6360500db31b6c41c5cd481824d255df51d2b08223d5a211d"}, {"module_id": "temp.update-singbox.modules.server_management", "path": "temp/update-singbox/modules/server_management.py", "category": "core", "module_doc": "", "functions": [{"name": "list_servers", "docstring": "List all supported outbounds with indices and details.", "line_range": [12, 31], "parameters": ["json_data", "supported_protocols", "debug_level"], "decorators": []}, {"name": "generate_server_id", "docstring": "Generate a unique ID for a server based on tag, protocol, and port.", "line_range": [33, 36], "parameters": ["server"], "decorators": []}, {"name": "handle_temp_file", "docstring": "Handle temporary file creation and validation.", "line_range": [38, 46], "parameters": ["content", "target_path", "validate_fn"], "decorators": []}, {"name": "load_exclusions", "docstring": "Load exclusions from the exclusion file.", "line_range": [48, 53], "parameters": [], "decorators": []}, {"name": "save_exclusions", "docstring": "Save exclusions to the exclusion file.", "line_range": [55, 58], "parameters": ["exclusions"], "decorators": []}, {"name": "load_selected_config", "docstring": "Load selected configuration from file.", "line_range": [60, 65], "parameters": [], "decorators": []}, {"name": "save_selected_config", "docstring": "Save selected configuration to file.", "line_range": [67, 70], "parameters": ["selected"], "decorators": []}, {"name": "apply_exclusions", "docstring": "Apply exclusions to the list of server configurations.", "line_range": [72, 82], "parameters": ["configs", "excluded_ids", "debug_level"], "decorators": []}, {"name": "exclude_servers", "docstring": "Exclude servers by index or name, supporting wildcards.", "line_range": [84, 115], "parameters": ["json_data", "exclude_list", "supported_protocols", "debug_level"], "decorators": []}, {"name": "remove_exclusions", "docstring": "Remove exclusions by index or name.", "line_range": [117, 138], "parameters": ["exclude_list", "json_data", "supported_protocols", "debug_level"], "decorators": []}, {"name": "view_exclusions", "docstring": "View current exclusions in a table format.", "line_range": [140, 154], "parameters": ["debug_level"], "decorators": []}, {"name": "clear_exclusions", "docstring": "Clear all current exclusions.", "line_range": [156, 162], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"list_servers": ["print", "isinstance", "server.get"], "generate_server_id": ["identifier.encode", "hashlib.sha256", "server.get"], "handle_temp_file": ["tempfile.gettempdir", "ValueError", "json.dumps", "f.write", "open", "validate_fn", "shutil.move"], "load_exclusions": ["json.load", "open"], "save_exclusions": ["handle_temp_file"], "load_selected_config": ["json.load", "open"], "save_selected_config": ["handle_temp_file"], "apply_exclusions": ["config.get", "print", "enumerate", "valid_configs.append", "generate_server_id"], "exclude_servers": ["print", "len", "int", "any", "item.isdigit", "enumerate", "fnmatch.fnmatch", "save_exclusions", "load_exclusions", "server.get", "new_exclusions.append", "json_data.get", "generate_server_id"], "remove_exclusions": ["print", "item.startswith", "len", "int", "save_exclusions", "enumerate", "load_exclusions", "server.get", "json_data.get", "generate_server_id"], "view_exclusions": ["exclusion.get", "print", "json.dumps", "load_exclusions"], "clear_exclusions": ["os.remove", "print"]}, "dependencies": ["datetime", "fnmatch", "hashlib", "json", "os", "shutil", "tempfile"], "hash": "c0947fcb6f578ef7b5a4fb9be67c749fb111cb6e008cae39998b39d4b3babb57"}, {"module_id": "temp.update-singbox.modules.service_manage", "path": "temp/update-singbox/modules/service_manage.py", "category": "core", "module_doc": "", "functions": [{"name": "manage_service", "docstring": "Restart or start sing-box service.", "line_range": [5, 17], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"manage_service": ["info", "EnvironmentError", "error", "shutil.which", "subprocess.run"]}, "dependencies": ["error", "info", "logging", "shutil", "subprocess"], "hash": "61ba558fa807efd84f9d47c333da283ee45bc6578ad36fb7e1cb1e6b21f64217"}, {"module_id": "temp.update-singbox.modules.module_installer", "path": "temp/update-singbox/modules/module_installer.py", "category": "core", "module_doc": "", "functions": [{"name": "install_dependencies", "docstring": "", "line_range": [6, 11], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"install_dependencies": ["subprocess.run", "print"]}, "dependencies": ["subprocess", "sys"], "hash": "85f0a2ced8f559a0da8d521a551fd94c629660b89b8398f51bda616c2cf0b0bd"}, {"module_id": ".personal.commercial_planning", "path": ".personal/commercial_planning.py", "category": "core", "module_doc": "", "functions": [], "classes": [], "callgraph": {}, "dependencies": [], "hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"}, {"module_id": ".personal.boss.scripts.boss_cli", "path": ".personal/boss/scripts/boss_cli.py", "category": "core", "module_doc": "Boss CLI - \u041f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 CLI \u0434\u043b\u044f \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f\n\u0412\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432\u0441\u0435 \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 + \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u043e\u0434\u0443\u043b\u0438", "functions": [{"name": "main", "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f.", "line_range": [490, 503], "parameters": [], "decorators": []}, {"name": "__init__", "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f Boss CLI.", "line_range": [42, 101], "parameters": ["self", "project_root"], "decorators": []}, {"name": "run_interactive", "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0440\u0435\u0436\u0438\u043c\u0430 Boss CLI.", "line_range": [103, 126], "parameters": ["self"], "decorators": []}, {"name": "process_command", "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.", "line_range": [128, 147], "parameters": ["self", "command_line"], "decorators": []}, {"name": "cmd_ai_status", "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0441\u0442\u0430\u0442\u0443\u0441.", "line_range": [150, 157], "parameters": ["self", "args"], "decorators": []}, {"name": "cmd_ai_audit", "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0430\u0443\u0434\u0438\u0442.", "line_range": [159, 166], "parameters": ["self", "args"], "decorators": []}, {"name": "cmd_ai_context", "docstring": "AI \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435.", "line_range": [168, 175], "parameters": ["self", "args"], "decorators": []}, {"name": "cmd_ai_queue", "docstring": "AI \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433.", "line_range": [177, 184], "parameters": ["self", "args"], "decorators": []}, {"name": "cmd_ai_summary", "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 summary.", "line_range": [186, 193], "parameters": ["self", "args"], "decorators": []}, {"name": "cmd_business_roadmap", "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u043e\u043c.", "line_range": [196, 221], "parameters": ["self", "args"], "decorators": []}, {"name": "cmd_financial_plan", "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u044b\u043c \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c.", "line_range": [223, 256], "parameters": ["self", "args"], "decorators": []}, {"name": "cmd_strategic_decision", "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439.", "line_range": [258, 273], "parameters": ["self", "args"], "decorators": []}, {"name": "cmd_business_analysis", "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.", "line_range": [275, 282], "parameters": ["self", "args"], "decorators": []}, {"name": "cmd_business_summary", "docstring": "\u0421\u0432\u043e\u0434\u043a\u0430 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441\u0443.", "line_range": [284, 291], "parameters": ["self", "args"], "decorators": []}, {"name": "cmd_team_strategy", "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.", "line_range": [294, 308], "parameters": ["self", "args"], "decorators": []}, {"name": "cmd_team_evaluation", "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.", "line_range": [310, 326], "parameters": ["self", "args"], "decorators": []}, {"name": "cmd_hiring_plan", "docstring": "\u041f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430\u0439\u043c\u0430.", "line_range": [328, 346], "parameters": ["self", "args"], "decorators": []}, {"name": "cmd_team_analysis", "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.", "line_range": [348, 355], "parameters": ["self", "args"], "decorators": []}, {"name": "cmd_team_report", "docstring": "\u041e\u0442\u0447\u0451\u0442 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.", "line_range": [357, 364], "parameters": ["self", "args"], "decorators": []}, {"name": "cmd_technical", "docstring": "\u0422\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b (\u043f\u043e\u043b\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f).", "line_range": [367, 379], "parameters": ["self", "args"], "decorators": []}, {"name": "cmd_context_full", "docstring": "\u041d\u0435\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0443.", "line_range": [381, 384], "parameters": ["self", "args"], "decorators": []}, {"name": "cmd_workspace_override", "docstring": "Emergency workspace overrides.", "line_range": [387, 396], "parameters": ["self", "args"], "decorators": []}, {"name": "cmd_capabilities", "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b.", "line_range": [399, 422], "parameters": ["self", "args"], "decorators": []}, {"name": "cmd_boss_status", "docstring": "\u041e\u0431\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 Boss CLI.", "line_range": [424, 440], "parameters": ["self", "args"], "decorators": []}, {"name": "cmd_help", "docstring": "\u0421\u043f\u0440\u0430\u0432\u043a\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c Boss CLI.", "line_range": [442, 487], "parameters": ["self", "args"], "decorators": []}], "classes": [{"name": "BossCLI", "docstring": "Boss CLI - \u043f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f.\n\u0412\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432\u0441\u0435 \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 + \u0431\u0438\u0437\u043d\u0435\u0441-\u0444\u0443\u043d\u043a\u0446\u0438\u0438.", "line_range": [36, 487], "methods": [{"name": "__init__", "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f Boss CLI.", "line_range": [42, 101], "parameters": ["self", "project_root"]}, {"name": "run_interactive", "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0440\u0435\u0436\u0438\u043c\u0430 Boss CLI.", "line_range": [103, 126], "parameters": ["self"]}, {"name": "process_command", "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.", "line_range": [128, 147], "parameters": ["self", "command_line"]}, {"name": "cmd_ai_status", "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0441\u0442\u0430\u0442\u0443\u0441.", "line_range": [150, 157], "parameters": ["self", "args"]}, {"name": "cmd_ai_audit", "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0430\u0443\u0434\u0438\u0442.", "line_range": [159, 166], "parameters": ["self", "args"]}, {"name": "cmd_ai_context", "docstring": "AI \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435.", "line_range": [168, 175], "parameters": ["self", "args"]}, {"name": "cmd_ai_queue", "docstring": "AI \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433.", "line_range": [177, 184], "parameters": ["self", "args"]}, {"name": "cmd_ai_summary", "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 summary.", "line_range": [186, 193], "parameters": ["self", "args"]}, {"name": "cmd_business_roadmap", "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u043e\u043c.", "line_range": [196, 221], "parameters": ["self", "args"]}, {"name": "cmd_financial_plan", "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u044b\u043c \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c.", "line_range": [223, 256], "parameters": ["self", "args"]}, {"name": "cmd_strategic_decision", "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439.", "line_range": [258, 273], "parameters": ["self", "args"]}, {"name": "cmd_business_analysis", "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.", "line_range": [275, 282], "parameters": ["self", "args"]}, {"name": "cmd_business_summary", "docstring": "\u0421\u0432\u043e\u0434\u043a\u0430 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441\u0443.", "line_range": [284, 291], "parameters": ["self", "args"]}, {"name": "cmd_team_strategy", "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.", "line_range": [294, 308], "parameters": ["self", "args"]}, {"name": "cmd_team_evaluation", "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.", "line_range": [310, 326], "parameters": ["self", "args"]}, {"name": "cmd_hiring_plan", "docstring": "\u041f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430\u0439\u043c\u0430.", "line_range": [328, 346], "parameters": ["self", "args"]}, {"name": "cmd_team_analysis", "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.", "line_range": [348, 355], "parameters": ["self", "args"]}, {"name": "cmd_team_report", "docstring": "\u041e\u0442\u0447\u0451\u0442 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.", "line_range": [357, 364], "parameters": ["self", "args"]}, {"name": "cmd_technical", "docstring": "\u0422\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b (\u043f\u043e\u043b\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f).", "line_range": [367, 379], "parameters": ["self", "args"]}, {"name": "cmd_context_full", "docstring": "\u041d\u0435\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0443.", "line_range": [381, 384], "parameters": ["self", "args"]}, {"name": "cmd_workspace_override", "docstring": "Emergency workspace overrides.", "line_range": [387, 396], "parameters": ["self", "args"]}, {"name": "cmd_capabilities", "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b.", "line_range": [399, 422], "parameters": ["self", "args"]}, {"name": "cmd_boss_status", "docstring": "\u041e\u0431\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 Boss CLI.", "line_range": [424, 440], "parameters": ["self", "args"]}, {"name": "cmd_help", "docstring": "\u0421\u043f\u0440\u0430\u0432\u043a\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c Boss CLI.", "line_range": [442, 487], "parameters": ["self", "args"]}], "bases": []}], "callgraph": {"__init__": ["TeamManagementSystem", "CLIUtils", "CLIConfig", "Path", "BusinessPlanningManager", "str", "CommandProcessor", "AISelfAwarenessCLIIntegration"], "run_interactive": ["user_input.lower", "print", "input", "self.process_command"], "process_command": ["cmd.startswith", "len", "print", "command_line.split"], "cmd_ai_status": ["print", "json.dumps"], "cmd_ai_audit": ["print", "json.dumps"], "cmd_ai_context": ["print", "json.dumps"], "cmd_ai_queue": ["print", "json.dumps"], "cmd_ai_summary": ["print", "json.dumps"], "cmd_business_roadmap": ["print", "json.dumps"], "cmd_financial_plan": ["print", "json.dumps"], "cmd_strategic_decision": ["print", "json.dumps"], "cmd_business_analysis": ["print", "json.dumps"], "cmd_business_summary": ["print", "json.dumps"], "cmd_team_strategy": ["print", "json.dumps"], "cmd_team_evaluation": ["print", "json.dumps"], "cmd_hiring_plan": ["print", "json.dumps"], "cmd_team_analysis": ["print", "json.dumps"], "cmd_team_report": ["print", "json.dumps"], "cmd_technical": ["print"], "cmd_context_full": ["print"], "cmd_workspace_override": ["print"], "cmd_capabilities": ["print", "json.dumps", "bool"], "cmd_boss_status": ["print", "json.dumps"], "cmd_help": ["print"], "main": ["parser.add_argument", "boss_cli.run_interactive", "argparse.ArgumentParser", "boss_cli.process_command", "parser.parse_args", "BossCLI"]}, "dependencies": ["AISelfAwarenessCLIIntegration", "Any", "BusinessPlanningManager", "CLIConfig", "CLIUtils", "CommandProcessor", "Dict", "Optional", "Path", "TeamManagementSystem", "argparse", "business_planning", "json", "llmstruct.ai_cli_integration", "llmstruct.cli_commands", "llmstruct.cli_config", "llmstruct.cli_utils", "os", "pathlib", "sys", "team_management", "typing"], "hash": "fcd9f04d7641d774f0e698d44db67cf7172430d3a3cf4aa2b4cbf3350362b94d"}, {"module_id": ".personal.boss.scripts.team_management", "path": ".personal/boss/scripts/team_management.py", "category": "core", "module_doc": "Team Management Module\n\u041c\u043e\u0434\u0443\u043b\u044c \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439, \u043e\u0446\u0435\u043d\u043a\u0438 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432 \u0438 HR-\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432.\n\u0414\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044e \u043f\u0440\u043e\u0435\u043a\u0442\u0430.", "functions": [{"name": "create_team_management_system", "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.", "line_range": [291, 293], "parameters": ["data_dir"], "decorators": []}, {"name": "__init__", "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.", "line_range": [20, 27], "parameters": ["self", "boss_data_dir"], "decorators": []}, {"name": "create_team_strategy", "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.", "line_range": [29, 54], "parameters": ["self", "strategy_data"], "decorators": []}, {"name": "record_team_evaluation", "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u0447\u043b\u0435\u043d\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.", "line_range": [56, 88], "parameters": ["self", "evaluation_data"], "decorators": []}, {"name": "create_hiring_plan", "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430 \u043d\u0430\u0439\u043c\u0430.", "line_range": [90, 115], "parameters": ["self", "plan_data"], "decorators": []}, {"name": "analyze_team_performance", "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.", "line_range": [117, 156], "parameters": ["self"], "decorators": []}, {"name": "get_team_summary", "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.", "line_range": [158, 195], "parameters": ["self"], "decorators": []}, {"name": "generate_team_report", "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043e\u0442\u0447\u0451\u0442\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.", "line_range": [197, 226], "parameters": ["self"], "decorators": []}, {"name": "_summarize_strategy", "docstring": "\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u0438\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438.", "line_range": [228, 238], "parameters": ["self", "strategy"], "decorators": []}, {"name": "_summarize_evaluations", "docstring": "\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u0438\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043e\u0446\u0435\u043d\u043e\u043a.", "line_range": [240, 250], "parameters": ["self", "evaluations"], "decorators": []}, {"name": "_generate_recommendations", "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0439.", "line_range": [252, 268], "parameters": ["self", "strategy", "evaluations"], "decorators": []}, {"name": "_load_data", "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 JSON \u0444\u0430\u0439\u043b\u0430.", "line_range": [270, 279], "parameters": ["self", "file_path", "default"], "decorators": []}, {"name": "_save_data", "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JSON \u0444\u0430\u0439\u043b.", "line_range": [281, 288], "parameters": ["self", "file_path", "data"], "decorators": []}], "classes": [{"name": "TeamManagementSystem", "docstring": "\u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439 \u0438 HR-\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438.", "line_range": [17, 288], "methods": [{"name": "__init__", "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.", "line_range": [20, 27], "parameters": ["self", "boss_data_dir"]}, {"name": "create_team_strategy", "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.", "line_range": [29, 54], "parameters": ["self", "strategy_data"]}, {"name": "record_team_evaluation", "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u0447\u043b\u0435\u043d\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.", "line_range": [56, 88], "parameters": ["self", "evaluation_data"]}, {"name": "create_hiring_plan", "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430 \u043d\u0430\u0439\u043c\u0430.", "line_range": [90, 115], "parameters": ["self", "plan_data"]}, {"name": "analyze_team_performance", "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.", "line_range": [117, 156], "parameters": ["self"]}, {"name": "get_team_summary", "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.", "line_range": [158, 195], "parameters": ["self"]}, {"name": "generate_team_report", "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043e\u0442\u0447\u0451\u0442\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.", "line_range": [197, 226], "parameters": ["self"]}, {"name": "_summarize_strategy", "docstring": "\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u0438\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438.", "line_range": [228, 238], "parameters": ["self", "strategy"]}, {"name": "_summarize_evaluations", "docstring": "\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u0438\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043e\u0446\u0435\u043d\u043e\u043a.", "line_range": [240, 250], "parameters": ["self", "evaluations"]}, {"name": "_generate_recommendations", "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0439.", "line_range": [252, 268], "parameters": ["self", "strategy", "evaluations"]}, {"name": "_load_data", "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 JSON \u0444\u0430\u0439\u043b\u0430.", "line_range": [270, 279], "parameters": ["self", "file_path", "default"]}, {"name": "_save_data", "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JSON \u0444\u0430\u0439\u043b.", "line_range": [281, 288], "parameters": ["self", "file_path", "data"]}], "bases": []}], "callgraph": {"__init__": ["Path"], "create_team_strategy": ["datetime.now", "self._save_data", "logger.info", "logger.error"], "record_team_evaluation": ["logger.info", "datetime.now", "self._save_data", "evaluations.append", "self._load_data", "isinstance", "logger.error"], "create_hiring_plan": ["datetime.now", "self._save_data", "logger.info", "logger.error"], "analyze_team_performance": ["datetime.now", "len", "bool", "self._load_data", "isinstance", "logger.error"], "get_team_summary": ["hiring_plans.get", "datetime.now", "len", "strategy.get", "bool", "self._load_data", "isinstance", "logger.error"], "generate_team_report": ["self._summarize_evaluations", "datetime.now", "self._load_data", "self._summarize_strategy", "logger.error", "self._generate_recommendations"], "_summarize_strategy": ["strategy.get"], "_summarize_evaluations": ["len", "isinstance"], "_generate_recommendations": ["recommendations.append", "len"], "_load_data": ["file_path.open", "file_path.exists", "json.load", "logger.error"], "_save_data": ["file_path.open", "json.dump", "logger.error"], "create_team_management_system": ["TeamManagementSystem"]}, "dependencies": ["Any", "Dict", "List", "Optional", "Path", "datetime", "json", "logging", "pathlib", "sys", "timedelta", "typing"], "hash": "3201ea679ec44992fb13752a988c8f8985987a0e3cbeb998e72dbe472221a67e"}, {"module_id": ".personal.boss.scripts.business_planning", "path": ".personal/boss/scripts/business_planning.py", "category": "core", "module_doc": "Business Planning Module\n\u041c\u043e\u0434\u0443\u043b\u044c \u0434\u043b\u044f \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430.\n\u0414\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044e \u043f\u0440\u043e\u0435\u043a\u0442\u0430.", "functions": [{"name": "create_business_planning_manager", "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.", "line_range": [216, 218], "parameters": ["data_dir"], "decorators": []}, {"name": "__init__", "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.", "line_range": [20, 27], "parameters": ["self", "boss_data_dir"], "decorators": []}, {"name": "create_business_roadmap", "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u0430.", "line_range": [29, 55], "parameters": ["self", "roadmap_data"], "decorators": []}, {"name": "create_financial_plan", "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u043e\u0433\u043e \u043f\u043b\u0430\u043d\u0430.", "line_range": [57, 82], "parameters": ["self", "plan_data"], "decorators": []}, {"name": "record_strategic_decision", "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f.", "line_range": [84, 116], "parameters": ["self", "decision_data"], "decorators": []}, {"name": "analyze_business_metrics", "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.", "line_range": [118, 154], "parameters": ["self"], "decorators": []}, {"name": "get_business_summary", "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e.", "line_range": [156, 193], "parameters": ["self"], "decorators": []}, {"name": "_load_data", "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 JSON \u0444\u0430\u0439\u043b\u0430.", "line_range": [195, 204], "parameters": ["self", "file_path", "default"], "decorators": []}, {"name": "_save_data", "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JSON \u0444\u0430\u0439\u043b.", "line_range": [206, 213], "parameters": ["self", "file_path", "data"], "decorators": []}], "classes": [{"name": "BusinessPlanningManager", "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0438 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u043e\u0439 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0435\u0439.", "line_range": [17, 213], "methods": [{"name": "__init__", "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.", "line_range": [20, 27], "parameters": ["self", "boss_data_dir"]}, {"name": "create_business_roadmap", "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u0430.", "line_range": [29, 55], "parameters": ["self", "roadmap_data"]}, {"name": "create_financial_plan", "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u043e\u0433\u043e \u043f\u043b\u0430\u043d\u0430.", "line_range": [57, 82], "parameters": ["self", "plan_data"]}, {"name": "record_strategic_decision", "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f.", "line_range": [84, 116], "parameters": ["self", "decision_data"]}, {"name": "analyze_business_metrics", "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.", "line_range": [118, 154], "parameters": ["self"]}, {"name": "get_business_summary", "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e.", "line_range": [156, 193], "parameters": ["self"]}, {"name": "_load_data", "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 JSON \u0444\u0430\u0439\u043b\u0430.", "line_range": [195, 204], "parameters": ["self", "file_path", "default"]}, {"name": "_save_data", "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JSON \u0444\u0430\u0439\u043b.", "line_range": [206, 213], "parameters": ["self", "file_path", "data"]}], "bases": []}], "callgraph": {"__init__": ["Path"], "create_business_roadmap": ["datetime.now", "self._save_data", "logger.info", "logger.error"], "create_financial_plan": ["datetime.now", "self._save_data", "logger.info", "logger.error"], "record_strategic_decision": ["logger.info", "datetime.now", "self._save_data", "decision_data.get", "decisions.append", "self._load_data", "isinstance", "logger.error"], "analyze_business_metrics": ["datetime.now", "len", "self._load_data", "isinstance", "logger.error"], "get_business_summary": ["datetime.now", "len", "bool", "self._load_data", "financial.get", "isinstance", "logger.error", "roadmap.get"], "_load_data": ["file_path.open", "file_path.exists", "json.load", "logger.error"], "_save_data": ["file_path.open", "json.dump", "logger.error"], "create_business_planning_manager": ["BusinessPlanningManager"]}, "dependencies": ["Any", "Dict", "List", "Optional", "Path", "datetime", "json", "logging", "pathlib", "sys", "timedelta", "typing"], "hash": "0e53b669d4dfd9dc8ded438d877dde9176406ff0392f4b0129041ec3e70ed538"}, {"module_id": ".personal.boss.scripts.__init__", "path": ".personal/boss/scripts/__init__.py", "category": "cli", "module_doc": "", "functions": [], "classes": [], "callgraph": {}, "dependencies": [], "hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"}, {"module_id": "backup_before_separation_20250529_152219.docs.test_self_run", "path": "backup_before_separation_20250529_152219/docs/test_self_run.py", "category": "test", "module_doc": "", "functions": [{"name": "test_filter_json_init_json", "docstring": "Test filter_json with init.json structure.", "line_range": [15, 22], "parameters": ["tmp_path"], "decorators": []}, {"name": "test_select_json_partial", "docstring": "Test partial JSON loading.", "line_range": [24, 34], "parameters": ["tmp_path"], "decorators": []}, {"name": "test_cache_json", "docstring": "Test JSON caching.", "line_range": [36, 48], "parameters": ["tmp_path"], "decorators": []}, {"name": "test_attach_to_llm_request_init_json", "docstring": "Test attach_to_llm_request with init.json and cache.", "line_range": [50, 67], "parameters": ["tmp_path"], "decorators": []}, {"name": "test_attach_to_llm_request_missing_file", "docstring": "Test attach_to_llm_request with missing file.", "line_range": [69, 73], "parameters": ["tmp_path"], "decorators": []}], "classes": [], "callgraph": {"test_filter_json_init_json": ["filter_json"], "test_select_json_partial": ["json.dump", "select_json", "str", "open"], "test_cache_json": ["json.dump", "cache.close", "cache.get_full_json", "cache.get_metadata", "cache.cache_json", "JSONCache", "open", "str"], "test_attach_to_llm_request_init_json": ["json.dump", "cache.close", "attach_to_llm_request", "JSONCache", "open", "str"], "test_attach_to_llm_request_missing_file": ["attach_to_llm_request", "str"]}, "dependencies": ["JSONCache", "Path", "attach_to_llm_request", "filter_json", "filter_struct", "json", "llmstruct.cache", "llmstruct.json_selector", "llmstruct.self_run", "pathlib", "pytest", "select_json"], "hash": "b139aa6febfe24eec888f0597e061092ca4000fdfa3877fa4cc5c23a86c64bdb"}, {"module_id": "backup_before_separation_20250529_152219.docs.cache", "path": "backup_before_separation_20250529_152219/docs/cache.py", "category": "core", "module_doc": "", "functions": [{"name": "__init__", "docstring": "Initialize SQLite cache for JSON files.", "line_range": [18, 22], "parameters": ["self", "db_path"], "decorators": []}, {"name": "create_tables", "docstring": "Create tables for metadata and file paths.", "line_range": [24, 42], "parameters": ["self"], "decorators": []}, {"name": "cache_json", "docstring": "Cache JSON metadata and store full file path.", "line_range": [44, 64], "parameters": ["self", "json_path", "artifact_id", "summary", "tags"], "decorators": []}, {"name": "get_metadata", "docstring": "Retrieve metadata by artifact_id.", "line_range": [66, 79], "parameters": ["self", "artifact_id"], "decorators": []}, {"name": "get_full_json", "docstring": "Load full JSON by artifact_id.", "line_range": [81, 94], "parameters": ["self", "artifact_id"], "decorators": []}, {"name": "close", "docstring": "Close database connection.", "line_range": [96, 98], "parameters": ["self"], "decorators": []}], "classes": [{"name": "JSONCache", "docstring": "", "line_range": [17, 98], "methods": [{"name": "__init__", "docstring": "Initialize SQLite cache for JSON files.", "line_range": [18, 22], "parameters": ["self", "db_path"]}, {"name": "create_tables", "docstring": "Create tables for metadata and file paths.", "line_range": [24, 42], "parameters": ["self"]}, {"name": "cache_json", "docstring": "Cache JSON metadata and store full file path.", "line_range": [44, 64], "parameters": ["self", "json_path", "artifact_id", "summary", "tags"]}, {"name": "get_metadata", "docstring": "Retrieve metadata by artifact_id.", "line_range": [66, 79], "parameters": ["self", "artifact_id"]}, {"name": "get_full_json", "docstring": "Load full JSON by artifact_id.", "line_range": [81, 94], "parameters": ["self", "artifact_id"]}, {"name": "close", "docstring": "Close database connection.", "line_range": [96, 98], "parameters": ["self"]}], "bases": []}], "callgraph": {"__init__": ["self.create_tables", "sqlite3.connect"], "create_tables": [], "cache_json": ["logging.info", "hashlib.sha256", "json_file.exists", "json.dumps", "logging.error", "content.encode", "Path", "open", "str", "f.read"], "get_metadata": ["json.loads", "cursor.fetchone"], "get_full_json": ["logging.error", "cursor.fetchone", "json.load", "open"], "close": []}, "dependencies": ["Any", "Dict", "List", "Optional", "Path", "hashlib", "json", "logging", "pathlib", "sqlite3", "typing"], "hash": "0639e2f3c27b70d02596862e63d49bc84c48ca8d0d0c8778b2d42425598acc1e"}, {"module_id": "backup_before_separation_20250529_152219.docs.self_run", "path": "backup_before_separation_20250529_152219/docs/self_run.py", "category": "core", "module_doc": "", "functions": [{"name": "filter_struct", "docstring": "Filter struct.json or init.json based on prompt keywords.", "line_range": [17, 35], "parameters": ["struct", "prompt"], "decorators": []}, {"name": "attach_to_llm_request", "docstring": "Attach filtered JSON to LLM prompt, using cache if available.", "line_range": [37, 74], "parameters": ["context_path", "prompt", "cache"], "decorators": []}], "classes": [], "callgraph": {"filter_struct": ["any", "module.get", "prompt.lower", "struct.get", "filter_json"], "attach_to_llm_request": ["logging.info", "cache.get_full_json", "cache.get_metadata", "json.dumps", "select_json", "logging.error", "context_file.exists", "Path", "cache.cache_json", "filter_struct", "prompt.lower", "filter_json"]}, "dependencies": ["Any", "Dict", "JSONCache", "List", "Path", "cache", "filter_json", "json", "json_selector", "logging", "pathlib", "select_json", "typing"], "hash": "894d0cb3c48c80975d0bd6f3c6920b835e98f4dfe7de68ef5c6e01e1bb300534"}, {"module_id": "backup_before_separation_20250529_152219.docs.json_selector", "path": "backup_before_separation_20250529_152219/docs/json_selector.py", "category": "core", "module_doc": "", "functions": [{"name": "filter_json", "docstring": "Filter JSON data by key-value pair and select fields.", "line_range": [17, 29], "parameters": ["data", "filter_key", "filter_value", "fields"], "decorators": []}, {"name": "select_json", "docstring": "Load and filter JSON file, optionally parsing partially.", "line_range": [31, 72], "parameters": ["json_path", "filter_key", "filter_value", "fields", "partial"], "decorators": []}], "classes": [], "callgraph": {"filter_json": ["isinstance", "item.get", "data.get", "filtered.append"], "select_json": ["current_item.get", "json_file.exists", "prefix.startswith", "json.load", "logging.error", "Path", "filtered.append", "ijson.parse", "open", "path.append", "f.seek", "filter_json"]}, "dependencies": ["Any", "Dict", "List", "Optional", "Path", "argparse", "ijson", "json", "logging", "pathlib", "typing"], "hash": "21ea37c015ac1ab1932e3784ab8cbd041de37be59ba72d3ad9432d5d3391523f"}, {"module_id": "backup_before_separation_20250529_152219.docs.cli", "path": "backup_before_separation_20250529_152219/docs/cli.py", "category": "core", "module_doc": "", "functions": [{"name": "load_gitignore", "docstring": "Load and normalize patterns from .gitignore.", "line_range": [26, 36], "parameters": ["root_dir"], "decorators": []}, {"name": "load_config", "docstring": "Load settings from llmstruct.toml or return empty dict.", "line_range": [38, 47], "parameters": ["root_dir"], "decorators": []}, {"name": "read_file_content", "docstring": "Read content of a file if it exists and is a text file.", "line_range": [49, 58], "parameters": ["file_path"], "decorators": []}, {"name": "write_to_file", "docstring": "Write content to a file in base_dir (default /tmp) and return the path.", "line_range": [60, 74], "parameters": ["content", "filename", "base_dir"], "decorators": []}, {"name": "parse_files_from_response", "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).", "line_range": [76, 83], "parameters": ["response"], "decorators": []}, {"name": "interactive", "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.", "line_range": [85, 195], "parameters": ["args"], "decorators": []}, {"name": "parse", "docstring": "Parse codebase and generate struct.json.", "line_range": [197, 237], "parameters": ["args"], "decorators": []}, {"name": "query", "docstring": "Query LLMs with prompt and context.", "line_range": [239, 260], "parameters": ["args"], "decorators": []}, {"name": "context", "docstring": "Generate context.json from input JSON.", "line_range": [262, 264], "parameters": ["args"], "decorators": []}, {"name": "dogfood", "docstring": "Run dogfooding analysis.", "line_range": [266, 268], "parameters": ["args"], "decorators": []}, {"name": "review", "docstring": "Review codebase with LLM.", "line_range": [270, 272], "parameters": ["args"], "decorators": []}, {"name": "main", "docstring": "Command-line interface for LLMstruct.", "line_range": [274, 334], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"load_gitignore": ["line.startswith", "gitignore_path.open", "gitignore_path.exists", "logging.error", "Path", "line.strip"], "load_config": ["logging.error", "Path", "config_path\u30aa\u30fc\u30d7\u30f3", "toml.load", "config_path.exists"], "read_file_content": ["path.open", "path.is_file", "logging.error", "Path", "f.read"], "write_to_file": ["logging.warning", "logging.info", "base_path.mkdir", "file_path.exists", "logging.error", "Path", "f.write", "file_path.open", "str"], "parse_files_from_response": ["filename.strip", "files.append", "re.findall", "content.strip"], "interactive": ["logging.warning", "print", "cache.close", "os.listdir", "json.dumps", "logging.error", "Path", "LLMClient", "sorted", "load_gitignore", "input", "scan_match.group", "parse_files_from_response", "re.search", "client.query", "write_match.group", "files_to_write.append", "parse", "get_folder_structure", "JSONCache", "write_dir.startswith", "attach_to_llm_request", "write_to_file", "user_input.lower", "read_file_content"], "parse": ["config.get", "logging.warning", "json.dump", "logging.info", "cache.close", "load_gitignore", "load_config", "cache.cache_json", "logging.error", "Path", "JSONCache", "generate_json"], "query": ["json.dump", "logging.info", "cache.close", "client.query", "logging.error", "Path", "JSONCache", "LLMClient"], "context": ["logging.warning"], "dogfood": ["logging.warning"], "review": ["logging.warning"], "main": ["query_parser.add_argument", "context", "dogfood", "query", "argparse.ArgumentParser", "review", "context_parser.add_argument", "parse", "parse_parser.add_argument", "interactive_parser.add_argument", "review_parser.add_argument", "interactive", "parser.parse_args", "parser.add_subparsers", "dogfood_parser.add_argument", "asyncio.run", "subparsers.add_parser"]}, "dependencies": ["JSONCache", "LLMClient", "List", "Optional", "Path", "argparse", "asyncio", "attach_to_llm_request", "generate_json", "get_folder_structure", "json", "llmstruct", "llmstruct.cache", "llmstruct.generators.json_generator", "llmstruct.self_run", "logging", "os", "pathlib", "re", "toml", "typing", "uuid"], "hash": "26cffb7c31d1f379e0dcc75d668fd872ffe10d408cfb92cc81172aeca774fffc"}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.workflow_orchestrator", "path": "backup_before_separation_20250529_152219/src/llmstruct/workflow_orchestrator.py", "category": "core", "module_doc": "AI Workflow Orchestrator - Integration Layer for Existing llmstruct Architecture\nExtends CopilotContextManager and SmartContextOrchestrator instead of duplicating", "functions": [{"name": "main", "docstring": "CLI interface that integrates with existing llmstruct architecture", "line_range": [650, 687], "parameters": [], "decorators": []}, {"name": "__post_init__", "docstring": "", "line_range": [62, 70], "parameters": ["self"], "decorators": []}, {"name": "__post_init__", "docstring": "", "line_range": [89, 101], "parameters": ["self"], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [110, 151], "parameters": ["self", "project_root", "debug"], "decorators": []}, {"name": "get_ai_onboarding_guide", "docstring": "Generate comprehensive AI onboarding guide using existing architecture", "line_range": [153, 163], "parameters": ["self"], "decorators": []}, {"name": "_get_project_overview_from_struct", "docstring": "Get project overview from struct.json analysis", "line_range": [165, 183], "parameters": ["self"], "decorators": []}, {"name": "_get_existing_architecture_guide", "docstring": "Guide to existing llmstruct architecture", "line_range": [185, 207], "parameters": ["self"], "decorators": []}, {"name": "_get_copilot_integration_guide", "docstring": "Guide for proper CopilotContextManager usage", "line_range": [209, 222], "parameters": ["self"], "decorators": []}, {"name": "_get_context_orchestration_guide", "docstring": "Guide for SmartContextOrchestrator usage", "line_range": [224, 239], "parameters": ["self"], "decorators": []}, {"name": "_get_struct_analysis_guide", "docstring": "Guide for proper struct.json analysis approach", "line_range": [241, 259], "parameters": ["self"], "decorators": []}, {"name": "get_current_context", "docstring": "Get comprehensive current context using existing architecture", "line_range": [261, 300], "parameters": ["self"], "decorators": []}, {"name": "_get_struct_analysis", "docstring": "Analyze struct.json for current codebase state", "line_range": [302, 356], "parameters": ["self"], "decorators": []}, {"name": "_analyze_architecture_from_struct", "docstring": "Analyze architecture patterns from struct.json", "line_range": [358, 376], "parameters": ["self", "struct_data"], "decorators": []}, {"name": "_analyze_function_duplication", "docstring": "Analyze function duplication across modules", "line_range": [378, 399], "parameters": ["self", "struct_data"], "decorators": []}, {"name": "_calculate_complexity_metrics", "docstring": "Calculate complexity metrics from struct.json", "line_range": [401, 417], "parameters": ["self", "struct_data"], "decorators": []}, {"name": "_calculate_complexity_score", "docstring": "Calculate overall complexity score", "line_range": [419, 432], "parameters": ["self", "stats"], "decorators": []}, {"name": "_get_orchestrator_state", "docstring": "Get SmartContextOrchestrator state", "line_range": [434, 445], "parameters": ["self"], "decorators": []}, {"name": "analyze_codebase_for_duplicates", "docstring": "Analyze codebase for duplicate functions using struct.json", "line_range": [447, 495], "parameters": ["self"], "decorators": []}, {"name": "sync_with_existing_architecture", "docstring": "Sync with existing llmstruct architecture instead of duplicating", "line_range": [497, 520], "parameters": ["self"], "decorators": []}, {"name": "create_task", "docstring": "Create new task (this is new functionality, not duplication)", "line_range": [526, 554], "parameters": ["self", "title", "description", "priority", "tags", "dependencies"], "decorators": []}, {"name": "get_active_tasks", "docstring": "Get all active tasks", "line_range": [556, 564], "parameters": ["self"], "decorators": []}, {"name": "_load_json_safe", "docstring": "Safe JSON loading with error handling", "line_range": [566, 576], "parameters": ["self", "file_path"], "decorators": []}, {"name": "_save_json_safe", "docstring": "Safe JSON saving with error handling", "line_range": [578, 587], "parameters": ["self", "file_path", "data"], "decorators": []}, {"name": "_get_active_session_context", "docstring": "Get current session context", "line_range": [590, 594], "parameters": ["self"], "decorators": []}, {"name": "_identify_key_components", "docstring": "Identify key components from struct analysis", "line_range": [596, 607], "parameters": ["self", "struct_data"], "decorators": []}, {"name": "_get_workflow_patterns", "docstring": "Define workflow patterns that integrate with existing architecture", "line_range": [609, 629], "parameters": ["self"], "decorators": []}, {"name": "_get_available_commands", "docstring": "Available commands that work with existing architecture", "line_range": [631, 647], "parameters": ["self"], "decorators": []}], "classes": [{"name": "TaskStatus", "docstring": "", "line_range": [29, 34], "methods": [], "bases": ["Enum"]}, {"name": "SessionType", "docstring": "", "line_range": [37, 42], "methods": [], "bases": ["Enum"]}, {"name": "Task", "docstring": "Structured task representation", "line_range": [46, 70], "methods": [{"name": "__post_init__", "docstring": "", "line_range": [62, 70], "parameters": ["self"]}], "bases": []}, {"name": "Session", "docstring": "AI work session with context and goals", "line_range": [74, 101], "methods": [{"name": "__post_init__", "docstring": "", "line_range": [89, 101], "parameters": ["self"]}], "bases": []}, {"name": "WorkflowOrchestrator", "docstring": "Integration layer that extends existing llmstruct architecture\nUses CopilotContextManager, SmartContextOrchestrator, and struct.json analysis", "line_range": [104, 647], "methods": [{"name": "__init__", "docstring": "", "line_range": [110, 151], "parameters": ["self", "project_root", "debug"]}, {"name": "get_ai_onboarding_guide", "docstring": "Generate comprehensive AI onboarding guide using existing architecture", "line_range": [153, 163], "parameters": ["self"]}, {"name": "_get_project_overview_from_struct", "docstring": "Get project overview from struct.json analysis", "line_range": [165, 183], "parameters": ["self"]}, {"name": "_get_existing_architecture_guide", "docstring": "Guide to existing llmstruct architecture", "line_range": [185, 207], "parameters": ["self"]}, {"name": "_get_copilot_integration_guide", "docstring": "Guide for proper CopilotContextManager usage", "line_range": [209, 222], "parameters": ["self"]}, {"name": "_get_context_orchestration_guide", "docstring": "Guide for SmartContextOrchestrator usage", "line_range": [224, 239], "parameters": ["self"]}, {"name": "_get_struct_analysis_guide", "docstring": "Guide for proper struct.json analysis approach", "line_range": [241, 259], "parameters": ["self"]}, {"name": "get_current_context", "docstring": "Get comprehensive current context using existing architecture", "line_range": [261, 300], "parameters": ["self"]}, {"name": "_get_struct_analysis", "docstring": "Analyze struct.json for current codebase state", "line_range": [302, 356], "parameters": ["self"]}, {"name": "_analyze_architecture_from_struct", "docstring": "Analyze architecture patterns from struct.json", "line_range": [358, 376], "parameters": ["self", "struct_data"]}, {"name": "_analyze_function_duplication", "docstring": "Analyze function duplication across modules", "line_range": [378, 399], "parameters": ["self", "struct_data"]}, {"name": "_calculate_complexity_metrics", "docstring": "Calculate complexity metrics from struct.json", "line_range": [401, 417], "parameters": ["self", "struct_data"]}, {"name": "_calculate_complexity_score", "docstring": "Calculate overall complexity score", "line_range": [419, 432], "parameters": ["self", "stats"]}, {"name": "_get_orchestrator_state", "docstring": "Get SmartContextOrchestrator state", "line_range": [434, 445], "parameters": ["self"]}, {"name": "analyze_codebase_for_duplicates", "docstring": "Analyze codebase for duplicate functions using struct.json", "line_range": [447, 495], "parameters": ["self"]}, {"name": "sync_with_existing_architecture", "docstring": "Sync with existing llmstruct architecture instead of duplicating", "line_range": [497, 520], "parameters": ["self"]}, {"name": "create_task", "docstring": "Create new task (this is new functionality, not duplication)", "line_range": [526, 554], "parameters": ["self", "title", "description", "priority", "tags", "dependencies"]}, {"name": "get_active_tasks", "docstring": "Get all active tasks", "line_range": [556, 564], "parameters": ["self"]}, {"name": "_load_json_safe", "docstring": "Safe JSON loading with error handling", "line_range": [566, 576], "parameters": ["self", "file_path"]}, {"name": "_save_json_safe", "docstring": "Safe JSON saving with error handling", "line_range": [578, 587], "parameters": ["self", "file_path", "data"]}, {"name": "_get_active_session_context", "docstring": "Get current session context", "line_range": [590, 594], "parameters": ["self"]}, {"name": "_identify_key_components", "docstring": "Identify key components from struct analysis", "line_range": [596, 607], "parameters": ["self", "struct_data"]}, {"name": "_get_workflow_patterns", "docstring": "Define workflow patterns that integrate with existing architecture", "line_range": [609, 629], "parameters": ["self"]}, {"name": "_get_available_commands", "docstring": "Available commands that work with existing architecture", "line_range": [631, 647], "parameters": ["self"]}], "bases": []}], "callgraph": {"__post_init__": [], "__init__": ["print", "CLIConfig", "Path", "SmartContextOrchestrator", "UniversalConverter", "CopilotContextManager", "time.time", "SystemCapabilityDiscovery", "str"], "get_ai_onboarding_guide": ["self._get_struct_analysis_guide", "self._get_existing_architecture_guide", "self._get_copilot_integration_guide", "self._get_project_overview_from_struct", "self._get_context_orchestration_guide", "self._get_workflow_patterns", "self._get_available_commands"], "_get_project_overview_from_struct": ["struct_data.get", "self._identify_key_components", "logger.warning", "len", "self._analyze_architecture_from_struct", "open", "struct_path.exists", "json.load"], "_get_existing_architecture_guide": [], "_get_copilot_integration_guide": [], "_get_context_orchestration_guide": [], "_get_struct_analysis_guide": [], "get_current_context": ["self.get_active_tasks", "print", "logger.warning", "self._get_active_session_context", "self._get_orchestrator_state", "self._get_struct_analysis", "isinstance", "time.time", "str"], "_get_struct_analysis": ["print", "struct_data.get", "len", "self._analyze_function_duplication", "self._calculate_complexity_metrics", "self._analyze_architecture_from_struct", "open", "struct_path.exists", "time.time", "logger.error", "json.load", "str"], "_analyze_architecture_from_struct": ["directories.items", "struct_data.get", "list", "len", "directories.keys", "Path"], "_analyze_function_duplication": ["len", "function_names.items", "struct_data.get", "module.get"], "_calculate_complexity_metrics": ["struct_data.get", "round", "m.get", "self._calculate_complexity_score", "len", "stats.get", "sum"], "_calculate_complexity_score": ["stats.get", "round"], "_get_orchestrator_state": ["str"], "analyze_codebase_for_duplicates": ["struct_analysis.get", "recommendations.append", "print", "len", "duplication.get", "self._get_struct_analysis", "time.time"], "sync_with_existing_architecture": ["json.dump", "logger.error", "str", "open"], "create_task": ["self._save_json_safe", "self._load_json_safe", "logger.info", "uuid.uuid4", "Task", "asdict", "str"], "get_active_tasks": ["t.get", "self._load_json_safe"], "_load_json_safe": ["file_path.exists", "json.load", "logger.error", "open"], "_save_json_safe": ["json.dump", "logger.error", "open"], "_get_active_session_context": ["asdict"], "_identify_key_components": ["key_components.append", "len", "struct_data.get", "module.get"], "_get_workflow_patterns": [], "_get_available_commands": [], "main": ["print", "parser.add_argument", "argparse.ArgumentParser", "context.get", "json.dumps", "len", "orchestrator.get_current_context", "orchestrator.analyze_codebase_for_duplicates", "results.items", "orchestrator.sync_with_existing_architecture", "orchestrator.get_ai_onboarding_guide", "parser.parse_args", "WorkflowOrchestrator"]}, "dependencies": ["Any", "CLIConfig", "CopilotContextManager", "Dict", "Enum", "List", "Optional", "Path", "SmartContextOrchestrator", "SystemCapabilityDiscovery", "Union", "UniversalConverter", "ai_self_awareness", "argparse", "asdict", "cli_config", "context_orchestrator", "copilot", "dataclass", "dataclasses", "datetime", "enum", "json", "logging", "os", "parsers.universal_converter", "pathlib", "time", "typing", "uuid"], "hash": "6a74a0602bdd6d8fcf4989c77c784c041b3272e9ad7d14d6e42e701c07d17c40"}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.cli_config", "path": "backup_before_separation_20250529_152219/src/llmstruct/cli_config.py", "category": "core", "module_doc": "CLI configuration management.", "functions": [{"name": "__init__", "docstring": "Initialize configuration manager.", "line_range": [20, 24], "parameters": ["self", "root_dir"], "decorators": []}, {"name": "_load_config", "docstring": "Load configuration from llmstruct.toml.", "line_range": [26, 34], "parameters": ["self"], "decorators": []}, {"name": "get_cache_config", "docstring": "Get cache configuration section.", "line_range": [36, 38], "parameters": ["self"], "decorators": []}, {"name": "get_copilot_config", "docstring": "Get Copilot configuration section.", "line_range": [40, 42], "parameters": ["self"], "decorators": []}, {"name": "get_queue_config", "docstring": "Get queue configuration section.", "line_range": [44, 46], "parameters": ["self"], "decorators": []}, {"name": "get_context_config", "docstring": "Get context configuration section.", "line_range": [48, 50], "parameters": ["self"], "decorators": []}, {"name": "get_gitignore_patterns", "docstring": "Load and normalize patterns from .gitignore.", "line_range": [52, 66], "parameters": ["self"], "decorators": []}, {"name": "get_exclude_dirs", "docstring": "Get directories to exclude from scanning.", "line_range": [68, 82], "parameters": ["self"], "decorators": []}, {"name": "get_include_patterns", "docstring": "Get file patterns to include.", "line_range": [84, 89], "parameters": ["self"], "decorators": []}, {"name": "get_exclude_patterns", "docstring": "Get file patterns to exclude.", "line_range": [91, 96], "parameters": ["self"], "decorators": []}, {"name": "get_max_file_size", "docstring": "Get maximum file size for processing (in bytes).", "line_range": [98, 100], "parameters": ["self"], "decorators": []}, {"name": "get_auto_update_config", "docstring": "Get auto-update configuration.", "line_range": [102, 104], "parameters": ["self"], "decorators": []}, {"name": "is_auto_update_enabled", "docstring": "Check if auto-update is enabled.", "line_range": [106, 108], "parameters": ["self"], "decorators": []}, {"name": "get_struct_file_path", "docstring": "Get path to struct.json file.", "line_range": [110, 112], "parameters": ["self"], "decorators": []}, {"name": "get_context_file_path", "docstring": "Get path to context file.", "line_range": [114, 116], "parameters": ["self"], "decorators": []}, {"name": "save_config", "docstring": "Save current configuration to file.", "line_range": [118, 124], "parameters": ["self"], "decorators": []}, {"name": "update_config", "docstring": "Update configuration value.", "line_range": [126, 131], "parameters": ["self", "section", "key", "value"], "decorators": []}, {"name": "reload_config", "docstring": "Reload configuration from file.", "line_range": [133, 135], "parameters": ["self"], "decorators": []}], "classes": [{"name": "CLIConfig", "docstring": "Manages CLI configuration from llmstruct.toml and other sources.", "line_range": [17, 135], "methods": [{"name": "__init__", "docstring": "Initialize configuration manager.", "line_range": [20, 24], "parameters": ["self", "root_dir"]}, {"name": "_load_config", "docstring": "Load configuration from llmstruct.toml.", "line_range": [26, 34], "parameters": ["self"]}, {"name": "get_cache_config", "docstring": "Get cache configuration section.", "line_range": [36, 38], "parameters": ["self"]}, {"name": "get_copilot_config", "docstring": "Get Copilot configuration section.", "line_range": [40, 42], "parameters": ["self"]}, {"name": "get_queue_config", "docstring": "Get queue configuration section.", "line_range": [44, 46], "parameters": ["self"]}, {"name": "get_context_config", "docstring": "Get context configuration section.", "line_range": [48, 50], "parameters": ["self"]}, {"name": "get_gitignore_patterns", "docstring": "Load and normalize patterns from .gitignore.", "line_range": [52, 66], "parameters": ["self"]}, {"name": "get_exclude_dirs", "docstring": "Get directories to exclude from scanning.", "line_range": [68, 82], "parameters": ["self"]}, {"name": "get_include_patterns", "docstring": "Get file patterns to include.", "line_range": [84, 89], "parameters": ["self"]}, {"name": "get_exclude_patterns", "docstring": "Get file patterns to exclude.", "line_range": [91, 96], "parameters": ["self"]}, {"name": "get_max_file_size", "docstring": "Get maximum file size for processing (in bytes).", "line_range": [98, 100], "parameters": ["self"]}, {"name": "get_auto_update_config", "docstring": "Get auto-update configuration.", "line_range": [102, 104], "parameters": ["self"]}, {"name": "is_auto_update_enabled", "docstring": "Check if auto-update is enabled.", "line_range": [106, 108], "parameters": ["self"]}, {"name": "get_struct_file_path", "docstring": "Get path to struct.json file.", "line_range": [110, 112], "parameters": ["self"]}, {"name": "get_context_file_path", "docstring": "Get path to context file.", "line_range": [114, 116], "parameters": ["self"]}, {"name": "save_config", "docstring": "Save current configuration to file.", "line_range": [118, 124], "parameters": ["self"]}, {"name": "update_config", "docstring": "Update configuration value.", "line_range": [126, 131], "parameters": ["self", "section", "key", "value"]}, {"name": "reload_config", "docstring": "Reload configuration from file.", "line_range": [133, 135], "parameters": ["self"]}], "bases": []}], "callgraph": {"__init__": ["Path", "self._load_config"], "_load_config": ["logging.error", "toml.load"], "get_cache_config": [], "get_copilot_config": [], "get_queue_config": [], "get_context_config": [], "get_gitignore_patterns": ["line.startswith", "gitignore_path.open", "gitignore_path.exists", "logging.error", "Path", "line.strip"], "get_exclude_dirs": ["set", "parsing_config.get", "cli_config.get", "list"], "get_include_patterns": ["parsing_config.get", "cli_config.get"], "get_exclude_patterns": ["parsing_config.get", "cli_config.get"], "get_max_file_size": [], "get_auto_update_config": [], "is_auto_update_enabled": ["self.get_auto_update_config"], "get_struct_file_path": [], "get_context_file_path": [], "save_config": ["logging.error", "toml.dump"], "update_config": ["self.save_config"], "reload_config": ["self._load_config"]}, "dependencies": ["Any", "Dict", "List", "Path", "logging", "pathlib", "toml", "typing"], "hash": "4e3a5903ff3fcd932118bf5521902da18bc72c67f93835354f70576d1413de49"}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.ai_self_monitor", "path": "backup_before_separation_20250529_152219/src/llmstruct/ai_self_monitor.py", "category": "core", "module_doc": "AI Self-Monitoring System\nTracks AI usage patterns and ensures proper llmstruct integration.", "functions": [{"name": "initialize_ai_monitor", "docstring": "Initialize global AI monitor.", "line_range": [433, 437], "parameters": ["project_root"], "decorators": []}, {"name": "get_ai_monitor", "docstring": "Get current AI monitor instance.", "line_range": [440, 442], "parameters": [], "decorators": []}, {"name": "record_ai_usage", "docstring": "Global function to record AI usage.", "line_range": [445, 456], "parameters": ["query", "tools_used", "used_llmstruct", "context_tags", "metadata"], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [60, 80], "parameters": ["self", "project_root"], "decorators": []}, {"name": "record_ai_interaction", "docstring": "Record an AI interaction for monitoring.", "line_range": [82, 121], "parameters": ["self", "query", "tools_used", "used_llmstruct", "context_tags", "metadata"], "decorators": []}, {"name": "_analyze_interaction_patterns", "docstring": "Analyze patterns in AI interaction.", "line_range": [123, 157], "parameters": ["self", "query", "tools_used", "used_llmstruct", "context_tags"], "decorators": []}, {"name": "_calculate_effectiveness_score", "docstring": "Calculate effectiveness score for interaction.", "line_range": [159, 188], "parameters": ["self", "patterns", "tools_used", "used_llmstruct"], "decorators": []}, {"name": "_check_immediate_feedback", "docstring": "Check if immediate feedback/correction is needed.", "line_range": [190, 209], "parameters": ["self", "event"], "decorators": []}, {"name": "_log_immediate_feedback", "docstring": "Log immediate feedback message.", "line_range": [211, 214], "parameters": ["self", "message"], "decorators": []}, {"name": "analyze_behavior_trends", "docstring": "Analyze AI behavior trends over specified period.", "line_range": [216, 300], "parameters": ["self", "days"], "decorators": []}, {"name": "_generate_recommendations", "docstring": "Generate specific recommendations for improvement.", "line_range": [302, 335], "parameters": ["self", "llmstruct_usage", "context_awareness", "tool_diversity", "effectiveness"], "decorators": []}, {"name": "get_real_time_guidance", "docstring": "Get real-time guidance for current query.", "line_range": [337, 365], "parameters": ["self", "current_query"], "decorators": []}, {"name": "_load_events", "docstring": "Load events from disk.", "line_range": [367, 379], "parameters": ["self"], "decorators": []}, {"name": "_save_events", "docstring": "Save events to disk.", "line_range": [381, 388], "parameters": ["self"], "decorators": []}, {"name": "_save_analysis", "docstring": "Save behavior analysis to disk.", "line_range": [390, 397], "parameters": ["self", "analysis"], "decorators": []}, {"name": "get_monitoring_report", "docstring": "Get comprehensive monitoring report.", "line_range": [399, 426], "parameters": ["self"], "decorators": []}], "classes": [{"name": "AIBehaviorPattern", "docstring": "AI behavior patterns to monitor.", "line_range": [18, 26], "methods": [], "bases": ["Enum"]}, {"name": "AIUsageEvent", "docstring": "Single AI usage event.", "line_range": [30, 39], "methods": [], "bases": []}, {"name": "AIBehaviorAnalysis", "docstring": "Analysis of AI behavior patterns.", "line_range": [43, 51], "methods": [], "bases": []}, {"name": "AISelfMonitor", "docstring": "Monitors AI behavior and ensures proper llmstruct integration.\nProvides feedback and corrective guidance.", "line_range": [54, 426], "methods": [{"name": "__init__", "docstring": "", "line_range": [60, 80], "parameters": ["self", "project_root"]}, {"name": "record_ai_interaction", "docstring": "Record an AI interaction for monitoring.", "line_range": [82, 121], "parameters": ["self", "query", "tools_used", "used_llmstruct", "context_tags", "metadata"]}, {"name": "_analyze_interaction_patterns", "docstring": "Analyze patterns in AI interaction.", "line_range": [123, 157], "parameters": ["self", "query", "tools_used", "used_llmstruct", "context_tags"]}, {"name": "_calculate_effectiveness_score", "docstring": "Calculate effectiveness score for interaction.", "line_range": [159, 188], "parameters": ["self", "patterns", "tools_used", "used_llmstruct"]}, {"name": "_check_immediate_feedback", "docstring": "Check if immediate feedback/correction is needed.", "line_range": [190, 209], "parameters": ["self", "event"]}, {"name": "_log_immediate_feedback", "docstring": "Log immediate feedback message.", "line_range": [211, 214], "parameters": ["self", "message"]}, {"name": "analyze_behavior_trends", "docstring": "Analyze AI behavior trends over specified period.", "line_range": [216, 300], "parameters": ["self", "days"]}, {"name": "_generate_recommendations", "docstring": "Generate specific recommendations for improvement.", "line_range": [302, 335], "parameters": ["self", "llmstruct_usage", "context_awareness", "tool_diversity", "effectiveness"]}, {"name": "get_real_time_guidance", "docstring": "Get real-time guidance for current query.", "line_range": [337, 365], "parameters": ["self", "current_query"]}, {"name": "_load_events", "docstring": "Load events from disk.", "line_range": [367, 379], "parameters": ["self"]}, {"name": "_save_events", "docstring": "Save events to disk.", "line_range": [381, 388], "parameters": ["self"]}, {"name": "_save_analysis", "docstring": "Save behavior analysis to disk.", "line_range": [390, 397], "parameters": ["self", "analysis"]}, {"name": "get_monitoring_report", "docstring": "Get comprehensive monitoring report.", "line_range": [399, 426], "parameters": ["self"]}], "bases": []}], "callgraph": {"__init__": ["self._load_events", "Path", "logger.info"], "record_ai_interaction": ["self._check_immediate_feedback", "self._analyze_interaction_patterns", "len", "datetime.now", "AIUsageEvent", "self._calculate_effectiveness_score", "self._save_events"], "_analyze_interaction_patterns": ["query.lower", "any", "patterns.append"], "_calculate_effectiveness_score": ["min", "len", "set", "pattern_scores.get"], "_check_immediate_feedback": ["self._log_immediate_feedback", "any"], "_log_immediate_feedback": ["logger.warning", "print"], "analyze_behavior_trends": ["datetime.fromisoformat", "set", "AIBehaviorAnalysis", "improvements.append", "datetime.now", "len", "all_tools.update", "any", "timedelta", "self._save_analysis", "sum", "self._generate_recommendations", "strengths.append"], "_generate_recommendations": ["recommendations.append", "recommendations.extend"], "get_real_time_guidance": ["guidance.append", "current_query.lower", "any"], "_load_events": ["logger.info", "len", "AIUsageEvent", "logger.error", "open", "json.load"], "_save_events": ["json.dump", "asdict", "logger.error", "open"], "_save_analysis": ["json.dump", "asdict", "logger.error", "open"], "get_monitoring_report": ["self.analyze_behavior_trends", "len", "chr", "datetime.now"], "initialize_ai_monitor": ["AISelfMonitor"], "get_ai_monitor": [], "record_ai_usage": ["_monitor_instance.record_ai_interaction"]}, "dependencies": ["Any", "Dict", "Enum", "List", "Optional", "Path", "Set", "asdict", "dataclass", "dataclasses", "datetime", "enum", "json", "logging", "pathlib", "time", "timedelta", "typing"], "hash": "312d43ae77d168866f0ce34f6f89d119d4dc338568049a9611997c4dee8059b4"}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.grok", "path": "backup_before_separation_20250529_152219/src/llmstruct/grok.py", "category": "core", "module_doc": "", "functions": [{"name": "test_grok", "docstring": "", "line_range": [24, 30], "parameters": ["api_key", "prompt", "proxy"], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [6, 11], "parameters": ["self", "api_key", "proxy"], "decorators": []}, {"name": "generate", "docstring": "", "line_range": [13, 21], "parameters": ["self", "prompt", "model"], "decorators": []}], "classes": [{"name": "GrokClient", "docstring": "", "line_range": [5, 21], "methods": [{"name": "__init__", "docstring": "", "line_range": [6, 11], "parameters": ["self", "api_key", "proxy"]}, {"name": "generate", "docstring": "", "line_range": [13, 21], "parameters": ["self", "prompt", "model"]}], "bases": []}], "callgraph": {"__init__": ["requests.Session"], "generate": ["len", "prompt.split", "response.raise_for_status", "response.json"], "test_grok": ["time.perf_counter", "client.generate", "GrokClient"]}, "dependencies": ["requests", "time"], "hash": "b6bbedf1c8576d9a3f89f34490ff01f2ff2662991c93033ef3dadb5cd99929d2"}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.cli_commands", "path": "backup_before_separation_20250529_152219/src/llmstruct/cli_commands.py", "category": "core", "module_doc": "CLI command processing and handlers.", "functions": [{"name": "__init__", "docstring": "Initialize command processor.", "line_range": [33, 72], "parameters": ["self", "root_dir", "config", "utils"], "decorators": []}, {"name": "set_cache", "docstring": "Set cache instance.", "line_range": [74, 76], "parameters": ["self", "cache"], "decorators": []}, {"name": "set_copilot", "docstring": "Set Copilot manager instance.", "line_range": [78, 80], "parameters": ["self", "copilot_manager"], "decorators": []}, {"name": "process_command", "docstring": "Process a command starting with /.", "line_range": [82, 98], "parameters": ["self", "command_line"], "decorators": []}, {"name": "process_prompt", "docstring": "Process a regular user prompt (not a command).", "line_range": [100, 152], "parameters": ["self", "prompt"], "decorators": []}, {"name": "cmd_help", "docstring": "Show help information.", "line_range": [154, 217], "parameters": ["self", "args"], "decorators": []}, {"name": "cmd_workspace", "docstring": "Handle workspace state and permissions management.", "line_range": [219, 334], "parameters": ["self", "args"], "decorators": []}, {"name": "cmd_mode", "docstring": "Handle context mode operations with workspace integration.", "line_range": [336, 437], "parameters": ["self", "args"], "decorators": []}, {"name": "cmd_view", "docstring": "View file or directory contents.", "line_range": [439, 478], "parameters": ["self", "args"], "decorators": []}, {"name": "cmd_write", "docstring": "Write content to a file.", "line_range": [480, 505], "parameters": ["self", "args"], "decorators": []}, {"name": "cmd_queue", "docstring": "Handle queue operations.", "line_range": [507, 549], "parameters": ["self", "args"], "decorators": []}, {"name": "cmd_cache", "docstring": "Handle cache operations.", "line_range": [551, 590], "parameters": ["self", "args"], "decorators": []}, {"name": "cmd_copilot", "docstring": "Handle Copilot operations.", "line_range": [592, 626], "parameters": ["self", "args"], "decorators": []}, {"name": "cmd_config", "docstring": "Handle configuration operations.", "line_range": [628, 660], "parameters": ["self", "args"], "decorators": []}, {"name": "cmd_status", "docstring": "Show system status.", "line_range": [662, 676], "parameters": ["self", "args"], "decorators": []}, {"name": "cmd_backup", "docstring": "Create backup of a file.", "line_range": [678, 693], "parameters": ["self", "args"], "decorators": []}, {"name": "cmd_parse", "docstring": "Parse project structure.", "line_range": [695, 715], "parameters": ["self", "args"], "decorators": []}, {"name": "cmd_audit", "docstring": "Handle audit operations.", "line_range": [717, 743], "parameters": ["self", "args"], "decorators": []}, {"name": "handle_auto_update", "docstring": "Handle auto-update operations.", "line_range": [745, 765], "parameters": ["self", "args"], "decorators": []}, {"name": "handle_struct_status", "docstring": "Handle struct status operations.", "line_range": [767, 791], "parameters": ["self", "args"], "decorators": []}, {"name": "cmd_context", "docstring": "Handle context operations.", "line_range": [793, 849], "parameters": ["self", "args"], "decorators": []}, {"name": "cmd_session", "docstring": "Handle session operations.", "line_range": [851, 902], "parameters": ["self", "args"], "decorators": []}], "classes": [{"name": "CommandProcessor", "docstring": "Processes CLI commands and user prompts.", "line_range": [30, 902], "methods": [{"name": "__init__", "docstring": "Initialize command processor.", "line_range": [33, 72], "parameters": ["self", "root_dir", "config", "utils"]}, {"name": "set_cache", "docstring": "Set cache instance.", "line_range": [74, 76], "parameters": ["self", "cache"]}, {"name": "set_copilot", "docstring": "Set Copilot manager instance.", "line_range": [78, 80], "parameters": ["self", "copilot_manager"]}, {"name": "process_command", "docstring": "Process a command starting with /.", "line_range": [82, 98], "parameters": ["self", "command_line"]}, {"name": "process_prompt", "docstring": "Process a regular user prompt (not a command).", "line_range": [100, 152], "parameters": ["self", "prompt"]}, {"name": "cmd_help", "docstring": "Show help information.", "line_range": [154, 217], "parameters": ["self", "args"]}, {"name": "cmd_workspace", "docstring": "Handle workspace state and permissions management.", "line_range": [219, 334], "parameters": ["self", "args"]}, {"name": "cmd_mode", "docstring": "Handle context mode operations with workspace integration.", "line_range": [336, 437], "parameters": ["self", "args"]}, {"name": "cmd_view", "docstring": "View file or directory contents.", "line_range": [439, 478], "parameters": ["self", "args"]}, {"name": "cmd_write", "docstring": "Write content to a file.", "line_range": [480, 505], "parameters": ["self", "args"]}, {"name": "cmd_queue", "docstring": "Handle queue operations.", "line_range": [507, 549], "parameters": ["self", "args"]}, {"name": "cmd_cache", "docstring": "Handle cache operations.", "line_range": [551, 590], "parameters": ["self", "args"]}, {"name": "cmd_copilot", "docstring": "Handle Copilot operations.", "line_range": [592, 626], "parameters": ["self", "args"]}, {"name": "cmd_config", "docstring": "Handle configuration operations.", "line_range": [628, 660], "parameters": ["self", "args"]}, {"name": "cmd_status", "docstring": "Show system status.", "line_range": [662, 676], "parameters": ["self", "args"]}, {"name": "cmd_backup", "docstring": "Create backup of a file.", "line_range": [678, 693], "parameters": ["self", "args"]}, {"name": "cmd_parse", "docstring": "Parse project structure.", "line_range": [695, 715], "parameters": ["self", "args"]}, {"name": "cmd_audit", "docstring": "Handle audit operations.", "line_range": [717, 743], "parameters": ["self", "args"]}, {"name": "handle_auto_update", "docstring": "Handle auto-update operations.", "line_range": [745, 765], "parameters": ["self", "args"]}, {"name": "handle_struct_status", "docstring": "Handle struct status operations.", "line_range": [767, 791], "parameters": ["self", "args"]}, {"name": "cmd_context", "docstring": "Handle context operations.", "line_range": [793, 849], "parameters": ["self", "args"]}, {"name": "cmd_session", "docstring": "Handle session operations.", "line_range": [851, 902], "parameters": ["self", "args"]}], "bases": []}], "callgraph": {"__init__": ["WorkspaceStateManager", "print"], "set_cache": [], "set_copilot": [], "process_command": ["print", "len", "logging.error", "command_line.split", "command_line.strip"], "process_prompt": ["CopilotEvent", "logging.info", "logging.warning", "print", "len", "context_info.get", "logging.error", "get_optimized_context", "context_data.get", "prompt.strip"], "cmd_help": ["print"], "cmd_workspace": ["print", "boundaries.get", "args.strip", "state.get", "len", "override.get", "int", "permissions.get", "logging.error", "entry.get", "result.get", "action_args.split"], "cmd_mode": ["print", "args.upper", "re.findall", "args.strip", "len", "permissions.get", "args.lower", "result.get", "get_optimized_context", "metrics.get", "context_data.get"], "cmd_view": ["print", "os.listdir", "sorted", "args.strip"], "cmd_write": ["print", "len", "args.split", "content.endswith", "content.startswith"], "cmd_queue": ["print", "args.strip", "queue_data.get", "len", "enumerate", "os.remove", "open", "cmd.get", "json.load"], "cmd_cache": ["print", "os.listdir", "args.strip", "len", "stats.get"], "cmd_copilot": ["print", "args.strip", "json.dumps", "open", "json.load"], "cmd_config": ["print", "json.dumps", "args.strip"], "cmd_status": ["print"], "cmd_backup": ["print", "args.strip"], "cmd_parse": ["print", "generate_json"], "cmd_audit": ["print", "args.strip"], "handle_auto_update": ["print", "generate_json"], "handle_struct_status": ["print", "os.stat", "struct_data.get", "len", "datetime.fromtimestamp", "open", "json.load"], "cmd_context": ["print", "args.strip", "len", "metrics.get", "get_optimized_context", "context_data.get"], "cmd_session": ["print", "args.strip", "state.get", "len", "datetime.now"]}, "dependencies": ["Any", "CLIConfig", "CLIUtils", "CopilotContextManager", "CopilotEvent", "Dict", "JSONCache", "List", "Optional", "Path", "WorkspaceStateManager", "cli_config", "cli_utils", "copilot", "create_context_orchestrator", "datetime", "generate_json", "get_optimized_context", "get_optimized_context_for_scenario", "initialize_copilot", "json", "llmstruct.cache", "llmstruct.context_orchestrator", "llmstruct.copilot", "llmstruct.generators.json_generator", "logging", "os", "pathlib", "re", "subprocess", "sys", "trigger_copilot_event", "typing", "workspace"], "hash": "dd0d9e75fb410d85bfe10f3e554b2fa45c45847ccb317cd54107e4ac6ce33bec"}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.context_orchestrator", "path": "backup_before_separation_20250529_152219/src/llmstruct/context_orchestrator.py", "category": "core", "module_doc": "Smart Context Orchestration for LLMStruct\nOptimizes context loading for different LLM usage scenarios", "functions": [{"name": "create_context_orchestrator", "docstring": "Factory function to create context orchestrator.", "line_range": [506, 508], "parameters": ["project_root"], "decorators": []}, {"name": "get_optimized_context", "docstring": "Get optimized context for scenario - convenience function.\n\nArgs:\n    project_root: Project root directory\n    scenario: Usage scenario (cli_direct, vscode_copilot, session_work)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary", "line_range": [511, 543], "parameters": ["project_root", "scenario", "file_path", "max_tokens"], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [57, 75], "parameters": ["self", "project_root"], "decorators": []}, {"name": "_load_config", "docstring": "Load context orchestration configuration.", "line_range": [77, 119], "parameters": ["self"], "decorators": []}, {"name": "get_context_for_scenario", "docstring": "Get optimized context for specific usage scenario.\n\nArgs:\n    scenario: Usage scenario (cli_direct, vscode_copilot, etc.)\n    file_path: Optional file path for focused context\n    custom_budget: Optional custom token budget\n    \nReturns:\n    Optimized context dictionary", "line_range": [121, 161], "parameters": ["self", "scenario", "file_path", "custom_budget"], "decorators": []}, {"name": "_get_budget_for_scenario", "docstring": "Create budget configuration for scenario.", "line_range": [163, 172], "parameters": ["self", "scenario_config"], "decorators": []}, {"name": "_load_full_context", "docstring": "Load complete context without token restrictions.", "line_range": [174, 187], "parameters": ["self"], "decorators": []}, {"name": "_extract_relationship_summary", "docstring": "\u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u043a\u0440\u0430\u0442\u043a\u0438\u0439 \u0433\u0440\u0430\u0444 \u0441\u0432\u044f\u0437\u0435\u0439 \u043c\u0435\u0436\u0434\u0443 \u043c\u043e\u0434\u0443\u043b\u044f\u043c\u0438 \u0438\u0437 struct.json:\n- module_id, path\n- dependencies (\u0442\u043e\u043b\u044c\u043a\u043e \u0438\u043c\u0435\u043d\u0430 \u043c\u043e\u0434\u0443\u043b\u0435\u0439)\n- \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b/\u0444\u0443\u043d\u043a\u0446\u0438\u0438", "line_range": [189, 216], "parameters": ["self", "max_modules"], "decorators": []}, {"name": "_load_focused_context", "docstring": "Load focused context optimized for VS Code Copilot.\n- \u0412\u0441\u0435\u0433\u0434\u0430 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 summary \u0438\u0437 init.json (\u0443\u0440\u043e\u0432\u0435\u043d\u044c 1)\n- relationship_context (structural) \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 file_path \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434 \u0438\u043b\u0438 \u044f\u0432\u043d\u043e structural \u0437\u0430\u043f\u0440\u043e\u0441", "line_range": [218, 275], "parameters": ["self", "file_path", "budget"], "decorators": []}, {"name": "_load_session_context", "docstring": "Load session-specific context.", "line_range": [277, 299], "parameters": ["self", "budget"], "decorators": []}, {"name": "_load_minimal_context", "docstring": "Load minimal context for quick operations.", "line_range": [301, 319], "parameters": ["self"], "decorators": []}, {"name": "_load_source_with_filtering", "docstring": "Load source with optional filtering based on budget.", "line_range": [321, 344], "parameters": ["self", "source_name", "budget"], "decorators": []}, {"name": "_get_file_context", "docstring": "Get context specific to a file.", "line_range": [346, 357], "parameters": ["self", "file_path"], "decorators": []}, {"name": "_extract_essential_parts", "docstring": "Extract essential parts of data to fit token budget.", "line_range": [359, 381], "parameters": ["self", "data"], "decorators": []}, {"name": "_filter_for_current_session", "docstring": "Filter data to items relevant to current session.", "line_range": [383, 422], "parameters": ["self", "data"], "decorators": []}, {"name": "_extract_summary", "docstring": "Extract summary information from data.", "line_range": [424, 443], "parameters": ["self", "data"], "decorators": []}, {"name": "_apply_section_filtering", "docstring": "Apply section filtering to exclude specified sections.", "line_range": [445, 457], "parameters": ["self", "data", "exclude_sections"], "decorators": []}, {"name": "_update_metrics", "docstring": "Update performance metrics.", "line_range": [459, 477], "parameters": ["self", "scenario", "context", "load_time"], "decorators": []}, {"name": "get_metrics_summary", "docstring": "Get summary of context loading metrics.", "line_range": [479, 494], "parameters": ["self"], "decorators": []}, {"name": "save_metrics", "docstring": "Save metrics to file for analysis.", "line_range": [496, 501], "parameters": ["self"], "decorators": []}], "classes": [{"name": "ContextMode", "docstring": "Context loading modes for different scenarios.", "line_range": [17, 22], "methods": [], "bases": ["Enum"]}, {"name": "ContextLevel", "docstring": "Progressive context levels with token budgets.", "line_range": [25, 30], "methods": [], "bases": ["Enum"]}, {"name": "ContextBudget", "docstring": "Token budget configuration for context loading.", "line_range": [34, 39], "methods": [], "bases": []}, {"name": "ContextMetrics", "docstring": "Metrics for context loading performance.", "line_range": [43, 48], "methods": [], "bases": []}, {"name": "SmartContextOrchestrator", "docstring": "Orchestrates context loading based on usage scenario and token budget.\nProvides optimized context for different LLM integration patterns.", "line_range": [51, 501], "methods": [{"name": "__init__", "docstring": "", "line_range": [57, 75], "parameters": ["self", "project_root"]}, {"name": "_load_config", "docstring": "Load context orchestration configuration.", "line_range": [77, 119], "parameters": ["self"]}, {"name": "get_context_for_scenario", "docstring": "Get optimized context for specific usage scenario.\n\nArgs:\n    scenario: Usage scenario (cli_direct, vscode_copilot, etc.)\n    file_path: Optional file path for focused context\n    custom_budget: Optional custom token budget\n    \nReturns:\n    Optimized context dictionary", "line_range": [121, 161], "parameters": ["self", "scenario", "file_path", "custom_budget"]}, {"name": "_get_budget_for_scenario", "docstring": "Create budget configuration for scenario.", "line_range": [163, 172], "parameters": ["self", "scenario_config"]}, {"name": "_load_full_context", "docstring": "Load complete context without token restrictions.", "line_range": [174, 187], "parameters": ["self"]}, {"name": "_extract_relationship_summary", "docstring": "\u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u043a\u0440\u0430\u0442\u043a\u0438\u0439 \u0433\u0440\u0430\u0444 \u0441\u0432\u044f\u0437\u0435\u0439 \u043c\u0435\u0436\u0434\u0443 \u043c\u043e\u0434\u0443\u043b\u044f\u043c\u0438 \u0438\u0437 struct.json:\n- module_id, path\n- dependencies (\u0442\u043e\u043b\u044c\u043a\u043e \u0438\u043c\u0435\u043d\u0430 \u043c\u043e\u0434\u0443\u043b\u0435\u0439)\n- \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b/\u0444\u0443\u043d\u043a\u0446\u0438\u0438", "line_range": [189, 216], "parameters": ["self", "max_modules"]}, {"name": "_load_focused_context", "docstring": "Load focused context optimized for VS Code Copilot.\n- \u0412\u0441\u0435\u0433\u0434\u0430 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 summary \u0438\u0437 init.json (\u0443\u0440\u043e\u0432\u0435\u043d\u044c 1)\n- relationship_context (structural) \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 file_path \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434 \u0438\u043b\u0438 \u044f\u0432\u043d\u043e structural \u0437\u0430\u043f\u0440\u043e\u0441", "line_range": [218, 275], "parameters": ["self", "file_path", "budget"]}, {"name": "_load_session_context", "docstring": "Load session-specific context.", "line_range": [277, 299], "parameters": ["self", "budget"]}, {"name": "_load_minimal_context", "docstring": "Load minimal context for quick operations.", "line_range": [301, 319], "parameters": ["self"]}, {"name": "_load_source_with_filtering", "docstring": "Load source with optional filtering based on budget.", "line_range": [321, 344], "parameters": ["self", "source_name", "budget"]}, {"name": "_get_file_context", "docstring": "Get context specific to a file.", "line_range": [346, 357], "parameters": ["self", "file_path"]}, {"name": "_extract_essential_parts", "docstring": "Extract essential parts of data to fit token budget.", "line_range": [359, 381], "parameters": ["self", "data"]}, {"name": "_filter_for_current_session", "docstring": "Filter data to items relevant to current session.", "line_range": [383, 422], "parameters": ["self", "data"]}, {"name": "_extract_summary", "docstring": "Extract summary information from data.", "line_range": [424, 443], "parameters": ["self", "data"]}, {"name": "_apply_section_filtering", "docstring": "Apply section filtering to exclude specified sections.", "line_range": [445, 457], "parameters": ["self", "data", "exclude_sections"]}, {"name": "_update_metrics", "docstring": "Update performance metrics.", "line_range": [459, 477], "parameters": ["self", "scenario", "context", "load_time"]}, {"name": "get_metrics_summary", "docstring": "Get summary of context loading metrics.", "line_range": [479, 494], "parameters": ["self"]}, {"name": "save_metrics", "docstring": "Save metrics to file for analysis.", "line_range": [496, 501], "parameters": ["self"]}], "bases": []}], "callgraph": {"__init__": ["Path", "self._load_config"], "_load_config": ["json.load", "config_path.exists", "open"], "get_context_for_scenario": ["ContextMode", "self._load_focused_context", "self._update_metrics", "scenario_config.get", "self._load_session_context", "self._get_budget_for_scenario", "time.time", "self._load_minimal_context", "self._load_full_context"], "_get_budget_for_scenario": ["ContextBudget", "budget_config.get", "scenario_config.get"], "_load_full_context": ["logger.warning", "open", "json.load", "full_path.exists"], "_extract_relationship_summary": ["summary.append", "m.get", "logger.warning", "json.load", "open", "struct_path.exists", "struct.get"], "_load_focused_context": ["init_path.exists", "self._extract_relationship_summary", "session_path.exists", "logger.warning", "len", "json.dumps", "file_path.endswith", "open", "json.load", "self._get_file_context", "self._extract_summary"], "_load_session_context": ["self._load_source_with_filtering", "self._filter_for_current_session"], "_load_minimal_context": ["logger.warning", "open", "source_path.exists", "json.load", "self._extract_summary"], "_load_source_with_filtering": ["logger.warning", "self._apply_section_filtering", "open", "source_path.exists", "json.load"], "_get_file_context": ["Path"], "_extract_essential_parts": ["task.get", "isinstance"], "_filter_for_current_session": ["current_session.get", "idea.get", "task.get", "logger.warning", "data.items", "current_session_path.exists", "open", "json.load"], "_extract_summary": ["t.get", "len", "isinstance"], "_apply_section_filtering": ["data.items"], "_update_metrics": ["context.get", "len", "ContextMetrics"], "get_metrics_summary": ["len", "sum"], "save_metrics": ["json.dump", "self.get_metrics_summary", "open"], "create_context_orchestrator": ["SmartContextOrchestrator"], "get_optimized_context": ["ContextBudget", "orchestrator.get_context_for_scenario", "create_context_orchestrator"]}, "dependencies": ["Any", "Dict", "Enum", "List", "Optional", "Path", "Union", "dataclass", "dataclasses", "enum", "json", "logging", "pathlib", "time", "typing"], "hash": "c17b350c685348e540bb6f3686f2dcb5cf3da1b90c04e0dadb2a298ac2af82b8"}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.__init__", "path": "backup_before_separation_20250529_152219/src/llmstruct/__init__.py", "category": "cli", "module_doc": "", "functions": [], "classes": [], "callgraph": {}, "dependencies": ["AISelfAwarenessCLIIntegration", "LLMClient", "SystemCapabilityDiscovery", "ai_cli_integration", "ai_self_awareness", "llm_client"], "hash": "2592d45bae33fe6628051f9ae5eb6dd5f13fee9588b428a512203df62a55a122"}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.ai_cli_integration", "path": "backup_before_separation_20250529_152219/src/llmstruct/ai_cli_integration.py", "category": "core", "module_doc": "AI Self-Awareness CLI Integration Module\nIntegrates unused CLI functions into the AI self-awareness system.", "functions": [{"name": "create_ai_cli_integration", "docstring": "Factory function to create AI CLI integration instance.", "line_range": [304, 306], "parameters": ["project_root"], "decorators": []}, {"name": "get_ai_enhanced_cli_summary", "docstring": "Get a formatted summary of AI CLI integration capabilities.", "line_range": [309, 346], "parameters": ["project_root"], "decorators": []}, {"name": "__init__", "docstring": "Initialize CLI integration system.", "line_range": [21, 25], "parameters": ["self", "project_root"], "decorators": []}, {"name": "_discover_available_commands", "docstring": "Discover which unused CLI commands are available for integration.", "line_range": [27, 69], "parameters": ["self"], "decorators": []}, {"name": "integrate_ai_status_command", "docstring": "Integrate cmd_status for real-time AI system status awareness.", "line_range": [71, 100], "parameters": ["self"], "decorators": []}, {"name": "integrate_ai_audit_command", "docstring": "Integrate cmd_audit for system health analysis awareness.", "line_range": [102, 131], "parameters": ["self"], "decorators": []}, {"name": "integrate_ai_context_command", "docstring": "Integrate cmd_context for context mode awareness.", "line_range": [133, 162], "parameters": ["self"], "decorators": []}, {"name": "integrate_ai_queue_command", "docstring": "Integrate cmd_queue for workflow queue monitoring.", "line_range": [164, 193], "parameters": ["self"], "decorators": []}, {"name": "get_integration_summary", "docstring": "Get summary of CLI command integrations for AI awareness.", "line_range": [195, 215], "parameters": ["self"], "decorators": []}, {"name": "_calculate_ai_enhancement_impact", "docstring": "Calculate the impact of integrating unused CLI commands on AI capabilities.", "line_range": [217, 241], "parameters": ["self"], "decorators": []}, {"name": "_create_fallback_status", "docstring": "Create fallback status information if cmd_status is not available.", "line_range": [243, 256], "parameters": ["self"], "decorators": []}, {"name": "_create_fallback_audit", "docstring": "Create fallback audit information if cmd_audit is not available.", "line_range": [258, 271], "parameters": ["self"], "decorators": []}, {"name": "_create_fallback_context", "docstring": "Create fallback context information if cmd_context is not available.", "line_range": [273, 286], "parameters": ["self"], "decorators": []}, {"name": "_create_fallback_queue", "docstring": "Create fallback queue information if cmd_queue is not available.", "line_range": [288, 301], "parameters": ["self"], "decorators": []}], "classes": [{"name": "AISelfAwarenessCLIIntegration", "docstring": "Integrates unused CLI functions to enhance AI self-awareness capabilities.\nTransforms 21 unused CLI commands into useful AI interaction tools.", "line_range": [15, 301], "methods": [{"name": "__init__", "docstring": "Initialize CLI integration system.", "line_range": [21, 25], "parameters": ["self", "project_root"]}, {"name": "_discover_available_commands", "docstring": "Discover which unused CLI commands are available for integration.", "line_range": [27, 69], "parameters": ["self"]}, {"name": "integrate_ai_status_command", "docstring": "Integrate cmd_status for real-time AI system status awareness.", "line_range": [71, 100], "parameters": ["self"]}, {"name": "integrate_ai_audit_command", "docstring": "Integrate cmd_audit for system health analysis awareness.", "line_range": [102, 131], "parameters": ["self"]}, {"name": "integrate_ai_context_command", "docstring": "Integrate cmd_context for context mode awareness.", "line_range": [133, 162], "parameters": ["self"]}, {"name": "integrate_ai_queue_command", "docstring": "Integrate cmd_queue for workflow queue monitoring.", "line_range": [164, 193], "parameters": ["self"]}, {"name": "get_integration_summary", "docstring": "Get summary of CLI command integrations for AI awareness.", "line_range": [195, 215], "parameters": ["self"]}, {"name": "_calculate_ai_enhancement_impact", "docstring": "Calculate the impact of integrating unused CLI commands on AI capabilities.", "line_range": [217, 241], "parameters": ["self"]}, {"name": "_create_fallback_status", "docstring": "Create fallback status information if cmd_status is not available.", "line_range": [243, 256], "parameters": ["self"]}, {"name": "_create_fallback_audit", "docstring": "Create fallback audit information if cmd_audit is not available.", "line_range": [258, 271], "parameters": ["self"]}, {"name": "_create_fallback_context", "docstring": "Create fallback context information if cmd_context is not available.", "line_range": [273, 286], "parameters": ["self"]}, {"name": "_create_fallback_queue", "docstring": "Create fallback queue information if cmd_queue is not available.", "line_range": [288, 301], "parameters": ["self"]}], "bases": []}], "callgraph": {"__init__": ["Path", "self._discover_available_commands"], "_discover_available_commands": ["logger.error", "hasattr", "unused_command_mapping.items", "getattr"], "integrate_ai_status_command": ["cmd_status", "logger.error", "str", "self._create_fallback_status"], "integrate_ai_audit_command": ["self._create_fallback_audit", "cmd_audit", "logger.error", "str"], "integrate_ai_context_command": ["cmd_context", "self._create_fallback_context", "logger.error", "str"], "integrate_ai_queue_command": ["cmd_queue", "self._create_fallback_queue", "logger.error", "str"], "get_integration_summary": ["len", "info.get", "cmd.get", "self._calculate_ai_enhancement_impact", "sum"], "_calculate_ai_enhancement_impact": ["len", "any", "enhanced_categories.append", "capability_categories.items", "info.get"], "_create_fallback_status": ["str"], "_create_fallback_audit": ["str"], "_create_fallback_context": [], "_create_fallback_queue": [], "create_ai_cli_integration": ["AISelfAwarenessCLIIntegration"], "get_ai_enhanced_cli_summary": ["create_ai_cli_integration", "integration.integrate_ai_queue_command", "integration.integrate_ai_context_command", "integration.get_integration_summary", "integration.integrate_ai_audit_command", "integration.integrate_ai_status_command"]}, "dependencies": ["Any", "Dict", "List", "Optional", "Path", "cli_commands", "json", "llmstruct", "logging", "pathlib", "typing"], "hash": "31bb5f483e9f2b68b6a50f6763428111abd2eb8026401104bca1d83a1c6efdf6"}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.__main__", "path": "backup_before_separation_20250529_152219/src/llmstruct/__main__.py", "category": "cli", "module_doc": "", "functions": [], "classes": [], "callgraph": {}, "dependencies": ["llmstruct.cli", "main"], "hash": "de795cd58c2dc4122dd30b382c844a7c67fc36489e443b7d12170fa0e15994dc"}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.cli_utils", "path": "backup_before_separation_20250529_152219/src/llmstruct/cli_utils.py", "category": "core", "module_doc": "CLI utility functions.", "functions": [{"name": "__init__", "docstring": "Initialize utils with root directory.", "line_range": [24, 26], "parameters": ["self", "root_dir"], "decorators": []}, {"name": "read_file_content", "docstring": "Read file content with size limit.", "line_range": [28, 50], "parameters": ["self", "file_path", "max_size"], "decorators": []}, {"name": "write_file_content", "docstring": "Write content to file.", "line_range": [52, 70], "parameters": ["self", "file_path", "content"], "decorators": []}, {"name": "get_directory_structure", "docstring": "Get directory structure using folder generator.", "line_range": [72, 115], "parameters": ["self", "path", "gitignore_patterns", "include_patterns", "exclude_patterns", "exclude_dirs"], "decorators": []}, {"name": "validate_json", "docstring": "Validate JSON content.", "line_range": [117, 123], "parameters": ["self", "content"], "decorators": []}, {"name": "format_json", "docstring": "Format data as JSON string.", "line_range": [125, 131], "parameters": ["self", "data", "indent"], "decorators": []}, {"name": "generate_unique_id", "docstring": "Generate unique ID for commands, queues, etc.", "line_range": [133, 137], "parameters": ["self", "prefix"], "decorators": []}, {"name": "safe_path_join", "docstring": "Safely join path parts, preventing directory traversal.", "line_range": [139, 149], "parameters": ["self"], "decorators": []}, {"name": "file_exists", "docstring": "Check if file exists.", "line_range": [151, 157], "parameters": ["self", "file_path"], "decorators": []}, {"name": "dir_exists", "docstring": "Check if directory exists.", "line_range": [159, 165], "parameters": ["self", "dir_path"], "decorators": []}, {"name": "get_file_size", "docstring": "Get file size in bytes.", "line_range": [167, 173], "parameters": ["self", "file_path"], "decorators": []}, {"name": "backup_file", "docstring": "Create backup of file with timestamp.", "line_range": [175, 191], "parameters": ["self", "file_path"], "decorators": []}, {"name": "cleanup_old_backups", "docstring": "Clean up old backup files, keeping only the most recent ones.", "line_range": [193, 222], "parameters": ["self", "file_path", "keep_count"], "decorators": []}], "classes": [{"name": "CLIUtils", "docstring": "Utility functions for CLI operations.", "line_range": [21, 222], "methods": [{"name": "__init__", "docstring": "Initialize utils with root directory.", "line_range": [24, 26], "parameters": ["self", "root_dir"]}, {"name": "read_file_content", "docstring": "Read file content with size limit.", "line_range": [28, 50], "parameters": ["self", "file_path", "max_size"]}, {"name": "write_file_content", "docstring": "Write content to file.", "line_range": [52, 70], "parameters": ["self", "file_path", "content"]}, {"name": "get_directory_structure", "docstring": "Get directory structure using folder generator.", "line_range": [72, 115], "parameters": ["self", "path", "gitignore_patterns", "include_patterns", "exclude_patterns", "exclude_dirs"]}, {"name": "validate_json", "docstring": "Validate JSON content.", "line_range": [117, 123], "parameters": ["self", "content"]}, {"name": "format_json", "docstring": "Format data as JSON string.", "line_range": [125, 131], "parameters": ["self", "data", "indent"]}, {"name": "generate_unique_id", "docstring": "Generate unique ID for commands, queues, etc.", "line_range": [133, 137], "parameters": ["self", "prefix"]}, {"name": "safe_path_join", "docstring": "Safely join path parts, preventing directory traversal.", "line_range": [139, 149], "parameters": ["self"]}, {"name": "file_exists", "docstring": "Check if file exists.", "line_range": [151, 157], "parameters": ["self", "file_path"]}, {"name": "dir_exists", "docstring": "Check if directory exists.", "line_range": [159, 165], "parameters": ["self", "dir_path"]}, {"name": "get_file_size", "docstring": "Get file size in bytes.", "line_range": [167, 173], "parameters": ["self", "file_path"]}, {"name": "backup_file", "docstring": "Create backup of file with timestamp.", "line_range": [175, 191], "parameters": ["self", "file_path"]}, {"name": "cleanup_old_backups", "docstring": "Clean up old backup files, keeping only the most recent ones.", "line_range": [193, 222], "parameters": ["self", "file_path", "keep_count"]}], "bases": []}], "callgraph": {"__init__": [], "read_file_content": ["logging.warning", "os.stat", "logging.error", "open", "f.read"], "write_file_content": ["logging.info", "logging.error", "f.write", "Path", "open"], "get_directory_structure": ["get_folder_structure", "sorted", "os.listdir", "logging.error"], "validate_json": ["json.loads", "str"], "format_json": ["json.dumps", "str", "logging.error"], "generate_unique_id": ["time.time", "int", "str", "uuid.uuid4"], "safe_path_join": ["ValueError", "resolved_path.startswith"], "file_exists": ["self.safe_path_join"], "dir_exists": ["self.safe_path_join"], "get_file_size": ["self.safe_path_join"], "backup_file": ["src.read", "int", "dst.write", "self.safe_path_join", "logging.error", "open", "time.time"], "cleanup_old_backups": ["logging.info", "logging.warning", "os.listdir", "backups.sort", "filename.startswith", "int", "self.safe_path_join", "os.remove", "backups.append", "logging.error", "filename.split"]}, "dependencies": ["Any", "Dict", "List", "Optional", "Path", "get_folder_structure", "json", "llmstruct.generators.json_generator", "logging", "os", "pathlib", "time", "typing", "uuid"], "hash": "105ac5d21c6d1870ac478aadb62ca79e99a3453df4457642fcda39f575abf367"}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.copilot", "path": "backup_before_separation_20250529_152219/src/llmstruct/copilot.py", "category": "core", "module_doc": "LLMStruct Copilot Integration Module\nProvides context-aware development assistance with hybrid copilot capabilities.", "functions": [{"name": "initialize_copilot", "docstring": "Initialize copilot context manager for the project.\n\nArgs:\n    project_root: Project root directory\n\nReturns:\n    Configured CopilotContextManager instance", "line_range": [649, 659], "parameters": ["project_root"], "decorators": []}, {"name": "trigger_copilot_event", "docstring": "Trigger a copilot event and get relevant context.\n\nArgs:\n    manager: CopilotContextManager instance\n    event_type: Type of event\n    file_path: Optional file path\n    **kwargs: Additional event metadata\n\nReturns:\n    Dict with event context", "line_range": [662, 679], "parameters": ["manager", "event_type", "file_path"], "decorators": []}, {"name": "smart_suggest", "docstring": "Get smart suggestions based on query and context.\n\nArgs:\n    manager: CopilotContextManager instance\n    query: Query string\n    context: Context type (code, workflow, task, etc.)\n\nReturns:\n    List of suggestions", "line_range": [682, 702], "parameters": ["manager", "query", "context"], "decorators": []}, {"name": "get_optimized_context_for_scenario", "docstring": "Get optimized context for specific scenario - standalone function.\n\nArgs:\n    project_root: Project root directory\n    scenario: Usage scenario (vscode_copilot, cli_direct, etc.)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary", "line_range": [705, 728], "parameters": ["project_root", "scenario", "file_path", "max_tokens"], "decorators": []}, {"name": "__init__", "docstring": "Initialize the Copilot Context Manager.\n\nArgs:\n    project_root: Project root directory\n    config_path: Path to copilot_init.json", "line_range": [68, 90], "parameters": ["self", "project_root", "config_path"], "decorators": []}, {"name": "_load_config", "docstring": "Load copilot configuration from JSON file.", "line_range": [92, 104], "parameters": ["self"], "decorators": []}, {"name": "_initialize_layers", "docstring": "Initialize context layers from configuration.", "line_range": [106, 116], "parameters": ["self"], "decorators": []}, {"name": "load_context_layer", "docstring": "Load a specific context layer.\n\nArgs:\n    layer_name: Name of the layer to load\n    force: Force reload if already loaded\n\nReturns:\n    bool: True if successful", "line_range": [118, 160], "parameters": ["self", "layer_name", "force"], "decorators": []}, {"name": "unload_context_layer", "docstring": "Unload a context layer to free memory.\n\nArgs:\n    layer_name: Name of the layer to unload\n\nReturns:\n    bool: True if successful", "line_range": [162, 180], "parameters": ["self", "layer_name"], "decorators": []}, {"name": "get_optimized_context", "docstring": "Get optimized context using Smart Context Orchestrator.\n\nArgs:\n    scenario: Usage scenario (vscode_copilot, cli_direct, etc.)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary", "line_range": [182, 225], "parameters": ["self", "scenario", "file_path", "max_tokens"], "decorators": []}, {"name": "_get_legacy_context", "docstring": "Fallback to legacy context loading.", "line_range": [227, 235], "parameters": ["self"], "decorators": []}, {"name": "get_context_for_vscode", "docstring": "Get optimized context specifically for VS Code Copilot integration.\n\nArgs:\n    file_path: Optional file path for focused context\n    \nReturns:\n    Token-optimized context for VS Code", "line_range": [237, 251], "parameters": ["self", "file_path"], "decorators": []}, {"name": "get_context_for_event", "docstring": "Get relevant context for a copilot event using Smart Context Orchestrator.\n\nArgs:\n    event: The copilot event\n\nReturns:\n    Dict containing relevant context", "line_range": [252, 296], "parameters": ["self", "event"], "decorators": []}, {"name": "_get_legacy_event_context", "docstring": "Legacy event context loading as fallback.", "line_range": [298, 350], "parameters": ["self", "event"], "decorators": []}, {"name": "suggest_completion", "docstring": "Generate context-aware code completions.\n\nArgs:\n    current_code: Current code content\n    file_path: Path to the current file\n    cursor_position: Cursor position in the code\n\nReturns:\n    List of completion suggestions", "line_range": [352, 397], "parameters": ["self", "current_code", "file_path", "cursor_position"], "decorators": []}, {"name": "validate_change", "docstring": "Validate a code change against safety rules.\n\nArgs:\n    file_path: Path to the changed file\n    change_type: Type of change (create, edit, delete)\n\nReturns:\n    Dict with validation results", "line_range": [399, 445], "parameters": ["self", "file_path", "change_type"], "decorators": []}, {"name": "_matches_scope", "docstring": "Check if file matches scope pattern.", "line_range": [447, 452], "parameters": ["self", "file_path", "scope"], "decorators": []}, {"name": "_matches_trigger", "docstring": "Check if change type matches trigger.", "line_range": [454, 463], "parameters": ["self", "change_type", "trigger"], "decorators": []}, {"name": "_validate_json_schema", "docstring": "Validate JSON file against schema.", "line_range": [465, 480], "parameters": ["self", "file_path"], "decorators": []}, {"name": "_check_circular_dependencies", "docstring": "Check for circular dependencies.", "line_range": [482, 507], "parameters": ["self", "file_path"], "decorators": []}, {"name": "_validate_task_references", "docstring": "Validate task references in tasks.json.", "line_range": [509, 536], "parameters": ["self", "file_path"], "decorators": []}, {"name": "get_workflow_suggestions", "docstring": "Get workflow suggestions based on current command context.\n\nArgs:\n    command: Current command or operation\n\nReturns:\n    List of workflow suggestions", "line_range": [538, 568], "parameters": ["self", "command"], "decorators": []}, {"name": "refresh_all_contexts", "docstring": "Refresh all loaded context layers.\n\nReturns:\n    bool: True if successful", "line_range": [570, 584], "parameters": ["self"], "decorators": []}, {"name": "get_context_status", "docstring": "Get status of all context layers.\n\nReturns:\n    Dict with context status information", "line_range": [586, 607], "parameters": ["self"], "decorators": []}, {"name": "export_context", "docstring": "Export context in specified format.\n\nArgs:\n    layers: List of layers to export (None for all loaded)\n    format: Export format (json, yaml, etc.)\n\nReturns:\n    Exported context as string", "line_range": [609, 631], "parameters": ["self", "layers", "format"], "decorators": []}, {"name": "close", "docstring": "Clean up resources.", "line_range": [633, 643], "parameters": ["self"], "decorators": []}], "classes": [{"name": "ContextLayer", "docstring": "Context layer priorities for copilot integration.", "line_range": [22, 28], "methods": [], "bases": ["Enum"]}, {"name": "AttachMode", "docstring": "Context attachment modes.", "line_range": [31, 37], "methods": [], "bases": ["Enum"]}, {"name": "ContextLayerConfig", "docstring": "Configuration for a context layer.", "line_range": [41, 49], "methods": [], "bases": []}, {"name": "CopilotEvent", "docstring": "Represents a copilot event for context triggering.", "line_range": [53, 59], "methods": [], "bases": []}, {"name": "CopilotContextManager", "docstring": "Manages context layers and integration with GitHub Copilot.\nProvides intelligent context loading and workflow assistance.", "line_range": [62, 643], "methods": [{"name": "__init__", "docstring": "Initialize the Copilot Context Manager.\n\nArgs:\n    project_root: Project root directory\n    config_path: Path to copilot_init.json", "line_range": [68, 90], "parameters": ["self", "project_root", "config_path"]}, {"name": "_load_config", "docstring": "Load copilot configuration from JSON file.", "line_range": [92, 104], "parameters": ["self"]}, {"name": "_initialize_layers", "docstring": "Initialize context layers from configuration.", "line_range": [106, 116], "parameters": ["self"]}, {"name": "load_context_layer", "docstring": "Load a specific context layer.\n\nArgs:\n    layer_name: Name of the layer to load\n    force: Force reload if already loaded\n\nReturns:\n    bool: True if successful", "line_range": [118, 160], "parameters": ["self", "layer_name", "force"]}, {"name": "unload_context_layer", "docstring": "Unload a context layer to free memory.\n\nArgs:\n    layer_name: Name of the layer to unload\n\nReturns:\n    bool: True if successful", "line_range": [162, 180], "parameters": ["self", "layer_name"]}, {"name": "get_optimized_context", "docstring": "Get optimized context using Smart Context Orchestrator.\n\nArgs:\n    scenario: Usage scenario (vscode_copilot, cli_direct, etc.)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary", "line_range": [182, 225], "parameters": ["self", "scenario", "file_path", "max_tokens"]}, {"name": "_get_legacy_context", "docstring": "Fallback to legacy context loading.", "line_range": [227, 235], "parameters": ["self"]}, {"name": "get_context_for_vscode", "docstring": "Get optimized context specifically for VS Code Copilot integration.\n\nArgs:\n    file_path: Optional file path for focused context\n    \nReturns:\n    Token-optimized context for VS Code", "line_range": [237, 251], "parameters": ["self", "file_path"]}, {"name": "get_context_for_event", "docstring": "Get relevant context for a copilot event using Smart Context Orchestrator.\n\nArgs:\n    event: The copilot event\n\nReturns:\n    Dict containing relevant context", "line_range": [252, 296], "parameters": ["self", "event"]}, {"name": "_get_legacy_event_context", "docstring": "Legacy event context loading as fallback.", "line_range": [298, 350], "parameters": ["self", "event"]}, {"name": "suggest_completion", "docstring": "Generate context-aware code completions.\n\nArgs:\n    current_code: Current code content\n    file_path: Path to the current file\n    cursor_position: Cursor position in the code\n\nReturns:\n    List of completion suggestions", "line_range": [352, 397], "parameters": ["self", "current_code", "file_path", "cursor_position"]}, {"name": "validate_change", "docstring": "Validate a code change against safety rules.\n\nArgs:\n    file_path: Path to the changed file\n    change_type: Type of change (create, edit, delete)\n\nReturns:\n    Dict with validation results", "line_range": [399, 445], "parameters": ["self", "file_path", "change_type"]}, {"name": "_matches_scope", "docstring": "Check if file matches scope pattern.", "line_range": [447, 452], "parameters": ["self", "file_path", "scope"]}, {"name": "_matches_trigger", "docstring": "Check if change type matches trigger.", "line_range": [454, 463], "parameters": ["self", "change_type", "trigger"]}, {"name": "_validate_json_schema", "docstring": "Validate JSON file against schema.", "line_range": [465, 480], "parameters": ["self", "file_path"]}, {"name": "_check_circular_dependencies", "docstring": "Check for circular dependencies.", "line_range": [482, 507], "parameters": ["self", "file_path"]}, {"name": "_validate_task_references", "docstring": "Validate task references in tasks.json.", "line_range": [509, 536], "parameters": ["self", "file_path"]}, {"name": "get_workflow_suggestions", "docstring": "Get workflow suggestions based on current command context.\n\nArgs:\n    command: Current command or operation\n\nReturns:\n    List of workflow suggestions", "line_range": [538, 568], "parameters": ["self", "command"]}, {"name": "refresh_all_contexts", "docstring": "Refresh all loaded context layers.\n\nReturns:\n    bool: True if successful", "line_range": [570, 584], "parameters": ["self"]}, {"name": "get_context_status", "docstring": "Get status of all context layers.\n\nReturns:\n    Dict with context status information", "line_range": [586, 607], "parameters": ["self"]}, {"name": "export_context", "docstring": "Export context in specified format.\n\nArgs:\n    layers: List of layers to export (None for all loaded)\n    format: Export format (json, yaml, etc.)\n\nReturns:\n    Exported context as string", "line_range": [609, 631], "parameters": ["self", "layers", "format"]}, {"name": "close", "docstring": "Clean up resources.", "line_range": [633, 643], "parameters": ["self"]}], "bases": []}], "callgraph": {"__init__": ["create_context_orchestrator", "self._load_config", "self._initialize_layers", "Path", "JSONCache", "os.getcwd", "str"], "_load_config": ["logger.info", "logger.warning", "Path", "logger.error", "open", "json.load"], "_initialize_layers": ["ContextLayerConfig", "layer_config.get", "layers_config.items"], "load_context_layer": ["logger.info", "logger.warning", "logger.debug", "logger.error", "open", "time.time", "source_path.exists", "json.load"], "unload_context_layer": ["logger.info"], "get_optimized_context": ["scenario_mapping.get", "self._get_legacy_context", "logger.error"], "_get_legacy_context": ["self.load_context_layer"], "get_context_for_vscode": ["self.get_optimized_context"], "get_context_for_event": ["scenario_mapping.get", "self._get_legacy_event_context", "self.get_optimized_context", "logger.error"], "_get_legacy_event_context": ["source_path.exists", "workflow_triggers.get", "file_triggers.get", "code_triggers.get", "triggers.get", "logger.error", "open", "self.load_context_layer", "json.load"], "suggest_completion": ["current_module.get", "suggestions.append", "func.get", "Path", "struct_context.get", "module.get", "self.load_context_layer", "str"], "validate_change": ["rule.get", "self._check_circular_dependencies", "len", "self._matches_scope", "self._validate_json_schema", "safety_features.get", "self._matches_trigger", "self._validate_task_references", "result.get"], "_matches_scope": ["Path", "fnmatch", "str"], "_matches_trigger": ["trigger_map.get"], "_validate_json_schema": ["file_path.endswith", "json.load", "open"], "_check_circular_dependencies": ["struct_data.get", "len", "Path", "module.get", "self.load_context_layer", "str"], "_validate_task_references": ["set", "task.get", "task_ids.add", "file_path.endswith", "open", "tasks_data.get", "json.load"], "get_workflow_suggestions": ["workflow.get", "suggestions.append", "workflows.items", "suggestions.extend", "command.lower", "self.load_context_layer"], "refresh_all_contexts": ["self.load_context_layer", "logger.info", "list"], "get_context_status": ["list"], "export_context": ["str", "json.dumps", "list"], "close": ["hasattr", "logger.info"], "initialize_copilot": ["CopilotContextManager"], "trigger_copilot_event": ["manager.get_context_for_event", "CopilotEvent"], "smart_suggest": ["manager.get_workflow_suggestions"], "get_optimized_context_for_scenario": ["manager.get_optimized_context", "manager.close", "initialize_copilot", "locals"]}, "dependencies": ["Any", "Dict", "Enum", "JSONCache", "List", "Optional", "Path", "SmartContextOrchestrator", "Union", "create_context_orchestrator", "dataclass", "dataclasses", "enum", "fnmatch", "json", "llmstruct.cache", "llmstruct.context_orchestrator", "logging", "os", "pathlib", "time", "typing"], "hash": "30fd8d33334ad30d2d2784dd2ae9d1fd50ab982076f550ab8d7e9a2258b2c310"}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.gh_view", "path": "backup_before_separation_20250529_152219/src/llmstruct/gh_view.py", "category": "core", "module_doc": "GitHub visualization/graph feature (gh-view-v1)\nExport consolidated tasks/ideas from JSON files to GitHub Project cards", "functions": [{"name": "main", "docstring": "Main entry point for GitHub Projects export", "line_range": [177, 208], "parameters": [], "decorators": []}, {"name": "__init__", "docstring": "Initialize exporter with configuration", "line_range": [19, 25], "parameters": ["self", "config_path"], "decorators": []}, {"name": "_load_config", "docstring": "Load configuration from TOML file", "line_range": [27, 35], "parameters": ["self"], "decorators": []}, {"name": "_load_mapping", "docstring": "Load existing ID mapping between local and GitHub", "line_range": [37, 45], "parameters": ["self"], "decorators": []}, {"name": "_save_mapping", "docstring": "Save ID mapping to file", "line_range": [47, 53], "parameters": ["self"], "decorators": []}, {"name": "_run_gh_command", "docstring": "Run GitHub CLI command and return success status and output", "line_range": [55, 68], "parameters": ["self", "command"], "decorators": []}, {"name": "load_official_data", "docstring": "Load tasks and ideas from official JSON files", "line_range": [70, 98], "parameters": ["self"], "decorators": []}, {"name": "format_task_for_github", "docstring": "Format task data for GitHub Project card", "line_range": [100, 137], "parameters": ["self", "task"], "decorators": []}, {"name": "format_idea_for_github", "docstring": "Format idea data for GitHub Project card", "line_range": [139, 174], "parameters": ["self", "idea"], "decorators": []}], "classes": [{"name": "GitHubProjectsExporter", "docstring": "Export tasks and ideas to GitHub Projects as cards", "line_range": [16, 174], "methods": [{"name": "__init__", "docstring": "Initialize exporter with configuration", "line_range": [19, 25], "parameters": ["self", "config_path"]}, {"name": "_load_config", "docstring": "Load configuration from TOML file", "line_range": [27, 35], "parameters": ["self"]}, {"name": "_load_mapping", "docstring": "Load existing ID mapping between local and GitHub", "line_range": [37, 45], "parameters": ["self"]}, {"name": "_save_mapping", "docstring": "Save ID mapping to file", "line_range": [47, 53], "parameters": ["self"]}, {"name": "_run_gh_command", "docstring": "Run GitHub CLI command and return success status and output", "line_range": [55, 68], "parameters": ["self", "command"]}, {"name": "load_official_data", "docstring": "Load tasks and ideas from official JSON files", "line_range": [70, 98], "parameters": ["self"]}, {"name": "format_task_for_github", "docstring": "Format task data for GitHub Project card", "line_range": [100, 137], "parameters": ["self", "task"]}, {"name": "format_idea_for_github", "docstring": "Format idea data for GitHub Project card", "line_range": [139, 174], "parameters": ["self", "idea"]}], "bases": []}], "callgraph": {"__init__": ["Path", "self._load_config", "self._load_mapping"], "_load_config": ["toml.load", "config.get", "print", "open"], "_load_mapping": ["json.load", "open"], "_save_mapping": ["json.dump", "print", "open"], "_run_gh_command": ["subprocess.run"], "load_official_data": ["print", "tasks_data.get", "tasks_file.exists", "len", "ideas_file.exists", "ideas_data.get", "open", "json.load"], "format_task_for_github": ["task.get", "status_map.get", "body_parts.append"], "format_idea_for_github": ["status_map.get", "idea.get", "body_parts.append"], "main": ["print", "len", "GitHubProjectsExporter", "sys.exit", "exporter.format_idea_for_github", "exporter.load_official_data", "exporter.format_task_for_github"]}, "dependencies": ["Any", "Dict", "List", "Optional", "Path", "Tuple", "datetime", "json", "pathlib", "subprocess", "sys", "toml", "typing"], "hash": "42f9d108f2c0b84536bc1f84861fe336c6c5383ee231ea92edf91eabed74b28c"}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.llm_client", "path": "backup_before_separation_20250529_152219/src/llmstruct/llm_client.py", "category": "core", "module_doc": "", "functions": [{"name": "__init__", "docstring": "Initialize LLMClient with optional Ollama host.", "line_range": [28, 36], "parameters": ["self", "ollama_host"], "decorators": []}, {"name": "query", "docstring": "Query LLMs with prompt, context, and optional model.", "line_range": [38, 86], "parameters": ["self", "prompt", "context_path", "mode", "model", "artifact_ids"], "decorators": []}, {"name": "_query_grok", "docstring": "Query Grok API.", "line_range": [88, 115], "parameters": ["self", "prompt"], "decorators": []}, {"name": "_query_anthropic", "docstring": "Query Anthropic API.", "line_range": [117, 141], "parameters": ["self", "prompt"], "decorators": []}, {"name": "_query_ollama", "docstring": "Query Ollama API with specified model.", "line_range": [143, 156], "parameters": ["self", "prompt", "model"], "decorators": []}, {"name": "_query_hybrid", "docstring": "Query multiple LLMs and combine results.", "line_range": [158, 172], "parameters": ["self", "prompt", "model"], "decorators": []}], "classes": [{"name": "LLMClient", "docstring": "", "line_range": [27, 172], "methods": [{"name": "__init__", "docstring": "Initialize LLMClient with optional Ollama host.", "line_range": [28, 36], "parameters": ["self", "ollama_host"]}, {"name": "query", "docstring": "Query LLMs with prompt, context, and optional model.", "line_range": [38, 86], "parameters": ["self", "prompt", "context_path", "mode", "model", "artifact_ids"]}, {"name": "_query_grok", "docstring": "Query Grok API.", "line_range": [88, 115], "parameters": ["self", "prompt"]}, {"name": "_query_anthropic", "docstring": "Query Anthropic API.", "line_range": [117, 141], "parameters": ["self", "prompt"]}, {"name": "_query_ollama", "docstring": "Query Ollama API with specified model.", "line_range": [143, 156], "parameters": ["self", "prompt", "model"]}, {"name": "_query_hybrid", "docstring": "Query multiple LLMs and combine results.", "line_range": [158, 172], "parameters": ["self", "prompt", "model"]}], "bases": []}], "callgraph": {"__init__": ["logging.info", "os.getenv", "int"], "query": ["logging.info", "logging.warning", "self._query_anthropic", "json.dumps", "self._query_hybrid", "logging.error", "self._query_grok", "Path", "self._query_ollama", "asyncio.sleep", "range", "json.load"], "_query_grok": ["logging.info", "session.post", "response.json", "logging.error", "result.get", "aiohttp.ClientSession"], "_query_anthropic": ["logging.info", "session.post", "response.json", "logging.error", "result.get", "aiohttp.ClientSession"], "_query_ollama": ["logging.info", "session.post", "response.json", "logging.error", "result.get", "aiohttp.ClientSession", "logging.debug"], "_query_hybrid": ["logging.info", "self._query_anthropic", "len", "asyncio.gather", "self._query_grok", "isinstance", "self._query_ollama"]}, "dependencies": ["List", "Optional", "Path", "aiohttp", "asyncio", "dotenv", "json", "load_dotenv", "logging", "os", "pathlib", "typing"], "hash": "c477d5e96f165fa96546ff8e2673db785cee146f6fffd0f424d21072431133ba"}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.ai_workflow_middleware", "path": "backup_before_separation_20250529_152219/src/llmstruct/ai_workflow_middleware.py", "category": "core", "module_doc": "AI Workflow Middleware - Forces AI Integration with LLMStruct\nIntercepts all AI requests and ensures they go through our orchestration system.", "functions": [{"name": "initialize_ai_middleware", "docstring": "Initialize global AI middleware.", "line_range": [393, 397], "parameters": ["project_root", "mode"], "decorators": []}, {"name": "get_ai_middleware", "docstring": "Get current AI middleware instance.", "line_range": [400, 402], "parameters": [], "decorators": []}, {"name": "process_ai_query", "docstring": "Global function to process AI queries through middleware.", "line_range": [405, 410], "parameters": ["query", "ai_handler"], "decorators": []}, {"name": "ensure_llmstruct_integration", "docstring": "Decorator that ensures function uses llmstruct system.", "line_range": [414, 431], "parameters": ["func"], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [55, 74], "parameters": ["self", "project_root", "mode"], "decorators": []}, {"name": "_load_middleware_config", "docstring": "Load middleware configuration.", "line_range": [76, 101], "parameters": ["self"], "decorators": []}, {"name": "process_ai_request", "docstring": "Main middleware entry point - ALL AI requests should go through this.\n\nArgs:\n    raw_query: Raw AI query/request\n    ai_handler: Optional custom AI handler function\n    \nReturns:\n    Processed AI response with llmstruct integration", "line_range": [103, 135], "parameters": ["self", "raw_query", "ai_handler"], "decorators": []}, {"name": "_parse_ai_request", "docstring": "Parse raw query into structured AI request.", "line_range": [137, 160], "parameters": ["self", "raw_query"], "decorators": []}, {"name": "_should_use_llmstruct", "docstring": "Determine if request should use llmstruct system.", "line_range": [162, 186], "parameters": ["self", "request"], "decorators": []}, {"name": "_process_with_llmstruct", "docstring": "Process request through full llmstruct system.", "line_range": [188, 219], "parameters": ["self", "request", "ai_handler"], "decorators": []}, {"name": "_process_bypass", "docstring": "Process request without llmstruct system.", "line_range": [221, 236], "parameters": ["self", "request", "ai_handler"], "decorators": []}, {"name": "_optimize_context", "docstring": "Optimize context using orchestrator.", "line_range": [238, 261], "parameters": ["self", "request"], "decorators": []}, {"name": "_analyze_ai_delegation", "docstring": "Analyze which AI should handle this request.", "line_range": [263, 280], "parameters": ["self", "request"], "decorators": []}, {"name": "_get_enhanced_context", "docstring": "Get enhanced context with project awareness.", "line_range": [282, 295], "parameters": ["self", "request", "context_result"], "decorators": []}, {"name": "_get_capability_summary", "docstring": "Get current system capabilities.", "line_range": [297, 310], "parameters": ["self"], "decorators": []}, {"name": "_generate_usage_guidance", "docstring": "Generate guidance for AI on how to use llmstruct system.", "line_range": [312, 331], "parameters": ["self", "request"], "decorators": []}, {"name": "_map_tags_to_scenario", "docstring": "Map context tags to orchestrator scenarios.", "line_range": [333, 348], "parameters": ["self", "tags"], "decorators": []}, {"name": "_default_ai_processing", "docstring": "Default AI processing when no custom handler provided.", "line_range": [350, 365], "parameters": ["self", "request", "context"], "decorators": []}, {"name": "get_middleware_stats", "docstring": "Get middleware usage statistics.", "line_range": [367, 376], "parameters": ["self"], "decorators": []}, {"name": "force_llmstruct_mode", "docstring": "Force all future requests to use llmstruct system.", "line_range": [378, 381], "parameters": ["self"], "decorators": []}, {"name": "enable_guidance_mode", "docstring": "Enable guided mode with llmstruct suggestions.", "line_range": [383, 386], "parameters": ["self"], "decorators": []}, {"name": "wrapper", "docstring": "", "line_range": [416, 429], "parameters": [], "decorators": []}], "classes": [{"name": "AIWorkflowMode", "docstring": "AI workflow enforcement modes.", "line_range": [21, 26], "methods": [], "bases": ["Enum"]}, {"name": "AIRequest", "docstring": "Standardized AI request structure.", "line_range": [30, 36], "methods": [], "bases": []}, {"name": "AIResponse", "docstring": "Standardized AI response structure.", "line_range": [40, 46], "methods": [], "bases": []}, {"name": "AIWorkflowMiddleware", "docstring": "Middleware that ensures ALL AI interactions go through LLMStruct system.\nThis solves the problem of AI not using its own infrastructure.", "line_range": [49, 386], "methods": [{"name": "__init__", "docstring": "", "line_range": [55, 74], "parameters": ["self", "project_root", "mode"]}, {"name": "_load_middleware_config", "docstring": "Load middleware configuration.", "line_range": [76, 101], "parameters": ["self"]}, {"name": "process_ai_request", "docstring": "Main middleware entry point - ALL AI requests should go through this.\n\nArgs:\n    raw_query: Raw AI query/request\n    ai_handler: Optional custom AI handler function\n    \nReturns:\n    Processed AI response with llmstruct integration", "line_range": [103, 135], "parameters": ["self", "raw_query", "ai_handler"]}, {"name": "_parse_ai_request", "docstring": "Parse raw query into structured AI request.", "line_range": [137, 160], "parameters": ["self", "raw_query"]}, {"name": "_should_use_llmstruct", "docstring": "Determine if request should use llmstruct system.", "line_range": [162, 186], "parameters": ["self", "request"]}, {"name": "_process_with_llmstruct", "docstring": "Process request through full llmstruct system.", "line_range": [188, 219], "parameters": ["self", "request", "ai_handler"]}, {"name": "_process_bypass", "docstring": "Process request without llmstruct system.", "line_range": [221, 236], "parameters": ["self", "request", "ai_handler"]}, {"name": "_optimize_context", "docstring": "Optimize context using orchestrator.", "line_range": [238, 261], "parameters": ["self", "request"]}, {"name": "_analyze_ai_delegation", "docstring": "Analyze which AI should handle this request.", "line_range": [263, 280], "parameters": ["self", "request"]}, {"name": "_get_enhanced_context", "docstring": "Get enhanced context with project awareness.", "line_range": [282, 295], "parameters": ["self", "request", "context_result"]}, {"name": "_get_capability_summary", "docstring": "Get current system capabilities.", "line_range": [297, 310], "parameters": ["self"]}, {"name": "_generate_usage_guidance", "docstring": "Generate guidance for AI on how to use llmstruct system.", "line_range": [312, 331], "parameters": ["self", "request"]}, {"name": "_map_tags_to_scenario", "docstring": "Map context tags to orchestrator scenarios.", "line_range": [333, 348], "parameters": ["self", "tags"]}, {"name": "_default_ai_processing", "docstring": "Default AI processing when no custom handler provided.", "line_range": [350, 365], "parameters": ["self", "request", "context"]}, {"name": "get_middleware_stats", "docstring": "Get middleware usage statistics.", "line_range": [367, 376], "parameters": ["self"]}, {"name": "force_llmstruct_mode", "docstring": "Force all future requests to use llmstruct system.", "line_range": [378, 381], "parameters": ["self"]}, {"name": "enable_guidance_mode", "docstring": "Enable guided mode with llmstruct suggestions.", "line_range": [383, 386], "parameters": ["self"]}], "bases": []}], "callgraph": {"__init__": ["create_context_orchestrator", "logger.info", "Path", "CursorAIBridge", "self._load_middleware_config", "SystemCapabilityDiscovery", "str"], "_load_middleware_config": ["json.load", "config_path.exists", "open"], "process_ai_request": ["AIResponse", "self._should_use_llmstruct", "self._process_bypass", "logger.error", "time.time", "self._process_with_llmstruct", "str", "self._parse_ai_request"], "_parse_ai_request": ["re.findall", "re.sub", "context_tags.extend", "time.time", "AIRequest"], "_should_use_llmstruct": [], "_process_with_llmstruct": ["self._get_enhanced_context", "enhanced_context.get", "self._analyze_ai_delegation", "AIResponse", "self._default_ai_processing", "self._optimize_context", "time.time", "ai_handler"], "_process_bypass": ["AIResponse", "ai_handler"], "_optimize_context": ["context.get", "len", "self._map_tags_to_scenario", "logger.error", "str"], "_analyze_ai_delegation": ["str", "delegation.get", "logger.error"], "_get_enhanced_context": ["self._get_capability_summary", "self._generate_usage_guidance"], "_get_capability_summary": ["str"], "_generate_usage_guidance": ["guidance.append"], "_map_tags_to_scenario": [], "_default_ai_processing": [], "get_middleware_stats": [], "force_llmstruct_mode": ["logger.info"], "enable_guidance_mode": ["logger.info"], "initialize_ai_middleware": ["AIWorkflowMiddleware"], "get_ai_middleware": [], "process_ai_query": ["_middleware_instance.process_ai_request", "RuntimeError"], "ensure_llmstruct_integration": [], "wrapper": ["logger.warning", "kwargs.get", "get_ai_middleware", "func", "middleware.process_ai_request", "str"]}, "dependencies": ["Any", "Callable", "CursorAIBridge", "Dict", "Enum", "List", "Optional", "Path", "SystemCapabilityDiscovery", "create_context_orchestrator", "dataclass", "dataclasses", "enum", "json", "llmstruct.ai_self_awareness", "llmstruct.context_orchestrator", "llmstruct.cursor_ai_bridge", "logging", "pathlib", "re", "time", "typing"], "hash": "54add1ca5d729600b85063062c19fc6d076fb219792f66c2420719fed3fb6c66"}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.ai_self_awareness", "path": "backup_before_separation_20250529_152219/src/llmstruct/ai_self_awareness.py", "category": "core", "module_doc": "AI Self-Awareness Enhancement Module\nProvides comprehensive system introspection and capability discovery for llmstruct AI systems.\nEnhanced with Cursor IDE integration and real-time metrics.", "functions": [{"name": "__init__", "docstring": "Initialize the capability discovery system with CLI integration.", "line_range": [101, 107], "parameters": ["self", "project_root"], "decorators": []}, {"name": "_ensure_directories", "docstring": "Ensure required directories exist.", "line_range": [109, 111], "parameters": ["self"], "decorators": []}, {"name": "discover_all_capabilities", "docstring": "Perform comprehensive capability discovery with unused function integration.\n\nArgs:\n    force_refresh: If True, bypass cache and perform fresh discovery\n    \nReturns:\n    Complete system capabilities overview enhanced with integrated unused functions", "line_range": [113, 154], "parameters": ["self", "force_refresh"], "decorators": []}, {"name": "_get_integration_metrics", "docstring": "Get metrics about unused function integration success.", "line_range": [156, 163], "parameters": ["self"], "decorators": []}, {"name": "get_enhanced_capabilities_summary", "docstring": "Get enhanced capabilities summary including unused function integration.", "line_range": [165, 203], "parameters": ["self"], "decorators": []}, {"name": "get_comprehensive_ai_status", "docstring": "Get comprehensive AI status including unused function integration analysis.\nThis is the primary method for AI self-awareness reporting.", "line_range": [205, 246], "parameters": ["self"], "decorators": []}, {"name": "_discover_tools", "docstring": "Discover and check health of all available tools.", "line_range": [248, 260], "parameters": ["self"], "decorators": []}, {"name": "_check_cli_processor", "docstring": "Check CLI processor health.", "line_range": [262, 297], "parameters": ["self"], "decorators": []}, {"name": "_check_copilot_manager", "docstring": "Check Copilot manager health.", "line_range": [299, 336], "parameters": ["self"], "decorators": []}, {"name": "_check_context_orchestrator", "docstring": "Check context orchestrator health.", "line_range": [338, 393], "parameters": ["self"], "decorators": []}, {"name": "_check_cache_system", "docstring": "Check cache system health.", "line_range": [395, 438], "parameters": ["self"], "decorators": []}, {"name": "_check_struct_parser", "docstring": "Check struct.json parser health.", "line_range": [440, 484], "parameters": ["self"], "decorators": []}, {"name": "_check_docs_system", "docstring": "Check docs.json system health.", "line_range": [486, 517], "parameters": ["self"], "decorators": []}, {"name": "_discover_context_capabilities", "docstring": "Discover available context capabilities.", "line_range": [519, 556], "parameters": ["self"], "decorators": []}, {"name": "_check_integration_health", "docstring": "Check health of all system integrations.", "line_range": [558, 567], "parameters": ["self"], "decorators": []}, {"name": "_check_component_status", "docstring": "Check status of a specific component.", "line_range": [569, 574], "parameters": ["self", "component_name"], "decorators": []}, {"name": "_discover_vscode_capabilities", "docstring": "Discover VS Code specific capabilities.", "line_range": [576, 585], "parameters": ["self"], "decorators": []}, {"name": "_calculate_cache_hit_rate", "docstring": "Calculate cache hit rate using real metrics.", "line_range": [587, 589], "parameters": ["self"], "decorators": []}, {"name": "_estimate_system_load", "docstring": "Estimate current system load using real metrics.", "line_range": [591, 593], "parameters": ["self"], "decorators": []}, {"name": "_is_cache_valid", "docstring": "Check if cached capabilities are still valid.", "line_range": [595, 602], "parameters": ["self"], "decorators": []}, {"name": "_load_cached_capabilities", "docstring": "Load capabilities from cache.", "line_range": [604, 618], "parameters": ["self"], "decorators": []}, {"name": "_cache_capabilities", "docstring": "Cache capabilities to disk.", "line_range": [620, 630], "parameters": ["self", "capabilities"], "decorators": []}, {"name": "get_capabilities_summary", "docstring": "Get a human-readable summary of current capabilities.", "line_range": [632, 691], "parameters": ["self"], "decorators": []}, {"name": "_analyze_project_structure", "docstring": "Enhanced project structure analysis integrating multiple unused functions\nfor comprehensive AI self-awareness.", "line_range": [693, 739], "parameters": ["self"], "decorators": []}, {"name": "_get_enhanced_directory_structure", "docstring": "Integration of unused cli_utils.get_directory_structure() function\nfor enhanced AI project awareness.", "line_range": [741, 760], "parameters": ["self"], "decorators": []}, {"name": "_analyze_unused_capabilities", "docstring": "Analyze unused functions to discover hidden AI capabilities.\nThis transforms the 115 unused functions into potential AI enhancements.", "line_range": [762, 819], "parameters": ["self", "struct_data"], "decorators": []}, {"name": "_discover_config_capabilities", "docstring": "Integration of unused cli_config functions for AI configuration awareness.", "line_range": [821, 849], "parameters": ["self"], "decorators": []}, {"name": "_discover_context_scenarios", "docstring": "Integration of unused context_orchestrator functions for scenario awareness.", "line_range": [851, 890], "parameters": ["self"], "decorators": []}, {"name": "_is_ai_useful_command", "docstring": "Determine if a CLI command function would be useful for AI self-awareness.", "line_range": [892, 898], "parameters": ["self", "function_name"], "decorators": []}, {"name": "_is_ai_useful_config", "docstring": "Determine if a config function would be useful for AI configuration awareness.", "line_range": [900, 906], "parameters": ["self", "function_name"], "decorators": []}, {"name": "_is_ai_useful_utility", "docstring": "Determine if a utility function would be useful for AI operations.", "line_range": [908, 914], "parameters": ["self", "function_name"], "decorators": []}, {"name": "_prioritize_integrations", "docstring": "Prioritize which unused functions should be integrated first.", "line_range": [916, 932], "parameters": ["self", "capabilities"], "decorators": []}, {"name": "_basic_directory_scan", "docstring": "Basic directory scan for fallback scenarios.", "line_range": [934, 946], "parameters": ["self"], "decorators": []}, {"name": "get_cursor_status_report", "docstring": "Generate Cursor-specific status optimized for IDE integration.", "line_range": [949, 967], "parameters": ["self"], "decorators": []}, {"name": "optimize_context_for_cursor", "docstring": "Provide perfectly sized context for Cursor interactions.", "line_range": [969, 1001], "parameters": ["self", "query_analysis"], "decorators": []}, {"name": "get_goal_aligned_suggestions", "docstring": "Provide suggestions aligned with business goals from personal bridge.", "line_range": [1003, 1038], "parameters": ["self", "technical_context"], "decorators": []}, {"name": "_calculate_real_cache_hit_rate", "docstring": "Calculate actual cache performance from JSONCache and system metrics.", "line_range": [1040, 1066], "parameters": ["self"], "decorators": []}, {"name": "_get_real_system_load", "docstring": "Get actual system performance metrics.", "line_range": [1068, 1090], "parameters": ["self"], "decorators": []}, {"name": "_load_cursor_config", "docstring": "Load Cursor-specific configuration.", "line_range": [1092, 1102], "parameters": ["self"], "decorators": []}, {"name": "_load_personal_bridge", "docstring": "Load personal planning bridge data.", "line_range": [1104, 1114], "parameters": ["self"], "decorators": []}, {"name": "_analyze_query_type", "docstring": "Analyze query to determine optimal context type.", "line_range": [1116, 1144], "parameters": ["self", "query_analysis"], "decorators": []}, {"name": "_apply_privacy_filter", "docstring": "Apply privacy filtering based on level.", "line_range": [1146, 1163], "parameters": ["self", "context_data", "privacy_level"], "decorators": []}, {"name": "_filter_sensitive_dict", "docstring": "Filter sensitive information from dictionary.", "line_range": [1165, 1177], "parameters": ["self", "data"], "decorators": []}, {"name": "_get_overall_health_emoji", "docstring": "Get emoji representing overall system health.", "line_range": [1179, 1202], "parameters": ["self", "capabilities"], "decorators": []}, {"name": "_get_context_status_emoji", "docstring": "Get emoji for context engine status.", "line_range": [1204, 1214], "parameters": ["self", "context"], "decorators": []}, {"name": "_get_ai_integration_emoji", "docstring": "Get emoji for AI integration status.", "line_range": [1216, 1224], "parameters": ["self"], "decorators": []}, {"name": "_get_goal_alignment_status", "docstring": "Get goal alignment status.", "line_range": [1226, 1235], "parameters": ["self"], "decorators": []}], "classes": [{"name": "CapabilityStatus", "docstring": "Status of system capabilities.", "line_range": [22, 27], "methods": [], "bases": ["Enum"]}, {"name": "ContextMode", "docstring": "Available context modes.", "line_range": [30, 35], "methods": [], "bases": ["Enum"]}, {"name": "ToolHealth", "docstring": "Health status of a specific tool.", "line_range": [39, 46], "methods": [], "bases": []}, {"name": "ContextCapabilities", "docstring": "Available context capabilities.", "line_range": [50, 57], "methods": [], "bases": []}, {"name": "IntegrationHealth", "docstring": "Status of system integrations.", "line_range": [61, 68], "methods": [], "bases": []}, {"name": "VSCodeCapabilities", "docstring": "VS Code specific capabilities.", "line_range": [72, 79], "methods": [], "bases": []}, {"name": "SystemCapabilities", "docstring": "Complete system capabilities overview.", "line_range": [83, 91], "methods": [], "bases": []}, {"name": "SystemCapabilityDiscovery", "docstring": "Discovers and monitors system capabilities in real-time.\nProvides AI with comprehensive understanding of available tools and systems.\nEnhanced with unused function integration for maximum AI self-awareness.", "line_range": [94, 1235], "methods": [{"name": "__init__", "docstring": "Initialize the capability discovery system with CLI integration.", "line_range": [101, 107], "parameters": ["self", "project_root"]}, {"name": "_ensure_directories", "docstring": "Ensure required directories exist.", "line_range": [109, 111], "parameters": ["self"]}, {"name": "discover_all_capabilities", "docstring": "Perform comprehensive capability discovery with unused function integration.\n\nArgs:\n    force_refresh: If True, bypass cache and perform fresh discovery\n    \nReturns:\n    Complete system capabilities overview enhanced with integrated unused functions", "line_range": [113, 154], "parameters": ["self", "force_refresh"]}, {"name": "_get_integration_metrics", "docstring": "Get metrics about unused function integration success.", "line_range": [156, 163], "parameters": ["self"]}, {"name": "get_enhanced_capabilities_summary", "docstring": "Get enhanced capabilities summary including unused function integration.", "line_range": [165, 203], "parameters": ["self"]}, {"name": "get_comprehensive_ai_status", "docstring": "Get comprehensive AI status including unused function integration analysis.\nThis is the primary method for AI self-awareness reporting.", "line_range": [205, 246], "parameters": ["self"]}, {"name": "_discover_tools", "docstring": "Discover and check health of all available tools.", "line_range": [248, 260], "parameters": ["self"]}, {"name": "_check_cli_processor", "docstring": "Check CLI processor health.", "line_range": [262, 297], "parameters": ["self"]}, {"name": "_check_copilot_manager", "docstring": "Check Copilot manager health.", "line_range": [299, 336], "parameters": ["self"]}, {"name": "_check_context_orchestrator", "docstring": "Check context orchestrator health.", "line_range": [338, 393], "parameters": ["self"]}, {"name": "_check_cache_system", "docstring": "Check cache system health.", "line_range": [395, 438], "parameters": ["self"]}, {"name": "_check_struct_parser", "docstring": "Check struct.json parser health.", "line_range": [440, 484], "parameters": ["self"]}, {"name": "_check_docs_system", "docstring": "Check docs.json system health.", "line_range": [486, 517], "parameters": ["self"]}, {"name": "_discover_context_capabilities", "docstring": "Discover available context capabilities.", "line_range": [519, 556], "parameters": ["self"]}, {"name": "_check_integration_health", "docstring": "Check health of all system integrations.", "line_range": [558, 567], "parameters": ["self"]}, {"name": "_check_component_status", "docstring": "Check status of a specific component.", "line_range": [569, 574], "parameters": ["self", "component_name"]}, {"name": "_discover_vscode_capabilities", "docstring": "Discover VS Code specific capabilities.", "line_range": [576, 585], "parameters": ["self"]}, {"name": "_calculate_cache_hit_rate", "docstring": "Calculate cache hit rate using real metrics.", "line_range": [587, 589], "parameters": ["self"]}, {"name": "_estimate_system_load", "docstring": "Estimate current system load using real metrics.", "line_range": [591, 593], "parameters": ["self"]}, {"name": "_is_cache_valid", "docstring": "Check if cached capabilities are still valid.", "line_range": [595, 602], "parameters": ["self"]}, {"name": "_load_cached_capabilities", "docstring": "Load capabilities from cache.", "line_range": [604, 618], "parameters": ["self"]}, {"name": "_cache_capabilities", "docstring": "Cache capabilities to disk.", "line_range": [620, 630], "parameters": ["self", "capabilities"]}, {"name": "get_capabilities_summary", "docstring": "Get a human-readable summary of current capabilities.", "line_range": [632, 691], "parameters": ["self"]}, {"name": "_analyze_project_structure", "docstring": "Enhanced project structure analysis integrating multiple unused functions\nfor comprehensive AI self-awareness.", "line_range": [693, 739], "parameters": ["self"]}, {"name": "_get_enhanced_directory_structure", "docstring": "Integration of unused cli_utils.get_directory_structure() function\nfor enhanced AI project awareness.", "line_range": [741, 760], "parameters": ["self"]}, {"name": "_analyze_unused_capabilities", "docstring": "Analyze unused functions to discover hidden AI capabilities.\nThis transforms the 115 unused functions into potential AI enhancements.", "line_range": [762, 819], "parameters": ["self", "struct_data"]}, {"name": "_discover_config_capabilities", "docstring": "Integration of unused cli_config functions for AI configuration awareness.", "line_range": [821, 849], "parameters": ["self"]}, {"name": "_discover_context_scenarios", "docstring": "Integration of unused context_orchestrator functions for scenario awareness.", "line_range": [851, 890], "parameters": ["self"]}, {"name": "_is_ai_useful_command", "docstring": "Determine if a CLI command function would be useful for AI self-awareness.", "line_range": [892, 898], "parameters": ["self", "function_name"]}, {"name": "_is_ai_useful_config", "docstring": "Determine if a config function would be useful for AI configuration awareness.", "line_range": [900, 906], "parameters": ["self", "function_name"]}, {"name": "_is_ai_useful_utility", "docstring": "Determine if a utility function would be useful for AI operations.", "line_range": [908, 914], "parameters": ["self", "function_name"]}, {"name": "_prioritize_integrations", "docstring": "Prioritize which unused functions should be integrated first.", "line_range": [916, 932], "parameters": ["self", "capabilities"]}, {"name": "_basic_directory_scan", "docstring": "Basic directory scan for fallback scenarios.", "line_range": [934, 946], "parameters": ["self"]}, {"name": "get_cursor_status_report", "docstring": "Generate Cursor-specific status optimized for IDE integration.", "line_range": [949, 967], "parameters": ["self"]}, {"name": "optimize_context_for_cursor", "docstring": "Provide perfectly sized context for Cursor interactions.", "line_range": [969, 1001], "parameters": ["self", "query_analysis"]}, {"name": "get_goal_aligned_suggestions", "docstring": "Provide suggestions aligned with business goals from personal bridge.", "line_range": [1003, 1038], "parameters": ["self", "technical_context"]}, {"name": "_calculate_real_cache_hit_rate", "docstring": "Calculate actual cache performance from JSONCache and system metrics.", "line_range": [1040, 1066], "parameters": ["self"]}, {"name": "_get_real_system_load", "docstring": "Get actual system performance metrics.", "line_range": [1068, 1090], "parameters": ["self"]}, {"name": "_load_cursor_config", "docstring": "Load Cursor-specific configuration.", "line_range": [1092, 1102], "parameters": ["self"]}, {"name": "_load_personal_bridge", "docstring": "Load personal planning bridge data.", "line_range": [1104, 1114], "parameters": ["self"]}, {"name": "_analyze_query_type", "docstring": "Analyze query to determine optimal context type.", "line_range": [1116, 1144], "parameters": ["self", "query_analysis"]}, {"name": "_apply_privacy_filter", "docstring": "Apply privacy filtering based on level.", "line_range": [1146, 1163], "parameters": ["self", "context_data", "privacy_level"]}, {"name": "_filter_sensitive_dict", "docstring": "Filter sensitive information from dictionary.", "line_range": [1165, 1177], "parameters": ["self", "data"]}, {"name": "_get_overall_health_emoji", "docstring": "Get emoji representing overall system health.", "line_range": [1179, 1202], "parameters": ["self", "capabilities"]}, {"name": "_get_context_status_emoji", "docstring": "Get emoji for context engine status.", "line_range": [1204, 1214], "parameters": ["self", "context"]}, {"name": "_get_ai_integration_emoji", "docstring": "Get emoji for AI integration status.", "line_range": [1216, 1224], "parameters": ["self"]}, {"name": "_get_goal_alignment_status", "docstring": "Get goal alignment status.", "line_range": [1226, 1235], "parameters": ["self"]}], "bases": []}], "callgraph": {"__init__": ["Path", "self._ensure_directories", "create_ai_cli_integration"], "_ensure_directories": [], "discover_all_capabilities": ["self._is_cache_valid", "self._discover_vscode_capabilities", "logger.info", "datetime.now", "self._estimate_system_load", "self._calculate_cache_hit_rate", "SystemCapabilities", "self._discover_tools", "self._discover_context_capabilities", "self._load_cached_capabilities", "self._cache_capabilities", "time.time", "self._check_integration_health", "self._get_integration_metrics", "self._analyze_project_structure"], "_get_integration_metrics": [], "get_enhanced_capabilities_summary": ["str", "enhanced_info.append", "hasattr", "self.get_capabilities_summary"], "get_comprehensive_ai_status": ["get_ai_enhanced_cli_summary", "str", "self.get_enhanced_capabilities_summary"], "_discover_tools": ["self._check_docs_system", "self._check_copilot_manager", "self._check_struct_parser", "self._check_cli_processor", "self._check_cache_system", "self._check_context_orchestrator"], "_check_cli_processor": ["datetime.now", "CLIUtils", "ToolHealth", "CLIConfig", "time.time", "CommandProcessor", "str"], "_check_copilot_manager": ["manager.get_context_status", "hasattr", "datetime.now", "ToolHealth", "initialize_copilot", "time.time", "str"], "_check_context_orchestrator": ["hasattr", "create_context_orchestrator", "logger.warning", "datetime.now", "ToolHealth", "get_optimized_context", "time.time", "str"], "_check_cache_system": ["cache.close", "cache.get_full_json", "datetime.now", "ToolHealth", "struct_file.exists", "cache.cache_json", "JSONCache", "time.time", "str"], "_check_struct_parser": ["struct_data.get", "datetime.now", "ToolHealth", "struct_file.exists", "FileNotFoundError", "missing_keys.append", "open", "time.time", "json.load", "str"], "_check_docs_system": ["datetime.now", "ToolHealth", "FileNotFoundError", "docs_file.exists", "open", "time.time", "json.load", "str"], "_discover_context_capabilities": ["config.get", "create_context_orchestrator", "list", "ContextCapabilities", "scenario_mappings.keys", "isinstance", "logger.error", "str"], "_check_integration_health": ["self._check_component_status", "IntegrationHealth"], "_check_component_status": ["hasattr"], "_discover_vscode_capabilities": ["VSCodeCapabilities"], "_calculate_cache_hit_rate": ["self._calculate_real_cache_hit_rate"], "_estimate_system_load": ["self._get_real_system_load"], "_is_cache_valid": ["time.time"], "_load_cached_capabilities": ["json.load", "logger.error", "open"], "_cache_capabilities": ["json.dump", "asdict", "logger.error", "open"], "get_capabilities_summary": ["chr", "self.discover_all_capabilities", "len", "str"], "_analyze_project_structure": ["self._discover_context_scenarios", "self._get_enhanced_directory_structure", "struct_data.get", "len", "self._analyze_unused_capabilities", "struct_file.exists", "module.get", "self._discover_config_capabilities", "open", "sum", "json.load", "str"], "_get_enhanced_directory_structure": ["str", "self._basic_directory_scan", "get_directory_structure"], "_analyze_unused_capabilities": ["cli_module.get", "struct_data.get", "self._is_ai_useful_utility", "min", "len", "utils_module.get", "self._prioritize_integrations", "config_module.get", "modules.get", "self._is_ai_useful_command", "f.startswith", "self._is_ai_useful_config", "str"], "_discover_config_capabilities": ["is_auto_update_enabled", "get_copilot_config", "get_queue_config", "get_context_config", "str"], "_discover_context_scenarios": ["get_context_for_scenario", "str", "get_metrics_summary"], "_is_ai_useful_command": [], "_is_ai_useful_config": [], "_is_ai_useful_utility": [], "_prioritize_integrations": ["priorities.append"], "_basic_directory_scan": ["item.is_dir", "str", "item.is_file", "logger.error"], "get_cursor_status_report": ["self._get_ai_integration_emoji", "self._get_overall_health_emoji", "self._load_cursor_config", "self.discover_all_capabilities", "self._get_goal_alignment_status", "self._get_context_status_emoji", "str"], "optimize_context_for_cursor": ["cursor_config.get", "optimal_config.get", "self._analyze_query_type", "context_rules.get", "self._apply_privacy_filter", "file_path.exists", "self._load_cursor_config", "logger.error", "open", "json.load", "str"], "get_goal_aligned_suggestions": ["suggestions.extend", "technical_context.lower", "any", "personal_bridge.get", "self._load_personal_bridge", "logger.error"], "_calculate_real_cache_hit_rate": ["cache_dir.exists", "list", "cache_file.stat", "len", "cache_dir.glob", "logger.error", "time.time"], "_get_real_system_load": ["min", "psutil.disk_usage", "logger.error", "psutil.virtual_memory", "str", "psutil.cpu_percent"], "_load_cursor_config": ["json.load", "logger.error", "config_path.exists", "open"], "_load_personal_bridge": ["bridge_path.exists", "json.load", "logger.error", "open"], "_analyze_query_type": ["query_analysis.get", "any"], "_apply_privacy_filter": ["isinstance", "self._filter_sensitive_dict", "context_data.items"], "_filter_sensitive_dict": ["data.items", "any", "isinstance", "self._filter_sensitive_dict", "key.lower"], "_get_overall_health_emoji": [], "_get_context_status_emoji": ["len"], "_get_ai_integration_emoji": ["hasattr"], "_get_goal_alignment_status": ["self._load_personal_bridge"]}, "dependencies": ["Any", "CLIConfig", "CLIUtils", "CommandProcessor", "CopilotContextManager", "Dict", "Enum", "JSONCache", "List", "Optional", "Path", "asdict", "create_ai_cli_integration", "create_context_orchestrator", "dataclass", "dataclasses", "datetime", "enum", "get_ai_enhanced_cli_summary", "get_auto_update_config", "get_context_config", "get_context_for_scenario", "get_copilot_config", "get_directory_structure", "get_metrics_summary", "get_optimized_context", "get_queue_config", "initialize_copilot", "is_auto_update_enabled", "json", "llmstruct.ai_cli_integration", "llmstruct.cache", "llmstruct.cli_commands", "llmstruct.cli_config", "llmstruct.cli_utils", "llmstruct.context_orchestrator", "llmstruct.copilot", "logging", "os", "pathlib", "psutil", "time", "typing"], "hash": "de0fc0c3829c83dfc026c1ecda0c1cc56753e17c115c751b2f45263e5cf6c097"}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.cache", "path": "backup_before_separation_20250529_152219/src/llmstruct/cache.py", "category": "core", "module_doc": "", "functions": [{"name": "__init__", "docstring": "Initialize SQLite cache for JSON files.", "line_range": [21, 25], "parameters": ["self", "db_path"], "decorators": []}, {"name": "create_tables", "docstring": "Create tables for metadata and file paths.", "line_range": [27, 49], "parameters": ["self"], "decorators": []}, {"name": "cache_json", "docstring": "Cache JSON metadata and store full file path.", "line_range": [51, 90], "parameters": ["self", "json_path", "artifact_id", "summary", "tags"], "decorators": []}, {"name": "get_metadata", "docstring": "Retrieve metadata by artifact_id.", "line_range": [92, 108], "parameters": ["self", "artifact_id"], "decorators": []}, {"name": "get_full_json", "docstring": "Load full JSON by artifact_id.", "line_range": [110, 126], "parameters": ["self", "artifact_id"], "decorators": []}, {"name": "close", "docstring": "Close database connection.", "line_range": [128, 130], "parameters": ["self"], "decorators": []}], "classes": [{"name": "JSONCache", "docstring": "", "line_range": [20, 130], "methods": [{"name": "__init__", "docstring": "Initialize SQLite cache for JSON files.", "line_range": [21, 25], "parameters": ["self", "db_path"]}, {"name": "create_tables", "docstring": "Create tables for metadata and file paths.", "line_range": [27, 49], "parameters": ["self"]}, {"name": "cache_json", "docstring": "Cache JSON metadata and store full file path.", "line_range": [51, 90], "parameters": ["self", "json_path", "artifact_id", "summary", "tags"]}, {"name": "get_metadata", "docstring": "Retrieve metadata by artifact_id.", "line_range": [92, 108], "parameters": ["self", "artifact_id"]}, {"name": "get_full_json", "docstring": "Load full JSON by artifact_id.", "line_range": [110, 126], "parameters": ["self", "artifact_id"]}, {"name": "close", "docstring": "Close database connection.", "line_range": [128, 130], "parameters": ["self"]}], "bases": []}], "callgraph": {"__init__": ["self.create_tables", "sqlite3.connect"], "create_tables": [], "cache_json": ["logging.info", "hashlib.sha256", "json_file.exists", "json.dumps", "logging.error", "content.encode", "Path", "open", "str", "f.read"], "get_metadata": ["json.loads", "cursor.fetchone"], "get_full_json": ["logging.error", "cursor.fetchone", "json.load", "open"], "close": []}, "dependencies": ["Any", "Dict", "List", "Optional", "Path", "hashlib", "json", "logging", "pathlib", "sqlite3", "typing"], "hash": "d4439792ecb8b18d2fb3eac280ee2e7e338722a019a5fbbceee3128a9985ef09"}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.self_run", "path": "backup_before_separation_20250529_152219/src/llmstruct/self_run.py", "category": "core", "module_doc": "", "functions": [{"name": "filter_struct", "docstring": "Filter struct.json or init.json based on prompt keywords. Supports dict or list as root.", "line_range": [20, 71], "parameters": ["struct", "prompt"], "decorators": []}, {"name": "attach_to_llm_request", "docstring": "Attach filtered JSON to LLM prompt, using cache if available.", "line_range": [74, 114], "parameters": ["context_path", "prompt", "cache"], "decorators": []}], "classes": [], "callgraph": {"filter_struct": ["any", "item.get", "isinstance", "module.get", "prompt.lower", "struct.get", "str", "filter_json"], "attach_to_llm_request": ["logging.info", "cache.get_full_json", "cache.get_metadata", "json.dumps", "select_json", "logging.error", "context_file.exists", "Path", "cache.cache_json", "filter_struct", "prompt.lower", "filter_json"]}, "dependencies": ["Any", "JSONCache", "Optional", "Path", "cache", "filter_json", "json", "json_selector", "logging", "pathlib", "select_json", "typing"], "hash": "f9cee229500252c3716ea8ed897cff7cc40e9af1f650b56b75960cf8660cb638"}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.cursor_ai_bridge", "path": "backup_before_separation_20250529_152219/src/llmstruct/cursor_ai_bridge.py", "category": "core", "module_doc": "Cursor AI Bridge - API Layer for AI Assistant Integration\nProvides CLI and HTTP endpoints so Cursor AI can use WorkflowOrchestrator", "functions": [{"name": "main", "docstring": "CLI interface for Cursor AI Bridge.", "line_range": [350, 401], "parameters": [], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [29, 32], "parameters": ["self", "project_root"], "decorators": []}, {"name": "ai_get_context", "docstring": "Get AI-optimized context for current development state.", "line_range": [34, 67], "parameters": ["self", "query_type", "file_path"], "decorators": []}, {"name": "ai_analyze_task", "docstring": "Analyze a task and provide AI-optimized guidance.", "line_range": [69, 93], "parameters": ["self", "task_description"], "decorators": []}, {"name": "ai_create_task", "docstring": "Create a task through AI interface.", "line_range": [95, 114], "parameters": ["self", "title", "description", "priority"], "decorators": []}, {"name": "ai_get_onboarding_guide", "docstring": "Get comprehensive AI onboarding guide.", "line_range": [116, 145], "parameters": ["self"], "decorators": []}, {"name": "ai_check_duplicates", "docstring": "Check for code duplicates with AI-friendly output.", "line_range": [147, 171], "parameters": ["self", "threshold"], "decorators": []}, {"name": "ai_suggest", "docstring": "Get AI suggestions based on context.", "line_range": [173, 199], "parameters": ["self", "context"], "decorators": []}, {"name": "_estimate_task_complexity", "docstring": "Estimate task complexity based on codebase analysis.", "line_range": [201, 215], "parameters": ["self", "task", "struct_analysis"], "decorators": []}, {"name": "_suggest_approach", "docstring": "Suggest approach based on task and codebase state.", "line_range": [217, 234], "parameters": ["self", "task", "struct_analysis"], "decorators": []}, {"name": "_find_relevant_modules", "docstring": "Find modules relevant to the task.", "line_range": [236, 248], "parameters": ["self", "task", "struct_analysis"], "decorators": []}, {"name": "_check_potential_duplicates", "docstring": "Check if task might create duplicates.", "line_range": [250, 253], "parameters": ["self", "task", "struct_analysis"], "decorators": []}, {"name": "_recommend_ai_for_task", "docstring": "Recommend which AI to use for the task.", "line_range": [255, 264], "parameters": ["self", "task"], "decorators": []}, {"name": "_generate_workflow_steps", "docstring": "Generate workflow steps for the task.", "line_range": [266, 276], "parameters": ["self", "task"], "decorators": []}, {"name": "_determine_context_requirements", "docstring": "Determine what context is needed for the task.", "line_range": [278, 290], "parameters": ["self", "task"], "decorators": []}, {"name": "_get_workflow_suggestions", "docstring": "Get workflow suggestions based on context.", "line_range": [292, 299], "parameters": ["self", "context"], "decorators": []}, {"name": "_get_available_ai_commands", "docstring": "Get available AI commands.", "line_range": [301, 310], "parameters": ["self"], "decorators": []}, {"name": "_identify_high_priority_duplicates", "docstring": "Identify high-priority duplicates for refactoring.", "line_range": [312, 315], "parameters": ["self", "analysis"], "decorators": []}, {"name": "_generate_refactoring_suggestions", "docstring": "Generate refactoring suggestions.", "line_range": [317, 323], "parameters": ["self", "analysis"], "decorators": []}, {"name": "_classify_task_type", "docstring": "Classify task type for AI delegation.", "line_range": [325, 338], "parameters": ["self", "context"], "decorators": []}, {"name": "_generate_next_steps", "docstring": "Generate next steps based on context.", "line_range": [340, 347], "parameters": ["self", "context"], "decorators": []}], "classes": [{"name": "CursorAIBridge", "docstring": "Bridge that allows Cursor AI assistant to use WorkflowOrchestrator\nthrough CLI commands and structured JSON responses.", "line_range": [23, 347], "methods": [{"name": "__init__", "docstring": "", "line_range": [29, 32], "parameters": ["self", "project_root"]}, {"name": "ai_get_context", "docstring": "Get AI-optimized context for current development state.", "line_range": [34, 67], "parameters": ["self", "query_type", "file_path"]}, {"name": "ai_analyze_task", "docstring": "Analyze a task and provide AI-optimized guidance.", "line_range": [69, 93], "parameters": ["self", "task_description"]}, {"name": "ai_create_task", "docstring": "Create a task through AI interface.", "line_range": [95, 114], "parameters": ["self", "title", "description", "priority"]}, {"name": "ai_get_onboarding_guide", "docstring": "Get comprehensive AI onboarding guide.", "line_range": [116, 145], "parameters": ["self"]}, {"name": "ai_check_duplicates", "docstring": "Check for code duplicates with AI-friendly output.", "line_range": [147, 171], "parameters": ["self", "threshold"]}, {"name": "ai_suggest", "docstring": "Get AI suggestions based on context.", "line_range": [173, 199], "parameters": ["self", "context"]}, {"name": "_estimate_task_complexity", "docstring": "Estimate task complexity based on codebase analysis.", "line_range": [201, 215], "parameters": ["self", "task", "struct_analysis"]}, {"name": "_suggest_approach", "docstring": "Suggest approach based on task and codebase state.", "line_range": [217, 234], "parameters": ["self", "task", "struct_analysis"]}, {"name": "_find_relevant_modules", "docstring": "Find modules relevant to the task.", "line_range": [236, 248], "parameters": ["self", "task", "struct_analysis"]}, {"name": "_check_potential_duplicates", "docstring": "Check if task might create duplicates.", "line_range": [250, 253], "parameters": ["self", "task", "struct_analysis"]}, {"name": "_recommend_ai_for_task", "docstring": "Recommend which AI to use for the task.", "line_range": [255, 264], "parameters": ["self", "task"]}, {"name": "_generate_workflow_steps", "docstring": "Generate workflow steps for the task.", "line_range": [266, 276], "parameters": ["self", "task"]}, {"name": "_determine_context_requirements", "docstring": "Determine what context is needed for the task.", "line_range": [278, 290], "parameters": ["self", "task"]}, {"name": "_get_workflow_suggestions", "docstring": "Get workflow suggestions based on context.", "line_range": [292, 299], "parameters": ["self", "context"]}, {"name": "_get_available_ai_commands", "docstring": "Get available AI commands.", "line_range": [301, 310], "parameters": ["self"]}, {"name": "_identify_high_priority_duplicates", "docstring": "Identify high-priority duplicates for refactoring.", "line_range": [312, 315], "parameters": ["self", "analysis"]}, {"name": "_generate_refactoring_suggestions", "docstring": "Generate refactoring suggestions.", "line_range": [317, 323], "parameters": ["self", "analysis"]}, {"name": "_classify_task_type", "docstring": "Classify task type for AI delegation.", "line_range": [325, 338], "parameters": ["self", "context"]}, {"name": "_generate_next_steps", "docstring": "Generate next steps based on context.", "line_range": [340, 347], "parameters": ["self", "context"]}], "bases": []}], "callgraph": {"__init__": ["CursorIntegrationManager", "Path", "WorkflowOrchestrator", "str"], "ai_get_context": ["self._get_workflow_suggestions", "datetime.utcnow", "context.get", "len", "self._get_available_ai_commands", "str", "cursor_context.get"], "ai_analyze_task": ["self._determine_context_requirements", "context.get", "self._suggest_approach", "self._check_potential_duplicates", "self._recommend_ai_for_task", "self._estimate_task_complexity", "self._generate_workflow_steps", "str", "self._find_relevant_modules"], "ai_create_task": ["self.ai_analyze_task", "str", "datetime.utcnow"], "ai_get_onboarding_guide": ["str"], "ai_check_duplicates": ["analysis.get", "self._generate_refactoring_suggestions", "self._identify_high_priority_duplicates", "str"], "ai_suggest": ["self._classify_task_type", "self._get_workflow_suggestions", "self._generate_next_steps", "delegation.get", "str"], "_estimate_task_complexity": ["complexity_keywords.items", "task.lower", "any"], "_suggest_approach": ["task.lower", "approaches.append"], "_find_relevant_modules": ["struct_analysis.get", "relevant.append", "any", "task.lower", "module.get"], "_check_potential_duplicates": [], "_recommend_ai_for_task": ["task.lower", "any"], "_generate_workflow_steps": [], "_determine_context_requirements": ["task.lower", "requirements.append"], "_get_workflow_suggestions": [], "_get_available_ai_commands": [], "_identify_high_priority_duplicates": [], "_generate_refactoring_suggestions": [], "_classify_task_type": ["any", "context.lower"], "_generate_next_steps": [], "main": ["bridge.ai_analyze_task", "parser.add_argument", "bridge.ai_create_task", "bridge.ai_onboarding_guide", "print", "argparse.ArgumentParser", "json.dumps", "CursorAIBridge", "bridge.ai_suggest", "bridge.ai_check_duplicates", "bridge.ai_get_context", "parser.parse_args"]}, "dependencies": ["Any", "CursorIntegrationManager", "Dict", "List", "Optional", "Path", "SystemCapabilityDiscovery", "WorkflowOrchestrator", "ai_self_awareness", "argparse", "cursor_integration", "datetime", "json", "logging", "pathlib", "sys", "typing", "workflow_orchestrator"], "hash": "b2a2b9e1cf581e85e4467559c56258f4a0d6a5003c11ca4143773a732cb33468"}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.transpiler", "path": "backup_before_separation_20250529_152219/src/llmstruct/transpiler.py", "category": "core", "module_doc": "AI-Powered Universal Transpiler\nConverts entire codebases from one language to another using LLM analysis", "functions": [{"name": "main", "docstring": "CLI interface for AI transpiler", "line_range": [475, 527], "parameters": [], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [142, 149], "parameters": ["self", "config"], "decorators": []}, {"name": "analyze_source_project", "docstring": "Analyze source project structure", "line_range": [151, 155], "parameters": ["self", "project_path"], "decorators": []}, {"name": "create_target_project_structure", "docstring": "Create target project directory structure", "line_range": [157, 221], "parameters": ["self", "analysis"], "decorators": []}, {"name": "_generate_structure_info", "docstring": "Generate structure information for README", "line_range": [223, 253], "parameters": ["self", "analysis"], "decorators": []}, {"name": "transpile_module", "docstring": "Transpile a single module using AI", "line_range": [255, 318], "parameters": ["self", "module", "context"], "decorators": []}, {"name": "_format_functions", "docstring": "Format functions for prompt", "line_range": [320, 333], "parameters": ["self", "functions"], "decorators": []}, {"name": "_format_classes", "docstring": "Format classes for prompt", "line_range": [335, 348], "parameters": ["self", "classes"], "decorators": []}, {"name": "determine_target_path", "docstring": "Determine target file path for transpiled module", "line_range": [350, 388], "parameters": ["self", "module"], "decorators": []}, {"name": "transpile_project", "docstring": "Transpile entire project", "line_range": [390, 472], "parameters": ["self", "project_path"], "decorators": []}], "classes": [{"name": "TranspilerConfig", "docstring": "Configuration for AI transpiler", "line_range": [24, 35], "methods": [], "bases": []}, {"name": "LanguageTemplates", "docstring": "Templates and patterns for different target languages", "line_range": [38, 136], "methods": [], "bases": []}, {"name": "AITranspiler", "docstring": "AI-powered code transpiler", "line_range": [139, 472], "methods": [{"name": "__init__", "docstring": "", "line_range": [142, 149], "parameters": ["self", "config"]}, {"name": "analyze_source_project", "docstring": "Analyze source project structure", "line_range": [151, 155], "parameters": ["self", "project_path"]}, {"name": "create_target_project_structure", "docstring": "Create target project directory structure", "line_range": [157, 221], "parameters": ["self", "analysis"]}, {"name": "_generate_structure_info", "docstring": "Generate structure information for README", "line_range": [223, 253], "parameters": ["self", "analysis"]}, {"name": "transpile_module", "docstring": "Transpile a single module using AI", "line_range": [255, 318], "parameters": ["self", "module", "context"]}, {"name": "_format_functions", "docstring": "Format functions for prompt", "line_range": [320, 333], "parameters": ["self", "functions"]}, {"name": "_format_classes", "docstring": "Format classes for prompt", "line_range": [335, 348], "parameters": ["self", "classes"]}, {"name": "determine_target_path", "docstring": "Determine target file path for transpiled module", "line_range": [350, 388], "parameters": ["self", "module"]}, {"name": "transpile_project", "docstring": "Transpile entire project", "line_range": [390, 472], "parameters": ["self", "project_path"]}], "bases": []}], "callgraph": {"__init__": ["ConverterConfig", "UniversalConverter", "LLMClient"], "analyze_source_project": ["logger.info"], "create_target_project_structure": ["shutil.rmtree", "logger.warning", "self._generate_structure_info", "Path", "output_path.exists", "output_path.mkdir", "src_dir.mkdir"], "_generate_structure_info": ["len", "categories.items", "stats.get", "module.get", "analysis.get", "category.title"], "transpile_module": ["response.strip", "target_lang.upper", "len", "self._format_classes", "self._format_functions", "target_lang.lower", "logger.error", "module.get", "ctx_module.get", "str"], "_format_functions": ["len", "func.get"], "_format_classes": ["cls.get", "len"], "determine_target_path": ["len", "module_id.split", "Path", "module.get"], "transpile_project": ["report_path.write_text", "self.create_target_project_structure", "logger.info", "self.analyze_source_project", "len", "json.dumps", "full_target_path.write_text", "self.determine_target_path", "Path", "self.transpile_module", "errors.append", "analysis.get", "str", "range", "logger.error", "transpiled_files.append"], "main": ["TranspilerConfig", "print", "parser.add_argument", "AITranspiler", "argparse.ArgumentParser", "len", "exit", "traceback.print_exc", "logger.error", "parser.parse_args", "Language", "transpiler.transpile_project"]}, "dependencies": ["Any", "ConverterConfig", "Dict", "Enum", "LLMClient", "Language", "List", "Optional", "Path", "Tuple", "UniversalConverter", "argparse", "dataclass", "dataclasses", "enum", "json", "llm_client", "logging", "os", "parsers.universal_converter", "pathlib", "shutil", "traceback", "typing"], "hash": "5e9ee72b1514522197462f0369930005bfc88b8d4280c814f8e296668b4e7c38"}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.json_selector", "path": "backup_before_separation_20250529_152219/src/llmstruct/json_selector.py", "category": "core", "module_doc": "", "functions": [{"name": "filter_json", "docstring": "Filter JSON data by key-value pair and select fields.", "line_range": [20, 46], "parameters": ["data", "filter_key", "filter_value", "fields"], "decorators": []}, {"name": "select_json", "docstring": "Load and filter JSON file, optionally parsing partially.", "line_range": [49, 116], "parameters": ["json_path", "filter_key", "filter_value", "fields", "partial"], "decorators": []}], "classes": [], "callgraph": {"filter_json": ["isinstance", "item.get", "data.get", "filtered.append"], "select_json": ["current_item.get", "json_file.exists", "prefix.startswith", "json.load", "logging.error", "Path", "filtered.append", "ijson.parse", "open", "path.append", "f.seek", "filter_json"]}, "dependencies": ["Any", "Dict", "List", "Optional", "Path", "argparse", "ijson", "json", "logging", "pathlib", "typing"], "hash": "8d3216b4eff05bdde8725caedab745c57ef0c2d52cd84b07f7cabc7b15256d2c"}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.cli", "path": "backup_before_separation_20250529_152219/src/llmstruct/cli.py", "category": "core", "module_doc": "LLMStruct CLI - Main entry point for the command-line interface.", "functions": [{"name": "load_gitignore", "docstring": "Load and normalize patterns from .gitignore.", "line_range": [43, 57], "parameters": ["root_dir"], "decorators": []}, {"name": "load_config", "docstring": "Load settings from llmstruct.toml or return empty dict.", "line_range": [60, 69], "parameters": ["root_dir"], "decorators": []}, {"name": "read_file_content", "docstring": "Read content of a file if it exists and is a text file.", "line_range": [72, 81], "parameters": ["file_path"], "decorators": []}, {"name": "write_to_file", "docstring": "Write content to a file in base_dir (default ./tmp) and return the path.", "line_range": [84, 104], "parameters": ["content", "filename", "base_dir"], "decorators": []}, {"name": "parse_files_from_response", "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).", "line_range": [107, 114], "parameters": ["response"], "decorators": []}, {"name": "interactive", "docstring": "Run interactive CLI with modular structure if available, fallback to legacy.", "line_range": [117, 127], "parameters": ["args"], "decorators": []}, {"name": "interactive_modular", "docstring": "Run interactive CLI with modular structure.", "line_range": [130, 144], "parameters": ["args"], "decorators": []}, {"name": "interactive_legacy", "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.", "line_range": [147, 503], "parameters": ["args"], "decorators": []}, {"name": "process_cli_queue_enhanced", "docstring": "Enhanced queue processing with workflow support, performance tracking, and safety validation.", "line_range": [506, 705], "parameters": ["root_dir", "context_path", "args", "cache", "client"], "decorators": []}, {"name": "parse", "docstring": "Parse codebase and generate struct.json.", "line_range": [708, 759], "parameters": ["args"], "decorators": []}, {"name": "query", "docstring": "Query LLMs with prompt and context.", "line_range": [762, 818], "parameters": ["args"], "decorators": []}, {"name": "context", "docstring": "Generate context.json from input JSON.", "line_range": [821, 823], "parameters": ["args"], "decorators": []}, {"name": "dogfood", "docstring": "Run dogfooding analysis.", "line_range": [826, 828], "parameters": ["args"], "decorators": []}, {"name": "review", "docstring": "Review codebase with LLM.", "line_range": [831, 833], "parameters": ["args"], "decorators": []}, {"name": "copilot", "docstring": "Copilot integration and context management.", "line_range": [836, 954], "parameters": ["args"], "decorators": []}, {"name": "audit", "docstring": "Audit project structure and generate reports.", "line_range": [957, 975], "parameters": ["args"], "decorators": []}, {"name": "analyze_duplicates", "docstring": "Analyze function duplication using struct.json deep analysis.", "line_range": [978, 1081], "parameters": ["args"], "decorators": []}, {"name": "main", "docstring": "Command-line interface for LLMstruct.", "line_range": [1084, 1314], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"load_gitignore": ["line.startswith", "gitignore_path.open", "gitignore_path.exists", "logging.error", "Path", "line.strip"], "load_config": ["config_path.open", "logging.error", "Path", "toml.load", "config_path.exists"], "read_file_content": ["path.open", "path.is_file", "logging.error", "Path", "f.read"], "write_to_file": ["logging.warning", "logging.info", "base_path.mkdir", "re.sub", "file_path.exists", "Path", "logging.error", "f.write", "file_path.open", "str"], "parse_files_from_response": ["filename.strip", "files.append", "re.findall", "content.strip"], "interactive": ["interactive_modular", "interactive_legacy", "logging.warning"], "interactive_modular": ["create_cli_core", "hasattr", "logging.info", "cli_core.run_interactive_mode"], "interactive_legacy": ["logging.warning", "print", "cache.close", "os.listdir", "re.match", "json.dumps", "process_cli_queue_enhanced", "time.ctime", "logging.error", "Path", "LLMClient", "cache.clear", "cache.get_stats", "sorted", "load_gitignore", "len", "input", "os.makedirs", "open", "args_str.strip", "json.dump", "workflow.get", "events_data.append", "client.query", "int", "cache.list_keys", "parse", "get_folder_structure", "JSONCache", "user_input.startswith", "time.time", "m.group", "os.stat", "struct_data.get", "write_to_file", "attach_to_llm_request", "user_input.lower", "read_file_content", "isinstance", "subprocess.run", "json.load"], "process_cli_queue_enhanced": ["logging.info", "workflow.get", "print", "write_to_file", "load_gitignore", "attach_to_llm_request", "len", "client.query", "enumerate", "logging.error", "item.get", "isinstance", "get_folder_structure", "options.get", "open", "read_file_content", "time.time", "json.load"], "parse": ["config.get", "logging.warning", "json.dump", "logging.info", "cache.close", "load_gitignore", "load_config", "cache.cache_json", "logging.error", "Path", "parsing_config.get", "cli_config.get", "JSONCache", "generate_json"], "query": ["json.dump", "logging.info", "logging.warning", "hasattr", "create_context_orchestrator", "cache.close", "client.query", "client.query_with_context", "logging.error", "Path", "JSONCache", "orchestrator.get_context_for_scenario", "LLMClient"], "context": ["logging.warning"], "dogfood": ["logging.warning"], "review": ["logging.warning"], "copilot": ["print", "shutil.copy", "getattr", "logging.error", "Path", "initialize_copilot", "manager.refresh_all_contexts", "f.write", "config_path.exists", "manager.export_context", "template_path.exists", "open", "manager.get_context_status", "layers.split", "manager.load_context_layer", "manager.close", "logging.info", "hasattr", "manager.validate_change", "manager.unload_context_layer", "smart_suggest", "enumerate"], "audit": ["print", "hasattr", "file_path.exists", "Path", "analyze_duplicates"], "analyze_duplicates": ["json.dump", "print", "hasattr", "sorted", "json.dumps", "len", "r.get", "orchestrator.analyze_codebase_for_duplicates", "getattr", "enumerate", "rec.get", "duplicates.items", "duplication_data.get", "filtered_duplicates.items", "traceback.print_exc", "open", "analysis.get", "WorkflowOrchestrator"], "main": ["interactive_parser.add_argument", "interactive", "audit_parser.add_argument", "parser.parse_args", "dogfood_parser.add_argument", "query_parser.add_argument", "copilot_parser.add_argument", "review", "context_parser.add_argument", "audit", "asyncio.run", "analyze_duplicates", "parse", "duplicates_parser.add_argument", "parse_parser.add_argument", "dogfood", "subparsers.add_parser", "context", "argparse.ArgumentParser", "copilot", "review_parser.add_argument", "query", "parser.add_subparsers"]}, "dependencies": ["JSONCache", "LLMClient", "List", "Optional", "Path", "WorkflowOrchestrator", "argparse", "asyncio", "attach_to_llm_request", "cli_core", "context_orchestrator", "copilot", "create_cli_core", "create_context_orchestrator", "generate_json", "get_folder_structure", "initialize_copilot", "json", "llmstruct", "llmstruct.cache", "llmstruct.generators.json_generator", "llmstruct.self_run", "logging", "os", "pathlib", "re", "shutil", "smart_suggest", "subprocess", "sys", "time", "toml", "traceback", "typing", "workflow_orchestrator"], "hash": "3c17b835b8461314aacbb27439fa1f5848af9e58612f45df4a50c9562c2939cb"}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.cursor_integration", "path": "backup_before_separation_20250529_152219/src/llmstruct/cursor_integration.py", "category": "core", "module_doc": "Cursor IDE Integration Module\nProvides seamless integration between llmstruct AI capabilities and Cursor IDE.", "functions": [{"name": "create_cursor_integration", "docstring": "Create a Cursor integration manager for the project.", "line_range": [435, 437], "parameters": ["project_root"], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [31, 35], "parameters": ["self", "project_root"], "decorators": []}, {"name": "get_cursor_optimized_context", "docstring": "Provide Cursor with perfectly sized context based on query analysis.", "line_range": [37, 71], "parameters": ["self", "query_type", "file_context"], "decorators": []}, {"name": "_load_cursor_config", "docstring": "Load Cursor-specific configuration.", "line_range": [73, 83], "parameters": ["self"], "decorators": []}, {"name": "_apply_privacy_filter", "docstring": "Apply privacy filtering based on level.", "line_range": [85, 101], "parameters": ["self", "context_data", "privacy_level"], "decorators": []}, {"name": "_filter_sensitive_dict", "docstring": "Filter sensitive information from dictionary.", "line_range": [103, 115], "parameters": ["self", "data"], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [121, 124], "parameters": ["self", "project_root"], "decorators": []}, {"name": "delegate_to_optimal_ai", "docstring": "Route tasks to best AI model based on preferences.", "line_range": [126, 160], "parameters": ["self", "task_type", "context"], "decorators": []}, {"name": "_calculate_delegation_confidence", "docstring": "Calculate confidence in AI delegation decision.", "line_range": [162, 175], "parameters": ["self", "task_type", "selected_ai"], "decorators": []}, {"name": "_load_cursor_config", "docstring": "Load Cursor configuration.", "line_range": [177, 187], "parameters": ["self"], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [193, 195], "parameters": ["self", "project_root"], "decorators": []}, {"name": "get_goal_aligned_suggestions", "docstring": "Provide suggestions aligned with business goals.", "line_range": [197, 242], "parameters": ["self", "technical_context"], "decorators": []}, {"name": "get_priority_guidance", "docstring": "Provide priority guidance based on business objectives.", "line_range": [244, 270], "parameters": ["self", "feature_options"], "decorators": []}, {"name": "_calculate_feature_score", "docstring": "Calculate priority score for a feature.", "line_range": [272, 292], "parameters": ["self", "feature", "prioritization"], "decorators": []}, {"name": "_get_scoring_reasoning", "docstring": "Get reasoning for feature scoring.", "line_range": [294, 307], "parameters": ["self", "feature", "prioritization"], "decorators": []}, {"name": "_load_personal_bridge", "docstring": "Load personal planning bridge data.", "line_range": [309, 319], "parameters": ["self"], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [325, 328], "parameters": ["self", "project_root"], "decorators": []}, {"name": "start_session", "docstring": "Start a new Cursor session.", "line_range": [330, 349], "parameters": ["self", "session_id", "user_preferences"], "decorators": []}, {"name": "save_session_context", "docstring": "Save important context for next session.", "line_range": [351, 377], "parameters": ["self", "session_data"], "decorators": []}, {"name": "_load_session_context", "docstring": "Load context from previous sessions.", "line_range": [379, 388], "parameters": ["self"], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [394, 400], "parameters": ["self", "project_root"], "decorators": []}, {"name": "get_comprehensive_cursor_response", "docstring": "Get comprehensive response optimized for Cursor.", "line_range": [402, 431], "parameters": ["self", "query", "file_context"], "decorators": []}], "classes": [{"name": "CursorSession", "docstring": "Represents a Cursor IDE session with context and preferences.", "line_range": [19, 25], "methods": [], "bases": []}, {"name": "CursorContextManager", "docstring": "Manages context optimization specifically for Cursor interactions.", "line_range": [28, 115], "methods": [{"name": "__init__", "docstring": "", "line_range": [31, 35], "parameters": ["self", "project_root"]}, {"name": "get_cursor_optimized_context", "docstring": "Provide Cursor with perfectly sized context based on query analysis.", "line_range": [37, 71], "parameters": ["self", "query_type", "file_context"]}, {"name": "_load_cursor_config", "docstring": "Load Cursor-specific configuration.", "line_range": [73, 83], "parameters": ["self"]}, {"name": "_apply_privacy_filter", "docstring": "Apply privacy filtering based on level.", "line_range": [85, 101], "parameters": ["self", "context_data", "privacy_level"]}, {"name": "_filter_sensitive_dict", "docstring": "Filter sensitive information from dictionary.", "line_range": [103, 115], "parameters": ["self", "data"]}], "bases": []}, {"name": "CursorMultiAIOrchestrator", "docstring": "Coordinates different AI models through Cursor interface.", "line_range": [118, 187], "methods": [{"name": "__init__", "docstring": "", "line_range": [121, 124], "parameters": ["self", "project_root"]}, {"name": "delegate_to_optimal_ai", "docstring": "Route tasks to best AI model based on preferences.", "line_range": [126, 160], "parameters": ["self", "task_type", "context"]}, {"name": "_calculate_delegation_confidence", "docstring": "Calculate confidence in AI delegation decision.", "line_range": [162, 175], "parameters": ["self", "task_type", "selected_ai"]}, {"name": "_load_cursor_config", "docstring": "Load Cursor configuration.", "line_range": [177, 187], "parameters": ["self"]}], "bases": []}, {"name": "PersonalPlanningCursorBridge", "docstring": "Bridge between personal planning and Cursor without exposing sensitive data.", "line_range": [190, 319], "methods": [{"name": "__init__", "docstring": "", "line_range": [193, 195], "parameters": ["self", "project_root"]}, {"name": "get_goal_aligned_suggestions", "docstring": "Provide suggestions aligned with business goals.", "line_range": [197, 242], "parameters": ["self", "technical_context"]}, {"name": "get_priority_guidance", "docstring": "Provide priority guidance based on business objectives.", "line_range": [244, 270], "parameters": ["self", "feature_options"]}, {"name": "_calculate_feature_score", "docstring": "Calculate priority score for a feature.", "line_range": [272, 292], "parameters": ["self", "feature", "prioritization"]}, {"name": "_get_scoring_reasoning", "docstring": "Get reasoning for feature scoring.", "line_range": [294, 307], "parameters": ["self", "feature", "prioritization"]}, {"name": "_load_personal_bridge", "docstring": "Load personal planning bridge data.", "line_range": [309, 319], "parameters": ["self"]}], "bases": []}, {"name": "CursorSessionManager", "docstring": "Maintains context across Cursor sessions for better continuity.", "line_range": [322, 388], "methods": [{"name": "__init__", "docstring": "", "line_range": [325, 328], "parameters": ["self", "project_root"]}, {"name": "start_session", "docstring": "Start a new Cursor session.", "line_range": [330, 349], "parameters": ["self", "session_id", "user_preferences"]}, {"name": "save_session_context", "docstring": "Save important context for next session.", "line_range": [351, 377], "parameters": ["self", "session_data"]}, {"name": "_load_session_context", "docstring": "Load context from previous sessions.", "line_range": [379, 388], "parameters": ["self"]}], "bases": []}, {"name": "CursorIntegrationManager", "docstring": "Main integration manager that coordinates all Cursor-specific features.", "line_range": [391, 431], "methods": [{"name": "__init__", "docstring": "", "line_range": [394, 400], "parameters": ["self", "project_root"]}, {"name": "get_comprehensive_cursor_response", "docstring": "Get comprehensive response optimized for Cursor.", "line_range": [402, 431], "parameters": ["self", "query", "file_context"]}], "bases": []}], "callgraph": {"__init__": ["CursorMultiAIOrchestrator", "CursorSessionManager", "PersonalPlanningCursorBridge", "SystemCapabilityDiscovery", "CursorContextManager"], "get_cursor_optimized_context": ["optimal_config.get", "context_rules.get", "self._apply_privacy_filter", "file_path.exists", "logger.error", "open", "json.load", "str"], "_load_cursor_config": ["Path", "logger.error", "open", "json.load", "config_path.exists"], "_apply_privacy_filter": ["isinstance", "self._filter_sensitive_dict", "context_data.items"], "_filter_sensitive_dict": ["data.items", "any", "isinstance", "self._filter_sensitive_dict", "key.lower"], "delegate_to_optimal_ai": ["Path", "self._calculate_delegation_confidence", "logger.error", "delegation_rules.get", "str"], "_calculate_delegation_confidence": ["delegation_rules.get"], "get_goal_aligned_suggestions": ["logger.error", "suggestions.extend", "any", "technical_context.lower"], "get_priority_guidance": ["decision_guidance.get", "scored_features.append", "scored_features.sort", "self._calculate_feature_score", "logger.error", "self._get_scoring_reasoning", "str"], "_calculate_feature_score": ["feature.lower", "float", "any", "prioritization.get"], "_get_scoring_reasoning": ["feature.lower", "reasons.append", "any"], "_load_personal_bridge": ["bridge_path.exists", "json.load", "logger.error", "open"], "start_session": ["CursorSession", "self._load_session_context", "logger.error", "previous_context.get"], "save_session_context": ["json.dump", "session_data.get", "Path", "logger.error", "open", "str"], "_load_session_context": ["json.load", "logger.error", "open"], "get_comprehensive_cursor_response": ["str", "logger.error"], "create_cursor_integration": ["CursorIntegrationManager"]}, "dependencies": ["Any", "Dict", "List", "Optional", "Path", "SystemCapabilityDiscovery", "create_context_orchestrator", "dataclass", "dataclasses", "json", "llmstruct.ai_self_awareness", "llmstruct.context_orchestrator", "logging", "pathlib", "typing"], "hash": "9dc4a1f079ae81fc45f0e314da75a46b3a6f08b14e47b41542f341da097392d3"}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.cli_core", "path": "backup_before_separation_20250529_152219/src/llmstruct/cli_core.py", "category": "core", "module_doc": "Core CLI functionality and main loop.", "functions": [{"name": "create_cli_core", "docstring": "Factory function to create CLI core instance.", "line_range": [110, 112], "parameters": ["root_dir"], "decorators": []}, {"name": "__init__", "docstring": "Initialize CLI core with root directory.", "line_range": [28, 35], "parameters": ["self", "root_dir"], "decorators": []}, {"name": "setup_cache", "docstring": "Initialize cache if enabled in config.", "line_range": [37, 53], "parameters": ["self"], "decorators": []}, {"name": "setup_copilot", "docstring": "Initialize Copilot integration if enabled.", "line_range": [55, 63], "parameters": ["self"], "decorators": []}, {"name": "run_interactive_mode", "docstring": "Run the interactive CLI mode.", "line_range": [65, 97], "parameters": ["self"], "decorators": []}, {"name": "cleanup", "docstring": "Clean up resources.", "line_range": [99, 107], "parameters": ["self"], "decorators": []}], "classes": [{"name": "CLICore", "docstring": "Core CLI class handling main loop and coordination.", "line_range": [25, 107], "methods": [{"name": "__init__", "docstring": "Initialize CLI core with root directory.", "line_range": [28, 35], "parameters": ["self", "root_dir"]}, {"name": "setup_cache", "docstring": "Initialize cache if enabled in config.", "line_range": [37, 53], "parameters": ["self"]}, {"name": "setup_copilot", "docstring": "Initialize Copilot integration if enabled.", "line_range": [55, 63], "parameters": ["self"]}, {"name": "run_interactive_mode", "docstring": "Run the interactive CLI mode.", "line_range": [65, 97], "parameters": ["self"]}, {"name": "cleanup", "docstring": "Clean up resources.", "line_range": [99, 107], "parameters": ["self"]}], "bases": []}], "callgraph": {"__init__": ["CLIConfig", "CLIUtils", "CommandProcessor"], "setup_cache": ["cache_config.get", "logging.info", "logging.warning", "Path", "JSONCache", "cache_path.mkdir", "str"], "setup_copilot": ["logging.info", "logging.warning", "copilot_config.get", "initialize_copilot"], "run_interactive_mode": ["self.cleanup", "print", "input", "self.setup_cache", "logging.error", "user_input.lower", "user_input.startswith", "self.setup_copilot"], "cleanup": ["logging.info"], "create_cli_core": ["CLICore"]}, "dependencies": ["CLIConfig", "CLIUtils", "CommandProcessor", "CopilotContextManager", "JSONCache", "Optional", "Path", "cli_commands", "cli_config", "cli_utils", "copilot", "initialize_copilot", "llmstruct.cache", "logging", "pathlib", "typing"], "hash": "57a534c55c12bacfaf26ed4b4124fe97a3c2559253b5a62346e9c9f0368e5132"}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.workspace", "path": "backup_before_separation_20250529_152219/src/llmstruct/workspace.py", "category": "core", "module_doc": "Workspace State & Mode Management System\nEnhanced AI-Human Collaboration with Context Boundaries", "functions": [{"name": "create_workspace_manager", "docstring": "Factory function to create workspace manager", "line_range": [461, 463], "parameters": ["workspace_dir"], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [28, 36], "parameters": ["self", "workspace_dir"], "decorators": []}, {"name": "_load_or_create_state", "docstring": "Load existing workspace state or create default", "line_range": [38, 75], "parameters": ["self"], "decorators": []}, {"name": "_load_permission_templates", "docstring": "Load permission templates for different modes", "line_range": [77, 128], "parameters": ["self"], "decorators": []}, {"name": "set_mode", "docstring": "Set workspace mode(s) with smart combination logic.\n\nArgs:\n    modes: Single mode string \"[code]\" or list of modes [\"code\", \"debug\"]\n    session_id: Optional session identifier\n    \nReturns:\n    Dict with mode change result and applied permissions", "line_range": [130, 176], "parameters": ["self", "modes", "session_id"], "decorators": []}, {"name": "_parse_modes_from_string", "docstring": "Parse modes from string like '[code][debug]' to ['code', 'debug']", "line_range": [178, 182], "parameters": ["self", "mode_string"], "decorators": []}, {"name": "_combine_mode_permissions", "docstring": "Smart combination of mode permissions (Decision: C - Smart Combination)", "line_range": [184, 216], "parameters": ["self", "modes"], "decorators": []}, {"name": "_get_mode_combination_name", "docstring": "Get descriptive name for mode combination", "line_range": [218, 232], "parameters": ["self", "modes"], "decorators": []}, {"name": "get_current_state", "docstring": "Get current workspace state", "line_range": [234, 236], "parameters": ["self"], "decorators": []}, {"name": "check_permission", "docstring": "Check if operation is permitted under current mode.\n\nArgs:\n    operation: Operation type (e.g., \"write_file\", \"run_command\")\n    target: Optional target (file path, command, etc.)\n    \nReturns:\n    Dict with permission result and reasoning", "line_range": [238, 302], "parameters": ["self", "operation", "target"], "decorators": []}, {"name": "_get_required_capability", "docstring": "Map operations to required capabilities", "line_range": [304, 320], "parameters": ["self", "operation"], "decorators": []}, {"name": "_is_restricted_target", "docstring": "Check if target matches any file restrictions", "line_range": [322, 334], "parameters": ["self", "target"], "decorators": []}, {"name": "set_emergency_override", "docstring": "Grant emergency override (Hybrid B+C: Escalation + Time-boxing)\n\nArgs:\n    level: Override level (1=extend permissions, 2=filesystem, 3=system)\n    reason: Reason for override\n    duration_minutes: Override duration", "line_range": [336, 365], "parameters": ["self", "level", "reason", "duration_minutes"], "decorators": []}, {"name": "_check_emergency_override", "docstring": "Check if emergency override is active and not expired", "line_range": [367, 381], "parameters": ["self"], "decorators": []}, {"name": "integrate_strict_mode", "docstring": "Integration with existing strict mode system", "line_range": [383, 387], "parameters": ["self", "strict_tags"], "decorators": []}, {"name": "add_decision_workflow", "docstring": "Add decision to workflow tracking (for [decide] mode)", "line_range": [389, 396], "parameters": ["self", "decision_id", "decision_data"], "decorators": []}, {"name": "get_workspace_status", "docstring": "Get comprehensive workspace status for debugging and display", "line_range": [398, 420], "parameters": ["self"], "decorators": []}, {"name": "_get_override_time_remaining", "docstring": "Get formatted time remaining for emergency override", "line_range": [422, 437], "parameters": ["self"], "decorators": []}, {"name": "_save_state", "docstring": "Save current state to file", "line_range": [439, 442], "parameters": ["self"], "decorators": []}, {"name": "get_mode_status", "docstring": "Get formatted status string for CLI display", "line_range": [444, 458], "parameters": ["self"], "decorators": []}], "classes": [{"name": "WorkspaceStateManager", "docstring": "Core workspace state management with mode-based permissions and context boundaries.\n\nFeatures:\n- Multi-dimensional mode system ([code][debug], [discuss][meta])\n- Hybrid permission system (capabilities + file restrictions)\n- Smart mode combinations with context awareness\n- Emergency override protocols with time-boxing\n- Integration with existing strict mode system", "line_range": [16, 458], "methods": [{"name": "__init__", "docstring": "", "line_range": [28, 36], "parameters": ["self", "workspace_dir"]}, {"name": "_load_or_create_state", "docstring": "Load existing workspace state or create default", "line_range": [38, 75], "parameters": ["self"]}, {"name": "_load_permission_templates", "docstring": "Load permission templates for different modes", "line_range": [77, 128], "parameters": ["self"]}, {"name": "set_mode", "docstring": "Set workspace mode(s) with smart combination logic.\n\nArgs:\n    modes: Single mode string \"[code]\" or list of modes [\"code\", \"debug\"]\n    session_id: Optional session identifier\n    \nReturns:\n    Dict with mode change result and applied permissions", "line_range": [130, 176], "parameters": ["self", "modes", "session_id"]}, {"name": "_parse_modes_from_string", "docstring": "Parse modes from string like '[code][debug]' to ['code', 'debug']", "line_range": [178, 182], "parameters": ["self", "mode_string"]}, {"name": "_combine_mode_permissions", "docstring": "Smart combination of mode permissions (Decision: C - Smart Combination)", "line_range": [184, 216], "parameters": ["self", "modes"]}, {"name": "_get_mode_combination_name", "docstring": "Get descriptive name for mode combination", "line_range": [218, 232], "parameters": ["self", "modes"]}, {"name": "get_current_state", "docstring": "Get current workspace state", "line_range": [234, 236], "parameters": ["self"]}, {"name": "check_permission", "docstring": "Check if operation is permitted under current mode.\n\nArgs:\n    operation: Operation type (e.g., \"write_file\", \"run_command\")\n    target: Optional target (file path, command, etc.)\n    \nReturns:\n    Dict with permission result and reasoning", "line_range": [238, 302], "parameters": ["self", "operation", "target"]}, {"name": "_get_required_capability", "docstring": "Map operations to required capabilities", "line_range": [304, 320], "parameters": ["self", "operation"]}, {"name": "_is_restricted_target", "docstring": "Check if target matches any file restrictions", "line_range": [322, 334], "parameters": ["self", "target"]}, {"name": "set_emergency_override", "docstring": "Grant emergency override (Hybrid B+C: Escalation + Time-boxing)\n\nArgs:\n    level: Override level (1=extend permissions, 2=filesystem, 3=system)\n    reason: Reason for override\n    duration_minutes: Override duration", "line_range": [336, 365], "parameters": ["self", "level", "reason", "duration_minutes"]}, {"name": "_check_emergency_override", "docstring": "Check if emergency override is active and not expired", "line_range": [367, 381], "parameters": ["self"]}, {"name": "integrate_strict_mode", "docstring": "Integration with existing strict mode system", "line_range": [383, 387], "parameters": ["self", "strict_tags"]}, {"name": "add_decision_workflow", "docstring": "Add decision to workflow tracking (for [decide] mode)", "line_range": [389, 396], "parameters": ["self", "decision_id", "decision_data"]}, {"name": "get_workspace_status", "docstring": "Get comprehensive workspace status for debugging and display", "line_range": [398, 420], "parameters": ["self"]}, {"name": "_get_override_time_remaining", "docstring": "Get formatted time remaining for emergency override", "line_range": [422, 437], "parameters": ["self"]}, {"name": "_save_state", "docstring": "Save current state to file", "line_range": [439, 442], "parameters": ["self"]}, {"name": "get_mode_status", "docstring": "Get formatted status string for CLI display", "line_range": [444, 458], "parameters": ["self"]}], "bases": []}], "callgraph": {"__init__": ["self._load_or_create_state", "Path", "self._load_permission_templates"], "_load_or_create_state": ["self._save_state", "datetime.now", "json.load", "open"], "_load_permission_templates": [], "set_mode": ["datetime.now", "len", "combined_permissions.get", "self._save_state", "isinstance", "self._get_mode_combination_name", "self._parse_modes_from_string", "self._combine_mode_permissions"], "_parse_modes_from_string": ["re.findall"], "_combine_mode_permissions": ["template.get", "sorted", "set", "logger.info", "list"], "_get_mode_combination_name": ["combination_names.get", "sorted"], "get_current_state": [], "check_permission": ["self._get_required_capability", "self._check_emergency_override", "self._is_restricted_target", "permissions.get"], "_get_required_capability": ["operation.startswith", "capability_map.items"], "_is_restricted_target": ["fnmatch.fnmatch", "restriction.startswith", "target.startswith"], "set_emergency_override": ["timedelta", "expires_at.isoformat", "datetime.now", "self._save_state"], "_check_emergency_override": ["datetime.now", "override.get", "self._save_state", "datetime.fromisoformat"], "integrate_strict_mode": ["datetime.now", "self._save_state"], "add_decision_workflow": ["datetime.now", "self._save_state"], "get_workspace_status": ["self._get_mode_combination_name", "len", "override.get", "self._get_override_time_remaining"], "_get_override_time_remaining": ["datetime.fromisoformat", "datetime.now", "override.get", "int", "remaining.total_seconds"], "_save_state": ["json.dump", "open"], "get_mode_status": ["self._get_mode_combination_name", "override.get"], "create_workspace_manager": ["WorkspaceStateManager"]}, "dependencies": ["Any", "Dict", "List", "Optional", "Path", "Set", "Union", "datetime", "fnmatch", "json", "logging", "os", "pathlib", "re", "timedelta", "timezone", "typing"], "hash": "781995ee11b41c001f3ce9ac5be89cd99963beb044d8020550f54edb7993eee5"}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.parsers.__init__", "path": "backup_before_separation_20250529_152219/src/llmstruct/parsers/__init__.py", "category": "cli", "module_doc": "Language-specific parsers for extracting code structure data for LLMStruct JSON.", "functions": [], "classes": [], "callgraph": {}, "dependencies": ["JavaScriptParser", "javascript_parser"], "hash": "2f1fce5cf3e867869608b18a8ab1197f8a32add4fd35d4de75f891a9dad04b63"}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.parsers.javascript_parser", "path": "backup_before_separation_20250529_152219/src/llmstruct/parsers/javascript_parser.py", "category": "core", "module_doc": "", "functions": [{"name": "__init__", "docstring": "", "line_range": [9, 13], "parameters": ["self"], "decorators": []}, {"name": "file_hash", "docstring": "", "line_range": [15, 20], "parameters": ["self", "filepath"], "decorators": []}, {"name": "compute_file_metadata", "docstring": "", "line_range": [22, 41], "parameters": ["self", "filepath", "include_hashes"], "decorators": []}, {"name": "parse_module", "docstring": "", "line_range": [43, 124], "parameters": ["self", "filepath", "root_dir", "include_ranges", "include_hashes"], "decorators": []}, {"name": "extract_signature", "docstring": "", "line_range": [78, 80], "parameters": ["node"], "decorators": []}], "classes": [{"name": "JavaScriptParser", "docstring": "", "line_range": [8, 124], "methods": [{"name": "__init__", "docstring": "", "line_range": [9, 13], "parameters": ["self"]}, {"name": "file_hash", "docstring": "", "line_range": [15, 20], "parameters": ["self", "filepath"]}, {"name": "compute_file_metadata", "docstring": "", "line_range": [22, 41], "parameters": ["self", "filepath", "include_hashes"]}, {"name": "parse_module", "docstring": "", "line_range": [43, 124], "parameters": ["self", "filepath", "root_dir", "include_ranges", "include_hashes"]}], "bases": []}], "callgraph": {"__init__": ["set"], "file_hash": ["hashlib.sha256", "f.read", "open"], "compute_file_metadata": ["self.file_hash", "sum", "os.stat", "open"], "parse_module": ["self.compute_file_metadata", "esprima.parseModule", "open", "f.read", "str"], "extract_signature": ["hasattr"]}, "dependencies": ["Any", "Dict", "datetime", "esprima", "hashlib", "os", "typing"], "hash": "d2af10a2c30b638a634dd0317c81a179888dee011e0b7a0f62166dce468373c4"}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.parsers.universal_converter", "path": "backup_before_separation_20250529_152219/src/llmstruct/parsers/universal_converter.py", "category": "core", "module_doc": "Universal Code Converter - Orchestrates all language parsers\nConverts any codebase to llmstruct JSON format", "functions": [{"name": "main", "docstring": "CLI interface for universal converter", "line_range": [375, 428], "parameters": [], "decorators": []}, {"name": "__post_init__", "docstring": "", "line_range": [55, 62], "parameters": ["self"], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [79, 82], "parameters": ["self", "config"], "decorators": []}, {"name": "detect_language", "docstring": "Detect programming language from file extension", "line_range": [84, 92], "parameters": ["self", "file_path"], "decorators": []}, {"name": "detect_project_languages", "docstring": "Detect all languages in project and count files", "line_range": [94, 109], "parameters": ["self", "project_path"], "decorators": []}, {"name": "get_project_files", "docstring": "Get all relevant files for conversion", "line_range": [111, 138], "parameters": ["self", "project_path", "language"], "decorators": []}, {"name": "convert_python_project", "docstring": "Convert Python project to llmstruct format", "line_range": [140, 171], "parameters": ["self", "project_path"], "decorators": []}, {"name": "convert_go_project", "docstring": "Convert Go project to llmstruct format", "line_range": [173, 190], "parameters": ["self", "project_path"], "decorators": []}, {"name": "convert_javascript_project", "docstring": "Convert JavaScript project to llmstruct format", "line_range": [192, 223], "parameters": ["self", "project_path"], "decorators": []}, {"name": "convert_project", "docstring": "Convert any project to llmstruct format", "line_range": [225, 250], "parameters": ["self", "project_path", "language"], "decorators": []}, {"name": "convert_multi_language_project", "docstring": "Convert multi-language project with separate sections per language", "line_range": [252, 282], "parameters": ["self", "project_path"], "decorators": []}, {"name": "_build_project_structure", "docstring": "Build standard llmstruct project structure", "line_range": [284, 312], "parameters": ["self", "language", "project_path", "modules", "toc"], "decorators": []}, {"name": "_build_empty_project_structure", "docstring": "Build empty structure when conversion fails", "line_range": [314, 329], "parameters": ["self", "language", "project_path", "error"], "decorators": []}, {"name": "_merge_language_results", "docstring": "Merge multiple language results into unified structure", "line_range": [331, 372], "parameters": ["self", "project_path", "language_results"], "decorators": []}], "classes": [{"name": "Language", "docstring": "", "line_range": [33, 42], "methods": [], "bases": ["Enum"]}, {"name": "ConverterConfig", "docstring": "Configuration for universal converter", "line_range": [46, 62], "methods": [{"name": "__post_init__", "docstring": "", "line_range": [55, 62], "parameters": ["self"]}], "bases": []}, {"name": "UniversalConverter", "docstring": "Universal code converter for any programming language", "line_range": [65, 372], "methods": [{"name": "__init__", "docstring": "", "line_range": [79, 82], "parameters": ["self", "config"]}, {"name": "detect_language", "docstring": "Detect programming language from file extension", "line_range": [84, 92], "parameters": ["self", "file_path"]}, {"name": "detect_project_languages", "docstring": "Detect all languages in project and count files", "line_range": [94, 109], "parameters": ["self", "project_path"]}, {"name": "get_project_files", "docstring": "Get all relevant files for conversion", "line_range": [111, 138], "parameters": ["self", "project_path", "language"]}, {"name": "convert_python_project", "docstring": "Convert Python project to llmstruct format", "line_range": [140, 171], "parameters": ["self", "project_path"]}, {"name": "convert_go_project", "docstring": "Convert Go project to llmstruct format", "line_range": [173, 190], "parameters": ["self", "project_path"]}, {"name": "convert_javascript_project", "docstring": "Convert JavaScript project to llmstruct format", "line_range": [192, 223], "parameters": ["self", "project_path"]}, {"name": "convert_project", "docstring": "Convert any project to llmstruct format", "line_range": [225, 250], "parameters": ["self", "project_path", "language"]}, {"name": "convert_multi_language_project", "docstring": "Convert multi-language project with separate sections per language", "line_range": [252, 282], "parameters": ["self", "project_path"]}, {"name": "_build_project_structure", "docstring": "Build standard llmstruct project structure", "line_range": [284, 312], "parameters": ["self", "language", "project_path", "modules", "toc"]}, {"name": "_build_empty_project_structure", "docstring": "Build empty structure when conversion fails", "line_range": [314, 329], "parameters": ["self", "language", "project_path", "error"]}, {"name": "_merge_language_results", "docstring": "Merge multiple language results into unified structure", "line_range": [331, 372], "parameters": ["self", "project_path", "language_results"]}], "bases": []}], "callgraph": {"__post_init__": [], "__init__": ["ConverterConfig", "JavaScriptParser", "GoAnalyzer"], "detect_language": ["Path"], "detect_project_languages": ["languages.get", "os.walk", "any", "self.detect_language"], "get_project_files": ["files.append", "os.walk", "any", "self.detect_language"], "convert_python_project": ["self.get_project_files", "modules.append", "logger.info", "analyze_python", "logger.warning", "len", "self._build_project_structure", "toc.append", "module_data.get"], "convert_go_project": ["logger.info", "logger.error", "self._build_empty_project_structure", "convert_to_llmstruct_format", "str"], "convert_javascript_project": ["self.get_project_files", "modules.append", "logger.info", "logger.warning", "len", "self._build_project_structure", "toc.append", "module_data.get"], "convert_project": ["languages.keys", "self.detect_project_languages", "logger.info", "self.convert_python_project", "self.convert_go_project", "max", "NotImplementedError", "self.convert_javascript_project", "ValueError"], "convert_multi_language_project": ["languages.keys", "self.detect_project_languages", "logger.info", "self.convert_python_project", "self.convert_go_project", "logger.warning", "self._merge_language_results", "logger.error", "self.convert_javascript_project", "ValueError"], "_build_project_structure": ["m.get", "len", "language.title", "sum"], "_build_empty_project_structure": [], "_merge_language_results": ["all_modules.append", "list", "all_toc.append", "stats.get", "language_results.keys", "result.get", "language_results.items"], "main": ["ConverterConfig", "print", "parser.add_argument", "argparse.ArgumentParser", "json.dumps", "exit", "converter.convert_project", "stats.get", "f.write", "UniversalConverter", "result.get", "open", "converter.convert_multi_language_project", "logger.error", "parser.parse_args", "Language", "traceback.print_exc"]}, "dependencies": ["Any", "Dict", "Enum", "GoAnalyzer", "JavaScriptParser", "List", "Optional", "Path", "Union", "analyze_module", "argparse", "convert_to_llmstruct_format", "dataclass", "dataclasses", "enum", "go_analyzer", "javascript_parser", "json", "logging", "os", "pathlib", "python_parser", "sys", "traceback", "typing"], "hash": "e696f22d510dfa07afbd538e69c6d7ac3c8dd4e742905cfe256be1005e0c2b95"}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.parsers.go_analyzer", "path": "backup_before_separation_20250529_152219/src/llmstruct/parsers/go_analyzer.py", "category": "core", "module_doc": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 Go \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043b\u044f Docker \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b: go/packages, go/analysis", "functions": [{"name": "convert_to_llmstruct_format", "docstring": "\u041a\u043e\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 llmstruct", "line_range": [203, 337], "parameters": ["analysis", "include_ranges", "goals"], "decorators": []}, {"name": "_compute_file_hash", "docstring": "\u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 SHA-256 \u0445\u044d\u0448 \u0444\u0430\u0439\u043b\u0430", "line_range": [339, 345], "parameters": ["file_path"], "decorators": []}, {"name": "main", "docstring": "", "line_range": [347, 402], "parameters": [], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [24, 26], "parameters": ["self"], "decorators": []}, {"name": "_setup_analyzer", "docstring": "\u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0441\u0440\u0435\u0434\u0443 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430", "line_range": [28, 66], "parameters": ["self"], "decorators": []}, {"name": "_cleanup", "docstring": "\u041e\u0447\u0438\u0449\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b", "line_range": [68, 72], "parameters": ["self"], "decorators": []}, {"name": "analyze_project", "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 Go \u043f\u0440\u043e\u0435\u043a\u0442", "line_range": [74, 125], "parameters": ["self", "project_path"], "decorators": []}, {"name": "_fallback_analysis", "docstring": "Fallback \u0430\u043d\u0430\u043b\u0438\u0437 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0444\u0430\u0439\u043b\u043e\u0432", "line_range": [127, 201], "parameters": ["self", "project_path"], "decorators": []}], "classes": [{"name": "GoAnalyzer", "docstring": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 Go \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432", "line_range": [21, 201], "methods": [{"name": "__init__", "docstring": "", "line_range": [24, 26], "parameters": ["self"]}, {"name": "_setup_analyzer", "docstring": "\u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0441\u0440\u0435\u0434\u0443 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430", "line_range": [28, 66], "parameters": ["self"]}, {"name": "_cleanup", "docstring": "\u041e\u0447\u0438\u0449\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b", "line_range": [68, 72], "parameters": ["self"]}, {"name": "analyze_project", "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 Go \u043f\u0440\u043e\u0435\u043a\u0442", "line_range": [74, 125], "parameters": ["self", "project_path"]}, {"name": "_fallback_analysis", "docstring": "Fallback \u0430\u043d\u0430\u043b\u0438\u0437 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0444\u0430\u0439\u043b\u043e\u0432", "line_range": [127, 201], "parameters": ["self", "project_path"]}], "bases": []}], "callgraph": {"__init__": [], "_setup_analyzer": ["logging.warning", "tempfile.mkdtemp", "analyzer_file.write_text", "analyzer_source.read_text", "Path", "subprocess.run", "str"], "_cleanup": ["Path", "shutil.rmtree"], "analyze_project": ["self._fallback_analysis", "logging.info", "logging.warning", "logging.error", "json.loads", "subprocess.run", "self._cleanup", "self._setup_analyzer"], "_fallback_analysis": ["logging.info", "packages.add", "logging.warning", "set", "list", "file_path.read_text", "line.startswith", "file_path.relative_to", "len", "sorted", "go_mod_path.read_text", "line.split", "Path", "line.strip", "content.split", "str", "go_mod_path.exists"], "convert_to_llmstruct_format": ["functions.append", "file_data.get", "modules.append", "classes.append", "len", "iface.get", "_compute_file_hash", "fn.get", "uuid.uuid4", "module.get", "sum", "path.endswith", "toc.append", "analysis.get", "path.replace", "struct.get", "str"], "_compute_file_hash": ["hashlib.sha256", "f.read", "open"], "main": ["print", "parser.add_argument", "argparse.ArgumentParser", "json.dumps", "len", "GoAnalyzer", "analyzer.analyze_project", "stats.get", "sys.exit", "Path", "f.write", "result.get", "open", "traceback.print_exc", "parser.parse_args", "convert_to_llmstruct_format"]}, "dependencies": ["Any", "Dict", "List", "Optional", "Path", "argparse", "datetime", "hashlib", "json", "logging", "os", "pathlib", "shutil", "subprocess", "sys", "tempfile", "traceback", "typing", "uuid"], "hash": "621e1d82791d814534c044dc8ba1d1c79b1852a614255e313f5ff697c934f210"}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.parsers.python_parser", "path": "backup_before_separation_20250529_152219/src/llmstruct/parsers/python_parser.py", "category": "core", "module_doc": "", "functions": [{"name": "infer_category", "docstring": "Infer module category based on its path.", "line_range": [13, 20], "parameters": ["file_path"], "decorators": []}, {"name": "compute_file_hash", "docstring": "Compute SHA-256 hash of file content.", "line_range": [72, 79], "parameters": ["file_path"], "decorators": []}, {"name": "analyze_module", "docstring": "Analyze Python module and return structured data.", "line_range": [82, 154], "parameters": ["file_path", "root_dir", "include_ranges", "include_hashes"], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [26, 29], "parameters": ["self"], "decorators": []}, {"name": "visit_Import", "docstring": "Capture import statements.", "line_range": [31, 35], "parameters": ["self", "node"], "decorators": []}, {"name": "visit_ImportFrom", "docstring": "Capture from-import statements.", "line_range": [37, 43], "parameters": ["self", "node"], "decorators": []}, {"name": "visit_FunctionDef", "docstring": "Track function definitions and their calls.", "line_range": [45, 50], "parameters": ["self", "node"], "decorators": []}, {"name": "visit_AsyncFunctionDef", "docstring": "Track async function definitions and their calls.", "line_range": [52, 57], "parameters": ["self", "node"], "decorators": []}, {"name": "visit_Call", "docstring": "Capture function calls.", "line_range": [59, 69], "parameters": ["self", "node"], "decorators": []}], "classes": [{"name": "CallVisitor", "docstring": "AST visitor to collect function calls and dependencies.", "line_range": [23, 69], "methods": [{"name": "__init__", "docstring": "", "line_range": [26, 29], "parameters": ["self"]}, {"name": "visit_Import", "docstring": "Capture import statements.", "line_range": [31, 35], "parameters": ["self", "node"]}, {"name": "visit_ImportFrom", "docstring": "Capture from-import statements.", "line_range": [37, 43], "parameters": ["self", "node"]}, {"name": "visit_FunctionDef", "docstring": "Track function definitions and their calls.", "line_range": [45, 50], "parameters": ["self", "node"]}, {"name": "visit_AsyncFunctionDef", "docstring": "Track async function definitions and their calls.", "line_range": [52, 57], "parameters": ["self", "node"]}, {"name": "visit_Call", "docstring": "Capture function calls.", "line_range": [59, 69], "parameters": ["self", "node"]}], "bases": ["ast.NodeVisitor"]}], "callgraph": {"infer_category": ["Path"], "__init__": ["set"], "visit_Import": ["self.generic_visit"], "visit_ImportFrom": ["self.generic_visit"], "visit_FunctionDef": ["self.generic_visit", "set"], "visit_AsyncFunctionDef": ["self.generic_visit", "set"], "visit_Call": ["self.generic_visit", "isinstance"], "compute_file_hash": ["logging.error", "hashlib.sha256", "f.read", "open"], "analyze_module": ["functions.append", "ast.walk", "CallVisitor", "classes.append", "list", "sorted", "ast.unparse", "ast.get_docstring", "compute_file_hash", "infer_category", "logging.error", "ast.parse", "Path", "isinstance", "open", "str", "visitor.visit", "f.read"]}, "dependencies": ["Any", "Dict", "Optional", "Path", "Set", "ast", "hashlib", "logging", "os", "pathlib", "typing"], "hash": "555ac7004c99ba854fc4fc4688b583331229077e51dfa999d7aae2cd9f7c21dd"}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.templates.__init__", "path": "backup_before_separation_20250529_152219/src/llmstruct/templates/__init__.py", "category": "cli", "module_doc": "Templates for LLM prompts used in LLMStruct integration.", "functions": [], "classes": [], "callgraph": {}, "dependencies": [], "hash": "2421ea45b39e72f090ee252149c45385f679971e48ca50f0883e313c3db9fa6d"}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.validators.__init__", "path": "backup_before_separation_20250529_152219/src/llmstruct/validators/__init__.py", "category": "cli", "module_doc": "Validation modules for ensuring LLMStruct JSON complies with the schema.", "functions": [], "classes": [], "callgraph": {}, "dependencies": ["json_validator", "validate_struct_json"], "hash": "f0ee4f577643fd8bc74b46fd7debd96cc15683b5a7ad0018bb0788523f4b8d34"}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.validators.json_validator", "path": "backup_before_separation_20250529_152219/src/llmstruct/validators/json_validator.py", "category": "core", "module_doc": "", "functions": [{"name": "validate_struct_json", "docstring": "Validate a single JSON file against a schema.", "line_range": [12, 40], "parameters": ["json_path", "schema_path"], "decorators": []}, {"name": "validate_directory", "docstring": "Validate all JSON files in a directory against a schema.", "line_range": [43, 61], "parameters": ["directory", "schema_path", "include_patterns", "exclude_patterns"], "decorators": []}], "classes": [], "callgraph": {"validate_struct_json": ["logging.info", "json_file.exists", "logging.error", "schema_file.exists", "Path", "validate", "open", "json.load", "str"], "validate_directory": ["validate_struct_json", "json_file.match", "any", "Path", "str"]}, "dependencies": ["List", "Optional", "Path", "ValidationError", "json", "jsonschema", "logging", "pathlib", "sys", "typing", "validate"], "hash": "cc5c6b4f74409f89459ec86a9d59d83cd92c691e95ab4e670e6b8ac8c979a232"}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.generators.json_generator", "path": "backup_before_separation_20250529_152219/src/llmstruct/generators/json_generator.py", "category": "core", "module_doc": "", "functions": [{"name": "get_folder_structure", "docstring": "Capture directory and file structure with artifact_id, respecting .gitignore and patterns.", "line_range": [15, 88], "parameters": ["root_dir", "gitignore_patterns", "include_patterns", "exclude_patterns", "exclude_dirs"], "decorators": []}, {"name": "build_toc_and_modules", "docstring": "Build TOC and modules with artifact_id and robust filtering.", "line_range": [91, 148], "parameters": ["root_dir", "include_patterns", "exclude_patterns", "gitignore_patterns", "include_ranges", "include_hashes", "exclude_dirs"], "decorators": []}, {"name": "generate_json", "docstring": "Generate JSON structure for project with artifact_id, summary, and tags.", "line_range": [151, 218], "parameters": ["root_dir", "include_patterns", "exclude_patterns", "gitignore_patterns", "include_ranges", "include_hashes", "goals", "exclude_dirs"], "decorators": []}], "classes": [], "callgraph": {"get_folder_structure": ["file_path.match", "p.endswith", "os.walk", "sorted", "set", "structure.append", "file_path.relative_to", "any", "uuid.uuid4", "Path", "p.rstrip", "str"], "build_toc_and_modules": ["p.endswith", "modules.append", "set", "f.match", "analyze_module", "len", "any", "uuid.uuid4", "Path", "toc.append", "p.rstrip", "str"], "generate_json": ["set", "list", "len", "uuid.uuid4", "build_toc_and_modules", "get_folder_structure", "Path", "sum", "str"]}, "dependencies": ["Any", "Dict", "List", "Optional", "Path", "analyze_module", "datetime", "logging", "os", "parsers.python_parser", "pathlib", "typing", "uuid"], "hash": "0c25e4343395d66633a587d438296eac1210eac4a11f5a9f167a742396af7554"}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.generators.__init__", "path": "backup_before_separation_20250529_152219/src/llmstruct/generators/__init__.py", "category": "cli", "module_doc": "Generator modules for creating LLMStruct JSON outputs from parsed code data.", "functions": [], "classes": [], "callgraph": {}, "dependencies": ["generate_json", "json_generator"], "hash": "6510b9d89fa5bff008cf7b1ee6f50343f96b76737b5842a930c06888c5cbba6c"}, {"module_id": "backup_before_separation_20250529_152219.src.llmstruct.generators.go_json_generator", "path": "backup_before_separation_20250529_152219/src/llmstruct/generators/go_json_generator.py", "category": "core", "module_doc": "", "functions": [{"name": "get_go_folder_structure", "docstring": "Capture directory and file structure for Go projects with artifact_id, respecting .gitignore and patterns.", "line_range": [15, 85], "parameters": ["root_dir", "gitignore_patterns", "include_patterns", "exclude_patterns", "exclude_dirs"], "decorators": []}, {"name": "build_go_toc_and_modules", "docstring": "Build TOC and modules for Go projects with artifact_id and robust filtering.", "line_range": [88, 143], "parameters": ["root_dir", "include_patterns", "exclude_patterns", "gitignore_patterns", "include_ranges", "include_hashes", "exclude_dirs"], "decorators": []}, {"name": "extract_go_mod_info", "docstring": "Extract information from go.mod file.", "line_range": [146, 182], "parameters": ["root_dir"], "decorators": []}, {"name": "generate_go_json", "docstring": "Generate JSON structure for Go project with artifact_id, summary, and tags.", "line_range": [185, 259], "parameters": ["root_dir", "include_patterns", "exclude_patterns", "gitignore_patterns", "include_ranges", "include_hashes", "goals", "exclude_dirs"], "decorators": []}], "classes": [], "callgraph": {"get_go_folder_structure": ["file_path.match", "p.endswith", "os.walk", "sorted", "set", "structure.append", "file_path.relative_to", "any", "uuid.uuid4", "Path", "p.rstrip", "str"], "build_go_toc_and_modules": ["p.endswith", "modules.append", "set", "f.match", "analyze_module", "len", "any", "uuid.uuid4", "module.get", "Path", "toc.append", "p.rstrip", "str"], "extract_go_mod_info": ["line.startswith", "len", "dependencies.append", "line.split", "open", "logging.error", "Path", "content.strip", "line.strip", "f.read", "go_mod_path.exists"], "generate_go_json": ["go_mod_info.get", "set", "list", "m.get", "len", "extract_go_mod_info", "uuid.uuid4", "build_go_toc_and_modules", "Path", "sum", "get_go_folder_structure", "str"]}, "dependencies": ["Any", "Dict", "List", "Optional", "Path", "analyze_module", "datetime", "logging", "os", "parsers.go_parser", "pathlib", "typing", "uuid"], "hash": "2e11ebd0b1baad6e008b5c7c7dcff832215263638561a7d78670b0cb647d4bf1"}, {"module_id": "backup_before_separation_20250529_152219.scripts.github_sync_manager", "path": "backup_before_separation_20250529_152219/scripts/github_sync_manager.py", "category": "core", "module_doc": "GitHub Sync Manager - \u0418\u0434\u0435\u043c\u043f\u043e\u0442\u0435\u043d\u0442\u043d\u0430\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f processing results \u0441 GitHub\nSupports: Issues, Epics (Projects), Discussions\nSafety: dry-run mode, logging, collision detection", "functions": [{"name": "main", "docstring": "CLI interface", "line_range": [375, 408], "parameters": [], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [17, 48], "parameters": ["self", "repo_owner", "repo_name", "dry_run"], "decorators": []}, {"name": "load_sync_log", "docstring": "Load previous sync results for idempotency", "line_range": [50, 60], "parameters": ["self"], "decorators": []}, {"name": "save_sync_log", "docstring": "Save sync log for future idempotency", "line_range": [62, 65], "parameters": ["self"], "decorators": []}, {"name": "api_request", "docstring": "Safe GitHub API request with rate limiting", "line_range": [67, 94], "parameters": ["self", "method", "endpoint", "data"], "decorators": []}, {"name": "get_existing_issues", "docstring": "Get existing GitHub issues for collision detection", "line_range": [96, 112], "parameters": ["self"], "decorators": []}, {"name": "get_existing_discussions", "docstring": "Get existing GitHub discussions", "line_range": [114, 118], "parameters": ["self"], "decorators": []}, {"name": "item_already_synced", "docstring": "Check if item was already synced (idempotency)", "line_range": [120, 125], "parameters": ["self", "item", "category"], "decorators": []}, {"name": "find_existing_by_title", "docstring": "Find existing GitHub item by title similarity", "line_range": [127, 143], "parameters": ["self", "title", "existing_items"], "decorators": []}, {"name": "create_github_issue", "docstring": "Create GitHub issue from processed item", "line_range": [145, 182], "parameters": ["self", "item"], "decorators": []}, {"name": "create_github_discussion", "docstring": "Create GitHub discussion from processed item", "line_range": [184, 194], "parameters": ["self", "item"], "decorators": []}, {"name": "create_github_epic", "docstring": "Create GitHub epic (as Project or enhanced Issue)", "line_range": [196, 214], "parameters": ["self", "item"], "decorators": []}, {"name": "sync_category", "docstring": "Sync specific category with GitHub", "line_range": [216, 290], "parameters": ["self", "category", "filename"], "decorators": []}, {"name": "validate_before_sync", "docstring": "Pre-sync validation checks", "line_range": [292, 322], "parameters": ["self"], "decorators": []}, {"name": "run_sync", "docstring": "Main sync execution", "line_range": [324, 373], "parameters": ["self", "categories"], "decorators": []}], "classes": [{"name": "GitHubSyncManager", "docstring": "", "line_range": [16, 373], "methods": [{"name": "__init__", "docstring": "", "line_range": [17, 48], "parameters": ["self", "repo_owner", "repo_name", "dry_run"]}, {"name": "load_sync_log", "docstring": "Load previous sync results for idempotency", "line_range": [50, 60], "parameters": ["self"]}, {"name": "save_sync_log", "docstring": "Save sync log for future idempotency", "line_range": [62, 65], "parameters": ["self"]}, {"name": "api_request", "docstring": "Safe GitHub API request with rate limiting", "line_range": [67, 94], "parameters": ["self", "method", "endpoint", "data"]}, {"name": "get_existing_issues", "docstring": "Get existing GitHub issues for collision detection", "line_range": [96, 112], "parameters": ["self"]}, {"name": "get_existing_discussions", "docstring": "Get existing GitHub discussions", "line_range": [114, 118], "parameters": ["self"]}, {"name": "item_already_synced", "docstring": "Check if item was already synced (idempotency)", "line_range": [120, 125], "parameters": ["self", "item", "category"]}, {"name": "find_existing_by_title", "docstring": "Find existing GitHub item by title similarity", "line_range": [127, 143], "parameters": ["self", "title", "existing_items"]}, {"name": "create_github_issue", "docstring": "Create GitHub issue from processed item", "line_range": [145, 182], "parameters": ["self", "item"]}, {"name": "create_github_discussion", "docstring": "Create GitHub discussion from processed item", "line_range": [184, 194], "parameters": ["self", "item"]}, {"name": "create_github_epic", "docstring": "Create GitHub epic (as Project or enhanced Issue)", "line_range": [196, 214], "parameters": ["self", "item"]}, {"name": "sync_category", "docstring": "Sync specific category with GitHub", "line_range": [216, 290], "parameters": ["self", "category", "filename"]}, {"name": "validate_before_sync", "docstring": "Pre-sync validation checks", "line_range": [292, 322], "parameters": ["self"]}, {"name": "run_sync", "docstring": "Main sync execution", "line_range": [324, 373], "parameters": ["self", "categories"]}], "bases": []}], "callgraph": {"__init__": ["print", "os.getenv", "Path", "self.load_sync_log"], "load_sync_log": ["json.load", "open"], "save_sync_log": ["json.dump", "open"], "api_request": ["requests.patch", "ValueError", "requests.post", "print", "response.raise_for_status", "int", "response.json", "method.upper", "time.sleep", "requests.get"], "get_existing_issues": ["self.api_request", "issues.extend", "len"], "get_existing_discussions": [], "item_already_synced": ["item.get"], "find_existing_by_title": ["title.lower", "len", "item.get"], "create_github_issue": ["labels.append", "self.api_request", "print", "processing_meta.get", "item.get"], "create_github_discussion": ["print", "item.get"], "create_github_epic": ["self.api_request", "print", "item.get"], "sync_category": ["print", "self.find_existing_by_title", "self.get_existing_discussions", "datetime.now", "json.load", "existing.get", "self.create_github_discussion", "file_path.exists", "item.get", "self.create_github_epic", "open", "result.get", "self.item_already_synced", "data.get", "self.create_github_issue", "self.get_existing_issues"], "validate_before_sync": ["self.api_request", "print", "user_info.get", "repo_info.get", "core_limit.get", "rate_limit.get"], "run_sync": ["print", "datetime.now", "self.sync_category", "r.get", "results.values", "sum", "self.save_sync_log", "self.validate_before_sync"], "main": ["print", "parser.add_argument", "argparse.ArgumentParser", "len", "GitHubSyncManager", "manager.run_sync", "result.get", "parser.parse_args"]}, "dependencies": ["Any", "Dict", "List", "Optional", "Path", "argparse", "datetime", "json", "os", "pathlib", "requests", "time", "typing"], "hash": "1ee49d0d031a76692ccc03ff995d0a75d198818dcf2c1f625d6e9aee0828a7c9"}, {"module_id": "backup_before_separation_20250529_152219.scripts.process_926_items", "path": "backup_before_separation_20250529_152219/scripts/process_926_items.py", "category": "core", "module_doc": "926 Items Processing Script - Updated Implementation\nProcesses items according to GitHub roadmap + personal management vision\nImplements all decisions from 926_items_processing_execution_plan.md", "functions": [{"name": "__init__", "docstring": "", "line_range": [16, 51], "parameters": ["self"], "decorators": []}, {"name": "load_comprehensive_index", "docstring": "Load the 926 items from comprehensive index", "line_range": [53, 111], "parameters": ["self"], "decorators": []}, {"name": "calculate_confidence_score", "docstring": "Calculate confidence score for categorization decision", "line_range": [113, 146], "parameters": ["self", "item", "category"], "decorators": []}, {"name": "check_t_pot_related", "docstring": "Enhanced T-Pot detection", "line_range": [148, 155], "parameters": ["self", "item"], "decorators": []}, {"name": "check_team_implementable", "docstring": "Check if team can implement without architecture review", "line_range": [157, 176], "parameters": ["self", "item"], "decorators": []}, {"name": "check_personal_vs_team_vs_business", "docstring": "Classify as personal/team/business", "line_range": [178, 214], "parameters": ["self", "item"], "decorators": []}, {"name": "identify_epic_candidates", "docstring": "Identify items that should be grouped into epics", "line_range": [216, 233], "parameters": ["self", "items"], "decorators": []}, {"name": "extract_epic_name", "docstring": "Extract epic name from item", "line_range": [235, 241], "parameters": ["self", "item"], "decorators": []}, {"name": "categorize_item", "docstring": "Main categorization logic with confidence scoring", "line_range": [243, 278], "parameters": ["self", "item"], "decorators": []}, {"name": "find_duplicates", "docstring": "Enhanced duplicate detection with T-Pot special handling", "line_range": [280, 319], "parameters": ["self", "items"], "decorators": []}, {"name": "calculate_similarity", "docstring": "Enhanced similarity calculation", "line_range": [321, 342], "parameters": ["self", "title1", "title2"], "decorators": []}, {"name": "suggest_merge_strategy", "docstring": "Enhanced merge strategy with T-Pot consideration", "line_range": [344, 359], "parameters": ["self", "item1", "item2"], "decorators": []}, {"name": "process_items", "docstring": "Main processing workflow implementing execution plan", "line_range": [361, 468], "parameters": ["self", "items"], "decorators": []}, {"name": "save_results", "docstring": "Save categorized results with enhanced metadata", "line_range": [470, 546], "parameters": ["self"], "decorators": []}, {"name": "get_category_description", "docstring": "Category descriptions per execution plan", "line_range": [548, 562], "parameters": ["self", "category"], "decorators": []}, {"name": "run", "docstring": "Main execution workflow per execution plan", "line_range": [564, 606], "parameters": ["self"], "decorators": []}], "classes": [{"name": "TaskProcessor926", "docstring": "", "line_range": [15, 606], "methods": [{"name": "__init__", "docstring": "", "line_range": [16, 51], "parameters": ["self"]}, {"name": "load_comprehensive_index", "docstring": "Load the 926 items from comprehensive index", "line_range": [53, 111], "parameters": ["self"]}, {"name": "calculate_confidence_score", "docstring": "Calculate confidence score for categorization decision", "line_range": [113, 146], "parameters": ["self", "item", "category"]}, {"name": "check_t_pot_related", "docstring": "Enhanced T-Pot detection", "line_range": [148, 155], "parameters": ["self", "item"]}, {"name": "check_team_implementable", "docstring": "Check if team can implement without architecture review", "line_range": [157, 176], "parameters": ["self", "item"]}, {"name": "check_personal_vs_team_vs_business", "docstring": "Classify as personal/team/business", "line_range": [178, 214], "parameters": ["self", "item"]}, {"name": "identify_epic_candidates", "docstring": "Identify items that should be grouped into epics", "line_range": [216, 233], "parameters": ["self", "items"]}, {"name": "extract_epic_name", "docstring": "Extract epic name from item", "line_range": [235, 241], "parameters": ["self", "item"]}, {"name": "categorize_item", "docstring": "Main categorization logic with confidence scoring", "line_range": [243, 278], "parameters": ["self", "item"]}, {"name": "find_duplicates", "docstring": "Enhanced duplicate detection with T-Pot special handling", "line_range": [280, 319], "parameters": ["self", "items"]}, {"name": "calculate_similarity", "docstring": "Enhanced similarity calculation", "line_range": [321, 342], "parameters": ["self", "title1", "title2"]}, {"name": "suggest_merge_strategy", "docstring": "Enhanced merge strategy with T-Pot consideration", "line_range": [344, 359], "parameters": ["self", "item1", "item2"]}, {"name": "process_items", "docstring": "Main processing workflow implementing execution plan", "line_range": [361, 468], "parameters": ["self", "items"]}, {"name": "save_results", "docstring": "Save categorized results with enhanced metadata", "line_range": [470, 546], "parameters": ["self"]}, {"name": "get_category_description", "docstring": "Category descriptions per execution plan", "line_range": [548, 562], "parameters": ["self", "category"]}, {"name": "run", "docstring": "Main execution workflow per execution plan", "line_range": [564, 606], "parameters": ["self"]}], "bases": []}], "callgraph": {"__init__": ["datetime.now", "Path"], "load_comprehensive_index": ["print", "hash", "item_content.lower", "set", "items.append", "value.items", "index_path.exists", "items.extend", "seen_items.add", "data.items", "len", "any", "unique_items.append", "item.get", "isinstance", "open", "json.load", "str"], "calculate_confidence_score": ["min", "item.get", "self.check_t_pot_related", "sum", "str"], "check_t_pot_related": ["any", "str"], "check_team_implementable": ["str", "sum"], "check_personal_vs_team_vs_business": ["item.get", "max", "str", "sum"], "identify_epic_candidates": ["len", "any", "self.extract_epic_name", "item.get", "epic_groups.items", "str"], "extract_epic_name": ["title.split", "item.get"], "categorize_item": ["any", "self.calculate_confidence_score", "self.check_personal_vs_team_vs_business", "self.check_t_pot_related", "str", "self.check_team_implementable"], "find_duplicates": ["seen_items.items", "duplicates.append", "self.suggest_merge_strategy", "item.get", "self.check_t_pot_related", "self.calculate_similarity"], "calculate_similarity": ["title1.split", "set", "title2.split", "words1.union", "len", "min", "words1.intersection"], "suggest_merge_strategy": ["len", "item2.get", "item1.get", "self.check_t_pot_related", "str"], "process_items": ["print", "id", "set", "self.check_team_implementable", "low_confidence_items.append", "len", "datetime.now", "any", "self.extract_epic_name", "self.find_duplicates", "category.startswith", "self.check_t_pot_related", "duplicate_item_ids.add", "processed_item.copy", "str", "self.categorize_item"], "save_results": ["json.dump", "print", "datetime.now", "len", "open", "self.get_category_description", "item.get", "sum"], "get_category_description": ["descriptions.get"], "run": ["print", "self.load_comprehensive_index", "self.process_items", "self.save_results"]}, "dependencies": ["Any", "Dict", "List", "Path", "Tuple", "datetime", "json", "os", "pathlib", "re", "typing"], "hash": "75943c116813d77b47300deeaeadb26b7ccd4a37912497bdb82871198feedcf5"}, {"module_id": "backup_before_separation_20250529_152219.scripts.github_sync_manager_enhanced", "path": "backup_before_separation_20250529_152219/scripts/github_sync_manager_enhanced.py", "category": "core", "module_doc": "Enhanced GitHub Sync Manager - \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u043b\u0443\u0447\u0448\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0438\u0437 full_project_rollout\n\u0418\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u0443\u0435\u0442: processing results + GitHub API + token management + CLI fallback", "functions": [{"name": "print_info", "docstring": "", "line_range": [25, 26], "parameters": ["msg"], "decorators": []}, {"name": "print_success", "docstring": "", "line_range": [28, 29], "parameters": ["msg"], "decorators": []}, {"name": "print_warning", "docstring": "", "line_range": [31, 32], "parameters": ["msg"], "decorators": []}, {"name": "print_error", "docstring": "", "line_range": [34, 35], "parameters": ["msg"], "decorators": []}, {"name": "print_step", "docstring": "", "line_range": [37, 38], "parameters": ["step", "total", "msg"], "decorators": []}, {"name": "main", "docstring": "Enhanced CLI interface", "line_range": [620, 655], "parameters": [], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [43, 44], "parameters": ["self"], "decorators": []}, {"name": "load_env_file", "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430", "line_range": [46, 57], "parameters": ["self"], "decorators": []}, {"name": "test_github_token", "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0442\u043e\u043a\u0435\u043d\u0430", "line_range": [59, 73], "parameters": ["self", "token"], "decorators": []}, {"name": "check_gh_cli", "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 GitHub CLI", "line_range": [75, 82], "parameters": ["self"], "decorators": []}, {"name": "get_token_from_gh_cli", "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 \u0438\u0437 GitHub CLI", "line_range": [84, 93], "parameters": ["self"], "decorators": []}, {"name": "get_github_token", "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c GitHub \u0442\u043e\u043a\u0435\u043d \u0441 multiple fallbacks\n\nReturns:\n    (token, method) \u0433\u0434\u0435 method = 'env' | 'cli' | 'none'", "line_range": [95, 117], "parameters": ["self"], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [122, 164], "parameters": ["self", "repo_owner", "repo_name", "dry_run"], "decorators": []}, {"name": "detect_repo_from_git", "docstring": "\u0410\u0432\u0442\u043e\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 owner/repo \u0438\u0437 git remote", "line_range": [166, 198], "parameters": ["self"], "decorators": []}, {"name": "load_sync_log", "docstring": "Load previous sync results", "line_range": [200, 211], "parameters": ["self"], "decorators": []}, {"name": "save_sync_log", "docstring": "Save sync log", "line_range": [213, 216], "parameters": ["self"], "decorators": []}, {"name": "api_request", "docstring": "Enhanced API request with CLI fallback", "line_range": [218, 231], "parameters": ["self", "method", "endpoint", "data"], "decorators": []}, {"name": "_api_request_direct", "docstring": "Direct API request", "line_range": [233, 261], "parameters": ["self", "method", "endpoint", "data"], "decorators": []}, {"name": "_api_request_via_cli", "docstring": "API request via GitHub CLI", "line_range": [263, 293], "parameters": ["self", "method", "endpoint", "data"], "decorators": []}, {"name": "create_github_issue_enhanced", "docstring": "Enhanced issue creation (\u0438\u0437 create_github_issues.py)", "line_range": [295, 359], "parameters": ["self", "item"], "decorators": []}, {"name": "_format_acceptance_criteria", "docstring": "Format acceptance criteria from item metadata", "line_range": [361, 380], "parameters": ["self", "item"], "decorators": []}, {"name": "_format_implementation_notes", "docstring": "Format implementation notes", "line_range": [382, 397], "parameters": ["self", "item"], "decorators": []}, {"name": "validate_before_sync", "docstring": "Enhanced validation", "line_range": [399, 434], "parameters": ["self"], "decorators": []}, {"name": "run_enhanced_sync", "docstring": "Enhanced sync with full project rollout integration", "line_range": [436, 494], "parameters": ["self", "categories"], "decorators": []}, {"name": "sync_category_enhanced", "docstring": "Enhanced category sync", "line_range": [496, 554], "parameters": ["self", "category"], "decorators": []}, {"name": "item_already_synced", "docstring": "Check if item was already synced", "line_range": [556, 560], "parameters": ["self", "item", "category"], "decorators": []}, {"name": "create_github_epic_enhanced", "docstring": "Enhanced epic creation", "line_range": [562, 607], "parameters": ["self", "item"], "decorators": []}, {"name": "create_github_discussion_enhanced", "docstring": "Enhanced discussion creation (placeholder - requires GraphQL)", "line_range": [609, 618], "parameters": ["self", "item"], "decorators": []}], "classes": [{"name": "Colors", "docstring": "", "line_range": [18, 23], "methods": [], "bases": []}, {"name": "GitHubTokenManager", "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 GitHub \u0442\u043e\u043a\u0435\u043d\u0430\u043c\u0438 (\u0438\u0437 setup_github_token.sh)", "line_range": [40, 117], "methods": [{"name": "__init__", "docstring": "", "line_range": [43, 44], "parameters": ["self"]}, {"name": "load_env_file", "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430", "line_range": [46, 57], "parameters": ["self"]}, {"name": "test_github_token", "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0442\u043e\u043a\u0435\u043d\u0430", "line_range": [59, 73], "parameters": ["self", "token"]}, {"name": "check_gh_cli", "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 GitHub CLI", "line_range": [75, 82], "parameters": ["self"]}, {"name": "get_token_from_gh_cli", "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 \u0438\u0437 GitHub CLI", "line_range": [84, 93], "parameters": ["self"]}, {"name": "get_github_token", "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c GitHub \u0442\u043e\u043a\u0435\u043d \u0441 multiple fallbacks\n\nReturns:\n    (token, method) \u0433\u0434\u0435 method = 'env' | 'cli' | 'none'", "line_range": [95, 117], "parameters": ["self"]}], "bases": []}, {"name": "EnhancedGitHubSyncManager", "docstring": "\u0423\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u044b\u0439 GitHub Sync Manager \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 \u0432\u0441\u0435\u0445 \u043b\u0443\u0447\u0448\u0438\u0445 \u043f\u0440\u0430\u043a\u0442\u0438\u043a", "line_range": [119, 618], "methods": [{"name": "__init__", "docstring": "", "line_range": [122, 164], "parameters": ["self", "repo_owner", "repo_name", "dry_run"]}, {"name": "detect_repo_from_git", "docstring": "\u0410\u0432\u0442\u043e\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 owner/repo \u0438\u0437 git remote", "line_range": [166, 198], "parameters": ["self"]}, {"name": "load_sync_log", "docstring": "Load previous sync results", "line_range": [200, 211], "parameters": ["self"]}, {"name": "save_sync_log", "docstring": "Save sync log", "line_range": [213, 216], "parameters": ["self"]}, {"name": "api_request", "docstring": "Enhanced API request with CLI fallback", "line_range": [218, 231], "parameters": ["self", "method", "endpoint", "data"]}, {"name": "_api_request_direct", "docstring": "Direct API request", "line_range": [233, 261], "parameters": ["self", "method", "endpoint", "data"]}, {"name": "_api_request_via_cli", "docstring": "API request via GitHub CLI", "line_range": [263, 293], "parameters": ["self", "method", "endpoint", "data"]}, {"name": "create_github_issue_enhanced", "docstring": "Enhanced issue creation (\u0438\u0437 create_github_issues.py)", "line_range": [295, 359], "parameters": ["self", "item"]}, {"name": "_format_acceptance_criteria", "docstring": "Format acceptance criteria from item metadata", "line_range": [361, 380], "parameters": ["self", "item"]}, {"name": "_format_implementation_notes", "docstring": "Format implementation notes", "line_range": [382, 397], "parameters": ["self", "item"]}, {"name": "validate_before_sync", "docstring": "Enhanced validation", "line_range": [399, 434], "parameters": ["self"]}, {"name": "run_enhanced_sync", "docstring": "Enhanced sync with full project rollout integration", "line_range": [436, 494], "parameters": ["self", "categories"]}, {"name": "sync_category_enhanced", "docstring": "Enhanced category sync", "line_range": [496, 554], "parameters": ["self", "category"]}, {"name": "item_already_synced", "docstring": "Check if item was already synced", "line_range": [556, 560], "parameters": ["self", "item", "category"]}, {"name": "create_github_epic_enhanced", "docstring": "Enhanced epic creation", "line_range": [562, 607], "parameters": ["self", "item"]}, {"name": "create_github_discussion_enhanced", "docstring": "Enhanced discussion creation (placeholder - requires GraphQL)", "line_range": [609, 618], "parameters": ["self", "item"]}], "bases": []}], "callgraph": {"print_info": ["print"], "print_success": ["print"], "print_warning": ["print"], "print_error": ["print"], "print_step": ["print"], "__init__": ["self.detect_repo_from_git", "GitHubTokenManager", "print_info", "Path", "self.load_sync_log"], "load_env_file": ["key.strip", "line.startswith", "line.split", "Path", "open", "line.strip", "value.strip", "env_file.exists"], "test_github_token": ["requests.get", "response.json"], "check_gh_cli": ["subprocess.run"], "get_token_from_gh_cli": ["subprocess.run"], "get_github_token": ["self.get_token_from_gh_cli", "self.check_gh_cli", "os.getenv", "self.test_github_token", "print_warning"], "detect_repo_from_git": ["url.startswith", "path.split", "len", "url.replace", "print_info", "url.endswith", "url.split", "subprocess.run", "print_warning"], "load_sync_log": ["json.load", "open"], "save_sync_log": ["json.dump", "open"], "api_request": ["print_error", "self._api_request_via_cli", "time.sleep", "self._api_request_direct"], "_api_request_direct": ["requests.patch", "ValueError", "requests.post", "response.raise_for_status", "int", "response.json", "print_error", "method.upper", "requests.get", "print_warning"], "_api_request_via_cli": ["subprocess.run", "json.dumps", "print_error", "json.loads", "method.upper", "cmd.extend", "print_warning"], "create_github_issue_enhanced": ["self._format_acceptance_criteria", "labels.append", "self.api_request", "print_success", "self._format_implementation_notes", "processing_meta.get", "item.get", "print_info"], "_format_acceptance_criteria": ["criteria.extend", "item.get", "criteria.append"], "_format_implementation_notes": ["processing_meta.get", "item.get", "notes.append"], "validate_before_sync": ["self.api_request", "user_info.get", "print_success", "print_error", "print_step", "repo_info.get", "file_path.exists"], "run_enhanced_sync": ["print", "self.sync_category_enhanced", "print_success", "datetime.now", "enumerate", "print_info", "print_step", "result.get", "self.save_sync_log", "self.validate_before_sync"], "sync_category_enhanced": ["self.create_github_issue_enhanced", "self.create_github_discussion_enhanced", "datetime.now", "json.load", "file_path.exists", "print_error", "print_info", "item.get", "result.get", "open", "self.item_already_synced", "data.get", "self.create_github_epic_enhanced", "print_warning"], "item_already_synced": ["item.get"], "create_github_epic_enhanced": ["print_info", "self.api_request", "item.get", "print_success"], "create_github_discussion_enhanced": ["print_info", "item.get", "print_warning"], "main": ["parser.add_argument", "print_success", "argparse.ArgumentParser", "len", "manager.run_enhanced_sync", "EnhancedGitHubSyncManager", "print_error", "result.get", "parser.parse_args"]}, "dependencies": ["Any", "Dict", "List", "Optional", "Path", "argparse", "datetime", "json", "os", "pathlib", "requests", "subprocess", "sys", "time", "typing"], "hash": "dee5ab49d5c48115c3b9b6df054a1160c44fb7addfa035958aa7db8619301d96"}, {"module_id": "backup_before_separation_20250529_152219.scripts.collect_json", "path": "backup_before_separation_20250529_152219/scripts/collect_json.py", "category": "core", "module_doc": "", "functions": [{"name": "load_json_files", "docstring": "", "line_range": [5, 19], "parameters": ["base_dir"], "decorators": []}], "classes": [], "callgraph": {"load_json_files": ["sorted", "path.open", "json.load", "base_dir.rglob", "current.setdefault", "path.relative_to"]}, "dependencies": ["Path", "json", "pathlib"], "hash": "c8dff991d16ccd9c1a9ee3f83f68adf766195005a3b49ea64a9a99e34902eaa6"}, {"module_id": "backup_before_separation_20250529_152219.scripts.fix_github_script", "path": "backup_before_separation_20250529_152219/scripts/fix_github_script.py", "category": "core", "module_doc": "Quick fix for GitHub issues creation script\n\u0418\u0441\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u043e\u0439 JSON \u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445", "functions": [{"name": "fix_json_loading", "docstring": "\u0418\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0443 JSON \u0434\u0430\u043d\u043d\u044b\u0445", "line_range": [11, 42], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"fix_json_loading": ["print", "Path", "f.write", "open", "content.replace", "f.read"]}, "dependencies": ["Path", "json", "os", "pathlib"], "hash": "749ea82f6bcdc68da77827b691267646be1c85f5b2c20e39d085d768c9e64d87"}, {"module_id": "backup_before_separation_20250529_152219.scripts.collector", "path": "backup_before_separation_20250529_152219/scripts/collector.py", "category": "core", "module_doc": "", "functions": [{"name": "apply_filters", "docstring": "", "line_range": [13, 29], "parameters": ["files", "filters"], "decorators": []}, {"name": "collect_files", "docstring": "", "line_range": [32, 38], "parameters": ["root_dir", "filters"], "decorators": []}, {"name": "generate_struct", "docstring": "", "line_range": [41, 88], "parameters": ["root_dir", "output"], "decorators": []}, {"name": "main", "docstring": "", "line_range": [91, 92], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"apply_filters": ["pattern.startswith", "fnmatch.fnmatch", "filtered.append"], "collect_files": ["apply_filters", "path.is_file", "root_dir.rglob", "files.append", "path.relative_to", "str"], "generate_struct": ["json.dump", "output_path.open", "logger.info", "len", "uuid.uuid4", "existing.get", "collect_files", "Path", "output_path.exists", "json.load", "str"], "main": ["generate_struct"]}, "dependencies": ["Path", "fnmatch", "json", "logging", "pathlib", "uuid"], "hash": "251462380e2e135880f652ce7d9e6a1483d18a1202c336f76ac3f43536505049"}, {"module_id": "backup_before_separation_20250529_152219.scripts.create_github_issues", "path": "backup_before_separation_20250529_152219/scripts/create_github_issues.py", "category": "core", "module_doc": "GitHub Issues Creator for AI-Dogfooding Project\n\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 GitHub issues \u0438\u0437 \u043d\u0430\u0448\u0438\u0445 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0437\u0430\u0434\u0430\u0447", "functions": [{"name": "load_env_file", "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430", "line_range": [16, 28], "parameters": [], "decorators": []}, {"name": "load_epics_data", "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438\u0437 JSON", "line_range": [205, 213], "parameters": [], "decorators": []}, {"name": "main", "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f issues", "line_range": [215, 252], "parameters": [], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [34, 43], "parameters": ["self", "repo_owner", "repo_name", "token", "use_cli"], "decorators": []}, {"name": "create_epic_issue", "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u044d\u043f\u0438\u043a\u0430", "line_range": [45, 83], "parameters": ["self", "epic_data"], "decorators": []}, {"name": "create_task_issue", "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438", "line_range": [85, 128], "parameters": ["self", "task_data", "epic_number"], "decorators": []}, {"name": "_create_issue_via_api", "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub API", "line_range": [130, 150], "parameters": ["self", "title", "body", "labels"], "decorators": []}, {"name": "_create_issue_via_cli", "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub CLI", "line_range": [152, 186], "parameters": ["self", "title", "body", "labels"], "decorators": []}, {"name": "_format_criteria", "docstring": "", "line_range": [188, 189], "parameters": ["self", "criteria"], "decorators": []}, {"name": "_format_tasks", "docstring": "", "line_range": [191, 200], "parameters": ["self", "tasks"], "decorators": []}, {"name": "_format_metrics", "docstring": "", "line_range": [202, 203], "parameters": ["self", "metrics"], "decorators": []}], "classes": [{"name": "GitHubIssuesCreator", "docstring": "", "line_range": [33, 203], "methods": [{"name": "__init__", "docstring": "", "line_range": [34, 43], "parameters": ["self", "repo_owner", "repo_name", "token", "use_cli"]}, {"name": "create_epic_issue", "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u044d\u043f\u0438\u043a\u0430", "line_range": [45, 83], "parameters": ["self", "epic_data"]}, {"name": "create_task_issue", "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438", "line_range": [85, 128], "parameters": ["self", "task_data", "epic_number"]}, {"name": "_create_issue_via_api", "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub API", "line_range": [130, 150], "parameters": ["self", "title", "body", "labels"]}, {"name": "_create_issue_via_cli", "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub CLI", "line_range": [152, 186], "parameters": ["self", "title", "body", "labels"]}, {"name": "_format_criteria", "docstring": "", "line_range": [188, 189], "parameters": ["self", "criteria"]}, {"name": "_format_tasks", "docstring": "", "line_range": [191, 200], "parameters": ["self", "tasks"]}, {"name": "_format_metrics", "docstring": "", "line_range": [202, 203], "parameters": ["self", "metrics"]}], "bases": []}], "callgraph": {"load_env_file": ["print", "key.strip", "line.startswith", "line.split", "Path", "open", "line.strip", "value.strip", "env_file.exists"], "__init__": [], "create_epic_issue": ["self._create_issue_via_cli", "self._create_issue_via_api", "self._format_criteria", "self._format_tasks", "epic_data.get", "self._format_metrics"], "create_task_issue": ["self._create_issue_via_cli", "task_data.get", "self._create_issue_via_api", "self._format_criteria"], "_create_issue_via_api": ["print", "requests.post", "response.json"], "_create_issue_via_cli": ["subprocess.run", "print", "os.unlink", "int", "f.write", "issue_url.split", "open", "os.getpid"], "_format_criteria": [], "_format_tasks": [], "_format_metrics": ["metrics.items"], "load_epics_data": ["print", "epics_file.exists", "Path", "open", "json.load"], "main": ["print", "load_epics_data", "len", "creator.create_task_issue", "os.getenv", "epics_data.get", "creator.create_epic_issue", "epic_data.get", "GitHubIssuesCreator"]}, "dependencies": ["Any", "Dict", "List", "Path", "json", "os", "pathlib", "requests", "subprocess", "sys", "typing"], "hash": "49ba6a19e2c3aa696879c666036ca56bf5678032d3a8a1004c9c1849b87104b7"}, {"module_id": "backup_before_separation_20250529_152219.scripts.session_cli", "path": "backup_before_separation_20250529_152219/scripts/session_cli.py", "category": "core", "module_doc": "Session Management CLI\nAutomates session tracking, worklog updates, and session switching for llmstruct.\nPart of the comprehensive session management system.", "functions": [{"name": "get_current_branch", "docstring": "Get current git branch.", "line_range": [24, 31], "parameters": [], "decorators": []}, {"name": "load_json_file", "docstring": "Load JSON file with error handling.", "line_range": [33, 40], "parameters": ["file_path"], "decorators": []}, {"name": "save_json_file", "docstring": "Save JSON file with error handling.", "line_range": [42, 51], "parameters": ["file_path", "data"], "decorators": []}, {"name": "get_current_timestamp", "docstring": "Get current timestamp in ISO format.", "line_range": [53, 55], "parameters": [], "decorators": []}, {"name": "log_event", "docstring": "Log an event to worklog.json.", "line_range": [57, 88], "parameters": ["event_message", "author"], "decorators": []}, {"name": "switch_session", "docstring": "Switch to a different session or create new one.", "line_range": [90, 141], "parameters": ["session_id"], "decorators": []}, {"name": "list_sessions", "docstring": "List all available sessions.", "line_range": [143, 166], "parameters": [], "decorators": []}, {"name": "show_current_session", "docstring": "Show current session details.", "line_range": [168, 183], "parameters": [], "decorators": []}, {"name": "show_worklog", "docstring": "Show recent worklog entries.", "line_range": [185, 203], "parameters": ["limit"], "decorators": []}, {"name": "main", "docstring": "Main CLI interface.", "line_range": [205, 244], "parameters": [], "decorators": []}], "classes": [{"name": "Colors", "docstring": "", "line_range": [16, 22], "methods": [], "bases": []}], "callgraph": {"get_current_branch": ["subprocess.run"], "load_json_file": ["print", "json.load", "open"], "save_json_file": ["json.dump", "print", "os.makedirs", "open"], "get_current_timestamp": ["datetime.now"], "log_event": ["get_current_branch", "current_session.get", "print", "get_current_timestamp", "load_json_file", "save_json_file"], "switch_session": ["get_current_branch", "print", "log_event", "get_current_timestamp", "load_json_file", "save_json_file"], "list_sessions": ["current_session.get", "print", "load_json_file"], "show_current_session": ["current_session.get", "print", "load_json_file"], "show_worklog": ["print", "len", "reversed", "load_json_file"], "main": ["print", "log_event", "len", "show_worklog", "switch_session", "show_current_session", "list_sessions", "int"]}, "dependencies": ["Path", "datetime", "json", "os", "pathlib", "subprocess", "sys"], "hash": "23aca9a658e60715b7fa3e4a009c3de7baebdd1eca3acae17d87938ae622cc41"}, {"module_id": "backup_before_separation_20250529_152219.scripts.epic_roadmap_manager", "path": "backup_before_separation_20250529_152219/scripts/epic_roadmap_manager.py", "category": "core", "module_doc": "Epic Roadmap Manager - \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430\u043c\u0438 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0441\u0435\u0441\u0441\u0438\u0439\n\n\u0424\u0443\u043d\u043a\u0446\u0438\u0438:\n- \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 roadmap \u0438 \u043f\u043b\u0430\u043d\u043e\u0432\n- \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u0441\u0435\u0441\u0441\u0438\u0439\n- \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u0441 GitHub epics\n- \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u043e\u0432", "functions": [{"name": "main", "docstring": "", "line_range": [259, 291], "parameters": [], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [19, 22], "parameters": ["self"], "decorators": []}, {"name": "load_roadmap", "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c roadmap \u0438\u0437 \u0444\u0430\u0439\u043b\u0430", "line_range": [24, 31], "parameters": ["self"], "decorators": []}, {"name": "save_roadmap", "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c roadmap \u0432 \u0444\u0430\u0439\u043b", "line_range": [33, 40], "parameters": ["self", "roadmap"], "decorators": []}, {"name": "show_overview", "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043e\u0431\u0437\u043e\u0440 roadmap", "line_range": [42, 80], "parameters": ["self"], "decorators": []}, {"name": "show_epic_details", "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u044d\u043f\u0438\u043a\u0430", "line_range": [82, 125], "parameters": ["self", "epic_id"], "decorators": []}, {"name": "start_session", "docstring": "\u041d\u0430\u0447\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043d\u0430\u0434 \u0441\u0435\u0441\u0441\u0438\u0435\u0439", "line_range": [127, 189], "parameters": ["self", "epic_id", "session_id"], "decorators": []}, {"name": "complete_session", "docstring": "\u0417\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e", "line_range": [191, 257], "parameters": ["self", "session_id"], "decorators": []}], "classes": [{"name": "EpicRoadmapManager", "docstring": "", "line_range": [18, 257], "methods": [{"name": "__init__", "docstring": "", "line_range": [19, 22], "parameters": ["self"]}, {"name": "load_roadmap", "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c roadmap \u0438\u0437 \u0444\u0430\u0439\u043b\u0430", "line_range": [24, 31], "parameters": ["self"]}, {"name": "save_roadmap", "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c roadmap \u0432 \u0444\u0430\u0439\u043b", "line_range": [33, 40], "parameters": ["self", "roadmap"]}, {"name": "show_overview", "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043e\u0431\u0437\u043e\u0440 roadmap", "line_range": [42, 80], "parameters": ["self"]}, {"name": "show_epic_details", "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u044d\u043f\u0438\u043a\u0430", "line_range": [82, 125], "parameters": ["self", "epic_id"]}, {"name": "start_session", "docstring": "\u041d\u0430\u0447\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043d\u0430\u0434 \u0441\u0435\u0441\u0441\u0438\u0435\u0439", "line_range": [127, 189], "parameters": ["self", "epic_id", "session_id"]}, {"name": "complete_session", "docstring": "\u0417\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e", "line_range": [191, 257], "parameters": ["self", "session_id"]}], "bases": []}], "callgraph": {"__init__": [], "load_roadmap": ["print", "json.load", "open"], "save_roadmap": ["json.dump", "datetime.now", "print", "open"], "show_overview": ["print", "self.load_roadmap", "stats.get", "epic.get", "roadmap.get", "epics.items"], "show_epic_details": ["print", "self.load_roadmap", "len", "session.get", "epic.get", "roadmap.get", "epic_data.get"], "start_session": ["json.dump", "print", "self.load_roadmap", "datetime.now", "session.get", "self.save_roadmap", "open", "epic.get", "os.makedirs", "roadmap.get", "sess.get", "epic_data.get"], "complete_session": ["current_session.get", "print", "json.dump", "self.load_roadmap", "datetime.now", "roadmap.get", "session.get", "self.save_roadmap", "sessions_log.append", "os.remove", "epic.get", "all", "os.makedirs", "open", "sess.get", "json.load"], "main": ["print", "parser.add_argument", "manager.show_epic_details", "argparse.ArgumentParser", "manager.show_overview", "EpicRoadmapManager", "manager.start_session", "parser.parse_args", "manager.complete_session"]}, "dependencies": ["Path", "argparse", "datetime", "json", "os", "pathlib"], "hash": "5125fc24bf131dbbbda814a26f75ecff0e8d6cebde166de88b637ee22ac7251e"}, {"module_id": "backup_before_separation_20250529_152219.scripts.auto_update_struct", "path": "backup_before_separation_20250529_152219/scripts/auto_update_struct.py", "category": "core", "module_doc": "Automatic struct.json update script\nThis script automatically parses the project and updates struct.json\nwithout requiring LLM intervention.", "functions": [{"name": "detect_project_changes", "docstring": "Detect if project files have changed since last struct.json generation.\nUses git status to check for modifications.", "line_range": [44, 81], "parameters": ["root_dir", "struct_path"], "decorators": []}, {"name": "backup_struct_json", "docstring": "Create a backup of existing struct.json.", "line_range": [84, 97], "parameters": ["struct_path"], "decorators": []}, {"name": "validate_struct_json", "docstring": "Validate generated struct.json for basic structure.", "line_range": [100, 128], "parameters": ["struct_path"], "decorators": []}, {"name": "update_struct_json", "docstring": "Main function to update struct.json automatically.\n\nArgs:\n    root_dir: Project root directory (default: current directory)\n    struct_path: Path to struct.json (default: ./struct.json)\n    force: Force regeneration even if no changes detected\n    config_override: Override default configuration\n\nReturns:\n    bool: True if update was successful", "line_range": [131, 225], "parameters": ["root_dir", "struct_path", "force", "config_override"], "decorators": []}, {"name": "main", "docstring": "Command-line interface for auto-update script.", "line_range": [228, 286], "parameters": [], "decorators": []}, {"name": "load_config", "docstring": "", "line_range": [24, 25], "parameters": [], "decorators": []}, {"name": "load_gitignore", "docstring": "", "line_range": [26, 27], "parameters": [], "decorators": []}, {"name": "generate_json", "docstring": "", "line_range": [28, 29], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"load_config": [], "load_gitignore": [], "generate_json": ["ImportError"], "detect_project_changes": ["logger.info", "logger.warning", "file_path.stat", "Path", "subprocess.run"], "backup_struct_json": ["logger.info", "datetime.now", "Path", "logger.error", "subprocess.run"], "validate_struct_json": ["json.load", "logger.info", "logger.error", "open"], "update_struct_json": ["config.get", "json.dump", "subprocess.run", "logger.info", "load_gitignore", "validate_struct_json", "load_config", "detect_project_changes", "open", "config.update", "os.getcwd", "backup_struct_json", "cli_config.get", "logger.error", "generate_json"], "main": ["logging.getLogger", "parser.add_argument", "print", "argparse.ArgumentParser", "detect_project_changes", "sys.exit", "update_struct_json", "os.getcwd", "parser.parse_args"]}, "dependencies": ["Any", "Dict", "Optional", "Path", "argparse", "datetime", "generate_json", "json", "llmstruct.cli", "llmstruct.generators.json_generator", "load_config", "load_gitignore", "logging", "os", "pathlib", "subprocess", "sys", "typing"], "hash": "505bdb6b282e7e9befc6df4165834fa7481335c96bbb88b04501996e15e173c2"}, {"module_id": "backup_before_separation_20250529_152219.scripts.create_comprehensive_index", "path": "backup_before_separation_20250529_152219/scripts/create_comprehensive_index.py", "category": "core", "module_doc": "Comprehensive Project Index Creator\nScans ALL project directories for tasks, ideas, sessions, and concepts.\nProvides complete visibility into project state and unaccounted innovations.", "functions": [{"name": "main", "docstring": "Main execution function.", "line_range": [714, 735], "parameters": [], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [45, 58], "parameters": ["self", "project_root"], "decorators": []}, {"name": "_init_patterns", "docstring": "Initialize comprehensive extraction patterns.", "line_range": [60, 92], "parameters": ["self"], "decorators": []}, {"name": "scan_all_directories", "docstring": "Scan all configured directories comprehensively.", "line_range": [94, 111], "parameters": ["self"], "decorators": []}, {"name": "_scan_directory", "docstring": "Scan a specific directory according to its configuration.", "line_range": [113, 127], "parameters": ["self", "directory", "config"], "decorators": []}, {"name": "_scan_root_files", "docstring": "Scan root-level files.", "line_range": [129, 133], "parameters": ["self", "config"], "decorators": []}, {"name": "_should_scan_file", "docstring": "Check if file should be scanned based on extension.", "line_range": [135, 137], "parameters": ["self", "file_path", "allowed_types"], "decorators": []}, {"name": "_scan_file", "docstring": "Scan individual file for project items.", "line_range": [139, 152], "parameters": ["self", "file_path", "source_dir", "priority"], "decorators": []}, {"name": "_extract_from_text", "docstring": "Extract items from text/markdown files.", "line_range": [154, 206], "parameters": ["self", "file_path", "content", "source_dir", "priority"], "decorators": []}, {"name": "_extract_from_json", "docstring": "Extract items from JSON files.", "line_range": [208, 225], "parameters": ["self", "file_path", "content", "source_dir", "priority"], "decorators": []}, {"name": "_create_item_from_match", "docstring": "Create ProjectItem from regex match.", "line_range": [227, 249], "parameters": ["self", "match", "content", "file_path", "item_type", "source_dir", "priority"], "decorators": []}, {"name": "_create_checkbox_item", "docstring": "Create ProjectItem from checkbox match.", "line_range": [251, 274], "parameters": ["self", "match", "content", "file_path", "item_type", "source_dir", "priority"], "decorators": []}, {"name": "_create_simple_item", "docstring": "Create simple ProjectItem.", "line_range": [276, 297], "parameters": ["self", "title", "content", "file_path", "item_type", "source_dir", "priority", "position"], "decorators": []}, {"name": "_detect_status", "docstring": "Detect item status from surrounding content.", "line_range": [299, 308], "parameters": ["self", "content", "position"], "decorators": []}, {"name": "_detect_priority", "docstring": "Detect item priority from surrounding content.", "line_range": [310, 319], "parameters": ["self", "content", "position", "default"], "decorators": []}, {"name": "_assess_strategic_value", "docstring": "Assess strategic value of item.", "line_range": [321, 330], "parameters": ["self", "title", "content"], "decorators": []}, {"name": "_extract_context", "docstring": "Extract context around position.", "line_range": [332, 336], "parameters": ["self", "content", "position", "length"], "decorators": []}, {"name": "_detect_category", "docstring": "Detect item category.", "line_range": [338, 351], "parameters": ["self", "title", "content"], "decorators": []}, {"name": "_estimate_effort", "docstring": "Estimate effort required.", "line_range": [353, 362], "parameters": ["self", "title", "content"], "decorators": []}, {"name": "_extract_tags", "docstring": "Extract relevant tags.", "line_range": [364, 378], "parameters": ["self", "title", "content", "source_dir"], "decorators": []}, {"name": "_is_noise_checkbox", "docstring": "Check if checkbox is noise (navigation, etc).", "line_range": [380, 384], "parameters": ["self", "text"], "decorators": []}, {"name": "_parse_json_files", "docstring": "Parse structured JSON files for existing data.", "line_range": [386, 402], "parameters": ["self"], "decorators": []}, {"name": "_process_structured_json", "docstring": "Process structured JSON data.", "line_range": [404, 419], "parameters": ["self", "data", "file_path"], "decorators": []}, {"name": "_add_json_item", "docstring": "Add item from JSON structure.", "line_range": [421, 441], "parameters": ["self", "item", "file_path", "item_type"], "decorators": []}, {"name": "_assess_json_strategic_value", "docstring": "Assess strategic value from JSON item.", "line_range": [443, 450], "parameters": ["self", "item"], "decorators": []}, {"name": "_extract_innovation_concepts", "docstring": "Extract innovation concepts from content.", "line_range": [452, 482], "parameters": ["self", "file_path", "content", "source_dir", "priority"], "decorators": []}, {"name": "_enhance_items", "docstring": "Post-process items to enhance metadata and find relationships.", "line_range": [484, 501], "parameters": ["self"], "decorators": []}, {"name": "_find_related_items", "docstring": "Find related items based on content similarity.", "line_range": [503, 517], "parameters": ["self", "item", "id_map", "title_map"], "decorators": []}, {"name": "generate_comprehensive_report", "docstring": "Generate comprehensive analysis report.", "line_range": [519, 561], "parameters": ["self"], "decorators": []}, {"name": "save_comprehensive_index", "docstring": "Save comprehensive index and reports.", "line_range": [563, 582], "parameters": ["self", "output_dir"], "decorators": []}, {"name": "_generate_analysis_report", "docstring": "Generate human-readable analysis report.", "line_range": [584, 658], "parameters": ["self", "report"], "decorators": []}, {"name": "_format_dict", "docstring": "Format dictionary for markdown display.", "line_range": [660, 662], "parameters": ["self", "d"], "decorators": []}, {"name": "_format_items_list", "docstring": "Format items list for markdown display.", "line_range": [664, 677], "parameters": ["self", "items"], "decorators": []}, {"name": "_extract_json_tasks", "docstring": "Extract tasks from JSON tasks array.", "line_range": [679, 684], "parameters": ["self", "tasks_data", "file_path", "source_dir", "priority"], "decorators": []}, {"name": "_extract_json_ideas", "docstring": "Extract ideas from JSON ideas array.", "line_range": [686, 691], "parameters": ["self", "ideas_data", "file_path", "source_dir", "priority"], "decorators": []}, {"name": "_extract_json_sessions", "docstring": "Extract sessions from JSON sessions array.", "line_range": [693, 698], "parameters": ["self", "sessions_data", "file_path", "source_dir", "priority"], "decorators": []}, {"name": "_extract_json_array", "docstring": "Extract items from JSON array.", "line_range": [700, 711], "parameters": ["self", "array_data", "file_path", "source_dir", "priority"], "decorators": []}], "classes": [{"name": "ProjectItem", "docstring": "Unified representation of any project item (task, idea, session, concept).", "line_range": [22, 39], "methods": [], "bases": []}, {"name": "ComprehensiveIndexer", "docstring": "Comprehensive indexer for all project content.", "line_range": [42, 711], "methods": [{"name": "__init__", "docstring": "", "line_range": [45, 58], "parameters": ["self", "project_root"]}, {"name": "_init_patterns", "docstring": "Initialize comprehensive extraction patterns.", "line_range": [60, 92], "parameters": ["self"]}, {"name": "scan_all_directories", "docstring": "Scan all configured directories comprehensively.", "line_range": [94, 111], "parameters": ["self"]}, {"name": "_scan_directory", "docstring": "Scan a specific directory according to its configuration.", "line_range": [113, 127], "parameters": ["self", "directory", "config"]}, {"name": "_scan_root_files", "docstring": "Scan root-level files.", "line_range": [129, 133], "parameters": ["self", "config"]}, {"name": "_should_scan_file", "docstring": "Check if file should be scanned based on extension.", "line_range": [135, 137], "parameters": ["self", "file_path", "allowed_types"]}, {"name": "_scan_file", "docstring": "Scan individual file for project items.", "line_range": [139, 152], "parameters": ["self", "file_path", "source_dir", "priority"]}, {"name": "_extract_from_text", "docstring": "Extract items from text/markdown files.", "line_range": [154, 206], "parameters": ["self", "file_path", "content", "source_dir", "priority"]}, {"name": "_extract_from_json", "docstring": "Extract items from JSON files.", "line_range": [208, 225], "parameters": ["self", "file_path", "content", "source_dir", "priority"]}, {"name": "_create_item_from_match", "docstring": "Create ProjectItem from regex match.", "line_range": [227, 249], "parameters": ["self", "match", "content", "file_path", "item_type", "source_dir", "priority"]}, {"name": "_create_checkbox_item", "docstring": "Create ProjectItem from checkbox match.", "line_range": [251, 274], "parameters": ["self", "match", "content", "file_path", "item_type", "source_dir", "priority"]}, {"name": "_create_simple_item", "docstring": "Create simple ProjectItem.", "line_range": [276, 297], "parameters": ["self", "title", "content", "file_path", "item_type", "source_dir", "priority", "position"]}, {"name": "_detect_status", "docstring": "Detect item status from surrounding content.", "line_range": [299, 308], "parameters": ["self", "content", "position"]}, {"name": "_detect_priority", "docstring": "Detect item priority from surrounding content.", "line_range": [310, 319], "parameters": ["self", "content", "position", "default"]}, {"name": "_assess_strategic_value", "docstring": "Assess strategic value of item.", "line_range": [321, 330], "parameters": ["self", "title", "content"]}, {"name": "_extract_context", "docstring": "Extract context around position.", "line_range": [332, 336], "parameters": ["self", "content", "position", "length"]}, {"name": "_detect_category", "docstring": "Detect item category.", "line_range": [338, 351], "parameters": ["self", "title", "content"]}, {"name": "_estimate_effort", "docstring": "Estimate effort required.", "line_range": [353, 362], "parameters": ["self", "title", "content"]}, {"name": "_extract_tags", "docstring": "Extract relevant tags.", "line_range": [364, 378], "parameters": ["self", "title", "content", "source_dir"]}, {"name": "_is_noise_checkbox", "docstring": "Check if checkbox is noise (navigation, etc).", "line_range": [380, 384], "parameters": ["self", "text"]}, {"name": "_parse_json_files", "docstring": "Parse structured JSON files for existing data.", "line_range": [386, 402], "parameters": ["self"]}, {"name": "_process_structured_json", "docstring": "Process structured JSON data.", "line_range": [404, 419], "parameters": ["self", "data", "file_path"]}, {"name": "_add_json_item", "docstring": "Add item from JSON structure.", "line_range": [421, 441], "parameters": ["self", "item", "file_path", "item_type"]}, {"name": "_assess_json_strategic_value", "docstring": "Assess strategic value from JSON item.", "line_range": [443, 450], "parameters": ["self", "item"]}, {"name": "_extract_innovation_concepts", "docstring": "Extract innovation concepts from content.", "line_range": [452, 482], "parameters": ["self", "file_path", "content", "source_dir", "priority"]}, {"name": "_enhance_items", "docstring": "Post-process items to enhance metadata and find relationships.", "line_range": [484, 501], "parameters": ["self"]}, {"name": "_find_related_items", "docstring": "Find related items based on content similarity.", "line_range": [503, 517], "parameters": ["self", "item", "id_map", "title_map"]}, {"name": "generate_comprehensive_report", "docstring": "Generate comprehensive analysis report.", "line_range": [519, 561], "parameters": ["self"]}, {"name": "save_comprehensive_index", "docstring": "Save comprehensive index and reports.", "line_range": [563, 582], "parameters": ["self", "output_dir"]}, {"name": "_generate_analysis_report", "docstring": "Generate human-readable analysis report.", "line_range": [584, 658], "parameters": ["self", "report"]}, {"name": "_format_dict", "docstring": "Format dictionary for markdown display.", "line_range": [660, 662], "parameters": ["self", "d"]}, {"name": "_format_items_list", "docstring": "Format items list for markdown display.", "line_range": [664, 677], "parameters": ["self", "items"]}, {"name": "_extract_json_tasks", "docstring": "Extract tasks from JSON tasks array.", "line_range": [679, 684], "parameters": ["self", "tasks_data", "file_path", "source_dir", "priority"]}, {"name": "_extract_json_ideas", "docstring": "Extract ideas from JSON ideas array.", "line_range": [686, 691], "parameters": ["self", "ideas_data", "file_path", "source_dir", "priority"]}, {"name": "_extract_json_sessions", "docstring": "Extract sessions from JSON sessions array.", "line_range": [693, 698], "parameters": ["self", "sessions_data", "file_path", "source_dir", "priority"]}, {"name": "_extract_json_array", "docstring": "Extract items from JSON array.", "line_range": [700, 711], "parameters": ["self", "array_data", "file_path", "source_dir", "priority"]}], "bases": []}], "callgraph": {"__init__": ["self._init_patterns", "Path"], "_init_patterns": ["re.compile"], "scan_all_directories": ["self._scan_root_files", "logger.info", "self._enhance_items", "len", "self._scan_directory", "self._parse_json_files"], "_scan_directory": ["logger.info", "logger.warning", "self._should_scan_file", "dir_path.exists", "file_path.is_file", "dir_path.glob", "self._scan_file"], "_scan_root_files": ["self._should_scan_file", "self._scan_file", "file_path.is_file"], "_should_scan_file": [], "_scan_file": ["self._extract_from_json", "logger.error", "open", "self._extract_from_text", "f.read"], "_extract_from_text": ["match.start", "self._create_item_from_match", "self._extract_innovation_concepts", "self._create_checkbox_item", "self._is_noise_checkbox", "self._create_simple_item", "match.group"], "_extract_from_json": ["self._extract_json_ideas", "logger.warning", "self._extract_json_tasks", "self._extract_json_sessions", "json.loads", "isinstance", "self._extract_json_array"], "_create_item_from_match": ["self._assess_strategic_value", "match.start", "self._estimate_effort", "self._detect_status", "self._detect_category", "self._extract_tags", "datetime.now", "ProjectItem", "title.strip", "self._extract_context", "self._detect_priority", "str", "match.group"], "_create_checkbox_item": ["self._assess_strategic_value", "match.start", "self._estimate_effort", "self._detect_category", "self._extract_tags", "datetime.now", "ProjectItem", "self._extract_context", "self._detect_priority", "str", "match.group"], "_create_simple_item": ["datetime.now", "ProjectItem", "title.strip", "self._extract_context", "str"], "_detect_status": ["max"], "_detect_priority": ["max"], "_assess_strategic_value": [], "_extract_context": ["min", "len", "max"], "_detect_category": ["title.lower", "any"], "_estimate_effort": ["any"], "_extract_tags": ["title.lower", "source_dir.replace", "tags.append"], "_is_noise_checkbox": ["len", "any", "text.lower", "text.strip"], "_parse_json_files": ["file_path.exists", "self._process_structured_json", "logger.error", "open", "json.load"], "_process_structured_json": ["isinstance", "self._add_json_item"], "_add_json_item": ["self._assess_json_strategic_value", "datetime.now", "len", "ProjectItem", "item.get", "str"], "_assess_json_strategic_value": ["item.get"], "_extract_innovation_concepts": ["len", "ProjectItem", "datetime.now", "content.find", "innovation_lines.append", "enumerate", "self._extract_context", "source_dir.replace", "line.strip", "content.split", "str"], "_enhance_items": ["self._find_related_items", "re.sub", "logger.info"], "_find_related_items": ["related.append", "re.findall", "ref_type.upper"], "generate_comprehensive_report": ["by_strategic_value.get", "by_type.get", "asdict", "len", "by_source.get", "datetime.now", "by_status.get", "by_priority.get"], "save_comprehensive_index": ["json.dump", "logger.info", "len", "self.generate_comprehensive_report", "os.makedirs", "f.write", "open", "self._generate_analysis_report"], "_generate_analysis_report": ["len", "self._format_dict", "self._format_items_list"], "_format_dict": ["sorted", "d.items"], "_format_items_list": ["result.append"], "_extract_json_tasks": ["isinstance", "self._add_json_item"], "_extract_json_ideas": ["isinstance", "self._add_json_item"], "_extract_json_sessions": ["isinstance", "self._add_json_item"], "_extract_json_array": ["isinstance", "self._add_json_item", "str"], "main": ["print", "logger.info", "by_strategic.get", "len", "indexer.scan_all_directories", "ComprehensiveIndexer", "indexer.save_comprehensive_index"]}, "dependencies": ["Dict", "List", "Optional", "Path", "Set", "asdict", "dataclass", "dataclasses", "datetime", "json", "logging", "os", "pathlib", "re", "typing"], "hash": "3de71f291650a50e7e3c04fc660a7c31d909a1f929d375ec5324f909c0a81c97"}, {"module_id": "backup_before_separation_20250529_152219.scripts.validate_schemas", "path": "backup_before_separation_20250529_152219/scripts/validate_schemas.py", "category": "core", "module_doc": "", "functions": [], "classes": [], "callgraph": {}, "dependencies": [], "hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"}, {"module_id": "backup_before_separation_20250529_152219.scripts.export_to_github_projects", "path": "backup_before_separation_20250529_152219/scripts/export_to_github_projects.py", "category": "core", "module_doc": "Export script for GitHub Projects integration\nConverts official tasks.json and ideas.json to GitHub Project cards", "functions": [{"name": "main", "docstring": "", "line_range": [183, 266], "parameters": [], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [23, 26], "parameters": ["self", "config_path", "dry_run"], "decorators": []}, {"name": "check_github_cli", "docstring": "Check if GitHub CLI is installed and authenticated", "line_range": [28, 36], "parameters": ["self"], "decorators": []}, {"name": "list_projects", "docstring": "List available GitHub Projects (via gh-projects extension)", "line_range": [38, 55], "parameters": ["self", "owner", "repo"], "decorators": []}, {"name": "create_project_item", "docstring": "Create a new item in GitHub Project (via gh-projects extension)\nTODO: \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 GraphQL API \u0438\u043b\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c", "line_range": [57, 82], "parameters": ["self", "project_number", "title", "body", "owner", "repo"], "decorators": []}, {"name": "export_tasks_to_project", "docstring": "Export tasks to GitHub Project", "line_range": [84, 123], "parameters": ["self", "tasks", "project_number", "owner", "repo"], "decorators": []}, {"name": "export_ideas_to_project", "docstring": "Export ideas to GitHub Project", "line_range": [125, 164], "parameters": ["self", "ideas", "project_number", "owner", "repo"], "decorators": []}, {"name": "filter_data", "docstring": "Filter data by status and priority", "line_range": [166, 180], "parameters": ["self", "data", "status_filter", "priority_filter"], "decorators": []}], "classes": [{"name": "GitHubProjectsExportScript", "docstring": "Extended exporter with command-line interface and GitHub CLI integration", "line_range": [20, 180], "methods": [{"name": "__init__", "docstring": "", "line_range": [23, 26], "parameters": ["self", "config_path", "dry_run"]}, {"name": "check_github_cli", "docstring": "Check if GitHub CLI is installed and authenticated", "line_range": [28, 36], "parameters": ["self"]}, {"name": "list_projects", "docstring": "List available GitHub Projects (via gh-projects extension)", "line_range": [38, 55], "parameters": ["self", "owner", "repo"]}, {"name": "create_project_item", "docstring": "Create a new item in GitHub Project (via gh-projects extension)\nTODO: \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 GraphQL API \u0438\u043b\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c", "line_range": [57, 82], "parameters": ["self", "project_number", "title", "body", "owner", "repo"]}, {"name": "export_tasks_to_project", "docstring": "Export tasks to GitHub Project", "line_range": [84, 123], "parameters": ["self", "tasks", "project_number", "owner", "repo"]}, {"name": "export_ideas_to_project", "docstring": "Export ideas to GitHub Project", "line_range": [125, 164], "parameters": ["self", "ideas", "project_number", "owner", "repo"]}, {"name": "filter_data", "docstring": "Filter data by status and priority", "line_range": [166, 180], "parameters": ["self", "data", "status_filter", "priority_filter"]}], "bases": ["GitHubProjectsExporter"]}], "callgraph": {"__init__": ["super"], "check_github_cli": ["self._run_gh_command", "print"], "list_projects": ["self._run_gh_command", "print", "json.loads", "isinstance"], "create_project_item": ["self._run_gh_command", "print", "output.strip", "str"], "export_tasks_to_project": ["print", "task.get", "len", "self.format_task_for_github", "self.create_project_item"], "export_ideas_to_project": ["idea.get", "print", "len", "self.format_idea_for_github", "self.create_project_item"], "filter_data": ["item.get"], "main": ["print", "parser.add_argument", "exporter.check_github_cli", "exporter.export_ideas_to_project", "argparse.ArgumentParser", "exporter.export_tasks_to_project", "exporter._save_mapping", "GitHubProjectsExportScript", "sys.exit", "exporter.filter_data", "parser.parse_args", "exporter.load_official_data"]}, "dependencies": ["Any", "Dict", "GitHubProjectsExporter", "List", "Optional", "Path", "Tuple", "argparse", "datetime", "json", "llmstruct.gh_view", "pathlib", "subprocess", "sys", "typing"], "hash": "b6b4f700d8fed14e918455d59e88d15bc3259556aad468ee3c3ea4816d710f2a"}, {"module_id": "backup_before_separation_20250529_152219.scripts.validate_refs", "path": "backup_before_separation_20250529_152219/scripts/validate_refs.py", "category": "core", "module_doc": "", "functions": [{"name": "validate_references", "docstring": "", "line_range": [11, 43], "parameters": [], "decorators": []}, {"name": "main", "docstring": "", "line_range": [46, 47], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"validate_references": ["idea.get", "json.dump", "source_file.exists", "target_file.exists", "logger.info", "logger.warning", "broken_links.append", "enumerate", "Path", "logger.error", "json.load"], "main": ["validate_references"]}, "dependencies": ["Path", "json", "logging", "pathlib"], "hash": "6c57e53f4e4e0afdb8e8c78f1e6d38f284721f6729a7197ff483ed29f5363607"}, {"module_id": "backup_before_separation_20250529_152219.scripts.fix_hardcoded_usernames", "path": "backup_before_separation_20250529_152219/scripts/fix_hardcoded_usernames.py", "category": "core", "module_doc": "Fix Hardcoded Usernames Script\nAutomatically detects and replaces hardcoded usernames with dynamic values from .env or git config.", "functions": [{"name": "main", "docstring": "Main execution function.", "line_range": [234, 288], "parameters": [], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [22, 24], "parameters": ["self", "project_root"], "decorators": []}, {"name": "_detect_user_info", "docstring": "Detect user info from .env, git config, or environment.", "line_range": [26, 62], "parameters": ["self"], "decorators": []}, {"name": "_load_from_env", "docstring": "Load user info from .env file.", "line_range": [64, 86], "parameters": ["self"], "decorators": []}, {"name": "_load_from_git", "docstring": "Load user info from git config.", "line_range": [88, 120], "parameters": ["self"], "decorators": []}, {"name": "_load_from_environment", "docstring": "Load user info from environment variables.", "line_range": [122, 128], "parameters": ["self"], "decorators": []}, {"name": "get_user_info", "docstring": "Get detected user information.", "line_range": [130, 132], "parameters": ["self"], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [138, 148], "parameters": ["self", "project_root"], "decorators": []}, {"name": "scan_files", "docstring": "Scan for files containing hardcoded usernames.", "line_range": [150, 172], "parameters": ["self"], "decorators": []}, {"name": "fix_file", "docstring": "Fix hardcoded usernames in a single file.", "line_range": [174, 200], "parameters": ["self", "file_path", "dry_run"], "decorators": []}, {"name": "fix_all_files", "docstring": "Fix hardcoded usernames in all project files.", "line_range": [202, 214], "parameters": ["self", "dry_run"], "decorators": []}, {"name": "generate_env_template", "docstring": "Generate .env template with required variables.", "line_range": [216, 231], "parameters": ["self"], "decorators": []}], "classes": [{"name": "UserInfoDetector", "docstring": "Detect user information from various sources.", "line_range": [19, 132], "methods": [{"name": "__init__", "docstring": "", "line_range": [22, 24], "parameters": ["self", "project_root"]}, {"name": "_detect_user_info", "docstring": "Detect user info from .env, git config, or environment.", "line_range": [26, 62], "parameters": ["self"]}, {"name": "_load_from_env", "docstring": "Load user info from .env file.", "line_range": [64, 86], "parameters": ["self"]}, {"name": "_load_from_git", "docstring": "Load user info from git config.", "line_range": [88, 120], "parameters": ["self"]}, {"name": "_load_from_environment", "docstring": "Load user info from environment variables.", "line_range": [122, 128], "parameters": ["self"]}, {"name": "get_user_info", "docstring": "Get detected user information.", "line_range": [130, 132], "parameters": ["self"]}], "bases": []}, {"name": "HardcodeFixer", "docstring": "Fix hardcoded usernames in project files.", "line_range": [135, 231], "methods": [{"name": "__init__", "docstring": "", "line_range": [138, 148], "parameters": ["self", "project_root"]}, {"name": "scan_files", "docstring": "Scan for files containing hardcoded usernames.", "line_range": [150, 172], "parameters": ["self"]}, {"name": "fix_file", "docstring": "Fix hardcoded usernames in a single file.", "line_range": [174, 200], "parameters": ["self", "file_path", "dry_run"]}, {"name": "fix_all_files", "docstring": "Fix hardcoded usernames in all project files.", "line_range": [202, 214], "parameters": ["self", "dry_run"]}, {"name": "generate_env_template", "docstring": "Generate .env template with required variables.", "line_range": [216, 231], "parameters": ["self"]}], "bases": []}], "callgraph": {"__init__": ["UserInfoDetector", "Path"], "_detect_user_info": ["logger.info", "user_info.get", "user_info.update", "self._load_from_env", "self._load_from_git", "self._load_from_environment", "env_vars.items", "env_info.items"], "_load_from_env": ["key.strip", "line.startswith", "line.split", "logger.error", "open", "line.strip", "value.strip", "env_vars.get", "env_file.exists"], "_load_from_git": ["subprocess.run", "re.search", "logger.error", "match.group"], "_load_from_environment": [], "get_user_info": [], "scan_files": ["logger.warning", "any", "content.count", "open", "str", "files_with_hardcode.append", "f.read"], "fix_file": ["logger.info", "content.count", "f.write", "logger.error", "open", "content.replace", "f.read"], "fix_all_files": ["logger.info", "self.scan_files", "len", "self.fix_file", "str"], "generate_env_template": [], "main": ["replacements.items", "print", "parser.add_argument", "logger.info", "fixer.generate_env_template", "argparse.ArgumentParser", "len", "fixer.fix_all_files", "results.items", "fixer.scan_files", "Path", "f.write", "open", "parser.parse_args", "HardcodeFixer"]}, "dependencies": ["Dict", "List", "Optional", "Path", "Tuple", "argparse", "json", "logging", "os", "pathlib", "re", "subprocess", "typing"], "hash": "04fdd50dde3b144c4c93f598ab0748be398c1287e006924d5a573d5b520395a3"}, {"module_id": "backup_before_separation_20250529_152219.scripts.deploy_embedded_files", "path": "backup_before_separation_20250529_152219/scripts/deploy_embedded_files.py", "category": "core", "module_doc": "", "functions": [{"name": "validate_json", "docstring": "", "line_range": [931, 941], "parameters": ["data", "schema", "base_path"], "decorators": []}, {"name": "backup_files", "docstring": "", "line_range": [944, 950], "parameters": ["target_dir", "backup_root"], "decorators": []}, {"name": "deploy_embedded_files", "docstring": "", "line_range": [953, 1007], "parameters": [], "decorators": []}, {"name": "main", "docstring": "", "line_range": [1010, 1011], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"validate_json": ["logger.warning", "RefResolver", "validate", "logger.error"], "backup_files": ["target_dir.exists", "datetime.now", "shutil.copytree", "logger.info"], "deploy_embedded_files": ["EMBEDDED_FILES.get", "Path.cwd", "json.dump", "target_path.open", "logger.info", "target_path.exists", "logger.warning", "backup_files", "Path", "f.write", "logger.error", "validate_json"], "main": ["deploy_embedded_files"]}, "dependencies": ["Path", "RefResolver", "ValidationError", "datetime", "json", "jsonschema", "logging", "pathlib", "shutil", "validate"], "hash": "965c984b688301f0d0c65fc65cc8c95a878218aec94afab5dca3b3c7f65cea19"}, {"module_id": "backup_before_separation_20250529_152219.scripts.validate_epics", "path": "backup_before_separation_20250529_152219/scripts/validate_epics.py", "category": "core", "module_doc": "Epic Data Validator\n\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0445 \u044d\u043f\u0438\u043a\u043e\u0432 \u043f\u0435\u0440\u0435\u0434 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435\u043c GitHub issues", "functions": [{"name": "validate_epic_structure", "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u044d\u043f\u0438\u043a\u0430", "line_range": [12, 35], "parameters": ["epic"], "decorators": []}, {"name": "validate_task_structure", "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0437\u0430\u0434\u0430\u0447\u0438", "line_range": [37, 53], "parameters": ["task", "epic_id"], "decorators": []}, {"name": "validate_priorities", "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043e\u0432", "line_range": [55, 68], "parameters": ["data"], "decorators": []}, {"name": "validate_task_ids", "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c ID \u0437\u0430\u0434\u0430\u0447", "line_range": [70, 82], "parameters": ["data"], "decorators": []}, {"name": "main", "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438", "line_range": [84, 131], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"validate_epic_structure": ["isinstance", "errors.append"], "validate_task_structure": ["task.get", "isinstance", "errors.append"], "validate_priorities": ["task.get", "epic.get", "data.get", "errors.append"], "validate_task_ids": ["set", "seen_ids.add", "task.get", "epic.get", "errors.append", "data.get"], "main": ["print", "all_errors.extend", "validate_task_structure", "e.get", "validate_task_ids", "len", "validate_priorities", "all_errors.append", "sys.exit", "epics_file.exists", "Path", "isinstance", "open", "validate_epic_structure", "epic.get", "sum", "json.load"]}, "dependencies": ["Any", "Dict", "List", "Path", "json", "pathlib", "sys", "typing"], "hash": "43fb177eab31592c2b7c17c990f728cb1401eeba26a2e3191857ca218208a3df"}, {"module_id": "backup_before_separation_20250529_152219.scripts.validate_json", "path": "backup_before_separation_20250529_152219/scripts/validate_json.py", "category": "core", "module_doc": "JSON Validation Script\nValidates JSON files against their respective schemas.", "functions": [{"name": "load_json", "docstring": "Load JSON file with error handling.", "line_range": [13, 23], "parameters": ["file_path"], "decorators": []}, {"name": "validate_json", "docstring": "Validate a JSON file against a schema.", "line_range": [26, 49], "parameters": ["file_path", "schema_path"], "decorators": []}], "classes": [], "callgraph": {"load_json": ["print", "json.load", "open"], "validate_json": ["print", "validator.validate", "Draft7Validator", "Path", "load_json", "str"]}, "dependencies": ["Draft7Validator", "Path", "ValidationError", "json", "jsonschema", "pathlib", "sys", "validate"], "hash": "0d360b788079e8804f864e0cef5eb33006fb4dbae00eaaea95ef0d692e79640d"}, {"module_id": "backup_before_separation_20250529_152219.scripts.create_tasks_index", "path": "backup_before_separation_20250529_152219/scripts/create_tasks_index.py", "category": "core", "module_doc": "Tasks Index Creator\nScans all documentation files and creates comprehensive index of tasks, EPICs, TODOs, and other actionable items.", "functions": [{"name": "main", "docstring": "Main execution function.", "line_range": [469, 515], "parameters": [], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [42, 44], "parameters": ["self", "project_root"], "decorators": []}, {"name": "_init_patterns", "docstring": "Initialize regex patterns for task extraction.", "line_range": [46, 73], "parameters": ["self"], "decorators": []}, {"name": "extract_from_markdown", "docstring": "Extract tasks from markdown file.", "line_range": [75, 107], "parameters": ["self", "file_path"], "decorators": []}, {"name": "_extract_status", "docstring": "Extract document status.", "line_range": [109, 120], "parameters": ["self", "content"], "decorators": []}, {"name": "_extract_priority", "docstring": "Extract document priority.", "line_range": [122, 135], "parameters": ["self", "content"], "decorators": []}, {"name": "_extract_date", "docstring": "Extract document date.", "line_range": [137, 142], "parameters": ["self", "content"], "decorators": []}, {"name": "_extract_epics", "docstring": "Extract EPIC items.", "line_range": [144, 168], "parameters": ["self", "content", "file_path", "doc_status", "doc_priority", "doc_date"], "decorators": []}, {"name": "_extract_tasks", "docstring": "Extract explicit task items.", "line_range": [170, 194], "parameters": ["self", "content", "file_path", "doc_status", "doc_priority", "doc_date"], "decorators": []}, {"name": "_extract_todos", "docstring": "Extract TODO items.", "line_range": [196, 219], "parameters": ["self", "content", "file_path", "doc_status", "doc_priority", "doc_date"], "decorators": []}, {"name": "_extract_phases", "docstring": "Extract phase/step items.", "line_range": [221, 245], "parameters": ["self", "content", "file_path", "doc_status", "doc_priority", "doc_date"], "decorators": []}, {"name": "_extract_checkboxes", "docstring": "Extract checkbox items as tasks.", "line_range": [247, 275], "parameters": ["self", "content", "file_path", "doc_status", "doc_priority", "doc_date"], "decorators": []}, {"name": "_extract_context", "docstring": "Extract surrounding context for a match.", "line_range": [277, 286], "parameters": ["self", "content", "start", "end", "context_lines"], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [292, 294], "parameters": ["self", "project_root"], "decorators": []}, {"name": "scan_documentation", "docstring": "Scan all documentation files for tasks.", "line_range": [296, 314], "parameters": ["self"], "decorators": []}, {"name": "generate_index", "docstring": "Generate comprehensive task index.", "line_range": [316, 367], "parameters": ["self", "tasks"], "decorators": []}, {"name": "generate_summary_report", "docstring": "Generate human-readable summary report.", "line_range": [369, 446], "parameters": ["self", "index"], "decorators": []}, {"name": "save_index", "docstring": "Save index and summary to files.", "line_range": [448, 466], "parameters": ["self", "index", "summary", "output_dir"], "decorators": []}], "classes": [{"name": "Task", "docstring": "Represents a single task or actionable item.", "line_range": [21, 36], "methods": [], "bases": []}, {"name": "TaskExtractor", "docstring": "Extract tasks from various document formats.", "line_range": [39, 286], "methods": [{"name": "__init__", "docstring": "", "line_range": [42, 44], "parameters": ["self", "project_root"]}, {"name": "_init_patterns", "docstring": "Initialize regex patterns for task extraction.", "line_range": [46, 73], "parameters": ["self"]}, {"name": "extract_from_markdown", "docstring": "Extract tasks from markdown file.", "line_range": [75, 107], "parameters": ["self", "file_path"]}, {"name": "_extract_status", "docstring": "Extract document status.", "line_range": [109, 120], "parameters": ["self", "content"]}, {"name": "_extract_priority", "docstring": "Extract document priority.", "line_range": [122, 135], "parameters": ["self", "content"]}, {"name": "_extract_date", "docstring": "Extract document date.", "line_range": [137, 142], "parameters": ["self", "content"]}, {"name": "_extract_epics", "docstring": "Extract EPIC items.", "line_range": [144, 168], "parameters": ["self", "content", "file_path", "doc_status", "doc_priority", "doc_date"]}, {"name": "_extract_tasks", "docstring": "Extract explicit task items.", "line_range": [170, 194], "parameters": ["self", "content", "file_path", "doc_status", "doc_priority", "doc_date"]}, {"name": "_extract_todos", "docstring": "Extract TODO items.", "line_range": [196, 219], "parameters": ["self", "content", "file_path", "doc_status", "doc_priority", "doc_date"]}, {"name": "_extract_phases", "docstring": "Extract phase/step items.", "line_range": [221, 245], "parameters": ["self", "content", "file_path", "doc_status", "doc_priority", "doc_date"]}, {"name": "_extract_checkboxes", "docstring": "Extract checkbox items as tasks.", "line_range": [247, 275], "parameters": ["self", "content", "file_path", "doc_status", "doc_priority", "doc_date"]}, {"name": "_extract_context", "docstring": "Extract surrounding context for a match.", "line_range": [277, 286], "parameters": ["self", "content", "start", "end", "context_lines"]}], "bases": []}, {"name": "TaskIndexGenerator", "docstring": "Generate comprehensive task index.", "line_range": [289, 466], "methods": [{"name": "__init__", "docstring": "", "line_range": [292, 294], "parameters": ["self", "project_root"]}, {"name": "scan_documentation", "docstring": "Scan all documentation files for tasks.", "line_range": [296, 314], "parameters": ["self"]}, {"name": "generate_index", "docstring": "Generate comprehensive task index.", "line_range": [316, 367], "parameters": ["self", "tasks"]}, {"name": "generate_summary_report", "docstring": "Generate human-readable summary report.", "line_range": [369, 446], "parameters": ["self", "index"]}, {"name": "save_index", "docstring": "Save index and summary to files.", "line_range": [448, 466], "parameters": ["self", "index", "summary", "output_dir"]}], "bases": []}], "callgraph": {"__init__": ["TaskExtractor", "Path"], "_init_patterns": ["re.compile"], "extract_from_markdown": ["self._extract_status", "open", "tasks.extend", "self._extract_checkboxes", "self._extract_phases", "self._extract_priority", "logger.error", "self._extract_todos", "self._extract_tasks", "self._extract_epics", "f.read", "self._extract_date"], "_extract_status": ["match.group"], "_extract_priority": ["match.group"], "_extract_date": ["datetime.now", "match.group"], "_extract_epics": ["match.start", "self._extract_context", "Task", "match.end", "tasks.append", "str", "match.group"], "_extract_tasks": ["match.start", "self._extract_context", "Task", "match.end", "tasks.append", "str", "match.group"], "_extract_todos": ["match.start", "Task", "tasks.append", "str", "match.group"], "_extract_phases": ["match.start", "self._extract_context", "Task", "match.end", "tasks.append", "str", "match.group"], "_extract_checkboxes": ["match.start", "any", "Task", "task_title.upper", "tasks.append", "str", "match.group"], "_extract_context": ["min", "context.strip", "len", "max", "content.split"], "scan_documentation": ["docs_dir.exists", "all_tasks.extend", "docs_dir.glob", "logger.info"], "generate_index": ["by_priority.items", "len", "by_category.items", "datetime.now", "by_file.items", "asdict", "by_status.items"], "generate_summary_report": ["sorted", "status.upper", "len", "category.upper", "Path", "priority.upper", "file_categories.items"], "save_index": ["json.dump", "logger.info", "output_path.mkdir", "Path", "f.write", "open"], "main": ["generator.generate_index", "parser.add_argument", "generator.save_index", "logger.info", "generator.generate_summary_report", "generator.scan_documentation", "argparse.ArgumentParser", "print", "len", "by_category.get", "sorted", "by_category.items", "by_status.get", "TaskIndexGenerator", "parser.parse_args", "by_status.items"]}, "dependencies": ["Dict", "List", "Optional", "Path", "Tuple", "argparse", "asdict", "dataclass", "dataclasses", "datetime", "json", "logging", "os", "pathlib", "re", "typing"], "hash": "8dc454229e01725267e1ece8a1363faf1501013df5f34f371865de1d1d386035"}, {"module_id": "backup_before_separation_20250529_152219.scripts.team.__init__", "path": "backup_before_separation_20250529_152219/scripts/team/__init__.py", "category": "cli", "module_doc": "", "functions": [], "classes": [], "callgraph": {}, "dependencies": [], "hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"}, {"module_id": "src.llmstruct.workflow_orchestrator", "path": "src/llmstruct/workflow_orchestrator.py", "category": "core", "module_doc": "AI Workflow Orchestrator - Integration Layer for Existing llmstruct Architecture\nExtends CopilotContextManager and SmartContextOrchestrator instead of duplicating", "functions": [{"name": "main", "docstring": "CLI interface that integrates with existing llmstruct architecture", "line_range": [650, 687], "parameters": [], "decorators": []}, {"name": "__post_init__", "docstring": "", "line_range": [62, 70], "parameters": ["self"], "decorators": []}, {"name": "__post_init__", "docstring": "", "line_range": [89, 101], "parameters": ["self"], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [110, 151], "parameters": ["self", "project_root", "debug"], "decorators": []}, {"name": "get_ai_onboarding_guide", "docstring": "Generate comprehensive AI onboarding guide using existing architecture", "line_range": [153, 163], "parameters": ["self"], "decorators": []}, {"name": "_get_project_overview_from_struct", "docstring": "Get project overview from struct.json analysis", "line_range": [165, 183], "parameters": ["self"], "decorators": []}, {"name": "_get_existing_architecture_guide", "docstring": "Guide to existing llmstruct architecture", "line_range": [185, 207], "parameters": ["self"], "decorators": []}, {"name": "_get_copilot_integration_guide", "docstring": "Guide for proper CopilotContextManager usage", "line_range": [209, 222], "parameters": ["self"], "decorators": []}, {"name": "_get_context_orchestration_guide", "docstring": "Guide for SmartContextOrchestrator usage", "line_range": [224, 239], "parameters": ["self"], "decorators": []}, {"name": "_get_struct_analysis_guide", "docstring": "Guide for proper struct.json analysis approach", "line_range": [241, 259], "parameters": ["self"], "decorators": []}, {"name": "get_current_context", "docstring": "Get comprehensive current context using existing architecture", "line_range": [261, 300], "parameters": ["self"], "decorators": []}, {"name": "_get_struct_analysis", "docstring": "Analyze struct.json for current codebase state", "line_range": [302, 356], "parameters": ["self"], "decorators": []}, {"name": "_analyze_architecture_from_struct", "docstring": "Analyze architecture patterns from struct.json", "line_range": [358, 376], "parameters": ["self", "struct_data"], "decorators": []}, {"name": "_analyze_function_duplication", "docstring": "Analyze function duplication across modules", "line_range": [378, 399], "parameters": ["self", "struct_data"], "decorators": []}, {"name": "_calculate_complexity_metrics", "docstring": "Calculate complexity metrics from struct.json", "line_range": [401, 417], "parameters": ["self", "struct_data"], "decorators": []}, {"name": "_calculate_complexity_score", "docstring": "Calculate overall complexity score", "line_range": [419, 432], "parameters": ["self", "stats"], "decorators": []}, {"name": "_get_orchestrator_state", "docstring": "Get SmartContextOrchestrator state", "line_range": [434, 445], "parameters": ["self"], "decorators": []}, {"name": "analyze_codebase_for_duplicates", "docstring": "Analyze codebase for duplicate functions using struct.json", "line_range": [447, 495], "parameters": ["self"], "decorators": []}, {"name": "sync_with_existing_architecture", "docstring": "Sync with existing llmstruct architecture instead of duplicating", "line_range": [497, 520], "parameters": ["self"], "decorators": []}, {"name": "create_task", "docstring": "Create new task (this is new functionality, not duplication)", "line_range": [526, 554], "parameters": ["self", "title", "description", "priority", "tags", "dependencies"], "decorators": []}, {"name": "get_active_tasks", "docstring": "Get all active tasks", "line_range": [556, 564], "parameters": ["self"], "decorators": []}, {"name": "_load_json_safe", "docstring": "Safe JSON loading with error handling", "line_range": [566, 576], "parameters": ["self", "file_path"], "decorators": []}, {"name": "_save_json_safe", "docstring": "Safe JSON saving with error handling", "line_range": [578, 587], "parameters": ["self", "file_path", "data"], "decorators": []}, {"name": "_get_active_session_context", "docstring": "Get current session context", "line_range": [590, 594], "parameters": ["self"], "decorators": []}, {"name": "_identify_key_components", "docstring": "Identify key components from struct analysis", "line_range": [596, 607], "parameters": ["self", "struct_data"], "decorators": []}, {"name": "_get_workflow_patterns", "docstring": "Define workflow patterns that integrate with existing architecture", "line_range": [609, 629], "parameters": ["self"], "decorators": []}, {"name": "_get_available_commands", "docstring": "Available commands that work with existing architecture", "line_range": [631, 647], "parameters": ["self"], "decorators": []}], "classes": [{"name": "TaskStatus", "docstring": "", "line_range": [29, 34], "methods": [], "bases": ["Enum"]}, {"name": "SessionType", "docstring": "", "line_range": [37, 42], "methods": [], "bases": ["Enum"]}, {"name": "Task", "docstring": "Structured task representation", "line_range": [46, 70], "methods": [{"name": "__post_init__", "docstring": "", "line_range": [62, 70], "parameters": ["self"]}], "bases": []}, {"name": "Session", "docstring": "AI work session with context and goals", "line_range": [74, 101], "methods": [{"name": "__post_init__", "docstring": "", "line_range": [89, 101], "parameters": ["self"]}], "bases": []}, {"name": "WorkflowOrchestrator", "docstring": "Integration layer that extends existing llmstruct architecture\nUses CopilotContextManager, SmartContextOrchestrator, and struct.json analysis", "line_range": [104, 647], "methods": [{"name": "__init__", "docstring": "", "line_range": [110, 151], "parameters": ["self", "project_root", "debug"]}, {"name": "get_ai_onboarding_guide", "docstring": "Generate comprehensive AI onboarding guide using existing architecture", "line_range": [153, 163], "parameters": ["self"]}, {"name": "_get_project_overview_from_struct", "docstring": "Get project overview from struct.json analysis", "line_range": [165, 183], "parameters": ["self"]}, {"name": "_get_existing_architecture_guide", "docstring": "Guide to existing llmstruct architecture", "line_range": [185, 207], "parameters": ["self"]}, {"name": "_get_copilot_integration_guide", "docstring": "Guide for proper CopilotContextManager usage", "line_range": [209, 222], "parameters": ["self"]}, {"name": "_get_context_orchestration_guide", "docstring": "Guide for SmartContextOrchestrator usage", "line_range": [224, 239], "parameters": ["self"]}, {"name": "_get_struct_analysis_guide", "docstring": "Guide for proper struct.json analysis approach", "line_range": [241, 259], "parameters": ["self"]}, {"name": "get_current_context", "docstring": "Get comprehensive current context using existing architecture", "line_range": [261, 300], "parameters": ["self"]}, {"name": "_get_struct_analysis", "docstring": "Analyze struct.json for current codebase state", "line_range": [302, 356], "parameters": ["self"]}, {"name": "_analyze_architecture_from_struct", "docstring": "Analyze architecture patterns from struct.json", "line_range": [358, 376], "parameters": ["self", "struct_data"]}, {"name": "_analyze_function_duplication", "docstring": "Analyze function duplication across modules", "line_range": [378, 399], "parameters": ["self", "struct_data"]}, {"name": "_calculate_complexity_metrics", "docstring": "Calculate complexity metrics from struct.json", "line_range": [401, 417], "parameters": ["self", "struct_data"]}, {"name": "_calculate_complexity_score", "docstring": "Calculate overall complexity score", "line_range": [419, 432], "parameters": ["self", "stats"]}, {"name": "_get_orchestrator_state", "docstring": "Get SmartContextOrchestrator state", "line_range": [434, 445], "parameters": ["self"]}, {"name": "analyze_codebase_for_duplicates", "docstring": "Analyze codebase for duplicate functions using struct.json", "line_range": [447, 495], "parameters": ["self"]}, {"name": "sync_with_existing_architecture", "docstring": "Sync with existing llmstruct architecture instead of duplicating", "line_range": [497, 520], "parameters": ["self"]}, {"name": "create_task", "docstring": "Create new task (this is new functionality, not duplication)", "line_range": [526, 554], "parameters": ["self", "title", "description", "priority", "tags", "dependencies"]}, {"name": "get_active_tasks", "docstring": "Get all active tasks", "line_range": [556, 564], "parameters": ["self"]}, {"name": "_load_json_safe", "docstring": "Safe JSON loading with error handling", "line_range": [566, 576], "parameters": ["self", "file_path"]}, {"name": "_save_json_safe", "docstring": "Safe JSON saving with error handling", "line_range": [578, 587], "parameters": ["self", "file_path", "data"]}, {"name": "_get_active_session_context", "docstring": "Get current session context", "line_range": [590, 594], "parameters": ["self"]}, {"name": "_identify_key_components", "docstring": "Identify key components from struct analysis", "line_range": [596, 607], "parameters": ["self", "struct_data"]}, {"name": "_get_workflow_patterns", "docstring": "Define workflow patterns that integrate with existing architecture", "line_range": [609, 629], "parameters": ["self"]}, {"name": "_get_available_commands", "docstring": "Available commands that work with existing architecture", "line_range": [631, 647], "parameters": ["self"]}], "bases": []}], "callgraph": {"__post_init__": [], "__init__": ["print", "CLIConfig", "Path", "SmartContextOrchestrator", "UniversalConverter", "CopilotContextManager", "time.time", "SystemCapabilityDiscovery", "str"], "get_ai_onboarding_guide": ["self._get_struct_analysis_guide", "self._get_existing_architecture_guide", "self._get_copilot_integration_guide", "self._get_project_overview_from_struct", "self._get_context_orchestration_guide", "self._get_workflow_patterns", "self._get_available_commands"], "_get_project_overview_from_struct": ["struct_data.get", "self._identify_key_components", "logger.warning", "len", "self._analyze_architecture_from_struct", "open", "struct_path.exists", "json.load"], "_get_existing_architecture_guide": [], "_get_copilot_integration_guide": [], "_get_context_orchestration_guide": [], "_get_struct_analysis_guide": [], "get_current_context": ["self.get_active_tasks", "print", "logger.warning", "self._get_active_session_context", "self._get_orchestrator_state", "self._get_struct_analysis", "isinstance", "time.time", "str"], "_get_struct_analysis": ["print", "struct_data.get", "len", "self._analyze_function_duplication", "self._calculate_complexity_metrics", "self._analyze_architecture_from_struct", "open", "struct_path.exists", "time.time", "logger.error", "json.load", "str"], "_analyze_architecture_from_struct": ["directories.items", "struct_data.get", "list", "len", "directories.keys", "Path"], "_analyze_function_duplication": ["len", "function_names.items", "struct_data.get", "module.get"], "_calculate_complexity_metrics": ["struct_data.get", "round", "m.get", "self._calculate_complexity_score", "len", "stats.get", "sum"], "_calculate_complexity_score": ["stats.get", "round"], "_get_orchestrator_state": ["str"], "analyze_codebase_for_duplicates": ["struct_analysis.get", "recommendations.append", "print", "len", "duplication.get", "self._get_struct_analysis", "time.time"], "sync_with_existing_architecture": ["json.dump", "logger.error", "str", "open"], "create_task": ["self._save_json_safe", "self._load_json_safe", "logger.info", "uuid.uuid4", "Task", "asdict", "str"], "get_active_tasks": ["t.get", "self._load_json_safe"], "_load_json_safe": ["file_path.exists", "json.load", "logger.error", "open"], "_save_json_safe": ["json.dump", "logger.error", "open"], "_get_active_session_context": ["asdict"], "_identify_key_components": ["key_components.append", "len", "struct_data.get", "module.get"], "_get_workflow_patterns": [], "_get_available_commands": [], "main": ["print", "parser.add_argument", "argparse.ArgumentParser", "context.get", "json.dumps", "len", "orchestrator.get_current_context", "orchestrator.analyze_codebase_for_duplicates", "results.items", "orchestrator.sync_with_existing_architecture", "orchestrator.get_ai_onboarding_guide", "parser.parse_args", "WorkflowOrchestrator"]}, "dependencies": ["Any", "CLIConfig", "CopilotContextManager", "Dict", "Enum", "List", "Optional", "Path", "SmartContextOrchestrator", "SystemCapabilityDiscovery", "Union", "UniversalConverter", "ai_self_awareness", "argparse", "asdict", "cli_config", "context_orchestrator", "copilot", "dataclass", "dataclasses", "datetime", "enum", "json", "logging", "os", "parsers.universal_converter", "pathlib", "time", "typing", "uuid"], "hash": "6a74a0602bdd6d8fcf4989c77c784c041b3272e9ad7d14d6e42e701c07d17c40"}, {"module_id": "src.llmstruct.cli_config", "path": "src/llmstruct/cli_config.py", "category": "core", "module_doc": "CLI configuration management.", "functions": [{"name": "__init__", "docstring": "Initialize configuration manager.", "line_range": [20, 24], "parameters": ["self", "root_dir"], "decorators": []}, {"name": "_load_config", "docstring": "Load configuration from llmstruct.toml.", "line_range": [26, 34], "parameters": ["self"], "decorators": []}, {"name": "get_cache_config", "docstring": "Get cache configuration section.", "line_range": [36, 38], "parameters": ["self"], "decorators": []}, {"name": "get_copilot_config", "docstring": "Get Copilot configuration section.", "line_range": [40, 42], "parameters": ["self"], "decorators": []}, {"name": "get_queue_config", "docstring": "Get queue configuration section.", "line_range": [44, 46], "parameters": ["self"], "decorators": []}, {"name": "get_context_config", "docstring": "Get context configuration section.", "line_range": [48, 50], "parameters": ["self"], "decorators": []}, {"name": "get_gitignore_patterns", "docstring": "Load and normalize patterns from .gitignore.", "line_range": [52, 66], "parameters": ["self"], "decorators": []}, {"name": "get_exclude_dirs", "docstring": "Get directories to exclude from scanning.", "line_range": [68, 82], "parameters": ["self"], "decorators": []}, {"name": "get_include_patterns", "docstring": "Get file patterns to include.", "line_range": [84, 89], "parameters": ["self"], "decorators": []}, {"name": "get_exclude_patterns", "docstring": "Get file patterns to exclude.", "line_range": [91, 96], "parameters": ["self"], "decorators": []}, {"name": "get_max_file_size", "docstring": "Get maximum file size for processing (in bytes).", "line_range": [98, 100], "parameters": ["self"], "decorators": []}, {"name": "get_auto_update_config", "docstring": "Get auto-update configuration.", "line_range": [102, 104], "parameters": ["self"], "decorators": []}, {"name": "is_auto_update_enabled", "docstring": "Check if auto-update is enabled.", "line_range": [106, 108], "parameters": ["self"], "decorators": []}, {"name": "get_struct_file_path", "docstring": "Get path to struct.json file.", "line_range": [110, 112], "parameters": ["self"], "decorators": []}, {"name": "get_context_file_path", "docstring": "Get path to context file.", "line_range": [114, 116], "parameters": ["self"], "decorators": []}, {"name": "save_config", "docstring": "Save current configuration to file.", "line_range": [118, 124], "parameters": ["self"], "decorators": []}, {"name": "update_config", "docstring": "Update configuration value.", "line_range": [126, 131], "parameters": ["self", "section", "key", "value"], "decorators": []}, {"name": "reload_config", "docstring": "Reload configuration from file.", "line_range": [133, 135], "parameters": ["self"], "decorators": []}], "classes": [{"name": "CLIConfig", "docstring": "Manages CLI configuration from llmstruct.toml and other sources.", "line_range": [17, 135], "methods": [{"name": "__init__", "docstring": "Initialize configuration manager.", "line_range": [20, 24], "parameters": ["self", "root_dir"]}, {"name": "_load_config", "docstring": "Load configuration from llmstruct.toml.", "line_range": [26, 34], "parameters": ["self"]}, {"name": "get_cache_config", "docstring": "Get cache configuration section.", "line_range": [36, 38], "parameters": ["self"]}, {"name": "get_copilot_config", "docstring": "Get Copilot configuration section.", "line_range": [40, 42], "parameters": ["self"]}, {"name": "get_queue_config", "docstring": "Get queue configuration section.", "line_range": [44, 46], "parameters": ["self"]}, {"name": "get_context_config", "docstring": "Get context configuration section.", "line_range": [48, 50], "parameters": ["self"]}, {"name": "get_gitignore_patterns", "docstring": "Load and normalize patterns from .gitignore.", "line_range": [52, 66], "parameters": ["self"]}, {"name": "get_exclude_dirs", "docstring": "Get directories to exclude from scanning.", "line_range": [68, 82], "parameters": ["self"]}, {"name": "get_include_patterns", "docstring": "Get file patterns to include.", "line_range": [84, 89], "parameters": ["self"]}, {"name": "get_exclude_patterns", "docstring": "Get file patterns to exclude.", "line_range": [91, 96], "parameters": ["self"]}, {"name": "get_max_file_size", "docstring": "Get maximum file size for processing (in bytes).", "line_range": [98, 100], "parameters": ["self"]}, {"name": "get_auto_update_config", "docstring": "Get auto-update configuration.", "line_range": [102, 104], "parameters": ["self"]}, {"name": "is_auto_update_enabled", "docstring": "Check if auto-update is enabled.", "line_range": [106, 108], "parameters": ["self"]}, {"name": "get_struct_file_path", "docstring": "Get path to struct.json file.", "line_range": [110, 112], "parameters": ["self"]}, {"name": "get_context_file_path", "docstring": "Get path to context file.", "line_range": [114, 116], "parameters": ["self"]}, {"name": "save_config", "docstring": "Save current configuration to file.", "line_range": [118, 124], "parameters": ["self"]}, {"name": "update_config", "docstring": "Update configuration value.", "line_range": [126, 131], "parameters": ["self", "section", "key", "value"]}, {"name": "reload_config", "docstring": "Reload configuration from file.", "line_range": [133, 135], "parameters": ["self"]}], "bases": []}], "callgraph": {"__init__": ["Path", "self._load_config"], "_load_config": ["logging.error", "toml.load"], "get_cache_config": [], "get_copilot_config": [], "get_queue_config": [], "get_context_config": [], "get_gitignore_patterns": ["line.startswith", "gitignore_path.open", "gitignore_path.exists", "logging.error", "Path", "line.strip"], "get_exclude_dirs": ["set", "parsing_config.get", "cli_config.get", "list"], "get_include_patterns": ["parsing_config.get", "cli_config.get"], "get_exclude_patterns": ["parsing_config.get", "cli_config.get"], "get_max_file_size": [], "get_auto_update_config": [], "is_auto_update_enabled": ["self.get_auto_update_config"], "get_struct_file_path": [], "get_context_file_path": [], "save_config": ["logging.error", "toml.dump"], "update_config": ["self.save_config"], "reload_config": ["self._load_config"]}, "dependencies": ["Any", "Dict", "List", "Path", "logging", "pathlib", "toml", "typing"], "hash": "4e3a5903ff3fcd932118bf5521902da18bc72c67f93835354f70576d1413de49"}, {"module_id": "src.llmstruct.ai_self_monitor", "path": "src/llmstruct/ai_self_monitor.py", "category": "core", "module_doc": "AI Self-Monitoring System\nTracks AI usage patterns and ensures proper llmstruct integration.", "functions": [{"name": "initialize_ai_monitor", "docstring": "Initialize global AI monitor.", "line_range": [433, 437], "parameters": ["project_root"], "decorators": []}, {"name": "get_ai_monitor", "docstring": "Get current AI monitor instance.", "line_range": [440, 442], "parameters": [], "decorators": []}, {"name": "record_ai_usage", "docstring": "Global function to record AI usage.", "line_range": [445, 456], "parameters": ["query", "tools_used", "used_llmstruct", "context_tags", "metadata"], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [60, 80], "parameters": ["self", "project_root"], "decorators": []}, {"name": "record_ai_interaction", "docstring": "Record an AI interaction for monitoring.", "line_range": [82, 121], "parameters": ["self", "query", "tools_used", "used_llmstruct", "context_tags", "metadata"], "decorators": []}, {"name": "_analyze_interaction_patterns", "docstring": "Analyze patterns in AI interaction.", "line_range": [123, 157], "parameters": ["self", "query", "tools_used", "used_llmstruct", "context_tags"], "decorators": []}, {"name": "_calculate_effectiveness_score", "docstring": "Calculate effectiveness score for interaction.", "line_range": [159, 188], "parameters": ["self", "patterns", "tools_used", "used_llmstruct"], "decorators": []}, {"name": "_check_immediate_feedback", "docstring": "Check if immediate feedback/correction is needed.", "line_range": [190, 209], "parameters": ["self", "event"], "decorators": []}, {"name": "_log_immediate_feedback", "docstring": "Log immediate feedback message.", "line_range": [211, 214], "parameters": ["self", "message"], "decorators": []}, {"name": "analyze_behavior_trends", "docstring": "Analyze AI behavior trends over specified period.", "line_range": [216, 300], "parameters": ["self", "days"], "decorators": []}, {"name": "_generate_recommendations", "docstring": "Generate specific recommendations for improvement.", "line_range": [302, 335], "parameters": ["self", "llmstruct_usage", "context_awareness", "tool_diversity", "effectiveness"], "decorators": []}, {"name": "get_real_time_guidance", "docstring": "Get real-time guidance for current query.", "line_range": [337, 365], "parameters": ["self", "current_query"], "decorators": []}, {"name": "_load_events", "docstring": "Load events from disk.", "line_range": [367, 379], "parameters": ["self"], "decorators": []}, {"name": "_save_events", "docstring": "Save events to disk.", "line_range": [381, 388], "parameters": ["self"], "decorators": []}, {"name": "_save_analysis", "docstring": "Save behavior analysis to disk.", "line_range": [390, 397], "parameters": ["self", "analysis"], "decorators": []}, {"name": "get_monitoring_report", "docstring": "Get comprehensive monitoring report.", "line_range": [399, 426], "parameters": ["self"], "decorators": []}], "classes": [{"name": "AIBehaviorPattern", "docstring": "AI behavior patterns to monitor.", "line_range": [18, 26], "methods": [], "bases": ["Enum"]}, {"name": "AIUsageEvent", "docstring": "Single AI usage event.", "line_range": [30, 39], "methods": [], "bases": []}, {"name": "AIBehaviorAnalysis", "docstring": "Analysis of AI behavior patterns.", "line_range": [43, 51], "methods": [], "bases": []}, {"name": "AISelfMonitor", "docstring": "Monitors AI behavior and ensures proper llmstruct integration.\nProvides feedback and corrective guidance.", "line_range": [54, 426], "methods": [{"name": "__init__", "docstring": "", "line_range": [60, 80], "parameters": ["self", "project_root"]}, {"name": "record_ai_interaction", "docstring": "Record an AI interaction for monitoring.", "line_range": [82, 121], "parameters": ["self", "query", "tools_used", "used_llmstruct", "context_tags", "metadata"]}, {"name": "_analyze_interaction_patterns", "docstring": "Analyze patterns in AI interaction.", "line_range": [123, 157], "parameters": ["self", "query", "tools_used", "used_llmstruct", "context_tags"]}, {"name": "_calculate_effectiveness_score", "docstring": "Calculate effectiveness score for interaction.", "line_range": [159, 188], "parameters": ["self", "patterns", "tools_used", "used_llmstruct"]}, {"name": "_check_immediate_feedback", "docstring": "Check if immediate feedback/correction is needed.", "line_range": [190, 209], "parameters": ["self", "event"]}, {"name": "_log_immediate_feedback", "docstring": "Log immediate feedback message.", "line_range": [211, 214], "parameters": ["self", "message"]}, {"name": "analyze_behavior_trends", "docstring": "Analyze AI behavior trends over specified period.", "line_range": [216, 300], "parameters": ["self", "days"]}, {"name": "_generate_recommendations", "docstring": "Generate specific recommendations for improvement.", "line_range": [302, 335], "parameters": ["self", "llmstruct_usage", "context_awareness", "tool_diversity", "effectiveness"]}, {"name": "get_real_time_guidance", "docstring": "Get real-time guidance for current query.", "line_range": [337, 365], "parameters": ["self", "current_query"]}, {"name": "_load_events", "docstring": "Load events from disk.", "line_range": [367, 379], "parameters": ["self"]}, {"name": "_save_events", "docstring": "Save events to disk.", "line_range": [381, 388], "parameters": ["self"]}, {"name": "_save_analysis", "docstring": "Save behavior analysis to disk.", "line_range": [390, 397], "parameters": ["self", "analysis"]}, {"name": "get_monitoring_report", "docstring": "Get comprehensive monitoring report.", "line_range": [399, 426], "parameters": ["self"]}], "bases": []}], "callgraph": {"__init__": ["self._load_events", "Path", "logger.info"], "record_ai_interaction": ["self._check_immediate_feedback", "self._analyze_interaction_patterns", "len", "datetime.now", "AIUsageEvent", "self._calculate_effectiveness_score", "self._save_events"], "_analyze_interaction_patterns": ["query.lower", "any", "patterns.append"], "_calculate_effectiveness_score": ["min", "len", "set", "pattern_scores.get"], "_check_immediate_feedback": ["self._log_immediate_feedback", "any"], "_log_immediate_feedback": ["logger.warning", "print"], "analyze_behavior_trends": ["datetime.fromisoformat", "set", "AIBehaviorAnalysis", "improvements.append", "datetime.now", "len", "all_tools.update", "any", "timedelta", "self._save_analysis", "sum", "self._generate_recommendations", "strengths.append"], "_generate_recommendations": ["recommendations.append", "recommendations.extend"], "get_real_time_guidance": ["guidance.append", "current_query.lower", "any"], "_load_events": ["logger.info", "len", "AIUsageEvent", "logger.error", "open", "json.load"], "_save_events": ["json.dump", "asdict", "logger.error", "open"], "_save_analysis": ["json.dump", "asdict", "logger.error", "open"], "get_monitoring_report": ["self.analyze_behavior_trends", "len", "chr", "datetime.now"], "initialize_ai_monitor": ["AISelfMonitor"], "get_ai_monitor": [], "record_ai_usage": ["_monitor_instance.record_ai_interaction"]}, "dependencies": ["Any", "Dict", "Enum", "List", "Optional", "Path", "Set", "asdict", "dataclass", "dataclasses", "datetime", "enum", "json", "logging", "pathlib", "time", "timedelta", "typing"], "hash": "312d43ae77d168866f0ce34f6f89d119d4dc338568049a9611997c4dee8059b4"}, {"module_id": "src.llmstruct.grok", "path": "src/llmstruct/grok.py", "category": "core", "module_doc": "", "functions": [{"name": "test_grok", "docstring": "", "line_range": [24, 30], "parameters": ["api_key", "prompt", "proxy"], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [6, 11], "parameters": ["self", "api_key", "proxy"], "decorators": []}, {"name": "generate", "docstring": "", "line_range": [13, 21], "parameters": ["self", "prompt", "model"], "decorators": []}], "classes": [{"name": "GrokClient", "docstring": "", "line_range": [5, 21], "methods": [{"name": "__init__", "docstring": "", "line_range": [6, 11], "parameters": ["self", "api_key", "proxy"]}, {"name": "generate", "docstring": "", "line_range": [13, 21], "parameters": ["self", "prompt", "model"]}], "bases": []}], "callgraph": {"__init__": ["requests.Session"], "generate": ["len", "prompt.split", "response.raise_for_status", "response.json"], "test_grok": ["time.perf_counter", "client.generate", "GrokClient"]}, "dependencies": ["requests", "time"], "hash": "b6bbedf1c8576d9a3f89f34490ff01f2ff2662991c93033ef3dadb5cd99929d2"}, {"module_id": "src.llmstruct.cli_commands", "path": "src/llmstruct/cli_commands.py", "category": "core", "module_doc": "CLI command processing and handlers.", "functions": [{"name": "__init__", "docstring": "Initialize command processor.", "line_range": [33, 72], "parameters": ["self", "root_dir", "config", "utils"], "decorators": []}, {"name": "set_cache", "docstring": "Set cache instance.", "line_range": [74, 76], "parameters": ["self", "cache"], "decorators": []}, {"name": "set_copilot", "docstring": "Set Copilot manager instance.", "line_range": [78, 80], "parameters": ["self", "copilot_manager"], "decorators": []}, {"name": "process_command", "docstring": "Process a command starting with /.", "line_range": [82, 98], "parameters": ["self", "command_line"], "decorators": []}, {"name": "process_prompt", "docstring": "Process a regular user prompt (not a command).", "line_range": [100, 152], "parameters": ["self", "prompt"], "decorators": []}, {"name": "cmd_help", "docstring": "Show help information.", "line_range": [154, 217], "parameters": ["self", "args"], "decorators": []}, {"name": "cmd_workspace", "docstring": "Handle workspace state and permissions management.", "line_range": [219, 334], "parameters": ["self", "args"], "decorators": []}, {"name": "cmd_mode", "docstring": "Handle context mode operations with workspace integration.", "line_range": [336, 437], "parameters": ["self", "args"], "decorators": []}, {"name": "cmd_view", "docstring": "View file or directory contents.", "line_range": [439, 478], "parameters": ["self", "args"], "decorators": []}, {"name": "cmd_write", "docstring": "Write content to a file.", "line_range": [480, 505], "parameters": ["self", "args"], "decorators": []}, {"name": "cmd_queue", "docstring": "Handle queue operations.", "line_range": [507, 549], "parameters": ["self", "args"], "decorators": []}, {"name": "cmd_cache", "docstring": "Handle cache operations.", "line_range": [551, 590], "parameters": ["self", "args"], "decorators": []}, {"name": "cmd_copilot", "docstring": "Handle Copilot operations.", "line_range": [592, 626], "parameters": ["self", "args"], "decorators": []}, {"name": "cmd_config", "docstring": "Handle configuration operations.", "line_range": [628, 660], "parameters": ["self", "args"], "decorators": []}, {"name": "cmd_status", "docstring": "Show system status.", "line_range": [662, 676], "parameters": ["self", "args"], "decorators": []}, {"name": "cmd_backup", "docstring": "Create backup of a file.", "line_range": [678, 693], "parameters": ["self", "args"], "decorators": []}, {"name": "cmd_parse", "docstring": "Parse project structure.", "line_range": [695, 715], "parameters": ["self", "args"], "decorators": []}, {"name": "cmd_audit", "docstring": "Handle audit operations.", "line_range": [717, 743], "parameters": ["self", "args"], "decorators": []}, {"name": "handle_auto_update", "docstring": "Handle auto-update operations.", "line_range": [745, 765], "parameters": ["self", "args"], "decorators": []}, {"name": "handle_struct_status", "docstring": "Handle struct status operations.", "line_range": [767, 791], "parameters": ["self", "args"], "decorators": []}, {"name": "cmd_context", "docstring": "Handle context operations.", "line_range": [793, 849], "parameters": ["self", "args"], "decorators": []}, {"name": "cmd_session", "docstring": "Handle session operations.", "line_range": [851, 902], "parameters": ["self", "args"], "decorators": []}], "classes": [{"name": "CommandProcessor", "docstring": "Processes CLI commands and user prompts.", "line_range": [30, 902], "methods": [{"name": "__init__", "docstring": "Initialize command processor.", "line_range": [33, 72], "parameters": ["self", "root_dir", "config", "utils"]}, {"name": "set_cache", "docstring": "Set cache instance.", "line_range": [74, 76], "parameters": ["self", "cache"]}, {"name": "set_copilot", "docstring": "Set Copilot manager instance.", "line_range": [78, 80], "parameters": ["self", "copilot_manager"]}, {"name": "process_command", "docstring": "Process a command starting with /.", "line_range": [82, 98], "parameters": ["self", "command_line"]}, {"name": "process_prompt", "docstring": "Process a regular user prompt (not a command).", "line_range": [100, 152], "parameters": ["self", "prompt"]}, {"name": "cmd_help", "docstring": "Show help information.", "line_range": [154, 217], "parameters": ["self", "args"]}, {"name": "cmd_workspace", "docstring": "Handle workspace state and permissions management.", "line_range": [219, 334], "parameters": ["self", "args"]}, {"name": "cmd_mode", "docstring": "Handle context mode operations with workspace integration.", "line_range": [336, 437], "parameters": ["self", "args"]}, {"name": "cmd_view", "docstring": "View file or directory contents.", "line_range": [439, 478], "parameters": ["self", "args"]}, {"name": "cmd_write", "docstring": "Write content to a file.", "line_range": [480, 505], "parameters": ["self", "args"]}, {"name": "cmd_queue", "docstring": "Handle queue operations.", "line_range": [507, 549], "parameters": ["self", "args"]}, {"name": "cmd_cache", "docstring": "Handle cache operations.", "line_range": [551, 590], "parameters": ["self", "args"]}, {"name": "cmd_copilot", "docstring": "Handle Copilot operations.", "line_range": [592, 626], "parameters": ["self", "args"]}, {"name": "cmd_config", "docstring": "Handle configuration operations.", "line_range": [628, 660], "parameters": ["self", "args"]}, {"name": "cmd_status", "docstring": "Show system status.", "line_range": [662, 676], "parameters": ["self", "args"]}, {"name": "cmd_backup", "docstring": "Create backup of a file.", "line_range": [678, 693], "parameters": ["self", "args"]}, {"name": "cmd_parse", "docstring": "Parse project structure.", "line_range": [695, 715], "parameters": ["self", "args"]}, {"name": "cmd_audit", "docstring": "Handle audit operations.", "line_range": [717, 743], "parameters": ["self", "args"]}, {"name": "handle_auto_update", "docstring": "Handle auto-update operations.", "line_range": [745, 765], "parameters": ["self", "args"]}, {"name": "handle_struct_status", "docstring": "Handle struct status operations.", "line_range": [767, 791], "parameters": ["self", "args"]}, {"name": "cmd_context", "docstring": "Handle context operations.", "line_range": [793, 849], "parameters": ["self", "args"]}, {"name": "cmd_session", "docstring": "Handle session operations.", "line_range": [851, 902], "parameters": ["self", "args"]}], "bases": []}], "callgraph": {"__init__": ["WorkspaceStateManager", "print"], "set_cache": [], "set_copilot": [], "process_command": ["print", "len", "logging.error", "command_line.split", "command_line.strip"], "process_prompt": ["CopilotEvent", "logging.info", "logging.warning", "print", "len", "context_info.get", "logging.error", "get_optimized_context", "context_data.get", "prompt.strip"], "cmd_help": ["print"], "cmd_workspace": ["print", "boundaries.get", "args.strip", "state.get", "len", "override.get", "int", "permissions.get", "logging.error", "entry.get", "result.get", "action_args.split"], "cmd_mode": ["print", "args.upper", "re.findall", "args.strip", "len", "permissions.get", "args.lower", "result.get", "get_optimized_context", "metrics.get", "context_data.get"], "cmd_view": ["print", "os.listdir", "sorted", "args.strip"], "cmd_write": ["print", "len", "args.split", "content.endswith", "content.startswith"], "cmd_queue": ["print", "args.strip", "queue_data.get", "len", "enumerate", "os.remove", "open", "cmd.get", "json.load"], "cmd_cache": ["print", "os.listdir", "args.strip", "len", "stats.get"], "cmd_copilot": ["print", "args.strip", "json.dumps", "open", "json.load"], "cmd_config": ["print", "json.dumps", "args.strip"], "cmd_status": ["print"], "cmd_backup": ["print", "args.strip"], "cmd_parse": ["print", "generate_json"], "cmd_audit": ["print", "args.strip"], "handle_auto_update": ["print", "generate_json"], "handle_struct_status": ["print", "os.stat", "struct_data.get", "len", "datetime.fromtimestamp", "open", "json.load"], "cmd_context": ["print", "args.strip", "len", "metrics.get", "get_optimized_context", "context_data.get"], "cmd_session": ["print", "args.strip", "state.get", "len", "datetime.now"]}, "dependencies": ["Any", "CLIConfig", "CLIUtils", "CopilotContextManager", "CopilotEvent", "Dict", "JSONCache", "List", "Optional", "Path", "WorkspaceStateManager", "cli_config", "cli_utils", "copilot", "create_context_orchestrator", "datetime", "generate_json", "get_optimized_context", "get_optimized_context_for_scenario", "initialize_copilot", "json", "llmstruct.cache", "llmstruct.context_orchestrator", "llmstruct.copilot", "llmstruct.generators.json_generator", "logging", "os", "pathlib", "re", "subprocess", "sys", "trigger_copilot_event", "typing", "workspace"], "hash": "dd0d9e75fb410d85bfe10f3e554b2fa45c45847ccb317cd54107e4ac6ce33bec"}, {"module_id": "src.llmstruct.context_orchestrator", "path": "src/llmstruct/context_orchestrator.py", "category": "core", "module_doc": "Smart Context Orchestration for LLMStruct\nOptimizes context loading for different LLM usage scenarios", "functions": [{"name": "create_context_orchestrator", "docstring": "Factory function to create context orchestrator.", "line_range": [506, 508], "parameters": ["project_root"], "decorators": []}, {"name": "get_optimized_context", "docstring": "Get optimized context for scenario - convenience function.\n\nArgs:\n    project_root: Project root directory\n    scenario: Usage scenario (cli_direct, vscode_copilot, session_work)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary", "line_range": [511, 543], "parameters": ["project_root", "scenario", "file_path", "max_tokens"], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [57, 75], "parameters": ["self", "project_root"], "decorators": []}, {"name": "_load_config", "docstring": "Load context orchestration configuration.", "line_range": [77, 119], "parameters": ["self"], "decorators": []}, {"name": "get_context_for_scenario", "docstring": "Get optimized context for specific usage scenario.\n\nArgs:\n    scenario: Usage scenario (cli_direct, vscode_copilot, etc.)\n    file_path: Optional file path for focused context\n    custom_budget: Optional custom token budget\n    \nReturns:\n    Optimized context dictionary", "line_range": [121, 161], "parameters": ["self", "scenario", "file_path", "custom_budget"], "decorators": []}, {"name": "_get_budget_for_scenario", "docstring": "Create budget configuration for scenario.", "line_range": [163, 172], "parameters": ["self", "scenario_config"], "decorators": []}, {"name": "_load_full_context", "docstring": "Load complete context without token restrictions.", "line_range": [174, 187], "parameters": ["self"], "decorators": []}, {"name": "_extract_relationship_summary", "docstring": "\u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u043a\u0440\u0430\u0442\u043a\u0438\u0439 \u0433\u0440\u0430\u0444 \u0441\u0432\u044f\u0437\u0435\u0439 \u043c\u0435\u0436\u0434\u0443 \u043c\u043e\u0434\u0443\u043b\u044f\u043c\u0438 \u0438\u0437 struct.json:\n- module_id, path\n- dependencies (\u0442\u043e\u043b\u044c\u043a\u043e \u0438\u043c\u0435\u043d\u0430 \u043c\u043e\u0434\u0443\u043b\u0435\u0439)\n- \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b/\u0444\u0443\u043d\u043a\u0446\u0438\u0438", "line_range": [189, 216], "parameters": ["self", "max_modules"], "decorators": []}, {"name": "_load_focused_context", "docstring": "Load focused context optimized for VS Code Copilot.\n- \u0412\u0441\u0435\u0433\u0434\u0430 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 summary \u0438\u0437 init.json (\u0443\u0440\u043e\u0432\u0435\u043d\u044c 1)\n- relationship_context (structural) \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 file_path \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434 \u0438\u043b\u0438 \u044f\u0432\u043d\u043e structural \u0437\u0430\u043f\u0440\u043e\u0441", "line_range": [218, 275], "parameters": ["self", "file_path", "budget"], "decorators": []}, {"name": "_load_session_context", "docstring": "Load session-specific context.", "line_range": [277, 299], "parameters": ["self", "budget"], "decorators": []}, {"name": "_load_minimal_context", "docstring": "Load minimal context for quick operations.", "line_range": [301, 319], "parameters": ["self"], "decorators": []}, {"name": "_load_source_with_filtering", "docstring": "Load source with optional filtering based on budget.", "line_range": [321, 344], "parameters": ["self", "source_name", "budget"], "decorators": []}, {"name": "_get_file_context", "docstring": "Get context specific to a file.", "line_range": [346, 357], "parameters": ["self", "file_path"], "decorators": []}, {"name": "_extract_essential_parts", "docstring": "Extract essential parts of data to fit token budget.", "line_range": [359, 381], "parameters": ["self", "data"], "decorators": []}, {"name": "_filter_for_current_session", "docstring": "Filter data to items relevant to current session.", "line_range": [383, 422], "parameters": ["self", "data"], "decorators": []}, {"name": "_extract_summary", "docstring": "Extract summary information from data.", "line_range": [424, 443], "parameters": ["self", "data"], "decorators": []}, {"name": "_apply_section_filtering", "docstring": "Apply section filtering to exclude specified sections.", "line_range": [445, 457], "parameters": ["self", "data", "exclude_sections"], "decorators": []}, {"name": "_update_metrics", "docstring": "Update performance metrics.", "line_range": [459, 477], "parameters": ["self", "scenario", "context", "load_time"], "decorators": []}, {"name": "get_metrics_summary", "docstring": "Get summary of context loading metrics.", "line_range": [479, 494], "parameters": ["self"], "decorators": []}, {"name": "save_metrics", "docstring": "Save metrics to file for analysis.", "line_range": [496, 501], "parameters": ["self"], "decorators": []}], "classes": [{"name": "ContextMode", "docstring": "Context loading modes for different scenarios.", "line_range": [17, 22], "methods": [], "bases": ["Enum"]}, {"name": "ContextLevel", "docstring": "Progressive context levels with token budgets.", "line_range": [25, 30], "methods": [], "bases": ["Enum"]}, {"name": "ContextBudget", "docstring": "Token budget configuration for context loading.", "line_range": [34, 39], "methods": [], "bases": []}, {"name": "ContextMetrics", "docstring": "Metrics for context loading performance.", "line_range": [43, 48], "methods": [], "bases": []}, {"name": "SmartContextOrchestrator", "docstring": "Orchestrates context loading based on usage scenario and token budget.\nProvides optimized context for different LLM integration patterns.", "line_range": [51, 501], "methods": [{"name": "__init__", "docstring": "", "line_range": [57, 75], "parameters": ["self", "project_root"]}, {"name": "_load_config", "docstring": "Load context orchestration configuration.", "line_range": [77, 119], "parameters": ["self"]}, {"name": "get_context_for_scenario", "docstring": "Get optimized context for specific usage scenario.\n\nArgs:\n    scenario: Usage scenario (cli_direct, vscode_copilot, etc.)\n    file_path: Optional file path for focused context\n    custom_budget: Optional custom token budget\n    \nReturns:\n    Optimized context dictionary", "line_range": [121, 161], "parameters": ["self", "scenario", "file_path", "custom_budget"]}, {"name": "_get_budget_for_scenario", "docstring": "Create budget configuration for scenario.", "line_range": [163, 172], "parameters": ["self", "scenario_config"]}, {"name": "_load_full_context", "docstring": "Load complete context without token restrictions.", "line_range": [174, 187], "parameters": ["self"]}, {"name": "_extract_relationship_summary", "docstring": "\u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u043a\u0440\u0430\u0442\u043a\u0438\u0439 \u0433\u0440\u0430\u0444 \u0441\u0432\u044f\u0437\u0435\u0439 \u043c\u0435\u0436\u0434\u0443 \u043c\u043e\u0434\u0443\u043b\u044f\u043c\u0438 \u0438\u0437 struct.json:\n- module_id, path\n- dependencies (\u0442\u043e\u043b\u044c\u043a\u043e \u0438\u043c\u0435\u043d\u0430 \u043c\u043e\u0434\u0443\u043b\u0435\u0439)\n- \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b/\u0444\u0443\u043d\u043a\u0446\u0438\u0438", "line_range": [189, 216], "parameters": ["self", "max_modules"]}, {"name": "_load_focused_context", "docstring": "Load focused context optimized for VS Code Copilot.\n- \u0412\u0441\u0435\u0433\u0434\u0430 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 summary \u0438\u0437 init.json (\u0443\u0440\u043e\u0432\u0435\u043d\u044c 1)\n- relationship_context (structural) \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 file_path \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434 \u0438\u043b\u0438 \u044f\u0432\u043d\u043e structural \u0437\u0430\u043f\u0440\u043e\u0441", "line_range": [218, 275], "parameters": ["self", "file_path", "budget"]}, {"name": "_load_session_context", "docstring": "Load session-specific context.", "line_range": [277, 299], "parameters": ["self", "budget"]}, {"name": "_load_minimal_context", "docstring": "Load minimal context for quick operations.", "line_range": [301, 319], "parameters": ["self"]}, {"name": "_load_source_with_filtering", "docstring": "Load source with optional filtering based on budget.", "line_range": [321, 344], "parameters": ["self", "source_name", "budget"]}, {"name": "_get_file_context", "docstring": "Get context specific to a file.", "line_range": [346, 357], "parameters": ["self", "file_path"]}, {"name": "_extract_essential_parts", "docstring": "Extract essential parts of data to fit token budget.", "line_range": [359, 381], "parameters": ["self", "data"]}, {"name": "_filter_for_current_session", "docstring": "Filter data to items relevant to current session.", "line_range": [383, 422], "parameters": ["self", "data"]}, {"name": "_extract_summary", "docstring": "Extract summary information from data.", "line_range": [424, 443], "parameters": ["self", "data"]}, {"name": "_apply_section_filtering", "docstring": "Apply section filtering to exclude specified sections.", "line_range": [445, 457], "parameters": ["self", "data", "exclude_sections"]}, {"name": "_update_metrics", "docstring": "Update performance metrics.", "line_range": [459, 477], "parameters": ["self", "scenario", "context", "load_time"]}, {"name": "get_metrics_summary", "docstring": "Get summary of context loading metrics.", "line_range": [479, 494], "parameters": ["self"]}, {"name": "save_metrics", "docstring": "Save metrics to file for analysis.", "line_range": [496, 501], "parameters": ["self"]}], "bases": []}], "callgraph": {"__init__": ["Path", "self._load_config"], "_load_config": ["json.load", "config_path.exists", "open"], "get_context_for_scenario": ["ContextMode", "self._load_focused_context", "self._update_metrics", "scenario_config.get", "self._load_session_context", "self._get_budget_for_scenario", "time.time", "self._load_minimal_context", "self._load_full_context"], "_get_budget_for_scenario": ["ContextBudget", "budget_config.get", "scenario_config.get"], "_load_full_context": ["logger.warning", "open", "json.load", "full_path.exists"], "_extract_relationship_summary": ["summary.append", "m.get", "logger.warning", "json.load", "open", "struct_path.exists", "struct.get"], "_load_focused_context": ["init_path.exists", "self._extract_relationship_summary", "session_path.exists", "logger.warning", "len", "json.dumps", "file_path.endswith", "open", "json.load", "self._get_file_context", "self._extract_summary"], "_load_session_context": ["self._load_source_with_filtering", "self._filter_for_current_session"], "_load_minimal_context": ["logger.warning", "open", "source_path.exists", "json.load", "self._extract_summary"], "_load_source_with_filtering": ["logger.warning", "self._apply_section_filtering", "open", "source_path.exists", "json.load"], "_get_file_context": ["Path"], "_extract_essential_parts": ["task.get", "isinstance"], "_filter_for_current_session": ["current_session.get", "idea.get", "task.get", "logger.warning", "data.items", "current_session_path.exists", "open", "json.load"], "_extract_summary": ["t.get", "len", "isinstance"], "_apply_section_filtering": ["data.items"], "_update_metrics": ["context.get", "len", "ContextMetrics"], "get_metrics_summary": ["len", "sum"], "save_metrics": ["json.dump", "self.get_metrics_summary", "open"], "create_context_orchestrator": ["SmartContextOrchestrator"], "get_optimized_context": ["ContextBudget", "orchestrator.get_context_for_scenario", "create_context_orchestrator"]}, "dependencies": ["Any", "Dict", "Enum", "List", "Optional", "Path", "Union", "dataclass", "dataclasses", "enum", "json", "logging", "pathlib", "time", "typing"], "hash": "c17b350c685348e540bb6f3686f2dcb5cf3da1b90c04e0dadb2a298ac2af82b8"}, {"module_id": "src.llmstruct.__init__", "path": "src/llmstruct/__init__.py", "category": "cli", "module_doc": "", "functions": [], "classes": [], "callgraph": {}, "dependencies": ["AISelfAwarenessCLIIntegration", "LLMClient", "SystemCapabilityDiscovery", "ai_cli_integration", "ai_self_awareness", "llm_client"], "hash": "2592d45bae33fe6628051f9ae5eb6dd5f13fee9588b428a512203df62a55a122"}, {"module_id": "src.llmstruct.ai_cli_integration", "path": "src/llmstruct/ai_cli_integration.py", "category": "core", "module_doc": "AI Self-Awareness CLI Integration Module\nIntegrates unused CLI functions into the AI self-awareness system.", "functions": [{"name": "create_ai_cli_integration", "docstring": "Factory function to create AI CLI integration instance.", "line_range": [304, 306], "parameters": ["project_root"], "decorators": []}, {"name": "get_ai_enhanced_cli_summary", "docstring": "Get a formatted summary of AI CLI integration capabilities.", "line_range": [309, 346], "parameters": ["project_root"], "decorators": []}, {"name": "__init__", "docstring": "Initialize CLI integration system.", "line_range": [21, 25], "parameters": ["self", "project_root"], "decorators": []}, {"name": "_discover_available_commands", "docstring": "Discover which unused CLI commands are available for integration.", "line_range": [27, 69], "parameters": ["self"], "decorators": []}, {"name": "integrate_ai_status_command", "docstring": "Integrate cmd_status for real-time AI system status awareness.", "line_range": [71, 100], "parameters": ["self"], "decorators": []}, {"name": "integrate_ai_audit_command", "docstring": "Integrate cmd_audit for system health analysis awareness.", "line_range": [102, 131], "parameters": ["self"], "decorators": []}, {"name": "integrate_ai_context_command", "docstring": "Integrate cmd_context for context mode awareness.", "line_range": [133, 162], "parameters": ["self"], "decorators": []}, {"name": "integrate_ai_queue_command", "docstring": "Integrate cmd_queue for workflow queue monitoring.", "line_range": [164, 193], "parameters": ["self"], "decorators": []}, {"name": "get_integration_summary", "docstring": "Get summary of CLI command integrations for AI awareness.", "line_range": [195, 215], "parameters": ["self"], "decorators": []}, {"name": "_calculate_ai_enhancement_impact", "docstring": "Calculate the impact of integrating unused CLI commands on AI capabilities.", "line_range": [217, 241], "parameters": ["self"], "decorators": []}, {"name": "_create_fallback_status", "docstring": "Create fallback status information if cmd_status is not available.", "line_range": [243, 256], "parameters": ["self"], "decorators": []}, {"name": "_create_fallback_audit", "docstring": "Create fallback audit information if cmd_audit is not available.", "line_range": [258, 271], "parameters": ["self"], "decorators": []}, {"name": "_create_fallback_context", "docstring": "Create fallback context information if cmd_context is not available.", "line_range": [273, 286], "parameters": ["self"], "decorators": []}, {"name": "_create_fallback_queue", "docstring": "Create fallback queue information if cmd_queue is not available.", "line_range": [288, 301], "parameters": ["self"], "decorators": []}], "classes": [{"name": "AISelfAwarenessCLIIntegration", "docstring": "Integrates unused CLI functions to enhance AI self-awareness capabilities.\nTransforms 21 unused CLI commands into useful AI interaction tools.", "line_range": [15, 301], "methods": [{"name": "__init__", "docstring": "Initialize CLI integration system.", "line_range": [21, 25], "parameters": ["self", "project_root"]}, {"name": "_discover_available_commands", "docstring": "Discover which unused CLI commands are available for integration.", "line_range": [27, 69], "parameters": ["self"]}, {"name": "integrate_ai_status_command", "docstring": "Integrate cmd_status for real-time AI system status awareness.", "line_range": [71, 100], "parameters": ["self"]}, {"name": "integrate_ai_audit_command", "docstring": "Integrate cmd_audit for system health analysis awareness.", "line_range": [102, 131], "parameters": ["self"]}, {"name": "integrate_ai_context_command", "docstring": "Integrate cmd_context for context mode awareness.", "line_range": [133, 162], "parameters": ["self"]}, {"name": "integrate_ai_queue_command", "docstring": "Integrate cmd_queue for workflow queue monitoring.", "line_range": [164, 193], "parameters": ["self"]}, {"name": "get_integration_summary", "docstring": "Get summary of CLI command integrations for AI awareness.", "line_range": [195, 215], "parameters": ["self"]}, {"name": "_calculate_ai_enhancement_impact", "docstring": "Calculate the impact of integrating unused CLI commands on AI capabilities.", "line_range": [217, 241], "parameters": ["self"]}, {"name": "_create_fallback_status", "docstring": "Create fallback status information if cmd_status is not available.", "line_range": [243, 256], "parameters": ["self"]}, {"name": "_create_fallback_audit", "docstring": "Create fallback audit information if cmd_audit is not available.", "line_range": [258, 271], "parameters": ["self"]}, {"name": "_create_fallback_context", "docstring": "Create fallback context information if cmd_context is not available.", "line_range": [273, 286], "parameters": ["self"]}, {"name": "_create_fallback_queue", "docstring": "Create fallback queue information if cmd_queue is not available.", "line_range": [288, 301], "parameters": ["self"]}], "bases": []}], "callgraph": {"__init__": ["Path", "self._discover_available_commands"], "_discover_available_commands": ["logger.error", "hasattr", "unused_command_mapping.items", "getattr"], "integrate_ai_status_command": ["cmd_status", "logger.error", "str", "self._create_fallback_status"], "integrate_ai_audit_command": ["self._create_fallback_audit", "cmd_audit", "logger.error", "str"], "integrate_ai_context_command": ["cmd_context", "self._create_fallback_context", "logger.error", "str"], "integrate_ai_queue_command": ["cmd_queue", "self._create_fallback_queue", "logger.error", "str"], "get_integration_summary": ["len", "info.get", "cmd.get", "self._calculate_ai_enhancement_impact", "sum"], "_calculate_ai_enhancement_impact": ["len", "any", "enhanced_categories.append", "capability_categories.items", "info.get"], "_create_fallback_status": ["str"], "_create_fallback_audit": ["str"], "_create_fallback_context": [], "_create_fallback_queue": [], "create_ai_cli_integration": ["AISelfAwarenessCLIIntegration"], "get_ai_enhanced_cli_summary": ["create_ai_cli_integration", "integration.integrate_ai_queue_command", "integration.integrate_ai_context_command", "integration.get_integration_summary", "integration.integrate_ai_audit_command", "integration.integrate_ai_status_command"]}, "dependencies": ["Any", "Dict", "List", "Optional", "Path", "cli_commands", "json", "llmstruct", "logging", "pathlib", "typing"], "hash": "31bb5f483e9f2b68b6a50f6763428111abd2eb8026401104bca1d83a1c6efdf6"}, {"module_id": "src.llmstruct.__main__", "path": "src/llmstruct/__main__.py", "category": "cli", "module_doc": "", "functions": [], "classes": [], "callgraph": {}, "dependencies": ["llmstruct.cli", "main"], "hash": "de795cd58c2dc4122dd30b382c844a7c67fc36489e443b7d12170fa0e15994dc"}, {"module_id": "src.llmstruct.cli_utils", "path": "src/llmstruct/cli_utils.py", "category": "core", "module_doc": "CLI utility functions.", "functions": [{"name": "__init__", "docstring": "Initialize utils with root directory.", "line_range": [24, 26], "parameters": ["self", "root_dir"], "decorators": []}, {"name": "read_file_content", "docstring": "Read file content with size limit.", "line_range": [28, 50], "parameters": ["self", "file_path", "max_size"], "decorators": []}, {"name": "write_file_content", "docstring": "Write content to file.", "line_range": [52, 70], "parameters": ["self", "file_path", "content"], "decorators": []}, {"name": "get_directory_structure", "docstring": "Get directory structure using folder generator.", "line_range": [72, 115], "parameters": ["self", "path", "gitignore_patterns", "include_patterns", "exclude_patterns", "exclude_dirs"], "decorators": []}, {"name": "validate_json", "docstring": "Validate JSON content.", "line_range": [117, 123], "parameters": ["self", "content"], "decorators": []}, {"name": "format_json", "docstring": "Format data as JSON string.", "line_range": [125, 131], "parameters": ["self", "data", "indent"], "decorators": []}, {"name": "generate_unique_id", "docstring": "Generate unique ID for commands, queues, etc.", "line_range": [133, 137], "parameters": ["self", "prefix"], "decorators": []}, {"name": "safe_path_join", "docstring": "Safely join path parts, preventing directory traversal.", "line_range": [139, 149], "parameters": ["self"], "decorators": []}, {"name": "file_exists", "docstring": "Check if file exists.", "line_range": [151, 157], "parameters": ["self", "file_path"], "decorators": []}, {"name": "dir_exists", "docstring": "Check if directory exists.", "line_range": [159, 165], "parameters": ["self", "dir_path"], "decorators": []}, {"name": "get_file_size", "docstring": "Get file size in bytes.", "line_range": [167, 173], "parameters": ["self", "file_path"], "decorators": []}, {"name": "backup_file", "docstring": "Create backup of file with timestamp.", "line_range": [175, 191], "parameters": ["self", "file_path"], "decorators": []}, {"name": "cleanup_old_backups", "docstring": "Clean up old backup files, keeping only the most recent ones.", "line_range": [193, 222], "parameters": ["self", "file_path", "keep_count"], "decorators": []}], "classes": [{"name": "CLIUtils", "docstring": "Utility functions for CLI operations.", "line_range": [21, 222], "methods": [{"name": "__init__", "docstring": "Initialize utils with root directory.", "line_range": [24, 26], "parameters": ["self", "root_dir"]}, {"name": "read_file_content", "docstring": "Read file content with size limit.", "line_range": [28, 50], "parameters": ["self", "file_path", "max_size"]}, {"name": "write_file_content", "docstring": "Write content to file.", "line_range": [52, 70], "parameters": ["self", "file_path", "content"]}, {"name": "get_directory_structure", "docstring": "Get directory structure using folder generator.", "line_range": [72, 115], "parameters": ["self", "path", "gitignore_patterns", "include_patterns", "exclude_patterns", "exclude_dirs"]}, {"name": "validate_json", "docstring": "Validate JSON content.", "line_range": [117, 123], "parameters": ["self", "content"]}, {"name": "format_json", "docstring": "Format data as JSON string.", "line_range": [125, 131], "parameters": ["self", "data", "indent"]}, {"name": "generate_unique_id", "docstring": "Generate unique ID for commands, queues, etc.", "line_range": [133, 137], "parameters": ["self", "prefix"]}, {"name": "safe_path_join", "docstring": "Safely join path parts, preventing directory traversal.", "line_range": [139, 149], "parameters": ["self"]}, {"name": "file_exists", "docstring": "Check if file exists.", "line_range": [151, 157], "parameters": ["self", "file_path"]}, {"name": "dir_exists", "docstring": "Check if directory exists.", "line_range": [159, 165], "parameters": ["self", "dir_path"]}, {"name": "get_file_size", "docstring": "Get file size in bytes.", "line_range": [167, 173], "parameters": ["self", "file_path"]}, {"name": "backup_file", "docstring": "Create backup of file with timestamp.", "line_range": [175, 191], "parameters": ["self", "file_path"]}, {"name": "cleanup_old_backups", "docstring": "Clean up old backup files, keeping only the most recent ones.", "line_range": [193, 222], "parameters": ["self", "file_path", "keep_count"]}], "bases": []}], "callgraph": {"__init__": [], "read_file_content": ["logging.warning", "os.stat", "logging.error", "open", "f.read"], "write_file_content": ["logging.info", "logging.error", "f.write", "Path", "open"], "get_directory_structure": ["get_folder_structure", "sorted", "os.listdir", "logging.error"], "validate_json": ["json.loads", "str"], "format_json": ["json.dumps", "str", "logging.error"], "generate_unique_id": ["time.time", "int", "str", "uuid.uuid4"], "safe_path_join": ["ValueError", "resolved_path.startswith"], "file_exists": ["self.safe_path_join"], "dir_exists": ["self.safe_path_join"], "get_file_size": ["self.safe_path_join"], "backup_file": ["src.read", "int", "dst.write", "self.safe_path_join", "logging.error", "open", "time.time"], "cleanup_old_backups": ["logging.info", "logging.warning", "os.listdir", "backups.sort", "filename.startswith", "int", "self.safe_path_join", "os.remove", "backups.append", "logging.error", "filename.split"]}, "dependencies": ["Any", "Dict", "List", "Optional", "Path", "get_folder_structure", "json", "llmstruct.generators.json_generator", "logging", "os", "pathlib", "time", "typing", "uuid"], "hash": "105ac5d21c6d1870ac478aadb62ca79e99a3453df4457642fcda39f575abf367"}, {"module_id": "src.llmstruct.copilot", "path": "src/llmstruct/copilot.py", "category": "core", "module_doc": "LLMStruct Copilot Integration Module\nProvides context-aware development assistance with hybrid copilot capabilities.", "functions": [{"name": "initialize_copilot", "docstring": "Initialize copilot context manager for the project.\n\nArgs:\n    project_root: Project root directory\n\nReturns:\n    Configured CopilotContextManager instance", "line_range": [649, 659], "parameters": ["project_root"], "decorators": []}, {"name": "trigger_copilot_event", "docstring": "Trigger a copilot event and get relevant context.\n\nArgs:\n    manager: CopilotContextManager instance\n    event_type: Type of event\n    file_path: Optional file path\n    **kwargs: Additional event metadata\n\nReturns:\n    Dict with event context", "line_range": [662, 679], "parameters": ["manager", "event_type", "file_path"], "decorators": []}, {"name": "smart_suggest", "docstring": "Get smart suggestions based on query and context.\n\nArgs:\n    manager: CopilotContextManager instance\n    query: Query string\n    context: Context type (code, workflow, task, etc.)\n\nReturns:\n    List of suggestions", "line_range": [682, 702], "parameters": ["manager", "query", "context"], "decorators": []}, {"name": "get_optimized_context_for_scenario", "docstring": "Get optimized context for specific scenario - standalone function.\n\nArgs:\n    project_root: Project root directory\n    scenario: Usage scenario (vscode_copilot, cli_direct, etc.)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary", "line_range": [705, 728], "parameters": ["project_root", "scenario", "file_path", "max_tokens"], "decorators": []}, {"name": "__init__", "docstring": "Initialize the Copilot Context Manager.\n\nArgs:\n    project_root: Project root directory\n    config_path: Path to copilot_init.json", "line_range": [68, 90], "parameters": ["self", "project_root", "config_path"], "decorators": []}, {"name": "_load_config", "docstring": "Load copilot configuration from JSON file.", "line_range": [92, 104], "parameters": ["self"], "decorators": []}, {"name": "_initialize_layers", "docstring": "Initialize context layers from configuration.", "line_range": [106, 116], "parameters": ["self"], "decorators": []}, {"name": "load_context_layer", "docstring": "Load a specific context layer.\n\nArgs:\n    layer_name: Name of the layer to load\n    force: Force reload if already loaded\n\nReturns:\n    bool: True if successful", "line_range": [118, 160], "parameters": ["self", "layer_name", "force"], "decorators": []}, {"name": "unload_context_layer", "docstring": "Unload a context layer to free memory.\n\nArgs:\n    layer_name: Name of the layer to unload\n\nReturns:\n    bool: True if successful", "line_range": [162, 180], "parameters": ["self", "layer_name"], "decorators": []}, {"name": "get_optimized_context", "docstring": "Get optimized context using Smart Context Orchestrator.\n\nArgs:\n    scenario: Usage scenario (vscode_copilot, cli_direct, etc.)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary", "line_range": [182, 225], "parameters": ["self", "scenario", "file_path", "max_tokens"], "decorators": []}, {"name": "_get_legacy_context", "docstring": "Fallback to legacy context loading.", "line_range": [227, 235], "parameters": ["self"], "decorators": []}, {"name": "get_context_for_vscode", "docstring": "Get optimized context specifically for VS Code Copilot integration.\n\nArgs:\n    file_path: Optional file path for focused context\n    \nReturns:\n    Token-optimized context for VS Code", "line_range": [237, 251], "parameters": ["self", "file_path"], "decorators": []}, {"name": "get_context_for_event", "docstring": "Get relevant context for a copilot event using Smart Context Orchestrator.\n\nArgs:\n    event: The copilot event\n\nReturns:\n    Dict containing relevant context", "line_range": [252, 296], "parameters": ["self", "event"], "decorators": []}, {"name": "_get_legacy_event_context", "docstring": "Legacy event context loading as fallback.", "line_range": [298, 350], "parameters": ["self", "event"], "decorators": []}, {"name": "suggest_completion", "docstring": "Generate context-aware code completions.\n\nArgs:\n    current_code: Current code content\n    file_path: Path to the current file\n    cursor_position: Cursor position in the code\n\nReturns:\n    List of completion suggestions", "line_range": [352, 397], "parameters": ["self", "current_code", "file_path", "cursor_position"], "decorators": []}, {"name": "validate_change", "docstring": "Validate a code change against safety rules.\n\nArgs:\n    file_path: Path to the changed file\n    change_type: Type of change (create, edit, delete)\n\nReturns:\n    Dict with validation results", "line_range": [399, 445], "parameters": ["self", "file_path", "change_type"], "decorators": []}, {"name": "_matches_scope", "docstring": "Check if file matches scope pattern.", "line_range": [447, 452], "parameters": ["self", "file_path", "scope"], "decorators": []}, {"name": "_matches_trigger", "docstring": "Check if change type matches trigger.", "line_range": [454, 463], "parameters": ["self", "change_type", "trigger"], "decorators": []}, {"name": "_validate_json_schema", "docstring": "Validate JSON file against schema.", "line_range": [465, 480], "parameters": ["self", "file_path"], "decorators": []}, {"name": "_check_circular_dependencies", "docstring": "Check for circular dependencies.", "line_range": [482, 507], "parameters": ["self", "file_path"], "decorators": []}, {"name": "_validate_task_references", "docstring": "Validate task references in tasks.json.", "line_range": [509, 536], "parameters": ["self", "file_path"], "decorators": []}, {"name": "get_workflow_suggestions", "docstring": "Get workflow suggestions based on current command context.\n\nArgs:\n    command: Current command or operation\n\nReturns:\n    List of workflow suggestions", "line_range": [538, 568], "parameters": ["self", "command"], "decorators": []}, {"name": "refresh_all_contexts", "docstring": "Refresh all loaded context layers.\n\nReturns:\n    bool: True if successful", "line_range": [570, 584], "parameters": ["self"], "decorators": []}, {"name": "get_context_status", "docstring": "Get status of all context layers.\n\nReturns:\n    Dict with context status information", "line_range": [586, 607], "parameters": ["self"], "decorators": []}, {"name": "export_context", "docstring": "Export context in specified format.\n\nArgs:\n    layers: List of layers to export (None for all loaded)\n    format: Export format (json, yaml, etc.)\n\nReturns:\n    Exported context as string", "line_range": [609, 631], "parameters": ["self", "layers", "format"], "decorators": []}, {"name": "close", "docstring": "Clean up resources.", "line_range": [633, 643], "parameters": ["self"], "decorators": []}], "classes": [{"name": "ContextLayer", "docstring": "Context layer priorities for copilot integration.", "line_range": [22, 28], "methods": [], "bases": ["Enum"]}, {"name": "AttachMode", "docstring": "Context attachment modes.", "line_range": [31, 37], "methods": [], "bases": ["Enum"]}, {"name": "ContextLayerConfig", "docstring": "Configuration for a context layer.", "line_range": [41, 49], "methods": [], "bases": []}, {"name": "CopilotEvent", "docstring": "Represents a copilot event for context triggering.", "line_range": [53, 59], "methods": [], "bases": []}, {"name": "CopilotContextManager", "docstring": "Manages context layers and integration with GitHub Copilot.\nProvides intelligent context loading and workflow assistance.", "line_range": [62, 643], "methods": [{"name": "__init__", "docstring": "Initialize the Copilot Context Manager.\n\nArgs:\n    project_root: Project root directory\n    config_path: Path to copilot_init.json", "line_range": [68, 90], "parameters": ["self", "project_root", "config_path"]}, {"name": "_load_config", "docstring": "Load copilot configuration from JSON file.", "line_range": [92, 104], "parameters": ["self"]}, {"name": "_initialize_layers", "docstring": "Initialize context layers from configuration.", "line_range": [106, 116], "parameters": ["self"]}, {"name": "load_context_layer", "docstring": "Load a specific context layer.\n\nArgs:\n    layer_name: Name of the layer to load\n    force: Force reload if already loaded\n\nReturns:\n    bool: True if successful", "line_range": [118, 160], "parameters": ["self", "layer_name", "force"]}, {"name": "unload_context_layer", "docstring": "Unload a context layer to free memory.\n\nArgs:\n    layer_name: Name of the layer to unload\n\nReturns:\n    bool: True if successful", "line_range": [162, 180], "parameters": ["self", "layer_name"]}, {"name": "get_optimized_context", "docstring": "Get optimized context using Smart Context Orchestrator.\n\nArgs:\n    scenario: Usage scenario (vscode_copilot, cli_direct, etc.)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary", "line_range": [182, 225], "parameters": ["self", "scenario", "file_path", "max_tokens"]}, {"name": "_get_legacy_context", "docstring": "Fallback to legacy context loading.", "line_range": [227, 235], "parameters": ["self"]}, {"name": "get_context_for_vscode", "docstring": "Get optimized context specifically for VS Code Copilot integration.\n\nArgs:\n    file_path: Optional file path for focused context\n    \nReturns:\n    Token-optimized context for VS Code", "line_range": [237, 251], "parameters": ["self", "file_path"]}, {"name": "get_context_for_event", "docstring": "Get relevant context for a copilot event using Smart Context Orchestrator.\n\nArgs:\n    event: The copilot event\n\nReturns:\n    Dict containing relevant context", "line_range": [252, 296], "parameters": ["self", "event"]}, {"name": "_get_legacy_event_context", "docstring": "Legacy event context loading as fallback.", "line_range": [298, 350], "parameters": ["self", "event"]}, {"name": "suggest_completion", "docstring": "Generate context-aware code completions.\n\nArgs:\n    current_code: Current code content\n    file_path: Path to the current file\n    cursor_position: Cursor position in the code\n\nReturns:\n    List of completion suggestions", "line_range": [352, 397], "parameters": ["self", "current_code", "file_path", "cursor_position"]}, {"name": "validate_change", "docstring": "Validate a code change against safety rules.\n\nArgs:\n    file_path: Path to the changed file\n    change_type: Type of change (create, edit, delete)\n\nReturns:\n    Dict with validation results", "line_range": [399, 445], "parameters": ["self", "file_path", "change_type"]}, {"name": "_matches_scope", "docstring": "Check if file matches scope pattern.", "line_range": [447, 452], "parameters": ["self", "file_path", "scope"]}, {"name": "_matches_trigger", "docstring": "Check if change type matches trigger.", "line_range": [454, 463], "parameters": ["self", "change_type", "trigger"]}, {"name": "_validate_json_schema", "docstring": "Validate JSON file against schema.", "line_range": [465, 480], "parameters": ["self", "file_path"]}, {"name": "_check_circular_dependencies", "docstring": "Check for circular dependencies.", "line_range": [482, 507], "parameters": ["self", "file_path"]}, {"name": "_validate_task_references", "docstring": "Validate task references in tasks.json.", "line_range": [509, 536], "parameters": ["self", "file_path"]}, {"name": "get_workflow_suggestions", "docstring": "Get workflow suggestions based on current command context.\n\nArgs:\n    command: Current command or operation\n\nReturns:\n    List of workflow suggestions", "line_range": [538, 568], "parameters": ["self", "command"]}, {"name": "refresh_all_contexts", "docstring": "Refresh all loaded context layers.\n\nReturns:\n    bool: True if successful", "line_range": [570, 584], "parameters": ["self"]}, {"name": "get_context_status", "docstring": "Get status of all context layers.\n\nReturns:\n    Dict with context status information", "line_range": [586, 607], "parameters": ["self"]}, {"name": "export_context", "docstring": "Export context in specified format.\n\nArgs:\n    layers: List of layers to export (None for all loaded)\n    format: Export format (json, yaml, etc.)\n\nReturns:\n    Exported context as string", "line_range": [609, 631], "parameters": ["self", "layers", "format"]}, {"name": "close", "docstring": "Clean up resources.", "line_range": [633, 643], "parameters": ["self"]}], "bases": []}], "callgraph": {"__init__": ["create_context_orchestrator", "self._load_config", "self._initialize_layers", "Path", "JSONCache", "os.getcwd", "str"], "_load_config": ["logger.info", "logger.warning", "Path", "logger.error", "open", "json.load"], "_initialize_layers": ["ContextLayerConfig", "layer_config.get", "layers_config.items"], "load_context_layer": ["logger.info", "logger.warning", "logger.debug", "logger.error", "open", "time.time", "source_path.exists", "json.load"], "unload_context_layer": ["logger.info"], "get_optimized_context": ["scenario_mapping.get", "self._get_legacy_context", "logger.error"], "_get_legacy_context": ["self.load_context_layer"], "get_context_for_vscode": ["self.get_optimized_context"], "get_context_for_event": ["scenario_mapping.get", "self._get_legacy_event_context", "self.get_optimized_context", "logger.error"], "_get_legacy_event_context": ["source_path.exists", "workflow_triggers.get", "file_triggers.get", "code_triggers.get", "triggers.get", "logger.error", "open", "self.load_context_layer", "json.load"], "suggest_completion": ["current_module.get", "suggestions.append", "func.get", "Path", "struct_context.get", "module.get", "self.load_context_layer", "str"], "validate_change": ["rule.get", "self._check_circular_dependencies", "len", "self._matches_scope", "self._validate_json_schema", "safety_features.get", "self._matches_trigger", "self._validate_task_references", "result.get"], "_matches_scope": ["Path", "fnmatch", "str"], "_matches_trigger": ["trigger_map.get"], "_validate_json_schema": ["file_path.endswith", "json.load", "open"], "_check_circular_dependencies": ["struct_data.get", "len", "Path", "module.get", "self.load_context_layer", "str"], "_validate_task_references": ["set", "task.get", "task_ids.add", "file_path.endswith", "open", "tasks_data.get", "json.load"], "get_workflow_suggestions": ["workflow.get", "suggestions.append", "workflows.items", "suggestions.extend", "command.lower", "self.load_context_layer"], "refresh_all_contexts": ["self.load_context_layer", "logger.info", "list"], "get_context_status": ["list"], "export_context": ["str", "json.dumps", "list"], "close": ["hasattr", "logger.info"], "initialize_copilot": ["CopilotContextManager"], "trigger_copilot_event": ["manager.get_context_for_event", "CopilotEvent"], "smart_suggest": ["manager.get_workflow_suggestions"], "get_optimized_context_for_scenario": ["manager.get_optimized_context", "manager.close", "initialize_copilot", "locals"]}, "dependencies": ["Any", "Dict", "Enum", "JSONCache", "List", "Optional", "Path", "SmartContextOrchestrator", "Union", "create_context_orchestrator", "dataclass", "dataclasses", "enum", "fnmatch", "json", "llmstruct.cache", "llmstruct.context_orchestrator", "logging", "os", "pathlib", "time", "typing"], "hash": "30fd8d33334ad30d2d2784dd2ae9d1fd50ab982076f550ab8d7e9a2258b2c310"}, {"module_id": "src.llmstruct.gh_view", "path": "src/llmstruct/gh_view.py", "category": "core", "module_doc": "GitHub visualization/graph feature (gh-view-v1)\nExport consolidated tasks/ideas from JSON files to GitHub Project cards", "functions": [{"name": "main", "docstring": "Main entry point for GitHub Projects export", "line_range": [177, 208], "parameters": [], "decorators": []}, {"name": "__init__", "docstring": "Initialize exporter with configuration", "line_range": [19, 25], "parameters": ["self", "config_path"], "decorators": []}, {"name": "_load_config", "docstring": "Load configuration from TOML file", "line_range": [27, 35], "parameters": ["self"], "decorators": []}, {"name": "_load_mapping", "docstring": "Load existing ID mapping between local and GitHub", "line_range": [37, 45], "parameters": ["self"], "decorators": []}, {"name": "_save_mapping", "docstring": "Save ID mapping to file", "line_range": [47, 53], "parameters": ["self"], "decorators": []}, {"name": "_run_gh_command", "docstring": "Run GitHub CLI command and return success status and output", "line_range": [55, 68], "parameters": ["self", "command"], "decorators": []}, {"name": "load_official_data", "docstring": "Load tasks and ideas from official JSON files", "line_range": [70, 98], "parameters": ["self"], "decorators": []}, {"name": "format_task_for_github", "docstring": "Format task data for GitHub Project card", "line_range": [100, 137], "parameters": ["self", "task"], "decorators": []}, {"name": "format_idea_for_github", "docstring": "Format idea data for GitHub Project card", "line_range": [139, 174], "parameters": ["self", "idea"], "decorators": []}], "classes": [{"name": "GitHubProjectsExporter", "docstring": "Export tasks and ideas to GitHub Projects as cards", "line_range": [16, 174], "methods": [{"name": "__init__", "docstring": "Initialize exporter with configuration", "line_range": [19, 25], "parameters": ["self", "config_path"]}, {"name": "_load_config", "docstring": "Load configuration from TOML file", "line_range": [27, 35], "parameters": ["self"]}, {"name": "_load_mapping", "docstring": "Load existing ID mapping between local and GitHub", "line_range": [37, 45], "parameters": ["self"]}, {"name": "_save_mapping", "docstring": "Save ID mapping to file", "line_range": [47, 53], "parameters": ["self"]}, {"name": "_run_gh_command", "docstring": "Run GitHub CLI command and return success status and output", "line_range": [55, 68], "parameters": ["self", "command"]}, {"name": "load_official_data", "docstring": "Load tasks and ideas from official JSON files", "line_range": [70, 98], "parameters": ["self"]}, {"name": "format_task_for_github", "docstring": "Format task data for GitHub Project card", "line_range": [100, 137], "parameters": ["self", "task"]}, {"name": "format_idea_for_github", "docstring": "Format idea data for GitHub Project card", "line_range": [139, 174], "parameters": ["self", "idea"]}], "bases": []}], "callgraph": {"__init__": ["Path", "self._load_config", "self._load_mapping"], "_load_config": ["toml.load", "config.get", "print", "open"], "_load_mapping": ["json.load", "open"], "_save_mapping": ["json.dump", "print", "open"], "_run_gh_command": ["subprocess.run"], "load_official_data": ["print", "tasks_data.get", "tasks_file.exists", "len", "ideas_file.exists", "ideas_data.get", "open", "json.load"], "format_task_for_github": ["task.get", "status_map.get", "body_parts.append"], "format_idea_for_github": ["status_map.get", "idea.get", "body_parts.append"], "main": ["print", "len", "GitHubProjectsExporter", "sys.exit", "exporter.format_idea_for_github", "exporter.load_official_data", "exporter.format_task_for_github"]}, "dependencies": ["Any", "Dict", "List", "Optional", "Path", "Tuple", "datetime", "json", "pathlib", "subprocess", "sys", "toml", "typing"], "hash": "42f9d108f2c0b84536bc1f84861fe336c6c5383ee231ea92edf91eabed74b28c"}, {"module_id": "src.llmstruct.llm_client", "path": "src/llmstruct/llm_client.py", "category": "core", "module_doc": "", "functions": [{"name": "__init__", "docstring": "Initialize LLMClient with optional Ollama host.", "line_range": [28, 36], "parameters": ["self", "ollama_host"], "decorators": []}, {"name": "query", "docstring": "Query LLMs with prompt, context, and optional model.", "line_range": [38, 86], "parameters": ["self", "prompt", "context_path", "mode", "model", "artifact_ids"], "decorators": []}, {"name": "_query_grok", "docstring": "Query Grok API.", "line_range": [88, 115], "parameters": ["self", "prompt"], "decorators": []}, {"name": "_query_anthropic", "docstring": "Query Anthropic API.", "line_range": [117, 141], "parameters": ["self", "prompt"], "decorators": []}, {"name": "_query_ollama", "docstring": "Query Ollama API with specified model.", "line_range": [143, 156], "parameters": ["self", "prompt", "model"], "decorators": []}, {"name": "_query_hybrid", "docstring": "Query multiple LLMs and combine results.", "line_range": [158, 172], "parameters": ["self", "prompt", "model"], "decorators": []}], "classes": [{"name": "LLMClient", "docstring": "", "line_range": [27, 172], "methods": [{"name": "__init__", "docstring": "Initialize LLMClient with optional Ollama host.", "line_range": [28, 36], "parameters": ["self", "ollama_host"]}, {"name": "query", "docstring": "Query LLMs with prompt, context, and optional model.", "line_range": [38, 86], "parameters": ["self", "prompt", "context_path", "mode", "model", "artifact_ids"]}, {"name": "_query_grok", "docstring": "Query Grok API.", "line_range": [88, 115], "parameters": ["self", "prompt"]}, {"name": "_query_anthropic", "docstring": "Query Anthropic API.", "line_range": [117, 141], "parameters": ["self", "prompt"]}, {"name": "_query_ollama", "docstring": "Query Ollama API with specified model.", "line_range": [143, 156], "parameters": ["self", "prompt", "model"]}, {"name": "_query_hybrid", "docstring": "Query multiple LLMs and combine results.", "line_range": [158, 172], "parameters": ["self", "prompt", "model"]}], "bases": []}], "callgraph": {"__init__": ["logging.info", "os.getenv", "int"], "query": ["logging.info", "logging.warning", "self._query_anthropic", "json.dumps", "self._query_hybrid", "logging.error", "self._query_grok", "Path", "self._query_ollama", "asyncio.sleep", "range", "json.load"], "_query_grok": ["logging.info", "session.post", "response.json", "logging.error", "result.get", "aiohttp.ClientSession"], "_query_anthropic": ["logging.info", "session.post", "response.json", "logging.error", "result.get", "aiohttp.ClientSession"], "_query_ollama": ["logging.info", "session.post", "response.json", "logging.error", "result.get", "aiohttp.ClientSession", "logging.debug"], "_query_hybrid": ["logging.info", "self._query_anthropic", "len", "asyncio.gather", "self._query_grok", "isinstance", "self._query_ollama"]}, "dependencies": ["List", "Optional", "Path", "aiohttp", "asyncio", "dotenv", "json", "load_dotenv", "logging", "os", "pathlib", "typing"], "hash": "c477d5e96f165fa96546ff8e2673db785cee146f6fffd0f424d21072431133ba"}, {"module_id": "src.llmstruct.ai_workflow_middleware", "path": "src/llmstruct/ai_workflow_middleware.py", "category": "core", "module_doc": "AI Workflow Middleware - Forces AI Integration with LLMStruct\nIntercepts all AI requests and ensures they go through our orchestration system.", "functions": [{"name": "initialize_ai_middleware", "docstring": "Initialize global AI middleware.", "line_range": [393, 397], "parameters": ["project_root", "mode"], "decorators": []}, {"name": "get_ai_middleware", "docstring": "Get current AI middleware instance.", "line_range": [400, 402], "parameters": [], "decorators": []}, {"name": "process_ai_query", "docstring": "Global function to process AI queries through middleware.", "line_range": [405, 410], "parameters": ["query", "ai_handler"], "decorators": []}, {"name": "ensure_llmstruct_integration", "docstring": "Decorator that ensures function uses llmstruct system.", "line_range": [414, 431], "parameters": ["func"], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [55, 74], "parameters": ["self", "project_root", "mode"], "decorators": []}, {"name": "_load_middleware_config", "docstring": "Load middleware configuration.", "line_range": [76, 101], "parameters": ["self"], "decorators": []}, {"name": "process_ai_request", "docstring": "Main middleware entry point - ALL AI requests should go through this.\n\nArgs:\n    raw_query: Raw AI query/request\n    ai_handler: Optional custom AI handler function\n    \nReturns:\n    Processed AI response with llmstruct integration", "line_range": [103, 135], "parameters": ["self", "raw_query", "ai_handler"], "decorators": []}, {"name": "_parse_ai_request", "docstring": "Parse raw query into structured AI request.", "line_range": [137, 160], "parameters": ["self", "raw_query"], "decorators": []}, {"name": "_should_use_llmstruct", "docstring": "Determine if request should use llmstruct system.", "line_range": [162, 186], "parameters": ["self", "request"], "decorators": []}, {"name": "_process_with_llmstruct", "docstring": "Process request through full llmstruct system.", "line_range": [188, 219], "parameters": ["self", "request", "ai_handler"], "decorators": []}, {"name": "_process_bypass", "docstring": "Process request without llmstruct system.", "line_range": [221, 236], "parameters": ["self", "request", "ai_handler"], "decorators": []}, {"name": "_optimize_context", "docstring": "Optimize context using orchestrator.", "line_range": [238, 261], "parameters": ["self", "request"], "decorators": []}, {"name": "_analyze_ai_delegation", "docstring": "Analyze which AI should handle this request.", "line_range": [263, 280], "parameters": ["self", "request"], "decorators": []}, {"name": "_get_enhanced_context", "docstring": "Get enhanced context with project awareness.", "line_range": [282, 295], "parameters": ["self", "request", "context_result"], "decorators": []}, {"name": "_get_capability_summary", "docstring": "Get current system capabilities.", "line_range": [297, 310], "parameters": ["self"], "decorators": []}, {"name": "_generate_usage_guidance", "docstring": "Generate guidance for AI on how to use llmstruct system.", "line_range": [312, 331], "parameters": ["self", "request"], "decorators": []}, {"name": "_map_tags_to_scenario", "docstring": "Map context tags to orchestrator scenarios.", "line_range": [333, 348], "parameters": ["self", "tags"], "decorators": []}, {"name": "_default_ai_processing", "docstring": "Default AI processing when no custom handler provided.", "line_range": [350, 365], "parameters": ["self", "request", "context"], "decorators": []}, {"name": "get_middleware_stats", "docstring": "Get middleware usage statistics.", "line_range": [367, 376], "parameters": ["self"], "decorators": []}, {"name": "force_llmstruct_mode", "docstring": "Force all future requests to use llmstruct system.", "line_range": [378, 381], "parameters": ["self"], "decorators": []}, {"name": "enable_guidance_mode", "docstring": "Enable guided mode with llmstruct suggestions.", "line_range": [383, 386], "parameters": ["self"], "decorators": []}, {"name": "wrapper", "docstring": "", "line_range": [416, 429], "parameters": [], "decorators": []}], "classes": [{"name": "AIWorkflowMode", "docstring": "AI workflow enforcement modes.", "line_range": [21, 26], "methods": [], "bases": ["Enum"]}, {"name": "AIRequest", "docstring": "Standardized AI request structure.", "line_range": [30, 36], "methods": [], "bases": []}, {"name": "AIResponse", "docstring": "Standardized AI response structure.", "line_range": [40, 46], "methods": [], "bases": []}, {"name": "AIWorkflowMiddleware", "docstring": "Middleware that ensures ALL AI interactions go through LLMStruct system.\nThis solves the problem of AI not using its own infrastructure.", "line_range": [49, 386], "methods": [{"name": "__init__", "docstring": "", "line_range": [55, 74], "parameters": ["self", "project_root", "mode"]}, {"name": "_load_middleware_config", "docstring": "Load middleware configuration.", "line_range": [76, 101], "parameters": ["self"]}, {"name": "process_ai_request", "docstring": "Main middleware entry point - ALL AI requests should go through this.\n\nArgs:\n    raw_query: Raw AI query/request\n    ai_handler: Optional custom AI handler function\n    \nReturns:\n    Processed AI response with llmstruct integration", "line_range": [103, 135], "parameters": ["self", "raw_query", "ai_handler"]}, {"name": "_parse_ai_request", "docstring": "Parse raw query into structured AI request.", "line_range": [137, 160], "parameters": ["self", "raw_query"]}, {"name": "_should_use_llmstruct", "docstring": "Determine if request should use llmstruct system.", "line_range": [162, 186], "parameters": ["self", "request"]}, {"name": "_process_with_llmstruct", "docstring": "Process request through full llmstruct system.", "line_range": [188, 219], "parameters": ["self", "request", "ai_handler"]}, {"name": "_process_bypass", "docstring": "Process request without llmstruct system.", "line_range": [221, 236], "parameters": ["self", "request", "ai_handler"]}, {"name": "_optimize_context", "docstring": "Optimize context using orchestrator.", "line_range": [238, 261], "parameters": ["self", "request"]}, {"name": "_analyze_ai_delegation", "docstring": "Analyze which AI should handle this request.", "line_range": [263, 280], "parameters": ["self", "request"]}, {"name": "_get_enhanced_context", "docstring": "Get enhanced context with project awareness.", "line_range": [282, 295], "parameters": ["self", "request", "context_result"]}, {"name": "_get_capability_summary", "docstring": "Get current system capabilities.", "line_range": [297, 310], "parameters": ["self"]}, {"name": "_generate_usage_guidance", "docstring": "Generate guidance for AI on how to use llmstruct system.", "line_range": [312, 331], "parameters": ["self", "request"]}, {"name": "_map_tags_to_scenario", "docstring": "Map context tags to orchestrator scenarios.", "line_range": [333, 348], "parameters": ["self", "tags"]}, {"name": "_default_ai_processing", "docstring": "Default AI processing when no custom handler provided.", "line_range": [350, 365], "parameters": ["self", "request", "context"]}, {"name": "get_middleware_stats", "docstring": "Get middleware usage statistics.", "line_range": [367, 376], "parameters": ["self"]}, {"name": "force_llmstruct_mode", "docstring": "Force all future requests to use llmstruct system.", "line_range": [378, 381], "parameters": ["self"]}, {"name": "enable_guidance_mode", "docstring": "Enable guided mode with llmstruct suggestions.", "line_range": [383, 386], "parameters": ["self"]}], "bases": []}], "callgraph": {"__init__": ["create_context_orchestrator", "logger.info", "Path", "CursorAIBridge", "self._load_middleware_config", "SystemCapabilityDiscovery", "str"], "_load_middleware_config": ["json.load", "config_path.exists", "open"], "process_ai_request": ["AIResponse", "self._should_use_llmstruct", "self._process_bypass", "logger.error", "time.time", "self._process_with_llmstruct", "str", "self._parse_ai_request"], "_parse_ai_request": ["re.findall", "re.sub", "context_tags.extend", "time.time", "AIRequest"], "_should_use_llmstruct": [], "_process_with_llmstruct": ["self._get_enhanced_context", "enhanced_context.get", "self._analyze_ai_delegation", "AIResponse", "self._default_ai_processing", "self._optimize_context", "time.time", "ai_handler"], "_process_bypass": ["AIResponse", "ai_handler"], "_optimize_context": ["context.get", "len", "self._map_tags_to_scenario", "logger.error", "str"], "_analyze_ai_delegation": ["str", "delegation.get", "logger.error"], "_get_enhanced_context": ["self._get_capability_summary", "self._generate_usage_guidance"], "_get_capability_summary": ["str"], "_generate_usage_guidance": ["guidance.append"], "_map_tags_to_scenario": [], "_default_ai_processing": [], "get_middleware_stats": [], "force_llmstruct_mode": ["logger.info"], "enable_guidance_mode": ["logger.info"], "initialize_ai_middleware": ["AIWorkflowMiddleware"], "get_ai_middleware": [], "process_ai_query": ["_middleware_instance.process_ai_request", "RuntimeError"], "ensure_llmstruct_integration": [], "wrapper": ["logger.warning", "kwargs.get", "get_ai_middleware", "func", "middleware.process_ai_request", "str"]}, "dependencies": ["Any", "Callable", "CursorAIBridge", "Dict", "Enum", "List", "Optional", "Path", "SystemCapabilityDiscovery", "create_context_orchestrator", "dataclass", "dataclasses", "enum", "json", "llmstruct.ai_self_awareness", "llmstruct.context_orchestrator", "llmstruct.cursor_ai_bridge", "logging", "pathlib", "re", "time", "typing"], "hash": "54add1ca5d729600b85063062c19fc6d076fb219792f66c2420719fed3fb6c66"}, {"module_id": "src.llmstruct.ai_self_awareness", "path": "src/llmstruct/ai_self_awareness.py", "category": "core", "module_doc": "AI Self-Awareness Enhancement Module\nProvides comprehensive system introspection and capability discovery for llmstruct AI systems.\nEnhanced with Cursor IDE integration and real-time metrics.", "functions": [{"name": "__init__", "docstring": "Initialize the capability discovery system with CLI integration.", "line_range": [101, 107], "parameters": ["self", "project_root"], "decorators": []}, {"name": "_ensure_directories", "docstring": "Ensure required directories exist.", "line_range": [109, 111], "parameters": ["self"], "decorators": []}, {"name": "discover_all_capabilities", "docstring": "Perform comprehensive capability discovery with unused function integration.\n\nArgs:\n    force_refresh: If True, bypass cache and perform fresh discovery\n    \nReturns:\n    Complete system capabilities overview enhanced with integrated unused functions", "line_range": [113, 154], "parameters": ["self", "force_refresh"], "decorators": []}, {"name": "_get_integration_metrics", "docstring": "Get metrics about unused function integration success.", "line_range": [156, 163], "parameters": ["self"], "decorators": []}, {"name": "get_enhanced_capabilities_summary", "docstring": "Get enhanced capabilities summary including unused function integration.", "line_range": [165, 203], "parameters": ["self"], "decorators": []}, {"name": "get_comprehensive_ai_status", "docstring": "Get comprehensive AI status including unused function integration analysis.\nThis is the primary method for AI self-awareness reporting.", "line_range": [205, 246], "parameters": ["self"], "decorators": []}, {"name": "_discover_tools", "docstring": "Discover and check health of all available tools.", "line_range": [248, 260], "parameters": ["self"], "decorators": []}, {"name": "_check_cli_processor", "docstring": "Check CLI processor health.", "line_range": [262, 297], "parameters": ["self"], "decorators": []}, {"name": "_check_copilot_manager", "docstring": "Check Copilot manager health.", "line_range": [299, 336], "parameters": ["self"], "decorators": []}, {"name": "_check_context_orchestrator", "docstring": "Check context orchestrator health.", "line_range": [338, 393], "parameters": ["self"], "decorators": []}, {"name": "_check_cache_system", "docstring": "Check cache system health.", "line_range": [395, 438], "parameters": ["self"], "decorators": []}, {"name": "_check_struct_parser", "docstring": "Check struct.json parser health.", "line_range": [440, 484], "parameters": ["self"], "decorators": []}, {"name": "_check_docs_system", "docstring": "Check docs.json system health.", "line_range": [486, 517], "parameters": ["self"], "decorators": []}, {"name": "_discover_context_capabilities", "docstring": "Discover available context capabilities.", "line_range": [519, 556], "parameters": ["self"], "decorators": []}, {"name": "_check_integration_health", "docstring": "Check health of all system integrations.", "line_range": [558, 567], "parameters": ["self"], "decorators": []}, {"name": "_check_component_status", "docstring": "Check status of a specific component.", "line_range": [569, 574], "parameters": ["self", "component_name"], "decorators": []}, {"name": "_discover_vscode_capabilities", "docstring": "Discover VS Code specific capabilities.", "line_range": [576, 585], "parameters": ["self"], "decorators": []}, {"name": "_calculate_cache_hit_rate", "docstring": "Calculate cache hit rate using real metrics.", "line_range": [587, 589], "parameters": ["self"], "decorators": []}, {"name": "_estimate_system_load", "docstring": "Estimate current system load using real metrics.", "line_range": [591, 593], "parameters": ["self"], "decorators": []}, {"name": "_is_cache_valid", "docstring": "Check if cached capabilities are still valid.", "line_range": [595, 602], "parameters": ["self"], "decorators": []}, {"name": "_load_cached_capabilities", "docstring": "Load capabilities from cache.", "line_range": [604, 618], "parameters": ["self"], "decorators": []}, {"name": "_cache_capabilities", "docstring": "Cache capabilities to disk.", "line_range": [620, 630], "parameters": ["self", "capabilities"], "decorators": []}, {"name": "get_capabilities_summary", "docstring": "Get a human-readable summary of current capabilities.", "line_range": [632, 691], "parameters": ["self"], "decorators": []}, {"name": "_analyze_project_structure", "docstring": "Enhanced project structure analysis integrating multiple unused functions\nfor comprehensive AI self-awareness.", "line_range": [693, 739], "parameters": ["self"], "decorators": []}, {"name": "_get_enhanced_directory_structure", "docstring": "Integration of unused cli_utils.get_directory_structure() function\nfor enhanced AI project awareness.", "line_range": [741, 760], "parameters": ["self"], "decorators": []}, {"name": "_analyze_unused_capabilities", "docstring": "Analyze unused functions to discover hidden AI capabilities.\nThis transforms the 115 unused functions into potential AI enhancements.", "line_range": [762, 819], "parameters": ["self", "struct_data"], "decorators": []}, {"name": "_discover_config_capabilities", "docstring": "Integration of unused cli_config functions for AI configuration awareness.", "line_range": [821, 849], "parameters": ["self"], "decorators": []}, {"name": "_discover_context_scenarios", "docstring": "Integration of unused context_orchestrator functions for scenario awareness.", "line_range": [851, 890], "parameters": ["self"], "decorators": []}, {"name": "_is_ai_useful_command", "docstring": "Determine if a CLI command function would be useful for AI self-awareness.", "line_range": [892, 898], "parameters": ["self", "function_name"], "decorators": []}, {"name": "_is_ai_useful_config", "docstring": "Determine if a config function would be useful for AI configuration awareness.", "line_range": [900, 906], "parameters": ["self", "function_name"], "decorators": []}, {"name": "_is_ai_useful_utility", "docstring": "Determine if a utility function would be useful for AI operations.", "line_range": [908, 914], "parameters": ["self", "function_name"], "decorators": []}, {"name": "_prioritize_integrations", "docstring": "Prioritize which unused functions should be integrated first.", "line_range": [916, 932], "parameters": ["self", "capabilities"], "decorators": []}, {"name": "_basic_directory_scan", "docstring": "Basic directory scan for fallback scenarios.", "line_range": [934, 946], "parameters": ["self"], "decorators": []}, {"name": "get_cursor_status_report", "docstring": "Generate Cursor-specific status optimized for IDE integration.", "line_range": [949, 967], "parameters": ["self"], "decorators": []}, {"name": "optimize_context_for_cursor", "docstring": "Provide perfectly sized context for Cursor interactions.", "line_range": [969, 1001], "parameters": ["self", "query_analysis"], "decorators": []}, {"name": "get_goal_aligned_suggestions", "docstring": "Provide suggestions aligned with business goals from personal bridge.", "line_range": [1003, 1038], "parameters": ["self", "technical_context"], "decorators": []}, {"name": "_calculate_real_cache_hit_rate", "docstring": "Calculate actual cache performance from JSONCache and system metrics.", "line_range": [1040, 1066], "parameters": ["self"], "decorators": []}, {"name": "_get_real_system_load", "docstring": "Get actual system performance metrics.", "line_range": [1068, 1090], "parameters": ["self"], "decorators": []}, {"name": "_load_cursor_config", "docstring": "Load Cursor-specific configuration.", "line_range": [1092, 1102], "parameters": ["self"], "decorators": []}, {"name": "_load_personal_bridge", "docstring": "Load personal planning bridge data.", "line_range": [1104, 1114], "parameters": ["self"], "decorators": []}, {"name": "_analyze_query_type", "docstring": "Analyze query to determine optimal context type.", "line_range": [1116, 1144], "parameters": ["self", "query_analysis"], "decorators": []}, {"name": "_apply_privacy_filter", "docstring": "Apply privacy filtering based on level.", "line_range": [1146, 1163], "parameters": ["self", "context_data", "privacy_level"], "decorators": []}, {"name": "_filter_sensitive_dict", "docstring": "Filter sensitive information from dictionary.", "line_range": [1165, 1177], "parameters": ["self", "data"], "decorators": []}, {"name": "_get_overall_health_emoji", "docstring": "Get emoji representing overall system health.", "line_range": [1179, 1202], "parameters": ["self", "capabilities"], "decorators": []}, {"name": "_get_context_status_emoji", "docstring": "Get emoji for context engine status.", "line_range": [1204, 1214], "parameters": ["self", "context"], "decorators": []}, {"name": "_get_ai_integration_emoji", "docstring": "Get emoji for AI integration status.", "line_range": [1216, 1224], "parameters": ["self"], "decorators": []}, {"name": "_get_goal_alignment_status", "docstring": "Get goal alignment status.", "line_range": [1226, 1235], "parameters": ["self"], "decorators": []}], "classes": [{"name": "CapabilityStatus", "docstring": "Status of system capabilities.", "line_range": [22, 27], "methods": [], "bases": ["Enum"]}, {"name": "ContextMode", "docstring": "Available context modes.", "line_range": [30, 35], "methods": [], "bases": ["Enum"]}, {"name": "ToolHealth", "docstring": "Health status of a specific tool.", "line_range": [39, 46], "methods": [], "bases": []}, {"name": "ContextCapabilities", "docstring": "Available context capabilities.", "line_range": [50, 57], "methods": [], "bases": []}, {"name": "IntegrationHealth", "docstring": "Status of system integrations.", "line_range": [61, 68], "methods": [], "bases": []}, {"name": "VSCodeCapabilities", "docstring": "VS Code specific capabilities.", "line_range": [72, 79], "methods": [], "bases": []}, {"name": "SystemCapabilities", "docstring": "Complete system capabilities overview.", "line_range": [83, 91], "methods": [], "bases": []}, {"name": "SystemCapabilityDiscovery", "docstring": "Discovers and monitors system capabilities in real-time.\nProvides AI with comprehensive understanding of available tools and systems.\nEnhanced with unused function integration for maximum AI self-awareness.", "line_range": [94, 1235], "methods": [{"name": "__init__", "docstring": "Initialize the capability discovery system with CLI integration.", "line_range": [101, 107], "parameters": ["self", "project_root"]}, {"name": "_ensure_directories", "docstring": "Ensure required directories exist.", "line_range": [109, 111], "parameters": ["self"]}, {"name": "discover_all_capabilities", "docstring": "Perform comprehensive capability discovery with unused function integration.\n\nArgs:\n    force_refresh: If True, bypass cache and perform fresh discovery\n    \nReturns:\n    Complete system capabilities overview enhanced with integrated unused functions", "line_range": [113, 154], "parameters": ["self", "force_refresh"]}, {"name": "_get_integration_metrics", "docstring": "Get metrics about unused function integration success.", "line_range": [156, 163], "parameters": ["self"]}, {"name": "get_enhanced_capabilities_summary", "docstring": "Get enhanced capabilities summary including unused function integration.", "line_range": [165, 203], "parameters": ["self"]}, {"name": "get_comprehensive_ai_status", "docstring": "Get comprehensive AI status including unused function integration analysis.\nThis is the primary method for AI self-awareness reporting.", "line_range": [205, 246], "parameters": ["self"]}, {"name": "_discover_tools", "docstring": "Discover and check health of all available tools.", "line_range": [248, 260], "parameters": ["self"]}, {"name": "_check_cli_processor", "docstring": "Check CLI processor health.", "line_range": [262, 297], "parameters": ["self"]}, {"name": "_check_copilot_manager", "docstring": "Check Copilot manager health.", "line_range": [299, 336], "parameters": ["self"]}, {"name": "_check_context_orchestrator", "docstring": "Check context orchestrator health.", "line_range": [338, 393], "parameters": ["self"]}, {"name": "_check_cache_system", "docstring": "Check cache system health.", "line_range": [395, 438], "parameters": ["self"]}, {"name": "_check_struct_parser", "docstring": "Check struct.json parser health.", "line_range": [440, 484], "parameters": ["self"]}, {"name": "_check_docs_system", "docstring": "Check docs.json system health.", "line_range": [486, 517], "parameters": ["self"]}, {"name": "_discover_context_capabilities", "docstring": "Discover available context capabilities.", "line_range": [519, 556], "parameters": ["self"]}, {"name": "_check_integration_health", "docstring": "Check health of all system integrations.", "line_range": [558, 567], "parameters": ["self"]}, {"name": "_check_component_status", "docstring": "Check status of a specific component.", "line_range": [569, 574], "parameters": ["self", "component_name"]}, {"name": "_discover_vscode_capabilities", "docstring": "Discover VS Code specific capabilities.", "line_range": [576, 585], "parameters": ["self"]}, {"name": "_calculate_cache_hit_rate", "docstring": "Calculate cache hit rate using real metrics.", "line_range": [587, 589], "parameters": ["self"]}, {"name": "_estimate_system_load", "docstring": "Estimate current system load using real metrics.", "line_range": [591, 593], "parameters": ["self"]}, {"name": "_is_cache_valid", "docstring": "Check if cached capabilities are still valid.", "line_range": [595, 602], "parameters": ["self"]}, {"name": "_load_cached_capabilities", "docstring": "Load capabilities from cache.", "line_range": [604, 618], "parameters": ["self"]}, {"name": "_cache_capabilities", "docstring": "Cache capabilities to disk.", "line_range": [620, 630], "parameters": ["self", "capabilities"]}, {"name": "get_capabilities_summary", "docstring": "Get a human-readable summary of current capabilities.", "line_range": [632, 691], "parameters": ["self"]}, {"name": "_analyze_project_structure", "docstring": "Enhanced project structure analysis integrating multiple unused functions\nfor comprehensive AI self-awareness.", "line_range": [693, 739], "parameters": ["self"]}, {"name": "_get_enhanced_directory_structure", "docstring": "Integration of unused cli_utils.get_directory_structure() function\nfor enhanced AI project awareness.", "line_range": [741, 760], "parameters": ["self"]}, {"name": "_analyze_unused_capabilities", "docstring": "Analyze unused functions to discover hidden AI capabilities.\nThis transforms the 115 unused functions into potential AI enhancements.", "line_range": [762, 819], "parameters": ["self", "struct_data"]}, {"name": "_discover_config_capabilities", "docstring": "Integration of unused cli_config functions for AI configuration awareness.", "line_range": [821, 849], "parameters": ["self"]}, {"name": "_discover_context_scenarios", "docstring": "Integration of unused context_orchestrator functions for scenario awareness.", "line_range": [851, 890], "parameters": ["self"]}, {"name": "_is_ai_useful_command", "docstring": "Determine if a CLI command function would be useful for AI self-awareness.", "line_range": [892, 898], "parameters": ["self", "function_name"]}, {"name": "_is_ai_useful_config", "docstring": "Determine if a config function would be useful for AI configuration awareness.", "line_range": [900, 906], "parameters": ["self", "function_name"]}, {"name": "_is_ai_useful_utility", "docstring": "Determine if a utility function would be useful for AI operations.", "line_range": [908, 914], "parameters": ["self", "function_name"]}, {"name": "_prioritize_integrations", "docstring": "Prioritize which unused functions should be integrated first.", "line_range": [916, 932], "parameters": ["self", "capabilities"]}, {"name": "_basic_directory_scan", "docstring": "Basic directory scan for fallback scenarios.", "line_range": [934, 946], "parameters": ["self"]}, {"name": "get_cursor_status_report", "docstring": "Generate Cursor-specific status optimized for IDE integration.", "line_range": [949, 967], "parameters": ["self"]}, {"name": "optimize_context_for_cursor", "docstring": "Provide perfectly sized context for Cursor interactions.", "line_range": [969, 1001], "parameters": ["self", "query_analysis"]}, {"name": "get_goal_aligned_suggestions", "docstring": "Provide suggestions aligned with business goals from personal bridge.", "line_range": [1003, 1038], "parameters": ["self", "technical_context"]}, {"name": "_calculate_real_cache_hit_rate", "docstring": "Calculate actual cache performance from JSONCache and system metrics.", "line_range": [1040, 1066], "parameters": ["self"]}, {"name": "_get_real_system_load", "docstring": "Get actual system performance metrics.", "line_range": [1068, 1090], "parameters": ["self"]}, {"name": "_load_cursor_config", "docstring": "Load Cursor-specific configuration.", "line_range": [1092, 1102], "parameters": ["self"]}, {"name": "_load_personal_bridge", "docstring": "Load personal planning bridge data.", "line_range": [1104, 1114], "parameters": ["self"]}, {"name": "_analyze_query_type", "docstring": "Analyze query to determine optimal context type.", "line_range": [1116, 1144], "parameters": ["self", "query_analysis"]}, {"name": "_apply_privacy_filter", "docstring": "Apply privacy filtering based on level.", "line_range": [1146, 1163], "parameters": ["self", "context_data", "privacy_level"]}, {"name": "_filter_sensitive_dict", "docstring": "Filter sensitive information from dictionary.", "line_range": [1165, 1177], "parameters": ["self", "data"]}, {"name": "_get_overall_health_emoji", "docstring": "Get emoji representing overall system health.", "line_range": [1179, 1202], "parameters": ["self", "capabilities"]}, {"name": "_get_context_status_emoji", "docstring": "Get emoji for context engine status.", "line_range": [1204, 1214], "parameters": ["self", "context"]}, {"name": "_get_ai_integration_emoji", "docstring": "Get emoji for AI integration status.", "line_range": [1216, 1224], "parameters": ["self"]}, {"name": "_get_goal_alignment_status", "docstring": "Get goal alignment status.", "line_range": [1226, 1235], "parameters": ["self"]}], "bases": []}], "callgraph": {"__init__": ["Path", "self._ensure_directories", "create_ai_cli_integration"], "_ensure_directories": [], "discover_all_capabilities": ["self._is_cache_valid", "self._discover_vscode_capabilities", "logger.info", "datetime.now", "self._estimate_system_load", "self._calculate_cache_hit_rate", "SystemCapabilities", "self._discover_tools", "self._discover_context_capabilities", "self._load_cached_capabilities", "self._cache_capabilities", "time.time", "self._check_integration_health", "self._get_integration_metrics", "self._analyze_project_structure"], "_get_integration_metrics": [], "get_enhanced_capabilities_summary": ["str", "enhanced_info.append", "hasattr", "self.get_capabilities_summary"], "get_comprehensive_ai_status": ["get_ai_enhanced_cli_summary", "str", "self.get_enhanced_capabilities_summary"], "_discover_tools": ["self._check_docs_system", "self._check_copilot_manager", "self._check_struct_parser", "self._check_cli_processor", "self._check_cache_system", "self._check_context_orchestrator"], "_check_cli_processor": ["datetime.now", "CLIUtils", "ToolHealth", "CLIConfig", "time.time", "CommandProcessor", "str"], "_check_copilot_manager": ["manager.get_context_status", "hasattr", "datetime.now", "ToolHealth", "initialize_copilot", "time.time", "str"], "_check_context_orchestrator": ["hasattr", "create_context_orchestrator", "logger.warning", "datetime.now", "ToolHealth", "get_optimized_context", "time.time", "str"], "_check_cache_system": ["cache.close", "cache.get_full_json", "datetime.now", "ToolHealth", "struct_file.exists", "cache.cache_json", "JSONCache", "time.time", "str"], "_check_struct_parser": ["struct_data.get", "datetime.now", "ToolHealth", "struct_file.exists", "FileNotFoundError", "missing_keys.append", "open", "time.time", "json.load", "str"], "_check_docs_system": ["datetime.now", "ToolHealth", "FileNotFoundError", "docs_file.exists", "open", "time.time", "json.load", "str"], "_discover_context_capabilities": ["config.get", "create_context_orchestrator", "list", "ContextCapabilities", "scenario_mappings.keys", "isinstance", "logger.error", "str"], "_check_integration_health": ["self._check_component_status", "IntegrationHealth"], "_check_component_status": ["hasattr"], "_discover_vscode_capabilities": ["VSCodeCapabilities"], "_calculate_cache_hit_rate": ["self._calculate_real_cache_hit_rate"], "_estimate_system_load": ["self._get_real_system_load"], "_is_cache_valid": ["time.time"], "_load_cached_capabilities": ["json.load", "logger.error", "open"], "_cache_capabilities": ["json.dump", "asdict", "logger.error", "open"], "get_capabilities_summary": ["chr", "self.discover_all_capabilities", "len", "str"], "_analyze_project_structure": ["self._discover_context_scenarios", "self._get_enhanced_directory_structure", "struct_data.get", "len", "self._analyze_unused_capabilities", "struct_file.exists", "module.get", "self._discover_config_capabilities", "open", "sum", "json.load", "str"], "_get_enhanced_directory_structure": ["str", "self._basic_directory_scan", "get_directory_structure"], "_analyze_unused_capabilities": ["cli_module.get", "struct_data.get", "self._is_ai_useful_utility", "min", "len", "utils_module.get", "self._prioritize_integrations", "config_module.get", "modules.get", "self._is_ai_useful_command", "f.startswith", "self._is_ai_useful_config", "str"], "_discover_config_capabilities": ["is_auto_update_enabled", "get_copilot_config", "get_queue_config", "get_context_config", "str"], "_discover_context_scenarios": ["get_context_for_scenario", "str", "get_metrics_summary"], "_is_ai_useful_command": [], "_is_ai_useful_config": [], "_is_ai_useful_utility": [], "_prioritize_integrations": ["priorities.append"], "_basic_directory_scan": ["item.is_dir", "str", "item.is_file", "logger.error"], "get_cursor_status_report": ["self._get_ai_integration_emoji", "self._get_overall_health_emoji", "self._load_cursor_config", "self.discover_all_capabilities", "self._get_goal_alignment_status", "self._get_context_status_emoji", "str"], "optimize_context_for_cursor": ["cursor_config.get", "optimal_config.get", "self._analyze_query_type", "context_rules.get", "self._apply_privacy_filter", "file_path.exists", "self._load_cursor_config", "logger.error", "open", "json.load", "str"], "get_goal_aligned_suggestions": ["suggestions.extend", "technical_context.lower", "any", "personal_bridge.get", "self._load_personal_bridge", "logger.error"], "_calculate_real_cache_hit_rate": ["cache_dir.exists", "list", "cache_file.stat", "len", "cache_dir.glob", "logger.error", "time.time"], "_get_real_system_load": ["min", "psutil.disk_usage", "logger.error", "psutil.virtual_memory", "str", "psutil.cpu_percent"], "_load_cursor_config": ["json.load", "logger.error", "config_path.exists", "open"], "_load_personal_bridge": ["bridge_path.exists", "json.load", "logger.error", "open"], "_analyze_query_type": ["query_analysis.get", "any"], "_apply_privacy_filter": ["isinstance", "self._filter_sensitive_dict", "context_data.items"], "_filter_sensitive_dict": ["data.items", "any", "isinstance", "self._filter_sensitive_dict", "key.lower"], "_get_overall_health_emoji": [], "_get_context_status_emoji": ["len"], "_get_ai_integration_emoji": ["hasattr"], "_get_goal_alignment_status": ["self._load_personal_bridge"]}, "dependencies": ["Any", "CLIConfig", "CLIUtils", "CommandProcessor", "CopilotContextManager", "Dict", "Enum", "JSONCache", "List", "Optional", "Path", "asdict", "create_ai_cli_integration", "create_context_orchestrator", "dataclass", "dataclasses", "datetime", "enum", "get_ai_enhanced_cli_summary", "get_auto_update_config", "get_context_config", "get_context_for_scenario", "get_copilot_config", "get_directory_structure", "get_metrics_summary", "get_optimized_context", "get_queue_config", "initialize_copilot", "is_auto_update_enabled", "json", "llmstruct.ai_cli_integration", "llmstruct.cache", "llmstruct.cli_commands", "llmstruct.cli_config", "llmstruct.cli_utils", "llmstruct.context_orchestrator", "llmstruct.copilot", "logging", "os", "pathlib", "psutil", "time", "typing"], "hash": "de0fc0c3829c83dfc026c1ecda0c1cc56753e17c115c751b2f45263e5cf6c097"}, {"module_id": "src.llmstruct.cache", "path": "src/llmstruct/cache.py", "category": "core", "module_doc": "", "functions": [{"name": "__init__", "docstring": "Initialize SQLite cache for JSON files.", "line_range": [21, 25], "parameters": ["self", "db_path"], "decorators": []}, {"name": "create_tables", "docstring": "Create tables for metadata and file paths.", "line_range": [27, 49], "parameters": ["self"], "decorators": []}, {"name": "cache_json", "docstring": "Cache JSON metadata and store full file path.", "line_range": [51, 90], "parameters": ["self", "json_path", "artifact_id", "summary", "tags"], "decorators": []}, {"name": "get_metadata", "docstring": "Retrieve metadata by artifact_id.", "line_range": [92, 108], "parameters": ["self", "artifact_id"], "decorators": []}, {"name": "get_full_json", "docstring": "Load full JSON by artifact_id.", "line_range": [110, 126], "parameters": ["self", "artifact_id"], "decorators": []}, {"name": "close", "docstring": "Close database connection.", "line_range": [128, 130], "parameters": ["self"], "decorators": []}], "classes": [{"name": "JSONCache", "docstring": "", "line_range": [20, 130], "methods": [{"name": "__init__", "docstring": "Initialize SQLite cache for JSON files.", "line_range": [21, 25], "parameters": ["self", "db_path"]}, {"name": "create_tables", "docstring": "Create tables for metadata and file paths.", "line_range": [27, 49], "parameters": ["self"]}, {"name": "cache_json", "docstring": "Cache JSON metadata and store full file path.", "line_range": [51, 90], "parameters": ["self", "json_path", "artifact_id", "summary", "tags"]}, {"name": "get_metadata", "docstring": "Retrieve metadata by artifact_id.", "line_range": [92, 108], "parameters": ["self", "artifact_id"]}, {"name": "get_full_json", "docstring": "Load full JSON by artifact_id.", "line_range": [110, 126], "parameters": ["self", "artifact_id"]}, {"name": "close", "docstring": "Close database connection.", "line_range": [128, 130], "parameters": ["self"]}], "bases": []}], "callgraph": {"__init__": ["self.create_tables", "sqlite3.connect"], "create_tables": [], "cache_json": ["logging.info", "hashlib.sha256", "json_file.exists", "json.dumps", "logging.error", "content.encode", "Path", "open", "str", "f.read"], "get_metadata": ["json.loads", "cursor.fetchone"], "get_full_json": ["logging.error", "cursor.fetchone", "json.load", "open"], "close": []}, "dependencies": ["Any", "Dict", "List", "Optional", "Path", "hashlib", "json", "logging", "pathlib", "sqlite3", "typing"], "hash": "d4439792ecb8b18d2fb3eac280ee2e7e338722a019a5fbbceee3128a9985ef09"}, {"module_id": "src.llmstruct.self_run", "path": "src/llmstruct/self_run.py", "category": "core", "module_doc": "", "functions": [{"name": "filter_struct", "docstring": "Filter struct.json or init.json based on prompt keywords. Supports dict or list as root.", "line_range": [20, 71], "parameters": ["struct", "prompt"], "decorators": []}, {"name": "attach_to_llm_request", "docstring": "Attach filtered JSON to LLM prompt, using cache if available.", "line_range": [74, 114], "parameters": ["context_path", "prompt", "cache"], "decorators": []}], "classes": [], "callgraph": {"filter_struct": ["any", "item.get", "isinstance", "module.get", "prompt.lower", "struct.get", "str", "filter_json"], "attach_to_llm_request": ["logging.info", "cache.get_full_json", "cache.get_metadata", "json.dumps", "select_json", "logging.error", "context_file.exists", "Path", "cache.cache_json", "filter_struct", "prompt.lower", "filter_json"]}, "dependencies": ["Any", "JSONCache", "Optional", "Path", "cache", "filter_json", "json", "json_selector", "logging", "pathlib", "select_json", "typing"], "hash": "f9cee229500252c3716ea8ed897cff7cc40e9af1f650b56b75960cf8660cb638"}, {"module_id": "src.llmstruct.cursor_ai_bridge", "path": "src/llmstruct/cursor_ai_bridge.py", "category": "core", "module_doc": "Cursor AI Bridge - API Layer for AI Assistant Integration\nProvides CLI and HTTP endpoints so Cursor AI can use WorkflowOrchestrator", "functions": [{"name": "main", "docstring": "CLI interface for Cursor AI Bridge.", "line_range": [350, 401], "parameters": [], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [29, 32], "parameters": ["self", "project_root"], "decorators": []}, {"name": "ai_get_context", "docstring": "Get AI-optimized context for current development state.", "line_range": [34, 67], "parameters": ["self", "query_type", "file_path"], "decorators": []}, {"name": "ai_analyze_task", "docstring": "Analyze a task and provide AI-optimized guidance.", "line_range": [69, 93], "parameters": ["self", "task_description"], "decorators": []}, {"name": "ai_create_task", "docstring": "Create a task through AI interface.", "line_range": [95, 114], "parameters": ["self", "title", "description", "priority"], "decorators": []}, {"name": "ai_get_onboarding_guide", "docstring": "Get comprehensive AI onboarding guide.", "line_range": [116, 145], "parameters": ["self"], "decorators": []}, {"name": "ai_check_duplicates", "docstring": "Check for code duplicates with AI-friendly output.", "line_range": [147, 171], "parameters": ["self", "threshold"], "decorators": []}, {"name": "ai_suggest", "docstring": "Get AI suggestions based on context.", "line_range": [173, 199], "parameters": ["self", "context"], "decorators": []}, {"name": "_estimate_task_complexity", "docstring": "Estimate task complexity based on codebase analysis.", "line_range": [201, 215], "parameters": ["self", "task", "struct_analysis"], "decorators": []}, {"name": "_suggest_approach", "docstring": "Suggest approach based on task and codebase state.", "line_range": [217, 234], "parameters": ["self", "task", "struct_analysis"], "decorators": []}, {"name": "_find_relevant_modules", "docstring": "Find modules relevant to the task.", "line_range": [236, 248], "parameters": ["self", "task", "struct_analysis"], "decorators": []}, {"name": "_check_potential_duplicates", "docstring": "Check if task might create duplicates.", "line_range": [250, 253], "parameters": ["self", "task", "struct_analysis"], "decorators": []}, {"name": "_recommend_ai_for_task", "docstring": "Recommend which AI to use for the task.", "line_range": [255, 264], "parameters": ["self", "task"], "decorators": []}, {"name": "_generate_workflow_steps", "docstring": "Generate workflow steps for the task.", "line_range": [266, 276], "parameters": ["self", "task"], "decorators": []}, {"name": "_determine_context_requirements", "docstring": "Determine what context is needed for the task.", "line_range": [278, 290], "parameters": ["self", "task"], "decorators": []}, {"name": "_get_workflow_suggestions", "docstring": "Get workflow suggestions based on context.", "line_range": [292, 299], "parameters": ["self", "context"], "decorators": []}, {"name": "_get_available_ai_commands", "docstring": "Get available AI commands.", "line_range": [301, 310], "parameters": ["self"], "decorators": []}, {"name": "_identify_high_priority_duplicates", "docstring": "Identify high-priority duplicates for refactoring.", "line_range": [312, 315], "parameters": ["self", "analysis"], "decorators": []}, {"name": "_generate_refactoring_suggestions", "docstring": "Generate refactoring suggestions.", "line_range": [317, 323], "parameters": ["self", "analysis"], "decorators": []}, {"name": "_classify_task_type", "docstring": "Classify task type for AI delegation.", "line_range": [325, 338], "parameters": ["self", "context"], "decorators": []}, {"name": "_generate_next_steps", "docstring": "Generate next steps based on context.", "line_range": [340, 347], "parameters": ["self", "context"], "decorators": []}], "classes": [{"name": "CursorAIBridge", "docstring": "Bridge that allows Cursor AI assistant to use WorkflowOrchestrator\nthrough CLI commands and structured JSON responses.", "line_range": [23, 347], "methods": [{"name": "__init__", "docstring": "", "line_range": [29, 32], "parameters": ["self", "project_root"]}, {"name": "ai_get_context", "docstring": "Get AI-optimized context for current development state.", "line_range": [34, 67], "parameters": ["self", "query_type", "file_path"]}, {"name": "ai_analyze_task", "docstring": "Analyze a task and provide AI-optimized guidance.", "line_range": [69, 93], "parameters": ["self", "task_description"]}, {"name": "ai_create_task", "docstring": "Create a task through AI interface.", "line_range": [95, 114], "parameters": ["self", "title", "description", "priority"]}, {"name": "ai_get_onboarding_guide", "docstring": "Get comprehensive AI onboarding guide.", "line_range": [116, 145], "parameters": ["self"]}, {"name": "ai_check_duplicates", "docstring": "Check for code duplicates with AI-friendly output.", "line_range": [147, 171], "parameters": ["self", "threshold"]}, {"name": "ai_suggest", "docstring": "Get AI suggestions based on context.", "line_range": [173, 199], "parameters": ["self", "context"]}, {"name": "_estimate_task_complexity", "docstring": "Estimate task complexity based on codebase analysis.", "line_range": [201, 215], "parameters": ["self", "task", "struct_analysis"]}, {"name": "_suggest_approach", "docstring": "Suggest approach based on task and codebase state.", "line_range": [217, 234], "parameters": ["self", "task", "struct_analysis"]}, {"name": "_find_relevant_modules", "docstring": "Find modules relevant to the task.", "line_range": [236, 248], "parameters": ["self", "task", "struct_analysis"]}, {"name": "_check_potential_duplicates", "docstring": "Check if task might create duplicates.", "line_range": [250, 253], "parameters": ["self", "task", "struct_analysis"]}, {"name": "_recommend_ai_for_task", "docstring": "Recommend which AI to use for the task.", "line_range": [255, 264], "parameters": ["self", "task"]}, {"name": "_generate_workflow_steps", "docstring": "Generate workflow steps for the task.", "line_range": [266, 276], "parameters": ["self", "task"]}, {"name": "_determine_context_requirements", "docstring": "Determine what context is needed for the task.", "line_range": [278, 290], "parameters": ["self", "task"]}, {"name": "_get_workflow_suggestions", "docstring": "Get workflow suggestions based on context.", "line_range": [292, 299], "parameters": ["self", "context"]}, {"name": "_get_available_ai_commands", "docstring": "Get available AI commands.", "line_range": [301, 310], "parameters": ["self"]}, {"name": "_identify_high_priority_duplicates", "docstring": "Identify high-priority duplicates for refactoring.", "line_range": [312, 315], "parameters": ["self", "analysis"]}, {"name": "_generate_refactoring_suggestions", "docstring": "Generate refactoring suggestions.", "line_range": [317, 323], "parameters": ["self", "analysis"]}, {"name": "_classify_task_type", "docstring": "Classify task type for AI delegation.", "line_range": [325, 338], "parameters": ["self", "context"]}, {"name": "_generate_next_steps", "docstring": "Generate next steps based on context.", "line_range": [340, 347], "parameters": ["self", "context"]}], "bases": []}], "callgraph": {"__init__": ["CursorIntegrationManager", "Path", "WorkflowOrchestrator", "str"], "ai_get_context": ["self._get_workflow_suggestions", "datetime.utcnow", "context.get", "len", "self._get_available_ai_commands", "str", "cursor_context.get"], "ai_analyze_task": ["self._determine_context_requirements", "context.get", "self._suggest_approach", "self._check_potential_duplicates", "self._recommend_ai_for_task", "self._estimate_task_complexity", "self._generate_workflow_steps", "str", "self._find_relevant_modules"], "ai_create_task": ["self.ai_analyze_task", "str", "datetime.utcnow"], "ai_get_onboarding_guide": ["str"], "ai_check_duplicates": ["analysis.get", "self._generate_refactoring_suggestions", "self._identify_high_priority_duplicates", "str"], "ai_suggest": ["self._classify_task_type", "self._get_workflow_suggestions", "self._generate_next_steps", "delegation.get", "str"], "_estimate_task_complexity": ["complexity_keywords.items", "task.lower", "any"], "_suggest_approach": ["task.lower", "approaches.append"], "_find_relevant_modules": ["struct_analysis.get", "relevant.append", "any", "task.lower", "module.get"], "_check_potential_duplicates": [], "_recommend_ai_for_task": ["task.lower", "any"], "_generate_workflow_steps": [], "_determine_context_requirements": ["task.lower", "requirements.append"], "_get_workflow_suggestions": [], "_get_available_ai_commands": [], "_identify_high_priority_duplicates": [], "_generate_refactoring_suggestions": [], "_classify_task_type": ["any", "context.lower"], "_generate_next_steps": [], "main": ["bridge.ai_analyze_task", "parser.add_argument", "bridge.ai_create_task", "bridge.ai_onboarding_guide", "print", "argparse.ArgumentParser", "json.dumps", "CursorAIBridge", "bridge.ai_suggest", "bridge.ai_check_duplicates", "bridge.ai_get_context", "parser.parse_args"]}, "dependencies": ["Any", "CursorIntegrationManager", "Dict", "List", "Optional", "Path", "SystemCapabilityDiscovery", "WorkflowOrchestrator", "ai_self_awareness", "argparse", "cursor_integration", "datetime", "json", "logging", "pathlib", "sys", "typing", "workflow_orchestrator"], "hash": "b2a2b9e1cf581e85e4467559c56258f4a0d6a5003c11ca4143773a732cb33468"}, {"module_id": "src.llmstruct.transpiler", "path": "src/llmstruct/transpiler.py", "category": "core", "module_doc": "AI-Powered Universal Transpiler\nConverts entire codebases from one language to another using LLM analysis", "functions": [{"name": "main", "docstring": "CLI interface for AI transpiler", "line_range": [475, 527], "parameters": [], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [142, 149], "parameters": ["self", "config"], "decorators": []}, {"name": "analyze_source_project", "docstring": "Analyze source project structure", "line_range": [151, 155], "parameters": ["self", "project_path"], "decorators": []}, {"name": "create_target_project_structure", "docstring": "Create target project directory structure", "line_range": [157, 221], "parameters": ["self", "analysis"], "decorators": []}, {"name": "_generate_structure_info", "docstring": "Generate structure information for README", "line_range": [223, 253], "parameters": ["self", "analysis"], "decorators": []}, {"name": "transpile_module", "docstring": "Transpile a single module using AI", "line_range": [255, 318], "parameters": ["self", "module", "context"], "decorators": []}, {"name": "_format_functions", "docstring": "Format functions for prompt", "line_range": [320, 333], "parameters": ["self", "functions"], "decorators": []}, {"name": "_format_classes", "docstring": "Format classes for prompt", "line_range": [335, 348], "parameters": ["self", "classes"], "decorators": []}, {"name": "determine_target_path", "docstring": "Determine target file path for transpiled module", "line_range": [350, 388], "parameters": ["self", "module"], "decorators": []}, {"name": "transpile_project", "docstring": "Transpile entire project", "line_range": [390, 472], "parameters": ["self", "project_path"], "decorators": []}], "classes": [{"name": "TranspilerConfig", "docstring": "Configuration for AI transpiler", "line_range": [24, 35], "methods": [], "bases": []}, {"name": "LanguageTemplates", "docstring": "Templates and patterns for different target languages", "line_range": [38, 136], "methods": [], "bases": []}, {"name": "AITranspiler", "docstring": "AI-powered code transpiler", "line_range": [139, 472], "methods": [{"name": "__init__", "docstring": "", "line_range": [142, 149], "parameters": ["self", "config"]}, {"name": "analyze_source_project", "docstring": "Analyze source project structure", "line_range": [151, 155], "parameters": ["self", "project_path"]}, {"name": "create_target_project_structure", "docstring": "Create target project directory structure", "line_range": [157, 221], "parameters": ["self", "analysis"]}, {"name": "_generate_structure_info", "docstring": "Generate structure information for README", "line_range": [223, 253], "parameters": ["self", "analysis"]}, {"name": "transpile_module", "docstring": "Transpile a single module using AI", "line_range": [255, 318], "parameters": ["self", "module", "context"]}, {"name": "_format_functions", "docstring": "Format functions for prompt", "line_range": [320, 333], "parameters": ["self", "functions"]}, {"name": "_format_classes", "docstring": "Format classes for prompt", "line_range": [335, 348], "parameters": ["self", "classes"]}, {"name": "determine_target_path", "docstring": "Determine target file path for transpiled module", "line_range": [350, 388], "parameters": ["self", "module"]}, {"name": "transpile_project", "docstring": "Transpile entire project", "line_range": [390, 472], "parameters": ["self", "project_path"]}], "bases": []}], "callgraph": {"__init__": ["ConverterConfig", "UniversalConverter", "LLMClient"], "analyze_source_project": ["logger.info"], "create_target_project_structure": ["shutil.rmtree", "logger.warning", "self._generate_structure_info", "Path", "output_path.exists", "output_path.mkdir", "src_dir.mkdir"], "_generate_structure_info": ["len", "categories.items", "stats.get", "module.get", "analysis.get", "category.title"], "transpile_module": ["response.strip", "target_lang.upper", "len", "self._format_classes", "self._format_functions", "target_lang.lower", "logger.error", "module.get", "ctx_module.get", "str"], "_format_functions": ["len", "func.get"], "_format_classes": ["cls.get", "len"], "determine_target_path": ["len", "module_id.split", "Path", "module.get"], "transpile_project": ["report_path.write_text", "self.create_target_project_structure", "logger.info", "self.analyze_source_project", "len", "json.dumps", "full_target_path.write_text", "self.determine_target_path", "Path", "self.transpile_module", "errors.append", "analysis.get", "str", "range", "logger.error", "transpiled_files.append"], "main": ["TranspilerConfig", "print", "parser.add_argument", "AITranspiler", "argparse.ArgumentParser", "len", "exit", "traceback.print_exc", "logger.error", "parser.parse_args", "Language", "transpiler.transpile_project"]}, "dependencies": ["Any", "ConverterConfig", "Dict", "Enum", "LLMClient", "Language", "List", "Optional", "Path", "Tuple", "UniversalConverter", "argparse", "dataclass", "dataclasses", "enum", "json", "llm_client", "logging", "os", "parsers.universal_converter", "pathlib", "shutil", "traceback", "typing"], "hash": "5e9ee72b1514522197462f0369930005bfc88b8d4280c814f8e296668b4e7c38"}, {"module_id": "src.llmstruct.json_selector", "path": "src/llmstruct/json_selector.py", "category": "core", "module_doc": "", "functions": [{"name": "filter_json", "docstring": "Filter JSON data by key-value pair and select fields.", "line_range": [20, 46], "parameters": ["data", "filter_key", "filter_value", "fields"], "decorators": []}, {"name": "select_json", "docstring": "Load and filter JSON file, optionally parsing partially.", "line_range": [49, 116], "parameters": ["json_path", "filter_key", "filter_value", "fields", "partial"], "decorators": []}], "classes": [], "callgraph": {"filter_json": ["isinstance", "item.get", "data.get", "filtered.append"], "select_json": ["current_item.get", "json_file.exists", "prefix.startswith", "json.load", "logging.error", "Path", "filtered.append", "ijson.parse", "open", "path.append", "f.seek", "filter_json"]}, "dependencies": ["Any", "Dict", "List", "Optional", "Path", "argparse", "ijson", "json", "logging", "pathlib", "typing"], "hash": "8d3216b4eff05bdde8725caedab745c57ef0c2d52cd84b07f7cabc7b15256d2c"}, {"module_id": "src.llmstruct.cli", "path": "src/llmstruct/cli.py", "category": "core", "module_doc": "LLMStruct CLI - Main entry point for the command-line interface.", "functions": [{"name": "load_gitignore", "docstring": "Load and normalize patterns from .gitignore.", "line_range": [43, 57], "parameters": ["root_dir"], "decorators": []}, {"name": "load_config", "docstring": "Load settings from llmstruct.toml or return empty dict.", "line_range": [60, 69], "parameters": ["root_dir"], "decorators": []}, {"name": "read_file_content", "docstring": "Read content of a file if it exists and is a text file.", "line_range": [72, 81], "parameters": ["file_path"], "decorators": []}, {"name": "write_to_file", "docstring": "Write content to a file in base_dir (default ./tmp) and return the path.", "line_range": [84, 104], "parameters": ["content", "filename", "base_dir"], "decorators": []}, {"name": "parse_files_from_response", "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).", "line_range": [107, 114], "parameters": ["response"], "decorators": []}, {"name": "interactive", "docstring": "Run interactive CLI with modular structure if available, fallback to legacy.", "line_range": [117, 127], "parameters": ["args"], "decorators": []}, {"name": "interactive_modular", "docstring": "Run interactive CLI with modular structure.", "line_range": [130, 144], "parameters": ["args"], "decorators": []}, {"name": "interactive_legacy", "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.", "line_range": [147, 503], "parameters": ["args"], "decorators": []}, {"name": "process_cli_queue_enhanced", "docstring": "Enhanced queue processing with workflow support, performance tracking, and safety validation.", "line_range": [506, 705], "parameters": ["root_dir", "context_path", "args", "cache", "client"], "decorators": []}, {"name": "parse", "docstring": "Parse codebase and generate struct.json.", "line_range": [708, 759], "parameters": ["args"], "decorators": []}, {"name": "query", "docstring": "Query LLMs with prompt and context.", "line_range": [762, 818], "parameters": ["args"], "decorators": []}, {"name": "context", "docstring": "Generate context.json from input JSON.", "line_range": [821, 823], "parameters": ["args"], "decorators": []}, {"name": "dogfood", "docstring": "Run dogfooding analysis.", "line_range": [826, 828], "parameters": ["args"], "decorators": []}, {"name": "review", "docstring": "Review codebase with LLM.", "line_range": [831, 833], "parameters": ["args"], "decorators": []}, {"name": "copilot", "docstring": "Copilot integration and context management.", "line_range": [836, 954], "parameters": ["args"], "decorators": []}, {"name": "audit", "docstring": "Audit project structure and generate reports.", "line_range": [957, 975], "parameters": ["args"], "decorators": []}, {"name": "analyze_duplicates", "docstring": "Analyze function duplication using struct.json deep analysis.", "line_range": [978, 1081], "parameters": ["args"], "decorators": []}, {"name": "main", "docstring": "Command-line interface for LLMstruct.", "line_range": [1084, 1314], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"load_gitignore": ["line.startswith", "gitignore_path.open", "gitignore_path.exists", "logging.error", "Path", "line.strip"], "load_config": ["config_path.open", "logging.error", "Path", "toml.load", "config_path.exists"], "read_file_content": ["path.open", "path.is_file", "logging.error", "Path", "f.read"], "write_to_file": ["logging.warning", "logging.info", "base_path.mkdir", "re.sub", "file_path.exists", "Path", "logging.error", "f.write", "file_path.open", "str"], "parse_files_from_response": ["filename.strip", "files.append", "re.findall", "content.strip"], "interactive": ["interactive_modular", "interactive_legacy", "logging.warning"], "interactive_modular": ["create_cli_core", "hasattr", "logging.info", "cli_core.run_interactive_mode"], "interactive_legacy": ["logging.warning", "print", "cache.close", "os.listdir", "re.match", "json.dumps", "process_cli_queue_enhanced", "time.ctime", "logging.error", "Path", "LLMClient", "cache.clear", "cache.get_stats", "sorted", "load_gitignore", "len", "input", "os.makedirs", "open", "args_str.strip", "json.dump", "workflow.get", "events_data.append", "client.query", "int", "cache.list_keys", "parse", "get_folder_structure", "JSONCache", "user_input.startswith", "time.time", "m.group", "os.stat", "struct_data.get", "write_to_file", "attach_to_llm_request", "user_input.lower", "read_file_content", "isinstance", "subprocess.run", "json.load"], "process_cli_queue_enhanced": ["logging.info", "workflow.get", "print", "write_to_file", "load_gitignore", "attach_to_llm_request", "len", "client.query", "enumerate", "logging.error", "item.get", "isinstance", "get_folder_structure", "options.get", "open", "read_file_content", "time.time", "json.load"], "parse": ["config.get", "logging.warning", "json.dump", "logging.info", "cache.close", "load_gitignore", "load_config", "cache.cache_json", "logging.error", "Path", "parsing_config.get", "cli_config.get", "JSONCache", "generate_json"], "query": ["json.dump", "logging.info", "logging.warning", "hasattr", "create_context_orchestrator", "cache.close", "client.query", "client.query_with_context", "logging.error", "Path", "JSONCache", "orchestrator.get_context_for_scenario", "LLMClient"], "context": ["logging.warning"], "dogfood": ["logging.warning"], "review": ["logging.warning"], "copilot": ["print", "shutil.copy", "getattr", "logging.error", "Path", "initialize_copilot", "manager.refresh_all_contexts", "f.write", "config_path.exists", "manager.export_context", "template_path.exists", "open", "manager.get_context_status", "layers.split", "manager.load_context_layer", "manager.close", "logging.info", "hasattr", "manager.validate_change", "manager.unload_context_layer", "smart_suggest", "enumerate"], "audit": ["print", "hasattr", "file_path.exists", "Path", "analyze_duplicates"], "analyze_duplicates": ["json.dump", "print", "hasattr", "sorted", "json.dumps", "len", "r.get", "orchestrator.analyze_codebase_for_duplicates", "getattr", "enumerate", "rec.get", "duplicates.items", "duplication_data.get", "filtered_duplicates.items", "traceback.print_exc", "open", "analysis.get", "WorkflowOrchestrator"], "main": ["interactive_parser.add_argument", "interactive", "audit_parser.add_argument", "parser.parse_args", "dogfood_parser.add_argument", "query_parser.add_argument", "copilot_parser.add_argument", "review", "context_parser.add_argument", "audit", "asyncio.run", "analyze_duplicates", "parse", "duplicates_parser.add_argument", "parse_parser.add_argument", "dogfood", "subparsers.add_parser", "context", "argparse.ArgumentParser", "copilot", "review_parser.add_argument", "query", "parser.add_subparsers"]}, "dependencies": ["JSONCache", "LLMClient", "List", "Optional", "Path", "WorkflowOrchestrator", "argparse", "asyncio", "attach_to_llm_request", "cli_core", "context_orchestrator", "copilot", "create_cli_core", "create_context_orchestrator", "generate_json", "get_folder_structure", "initialize_copilot", "json", "llmstruct", "llmstruct.cache", "llmstruct.generators.json_generator", "llmstruct.self_run", "logging", "os", "pathlib", "re", "shutil", "smart_suggest", "subprocess", "sys", "time", "toml", "traceback", "typing", "workflow_orchestrator"], "hash": "3c17b835b8461314aacbb27439fa1f5848af9e58612f45df4a50c9562c2939cb"}, {"module_id": "src.llmstruct.cursor_integration", "path": "src/llmstruct/cursor_integration.py", "category": "core", "module_doc": "Cursor IDE Integration Module\nProvides seamless integration between llmstruct AI capabilities and Cursor IDE.", "functions": [{"name": "create_cursor_integration", "docstring": "Create a Cursor integration manager for the project.", "line_range": [435, 437], "parameters": ["project_root"], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [31, 35], "parameters": ["self", "project_root"], "decorators": []}, {"name": "get_cursor_optimized_context", "docstring": "Provide Cursor with perfectly sized context based on query analysis.", "line_range": [37, 71], "parameters": ["self", "query_type", "file_context"], "decorators": []}, {"name": "_load_cursor_config", "docstring": "Load Cursor-specific configuration.", "line_range": [73, 83], "parameters": ["self"], "decorators": []}, {"name": "_apply_privacy_filter", "docstring": "Apply privacy filtering based on level.", "line_range": [85, 101], "parameters": ["self", "context_data", "privacy_level"], "decorators": []}, {"name": "_filter_sensitive_dict", "docstring": "Filter sensitive information from dictionary.", "line_range": [103, 115], "parameters": ["self", "data"], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [121, 124], "parameters": ["self", "project_root"], "decorators": []}, {"name": "delegate_to_optimal_ai", "docstring": "Route tasks to best AI model based on preferences.", "line_range": [126, 160], "parameters": ["self", "task_type", "context"], "decorators": []}, {"name": "_calculate_delegation_confidence", "docstring": "Calculate confidence in AI delegation decision.", "line_range": [162, 175], "parameters": ["self", "task_type", "selected_ai"], "decorators": []}, {"name": "_load_cursor_config", "docstring": "Load Cursor configuration.", "line_range": [177, 187], "parameters": ["self"], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [193, 195], "parameters": ["self", "project_root"], "decorators": []}, {"name": "get_goal_aligned_suggestions", "docstring": "Provide suggestions aligned with business goals.", "line_range": [197, 242], "parameters": ["self", "technical_context"], "decorators": []}, {"name": "get_priority_guidance", "docstring": "Provide priority guidance based on business objectives.", "line_range": [244, 270], "parameters": ["self", "feature_options"], "decorators": []}, {"name": "_calculate_feature_score", "docstring": "Calculate priority score for a feature.", "line_range": [272, 292], "parameters": ["self", "feature", "prioritization"], "decorators": []}, {"name": "_get_scoring_reasoning", "docstring": "Get reasoning for feature scoring.", "line_range": [294, 307], "parameters": ["self", "feature", "prioritization"], "decorators": []}, {"name": "_load_personal_bridge", "docstring": "Load personal planning bridge data.", "line_range": [309, 319], "parameters": ["self"], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [325, 328], "parameters": ["self", "project_root"], "decorators": []}, {"name": "start_session", "docstring": "Start a new Cursor session.", "line_range": [330, 349], "parameters": ["self", "session_id", "user_preferences"], "decorators": []}, {"name": "save_session_context", "docstring": "Save important context for next session.", "line_range": [351, 377], "parameters": ["self", "session_data"], "decorators": []}, {"name": "_load_session_context", "docstring": "Load context from previous sessions.", "line_range": [379, 388], "parameters": ["self"], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [394, 400], "parameters": ["self", "project_root"], "decorators": []}, {"name": "get_comprehensive_cursor_response", "docstring": "Get comprehensive response optimized for Cursor.", "line_range": [402, 431], "parameters": ["self", "query", "file_context"], "decorators": []}], "classes": [{"name": "CursorSession", "docstring": "Represents a Cursor IDE session with context and preferences.", "line_range": [19, 25], "methods": [], "bases": []}, {"name": "CursorContextManager", "docstring": "Manages context optimization specifically for Cursor interactions.", "line_range": [28, 115], "methods": [{"name": "__init__", "docstring": "", "line_range": [31, 35], "parameters": ["self", "project_root"]}, {"name": "get_cursor_optimized_context", "docstring": "Provide Cursor with perfectly sized context based on query analysis.", "line_range": [37, 71], "parameters": ["self", "query_type", "file_context"]}, {"name": "_load_cursor_config", "docstring": "Load Cursor-specific configuration.", "line_range": [73, 83], "parameters": ["self"]}, {"name": "_apply_privacy_filter", "docstring": "Apply privacy filtering based on level.", "line_range": [85, 101], "parameters": ["self", "context_data", "privacy_level"]}, {"name": "_filter_sensitive_dict", "docstring": "Filter sensitive information from dictionary.", "line_range": [103, 115], "parameters": ["self", "data"]}], "bases": []}, {"name": "CursorMultiAIOrchestrator", "docstring": "Coordinates different AI models through Cursor interface.", "line_range": [118, 187], "methods": [{"name": "__init__", "docstring": "", "line_range": [121, 124], "parameters": ["self", "project_root"]}, {"name": "delegate_to_optimal_ai", "docstring": "Route tasks to best AI model based on preferences.", "line_range": [126, 160], "parameters": ["self", "task_type", "context"]}, {"name": "_calculate_delegation_confidence", "docstring": "Calculate confidence in AI delegation decision.", "line_range": [162, 175], "parameters": ["self", "task_type", "selected_ai"]}, {"name": "_load_cursor_config", "docstring": "Load Cursor configuration.", "line_range": [177, 187], "parameters": ["self"]}], "bases": []}, {"name": "PersonalPlanningCursorBridge", "docstring": "Bridge between personal planning and Cursor without exposing sensitive data.", "line_range": [190, 319], "methods": [{"name": "__init__", "docstring": "", "line_range": [193, 195], "parameters": ["self", "project_root"]}, {"name": "get_goal_aligned_suggestions", "docstring": "Provide suggestions aligned with business goals.", "line_range": [197, 242], "parameters": ["self", "technical_context"]}, {"name": "get_priority_guidance", "docstring": "Provide priority guidance based on business objectives.", "line_range": [244, 270], "parameters": ["self", "feature_options"]}, {"name": "_calculate_feature_score", "docstring": "Calculate priority score for a feature.", "line_range": [272, 292], "parameters": ["self", "feature", "prioritization"]}, {"name": "_get_scoring_reasoning", "docstring": "Get reasoning for feature scoring.", "line_range": [294, 307], "parameters": ["self", "feature", "prioritization"]}, {"name": "_load_personal_bridge", "docstring": "Load personal planning bridge data.", "line_range": [309, 319], "parameters": ["self"]}], "bases": []}, {"name": "CursorSessionManager", "docstring": "Maintains context across Cursor sessions for better continuity.", "line_range": [322, 388], "methods": [{"name": "__init__", "docstring": "", "line_range": [325, 328], "parameters": ["self", "project_root"]}, {"name": "start_session", "docstring": "Start a new Cursor session.", "line_range": [330, 349], "parameters": ["self", "session_id", "user_preferences"]}, {"name": "save_session_context", "docstring": "Save important context for next session.", "line_range": [351, 377], "parameters": ["self", "session_data"]}, {"name": "_load_session_context", "docstring": "Load context from previous sessions.", "line_range": [379, 388], "parameters": ["self"]}], "bases": []}, {"name": "CursorIntegrationManager", "docstring": "Main integration manager that coordinates all Cursor-specific features.", "line_range": [391, 431], "methods": [{"name": "__init__", "docstring": "", "line_range": [394, 400], "parameters": ["self", "project_root"]}, {"name": "get_comprehensive_cursor_response", "docstring": "Get comprehensive response optimized for Cursor.", "line_range": [402, 431], "parameters": ["self", "query", "file_context"]}], "bases": []}], "callgraph": {"__init__": ["CursorMultiAIOrchestrator", "CursorSessionManager", "PersonalPlanningCursorBridge", "SystemCapabilityDiscovery", "CursorContextManager"], "get_cursor_optimized_context": ["optimal_config.get", "context_rules.get", "self._apply_privacy_filter", "file_path.exists", "logger.error", "open", "json.load", "str"], "_load_cursor_config": ["Path", "logger.error", "open", "json.load", "config_path.exists"], "_apply_privacy_filter": ["isinstance", "self._filter_sensitive_dict", "context_data.items"], "_filter_sensitive_dict": ["data.items", "any", "isinstance", "self._filter_sensitive_dict", "key.lower"], "delegate_to_optimal_ai": ["Path", "self._calculate_delegation_confidence", "logger.error", "delegation_rules.get", "str"], "_calculate_delegation_confidence": ["delegation_rules.get"], "get_goal_aligned_suggestions": ["logger.error", "suggestions.extend", "any", "technical_context.lower"], "get_priority_guidance": ["decision_guidance.get", "scored_features.append", "scored_features.sort", "self._calculate_feature_score", "logger.error", "self._get_scoring_reasoning", "str"], "_calculate_feature_score": ["feature.lower", "float", "any", "prioritization.get"], "_get_scoring_reasoning": ["feature.lower", "reasons.append", "any"], "_load_personal_bridge": ["bridge_path.exists", "json.load", "logger.error", "open"], "start_session": ["CursorSession", "self._load_session_context", "logger.error", "previous_context.get"], "save_session_context": ["json.dump", "session_data.get", "Path", "logger.error", "open", "str"], "_load_session_context": ["json.load", "logger.error", "open"], "get_comprehensive_cursor_response": ["str", "logger.error"], "create_cursor_integration": ["CursorIntegrationManager"]}, "dependencies": ["Any", "Dict", "List", "Optional", "Path", "SystemCapabilityDiscovery", "create_context_orchestrator", "dataclass", "dataclasses", "json", "llmstruct.ai_self_awareness", "llmstruct.context_orchestrator", "logging", "pathlib", "typing"], "hash": "9dc4a1f079ae81fc45f0e314da75a46b3a6f08b14e47b41542f341da097392d3"}, {"module_id": "src.llmstruct.cli_core", "path": "src/llmstruct/cli_core.py", "category": "core", "module_doc": "Core CLI functionality and main loop.", "functions": [{"name": "create_cli_core", "docstring": "Factory function to create CLI core instance.", "line_range": [110, 112], "parameters": ["root_dir"], "decorators": []}, {"name": "__init__", "docstring": "Initialize CLI core with root directory.", "line_range": [28, 35], "parameters": ["self", "root_dir"], "decorators": []}, {"name": "setup_cache", "docstring": "Initialize cache if enabled in config.", "line_range": [37, 53], "parameters": ["self"], "decorators": []}, {"name": "setup_copilot", "docstring": "Initialize Copilot integration if enabled.", "line_range": [55, 63], "parameters": ["self"], "decorators": []}, {"name": "run_interactive_mode", "docstring": "Run the interactive CLI mode.", "line_range": [65, 97], "parameters": ["self"], "decorators": []}, {"name": "cleanup", "docstring": "Clean up resources.", "line_range": [99, 107], "parameters": ["self"], "decorators": []}], "classes": [{"name": "CLICore", "docstring": "Core CLI class handling main loop and coordination.", "line_range": [25, 107], "methods": [{"name": "__init__", "docstring": "Initialize CLI core with root directory.", "line_range": [28, 35], "parameters": ["self", "root_dir"]}, {"name": "setup_cache", "docstring": "Initialize cache if enabled in config.", "line_range": [37, 53], "parameters": ["self"]}, {"name": "setup_copilot", "docstring": "Initialize Copilot integration if enabled.", "line_range": [55, 63], "parameters": ["self"]}, {"name": "run_interactive_mode", "docstring": "Run the interactive CLI mode.", "line_range": [65, 97], "parameters": ["self"]}, {"name": "cleanup", "docstring": "Clean up resources.", "line_range": [99, 107], "parameters": ["self"]}], "bases": []}], "callgraph": {"__init__": ["CLIConfig", "CLIUtils", "CommandProcessor"], "setup_cache": ["cache_config.get", "logging.info", "logging.warning", "Path", "JSONCache", "cache_path.mkdir", "str"], "setup_copilot": ["logging.info", "logging.warning", "copilot_config.get", "initialize_copilot"], "run_interactive_mode": ["self.cleanup", "print", "input", "self.setup_cache", "logging.error", "user_input.lower", "user_input.startswith", "self.setup_copilot"], "cleanup": ["logging.info"], "create_cli_core": ["CLICore"]}, "dependencies": ["CLIConfig", "CLIUtils", "CommandProcessor", "CopilotContextManager", "JSONCache", "Optional", "Path", "cli_commands", "cli_config", "cli_utils", "copilot", "initialize_copilot", "llmstruct.cache", "logging", "pathlib", "typing"], "hash": "57a534c55c12bacfaf26ed4b4124fe97a3c2559253b5a62346e9c9f0368e5132"}, {"module_id": "src.llmstruct.workspace", "path": "src/llmstruct/workspace.py", "category": "core", "module_doc": "Workspace State & Mode Management System\nEnhanced AI-Human Collaboration with Context Boundaries", "functions": [{"name": "create_workspace_manager", "docstring": "Factory function to create workspace manager", "line_range": [461, 463], "parameters": ["workspace_dir"], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [28, 36], "parameters": ["self", "workspace_dir"], "decorators": []}, {"name": "_load_or_create_state", "docstring": "Load existing workspace state or create default", "line_range": [38, 75], "parameters": ["self"], "decorators": []}, {"name": "_load_permission_templates", "docstring": "Load permission templates for different modes", "line_range": [77, 128], "parameters": ["self"], "decorators": []}, {"name": "set_mode", "docstring": "Set workspace mode(s) with smart combination logic.\n\nArgs:\n    modes: Single mode string \"[code]\" or list of modes [\"code\", \"debug\"]\n    session_id: Optional session identifier\n    \nReturns:\n    Dict with mode change result and applied permissions", "line_range": [130, 176], "parameters": ["self", "modes", "session_id"], "decorators": []}, {"name": "_parse_modes_from_string", "docstring": "Parse modes from string like '[code][debug]' to ['code', 'debug']", "line_range": [178, 182], "parameters": ["self", "mode_string"], "decorators": []}, {"name": "_combine_mode_permissions", "docstring": "Smart combination of mode permissions (Decision: C - Smart Combination)", "line_range": [184, 216], "parameters": ["self", "modes"], "decorators": []}, {"name": "_get_mode_combination_name", "docstring": "Get descriptive name for mode combination", "line_range": [218, 232], "parameters": ["self", "modes"], "decorators": []}, {"name": "get_current_state", "docstring": "Get current workspace state", "line_range": [234, 236], "parameters": ["self"], "decorators": []}, {"name": "check_permission", "docstring": "Check if operation is permitted under current mode.\n\nArgs:\n    operation: Operation type (e.g., \"write_file\", \"run_command\")\n    target: Optional target (file path, command, etc.)\n    \nReturns:\n    Dict with permission result and reasoning", "line_range": [238, 302], "parameters": ["self", "operation", "target"], "decorators": []}, {"name": "_get_required_capability", "docstring": "Map operations to required capabilities", "line_range": [304, 320], "parameters": ["self", "operation"], "decorators": []}, {"name": "_is_restricted_target", "docstring": "Check if target matches any file restrictions", "line_range": [322, 334], "parameters": ["self", "target"], "decorators": []}, {"name": "set_emergency_override", "docstring": "Grant emergency override (Hybrid B+C: Escalation + Time-boxing)\n\nArgs:\n    level: Override level (1=extend permissions, 2=filesystem, 3=system)\n    reason: Reason for override\n    duration_minutes: Override duration", "line_range": [336, 365], "parameters": ["self", "level", "reason", "duration_minutes"], "decorators": []}, {"name": "_check_emergency_override", "docstring": "Check if emergency override is active and not expired", "line_range": [367, 381], "parameters": ["self"], "decorators": []}, {"name": "integrate_strict_mode", "docstring": "Integration with existing strict mode system", "line_range": [383, 387], "parameters": ["self", "strict_tags"], "decorators": []}, {"name": "add_decision_workflow", "docstring": "Add decision to workflow tracking (for [decide] mode)", "line_range": [389, 396], "parameters": ["self", "decision_id", "decision_data"], "decorators": []}, {"name": "get_workspace_status", "docstring": "Get comprehensive workspace status for debugging and display", "line_range": [398, 420], "parameters": ["self"], "decorators": []}, {"name": "_get_override_time_remaining", "docstring": "Get formatted time remaining for emergency override", "line_range": [422, 437], "parameters": ["self"], "decorators": []}, {"name": "_save_state", "docstring": "Save current state to file", "line_range": [439, 442], "parameters": ["self"], "decorators": []}, {"name": "get_mode_status", "docstring": "Get formatted status string for CLI display", "line_range": [444, 458], "parameters": ["self"], "decorators": []}], "classes": [{"name": "WorkspaceStateManager", "docstring": "Core workspace state management with mode-based permissions and context boundaries.\n\nFeatures:\n- Multi-dimensional mode system ([code][debug], [discuss][meta])\n- Hybrid permission system (capabilities + file restrictions)\n- Smart mode combinations with context awareness\n- Emergency override protocols with time-boxing\n- Integration with existing strict mode system", "line_range": [16, 458], "methods": [{"name": "__init__", "docstring": "", "line_range": [28, 36], "parameters": ["self", "workspace_dir"]}, {"name": "_load_or_create_state", "docstring": "Load existing workspace state or create default", "line_range": [38, 75], "parameters": ["self"]}, {"name": "_load_permission_templates", "docstring": "Load permission templates for different modes", "line_range": [77, 128], "parameters": ["self"]}, {"name": "set_mode", "docstring": "Set workspace mode(s) with smart combination logic.\n\nArgs:\n    modes: Single mode string \"[code]\" or list of modes [\"code\", \"debug\"]\n    session_id: Optional session identifier\n    \nReturns:\n    Dict with mode change result and applied permissions", "line_range": [130, 176], "parameters": ["self", "modes", "session_id"]}, {"name": "_parse_modes_from_string", "docstring": "Parse modes from string like '[code][debug]' to ['code', 'debug']", "line_range": [178, 182], "parameters": ["self", "mode_string"]}, {"name": "_combine_mode_permissions", "docstring": "Smart combination of mode permissions (Decision: C - Smart Combination)", "line_range": [184, 216], "parameters": ["self", "modes"]}, {"name": "_get_mode_combination_name", "docstring": "Get descriptive name for mode combination", "line_range": [218, 232], "parameters": ["self", "modes"]}, {"name": "get_current_state", "docstring": "Get current workspace state", "line_range": [234, 236], "parameters": ["self"]}, {"name": "check_permission", "docstring": "Check if operation is permitted under current mode.\n\nArgs:\n    operation: Operation type (e.g., \"write_file\", \"run_command\")\n    target: Optional target (file path, command, etc.)\n    \nReturns:\n    Dict with permission result and reasoning", "line_range": [238, 302], "parameters": ["self", "operation", "target"]}, {"name": "_get_required_capability", "docstring": "Map operations to required capabilities", "line_range": [304, 320], "parameters": ["self", "operation"]}, {"name": "_is_restricted_target", "docstring": "Check if target matches any file restrictions", "line_range": [322, 334], "parameters": ["self", "target"]}, {"name": "set_emergency_override", "docstring": "Grant emergency override (Hybrid B+C: Escalation + Time-boxing)\n\nArgs:\n    level: Override level (1=extend permissions, 2=filesystem, 3=system)\n    reason: Reason for override\n    duration_minutes: Override duration", "line_range": [336, 365], "parameters": ["self", "level", "reason", "duration_minutes"]}, {"name": "_check_emergency_override", "docstring": "Check if emergency override is active and not expired", "line_range": [367, 381], "parameters": ["self"]}, {"name": "integrate_strict_mode", "docstring": "Integration with existing strict mode system", "line_range": [383, 387], "parameters": ["self", "strict_tags"]}, {"name": "add_decision_workflow", "docstring": "Add decision to workflow tracking (for [decide] mode)", "line_range": [389, 396], "parameters": ["self", "decision_id", "decision_data"]}, {"name": "get_workspace_status", "docstring": "Get comprehensive workspace status for debugging and display", "line_range": [398, 420], "parameters": ["self"]}, {"name": "_get_override_time_remaining", "docstring": "Get formatted time remaining for emergency override", "line_range": [422, 437], "parameters": ["self"]}, {"name": "_save_state", "docstring": "Save current state to file", "line_range": [439, 442], "parameters": ["self"]}, {"name": "get_mode_status", "docstring": "Get formatted status string for CLI display", "line_range": [444, 458], "parameters": ["self"]}], "bases": []}], "callgraph": {"__init__": ["self._load_or_create_state", "Path", "self._load_permission_templates"], "_load_or_create_state": ["self._save_state", "datetime.now", "json.load", "open"], "_load_permission_templates": [], "set_mode": ["datetime.now", "len", "combined_permissions.get", "self._save_state", "isinstance", "self._get_mode_combination_name", "self._parse_modes_from_string", "self._combine_mode_permissions"], "_parse_modes_from_string": ["re.findall"], "_combine_mode_permissions": ["template.get", "sorted", "set", "logger.info", "list"], "_get_mode_combination_name": ["combination_names.get", "sorted"], "get_current_state": [], "check_permission": ["self._get_required_capability", "self._check_emergency_override", "self._is_restricted_target", "permissions.get"], "_get_required_capability": ["operation.startswith", "capability_map.items"], "_is_restricted_target": ["fnmatch.fnmatch", "restriction.startswith", "target.startswith"], "set_emergency_override": ["timedelta", "expires_at.isoformat", "datetime.now", "self._save_state"], "_check_emergency_override": ["datetime.now", "override.get", "self._save_state", "datetime.fromisoformat"], "integrate_strict_mode": ["datetime.now", "self._save_state"], "add_decision_workflow": ["datetime.now", "self._save_state"], "get_workspace_status": ["self._get_mode_combination_name", "len", "override.get", "self._get_override_time_remaining"], "_get_override_time_remaining": ["datetime.fromisoformat", "datetime.now", "override.get", "int", "remaining.total_seconds"], "_save_state": ["json.dump", "open"], "get_mode_status": ["self._get_mode_combination_name", "override.get"], "create_workspace_manager": ["WorkspaceStateManager"]}, "dependencies": ["Any", "Dict", "List", "Optional", "Path", "Set", "Union", "datetime", "fnmatch", "json", "logging", "os", "pathlib", "re", "timedelta", "timezone", "typing"], "hash": "781995ee11b41c001f3ce9ac5be89cd99963beb044d8020550f54edb7993eee5"}, {"module_id": "src.llmstruct.parsers.__init__", "path": "src/llmstruct/parsers/__init__.py", "category": "cli", "module_doc": "Language-specific parsers for extracting code structure data for LLMStruct JSON.", "functions": [], "classes": [], "callgraph": {}, "dependencies": ["JavaScriptParser", "javascript_parser"], "hash": "2f1fce5cf3e867869608b18a8ab1197f8a32add4fd35d4de75f891a9dad04b63"}, {"module_id": "src.llmstruct.parsers.javascript_parser", "path": "src/llmstruct/parsers/javascript_parser.py", "category": "core", "module_doc": "", "functions": [{"name": "__init__", "docstring": "", "line_range": [9, 13], "parameters": ["self"], "decorators": []}, {"name": "file_hash", "docstring": "", "line_range": [15, 20], "parameters": ["self", "filepath"], "decorators": []}, {"name": "compute_file_metadata", "docstring": "", "line_range": [22, 41], "parameters": ["self", "filepath", "include_hashes"], "decorators": []}, {"name": "parse_module", "docstring": "", "line_range": [43, 124], "parameters": ["self", "filepath", "root_dir", "include_ranges", "include_hashes"], "decorators": []}, {"name": "extract_signature", "docstring": "", "line_range": [78, 80], "parameters": ["node"], "decorators": []}], "classes": [{"name": "JavaScriptParser", "docstring": "", "line_range": [8, 124], "methods": [{"name": "__init__", "docstring": "", "line_range": [9, 13], "parameters": ["self"]}, {"name": "file_hash", "docstring": "", "line_range": [15, 20], "parameters": ["self", "filepath"]}, {"name": "compute_file_metadata", "docstring": "", "line_range": [22, 41], "parameters": ["self", "filepath", "include_hashes"]}, {"name": "parse_module", "docstring": "", "line_range": [43, 124], "parameters": ["self", "filepath", "root_dir", "include_ranges", "include_hashes"]}], "bases": []}], "callgraph": {"__init__": ["set"], "file_hash": ["hashlib.sha256", "f.read", "open"], "compute_file_metadata": ["self.file_hash", "sum", "os.stat", "open"], "parse_module": ["self.compute_file_metadata", "esprima.parseModule", "open", "f.read", "str"], "extract_signature": ["hasattr"]}, "dependencies": ["Any", "Dict", "datetime", "esprima", "hashlib", "os", "typing"], "hash": "d2af10a2c30b638a634dd0317c81a179888dee011e0b7a0f62166dce468373c4"}, {"module_id": "src.llmstruct.parsers.universal_converter", "path": "src/llmstruct/parsers/universal_converter.py", "category": "core", "module_doc": "Universal Code Converter - Orchestrates all language parsers\nConverts any codebase to llmstruct JSON format", "functions": [{"name": "main", "docstring": "CLI interface for universal converter", "line_range": [375, 428], "parameters": [], "decorators": []}, {"name": "__post_init__", "docstring": "", "line_range": [55, 62], "parameters": ["self"], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [79, 82], "parameters": ["self", "config"], "decorators": []}, {"name": "detect_language", "docstring": "Detect programming language from file extension", "line_range": [84, 92], "parameters": ["self", "file_path"], "decorators": []}, {"name": "detect_project_languages", "docstring": "Detect all languages in project and count files", "line_range": [94, 109], "parameters": ["self", "project_path"], "decorators": []}, {"name": "get_project_files", "docstring": "Get all relevant files for conversion", "line_range": [111, 138], "parameters": ["self", "project_path", "language"], "decorators": []}, {"name": "convert_python_project", "docstring": "Convert Python project to llmstruct format", "line_range": [140, 171], "parameters": ["self", "project_path"], "decorators": []}, {"name": "convert_go_project", "docstring": "Convert Go project to llmstruct format", "line_range": [173, 190], "parameters": ["self", "project_path"], "decorators": []}, {"name": "convert_javascript_project", "docstring": "Convert JavaScript project to llmstruct format", "line_range": [192, 223], "parameters": ["self", "project_path"], "decorators": []}, {"name": "convert_project", "docstring": "Convert any project to llmstruct format", "line_range": [225, 250], "parameters": ["self", "project_path", "language"], "decorators": []}, {"name": "convert_multi_language_project", "docstring": "Convert multi-language project with separate sections per language", "line_range": [252, 282], "parameters": ["self", "project_path"], "decorators": []}, {"name": "_build_project_structure", "docstring": "Build standard llmstruct project structure", "line_range": [284, 312], "parameters": ["self", "language", "project_path", "modules", "toc"], "decorators": []}, {"name": "_build_empty_project_structure", "docstring": "Build empty structure when conversion fails", "line_range": [314, 329], "parameters": ["self", "language", "project_path", "error"], "decorators": []}, {"name": "_merge_language_results", "docstring": "Merge multiple language results into unified structure", "line_range": [331, 372], "parameters": ["self", "project_path", "language_results"], "decorators": []}], "classes": [{"name": "Language", "docstring": "", "line_range": [33, 42], "methods": [], "bases": ["Enum"]}, {"name": "ConverterConfig", "docstring": "Configuration for universal converter", "line_range": [46, 62], "methods": [{"name": "__post_init__", "docstring": "", "line_range": [55, 62], "parameters": ["self"]}], "bases": []}, {"name": "UniversalConverter", "docstring": "Universal code converter for any programming language", "line_range": [65, 372], "methods": [{"name": "__init__", "docstring": "", "line_range": [79, 82], "parameters": ["self", "config"]}, {"name": "detect_language", "docstring": "Detect programming language from file extension", "line_range": [84, 92], "parameters": ["self", "file_path"]}, {"name": "detect_project_languages", "docstring": "Detect all languages in project and count files", "line_range": [94, 109], "parameters": ["self", "project_path"]}, {"name": "get_project_files", "docstring": "Get all relevant files for conversion", "line_range": [111, 138], "parameters": ["self", "project_path", "language"]}, {"name": "convert_python_project", "docstring": "Convert Python project to llmstruct format", "line_range": [140, 171], "parameters": ["self", "project_path"]}, {"name": "convert_go_project", "docstring": "Convert Go project to llmstruct format", "line_range": [173, 190], "parameters": ["self", "project_path"]}, {"name": "convert_javascript_project", "docstring": "Convert JavaScript project to llmstruct format", "line_range": [192, 223], "parameters": ["self", "project_path"]}, {"name": "convert_project", "docstring": "Convert any project to llmstruct format", "line_range": [225, 250], "parameters": ["self", "project_path", "language"]}, {"name": "convert_multi_language_project", "docstring": "Convert multi-language project with separate sections per language", "line_range": [252, 282], "parameters": ["self", "project_path"]}, {"name": "_build_project_structure", "docstring": "Build standard llmstruct project structure", "line_range": [284, 312], "parameters": ["self", "language", "project_path", "modules", "toc"]}, {"name": "_build_empty_project_structure", "docstring": "Build empty structure when conversion fails", "line_range": [314, 329], "parameters": ["self", "language", "project_path", "error"]}, {"name": "_merge_language_results", "docstring": "Merge multiple language results into unified structure", "line_range": [331, 372], "parameters": ["self", "project_path", "language_results"]}], "bases": []}], "callgraph": {"__post_init__": [], "__init__": ["ConverterConfig", "JavaScriptParser", "GoAnalyzer"], "detect_language": ["Path"], "detect_project_languages": ["languages.get", "os.walk", "any", "self.detect_language"], "get_project_files": ["files.append", "os.walk", "any", "self.detect_language"], "convert_python_project": ["self.get_project_files", "modules.append", "logger.info", "analyze_python", "logger.warning", "len", "self._build_project_structure", "toc.append", "module_data.get"], "convert_go_project": ["logger.info", "logger.error", "self._build_empty_project_structure", "convert_to_llmstruct_format", "str"], "convert_javascript_project": ["self.get_project_files", "modules.append", "logger.info", "logger.warning", "len", "self._build_project_structure", "toc.append", "module_data.get"], "convert_project": ["languages.keys", "self.detect_project_languages", "logger.info", "self.convert_python_project", "self.convert_go_project", "max", "NotImplementedError", "self.convert_javascript_project", "ValueError"], "convert_multi_language_project": ["languages.keys", "self.detect_project_languages", "logger.info", "self.convert_python_project", "self.convert_go_project", "logger.warning", "self._merge_language_results", "logger.error", "self.convert_javascript_project", "ValueError"], "_build_project_structure": ["m.get", "len", "language.title", "sum"], "_build_empty_project_structure": [], "_merge_language_results": ["all_modules.append", "list", "all_toc.append", "stats.get", "language_results.keys", "result.get", "language_results.items"], "main": ["ConverterConfig", "print", "parser.add_argument", "argparse.ArgumentParser", "json.dumps", "exit", "converter.convert_project", "stats.get", "f.write", "UniversalConverter", "result.get", "open", "converter.convert_multi_language_project", "logger.error", "parser.parse_args", "Language", "traceback.print_exc"]}, "dependencies": ["Any", "Dict", "Enum", "GoAnalyzer", "JavaScriptParser", "List", "Optional", "Path", "Union", "analyze_module", "argparse", "convert_to_llmstruct_format", "dataclass", "dataclasses", "enum", "go_analyzer", "javascript_parser", "json", "logging", "os", "pathlib", "python_parser", "sys", "traceback", "typing"], "hash": "e696f22d510dfa07afbd538e69c6d7ac3c8dd4e742905cfe256be1005e0c2b95"}, {"module_id": "src.llmstruct.parsers.go_analyzer", "path": "src/llmstruct/parsers/go_analyzer.py", "category": "core", "module_doc": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 Go \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043b\u044f Docker \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b: go/packages, go/analysis", "functions": [{"name": "convert_to_llmstruct_format", "docstring": "\u041a\u043e\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 llmstruct", "line_range": [203, 337], "parameters": ["analysis", "include_ranges", "goals"], "decorators": []}, {"name": "_compute_file_hash", "docstring": "\u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 SHA-256 \u0445\u044d\u0448 \u0444\u0430\u0439\u043b\u0430", "line_range": [339, 345], "parameters": ["file_path"], "decorators": []}, {"name": "main", "docstring": "", "line_range": [347, 402], "parameters": [], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [24, 26], "parameters": ["self"], "decorators": []}, {"name": "_setup_analyzer", "docstring": "\u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0441\u0440\u0435\u0434\u0443 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430", "line_range": [28, 66], "parameters": ["self"], "decorators": []}, {"name": "_cleanup", "docstring": "\u041e\u0447\u0438\u0449\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b", "line_range": [68, 72], "parameters": ["self"], "decorators": []}, {"name": "analyze_project", "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 Go \u043f\u0440\u043e\u0435\u043a\u0442", "line_range": [74, 125], "parameters": ["self", "project_path"], "decorators": []}, {"name": "_fallback_analysis", "docstring": "Fallback \u0430\u043d\u0430\u043b\u0438\u0437 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0444\u0430\u0439\u043b\u043e\u0432", "line_range": [127, 201], "parameters": ["self", "project_path"], "decorators": []}], "classes": [{"name": "GoAnalyzer", "docstring": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 Go \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432", "line_range": [21, 201], "methods": [{"name": "__init__", "docstring": "", "line_range": [24, 26], "parameters": ["self"]}, {"name": "_setup_analyzer", "docstring": "\u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0441\u0440\u0435\u0434\u0443 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430", "line_range": [28, 66], "parameters": ["self"]}, {"name": "_cleanup", "docstring": "\u041e\u0447\u0438\u0449\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b", "line_range": [68, 72], "parameters": ["self"]}, {"name": "analyze_project", "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 Go \u043f\u0440\u043e\u0435\u043a\u0442", "line_range": [74, 125], "parameters": ["self", "project_path"]}, {"name": "_fallback_analysis", "docstring": "Fallback \u0430\u043d\u0430\u043b\u0438\u0437 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0444\u0430\u0439\u043b\u043e\u0432", "line_range": [127, 201], "parameters": ["self", "project_path"]}], "bases": []}], "callgraph": {"__init__": [], "_setup_analyzer": ["logging.warning", "tempfile.mkdtemp", "analyzer_file.write_text", "analyzer_source.read_text", "Path", "subprocess.run", "str"], "_cleanup": ["Path", "shutil.rmtree"], "analyze_project": ["self._fallback_analysis", "logging.info", "logging.warning", "logging.error", "json.loads", "subprocess.run", "self._cleanup", "self._setup_analyzer"], "_fallback_analysis": ["logging.info", "packages.add", "logging.warning", "set", "list", "file_path.read_text", "line.startswith", "file_path.relative_to", "len", "sorted", "go_mod_path.read_text", "line.split", "Path", "line.strip", "content.split", "str", "go_mod_path.exists"], "convert_to_llmstruct_format": ["functions.append", "file_data.get", "modules.append", "classes.append", "len", "iface.get", "_compute_file_hash", "fn.get", "uuid.uuid4", "module.get", "sum", "path.endswith", "toc.append", "analysis.get", "path.replace", "struct.get", "str"], "_compute_file_hash": ["hashlib.sha256", "f.read", "open"], "main": ["print", "parser.add_argument", "argparse.ArgumentParser", "json.dumps", "len", "GoAnalyzer", "analyzer.analyze_project", "stats.get", "sys.exit", "Path", "f.write", "result.get", "open", "traceback.print_exc", "parser.parse_args", "convert_to_llmstruct_format"]}, "dependencies": ["Any", "Dict", "List", "Optional", "Path", "argparse", "datetime", "hashlib", "json", "logging", "os", "pathlib", "shutil", "subprocess", "sys", "tempfile", "traceback", "typing", "uuid"], "hash": "621e1d82791d814534c044dc8ba1d1c79b1852a614255e313f5ff697c934f210"}, {"module_id": "src.llmstruct.parsers.python_parser", "path": "src/llmstruct/parsers/python_parser.py", "category": "core", "module_doc": "", "functions": [{"name": "infer_category", "docstring": "Infer module category based on its path.", "line_range": [13, 20], "parameters": ["file_path"], "decorators": []}, {"name": "compute_file_hash", "docstring": "Compute SHA-256 hash of file content.", "line_range": [72, 79], "parameters": ["file_path"], "decorators": []}, {"name": "analyze_module", "docstring": "Analyze Python module and return structured data.", "line_range": [82, 154], "parameters": ["file_path", "root_dir", "include_ranges", "include_hashes"], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [26, 29], "parameters": ["self"], "decorators": []}, {"name": "visit_Import", "docstring": "Capture import statements.", "line_range": [31, 35], "parameters": ["self", "node"], "decorators": []}, {"name": "visit_ImportFrom", "docstring": "Capture from-import statements.", "line_range": [37, 43], "parameters": ["self", "node"], "decorators": []}, {"name": "visit_FunctionDef", "docstring": "Track function definitions and their calls.", "line_range": [45, 50], "parameters": ["self", "node"], "decorators": []}, {"name": "visit_AsyncFunctionDef", "docstring": "Track async function definitions and their calls.", "line_range": [52, 57], "parameters": ["self", "node"], "decorators": []}, {"name": "visit_Call", "docstring": "Capture function calls.", "line_range": [59, 69], "parameters": ["self", "node"], "decorators": []}], "classes": [{"name": "CallVisitor", "docstring": "AST visitor to collect function calls and dependencies.", "line_range": [23, 69], "methods": [{"name": "__init__", "docstring": "", "line_range": [26, 29], "parameters": ["self"]}, {"name": "visit_Import", "docstring": "Capture import statements.", "line_range": [31, 35], "parameters": ["self", "node"]}, {"name": "visit_ImportFrom", "docstring": "Capture from-import statements.", "line_range": [37, 43], "parameters": ["self", "node"]}, {"name": "visit_FunctionDef", "docstring": "Track function definitions and their calls.", "line_range": [45, 50], "parameters": ["self", "node"]}, {"name": "visit_AsyncFunctionDef", "docstring": "Track async function definitions and their calls.", "line_range": [52, 57], "parameters": ["self", "node"]}, {"name": "visit_Call", "docstring": "Capture function calls.", "line_range": [59, 69], "parameters": ["self", "node"]}], "bases": ["ast.NodeVisitor"]}], "callgraph": {"infer_category": ["Path"], "__init__": ["set"], "visit_Import": ["self.generic_visit"], "visit_ImportFrom": ["self.generic_visit"], "visit_FunctionDef": ["self.generic_visit", "set"], "visit_AsyncFunctionDef": ["self.generic_visit", "set"], "visit_Call": ["self.generic_visit", "isinstance"], "compute_file_hash": ["logging.error", "hashlib.sha256", "f.read", "open"], "analyze_module": ["functions.append", "ast.walk", "CallVisitor", "classes.append", "list", "sorted", "ast.unparse", "ast.get_docstring", "compute_file_hash", "infer_category", "logging.error", "ast.parse", "Path", "isinstance", "open", "str", "visitor.visit", "f.read"]}, "dependencies": ["Any", "Dict", "Optional", "Path", "Set", "ast", "hashlib", "logging", "os", "pathlib", "typing"], "hash": "555ac7004c99ba854fc4fc4688b583331229077e51dfa999d7aae2cd9f7c21dd"}, {"module_id": "src.llmstruct.templates.__init__", "path": "src/llmstruct/templates/__init__.py", "category": "cli", "module_doc": "Templates for LLM prompts used in LLMStruct integration.", "functions": [], "classes": [], "callgraph": {}, "dependencies": [], "hash": "2421ea45b39e72f090ee252149c45385f679971e48ca50f0883e313c3db9fa6d"}, {"module_id": "src.llmstruct.validators.__init__", "path": "src/llmstruct/validators/__init__.py", "category": "cli", "module_doc": "Validation modules for ensuring LLMStruct JSON complies with the schema.", "functions": [], "classes": [], "callgraph": {}, "dependencies": ["json_validator", "validate_struct_json"], "hash": "f0ee4f577643fd8bc74b46fd7debd96cc15683b5a7ad0018bb0788523f4b8d34"}, {"module_id": "src.llmstruct.validators.json_validator", "path": "src/llmstruct/validators/json_validator.py", "category": "core", "module_doc": "", "functions": [{"name": "validate_struct_json", "docstring": "Validate a single JSON file against a schema.", "line_range": [12, 40], "parameters": ["json_path", "schema_path"], "decorators": []}, {"name": "validate_directory", "docstring": "Validate all JSON files in a directory against a schema.", "line_range": [43, 61], "parameters": ["directory", "schema_path", "include_patterns", "exclude_patterns"], "decorators": []}], "classes": [], "callgraph": {"validate_struct_json": ["logging.info", "json_file.exists", "logging.error", "schema_file.exists", "Path", "validate", "open", "json.load", "str"], "validate_directory": ["validate_struct_json", "json_file.match", "any", "Path", "str"]}, "dependencies": ["List", "Optional", "Path", "ValidationError", "json", "jsonschema", "logging", "pathlib", "sys", "typing", "validate"], "hash": "cc5c6b4f74409f89459ec86a9d59d83cd92c691e95ab4e670e6b8ac8c979a232"}, {"module_id": "src.llmstruct.generators.json_generator", "path": "src/llmstruct/generators/json_generator.py", "category": "core", "module_doc": "", "functions": [{"name": "get_folder_structure", "docstring": "Capture directory and file structure with artifact_id, respecting .gitignore and patterns.", "line_range": [15, 88], "parameters": ["root_dir", "gitignore_patterns", "include_patterns", "exclude_patterns", "exclude_dirs"], "decorators": []}, {"name": "build_toc_and_modules", "docstring": "Build TOC and modules with artifact_id and robust filtering.", "line_range": [91, 148], "parameters": ["root_dir", "include_patterns", "exclude_patterns", "gitignore_patterns", "include_ranges", "include_hashes", "exclude_dirs"], "decorators": []}, {"name": "generate_json", "docstring": "Generate JSON structure for project with artifact_id, summary, and tags.", "line_range": [151, 218], "parameters": ["root_dir", "include_patterns", "exclude_patterns", "gitignore_patterns", "include_ranges", "include_hashes", "goals", "exclude_dirs"], "decorators": []}], "classes": [], "callgraph": {"get_folder_structure": ["file_path.match", "p.endswith", "os.walk", "sorted", "set", "structure.append", "file_path.relative_to", "any", "uuid.uuid4", "Path", "p.rstrip", "str"], "build_toc_and_modules": ["p.endswith", "modules.append", "set", "f.match", "analyze_module", "len", "any", "uuid.uuid4", "Path", "toc.append", "p.rstrip", "str"], "generate_json": ["set", "list", "len", "uuid.uuid4", "build_toc_and_modules", "get_folder_structure", "Path", "sum", "str"]}, "dependencies": ["Any", "Dict", "List", "Optional", "Path", "analyze_module", "datetime", "logging", "os", "parsers.python_parser", "pathlib", "typing", "uuid"], "hash": "0c25e4343395d66633a587d438296eac1210eac4a11f5a9f167a742396af7554"}, {"module_id": "src.llmstruct.generators.__init__", "path": "src/llmstruct/generators/__init__.py", "category": "cli", "module_doc": "Generator modules for creating LLMStruct JSON outputs from parsed code data.", "functions": [], "classes": [], "callgraph": {}, "dependencies": ["generate_json", "json_generator"], "hash": "6510b9d89fa5bff008cf7b1ee6f50343f96b76737b5842a930c06888c5cbba6c"}, {"module_id": "src.llmstruct.generators.go_json_generator", "path": "src/llmstruct/generators/go_json_generator.py", "category": "core", "module_doc": "", "functions": [{"name": "get_go_folder_structure", "docstring": "Capture directory and file structure for Go projects with artifact_id, respecting .gitignore and patterns.", "line_range": [15, 85], "parameters": ["root_dir", "gitignore_patterns", "include_patterns", "exclude_patterns", "exclude_dirs"], "decorators": []}, {"name": "build_go_toc_and_modules", "docstring": "Build TOC and modules for Go projects with artifact_id and robust filtering.", "line_range": [88, 143], "parameters": ["root_dir", "include_patterns", "exclude_patterns", "gitignore_patterns", "include_ranges", "include_hashes", "exclude_dirs"], "decorators": []}, {"name": "extract_go_mod_info", "docstring": "Extract information from go.mod file.", "line_range": [146, 182], "parameters": ["root_dir"], "decorators": []}, {"name": "generate_go_json", "docstring": "Generate JSON structure for Go project with artifact_id, summary, and tags.", "line_range": [185, 259], "parameters": ["root_dir", "include_patterns", "exclude_patterns", "gitignore_patterns", "include_ranges", "include_hashes", "goals", "exclude_dirs"], "decorators": []}], "classes": [], "callgraph": {"get_go_folder_structure": ["file_path.match", "p.endswith", "os.walk", "sorted", "set", "structure.append", "file_path.relative_to", "any", "uuid.uuid4", "Path", "p.rstrip", "str"], "build_go_toc_and_modules": ["p.endswith", "modules.append", "set", "f.match", "analyze_module", "len", "any", "uuid.uuid4", "module.get", "Path", "toc.append", "p.rstrip", "str"], "extract_go_mod_info": ["line.startswith", "len", "dependencies.append", "line.split", "open", "logging.error", "Path", "content.strip", "line.strip", "f.read", "go_mod_path.exists"], "generate_go_json": ["go_mod_info.get", "set", "list", "m.get", "len", "extract_go_mod_info", "uuid.uuid4", "build_go_toc_and_modules", "Path", "sum", "get_go_folder_structure", "str"]}, "dependencies": ["Any", "Dict", "List", "Optional", "Path", "analyze_module", "datetime", "logging", "os", "parsers.go_parser", "pathlib", "typing", "uuid"], "hash": "2e11ebd0b1baad6e008b5c7c7dcff832215263638561a7d78670b0cb647d4bf1"}, {"module_id": "temp_workfiles.test_cli_integration", "path": "temp_workfiles/test_cli_integration.py", "category": "test", "module_doc": "Test script for CLI integration with new commands", "functions": [{"name": "test_modular_cli_commands", "docstring": "Test new CLI commands integration", "line_range": [13, 164], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"test_modular_cli_commands": ["json.dump", "print", "events_data.append", "os.stat", "create_cli_core", "json.load", "int", "time.ctime", "os.makedirs", "open", "subprocess.run", "time.time"]}, "dependencies": ["CLIConfig", "CLICore", "CLIUtils", "CommandProcessor", "CopilotContextManager", "Path", "create_cli_core", "json", "llmstruct.cli_commands", "llmstruct.cli_config", "llmstruct.cli_core", "llmstruct.cli_utils", "llmstruct.copilot", "os", "pathlib", "subprocess", "sys", "time"], "hash": "cb07cac7298b34e98a1e4eebcfc32c4f1210622faebeb4979f498a8403cc0cfd"}, {"module_id": "temp_workfiles.run_duplicate_analysis", "path": "temp_workfiles/run_duplicate_analysis.py", "category": "core", "module_doc": "Hash-based duplicate file detector for safe cleanup", "functions": [{"name": "get_file_hash", "docstring": "Calculate MD5 hash of a file", "line_range": [10, 20], "parameters": ["filepath"], "decorators": []}, {"name": "find_duplicates", "docstring": "Find duplicate files by hash", "line_range": [22, 54], "parameters": ["root_dir"], "decorators": []}, {"name": "main", "docstring": "", "line_range": [56, 98], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"get_file_hash": ["print", "iter", "hashlib.md5", "hash_md5.update", "hash_md5.hexdigest", "open", "f.read"], "find_duplicates": ["print", "os.walk", "get_file_hash", "file.endswith", "file.startswith"], "main": ["json.dump", "print", "duplicate_groups.values", "find_duplicates", "duplicate_groups.items", "len", "enumerate", "open", "sum"]}, "dependencies": ["Path", "hashlib", "json", "os", "pathlib"], "hash": "ea42ce1398822af66b340c22cb3e12ed92b76600a7945342effe7ff597674125"}, {"module_id": "temp_workfiles.test_cli", "path": "temp_workfiles/test_cli.py", "category": "test", "module_doc": "Test script for the enhanced CLI functionality.", "functions": [{"name": "test_cli_commands", "docstring": "Test the CLI with various commands.", "line_range": [10, 46], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"test_cli_commands": ["print", "process.kill", "subprocess.Popen", "process.communicate"]}, "dependencies": ["asyncio", "os", "subprocess", "sys", "time"], "hash": "484451bc2195f19b987a13688fd3e5b41a1d5e82ac3ee8a1ef537a48a48003c0"}, {"module_id": "temp_workfiles.duplicate_detector", "path": "temp_workfiles/duplicate_detector.py", "category": "core", "module_doc": "Hash-based duplicate file detector for safe cleanup\nIdentifies actual duplicates by content hash, not just similar names", "functions": [{"name": "calculate_file_hash", "docstring": "Calculate SHA256 hash of file content", "line_range": [13, 24], "parameters": ["filepath"], "decorators": []}, {"name": "find_duplicates", "docstring": "Find duplicate files by hash", "line_range": [26, 46], "parameters": ["root_dir"], "decorators": []}, {"name": "analyze_duplicates", "docstring": "Analyze duplicate groups and suggest cleanup", "line_range": [48, 87], "parameters": ["duplicates"], "decorators": []}, {"name": "main", "docstring": "Main duplicate detection and analysis", "line_range": [89, 147], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"calculate_file_hash": ["file_hash.update", "hashlib.sha256", "file_hash.hexdigest", "open", "f.read"], "find_duplicates": ["file_hash.startswith", "os.walk", "len", "calculate_file_hash", "defaultdict", "filepath.is_file", "Path", "hash_to_files.items", "str"], "analyze_duplicates": ["sorted", "duplicates.values", "pref", "len", "any", "duplicates.items", "sum"], "main": ["json.dump", "print", "find_duplicates", "all_results.values", "all_groups.extend", "enumerate", "all_groups.sort", "open", "sum", "analyze_duplicates"]}, "dependencies": ["Path", "collections", "defaultdict", "hashlib", "json", "os", "pathlib"], "hash": "5291d1fe8b46b2ddf3bb4c5d606cebdf380bd6cd0a4b125027974679b24fd960"}, {"module_id": "temp_workfiles.struct_based_cleanup_analyzer_complete", "path": "temp_workfiles/struct_based_cleanup_analyzer_complete.py", "category": "core", "module_doc": "Struct.json-based File Cleanup Analyzer\nUses the comprehensive struct.json to intelligently categorize files for cleanup", "functions": [{"name": "load_struct_json", "docstring": "Load and parse struct.json", "line_range": [12, 20], "parameters": [], "decorators": []}, {"name": "analyze_root_files", "docstring": "Analyze files in project root", "line_range": [22, 55], "parameters": [], "decorators": []}, {"name": "generate_cleanup_recommendations", "docstring": "Generate cleanup recommendations based on analysis", "line_range": [57, 117], "parameters": ["root_files"], "decorators": []}, {"name": "main", "docstring": "", "line_range": [119, 187], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"load_struct_json": ["print", "Path", "open", "struct_path.exists", "json.load"], "analyze_root_files": ["root_files.append", "item.is_file", "root_path.iterdir", "Path", "item.stat", "str"], "generate_cleanup_recommendations": ["name.endswith"], "main": ["json.dump", "print", "struct_data.get", "action.replace", "analyze_root_files", "len", "load_struct_json", "categories.items", "defaultdict", "recommendations.items", "category.upper", "generate_cleanup_recommendations", "open"]}, "dependencies": ["Path", "collections", "defaultdict", "json", "os", "pathlib"], "hash": "76da18a5077e4d19ff1f6f6ab7c12b5f3e5e9f5e5dc7c6f2143c2f238856a339"}, {"module_id": "temp_workfiles.final_system_check", "path": "temp_workfiles/final_system_check.py", "category": "core", "module_doc": "Final System Status Check - LLMStruct Modular CLI Integration\nComprehensive validation of all completed components", "functions": [{"name": "check_system_status", "docstring": "Comprehensive system status check", "line_range": [12, 155], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"check_system_status": ["print", "len", "t.get", "json.load", "open", "data.get", "i.get"]}, "dependencies": ["Path", "json", "os", "pathlib", "sys"], "hash": "16e3482f7da9388c53726063af559a9e48ad8e5a6c5c49e064129c0e5cf68aa7"}, {"module_id": "temp_workfiles.struct_based_cleanup_analyzer", "path": "temp_workfiles/struct_based_cleanup_analyzer.py", "category": "core", "module_doc": "Struct.json-based File Cleanup Analyzer\nUses the comprehensive struct.json to intelligently categorize files for cleanup", "functions": [{"name": "load_struct_json", "docstring": "Load and parse struct.json", "line_range": [12, 20], "parameters": [], "decorators": []}, {"name": "analyze_project_structure", "docstring": "Analyze struct.json to understand project organization", "line_range": [22, 112], "parameters": ["struct_data"], "decorators": []}, {"name": "analyze_root_files", "docstring": "Analyze files in project root", "line_range": [114, 147], "parameters": [], "decorators": []}, {"name": "generate_cleanup_recommendations", "docstring": "Generate cleanup recommendations based on analysis", "line_range": [149, 209], "parameters": ["analysis", "root_files"], "decorators": []}, {"name": "main", "docstring": "", "line_range": [211, 265], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"load_struct_json": ["print", "Path", "open", "struct_path.exists", "json.load"], "analyze_project_structure": ["print", "struct_data.get", "file_path.endswith", "file_path.lower", "module.get"], "analyze_root_files": ["root_files.append", "item.is_file", "root_path.iterdir", "Path", "item.stat", "str"], "generate_cleanup_recommendations": ["name.endswith"], "main": ["json.dump", "print", "struct_data.get", "analyze_project_structure", "analyze_root_files", "action.replace", "len", "load_struct_json", "recommendations.items", "generate_cleanup_recommendations", "open"]}, "dependencies": ["Path", "collections", "defaultdict", "json", "os", "pathlib"], "hash": "65968275ff440495870ce468717c949c6496255b6e6fad7c767903eab74147fe"}, {"module_id": "temp_workfiles.final_system_validation", "path": "temp_workfiles/final_system_validation.py", "category": "core", "module_doc": "Final system validation script for LLMStruct Modular CLI Integration", "functions": [{"name": "main", "docstring": "Run comprehensive system validation", "line_range": [13, 238], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"main": ["print", "status.upper", "task.get", "create_cli_core", "len", "getattr", "open", "subprocess.run", "json.load", "next", "__import__"]}, "dependencies": ["Path", "create_cli_core", "json", "llmstruct.cli_core", "os", "pathlib", "subprocess", "sys", "time"], "hash": "c3b078025b32ac31fe272f4904b6574157bf71caa271e8788941900ed828fac8"}, {"module_id": "temp_workfiles.test_modular_cli", "path": "temp_workfiles/test_modular_cli.py", "category": "test", "module_doc": "Test script for modular CLI structure", "functions": [{"name": "test_modular_cli", "docstring": "Test basic modular CLI functionality.", "line_range": [14, 63], "parameters": [], "decorators": []}, {"name": "test_copilot_integration", "docstring": "Test Copilot integration.", "line_range": [65, 100], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"test_modular_cli": ["print", "len", "create_cli_core", "CLIUtils", "utils.read_file_content", "config.get_cache_config", "CLIConfig", "traceback.print_exc", "tempfile.TemporaryDirectory", "CommandProcessor", "utils.write_file_content"], "test_copilot_integration": ["manager.get_context_status", "print", "CopilotEvent", "len", "manager.close", "initialize_copilot", "traceback.print_exc", "tempfile.TemporaryDirectory"]}, "dependencies": ["CLIConfig", "CLICore", "CLIUtils", "CommandProcessor", "CopilotContextManager", "CopilotEvent", "Path", "create_cli_core", "initialize_copilot", "llmstruct.cli_commands", "llmstruct.cli_config", "llmstruct.cli_core", "llmstruct.cli_utils", "llmstruct.copilot", "os", "pathlib", "sys", "tempfile", "traceback"], "hash": "fca8fcf0c93da190370ff4c5328dc1c04311c0091cb0db3adff8222f83cb4383"}, {"module_id": "temp_workfiles.test_cli_demo", "path": "temp_workfiles/test_cli_demo.py", "category": "test", "module_doc": "Quick CLI test to demonstrate new commands", "functions": [{"name": "test_interactive_cli", "docstring": "Test interactive CLI with new commands", "line_range": [10, 69], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"test_interactive_cli": ["subprocess.run", "print"]}, "dependencies": ["subprocess", "sys", "time"], "hash": "d763421f609cb8cc8edb0c8fa38b361ae6e95b375833371f9b78ac98555279f7"}, {"module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_self_run", "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_self_run.py", "category": "core", "module_doc": "", "functions": [{"name": "filter_struct", "docstring": "Filter struct.json or init.json based on prompt keywords.", "line_range": [17, 35], "parameters": ["struct", "prompt"], "decorators": []}, {"name": "attach_to_llm_request", "docstring": "Attach filtered JSON to LLM prompt, using cache if available.", "line_range": [37, 74], "parameters": ["context_path", "prompt", "cache"], "decorators": []}], "classes": [], "callgraph": {"filter_struct": ["any", "module.get", "prompt.lower", "struct.get", "filter_json"], "attach_to_llm_request": ["logging.info", "cache.get_full_json", "cache.get_metadata", "json.dumps", "select_json", "logging.error", "context_file.exists", "Path", "cache.cache_json", "filter_struct", "prompt.lower", "filter_json"]}, "dependencies": ["Any", "Dict", "JSONCache", "List", "Path", "cache", "filter_json", "json", "json_selector", "logging", "pathlib", "select_json", "typing"], "hash": "894d0cb3c48c80975d0bd6f3c6920b835e98f4dfe7de68ef5c6e01e1bb300534"}, {"module_id": "temp_workfiles.unsorted_mess.22.05.25.collector (1)", "path": "temp_workfiles/unsorted_mess/22.05.25/collector (1).py", "category": "core", "module_doc": "", "functions": [{"name": "apply_filters", "docstring": "", "line_range": [10, 26], "parameters": ["files", "filters"], "decorators": []}, {"name": "collect_files", "docstring": "", "line_range": [28, 34], "parameters": ["root_dir", "filters"], "decorators": []}, {"name": "generate_struct", "docstring": "", "line_range": [36, 84], "parameters": ["root_dir", "output"], "decorators": []}, {"name": "main", "docstring": "", "line_range": [86, 87], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"apply_filters": ["pattern.startswith", "fnmatch.fnmatch", "filtered.append"], "collect_files": ["apply_filters", "path.is_file", "root_dir.rglob", "files.append", "path.relative_to", "str"], "generate_struct": ["json.dump", "output_path.open", "logger.info", "len", "uuid.uuid4", "existing.get", "collect_files", "Path", "output_path.exists", "json.load", "str"], "main": ["generate_struct"]}, "dependencies": ["Path", "fnmatch", "json", "logging", "pathlib", "uuid"], "hash": "b848962d4bc687f0d520198a4bd5bca9301b685f8d9c1fae81c1ffba35ae31be"}, {"module_id": "temp_workfiles.unsorted_mess.22.05.25.test_self_run", "path": "temp_workfiles/unsorted_mess/22.05.25/test_self_run.py", "category": "test", "module_doc": "", "functions": [{"name": "test_filter_json_init_json", "docstring": "Test filter_json with init.json structure.", "line_range": [15, 22], "parameters": ["tmp_path"], "decorators": []}, {"name": "test_select_json_partial", "docstring": "Test partial JSON loading.", "line_range": [24, 34], "parameters": ["tmp_path"], "decorators": []}, {"name": "test_cache_json", "docstring": "Test JSON caching.", "line_range": [36, 48], "parameters": ["tmp_path"], "decorators": []}, {"name": "test_attach_to_llm_request_init_json", "docstring": "Test attach_to_llm_request with init.json and cache.", "line_range": [50, 67], "parameters": ["tmp_path"], "decorators": []}, {"name": "test_attach_to_llm_request_missing_file", "docstring": "Test attach_to_llm_request with missing file.", "line_range": [69, 73], "parameters": ["tmp_path"], "decorators": []}], "classes": [], "callgraph": {"test_filter_json_init_json": ["filter_json"], "test_select_json_partial": ["json.dump", "select_json", "str", "open"], "test_cache_json": ["json.dump", "cache.close", "cache.get_full_json", "cache.get_metadata", "cache.cache_json", "JSONCache", "open", "str"], "test_attach_to_llm_request_init_json": ["json.dump", "cache.close", "attach_to_llm_request", "JSONCache", "open", "str"], "test_attach_to_llm_request_missing_file": ["attach_to_llm_request", "str"]}, "dependencies": ["JSONCache", "Path", "attach_to_llm_request", "filter_json", "filter_struct", "json", "llmstruct.cache", "llmstruct.json_selector", "llmstruct.self_run", "pathlib", "pytest", "select_json"], "hash": "b139aa6febfe24eec888f0597e061092ca4000fdfa3877fa4cc5c23a86c64bdb"}, {"module_id": "temp_workfiles.unsorted_mess.22.05.25.test_cli", "path": "temp_workfiles/unsorted_mess/22.05.25/test_cli.py", "category": "test", "module_doc": "", "functions": [{"name": "setup_files", "docstring": "Set up test files.", "line_range": [9, 33], "parameters": ["tmp_path"], "decorators": ["pytest.fixture"]}, {"name": "test_interactive_with_cli_json", "docstring": "Test interactive mode with cli.json.", "line_range": [36, 50], "parameters": ["setup_files", "monkeypatch"], "decorators": ["pytest.mark.asyncio"]}], "classes": [], "callgraph": {"setup_files": ["json.dumps"], "test_interactive_with_cli_json": ["patch.object", "interactive", "monkeypatch.setattr", "AsyncMock", "type", "str", "inputs.pop"]}, "dependencies": ["AsyncMock", "LLMClient", "Path", "context", "dogfood", "interactive", "json", "llmstruct", "llmstruct.cli", "patch", "pathlib", "pytest", "read_file_content", "review", "unittest.mock"], "hash": "a540920dadfaa41dc121f6409beb24d8e12019586e0375f5c507f52088cf2a2f"}, {"module_id": "temp_workfiles.unsorted_mess.22.05.25.deploy_embedded_files (1)", "path": "temp_workfiles/unsorted_mess/22.05.25/deploy_embedded_files (1).py", "category": "core", "module_doc": "", "functions": [{"name": "validate_json", "docstring": "", "line_range": [909, 915], "parameters": ["data", "schema"], "decorators": []}, {"name": "backup_files", "docstring": "", "line_range": [917, 923], "parameters": ["target_dir", "backup_root"], "decorators": []}, {"name": "deploy_embedded_files", "docstring": "", "line_range": [925, 951], "parameters": [], "decorators": []}, {"name": "main", "docstring": "", "line_range": [953, 954], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"validate_json": ["logger.warning", "validate"], "backup_files": ["target_dir.exists", "datetime.now", "shutil.copytree", "logger.info"], "deploy_embedded_files": ["EMBEDDED_FILES.get", "json.dump", "target_path.open", "logger.info", "target_path.exists", "backup_files", "Path", "EMBEDDED_FILES.items", "logger.error", "validate_json", "f.write"], "main": ["deploy_embedded_files"]}, "dependencies": ["Path", "ValidationError", "datetime", "json", "jsonschema", "logging", "os", "pathlib", "shutil", "validate"], "hash": "ba3f6b3914a33f64e59ce6bc3950ae9dfee890484921bcbf647efece1ccdfa07"}, {"module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_json_selector", "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_json_selector.py", "category": "core", "module_doc": "", "functions": [{"name": "filter_json", "docstring": "Filter JSON data by key-value pair and select fields.", "line_range": [17, 29], "parameters": ["data", "filter_key", "filter_value", "fields"], "decorators": []}, {"name": "select_json", "docstring": "Load and filter JSON file, optionally parsing partially.", "line_range": [31, 72], "parameters": ["json_path", "filter_key", "filter_value", "fields", "partial"], "decorators": []}], "classes": [], "callgraph": {"filter_json": ["isinstance", "item.get", "data.get", "filtered.append"], "select_json": ["current_item.get", "json_file.exists", "prefix.startswith", "json.load", "logging.error", "Path", "filtered.append", "ijson.parse", "open", "path.append", "f.seek", "filter_json"]}, "dependencies": ["Any", "Dict", "List", "Optional", "Path", "argparse", "ijson", "json", "logging", "pathlib", "typing"], "hash": "21ea37c015ac1ab1932e3784ab8cbd041de37be59ba72d3ad9432d5d3391523f"}, {"module_id": "temp_workfiles.unsorted_mess.22.05.25.collector", "path": "temp_workfiles/unsorted_mess/22.05.25/collector.py", "category": "core", "module_doc": "", "functions": [{"name": "generate_project_json", "docstring": "Generate project JSON with schema validation.", "line_range": [8, 52], "parameters": ["root_dir", "output_path"], "decorators": []}], "classes": [], "callgraph": {"generate_project_json": ["json.dump", "logging.info", "cli_path.open", "uuid.uuid4", "Path", "validate", "open", "json.load", "str", "cli_path.exists"]}, "dependencies": ["Path", "json", "jsonschema", "logging", "pathlib", "validate"], "hash": "ddd8a063e4333acff8f914cf9f1f224b38c3545a12d93238eea5f3982749de67"}, {"module_id": "temp_workfiles.unsorted_mess.22.05.25.scripts_validate_refs", "path": "temp_workfiles/unsorted_mess/22.05.25/scripts_validate_refs.py", "category": "core", "module_doc": "", "functions": [{"name": "validate_references", "docstring": "", "line_range": [8, 39], "parameters": [], "decorators": []}, {"name": "main", "docstring": "", "line_range": [41, 42], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"validate_references": ["idea.get", "json.dump", "source_file.exists", "target_file.exists", "logger.info", "logger.warning", "broken_links.append", "enumerate", "Path", "logger.error", "json.load"], "main": ["validate_references"]}, "dependencies": ["Path", "json", "logging", "pathlib"], "hash": "a35ce62eeb2d82b574035bde734efad10a2e709eaa8145787c2f63e8b0ff787c"}, {"module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_cache", "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_cache.py", "category": "core", "module_doc": "", "functions": [{"name": "__init__", "docstring": "Initialize SQLite cache for JSON files.", "line_range": [18, 22], "parameters": ["self", "db_path"], "decorators": []}, {"name": "create_tables", "docstring": "Create tables for metadata and file paths.", "line_range": [24, 42], "parameters": ["self"], "decorators": []}, {"name": "cache_json", "docstring": "Cache JSON metadata and store full file path.", "line_range": [44, 64], "parameters": ["self", "json_path", "artifact_id", "summary", "tags"], "decorators": []}, {"name": "get_metadata", "docstring": "Retrieve metadata by artifact_id.", "line_range": [66, 79], "parameters": ["self", "artifact_id"], "decorators": []}, {"name": "get_full_json", "docstring": "Load full JSON by artifact_id.", "line_range": [81, 94], "parameters": ["self", "artifact_id"], "decorators": []}, {"name": "close", "docstring": "Close database connection.", "line_range": [96, 98], "parameters": ["self"], "decorators": []}], "classes": [{"name": "JSONCache", "docstring": "", "line_range": [17, 98], "methods": [{"name": "__init__", "docstring": "Initialize SQLite cache for JSON files.", "line_range": [18, 22], "parameters": ["self", "db_path"]}, {"name": "create_tables", "docstring": "Create tables for metadata and file paths.", "line_range": [24, 42], "parameters": ["self"]}, {"name": "cache_json", "docstring": "Cache JSON metadata and store full file path.", "line_range": [44, 64], "parameters": ["self", "json_path", "artifact_id", "summary", "tags"]}, {"name": "get_metadata", "docstring": "Retrieve metadata by artifact_id.", "line_range": [66, 79], "parameters": ["self", "artifact_id"]}, {"name": "get_full_json", "docstring": "Load full JSON by artifact_id.", "line_range": [81, 94], "parameters": ["self", "artifact_id"]}, {"name": "close", "docstring": "Close database connection.", "line_range": [96, 98], "parameters": ["self"]}], "bases": []}], "callgraph": {"__init__": ["self.create_tables", "sqlite3.connect"], "create_tables": [], "cache_json": ["logging.info", "hashlib.sha256", "json_file.exists", "json.dumps", "logging.error", "content.encode", "Path", "open", "str", "f.read"], "get_metadata": ["json.loads", "cursor.fetchone"], "get_full_json": ["logging.error", "cursor.fetchone", "json.load", "open"], "close": []}, "dependencies": ["Any", "Dict", "List", "Optional", "Path", "hashlib", "json", "logging", "pathlib", "sqlite3", "typing"], "hash": "0639e2f3c27b70d02596862e63d49bc84c48ca8d0d0c8778b2d42425598acc1e"}, {"module_id": "temp_workfiles.unsorted_mess.22.05.25.cli_parser", "path": "temp_workfiles/unsorted_mess/22.05.25/cli_parser.py", "category": "core", "module_doc": "", "functions": [{"name": "parse_argparse", "docstring": "Parse argparse setup in cli.py to extract commands and arguments.", "line_range": [8, 53], "parameters": ["file_path"], "decorators": []}, {"name": "generate_cli_json", "docstring": "Generate cli.json from cli.py.", "line_range": [55, 72], "parameters": ["cli_path", "output_path"], "decorators": []}], "classes": [], "callgraph": {"parse_argparse": ["ast.walk", "cmd_args.append", "arg_name.lstrip", "commands.append", "any", "ast.parse", "isinstance", "open", "next", "f.read", "arg_name.startswith"], "generate_cli_json": ["json.dump", "uuid.uuid4", "parse_argparse", "validate", "open", "json.load", "str"]}, "dependencies": ["Any", "Dict", "List", "Path", "ast", "json", "jsonschema", "pathlib", "typing", "uuid", "validate"], "hash": "bd7f16cae40cceb896189d1ced8e889e34c6024ea03687361d296ab051359081"}, {"module_id": "temp_workfiles.unsorted_mess.22.05.25.scripts_collector", "path": "temp_workfiles/unsorted_mess/22.05.25/scripts_collector.py", "category": "core", "module_doc": "", "functions": [{"name": "apply_filters", "docstring": "", "line_range": [10, 26], "parameters": ["files", "filters"], "decorators": []}, {"name": "collect_files", "docstring": "", "line_range": [28, 34], "parameters": ["root_dir", "filters"], "decorators": []}, {"name": "generate_struct", "docstring": "", "line_range": [36, 79], "parameters": ["root_dir", "output"], "decorators": []}, {"name": "main", "docstring": "", "line_range": [81, 82], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"apply_filters": ["pattern.startswith", "fnmatch.fnmatch", "filtered.append"], "collect_files": ["apply_filters", "path.is_file", "root_dir.rglob", "files.append", "path.relative_to", "str"], "generate_struct": ["json.dump", "output_path.open", "logger.info", "len", "uuid.uuid4", "existing.get", "collect_files", "Path", "output_path.exists", "json.load", "str"], "main": ["generate_struct"]}, "dependencies": ["Path", "fnmatch", "json", "logging", "pathlib", "uuid"], "hash": "a5013206ab9b88c686ea9065ae75aafdfc6b3775ef97675df0ca5ef85d9c5232"}, {"module_id": "temp_workfiles.unsorted_mess.22.05.25.cache", "path": "temp_workfiles/unsorted_mess/22.05.25/cache.py", "category": "core", "module_doc": "", "functions": [{"name": "main", "docstring": "", "line_range": [61, 76], "parameters": [], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [6, 9], "parameters": ["self", "cache_path", "max_size"], "decorators": []}, {"name": "load_cache", "docstring": "", "line_range": [11, 24], "parameters": ["self"], "decorators": []}, {"name": "save_cache", "docstring": "", "line_range": [26, 28], "parameters": ["self"], "decorators": []}, {"name": "update_cache", "docstring": "", "line_range": [30, 49], "parameters": ["self", "task_id", "message"], "decorators": []}, {"name": "get_context", "docstring": "", "line_range": [51, 52], "parameters": ["self", "task_id"], "decorators": []}, {"name": "clear_cache", "docstring": "", "line_range": [54, 59], "parameters": ["self", "task_id"], "decorators": []}], "classes": [{"name": "ChatCache", "docstring": "", "line_range": [5, 59], "methods": [{"name": "__init__", "docstring": "", "line_range": [6, 9], "parameters": ["self", "cache_path", "max_size"]}, {"name": "load_cache", "docstring": "", "line_range": [11, 24], "parameters": ["self"]}, {"name": "save_cache", "docstring": "", "line_range": [26, 28], "parameters": ["self"]}, {"name": "update_cache", "docstring": "", "line_range": [30, 49], "parameters": ["self", "task_id", "message"]}, {"name": "get_context", "docstring": "", "line_range": [51, 52], "parameters": ["self", "task_id"]}, {"name": "clear_cache", "docstring": "", "line_range": [54, 59], "parameters": ["self", "task_id"]}], "bases": []}], "callgraph": {"__init__": ["self.load_cache"], "load_cache": ["json.load", "open"], "save_cache": ["json.dump", "open"], "update_cache": ["len", "self.save_cache", "datetime.utcnow"], "get_context": [], "clear_cache": ["self.save_cache"], "main": ["print", "json.dumps", "cache.update_cache", "cache.get_context", "ChatCache"]}, "dependencies": ["datetime", "json", "os"], "hash": "199c3bd4f6b85827ac3d18b0415b15290fa720ba77e20a41c49788158b9946a7"}, {"module_id": "temp_workfiles.unsorted_mess.22.05.25.validate_refs", "path": "temp_workfiles/unsorted_mess/22.05.25/validate_refs.py", "category": "core", "module_doc": "", "functions": [{"name": "validate_references", "docstring": "", "line_range": [8, 43], "parameters": [], "decorators": []}, {"name": "main", "docstring": "", "line_range": [45, 46], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"validate_references": ["idea.get", "json.dump", "source_file.exists", "target_file.exists", "logger.info", "logger.warning", "broken_links.append", "enumerate", "Path", "logger.error", "json.load"], "main": ["validate_references"]}, "dependencies": ["Path", "json", "logging", "pathlib"], "hash": "2977e50979e1eaf1c58adc781db0ed315e756dd1498980bbaa824b53bd70a0ef"}, {"module_id": "temp_workfiles.unsorted_mess.22.05.25.test_deploy_embedded_files", "path": "temp_workfiles/unsorted_mess/22.05.25/test_deploy_embedded_files.py", "category": "test", "module_doc": "", "functions": [{"name": "setup_dirs", "docstring": "", "line_range": [7, 19], "parameters": ["tmp_path"], "decorators": ["pytest.fixture"]}, {"name": "test_deploy_embedded_files", "docstring": "", "line_range": [21, 46], "parameters": ["setup_dirs"], "decorators": []}], "classes": [], "callgraph": {"setup_dirs": ["docs_dir.mkdir", "data_dir.mkdir", "json.dumps", "schemas_dir.mkdir"], "test_deploy_embedded_files": ["deploy_embedded_files", "list", "len", "json.load", "backup_root.glob"]}, "dependencies": ["Path", "deploy_embedded_files", "json", "pathlib", "pytest", "scripts.deploy_embedded_files"], "hash": "213ecc3133a18d992477d96d8544e3cd7082b870f5dd1134997343d7eda23220"}, {"module_id": "temp_workfiles.unsorted_mess.22.05.25.cli", "path": "temp_workfiles/unsorted_mess/22.05.25/cli.py", "category": "core", "module_doc": "", "functions": [{"name": "load_cli_json", "docstring": "Load cli.json for command metadata.", "line_range": [19, 25], "parameters": ["cli_json_path"], "decorators": []}, {"name": "interactive", "docstring": "Run interactive CLI with LLM, using cli.json for command metadata.", "line_range": [29, 82], "parameters": ["args"], "decorators": []}], "classes": [], "callgraph": {"load_cli_json": ["cli_json_path.exists", "cli_json_path.open", "Path", "json.load"], "interactive": ["logging.warning", "print", "cache.close", "cli_json.get", "logging.error", "Path", "cmd.get", "prompt.lower", "LLMClient", "input", "load_cli_json", "parse_files_from_response", "t.format", "client.query", "any", "parse", "JSONCache", "write_to_file", "attach_to_llm_request", "user_input.lower"]}, "dependencies": ["JSONCache", "LLMClient", "List", "Optional", "Path", "argparse", "asyncio", "attach_to_llm_request", "generate_json", "get_folder_structure", "json", "llmstruct", "llmstruct.cache", "llmstruct.generators.json_generator", "llmstruct.self_run", "logging", "os", "pathlib", "re", "toml", "typing", "uuid"], "hash": "cb3d878f3561aaa607aaa62733307187e2829b64270fb1fe70cf5a27ba522b06"}, {"module_id": "temp_workfiles.unsorted_mess.22.05.25.deploy_embedded_files", "path": "temp_workfiles/unsorted_mess/22.05.25/deploy_embedded_files.py", "category": "core", "module_doc": "", "functions": [{"name": "validate_json", "docstring": "", "line_range": [813, 819], "parameters": ["data", "schema"], "decorators": []}, {"name": "backup_files", "docstring": "", "line_range": [821, 827], "parameters": ["target_dir", "backup_root"], "decorators": []}, {"name": "deploy_embedded_files", "docstring": "", "line_range": [829, 853], "parameters": [], "decorators": []}, {"name": "main", "docstring": "", "line_range": [855, 856], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"validate_json": ["logger.warning", "validate"], "backup_files": ["target_dir.exists", "datetime.now", "shutil.copytree", "logger.info"], "deploy_embedded_files": ["EMBEDDED_FILES.get", "json.dump", "target_path.open", "logger.info", "target_path.exists", "backup_files", "Path", "EMBEDDED_FILES.items", "logger.error", "validate_json", "f.write"], "main": ["deploy_embedded_files"]}, "dependencies": ["Path", "ValidationError", "datetime", "json", "jsonschema", "logging", "os", "pathlib", "shutil", "validate"], "hash": "336c3736a99e41e041b2506d862fb6d40922619808520b37eaf10650221d109e"}, {"module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_cli", "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_cli.py", "category": "core", "module_doc": "", "functions": [{"name": "load_gitignore", "docstring": "Load and normalize patterns from .gitignore.", "line_range": [26, 36], "parameters": ["root_dir"], "decorators": []}, {"name": "load_config", "docstring": "Load settings from llmstruct.toml or return empty dict.", "line_range": [38, 47], "parameters": ["root_dir"], "decorators": []}, {"name": "read_file_content", "docstring": "Read content of a file if it exists and is a text file.", "line_range": [49, 58], "parameters": ["file_path"], "decorators": []}, {"name": "write_to_file", "docstring": "Write content to a file in base_dir (default /tmp) and return the path.", "line_range": [60, 74], "parameters": ["content", "filename", "base_dir"], "decorators": []}, {"name": "parse_files_from_response", "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).", "line_range": [76, 83], "parameters": ["response"], "decorators": []}, {"name": "interactive", "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.", "line_range": [85, 195], "parameters": ["args"], "decorators": []}, {"name": "parse", "docstring": "Parse codebase and generate struct.json.", "line_range": [197, 237], "parameters": ["args"], "decorators": []}, {"name": "query", "docstring": "Query LLMs with prompt and context.", "line_range": [239, 260], "parameters": ["args"], "decorators": []}, {"name": "context", "docstring": "Generate context.json from input JSON.", "line_range": [262, 264], "parameters": ["args"], "decorators": []}, {"name": "dogfood", "docstring": "Run dogfooding analysis.", "line_range": [266, 268], "parameters": ["args"], "decorators": []}, {"name": "review", "docstring": "Review codebase with LLM.", "line_range": [270, 272], "parameters": ["args"], "decorators": []}, {"name": "main", "docstring": "Command-line interface for LLMstruct.", "line_range": [274, 334], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"load_gitignore": ["line.startswith", "gitignore_path.open", "gitignore_path.exists", "logging.error", "Path", "line.strip"], "load_config": ["logging.error", "Path", "config_path\u30aa\u30fc\u30d7\u30f3", "toml.load", "config_path.exists"], "read_file_content": ["path.open", "path.is_file", "logging.error", "Path", "f.read"], "write_to_file": ["logging.warning", "logging.info", "base_path.mkdir", "file_path.exists", "logging.error", "Path", "f.write", "file_path.open", "str"], "parse_files_from_response": ["filename.strip", "files.append", "re.findall", "content.strip"], "interactive": ["logging.warning", "print", "cache.close", "os.listdir", "json.dumps", "logging.error", "Path", "LLMClient", "sorted", "load_gitignore", "input", "scan_match.group", "parse_files_from_response", "re.search", "client.query", "write_match.group", "files_to_write.append", "parse", "get_folder_structure", "JSONCache", "write_dir.startswith", "attach_to_llm_request", "write_to_file", "user_input.lower", "read_file_content"], "parse": ["config.get", "logging.warning", "json.dump", "logging.info", "cache.close", "load_gitignore", "load_config", "cache.cache_json", "logging.error", "Path", "JSONCache", "generate_json"], "query": ["json.dump", "logging.info", "cache.close", "client.query", "logging.error", "Path", "JSONCache", "LLMClient"], "context": ["logging.warning"], "dogfood": ["logging.warning"], "review": ["logging.warning"], "main": ["query_parser.add_argument", "context", "dogfood", "query", "argparse.ArgumentParser", "review", "context_parser.add_argument", "parse", "parse_parser.add_argument", "interactive_parser.add_argument", "review_parser.add_argument", "interactive", "parser.parse_args", "parser.add_subparsers", "dogfood_parser.add_argument", "asyncio.run", "subparsers.add_parser"]}, "dependencies": ["JSONCache", "LLMClient", "List", "Optional", "Path", "argparse", "asyncio", "attach_to_llm_request", "generate_json", "get_folder_structure", "json", "llmstruct", "llmstruct.cache", "llmstruct.generators.json_generator", "llmstruct.self_run", "logging", "os", "pathlib", "re", "toml", "typing", "uuid"], "hash": "26cffb7c31d1f379e0dcc75d668fd872ffe10d408cfb92cc81172aeca774fffc"}, {"module_id": "temp_workfiles.unsorted_mess.22.05.25.extract_artifacts", "path": "temp_workfiles/unsorted_mess/22.05.25/extract_artifacts.py", "category": "core", "module_doc": "", "functions": [{"name": "parse_args", "docstring": "", "line_range": [9, 14], "parameters": [], "decorators": []}, {"name": "load_artifacts_index", "docstring": "", "line_range": [16, 29], "parameters": ["index_path"], "decorators": []}, {"name": "save_artifacts_index", "docstring": "", "line_range": [31, 33], "parameters": ["index", "index_path"], "decorators": []}, {"name": "calculate_sha256", "docstring": "", "line_range": [35, 36], "parameters": ["content"], "decorators": []}, {"name": "extract_artifacts", "docstring": "", "line_range": [38, 91], "parameters": ["html_file", "output_dir", "index_path"], "decorators": []}, {"name": "main", "docstring": "", "line_range": [93, 102], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"parse_args": ["argparse.ArgumentParser", "parser.parse_args", "parser.add_argument"], "load_artifacts_index": ["json.load", "open"], "save_artifacts_index": ["json.dump", "open"], "calculate_sha256": ["content.encode", "hashlib.sha256"], "extract_artifacts": ["print", "artifact.get", "extracted.append", "load_artifacts_index", "datetime.utcnow", "content_type.split", "title.endswith", "save_artifacts_index", "os.makedirs", "f.write", "soup.find_all", "open", "calculate_sha256", "f.read", "BeautifulSoup"], "main": ["print", "parse_args", "extract_artifacts"]}, "dependencies": ["BeautifulSoup", "argparse", "bs4", "datetime", "hashlib", "json", "os", "uuid"], "hash": "34d941a177c58de7ed26f13f3fe84c15ba4338f309b5499ea2ab1bc4ebc604cb"}, {"module_id": "temp_workfiles.unsorted_mess.dump.dumper", "path": "temp_workfiles/unsorted_mess/dump/dumper.py", "category": "core", "module_doc": "", "functions": [{"name": "json_hash", "docstring": "", "line_range": [9, 12], "parameters": ["obj"], "decorators": []}], "classes": [], "callgraph": {"json_hash": ["json.dumps", "dumped.encode", "hashlib.md5"]}, "dependencies": ["glob", "hashlib", "json", "os"], "hash": "1fdd4b7f9a65424f3ca09f91b7a9894de51a7764d2f8660e7d153fd88409f00a"}, {"module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_generators___init__", "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_generators___init__.py", "category": "core", "module_doc": "Generator modules for creating LLMStruct JSON outputs from parsed code data.", "functions": [], "classes": [], "callgraph": {}, "dependencies": ["JSONGenerator", "json_generator"], "hash": "85c28cb01eb4bc0c677187d775eed1758c12c323e59687d471cf981b8a397a32"}, {"module_id": "temp_workfiles.unsorted_mess.dump.examples_python_project_utils", "path": "temp_workfiles/unsorted_mess/dump/examples_python_project_utils.py", "category": "core", "module_doc": "Utility functions for the sample project.", "functions": [{"name": "helper", "docstring": "Help the main function.", "line_range": [5, 7], "parameters": [], "decorators": []}, {"name": "log", "docstring": "Log a message.", "line_range": [9, 11], "parameters": ["message"], "decorators": []}], "classes": [], "callgraph": {"helper": ["log"], "log": ["logging.info"]}, "dependencies": ["logging"], "hash": "abeddf2414099d185cd40335f73c7bc4e328a1ca766e01f9c4ff9c5e6a6700ce"}, {"module_id": "temp_workfiles.unsorted_mess.dump.generate_ideas_tree", "path": "temp_workfiles/unsorted_mess/dump/generate_ideas_tree.py", "category": "core", "module_doc": "", "functions": [], "classes": [], "callgraph": {}, "dependencies": ["Path", "os", "pathlib"], "hash": "eba1d8ba4d3a4798a2c14246c2d9f5062bb10e61dd494d8386c0208c7a4446f2"}, {"module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct___init__", "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct___init__.py", "category": "core", "module_doc": "LLMStruct: A tool for generating JSON-based code structures for LLM integration.\n\nThis package provides modular parsers, generators, and validators to create and validate\nJSON representations of code projects, supporting automation and context-aware LLM assistance.", "functions": [], "classes": [], "callgraph": {}, "dependencies": [], "hash": "7a4cd108c08baad5ab603d7aa70834dce9ef27dad20e0a728b59b269676bc902"}, {"module_id": "temp_workfiles.unsorted_mess.dump.test_efficiency1", "path": "temp_workfiles/unsorted_mess/dump/test_efficiency1.py", "category": "test", "module_doc": "", "functions": [{"name": "get_system_metrics", "docstring": "", "line_range": [10, 14], "parameters": [], "decorators": []}, {"name": "setup_proxy", "docstring": "", "line_range": [16, 25], "parameters": ["proxy_url"], "decorators": []}, {"name": "run_llm_request", "docstring": "", "line_range": [27, 42], "parameters": ["api_url", "payload", "proxy"], "decorators": []}, {"name": "test_with_llmstruct", "docstring": "", "line_range": [44, 51], "parameters": ["api_url", "project_path", "proxy"], "decorators": []}, {"name": "test_without_llmstruct", "docstring": "", "line_range": [53, 59], "parameters": ["api_url", "project_path", "proxy"], "decorators": []}, {"name": "evaluate_accuracy", "docstring": "", "line_range": [61, 63], "parameters": ["response_text", "expected"], "decorators": []}, {"name": "main", "docstring": "", "line_range": [65, 87], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"get_system_metrics": ["psutil.virtual_memory", "psutil.cpu_percent"], "setup_proxy": ["os.getenv"], "run_llm_request": ["get_system_metrics", "len", "session.post", "response.json", "time.perf_counter", "requests.Session"], "test_with_llmstruct": ["f.read", "Path", "open", "struct_path.exists", "subprocess.run", "run_llm_request", "str"], "test_without_llmstruct": ["run_llm_request", "Path", "f.read", "open"], "evaluate_accuracy": ["len", "response_text.lower", "sum"], "main": ["json.dump", "print", "parser.add_argument", "argparse.ArgumentParser", "evaluate_accuracy", "test_without_llmstruct", "range", "test_with_llmstruct", "open", "setup_proxy", "parser.parse_args"]}, "dependencies": ["Path", "argparse", "json", "os", "pathlib", "psutil", "requests", "subprocess", "time"], "hash": "8ee68512d8305219ff9977460f9d438ab94a010ad4cf1e92564fe8e376667e83"}, {"module_id": "temp_workfiles.unsorted_mess.dump.test_efficiency", "path": "temp_workfiles/unsorted_mess/dump/test_efficiency.py", "category": "test", "module_doc": "", "functions": [{"name": "get_system_metrics", "docstring": "", "line_range": [8, 12], "parameters": [], "decorators": []}, {"name": "run_llm_request", "docstring": "", "line_range": [14, 26], "parameters": ["api_url", "payload"], "decorators": []}, {"name": "test_with_llmstruct", "docstring": "", "line_range": [28, 35], "parameters": ["api_url", "project_path"], "decorators": []}, {"name": "test_without_llmstruct", "docstring": "", "line_range": [37, 43], "parameters": ["api_url", "project_path"], "decorators": []}, {"name": "evaluate_accuracy", "docstring": "", "line_range": [45, 47], "parameters": ["response_text", "expected"], "decorators": []}, {"name": "main", "docstring": "", "line_range": [49, 66], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"get_system_metrics": ["psutil.virtual_memory", "psutil.cpu_percent"], "run_llm_request": ["requests.post", "get_system_metrics", "len", "response.json", "time.perf_counter"], "test_with_llmstruct": ["f.read", "Path", "open", "struct_path.exists", "subprocess.run", "run_llm_request", "str"], "test_without_llmstruct": ["run_llm_request", "Path", "f.read", "open"], "evaluate_accuracy": ["len", "response_text.lower", "sum"], "main": ["json.dump", "print", "evaluate_accuracy", "test_without_llmstruct", "test_with_llmstruct", "open", "range"]}, "dependencies": ["Path", "json", "pathlib", "psutil", "requests", "subprocess", "time"], "hash": "643ac7a64ecc90a970456e558bc359380dd234b3ff73f9840acbc2f943e53944"}, {"module_id": "temp_workfiles.unsorted_mess.dump.grok", "path": "temp_workfiles/unsorted_mess/dump/grok.py", "category": "core", "module_doc": "", "functions": [{"name": "test_grok", "docstring": "", "line_range": [22, 28], "parameters": ["api_key", "prompt", "proxy"], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [5, 10], "parameters": ["self", "api_key", "proxy"], "decorators": []}, {"name": "generate", "docstring": "", "line_range": [12, 20], "parameters": ["self", "prompt", "model"], "decorators": []}], "classes": [{"name": "GrokClient", "docstring": "", "line_range": [4, 20], "methods": [{"name": "__init__", "docstring": "", "line_range": [5, 10], "parameters": ["self", "api_key", "proxy"]}, {"name": "generate", "docstring": "", "line_range": [12, 20], "parameters": ["self", "prompt", "model"]}], "bases": []}], "callgraph": {"__init__": ["requests.Session"], "generate": ["len", "prompt.split", "response.raise_for_status", "response.json"], "test_grok": ["time.perf_counter", "client.generate", "GrokClient"]}, "dependencies": ["os", "requests"], "hash": "5ccc930d08a7a02950b8ea9a5f4adb15f6c6e29ca9b58a9830a3da72a77b2a3c"}, {"module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct___main__", "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct___main__.py", "category": "core", "module_doc": "", "functions": [], "classes": [], "callgraph": {}, "dependencies": ["cli", "main"], "hash": "d20de29275ce4bd81951ca4bfedae001cb822676592a376c4ffc6deb558e55be"}, {"module_id": "temp_workfiles.unsorted_mess.dump.generate_ru_docs (1)", "path": "temp_workfiles/unsorted_mess/dump/generate_ru_docs (1).py", "category": "core", "module_doc": "", "functions": [], "classes": [], "callgraph": {}, "dependencies": ["Path", "os", "pathlib"], "hash": "1074e7bf11e1c41bb9d00c7b85c8667477225258a2465cb305f3fe060e77d049"}, {"module_id": "temp_workfiles.unsorted_mess.dump.test_efficiency (1)", "path": "temp_workfiles/unsorted_mess/dump/test_efficiency (1).py", "category": "test", "module_doc": "", "functions": [{"name": "get_system_metrics", "docstring": "", "line_range": [12, 16], "parameters": [], "decorators": []}, {"name": "setup_proxy", "docstring": "", "line_range": [18, 21], "parameters": ["proxy_url"], "decorators": []}, {"name": "run_llm_request", "docstring": "", "line_range": [23, 38], "parameters": ["api_url", "payload", "proxy"], "decorators": []}, {"name": "check_llmstruct_cli", "docstring": "", "line_range": [40, 41], "parameters": [], "decorators": []}, {"name": "test_with_llmstruct", "docstring": "", "line_range": [43, 69], "parameters": ["api_url", "project_path", "proxy", "use_placeholder"], "decorators": []}, {"name": "test_without_llmstruct", "docstring": "", "line_range": [71, 77], "parameters": ["api_url", "project_path", "proxy"], "decorators": []}, {"name": "test_with_grok", "docstring": "", "line_range": [79, 100], "parameters": ["api_key", "project_path", "proxy", "use_placeholder"], "decorators": []}, {"name": "evaluate_accuracy", "docstring": "", "line_range": [102, 104], "parameters": ["response_text", "expected"], "decorators": []}, {"name": "main", "docstring": "", "line_range": [106, 151], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"get_system_metrics": ["psutil.virtual_memory", "psutil.cpu_percent"], "setup_proxy": ["os.getenv"], "run_llm_request": ["get_system_metrics", "len", "session.post", "response.json", "time.perf_counter", "requests.Session"], "check_llmstruct_cli": ["shutil.which"], "test_with_llmstruct": ["json.dump", "target_path.exists", "f.read", "FileNotFoundError", "Path", "open", "subprocess.run", "check_llmstruct_cli", "run_llm_request", "str"], "test_without_llmstruct": ["run_llm_request", "Path", "f.read", "open"], "test_with_grok": ["json.dump", "target_path.exists", "test_grok", "FileNotFoundError", "Path", "open", "f.read"], "evaluate_accuracy": ["len", "response_text.lower", "sum"], "main": ["json.dump", "print", "parser.add_argument", "test_with_grok", "argparse.ArgumentParser", "evaluate_accuracy", "test_without_llmstruct", "range", "test_with_llmstruct", "open", "setup_proxy", "parser.parse_args", "check_llmstruct_cli", "str"]}, "dependencies": ["Path", "argparse", "json", "os", "pathlib", "psutil", "requests", "shutil", "src.llmstruct.grok", "subprocess", "test_grok", "time"], "hash": "d1a2b90382e131c55876c1817b2bd69d8f486e69690bd32e96cb5191c889fec7"}, {"module_id": "temp_workfiles.unsorted_mess.dump.json_generator", "path": "temp_workfiles/unsorted_mess/dump/json_generator.py", "category": "core", "module_doc": "", "functions": [{"name": "get_folder_structure", "docstring": "Capture directory and file structure with artifact_id, respecting .gitignore and patterns.", "line_range": [13, 50], "parameters": ["root_dir", "gitignore_patterns", "include_patterns", "exclude_patterns", "exclude_dirs"], "decorators": []}, {"name": "build_toc_and_modules", "docstring": "Build TOC and modules with artifact_id and robust filtering.", "line_range": [52, 83], "parameters": ["root_dir", "include_patterns", "exclude_patterns", "gitignore_patterns", "include_ranges", "include_hashes", "exclude_dirs"], "decorators": []}, {"name": "generate_json", "docstring": "Generate JSON structure for project with artifact_id, summary, and tags.", "line_range": [85, 126], "parameters": ["root_dir", "include_patterns", "exclude_patterns", "gitignore_patterns", "include_ranges", "include_hashes", "goals", "exclude_dirs"], "decorators": []}], "classes": [], "callgraph": {"get_folder_structure": ["file_path.match", "p.endswith", "os.walk", "sorted", "set", "structure.append", "file_path.relative_to", "any", "uuid.uuid4", "Path", "p.rstrip", "str"], "build_toc_and_modules": ["p.endswith", "modules.append", "set", "f.match", "analyze_module", "len", "any", "uuid.uuid4", "Path", "toc.append", "p.rstrip", "str"], "generate_json": ["set", "list", "len", "uuid.uuid4", "build_toc_and_modules", "get_folder_structure", "Path", "sum", "str"]}, "dependencies": ["Any", "Dict", "List", "Optional", "Path", "analyze_module", "datetime", "json", "logging", "os", "parsers.python_parser", "pathlib", "typing", "uuid"], "hash": "7e884f61a20c4ef1a595931e1cd661ba44cef5fc9a4808fb674b918d24cbf5ff"}, {"module_id": "temp_workfiles.unsorted_mess.dump.llm_client_engines", "path": "temp_workfiles/unsorted_mess/dump/llm_client_engines.py", "category": "core", "module_doc": "", "functions": [{"name": "call_llm", "docstring": "Call the specified LLM backend with the given prompt.", "line_range": [8, 22], "parameters": ["prompt"], "decorators": []}, {"name": "call_ollama", "docstring": "Call Ollama with the specified prompt.", "line_range": [24, 32], "parameters": ["prompt"], "decorators": []}, {"name": "call_openai", "docstring": "Call OpenAI API with the specified prompt.", "line_range": [34, 44], "parameters": ["prompt"], "decorators": []}, {"name": "call_anthropic", "docstring": "Call Anthropic API with the specified prompt.", "line_range": [46, 57], "parameters": ["prompt"], "decorators": []}, {"name": "call_grok", "docstring": "Call xAI Grok API with the specified prompt.", "line_range": [59, 79], "parameters": ["prompt"], "decorators": []}], "classes": [], "callgraph": {"call_llm": ["call_ollama", "call_anthropic", "call_grok", "RuntimeError", "ValueError", "call_openai", "str"], "call_ollama": ["subprocess.run"], "call_openai": ["ValueError", "os.getenv", "openai.OpenAI"], "call_anthropic": ["anthropic.Anthropic", "ValueError", "os.getenv"], "call_grok": ["requests.post", "response.raise_for_status", "response.json", "os.getenv", "ValueError"]}, "dependencies": ["LLM_BACKEND", "MODEL_NAME", "anthropic", "json", "llm_client.config", "openai", "os", "requests", "subprocess"], "hash": "6332c29a8126c83ca892f2fe37bc644faa8146c95a866bdc3d914d8c69a36d7f"}, {"module_id": "temp_workfiles.unsorted_mess.dump.llm_client_config", "path": "temp_workfiles/unsorted_mess/dump/llm_client_config.py", "category": "core", "module_doc": "", "functions": [], "classes": [], "callgraph": {}, "dependencies": ["os"], "hash": "8039352fe401728b66271974e7170bbc9fc1f6423971b2f9a693d3025ba4cf77"}, {"module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_parsers_python_parser", "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_parsers_python_parser.py", "category": "core", "module_doc": "", "functions": [{"name": "file_hash", "docstring": "Compute SHA-256 hash of file contents.", "line_range": [9, 16], "parameters": ["filepath"], "decorators": []}, {"name": "extract_comments", "docstring": "Extract single-line and multi-line comments using tokenize.", "line_range": [18, 33], "parameters": ["filepath"], "decorators": []}, {"name": "compute_file_metadata", "docstring": "Compute file size, last modified time, line count, and optional hash.", "line_range": [35, 51], "parameters": ["filepath", "include_hashes"], "decorators": []}, {"name": "infer_category", "docstring": "Infer module category based on path and dependencies.", "line_range": [53, 64], "parameters": ["path", "dependencies"], "decorators": []}, {"name": "get_signature", "docstring": "Generate function signature.", "line_range": [66, 69], "parameters": ["func_node"], "decorators": []}, {"name": "extract_dependencies", "docstring": "Extract module-level imports.", "line_range": [96, 105], "parameters": ["tree"], "decorators": []}, {"name": "analyze_module", "docstring": "Analyze a Python module in a single pass.", "line_range": [107, 211], "parameters": ["filepath", "root_dir", "include_ranges", "include_hashes"], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [73, 75], "parameters": ["self"], "decorators": []}, {"name": "visit_Call", "docstring": "", "line_range": [77, 84], "parameters": ["self", "node"], "decorators": []}, {"name": "visit_Import", "docstring": "", "line_range": [86, 89], "parameters": ["self", "node"], "decorators": []}, {"name": "visit_ImportFrom", "docstring": "", "line_range": [91, 94], "parameters": ["self", "node"], "decorators": []}], "classes": [{"name": "CallVisitor", "docstring": "Extract function calls and module dependencies.", "line_range": [71, 94], "methods": [{"name": "__init__", "docstring": "", "line_range": [73, 75], "parameters": ["self"]}, {"name": "visit_Call", "docstring": "", "line_range": [77, 84], "parameters": ["self", "node"]}, {"name": "visit_Import", "docstring": "", "line_range": [86, 89], "parameters": ["self", "node"]}, {"name": "visit_ImportFrom", "docstring": "", "line_range": [91, 94], "parameters": ["self", "node"]}], "bases": ["ast.NodeVisitor"]}], "callgraph": {"file_hash": ["logging.error", "hashlib.sha256", "f.read", "open"], "extract_comments": ["tokenize.tokenize", "comments.append", "logging.error", "open"], "compute_file_metadata": ["os.stat", "file_hash", "open", "logging.error", "sum"], "infer_category": ["any", "path.lower"], "get_signature": [], "__init__": ["set"], "visit_Call": ["self.generic_visit", "isinstance"], "visit_Import": ["self.generic_visit"], "visit_ImportFrom": ["self.generic_visit"], "extract_dependencies": ["ast.walk", "dependencies.update", "sorted", "set", "dependencies.add", "isinstance"], "analyze_module": ["get_signature", "getattr", "infer_category", "logging.error", "compute_file_metadata", "methods.append", "CallVisitor", "sorted", "ast.parse", "open", "source.splitlines", "functions.append", "hashlib.sha256", "classes.append", "ast.get_docstring", "extract_comments", "f.read", "str", "extract_dependencies", "isinstance", "visitor.visit"]}, "dependencies": ["Any", "Dict", "List", "Path", "Set", "ast", "hashlib", "logging", "os", "pathlib", "tokenize", "typing"], "hash": "64414a61354180cdf7bc870ad863a721a41dfad1ce0e4b407086bc4e4614956d"}, {"module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_generators_json_generator", "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_generators_json_generator.py", "category": "core", "module_doc": "", "functions": [{"name": "get_folder_structure", "docstring": "Capture directory and file structure, respecting .gitignore and patterns.", "line_range": [20, 65], "parameters": ["root_dir", "gitignore_patterns", "include_patterns", "exclude_patterns"], "decorators": []}, {"name": "build_toc_and_modules", "docstring": "Build TOC and modules with robust .gitignore filtering using pathlib.", "line_range": [67, 136], "parameters": ["root_dir", "include_patterns", "exclude_patterns", "gitignore_patterns", "include_ranges", "include_hashes"], "decorators": []}, {"name": "generate_json", "docstring": "Generate JSON structure for project.", "line_range": [138, 164], "parameters": ["root_dir", "include_patterns", "exclude_patterns", "gitignore_patterns", "include_ranges", "include_hashes", "goals"], "decorators": []}], "classes": [], "callgraph": {"get_folder_structure": ["os.walk", "sorted", "exclude_patterns.extend", "structure.append", "file_path.relative_to", "dirnames.clear", "any", "fnmatch.fnmatch", "Path", "str", "rel_dir.split", "logging.debug", "dir_path.relative_to"], "build_toc_and_modules": ["logging.info", "os.walk", "modules.append", "exclude_patterns.extend", "file_path.relative_to", "analyze_module", "len", "any", "toc.append", "fnmatch.fnmatch", "Path", "sum", "str", "rel_dir.split", "logging.debug", "dir_path.relative_to"], "generate_json": ["build_toc_and_modules", "len", "get_folder_structure"]}, "dependencies": ["Any", "Dict", "List", "Path", "Tuple", "analyze_module", "datetime", "json", "logging", "os", "parsers.python_parser", "pathlib", "typing"], "hash": "8dd361cd3055446ae6ff3bad8764ce005b819f53176970c8ccd9bb48edc738cd"}, {"module_id": "temp_workfiles.unsorted_mess.dump.generate_llmstruct", "path": "temp_workfiles/unsorted_mess/dump/generate_llmstruct.py", "category": "core", "module_doc": "Generate JSON for workspace based on user instructions template.\n\nCreates structure:\n- metadata with description, instructions, and version\n- toc with module summaries and categories\n- modules with detailed function/class info, comments, call graphs, and categories", "functions": [{"name": "load_gitignore", "docstring": "Load and normalize patterns from .gitignore, logging loaded patterns.", "line_range": [48, 62], "parameters": ["root_dir"], "decorators": []}, {"name": "load_goals", "docstring": "Load goals from semicolon-separated string, file, or interactive editor.", "line_range": [64, 108], "parameters": ["goals_input"], "decorators": []}, {"name": "file_hash", "docstring": "Compute SHA-256 hash of file contents.", "line_range": [110, 117], "parameters": ["filepath"], "decorators": []}, {"name": "extract_comments", "docstring": "Extract single-line and multi-line comments using tokenize.", "line_range": [119, 134], "parameters": ["filepath"], "decorators": []}, {"name": "compute_file_metadata", "docstring": "Compute file size, last modified time, line count, and optional hash.", "line_range": [136, 152], "parameters": ["filepath", "include_hashes"], "decorators": []}, {"name": "infer_category", "docstring": "Infer module category based on path and dependencies.", "line_range": [154, 165], "parameters": ["path", "dependencies"], "decorators": []}, {"name": "get_signature", "docstring": "Generate function signature.", "line_range": [167, 170], "parameters": ["func_node"], "decorators": []}, {"name": "extract_dependencies", "docstring": "Extract module-level imports.", "line_range": [197, 206], "parameters": ["tree"], "decorators": []}, {"name": "analyze_module", "docstring": "Analyze a Python module in a single pass.", "line_range": [208, 312], "parameters": ["filepath", "root_dir", "include_ranges", "include_hashes"], "decorators": []}, {"name": "build_toc_and_modules", "docstring": "Build TOC and modules with robust .gitignore filtering using pathlib.", "line_range": [314, 382], "parameters": ["root_dir", "include_patterns", "exclude_patterns", "include_ranges", "include_hashes"], "decorators": []}, {"name": "generate_json", "docstring": "Generate JSON structure for project.", "line_range": [384, 406], "parameters": ["root_dir", "include_patterns", "exclude_patterns", "include_ranges", "include_hashes", "goals_input"], "decorators": []}, {"name": "main", "docstring": "", "line_range": [408, 441], "parameters": [], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [174, 176], "parameters": ["self"], "decorators": []}, {"name": "visit_Call", "docstring": "", "line_range": [178, 185], "parameters": ["self", "node"], "decorators": []}, {"name": "visit_Import", "docstring": "", "line_range": [187, 190], "parameters": ["self", "node"], "decorators": []}, {"name": "visit_ImportFrom", "docstring": "", "line_range": [192, 195], "parameters": ["self", "node"], "decorators": []}], "classes": [{"name": "CallVisitor", "docstring": "Extract function calls and module dependencies.", "line_range": [172, 195], "methods": [{"name": "__init__", "docstring": "", "line_range": [174, 176], "parameters": ["self"]}, {"name": "visit_Call", "docstring": "", "line_range": [178, 185], "parameters": ["self", "node"]}, {"name": "visit_Import", "docstring": "", "line_range": [187, 190], "parameters": ["self", "node"]}, {"name": "visit_ImportFrom", "docstring": "", "line_range": [192, 195], "parameters": ["self", "node"]}], "bases": ["ast.NodeVisitor"]}], "callgraph": {"load_gitignore": ["logging.warning", "logging.info", "line.startswith", "len", "logging.error", "open", "line.strip"], "load_goals": ["logging.info", "tempfile.NamedTemporaryFile", "goals_input.split", "line.startswith", "os.unlink", "len", "line.strip", "logging.error", "temp.flush", "open", "g.strip", "subprocess.run", "temp.write"], "file_hash": ["logging.error", "hashlib.sha256", "f.read", "open"], "extract_comments": ["tokenize.tokenize", "comments.append", "logging.error", "open"], "compute_file_metadata": ["os.stat", "file_hash", "open", "logging.error", "sum"], "infer_category": ["any", "path.lower"], "get_signature": [], "__init__": ["set"], "visit_Call": ["self.generic_visit", "isinstance"], "visit_Import": ["self.generic_visit"], "visit_ImportFrom": ["self.generic_visit"], "extract_dependencies": ["ast.walk", "dependencies.update", "sorted", "set", "dependencies.add", "isinstance"], "analyze_module": ["get_signature", "getattr", "infer_category", "logging.error", "compute_file_metadata", "methods.append", "CallVisitor", "sorted", "ast.parse", "open", "source.splitlines", "functions.append", "hashlib.sha256", "classes.append", "ast.get_docstring", "extract_comments", "f.read", "str", "extract_dependencies", "isinstance", "visitor.visit"], "build_toc_and_modules": ["logging.info", "os.walk", "modules.append", "exclude_patterns.extend", "file_path.relative_to", "load_gitignore", "analyze_module", "len", "any", "dir_path.relative_to", "toc.append", "fnmatch.fnmatch", "Path", "sum", "rel_dir.split", "logging.debug", "str"], "generate_json": ["load_goals", "build_toc_and_modules", "len"], "main": ["json.dump", "logging.warning", "parser.add_argument", "logging.info", "language_patterns.get", "argparse.ArgumentParser", "logging.error", "include_patterns.extend", "open", "parser.parse_args", "generate_json"]}, "dependencies": ["Any", "Dict", "List", "Optional", "Path", "argparse", "ast", "datetime", "fnmatch", "hashlib", "json", "logging", "os", "pathlib", "subprocess", "tempfile", "tokenize", "typing"], "hash": "c684eccee9a5725ed2f3624b407328c9bf95d3b9fe2c81dd11ac442eb9320004"}, {"module_id": "temp_workfiles.unsorted_mess.dump.generate_docs (1)", "path": "temp_workfiles/unsorted_mess/dump/generate_docs (1).py", "category": "core", "module_doc": "", "functions": [{"name": "compute_hash", "docstring": "Compute SHA-256 hash of content.", "line_range": [17, 19], "parameters": ["content"], "decorators": []}, {"name": "load_struct_json", "docstring": "Load struct.json for metadata.", "line_range": [21, 27], "parameters": [], "decorators": []}, {"name": "load_llmstruct_toml", "docstring": "Load llmstruct.toml for configuration.", "line_range": [29, 35], "parameters": [], "decorators": []}, {"name": "generate_docs", "docstring": "Generate all documentation files with idempotency.", "line_range": [37, 626], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"compute_hash": ["content.encode", "hashlib.sha256"], "load_struct_json": ["struct_path.exists", "Path", "json.load", "open"], "load_llmstruct_toml": ["toml_path.exists", "toml.load", "Path", "open"], "generate_docs": ["logger.info", "chr", "compute_hash", "json.dumps", "load_struct_json", "file_path.exists", "Path", "f.write", "project_name.lower", "datetime.utcnow", "load_llmstruct_toml", "open", "any", "metadata.get", "toml_data.get", "f.read", "str", "struct_data.get", "doc_files.items"]}, "dependencies": ["Path", "datetime", "hashlib", "json", "logging", "os", "pathlib", "toml"], "hash": "a042662093ed4e29ac059126f2e8ed9fac4f3c63bcc17f657e5eb5643d5ca453"}, {"module_id": "temp_workfiles.unsorted_mess.dump.generate_ru_docs", "path": "temp_workfiles/unsorted_mess/dump/generate_ru_docs.py", "category": "core", "module_doc": "", "functions": [], "classes": [], "callgraph": {}, "dependencies": ["Path", "os", "pathlib"], "hash": "1074e7bf11e1c41bb9d00c7b85c8667477225258a2465cb305f3fe060e77d049"}, {"module_id": "temp_workfiles.unsorted_mess.dump.collector", "path": "temp_workfiles/unsorted_mess/dump/collector.py", "category": "core", "module_doc": "", "functions": [{"name": "load_gitignore", "docstring": "", "line_range": [5, 9], "parameters": [], "decorators": []}, {"name": "collect_project", "docstring": "", "line_range": [11, 25], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"load_gitignore": ["Path", "gitignore_parser.parse_gitignore", "gitignore_path.exists"], "collect_project": ["gitignore", "json.dump", "load_gitignore", "doc_files.items", "any", "file_path.is_file", "Path", "root_dir.rglob", "open", "f.read", "str"]}, "dependencies": ["Path", "gitignore_parser", "json", "pathlib"], "hash": "08a1889cebe8f7ef48428a6d74b5c24e9934ba943e52eec80b98f7ddc5b27f4e"}, {"module_id": "temp_workfiles.unsorted_mess.dump.collect_docs (1)", "path": "temp_workfiles/unsorted_mess/dump/collect_docs (1).py", "category": "core", "module_doc": "", "functions": [{"name": "load_gitignore", "docstring": "Load patterns from .gitignore.", "line_range": [6, 16], "parameters": ["root_dir"], "decorators": []}, {"name": "should_ignore", "docstring": "Check if path should be ignored based on directories or .gitignore.", "line_range": [18, 32], "parameters": ["path", "root_dir", "ignore_dirs", "gitignore_patterns"], "decorators": []}, {"name": "collect_docs", "docstring": "Collect all documentation files into a JSON file.", "line_range": [34, 65], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"load_gitignore": ["line.startswith", "gitignore_path.exists", "open", "line.strip", "patterns.append"], "should_ignore": ["rel_path.startswith", "path.relative_to", "fnmatch", "str"], "collect_docs": ["json.dump", "print", "load_gitignore", "path.is_file", "should_ignore", "Path", "root_dir.rglob", "open", "str", "path.relative_to", "f.read"]}, "dependencies": ["Path", "fnmatch", "json", "os", "pathlib"], "hash": "544045bbc298375dd9da40817407358945a91c66a9e83145b9575efe43155f29"}, {"module_id": "temp_workfiles.unsorted_mess.dump.collect_docs", "path": "temp_workfiles/unsorted_mess/dump/collect_docs.py", "category": "core", "module_doc": "", "functions": [{"name": "collect_docs", "docstring": "Collect all documentation files into a single text file.", "line_range": [4, 52], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"collect_docs": ["print", "collected.append", "dir_path.exists", "file_path.is_file", "file_path.exists", "Path", "f.write", "dir_path.rglob", "open", "f.read"]}, "dependencies": ["Path", "os", "pathlib"], "hash": "d3bf2ae6eea9fc46bc5e68a3354c0f9f654fb78dce3c4f64648f055986c19600"}, {"module_id": "temp_workfiles.unsorted_mess.dump.refactored_structure", "path": "temp_workfiles/unsorted_mess/dump/refactored_structure.py", "category": "core", "module_doc": "", "functions": [{"name": "main", "docstring": "", "line_range": [20, 30], "parameters": [], "decorators": []}, {"name": "attach_to_llm_request", "docstring": "", "line_range": [33, 36], "parameters": ["json_path", "prompt"], "decorators": []}, {"name": "parse_module", "docstring": "", "line_range": [3, 5], "parameters": ["self", "filepath", "root_dir", "include_ranges", "include_hashes"], "decorators": []}, {"name": "parse_module", "docstring": "", "line_range": [9, 11], "parameters": ["self", "filepath", "root_dir", "include_ranges", "include_hashes"], "decorators": []}, {"name": "generate", "docstring": "", "line_range": [15, 17], "parameters": ["self", "modules", "metadata"], "decorators": []}], "classes": [{"name": "PythonParser", "docstring": "", "line_range": [2, 5], "methods": [{"name": "parse_module", "docstring": "", "line_range": [3, 5], "parameters": ["self", "filepath", "root_dir", "include_ranges", "include_hashes"]}], "bases": []}, {"name": "JavaScriptParser", "docstring": "", "line_range": [8, 11], "methods": [{"name": "parse_module", "docstring": "", "line_range": [9, 11], "parameters": ["self", "filepath", "root_dir", "include_ranges", "include_hashes"]}], "bases": []}, {"name": "JSONGenerator", "docstring": "", "line_range": [14, 17], "methods": [{"name": "generate", "docstring": "", "line_range": [15, 17], "parameters": ["self", "modules", "metadata"]}], "bases": []}], "callgraph": {"parse_module": [], "generate": [], "main": ["parser.parse_module", "json.dump", "PythonParser", "parser.add_argument", "argparse.ArgumentParser", "JSONGenerator", "generator.generate", "JavaScriptParser", "open", "parser.parse_args"], "attach_to_llm_request": ["json.dumps", "json.load", "open"]}, "dependencies": [], "hash": "0442a6d8e7644a55f2e622bea25560760098d3c0184cbb4a540364b44f99c3a7"}, {"module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_parsers_python_parser (1)", "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_parsers_python_parser (1).py", "category": "core", "module_doc": "", "functions": [{"name": "infer_category", "docstring": "Infer module category based on path.", "line_range": [11, 22], "parameters": ["path"], "decorators": []}, {"name": "analyze_module", "docstring": "Analyze a Python module to extract functions, classes, and call graph.", "line_range": [38, 123], "parameters": ["file_path", "root_dir", "include_ranges", "include_hashes"], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [26, 28], "parameters": ["self"], "decorators": []}, {"name": "visit_Call", "docstring": "", "line_range": [30, 36], "parameters": ["self", "node"], "decorators": []}], "classes": [{"name": "CallVisitor", "docstring": "AST visitor to collect function and module calls.", "line_range": [24, 36], "methods": [{"name": "__init__", "docstring": "", "line_range": [26, 28], "parameters": ["self"]}, {"name": "visit_Call", "docstring": "", "line_range": [30, 36], "parameters": ["self", "node"]}], "bases": ["ast.NodeVisitor"]}], "callgraph": {"infer_category": ["path.lower"], "__init__": ["set"], "visit_Call": ["self.generic_visit", "isinstance"], "analyze_module": ["infer_category", "logging.error", "Path", "methods.append", "CallVisitor", "sorted", "len", "ast.parse", "open", "functions.append", "hashlib.sha256", "dependencies.update", "classes.append", "dependencies.add", "ast.unparse", "ast.get_docstring", "code.splitlines", "code.encode", "relative_path.encode", "f.read", "str", "ast.walk", "os.stat", "set", "datetime.fromtimestamp", "isinstance", "visitor.visit"]}, "dependencies": ["Any", "Dict", "List", "Optional", "Path", "Set", "ast", "datetime", "hashlib", "logging", "os", "pathlib", "typing"], "hash": "c0ab3443a33551c1ddfc7ce19a8dbb5768c8e46527569f6f55e612beb47148a6"}, {"module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_templates___init__", "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_templates___init__.py", "category": "core", "module_doc": "Templates for LLM prompts used in LLMStruct integration.", "functions": [], "classes": [], "callgraph": {}, "dependencies": [], "hash": "2e4f47b42d3867bec6d74f86f2d7fd21d89de1f941f55af0d9b257b0972add67"}, {"module_id": "temp_workfiles.unsorted_mess.dump.test_end_to_end (1)", "path": "temp_workfiles/unsorted_mess/dump/test_end_to_end (1).py", "category": "test", "module_doc": "", "functions": [{"name": "test_end_to_end", "docstring": "", "line_range": [7, 68], "parameters": ["tmp_path"], "decorators": []}], "classes": [], "callgraph": {"test_end_to_end": ["main_py.write_text", "validate_struct_json", "len", "any", "open", "project_dir.mkdir", "tasks_json.write_text", "utils_py.write_text", "main", "json.load", "next", "str", "output_json.exists"]}, "dependencies": ["json", "llmstruct.cli", "llmstruct.validators.json_validator", "main", "os", "pytest", "sys", "validate_struct_json"], "hash": "24553d26ed0bbc370ec1836d7b8dcb41f7f9c353960fea022160fab29d33a176"}, {"module_id": "temp_workfiles.unsorted_mess.dump.generate_docs", "path": "temp_workfiles/unsorted_mess/dump/generate_docs.py", "category": "core", "module_doc": "", "functions": [{"name": "get_content_hash", "docstring": "Calculate hash of content for idempotency.", "line_range": [5, 7], "parameters": ["content"], "decorators": []}, {"name": "create_file", "docstring": "Create or update file if content changed.", "line_range": [9, 24], "parameters": ["path", "content"], "decorators": []}, {"name": "generate_docs_tree", "docstring": "Generate Di\u00e1taxis-compliant documentation for llmstruct.", "line_range": [26, 410], "parameters": [], "decorators": []}, {"name": "print_docs_tree", "docstring": "Print documentation tree.", "line_range": [412, 421], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"get_content_hash": ["content.encode", "hashlib.sha256"], "create_file": ["get_content_hash", "content.strip", "print", "f.write", "open", "path.exists", "f.read"], "generate_docs_tree": ["create_file", "Path"], "print_docs_tree": ["root.replace", "root.startswith", "os.walk", "print"]}, "dependencies": ["Path", "hashlib", "os", "pathlib"], "hash": "e8255112b3a3b0bc96ea1608fea08491b70a396bd2c0c507af9539b02e10859d"}, {"module_id": "temp_workfiles.unsorted_mess.dump.examples_python_project_main", "path": "temp_workfiles/unsorted_mess/dump/examples_python_project_main.py", "category": "core", "module_doc": "Main module for the sample project.", "functions": [{"name": "main", "docstring": "Run the program.", "line_range": [5, 8], "parameters": [], "decorators": []}, {"name": "run", "docstring": "Execute the app.", "line_range": [12, 14], "parameters": ["self"], "decorators": []}], "classes": [{"name": "App", "docstring": "Application class.", "line_range": [10, 14], "methods": [{"name": "run", "docstring": "Execute the app.", "line_range": [12, 14], "parameters": ["self"]}], "bases": []}], "callgraph": {"main": ["utils.helper", "print"], "run": ["utils.log"]}, "dependencies": ["utils"], "hash": "fab60f7032e1e05acd0ad22fa6c62e9807380837f7dcdb9281ec4363af517d23"}, {"module_id": "temp_workfiles.unsorted_mess.dump.filter_llmstruct_json", "path": "temp_workfiles/unsorted_mess/dump/filter_llmstruct_json.py", "category": "core", "module_doc": "", "functions": [{"name": "load_gitignore", "docstring": "Load .gitignore patterns.", "line_range": [7, 16], "parameters": ["gitignore_path"], "decorators": []}, {"name": "filter_json", "docstring": "Filter struct.json to exclude .gitignore paths and optionally tests.", "line_range": [18, 52], "parameters": ["data", "gitignore_patterns", "include_tests"], "decorators": []}, {"name": "main", "docstring": "", "line_range": [54, 79], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"load_gitignore": ["line.strip", "line.startswith", "patterns.append", "open"], "filter_json": ["len", "any", "fnmatch.fnmatch", "module.get", "data.get"], "main": ["json.dump", "logging.info", "parser.add_argument", "argparse.ArgumentParser", "logging.basicConfig", "load_gitignore", "logging.error", "open", "parser.parse_args", "json.load", "str", "filter_json"]}, "dependencies": ["argparse", "fnmatch", "json", "logging", "os"], "hash": "624fb8445e89313620389c69ead5749c0a27b6a853c362cb459d761a766ea86b"}, {"module_id": "temp_workfiles.unsorted_mess.dump.generate_ru_internal_docs", "path": "temp_workfiles/unsorted_mess/dump/generate_ru_internal_docs.py", "category": "core", "module_doc": "", "functions": [], "classes": [], "callgraph": {}, "dependencies": ["Path", "os", "pathlib"], "hash": "54ceb0dc82fd567ecc622f6d080cd832464b135b7554fe7ecf69fe888469e6c1"}, {"module_id": "temp_workfiles.unsorted_mess.dump.llm_client", "path": "temp_workfiles/unsorted_mess/dump/llm_client.py", "category": "core", "module_doc": "", "functions": [{"name": "__init__", "docstring": "Initialize LLMClient with optional Ollama host.", "line_range": [30, 36], "parameters": ["self", "ollama_host"], "decorators": []}, {"name": "query", "docstring": "Query LLMs with prompt, context, and optional model.", "line_range": [38, 86], "parameters": ["self", "prompt", "context_path", "mode", "model", "artifact_ids"], "decorators": []}, {"name": "_query_grok", "docstring": "Query Grok API.", "line_range": [88, 111], "parameters": ["self", "prompt"], "decorators": []}, {"name": "_query_anthropic", "docstring": "Query Anthropic API.", "line_range": [113, 137], "parameters": ["self", "prompt"], "decorators": []}, {"name": "_query_ollama", "docstring": "Query Ollama API with specified model.", "line_range": [139, 156], "parameters": ["self", "prompt", "model"], "decorators": []}, {"name": "_query_hybrid", "docstring": "Query multiple LLMs and combine results.", "line_range": [158, 168], "parameters": ["self", "prompt", "model"], "decorators": []}], "classes": [{"name": "LLMClient", "docstring": "", "line_range": [29, 168], "methods": [{"name": "__init__", "docstring": "Initialize LLMClient with optional Ollama host.", "line_range": [30, 36], "parameters": ["self", "ollama_host"]}, {"name": "query", "docstring": "Query LLMs with prompt, context, and optional model.", "line_range": [38, 86], "parameters": ["self", "prompt", "context_path", "mode", "model", "artifact_ids"]}, {"name": "_query_grok", "docstring": "Query Grok API.", "line_range": [88, 111], "parameters": ["self", "prompt"]}, {"name": "_query_anthropic", "docstring": "Query Anthropic API.", "line_range": [113, 137], "parameters": ["self", "prompt"]}, {"name": "_query_ollama", "docstring": "Query Ollama API with specified model.", "line_range": [139, 156], "parameters": ["self", "prompt", "model"]}, {"name": "_query_hybrid", "docstring": "Query multiple LLMs and combine results.", "line_range": [158, 168], "parameters": ["self", "prompt", "model"]}], "bases": []}], "callgraph": {"__init__": ["logging.info", "os.getenv", "int"], "query": ["logging.info", "logging.warning", "self._query_anthropic", "json.dumps", "self._query_hybrid", "logging.error", "self._query_grok", "Path", "self._query_ollama", "asyncio.sleep", "range", "json.load"], "_query_grok": ["logging.info", "session.post", "response.json", "logging.error", "result.get", "aiohttp.ClientSession"], "_query_anthropic": ["logging.info", "session.post", "response.json", "logging.error", "result.get", "aiohttp.ClientSession"], "_query_ollama": ["logging.info", "session.post", "response.json", "logging.error", "result.get", "aiohttp.ClientSession", "logging.debug"], "_query_hybrid": ["logging.info", "self._query_anthropic", "len", "asyncio.gather", "self._query_grok", "isinstance", "self._query_ollama"]}, "dependencies": ["List", "Optional", "Path", "aiohttp", "asyncio", "dotenv", "json", "load_dotenv", "logging", "os", "pathlib", "requests", "typing", "urljoin", "urllib.parse"], "hash": "e72334b04520134cdd3361b207dee9ab3200ccb599568d9178e1c55caa1d1c75"}, {"module_id": "temp_workfiles.unsorted_mess.dump.llm_client (3)", "path": "temp_workfiles/unsorted_mess/dump/llm_client (3).py", "category": "core", "module_doc": "", "functions": [{"name": "__init__", "docstring": "Initialize LLMClient with optional Ollama host.", "line_range": [25, 30], "parameters": ["self", "ollama_host"], "decorators": []}, {"name": "query", "docstring": "Query LLMs with prompt, context, and optional model.", "line_range": [32, 80], "parameters": ["self", "prompt", "context_path", "mode", "model", "artifact_ids"], "decorators": []}, {"name": "_query_grok", "docstring": "Query Grok API.", "line_range": [82, 105], "parameters": ["self", "prompt"], "decorators": []}, {"name": "_query_anthropic", "docstring": "Query Anthropic API.", "line_range": [107, 131], "parameters": ["self", "prompt"], "decorators": []}, {"name": "_query_ollama", "docstring": "Query Ollama API with specified model.", "line_range": [133, 149], "parameters": ["self", "prompt", "model"], "decorators": []}, {"name": "_query_hybrid", "docstring": "Query multiple LLMs and combine results.", "line_range": [151, 161], "parameters": ["self", "prompt", "model"], "decorators": []}], "classes": [{"name": "LLMClient", "docstring": "", "line_range": [24, 161], "methods": [{"name": "__init__", "docstring": "Initialize LLMClient with optional Ollama host.", "line_range": [25, 30], "parameters": ["self", "ollama_host"]}, {"name": "query", "docstring": "Query LLMs with prompt, context, and optional model.", "line_range": [32, 80], "parameters": ["self", "prompt", "context_path", "mode", "model", "artifact_ids"]}, {"name": "_query_grok", "docstring": "Query Grok API.", "line_range": [82, 105], "parameters": ["self", "prompt"]}, {"name": "_query_anthropic", "docstring": "Query Anthropic API.", "line_range": [107, 131], "parameters": ["self", "prompt"]}, {"name": "_query_ollama", "docstring": "Query Ollama API with specified model.", "line_range": [133, 149], "parameters": ["self", "prompt", "model"]}, {"name": "_query_hybrid", "docstring": "Query multiple LLMs and combine results.", "line_range": [151, 161], "parameters": ["self", "prompt", "model"]}], "bases": []}], "callgraph": {"__init__": ["os.getenv", "int"], "query": ["logging.info", "logging.warning", "self._query_anthropic", "json.dumps", "self._query_hybrid", "logging.error", "self._query_grok", "Path", "self._query_ollama", "asyncio.sleep", "range", "json.load"], "_query_grok": ["logging.info", "session.post", "response.json", "logging.error", "result.get", "aiohttp.ClientSession"], "_query_anthropic": ["logging.info", "session.post", "response.json", "logging.error", "result.get", "aiohttp.ClientSession"], "_query_ollama": ["logging.info", "session.post", "response.json", "logging.error", "result.get", "aiohttp.ClientSession", "urljoin"], "_query_hybrid": ["logging.info", "self._query_anthropic", "len", "asyncio.gather", "self._query_grok", "isinstance", "self._query_ollama"]}, "dependencies": ["List", "Optional", "Path", "aiohttp", "asyncio", "dotenv", "json", "load_dotenv", "logging", "os", "pathlib", "requests", "typing", "urljoin", "urllib.parse"], "hash": "c9345a867db01b5e49482990bd3ad1945e0d9ee72ef0ebc70959b4ad031d4a83"}, {"module_id": "temp_workfiles.unsorted_mess.dump.tests___init__", "path": "temp_workfiles/unsorted_mess/dump/tests___init__.py", "category": "core", "module_doc": "Test suite for LLMStruct, covering parsers, generators, validators, and integration.", "functions": [], "classes": [], "callgraph": {}, "dependencies": [], "hash": "3675d6409c7b426c52e2404da2491a2c9243eaa4a65d877a7349c268d55b1842"}, {"module_id": "temp_workfiles.unsorted_mess.dump.check_docs", "path": "temp_workfiles/unsorted_mess/dump/check_docs.py", "category": "core", "module_doc": "", "functions": [{"name": "load_struct", "docstring": "Load struct.json.", "line_range": [5, 8], "parameters": [], "decorators": []}, {"name": "check_docs", "docstring": "Check docs/ against struct.json and dialogue state.", "line_range": [10, 42], "parameters": [], "decorators": []}, {"name": "main", "docstring": "Run doc check and print report.", "line_range": [44, 52], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"load_struct": ["json.load", "open"], "check_docs": ["os.walk", "load_struct", "content.lower", "Path", "open", "struct.get", "f.read", "issues.append"], "main": ["print", "check_docs"]}, "dependencies": ["Path", "json", "os", "pathlib"], "hash": "94bbce8d41be0dde2df6722554db4525b64ba266eef3e9a7c4e1b9c157b58861"}, {"module_id": "temp_workfiles.unsorted_mess.dump.javascript_parser", "path": "temp_workfiles/unsorted_mess/dump/javascript_parser.py", "category": "core", "module_doc": "", "functions": [{"name": "__init__", "docstring": "", "line_range": [8, 12], "parameters": ["self"], "decorators": []}, {"name": "file_hash", "docstring": "", "line_range": [14, 19], "parameters": ["self", "filepath"], "decorators": []}, {"name": "compute_file_metadata", "docstring": "", "line_range": [21, 35], "parameters": ["self", "filepath", "include_hashes"], "decorators": []}, {"name": "parse_module", "docstring": "", "line_range": [37, 89], "parameters": ["self", "filepath", "root_dir", "include_ranges", "include_hashes"], "decorators": []}, {"name": "extract_signature", "docstring": "", "line_range": [61, 63], "parameters": ["node"], "decorators": []}], "classes": [{"name": "JavaScriptParser", "docstring": "", "line_range": [7, 89], "methods": [{"name": "__init__", "docstring": "", "line_range": [8, 12], "parameters": ["self"]}, {"name": "file_hash", "docstring": "", "line_range": [14, 19], "parameters": ["self", "filepath"]}, {"name": "compute_file_metadata", "docstring": "", "line_range": [21, 35], "parameters": ["self", "filepath", "include_hashes"]}, {"name": "parse_module", "docstring": "", "line_range": [37, 89], "parameters": ["self", "filepath", "root_dir", "include_ranges", "include_hashes"]}], "bases": []}], "callgraph": {"__init__": ["set"], "file_hash": ["hashlib.sha256", "f.read", "open"], "compute_file_metadata": ["self.file_hash", "sum", "os.stat", "open"], "parse_module": ["self.compute_file_metadata", "esprima.parseModule", "open", "f.read", "str"], "extract_signature": ["hasattr"]}, "dependencies": ["Any", "Dict", "List", "datetime", "esprima", "hashlib", "os", "typing"], "hash": "6a036a610c79e41888a614ff882d1ad721e137075f2580972ef883a27f3d453c"}, {"module_id": "temp_workfiles.unsorted_mess.dump.self_run", "path": "temp_workfiles/unsorted_mess/dump/self_run.py", "category": "core", "module_doc": "", "functions": [{"name": "filter_struct", "docstring": "Filter struct.json based on prompt keywords.", "line_range": [16, 25], "parameters": ["struct", "prompt"], "decorators": []}, {"name": "attach_to_llm_request", "docstring": "Attach filtered struct.json to LLM prompt.", "line_range": [27, 51], "parameters": ["context_path", "prompt"], "decorators": []}], "classes": [], "callgraph": {"filter_struct": ["prompt.lower", "struct.get", "any", "module.get"], "attach_to_llm_request": ["filter_struct", "json.dumps", "logging.error", "context_file.exists", "Path", "open", "prompt.lower", "json.load", "filter_json"]}, "dependencies": ["Any", "Dict", "List", "Path", "filter_json", "json", "json_selector", "logging", "pathlib", "typing"], "hash": "af8535d837b1269ec9ff1b3b271f55199ad073d5e517e618f506407376756553"}, {"module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_generators_json_generator (1)", "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_generators_json_generator (1).py", "category": "core", "module_doc": "", "functions": [{"name": "get_folder_structure", "docstring": "Capture directory and file structure, respecting .gitignore and patterns.", "line_range": [12, 32], "parameters": ["root_dir", "gitignore_patterns", "include_patterns", "exclude_patterns"], "decorators": []}, {"name": "build_toc_and_modules", "docstring": "Build TOC and modules with robust .gitignore filtering using pathlib.", "line_range": [34, 53], "parameters": ["root_dir", "include_patterns", "exclude_patterns", "gitignore_patterns", "include_ranges", "include_hashes"], "decorators": []}, {"name": "generate_json", "docstring": "Generate JSON structure for project.", "line_range": [55, 93], "parameters": ["root_dir", "include_patterns", "exclude_patterns", "gitignore_patterns", "include_ranges", "include_hashes", "goals"], "decorators": []}], "classes": [], "callgraph": {"get_folder_structure": ["file_path.match", "os.walk", "sorted", "file_path.relative_to", "structure.append", "any", "Path", "str"], "build_toc_and_modules": ["modules.append", "f.match", "len", "any", "Path", "python_parser.analyze_module", "toc.append", "str"], "generate_json": ["set", "list", "len", "build_toc_and_modules", "get_folder_structure", "Path", "sum"]}, "dependencies": ["Any", "Dict", "List", "Optional", "Path", "datetime", "json", "logging", "os", "parsers", "pathlib", "python_parser", "typing"], "hash": "9f371070eaa9ab67cb856f703de10dcd04e2b37f7339e4a862c536e172f833af"}, {"module_id": "temp_workfiles.unsorted_mess.dump.test_end_to_end", "path": "temp_workfiles/unsorted_mess/dump/test_end_to_end.py", "category": "test", "module_doc": "", "functions": [{"name": "test_end_to_end", "docstring": "", "line_range": [7, 35], "parameters": ["tmp_path"], "decorators": []}], "classes": [], "callgraph": {"test_end_to_end": ["main_py.write_text", "validate_struct_json", "project_dir.mkdir", "open", "main", "json.load", "str", "output_json.exists"]}, "dependencies": ["json", "llmstruct.cli", "llmstruct.validators.json_validator", "main", "os", "pytest", "sys", "validate_struct_json"], "hash": "806f59484282d9ae6bf9147649718dba0e8ad0257a82143fb1529b321b96d9e9"}, {"module_id": "temp_workfiles.unsorted_mess.dump.python_parser", "path": "temp_workfiles/unsorted_mess/dump/python_parser.py", "category": "core", "module_doc": "", "functions": [{"name": "__init__", "docstring": "", "line_range": [8, 9], "parameters": ["self"], "decorators": []}, {"name": "visit_Call", "docstring": "", "line_range": [11, 17], "parameters": ["self", "node"], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [20, 24], "parameters": ["self"], "decorators": []}, {"name": "file_hash", "docstring": "", "line_range": [26, 31], "parameters": ["self", "filepath"], "decorators": []}, {"name": "compute_file_metadata", "docstring": "", "line_range": [33, 47], "parameters": ["self", "filepath", "include_hashes"], "decorators": []}, {"name": "parse_module", "docstring": "", "line_range": [49, 132], "parameters": ["self", "filepath", "root_dir", "include_ranges", "include_hashes"], "decorators": []}], "classes": [{"name": "CallVisitor", "docstring": "", "line_range": [7, 17], "methods": [{"name": "__init__", "docstring": "", "line_range": [8, 9], "parameters": ["self"]}, {"name": "visit_Call", "docstring": "", "line_range": [11, 17], "parameters": ["self", "node"]}], "bases": ["ast.NodeVisitor"]}, {"name": "PythonParser", "docstring": "", "line_range": [19, 132], "methods": [{"name": "__init__", "docstring": "", "line_range": [20, 24], "parameters": ["self"]}, {"name": "file_hash", "docstring": "", "line_range": [26, 31], "parameters": ["self", "filepath"]}, {"name": "compute_file_metadata", "docstring": "", "line_range": [33, 47], "parameters": ["self", "filepath", "include_hashes"]}, {"name": "parse_module", "docstring": "", "line_range": [49, 132], "parameters": ["self", "filepath", "root_dir", "include_ranges", "include_hashes"]}], "bases": []}], "callgraph": {"__init__": ["set"], "visit_Call": ["self.generic_visit", "isinstance"], "file_hash": ["hashlib.sha256", "f.read", "open"], "compute_file_metadata": ["self.file_hash", "sum", "os.stat", "open"], "parse_module": ["self.compute_file_metadata", "list", "methods.append", "CallVisitor", "sorted", "dependencies.append", "ast.parse", "open", "functions.append", "classes.append", "ast.get_docstring", "dependencies.extend", "f.read", "str", "ast.walk", "set", "call.split", "isinstance", "visitor.visit"]}, "dependencies": ["Any", "Dict", "List", "ast", "datetime", "hashlib", "os", "typing"], "hash": "a0ea16a3ad6d7a1b62a142bd1e81fa4c110dc895778dfc47776f47788ecc459f"}, {"module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_parsers___init__", "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_parsers___init__.py", "category": "core", "module_doc": "Language-specific parsers for extracting code structure data for LLMStruct JSON.", "functions": [], "classes": [], "callgraph": {}, "dependencies": ["JavaScriptParser", "PythonParser", "javascript_parser", "python_parser"], "hash": "04af4d5ffe5294bc00ed6f88b5f2f9ae9e63240769974e608a61bd9b0a11878e"}, {"module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_cli (1)", "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_cli (1).py", "category": "core", "module_doc": "", "functions": [{"name": "load_gitignore", "docstring": "Load and normalize patterns from .gitignore.", "line_range": [12, 22], "parameters": ["root_dir"], "decorators": []}, {"name": "load_goals", "docstring": "Load project goals from pyproject.toml or default.", "line_range": [24, 41], "parameters": ["root_dir"], "decorators": []}, {"name": "main", "docstring": "Command-line interface for LLMstruct.", "line_range": [43, 74], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"load_gitignore": ["line.startswith", "gitignore_path.open", "gitignore_path.exists", "logging.error", "Path", "line.strip"], "load_goals": ["config.get", "pyproject_path.exists", "logging.error", "pyproject_path.open", "Path", "toml.load"], "main": ["json.dump", "load_goals", "parser.add_argument", "logging.info", "argparse.ArgumentParser", "load_gitignore", "logging.error", "open", "parser.parse_args", "generate_json"]}, "dependencies": ["List", "Optional", "Path", "argparse", "generate_json", "generators.json_generator", "json", "logging", "os", "pathlib", "toml", "typing"], "hash": "f7e56301b411c981777ab2fc57294c582e0ec962ec7ee9f2a5456987077c1f04"}, {"module_id": "temp_workfiles.unsorted_mess.dump.test_efficiency_proxybypass", "path": "temp_workfiles/unsorted_mess/dump/test_efficiency_proxybypass.py", "category": "test", "module_doc": "", "functions": [{"name": "is_local_address", "docstring": "", "line_range": [12, 19], "parameters": ["url"], "decorators": []}, {"name": "get_system_metrics", "docstring": "", "line_range": [21, 25], "parameters": [], "decorators": []}, {"name": "setup_proxy", "docstring": "", "line_range": [27, 36], "parameters": ["proxy_url"], "decorators": []}, {"name": "run_llm_request", "docstring": "", "line_range": [38, 55], "parameters": ["api_url", "payload", "proxy"], "decorators": []}, {"name": "test_with_llmstruct", "docstring": "", "line_range": [57, 64], "parameters": ["api_url", "project_path", "proxy"], "decorators": []}, {"name": "test_without_llmstruct", "docstring": "", "line_range": [66, 72], "parameters": ["api_url", "project_path", "proxy"], "decorators": []}, {"name": "evaluate_accuracy", "docstring": "", "line_range": [74, 76], "parameters": ["response_text", "expected"], "decorators": []}, {"name": "main", "docstring": "", "line_range": [78, 100], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"is_local_address": ["urlparse", "ipaddress.ip_address"], "get_system_metrics": ["psutil.virtual_memory", "psutil.cpu_percent"], "setup_proxy": ["os.getenv"], "run_llm_request": ["get_system_metrics", "len", "is_local_address", "session.post", "response.json", "time.perf_counter", "requests.Session"], "test_with_llmstruct": ["f.read", "Path", "open", "struct_path.exists", "subprocess.run", "run_llm_request", "str"], "test_without_llmstruct": ["run_llm_request", "Path", "f.read", "open"], "evaluate_accuracy": ["len", "response_text.lower", "sum"], "main": ["json.dump", "print", "parser.add_argument", "argparse.ArgumentParser", "evaluate_accuracy", "test_without_llmstruct", "range", "test_with_llmstruct", "open", "setup_proxy", "parser.parse_args"]}, "dependencies": ["Path", "argparse", "ipaddress", "json", "os", "pathlib", "psutil", "requests", "subprocess", "time", "urllib.parse", "urlparse"], "hash": "82f3be0fa8d454046398640df82abc2c23b1f21606cacc8568a09a9d3a64cae1"}, {"module_id": "temp_workfiles.unsorted_mess.dump.scripts_setup_github", "path": "temp_workfiles/unsorted_mess/dump/scripts_setup_github.py", "category": "core", "module_doc": "", "functions": [{"name": "load_json", "docstring": "", "line_range": [7, 9], "parameters": ["file_path"], "decorators": []}, {"name": "create_issue", "docstring": "", "line_range": [11, 19], "parameters": ["repo", "token", "task"], "decorators": []}, {"name": "setup_ci_cd", "docstring": "", "line_range": [21, 40], "parameters": ["repo_dir"], "decorators": []}, {"name": "setup_templates", "docstring": "", "line_range": [42, 64], "parameters": ["repo_dir"], "decorators": []}, {"name": "update_readme", "docstring": "", "line_range": [66, 78], "parameters": ["repo_dir", "user_guide_path"], "decorators": []}, {"name": "main", "docstring": "", "line_range": [80, 106], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"load_json": ["json.load", "open"], "create_issue": ["task.get", "requests.post", "response.json"], "setup_ci_cd": ["workflow_dir.mkdir", "Path", "ci_yml.write_text"], "setup_templates": ["template_dir.mkdir", "Path", "issue_template.write_text", "pr_template.write_text"], "update_readme": ["readme.write_text", "Path"], "main": ["setup_templates", "print", "parser.add_argument", "setup_ci_cd", "argparse.ArgumentParser", "task.get", "issue.get", "create_issue", "load_json", "parser.parse_args", "update_readme"]}, "dependencies": ["Path", "argparse", "json", "os", "pathlib", "requests"], "hash": "98626533435f0a01a61483851be1b02b9bcb0d7b4d9753dd64331ec551bc9bb1"}, {"module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct___init__ (1)", "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct___init__ (1).py", "category": "core", "module_doc": "", "functions": [], "classes": [], "callgraph": {}, "dependencies": [], "hash": "2e73db9191095d6794cba3b47e26e821278e1ad004e3d56848c2b31583ac28b6"}, {"module_id": "temp_workfiles.unsorted_mess.dump.cli", "path": "temp_workfiles/unsorted_mess/dump/cli.py", "category": "core", "module_doc": "", "functions": [{"name": "load_gitignore", "docstring": "Load and normalize patterns from .gitignore.", "line_range": [25, 35], "parameters": ["root_dir"], "decorators": []}, {"name": "load_config", "docstring": "Load settings from llmstruct.toml or return empty dict.", "line_range": [37, 46], "parameters": ["root_dir"], "decorators": []}, {"name": "read_file_content", "docstring": "Read content of a file if it exists and is a text file.", "line_range": [48, 57], "parameters": ["file_path"], "decorators": []}, {"name": "write_to_file", "docstring": "Write content to a file in base_dir (default /tmp) and return the path.", "line_range": [59, 73], "parameters": ["content", "filename", "base_dir"], "decorators": []}, {"name": "parse_files_from_response", "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).", "line_range": [75, 82], "parameters": ["response"], "decorators": []}, {"name": "interactive", "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.", "line_range": [84, 195], "parameters": ["args"], "decorators": []}, {"name": "parse", "docstring": "Parse codebase and generate struct.json.", "line_range": [197, 232], "parameters": ["args"], "decorators": []}, {"name": "query", "docstring": "Query LLMs with prompt and context.", "line_range": [234, 252], "parameters": ["args"], "decorators": []}, {"name": "context", "docstring": "Generate context.json from input JSON.", "line_range": [254, 256], "parameters": ["args"], "decorators": []}, {"name": "dogfood", "docstring": "Run dogfooding analysis.", "line_range": [258, 260], "parameters": ["args"], "decorators": []}, {"name": "review", "docstring": "Review codebase with LLM.", "line_range": [262, 264], "parameters": ["args"], "decorators": []}, {"name": "main", "docstring": "Command-line interface for LLMstruct.", "line_range": [266, 329], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"load_gitignore": ["line.startswith", "gitignore_path.open", "gitignore_path.exists", "logging.error", "Path", "line.strip"], "load_config": ["config_path.open", "logging.error", "Path", "toml.load", "config_path.exists"], "read_file_content": ["path.open", "path.is_file", "logging.error", "Path", "f.read"], "write_to_file": ["logging.warning", "logging.info", "base_path.mkdir", "file_path.exists", "logging.error", "Path", "f.write", "file_path.open", "str"], "parse_files_from_response": ["filename.strip", "files.append", "re.findall", "content.strip"], "interactive": ["logging.warning", "print", "os.listdir", "json.dumps", "logging.error", "Path", "LLMClient", "sorted", "load_gitignore", "input", "scan_match.group", "parse_files_from_response", "re.search", "client.query", "write_match.group", "files_to_write.append", "parse", "get_folder_structure", "write_dir.startswith", "attach_to_llm_request", "write_to_file", "user_input.lower", "read_file_content"], "parse": ["config.get", "logging.warning", "json.dump", "logging.info", "load_gitignore", "load_config", "logging.error", "Path", "generate_json"], "query": ["json.dump", "logging.info", "client.query", "logging.error", "Path", "LLMClient"], "context": ["logging.warning"], "dogfood": ["logging.warning"], "review": ["logging.warning"], "main": ["query_parser.add_argument", "context", "dogfood", "query", "argparse.ArgumentParser", "review", "context_parser.add_argument", "parse", "parse_parser.add_argument", "interactive_parser.add_argument", "review_parser.add_argument", "interactive", "parser.parse_args", "parser.add_subparsers", "dogfood_parser.add_argument", "asyncio.run", "subparsers.add_parser"]}, "dependencies": ["LLMClient", "List", "Optional", "Path", "argparse", "asyncio", "attach_to_llm_request", "generate_json", "get_folder_structure", "json", "llmstruct", "llmstruct.generators.json_generator", "llmstruct.self_run", "logging", "os", "pathlib", "re", "toml", "typing", "uuid"], "hash": "a7ac7573d9aa554ea047c752c8191ecfed78590517fc8589e44046a759d05e4d"}, {"module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_validators___init__", "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_validators___init__.py", "category": "core", "module_doc": "Validation modules for ensuring LLMStruct JSON complies with the schema.", "functions": [], "classes": [], "callgraph": {}, "dependencies": ["json_validator", "validate_struct_json"], "hash": "f4790ac68ca453d97ae9dcd14f422afbbd0da889e5924e6626392817449c7fb3"}, {"module_id": "temp_workfiles.unsorted_mess.dump.generate_llmstruct (1)", "path": "temp_workfiles/unsorted_mess/dump/generate_llmstruct (1).py", "category": "core", "module_doc": "Generate JSON for workspace based on user instructions template.\n\nCreates structure:\n- metadata with description, instructions, and version\n- toc with module summaries and categories\n- modules with detailed function/class info, comments, call graphs, and categories", "functions": [{"name": "load_goals", "docstring": "Load goals from file or interactive editor.", "line_range": [47, 73], "parameters": ["goals_file"], "decorators": []}, {"name": "file_hash", "docstring": "Compute SHA-256 hash of file contents.", "line_range": [75, 82], "parameters": ["filepath"], "decorators": []}, {"name": "extract_comments", "docstring": "Extract single-line and multi-line comments using tokenize.", "line_range": [84, 99], "parameters": ["filepath"], "decorators": []}, {"name": "compute_file_metadata", "docstring": "Compute file size, last modified time, line count, and optional hash.", "line_range": [101, 117], "parameters": ["filepath", "include_hashes"], "decorators": []}, {"name": "infer_category", "docstring": "Infer module category based on path and dependencies.", "line_range": [119, 130], "parameters": ["path", "dependencies"], "decorators": []}, {"name": "get_signature", "docstring": "Generate function signature.", "line_range": [132, 135], "parameters": ["func_node"], "decorators": []}, {"name": "extract_dependencies", "docstring": "Extract module-level imports.", "line_range": [162, 171], "parameters": ["tree"], "decorators": []}, {"name": "analyze_module", "docstring": "Analyze a Python module in a single pass.", "line_range": [173, 277], "parameters": ["filepath", "root_dir", "include_ranges", "include_hashes"], "decorators": []}, {"name": "build_toc_and_modules", "docstring": "Build TOC and modules with filtering.", "line_range": [279, 321], "parameters": ["root_dir", "include_patterns", "exclude_patterns", "include_ranges", "include_hashes"], "decorators": []}, {"name": "generate_json", "docstring": "Generate JSON structure for project.", "line_range": [323, 345], "parameters": ["root_dir", "include_patterns", "exclude_patterns", "include_ranges", "include_hashes", "goals_file"], "decorators": []}, {"name": "main", "docstring": "", "line_range": [347, 366], "parameters": [], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [139, 141], "parameters": ["self"], "decorators": []}, {"name": "visit_Call", "docstring": "", "line_range": [143, 150], "parameters": ["self", "node"], "decorators": []}, {"name": "visit_Import", "docstring": "", "line_range": [152, 155], "parameters": ["self", "node"], "decorators": []}, {"name": "visit_ImportFrom", "docstring": "", "line_range": [157, 160], "parameters": ["self", "node"], "decorators": []}], "classes": [{"name": "CallVisitor", "docstring": "Extract function calls and module dependencies.", "line_range": [137, 160], "methods": [{"name": "__init__", "docstring": "", "line_range": [139, 141], "parameters": ["self"]}, {"name": "visit_Call", "docstring": "", "line_range": [143, 150], "parameters": ["self", "node"]}, {"name": "visit_Import", "docstring": "", "line_range": [152, 155], "parameters": ["self", "node"]}, {"name": "visit_ImportFrom", "docstring": "", "line_range": [157, 160], "parameters": ["self", "node"]}], "bases": ["ast.NodeVisitor"]}], "callgraph": {"load_goals": ["tempfile.NamedTemporaryFile", "line.startswith", "os.unlink", "logging.error", "temp.flush", "open", "line.strip", "subprocess.run", "temp.write"], "file_hash": ["logging.error", "hashlib.sha256", "f.read", "open"], "extract_comments": ["tokenize.tokenize", "comments.append", "logging.error", "open"], "compute_file_metadata": ["os.stat", "file_hash", "open", "logging.error", "sum"], "infer_category": ["any", "path.lower"], "get_signature": [], "__init__": ["set"], "visit_Call": ["self.generic_visit", "isinstance"], "visit_Import": ["self.generic_visit"], "visit_ImportFrom": ["self.generic_visit"], "extract_dependencies": ["ast.walk", "dependencies.update", "sorted", "set", "dependencies.add", "isinstance"], "analyze_module": ["get_signature", "getattr", "infer_category", "logging.error", "compute_file_metadata", "methods.append", "CallVisitor", "sorted", "ast.parse", "open", "source.splitlines", "functions.append", "hashlib.sha256", "classes.append", "ast.get_docstring", "extract_comments", "f.read", "str", "extract_dependencies", "isinstance", "visitor.visit"], "build_toc_and_modules": ["os.walk", "dirpath.split", "exclude_patterns.extend", "modules.append", "load_gitignore", "analyze_module", "len", "any", "toc.append", "fnmatch.fnmatch", "sum"], "generate_json": ["load_goals", "build_toc_and_modules", "len"], "main": ["json.dump", "logging.info", "parser.add_argument", "argparse.ArgumentParser", "logging.error", "open", "parser.parse_args", "generate_json"]}, "dependencies": ["Any", "Dict", "List", "Optional", "argparse", "ast", "datetime", "fnmatch", "hashlib", "json", "logging", "os", "subprocess", "tempfile", "tokenize", "typing"], "hash": "52a992dd469cf3ffacf62dabecbce612f6aa3e496001560d16cebea9421e3aa7"}, {"module_id": "temp_workfiles.unsorted_mess.dump.json_validator", "path": "temp_workfiles/unsorted_mess/dump/json_validator.py", "category": "core", "module_doc": "", "functions": [{"name": "validate_struct_json", "docstring": "Validate a single JSON file against a schema.", "line_range": [9, 37], "parameters": ["json_path", "schema_path"], "decorators": []}, {"name": "validate_directory", "docstring": "Validate all JSON files in a directory against a schema.", "line_range": [39, 50], "parameters": ["directory", "schema_path", "include_patterns", "exclude_patterns"], "decorators": []}], "classes": [], "callgraph": {"validate_struct_json": ["logging.info", "json_file.exists", "logging.error", "schema_file.exists", "Path", "validate", "open", "json.load", "str"], "validate_directory": ["validate_struct_json", "json_file.match", "any", "Path", "str"]}, "dependencies": ["List", "Optional", "Path", "ValidationError", "json", "jsonschema", "logging", "pathlib", "sys", "typing", "validate"], "hash": "ac8e88bc69ac1ec4530efba29926c03200a92d54fbc2b03ce8d770796af8aac5"}, {"module_id": "temp_workfiles.unsorted_mess.dump.validate_json", "path": "temp_workfiles/unsorted_mess/dump/validate_json.py", "category": "core", "module_doc": "", "functions": [{"name": "validate_struct_json", "docstring": "", "line_range": [4, 18], "parameters": ["json_path", "schema_path"], "decorators": []}], "classes": [], "callgraph": {"validate_struct_json": ["print", "validate", "open", "json.load", "str"]}, "dependencies": ["ValidationError", "json", "jsonschema", "sys", "validate"], "hash": "7c6ebc298d9f78346aefbad1665adcc1bfe6e2b9aa097ede02e9ce6c0ef1af9d"}, {"module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_cli", "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_cli.py", "category": "core", "module_doc": "", "functions": [{"name": "load_gitignore", "docstring": "Load and normalize patterns from .gitignore, logging loaded patterns.", "line_range": [21, 35], "parameters": ["root_dir"], "decorators": []}, {"name": "load_goals", "docstring": "Load goals from semicolon-separated string, file, or interactive editor.", "line_range": [37, 77], "parameters": ["goals_input"], "decorators": []}, {"name": "main", "docstring": "", "line_range": [79, 120], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"load_gitignore": ["logging.warning", "logging.info", "line.startswith", "len", "logging.error", "open", "line.strip"], "load_goals": ["logging.info", "tempfile.NamedTemporaryFile", "goals_input.split", "line.startswith", "os.unlink", "len", "line.strip", "logging.error", "temp.flush", "open", "g.strip", "subprocess.run", "temp.write"], "main": ["json.dump", "logging.warning", "parser.add_argument", "load_goals", "logging.info", "language_patterns.get", "argparse.ArgumentParser", "load_gitignore", "logging.error", "include_patterns.extend", "open", "parser.parse_args", "generate_json"]}, "dependencies": ["List", "Optional", "argparse", "generate_json", "generators.json_generator", "logging", "os", "subprocess", "tempfile", "typing"], "hash": "6391a65985128992adcf79f484c9733fdb1f8c9858c5f2ab4c39a6b8a92d3e38"}, {"module_id": "temp_workfiles.unsorted_mess.dump.clean.internal_cleaner", "path": "temp_workfiles/unsorted_mess/dump/clean/internal_cleaner.py", "category": "core", "module_doc": "", "functions": [{"name": "normalize", "docstring": "", "line_range": [10, 19], "parameters": ["record"], "decorators": []}], "classes": [], "callgraph": {"normalize": ["record.get", "id.strip", "isinstance", "content.strip", "str"]}, "dependencies": ["collections", "defaultdict", "glob", "json", "os"], "hash": "d910f4c2ef5c759d4291fe230633952631b4e02cf8e12c8393e0e5d7a70f1dc2"}, {"module_id": "temp_workfiles.dev_utils.test_efficiency", "path": "temp_workfiles/dev_utils/test_efficiency.py", "category": "test", "module_doc": "", "functions": [{"name": "get_system_metrics", "docstring": "", "line_range": [15, 19], "parameters": [], "decorators": []}, {"name": "is_local_address", "docstring": "", "line_range": [22, 28], "parameters": ["url"], "decorators": []}, {"name": "setup_proxy", "docstring": "", "line_range": [31, 34], "parameters": ["proxy_url"], "decorators": []}, {"name": "check_ollama", "docstring": "", "line_range": [37, 42], "parameters": ["api_url"], "decorators": []}, {"name": "optimize_prompt", "docstring": "", "line_range": [45, 51], "parameters": ["struct_data", "max_tokens"], "decorators": []}, {"name": "run_llm_request", "docstring": "", "line_range": [54, 78], "parameters": ["api_url", "payload", "proxy"], "decorators": []}, {"name": "check_llmstruct_cli", "docstring": "", "line_range": [81, 82], "parameters": [], "decorators": []}, {"name": "test_with_llmstruct", "docstring": "", "line_range": [85, 112], "parameters": ["api_url", "project_path", "proxy", "use_placeholder"], "decorators": []}, {"name": "test_without_llmstruct", "docstring": "", "line_range": [115, 122], "parameters": ["api_url", "project_path", "proxy"], "decorators": []}, {"name": "test_with_grok", "docstring": "", "line_range": [125, 147], "parameters": ["api_key", "project_path", "proxy", "use_placeholder"], "decorators": []}, {"name": "evaluate_accuracy", "docstring": "", "line_range": [150, 152], "parameters": ["response_text", "expected"], "decorators": []}, {"name": "main", "docstring": "", "line_range": [155, 215], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"get_system_metrics": ["psutil.virtual_memory", "psutil.cpu_percent"], "is_local_address": ["urlparse", "ipaddress.ip_address"], "setup_proxy": ["os.getenv"], "check_ollama": ["str", "api_url.replace", "requests.get", "response.json"], "optimize_prompt": ["struct_data.split", "print", "len"], "run_llm_request": ["print", "get_system_metrics", "response.raise_for_status", "len", "is_local_address", "session.post", "response.json", "time.perf_counter", "requests.Session", "type"], "check_llmstruct_cli": ["shutil.which"], "test_with_llmstruct": ["json.dump", "optimize_prompt", "target_path.exists", "f.read", "FileNotFoundError", "Path", "open", "subprocess.run", "check_llmstruct_cli", "run_llm_request", "str"], "test_without_llmstruct": ["optimize_prompt", "Path", "open", "run_llm_request", "f.read"], "test_with_grok": ["json.dump", "optimize_prompt", "target_path.exists", "test_grok", "FileNotFoundError", "Path", "open", "f.read"], "evaluate_accuracy": ["len", "response_text.lower", "sum"], "main": ["check_ollama", "print", "parser.add_argument", "json.dump", "test_with_grok", "argparse.ArgumentParser", "evaluate_accuracy", "test_without_llmstruct", "range", "test_with_llmstruct", "open", "setup_proxy", "parser.parse_args", "check_llmstruct_cli", "str"]}, "dependencies": ["Path", "argparse", "ipaddress", "json", "os", "pathlib", "psutil", "requests", "shutil", "src.llmstruct.grok", "subprocess", "test_grok", "time", "urllib.parse", "urlparse"], "hash": "7b4013d0a2d724e83a08ce04311d7a101a98769aa8e78e15b258bd58b44b55c0"}, {"module_id": "temp_workfiles.dev_utils.test_audit", "path": "temp_workfiles/dev_utils/test_audit.py", "category": "test", "module_doc": "Test script for audit functionality.", "functions": [{"name": "test_audit_status", "docstring": "Test audit status directly.", "line_range": [7, 49], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"test_audit_status": ["print", "list", "tasks_file.exists", "tasks_data.keys", "ideas_file.exists", "len", "t.get", "Path", "open", "ideas_data.keys", "json.load", "i.get"]}, "dependencies": ["Path", "json", "pathlib"], "hash": "8b6349f6348dc17c2c2a03ede44c0f6317af552a1db5501689cf235c00b3bf0e"}, {"module_id": "bak.20250522_102827.scripts.collector", "path": "bak/20250522_102827/scripts/collector.py", "category": "core", "module_doc": "", "functions": [{"name": "apply_filters", "docstring": "", "line_range": [10, 26], "parameters": ["files", "filters"], "decorators": []}, {"name": "collect_files", "docstring": "", "line_range": [28, 34], "parameters": ["root_dir", "filters"], "decorators": []}, {"name": "generate_struct", "docstring": "", "line_range": [36, 79], "parameters": ["root_dir", "output"], "decorators": []}, {"name": "main", "docstring": "", "line_range": [81, 82], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"apply_filters": ["pattern.startswith", "fnmatch.fnmatch", "filtered.append"], "collect_files": ["apply_filters", "path.is_file", "root_dir.rglob", "files.append", "path.relative_to", "str"], "generate_struct": ["json.dump", "output_path.open", "logger.info", "len", "uuid.uuid4", "existing.get", "collect_files", "Path", "output_path.exists", "json.load", "str"], "main": ["generate_struct"]}, "dependencies": ["Path", "fnmatch", "json", "logging", "pathlib", "uuid"], "hash": "99c1374f658a9da37264f6dc659460b0d7632ff442a884de38895df6fdf47f36"}, {"module_id": "bak.20250522_102827.scripts.validate_refs", "path": "bak/20250522_102827/scripts/validate_refs.py", "category": "core", "module_doc": "", "functions": [{"name": "validate_references", "docstring": "", "line_range": [8, 39], "parameters": [], "decorators": []}, {"name": "main", "docstring": "", "line_range": [41, 42], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"validate_references": ["idea.get", "json.dump", "source_file.exists", "target_file.exists", "logger.info", "logger.warning", "broken_links.append", "enumerate", "Path", "logger.error", "json.load"], "main": ["validate_references"]}, "dependencies": ["Path", "json", "logging", "pathlib"], "hash": "311adc2adc3ed9a5df6938f8cf13b1806532984be5b722c1a6d5fcad6a771f0d"}, {"module_id": "bak.20250522_102827.scripts.deploy_embedded_files", "path": "bak/20250522_102827/scripts/deploy_embedded_files.py", "category": "core", "module_doc": "", "functions": [{"name": "validate_json", "docstring": "", "line_range": [922, 928], "parameters": ["data", "schema"], "decorators": []}, {"name": "backup_files", "docstring": "", "line_range": [930, 936], "parameters": ["target_dir", "backup_root"], "decorators": []}, {"name": "deploy_embedded_files", "docstring": "", "line_range": [938, 964], "parameters": [], "decorators": []}, {"name": "main", "docstring": "", "line_range": [966, 967], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"validate_json": ["logger.warning", "validate"], "backup_files": ["target_dir.exists", "datetime.now", "shutil.copytree", "logger.info"], "deploy_embedded_files": ["EMBEDDED_FILES.get", "json.dump", "target_path.open", "logger.info", "target_path.exists", "backup_files", "Path", "EMBEDDED_FILES.items", "logger.error", "validate_json", "f.write"], "main": ["deploy_embedded_files"]}, "dependencies": ["Path", "ValidationError", "datetime", "json", "jsonschema", "logging", "os", "pathlib", "shutil", "validate"], "hash": "087ac73ccc1591cb097c8c139a51ec83e64ec4e96888049350b8791388dfc3a9"}, {"module_id": "bak.20250522_131121.scripts.collector", "path": "bak/20250522_131121/scripts/collector.py", "category": "core", "module_doc": "", "functions": [{"name": "apply_filters", "docstring": "", "line_range": [10, 26], "parameters": ["files", "filters"], "decorators": []}, {"name": "collect_files", "docstring": "", "line_range": [28, 34], "parameters": ["root_dir", "filters"], "decorators": []}, {"name": "generate_struct", "docstring": "", "line_range": [36, 79], "parameters": ["root_dir", "output"], "decorators": []}, {"name": "main", "docstring": "", "line_range": [81, 82], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"apply_filters": ["pattern.startswith", "fnmatch.fnmatch", "filtered.append"], "collect_files": ["apply_filters", "path.is_file", "root_dir.rglob", "files.append", "path.relative_to", "str"], "generate_struct": ["json.dump", "output_path.open", "logger.info", "len", "uuid.uuid4", "existing.get", "collect_files", "Path", "output_path.exists", "json.load", "str"], "main": ["generate_struct"]}, "dependencies": ["Path", "fnmatch", "json", "logging", "pathlib", "uuid"], "hash": "99c1374f658a9da37264f6dc659460b0d7632ff442a884de38895df6fdf47f36"}, {"module_id": "bak.20250522_131121.scripts.validate_refs", "path": "bak/20250522_131121/scripts/validate_refs.py", "category": "core", "module_doc": "", "functions": [{"name": "validate_references", "docstring": "", "line_range": [8, 39], "parameters": [], "decorators": []}, {"name": "main", "docstring": "", "line_range": [41, 42], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"validate_references": ["idea.get", "json.dump", "source_file.exists", "target_file.exists", "logger.info", "logger.warning", "broken_links.append", "enumerate", "Path", "logger.error", "json.load"], "main": ["validate_references"]}, "dependencies": ["Path", "json", "logging", "pathlib"], "hash": "311adc2adc3ed9a5df6938f8cf13b1806532984be5b722c1a6d5fcad6a771f0d"}, {"module_id": "bak.20250522_131121.scripts.deploy_embedded_files", "path": "bak/20250522_131121/scripts/deploy_embedded_files.py", "category": "core", "module_doc": "", "functions": [{"name": "validate_json", "docstring": "", "line_range": [929, 939], "parameters": ["data", "schema", "base_path"], "decorators": []}, {"name": "backup_files", "docstring": "", "line_range": [941, 947], "parameters": ["target_dir", "backup_root"], "decorators": []}, {"name": "deploy_embedded_files", "docstring": "", "line_range": [949, 1003], "parameters": [], "decorators": []}, {"name": "main", "docstring": "", "line_range": [1005, 1006], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"validate_json": ["logger.warning", "RefResolver", "validate", "logger.error"], "backup_files": ["target_dir.exists", "datetime.now", "shutil.copytree", "logger.info"], "deploy_embedded_files": ["EMBEDDED_FILES.get", "Path.cwd", "json.dump", "target_path.open", "logger.info", "target_path.exists", "logger.warning", "backup_files", "Path", "f.write", "logger.error", "validate_json"], "main": ["deploy_embedded_files"]}, "dependencies": ["Path", "RefResolver", "ValidationError", "datetime", "json", "jsonschema", "logging", "os", "pathlib", "shutil", "validate"], "hash": "d791b5c8000333aca515e37e72fb4e2443444f88163ea4975c81ee3230374cb8"}, {"module_id": "sorting_workspace.consolidate_changelog", "path": "sorting_workspace/consolidate_changelog.py", "category": "core", "module_doc": "Changelog Consolidation Tool\n\u0421\u043e\u0431\u0438\u0440\u0430\u0435\u0442 \u0438 \u043f\u043e\u0434\u0431\u0438\u0432\u0430\u0435\u0442 \u0447\u0435\u0439\u043d\u0434\u0436\u043b\u043e\u0433\u0438 \u0438\u0437 \u0440\u0430\u0437\u043d\u044b\u0445 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u043e\u0432", "functions": [{"name": "__init__", "docstring": "", "line_range": [14, 16], "parameters": ["self", "workspace_path"], "decorators": []}, {"name": "extract_changelog_from_file", "docstring": "\u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u0447\u0435\u0439\u043d\u0434\u0436\u043b\u043e\u0433 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430", "line_range": [18, 46], "parameters": ["self", "file_path"], "decorators": []}, {"name": "parse_markdown_changelog", "docstring": "\u041f\u0430\u0440\u0441\u0438\u0442 markdown \u0447\u0435\u0439\u043d\u0434\u0436\u043b\u043e\u0433", "line_range": [48, 69], "parameters": ["self", "content"], "decorators": []}, {"name": "scan_workspace", "docstring": "\u0421\u043a\u0430\u043d\u0438\u0440\u0443\u0435\u0442 workspace \u043d\u0430 \u043f\u0440\u0435\u0434\u043c\u0435\u0442 \u0447\u0435\u0439\u043d\u0434\u0436\u043b\u043e\u0433\u043e\u0432", "line_range": [71, 92], "parameters": ["self"], "decorators": []}, {"name": "deduplicate_entries", "docstring": "\u0423\u0434\u0430\u043b\u044f\u0435\u0442 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b \u0437\u0430\u043f\u0438\u0441\u0435\u0439", "line_range": [94, 108], "parameters": ["self"], "decorators": []}, {"name": "generate_consolidated_changelog", "docstring": "\u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0441\u0432\u043e\u0434\u043d\u044b\u0439 \u0447\u0435\u0439\u043d\u0434\u0436\u043b\u043e\u0433", "line_range": [110, 147], "parameters": ["self"], "decorators": []}, {"name": "analyze_project_evolution", "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u044d\u0432\u043e\u043b\u044e\u0446\u0438\u044e \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u043f\u043e \u0447\u0435\u0439\u043d\u0434\u0436\u043b\u043e\u0433\u0430\u043c", "line_range": [149, 180], "parameters": ["self"], "decorators": []}], "classes": [{"name": "ChangelogConsolidator", "docstring": "", "line_range": [13, 180], "methods": [{"name": "__init__", "docstring": "", "line_range": [14, 16], "parameters": ["self", "workspace_path"]}, {"name": "extract_changelog_from_file", "docstring": "\u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u0447\u0435\u0439\u043d\u0434\u0436\u043b\u043e\u0433 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430", "line_range": [18, 46], "parameters": ["self", "file_path"]}, {"name": "parse_markdown_changelog", "docstring": "\u041f\u0430\u0440\u0441\u0438\u0442 markdown \u0447\u0435\u0439\u043d\u0434\u0436\u043b\u043e\u0433", "line_range": [48, 69], "parameters": ["self", "content"]}, {"name": "scan_workspace", "docstring": "\u0421\u043a\u0430\u043d\u0438\u0440\u0443\u0435\u0442 workspace \u043d\u0430 \u043f\u0440\u0435\u0434\u043c\u0435\u0442 \u0447\u0435\u0439\u043d\u0434\u0436\u043b\u043e\u0433\u043e\u0432", "line_range": [71, 92], "parameters": ["self"]}, {"name": "deduplicate_entries", "docstring": "\u0423\u0434\u0430\u043b\u044f\u0435\u0442 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b \u0437\u0430\u043f\u0438\u0441\u0435\u0439", "line_range": [94, 108], "parameters": ["self"]}, {"name": "generate_consolidated_changelog", "docstring": "\u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0441\u0432\u043e\u0434\u043d\u044b\u0439 \u0447\u0435\u0439\u043d\u0434\u0436\u043b\u043e\u0433", "line_range": [110, 147], "parameters": ["self"]}, {"name": "analyze_project_evolution", "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u044d\u0432\u043e\u043b\u044e\u0446\u0438\u044e \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u043f\u043e \u0447\u0435\u0439\u043d\u0434\u0436\u043b\u043e\u0433\u0430\u043c", "line_range": [149, 180], "parameters": ["self"]}], "bases": []}], "callgraph": {"__init__": ["Path"], "extract_changelog_from_file": ["print", "file_path.read_text", "changelog_entries.extend", "data.items", "self.parse_markdown_changelog", "isinstance", "open", "json.load"], "parse_markdown_changelog": ["range", "len", "re.split", "entries.append"], "scan_workspace": ["print", "file_path.relative_to", "self.extract_changelog_from_file", "file_path.is_file", "str"], "deduplicate_entries": ["unique_entries.append", "print", "set", "len", "entry.get", "seen.add"], "generate_consolidated_changelog": ["x.get", "sorted", "set", "e.get", "min", "datetime.now", "len", "max", "entry.get"], "analyze_project_evolution": ["set", "e.get", "min", "len", "datetime.now", "max", "entry.get", "monthly_activity.get", "monthly_activity.keys"]}, "dependencies": ["Dict", "List", "Path", "datetime", "json", "pathlib", "re", "typing"], "hash": "fcb0ab8fcfbb73d7cc0496a20459e7abd744ccd7459ebe4bb920a31162e9d1be"}, {"module_id": "sorting_workspace.validate_project_state", "path": "sorting_workspace/validate_project_state.py", "category": "core", "module_doc": "Project State Validator & Comparator\n\u041e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u0442 \u0442\u0435\u043a\u0443\u0449\u0435\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445", "functions": [{"name": "__init__", "docstring": "", "line_range": [13, 16], "parameters": ["self", "workspace_path"], "decorators": []}, {"name": "load_current_state", "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0442\u0435\u043a\u0443\u0449\u0435\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430", "line_range": [18, 27], "parameters": ["self"], "decorators": []}, {"name": "load_sorted_data", "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435", "line_range": [29, 52], "parameters": ["self"], "decorators": []}, {"name": "load_json_safe", "docstring": "\u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 JSON", "line_range": [54, 62], "parameters": ["self", "file_path"], "decorators": []}, {"name": "extract_ids", "docstring": "\u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u0432\u0441\u0435 ID \u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445", "line_range": [64, 79], "parameters": ["self", "data"], "decorators": []}, {"name": "compare_data_sets", "docstring": "\u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u0442 \u0442\u0435\u043a\u0443\u0449\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441 \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438", "line_range": [81, 119], "parameters": ["self"], "decorators": []}, {"name": "analyze_data_freshness", "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0445", "line_range": [121, 168], "parameters": ["self"], "decorators": []}, {"name": "generate_validation_report", "docstring": "\u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u043e\u0442\u0447\u0451\u0442 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438", "line_range": [170, 271], "parameters": ["self"], "decorators": []}, {"name": "suggest_merge_commands", "docstring": "\u041f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0434\u043b\u044f \u0441\u043b\u0438\u044f\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445", "line_range": [273, 284], "parameters": ["self"], "decorators": []}], "classes": [{"name": "ProjectStateValidator", "docstring": "", "line_range": [12, 284], "methods": [{"name": "__init__", "docstring": "", "line_range": [13, 16], "parameters": ["self", "workspace_path"]}, {"name": "load_current_state", "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0442\u0435\u043a\u0443\u0449\u0435\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430", "line_range": [18, 27], "parameters": ["self"]}, {"name": "load_sorted_data", "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435", "line_range": [29, 52], "parameters": ["self"]}, {"name": "load_json_safe", "docstring": "\u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 JSON", "line_range": [54, 62], "parameters": ["self", "file_path"]}, {"name": "extract_ids", "docstring": "\u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u0432\u0441\u0435 ID \u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445", "line_range": [64, 79], "parameters": ["self", "data"]}, {"name": "compare_data_sets", "docstring": "\u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u0442 \u0442\u0435\u043a\u0443\u0449\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441 \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438", "line_range": [81, 119], "parameters": ["self"]}, {"name": "analyze_data_freshness", "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0445", "line_range": [121, 168], "parameters": ["self"]}, {"name": "generate_validation_report", "docstring": "\u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u043e\u0442\u0447\u0451\u0442 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438", "line_range": [170, 271], "parameters": ["self"]}, {"name": "suggest_merge_commands", "docstring": "\u041f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0434\u043b\u044f \u0441\u043b\u0438\u044f\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445", "line_range": [273, 284], "parameters": ["self"]}], "bases": []}], "callgraph": {"__init__": ["self.load_sorted_data", "self.load_current_state", "Path"], "load_current_state": ["self.load_json_safe"], "load_sorted_data": ["processing_dir.exists", "self.load_json_safe", "processing_dir.glob"], "load_json_safe": ["file_path.exists", "print", "json.load", "open"], "extract_ids": ["self.extract_ids", "set", "ids.add", "data.items", "any", "isinstance", "ids.update"], "compare_data_sets": ["self.extract_ids", "set", "list", "all_current_ids.update", "ids.update"], "analyze_data_freshness": ["self.extract_ids", "datetime.fromisoformat", "created_str.replace", "datetime.now", "len", "item.get"], "generate_validation_report": ["set", "list", "len", "datetime.now", "self.compare_data_sets", "sum", "data_type.title", "self.analyze_data_freshness"], "suggest_merge_commands": ["self.compare_data_sets", "commands.append"]}, "dependencies": ["Dict", "List", "Path", "Set", "datetime", "json", "pathlib", "typing"], "hash": "e4da299c494d93fa3282a0dfcb4b6a203773e145d42d88173e6fb3517d6ef263"}, {"module_id": "sorting_workspace.sort_data", "path": "sorting_workspace/sort_data.py", "category": "core", "module_doc": "LLMStruct Data Sorting and Migration Tool\n\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u0431\u0430\u0440\u0430\u0445\u043b\u043e \u0432 structured JSON format", "functions": [{"name": "__init__", "docstring": "", "line_range": [17, 33], "parameters": ["self", "workspace_path"], "decorators": []}, {"name": "load_template", "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0448\u0430\u0431\u043b\u043e\u043d JSON", "line_range": [35, 39], "parameters": ["self", "template_name"], "decorators": []}, {"name": "generate_artifact_id", "docstring": "\u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 artifact_id", "line_range": [41, 43], "parameters": ["self"], "decorators": []}, {"name": "detect_content_type", "docstring": "\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u0442\u0438\u043f \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430 \u0444\u0430\u0439\u043b\u0430", "line_range": [45, 59], "parameters": ["self", "file_path"], "decorators": []}, {"name": "extract_metadata", "docstring": "\u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430", "line_range": [61, 70], "parameters": ["self", "file_path"], "decorators": []}, {"name": "is_outdated", "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0443\u0441\u0442\u0430\u0440\u0435\u043b \u043b\u0438 \u0444\u0430\u0439\u043b", "line_range": [72, 77], "parameters": ["self", "file_path"], "decorators": []}, {"name": "migrate_file", "docstring": "\u041c\u0438\u0433\u0440\u0438\u0440\u0443\u0435\u0442 \u0444\u0430\u0439\u043b \u0432 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 JSON", "line_range": [79, 121], "parameters": ["self", "file_path"], "decorators": []}, {"name": "populate_task_template", "docstring": "\u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0448\u0430\u0431\u043b\u043e\u043d \u0437\u0430\u0434\u0430\u0447\u0438", "line_range": [123, 145], "parameters": ["self", "template", "content", "metadata"], "decorators": []}, {"name": "populate_idea_template", "docstring": "\u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0448\u0430\u0431\u043b\u043e\u043d \u0438\u0434\u0435\u0438", "line_range": [147, 159], "parameters": ["self", "template", "content", "metadata"], "decorators": []}, {"name": "populate_artifact_template", "docstring": "\u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0448\u0430\u0431\u043b\u043e\u043d \u0430\u0440\u0442\u0435\u0444\u0430\u043a\u0442\u0430", "line_range": [161, 165], "parameters": ["self", "template", "content", "metadata"], "decorators": []}, {"name": "populate_insight_template", "docstring": "\u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0448\u0430\u0431\u043b\u043e\u043d \u0438\u043d\u0441\u0430\u0439\u0442\u0430", "line_range": [167, 172], "parameters": ["self", "template", "content", "metadata"], "decorators": []}, {"name": "archive_file", "docstring": "\u0410\u0440\u0445\u0438\u0432\u0438\u0440\u0443\u0435\u0442 \u0444\u0430\u0439\u043b \u0431\u0435\u0437 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438", "line_range": [174, 178], "parameters": ["self", "file_path"], "decorators": []}, {"name": "deprecate_file", "docstring": "\u041f\u043e\u043c\u0435\u0447\u0430\u0435\u0442 \u0444\u0430\u0439\u043b \u043a\u0430\u043a \u0443\u0441\u0442\u0430\u0440\u0435\u0432\u0448\u0438\u0439", "line_range": [180, 184], "parameters": ["self", "file_path"], "decorators": []}, {"name": "scan_and_sort", "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0441\u043a\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438", "line_range": [186, 209], "parameters": ["self", "unsorted_path"], "decorators": []}, {"name": "generate_report", "docstring": "\u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u043e\u0442\u0447\u0451\u0442 \u043e \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0435", "line_range": [211, 234], "parameters": ["self"], "decorators": []}], "classes": [{"name": "LLMStructSorter", "docstring": "", "line_range": [16, 234], "methods": [{"name": "__init__", "docstring": "", "line_range": [17, 33], "parameters": ["self", "workspace_path"]}, {"name": "load_template", "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0448\u0430\u0431\u043b\u043e\u043d JSON", "line_range": [35, 39], "parameters": ["self", "template_name"]}, {"name": "generate_artifact_id", "docstring": "\u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 artifact_id", "line_range": [41, 43], "parameters": ["self"]}, {"name": "detect_content_type", "docstring": "\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u0442\u0438\u043f \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430 \u0444\u0430\u0439\u043b\u0430", "line_range": [45, 59], "parameters": ["self", "file_path"]}, {"name": "extract_metadata", "docstring": "\u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430", "line_range": [61, 70], "parameters": ["self", "file_path"]}, {"name": "is_outdated", "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0443\u0441\u0442\u0430\u0440\u0435\u043b \u043b\u0438 \u0444\u0430\u0439\u043b", "line_range": [72, 77], "parameters": ["self", "file_path"]}, {"name": "migrate_file", "docstring": "\u041c\u0438\u0433\u0440\u0438\u0440\u0443\u0435\u0442 \u0444\u0430\u0439\u043b \u0432 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 JSON", "line_range": [79, 121], "parameters": ["self", "file_path"]}, {"name": "populate_task_template", "docstring": "\u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0448\u0430\u0431\u043b\u043e\u043d \u0437\u0430\u0434\u0430\u0447\u0438", "line_range": [123, 145], "parameters": ["self", "template", "content", "metadata"]}, {"name": "populate_idea_template", "docstring": "\u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0448\u0430\u0431\u043b\u043e\u043d \u0438\u0434\u0435\u0438", "line_range": [147, 159], "parameters": ["self", "template", "content", "metadata"]}, {"name": "populate_artifact_template", "docstring": "\u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0448\u0430\u0431\u043b\u043e\u043d \u0430\u0440\u0442\u0435\u0444\u0430\u043a\u0442\u0430", "line_range": [161, 165], "parameters": ["self", "template", "content", "metadata"]}, {"name": "populate_insight_template", "docstring": "\u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0448\u0430\u0431\u043b\u043e\u043d \u0438\u043d\u0441\u0430\u0439\u0442\u0430", "line_range": [167, 172], "parameters": ["self", "template", "content", "metadata"]}, {"name": "archive_file", "docstring": "\u0410\u0440\u0445\u0438\u0432\u0438\u0440\u0443\u0435\u0442 \u0444\u0430\u0439\u043b \u0431\u0435\u0437 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438", "line_range": [174, 178], "parameters": ["self", "file_path"]}, {"name": "deprecate_file", "docstring": "\u041f\u043e\u043c\u0435\u0447\u0430\u0435\u0442 \u0444\u0430\u0439\u043b \u043a\u0430\u043a \u0443\u0441\u0442\u0430\u0440\u0435\u0432\u0448\u0438\u0439", "line_range": [180, 184], "parameters": ["self", "file_path"]}, {"name": "scan_and_sort", "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0441\u043a\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438", "line_range": [186, 209], "parameters": ["self", "unsorted_path"]}, {"name": "generate_report", "docstring": "\u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u043e\u0442\u0447\u0451\u0442 \u043e \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0435", "line_range": [211, 234], "parameters": ["self"]}], "bases": []}], "callgraph": {"__init__": ["Path"], "load_template": ["json.load", "open"], "generate_artifact_id": ["str", "uuid.uuid4"], "detect_content_type": ["re.search", "file_path.read_text"], "extract_metadata": ["datetime.fromtimestamp", "file_path.stat", "file_path.relative_to", "str"], "is_outdated": ["file_path.stat", "datetime.now"], "migrate_file": ["self.populate_artifact_template", "json.dump", "self.archive_file", "self.populate_idea_template", "file_path.read_text", "datetime.now", "self.extract_metadata", "self.populate_insight_template", "self.populate_task_template", "self.load_template", "open", "self.generate_artifact_id", "self.detect_content_type"], "populate_task_template": ["len", "tsk_match.group", "content.lower", "re.sub", "re.search", "content.split"], "populate_idea_template": ["ins_match.group", "len", "re.sub", "re.search", "content.split"], "populate_artifact_template": ["len"], "populate_insight_template": ["content.split", "len"], "archive_file": ["shutil.copy2"], "deprecate_file": ["shutil.copy2"], "scan_and_sort": ["self.is_outdated", "print", "self.migrate_file", "self.deprecate_file", "unsorted_dir.exists", "file_path.is_file", "Path", "unsorted_dir.rglob"], "generate_report": ["datetime.now", "len"]}, "dependencies": ["Any", "Dict", "List", "Optional", "Path", "argparse", "datetime", "json", "os", "pathlib", "re", "shutil", "typing", "uuid"], "hash": "a8a849ab68e053a15bdd19b454b8e6fecd64e8dbb65c58971ab259ae146e883f"}, {"module_id": "sorting_workspace.smart_consolidator", "path": "sorting_workspace/smart_consolidator.py", "category": "core", "module_doc": "Smart LLM-assisted consolidation script for inconsistent data dumps\nUses content analysis and pattern matching to handle messy, inconsistent data", "functions": [{"name": "main", "docstring": "", "line_range": [524, 532], "parameters": [], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [17, 37], "parameters": ["self", "workspace_path", "unsorted_path"], "decorators": []}, {"name": "log_analysis", "docstring": "Log analysis steps for debugging", "line_range": [39, 47], "parameters": ["self", "message", "file_path"], "decorators": []}, {"name": "safe_read_file", "docstring": "Safely read a file, handling various encodings and formats", "line_range": [49, 83], "parameters": ["self", "file_path"], "decorators": []}, {"name": "analyze_content_intelligence", "docstring": "Intelligently analyze content to determine type and extract data", "line_range": [85, 198], "parameters": ["self", "content", "parsed_json", "file_path"], "decorators": []}, {"name": "extract_and_normalize_items", "docstring": "Extract and normalize items from parsed JSON", "line_range": [200, 264], "parameters": ["self", "parsed_json", "analysis", "file_path"], "decorators": []}, {"name": "process_single_file", "docstring": "Process a single file with full analysis", "line_range": [266, 318], "parameters": ["self", "file_path"], "decorators": []}, {"name": "smart_consolidation", "docstring": "Run smart consolidation across all files", "line_range": [320, 380], "parameters": ["self"], "decorators": []}, {"name": "save_consolidated_data", "docstring": "Save consolidated data to structured files", "line_range": [382, 474], "parameters": ["self", "tasks", "ideas", "artifacts"], "decorators": []}, {"name": "generate_smart_report", "docstring": "Generate detailed smart consolidation report", "line_range": [476, 522], "parameters": ["self"], "decorators": []}], "classes": [{"name": "SmartConsolidator", "docstring": "", "line_range": [16, 522], "methods": [{"name": "__init__", "docstring": "", "line_range": [17, 37], "parameters": ["self", "workspace_path", "unsorted_path"]}, {"name": "log_analysis", "docstring": "Log analysis steps for debugging", "line_range": [39, 47], "parameters": ["self", "message", "file_path"]}, {"name": "safe_read_file", "docstring": "Safely read a file, handling various encodings and formats", "line_range": [49, 83], "parameters": ["self", "file_path"]}, {"name": "analyze_content_intelligence", "docstring": "Intelligently analyze content to determine type and extract data", "line_range": [85, 198], "parameters": ["self", "content", "parsed_json", "file_path"]}, {"name": "extract_and_normalize_items", "docstring": "Extract and normalize items from parsed JSON", "line_range": [200, 264], "parameters": ["self", "parsed_json", "analysis", "file_path"]}, {"name": "process_single_file", "docstring": "Process a single file with full analysis", "line_range": [266, 318], "parameters": ["self", "file_path"]}, {"name": "smart_consolidation", "docstring": "Run smart consolidation across all files", "line_range": [320, 380], "parameters": ["self"]}, {"name": "save_consolidated_data", "docstring": "Save consolidated data to structured files", "line_range": [382, 474], "parameters": ["self", "tasks", "ideas", "artifacts"]}, {"name": "generate_smart_report", "docstring": "Generate detailed smart consolidation report", "line_range": [476, 522], "parameters": ["self"]}], "bases": []}], "callgraph": {"__init__": ["dir_path.mkdir", "Path"], "log_analysis": ["datetime.now", "print", "str"], "safe_read_file": ["content.startswith", "re.sub", "json.loads", "open", "f.read"], "analyze_content_intelligence": ["idea.get", "parsed_json.get", "task.get", "min", "max", "content.lower", "isinstance", "sum", "re.search", "str"], "extract_and_normalize_items": ["idea.get", "parsed_json.get", "idea.items", "file_path.relative_to", "key.startswith", "items.append", "task.get", "datetime.now", "task.items", "isinstance", "self.log_analysis", "str"], "process_single_file": ["shutil.copy2", "len", "self.analyze_content_intelligence", "self.safe_read_file", "self.log_analysis", "self.extract_and_normalize_items"], "smart_consolidation": ["self.save_consolidated_data", "datetime.now", "self.process_single_file", "file_path.is_file", "Path", "os.walk", "consolidated_ideas.extend", "len", "self.generate_smart_report", "processing_results.append", "consolidated_artifacts.append", "open", "json.dump", "all_files.append", "str", "file.startswith", "file_path.relative_to", "uuid.uuid4", "self.log_analysis", "consolidated_tasks.extend"], "save_consolidated_data": ["idea.get", "json.dump", "list", "task.get", "len", "datetime.now", "unique_ideas.values", "self.log_analysis", "open", "unique_tasks.values", "str"], "generate_smart_report": ["datetime.now", "f.write", "self.log_analysis", "open"], "main": ["print", "SmartConsolidator", "consolidator.smart_consolidation"]}, "dependencies": ["Any", "Dict", "List", "Optional", "Path", "Tuple", "datetime", "json", "os", "pathlib", "re", "shutil", "typing", "uuid"], "hash": "5deb8a52b73fbd7001469065297cb80c7fd8332c605d3d13dc8580821c3711f8"}, {"module_id": "sorting_workspace.comprehensive_consolidator", "path": "sorting_workspace/comprehensive_consolidator.py", "category": "core", "module_doc": "Comprehensive Data Consolidator for llmstruct\nProcesses unsorted JSON files and consolidates them into the main data structure.", "functions": [{"name": "__init__", "docstring": "", "line_range": [16, 36], "parameters": ["self", "project_root"], "decorators": []}, {"name": "load_existing_data", "docstring": "Load existing tasks and ideas to avoid duplicates.", "line_range": [38, 56], "parameters": ["self"], "decorators": []}, {"name": "find_json_files", "docstring": "Find all tasks and ideas JSON files.", "line_range": [58, 67], "parameters": ["self"], "decorators": []}, {"name": "normalize_task", "docstring": "Normalize task format to match main tasks.json structure.", "line_range": [69, 97], "parameters": ["self", "task", "source_file"], "decorators": []}, {"name": "normalize_idea", "docstring": "Normalize idea format to match main ideas.json structure.", "line_range": [99, 143], "parameters": ["self", "idea", "source_file"], "decorators": []}, {"name": "_normalize_status", "docstring": "Normalize task status values.", "line_range": [145, 155], "parameters": ["self", "status"], "decorators": []}, {"name": "_normalize_idea_status", "docstring": "Normalize idea status values.", "line_range": [157, 165], "parameters": ["self", "status"], "decorators": []}, {"name": "_infer_category", "docstring": "Infer category from idea content.", "line_range": [167, 185], "parameters": ["self", "idea"], "decorators": []}, {"name": "process_file", "docstring": "Process a single JSON file and extract tasks/ideas.", "line_range": [187, 231], "parameters": ["self", "file_path"], "decorators": []}, {"name": "merge_into_main_files", "docstring": "Merge new tasks and ideas into main files.", "line_range": [233, 269], "parameters": ["self", "new_tasks", "new_ideas"], "decorators": []}, {"name": "create_consolidation_report", "docstring": "Create a detailed consolidation report.", "line_range": [271, 305], "parameters": ["self", "new_tasks", "new_ideas"], "decorators": []}, {"name": "print_summary", "docstring": "Print consolidation summary.", "line_range": [307, 322], "parameters": ["self"], "decorators": []}, {"name": "run_consolidation", "docstring": "Run the complete consolidation process.", "line_range": [324, 359], "parameters": ["self"], "decorators": []}], "classes": [{"name": "LLMStructConsolidator", "docstring": "", "line_range": [15, 359], "methods": [{"name": "__init__", "docstring": "", "line_range": [16, 36], "parameters": ["self", "project_root"]}, {"name": "load_existing_data", "docstring": "Load existing tasks and ideas to avoid duplicates.", "line_range": [38, 56], "parameters": ["self"]}, {"name": "find_json_files", "docstring": "Find all tasks and ideas JSON files.", "line_range": [58, 67], "parameters": ["self"]}, {"name": "normalize_task", "docstring": "Normalize task format to match main tasks.json structure.", "line_range": [69, 97], "parameters": ["self", "task", "source_file"]}, {"name": "normalize_idea", "docstring": "Normalize idea format to match main ideas.json structure.", "line_range": [99, 143], "parameters": ["self", "idea", "source_file"]}, {"name": "_normalize_status", "docstring": "Normalize task status values.", "line_range": [145, 155], "parameters": ["self", "status"]}, {"name": "_normalize_idea_status", "docstring": "Normalize idea status values.", "line_range": [157, 165], "parameters": ["self", "status"]}, {"name": "_infer_category", "docstring": "Infer category from idea content.", "line_range": [167, 185], "parameters": ["self", "idea"]}, {"name": "process_file", "docstring": "Process a single JSON file and extract tasks/ideas.", "line_range": [187, 231], "parameters": ["self", "file_path"]}, {"name": "merge_into_main_files", "docstring": "Merge new tasks and ideas into main files.", "line_range": [233, 269], "parameters": ["self", "new_tasks", "new_ideas"]}, {"name": "create_consolidation_report", "docstring": "Create a detailed consolidation report.", "line_range": [271, 305], "parameters": ["self", "new_tasks", "new_ideas"]}, {"name": "print_summary", "docstring": "Print consolidation summary.", "line_range": [307, 322], "parameters": ["self"]}, {"name": "run_consolidation", "docstring": "Run the complete consolidation process.", "line_range": [324, 359], "parameters": ["self"]}], "bases": []}], "callgraph": {"__init__": ["Path", "set"], "load_existing_data": ["print", "len", "open", "ideas_data.get", "tasks_data.get", "json.load"], "find_json_files": ["print", "len", "files.extend"], "normalize_task": ["task.get", "self._normalize_status", "datetime.now"], "normalize_idea": ["idea.get", "datetime.now", "self._normalize_idea_status", "self._infer_category"], "_normalize_status": ["status_map.get", "status.lower"], "_normalize_idea_status": ["status_map.get", "status.lower"], "_infer_category": ["idea.get", "any"], "process_file": ["print", "tasks.append", "ideas.append", "self.normalize_idea", "open", "self.normalize_task", "json.load", "str"], "merge_into_main_files": ["json.dump", "print", "datetime.now", "len", "open", "json.load"], "create_consolidation_report": ["json.dump", "print", "datetime.now", "len", "max", "uuid.uuid4", "open", "str"], "print_summary": ["print", "len"], "run_consolidation": ["self.load_existing_data", "print", "self.find_json_files", "self.process_file", "all_tasks.extend", "all_ideas.extend", "self.merge_into_main_files", "self.create_consolidation_report", "self.print_summary", "len"]}, "dependencies": ["Any", "Dict", "List", "Path", "Set", "datetime", "glob", "json", "os", "pathlib", "typing", "uuid"], "hash": "bba5a2019ea2eb36d5ae52b37e58c798d638b90297025f99838bf7ec7b30dda5"}, {"module_id": "sorting_workspace.debug_sort", "path": "sorting_workspace/debug_sort.py", "category": "core", "module_doc": "Debug version of sorting script to identify issues", "functions": [{"name": "debug_file", "docstring": "Debug a single file", "line_range": [11, 54], "parameters": ["file_path"], "decorators": []}, {"name": "main", "docstring": "", "line_range": [56, 62], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"debug_file": ["print", "file_path.read_text", "len", "file_path.is_file", "content.lower", "file_path.exists", "detected_types.append", "re.search", "patterns.items"], "main": ["debug_file", "print", "len", "sys.exit", "Path"]}, "dependencies": ["Path", "json", "pathlib", "re", "sys"], "hash": "079f0148b25a63cc9a866e979dcba20a105351f3f99c047bca4798ff6d316b78"}, {"module_id": "sorting_workspace.manual_consolidator", "path": "sorting_workspace/manual_consolidator.py", "category": "core", "module_doc": "Manual consolidation script for llmstruct data sorting\nBypasses the automatic detection and directly processes known file types", "functions": [{"name": "main", "docstring": "", "line_range": [296, 301], "parameters": [], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [15, 32], "parameters": ["self", "workspace_path", "unsorted_path"], "decorators": []}, {"name": "consolidate_tasks", "docstring": "Consolidate all task files", "line_range": [34, 90], "parameters": ["self"], "decorators": []}, {"name": "consolidate_ideas", "docstring": "Consolidate all idea files", "line_range": [92, 148], "parameters": ["self"], "decorators": []}, {"name": "process_artifacts", "docstring": "Process configuration and artifact files", "line_range": [150, 215], "parameters": ["self"], "decorators": []}, {"name": "archive_remaining_files", "docstring": "Archive remaining files that don't fit standard categories", "line_range": [217, 241], "parameters": ["self"], "decorators": []}, {"name": "generate_consolidation_report", "docstring": "Generate consolidation report", "line_range": [243, 277], "parameters": ["self"], "decorators": []}, {"name": "run_consolidation", "docstring": "Run the complete consolidation process", "line_range": [279, 294], "parameters": ["self"], "decorators": []}], "classes": [{"name": "ManualConsolidator", "docstring": "", "line_range": [14, 294], "methods": [{"name": "__init__", "docstring": "", "line_range": [15, 32], "parameters": ["self", "workspace_path", "unsorted_path"]}, {"name": "consolidate_tasks", "docstring": "Consolidate all task files", "line_range": [34, 90], "parameters": ["self"]}, {"name": "consolidate_ideas", "docstring": "Consolidate all idea files", "line_range": [92, 148], "parameters": ["self"]}, {"name": "process_artifacts", "docstring": "Process configuration and artifact files", "line_range": [150, 215], "parameters": ["self"]}, {"name": "archive_remaining_files", "docstring": "Archive remaining files that don't fit standard categories", "line_range": [217, 241], "parameters": ["self"]}, {"name": "generate_consolidation_report", "docstring": "Generate consolidation report", "line_range": [243, 277], "parameters": ["self"]}, {"name": "run_consolidation", "docstring": "Run the complete consolidation process", "line_range": [279, 294], "parameters": ["self"]}], "bases": []}], "callgraph": {"__init__": ["dir_path.mkdir", "Path"], "consolidate_tasks": ["json.dump", "print", "shutil.copy2", "list", "datetime.now", "len", "task_file.relative_to", "data.get", "uuid.uuid4", "isinstance", "open", "json.load", "all_tasks.append", "str"], "consolidate_ideas": ["json.dump", "print", "all_ideas.append", "shutil.copy2", "list", "datetime.now", "len", "data.get", "uuid.uuid4", "isinstance", "open", "idea_file.relative_to", "json.load", "str"], "process_artifacts": ["json.dump", "print", "shutil.copy2", "file_path.relative_to", "list", "datetime.now", "len", "uuid.uuid4", "file_path.stat", "open", "str", "all_artifacts.append", "f.read"], "archive_remaining_files": ["print", "shutil.copy2", "file_path.relative_to", "list", "f.is_file"], "generate_consolidation_report": ["f.write", "datetime.now", "len", "open"], "run_consolidation": ["self.process_artifacts", "print", "self.generate_consolidation_report", "self.archive_remaining_files", "self.consolidate_ideas", "self.consolidate_tasks"], "main": ["ManualConsolidator", "consolidator.run_consolidation"]}, "dependencies": ["Any", "Dict", "List", "Path", "datetime", "json", "pathlib", "shutil", "typing", "uuid"], "hash": "c8c2e407a20fb6d2d66ad2f81f734417a5203f4e4280aedb3a72b3506712ac7b"}, {"module_id": "tests.test_self_run", "path": "tests/test_self_run.py", "category": "test", "module_doc": "", "functions": [{"name": "test_filter_json_init_json", "docstring": "Test filter_json with init.json structure.", "line_range": [14, 21], "parameters": ["tmp_path"], "decorators": []}, {"name": "test_select_json_partial", "docstring": "Test partial JSON loading.", "line_range": [24, 34], "parameters": ["tmp_path"], "decorators": []}, {"name": "test_cache_json", "docstring": "Test JSON caching.", "line_range": [37, 49], "parameters": ["tmp_path"], "decorators": []}, {"name": "test_attach_to_llm_request_init_json", "docstring": "Test attach_to_llm_request with init.json and cache.", "line_range": [52, 69], "parameters": ["tmp_path"], "decorators": []}, {"name": "test_attach_to_llm_request_missing_file", "docstring": "Test attach_to_llm_request with missing file.", "line_range": [72, 76], "parameters": ["tmp_path"], "decorators": []}], "classes": [], "callgraph": {"test_filter_json_init_json": ["filter_json"], "test_select_json_partial": ["json.dump", "select_json", "str", "open"], "test_cache_json": ["json.dump", "cache.close", "cache.get_full_json", "cache.get_metadata", "cache.cache_json", "JSONCache", "open", "str"], "test_attach_to_llm_request_init_json": ["json.dump", "cache.close", "attach_to_llm_request", "JSONCache", "open", "str"], "test_attach_to_llm_request_missing_file": ["attach_to_llm_request", "str"]}, "dependencies": ["JSONCache", "attach_to_llm_request", "filter_json", "json", "llmstruct.cache", "llmstruct.json_selector", "llmstruct.self_run", "select_json"], "hash": "8395c3be6bcbf0832721699e4612a552994c9e48b3190c26c20184a7205dd76e"}, {"module_id": "tests.__init__", "path": "tests/__init__.py", "category": "test", "module_doc": "Test suite for LLMStruct, covering parsers, generators, validators, and integration.", "functions": [], "classes": [], "callgraph": {}, "dependencies": [], "hash": "6c8a89ead1428796572a096daee1e9d2f972387a1556136e12c69e87350564d8"}, {"module_id": "scripts.github_sync_manager", "path": "scripts/github_sync_manager.py", "category": "core", "module_doc": "GitHub Sync Manager - \u0418\u0434\u0435\u043c\u043f\u043e\u0442\u0435\u043d\u0442\u043d\u0430\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f processing results \u0441 GitHub\nSupports: Issues, Epics (Projects), Discussions\nSafety: dry-run mode, logging, collision detection", "functions": [{"name": "main", "docstring": "CLI interface", "line_range": [375, 408], "parameters": [], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [17, 48], "parameters": ["self", "repo_owner", "repo_name", "dry_run"], "decorators": []}, {"name": "load_sync_log", "docstring": "Load previous sync results for idempotency", "line_range": [50, 60], "parameters": ["self"], "decorators": []}, {"name": "save_sync_log", "docstring": "Save sync log for future idempotency", "line_range": [62, 65], "parameters": ["self"], "decorators": []}, {"name": "api_request", "docstring": "Safe GitHub API request with rate limiting", "line_range": [67, 94], "parameters": ["self", "method", "endpoint", "data"], "decorators": []}, {"name": "get_existing_issues", "docstring": "Get existing GitHub issues for collision detection", "line_range": [96, 112], "parameters": ["self"], "decorators": []}, {"name": "get_existing_discussions", "docstring": "Get existing GitHub discussions", "line_range": [114, 118], "parameters": ["self"], "decorators": []}, {"name": "item_already_synced", "docstring": "Check if item was already synced (idempotency)", "line_range": [120, 125], "parameters": ["self", "item", "category"], "decorators": []}, {"name": "find_existing_by_title", "docstring": "Find existing GitHub item by title similarity", "line_range": [127, 143], "parameters": ["self", "title", "existing_items"], "decorators": []}, {"name": "create_github_issue", "docstring": "Create GitHub issue from processed item", "line_range": [145, 182], "parameters": ["self", "item"], "decorators": []}, {"name": "create_github_discussion", "docstring": "Create GitHub discussion from processed item", "line_range": [184, 194], "parameters": ["self", "item"], "decorators": []}, {"name": "create_github_epic", "docstring": "Create GitHub epic (as Project or enhanced Issue)", "line_range": [196, 214], "parameters": ["self", "item"], "decorators": []}, {"name": "sync_category", "docstring": "Sync specific category with GitHub", "line_range": [216, 290], "parameters": ["self", "category", "filename"], "decorators": []}, {"name": "validate_before_sync", "docstring": "Pre-sync validation checks", "line_range": [292, 322], "parameters": ["self"], "decorators": []}, {"name": "run_sync", "docstring": "Main sync execution", "line_range": [324, 373], "parameters": ["self", "categories"], "decorators": []}], "classes": [{"name": "GitHubSyncManager", "docstring": "", "line_range": [16, 373], "methods": [{"name": "__init__", "docstring": "", "line_range": [17, 48], "parameters": ["self", "repo_owner", "repo_name", "dry_run"]}, {"name": "load_sync_log", "docstring": "Load previous sync results for idempotency", "line_range": [50, 60], "parameters": ["self"]}, {"name": "save_sync_log", "docstring": "Save sync log for future idempotency", "line_range": [62, 65], "parameters": ["self"]}, {"name": "api_request", "docstring": "Safe GitHub API request with rate limiting", "line_range": [67, 94], "parameters": ["self", "method", "endpoint", "data"]}, {"name": "get_existing_issues", "docstring": "Get existing GitHub issues for collision detection", "line_range": [96, 112], "parameters": ["self"]}, {"name": "get_existing_discussions", "docstring": "Get existing GitHub discussions", "line_range": [114, 118], "parameters": ["self"]}, {"name": "item_already_synced", "docstring": "Check if item was already synced (idempotency)", "line_range": [120, 125], "parameters": ["self", "item", "category"]}, {"name": "find_existing_by_title", "docstring": "Find existing GitHub item by title similarity", "line_range": [127, 143], "parameters": ["self", "title", "existing_items"]}, {"name": "create_github_issue", "docstring": "Create GitHub issue from processed item", "line_range": [145, 182], "parameters": ["self", "item"]}, {"name": "create_github_discussion", "docstring": "Create GitHub discussion from processed item", "line_range": [184, 194], "parameters": ["self", "item"]}, {"name": "create_github_epic", "docstring": "Create GitHub epic (as Project or enhanced Issue)", "line_range": [196, 214], "parameters": ["self", "item"]}, {"name": "sync_category", "docstring": "Sync specific category with GitHub", "line_range": [216, 290], "parameters": ["self", "category", "filename"]}, {"name": "validate_before_sync", "docstring": "Pre-sync validation checks", "line_range": [292, 322], "parameters": ["self"]}, {"name": "run_sync", "docstring": "Main sync execution", "line_range": [324, 373], "parameters": ["self", "categories"]}], "bases": []}], "callgraph": {"__init__": ["print", "os.getenv", "Path", "self.load_sync_log"], "load_sync_log": ["json.load", "open"], "save_sync_log": ["json.dump", "open"], "api_request": ["requests.patch", "ValueError", "requests.post", "print", "response.raise_for_status", "int", "response.json", "method.upper", "time.sleep", "requests.get"], "get_existing_issues": ["self.api_request", "issues.extend", "len"], "get_existing_discussions": [], "item_already_synced": ["item.get"], "find_existing_by_title": ["title.lower", "len", "item.get"], "create_github_issue": ["labels.append", "self.api_request", "print", "processing_meta.get", "item.get"], "create_github_discussion": ["print", "item.get"], "create_github_epic": ["self.api_request", "print", "item.get"], "sync_category": ["print", "self.find_existing_by_title", "self.get_existing_discussions", "datetime.now", "json.load", "existing.get", "self.create_github_discussion", "file_path.exists", "item.get", "self.create_github_epic", "open", "result.get", "self.item_already_synced", "data.get", "self.create_github_issue", "self.get_existing_issues"], "validate_before_sync": ["self.api_request", "print", "user_info.get", "repo_info.get", "core_limit.get", "rate_limit.get"], "run_sync": ["print", "datetime.now", "self.sync_category", "r.get", "results.values", "sum", "self.save_sync_log", "self.validate_before_sync"], "main": ["print", "parser.add_argument", "argparse.ArgumentParser", "len", "GitHubSyncManager", "manager.run_sync", "result.get", "parser.parse_args"]}, "dependencies": ["Any", "Dict", "List", "Optional", "Path", "argparse", "datetime", "json", "os", "pathlib", "requests", "time", "typing"], "hash": "1ee49d0d031a76692ccc03ff995d0a75d198818dcf2c1f625d6e9aee0828a7c9"}, {"module_id": "scripts.process_926_items", "path": "scripts/process_926_items.py", "category": "core", "module_doc": "926 Items Processing Script - Updated Implementation\nProcesses items according to GitHub roadmap + personal management vision\nImplements all decisions from 926_items_processing_execution_plan.md", "functions": [{"name": "__init__", "docstring": "", "line_range": [16, 51], "parameters": ["self"], "decorators": []}, {"name": "load_comprehensive_index", "docstring": "Load the 926 items from comprehensive index", "line_range": [53, 111], "parameters": ["self"], "decorators": []}, {"name": "calculate_confidence_score", "docstring": "Calculate confidence score for categorization decision", "line_range": [113, 146], "parameters": ["self", "item", "category"], "decorators": []}, {"name": "check_t_pot_related", "docstring": "Enhanced T-Pot detection", "line_range": [148, 155], "parameters": ["self", "item"], "decorators": []}, {"name": "check_team_implementable", "docstring": "Check if team can implement without architecture review", "line_range": [157, 176], "parameters": ["self", "item"], "decorators": []}, {"name": "check_personal_vs_team_vs_business", "docstring": "Classify as personal/team/business", "line_range": [178, 214], "parameters": ["self", "item"], "decorators": []}, {"name": "identify_epic_candidates", "docstring": "Identify items that should be grouped into epics", "line_range": [216, 233], "parameters": ["self", "items"], "decorators": []}, {"name": "extract_epic_name", "docstring": "Extract epic name from item", "line_range": [235, 241], "parameters": ["self", "item"], "decorators": []}, {"name": "categorize_item", "docstring": "Main categorization logic with confidence scoring", "line_range": [243, 278], "parameters": ["self", "item"], "decorators": []}, {"name": "find_duplicates", "docstring": "Enhanced duplicate detection with T-Pot special handling", "line_range": [280, 319], "parameters": ["self", "items"], "decorators": []}, {"name": "calculate_similarity", "docstring": "Enhanced similarity calculation", "line_range": [321, 342], "parameters": ["self", "title1", "title2"], "decorators": []}, {"name": "suggest_merge_strategy", "docstring": "Enhanced merge strategy with T-Pot consideration", "line_range": [344, 359], "parameters": ["self", "item1", "item2"], "decorators": []}, {"name": "process_items", "docstring": "Main processing workflow implementing execution plan", "line_range": [361, 468], "parameters": ["self", "items"], "decorators": []}, {"name": "save_results", "docstring": "Save categorized results with enhanced metadata", "line_range": [470, 546], "parameters": ["self"], "decorators": []}, {"name": "get_category_description", "docstring": "Category descriptions per execution plan", "line_range": [548, 562], "parameters": ["self", "category"], "decorators": []}, {"name": "run", "docstring": "Main execution workflow per execution plan", "line_range": [564, 606], "parameters": ["self"], "decorators": []}], "classes": [{"name": "TaskProcessor926", "docstring": "", "line_range": [15, 606], "methods": [{"name": "__init__", "docstring": "", "line_range": [16, 51], "parameters": ["self"]}, {"name": "load_comprehensive_index", "docstring": "Load the 926 items from comprehensive index", "line_range": [53, 111], "parameters": ["self"]}, {"name": "calculate_confidence_score", "docstring": "Calculate confidence score for categorization decision", "line_range": [113, 146], "parameters": ["self", "item", "category"]}, {"name": "check_t_pot_related", "docstring": "Enhanced T-Pot detection", "line_range": [148, 155], "parameters": ["self", "item"]}, {"name": "check_team_implementable", "docstring": "Check if team can implement without architecture review", "line_range": [157, 176], "parameters": ["self", "item"]}, {"name": "check_personal_vs_team_vs_business", "docstring": "Classify as personal/team/business", "line_range": [178, 214], "parameters": ["self", "item"]}, {"name": "identify_epic_candidates", "docstring": "Identify items that should be grouped into epics", "line_range": [216, 233], "parameters": ["self", "items"]}, {"name": "extract_epic_name", "docstring": "Extract epic name from item", "line_range": [235, 241], "parameters": ["self", "item"]}, {"name": "categorize_item", "docstring": "Main categorization logic with confidence scoring", "line_range": [243, 278], "parameters": ["self", "item"]}, {"name": "find_duplicates", "docstring": "Enhanced duplicate detection with T-Pot special handling", "line_range": [280, 319], "parameters": ["self", "items"]}, {"name": "calculate_similarity", "docstring": "Enhanced similarity calculation", "line_range": [321, 342], "parameters": ["self", "title1", "title2"]}, {"name": "suggest_merge_strategy", "docstring": "Enhanced merge strategy with T-Pot consideration", "line_range": [344, 359], "parameters": ["self", "item1", "item2"]}, {"name": "process_items", "docstring": "Main processing workflow implementing execution plan", "line_range": [361, 468], "parameters": ["self", "items"]}, {"name": "save_results", "docstring": "Save categorized results with enhanced metadata", "line_range": [470, 546], "parameters": ["self"]}, {"name": "get_category_description", "docstring": "Category descriptions per execution plan", "line_range": [548, 562], "parameters": ["self", "category"]}, {"name": "run", "docstring": "Main execution workflow per execution plan", "line_range": [564, 606], "parameters": ["self"]}], "bases": []}], "callgraph": {"__init__": ["datetime.now", "Path"], "load_comprehensive_index": ["print", "hash", "item_content.lower", "set", "items.append", "value.items", "index_path.exists", "items.extend", "seen_items.add", "data.items", "len", "any", "unique_items.append", "item.get", "isinstance", "open", "json.load", "str"], "calculate_confidence_score": ["min", "item.get", "self.check_t_pot_related", "sum", "str"], "check_t_pot_related": ["any", "str"], "check_team_implementable": ["str", "sum"], "check_personal_vs_team_vs_business": ["item.get", "max", "str", "sum"], "identify_epic_candidates": ["len", "any", "self.extract_epic_name", "item.get", "epic_groups.items", "str"], "extract_epic_name": ["title.split", "item.get"], "categorize_item": ["any", "self.calculate_confidence_score", "self.check_personal_vs_team_vs_business", "self.check_t_pot_related", "str", "self.check_team_implementable"], "find_duplicates": ["seen_items.items", "duplicates.append", "self.suggest_merge_strategy", "item.get", "self.check_t_pot_related", "self.calculate_similarity"], "calculate_similarity": ["title1.split", "set", "title2.split", "words1.union", "len", "min", "words1.intersection"], "suggest_merge_strategy": ["len", "item2.get", "item1.get", "self.check_t_pot_related", "str"], "process_items": ["print", "id", "set", "self.check_team_implementable", "low_confidence_items.append", "len", "datetime.now", "any", "self.extract_epic_name", "self.find_duplicates", "category.startswith", "self.check_t_pot_related", "duplicate_item_ids.add", "processed_item.copy", "str", "self.categorize_item"], "save_results": ["json.dump", "print", "datetime.now", "len", "open", "self.get_category_description", "item.get", "sum"], "get_category_description": ["descriptions.get"], "run": ["print", "self.load_comprehensive_index", "self.process_items", "self.save_results"]}, "dependencies": ["Any", "Dict", "List", "Path", "Tuple", "datetime", "json", "os", "pathlib", "re", "typing"], "hash": "75943c116813d77b47300deeaeadb26b7ccd4a37912497bdb82871198feedcf5"}, {"module_id": "scripts.github_sync_manager_enhanced", "path": "scripts/github_sync_manager_enhanced.py", "category": "core", "module_doc": "Enhanced GitHub Sync Manager - \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u043b\u0443\u0447\u0448\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0438\u0437 full_project_rollout\n\u0418\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u0443\u0435\u0442: processing results + GitHub API + token management + CLI fallback", "functions": [{"name": "print_info", "docstring": "", "line_range": [25, 26], "parameters": ["msg"], "decorators": []}, {"name": "print_success", "docstring": "", "line_range": [28, 29], "parameters": ["msg"], "decorators": []}, {"name": "print_warning", "docstring": "", "line_range": [31, 32], "parameters": ["msg"], "decorators": []}, {"name": "print_error", "docstring": "", "line_range": [34, 35], "parameters": ["msg"], "decorators": []}, {"name": "print_step", "docstring": "", "line_range": [37, 38], "parameters": ["step", "total", "msg"], "decorators": []}, {"name": "main", "docstring": "Enhanced CLI interface", "line_range": [620, 655], "parameters": [], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [43, 44], "parameters": ["self"], "decorators": []}, {"name": "load_env_file", "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430", "line_range": [46, 57], "parameters": ["self"], "decorators": []}, {"name": "test_github_token", "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0442\u043e\u043a\u0435\u043d\u0430", "line_range": [59, 73], "parameters": ["self", "token"], "decorators": []}, {"name": "check_gh_cli", "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 GitHub CLI", "line_range": [75, 82], "parameters": ["self"], "decorators": []}, {"name": "get_token_from_gh_cli", "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 \u0438\u0437 GitHub CLI", "line_range": [84, 93], "parameters": ["self"], "decorators": []}, {"name": "get_github_token", "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c GitHub \u0442\u043e\u043a\u0435\u043d \u0441 multiple fallbacks\n\nReturns:\n    (token, method) \u0433\u0434\u0435 method = 'env' | 'cli' | 'none'", "line_range": [95, 117], "parameters": ["self"], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [122, 164], "parameters": ["self", "repo_owner", "repo_name", "dry_run"], "decorators": []}, {"name": "detect_repo_from_git", "docstring": "\u0410\u0432\u0442\u043e\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 owner/repo \u0438\u0437 git remote", "line_range": [166, 198], "parameters": ["self"], "decorators": []}, {"name": "load_sync_log", "docstring": "Load previous sync results", "line_range": [200, 211], "parameters": ["self"], "decorators": []}, {"name": "save_sync_log", "docstring": "Save sync log", "line_range": [213, 216], "parameters": ["self"], "decorators": []}, {"name": "api_request", "docstring": "Enhanced API request with CLI fallback", "line_range": [218, 231], "parameters": ["self", "method", "endpoint", "data"], "decorators": []}, {"name": "_api_request_direct", "docstring": "Direct API request", "line_range": [233, 261], "parameters": ["self", "method", "endpoint", "data"], "decorators": []}, {"name": "_api_request_via_cli", "docstring": "API request via GitHub CLI", "line_range": [263, 293], "parameters": ["self", "method", "endpoint", "data"], "decorators": []}, {"name": "create_github_issue_enhanced", "docstring": "Enhanced issue creation (\u0438\u0437 create_github_issues.py)", "line_range": [295, 359], "parameters": ["self", "item"], "decorators": []}, {"name": "_format_acceptance_criteria", "docstring": "Format acceptance criteria from item metadata", "line_range": [361, 380], "parameters": ["self", "item"], "decorators": []}, {"name": "_format_implementation_notes", "docstring": "Format implementation notes", "line_range": [382, 397], "parameters": ["self", "item"], "decorators": []}, {"name": "validate_before_sync", "docstring": "Enhanced validation", "line_range": [399, 434], "parameters": ["self"], "decorators": []}, {"name": "run_enhanced_sync", "docstring": "Enhanced sync with full project rollout integration", "line_range": [436, 494], "parameters": ["self", "categories"], "decorators": []}, {"name": "sync_category_enhanced", "docstring": "Enhanced category sync", "line_range": [496, 554], "parameters": ["self", "category"], "decorators": []}, {"name": "item_already_synced", "docstring": "Check if item was already synced", "line_range": [556, 560], "parameters": ["self", "item", "category"], "decorators": []}, {"name": "create_github_epic_enhanced", "docstring": "Enhanced epic creation", "line_range": [562, 607], "parameters": ["self", "item"], "decorators": []}, {"name": "create_github_discussion_enhanced", "docstring": "Enhanced discussion creation (placeholder - requires GraphQL)", "line_range": [609, 618], "parameters": ["self", "item"], "decorators": []}], "classes": [{"name": "Colors", "docstring": "", "line_range": [18, 23], "methods": [], "bases": []}, {"name": "GitHubTokenManager", "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 GitHub \u0442\u043e\u043a\u0435\u043d\u0430\u043c\u0438 (\u0438\u0437 setup_github_token.sh)", "line_range": [40, 117], "methods": [{"name": "__init__", "docstring": "", "line_range": [43, 44], "parameters": ["self"]}, {"name": "load_env_file", "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430", "line_range": [46, 57], "parameters": ["self"]}, {"name": "test_github_token", "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0442\u043e\u043a\u0435\u043d\u0430", "line_range": [59, 73], "parameters": ["self", "token"]}, {"name": "check_gh_cli", "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 GitHub CLI", "line_range": [75, 82], "parameters": ["self"]}, {"name": "get_token_from_gh_cli", "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 \u0438\u0437 GitHub CLI", "line_range": [84, 93], "parameters": ["self"]}, {"name": "get_github_token", "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c GitHub \u0442\u043e\u043a\u0435\u043d \u0441 multiple fallbacks\n\nReturns:\n    (token, method) \u0433\u0434\u0435 method = 'env' | 'cli' | 'none'", "line_range": [95, 117], "parameters": ["self"]}], "bases": []}, {"name": "EnhancedGitHubSyncManager", "docstring": "\u0423\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u044b\u0439 GitHub Sync Manager \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 \u0432\u0441\u0435\u0445 \u043b\u0443\u0447\u0448\u0438\u0445 \u043f\u0440\u0430\u043a\u0442\u0438\u043a", "line_range": [119, 618], "methods": [{"name": "__init__", "docstring": "", "line_range": [122, 164], "parameters": ["self", "repo_owner", "repo_name", "dry_run"]}, {"name": "detect_repo_from_git", "docstring": "\u0410\u0432\u0442\u043e\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 owner/repo \u0438\u0437 git remote", "line_range": [166, 198], "parameters": ["self"]}, {"name": "load_sync_log", "docstring": "Load previous sync results", "line_range": [200, 211], "parameters": ["self"]}, {"name": "save_sync_log", "docstring": "Save sync log", "line_range": [213, 216], "parameters": ["self"]}, {"name": "api_request", "docstring": "Enhanced API request with CLI fallback", "line_range": [218, 231], "parameters": ["self", "method", "endpoint", "data"]}, {"name": "_api_request_direct", "docstring": "Direct API request", "line_range": [233, 261], "parameters": ["self", "method", "endpoint", "data"]}, {"name": "_api_request_via_cli", "docstring": "API request via GitHub CLI", "line_range": [263, 293], "parameters": ["self", "method", "endpoint", "data"]}, {"name": "create_github_issue_enhanced", "docstring": "Enhanced issue creation (\u0438\u0437 create_github_issues.py)", "line_range": [295, 359], "parameters": ["self", "item"]}, {"name": "_format_acceptance_criteria", "docstring": "Format acceptance criteria from item metadata", "line_range": [361, 380], "parameters": ["self", "item"]}, {"name": "_format_implementation_notes", "docstring": "Format implementation notes", "line_range": [382, 397], "parameters": ["self", "item"]}, {"name": "validate_before_sync", "docstring": "Enhanced validation", "line_range": [399, 434], "parameters": ["self"]}, {"name": "run_enhanced_sync", "docstring": "Enhanced sync with full project rollout integration", "line_range": [436, 494], "parameters": ["self", "categories"]}, {"name": "sync_category_enhanced", "docstring": "Enhanced category sync", "line_range": [496, 554], "parameters": ["self", "category"]}, {"name": "item_already_synced", "docstring": "Check if item was already synced", "line_range": [556, 560], "parameters": ["self", "item", "category"]}, {"name": "create_github_epic_enhanced", "docstring": "Enhanced epic creation", "line_range": [562, 607], "parameters": ["self", "item"]}, {"name": "create_github_discussion_enhanced", "docstring": "Enhanced discussion creation (placeholder - requires GraphQL)", "line_range": [609, 618], "parameters": ["self", "item"]}], "bases": []}], "callgraph": {"print_info": ["print"], "print_success": ["print"], "print_warning": ["print"], "print_error": ["print"], "print_step": ["print"], "__init__": ["self.detect_repo_from_git", "GitHubTokenManager", "print_info", "Path", "self.load_sync_log"], "load_env_file": ["key.strip", "line.startswith", "line.split", "Path", "open", "line.strip", "value.strip", "env_file.exists"], "test_github_token": ["requests.get", "response.json"], "check_gh_cli": ["subprocess.run"], "get_token_from_gh_cli": ["subprocess.run"], "get_github_token": ["self.get_token_from_gh_cli", "self.check_gh_cli", "os.getenv", "self.test_github_token", "print_warning"], "detect_repo_from_git": ["url.startswith", "path.split", "len", "url.replace", "print_info", "url.endswith", "url.split", "subprocess.run", "print_warning"], "load_sync_log": ["json.load", "open"], "save_sync_log": ["json.dump", "open"], "api_request": ["print_error", "self._api_request_via_cli", "time.sleep", "self._api_request_direct"], "_api_request_direct": ["requests.patch", "ValueError", "requests.post", "response.raise_for_status", "int", "response.json", "print_error", "method.upper", "requests.get", "print_warning"], "_api_request_via_cli": ["subprocess.run", "json.dumps", "print_error", "json.loads", "method.upper", "cmd.extend", "print_warning"], "create_github_issue_enhanced": ["self._format_acceptance_criteria", "labels.append", "self.api_request", "print_success", "self._format_implementation_notes", "processing_meta.get", "item.get", "print_info"], "_format_acceptance_criteria": ["criteria.extend", "item.get", "criteria.append"], "_format_implementation_notes": ["processing_meta.get", "item.get", "notes.append"], "validate_before_sync": ["self.api_request", "user_info.get", "print_success", "print_error", "print_step", "repo_info.get", "file_path.exists"], "run_enhanced_sync": ["print", "self.sync_category_enhanced", "print_success", "datetime.now", "enumerate", "print_info", "print_step", "result.get", "self.save_sync_log", "self.validate_before_sync"], "sync_category_enhanced": ["self.create_github_issue_enhanced", "self.create_github_discussion_enhanced", "datetime.now", "json.load", "file_path.exists", "print_error", "print_info", "item.get", "result.get", "open", "self.item_already_synced", "data.get", "self.create_github_epic_enhanced", "print_warning"], "item_already_synced": ["item.get"], "create_github_epic_enhanced": ["print_info", "self.api_request", "item.get", "print_success"], "create_github_discussion_enhanced": ["print_info", "item.get", "print_warning"], "main": ["parser.add_argument", "print_success", "argparse.ArgumentParser", "len", "manager.run_enhanced_sync", "EnhancedGitHubSyncManager", "print_error", "result.get", "parser.parse_args"]}, "dependencies": ["Any", "Dict", "List", "Optional", "Path", "argparse", "datetime", "json", "os", "pathlib", "requests", "subprocess", "sys", "time", "typing"], "hash": "dee5ab49d5c48115c3b9b6df054a1160c44fb7addfa035958aa7db8619301d96"}, {"module_id": "scripts.collect_json", "path": "scripts/collect_json.py", "category": "core", "module_doc": "", "functions": [{"name": "load_json_files", "docstring": "", "line_range": [5, 19], "parameters": ["base_dir"], "decorators": []}], "classes": [], "callgraph": {"load_json_files": ["sorted", "path.open", "json.load", "base_dir.rglob", "current.setdefault", "path.relative_to"]}, "dependencies": ["Path", "json", "pathlib"], "hash": "c8dff991d16ccd9c1a9ee3f83f68adf766195005a3b49ea64a9a99e34902eaa6"}, {"module_id": "scripts.fix_github_script", "path": "scripts/fix_github_script.py", "category": "core", "module_doc": "Quick fix for GitHub issues creation script\n\u0418\u0441\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u043e\u0439 JSON \u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445", "functions": [{"name": "fix_json_loading", "docstring": "\u0418\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0443 JSON \u0434\u0430\u043d\u043d\u044b\u0445", "line_range": [11, 42], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"fix_json_loading": ["print", "Path", "f.write", "open", "content.replace", "f.read"]}, "dependencies": ["Path", "json", "os", "pathlib"], "hash": "749ea82f6bcdc68da77827b691267646be1c85f5b2c20e39d085d768c9e64d87"}, {"module_id": "scripts.collector", "path": "scripts/collector.py", "category": "core", "module_doc": "", "functions": [{"name": "apply_filters", "docstring": "", "line_range": [13, 29], "parameters": ["files", "filters"], "decorators": []}, {"name": "collect_files", "docstring": "", "line_range": [32, 38], "parameters": ["root_dir", "filters"], "decorators": []}, {"name": "generate_struct", "docstring": "", "line_range": [41, 88], "parameters": ["root_dir", "output"], "decorators": []}, {"name": "main", "docstring": "", "line_range": [91, 92], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"apply_filters": ["pattern.startswith", "fnmatch.fnmatch", "filtered.append"], "collect_files": ["apply_filters", "path.is_file", "root_dir.rglob", "files.append", "path.relative_to", "str"], "generate_struct": ["json.dump", "output_path.open", "logger.info", "len", "uuid.uuid4", "existing.get", "collect_files", "Path", "output_path.exists", "json.load", "str"], "main": ["generate_struct"]}, "dependencies": ["Path", "fnmatch", "json", "logging", "pathlib", "uuid"], "hash": "251462380e2e135880f652ce7d9e6a1483d18a1202c336f76ac3f43536505049"}, {"module_id": "scripts.create_github_issues", "path": "scripts/create_github_issues.py", "category": "core", "module_doc": "GitHub Issues Creator for AI-Dogfooding Project\n\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 GitHub issues \u0438\u0437 \u043d\u0430\u0448\u0438\u0445 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0437\u0430\u0434\u0430\u0447", "functions": [{"name": "load_env_file", "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430", "line_range": [16, 28], "parameters": [], "decorators": []}, {"name": "load_epics_data", "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438\u0437 JSON", "line_range": [205, 213], "parameters": [], "decorators": []}, {"name": "main", "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f issues", "line_range": [215, 252], "parameters": [], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [34, 43], "parameters": ["self", "repo_owner", "repo_name", "token", "use_cli"], "decorators": []}, {"name": "create_epic_issue", "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u044d\u043f\u0438\u043a\u0430", "line_range": [45, 83], "parameters": ["self", "epic_data"], "decorators": []}, {"name": "create_task_issue", "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438", "line_range": [85, 128], "parameters": ["self", "task_data", "epic_number"], "decorators": []}, {"name": "_create_issue_via_api", "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub API", "line_range": [130, 150], "parameters": ["self", "title", "body", "labels"], "decorators": []}, {"name": "_create_issue_via_cli", "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub CLI", "line_range": [152, 186], "parameters": ["self", "title", "body", "labels"], "decorators": []}, {"name": "_format_criteria", "docstring": "", "line_range": [188, 189], "parameters": ["self", "criteria"], "decorators": []}, {"name": "_format_tasks", "docstring": "", "line_range": [191, 200], "parameters": ["self", "tasks"], "decorators": []}, {"name": "_format_metrics", "docstring": "", "line_range": [202, 203], "parameters": ["self", "metrics"], "decorators": []}], "classes": [{"name": "GitHubIssuesCreator", "docstring": "", "line_range": [33, 203], "methods": [{"name": "__init__", "docstring": "", "line_range": [34, 43], "parameters": ["self", "repo_owner", "repo_name", "token", "use_cli"]}, {"name": "create_epic_issue", "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u044d\u043f\u0438\u043a\u0430", "line_range": [45, 83], "parameters": ["self", "epic_data"]}, {"name": "create_task_issue", "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438", "line_range": [85, 128], "parameters": ["self", "task_data", "epic_number"]}, {"name": "_create_issue_via_api", "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub API", "line_range": [130, 150], "parameters": ["self", "title", "body", "labels"]}, {"name": "_create_issue_via_cli", "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub CLI", "line_range": [152, 186], "parameters": ["self", "title", "body", "labels"]}, {"name": "_format_criteria", "docstring": "", "line_range": [188, 189], "parameters": ["self", "criteria"]}, {"name": "_format_tasks", "docstring": "", "line_range": [191, 200], "parameters": ["self", "tasks"]}, {"name": "_format_metrics", "docstring": "", "line_range": [202, 203], "parameters": ["self", "metrics"]}], "bases": []}], "callgraph": {"load_env_file": ["print", "key.strip", "line.startswith", "line.split", "Path", "open", "line.strip", "value.strip", "env_file.exists"], "__init__": [], "create_epic_issue": ["self._create_issue_via_cli", "self._create_issue_via_api", "self._format_criteria", "self._format_tasks", "epic_data.get", "self._format_metrics"], "create_task_issue": ["self._create_issue_via_cli", "task_data.get", "self._create_issue_via_api", "self._format_criteria"], "_create_issue_via_api": ["print", "requests.post", "response.json"], "_create_issue_via_cli": ["subprocess.run", "print", "os.unlink", "int", "f.write", "issue_url.split", "open", "os.getpid"], "_format_criteria": [], "_format_tasks": [], "_format_metrics": ["metrics.items"], "load_epics_data": ["print", "epics_file.exists", "Path", "open", "json.load"], "main": ["print", "load_epics_data", "len", "creator.create_task_issue", "os.getenv", "epics_data.get", "creator.create_epic_issue", "epic_data.get", "GitHubIssuesCreator"]}, "dependencies": ["Any", "Dict", "List", "Path", "json", "os", "pathlib", "requests", "subprocess", "sys", "typing"], "hash": "49ba6a19e2c3aa696879c666036ca56bf5678032d3a8a1004c9c1849b87104b7"}, {"module_id": "scripts.session_cli", "path": "scripts/session_cli.py", "category": "core", "module_doc": "Session Management CLI\nAutomates session tracking, worklog updates, and session switching for llmstruct.\nPart of the comprehensive session management system.", "functions": [{"name": "get_current_branch", "docstring": "Get current git branch.", "line_range": [24, 31], "parameters": [], "decorators": []}, {"name": "load_json_file", "docstring": "Load JSON file with error handling.", "line_range": [33, 40], "parameters": ["file_path"], "decorators": []}, {"name": "save_json_file", "docstring": "Save JSON file with error handling.", "line_range": [42, 51], "parameters": ["file_path", "data"], "decorators": []}, {"name": "get_current_timestamp", "docstring": "Get current timestamp in ISO format.", "line_range": [53, 55], "parameters": [], "decorators": []}, {"name": "log_event", "docstring": "Log an event to worklog.json.", "line_range": [57, 88], "parameters": ["event_message", "author"], "decorators": []}, {"name": "switch_session", "docstring": "Switch to a different session or create new one.", "line_range": [90, 141], "parameters": ["session_id"], "decorators": []}, {"name": "list_sessions", "docstring": "List all available sessions.", "line_range": [143, 166], "parameters": [], "decorators": []}, {"name": "show_current_session", "docstring": "Show current session details.", "line_range": [168, 183], "parameters": [], "decorators": []}, {"name": "show_worklog", "docstring": "Show recent worklog entries.", "line_range": [185, 203], "parameters": ["limit"], "decorators": []}, {"name": "main", "docstring": "Main CLI interface.", "line_range": [205, 244], "parameters": [], "decorators": []}], "classes": [{"name": "Colors", "docstring": "", "line_range": [16, 22], "methods": [], "bases": []}], "callgraph": {"get_current_branch": ["subprocess.run"], "load_json_file": ["print", "json.load", "open"], "save_json_file": ["json.dump", "print", "os.makedirs", "open"], "get_current_timestamp": ["datetime.now"], "log_event": ["get_current_branch", "current_session.get", "print", "get_current_timestamp", "load_json_file", "save_json_file"], "switch_session": ["get_current_branch", "print", "log_event", "get_current_timestamp", "load_json_file", "save_json_file"], "list_sessions": ["current_session.get", "print", "load_json_file"], "show_current_session": ["current_session.get", "print", "load_json_file"], "show_worklog": ["print", "len", "reversed", "load_json_file"], "main": ["print", "log_event", "len", "show_worklog", "switch_session", "show_current_session", "list_sessions", "int"]}, "dependencies": ["Path", "datetime", "json", "os", "pathlib", "subprocess", "sys"], "hash": "23aca9a658e60715b7fa3e4a009c3de7baebdd1eca3acae17d87938ae622cc41"}, {"module_id": "scripts.epic_roadmap_manager", "path": "scripts/epic_roadmap_manager.py", "category": "core", "module_doc": "Epic Roadmap Manager - \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430\u043c\u0438 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0441\u0435\u0441\u0441\u0438\u0439\n\n\u0424\u0443\u043d\u043a\u0446\u0438\u0438:\n- \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 roadmap \u0438 \u043f\u043b\u0430\u043d\u043e\u0432\n- \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u0441\u0435\u0441\u0441\u0438\u0439\n- \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u0441 GitHub epics\n- \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u043e\u0432", "functions": [{"name": "main", "docstring": "", "line_range": [259, 291], "parameters": [], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [19, 22], "parameters": ["self"], "decorators": []}, {"name": "load_roadmap", "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c roadmap \u0438\u0437 \u0444\u0430\u0439\u043b\u0430", "line_range": [24, 31], "parameters": ["self"], "decorators": []}, {"name": "save_roadmap", "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c roadmap \u0432 \u0444\u0430\u0439\u043b", "line_range": [33, 40], "parameters": ["self", "roadmap"], "decorators": []}, {"name": "show_overview", "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043e\u0431\u0437\u043e\u0440 roadmap", "line_range": [42, 80], "parameters": ["self"], "decorators": []}, {"name": "show_epic_details", "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u044d\u043f\u0438\u043a\u0430", "line_range": [82, 125], "parameters": ["self", "epic_id"], "decorators": []}, {"name": "start_session", "docstring": "\u041d\u0430\u0447\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043d\u0430\u0434 \u0441\u0435\u0441\u0441\u0438\u0435\u0439", "line_range": [127, 189], "parameters": ["self", "epic_id", "session_id"], "decorators": []}, {"name": "complete_session", "docstring": "\u0417\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e", "line_range": [191, 257], "parameters": ["self", "session_id"], "decorators": []}], "classes": [{"name": "EpicRoadmapManager", "docstring": "", "line_range": [18, 257], "methods": [{"name": "__init__", "docstring": "", "line_range": [19, 22], "parameters": ["self"]}, {"name": "load_roadmap", "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c roadmap \u0438\u0437 \u0444\u0430\u0439\u043b\u0430", "line_range": [24, 31], "parameters": ["self"]}, {"name": "save_roadmap", "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c roadmap \u0432 \u0444\u0430\u0439\u043b", "line_range": [33, 40], "parameters": ["self", "roadmap"]}, {"name": "show_overview", "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043e\u0431\u0437\u043e\u0440 roadmap", "line_range": [42, 80], "parameters": ["self"]}, {"name": "show_epic_details", "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u044d\u043f\u0438\u043a\u0430", "line_range": [82, 125], "parameters": ["self", "epic_id"]}, {"name": "start_session", "docstring": "\u041d\u0430\u0447\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043d\u0430\u0434 \u0441\u0435\u0441\u0441\u0438\u0435\u0439", "line_range": [127, 189], "parameters": ["self", "epic_id", "session_id"]}, {"name": "complete_session", "docstring": "\u0417\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e", "line_range": [191, 257], "parameters": ["self", "session_id"]}], "bases": []}], "callgraph": {"__init__": [], "load_roadmap": ["print", "json.load", "open"], "save_roadmap": ["json.dump", "datetime.now", "print", "open"], "show_overview": ["print", "self.load_roadmap", "stats.get", "epic.get", "roadmap.get", "epics.items"], "show_epic_details": ["print", "self.load_roadmap", "len", "session.get", "epic.get", "roadmap.get", "epic_data.get"], "start_session": ["json.dump", "print", "self.load_roadmap", "datetime.now", "session.get", "self.save_roadmap", "open", "epic.get", "os.makedirs", "roadmap.get", "sess.get", "epic_data.get"], "complete_session": ["current_session.get", "print", "json.dump", "self.load_roadmap", "datetime.now", "roadmap.get", "session.get", "self.save_roadmap", "sessions_log.append", "os.remove", "epic.get", "all", "os.makedirs", "open", "sess.get", "json.load"], "main": ["print", "parser.add_argument", "manager.show_epic_details", "argparse.ArgumentParser", "manager.show_overview", "EpicRoadmapManager", "manager.start_session", "parser.parse_args", "manager.complete_session"]}, "dependencies": ["Path", "argparse", "datetime", "json", "os", "pathlib"], "hash": "5125fc24bf131dbbbda814a26f75ecff0e8d6cebde166de88b637ee22ac7251e"}, {"module_id": "scripts.auto_update_struct", "path": "scripts/auto_update_struct.py", "category": "core", "module_doc": "Automatic struct.json update script\nThis script automatically parses the project and updates struct.json\nwithout requiring LLM intervention.", "functions": [{"name": "detect_project_changes", "docstring": "Detect if project files have changed since last struct.json generation.\nUses git status to check for modifications.", "line_range": [44, 81], "parameters": ["root_dir", "struct_path"], "decorators": []}, {"name": "backup_struct_json", "docstring": "Create a backup of existing struct.json.", "line_range": [84, 97], "parameters": ["struct_path"], "decorators": []}, {"name": "validate_struct_json", "docstring": "Validate generated struct.json for basic structure.", "line_range": [100, 128], "parameters": ["struct_path"], "decorators": []}, {"name": "update_struct_json", "docstring": "Main function to update struct.json automatically.\n\nArgs:\n    root_dir: Project root directory (default: current directory)\n    struct_path: Path to struct.json (default: ./struct.json)\n    force: Force regeneration even if no changes detected\n    config_override: Override default configuration\n\nReturns:\n    bool: True if update was successful", "line_range": [131, 225], "parameters": ["root_dir", "struct_path", "force", "config_override"], "decorators": []}, {"name": "main", "docstring": "Command-line interface for auto-update script.", "line_range": [228, 286], "parameters": [], "decorators": []}, {"name": "load_config", "docstring": "", "line_range": [24, 25], "parameters": [], "decorators": []}, {"name": "load_gitignore", "docstring": "", "line_range": [26, 27], "parameters": [], "decorators": []}, {"name": "generate_json", "docstring": "", "line_range": [28, 29], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"load_config": [], "load_gitignore": [], "generate_json": ["ImportError"], "detect_project_changes": ["logger.info", "logger.warning", "file_path.stat", "Path", "subprocess.run"], "backup_struct_json": ["logger.info", "datetime.now", "Path", "logger.error", "subprocess.run"], "validate_struct_json": ["json.load", "logger.info", "logger.error", "open"], "update_struct_json": ["config.get", "json.dump", "subprocess.run", "logger.info", "load_gitignore", "validate_struct_json", "load_config", "detect_project_changes", "open", "config.update", "os.getcwd", "backup_struct_json", "cli_config.get", "logger.error", "generate_json"], "main": ["logging.getLogger", "parser.add_argument", "print", "argparse.ArgumentParser", "detect_project_changes", "sys.exit", "update_struct_json", "os.getcwd", "parser.parse_args"]}, "dependencies": ["Any", "Dict", "Optional", "Path", "argparse", "datetime", "generate_json", "json", "llmstruct.cli", "llmstruct.generators.json_generator", "load_config", "load_gitignore", "logging", "os", "pathlib", "subprocess", "sys", "typing"], "hash": "505bdb6b282e7e9befc6df4165834fa7481335c96bbb88b04501996e15e173c2"}, {"module_id": "scripts.create_comprehensive_index", "path": "scripts/create_comprehensive_index.py", "category": "core", "module_doc": "Comprehensive Project Index Creator\nScans ALL project directories for tasks, ideas, sessions, and concepts.\nProvides complete visibility into project state and unaccounted innovations.", "functions": [{"name": "main", "docstring": "Main execution function.", "line_range": [714, 735], "parameters": [], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [45, 58], "parameters": ["self", "project_root"], "decorators": []}, {"name": "_init_patterns", "docstring": "Initialize comprehensive extraction patterns.", "line_range": [60, 92], "parameters": ["self"], "decorators": []}, {"name": "scan_all_directories", "docstring": "Scan all configured directories comprehensively.", "line_range": [94, 111], "parameters": ["self"], "decorators": []}, {"name": "_scan_directory", "docstring": "Scan a specific directory according to its configuration.", "line_range": [113, 127], "parameters": ["self", "directory", "config"], "decorators": []}, {"name": "_scan_root_files", "docstring": "Scan root-level files.", "line_range": [129, 133], "parameters": ["self", "config"], "decorators": []}, {"name": "_should_scan_file", "docstring": "Check if file should be scanned based on extension.", "line_range": [135, 137], "parameters": ["self", "file_path", "allowed_types"], "decorators": []}, {"name": "_scan_file", "docstring": "Scan individual file for project items.", "line_range": [139, 152], "parameters": ["self", "file_path", "source_dir", "priority"], "decorators": []}, {"name": "_extract_from_text", "docstring": "Extract items from text/markdown files.", "line_range": [154, 206], "parameters": ["self", "file_path", "content", "source_dir", "priority"], "decorators": []}, {"name": "_extract_from_json", "docstring": "Extract items from JSON files.", "line_range": [208, 225], "parameters": ["self", "file_path", "content", "source_dir", "priority"], "decorators": []}, {"name": "_create_item_from_match", "docstring": "Create ProjectItem from regex match.", "line_range": [227, 249], "parameters": ["self", "match", "content", "file_path", "item_type", "source_dir", "priority"], "decorators": []}, {"name": "_create_checkbox_item", "docstring": "Create ProjectItem from checkbox match.", "line_range": [251, 274], "parameters": ["self", "match", "content", "file_path", "item_type", "source_dir", "priority"], "decorators": []}, {"name": "_create_simple_item", "docstring": "Create simple ProjectItem.", "line_range": [276, 297], "parameters": ["self", "title", "content", "file_path", "item_type", "source_dir", "priority", "position"], "decorators": []}, {"name": "_detect_status", "docstring": "Detect item status from surrounding content.", "line_range": [299, 308], "parameters": ["self", "content", "position"], "decorators": []}, {"name": "_detect_priority", "docstring": "Detect item priority from surrounding content.", "line_range": [310, 319], "parameters": ["self", "content", "position", "default"], "decorators": []}, {"name": "_assess_strategic_value", "docstring": "Assess strategic value of item.", "line_range": [321, 330], "parameters": ["self", "title", "content"], "decorators": []}, {"name": "_extract_context", "docstring": "Extract context around position.", "line_range": [332, 336], "parameters": ["self", "content", "position", "length"], "decorators": []}, {"name": "_detect_category", "docstring": "Detect item category.", "line_range": [338, 351], "parameters": ["self", "title", "content"], "decorators": []}, {"name": "_estimate_effort", "docstring": "Estimate effort required.", "line_range": [353, 362], "parameters": ["self", "title", "content"], "decorators": []}, {"name": "_extract_tags", "docstring": "Extract relevant tags.", "line_range": [364, 378], "parameters": ["self", "title", "content", "source_dir"], "decorators": []}, {"name": "_is_noise_checkbox", "docstring": "Check if checkbox is noise (navigation, etc).", "line_range": [380, 384], "parameters": ["self", "text"], "decorators": []}, {"name": "_parse_json_files", "docstring": "Parse structured JSON files for existing data.", "line_range": [386, 402], "parameters": ["self"], "decorators": []}, {"name": "_process_structured_json", "docstring": "Process structured JSON data.", "line_range": [404, 419], "parameters": ["self", "data", "file_path"], "decorators": []}, {"name": "_add_json_item", "docstring": "Add item from JSON structure.", "line_range": [421, 441], "parameters": ["self", "item", "file_path", "item_type"], "decorators": []}, {"name": "_assess_json_strategic_value", "docstring": "Assess strategic value from JSON item.", "line_range": [443, 450], "parameters": ["self", "item"], "decorators": []}, {"name": "_extract_innovation_concepts", "docstring": "Extract innovation concepts from content.", "line_range": [452, 482], "parameters": ["self", "file_path", "content", "source_dir", "priority"], "decorators": []}, {"name": "_enhance_items", "docstring": "Post-process items to enhance metadata and find relationships.", "line_range": [484, 501], "parameters": ["self"], "decorators": []}, {"name": "_find_related_items", "docstring": "Find related items based on content similarity.", "line_range": [503, 517], "parameters": ["self", "item", "id_map", "title_map"], "decorators": []}, {"name": "generate_comprehensive_report", "docstring": "Generate comprehensive analysis report.", "line_range": [519, 561], "parameters": ["self"], "decorators": []}, {"name": "save_comprehensive_index", "docstring": "Save comprehensive index and reports.", "line_range": [563, 582], "parameters": ["self", "output_dir"], "decorators": []}, {"name": "_generate_analysis_report", "docstring": "Generate human-readable analysis report.", "line_range": [584, 658], "parameters": ["self", "report"], "decorators": []}, {"name": "_format_dict", "docstring": "Format dictionary for markdown display.", "line_range": [660, 662], "parameters": ["self", "d"], "decorators": []}, {"name": "_format_items_list", "docstring": "Format items list for markdown display.", "line_range": [664, 677], "parameters": ["self", "items"], "decorators": []}, {"name": "_extract_json_tasks", "docstring": "Extract tasks from JSON tasks array.", "line_range": [679, 684], "parameters": ["self", "tasks_data", "file_path", "source_dir", "priority"], "decorators": []}, {"name": "_extract_json_ideas", "docstring": "Extract ideas from JSON ideas array.", "line_range": [686, 691], "parameters": ["self", "ideas_data", "file_path", "source_dir", "priority"], "decorators": []}, {"name": "_extract_json_sessions", "docstring": "Extract sessions from JSON sessions array.", "line_range": [693, 698], "parameters": ["self", "sessions_data", "file_path", "source_dir", "priority"], "decorators": []}, {"name": "_extract_json_array", "docstring": "Extract items from JSON array.", "line_range": [700, 711], "parameters": ["self", "array_data", "file_path", "source_dir", "priority"], "decorators": []}], "classes": [{"name": "ProjectItem", "docstring": "Unified representation of any project item (task, idea, session, concept).", "line_range": [22, 39], "methods": [], "bases": []}, {"name": "ComprehensiveIndexer", "docstring": "Comprehensive indexer for all project content.", "line_range": [42, 711], "methods": [{"name": "__init__", "docstring": "", "line_range": [45, 58], "parameters": ["self", "project_root"]}, {"name": "_init_patterns", "docstring": "Initialize comprehensive extraction patterns.", "line_range": [60, 92], "parameters": ["self"]}, {"name": "scan_all_directories", "docstring": "Scan all configured directories comprehensively.", "line_range": [94, 111], "parameters": ["self"]}, {"name": "_scan_directory", "docstring": "Scan a specific directory according to its configuration.", "line_range": [113, 127], "parameters": ["self", "directory", "config"]}, {"name": "_scan_root_files", "docstring": "Scan root-level files.", "line_range": [129, 133], "parameters": ["self", "config"]}, {"name": "_should_scan_file", "docstring": "Check if file should be scanned based on extension.", "line_range": [135, 137], "parameters": ["self", "file_path", "allowed_types"]}, {"name": "_scan_file", "docstring": "Scan individual file for project items.", "line_range": [139, 152], "parameters": ["self", "file_path", "source_dir", "priority"]}, {"name": "_extract_from_text", "docstring": "Extract items from text/markdown files.", "line_range": [154, 206], "parameters": ["self", "file_path", "content", "source_dir", "priority"]}, {"name": "_extract_from_json", "docstring": "Extract items from JSON files.", "line_range": [208, 225], "parameters": ["self", "file_path", "content", "source_dir", "priority"]}, {"name": "_create_item_from_match", "docstring": "Create ProjectItem from regex match.", "line_range": [227, 249], "parameters": ["self", "match", "content", "file_path", "item_type", "source_dir", "priority"]}, {"name": "_create_checkbox_item", "docstring": "Create ProjectItem from checkbox match.", "line_range": [251, 274], "parameters": ["self", "match", "content", "file_path", "item_type", "source_dir", "priority"]}, {"name": "_create_simple_item", "docstring": "Create simple ProjectItem.", "line_range": [276, 297], "parameters": ["self", "title", "content", "file_path", "item_type", "source_dir", "priority", "position"]}, {"name": "_detect_status", "docstring": "Detect item status from surrounding content.", "line_range": [299, 308], "parameters": ["self", "content", "position"]}, {"name": "_detect_priority", "docstring": "Detect item priority from surrounding content.", "line_range": [310, 319], "parameters": ["self", "content", "position", "default"]}, {"name": "_assess_strategic_value", "docstring": "Assess strategic value of item.", "line_range": [321, 330], "parameters": ["self", "title", "content"]}, {"name": "_extract_context", "docstring": "Extract context around position.", "line_range": [332, 336], "parameters": ["self", "content", "position", "length"]}, {"name": "_detect_category", "docstring": "Detect item category.", "line_range": [338, 351], "parameters": ["self", "title", "content"]}, {"name": "_estimate_effort", "docstring": "Estimate effort required.", "line_range": [353, 362], "parameters": ["self", "title", "content"]}, {"name": "_extract_tags", "docstring": "Extract relevant tags.", "line_range": [364, 378], "parameters": ["self", "title", "content", "source_dir"]}, {"name": "_is_noise_checkbox", "docstring": "Check if checkbox is noise (navigation, etc).", "line_range": [380, 384], "parameters": ["self", "text"]}, {"name": "_parse_json_files", "docstring": "Parse structured JSON files for existing data.", "line_range": [386, 402], "parameters": ["self"]}, {"name": "_process_structured_json", "docstring": "Process structured JSON data.", "line_range": [404, 419], "parameters": ["self", "data", "file_path"]}, {"name": "_add_json_item", "docstring": "Add item from JSON structure.", "line_range": [421, 441], "parameters": ["self", "item", "file_path", "item_type"]}, {"name": "_assess_json_strategic_value", "docstring": "Assess strategic value from JSON item.", "line_range": [443, 450], "parameters": ["self", "item"]}, {"name": "_extract_innovation_concepts", "docstring": "Extract innovation concepts from content.", "line_range": [452, 482], "parameters": ["self", "file_path", "content", "source_dir", "priority"]}, {"name": "_enhance_items", "docstring": "Post-process items to enhance metadata and find relationships.", "line_range": [484, 501], "parameters": ["self"]}, {"name": "_find_related_items", "docstring": "Find related items based on content similarity.", "line_range": [503, 517], "parameters": ["self", "item", "id_map", "title_map"]}, {"name": "generate_comprehensive_report", "docstring": "Generate comprehensive analysis report.", "line_range": [519, 561], "parameters": ["self"]}, {"name": "save_comprehensive_index", "docstring": "Save comprehensive index and reports.", "line_range": [563, 582], "parameters": ["self", "output_dir"]}, {"name": "_generate_analysis_report", "docstring": "Generate human-readable analysis report.", "line_range": [584, 658], "parameters": ["self", "report"]}, {"name": "_format_dict", "docstring": "Format dictionary for markdown display.", "line_range": [660, 662], "parameters": ["self", "d"]}, {"name": "_format_items_list", "docstring": "Format items list for markdown display.", "line_range": [664, 677], "parameters": ["self", "items"]}, {"name": "_extract_json_tasks", "docstring": "Extract tasks from JSON tasks array.", "line_range": [679, 684], "parameters": ["self", "tasks_data", "file_path", "source_dir", "priority"]}, {"name": "_extract_json_ideas", "docstring": "Extract ideas from JSON ideas array.", "line_range": [686, 691], "parameters": ["self", "ideas_data", "file_path", "source_dir", "priority"]}, {"name": "_extract_json_sessions", "docstring": "Extract sessions from JSON sessions array.", "line_range": [693, 698], "parameters": ["self", "sessions_data", "file_path", "source_dir", "priority"]}, {"name": "_extract_json_array", "docstring": "Extract items from JSON array.", "line_range": [700, 711], "parameters": ["self", "array_data", "file_path", "source_dir", "priority"]}], "bases": []}], "callgraph": {"__init__": ["self._init_patterns", "Path"], "_init_patterns": ["re.compile"], "scan_all_directories": ["self._scan_root_files", "logger.info", "self._enhance_items", "len", "self._scan_directory", "self._parse_json_files"], "_scan_directory": ["logger.info", "logger.warning", "self._should_scan_file", "dir_path.exists", "file_path.is_file", "dir_path.glob", "self._scan_file"], "_scan_root_files": ["self._should_scan_file", "self._scan_file", "file_path.is_file"], "_should_scan_file": [], "_scan_file": ["self._extract_from_json", "logger.error", "open", "self._extract_from_text", "f.read"], "_extract_from_text": ["match.start", "self._create_item_from_match", "self._extract_innovation_concepts", "self._create_checkbox_item", "self._is_noise_checkbox", "self._create_simple_item", "match.group"], "_extract_from_json": ["self._extract_json_ideas", "logger.warning", "self._extract_json_tasks", "self._extract_json_sessions", "json.loads", "isinstance", "self._extract_json_array"], "_create_item_from_match": ["self._assess_strategic_value", "match.start", "self._estimate_effort", "self._detect_status", "self._detect_category", "self._extract_tags", "datetime.now", "ProjectItem", "title.strip", "self._extract_context", "self._detect_priority", "str", "match.group"], "_create_checkbox_item": ["self._assess_strategic_value", "match.start", "self._estimate_effort", "self._detect_category", "self._extract_tags", "datetime.now", "ProjectItem", "self._extract_context", "self._detect_priority", "str", "match.group"], "_create_simple_item": ["datetime.now", "ProjectItem", "title.strip", "self._extract_context", "str"], "_detect_status": ["max"], "_detect_priority": ["max"], "_assess_strategic_value": [], "_extract_context": ["min", "len", "max"], "_detect_category": ["title.lower", "any"], "_estimate_effort": ["any"], "_extract_tags": ["title.lower", "source_dir.replace", "tags.append"], "_is_noise_checkbox": ["len", "any", "text.lower", "text.strip"], "_parse_json_files": ["file_path.exists", "self._process_structured_json", "logger.error", "open", "json.load"], "_process_structured_json": ["isinstance", "self._add_json_item"], "_add_json_item": ["self._assess_json_strategic_value", "datetime.now", "len", "ProjectItem", "item.get", "str"], "_assess_json_strategic_value": ["item.get"], "_extract_innovation_concepts": ["len", "ProjectItem", "datetime.now", "content.find", "innovation_lines.append", "enumerate", "self._extract_context", "source_dir.replace", "line.strip", "content.split", "str"], "_enhance_items": ["self._find_related_items", "re.sub", "logger.info"], "_find_related_items": ["related.append", "re.findall", "ref_type.upper"], "generate_comprehensive_report": ["by_strategic_value.get", "by_type.get", "asdict", "len", "by_source.get", "datetime.now", "by_status.get", "by_priority.get"], "save_comprehensive_index": ["json.dump", "logger.info", "len", "self.generate_comprehensive_report", "os.makedirs", "f.write", "open", "self._generate_analysis_report"], "_generate_analysis_report": ["len", "self._format_dict", "self._format_items_list"], "_format_dict": ["sorted", "d.items"], "_format_items_list": ["result.append"], "_extract_json_tasks": ["isinstance", "self._add_json_item"], "_extract_json_ideas": ["isinstance", "self._add_json_item"], "_extract_json_sessions": ["isinstance", "self._add_json_item"], "_extract_json_array": ["isinstance", "self._add_json_item", "str"], "main": ["print", "logger.info", "by_strategic.get", "len", "indexer.scan_all_directories", "ComprehensiveIndexer", "indexer.save_comprehensive_index"]}, "dependencies": ["Dict", "List", "Optional", "Path", "Set", "asdict", "dataclass", "dataclasses", "datetime", "json", "logging", "os", "pathlib", "re", "typing"], "hash": "3de71f291650a50e7e3c04fc660a7c31d909a1f929d375ec5324f909c0a81c97"}, {"module_id": "scripts.validate_schemas", "path": "scripts/validate_schemas.py", "category": "core", "module_doc": "", "functions": [], "classes": [], "callgraph": {}, "dependencies": [], "hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"}, {"module_id": "scripts.export_to_github_projects", "path": "scripts/export_to_github_projects.py", "category": "core", "module_doc": "Export script for GitHub Projects integration\nConverts official tasks.json and ideas.json to GitHub Project cards", "functions": [{"name": "main", "docstring": "", "line_range": [183, 266], "parameters": [], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [23, 26], "parameters": ["self", "config_path", "dry_run"], "decorators": []}, {"name": "check_github_cli", "docstring": "Check if GitHub CLI is installed and authenticated", "line_range": [28, 36], "parameters": ["self"], "decorators": []}, {"name": "list_projects", "docstring": "List available GitHub Projects (via gh-projects extension)", "line_range": [38, 55], "parameters": ["self", "owner", "repo"], "decorators": []}, {"name": "create_project_item", "docstring": "Create a new item in GitHub Project (via gh-projects extension)\nTODO: \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 GraphQL API \u0438\u043b\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c", "line_range": [57, 82], "parameters": ["self", "project_number", "title", "body", "owner", "repo"], "decorators": []}, {"name": "export_tasks_to_project", "docstring": "Export tasks to GitHub Project", "line_range": [84, 123], "parameters": ["self", "tasks", "project_number", "owner", "repo"], "decorators": []}, {"name": "export_ideas_to_project", "docstring": "Export ideas to GitHub Project", "line_range": [125, 164], "parameters": ["self", "ideas", "project_number", "owner", "repo"], "decorators": []}, {"name": "filter_data", "docstring": "Filter data by status and priority", "line_range": [166, 180], "parameters": ["self", "data", "status_filter", "priority_filter"], "decorators": []}], "classes": [{"name": "GitHubProjectsExportScript", "docstring": "Extended exporter with command-line interface and GitHub CLI integration", "line_range": [20, 180], "methods": [{"name": "__init__", "docstring": "", "line_range": [23, 26], "parameters": ["self", "config_path", "dry_run"]}, {"name": "check_github_cli", "docstring": "Check if GitHub CLI is installed and authenticated", "line_range": [28, 36], "parameters": ["self"]}, {"name": "list_projects", "docstring": "List available GitHub Projects (via gh-projects extension)", "line_range": [38, 55], "parameters": ["self", "owner", "repo"]}, {"name": "create_project_item", "docstring": "Create a new item in GitHub Project (via gh-projects extension)\nTODO: \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 GraphQL API \u0438\u043b\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c", "line_range": [57, 82], "parameters": ["self", "project_number", "title", "body", "owner", "repo"]}, {"name": "export_tasks_to_project", "docstring": "Export tasks to GitHub Project", "line_range": [84, 123], "parameters": ["self", "tasks", "project_number", "owner", "repo"]}, {"name": "export_ideas_to_project", "docstring": "Export ideas to GitHub Project", "line_range": [125, 164], "parameters": ["self", "ideas", "project_number", "owner", "repo"]}, {"name": "filter_data", "docstring": "Filter data by status and priority", "line_range": [166, 180], "parameters": ["self", "data", "status_filter", "priority_filter"]}], "bases": ["GitHubProjectsExporter"]}], "callgraph": {"__init__": ["super"], "check_github_cli": ["self._run_gh_command", "print"], "list_projects": ["self._run_gh_command", "print", "json.loads", "isinstance"], "create_project_item": ["self._run_gh_command", "print", "output.strip", "str"], "export_tasks_to_project": ["print", "task.get", "len", "self.format_task_for_github", "self.create_project_item"], "export_ideas_to_project": ["idea.get", "print", "len", "self.format_idea_for_github", "self.create_project_item"], "filter_data": ["item.get"], "main": ["print", "parser.add_argument", "exporter.check_github_cli", "exporter.export_ideas_to_project", "argparse.ArgumentParser", "exporter.export_tasks_to_project", "exporter._save_mapping", "GitHubProjectsExportScript", "sys.exit", "exporter.filter_data", "parser.parse_args", "exporter.load_official_data"]}, "dependencies": ["Any", "Dict", "GitHubProjectsExporter", "List", "Optional", "Path", "Tuple", "argparse", "datetime", "json", "llmstruct.gh_view", "pathlib", "subprocess", "sys", "typing"], "hash": "b6b4f700d8fed14e918455d59e88d15bc3259556aad468ee3c3ea4816d710f2a"}, {"module_id": "scripts.validate_refs", "path": "scripts/validate_refs.py", "category": "core", "module_doc": "", "functions": [{"name": "validate_references", "docstring": "", "line_range": [11, 43], "parameters": [], "decorators": []}, {"name": "main", "docstring": "", "line_range": [46, 47], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"validate_references": ["idea.get", "json.dump", "source_file.exists", "target_file.exists", "logger.info", "logger.warning", "broken_links.append", "enumerate", "Path", "logger.error", "json.load"], "main": ["validate_references"]}, "dependencies": ["Path", "json", "logging", "pathlib"], "hash": "6c57e53f4e4e0afdb8e8c78f1e6d38f284721f6729a7197ff483ed29f5363607"}, {"module_id": "scripts.fix_hardcoded_usernames", "path": "scripts/fix_hardcoded_usernames.py", "category": "core", "module_doc": "Fix Hardcoded Usernames Script\nAutomatically detects and replaces hardcoded usernames with dynamic values from .env or git config.", "functions": [{"name": "main", "docstring": "Main execution function.", "line_range": [234, 288], "parameters": [], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [22, 24], "parameters": ["self", "project_root"], "decorators": []}, {"name": "_detect_user_info", "docstring": "Detect user info from .env, git config, or environment.", "line_range": [26, 62], "parameters": ["self"], "decorators": []}, {"name": "_load_from_env", "docstring": "Load user info from .env file.", "line_range": [64, 86], "parameters": ["self"], "decorators": []}, {"name": "_load_from_git", "docstring": "Load user info from git config.", "line_range": [88, 120], "parameters": ["self"], "decorators": []}, {"name": "_load_from_environment", "docstring": "Load user info from environment variables.", "line_range": [122, 128], "parameters": ["self"], "decorators": []}, {"name": "get_user_info", "docstring": "Get detected user information.", "line_range": [130, 132], "parameters": ["self"], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [138, 148], "parameters": ["self", "project_root"], "decorators": []}, {"name": "scan_files", "docstring": "Scan for files containing hardcoded usernames.", "line_range": [150, 172], "parameters": ["self"], "decorators": []}, {"name": "fix_file", "docstring": "Fix hardcoded usernames in a single file.", "line_range": [174, 200], "parameters": ["self", "file_path", "dry_run"], "decorators": []}, {"name": "fix_all_files", "docstring": "Fix hardcoded usernames in all project files.", "line_range": [202, 214], "parameters": ["self", "dry_run"], "decorators": []}, {"name": "generate_env_template", "docstring": "Generate .env template with required variables.", "line_range": [216, 231], "parameters": ["self"], "decorators": []}], "classes": [{"name": "UserInfoDetector", "docstring": "Detect user information from various sources.", "line_range": [19, 132], "methods": [{"name": "__init__", "docstring": "", "line_range": [22, 24], "parameters": ["self", "project_root"]}, {"name": "_detect_user_info", "docstring": "Detect user info from .env, git config, or environment.", "line_range": [26, 62], "parameters": ["self"]}, {"name": "_load_from_env", "docstring": "Load user info from .env file.", "line_range": [64, 86], "parameters": ["self"]}, {"name": "_load_from_git", "docstring": "Load user info from git config.", "line_range": [88, 120], "parameters": ["self"]}, {"name": "_load_from_environment", "docstring": "Load user info from environment variables.", "line_range": [122, 128], "parameters": ["self"]}, {"name": "get_user_info", "docstring": "Get detected user information.", "line_range": [130, 132], "parameters": ["self"]}], "bases": []}, {"name": "HardcodeFixer", "docstring": "Fix hardcoded usernames in project files.", "line_range": [135, 231], "methods": [{"name": "__init__", "docstring": "", "line_range": [138, 148], "parameters": ["self", "project_root"]}, {"name": "scan_files", "docstring": "Scan for files containing hardcoded usernames.", "line_range": [150, 172], "parameters": ["self"]}, {"name": "fix_file", "docstring": "Fix hardcoded usernames in a single file.", "line_range": [174, 200], "parameters": ["self", "file_path", "dry_run"]}, {"name": "fix_all_files", "docstring": "Fix hardcoded usernames in all project files.", "line_range": [202, 214], "parameters": ["self", "dry_run"]}, {"name": "generate_env_template", "docstring": "Generate .env template with required variables.", "line_range": [216, 231], "parameters": ["self"]}], "bases": []}], "callgraph": {"__init__": ["UserInfoDetector", "Path"], "_detect_user_info": ["logger.info", "user_info.get", "user_info.update", "self._load_from_env", "self._load_from_git", "self._load_from_environment", "env_vars.items", "env_info.items"], "_load_from_env": ["key.strip", "line.startswith", "line.split", "logger.error", "open", "line.strip", "value.strip", "env_vars.get", "env_file.exists"], "_load_from_git": ["subprocess.run", "re.search", "logger.error", "match.group"], "_load_from_environment": [], "get_user_info": [], "scan_files": ["logger.warning", "any", "content.count", "open", "str", "files_with_hardcode.append", "f.read"], "fix_file": ["logger.info", "content.count", "f.write", "logger.error", "open", "content.replace", "f.read"], "fix_all_files": ["logger.info", "self.scan_files", "len", "self.fix_file", "str"], "generate_env_template": [], "main": ["replacements.items", "print", "parser.add_argument", "logger.info", "fixer.generate_env_template", "argparse.ArgumentParser", "len", "fixer.fix_all_files", "results.items", "fixer.scan_files", "Path", "f.write", "open", "parser.parse_args", "HardcodeFixer"]}, "dependencies": ["Dict", "List", "Optional", "Path", "Tuple", "argparse", "json", "logging", "os", "pathlib", "re", "subprocess", "typing"], "hash": "04fdd50dde3b144c4c93f598ab0748be398c1287e006924d5a573d5b520395a3"}, {"module_id": "scripts.deploy_embedded_files", "path": "scripts/deploy_embedded_files.py", "category": "core", "module_doc": "", "functions": [{"name": "validate_json", "docstring": "", "line_range": [931, 941], "parameters": ["data", "schema", "base_path"], "decorators": []}, {"name": "backup_files", "docstring": "", "line_range": [944, 950], "parameters": ["target_dir", "backup_root"], "decorators": []}, {"name": "deploy_embedded_files", "docstring": "", "line_range": [953, 1007], "parameters": [], "decorators": []}, {"name": "main", "docstring": "", "line_range": [1010, 1011], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"validate_json": ["logger.warning", "RefResolver", "validate", "logger.error"], "backup_files": ["target_dir.exists", "datetime.now", "shutil.copytree", "logger.info"], "deploy_embedded_files": ["EMBEDDED_FILES.get", "Path.cwd", "json.dump", "target_path.open", "logger.info", "target_path.exists", "logger.warning", "backup_files", "Path", "f.write", "logger.error", "validate_json"], "main": ["deploy_embedded_files"]}, "dependencies": ["Path", "RefResolver", "ValidationError", "datetime", "json", "jsonschema", "logging", "pathlib", "shutil", "validate"], "hash": "965c984b688301f0d0c65fc65cc8c95a878218aec94afab5dca3b3c7f65cea19"}, {"module_id": "scripts.validate_epics", "path": "scripts/validate_epics.py", "category": "core", "module_doc": "Epic Data Validator\n\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0445 \u044d\u043f\u0438\u043a\u043e\u0432 \u043f\u0435\u0440\u0435\u0434 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435\u043c GitHub issues", "functions": [{"name": "validate_epic_structure", "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u044d\u043f\u0438\u043a\u0430", "line_range": [12, 35], "parameters": ["epic"], "decorators": []}, {"name": "validate_task_structure", "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0437\u0430\u0434\u0430\u0447\u0438", "line_range": [37, 53], "parameters": ["task", "epic_id"], "decorators": []}, {"name": "validate_priorities", "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043e\u0432", "line_range": [55, 68], "parameters": ["data"], "decorators": []}, {"name": "validate_task_ids", "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c ID \u0437\u0430\u0434\u0430\u0447", "line_range": [70, 82], "parameters": ["data"], "decorators": []}, {"name": "main", "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438", "line_range": [84, 131], "parameters": [], "decorators": []}], "classes": [], "callgraph": {"validate_epic_structure": ["isinstance", "errors.append"], "validate_task_structure": ["task.get", "isinstance", "errors.append"], "validate_priorities": ["task.get", "epic.get", "data.get", "errors.append"], "validate_task_ids": ["set", "seen_ids.add", "task.get", "epic.get", "errors.append", "data.get"], "main": ["print", "all_errors.extend", "validate_task_structure", "e.get", "validate_task_ids", "len", "validate_priorities", "all_errors.append", "sys.exit", "epics_file.exists", "Path", "isinstance", "open", "validate_epic_structure", "epic.get", "sum", "json.load"]}, "dependencies": ["Any", "Dict", "List", "Path", "json", "pathlib", "sys", "typing"], "hash": "43fb177eab31592c2b7c17c990f728cb1401eeba26a2e3191857ca218208a3df"}, {"module_id": "scripts.validate_json", "path": "scripts/validate_json.py", "category": "core", "module_doc": "JSON Validation Script\nValidates JSON files against their respective schemas.", "functions": [{"name": "load_json", "docstring": "Load JSON file with error handling.", "line_range": [13, 23], "parameters": ["file_path"], "decorators": []}, {"name": "validate_json", "docstring": "Validate a JSON file against a schema.", "line_range": [26, 49], "parameters": ["file_path", "schema_path"], "decorators": []}], "classes": [], "callgraph": {"load_json": ["print", "json.load", "open"], "validate_json": ["print", "validator.validate", "Draft7Validator", "Path", "load_json", "str"]}, "dependencies": ["Draft7Validator", "Path", "ValidationError", "json", "jsonschema", "pathlib", "sys", "validate"], "hash": "0d360b788079e8804f864e0cef5eb33006fb4dbae00eaaea95ef0d692e79640d"}, {"module_id": "scripts.create_tasks_index", "path": "scripts/create_tasks_index.py", "category": "core", "module_doc": "Tasks Index Creator\nScans all documentation files and creates comprehensive index of tasks, EPICs, TODOs, and other actionable items.", "functions": [{"name": "main", "docstring": "Main execution function.", "line_range": [469, 515], "parameters": [], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [42, 44], "parameters": ["self", "project_root"], "decorators": []}, {"name": "_init_patterns", "docstring": "Initialize regex patterns for task extraction.", "line_range": [46, 73], "parameters": ["self"], "decorators": []}, {"name": "extract_from_markdown", "docstring": "Extract tasks from markdown file.", "line_range": [75, 107], "parameters": ["self", "file_path"], "decorators": []}, {"name": "_extract_status", "docstring": "Extract document status.", "line_range": [109, 120], "parameters": ["self", "content"], "decorators": []}, {"name": "_extract_priority", "docstring": "Extract document priority.", "line_range": [122, 135], "parameters": ["self", "content"], "decorators": []}, {"name": "_extract_date", "docstring": "Extract document date.", "line_range": [137, 142], "parameters": ["self", "content"], "decorators": []}, {"name": "_extract_epics", "docstring": "Extract EPIC items.", "line_range": [144, 168], "parameters": ["self", "content", "file_path", "doc_status", "doc_priority", "doc_date"], "decorators": []}, {"name": "_extract_tasks", "docstring": "Extract explicit task items.", "line_range": [170, 194], "parameters": ["self", "content", "file_path", "doc_status", "doc_priority", "doc_date"], "decorators": []}, {"name": "_extract_todos", "docstring": "Extract TODO items.", "line_range": [196, 219], "parameters": ["self", "content", "file_path", "doc_status", "doc_priority", "doc_date"], "decorators": []}, {"name": "_extract_phases", "docstring": "Extract phase/step items.", "line_range": [221, 245], "parameters": ["self", "content", "file_path", "doc_status", "doc_priority", "doc_date"], "decorators": []}, {"name": "_extract_checkboxes", "docstring": "Extract checkbox items as tasks.", "line_range": [247, 275], "parameters": ["self", "content", "file_path", "doc_status", "doc_priority", "doc_date"], "decorators": []}, {"name": "_extract_context", "docstring": "Extract surrounding context for a match.", "line_range": [277, 286], "parameters": ["self", "content", "start", "end", "context_lines"], "decorators": []}, {"name": "__init__", "docstring": "", "line_range": [292, 294], "parameters": ["self", "project_root"], "decorators": []}, {"name": "scan_documentation", "docstring": "Scan all documentation files for tasks.", "line_range": [296, 314], "parameters": ["self"], "decorators": []}, {"name": "generate_index", "docstring": "Generate comprehensive task index.", "line_range": [316, 367], "parameters": ["self", "tasks"], "decorators": []}, {"name": "generate_summary_report", "docstring": "Generate human-readable summary report.", "line_range": [369, 446], "parameters": ["self", "index"], "decorators": []}, {"name": "save_index", "docstring": "Save index and summary to files.", "line_range": [448, 466], "parameters": ["self", "index", "summary", "output_dir"], "decorators": []}], "classes": [{"name": "Task", "docstring": "Represents a single task or actionable item.", "line_range": [21, 36], "methods": [], "bases": []}, {"name": "TaskExtractor", "docstring": "Extract tasks from various document formats.", "line_range": [39, 286], "methods": [{"name": "__init__", "docstring": "", "line_range": [42, 44], "parameters": ["self", "project_root"]}, {"name": "_init_patterns", "docstring": "Initialize regex patterns for task extraction.", "line_range": [46, 73], "parameters": ["self"]}, {"name": "extract_from_markdown", "docstring": "Extract tasks from markdown file.", "line_range": [75, 107], "parameters": ["self", "file_path"]}, {"name": "_extract_status", "docstring": "Extract document status.", "line_range": [109, 120], "parameters": ["self", "content"]}, {"name": "_extract_priority", "docstring": "Extract document priority.", "line_range": [122, 135], "parameters": ["self", "content"]}, {"name": "_extract_date", "docstring": "Extract document date.", "line_range": [137, 142], "parameters": ["self", "content"]}, {"name": "_extract_epics", "docstring": "Extract EPIC items.", "line_range": [144, 168], "parameters": ["self", "content", "file_path", "doc_status", "doc_priority", "doc_date"]}, {"name": "_extract_tasks", "docstring": "Extract explicit task items.", "line_range": [170, 194], "parameters": ["self", "content", "file_path", "doc_status", "doc_priority", "doc_date"]}, {"name": "_extract_todos", "docstring": "Extract TODO items.", "line_range": [196, 219], "parameters": ["self", "content", "file_path", "doc_status", "doc_priority", "doc_date"]}, {"name": "_extract_phases", "docstring": "Extract phase/step items.", "line_range": [221, 245], "parameters": ["self", "content", "file_path", "doc_status", "doc_priority", "doc_date"]}, {"name": "_extract_checkboxes", "docstring": "Extract checkbox items as tasks.", "line_range": [247, 275], "parameters": ["self", "content", "file_path", "doc_status", "doc_priority", "doc_date"]}, {"name": "_extract_context", "docstring": "Extract surrounding context for a match.", "line_range": [277, 286], "parameters": ["self", "content", "start", "end", "context_lines"]}], "bases": []}, {"name": "TaskIndexGenerator", "docstring": "Generate comprehensive task index.", "line_range": [289, 466], "methods": [{"name": "__init__", "docstring": "", "line_range": [292, 294], "parameters": ["self", "project_root"]}, {"name": "scan_documentation", "docstring": "Scan all documentation files for tasks.", "line_range": [296, 314], "parameters": ["self"]}, {"name": "generate_index", "docstring": "Generate comprehensive task index.", "line_range": [316, 367], "parameters": ["self", "tasks"]}, {"name": "generate_summary_report", "docstring": "Generate human-readable summary report.", "line_range": [369, 446], "parameters": ["self", "index"]}, {"name": "save_index", "docstring": "Save index and summary to files.", "line_range": [448, 466], "parameters": ["self", "index", "summary", "output_dir"]}], "bases": []}], "callgraph": {"__init__": ["TaskExtractor", "Path"], "_init_patterns": ["re.compile"], "extract_from_markdown": ["self._extract_status", "open", "tasks.extend", "self._extract_checkboxes", "self._extract_phases", "self._extract_priority", "logger.error", "self._extract_todos", "self._extract_tasks", "self._extract_epics", "f.read", "self._extract_date"], "_extract_status": ["match.group"], "_extract_priority": ["match.group"], "_extract_date": ["datetime.now", "match.group"], "_extract_epics": ["match.start", "self._extract_context", "Task", "match.end", "tasks.append", "str", "match.group"], "_extract_tasks": ["match.start", "self._extract_context", "Task", "match.end", "tasks.append", "str", "match.group"], "_extract_todos": ["match.start", "Task", "tasks.append", "str", "match.group"], "_extract_phases": ["match.start", "self._extract_context", "Task", "match.end", "tasks.append", "str", "match.group"], "_extract_checkboxes": ["match.start", "any", "Task", "task_title.upper", "tasks.append", "str", "match.group"], "_extract_context": ["min", "context.strip", "len", "max", "content.split"], "scan_documentation": ["docs_dir.exists", "all_tasks.extend", "docs_dir.glob", "logger.info"], "generate_index": ["by_priority.items", "len", "by_category.items", "datetime.now", "by_file.items", "asdict", "by_status.items"], "generate_summary_report": ["sorted", "status.upper", "len", "category.upper", "Path", "priority.upper", "file_categories.items"], "save_index": ["json.dump", "logger.info", "output_path.mkdir", "Path", "f.write", "open"], "main": ["generator.generate_index", "parser.add_argument", "generator.save_index", "logger.info", "generator.generate_summary_report", "generator.scan_documentation", "argparse.ArgumentParser", "print", "len", "by_category.get", "sorted", "by_category.items", "by_status.get", "TaskIndexGenerator", "parser.parse_args", "by_status.items"]}, "dependencies": ["Dict", "List", "Optional", "Path", "Tuple", "argparse", "asdict", "dataclass", "dataclasses", "datetime", "json", "logging", "os", "pathlib", "re", "typing"], "hash": "8dc454229e01725267e1ece8a1363faf1501013df5f34f371865de1d1d386035"}, {"module_id": "scripts.team.__init__", "path": "scripts/team/__init__.py", "category": "cli", "module_doc": "", "functions": [], "classes": [], "callgraph": {}, "dependencies": [], "hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"}]}