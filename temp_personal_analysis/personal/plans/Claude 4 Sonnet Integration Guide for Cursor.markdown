# Инструкция для Claude 4 Sonnet в Cursor: Интеграция в рабочий процесс и использование пользовательских скриптов

Эта инструкция предназначена для настройки Claude 4 Sonnet в редакторе Cursor (cursor.ai), чтобы интегрировать его в ваш рабочий процесс и научить использовать ваши скрипты. Она включает информацию о возможностях, ограничениях и примерах настройки, основанных на официальных источниках и данных сообщества. Основной фокус — использование файла `.cursorrules`, режима агента и совместимых расширений VS Code. Language Model Tool API не поддерживается в Cursor, поэтому акцент сделан на альтернативных методах.

---

## Обзор возможностей Cursor и Claude 4 Sonnet

Cursor — это AI-редактор кода, основанный на Visual Studio Code, с улучшенными функциями для работы с искусственным интеллектом. Claude 4 Sonnet, разработанный Anthropic, доступен в Cursor с мая 2025 года и поддерживает задачи кодирования, включая автозавершение, генерацию кода, рефакторинг и отладку ([Claude 4 Announcement](https://forum.cursor.com/t/claude-4-sonnet-opus-now-in-cursor/95241)).

### Основные возможности Claude 4 Sonnet в Cursor
- **Автозавершение кода**: Контекстно-зависимые подсказки (принимайте с помощью **Tab**).
- **Чат с AI**: Задавайте вопросы о коде или запрашивайте помощь через **Ctrl + L** (или **Cmd + L** на Mac).
- **Генерация кода**: Создавайте функции или модули с помощью **Ctrl + K** (или **Cmd + K**).
- **Рефакторинг**: Выделите код и выберите "Rewrite" через **Ctrl + K** для оптимизации.
- **Команды терминала**: Запрашивайте команды для запуска скриптов через чат.
- **Анализ кодовой базы**: Используйте **@Codebase** для анализа проекта или **@Web** для поиска информации в интернете.

### Ограничения
- **Language Model Tool API**: Cursor не поддерживает этот API, что исключает создание пользовательских инструментов, как в VS Code ([VSCode Language Model API Support](https://forum.cursor.com/t/vscode-language-model-api-support/44585)).
- **Совместимость расширений**: Не все расширения VS Code работают в Cursor.
- **Премиум-модели**: Claude 4 Sonnet требует подписки Pro или выше.

---

## Настройка Claude 4 Sonnet в Cursor

Чтобы использовать Claude 4 Sonnet, выполните следующие шаги:

1. **Установите Cursor**: Скачайте с [официального сайта](https://www.cursor.com/en) и установите.
2. **Откройте настройки**: Перейдите в **Settings** (в нижнем левом углу или через меню).
3. **Выберите модель**: В разделе **Models** найдите **Claude 4 Sonnet**. Если модель отсутствует, проверьте подписку (Pro или выше) и обновите Cursor.
4. **Подтвердите выбор**: После выбора модель будет использоваться для всех AI-функций (чат, автозавершение, генерация кода).

---

## Интеграция в рабочий процесс с помощью `.cursorrules`

Для настройки Claude 4 Sonnet на следование вашему рабочему процессу создайте файл `.cursorrules` в корне проекта. Этот Markdown-файл задает стандарты кодирования, рабочий процесс и команды для ваших скриптов. Cursor автоматически использует его для контекста при генерации кода или выполнении задач.

### Пример `.cursorrules` для веб-приложения на Node.js

```markdown
# Описание проекта
Проект — микросервисное приложение на Node.js с TypeScript, Express и MongoDB. Цель — создание масштабируемого и надежного API.

# Стандарты кодирования
- Используйте TypeScript с явными типами для всех функций и переменных.
- Следуйте RESTful-конвенциям для API-эндпоинтов.
- Используйте ESLint с конфигурацией Airbnb.
- Предпочитайте асинхронные функции с async/await.
- Избегайте использования `any` в TypeScript.

# Рабочий процесс
## Разработка новой функции
1. Создайте ветку: `git checkout -b feature/<имя-фичи>`.
2. Добавьте новый эндпоинт в `src/routes`.
3. Напишите тесты в `tests/<имя-фичи>.test.ts`.
4. Запустите линтер: `npm run lint`.
5. Запустите тесты: `npm test`.
6. Создайте пул-реквест в GitHub.

## Тестирование
- Юнит-тесты: `npm test unit`.
- Интеграционные тесты: `npm test integration`.
- Для отладки: `npm run test:debug`.

## Деплой
1. Убедитесь, что все тесты пройдены.
2. Создайте Docker-образ: `docker build -t my-app .`.
3. Выполните деплой: `docker push my-app && kubectl apply -f k8s/deployment.yaml`.

# Часто используемые команды
- Линтер: `npm run lint`
- Запуск dev-сервера: `npm run dev`
- Обновление зависимостей: `npm update`
- Генерация документации: `npm run docs`
```

### Дополнительные настройки
- **Модульные правила**: Для сложных проектов создайте директорию `.cursor/rules` и разбейте правила на файлы, например, `testing.md` или `deployment.md`.
- **Контекст**: Убедитесь, что `.cursorrules` включает все ключевые аспекты вашего рабочего процесса, чтобы Claude 4 Sonnet генерировал релевантный код.

---

## Использование режима агента для выполнения скриптов

Режим агента в Cursor позволяет выполнять команды терминала и взаимодействовать с файлами ([Cursor Features](https://www.cursor.com/en/features)). Это основной способ интегрировать ваши скрипты в рабочий процесс.

### Как использовать
1. **Активируйте режим агента**: Нажмите **Cmd + .** или выберите "Agent" в Composer (панель чата).
2. **Запросите команду**: Например, напишите в чате: "Запусти мой скрипт `deploy.sh`."
3. **Выполните команду**: Claude 4 Sonnet сгенерирует команду, например, `bash deploy.sh`, которую вы можете запустить в терминале.

### Пример запроса
- **Запрос**: "Сгенерируй команду для запуска `npm test`."
- **Ответ**: `npm test`

---

## Использование расширений VS Code

Cursor поддерживает расширения VS Code, что позволяет использовать сторонние инструменты для интеграции скриптов. Например, [vibe-tools](https://github.com/eastlondoner/cursor-tools) расширяет возможности агента Cursor, позволяя выполнять команды через CLI.

### Как установить
1. Откройте панель **Extensions** в Cursor.
2. Найдите расширение (например, `vibe-tools`) или импортируйте его из VS Code Marketplace.
3. Проверьте совместимость, так как некоторые расширения могут не работать.

### Ограничение
Не все расширения, использующие Language Model API, совместимы с Cursor из-за различий в реализации AI.

---

## Примеры использования Claude 4 Sonnet

1. **Генерация REST API**:
   - **Запрос**: "Создай REST API эндпоинт для получения списка пользователей на TypeScript, следуя стандартам из `.cursorrules`."
   - **Ответ**:
     ```typescript
     import { Request, Response } from 'express';
     import User from '../models/user';

     export const getUsers = async (req: Request, res: Response): Promise<void> => {
       const users = await User.find();
       res.json(users);
     };
     ```

2. **Отладка кода**:
   - Выделите проблемный код, например, цикл с ошибкой.
   - Нажмите **Ctrl + K** и выберите "Rewrite".
   - Claude 4 Sonnet предложит исправленную версию или объяснит проблему.

3. **Запуск скрипта**:
   - **Запрос**: "Сгенерируй команду для запуска `deploy.sh`."
   - **Ответ**: `bash deploy.sh`

4. **Анализ кодовой базы**:
   - **Запрос**: "@Codebase Какие основные компоненты этого проекта?"
   - **Ответ**: "Проект состоит из маршрутов в `src/routes`, моделей в `src/models` и тестов в `tests`."

---

## Сравнительная таблица методов интеграции

| Метод                  | Возможность выполнения скриптов | Сложность реализации | Подходит для протоколов | Подходит для гибрида LLM+скрипты |
|-------------------------|----------------------------------|-----------------------|-------------------------|-----------------------------------|
| `.cursorrules`         | Нет                             | Низкая                | Да                      | Нет                               |
| Режим агента           | Да                              | Средняя               | Да                      | Да                                |
| Расширения VS Code     | Частично                       | Высокая               | Да                      | Частично                          |
| Language Model Tool API| Нет                             | Высокая               | Нет                     | Нет                               |

---

## Рекомендации

- **Создайте `.cursorrules`**: Это самый простой способ задать стандарты и рабочий процесс. Убедитесь, что файл включает все аспекты вашего воркфлоу.
- **Используйте режим агента**: Для выполнения скриптов запрашивайте команды через чат или Composer.
- **Проверяйте расширения**: Убедитесь, что используемые расширения VS Code совместимы с Cursor.
- **Обновляйте Cursor**: Регулярно проверяйте обновления для доступа к новым функциям и моделям.
- **Тестируйте запросы**: Экспериментируйте с формулировками в чате, чтобы получить наиболее точные ответы, например, указывайте "соблюдай `.cursorrules`".

---

## Заключение

Claude 4 Sonnet — мощная модель для кодирования, которая может быть интегрирована в ваш рабочий процесс в Cursor через автозавершение, чат, генерацию кода и команды терминала. Хотя Language Model Tool API не поддерживается, файл `.cursorrules` и режим агента позволяют настроить поведение модели и выполнять ваши скрипты. Для более сложных интеграций используйте совместимые расширения VS Code, такие как vibe-tools. Эта инструкция предоставляет все необходимое для настройки Claude 4 Sonnet, чтобы он следовал вашему рабочему процессу и использовал ваши скрипты.

---

## Ключевые источники
- [Cursor Features Overview](https://www.cursor.com/en/features)
- [Claude 4 Sonnet and Opus in Cursor](https://forum.cursor.com/t/claude-4-sonnet-opus-now-in-cursor/95241)
- [Anthropic Claude 4 Announcement](https://www.anthropic.com/news/claude-4)
- [VS Code Language Model Tool API Documentation](https://code.visualstudio.com/api/extension-guides/tools)
- [VS Code Language Model API Support Issue](https://forum.cursor.com/t/vscode-language-model-api-support/44585)
- [vibe-tools for Cursor Agent](https://github.com/eastlondoner/cursor-tools)