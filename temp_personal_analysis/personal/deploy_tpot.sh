#!/bin/bash

# T-Pot Honeypot –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –¥–ª—è Red OS 7.3
# –í–µ—Ä—Å–∏—è: 1.0
# –ê–≤—Ç–æ—Ä: kpblcaoo
# –î–∞—Ç–∞: $(date +%Y-%m-%d)

set -e  # –í—ã—Ö–æ–¥ –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
LOG_FILE="/tmp/tpot_deploy_$(date +%Y%m%d_%H%M%S).log"
exec > >(tee -a "$LOG_FILE")
exec 2>&1

echo -e "${BLUE}========================================${NC}"
echo -e "${BLUE}    T-Pot Honeypot Deployment Script   ${NC}"
echo -e "${BLUE}         Red OS 7.3 Compatible         ${NC}"
echo -e "${BLUE}========================================${NC}"
echo

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
if [[ $EUID -eq 0 ]]; then
   echo -e "${RED}‚ùå –ù–µ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –æ—Ç root!${NC}"
   echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ sudo —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
   exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –û–°
check_os() {
    echo -e "${BLUE}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...${NC}"
    
    if [[ ! -f /etc/redhat-release ]]; then
        echo -e "${RED}‚ùå –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è Red OS/RHEL!${NC}"
        exit 1
    fi
    
    OS_VERSION=$(cat /etc/redhat-release)
    echo -e "${GREEN}‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞: $OS_VERSION${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
    ARCH=$(uname -m)
    if [[ "$ARCH" != "x86_64" ]]; then
        echo -e "${YELLOW}‚ö†Ô∏è  –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ $ARCH –º–æ–∂–µ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è${NC}"
    fi
    
    echo -e "${GREEN}‚úÖ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: $ARCH${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
check_requirements() {
    echo -e "${BLUE}üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ RAM
    TOTAL_RAM=$(free -g | awk 'NR==2{print $2}')
    if [[ $TOTAL_RAM -lt 4 ]]; then
        echo -e "${RED}‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ RAM: ${TOTAL_RAM}GB (–º–∏–Ω–∏–º—É–º 4GB)${NC}"
        exit 1
    fi
    echo -e "${GREEN}‚úÖ RAM: ${TOTAL_RAM}GB${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞
    FREE_SPACE=$(df -BG / | awk 'NR==2 {print $4}' | sed 's/G//')
    if [[ $FREE_SPACE -lt 20 ]]; then
        echo -e "${RED}‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞: ${FREE_SPACE}GB (–º–∏–Ω–∏–º—É–º 20GB)${NC}"
        exit 1
    fi
    echo -e "${GREEN}‚úÖ –°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ: ${FREE_SPACE}GB${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏
    if ! ping -c 1 8.8.8.8 &> /dev/null; then
        echo -e "${RED}‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É${NC}"
        exit 1
    fi
    echo -e "${GREEN}‚úÖ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_dependencies() {
    echo -e "${BLUE}üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...${NC}"
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
    echo "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã..."
    sudo yum update -y
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ EPEL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ EPEL..."
    sudo yum install -y epel-release
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
    echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö –ø–∞–∫–µ—Ç–æ–≤..."
    sudo yum install -y \
        curl \
        wget \
        git \
        vim \
        htop \
        net-tools \
        firewalld \
        jq \
        unzip
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
    echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker..."
    if ! command -v docker &> /dev/null; then
        # –î–æ–±–∞–≤–ª—è–µ–º Docker —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        sudo yum install -y yum-utils
        sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker
        sudo yum install -y docker-ce docker-ce-cli containerd.io
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏ –≤–∫–ª—é—á–∞–µ–º Docker
        sudo systemctl start docker
        sudo systemctl enable docker
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É docker
        sudo usermod -aG docker $USER
        
        echo -e "${GREEN}‚úÖ Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
    else
        echo -e "${GREEN}‚úÖ Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
    fi
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose
    echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose..."
    if ! command -v docker-compose &> /dev/null; then
        DOCKER_COMPOSE_VERSION="2.24.1"
        sudo curl -L "https://github.com/docker/compose/releases/download/v${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏–º–ª–∏–Ω–∫ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        sudo ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
        
        echo -e "${GREEN}‚úÖ Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
    else
        echo -e "${GREEN}‚úÖ Docker Compose —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    docker --version
    docker-compose --version
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ firewall
configure_firewall() {
    echo -e "${BLUE}üî• –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–∂—Å–µ—Ç–µ–≤–æ–≥–æ —ç–∫—Ä–∞–Ω–∞...${NC}"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º firewalld
    sudo systemctl start firewalld
    sudo systemctl enable firewalld
    
    # Honeypot –ø–æ—Ä—Ç—ã
    PORTS=(
        "21/tcp"    # FTP
        "22/tcp"    # SSH
        "23/tcp"    # Telnet
        "25/tcp"    # SMTP
        "53/tcp"    # DNS
        "53/udp"    # DNS
        "80/tcp"    # HTTP
        "443/tcp"   # HTTPS
        "993/tcp"   # IMAPS
        "995/tcp"   # POP3S
        "1433/tcp"  # MSSQL
        "3306/tcp"  # MySQL
        "5432/tcp"  # PostgreSQL
        "8080/tcp"  # Honeytrap
        "8443/tcp"  # Honeytrap HTTPS
    )
    
    # Web interface –ø–æ—Ä—Ç—ã
    WEB_PORTS=(
        "64294/tcp" # T-Pot WebUI
        "64295/tcp" # Kibana
        "64296/tcp" # ES Head
    )
    
    echo "–û—Ç–∫—Ä—ã–≤–∞–µ–º honeypot –ø–æ—Ä—Ç—ã..."
    for port in "${PORTS[@]}"; do
        sudo firewall-cmd --permanent --add-port=$port
        echo "  ‚úì –ü–æ—Ä—Ç $port –æ—Ç–∫—Ä—ã—Ç"
    done
    
    echo "–û—Ç–∫—Ä—ã–≤–∞–µ–º –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ—Ä—Ç—ã..."
    for port in "${WEB_PORTS[@]}"; do
        sudo firewall-cmd --permanent --add-port=$port
        echo "  ‚úì –ü–æ—Ä—Ç $port –æ—Ç–∫—Ä—ã—Ç"
    done
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–∞
    sudo firewall-cmd --reload
    
    echo -e "${GREEN}‚úÖ Firewall –Ω–∞—Å—Ç—Ä–æ–µ–Ω${NC}"
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
create_project_structure() {
    echo -e "${BLUE}üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...${NC}"
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
    TPOT_DIR="$HOME/tpot-deployment"
    if [[ -d "$TPOT_DIR" ]]; then
        echo -e "${YELLOW}‚ö†Ô∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $TPOT_DIR —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç${NC}"
        read -p "–£–¥–∞–ª–∏—Ç—å –∏ —Å–æ–∑–¥–∞—Ç—å –∑–∞–Ω–æ–≤–æ? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            rm -rf "$TPOT_DIR"
        else
            echo "–ò—Å–ø–æ–ª—å–∑—É—é —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é"
        fi
    fi
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    mkdir -p "$TPOT_DIR"/{conf/{logstash,filebeat,nginx,cowrie,dionaea,honeytrap},web,logs,data}
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    sudo mkdir -p /opt/tpot/{data,conf,logs}
    sudo chown -R $USER:$USER /opt/tpot
    
    cd "$TPOT_DIR"
    
    echo -e "${GREEN}‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ $TPOT_DIR${NC}"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
create_config_files() {
    echo -e "${BLUE}‚öôÔ∏è  –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...${NC}"
    
    # Docker Compose (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º)
    if [[ ! -f docker-compose.yml ]]; then
        echo "–°–æ–∑–¥–∞–Ω–∏–µ docker-compose.yml..."
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –∏–ª–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ .personal
        cp /home/kpblc/projects/github/llmstruct/.personal/tpot-docker-compose.yml docker-compose.yml
    fi
    
    # Logstash –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    if [[ ! -f conf/logstash/tpot.conf ]]; then
        echo "–°–æ–∑–¥–∞–Ω–∏–µ Logstash –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
        cp /home/kpblc/projects/github/llmstruct/.personal/conf-logstash-tpot.conf conf/logstash/tpot.conf
    fi
    
    # Filebeat –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    if [[ ! -f conf/filebeat/filebeat.yml ]]; then
        echo "–°–æ–∑–¥–∞–Ω–∏–µ Filebeat –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
        cp /home/kpblc/projects/github/llmstruct/.personal/conf-filebeat-filebeat.yml conf/filebeat/filebeat.yml
    fi
    
    # Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    if [[ ! -f conf/nginx/default.conf ]]; then
        echo "–°–æ–∑–¥–∞–Ω–∏–µ Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
        cp /home/kpblc/projects/github/llmstruct/.personal/conf-nginx-default.conf conf/nginx/default.conf
    fi
    
    # –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    if [[ ! -f web/index.html ]]; then
        echo "–°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞..."
        cp /home/kpblc/projects/github/llmstruct/.personal/web-index.html web/index.html
    fi
    
    echo -e "${GREEN}‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã${NC}"
}

# –ó–∞–ø—É—Å–∫ T-Pot
start_tpot() {
    echo -e "${BLUE}üöÄ –ó–∞–ø—É—Å–∫ T-Pot...${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ Docker
    if ! docker ps &> /dev/null; then
        echo -e "${YELLOW}‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤ Docker${NC}"
        echo "–í—ã–ø–æ–ª–Ω–∏—Ç–µ: newgrp docker"
        echo "–ò–ª–∏ –ø–µ—Ä–µ–ª–æ–≥–∏–Ω—å—Ç–µ—Å—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: docker-compose up -d"
        return
    fi
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞–∑—ã
    echo "–ó–∞–≥—Ä—É–∑–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..."
    docker-compose pull
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
    echo "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    docker-compose up -d
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
    echo "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    sleep 30
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    docker-compose ps
    
    echo -e "${GREEN}‚úÖ T-Pot –∑–∞–ø—É—â–µ–Ω!${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
verify_installation() {
    echo -e "${BLUE}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏...${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    RUNNING_CONTAINERS=$(docker-compose ps | grep "Up" | wc -l)
    TOTAL_CONTAINERS=$(docker-compose ps | grep -v "Name" | grep -v "^$" | wc -l)
    
    echo "–ó–∞–ø—É—â–µ–Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: $RUNNING_CONTAINERS/$TOTAL_CONTAINERS"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç—ã
    echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤..."
    PORTS=("64294" "64295" "9200")
    for port in "${PORTS[@]}"; do
        if netstat -tuln | grep ":$port " &> /dev/null; then
            echo -e "  ‚úÖ –ü–æ—Ä—Ç $port: ${GREEN}–æ—Ç–∫—Ä—ã—Ç${NC}"
        else
            echo -e "  ‚ùå –ü–æ—Ä—Ç $port: ${RED}–∑–∞–∫—Ä—ã—Ç${NC}"
        fi
    done
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Elasticsearch
    echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ Elasticsearch..."
    if curl -s http://localhost:9200/_cluster/health | grep -q "green\|yellow"; then
        echo -e "  ‚úÖ Elasticsearch: ${GREEN}—Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
    else
        echo -e "  ‚ùå Elasticsearch: ${RED}–Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç${NC}"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞..."
    if curl -s http://localhost:64294/ | grep -q "T-Pot"; then
        echo -e "  ‚úÖ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: ${GREEN}–¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
    else
        echo -e "  ‚ùå –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: ${RED}–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
    fi
    
    echo -e "${GREEN}‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞${NC}"
}

# –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞
create_systemd_service() {
    echo -e "${BLUE}üîß –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞...${NC}"
    
    SERVICE_FILE="/etc/systemd/system/tpot.service"
    
    sudo tee "$SERVICE_FILE" > /dev/null <<EOF
[Unit]
Description=T-Pot Honeypot
Requires=docker.service
After=docker.service

[Service]
Type=oneshot
RemainAfterExit=yes
WorkingDirectory=$PWD
ExecStart=/usr/local/bin/docker-compose up -d
ExecStop=/usr/local/bin/docker-compose down
User=$USER
Group=docker

[Install]
WantedBy=multi-user.target
EOF
    
    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º systemd –∏ –≤–∫–ª—é—á–∞–µ–º —Å–µ—Ä–≤–∏—Å
    sudo systemctl daemon-reload
    sudo systemctl enable tpot.service
    
    echo -e "${GREEN}‚úÖ Systemd —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω –∏ –≤–∫–ª—é—á–µ–Ω${NC}"
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
create_monitoring_scripts() {
    echo -e "${BLUE}üìä –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...${NC}"
    
    # –°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    cat > monitor_tpot.sh <<'EOF'
#!/bin/bash

echo "=== T-Pot Status Monitor ==="
echo "–í—Ä–µ–º—è: $(date)"
echo

echo "Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:"
docker-compose ps

echo -e "\n–°—Ç–∞—Ç—É—Å Elasticsearch:"
curl -s http://localhost:9200/_cluster/health | jq '.status' 2>/dev/null || echo "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

echo -e "\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞ /opt/tpot:"
du -sh /opt/tpot/* 2>/dev/null

echo -e "\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:"
free -h

echo -e "\n–°–µ—Ç–µ–≤—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ honeypot –ø–æ—Ä—Ç–∞—Ö:"
netstat -an | grep -E ":(22|23|21|80|443|3306|5432|1433) " | head -10
EOF
    
    chmod +x monitor_tpot.sh
    
    # –°–∫—Ä–∏–ø—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –ª–æ–≥–æ–≤
    cat > export_logs.sh <<'EOF'
#!/bin/bash

EXPORT_DIR="/tmp/tpot_export_$(date +%Y%m%d_%H%M%S)"
mkdir -p "$EXPORT_DIR"

echo "–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö T-Pot –≤ $EXPORT_DIR..."

# –≠–∫—Å–ø–æ—Ä—Ç –∏–∑ Elasticsearch
curl -s "http://localhost:9200/tpot-*/_search?size=1000&sort=@timestamp:desc" > "$EXPORT_DIR/elasticsearch_data.json"

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤
cp -r /opt/tpot/logs/* "$EXPORT_DIR/" 2>/dev/null

# –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
tar -czf "$EXPORT_DIR.tar.gz" -C "$(dirname $EXPORT_DIR)" "$(basename $EXPORT_DIR)"

echo "–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: $EXPORT_DIR.tar.gz"
EOF
    
    chmod +x export_logs.sh
    
    echo -e "${GREEN}‚úÖ –°–∫—Ä–∏–ø—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–∑–¥–∞–Ω—ã${NC}"
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
show_results() {
    echo
    echo -e "${GREEN}========================================${NC}"
    echo -e "${GREEN}    T-Pot Honeypot —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç!  ${NC}"
    echo -e "${GREEN}========================================${NC}"
    echo
    
    # –ü–æ–ª—É—á–∞–µ–º IP –∞–¥—Ä–µ—Å
    LOCAL_IP=$(hostname -I | awk '{print $1}')
    
    echo -e "${BLUE}üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:${NC}"
    echo "  üåê –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å:     http://$LOCAL_IP:64294/"
    echo "  üìä Kibana Dashboard:   http://$LOCAL_IP:64295/"
    echo "  üîß Elasticsearch API:  http://$LOCAL_IP:9200/"
    echo
    
    echo -e "${BLUE}üçØ –ê–∫—Ç–∏–≤–Ω—ã–µ honeypot —Å–µ—Ä–≤–∏—Å—ã:${NC}"
    echo "  üîê SSH/Telnet:    –ø–æ—Ä—Ç—ã 22, 23"
    echo "  üåê HTTP/HTTPS:    –ø–æ—Ä—Ç—ã 80, 443"
    echo "  üìÅ FTP:           –ø–æ—Ä—Ç 21"
    echo "  üìß SMTP:          –ø–æ—Ä—Ç 25"
    echo "  üóÑÔ∏è  MySQL:        –ø–æ—Ä—Ç 3306"
    echo "  üóÑÔ∏è  PostgreSQL:   –ø–æ—Ä—Ç 5432"
    echo "  üóÑÔ∏è  MSSQL:        –ø–æ—Ä—Ç 1433"
    echo "  ‚ùì Unknown:       –ø–æ—Ä—Ç—ã 8080, 8443"
    echo
    
    echo -e "${BLUE}üîß –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:${NC}"
    echo "  –°—Ç–∞—Ç—É—Å:           ./monitor_tpot.sh"
    echo "  –õ–æ–≥–∏:             docker-compose logs -f"
    echo "  –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫:       docker-compose restart"
    echo "  –û—Å—Ç–∞–Ω–æ–≤–∫–∞:        docker-compose down"
    echo "  –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö:   ./export_logs.sh"
    echo
    
    echo -e "${BLUE}üìù –õ–æ–≥–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: $LOG_FILE${NC}"
    echo
    
    echo -e "${YELLOW}‚ö†Ô∏è  –í–∞–∂–Ω–æ:${NC}"
    echo "  ‚Ä¢ T-Pot –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å–∏—Å—Ç–µ–º—ã"
    echo "  ‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ª–æ–≥–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö —É–≥—Ä–æ–∑"
    echo "  ‚Ä¢ –î–µ–ª–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –¥–∞–Ω–Ω—ã—Ö"
    echo "  ‚Ä¢ –û–±–Ω–æ–≤–ª—è–π—Ç–µ Docker –æ–±—Ä–∞–∑—ã: docker-compose pull"
    echo
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo -e "${BLUE}–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ T-Pot Honeypot...${NC}"
    echo
    
    check_os
    check_requirements
    install_dependencies
    configure_firewall
    create_project_structure
    create_config_files
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ Docker –ø—Ä–∞–≤–∞—Ö
    if ! groups $USER | grep -q docker; then
        echo -e "${YELLOW}‚ö†Ô∏è  –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤ Docker${NC}"
        read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? Docker –∫–æ–º–∞–Ω–¥—ã –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å. (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            echo "–ü–µ—Ä–µ–ª–æ–≥–∏–Ω—å—Ç–µ—Å—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞."
            exit 0
        fi
    fi
    
    start_tpot
    verify_installation
    create_systemd_service
    create_monitoring_scripts
    show_results
    
    echo -e "${GREEN}üéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ T-Pot –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!${NC}"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
trap 'echo -e "\n${RED}‚ùå –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ${NC}"; exit 1' INT TERM

# –ó–∞–ø—É—Å–∫
main "$@"
