input {
  # Логи от Filebeat
  beats {
    port => 5044
  }
  
  # Прямое чтение файлов логов
  file {
    path => "/opt/tpot/logs/**/*.log"
    start_position => "beginning"
    type => "honeypot_file"
    codec => "json_lines"
    discover_interval => 15
  }
  
  # Логи Cowrie SSH/Telnet honeypot
  file {
    path => "/opt/tpot/logs/cowrie.log"
    start_position => "beginning"
    type => "cowrie"
    codec => "json_lines"
  }
  
  # Логи Dionaea multi-protocol honeypot
  file {
    path => "/opt/tpot/logs/dionaea.log"
    start_position => "beginning"
    type => "dionaea"
    codec => "json_lines"
  }
  
  # Логи Honeytrap
  file {
    path => "/opt/tpot/logs/honeytrap.log"
    start_position => "beginning"
    type => "honeytrap"
    codec => "json_lines"
  }
}

filter {
  # Добавление метки времени
  if ![timestamp] and [@timestamp] {
    mutate {
      add_field => { "log_timestamp" => "%{@timestamp}" }
    }
  }
  
  # Обработка логов Cowrie
  if [type] == "cowrie" {
    mutate { 
      add_field => { 
        "honeypot" => "cowrie"
        "honeypot_type" => "ssh_telnet"
      } 
    }
    
    # Извлечение IP атакующего
    if [src_ip] {
      mutate { add_field => { "attacker_ip" => "%{src_ip}" } }
    }
    
    # Классификация событий
    if [eventid] {
      if [eventid] == "cowrie.login.success" {
        mutate { add_field => { "attack_type" => "successful_login" } }
        mutate { add_field => { "severity" => "high" } }
      } else if [eventid] == "cowrie.login.failed" {
        mutate { add_field => { "attack_type" => "failed_login" } }
        mutate { add_field => { "severity" => "medium" } }
      } else if [eventid] == "cowrie.command.input" {
        mutate { add_field => { "attack_type" => "command_execution" } }
        mutate { add_field => { "severity" => "high" } }
      }
    }
  }
  
  # Обработка логов Dionaea
  if [type] == "dionaea" {
    mutate { 
      add_field => { 
        "honeypot" => "dionaea"
        "honeypot_type" => "multi_protocol"
      } 
    }
    
    # Определение протокола
    if [connection_protocol] {
      if [connection_protocol] == "http" {
        mutate { add_field => { "attack_type" => "web_attack" } }
      } else if [connection_protocol] == "ftp" {
        mutate { add_field => { "attack_type" => "ftp_attack" } }
      } else if [connection_protocol] == "smb" {
        mutate { add_field => { "attack_type" => "smb_attack" } }
      }
    }
  }
  
  # Обработка логов Honeytrap
  if [type] == "honeytrap" {
    mutate { 
      add_field => { 
        "honeypot" => "honeytrap"
        "honeypot_type" => "unknown_protocol"
      } 
    }
  }
  
  # Геолокация для всех IP адресов атакующих
  if [src_ip] and [src_ip] != "" {
    # Исключаем локальные IP
    if [src_ip] !~ /^(10\.|192\.168\.|172\.(1[6-9]|2\d|3[01])\.|127\.)/ {
      geoip {
        source => "src_ip"
        target => "geoip"
        database => "/usr/share/logstash/vendor/geoip/GeoLite2-City.mmdb"
      }
      
      # Добавляем координаты для карт
      if [geoip][location] {
        mutate {
          add_field => { "coordinates" => "%{[geoip][location][lat]},%{[geoip][location][lon]}" }
        }
      }
    } else {
      mutate { add_field => { "network_type" => "local" } }
    }
  }
  
  # Обогащение данных о портах
  if [dst_port] {
    if [dst_port] == 22 {
      mutate { add_field => { "service" => "ssh" } }
    } else if [dst_port] == 21 {
      mutate { add_field => { "service" => "ftp" } }
    } else if [dst_port] == 80 {
      mutate { add_field => { "service" => "http" } }
    } else if [dst_port] == 443 {
      mutate { add_field => { "service" => "https" } }
    } else if [dst_port] == 23 {
      mutate { add_field => { "service" => "telnet" } }
    } else if [dst_port] == 25 {
      mutate { add_field => { "service" => "smtp" } }
    } else if [dst_port] == 3306 {
      mutate { add_field => { "service" => "mysql" } }
    } else if [dst_port] == 5432 {
      mutate { add_field => { "service" => "postgresql" } }
    } else if [dst_port] == 1433 {
      mutate { add_field => { "service" => "mssql" } }
    }
  }
  
  # Определение уровня угрозы
  if ![severity] {
    if [attack_type] in ["successful_login", "command_execution", "malware_upload"] {
      mutate { add_field => { "severity" => "high" } }
    } else if [attack_type] in ["failed_login", "scan", "reconnaissance"] {
      mutate { add_field => { "severity" => "medium" } }
    } else {
      mutate { add_field => { "severity" => "low" } }
    }
  }
  
  # Добавление hash для дедупликации
  fingerprint {
    source => ["src_ip", "dst_port", "honeypot", "attack_type"]
    target => "event_hash"
    method => "SHA256"
  }
  
  # Очистка ненужных полей
  mutate {
    remove_field => ["host", "agent", "ecs", "log", "input"]
  }
}

output {
  # Основной вывод в Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "tpot-attacks-%{+YYYY.MM.dd}"
    template_name => "tpot"
    template_pattern => "tpot-*"
    template => {
      "index_patterns" => ["tpot-*"]
      "settings" => {
        "number_of_shards" => 1
        "number_of_replicas" => 0
        "refresh_interval" => "30s"
      }
      "mappings" => {
        "properties" => {
          "@timestamp" => { "type" => "date" }
          "src_ip" => { "type" => "ip" }
          "dst_ip" => { "type" => "ip" }
          "dst_port" => { "type" => "integer" }
          "honeypot" => { "type" => "keyword" }
          "attack_type" => { "type" => "keyword" }
          "severity" => { "type" => "keyword" }
          "service" => { "type" => "keyword" }
          "geoip.location" => { "type" => "geo_point" }
          "geoip.country_name" => { "type" => "keyword" }
          "geoip.city_name" => { "type" => "keyword" }
        }
      }
    }
  }
  
  # Дополнительный индекс для критических событий
  if [severity] == "high" {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "tpot-critical-%{+YYYY.MM.dd}"
    }
  }
  
  # Вывод в консоль для отладки (можно отключить в продакшене)
  stdout { 
    codec => rubydebug {
      metadata => false
    }
  }
  
  # Сохранение в файл для резервного копирования
  file {
    path => "/opt/tpot/logs/processed/tpot-processed-%{+YYYY-MM-dd}.log"
    codec => json_lines
  }
}
