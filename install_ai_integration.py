#!/usr/bin/env python3
"""
üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–ª—è Cursor
–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑–∞ AI –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –≤ –ª—é–±–æ–π –ø—Ä–æ–µ–∫—Ç
"""

import os
import json
import shutil
from pathlib import Path

def install_ai_integration(target_project: str):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤ —Ü–µ–ª–µ–≤–æ–π –ø—Ä–æ–µ–∫—Ç"""
    
    print("üöÄ –£–°–¢–ê–ù–û–í–ö–ê AI –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –î–õ–Ø CURSOR")
    print("=" * 50)
    
    source_root = Path(__file__).parent
    target_root = Path(target_project).resolve()
    
    if not target_root.exists():
        print(f"‚ùå –¶–µ–ª–µ–≤–æ–π –ø—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {target_root}")
        return False
    
    print(f"üìÅ –ò—Å—Ç–æ—á–Ω–∏–∫: {source_root}")
    print(f"üìÅ –¶–µ–ª—å: {target_root}")
    
    # –§–∞–π–ª—ã –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    files_to_copy = [
        (".cursorrules", ".cursorrules"),
        ("auto_init_ai_system.py", "auto_init_ai_system.py"),
        (".vscode/settings.json", ".vscode/settings.json"),
        (".vscode/tasks.json", ".vscode/tasks.json"),
    ]
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    vscode_dir = target_root / ".vscode"
    vscode_dir.mkdir(exist_ok=True)
    
    # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
    for source_file, target_file in files_to_copy:
        source_path = source_root / source_file
        target_path = target_root / target_file
        
        if source_path.exists():
            shutil.copy2(source_path, target_path)
            print(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {source_file}")
        else:
            print(f"‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω: {source_file}")
    
    # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ–¥ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
    adapt_cursorrules(target_root)
    adapt_auto_init(target_root)
    
    print("\nüéØ –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("–¢–µ–ø–µ—Ä—å –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –≤ Cursor –∏ AI —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è")
    
    return True

def adapt_cursorrules(project_root: Path):
    """–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å .cursorrules –ø–æ–¥ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç"""
    
    cursorrules_path = project_root / ".cursorrules"
    if not cursorrules_path.exists():
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
    project_name = project_root.name
    has_python = (project_root / "pyproject.toml").exists() or (project_root / "setup.py").exists()
    has_node = (project_root / "package.json").exists()
    has_rust = (project_root / "Cargo.toml").exists()
    
    # –°—á–∏—Ç–∞–µ–º —Ñ–∞–π–ª—ã
    python_files = list(project_root.rglob("*.py"))
    js_files = list(project_root.rglob("*.js")) + list(project_root.rglob("*.ts"))
    
    # –û–±–Ω–æ–≤–ª—è–µ–º .cursorrules
    content = cursorrules_path.read_text()
    
    # –ó–∞–º–µ–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
    content = content.replace(
        "# üß† llmstruct AI-Enhanced Development Environment",
        f"# üß† {project_name} AI-Enhanced Development Environment"
    )
    
    content = content.replace(
        "'/home/kpblc/projects/github/llmstruct'",
        f"'{project_root}'"
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if python_files:
        content = content.replace(
            "- **272 –º–æ–¥—É–ª—è** –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã",
            f"- **{len(python_files)} Python —Ñ–∞–π–ª–æ–≤** –Ω–∞–π–¥–µ–Ω–æ"
        )
    
    cursorrules_path.write_text(content)
    print(f"üîß –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω .cursorrules –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project_name}")

def adapt_auto_init(project_root: Path):
    """–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å auto_init_ai_system.py –ø–æ–¥ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç"""
    
    auto_init_path = project_root / "auto_init_ai_system.py"
    if not auto_init_path.exists():
        return
    
    content = auto_init_path.read_text()
    
    # –ó–∞–º–µ–Ω—è–µ–º –ø—É—Ç–∏
    content = content.replace(
        "'/home/kpblc/projects/github/llmstruct'",
        f"'{project_root}'"
    )
    
    # –£–ø—Ä–æ—â–∞–µ–º –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –±–µ–∑ llmstruct
    if not (project_root / "src" / "llmstruct").exists():
        # –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
        simplified_content = create_simplified_auto_init(project_root)
        content = simplified_content
    
    auto_init_path.write_text(content)
    print(f"üîß –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω auto_init_ai_system.py")

def create_simplified_auto_init(project_root: Path) -> str:
    """–°–æ–∑–¥–∞—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é auto_init –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –±–µ–∑ llmstruct"""
    
    return f'''#!/usr/bin/env python3
"""
üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI —Å–∏—Å—Ç–µ–º—ã –¥–ª—è {project_root.name}
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –±–µ–∑ llmstruct
"""

import os
import sys
import json
from pathlib import Path

AI_STATUS = {{"initialized": False, "error": None}}

def auto_initialize_ai_system():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI —Å–∏—Å—Ç–µ–º—ã"""
    
    global AI_STATUS
    
    if AI_STATUS["initialized"]:
        return True
    
    try:
        project_root = Path(__file__).parent
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç
        python_files = list(project_root.rglob("*.py"))
        js_files = list(project_root.rglob("*.js")) + list(project_root.rglob("*.ts"))
        
        print("üß† AI System AUTO-INITIALIZED!")
        print(f"   ‚úÖ Project: {project_root.name}")
        print(f"   ‚úÖ Python files: {{len(python_files)}}")
        print(f"   ‚úÖ JS/TS files: {{len(js_files)}}")
        print("   üéØ Basic AI integration ready")
        
        AI_STATUS["initialized"] = True
        return True
        
    except Exception as e:
        AI_STATUS["error"] = str(e)
        print(f"‚ùå AI System initialization failed: {{e}}")
        return False

def get_ai_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å AI —Å–∏—Å—Ç–µ–º—ã"""
    if not AI_STATUS["initialized"]:
        auto_initialize_ai_system()
    
    if AI_STATUS["initialized"]:
        return "‚úÖ AI System active for {project_root.name}"
    else:
        return f"‚ùå AI System not available: {{AI_STATUS.get('error', 'Unknown error')}}"

# –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
if __name__ != "__main__":
    auto_initialize_ai_system()

# –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫ –∫–∞–∫ —Å–∫—Ä–∏–ø—Ç
if __name__ == "__main__":
    print("üöÄ MANUAL AI SYSTEM INITIALIZATION")
    print("=" * 40)
    auto_initialize_ai_system()
'''

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    
    import sys
    
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python install_ai_integration.py <path_to_project>")
        print("–ü—Ä–∏–º–µ—Ä: python install_ai_integration.py /path/to/my-project")
        return
    
    target_project = sys.argv[1]
    success = install_ai_integration(target_project)
    
    if success:
        print("\nüéâ –ì–û–¢–û–í–û! –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –≤ Cursor –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ AI —Å–∏—Å—Ç–µ–º—ã")
    else:
        print("\n‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")

if __name__ == "__main__":
    main() 