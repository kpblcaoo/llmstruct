#!/usr/bin/env python3
"""
LLMStruct Chat Bot - –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Cursor
"""

import os
import json
import time
import logging
from typing import Optional
from datetime import datetime
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

try:
    from telegram import Update, BotCommand
    from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
except ImportError:
    print("‚ùå Missing telegram dependencies. Install with: pip install python-telegram-bot")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
try:
    import sys
    sys.path.append('.')
    from src.llmstruct.metrics_tracker import get_metrics_tracker, track_workflow_event, track_task_start, track_task_complete
    METRICS_AVAILABLE = True
    logger.info("üìä Metrics system loaded")
except ImportError:
    METRICS_AVAILABLE = False
    logger.warning("‚ö†Ô∏è Metrics system not available")

class LLMStructChatBot:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π —á–∞—Ç-–±–æ—Ç –¥–ª—è LLMStruct —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è Cursor"""
    
    def __init__(self, token: str):
        self.token = token
        self.application = Application.builder().token(token).build()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.logs_dir = Path("logs/telegram")
        self.logs_dir.mkdir(parents=True, exist_ok=True)
        
        # –§–∞–π–ª –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π (—á–∏—Ç–∞–µ–º—ã–π Cursor'–æ–º)
        self.messages_log = self.logs_dir / "user_messages.log"
        self.cursor_commands = self.logs_dir / "cursor_commands.log"
        
        self.setup_handlers()
        
        if METRICS_AVAILABLE:
            track_workflow_event("chat_bot_startup")
    
    def log_user_message(self, user_info: dict, message: str, message_type: str = "text"):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–∞–π–ª –¥–ª—è Cursor"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"""
=== {timestamp} ===
üë§ USER: {user_info.get('first_name', 'Unknown')} (@{user_info.get('username', 'unknown')})
üì± TYPE: {message_type}
üí¨ MESSAGE: {message}
{'='*60}
"""
        
        with open(self.messages_log, 'a', encoding='utf-8') as f:
            f.write(log_entry)
        
        # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è Cursor, –¥—É–±–ª–∏—Ä—É–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
        if any(keyword in message.lower() for keyword in ['cursor', 'claude', '–ø—Ä–æ–¥–æ–ª–∂–∏', 'continue', '–∏—Å–ø—Ä–∞–≤—å', 'fix']):
            with open(self.cursor_commands, 'a', encoding='utf-8') as f:
                f.write(f"{timestamp} | CURSOR COMMAND: {message}\n")
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        self.application.add_handler(CommandHandler("metrics", self.metrics_command))
        self.application.add_handler(CommandHandler("dev", self.dev_command))
        self.application.add_handler(CommandHandler("cursor", self.cursor_command))
        self.application.add_handler(CommandHandler("logs", self.logs_command))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        if METRICS_AVAILABLE:
            track_workflow_event("bot_command", "start")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
        user_info = {
            'first_name': update.effective_user.first_name,
            'username': update.effective_user.username
        }
        self.log_user_message(user_info, "/start", "command")
        
        user_name = update.effective_user.first_name
        welcome_message = f"""üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!

üß† –Ø **LLMStruct Chat Bot** - —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Cursor!

**üéØ –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ üìù –õ–æ–≥–∏—Ä—É—é –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Cursor'–∞
‚Ä¢ ü§ñ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º
‚Ä¢ üìä –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
‚Ä¢ üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞

**üìã –ö–æ–º–∞–Ω–¥—ã:**
/help - –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
/status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/metrics - –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
/cursor - –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å Cursor
/logs - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
/dev - —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞

**üí¨ –î–≤–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã:**
1. **–û–±—ã—á–Ω—ã–π –¥–∏–∞–ª–æ–≥** - –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
2. **–ö–æ–º–∞–Ω–¥—ã –¥–ª—è Cursor** - –∏—Å–ø–æ–ª—å–∑—É–π –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: "cursor", "claude", "–ø—Ä–æ–¥–æ–ª–∂–∏", "–∏—Å–ø—Ä–∞–≤—å"

–í—Å–µ —Ç–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ª–æ–≥–∏—Ä—É—é—Ç—Å—è –≤ `logs/telegram/user_messages.log` üìÑ
"""
        await update.message.reply_text(welcome_message, parse_mode='Markdown')
    
    async def cursor_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /cursor - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å Cursor"""
        if METRICS_AVAILABLE:
            track_workflow_event("bot_command", "cursor")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
        user_info = {
            'first_name': update.effective_user.first_name,
            'username': update.effective_user.username
        }
        self.log_user_message(user_info, "/cursor", "command")
        
        cursor_text = """ü§ñ **–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å Cursor/Claude**

**üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:**
‚Ä¢ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Üí `logs/telegram/user_messages.log`
‚Ä¢ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è Cursor ‚Üí `logs/telegram/cursor_commands.log`

**üéØ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è Cursor:**
‚Ä¢ "cursor" - –ø—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
‚Ä¢ "claude" - –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ AI
‚Ä¢ "–ø—Ä–æ–¥–æ–ª–∂–∏" / "continue" - –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É
‚Ä¢ "–∏—Å–ø—Ä–∞–≤—å" / "fix" - –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É

**üí° –ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:**
"Cursor, –ø–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç—É—Å –º–µ—Ç—Ä–∏–∫"
"Claude, –∏—Å–ø—Ä–∞–≤—å –±–æ—Ç–∞"
"–ü—Ä–æ–¥–æ–ª–∂–∏ —Ä–∞–±–æ—Ç—É –Ω–∞–¥ API"

**üìä –°—Ç–∞—Ç—É—Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:**
‚Ä¢ –§–∞–π–ª —Å–æ–æ–±—â–µ–Ω–∏–π: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω
‚Ä¢ –ö–æ–º–∞–Ω–¥—ã Cursor: ‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫: """ + ("‚úÖ –í–∫–ª—é—á–µ–Ω–∞" if METRICS_AVAILABLE else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞") + """

Cursor –º–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å —ç—Ç–∏ –ª–æ–≥–∏ –∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ç–≤–æ–∏ –∫–æ–º–∞–Ω–¥—ã! üöÄ
"""
        
        await update.message.reply_text(cursor_text, parse_mode='Markdown')
    
    async def logs_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /logs - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if METRICS_AVAILABLE:
            track_workflow_event("bot_command", "logs")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
        user_info = {
            'first_name': update.effective_user.first_name,
            'username': update.effective_user.username
        }
        self.log_user_message(user_info, "/logs", "command")
        
        try:
            # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
            if self.messages_log.exists():
                with open(self.messages_log, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
                entries = content.split('===')[-6:-1]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π
                
                logs_text = "üìÑ **–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:**\n\n"
                for entry in entries:
                    if entry.strip():
                        lines = entry.strip().split('\n')
                        if len(lines) >= 3:
                            timestamp = lines[0]
                            message_line = next((line for line in lines if line.startswith('üí¨ MESSAGE:')), '')
                            if message_line:
                                message = message_line.replace('üí¨ MESSAGE:', '').strip()
                                logs_text += f"`{timestamp}` {message[:50]}{'...' if len(message) > 50 else ''}\n"
                
                logs_text += f"\nüìÅ **–ü–æ–ª–Ω—ã–µ –ª–æ–≥–∏:** `{self.messages_log}`"
            else:
                logs_text = "üìÑ –õ–æ–≥–∏ –ø–æ–∫–∞ –ø—É—Å—Ç—ã. –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å!"
            
            await update.message.reply_text(logs_text, parse_mode='Markdown')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        if METRICS_AVAILABLE:
            track_workflow_event("bot_command", "help")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
        user_info = {
            'first_name': update.effective_user.first_name,
            'username': update.effective_user.username
        }
        self.log_user_message(user_info, "/help", "command")
        
        help_text = """üîß **LLMStruct Chat Bot - –ö–æ–º–∞–Ω–¥—ã**

**üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:**
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/metrics - –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
/dev - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤

**ü§ñ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å Cursor:**
/cursor - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏
/logs - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è

**üí¨ –û–±—â–µ–Ω–∏–µ:**
–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ –º–Ω–µ –≤–æ–ø—Ä–æ—Å—ã! –Ø –ø–æ–Ω–∏–º–∞—é:
‚Ä¢ –í–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–æ–µ–∫—Ç–µ –∏ –∫–æ–¥–µ
‚Ä¢ –ü—Ä–æ—Å—å–±—ã –æ –ø–æ–º–æ—â–∏ —Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π
‚Ä¢ –û–±—Å—É–∂–¥–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
‚Ä¢ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è Cursor/Claude

**üéØ –ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥ –¥–ª—è Cursor:**
"Cursor, –ø–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"
"Claude, –∏—Å–ø—Ä–∞–≤—å –ø—Ä–æ–±–ª–µ–º—ã —Å –±–æ—Ç–æ–º"
"–ü—Ä–æ–¥–æ–ª–∂–∏ —Ä–∞–±–æ—Ç—É –Ω–∞–¥ API"

**üìà –ú–µ—Ç—Ä–∏–∫–∏:** """ + ("‚úÖ –í–∫–ª—é—á–µ–Ω—ã" if METRICS_AVAILABLE else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã") + """
**üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:** ‚úÖ –ê–∫—Ç–∏–≤–Ω–æ
"""
        
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /status"""
        task_id = f"chat_bot_status_{int(time.time())}"
        
        if METRICS_AVAILABLE:
            track_task_start(task_id, "chat_bot_status_check")
            track_workflow_event("bot_command", "status")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
        user_info = {
            'first_name': update.effective_user.first_name,
            'username': update.effective_user.username
        }
        self.log_user_message(user_info, "/status", "command")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ API
            api_status = "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            try:
                import requests
                response = requests.get("http://localhost:8000/api/v1/system/health", timeout=2)
                if response.status_code == 200:
                    api_status = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç"
            except:
                pass
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ struct.json
            struct_file = Path("struct.json")
            struct_status = "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            if struct_file.exists():
                age_hours = (time.time() - struct_file.stat().st_mtime) / 3600
                if age_hours < 1:
                    struct_status = "‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω—ã–π"
                elif age_hours < 6:
                    struct_status = "üü° –ù–µ–¥–∞–≤–Ω–∏–π"
                else:
                    struct_status = "‚ö†Ô∏è –£—Å—Ç–∞—Ä–µ–≤—à–∏–π"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤
            logs_status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–æ" if self.messages_log.exists() else "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
            cursor_logs_count = 0
            if self.cursor_commands.exists():
                with open(self.cursor_commands, 'r', encoding='utf-8') as f:
                    cursor_logs_count = len(f.readlines())
            
            current_time = datetime.now().strftime("%H:%M:%S")
            
            status_text = f"""üìä **–°—Ç–∞—Ç—É—Å LLMStruct System**

üåê **API Server:** {api_status}
üìÅ **struct.json:** {struct_status}
üìä **Metrics:** {"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã" if METRICS_AVAILABLE else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã"}
ü§ñ **Chat Bot:** ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç
üìù **–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:** {logs_status}
üéØ **–ö–æ–º–∞–Ω–¥—ã Cursor:** {cursor_logs_count} –∑–∞–ø–∏—Å–µ–π
‚è∞ **–í—Ä–µ–º—è:** {current_time}

üîÑ **–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** —Ç–æ–ª—å–∫–æ —á—Ç–æ
"""
            
            if METRICS_AVAILABLE:
                # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏
                try:
                    tracker = get_metrics_tracker()
                    summary = tracker.get_session_summary()
                    status_text += f"""
üìà **–¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è:**
‚Ä¢ ID: `{summary['session_id'][:8]}`
‚Ä¢ –í—Ä–µ–º—è: {summary['duration']:.0f}s
‚Ä¢ –¢–æ–∫–µ–Ω—ã: {summary['total_tokens']:,}
‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {summary['efficiency_score']:.2f}/1.0
"""
                    track_task_complete(task_id, "success")
                except Exception as e:
                    status_text += f"\n‚ö†Ô∏è *–û—à–∏–±–∫–∞ –º–µ—Ç—Ä–∏–∫: {str(e)[:50]}*"
            
            await update.message.reply_text(status_text, parse_mode='Markdown')
            
        except Exception as e:
            if METRICS_AVAILABLE:
                track_task_complete(task_id, "failed", str(e))
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    async def metrics_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /metrics"""
        if not METRICS_AVAILABLE:
            await update.message.reply_text("‚ùå –°–∏—Å—Ç–µ–º–∞ –º–µ—Ç—Ä–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        track_workflow_event("bot_command", "metrics")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
        user_info = {
            'first_name': update.effective_user.first_name,
            'username': update.effective_user.username
        }
        self.log_user_message(user_info, "/metrics", "command")
        
        try:
            tracker = get_metrics_tracker()
            summary = tracker.get_session_summary()
            
            efficiency_emoji = "üü¢" if summary['efficiency_score'] > 0.8 else "üü°" if summary['efficiency_score'] > 0.6 else "üî¥"
            
            metrics_text = f"""üìä **–î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏**
**–°–µ—Å—Å–∏—è:** `{summary['session_id'][:8]}`

{efficiency_emoji} **–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** {summary['efficiency_score']:.2f}/1.0
‚è± **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** {summary['duration']:.0f}s ({summary['duration']/60:.1f}m)
üî¢ **–¢–æ–∫–µ–Ω—ã:** {summary['total_tokens']:,}
üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** ${summary['estimated_cost']:.4f}

üìã **–ó–∞–¥–∞—á–∏:**
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {summary['tasks_completed']}/{summary['tasks_total']}
‚Ä¢ –ü–æ–≤—Ç–æ—Ä—ã: {summary['retries']}
‚Ä¢ –û—à–∏–±–∫–∏: {summary['avoidable_errors']}

üõ§ **–ü—Ä–æ–±–ª–µ–º—ã:**
‚Ä¢ –õ–æ–∂–Ω—ã–µ –ø—É—Ç–∏: {summary['false_paths']}

üìù **–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:**
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è: ‚úÖ –ê–∫—Ç–∏–≤–Ω–æ
‚Ä¢ –§–∞–π–ª: `{self.messages_log}`

üìà **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
"""
            
            if summary['efficiency_score'] < 0.7:
                metrics_text += "‚ö†Ô∏è –ù–∏–∑–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ä–∞–±–æ—Ç—ã\n"
            elif summary['efficiency_score'] > 0.9:
                metrics_text += "üéâ –û—Ç–ª–∏—á–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!\n"
            else:
                metrics_text += "‚úÖ –•–æ—Ä–æ—à–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n"
                
            if summary['false_paths'] > 5:
                metrics_text += "üîç –ú–Ω–æ–≥–æ –ª–æ–∂–Ω—ã—Ö –ø—É—Ç–µ–π - —É—Ç–æ—á–Ω—è–π—Ç–µ –∑–∞–¥–∞—á–∏\n"
                
            if summary['avoidable_errors'] > 0:
                metrics_text += "‚ö° –ï—Å—Ç—å –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏–º—ã–µ –æ—à–∏–±–∫–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
            
            await update.message.reply_text(metrics_text, parse_mode='Markdown')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
    
    async def dev_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /dev - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        if METRICS_AVAILABLE:
            track_workflow_event("bot_command", "dev")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
        user_info = {
            'first_name': update.effective_user.first_name,
            'username': update.effective_user.username
        }
        self.log_user_message(user_info, "/dev", "command")
        
        dev_text = f"""üîß **Developer Information**

**üéØ –ü—Ä–æ–µ–∫—Ç:** LLMStruct AI-Enhanced Development Environment
**üìÇ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:** –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
**üêç Python:** 3.8+ —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º

**üöÄ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:**
‚Ä¢ CLI: `python -m llmstruct.cli`
‚Ä¢ API: `python test_api_simple.py`
‚Ä¢ Metrics: `python -m llmstruct.cli metrics`

**üìä –§–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞:**
‚Ä¢ `struct.json` - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
‚Ä¢ `.metrics/` - –¥–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫
‚Ä¢ `src/llmstruct/` - –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥

**üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram:**
‚Ä¢ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è: `{self.messages_log}`
‚Ä¢ –ö–æ–º–∞–Ω–¥—ã Cursor: `{self.cursor_commands}`
‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚úÖ –ê–∫—Ç–∏–≤–Ω–æ

**ü§ñ Bot Status:**
‚Ä¢ Token: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω
‚Ä¢ Metrics: """ + ("‚úÖ –í–∫–ª—é—á–µ–Ω—ã" if METRICS_AVAILABLE else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã") + """
‚Ä¢ Mode: Chat/Development + Cursor Integration

**üí° Useful Commands:**
`git status`, `python -m llmstruct.cli metrics status`

**üéØ Cursor Integration:**
–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ª–æ–≥–∏—Ä—É—é—Ç—Å—è –∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —á—Ç–µ–Ω–∏—è AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º!
"""
        
        await update.message.reply_text(dev_text, parse_mode='Markdown')
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        task_id = f"chat_bot_message_{int(time.time())}"
        
        if METRICS_AVAILABLE:
            track_task_start(task_id, "chat_bot_conversation")
            track_workflow_event("bot_command", "chat_message")
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_info = {
            'first_name': update.effective_user.first_name,
            'username': update.effective_user.username
        }
        self.log_user_message(user_info, update.message.text, "text")
        
        user_message = update.message.text.lower()
        user_name = update.effective_user.first_name
        
        try:
            # –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            response = ""
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è Cursor
            if any(keyword in user_message for keyword in ['cursor', 'claude']):
                response = f"""ü§ñ **–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è Cursor –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞!**

–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –ª–æ–≥–∏:
üìÑ `logs/telegram/user_messages.log`
üìÑ `logs/telegram/cursor_commands.log`

Cursor –º–æ–∂–µ—Ç —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å: "{update.message.text}"

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ "Cursor, –ø–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç—É—Å"
‚Ä¢ "Claude, –∏—Å–ø—Ä–∞–≤—å –ø—Ä–æ–±–ª–µ–º—É"
‚Ä¢ "–ü—Ä–æ–¥–æ–ª–∂–∏ —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"
"""
                
            elif any(word in user_message for word in ["–ø—Ä–∏–≤–µ—Ç", "hello", "hi", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π"]):
                response = f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}! –ö–∞–∫ –¥–µ–ª–∞ —Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π? –í—Å–µ —Ç–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å –ª–æ–≥–∏—Ä—É—é—Ç—Å—è –¥–ª—è Cursor! üìù"
                
            elif any(word in user_message for word in ["–º–µ—Ç—Ä–∏–∫–∏", "metrics", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]):
                await self.metrics_command(update, context)
                return
                
            elif any(word in user_message for word in ["—Å—Ç–∞—Ç—É—Å", "status", "—Å–æ—Å—Ç–æ—è–Ω–∏–µ"]):
                await self.status_command(update, context)
                return
                
            elif any(word in user_message for word in ["–ø–æ–º–æ—â—å", "help", "–∫–æ–º–∞–Ω–¥—ã"]):
                await self.help_command(update, context)
                return
                
            elif any(word in user_message for word in ["–ª–æ–≥–∏", "logs", "—Å–æ–æ–±—â–µ–Ω–∏—è"]):
                await self.logs_command(update, context)
                return
                
            elif any(word in user_message for word in ["–ø—Ä–æ–µ–∫—Ç", "project", "llmstruct"]):
                response = """üß† **–û –ø—Ä–æ–µ–∫—Ç–µ LLMStruct:**

–≠—Ç–æ AI-Enhanced Development Environment —Å —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑–æ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:
‚Ä¢ üìä –°–∏—Å—Ç–µ–º–∞ –æ–±—ä–µ–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
‚Ä¢ ü§ñ AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º–∏ —Ä–µ–∂–∏–º–∞–º–∏  
‚Ä¢ üîÑ Workflow management
‚Ä¢ üìÅ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
‚Ä¢ üìù **–ù–û–í–û–ï**: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Cursor

–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ?"""
                
            elif any(word in user_message for word in ["–∫–æ–¥", "code", "—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "development"]):
                response = """üíª **–ü–æ–º–æ—â—å —Å –∫–æ–¥–æ–º:**

–ú–æ–≥—É –ø–æ–º–æ—á—å —Å:
‚Ä¢ üîç –ê–Ω–∞–ª–∏–∑–æ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
‚Ä¢ üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –º–µ—Ç—Ä–∏–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
‚Ä¢ üõ† –û—Ç–ª–∞–¥–∫–æ–π –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
‚Ä¢ üìù –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∫–æ–¥–∞
‚Ä¢ ü§ñ **–ù–û–í–û–ï**: –ü–µ—Ä–µ–¥–∞—á–µ–π –∫–æ–º–∞–Ω–¥ Cursor'—É

–†–∞—Å—Å–∫–∞–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å? –ò–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –Ω–∞–ø—Ä—è–º—É—é –∫ Cursor!"""
                
            elif any(word in user_message for word in ["–∫–∞–∫ –¥–µ–ª–∞", "how are you", "–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—à—å"]):
                if METRICS_AVAILABLE:
                    tracker = get_metrics_tracker()
                    summary = tracker.get_session_summary()
                    efficiency = summary['efficiency_score']
                    if efficiency > 0.8:
                        response = f"üéâ –û—Ç–ª–∏—á–Ω–æ! –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å {efficiency:.2f}, –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ —á–∞—Å—ã! –ò —Ç–µ–ø–µ—Ä—å –ª–æ–≥–∏—Ä—É—é –¥–ª—è Cursor! üìù"
                    elif efficiency > 0.6:
                        response = f"üòä –•–æ—Ä–æ—à–æ! –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å {efficiency:.2f}, –µ—Å—Ç—å –∫ —á–µ–º—É —Å—Ç—Ä–µ–º–∏—Ç—å—Å—è. –õ–æ–≥–∏ –¥–ª—è Cursor –∞–∫—Ç–∏–≤–Ω—ã! üìù"
                    else:
                        response = f"ü§î –¢–∞–∫ —Å–µ–±–µ... –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å {efficiency:.2f}, –Ω–∞–¥–æ —É–ª—É—á—à–∞—Ç—å. –ú–æ–∂–µ—Ç Cursor –ø–æ–º–æ–∂–µ—Ç? üìù"
                else:
                    response = "üòä –†–∞–±–æ—Ç–∞—é –Ω–æ—Ä–º–∞–ª—å–Ω–æ! –ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã, –Ω–æ –ª–æ–≥–∏—Ä—É—é –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Cursor! üìù"
                    
            elif any(word in user_message for word in ["—Å–ø–∞—Å–∏–±–æ", "thanks", "thank you"]):
                response = f"üôè –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, {user_name}! –í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π! –í—Å–µ –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è –¥–ª—è Cursor! üìù"
                
            elif any(word in user_message for word in ["–ø–æ–∫–∞", "bye", "goodbye", "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è"]):
                response = f"üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è, {user_name}! –£–¥–∞—á–∏ —Å –ø—Ä–æ–µ–∫—Ç–æ–º! –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è Cursor! üìù"
                
            else:
                # –û–±—â–∏–π –æ—Ç–≤–µ—Ç –¥–ª—è –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                response = f"""ü§î –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å, {user_name}!

üìù **–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ:** "{update.message.text[:100]}{'...' if len(update.message.text) > 100 else ''}"

**üí¨ –ú–æ–≥—É –ø–æ–º–æ—á—å —Å:**
‚Ä¢ üìä –ú–µ—Ç—Ä–∏–∫–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞ (/metrics)
‚Ä¢ üîç –°—Ç–∞—Ç—É—Å–æ–º —Å–∏—Å—Ç–µ–º—ã (/status)  
‚Ä¢ üíª –í–æ–ø—Ä–æ—Å–∞–º–∏ –æ –∫–æ–¥–µ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
‚Ä¢ üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–æ–π –∏ –æ—Ç–ª–∞–¥–∫–æ–π
‚Ä¢ ü§ñ –ü–µ—Ä–µ–¥–∞—á–µ–π –∫–æ–º–∞–Ω–¥ Cursor'—É (/cursor)

**üí° –ò–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ Cursor –Ω–∞–ø—Ä—è–º—É—é:**
"Cursor, –ø–æ–º–æ–≥–∏ —Å —ç—Ç–∏–º –≤–æ–ø—Ä–æ—Å–æ–º"
"Claude, —á—Ç–æ –¥—É–º–∞–µ—à—å –æ–± —ç—Ç–æ–º?"

–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ª–æ–≥–∏—Ä—É—é—Ç—Å—è! üìÑ"""
            
            if METRICS_AVAILABLE and response:
                # –¢—Ä–µ–∫–∏–Ω–≥ "—Ç–æ–∫–µ–Ω–æ–≤" –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
                input_tokens = len(update.message.text.split())
                output_tokens = len(response.split())
                tracker = get_metrics_tracker()
                tracker.track_token_usage("telegram_chat_bot", "conversation", input_tokens, output_tokens)
                track_task_complete(task_id, "success")
            
            await update.message.reply_text(response, parse_mode='Markdown')
            
        except Exception as e:
            if METRICS_AVAILABLE:
                track_task_complete(task_id, "failed", str(e))
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def run_sync(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
            commands = [
                BotCommand("start", "üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
                BotCommand("help", "‚ùì –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å"),
                BotCommand("status", "üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"),
                BotCommand("metrics", "üìà –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏"),
                BotCommand("dev", "üîß –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"),
                BotCommand("cursor", "ü§ñ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å Cursor"),
                BotCommand("logs", "üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"),
            ]
            
            import asyncio
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(self.application.bot.set_my_commands(commands))
            
            logger.info("ü§ñ Starting LLMStruct Chat Bot...")
            if METRICS_AVAILABLE:
                tracker = get_metrics_tracker()
                logger.info(f"üìä Metrics session: {tracker.session_data['session_id']}")
            
            # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
            self.application.run_polling(drop_pending_updates=True)
            
        except Exception as e:
            logger.error(f"‚ùå Bot startup failed: {e}")
            if METRICS_AVAILABLE:
                track_workflow_event("bot_error", str(e))
        finally:
            if METRICS_AVAILABLE:
                track_workflow_event("chat_bot_shutdown")
                tracker = get_metrics_tracker()
                tracker.save_session()
                logger.info("üìä Metrics saved")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    if not token:
        print("‚ùå Telegram bot token not found!")
        print("Set with: export TELEGRAM_BOT_TOKEN='your_token'")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot = LLMStructChatBot(token)
    bot.run_sync()

if __name__ == "__main__":
    main() 