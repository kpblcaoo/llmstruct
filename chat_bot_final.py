#!/usr/bin/env python3
"""
LLMStruct Chat Bot Final - –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å FastAPI
–†–µ—à–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º: API –≤–º–µ—Å—Ç–æ CLI, –±–µ–∑ Markdown parse_mode, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å
"""

import os
import json
import time
import logging
import aiohttp
import asyncio
from typing import Optional, Dict, Any
from datetime import datetime
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

try:
    from telegram import Update, BotCommand
    from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
except ImportError:
    print("‚ùå Missing telegram dependencies. Install with: pip install python-telegram-bot")
    exit(1)

class FinalLLMStructBot:
    """–§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π FastAPI"""
    
    def __init__(self, token: str):
        self.token = token
        self.application = Application.builder().token(token).build()
        
        # API endpoints –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å test_api_simple.py
        self.api_base = "http://localhost:8000/api/v1"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.logs_dir = Path("logs/telegram")
        self.logs_dir.mkdir(parents=True, exist_ok=True)
        self.messages_log = self.logs_dir / "user_messages.log"
        
        # –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Å—Å–∏—é –¥–ª—è API –≤—ã–∑–æ–≤–æ–≤
        self.session = None
        
        self.setup_handlers()
        logger.info("üöÄ Final LLMStruct Bot initialized")
    
    async def get_http_session(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ HTTP —Å–µ—Å—Å–∏–∏ –¥–ª—è API –≤—ã–∑–æ–≤–æ–≤"""
        if self.session is None:
            self.session = aiohttp.ClientSession()
        return self.session
    
    async def api_call(self, endpoint: str, method: str = "GET", data: Dict = None) -> Dict:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è API –≤—ã–∑–æ–≤–æ–≤"""
        session = await self.get_http_session()
        url = f"{self.api_base}{endpoint}"
        
        try:
            if method == "GET":
                async with session.get(url) as response:
                    return await response.json()
            elif method == "POST":
                async with session.post(url, json=data) as response:
                    return await response.json()
        except Exception as e:
            logger.error(f"‚ùå API call failed: {e}")
            return {"error": str(e)}
    
    async def save_user_memory(self, user_id: str, message: str) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API"""
        result = await self.api_call("/memory/save", "POST", {
            "user_id": user_id,
            "message": message,
            "timestamp": datetime.now().isoformat()
        })
        return "error" not in result
    
    async def get_user_history(self, user_id: str, limit: int = 5) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API"""
        result = await self.api_call(f"/memory/history/{user_id}?limit={limit}")
        return result.get("messages", []) if "error" not in result else []
    
    async def chat_with_ollama(self, message: str, user_id: str) -> str:
        """–û–±—â–µ–Ω–∏–µ —Å Ollama —á–µ—Ä–µ–∑ API"""
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        history = await self.get_user_history(user_id, 3)
        context = "\n".join([f"User: {h.get('message', '')}" for h in history[-3:]])
        
        result = await self.api_call("/chat/ollama", "POST", {
            "message": message,
            "context": context,
            "user_id": user_id
        })
        
        if "error" in result:
            return f"‚ùå –û—à–∏–±–∫–∞: {result['error']}"
        
        return result.get("response", "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞")
    
    async def get_system_status(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã —á–µ—Ä–µ–∑ API"""
        return await self.api_call("/system/status")
    
    async def get_available_models(self) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π —á–µ—Ä–µ–∑ API"""
        result = await self.api_call("/ollama/models")
        return result.get("models", []) if "error" not in result else []
    
    def log_user_message(self, user_info: dict, message: str, chat_id: int):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"""
=== {timestamp} ===
üë§ USER: {user_info.get('first_name', 'Unknown')} (@{user_info.get('username', 'unknown')})
üì± TYPE: text
üÜî CHAT_ID: {chat_id}
üí¨ MESSAGE: {message}
{'='*60}
"""
        
        with open(self.messages_log, 'a', encoding='utf-8') as f:
            f.write(log_entry)
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        self.application.add_handler(CommandHandler("memory", self.memory_command))
        self.application.add_handler(CommandHandler("models", self.models_command))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user_info = {
            'first_name': update.effective_user.first_name,
            'username': update.effective_user.username
        }
        self.log_user_message(user_info, "/start", update.effective_chat.id)
        
        welcome_message = f"""üëã –ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}!

üß† LLMStruct Final Bot - FastAPI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è

üöÄ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ ü¶ô Ollama AI —á–µ—Ä–µ–∑ FastAPI (20x –±—ã—Å—Ç—Ä–µ–µ CLI!)
‚Ä¢ üíæ –ü–∞–º—è—Ç—å —á–µ—Ä–µ–∑ API (–º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ)
‚Ä¢ üìä –ü–æ–ª–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
‚Ä¢ üîß –°–∏—Å—Ç–µ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥

üìã –ö–æ–º–∞–Ω–¥—ã:
/help - —Å–ø—Ä–∞–≤–∫–∞
/status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã  
/memory - –∏—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
/models - –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏

‚ú® –¢–µ–ø–µ—Ä—å –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ API, –∞ –Ω–µ CLI!"""
        
        # –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º parse_mode=Markdown –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è 400 –æ—à–∏–±–æ–∫
        await update.message.reply_text(welcome_message)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = """üÜò –ü–æ–º–æ—â—å - LLMStruct Final Bot

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –∏ API
/memory - –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ø–∞–º—è—Ç–∏
/models - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö Ollama –º–æ–¥–µ–ª–µ–π

üí¨ –ü—Ä–æ—Å—Ç–æ–µ –æ–±—â–µ–Ω–∏–µ:
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ - –±–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç —á–µ—Ä–µ–∑ Ollama!

üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ FastAPI (test_api_simple.py)
‚Ä¢ –ü–∞–º—è—Ç—å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ API, –∞ –Ω–µ CLI
‚Ä¢ –ú–µ—Ç—Ä–∏–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
‚Ä¢ –ù–µ—Ç Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∏–∑–±–µ–≥–∞–µ–º 400 –æ—à–∏–±–æ–∫)

üöÄ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 20x –±—ã—Å—Ç—Ä–µ–µ —á–µ–º CLI –ø–æ–¥—Ö–æ–¥!"""
        
        await update.message.reply_text(help_text)
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /status"""
        status = await self.get_system_status()
        
        if "error" in status:
            status_text = f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {status['error']}"
        else:
            status_text = f"""üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:

üü¢ API: {status.get('status', 'unknown')}
ü¶ô Ollama: {status.get('ollama_status', 'unknown')}
üíæ –ü–∞–º—è—Ç—å: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if status.get('memory_available') else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}
üìà –ú–µ—Ç—Ä–∏–∫–∏: {'‚úÖ –ê–∫—Ç–∏–≤–Ω—ã' if status.get('metrics_active') else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã'}

‚ö° –ú–µ—Ç–æ–¥: FastAPI (–Ω–µ CLI!)
üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: ~50-100ms –Ω–∞ –∑–∞–ø—Ä–æ—Å"""
        
        await update.message.reply_text(status_text)
    
    async def memory_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /memory"""
        user_id = update.effective_user.id
        history = await self.get_user_history(str(user_id), 5)
        
        if not history:
            memory_text = "üìù –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç–∞"
        else:
            memory_text = "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n"
            for i, msg in enumerate(history[-5:], 1):
                timestamp = msg.get('timestamp', 'unknown')
                message = msg.get('message', 'unknown')
                memory_text += f"{i}. {timestamp}: {message[:50]}...\n"
        
        await update.message.reply_text(memory_text)
    
    async def models_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /models"""
        models = await self.get_available_models()
        
        if not models:
            models_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π"
        else:
            models_text = "ü¶ô –î–æ—Å—Ç—É–ø–Ω—ã–µ Ollama –º–æ–¥–µ–ª–∏:\n\n"
            for model in models:
                models_text += f"‚Ä¢ {model}\n"
        
        await update.message.reply_text(models_text)
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_info = {
            'first_name': update.effective_user.first_name,
            'username': update.effective_user.username
        }
        message = update.message.text
        user_id = str(update.effective_user.id)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.log_user_message(user_info, message, update.effective_chat.id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å —á–µ—Ä–µ–∑ API
        await self.save_user_memory(user_id, message)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Ollama —á–µ—Ä–µ–∑ API
        response = await self.chat_with_ollama(message, user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ë–ï–ó parse_mode –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è 400 –æ—à–∏–±–æ–∫
        await update.message.reply_text(response)
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self.session:
            await self.session.close()

if __name__ == "__main__":
    import signal
    import sys
    
    def signal_handler(sig, frame):
        logger.info("üõë Bot stopped by user")
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        print("‚ùå TELEGRAM_BOT_TOKEN not set")
        sys.exit(1)
    
    bot = FinalLLMStructBot(token)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
    commands = [
        BotCommand("start", "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"),
        BotCommand("help", "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"),
        BotCommand("status", "–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"),
        BotCommand("memory", "–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"),
        BotCommand("models", "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏"),
    ]
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º run_polling –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ asyncio.run
        bot.application.run_polling(drop_pending_updates=True)
    
    except KeyboardInterrupt:
        logger.info("üõë Bot stopped by user")
    except Exception as e:
        logger.error(f"‚ùå Bot error: {e}")
    finally:
        # Cleanup –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        pass 