{
  "metadata": {
    "project_name": "llmstruct",
    "description": "Utility for generating structured JSON for codebases",
    "version": "2025-06-26T00:09:43.037690+00:00",
    "schema_version": "2.1.0",
    "$schema": "https://schemas.llmstruct.org/v2.1/struct.json",
    "authors": [
      {
        "name": "Mikhail Stepanov",
        "github": "kpblcaoo",
        "email": "kpblcaoo@gmail.com"
      }
    ],
    "instructions": [
      "Follow best practices, warn if instructions conflict with them",
      "Preserve functionality, ensure idempotency",
      "Use attached struct.json for context and navigation",
      "Request missing modules or functions if needed",
      "Regenerate JSON for significant changes, track via Git and artifacts",
      "Use internal comments for descriptions, append brief summary"
    ],
    "goals": [],
    "stats": {
      "modules_count": 86,
      "functions_count": 497,
      "classes_count": 89,
      "call_edges_count": 2281
    },
    "artifact_id": "80653cd1-a689-43d6-8084-31464549120b",
    "summary": "Structured JSON for llmstruct codebase",
    "tags": [
      "codebase",
      "automation"
    ],
    "folder_structure": [
      {
        "path": ".",
        "type": "directory",
        "artifact_id": "fbfb478e-6e54-4753-81b8-bc0eca9fda25",
        "metadata": {}
      },
      {
        "path": "llmstruct",
        "type": "directory",
        "artifact_id": "fd329cdc-dbac-497b-98f5-0077d3480c7d",
        "metadata": {}
      },
      {
        "path": "llmstruct.egg-info",
        "type": "directory",
        "artifact_id": "42d89cf7-88ec-44ad-9b80-7feee9c2d118",
        "metadata": {}
      },
      {
        "path": "llmstruct/ARCHIVE",
        "type": "directory",
        "artifact_id": "6edb7947-d293-40a6-97d2-3f1d24a4c7a2",
        "metadata": {}
      },
      {
        "path": "llmstruct/ARCHIVE/cli_argument_parser.py",
        "type": "file",
        "artifact_id": "49046d96-0e46-48c7-b54a-54754b4d848d",
        "metadata": {}
      },
      {
        "path": "llmstruct/ARCHIVE/cli_commands.py",
        "type": "file",
        "artifact_id": "783d0968-446b-43c7-aff2-f3ebaf415fc4",
        "metadata": {}
      },
      {
        "path": "llmstruct/ARCHIVE/cli_config.py",
        "type": "file",
        "artifact_id": "89bb8d25-4640-448f-b21d-ec23a47e7a98",
        "metadata": {}
      },
      {
        "path": "llmstruct/ARCHIVE/cli_core.py",
        "type": "file",
        "artifact_id": "9dd5287e-07c2-490b-9577-c7062547dedc",
        "metadata": {}
      },
      {
        "path": "llmstruct/ARCHIVE/cli_main_commands.py",
        "type": "file",
        "artifact_id": "f4f8ee57-54f0-42df-ae3a-a36f0ede0497",
        "metadata": {}
      },
      {
        "path": "llmstruct/ARCHIVE/cli_utils.py",
        "type": "file",
        "artifact_id": "4663a74a-19f3-496a-9966-6aa79c1cd13e",
        "metadata": {}
      },
      {
        "path": "llmstruct/__init__.py",
        "type": "file",
        "artifact_id": "05859766-a78a-4534-835c-5c31c73f7b23",
        "metadata": {}
      },
      {
        "path": "llmstruct/__main__.py",
        "type": "file",
        "artifact_id": "5d27a779-ddad-41be-8480-b1d4af9c67e5",
        "metadata": {}
      },
      {
        "path": "llmstruct/api",
        "type": "directory",
        "artifact_id": "92e7f2c0-4dc5-49b6-9cd5-28a102cf5e7d",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/__init__.py",
        "type": "file",
        "artifact_id": "1e61a496-3bfb-43df-b614-7db488349093",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/app.py",
        "type": "file",
        "artifact_id": "0d9c03a6-7966-41b6-821d-01595058c37d",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/config.py",
        "type": "file",
        "artifact_id": "6ed2bde3-2d41-443d-a2a2-bf8619a2cf25",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/middleware",
        "type": "directory",
        "artifact_id": "3963a1d0-32f8-40aa-916c-2a60bc0bdcf4",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/middleware/__init__.py",
        "type": "file",
        "artifact_id": "1ed77602-13f4-432d-93ea-95e79d415420",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/middleware/logging.py",
        "type": "file",
        "artifact_id": "df0c2d3c-86a5-4e0d-8e60-1e7e359bff12",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/models",
        "type": "directory",
        "artifact_id": "b8d97987-44e8-454f-8bed-05887fa7a0a4",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/models/__init__.py",
        "type": "file",
        "artifact_id": "750dbadb-cfd5-4647-b73d-ccbc82a3d957",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/models/requests.py",
        "type": "file",
        "artifact_id": "89477575-00ec-409b-854b-7d74491d9698",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/models/responses.py",
        "type": "file",
        "artifact_id": "39ae2651-ce77-44d1-bd83-1846aed3aa82",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/routes",
        "type": "directory",
        "artifact_id": "91d93546-fc93-4151-9f85-a3e284b1faf0",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/routes/__init__.py",
        "type": "file",
        "artifact_id": "1ed46866-f551-4c6e-a312-8e7b5d54b3ac",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/routes/chat.py",
        "type": "file",
        "artifact_id": "2f0f745d-a77a-4796-9859-563964328959",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/routes/continue_adapter.py",
        "type": "file",
        "artifact_id": "c55a5132-31d1-4c30-b072-98d1fdf2bb4d",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/routes/system.py",
        "type": "file",
        "artifact_id": "bf2222c6-5aad-4aac-b186-b77639ca1fa0",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/services",
        "type": "directory",
        "artifact_id": "5bcd4f55-d44e-4c72-ba1c-18b293553c2c",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/services/__init__.py",
        "type": "file",
        "artifact_id": "ebc4a573-d645-48ed-92c0-d5465c463090",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/services/chat_session.py",
        "type": "file",
        "artifact_id": "bf9fe808-6b82-4b7c-9001-9e45b412936c",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/services/cli_bridge.py",
        "type": "file",
        "artifact_id": "1e96c316-7409-4df3-b1ef-56e6d68b64de",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/services/llm_service.py",
        "type": "file",
        "artifact_id": "c78ccd42-26c6-45c7-a629-57b20c927a17",
        "metadata": {}
      },
      {
        "path": "llmstruct/cache.py",
        "type": "file",
        "artifact_id": "d3c4590b-d979-4be1-ae9a-7aad4f324202",
        "metadata": {}
      },
      {
        "path": "llmstruct/cli.py",
        "type": "file",
        "artifact_id": "57ac1415-1df2-40f2-821d-b65920475246",
        "metadata": {}
      },
      {
        "path": "llmstruct/core",
        "type": "directory",
        "artifact_id": "ef0cb276-f107-4651-adf2-3dcc4cd3e0f2",
        "metadata": {}
      },
      {
        "path": "llmstruct/core/__init__.py",
        "type": "file",
        "artifact_id": "4ff72bb3-632e-42ae-bc9f-d3f477922b39",
        "metadata": {}
      },
      {
        "path": "llmstruct/core/config_manager.py",
        "type": "file",
        "artifact_id": "f09c12a5-fbfa-4ad6-98bf-b42c70a5c1c1",
        "metadata": {}
      },
      {
        "path": "llmstruct/core/hash_utils.py",
        "type": "file",
        "artifact_id": "5a119f07-16d2-44eb-96d1-09ae731bb0e8",
        "metadata": {}
      },
      {
        "path": "llmstruct/core/summary_core.py",
        "type": "file",
        "artifact_id": "9a3a68af-82e5-47c4-be7e-4bc606fadce6",
        "metadata": {}
      },
      {
        "path": "llmstruct/core/summary_providers.py",
        "type": "file",
        "artifact_id": "bf1b17cc-fe75-40d1-80bd-cb1005c3c50a",
        "metadata": {}
      },
      {
        "path": "llmstruct/core/tag_inference.py",
        "type": "file",
        "artifact_id": "7d0588d7-50cb-4868-82c1-c34dcb8667aa",
        "metadata": {}
      },
      {
        "path": "llmstruct/core/uid_generator.py",
        "type": "file",
        "artifact_id": "394f45fb-3636-4b08-92fb-728c7d9e8192",
        "metadata": {}
      },
      {
        "path": "llmstruct/generators",
        "type": "directory",
        "artifact_id": "b276eaf6-d86b-45bd-b1f1-f44d6ec3035d",
        "metadata": {}
      },
      {
        "path": "llmstruct/generators/__init__.py",
        "type": "file",
        "artifact_id": "28cb1b94-c85a-4f98-8fb9-df54b1ac75af",
        "metadata": {}
      },
      {
        "path": "llmstruct/generators/go_json_generator.py",
        "type": "file",
        "artifact_id": "b21ae2f9-119f-4504-b125-8106a8bb13ac",
        "metadata": {}
      },
      {
        "path": "llmstruct/generators/index_generator.py",
        "type": "file",
        "artifact_id": "7667affb-aa83-492b-beca-395dd67be96d",
        "metadata": {}
      },
      {
        "path": "llmstruct/generators/json_generator.py",
        "type": "file",
        "artifact_id": "47e857a9-a976-4a8f-8444-0b845e6490a4",
        "metadata": {}
      },
      {
        "path": "llmstruct/json_selector.py",
        "type": "file",
        "artifact_id": "99fdbbb6-a1d6-43b5-a7ea-c42ef2bbed6f",
        "metadata": {}
      },
      {
        "path": "llmstruct/llm_client.py",
        "type": "file",
        "artifact_id": "cb008120-5d3b-4912-bddb-163b1b51dea5",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules",
        "type": "directory",
        "artifact_id": "e67f3bb7-0114-4f4f-a44a-ef5b43245b91",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli",
        "type": "directory",
        "artifact_id": "dada8882-a7f5-41a7-a539-a46a4dfaf788",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli/__init__.py",
        "type": "file",
        "artifact_id": "d02c8473-d064-49ce-a57f-47500cc772e5",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli/analyze_duplicates.py",
        "type": "file",
        "artifact_id": "f0abd5f4-f4e1-4917-b6ea-cb5d86eb5e5e",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli/audit.py",
        "type": "file",
        "artifact_id": "2bacf4b6-cf4f-47e7-9e45-f89132d3ead9",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli/context.py",
        "type": "file",
        "artifact_id": "02269254-d43e-4947-b1c9-38869f5204c0",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli/copilot.py",
        "type": "file",
        "artifact_id": "75e3774a-f650-49e7-a5b2-6d78e46c9d85",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli/dogfood.py",
        "type": "file",
        "artifact_id": "72c47879-592f-45ad-9899-4e9ade99c548",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli/epic.py",
        "type": "file",
        "artifact_id": "8dfc1d1b-7c17-49bb-8327-a871e6d01855",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli/handlers.py",
        "type": "file",
        "artifact_id": "63932466-ef92-49f8-ab81-a402c16735e2",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli/handlers_legacy.py",
        "type": "file",
        "artifact_id": "32e80399-e19a-432d-b823-0bb0718e5064",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli/parse.py",
        "type": "file",
        "artifact_id": "7e71f2fb-3427-4677-b350-4656d441b6e4",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli/query.py",
        "type": "file",
        "artifact_id": "9efa103b-e5d1-4404-b89f-ebf1c62269d7",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli/review.py",
        "type": "file",
        "artifact_id": "9a59389b-db78-48a6-85a6-b7ce5d8cef70",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli/utils.py",
        "type": "file",
        "artifact_id": "da68a028-bd67-42ee-8059-165e70a2ab1e",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/commands",
        "type": "directory",
        "artifact_id": "9154abeb-2e27-41fb-8e55-7f71a34eab41",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/commands/__init__.py",
        "type": "file",
        "artifact_id": "e7d735ed-c0ce-4f56-b4e3-b6829fdafa54",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/commands/metrics.py",
        "type": "file",
        "artifact_id": "18ecb08a-5e39-45e8-adbf-7a7f4b8bc231",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/commands/queue.py",
        "type": "file",
        "artifact_id": "19845313-9406-46b1-b70b-78b1642427be",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/commands/services.py",
        "type": "file",
        "artifact_id": "f3a4024e-4781-4d7d-9e1c-8869b55697e4",
        "metadata": {}
      },
      {
        "path": "llmstruct/parsers",
        "type": "directory",
        "artifact_id": "3de30cc3-f42e-4311-a9ae-7326107ac019",
        "metadata": {}
      },
      {
        "path": "llmstruct/parsers/__init__.py",
        "type": "file",
        "artifact_id": "7161af19-73ad-48b3-9b8c-62d4105a901c",
        "metadata": {}
      },
      {
        "path": "llmstruct/parsers/converter_config.py",
        "type": "file",
        "artifact_id": "46ef858a-aeff-4a9f-8c7a-8eab7a8d3424",
        "metadata": {}
      },
      {
        "path": "llmstruct/parsers/go_analyzer.py",
        "type": "file",
        "artifact_id": "fad6e085-b84b-4d70-9886-fd7b1ac29924",
        "metadata": {}
      },
      {
        "path": "llmstruct/parsers/go_converter.py",
        "type": "file",
        "artifact_id": "976ec43d-afa5-45ee-bfb9-23507941b837",
        "metadata": {}
      },
      {
        "path": "llmstruct/parsers/javascript_parser.py",
        "type": "file",
        "artifact_id": "76f262d0-a491-4de9-b36f-b505a0cf8016",
        "metadata": {}
      },
      {
        "path": "llmstruct/parsers/python_parser.py",
        "type": "file",
        "artifact_id": "90e7b748-d319-473e-8b3a-e76f197ebf4b",
        "metadata": {}
      },
      {
        "path": "llmstruct/parsers/universal_converter.py",
        "type": "file",
        "artifact_id": "994561a3-3e09-4bf7-82dd-111c6340c2a8",
        "metadata": {}
      },
      {
        "path": "llmstruct/self_run.py",
        "type": "file",
        "artifact_id": "4403eade-2f81-4468-9d63-04b186edb837",
        "metadata": {}
      },
      {
        "path": "llmstruct/templates",
        "type": "directory",
        "artifact_id": "bc1a453e-11dc-4271-8908-4ad8a02771e2",
        "metadata": {}
      },
      {
        "path": "llmstruct/templates/__init__.py",
        "type": "file",
        "artifact_id": "40cae13d-a420-41a0-9117-2e384b57135e",
        "metadata": {}
      },
      {
        "path": "llmstruct/validators",
        "type": "directory",
        "artifact_id": "319ac58d-10ec-4891-b524-58debc617f15",
        "metadata": {}
      },
      {
        "path": "llmstruct/validators/__init__.py",
        "type": "file",
        "artifact_id": "7f98bd86-cdf6-4f56-a15f-f1b722b30fd5",
        "metadata": {}
      },
      {
        "path": "llmstruct/validators/json_validator.py",
        "type": "file",
        "artifact_id": "9964a9a1-9a3a-4260-9a33-7207cfc17612",
        "metadata": {}
      },
      {
        "path": "scripts",
        "type": "directory",
        "artifact_id": "89820f29-b234-4ea2-83a7-9c32f6469390",
        "metadata": {}
      },
      {
        "path": "scripts/auto_update_struct.py",
        "type": "file",
        "artifact_id": "d3999d70-b6a0-40c8-a31d-e605ac3d3eca",
        "metadata": {}
      },
      {
        "path": "scripts/collector.py",
        "type": "file",
        "artifact_id": "ec671a03-c891-4e0e-9e36-4986c95706b0",
        "metadata": {}
      },
      {
        "path": "scripts/create_comprehensive_index.py",
        "type": "file",
        "artifact_id": "571e7fad-5125-4deb-ab6f-14ced5db2bcf",
        "metadata": {}
      },
      {
        "path": "scripts/create_github_issues.py",
        "type": "file",
        "artifact_id": "1c143c30-9f76-4e31-9515-526f0ffce4ea",
        "metadata": {}
      },
      {
        "path": "scripts/create_tasks_index.py",
        "type": "file",
        "artifact_id": "9e965ce7-bbdf-49bd-bd9d-f2b57d368bf8",
        "metadata": {}
      },
      {
        "path": "scripts/deploy_embedded_files.py",
        "type": "file",
        "artifact_id": "9f11d408-223c-40cd-bf91-f44dfa48aaf2",
        "metadata": {}
      },
      {
        "path": "scripts/epic_roadmap_manager.py",
        "type": "file",
        "artifact_id": "d332a954-7494-4e4e-a521-8baa84904d79",
        "metadata": {}
      },
      {
        "path": "scripts/export_to_github_projects.py",
        "type": "file",
        "artifact_id": "c064ad46-367e-40d9-b7cc-5a03f24c0b33",
        "metadata": {}
      },
      {
        "path": "scripts/fix_github_script.py",
        "type": "file",
        "artifact_id": "b4eeee0f-b0b3-426a-b806-fde613a4595f",
        "metadata": {}
      },
      {
        "path": "scripts/fix_hardcoded_usernames.py",
        "type": "file",
        "artifact_id": "57f62963-10ec-4fe3-8f4d-56d4109eee5e",
        "metadata": {}
      },
      {
        "path": "scripts/github_sync_manager.py",
        "type": "file",
        "artifact_id": "55c64f1c-b918-40c8-95a6-55bfcc9c6834",
        "metadata": {}
      },
      {
        "path": "scripts/github_sync_manager_enhanced.py",
        "type": "file",
        "artifact_id": "b3075cd0-2022-46cb-a591-720064ccaf22",
        "metadata": {}
      },
      {
        "path": "scripts/old",
        "type": "directory",
        "artifact_id": "24b1c0f5-9e5b-44e3-8466-bd337abd5630",
        "metadata": {}
      },
      {
        "path": "scripts/process_926_items.py",
        "type": "file",
        "artifact_id": "18e3c27f-edab-4071-9fbe-86167871e51a",
        "metadata": {}
      },
      {
        "path": "scripts/session_cli.py",
        "type": "file",
        "artifact_id": "1ed764b1-6de4-4bc6-a17a-4ff461d94aec",
        "metadata": {}
      },
      {
        "path": "scripts/team",
        "type": "directory",
        "artifact_id": "6281c0b0-6e69-4d78-9587-e19477b8ab1b",
        "metadata": {}
      },
      {
        "path": "scripts/team/__init__.py",
        "type": "file",
        "artifact_id": "bf7cf55b-a333-4562-8ba0-ebc03f988c5c",
        "metadata": {}
      },
      {
        "path": "scripts/validate_epics.py",
        "type": "file",
        "artifact_id": "56bea764-2ad9-413b-86cb-547592187cef",
        "metadata": {}
      },
      {
        "path": "scripts/validate_json.py",
        "type": "file",
        "artifact_id": "8a5ae326-08d6-459d-b2c7-df0a296956df",
        "metadata": {}
      },
      {
        "path": "scripts/validate_refs.py",
        "type": "file",
        "artifact_id": "f40c3ba0-22bf-4f09-a649-36a8d2c39e2e",
        "metadata": {}
      },
      {
        "path": "scripts/validate_schemas.py",
        "type": "file",
        "artifact_id": "36cf7eeb-b9a7-4d31-ab4d-64aed74c583a",
        "metadata": {}
      }
    ]
  },
  "toc": [
    {
      "module_id": "llmstruct.json_selector",
      "path": "llmstruct/json_selector.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "hash": "cc07b6d2cf42fd059429e43a0f8c985114c984ac92ba4ac6a618a8a7f8c588c2",
      "artifact_id": "725d8718-c680-4602-bba8-0e086e3ca2e7"
    },
    {
      "module_id": "llmstruct.__main__",
      "path": "llmstruct/__main__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "hash": "de795cd58c2dc4122dd30b382c844a7c67fc36489e443b7d12170fa0e15994dc",
      "artifact_id": "69f8da83-92b6-4fa1-b8e3-585c72eb4235"
    },
    {
      "module_id": "llmstruct.__init__",
      "path": "llmstruct/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "hash": "2592d45bae33fe6628051f9ae5eb6dd5f13fee9588b428a512203df62a55a122",
      "artifact_id": "f0790883-f27f-4726-bd69-d8f7d56d9c27"
    },
    {
      "module_id": "llmstruct.cache",
      "path": "llmstruct/cache.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "hash": "10a85d5ffece6af208cff17665640aeca3a1c44397e0b6da50f6a50fa53ae42f",
      "artifact_id": "38c1d89c-7525-4248-9433-9cab73f9a563"
    },
    {
      "module_id": "llmstruct.self_run",
      "path": "llmstruct/self_run.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "hash": "4bab9318950f2b239e5d0e642500367d03d5136749df94b40bfea53b93d54917",
      "artifact_id": "b675ae7e-43b8-4e1c-a202-39040482de94"
    },
    {
      "module_id": "llmstruct.llm_client",
      "path": "llmstruct/llm_client.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "hash": "c477d5e96f165fa96546ff8e2673db785cee146f6fffd0f424d21072431133ba",
      "artifact_id": "f712d108-20dd-42ca-8ded-9f61279b19c4"
    },
    {
      "module_id": "llmstruct.cli",
      "path": "llmstruct/cli.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "LLMStruct CLI - Main entry point for the command-line interface.",
      "hash": "1f852bf5a5b5f80fd9b8dab98d75d49013d03b538953ae4cdf16232bf118987f",
      "artifact_id": "8db5f9ea-050d-45f5-8251-11da2a34bd74"
    },
    {
      "module_id": "scripts.auto_update_struct",
      "path": "scripts/auto_update_struct.py",
      "category": "core",
      "functions": 8,
      "classes": 0,
      "summary": "Automatic struct.json update script",
      "hash": "505bdb6b282e7e9befc6df4165834fa7481335c96bbb88b04501996e15e173c2",
      "artifact_id": "c06ffa21-972e-4ab0-a842-6136b9c4db64"
    },
    {
      "module_id": "scripts.validate_schemas",
      "path": "scripts/validate_schemas.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "artifact_id": "06ffc68a-9fc1-4515-8d63-d6a7ab3f0e2d"
    },
    {
      "module_id": "scripts.github_sync_manager",
      "path": "scripts/github_sync_manager.py",
      "category": "core",
      "functions": 15,
      "classes": 1,
      "summary": "GitHub Sync Manager - \u0418\u0434\u0435\u043c\u043f\u043e\u0442\u0435\u043d\u0442\u043d\u0430\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f processing results \u0441 GitHub",
      "hash": "1ee49d0d031a76692ccc03ff995d0a75d198818dcf2c1f625d6e9aee0828a7c9",
      "artifact_id": "cb021e4b-c3d0-4ad9-a6f1-82a942be79bd"
    },
    {
      "module_id": "scripts.fix_github_script",
      "path": "scripts/fix_github_script.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Quick fix for GitHub issues creation script",
      "hash": "749ea82f6bcdc68da77827b691267646be1c85f5b2c20e39d085d768c9e64d87",
      "artifact_id": "6c2ebff9-f0df-4a3c-a4c6-4e97abbdbdaf"
    },
    {
      "module_id": "scripts.create_github_issues",
      "path": "scripts/create_github_issues.py",
      "category": "core",
      "functions": 11,
      "classes": 1,
      "summary": "GitHub Issues Creator for AI-Dogfooding Project",
      "hash": "49ba6a19e2c3aa696879c666036ca56bf5678032d3a8a1004c9c1849b87104b7",
      "artifact_id": "7b472068-dda7-4418-85b2-cebc52d5a152"
    },
    {
      "module_id": "scripts.collector",
      "path": "scripts/collector.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "hash": "251462380e2e135880f652ce7d9e6a1483d18a1202c336f76ac3f43536505049",
      "artifact_id": "f315bbf8-e141-4308-9a57-eee65ccc8a6a"
    },
    {
      "module_id": "scripts.validate_refs",
      "path": "scripts/validate_refs.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "hash": "6c57e53f4e4e0afdb8e8c78f1e6d38f284721f6729a7197ff483ed29f5363607",
      "artifact_id": "c3acc7ca-b816-45ed-a1e2-70fbac75a931"
    },
    {
      "module_id": "scripts.epic_roadmap_manager",
      "path": "scripts/epic_roadmap_manager.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "Epic Roadmap Manager - \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430\u043c\u0438 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0441\u0435\u0441\u0441\u0438\u0439",
      "hash": "5125fc24bf131dbbbda814a26f75ecff0e8d6cebde166de88b637ee22ac7251e",
      "artifact_id": "fd4ed2c0-b1ce-49fa-bb88-1dcc84a1f812"
    },
    {
      "module_id": "scripts.process_926_items",
      "path": "scripts/process_926_items.py",
      "category": "core",
      "functions": 16,
      "classes": 1,
      "summary": "926 Items Processing Script - Updated Implementation",
      "hash": "75943c116813d77b47300deeaeadb26b7ccd4a37912497bdb82871198feedcf5",
      "artifact_id": "395a2fe5-346c-4e14-8e8c-f62b9cd3dc29"
    },
    {
      "module_id": "scripts.session_cli",
      "path": "scripts/session_cli.py",
      "category": "core",
      "functions": 10,
      "classes": 1,
      "summary": "Session Management CLI",
      "hash": "23aca9a658e60715b7fa3e4a009c3de7baebdd1eca3acae17d87938ae622cc41",
      "artifact_id": "c8843a80-2452-4ffd-bb8e-2ef8df6ab294"
    },
    {
      "module_id": "scripts.validate_epics",
      "path": "scripts/validate_epics.py",
      "category": "core",
      "functions": 5,
      "classes": 0,
      "summary": "Epic Data Validator",
      "hash": "43fb177eab31592c2b7c17c990f728cb1401eeba26a2e3191857ca218208a3df",
      "artifact_id": "7865bc85-0056-442c-bcc5-527cb3a9bb47"
    },
    {
      "module_id": "scripts.export_to_github_projects",
      "path": "scripts/export_to_github_projects.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "Export script for GitHub Projects integration",
      "hash": "b6b4f700d8fed14e918455d59e88d15bc3259556aad468ee3c3ea4816d710f2a",
      "artifact_id": "7573e4c5-8442-4c89-b056-e2e184e6050c"
    },
    {
      "module_id": "scripts.validate_json",
      "path": "scripts/validate_json.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "JSON Validation Script",
      "hash": "0d360b788079e8804f864e0cef5eb33006fb4dbae00eaaea95ef0d692e79640d",
      "artifact_id": "0261d932-684a-413e-8e4a-db13f8cc8660"
    },
    {
      "module_id": "scripts.create_comprehensive_index",
      "path": "scripts/create_comprehensive_index.py",
      "category": "core",
      "functions": 37,
      "classes": 2,
      "summary": "Comprehensive Project Index Creator",
      "hash": "3de71f291650a50e7e3c04fc660a7c31d909a1f929d375ec5324f909c0a81c97",
      "artifact_id": "7faf14ca-9867-4e18-9277-2048cf8e0b4c"
    },
    {
      "module_id": "scripts.github_sync_manager_enhanced",
      "path": "scripts/github_sync_manager_enhanced.py",
      "category": "core",
      "functions": 28,
      "classes": 3,
      "summary": "Enhanced GitHub Sync Manager - \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u043b\u0443\u0447\u0448\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0438\u0437 full_project_rollout",
      "hash": "dee5ab49d5c48115c3b9b6df054a1160c44fb7addfa035958aa7db8619301d96",
      "artifact_id": "77311e78-5679-46c7-948e-ea77569993d5"
    },
    {
      "module_id": "scripts.deploy_embedded_files",
      "path": "scripts/deploy_embedded_files.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "hash": "965c984b688301f0d0c65fc65cc8c95a878218aec94afab5dca3b3c7f65cea19",
      "artifact_id": "e81e6b3d-4c86-4318-8a21-7f144b02c502"
    },
    {
      "module_id": "scripts.fix_hardcoded_usernames",
      "path": "scripts/fix_hardcoded_usernames.py",
      "category": "core",
      "functions": 12,
      "classes": 2,
      "summary": "Fix Hardcoded Usernames Script",
      "hash": "04fdd50dde3b144c4c93f598ab0748be398c1287e006924d5a573d5b520395a3",
      "artifact_id": "706dde2d-da08-472d-bcbe-e73631aea031"
    },
    {
      "module_id": "scripts.create_tasks_index",
      "path": "scripts/create_tasks_index.py",
      "category": "core",
      "functions": 18,
      "classes": 3,
      "summary": "Tasks Index Creator",
      "hash": "8dc454229e01725267e1ece8a1363faf1501013df5f34f371865de1d1d386035",
      "artifact_id": "83eb81cf-591c-4fa8-a03c-d5732ec3cc63"
    },
    {
      "module_id": "llmstruct.templates.__init__",
      "path": "llmstruct/templates/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Templates for LLM prompts used in LLMStruct integration.",
      "hash": "2421ea45b39e72f090ee252149c45385f679971e48ca50f0883e313c3db9fa6d",
      "artifact_id": "68c90b61-457e-4a63-bb21-ad81bc1d64a2"
    },
    {
      "module_id": "llmstruct.ARCHIVE.cli_argument_parser",
      "path": "llmstruct/ARCHIVE/cli_argument_parser.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "CLI argument parsing for LLMStruct.",
      "hash": "e54ef1274816747eae572b5045a59d35b9d2eb27b4358919ab57d61cef9fb47b",
      "artifact_id": "3aabba9b-5933-4818-8ac5-02f37f40b8f4"
    },
    {
      "module_id": "llmstruct.ARCHIVE.cli_core",
      "path": "llmstruct/ARCHIVE/cli_core.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "Core CLI functionality and main loop.",
      "hash": "57a534c55c12bacfaf26ed4b4124fe97a3c2559253b5a62346e9c9f0368e5132",
      "artifact_id": "75979c1a-677f-4588-ac29-b99e9eb0d9b5"
    },
    {
      "module_id": "llmstruct.ARCHIVE.cli_utils",
      "path": "llmstruct/ARCHIVE/cli_utils.py",
      "category": "core",
      "functions": 13,
      "classes": 1,
      "summary": "CLI utility functions.",
      "hash": "105ac5d21c6d1870ac478aadb62ca79e99a3453df4457642fcda39f575abf367",
      "artifact_id": "633cc8a1-0582-4379-bb32-56a57c46720f"
    },
    {
      "module_id": "llmstruct.ARCHIVE.cli_main_commands",
      "path": "llmstruct/ARCHIVE/cli_main_commands.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "Main CLI command handlers for LLMStruct.",
      "hash": "06e7d297542ace93514d731c2af8e0f0daa4c7c3a8fc1e90466f3b5fc5486189",
      "artifact_id": "556f563c-177c-478f-89a2-55403483a9d9"
    },
    {
      "module_id": "llmstruct.ARCHIVE.cli_config",
      "path": "llmstruct/ARCHIVE/cli_config.py",
      "category": "core",
      "functions": 18,
      "classes": 1,
      "summary": "CLI configuration management.",
      "hash": "4e3a5903ff3fcd932118bf5521902da18bc72c67f93835354f70576d1413de49",
      "artifact_id": "00e3dda3-fecc-49c6-9373-4204f1189c4f"
    },
    {
      "module_id": "llmstruct.ARCHIVE.cli_commands",
      "path": "llmstruct/ARCHIVE/cli_commands.py",
      "category": "core",
      "functions": 22,
      "classes": 1,
      "summary": "CLI command processing and handlers.",
      "hash": "dd0d9e75fb410d85bfe10f3e554b2fa45c45847ccb317cd54107e4ac6ce33bec",
      "artifact_id": "f67d8032-6795-4cb7-9fea-ebef8cecb426"
    },
    {
      "module_id": "llmstruct.api.__init__",
      "path": "llmstruct/api/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "LLMStruct FastAPI Module",
      "hash": "a9ca65f873c3361ae7a8000072fa4f5b926851fe59f7ae8cecec41df9ba72707",
      "artifact_id": "adbcb66b-eb57-4f8f-b3c0-d1d6f762e879"
    },
    {
      "module_id": "llmstruct.api.config",
      "path": "llmstruct/api/config.py",
      "category": "core",
      "functions": 0,
      "classes": 1,
      "summary": "Configuration management for LLMStruct FastAPI",
      "hash": "714131daa5c1b3f6d461173939ed6f29e670e6ace0067bac322bd30ca3341f48",
      "artifact_id": "656a9491-2ba6-4785-af94-ebdd5c976398"
    },
    {
      "module_id": "llmstruct.api.app",
      "path": "llmstruct/api/app.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Main FastAPI application for LLMStruct",
      "hash": "ce8bc5451d35e263884b85be7e9c7bb6a332b5c3eae63322911e57a1d0eb44c1",
      "artifact_id": "55599de5-d1bf-46da-b7ac-213066b3801b"
    },
    {
      "module_id": "llmstruct.core.summary_core",
      "path": "llmstruct/core/summary_core.py",
      "category": "core",
      "functions": 3,
      "classes": 3,
      "summary": "Summary Core Types and Abstractions",
      "hash": "fb6fa773980dc2f7b3aa8f6576f1a4dff3b2bed0cc3a96fe6ce83e69c83b6c27",
      "artifact_id": "5edc6c8b-b553-41c3-8114-d42eb594ca93"
    },
    {
      "module_id": "llmstruct.core.hash_utils",
      "path": "llmstruct/core/hash_utils.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "Hash Utilities for LLMStruct",
      "hash": "a09dfbc3793462b66bfbb6489f69e55e430eb5ea5bce1679e1a365aeefcc2527",
      "artifact_id": "9aecac0a-ca45-4549-b211-7d43c3ceee7c"
    },
    {
      "module_id": "llmstruct.core.summary_providers",
      "path": "llmstruct/core/summary_providers.py",
      "category": "core",
      "functions": 19,
      "classes": 3,
      "summary": "Summary Providers Implementation",
      "hash": "bcc20c0a8fff1f6cbf17c4554109513cc1ce12fdf7d7c79c88c133cad69cd643",
      "artifact_id": "a792a18a-14f7-4e8d-84be-99d5ac65426c"
    },
    {
      "module_id": "llmstruct.core.uid_generator",
      "path": "llmstruct/core/uid_generator.py",
      "category": "core",
      "functions": 11,
      "classes": 1,
      "summary": "Advanced UID Generator System for LLMStruct v2.1",
      "hash": "374c80a334ad6c8431a1c2f1e928ced04318c6b8c118cf6b80db4cac71906906",
      "artifact_id": "346f2d58-8042-4b86-81c3-f4c3906da75c"
    },
    {
      "module_id": "llmstruct.core.__init__",
      "path": "llmstruct/core/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "LLMStruct Core Module",
      "hash": "eadf7f00989631985d8df6b12ad76f573b59bcf70daeec4ca41d358c8efce05d",
      "artifact_id": "1ce53665-9bb3-4c50-aa3c-1ac71c5e7295"
    },
    {
      "module_id": "llmstruct.core.tag_inference",
      "path": "llmstruct/core/tag_inference.py",
      "category": "core",
      "functions": 4,
      "classes": 1,
      "summary": "llmstruct.core.tag_inference",
      "hash": "dff27ad9a8177860f06a4b2583f1bc509e25ff10a603a679f6c8216b2d9d83f8",
      "artifact_id": "bca446d5-bb3a-4b1d-a5fa-5992794f779d"
    },
    {
      "module_id": "llmstruct.core.config_manager",
      "path": "llmstruct/core/config_manager.py",
      "category": "core",
      "functions": 12,
      "classes": 6,
      "summary": "Configuration Management System for LLMStruct",
      "hash": "48402181f4ae2ca639e8f3f536266117621f603cd820a524a4bc84e12fc203bc",
      "artifact_id": "f25f11ff-159c-453f-b147-a87f5771c5e7"
    },
    {
      "module_id": "llmstruct.validators.__init__",
      "path": "llmstruct/validators/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "hash": "f0ee4f577643fd8bc74b46fd7debd96cc15683b5a7ad0018bb0788523f4b8d34",
      "artifact_id": "f81cae0c-1e49-46de-b095-937d69a9f441"
    },
    {
      "module_id": "llmstruct.validators.json_validator",
      "path": "llmstruct/validators/json_validator.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "hash": "cc5c6b4f74409f89459ec86a9d59d83cd92c691e95ab4e670e6b8ac8c979a232",
      "artifact_id": "a354b8b3-c64d-4701-801d-e3edb7ca51c5"
    },
    {
      "module_id": "llmstruct.parsers.universal_converter",
      "path": "llmstruct/parsers/universal_converter.py",
      "category": "core",
      "functions": 13,
      "classes": 1,
      "summary": "Universal Code Converter - Orchestrates all language parsers",
      "hash": "0e9cb6b474f43c12c13883fa595623e56289a98334605e24c843bb548bc85295",
      "artifact_id": "b51c4a69-140e-49d3-aeb0-c3e9329226e3"
    },
    {
      "module_id": "llmstruct.parsers.python_parser",
      "path": "llmstruct/parsers/python_parser.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "",
      "hash": "38c6570a5aee1901b6a02d1299f1c65c8d97329426d3672b51768aa3cc4e082f",
      "artifact_id": "67420b30-3f38-40a8-9f43-1f5d27f2bc8a"
    },
    {
      "module_id": "llmstruct.parsers.go_analyzer",
      "path": "llmstruct/parsers/go_analyzer.py",
      "category": "core",
      "functions": 5,
      "classes": 1,
      "summary": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 Go \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043b\u044f Docker \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430",
      "hash": "923fb543f6854ce1a1bac463656f2585ff577dd5b130532b28b617620281a8a4",
      "artifact_id": "fe80f60c-cda3-4bf6-8e18-1ff83a1cd11e"
    },
    {
      "module_id": "llmstruct.parsers.__init__",
      "path": "llmstruct/parsers/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "hash": "2f1fce5cf3e867869608b18a8ab1197f8a32add4fd35d4de75f891a9dad04b63",
      "artifact_id": "ac1d8c48-32c0-45ca-9c8d-b0ca1766afbf"
    },
    {
      "module_id": "llmstruct.parsers.go_converter",
      "path": "llmstruct/parsers/go_converter.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "Go to LLMStruct Converter",
      "hash": "65ced6861f11e18b23a88480e17634c4208abcb8fcbcc0452f49f80956bd78d2",
      "artifact_id": "913a4ba0-fa92-4480-82d4-732936e2e1c4"
    },
    {
      "module_id": "llmstruct.parsers.javascript_parser",
      "path": "llmstruct/parsers/javascript_parser.py",
      "category": "core",
      "functions": 5,
      "classes": 1,
      "summary": "",
      "hash": "d72a535878665688c103a8e225916fe245049497b97813cfbe91c9dc6016cb28",
      "artifact_id": "4c1cfe9e-a82c-44be-8bb1-eec7077c5c8f"
    },
    {
      "module_id": "llmstruct.parsers.converter_config",
      "path": "llmstruct/parsers/converter_config.py",
      "category": "core",
      "functions": 3,
      "classes": 3,
      "summary": "Universal Converter Configuration and Constants",
      "hash": "9473cda938ff7f0deaae682690c3b46b90b9c8a1bf68ec1977c21fd67b16dd43",
      "artifact_id": "a90681a3-85e4-4416-b05b-4f5df88c63df"
    },
    {
      "module_id": "llmstruct.generators.go_json_generator",
      "path": "llmstruct/generators/go_json_generator.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "hash": "2e11ebd0b1baad6e008b5c7c7dcff832215263638561a7d78670b0cb647d4bf1",
      "artifact_id": "b6c10510-db73-4e63-bc5e-bcb031429d09"
    },
    {
      "module_id": "llmstruct.generators.__init__",
      "path": "llmstruct/generators/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "hash": "6510b9d89fa5bff008cf7b1ee6f50343f96b76737b5842a930c06888c5cbba6c",
      "artifact_id": "6f3f02ad-6cfa-4bb2-8815-2a4e4550575d"
    },
    {
      "module_id": "llmstruct.generators.index_generator",
      "path": "llmstruct/generators/index_generator.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "Index.json Generator for LLMStruct Phase 1",
      "hash": "4cc0c5db387e8b0316c6d17e47ba6a9bd64bb33281da542a6077d0f158a54e86",
      "artifact_id": "c70f69f5-588c-4dcd-bc5a-2d03ac9d3179"
    },
    {
      "module_id": "llmstruct.generators.json_generator",
      "path": "llmstruct/generators/json_generator.py",
      "category": "core",
      "functions": 6,
      "classes": 0,
      "summary": "",
      "hash": "9e7ccd5af8b0c4dcaec64f9bb262176c4cc1bd1dbc918d80677a2d47601757ae",
      "artifact_id": "0f8f22aa-4c65-44d0-a2bb-ba024a3302ee"
    },
    {
      "module_id": "llmstruct.api.routes.system",
      "path": "llmstruct/api/routes/system.py",
      "category": "core",
      "functions": 5,
      "classes": 0,
      "summary": "System routes for LLMStruct FastAPI",
      "hash": "12d5f16af2648af5535ac4f2428296ca65266db6fe621f2d3e919e49c5cf70eb",
      "artifact_id": "d4af1845-e904-4cb3-b85a-3b7ff6a4eeac"
    },
    {
      "module_id": "llmstruct.api.routes.__init__",
      "path": "llmstruct/api/routes/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Routes package for LLMStruct FastAPI",
      "hash": "c55fef17f5bf04d1b099b37498ea82c52295667412e308642a36e6ddaa95e49d",
      "artifact_id": "042bdbde-d5b9-4770-b18f-fccfc4f81610"
    },
    {
      "module_id": "llmstruct.api.routes.chat",
      "path": "llmstruct/api/routes/chat.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "Chat Routes",
      "hash": "59b0748bcb0b7a09f0c062ff814d3af7c5f8741d6aea2514170fffeed3366e63",
      "artifact_id": "c8acd944-9135-4edf-9025-1b81d675f1ed"
    },
    {
      "module_id": "llmstruct.api.routes.continue_adapter",
      "path": "llmstruct/api/routes/continue_adapter.py",
      "category": "core",
      "functions": 5,
      "classes": 2,
      "summary": "Continue API Adapter",
      "hash": "98b3a53aab4b11fc41c646ed118d313f39f0f4a02aa39cde44fe28a4f89706f2",
      "artifact_id": "bead413d-8c35-41e4-8153-3c0b8339027e"
    },
    {
      "module_id": "llmstruct.api.middleware.__init__",
      "path": "llmstruct/api/middleware/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Middleware package for LLMStruct FastAPI",
      "hash": "2675b95488b2d45c21c244b8c633aa8a1cbbc2af4d2a4094c07426c9fed917ce",
      "artifact_id": "4b44a011-c1d9-44f1-86ab-9b479f72f381"
    },
    {
      "module_id": "llmstruct.api.middleware.logging",
      "path": "llmstruct/api/middleware/logging.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Logging middleware for LLMStruct FastAPI",
      "hash": "ad05f6fcbc2b6f2eb916437708888f9bdbd21efbb0a3b1c83cf36463bce9fcea",
      "artifact_id": "39bac83d-0c02-41d7-9147-c3d022b96a48"
    },
    {
      "module_id": "llmstruct.api.services.llm_service",
      "path": "llmstruct/api/services/llm_service.py",
      "category": "core",
      "functions": 17,
      "classes": 4,
      "summary": "LLM Service",
      "hash": "a1d741ba8e78df4c0ac307472301c495c4ea017423b103d7472bc5ae6250ab6f",
      "artifact_id": "f3b16d8f-f97d-4888-b5bd-ae50c8329e5f"
    },
    {
      "module_id": "llmstruct.api.services.__init__",
      "path": "llmstruct/api/services/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Services package for LLMStruct FastAPI",
      "hash": "44b6e1c9b0237a6636ef094dffd5589c9565f840159c5dd657c930c8838d323d",
      "artifact_id": "ca4c43e7-29ac-4fe3-96d9-ceb4afc67946"
    },
    {
      "module_id": "llmstruct.api.services.cli_bridge",
      "path": "llmstruct/api/services/cli_bridge.py",
      "category": "core",
      "functions": 9,
      "classes": 2,
      "summary": "CLI Bridge Service",
      "hash": "ae6642d6b4982964e62cfd89d281408fbc17bf8540df9d761aa7c540a33cd9d0",
      "artifact_id": "83185888-4adb-46bc-a7ab-ab39be09a450"
    },
    {
      "module_id": "llmstruct.api.services.chat_session",
      "path": "llmstruct/api/services/chat_session.py",
      "category": "core",
      "functions": 14,
      "classes": 2,
      "summary": "Chat Session Manager",
      "hash": "278a79380fa447dfedc355ffa26c5274625aba212f8c8febc0be832a4342f6aa",
      "artifact_id": "dc9bc199-33a3-44f2-b26f-8867ac45b3b3"
    },
    {
      "module_id": "llmstruct.api.models.requests",
      "path": "llmstruct/api/models/requests.py",
      "category": "core",
      "functions": 0,
      "classes": 15,
      "summary": "Request models for LLMStruct FastAPI",
      "hash": "dc0eeffef63529c5124c852cad0692908215fa4c7ebe8a6305ca8d701741d758",
      "artifact_id": "0a1b3081-3e44-437c-ae9b-e55f42a60e65"
    },
    {
      "module_id": "llmstruct.api.models.responses",
      "path": "llmstruct/api/models/responses.py",
      "category": "core",
      "functions": 0,
      "classes": 19,
      "summary": "Response models for LLMStruct FastAPI",
      "hash": "078fd90649a418e1a54b3ca016ffe75935a83f57d232ec351be8be93a8462dae",
      "artifact_id": "a3bee998-77e1-4cfc-b237-ab34b0d41dfd"
    },
    {
      "module_id": "llmstruct.api.models.__init__",
      "path": "llmstruct/api/models/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Pydantic models for LLMStruct FastAPI",
      "hash": "b8e418fc588027c39078efbe602bc30126d34375ab863658b820247d69432b02",
      "artifact_id": "cc42d632-bb9a-4e75-be57-46d44e4646ac"
    },
    {
      "module_id": "llmstruct.modules.commands.metrics",
      "path": "llmstruct/modules/commands/metrics.py",
      "category": "core",
      "functions": 7,
      "classes": 0,
      "summary": "",
      "hash": "f3cdbecb744fbdb29ca949fe874d201a44bc014625127b14d500e5828dc11e54",
      "artifact_id": "cabf1403-a7bb-42d2-9ac0-c461820d97b9"
    },
    {
      "module_id": "llmstruct.modules.commands.services",
      "path": "llmstruct/modules/commands/services.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "hash": "96ca731ade5a7043ea0459124cc364e27740657bccffde74544182d938e57d98",
      "artifact_id": "ba4c00cb-56e4-4fda-ba80-5bc8bbe66c3c"
    },
    {
      "module_id": "llmstruct.modules.commands.__init__",
      "path": "llmstruct/modules/commands/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "hash": "36a9e7f1c95b82ffb99743e0c5c4ce95d83c9a430aac59f84ef3cbfab6145068",
      "artifact_id": "4105e051-5408-4037-afb1-af4eaf2dcce9"
    },
    {
      "module_id": "llmstruct.modules.commands.queue",
      "path": "llmstruct/modules/commands/queue.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "hash": "93ea2acd1be91706282b474b0d3d20881d6894688201c8b0acd0ee1f7266b285",
      "artifact_id": "6bd7a24b-2c91-4992-8be7-7de50b724075"
    },
    {
      "module_id": "llmstruct.modules.cli.audit",
      "path": "llmstruct/modules/cli/audit.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "hash": "2db7989b347f40218b0105a07e15164e4fa869ecf87fe977e929a36ad7b90179",
      "artifact_id": "4aa56233-e376-461b-b272-a726b2681597"
    },
    {
      "module_id": "llmstruct.modules.cli.utils",
      "path": "llmstruct/modules/cli/utils.py",
      "category": "cli",
      "functions": 16,
      "classes": 0,
      "summary": "",
      "hash": "3f9f61b289dbdcbe85ccc89e60dd4e6a5a9a2cc31194ab9d0d8fe613fac51924",
      "artifact_id": "90b4ccc6-e39f-4648-9ccc-89e9f2a105ac"
    },
    {
      "module_id": "llmstruct.modules.cli.dogfood",
      "path": "llmstruct/modules/cli/dogfood.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "hash": "18989e9381a3f9872468dfd93602c7b12cbe7cb740a402dda2711c7c98bb3a98",
      "artifact_id": "71226735-0947-4b05-aaf1-7d8412d86203"
    },
    {
      "module_id": "llmstruct.modules.cli.handlers_legacy",
      "path": "llmstruct/modules/cli/handlers_legacy.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "hash": "3676e871a4d165bc1a661bc3791663f9127c614086610286e69f1ddb1674c68e",
      "artifact_id": "2efcc925-704c-4a6b-9af0-5d83ae43982e"
    },
    {
      "module_id": "llmstruct.modules.cli.analyze_duplicates",
      "path": "llmstruct/modules/cli/analyze_duplicates.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "hash": "d9c98a76c4920b3bfe62a812811aa9edf7158fa6d307eecd1235c4a2d93f146c",
      "artifact_id": "d7718778-d41a-456c-9def-6ed3b7e7aa97"
    },
    {
      "module_id": "llmstruct.modules.cli.__init__",
      "path": "llmstruct/modules/cli/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "hash": "36a9e7f1c95b82ffb99743e0c5c4ce95d83c9a430aac59f84ef3cbfab6145068",
      "artifact_id": "b4fc3f15-c85b-4a21-9e12-21f4c88cddd7"
    },
    {
      "module_id": "llmstruct.modules.cli.review",
      "path": "llmstruct/modules/cli/review.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "hash": "1065196bb1074e1f669c0973da53285a04a2ab62d7462e97dfed418488d4a451",
      "artifact_id": "f4b3cf2c-053c-40f5-8d8d-8c3dc9058e51"
    },
    {
      "module_id": "llmstruct.modules.cli.context",
      "path": "llmstruct/modules/cli/context.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "hash": "2eaa01d2531e7fab1705f319c2b166013a6c19186010ee7b126e5e8396dd4699",
      "artifact_id": "bcbe07b2-edbc-4789-b07a-17e42d476ade"
    },
    {
      "module_id": "llmstruct.modules.cli.query",
      "path": "llmstruct/modules/cli/query.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "hash": "aebf4b74c71a6845676877cbd60f5530d3afab38fa6ccec41c114e158cb0f614",
      "artifact_id": "f262c0cb-60b4-4f7f-80bf-1f44e0e35dae"
    },
    {
      "module_id": "llmstruct.modules.cli.copilot",
      "path": "llmstruct/modules/cli/copilot.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "hash": "7bc44c139d0fb9c7f3ae37544ef763d68cc55e4220c2e89d73d766801541f947",
      "artifact_id": "5374749b-eff5-4085-8dfb-47081b124c43"
    },
    {
      "module_id": "llmstruct.modules.cli.parse",
      "path": "llmstruct/modules/cli/parse.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "hash": "956bae8ed64ccecfe5a00994c2e929c062fd7ba29d83200aba23f7fe75285d63",
      "artifact_id": "0cb3c22a-c93c-4e01-a255-91eb178757cf"
    },
    {
      "module_id": "llmstruct.modules.cli.epic",
      "path": "llmstruct/modules/cli/epic.py",
      "category": "cli",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "hash": "7a96cb38d4cc07f413b5da974e0eb6c461a8ce1c76f96f808c8a4414a7eb1b30",
      "artifact_id": "3df662fd-1969-42e5-89b6-a9d9074b2a65"
    },
    {
      "module_id": "llmstruct.modules.cli.handlers",
      "path": "llmstruct/modules/cli/handlers.py",
      "category": "cli",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "hash": "51450e4006a43d948e918bd87e43874e584f08c569cdbe9f89aff58c9d6293a2",
      "artifact_id": "561b88dc-48be-49b1-ad27-8c751f6588a8"
    },
    {
      "module_id": "scripts.team.__init__",
      "path": "scripts/team/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "artifact_id": "0657f98a-b8bc-4b67-93cb-8af651364f1b"
    }
  ],
  "modules": [
    {
      "module_id": "llmstruct.json_selector",
      "path": "llmstruct/json_selector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_json",
          "docstring": "Filter JSON data by key-value pair and select fields.",
          "line_range": [
            20,
            46
          ],
          "parameters": [
            "data",
            "filter_key",
            "filter_value",
            "fields"
          ],
          "decorators": [],
          "uid": "llmstruct.json_selector.filter_json:20#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.json_selector",
            "llmstruct.json_selector.filter_json:20"
          ],
          "hash": "f552ecdd10853e5da4b30c8c18745039fddfe4b29245953a2f324b651b7386e7",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-json-selector-filter-json",
          "summary": "Filter JSON data by key-value pair and select fields.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "filtered.append",
            "data.get",
            "isinstance",
            "item.get"
          ],
          "called_by": [
            "select_json"
          ]
        },
        {
          "name": "select_json",
          "docstring": "Load and filter JSON file, optionally parsing partially.",
          "line_range": [
            49,
            116
          ],
          "parameters": [
            "json_path",
            "filter_key",
            "filter_value",
            "fields",
            "partial"
          ],
          "decorators": [],
          "uid": "llmstruct.json_selector.select_json:49#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.json_selector",
            "llmstruct.json_selector.select_json:49"
          ],
          "hash": "ffa3de090fda1f4759f5b9fa724dd5759d7c5cc850afc1dd08a917fefcb0028f",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-json-selector-select-json",
          "summary": "Load and filter JSON file, optionally parsing partially.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "filtered.append",
            "path.append",
            "ijson.parse",
            "current_item.get",
            "json.load",
            "prefix.startswith",
            "open",
            "Path",
            "json_file.exists",
            "filter_json",
            "f.seek",
            "logging.error"
          ],
          "called_by": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_json": [
          "filtered.append",
          "data.get",
          "isinstance",
          "item.get"
        ],
        "select_json": [
          "filtered.append",
          "path.append",
          "ijson.parse",
          "current_item.get",
          "json.load",
          "prefix.startswith",
          "open",
          "Path",
          "json_file.exists",
          "filter_json",
          "f.seek",
          "logging.error"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "ijson",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": "cc07b6d2cf42fd059429e43a0f8c985114c984ac92ba4ac6a618a8a7f8c588c2",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.json_selector.llmstruct.json_selector#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.json_selector",
        "llmstruct.json_selector.llmstruct.json_selector"
      ],
      "summary": "Module for llmstruct.json selector",
      "summary_source": "heuristic",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "725d8718-c680-4602-bba8-0e086e3ca2e7"
    },
    {
      "module_id": "llmstruct.__main__",
      "path": "llmstruct/__main__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "llmstruct.cli",
        "main"
      ],
      "hash": "de795cd58c2dc4122dd30b382c844a7c67fc36489e443b7d12170fa0e15994dc",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.__main__.llmstruct.__main__#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.__main__",
        "llmstruct.__main__.llmstruct.__main__"
      ],
      "summary": "Module for llmstruct. main",
      "summary_source": "heuristic",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "69f8da83-92b6-4fa1-b8e3-585c72eb4235"
    },
    {
      "module_id": "llmstruct.__init__",
      "path": "llmstruct/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "AISelfAwarenessCLIIntegration",
        "LLMClient",
        "SystemCapabilityDiscovery",
        "ai_cli_integration",
        "ai_self_awareness",
        "llm_client"
      ],
      "hash": "2592d45bae33fe6628051f9ae5eb6dd5f13fee9588b428a512203df62a55a122",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.__init__.llmstruct.__init__#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.__init__",
        "llmstruct.__init__.llmstruct.__init__"
      ],
      "summary": "Module for llmstruct. init",
      "summary_source": "heuristic",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "f0790883-f27f-4726-bd69-d8f7d56d9c27"
    },
    {
      "module_id": "llmstruct.cache",
      "path": "llmstruct/cache.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize SQLite cache for JSON files.",
          "line_range": [
            21,
            25
          ],
          "parameters": [
            "self",
            "db_path"
          ],
          "decorators": [],
          "uid": "llmstruct.cache.__init__:21#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.cache",
            "llmstruct.cache.__init__:21"
          ],
          "hash": "bee238120520ca2f4e6fae676d9bd92c57b8ad33db48515dfe120ba59fae9b90",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-cache---init--",
          "summary": "Initialize SQLite cache for JSON files.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "self.create_tables",
            "sqlite3.connect"
          ],
          "called_by": []
        },
        {
          "name": "create_tables",
          "docstring": "Create tables for metadata and file paths.",
          "line_range": [
            27,
            49
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.cache.create_tables:27#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.cache",
            "llmstruct.cache.create_tables:27"
          ],
          "hash": "b6692508b5fae5317eba82aa545001bf64aed7670d7e9e88b10a4eab75813ba7",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-cache-create-tables",
          "summary": "Create tables for metadata and file paths.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [],
          "called_by": []
        },
        {
          "name": "cache_json",
          "docstring": "Cache JSON metadata and store full file path.",
          "line_range": [
            51,
            90
          ],
          "parameters": [
            "self",
            "json_path",
            "artifact_id",
            "summary",
            "tags"
          ],
          "decorators": [],
          "uid": "llmstruct.cache.cache_json:51#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.cache",
            "llmstruct.cache.cache_json:51"
          ],
          "hash": "4747f4dcd10fb903f30e47e083637793228d9401f59bd08263048fabcb799b2f",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-cache-cache-json",
          "summary": "Cache JSON metadata and store full file path.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "json.dumps",
            "str",
            "f.read",
            "logging.info",
            "content.encode",
            "hashlib.sha256",
            "Path",
            "json_file.exists",
            "open",
            "logging.error"
          ],
          "called_by": []
        },
        {
          "name": "get_metadata",
          "docstring": "Retrieve metadata by artifact_id.",
          "line_range": [
            92,
            108
          ],
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": [],
          "uid": "llmstruct.cache.get_metadata:92#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.cache",
            "llmstruct.cache.get_metadata:92"
          ],
          "hash": "a0143f31604d16738b597a1c8f64703c1cf74f94a0ab95c284a716674c1f12e8",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-cache-get-metadata",
          "summary": "Retrieve metadata by artifact_id.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "cursor.fetchone",
            "json.loads"
          ],
          "called_by": []
        },
        {
          "name": "get_full_json",
          "docstring": "Load full JSON by artifact_id.",
          "line_range": [
            110,
            126
          ],
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": [],
          "uid": "llmstruct.cache.get_full_json:110#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.cache",
            "llmstruct.cache.get_full_json:110"
          ],
          "hash": "ca5d7b19dfe079fe52a9d503f2af607db7864ec31108cd0359b0c133e3192ca2",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-cache-get-full-json",
          "summary": "Load full JSON by artifact_id.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "json.load",
            "cursor.fetchone",
            "open",
            "logging.error"
          ],
          "called_by": []
        },
        {
          "name": "close",
          "docstring": "Close database connection.",
          "line_range": [
            128,
            130
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.cache.close:128#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.cache",
            "llmstruct.cache.close:128"
          ],
          "hash": "4b33c4037ac6631ce81f44a25b2fb65a193b52a71dcd044f2c8f5418038a2e98",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-cache-close",
          "summary": "Close database connection.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [],
          "called_by": []
        }
      ],
      "classes": [
        {
          "name": "JSONCache",
          "docstring": "",
          "line_range": [
            20,
            130
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize SQLite cache for JSON files.",
              "line_range": [
                21,
                25
              ],
              "parameters": [
                "self",
                "db_path"
              ],
              "uid": "llmstruct.cache.JSONCache.__init__:21#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.cache",
                "llmstruct.cache.JSONCache",
                "llmstruct.cache.JSONCache.__init__:21"
              ],
              "hash": "3a8ec837a9a5c89cb246f4bdd72f3d80f8db87deb9ba41f864fed919b7858439",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-cache-jsoncache---init--",
              "summary": "Initialize SQLite cache for JSON files.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "self.create_tables",
                "sqlite3.connect"
              ],
              "called_by": []
            },
            {
              "name": "create_tables",
              "docstring": "Create tables for metadata and file paths.",
              "line_range": [
                27,
                49
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.cache.JSONCache.create_tables:27#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.cache",
                "llmstruct.cache.JSONCache",
                "llmstruct.cache.JSONCache.create_tables:27"
              ],
              "hash": "c2132cccef709b810b2ee91046f5eb1ffea8ce53ea7e6dc00c20392fc5a48e74",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-cache-jsoncache-create-tables",
              "summary": "Create tables for metadata and file paths.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [],
              "called_by": []
            },
            {
              "name": "cache_json",
              "docstring": "Cache JSON metadata and store full file path.",
              "line_range": [
                51,
                90
              ],
              "parameters": [
                "self",
                "json_path",
                "artifact_id",
                "summary",
                "tags"
              ],
              "uid": "llmstruct.cache.JSONCache.cache_json:51#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.cache",
                "llmstruct.cache.JSONCache",
                "llmstruct.cache.JSONCache.cache_json:51"
              ],
              "hash": "ddf70aa0c81d7e09be92fe4412f63567048028d49958cb0ad32515af792aa9d3",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-cache-jsoncache-cache-json",
              "summary": "Cache JSON metadata and store full file path.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "json.dumps",
                "str",
                "f.read",
                "logging.info",
                "content.encode",
                "hashlib.sha256",
                "Path",
                "json_file.exists",
                "open",
                "logging.error"
              ],
              "called_by": []
            },
            {
              "name": "get_metadata",
              "docstring": "Retrieve metadata by artifact_id.",
              "line_range": [
                92,
                108
              ],
              "parameters": [
                "self",
                "artifact_id"
              ],
              "uid": "llmstruct.cache.JSONCache.get_metadata:92#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.cache",
                "llmstruct.cache.JSONCache",
                "llmstruct.cache.JSONCache.get_metadata:92"
              ],
              "hash": "5f7105bcb69058e6e5a6ee9c7da0b1728e23a525b8f7f99c1e593089b053cd54",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-cache-jsoncache-get-metadata",
              "summary": "Retrieve metadata by artifact_id.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "cursor.fetchone",
                "json.loads"
              ],
              "called_by": []
            },
            {
              "name": "get_full_json",
              "docstring": "Load full JSON by artifact_id.",
              "line_range": [
                110,
                126
              ],
              "parameters": [
                "self",
                "artifact_id"
              ],
              "uid": "llmstruct.cache.JSONCache.get_full_json:110#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.cache",
                "llmstruct.cache.JSONCache",
                "llmstruct.cache.JSONCache.get_full_json:110"
              ],
              "hash": "d114a627bf2f4293ef945e632ad38fb34bfbdb74ebaf474a6a36ed304ff144fe",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-cache-jsoncache-get-full-json",
              "summary": "Load full JSON by artifact_id.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "json.load",
                "cursor.fetchone",
                "open",
                "logging.error"
              ],
              "called_by": []
            },
            {
              "name": "close",
              "docstring": "Close database connection.",
              "line_range": [
                128,
                130
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.cache.JSONCache.close:128#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.cache",
                "llmstruct.cache.JSONCache",
                "llmstruct.cache.JSONCache.close:128"
              ],
              "hash": "587ae5da879fbc0ce1f57752189b567a4257797de92c6186cbd75ff372b29539",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-cache-jsoncache-close",
              "summary": "Close database connection.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [],
              "called_by": []
            }
          ],
          "bases": [],
          "uid": "llmstruct.cache.JSONCache:20#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.cache",
            "llmstruct.cache.JSONCache:20"
          ],
          "hash": "52bb13435c2e40ad8182a2112bd32c66d4b7c6c1841fd870b76fc1a6673b6fee",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-cache-jsoncache",
          "summary": "Class for json cache",
          "summary_source": "heuristic",
          "tags": [
            "class",
            "public"
          ]
        }
      ],
      "callgraph": {
        "__init__": [
          "self.create_tables",
          "sqlite3.connect"
        ],
        "create_tables": [],
        "cache_json": [
          "json.dumps",
          "str",
          "f.read",
          "logging.info",
          "content.encode",
          "hashlib.sha256",
          "Path",
          "json_file.exists",
          "open",
          "logging.error"
        ],
        "get_metadata": [
          "cursor.fetchone",
          "json.loads"
        ],
        "get_full_json": [
          "json.load",
          "cursor.fetchone",
          "open",
          "logging.error"
        ],
        "close": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "hashlib",
        "json",
        "logging",
        "pathlib",
        "sqlite3",
        "typing"
      ],
      "hash": "10a85d5ffece6af208cff17665640aeca3a1c44397e0b6da50f6a50fa53ae42f",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.cache.llmstruct.cache#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.cache.llmstruct.cache"
      ],
      "summary": "Module for llmstruct cache",
      "summary_source": "heuristic",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "38c1d89c-7525-4248-9433-9cab73f9a563"
    },
    {
      "module_id": "llmstruct.self_run",
      "path": "llmstruct/self_run.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_struct",
          "docstring": "Filter struct.json or init.json based on prompt keywords. Supports dict or list as root.",
          "line_range": [
            22,
            73
          ],
          "parameters": [
            "struct",
            "prompt"
          ],
          "decorators": [],
          "uid": "llmstruct.self_run.filter_struct:22#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.self_run",
            "llmstruct.self_run.filter_struct:22"
          ],
          "hash": "645dfda135815437a2953855f0583597545a6ff13713faf3b4c9c32738c57aaf",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-self-run-filter-struct",
          "summary": "Filter struct.json or init.json based on prompt keywords",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "prompt.lower",
            "module.get",
            "struct.get",
            "any",
            "item.get",
            "filter_json",
            "isinstance",
            "str"
          ],
          "called_by": [
            "attach_to_llm_request"
          ]
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "Attach filtered JSON to LLM prompt, using cache if available.",
          "line_range": [
            76,
            116
          ],
          "parameters": [
            "context_path",
            "prompt",
            "cache"
          ],
          "decorators": [],
          "uid": "llmstruct.self_run.attach_to_llm_request:76#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.self_run",
            "llmstruct.self_run.attach_to_llm_request:76"
          ],
          "hash": "d2418f897524e93cf88f27a25f7a97cab16977e53b8cd5b1e6151ababe2d7845",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-self-run-attach-to-llm-request",
          "summary": "Attach filtered JSON to LLM prompt, using cache if available.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "cache.cache_json",
            "json.dumps",
            "prompt.lower",
            "cache.get_metadata",
            "context_file.exists",
            "logging.info",
            "select_json",
            "filter_struct",
            "Path",
            "cache.get_full_json",
            "filter_json",
            "logging.error"
          ],
          "called_by": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_struct": [
          "prompt.lower",
          "module.get",
          "struct.get",
          "any",
          "item.get",
          "filter_json",
          "isinstance",
          "str"
        ],
        "attach_to_llm_request": [
          "cache.cache_json",
          "json.dumps",
          "prompt.lower",
          "cache.get_metadata",
          "context_file.exists",
          "logging.info",
          "select_json",
          "filter_struct",
          "Path",
          "cache.get_full_json",
          "filter_json",
          "logging.error"
        ]
      },
      "dependencies": [
        "Any",
        "JSONCache",
        "Optional",
        "Path",
        "cache",
        "filter_json",
        "json",
        "json_selector",
        "logging",
        "pathlib",
        "select_json",
        "typing"
      ],
      "hash": "4bab9318950f2b239e5d0e642500367d03d5136749df94b40bfea53b93d54917",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.self_run.llmstruct.self_run#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.self_run",
        "llmstruct.self_run.llmstruct.self_run"
      ],
      "summary": "Module for llmstruct.self run",
      "summary_source": "heuristic",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "b675ae7e-43b8-4e1c-a202-39040482de94"
    },
    {
      "module_id": "llmstruct.llm_client",
      "path": "llmstruct/llm_client.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize LLMClient with optional Ollama host.",
          "line_range": [
            28,
            36
          ],
          "parameters": [
            "self",
            "ollama_host"
          ],
          "decorators": [],
          "uid": "llmstruct.llm_client.__init__:28#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.llm_client",
            "llmstruct.llm_client.__init__:28"
          ],
          "hash": "02606981cd67408d4c8eb5a29d4b4b97d2cc30191e44ba23a8d2160619dfe84e",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-llm-client---init--",
          "summary": "Initialize LLMClient with optional Ollama host.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "os.getenv",
            "int",
            "logging.info"
          ],
          "called_by": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt, context, and optional model.",
          "line_range": [
            38,
            86
          ],
          "parameters": [
            "self",
            "prompt",
            "context_path",
            "mode",
            "model",
            "artifact_ids"
          ],
          "decorators": [],
          "uid": "llmstruct.llm_client.query:38#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.llm_client",
            "llmstruct.llm_client.query:38"
          ],
          "hash": "c2ea7863606eb20f1b06243c89423cd38947f76dbdd8fd5fb90cc551d926a18d",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-llm-client-query",
          "summary": "Query LLMs with prompt, context, and optional model.",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "public"
          ],
          "calls": [
            "json.dumps",
            "self._query_anthropic",
            "logging.warning",
            "range",
            "self._query_grok",
            "self._query_ollama",
            "logging.info",
            "json.load",
            "self._query_hybrid",
            "Path",
            "asyncio.sleep",
            "logging.error"
          ],
          "called_by": []
        },
        {
          "name": "_query_grok",
          "docstring": "Query Grok API.",
          "line_range": [
            88,
            115
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": [],
          "uid": "llmstruct.llm_client._query_grok:88#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.llm_client",
            "llmstruct.llm_client._query_grok:88"
          ],
          "hash": "76b7223a6dd2dc24d112f20eb1514dacaadf3ba4cc1f83c0278bdbc5a1059b06",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-llm-client--query-grok",
          "summary": "Query Grok API.",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "private",
            "public"
          ],
          "calls": [
            "response.json",
            "result.get",
            "logging.info",
            "session.post",
            "aiohttp.ClientSession",
            "logging.error"
          ],
          "called_by": []
        },
        {
          "name": "_query_anthropic",
          "docstring": "Query Anthropic API.",
          "line_range": [
            117,
            141
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": [],
          "uid": "llmstruct.llm_client._query_anthropic:117#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.llm_client",
            "llmstruct.llm_client._query_anthropic:117"
          ],
          "hash": "16eadde7d70922918e1bfb932e1fd7bf0bd0c67030e0abf4161db309a0b14210",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-llm-client--query-anthropic",
          "summary": "Query Anthropic API.",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "private",
            "public"
          ],
          "calls": [
            "response.json",
            "result.get",
            "logging.info",
            "session.post",
            "aiohttp.ClientSession",
            "logging.error"
          ],
          "called_by": []
        },
        {
          "name": "_query_ollama",
          "docstring": "Query Ollama API with specified model.",
          "line_range": [
            143,
            156
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": [],
          "uid": "llmstruct.llm_client._query_ollama:143#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.llm_client",
            "llmstruct.llm_client._query_ollama:143"
          ],
          "hash": "45698ea6501118d0775201986fe8db251b8a71fa3965e2a57f2a0d0e93ee99d9",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-llm-client--query-ollama",
          "summary": "Query Ollama API with specified model.",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "private",
            "public"
          ],
          "calls": [
            "logging.debug",
            "response.json",
            "result.get",
            "logging.info",
            "session.post",
            "aiohttp.ClientSession",
            "logging.error"
          ],
          "called_by": []
        },
        {
          "name": "_query_hybrid",
          "docstring": "Query multiple LLMs and combine results.",
          "line_range": [
            158,
            172
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": [],
          "uid": "llmstruct.llm_client._query_hybrid:158#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.llm_client",
            "llmstruct.llm_client._query_hybrid:158"
          ],
          "hash": "517244a6131f6cf295033daa2cfd4751164b35fac4cc42672841bf1ff84b2f35",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-llm-client--query-hybrid",
          "summary": "Query multiple LLMs and combine results.",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "private"
          ],
          "calls": [
            "len",
            "self._query_anthropic",
            "asyncio.gather",
            "self._query_grok",
            "self._query_ollama",
            "logging.info",
            "isinstance"
          ],
          "called_by": []
        }
      ],
      "classes": [
        {
          "name": "LLMClient",
          "docstring": "",
          "line_range": [
            27,
            172
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize LLMClient with optional Ollama host.",
              "line_range": [
                28,
                36
              ],
              "parameters": [
                "self",
                "ollama_host"
              ],
              "uid": "llmstruct.llm_client.LLMClient.__init__:28#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.llm_client",
                "llmstruct.llm_client.LLMClient",
                "llmstruct.llm_client.LLMClient.__init__:28"
              ],
              "hash": "61ba865d366bc4852d8bf176ea18c09b00c4fe4b31a3001b66042353abf1d152",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-llm-client-llmclient---init--",
              "summary": "Initialize LLMClient with optional Ollama host.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "os.getenv",
                "int",
                "logging.info"
              ],
              "called_by": []
            },
            {
              "name": "query",
              "docstring": "Query LLMs with prompt, context, and optional model.",
              "line_range": [
                38,
                86
              ],
              "parameters": [
                "self",
                "prompt",
                "context_path",
                "mode",
                "model",
                "artifact_ids"
              ],
              "uid": "llmstruct.llm_client.LLMClient.query:38#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.llm_client",
                "llmstruct.llm_client.LLMClient",
                "llmstruct.llm_client.LLMClient.query:38"
              ],
              "hash": "2a21cb56dea8d6db198d62354c1b5bfe4a097857f08eaa790293b1589f001470",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-llm-client-llmclient-query",
              "summary": "Query LLMs with prompt, context, and optional model.",
              "summary_source": "docstring",
              "tags": [
                "async",
                "method",
                "public"
              ],
              "calls": [
                "json.dumps",
                "self._query_anthropic",
                "logging.warning",
                "range",
                "self._query_grok",
                "self._query_ollama",
                "logging.info",
                "json.load",
                "self._query_hybrid",
                "Path",
                "asyncio.sleep",
                "logging.error"
              ],
              "called_by": []
            },
            {
              "name": "_query_grok",
              "docstring": "Query Grok API.",
              "line_range": [
                88,
                115
              ],
              "parameters": [
                "self",
                "prompt"
              ],
              "uid": "llmstruct.llm_client.LLMClient._query_grok:88#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.llm_client",
                "llmstruct.llm_client.LLMClient",
                "llmstruct.llm_client.LLMClient._query_grok:88"
              ],
              "hash": "3681309fcbdee164bee5831258983106a1d87257a9988ada4897a3664a0a7e94",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-llm-client-llmclient--query-grok",
              "summary": "Query Grok API.",
              "summary_source": "docstring",
              "tags": [
                "async",
                "method",
                "private",
                "public"
              ],
              "calls": [
                "response.json",
                "result.get",
                "logging.info",
                "session.post",
                "aiohttp.ClientSession",
                "logging.error"
              ],
              "called_by": []
            },
            {
              "name": "_query_anthropic",
              "docstring": "Query Anthropic API.",
              "line_range": [
                117,
                141
              ],
              "parameters": [
                "self",
                "prompt"
              ],
              "uid": "llmstruct.llm_client.LLMClient._query_anthropic:117#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.llm_client",
                "llmstruct.llm_client.LLMClient",
                "llmstruct.llm_client.LLMClient._query_anthropic:117"
              ],
              "hash": "d645f5c291a36483bd0b7f49b28e01415e20b31c739f2f5cb04b3420490d87ba",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-llm-client-llmclient--query-anthropic",
              "summary": "Query Anthropic API.",
              "summary_source": "docstring",
              "tags": [
                "async",
                "method",
                "private",
                "public"
              ],
              "calls": [
                "response.json",
                "result.get",
                "logging.info",
                "session.post",
                "aiohttp.ClientSession",
                "logging.error"
              ],
              "called_by": []
            },
            {
              "name": "_query_ollama",
              "docstring": "Query Ollama API with specified model.",
              "line_range": [
                143,
                156
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ],
              "uid": "llmstruct.llm_client.LLMClient._query_ollama:143#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.llm_client",
                "llmstruct.llm_client.LLMClient",
                "llmstruct.llm_client.LLMClient._query_ollama:143"
              ],
              "hash": "96753a786a454d4fc233c85aed62478769733d6b0f70fdd4fb52f8bbc637674e",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-llm-client-llmclient--query-ollama",
              "summary": "Query Ollama API with specified model.",
              "summary_source": "docstring",
              "tags": [
                "async",
                "method",
                "private",
                "public"
              ],
              "calls": [
                "logging.debug",
                "response.json",
                "result.get",
                "logging.info",
                "session.post",
                "aiohttp.ClientSession",
                "logging.error"
              ],
              "called_by": []
            },
            {
              "name": "_query_hybrid",
              "docstring": "Query multiple LLMs and combine results.",
              "line_range": [
                158,
                172
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ],
              "uid": "llmstruct.llm_client.LLMClient._query_hybrid:158#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.llm_client",
                "llmstruct.llm_client.LLMClient",
                "llmstruct.llm_client.LLMClient._query_hybrid:158"
              ],
              "hash": "f52cded3aca8d21b448f82b677ee384d9ed9fc5984d8c48a8f02945edf95d0a4",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-llm-client-llmclient--query-hybrid",
              "summary": "Query multiple LLMs and combine results.",
              "summary_source": "docstring",
              "tags": [
                "async",
                "method",
                "private"
              ],
              "calls": [
                "len",
                "self._query_anthropic",
                "asyncio.gather",
                "self._query_grok",
                "self._query_ollama",
                "logging.info",
                "isinstance"
              ],
              "called_by": []
            }
          ],
          "bases": [],
          "uid": "llmstruct.llm_client.LLMClient:27#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.llm_client",
            "llmstruct.llm_client.LLMClient:27"
          ],
          "hash": "b5b433f11c8052da86480e5539979391ccca08daae757a5c3797f8c50394e1a6",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-llm-client-llmclient",
          "summary": "Client for llm",
          "summary_source": "heuristic",
          "tags": [
            "async",
            "class",
            "public"
          ]
        }
      ],
      "callgraph": {
        "__init__": [
          "os.getenv",
          "int",
          "logging.info"
        ],
        "query": [
          "json.dumps",
          "self._query_anthropic",
          "logging.warning",
          "range",
          "self._query_grok",
          "self._query_ollama",
          "logging.info",
          "json.load",
          "self._query_hybrid",
          "Path",
          "asyncio.sleep",
          "logging.error"
        ],
        "_query_grok": [
          "response.json",
          "result.get",
          "logging.info",
          "session.post",
          "aiohttp.ClientSession",
          "logging.error"
        ],
        "_query_anthropic": [
          "response.json",
          "result.get",
          "logging.info",
          "session.post",
          "aiohttp.ClientSession",
          "logging.error"
        ],
        "_query_ollama": [
          "logging.debug",
          "response.json",
          "result.get",
          "logging.info",
          "session.post",
          "aiohttp.ClientSession",
          "logging.error"
        ],
        "_query_hybrid": [
          "len",
          "self._query_anthropic",
          "asyncio.gather",
          "self._query_grok",
          "self._query_ollama",
          "logging.info",
          "isinstance"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "aiohttp",
        "asyncio",
        "dotenv",
        "json",
        "load_dotenv",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": "c477d5e96f165fa96546ff8e2673db785cee146f6fffd0f424d21072431133ba",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.llm_client.llmstruct.llm_client#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.llm_client",
        "llmstruct.llm_client.llmstruct.llm_client"
      ],
      "summary": "Module for llmstruct.llm client",
      "summary_source": "heuristic",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "f712d108-20dd-42ca-8ded-9f61279b19c4"
    },
    {
      "module_id": "llmstruct.cli",
      "path": "llmstruct/cli.py",
      "category": "core",
      "module_doc": "LLMStruct CLI - Main entry point for the command-line interface.",
      "functions": [
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": [
            55,
            338
          ],
          "parameters": [],
          "decorators": [],
          "uid": "llmstruct.cli.main:55#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.cli",
            "llmstruct.cli.main:55"
          ],
          "hash": "3cfbc3c18f4a06fdb1ee0d688b4bb243756bfc4eb79b7653cfd106593bc68d64",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-cli-main",
          "summary": "Command-line interface for LLMstruct.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "parser.add_subparsers",
            "query_parser.add_argument",
            "audit_parser.add_argument",
            "duplicates_parser.add_argument",
            "epic.add_epic_cli_subparser",
            "dogfood_parser.add_argument",
            "parser.parse_args",
            "subparsers.add_parser",
            "argparse.ArgumentParser",
            "review_parser.add_argument",
            "parse_parser.add_argument",
            "copilot_parser.add_argument",
            "context_parser.add_argument"
          ],
          "called_by": []
        },
        {
          "name": "normalize_patterns",
          "docstring": "",
          "line_range": [
            301,
            312
          ],
          "parameters": [
            "arglist"
          ],
          "decorators": [],
          "uid": "llmstruct.cli.normalize_patterns:301#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.cli",
            "llmstruct.cli.normalize_patterns:301"
          ],
          "hash": "ee175712a0159687349dbcbbd228c56aab65872a6ba0c735664ad6e55cd8faf6",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-cli-normalize-patterns",
          "summary": "Function for normalize patterns",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "p.strip",
            "result.append",
            "item.strip",
            "result.extend",
            "item.split"
          ],
          "called_by": []
        }
      ],
      "classes": [],
      "callgraph": {
        "main": [
          "parser.add_subparsers",
          "query_parser.add_argument",
          "audit_parser.add_argument",
          "duplicates_parser.add_argument",
          "epic.add_epic_cli_subparser",
          "dogfood_parser.add_argument",
          "parser.parse_args",
          "subparsers.add_parser",
          "argparse.ArgumentParser",
          "review_parser.add_argument",
          "parse_parser.add_argument",
          "copilot_parser.add_argument",
          "context_parser.add_argument"
        ],
        "normalize_patterns": [
          "p.strip",
          "result.append",
          "item.strip",
          "result.extend",
          "item.split"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "analyze_duplicates",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "audit",
        "cli_core",
        "context",
        "copilot",
        "create_cli_core",
        "dogfood",
        "epic",
        "generate_json",
        "get_folder_structure",
        "initialize_copilot",
        "interactive",
        "interactive_legacy",
        "interactive_modular",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.modules.cli",
        "llmstruct.modules.cli.analyze_duplicates",
        "llmstruct.modules.cli.audit",
        "llmstruct.modules.cli.context",
        "llmstruct.modules.cli.copilot",
        "llmstruct.modules.cli.dogfood",
        "llmstruct.modules.cli.handlers",
        "llmstruct.modules.cli.parse",
        "llmstruct.modules.cli.query",
        "llmstruct.modules.cli.review",
        "llmstruct.modules.cli.utils",
        "llmstruct.modules.commands.queue",
        "llmstruct.self_run",
        "load_config",
        "load_gitignore",
        "logging",
        "os",
        "parse",
        "parse_files_from_response",
        "pathlib",
        "process_cli_queue_enhanced",
        "query",
        "re",
        "read_file_content",
        "review",
        "shutil",
        "sys",
        "time",
        "toml",
        "typing",
        "write_to_file"
      ],
      "hash": "1f852bf5a5b5f80fd9b8dab98d75d49013d03b538953ae4cdf16232bf118987f",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.cli.llmstruct.cli#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.cli",
        "llmstruct.cli.llmstruct.cli"
      ],
      "summary": "LLMStruct CLI - Main entry point for the command-line interface.",
      "summary_source": "docstring",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "8db5f9ea-050d-45f5-8251-11da2a34bd74"
    },
    {
      "module_id": "scripts.auto_update_struct",
      "path": "scripts/auto_update_struct.py",
      "category": "core",
      "module_doc": "Automatic struct.json update script\nThis script automatically parses the project and updates struct.json\nwithout requiring LLM intervention.",
      "functions": [
        {
          "name": "detect_project_changes",
          "docstring": "Detect if project files have changed since last struct.json generation.\nUses git status to check for modifications.",
          "line_range": [
            44,
            81
          ],
          "parameters": [
            "root_dir",
            "struct_path"
          ],
          "decorators": [],
          "uid": "scripts.auto_update_struct.detect_project_changes:44#function",
          "uid_components": [
            "scripts",
            "scripts.auto_update_struct",
            "scripts.auto_update_struct.detect_project_changes:44"
          ],
          "hash": "9f6e85e1a52f62faebd5aba13e841a158257dfa1538ccad56c5a1dfb2ee87af7",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-auto-update-struct-detect-project-changes",
          "summary": "Detect if project files have changed since last struct.json generation",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "logger.info",
            "file_path.stat",
            "logger.warning",
            "Path",
            "subprocess.run"
          ],
          "called_by": [
            "update_struct_json",
            "main"
          ]
        },
        {
          "name": "backup_struct_json",
          "docstring": "Create a backup of existing struct.json.",
          "line_range": [
            84,
            97
          ],
          "parameters": [
            "struct_path"
          ],
          "decorators": [],
          "uid": "scripts.auto_update_struct.backup_struct_json:84#function",
          "uid_components": [
            "scripts",
            "scripts.auto_update_struct",
            "scripts.auto_update_struct.backup_struct_json:84"
          ],
          "hash": "d6d347934dc78d7513bb58c3336f97cea118ac4a71d561367b81b73142f39f4e",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-auto-update-struct-backup-struct-json",
          "summary": "Create a backup of existing struct.json.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "logger.info",
            "datetime.now",
            "Path",
            "logger.error",
            "subprocess.run"
          ],
          "called_by": [
            "update_struct_json"
          ]
        },
        {
          "name": "validate_struct_json",
          "docstring": "Validate generated struct.json for basic structure.",
          "line_range": [
            100,
            128
          ],
          "parameters": [
            "struct_path"
          ],
          "decorators": [],
          "uid": "scripts.auto_update_struct.validate_struct_json:100#function",
          "uid_components": [
            "scripts",
            "scripts.auto_update_struct",
            "scripts.auto_update_struct.validate_struct_json:100"
          ],
          "hash": "92b44273e12fe4ad14132b74de6558f983a0ed600968171c3d2c338b8f1d1667",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-auto-update-struct-validate-struct-json",
          "summary": "Validate generated struct.json for basic structure.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "json.load",
            "logger.error",
            "open",
            "logger.info"
          ],
          "called_by": [
            "update_struct_json"
          ]
        },
        {
          "name": "update_struct_json",
          "docstring": "Main function to update struct.json automatically.\n\nArgs:\n    root_dir: Project root directory (default: current directory)\n    struct_path: Path to struct.json (default: ./struct.json)\n    force: Force regeneration even if no changes detected\n    config_override: Override default configuration\n\nReturns:\n    bool: True if update was successful",
          "line_range": [
            131,
            225
          ],
          "parameters": [
            "root_dir",
            "struct_path",
            "force",
            "config_override"
          ],
          "decorators": [],
          "uid": "scripts.auto_update_struct.update_struct_json:131#function",
          "uid_components": [
            "scripts",
            "scripts.auto_update_struct",
            "scripts.auto_update_struct.update_struct_json:131"
          ],
          "hash": "7e097a478d6fa879db45e230a929b99891e2275f2142edec220105848bd94501",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-auto-update-struct-update-struct-json",
          "summary": "Main function to update struct.json automatically",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "logger.info",
            "cli_config.get",
            "validate_struct_json",
            "config.get",
            "logger.error",
            "load_gitignore",
            "load_config",
            "config.update",
            "json.dump",
            "detect_project_changes",
            "os.getcwd",
            "backup_struct_json",
            "subprocess.run",
            "open",
            "generate_json"
          ],
          "called_by": [
            "main"
          ]
        },
        {
          "name": "main",
          "docstring": "Command-line interface for auto-update script.",
          "line_range": [
            228,
            286
          ],
          "parameters": [],
          "decorators": [],
          "uid": "scripts.auto_update_struct.main:228#function",
          "uid_components": [
            "scripts",
            "scripts.auto_update_struct",
            "scripts.auto_update_struct.main:228"
          ],
          "hash": "af51f7b11b8702f1d0ce05df8405da8b1a5d40b0e0eca7efa9eacd44041e5864",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-auto-update-struct-main",
          "summary": "Command-line interface for auto-update script.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "parser.add_argument",
            "parser.parse_args",
            "logging.getLogger",
            "argparse.ArgumentParser",
            "update_struct_json",
            "detect_project_changes",
            "os.getcwd",
            "sys.exit",
            "print"
          ],
          "called_by": []
        },
        {
          "name": "load_config",
          "docstring": "",
          "line_range": [
            24,
            25
          ],
          "parameters": [],
          "decorators": [],
          "uid": "scripts.auto_update_struct.load_config:24#function",
          "uid_components": [
            "scripts",
            "scripts.auto_update_struct",
            "scripts.auto_update_struct.load_config:24"
          ],
          "hash": "d6a83ff77fb242443f0f40a8e4135dda61232a21c38f920856e4cf882c4b5934",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-auto-update-struct-load-config",
          "summary": "Function for load config",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "public"
          ],
          "calls": [],
          "called_by": [
            "update_struct_json"
          ]
        },
        {
          "name": "load_gitignore",
          "docstring": "",
          "line_range": [
            26,
            27
          ],
          "parameters": [],
          "decorators": [],
          "uid": "scripts.auto_update_struct.load_gitignore:26#function",
          "uid_components": [
            "scripts",
            "scripts.auto_update_struct",
            "scripts.auto_update_struct.load_gitignore:26"
          ],
          "hash": "7e33c8179f15d77ea1522e91020211c1811e3d25e504afceb8537bb23a92b875",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-auto-update-struct-load-gitignore",
          "summary": "Function for load gitignore",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "public"
          ],
          "calls": [],
          "called_by": [
            "update_struct_json"
          ]
        },
        {
          "name": "generate_json",
          "docstring": "",
          "line_range": [
            28,
            29
          ],
          "parameters": [],
          "decorators": [],
          "uid": "scripts.auto_update_struct.generate_json:28#function",
          "uid_components": [
            "scripts",
            "scripts.auto_update_struct",
            "scripts.auto_update_struct.generate_json:28"
          ],
          "hash": "e443f1c7d7c940de095a2e085b9d75cf92cd4a20ffa77bc34a55b9749717373f",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-auto-update-struct-generate-json",
          "summary": "Function for generate json",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "ImportError"
          ],
          "called_by": [
            "update_struct_json"
          ]
        }
      ],
      "classes": [],
      "callgraph": {
        "load_config": [],
        "load_gitignore": [],
        "generate_json": [
          "ImportError"
        ],
        "detect_project_changes": [
          "logger.info",
          "file_path.stat",
          "logger.warning",
          "Path",
          "subprocess.run"
        ],
        "backup_struct_json": [
          "logger.info",
          "datetime.now",
          "Path",
          "logger.error",
          "subprocess.run"
        ],
        "validate_struct_json": [
          "json.load",
          "logger.error",
          "open",
          "logger.info"
        ],
        "update_struct_json": [
          "logger.info",
          "cli_config.get",
          "validate_struct_json",
          "config.get",
          "logger.error",
          "load_gitignore",
          "load_config",
          "config.update",
          "json.dump",
          "detect_project_changes",
          "os.getcwd",
          "backup_struct_json",
          "subprocess.run",
          "open",
          "generate_json"
        ],
        "main": [
          "parser.add_argument",
          "parser.parse_args",
          "logging.getLogger",
          "argparse.ArgumentParser",
          "update_struct_json",
          "detect_project_changes",
          "os.getcwd",
          "sys.exit",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "generate_json",
        "json",
        "llmstruct.cli",
        "llmstruct.generators.json_generator",
        "load_config",
        "load_gitignore",
        "logging",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": "505bdb6b282e7e9befc6df4165834fa7481335c96bbb88b04501996e15e173c2",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "scripts.auto_update_struct.scripts.auto_update_struct#module",
      "uid_components": [
        "scripts",
        "scripts.auto_update_struct",
        "scripts.auto_update_struct.scripts.auto_update_struct"
      ],
      "summary": "Automatic struct.json update script\nThis script automatically parses the project and updates struct.json\nwithout requ...",
      "summary_source": "docstring",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "c06ffa21-972e-4ab0-a842-6136b9c4db64"
    },
    {
      "module_id": "scripts.validate_schemas",
      "path": "scripts/validate_schemas.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "scripts.validate_schemas.scripts.validate_schemas#module",
      "uid_components": [
        "scripts",
        "scripts.validate_schemas",
        "scripts.validate_schemas.scripts.validate_schemas"
      ],
      "summary": "Module for scripts.validate schemas",
      "summary_source": "heuristic",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "06ffc68a-9fc1-4515-8d63-d6a7ab3f0e2d"
    },
    {
      "module_id": "scripts.github_sync_manager",
      "path": "scripts/github_sync_manager.py",
      "category": "core",
      "module_doc": "GitHub Sync Manager - \u0418\u0434\u0435\u043c\u043f\u043e\u0442\u0435\u043d\u0442\u043d\u0430\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f processing results \u0441 GitHub\nSupports: Issues, Epics (Projects), Discussions\nSafety: dry-run mode, logging, collision detection",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface",
          "line_range": [
            375,
            408
          ],
          "parameters": [],
          "decorators": [],
          "uid": "scripts.github_sync_manager.main:375#function",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager",
            "scripts.github_sync_manager.main:375"
          ],
          "hash": "7e0c922da0525e185c347419f1e0afddb191d58bc543e3e5ba76fb2d180ed869",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-github-sync-manager-main",
          "summary": "CLI interface",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "len",
            "manager.run_sync",
            "parser.add_argument",
            "parser.parse_args",
            "result.get",
            "argparse.ArgumentParser",
            "GitHubSyncManager",
            "print"
          ],
          "called_by": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            17,
            48
          ],
          "parameters": [
            "self",
            "repo_owner",
            "repo_name",
            "dry_run"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager.__init__:17#function",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager",
            "scripts.github_sync_manager.__init__:17"
          ],
          "hash": "78f009dd6b1790430523e9ccc933693fb986bb3d55964f13c54f9d957005a7e8",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-github-sync-manager---init--",
          "summary": "Function for init",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "os.getenv",
            "self.load_sync_log",
            "Path",
            "print"
          ],
          "called_by": []
        },
        {
          "name": "load_sync_log",
          "docstring": "Load previous sync results for idempotency",
          "line_range": [
            50,
            60
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager.load_sync_log:50#function",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager",
            "scripts.github_sync_manager.load_sync_log:50"
          ],
          "hash": "7258d99792fe273cc10f2e09d45918c4dbade92c54d997ef73fe02d7f59161e7",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-github-sync-manager-load-sync-log",
          "summary": "Load previous sync results for idempotency",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "json.load",
            "open"
          ],
          "called_by": []
        },
        {
          "name": "save_sync_log",
          "docstring": "Save sync log for future idempotency",
          "line_range": [
            62,
            65
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager.save_sync_log:62#function",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager",
            "scripts.github_sync_manager.save_sync_log:62"
          ],
          "hash": "4be4684787e2479e71b2be443f1f57e467a6ca5a87c5273f165a4bccb68b94ff",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-github-sync-manager-save-sync-log",
          "summary": "Save sync log for future idempotency",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "json.dump",
            "open"
          ],
          "called_by": []
        },
        {
          "name": "api_request",
          "docstring": "Safe GitHub API request with rate limiting",
          "line_range": [
            67,
            94
          ],
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager.api_request:67#function",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager",
            "scripts.github_sync_manager.api_request:67"
          ],
          "hash": "d9565488a58924d611de7953133ddb32c71702db9f8481ae8bc34e865990da68",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-github-sync-manager-api-request",
          "summary": "Safe GitHub API request with rate limiting",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "int",
            "response.raise_for_status",
            "requests.patch",
            "requests.post",
            "response.json",
            "ValueError",
            "requests.get",
            "time.sleep",
            "method.upper",
            "print"
          ],
          "called_by": []
        },
        {
          "name": "get_existing_issues",
          "docstring": "Get existing GitHub issues for collision detection",
          "line_range": [
            96,
            112
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager.get_existing_issues:96#function",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager",
            "scripts.github_sync_manager.get_existing_issues:96"
          ],
          "hash": "e628d394d15334c5b1eab6832298c267735b7a74427e64abbaf339c3de0772a6",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-github-sync-manager-get-existing-issues",
          "summary": "Get existing GitHub issues for collision detection",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "issues.extend",
            "self.api_request",
            "len"
          ],
          "called_by": []
        },
        {
          "name": "get_existing_discussions",
          "docstring": "Get existing GitHub discussions",
          "line_range": [
            114,
            118
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager.get_existing_discussions:114#function",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager",
            "scripts.github_sync_manager.get_existing_discussions:114"
          ],
          "hash": "3fb21af6733ba07a0fc1d3f4a23cb74ac8d501624ac4dba7d95cbba3b19d2eb3",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-github-sync-manager-get-existing-discussions",
          "summary": "Get existing GitHub discussions",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [],
          "called_by": []
        },
        {
          "name": "item_already_synced",
          "docstring": "Check if item was already synced (idempotency)",
          "line_range": [
            120,
            125
          ],
          "parameters": [
            "self",
            "item",
            "category"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager.item_already_synced:120#function",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager",
            "scripts.github_sync_manager.item_already_synced:120"
          ],
          "hash": "7fc28670c071de9c04f1732d22ade674b512202286f6d111012f538687936c66",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-github-sync-manager-item-already-synced",
          "summary": "Check if item was already synced (idempotency)",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "item.get"
          ],
          "called_by": []
        },
        {
          "name": "find_existing_by_title",
          "docstring": "Find existing GitHub item by title similarity",
          "line_range": [
            127,
            143
          ],
          "parameters": [
            "self",
            "title",
            "existing_items"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager.find_existing_by_title:127#function",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager",
            "scripts.github_sync_manager.find_existing_by_title:127"
          ],
          "hash": "61c05801f751bc09f6b05bfd5e12f66f03d8b3d2aa361b4e60aeb14b7779844b",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-github-sync-manager-find-existing-by-title",
          "summary": "Find existing GitHub item by title similarity",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "title.lower",
            "len",
            "item.get"
          ],
          "called_by": []
        },
        {
          "name": "create_github_issue",
          "docstring": "Create GitHub issue from processed item",
          "line_range": [
            145,
            182
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager.create_github_issue:145#function",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager",
            "scripts.github_sync_manager.create_github_issue:145"
          ],
          "hash": "db93199a635a5b4f9ccf3d1fe92c6499bbe364aea6a3fe5af6de9a042cb5cbbe",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-github-sync-manager-create-github-issue",
          "summary": "Create GitHub issue from processed item",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "labels.append",
            "self.api_request",
            "processing_meta.get",
            "item.get",
            "print"
          ],
          "called_by": []
        },
        {
          "name": "create_github_discussion",
          "docstring": "Create GitHub discussion from processed item",
          "line_range": [
            184,
            194
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager.create_github_discussion:184#function",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager",
            "scripts.github_sync_manager.create_github_discussion:184"
          ],
          "hash": "7de4bf52fa6b55c3ea077696f45f5b98fba86f0cf2d7b8482ba902046bf73105",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-github-sync-manager-create-github-discussion",
          "summary": "Create GitHub discussion from processed item",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "item.get",
            "print"
          ],
          "called_by": []
        },
        {
          "name": "create_github_epic",
          "docstring": "Create GitHub epic (as Project or enhanced Issue)",
          "line_range": [
            196,
            214
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager.create_github_epic:196#function",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager",
            "scripts.github_sync_manager.create_github_epic:196"
          ],
          "hash": "ad9ce2e0417bdf87744ea01c37f7c4a36bb622a1b962f23ed59a733519c3c826",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-github-sync-manager-create-github-epic",
          "summary": "Create GitHub epic (as Project or enhanced Issue)",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "self.api_request",
            "item.get",
            "print"
          ],
          "called_by": []
        },
        {
          "name": "sync_category",
          "docstring": "Sync specific category with GitHub",
          "line_range": [
            216,
            290
          ],
          "parameters": [
            "self",
            "category",
            "filename"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager.sync_category:216#function",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager",
            "scripts.github_sync_manager.sync_category:216"
          ],
          "hash": "1037127e2e18fda21c9001eada84ae6d0224e2e10877465a7b68dad58de74a55",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-github-sync-manager-sync-category",
          "summary": "Sync specific category with GitHub",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "self.create_github_issue",
            "self.get_existing_discussions",
            "file_path.exists",
            "self.create_github_epic",
            "self.find_existing_by_title",
            "item.get",
            "existing.get",
            "result.get",
            "json.load",
            "datetime.now",
            "data.get",
            "self.create_github_discussion",
            "self.item_already_synced",
            "self.get_existing_issues",
            "open",
            "print"
          ],
          "called_by": []
        },
        {
          "name": "validate_before_sync",
          "docstring": "Pre-sync validation checks",
          "line_range": [
            292,
            322
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager.validate_before_sync:292#function",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager",
            "scripts.github_sync_manager.validate_before_sync:292"
          ],
          "hash": "2b206d2c381e3b18eb8e07891b62c2cad7238c8753eb1fe81a3632cd86d65ecb",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-github-sync-manager-validate-before-sync",
          "summary": "Pre-sync validation checks",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "core_limit.get",
            "self.api_request",
            "user_info.get",
            "repo_info.get",
            "rate_limit.get",
            "print"
          ],
          "called_by": []
        },
        {
          "name": "run_sync",
          "docstring": "Main sync execution",
          "line_range": [
            324,
            373
          ],
          "parameters": [
            "self",
            "categories"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager.run_sync:324#function",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager",
            "scripts.github_sync_manager.run_sync:324"
          ],
          "hash": "8f84ff5254f19e6886ca84f396ccffd4d5f8e147bcc36360e30be1ceadd216cb",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-github-sync-manager-run-sync",
          "summary": "Main sync execution",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "sum",
            "self.sync_category",
            "datetime.now",
            "results.values",
            "r.get",
            "self.save_sync_log",
            "print",
            "self.validate_before_sync"
          ],
          "called_by": []
        }
      ],
      "classes": [
        {
          "name": "GitHubSyncManager",
          "docstring": "",
          "line_range": [
            16,
            373
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                17,
                48
              ],
              "parameters": [
                "self",
                "repo_owner",
                "repo_name",
                "dry_run"
              ],
              "uid": "scripts.github_sync_manager.GitHubSyncManager.__init__:17#method",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager",
                "scripts.github_sync_manager.GitHubSyncManager",
                "scripts.github_sync_manager.GitHubSyncManager.__init__:17"
              ],
              "hash": "8518800fb4fdb61302cac2d00249d441520437d0e397fff6eb948c0581e3b738",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-github-sync-manager-githubsyncmanager---init--",
              "summary": "Method for githubsyncmanager. init",
              "summary_source": "heuristic",
              "tags": [
                "method",
                "private",
                "public"
              ],
              "calls": [
                "os.getenv",
                "self.load_sync_log",
                "Path",
                "print"
              ],
              "called_by": []
            },
            {
              "name": "load_sync_log",
              "docstring": "Load previous sync results for idempotency",
              "line_range": [
                50,
                60
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.github_sync_manager.GitHubSyncManager.load_sync_log:50#method",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager",
                "scripts.github_sync_manager.GitHubSyncManager",
                "scripts.github_sync_manager.GitHubSyncManager.load_sync_log:50"
              ],
              "hash": "27067fe8923a2a726342937c9117f3bcf76e1e714a4ac66b6b68e188c61f6e9d",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-github-sync-manager-githubsyncmanager-load-sync-log",
              "summary": "Load previous sync results for idempotency",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "json.load",
                "open"
              ],
              "called_by": []
            },
            {
              "name": "save_sync_log",
              "docstring": "Save sync log for future idempotency",
              "line_range": [
                62,
                65
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.github_sync_manager.GitHubSyncManager.save_sync_log:62#method",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager",
                "scripts.github_sync_manager.GitHubSyncManager",
                "scripts.github_sync_manager.GitHubSyncManager.save_sync_log:62"
              ],
              "hash": "4b6e0056536813dd529d799c72af062fb85824d0c02607838c79c644cef73f6f",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-github-sync-manager-githubsyncmanager-save-sync-log",
              "summary": "Save sync log for future idempotency",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "json.dump",
                "open"
              ],
              "called_by": []
            },
            {
              "name": "api_request",
              "docstring": "Safe GitHub API request with rate limiting",
              "line_range": [
                67,
                94
              ],
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ],
              "uid": "scripts.github_sync_manager.GitHubSyncManager.api_request:67#method",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager",
                "scripts.github_sync_manager.GitHubSyncManager",
                "scripts.github_sync_manager.GitHubSyncManager.api_request:67"
              ],
              "hash": "4454b131993d19773e1b231665f25988e38c3d9d0e02def9e9a30e1afa730261",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-github-sync-manager-githubsyncmanager-api-request",
              "summary": "Safe GitHub API request with rate limiting",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "int",
                "response.raise_for_status",
                "requests.patch",
                "requests.post",
                "response.json",
                "ValueError",
                "requests.get",
                "time.sleep",
                "method.upper",
                "print"
              ],
              "called_by": []
            },
            {
              "name": "get_existing_issues",
              "docstring": "Get existing GitHub issues for collision detection",
              "line_range": [
                96,
                112
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.github_sync_manager.GitHubSyncManager.get_existing_issues:96#method",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager",
                "scripts.github_sync_manager.GitHubSyncManager",
                "scripts.github_sync_manager.GitHubSyncManager.get_existing_issues:96"
              ],
              "hash": "0f5d74feec2ae0e95c6b179d4200f92c037cc1878d0cc066b6681fc5da21d316",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-github-sync-manager-githubsyncmanager-get-existing-issues",
              "summary": "Get existing GitHub issues for collision detection",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "issues.extend",
                "self.api_request",
                "len"
              ],
              "called_by": []
            },
            {
              "name": "get_existing_discussions",
              "docstring": "Get existing GitHub discussions",
              "line_range": [
                114,
                118
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.github_sync_manager.GitHubSyncManager.get_existing_discussions:114#method",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager",
                "scripts.github_sync_manager.GitHubSyncManager",
                "scripts.github_sync_manager.GitHubSyncManager.get_existing_discussions:114"
              ],
              "hash": "64b45eb2077fe9e89291f84822b27bb7e297921a4a049f00c439796da46eccfe",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-github-sync-manager-githubsyncmanager-get-existing-discussions",
              "summary": "Get existing GitHub discussions",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [],
              "called_by": []
            },
            {
              "name": "item_already_synced",
              "docstring": "Check if item was already synced (idempotency)",
              "line_range": [
                120,
                125
              ],
              "parameters": [
                "self",
                "item",
                "category"
              ],
              "uid": "scripts.github_sync_manager.GitHubSyncManager.item_already_synced:120#method",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager",
                "scripts.github_sync_manager.GitHubSyncManager",
                "scripts.github_sync_manager.GitHubSyncManager.item_already_synced:120"
              ],
              "hash": "7a94dd51942b4be91f03e1e7872543d11ef1a277f73f6a2e6dfa4d0728865c6f",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-github-sync-manager-githubsyncmanager-item-already-synced",
              "summary": "Check if item was already synced (idempotency)",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "item.get"
              ],
              "called_by": []
            },
            {
              "name": "find_existing_by_title",
              "docstring": "Find existing GitHub item by title similarity",
              "line_range": [
                127,
                143
              ],
              "parameters": [
                "self",
                "title",
                "existing_items"
              ],
              "uid": "scripts.github_sync_manager.GitHubSyncManager.find_existing_by_title:127#method",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager",
                "scripts.github_sync_manager.GitHubSyncManager",
                "scripts.github_sync_manager.GitHubSyncManager.find_existing_by_title:127"
              ],
              "hash": "d076fc5de66dca5796f821e67d7548163e630fc05bf51fd65a2096cead189a53",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-github-sync-manager-githubsyncmanager-find-existing-by-title",
              "summary": "Find existing GitHub item by title similarity",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "title.lower",
                "len",
                "item.get"
              ],
              "called_by": []
            },
            {
              "name": "create_github_issue",
              "docstring": "Create GitHub issue from processed item",
              "line_range": [
                145,
                182
              ],
              "parameters": [
                "self",
                "item"
              ],
              "uid": "scripts.github_sync_manager.GitHubSyncManager.create_github_issue:145#method",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager",
                "scripts.github_sync_manager.GitHubSyncManager",
                "scripts.github_sync_manager.GitHubSyncManager.create_github_issue:145"
              ],
              "hash": "799a110577d024160b95e271a2cd7a4a55e82350301a2fcfc987a3c223e5bf71",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-github-sync-manager-githubsyncmanager-create-github-issue",
              "summary": "Create GitHub issue from processed item",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "labels.append",
                "self.api_request",
                "processing_meta.get",
                "item.get",
                "print"
              ],
              "called_by": []
            },
            {
              "name": "create_github_discussion",
              "docstring": "Create GitHub discussion from processed item",
              "line_range": [
                184,
                194
              ],
              "parameters": [
                "self",
                "item"
              ],
              "uid": "scripts.github_sync_manager.GitHubSyncManager.create_github_discussion:184#method",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager",
                "scripts.github_sync_manager.GitHubSyncManager",
                "scripts.github_sync_manager.GitHubSyncManager.create_github_discussion:184"
              ],
              "hash": "afda26648d0502315113b1f80947615bb62956c553daeede1912f0419d281f25",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-github-sync-manager-githubsyncmanager-create-github-discussion",
              "summary": "Create GitHub discussion from processed item",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "item.get",
                "print"
              ],
              "called_by": []
            },
            {
              "name": "create_github_epic",
              "docstring": "Create GitHub epic (as Project or enhanced Issue)",
              "line_range": [
                196,
                214
              ],
              "parameters": [
                "self",
                "item"
              ],
              "uid": "scripts.github_sync_manager.GitHubSyncManager.create_github_epic:196#method",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager",
                "scripts.github_sync_manager.GitHubSyncManager",
                "scripts.github_sync_manager.GitHubSyncManager.create_github_epic:196"
              ],
              "hash": "b5263cebc14f08657b55ad29b453fc98f5dbd5883b3856641b120f241976ce94",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-github-sync-manager-githubsyncmanager-create-github-epic",
              "summary": "Create GitHub epic (as Project or enhanced Issue)",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "self.api_request",
                "item.get",
                "print"
              ],
              "called_by": []
            },
            {
              "name": "sync_category",
              "docstring": "Sync specific category with GitHub",
              "line_range": [
                216,
                290
              ],
              "parameters": [
                "self",
                "category",
                "filename"
              ],
              "uid": "scripts.github_sync_manager.GitHubSyncManager.sync_category:216#method",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager",
                "scripts.github_sync_manager.GitHubSyncManager",
                "scripts.github_sync_manager.GitHubSyncManager.sync_category:216"
              ],
              "hash": "7d512e33f04ac37ce4fbb19e47fab5e6f5c1ec3c1216754e22b4e5e5fda6f18a",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-github-sync-manager-githubsyncmanager-sync-category",
              "summary": "Sync specific category with GitHub",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "self.create_github_issue",
                "self.get_existing_discussions",
                "file_path.exists",
                "self.create_github_epic",
                "self.find_existing_by_title",
                "item.get",
                "existing.get",
                "result.get",
                "json.load",
                "datetime.now",
                "data.get",
                "self.create_github_discussion",
                "self.item_already_synced",
                "self.get_existing_issues",
                "open",
                "print"
              ],
              "called_by": []
            },
            {
              "name": "validate_before_sync",
              "docstring": "Pre-sync validation checks",
              "line_range": [
                292,
                322
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.github_sync_manager.GitHubSyncManager.validate_before_sync:292#method",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager",
                "scripts.github_sync_manager.GitHubSyncManager",
                "scripts.github_sync_manager.GitHubSyncManager.validate_before_sync:292"
              ],
              "hash": "be0994ced39bb8be88e6b786c0d9867527e388c0396023060a49348b9326319f",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-github-sync-manager-githubsyncmanager-validate-before-sync",
              "summary": "Pre-sync validation checks",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "core_limit.get",
                "self.api_request",
                "user_info.get",
                "repo_info.get",
                "rate_limit.get",
                "print"
              ],
              "called_by": []
            },
            {
              "name": "run_sync",
              "docstring": "Main sync execution",
              "line_range": [
                324,
                373
              ],
              "parameters": [
                "self",
                "categories"
              ],
              "uid": "scripts.github_sync_manager.GitHubSyncManager.run_sync:324#method",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager",
                "scripts.github_sync_manager.GitHubSyncManager",
                "scripts.github_sync_manager.GitHubSyncManager.run_sync:324"
              ],
              "hash": "30b9558f23f47f39786ed7515647d5f00b852d34cba30ea12dca8231ed903569",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-github-sync-manager-githubsyncmanager-run-sync",
              "summary": "Main sync execution",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "sum",
                "self.sync_category",
                "datetime.now",
                "results.values",
                "r.get",
                "self.save_sync_log",
                "print",
                "self.validate_before_sync"
              ],
              "called_by": []
            }
          ],
          "bases": [],
          "uid": "scripts.github_sync_manager.GitHubSyncManager:16#class",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager",
            "scripts.github_sync_manager.GitHubSyncManager:16"
          ],
          "hash": "470a9c71b45ea8f5f190752d38445c062e3636b3afcb097203da55a0cccd4e6a",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-github-sync-manager-githubsyncmanager",
          "summary": "Manages git hub sync",
          "summary_source": "heuristic",
          "tags": [
            "class",
            "public"
          ]
        }
      ],
      "callgraph": {
        "__init__": [
          "os.getenv",
          "self.load_sync_log",
          "Path",
          "print"
        ],
        "load_sync_log": [
          "json.load",
          "open"
        ],
        "save_sync_log": [
          "json.dump",
          "open"
        ],
        "api_request": [
          "int",
          "response.raise_for_status",
          "requests.patch",
          "requests.post",
          "response.json",
          "ValueError",
          "requests.get",
          "time.sleep",
          "method.upper",
          "print"
        ],
        "get_existing_issues": [
          "issues.extend",
          "self.api_request",
          "len"
        ],
        "get_existing_discussions": [],
        "item_already_synced": [
          "item.get"
        ],
        "find_existing_by_title": [
          "title.lower",
          "len",
          "item.get"
        ],
        "create_github_issue": [
          "labels.append",
          "self.api_request",
          "processing_meta.get",
          "item.get",
          "print"
        ],
        "create_github_discussion": [
          "item.get",
          "print"
        ],
        "create_github_epic": [
          "self.api_request",
          "item.get",
          "print"
        ],
        "sync_category": [
          "self.create_github_issue",
          "self.get_existing_discussions",
          "file_path.exists",
          "self.create_github_epic",
          "self.find_existing_by_title",
          "item.get",
          "existing.get",
          "result.get",
          "json.load",
          "datetime.now",
          "data.get",
          "self.create_github_discussion",
          "self.item_already_synced",
          "self.get_existing_issues",
          "open",
          "print"
        ],
        "validate_before_sync": [
          "core_limit.get",
          "self.api_request",
          "user_info.get",
          "repo_info.get",
          "rate_limit.get",
          "print"
        ],
        "run_sync": [
          "sum",
          "self.sync_category",
          "datetime.now",
          "results.values",
          "r.get",
          "self.save_sync_log",
          "print",
          "self.validate_before_sync"
        ],
        "main": [
          "len",
          "manager.run_sync",
          "parser.add_argument",
          "parser.parse_args",
          "result.get",
          "argparse.ArgumentParser",
          "GitHubSyncManager",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "json",
        "os",
        "pathlib",
        "requests",
        "time",
        "typing"
      ],
      "hash": "1ee49d0d031a76692ccc03ff995d0a75d198818dcf2c1f625d6e9aee0828a7c9",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "scripts.github_sync_manager.scripts.github_sync_manager#module",
      "uid_components": [
        "scripts",
        "scripts.github_sync_manager",
        "scripts.github_sync_manager.scripts.github_sync_manager"
      ],
      "summary": "GitHub Sync Manager - \u0418\u0434\u0435\u043c\u043f\u043e\u0442\u0435\u043d\u0442\u043d\u0430\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f processing results \u0441 GitHub\nSupports: Issues, Epics (Projects), Dis...",
      "summary_source": "docstring",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "cb021e4b-c3d0-4ad9-a6f1-82a942be79bd"
    },
    {
      "module_id": "scripts.fix_github_script",
      "path": "scripts/fix_github_script.py",
      "category": "core",
      "module_doc": "Quick fix for GitHub issues creation script\n\u0418\u0441\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u043e\u0439 JSON \u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445",
      "functions": [
        {
          "name": "fix_json_loading",
          "docstring": "\u0418\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0443 JSON \u0434\u0430\u043d\u043d\u044b\u0445",
          "line_range": [
            11,
            42
          ],
          "parameters": [],
          "decorators": [],
          "uid": "scripts.fix_github_script.fix_json_loading:11#function",
          "uid_components": [
            "scripts",
            "scripts.fix_github_script",
            "scripts.fix_github_script.fix_json_loading:11"
          ],
          "hash": "c1d4029f0dd43b68bfc75a2b6f9c96983e67fb7a14292a87802def8bce6d11ab",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-fix-github-script-fix-json-loading",
          "summary": "\u0418\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0443 JSON \u0434\u0430\u043d\u043d\u044b\u0445",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "f.read",
            "content.replace",
            "f.write",
            "Path",
            "open",
            "print"
          ],
          "called_by": []
        }
      ],
      "classes": [],
      "callgraph": {
        "fix_json_loading": [
          "f.read",
          "content.replace",
          "f.write",
          "Path",
          "open",
          "print"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "os",
        "pathlib"
      ],
      "hash": "749ea82f6bcdc68da77827b691267646be1c85f5b2c20e39d085d768c9e64d87",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "scripts.fix_github_script.scripts.fix_github_script#module",
      "uid_components": [
        "scripts",
        "scripts.fix_github_script",
        "scripts.fix_github_script.scripts.fix_github_script"
      ],
      "summary": "Quick fix for GitHub issues creation script\n\u0418\u0441\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u043e\u0439 JSON \u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445",
      "summary_source": "docstring",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "6c2ebff9-f0df-4a3c-a4c6-4e97abbdbdaf"
    },
    {
      "module_id": "scripts.create_github_issues",
      "path": "scripts/create_github_issues.py",
      "category": "core",
      "module_doc": "GitHub Issues Creator for AI-Dogfooding Project\n\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 GitHub issues \u0438\u0437 \u043d\u0430\u0448\u0438\u0445 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0437\u0430\u0434\u0430\u0447",
      "functions": [
        {
          "name": "load_env_file",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            16,
            28
          ],
          "parameters": [],
          "decorators": [],
          "uid": "scripts.create_github_issues.load_env_file:16#function",
          "uid_components": [
            "scripts",
            "scripts.create_github_issues",
            "scripts.create_github_issues.load_env_file:16"
          ],
          "hash": "93aa6398a89bcb896f1c05e6fd2f55aae74f77ca2b5ee528bd839e435c2c4a92",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-github-issues-load-env-file",
          "summary": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "value.strip",
            "line.startswith",
            "line.strip",
            "key.strip",
            "Path",
            "line.split",
            "open",
            "env_file.exists",
            "print"
          ],
          "called_by": []
        },
        {
          "name": "load_epics_data",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438\u0437 JSON",
          "line_range": [
            205,
            213
          ],
          "parameters": [],
          "decorators": [],
          "uid": "scripts.create_github_issues.load_epics_data:205#function",
          "uid_components": [
            "scripts",
            "scripts.create_github_issues",
            "scripts.create_github_issues.load_epics_data:205"
          ],
          "hash": "b09a0f8dfd696d376f3bf2bd6c85ddd821e83181bf1d5bd48b0e64b16b72f30b",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-github-issues-load-epics-data",
          "summary": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438\u0437 JSON",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "json.load",
            "Path",
            "epics_file.exists",
            "open",
            "print"
          ],
          "called_by": [
            "main"
          ]
        },
        {
          "name": "main",
          "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f issues",
          "line_range": [
            215,
            252
          ],
          "parameters": [],
          "decorators": [],
          "uid": "scripts.create_github_issues.main:215#function",
          "uid_components": [
            "scripts",
            "scripts.create_github_issues",
            "scripts.create_github_issues.main:215"
          ],
          "hash": "5be49419d4da54cadc2584f18a00bf1e2d32d4b46ff126720b3b72a6df5b6dec",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-github-issues-main",
          "summary": "\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f issues",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "os.getenv",
            "len",
            "epics_data.get",
            "creator.create_epic_issue",
            "load_epics_data",
            "creator.create_task_issue",
            "GitHubIssuesCreator",
            "epic_data.get",
            "print"
          ],
          "called_by": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            34,
            43
          ],
          "parameters": [
            "self",
            "repo_owner",
            "repo_name",
            "token",
            "use_cli"
          ],
          "decorators": [],
          "uid": "scripts.create_github_issues.__init__:34#function",
          "uid_components": [
            "scripts",
            "scripts.create_github_issues",
            "scripts.create_github_issues.__init__:34"
          ],
          "hash": "d6cc4eb12482caf6eda0d2167059ae39dffb2b72a10d136aef218293b832519a",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-github-issues---init--",
          "summary": "Function for init",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "private"
          ],
          "calls": [],
          "called_by": []
        },
        {
          "name": "create_epic_issue",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u044d\u043f\u0438\u043a\u0430",
          "line_range": [
            45,
            83
          ],
          "parameters": [
            "self",
            "epic_data"
          ],
          "decorators": [],
          "uid": "scripts.create_github_issues.create_epic_issue:45#function",
          "uid_components": [
            "scripts",
            "scripts.create_github_issues",
            "scripts.create_github_issues.create_epic_issue:45"
          ],
          "hash": "0bdcfb4e7e47b3ad7a082eab47621794113336df026dd8b96567241749e7e342",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-github-issues-create-epic-issue",
          "summary": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u044d\u043f\u0438\u043a\u0430",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "self._format_tasks",
            "self._format_metrics",
            "self._create_issue_via_cli",
            "self._format_criteria",
            "epic_data.get",
            "self._create_issue_via_api"
          ],
          "called_by": []
        },
        {
          "name": "create_task_issue",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            85,
            128
          ],
          "parameters": [
            "self",
            "task_data",
            "epic_number"
          ],
          "decorators": [],
          "uid": "scripts.create_github_issues.create_task_issue:85#function",
          "uid_components": [
            "scripts",
            "scripts.create_github_issues",
            "scripts.create_github_issues.create_task_issue:85"
          ],
          "hash": "3418d37f58293ec381a5f41585674950011de3ed846f40a45cbfc8aef2c19a48",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-github-issues-create-task-issue",
          "summary": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "self._create_issue_via_cli",
            "task_data.get",
            "self._format_criteria",
            "self._create_issue_via_api"
          ],
          "called_by": []
        },
        {
          "name": "_create_issue_via_api",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub API",
          "line_range": [
            130,
            150
          ],
          "parameters": [
            "self",
            "title",
            "body",
            "labels"
          ],
          "decorators": [],
          "uid": "scripts.create_github_issues._create_issue_via_api:130#function",
          "uid_components": [
            "scripts",
            "scripts.create_github_issues",
            "scripts.create_github_issues._create_issue_via_api:130"
          ],
          "hash": "0fdd95a5353aefc5f168e1c04a3900faf481ed52d34eea6b238852bbe0bfd376",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-github-issues--create-issue-via-api",
          "summary": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub API",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private",
            "public"
          ],
          "calls": [
            "requests.post",
            "response.json",
            "print"
          ],
          "called_by": []
        },
        {
          "name": "_create_issue_via_cli",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub CLI",
          "line_range": [
            152,
            186
          ],
          "parameters": [
            "self",
            "title",
            "body",
            "labels"
          ],
          "decorators": [],
          "uid": "scripts.create_github_issues._create_issue_via_cli:152#function",
          "uid_components": [
            "scripts",
            "scripts.create_github_issues",
            "scripts.create_github_issues._create_issue_via_cli:152"
          ],
          "hash": "45ade40ede597247c852def8082ef62dfaed8e18c04a5546a45d55891bf87654",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-github-issues--create-issue-via-cli",
          "summary": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub CLI",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "int",
            "issue_url.split",
            "os.getpid",
            "f.write",
            "os.unlink",
            "print",
            "open",
            "subprocess.run"
          ],
          "called_by": []
        },
        {
          "name": "_format_criteria",
          "docstring": "",
          "line_range": [
            188,
            189
          ],
          "parameters": [
            "self",
            "criteria"
          ],
          "decorators": [],
          "uid": "scripts.create_github_issues._format_criteria:188#function",
          "uid_components": [
            "scripts",
            "scripts.create_github_issues",
            "scripts.create_github_issues._format_criteria:188"
          ],
          "hash": "521a829071524cf28f70ba55d88c1abe3e2c55eb732c5302b9fdfc03b449c013",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-github-issues--format-criteria",
          "summary": "Function for format criteria",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "private"
          ],
          "calls": [],
          "called_by": []
        },
        {
          "name": "_format_tasks",
          "docstring": "",
          "line_range": [
            191,
            200
          ],
          "parameters": [
            "self",
            "tasks"
          ],
          "decorators": [],
          "uid": "scripts.create_github_issues._format_tasks:191#function",
          "uid_components": [
            "scripts",
            "scripts.create_github_issues",
            "scripts.create_github_issues._format_tasks:191"
          ],
          "hash": "e6817df9793e85aebd51b77c942b37369d02111e604fc1f199de0f0c13a2028b",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-github-issues--format-tasks",
          "summary": "Function for format tasks",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "private"
          ],
          "calls": [],
          "called_by": []
        },
        {
          "name": "_format_metrics",
          "docstring": "",
          "line_range": [
            202,
            203
          ],
          "parameters": [
            "self",
            "metrics"
          ],
          "decorators": [],
          "uid": "scripts.create_github_issues._format_metrics:202#function",
          "uid_components": [
            "scripts",
            "scripts.create_github_issues",
            "scripts.create_github_issues._format_metrics:202"
          ],
          "hash": "8d8a1615e2c7f131759caf3dd9e32ede35f21e1fe3c02ec6e7f9b71dd1fd1be6",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-github-issues--format-metrics",
          "summary": "Function for format metrics",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "metrics.items"
          ],
          "called_by": []
        }
      ],
      "classes": [
        {
          "name": "GitHubIssuesCreator",
          "docstring": "",
          "line_range": [
            33,
            203
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                34,
                43
              ],
              "parameters": [
                "self",
                "repo_owner",
                "repo_name",
                "token",
                "use_cli"
              ],
              "uid": "scripts.create_github_issues.GitHubIssuesCreator.__init__:34#method",
              "uid_components": [
                "scripts",
                "scripts.create_github_issues",
                "scripts.create_github_issues.GitHubIssuesCreator",
                "scripts.create_github_issues.GitHubIssuesCreator.__init__:34"
              ],
              "hash": "0f70df861a243649d359a1263a920134d551fcb44a574cf4c4ad83c68794a7c8",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-github-issues-githubissuescreator---init--",
              "summary": "Method for githubissuescreator. init",
              "summary_source": "heuristic",
              "tags": [
                "method",
                "private",
                "public"
              ],
              "calls": [],
              "called_by": []
            },
            {
              "name": "create_epic_issue",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u044d\u043f\u0438\u043a\u0430",
              "line_range": [
                45,
                83
              ],
              "parameters": [
                "self",
                "epic_data"
              ],
              "uid": "scripts.create_github_issues.GitHubIssuesCreator.create_epic_issue:45#method",
              "uid_components": [
                "scripts",
                "scripts.create_github_issues",
                "scripts.create_github_issues.GitHubIssuesCreator",
                "scripts.create_github_issues.GitHubIssuesCreator.create_epic_issue:45"
              ],
              "hash": "a7acef18c4f0fd8735937a4b7a8cbf84911c26d1fea004ec13ed62489426c663",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-github-issues-githubissuescreator-create-epic-issue",
              "summary": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u044d\u043f\u0438\u043a\u0430",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "self._format_tasks",
                "self._format_metrics",
                "self._create_issue_via_cli",
                "self._format_criteria",
                "epic_data.get",
                "self._create_issue_via_api"
              ],
              "called_by": []
            },
            {
              "name": "create_task_issue",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
              "line_range": [
                85,
                128
              ],
              "parameters": [
                "self",
                "task_data",
                "epic_number"
              ],
              "uid": "scripts.create_github_issues.GitHubIssuesCreator.create_task_issue:85#method",
              "uid_components": [
                "scripts",
                "scripts.create_github_issues",
                "scripts.create_github_issues.GitHubIssuesCreator",
                "scripts.create_github_issues.GitHubIssuesCreator.create_task_issue:85"
              ],
              "hash": "321a052b60fa856f29340b9192adae5abfa1a3c6929184ac89817cf01029d1a7",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-github-issues-githubissuescreator-create-task-issue",
              "summary": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "self._create_issue_via_cli",
                "task_data.get",
                "self._format_criteria",
                "self._create_issue_via_api"
              ],
              "called_by": []
            },
            {
              "name": "_create_issue_via_api",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub API",
              "line_range": [
                130,
                150
              ],
              "parameters": [
                "self",
                "title",
                "body",
                "labels"
              ],
              "uid": "scripts.create_github_issues.GitHubIssuesCreator._create_issue_via_api:130#method",
              "uid_components": [
                "scripts",
                "scripts.create_github_issues",
                "scripts.create_github_issues.GitHubIssuesCreator",
                "scripts.create_github_issues.GitHubIssuesCreator._create_issue_via_api:130"
              ],
              "hash": "64f519a216c555a467590176272209f3883fbbf96d7091a2d20b18c0d8cccd55",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-github-issues-githubissuescreator--create-issue-via-api",
              "summary": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub API",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private",
                "public"
              ],
              "calls": [
                "requests.post",
                "response.json",
                "print"
              ],
              "called_by": []
            },
            {
              "name": "_create_issue_via_cli",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub CLI",
              "line_range": [
                152,
                186
              ],
              "parameters": [
                "self",
                "title",
                "body",
                "labels"
              ],
              "uid": "scripts.create_github_issues.GitHubIssuesCreator._create_issue_via_cli:152#method",
              "uid_components": [
                "scripts",
                "scripts.create_github_issues",
                "scripts.create_github_issues.GitHubIssuesCreator",
                "scripts.create_github_issues.GitHubIssuesCreator._create_issue_via_cli:152"
              ],
              "hash": "e9365a5f3dde021ca5097206ff426cc6f99b3f09b365bdeec6627850c214d97d",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-github-issues-githubissuescreator--create-issue-via-cli",
              "summary": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub CLI",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "int",
                "issue_url.split",
                "os.getpid",
                "f.write",
                "os.unlink",
                "print",
                "open",
                "subprocess.run"
              ],
              "called_by": []
            },
            {
              "name": "_format_criteria",
              "docstring": "",
              "line_range": [
                188,
                189
              ],
              "parameters": [
                "self",
                "criteria"
              ],
              "uid": "scripts.create_github_issues.GitHubIssuesCreator._format_criteria:188#method",
              "uid_components": [
                "scripts",
                "scripts.create_github_issues",
                "scripts.create_github_issues.GitHubIssuesCreator",
                "scripts.create_github_issues.GitHubIssuesCreator._format_criteria:188"
              ],
              "hash": "db279583f99b3a05ade3e5c1e6e18570006a1cfa5891ff032281a3af988b4b91",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-github-issues-githubissuescreator--format-criteria",
              "summary": "Method for githubissuescreator. format criteria",
              "summary_source": "heuristic",
              "tags": [
                "method",
                "private",
                "public"
              ],
              "calls": [],
              "called_by": []
            },
            {
              "name": "_format_tasks",
              "docstring": "",
              "line_range": [
                191,
                200
              ],
              "parameters": [
                "self",
                "tasks"
              ],
              "uid": "scripts.create_github_issues.GitHubIssuesCreator._format_tasks:191#method",
              "uid_components": [
                "scripts",
                "scripts.create_github_issues",
                "scripts.create_github_issues.GitHubIssuesCreator",
                "scripts.create_github_issues.GitHubIssuesCreator._format_tasks:191"
              ],
              "hash": "4121a4fa218cdbebabbad094b243e3f2b359ca4e6359f2361e3a89a2dd4c315e",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-github-issues-githubissuescreator--format-tasks",
              "summary": "Method for githubissuescreator. format tasks",
              "summary_source": "heuristic",
              "tags": [
                "method",
                "private",
                "public"
              ],
              "calls": [],
              "called_by": []
            },
            {
              "name": "_format_metrics",
              "docstring": "",
              "line_range": [
                202,
                203
              ],
              "parameters": [
                "self",
                "metrics"
              ],
              "uid": "scripts.create_github_issues.GitHubIssuesCreator._format_metrics:202#method",
              "uid_components": [
                "scripts",
                "scripts.create_github_issues",
                "scripts.create_github_issues.GitHubIssuesCreator",
                "scripts.create_github_issues.GitHubIssuesCreator._format_metrics:202"
              ],
              "hash": "39b486e95d9688a653efb7b18b891636a1ab7dc31c204b5c52997d4ea3c769d6",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-github-issues-githubissuescreator--format-metrics",
              "summary": "Method for githubissuescreator. format metrics",
              "summary_source": "heuristic",
              "tags": [
                "method",
                "private",
                "public"
              ],
              "calls": [
                "metrics.items"
              ],
              "called_by": []
            }
          ],
          "bases": [],
          "uid": "scripts.create_github_issues.GitHubIssuesCreator:33#class",
          "uid_components": [
            "scripts",
            "scripts.create_github_issues",
            "scripts.create_github_issues.GitHubIssuesCreator:33"
          ],
          "hash": "694704d6bb1e32a0604a1a9c569aa005fea7c54433b020bafbfe6914b81bada3",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-github-issues-githubissuescreator",
          "summary": "Class for git hub issues creator",
          "summary_source": "heuristic",
          "tags": [
            "class",
            "public"
          ]
        }
      ],
      "callgraph": {
        "load_env_file": [
          "value.strip",
          "line.startswith",
          "line.strip",
          "key.strip",
          "Path",
          "line.split",
          "open",
          "env_file.exists",
          "print"
        ],
        "__init__": [],
        "create_epic_issue": [
          "self._format_tasks",
          "self._format_metrics",
          "self._create_issue_via_cli",
          "self._format_criteria",
          "epic_data.get",
          "self._create_issue_via_api"
        ],
        "create_task_issue": [
          "self._create_issue_via_cli",
          "task_data.get",
          "self._format_criteria",
          "self._create_issue_via_api"
        ],
        "_create_issue_via_api": [
          "requests.post",
          "response.json",
          "print"
        ],
        "_create_issue_via_cli": [
          "int",
          "issue_url.split",
          "os.getpid",
          "f.write",
          "os.unlink",
          "print",
          "open",
          "subprocess.run"
        ],
        "_format_criteria": [],
        "_format_tasks": [],
        "_format_metrics": [
          "metrics.items"
        ],
        "load_epics_data": [
          "json.load",
          "Path",
          "epics_file.exists",
          "open",
          "print"
        ],
        "main": [
          "os.getenv",
          "len",
          "epics_data.get",
          "creator.create_epic_issue",
          "load_epics_data",
          "creator.create_task_issue",
          "GitHubIssuesCreator",
          "epic_data.get",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "json",
        "os",
        "pathlib",
        "requests",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": "49ba6a19e2c3aa696879c666036ca56bf5678032d3a8a1004c9c1849b87104b7",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "scripts.create_github_issues.scripts.create_github_issues#module",
      "uid_components": [
        "scripts",
        "scripts.create_github_issues",
        "scripts.create_github_issues.scripts.create_github_issues"
      ],
      "summary": "GitHub Issues Creator for AI-Dogfooding Project\n\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 GitHub issues \u0438\u0437 \u043d\u0430\u0448\u0438\u0445 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0437\u0430\u0434\u0430\u0447",
      "summary_source": "docstring",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "7b472068-dda7-4418-85b2-cebc52d5a152"
    },
    {
      "module_id": "scripts.collector",
      "path": "scripts/collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "apply_filters",
          "docstring": "",
          "line_range": [
            13,
            29
          ],
          "parameters": [
            "files",
            "filters"
          ],
          "decorators": [],
          "uid": "scripts.collector.apply_filters:13#function",
          "uid_components": [
            "scripts",
            "scripts.collector",
            "scripts.collector.apply_filters:13"
          ],
          "hash": "4885fb263549878ebc2290608e12f23e22a9120e004214a3f9044700cbcc964d",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-collector-apply-filters",
          "summary": "Function for apply filters",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "filtered.append",
            "pattern.startswith",
            "fnmatch.fnmatch"
          ],
          "called_by": [
            "collect_files"
          ]
        },
        {
          "name": "collect_files",
          "docstring": "",
          "line_range": [
            32,
            38
          ],
          "parameters": [
            "root_dir",
            "filters"
          ],
          "decorators": [],
          "uid": "scripts.collector.collect_files:32#function",
          "uid_components": [
            "scripts",
            "scripts.collector",
            "scripts.collector.collect_files:32"
          ],
          "hash": "cbd907f6212c9174e34fcd5dd1b2ccbec5c0089ed20fc0da11a76a577b06188d",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-collector-collect-files",
          "summary": "Function for collect files",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "path.relative_to",
            "files.append",
            "path.is_file",
            "apply_filters",
            "root_dir.rglob",
            "str"
          ],
          "called_by": [
            "generate_struct"
          ]
        },
        {
          "name": "generate_struct",
          "docstring": "",
          "line_range": [
            41,
            88
          ],
          "parameters": [
            "root_dir",
            "output"
          ],
          "decorators": [],
          "uid": "scripts.collector.generate_struct:41#function",
          "uid_components": [
            "scripts",
            "scripts.collector",
            "scripts.collector.generate_struct:41"
          ],
          "hash": "d87129f0c6c55aa187a46b8304b947b43c160d9571ccfe96f57044b9e7b66e6b",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-collector-generate-struct",
          "summary": "Function for generate struct",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "logger.info",
            "len",
            "output_path.open",
            "output_path.exists",
            "existing.get",
            "json.load",
            "json.dump",
            "Path",
            "collect_files",
            "uuid.uuid4",
            "str"
          ],
          "called_by": [
            "main"
          ]
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            91,
            92
          ],
          "parameters": [],
          "decorators": [],
          "uid": "scripts.collector.main:91#function",
          "uid_components": [
            "scripts",
            "scripts.collector",
            "scripts.collector.main:91"
          ],
          "hash": "327e97823a739cfdeeeeb5b9c34aa780d80d14788e5f11c5bf2c3395813d28bb",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-collector-main",
          "summary": "Function for main",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "generate_struct"
          ],
          "called_by": []
        }
      ],
      "classes": [],
      "callgraph": {
        "apply_filters": [
          "filtered.append",
          "pattern.startswith",
          "fnmatch.fnmatch"
        ],
        "collect_files": [
          "path.relative_to",
          "files.append",
          "path.is_file",
          "apply_filters",
          "root_dir.rglob",
          "str"
        ],
        "generate_struct": [
          "logger.info",
          "len",
          "output_path.open",
          "output_path.exists",
          "existing.get",
          "json.load",
          "json.dump",
          "Path",
          "collect_files",
          "uuid.uuid4",
          "str"
        ],
        "main": [
          "generate_struct"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "logging",
        "pathlib",
        "uuid"
      ],
      "hash": "251462380e2e135880f652ce7d9e6a1483d18a1202c336f76ac3f43536505049",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "scripts.collector.scripts.collector#module",
      "uid_components": [
        "scripts",
        "scripts.collector",
        "scripts.collector.scripts.collector"
      ],
      "summary": "Module for scripts collector",
      "summary_source": "heuristic",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "f315bbf8-e141-4308-9a57-eee65ccc8a6a"
    },
    {
      "module_id": "scripts.validate_refs",
      "path": "scripts/validate_refs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_references",
          "docstring": "",
          "line_range": [
            11,
            43
          ],
          "parameters": [],
          "decorators": [],
          "uid": "scripts.validate_refs.validate_references:11#function",
          "uid_components": [
            "scripts",
            "scripts.validate_refs",
            "scripts.validate_refs.validate_references:11"
          ],
          "hash": "915612e1a579a88a9e4311c4401c91a1626972506917f1380ba3629754cb2691",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-validate-refs-validate-references",
          "summary": "Validates references",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "logger.info",
            "broken_links.append",
            "enumerate",
            "logger.warning",
            "source_file.exists",
            "json.load",
            "json.dump",
            "Path",
            "target_file.exists",
            "idea.get",
            "logger.error"
          ],
          "called_by": [
            "main"
          ]
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            46,
            47
          ],
          "parameters": [],
          "decorators": [],
          "uid": "scripts.validate_refs.main:46#function",
          "uid_components": [
            "scripts",
            "scripts.validate_refs",
            "scripts.validate_refs.main:46"
          ],
          "hash": "7e7738fca8d97b39c213db51a64f9a5bf2ab0a1832c5b093ea8c7a3cd1ea28cd",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-validate-refs-main",
          "summary": "Function for main",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "validate_references"
          ],
          "called_by": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_references": [
          "logger.info",
          "broken_links.append",
          "enumerate",
          "logger.warning",
          "source_file.exists",
          "json.load",
          "json.dump",
          "Path",
          "target_file.exists",
          "idea.get",
          "logger.error"
        ],
        "main": [
          "validate_references"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": "6c57e53f4e4e0afdb8e8c78f1e6d38f284721f6729a7197ff483ed29f5363607",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "scripts.validate_refs.scripts.validate_refs#module",
      "uid_components": [
        "scripts",
        "scripts.validate_refs",
        "scripts.validate_refs.scripts.validate_refs"
      ],
      "summary": "Module for scripts.validate refs",
      "summary_source": "heuristic",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "c3acc7ca-b816-45ed-a1e2-70fbac75a931"
    },
    {
      "module_id": "scripts.epic_roadmap_manager",
      "path": "scripts/epic_roadmap_manager.py",
      "category": "core",
      "module_doc": "Epic Roadmap Manager - \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430\u043c\u0438 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0441\u0435\u0441\u0441\u0438\u0439\n\n\u0424\u0443\u043d\u043a\u0446\u0438\u0438:\n- \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 roadmap \u0438 \u043f\u043b\u0430\u043d\u043e\u0432\n- \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u0441\u0435\u0441\u0441\u0438\u0439\n- \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u0441 GitHub epics\n- \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u043e\u0432",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            259,
            291
          ],
          "parameters": [],
          "decorators": [],
          "uid": "scripts.epic_roadmap_manager.main:259#function",
          "uid_components": [
            "scripts",
            "scripts.epic_roadmap_manager",
            "scripts.epic_roadmap_manager.main:259"
          ],
          "hash": "0255073d1d4f667d506c844a767cebd9caffbde8ff5923aed73aa3c5c71babdd",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-epic-roadmap-manager-main",
          "summary": "Function for main",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "manager.complete_session",
            "EpicRoadmapManager",
            "manager.show_overview",
            "parser.add_argument",
            "parser.parse_args",
            "argparse.ArgumentParser",
            "manager.show_epic_details",
            "manager.start_session",
            "print"
          ],
          "called_by": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            19,
            22
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.epic_roadmap_manager.__init__:19#function",
          "uid_components": [
            "scripts",
            "scripts.epic_roadmap_manager",
            "scripts.epic_roadmap_manager.__init__:19"
          ],
          "hash": "f024389a237c4787bb976f4de6692cb7a9e7c5f800d174b2b93d1582ae18c75a",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-epic-roadmap-manager---init--",
          "summary": "Function for init",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "private"
          ],
          "calls": [],
          "called_by": []
        },
        {
          "name": "load_roadmap",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c roadmap \u0438\u0437 \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            24,
            31
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.epic_roadmap_manager.load_roadmap:24#function",
          "uid_components": [
            "scripts",
            "scripts.epic_roadmap_manager",
            "scripts.epic_roadmap_manager.load_roadmap:24"
          ],
          "hash": "befeebb1471baa2e83154e4bcc66dfc7d937a5b860ed138daf052a5eb363c4bc",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-epic-roadmap-manager-load-roadmap",
          "summary": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c roadmap \u0438\u0437 \u0444\u0430\u0439\u043b\u0430",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "json.load",
            "open",
            "print"
          ],
          "called_by": []
        },
        {
          "name": "save_roadmap",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c roadmap \u0432 \u0444\u0430\u0439\u043b",
          "line_range": [
            33,
            40
          ],
          "parameters": [
            "self",
            "roadmap"
          ],
          "decorators": [],
          "uid": "scripts.epic_roadmap_manager.save_roadmap:33#function",
          "uid_components": [
            "scripts",
            "scripts.epic_roadmap_manager",
            "scripts.epic_roadmap_manager.save_roadmap:33"
          ],
          "hash": "5f9941dde1152a75bc53bd426cd9ab10fed4263c17bb1d09e60c8cd81bbf80f4",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-epic-roadmap-manager-save-roadmap",
          "summary": "\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c roadmap \u0432 \u0444\u0430\u0439\u043b",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "datetime.now",
            "json.dump",
            "open",
            "print"
          ],
          "called_by": []
        },
        {
          "name": "show_overview",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043e\u0431\u0437\u043e\u0440 roadmap",
          "line_range": [
            42,
            80
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.epic_roadmap_manager.show_overview:42#function",
          "uid_components": [
            "scripts",
            "scripts.epic_roadmap_manager",
            "scripts.epic_roadmap_manager.show_overview:42"
          ],
          "hash": "f453805b5817ccae4329e73dcabe1436f619fe688c5e07b27df93898915e847f",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-epic-roadmap-manager-show-overview",
          "summary": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043e\u0431\u0437\u043e\u0440 roadmap",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "self.load_roadmap",
            "roadmap.get",
            "print",
            "stats.get",
            "epic.get",
            "epics.items"
          ],
          "called_by": []
        },
        {
          "name": "show_epic_details",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u044d\u043f\u0438\u043a\u0430",
          "line_range": [
            82,
            125
          ],
          "parameters": [
            "self",
            "epic_id"
          ],
          "decorators": [],
          "uid": "scripts.epic_roadmap_manager.show_epic_details:82#function",
          "uid_components": [
            "scripts",
            "scripts.epic_roadmap_manager",
            "scripts.epic_roadmap_manager.show_epic_details:82"
          ],
          "hash": "dae8a1962366293a5ce87c2da69355f667009d1fe7b93da26a7103315cec0d36",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-epic-roadmap-manager-show-epic-details",
          "summary": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u044d\u043f\u0438\u043a\u0430",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "self.load_roadmap",
            "len",
            "session.get",
            "roadmap.get",
            "epic.get",
            "epic_data.get",
            "print"
          ],
          "called_by": []
        },
        {
          "name": "start_session",
          "docstring": "\u041d\u0430\u0447\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043d\u0430\u0434 \u0441\u0435\u0441\u0441\u0438\u0435\u0439",
          "line_range": [
            127,
            189
          ],
          "parameters": [
            "self",
            "epic_id",
            "session_id"
          ],
          "decorators": [],
          "uid": "scripts.epic_roadmap_manager.start_session:127#function",
          "uid_components": [
            "scripts",
            "scripts.epic_roadmap_manager",
            "scripts.epic_roadmap_manager.start_session:127"
          ],
          "hash": "aa8531d9f89faf5f38f1dc522d983ffa3f1270b4261caba7ee094c5985da6b00",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-epic-roadmap-manager-start-session",
          "summary": "\u041d\u0430\u0447\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043d\u0430\u0434 \u0441\u0435\u0441\u0441\u0438\u0435\u0439",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "sess.get",
            "self.load_roadmap",
            "session.get",
            "datetime.now",
            "json.dump",
            "roadmap.get",
            "epic.get",
            "self.save_roadmap",
            "os.makedirs",
            "open",
            "epic_data.get",
            "print"
          ],
          "called_by": []
        },
        {
          "name": "complete_session",
          "docstring": "\u0417\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e",
          "line_range": [
            191,
            257
          ],
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": [],
          "uid": "scripts.epic_roadmap_manager.complete_session:191#function",
          "uid_components": [
            "scripts",
            "scripts.epic_roadmap_manager",
            "scripts.epic_roadmap_manager.complete_session:191"
          ],
          "hash": "7c65880162ba045fd3d3c0fb6ecf3d8b1b0aecd6457a16fdf7bb596dd0003f54",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-epic-roadmap-manager-complete-session",
          "summary": "\u0417\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "self.load_roadmap",
            "session.get",
            "all",
            "sess.get",
            "json.load",
            "datetime.now",
            "json.dump",
            "os.remove",
            "roadmap.get",
            "epic.get",
            "self.save_roadmap",
            "current_session.get",
            "os.makedirs",
            "open",
            "sessions_log.append",
            "print"
          ],
          "called_by": []
        }
      ],
      "classes": [
        {
          "name": "EpicRoadmapManager",
          "docstring": "",
          "line_range": [
            18,
            257
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                19,
                22
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.epic_roadmap_manager.EpicRoadmapManager.__init__:19#method",
              "uid_components": [
                "scripts",
                "scripts.epic_roadmap_manager",
                "scripts.epic_roadmap_manager.EpicRoadmapManager",
                "scripts.epic_roadmap_manager.EpicRoadmapManager.__init__:19"
              ],
              "hash": "c925b74fe81cdc612411f2b990c35ce9751e835e376d60b7a13f43d2d4d44af4",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-epic-roadmap-manager-epicroadmapmanager---init--",
              "summary": "Method for epicroadmapmanager. init",
              "summary_source": "heuristic",
              "tags": [
                "method",
                "private",
                "public"
              ],
              "calls": [],
              "called_by": []
            },
            {
              "name": "load_roadmap",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c roadmap \u0438\u0437 \u0444\u0430\u0439\u043b\u0430",
              "line_range": [
                24,
                31
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.epic_roadmap_manager.EpicRoadmapManager.load_roadmap:24#method",
              "uid_components": [
                "scripts",
                "scripts.epic_roadmap_manager",
                "scripts.epic_roadmap_manager.EpicRoadmapManager",
                "scripts.epic_roadmap_manager.EpicRoadmapManager.load_roadmap:24"
              ],
              "hash": "e03f59b0acf158de1ac5762a493c735b465b1c2a364e0886c2796fae6fbc6ae3",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-epic-roadmap-manager-epicroadmapmanager-load-roadmap",
              "summary": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c roadmap \u0438\u0437 \u0444\u0430\u0439\u043b\u0430",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "json.load",
                "open",
                "print"
              ],
              "called_by": []
            },
            {
              "name": "save_roadmap",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c roadmap \u0432 \u0444\u0430\u0439\u043b",
              "line_range": [
                33,
                40
              ],
              "parameters": [
                "self",
                "roadmap"
              ],
              "uid": "scripts.epic_roadmap_manager.EpicRoadmapManager.save_roadmap:33#method",
              "uid_components": [
                "scripts",
                "scripts.epic_roadmap_manager",
                "scripts.epic_roadmap_manager.EpicRoadmapManager",
                "scripts.epic_roadmap_manager.EpicRoadmapManager.save_roadmap:33"
              ],
              "hash": "7e12d47932ab33d8d87cb1e6d32c102078e5aa45dfd5c089ef1a1beaeabdc5ba",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-epic-roadmap-manager-epicroadmapmanager-save-roadmap",
              "summary": "\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c roadmap \u0432 \u0444\u0430\u0439\u043b",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "datetime.now",
                "json.dump",
                "open",
                "print"
              ],
              "called_by": []
            },
            {
              "name": "show_overview",
              "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043e\u0431\u0437\u043e\u0440 roadmap",
              "line_range": [
                42,
                80
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.epic_roadmap_manager.EpicRoadmapManager.show_overview:42#method",
              "uid_components": [
                "scripts",
                "scripts.epic_roadmap_manager",
                "scripts.epic_roadmap_manager.EpicRoadmapManager",
                "scripts.epic_roadmap_manager.EpicRoadmapManager.show_overview:42"
              ],
              "hash": "2ea7c0ea667ba50bfaafc00586df1a1672a59e12353712119731673fbfb1d9bf",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-epic-roadmap-manager-epicroadmapmanager-show-overview",
              "summary": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043e\u0431\u0437\u043e\u0440 roadmap",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "self.load_roadmap",
                "roadmap.get",
                "print",
                "stats.get",
                "epic.get",
                "epics.items"
              ],
              "called_by": []
            },
            {
              "name": "show_epic_details",
              "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u044d\u043f\u0438\u043a\u0430",
              "line_range": [
                82,
                125
              ],
              "parameters": [
                "self",
                "epic_id"
              ],
              "uid": "scripts.epic_roadmap_manager.EpicRoadmapManager.show_epic_details:82#method",
              "uid_components": [
                "scripts",
                "scripts.epic_roadmap_manager",
                "scripts.epic_roadmap_manager.EpicRoadmapManager",
                "scripts.epic_roadmap_manager.EpicRoadmapManager.show_epic_details:82"
              ],
              "hash": "cb6c21163a79eda1323accf0b82aaad8ff995c1234f9bf68d8abb834c2f1b83e",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-epic-roadmap-manager-epicroadmapmanager-show-epic-details",
              "summary": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u044d\u043f\u0438\u043a\u0430",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "self.load_roadmap",
                "len",
                "session.get",
                "roadmap.get",
                "epic.get",
                "epic_data.get",
                "print"
              ],
              "called_by": []
            },
            {
              "name": "start_session",
              "docstring": "\u041d\u0430\u0447\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043d\u0430\u0434 \u0441\u0435\u0441\u0441\u0438\u0435\u0439",
              "line_range": [
                127,
                189
              ],
              "parameters": [
                "self",
                "epic_id",
                "session_id"
              ],
              "uid": "scripts.epic_roadmap_manager.EpicRoadmapManager.start_session:127#method",
              "uid_components": [
                "scripts",
                "scripts.epic_roadmap_manager",
                "scripts.epic_roadmap_manager.EpicRoadmapManager",
                "scripts.epic_roadmap_manager.EpicRoadmapManager.start_session:127"
              ],
              "hash": "65f431abd86b4b4269acea35155f29063c4037885b080371245d3efed1ff5b71",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-epic-roadmap-manager-epicroadmapmanager-start-session",
              "summary": "\u041d\u0430\u0447\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043d\u0430\u0434 \u0441\u0435\u0441\u0441\u0438\u0435\u0439",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "sess.get",
                "self.load_roadmap",
                "session.get",
                "datetime.now",
                "json.dump",
                "roadmap.get",
                "epic.get",
                "self.save_roadmap",
                "os.makedirs",
                "open",
                "epic_data.get",
                "print"
              ],
              "called_by": []
            },
            {
              "name": "complete_session",
              "docstring": "\u0417\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e",
              "line_range": [
                191,
                257
              ],
              "parameters": [
                "self",
                "session_id"
              ],
              "uid": "scripts.epic_roadmap_manager.EpicRoadmapManager.complete_session:191#method",
              "uid_components": [
                "scripts",
                "scripts.epic_roadmap_manager",
                "scripts.epic_roadmap_manager.EpicRoadmapManager",
                "scripts.epic_roadmap_manager.EpicRoadmapManager.complete_session:191"
              ],
              "hash": "6c1187f12a5d1335fbfb9eb126c364c2a9019cd9a5ecef2201c83ace14d83206",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-epic-roadmap-manager-epicroadmapmanager-complete-session",
              "summary": "\u0417\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "self.load_roadmap",
                "session.get",
                "all",
                "sess.get",
                "json.load",
                "datetime.now",
                "json.dump",
                "os.remove",
                "roadmap.get",
                "epic.get",
                "self.save_roadmap",
                "current_session.get",
                "os.makedirs",
                "open",
                "sessions_log.append",
                "print"
              ],
              "called_by": []
            }
          ],
          "bases": [],
          "uid": "scripts.epic_roadmap_manager.EpicRoadmapManager:18#class",
          "uid_components": [
            "scripts",
            "scripts.epic_roadmap_manager",
            "scripts.epic_roadmap_manager.EpicRoadmapManager:18"
          ],
          "hash": "dc37fb8cb69e71d204408b5cc2c1aa45c8314d0dc81bfb603fa86985d223d62f",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-epic-roadmap-manager-epicroadmapmanager",
          "summary": "Manages epic roadmap",
          "summary_source": "heuristic",
          "tags": [
            "class",
            "public"
          ]
        }
      ],
      "callgraph": {
        "__init__": [],
        "load_roadmap": [
          "json.load",
          "open",
          "print"
        ],
        "save_roadmap": [
          "datetime.now",
          "json.dump",
          "open",
          "print"
        ],
        "show_overview": [
          "self.load_roadmap",
          "roadmap.get",
          "print",
          "stats.get",
          "epic.get",
          "epics.items"
        ],
        "show_epic_details": [
          "self.load_roadmap",
          "len",
          "session.get",
          "roadmap.get",
          "epic.get",
          "epic_data.get",
          "print"
        ],
        "start_session": [
          "sess.get",
          "self.load_roadmap",
          "session.get",
          "datetime.now",
          "json.dump",
          "roadmap.get",
          "epic.get",
          "self.save_roadmap",
          "os.makedirs",
          "open",
          "epic_data.get",
          "print"
        ],
        "complete_session": [
          "self.load_roadmap",
          "session.get",
          "all",
          "sess.get",
          "json.load",
          "datetime.now",
          "json.dump",
          "os.remove",
          "roadmap.get",
          "epic.get",
          "self.save_roadmap",
          "current_session.get",
          "os.makedirs",
          "open",
          "sessions_log.append",
          "print"
        ],
        "main": [
          "manager.complete_session",
          "EpicRoadmapManager",
          "manager.show_overview",
          "parser.add_argument",
          "parser.parse_args",
          "argparse.ArgumentParser",
          "manager.show_epic_details",
          "manager.start_session",
          "print"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "datetime",
        "json",
        "os",
        "pathlib"
      ],
      "hash": "5125fc24bf131dbbbda814a26f75ecff0e8d6cebde166de88b637ee22ac7251e",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "scripts.epic_roadmap_manager.scripts.epic_roadmap_manager#module",
      "uid_components": [
        "scripts",
        "scripts.epic_roadmap_manager",
        "scripts.epic_roadmap_manager.scripts.epic_roadmap_manager"
      ],
      "summary": "Epic Roadmap Manager - \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430\u043c\u0438 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0441\u0435\u0441\u0441\u0438\u0439\n\n\u0424\u0443\u043d\u043a\u0446\u0438\u0438:\n- \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 roadmap \u0438 \u043f\u043b\u0430\u043d\u043e\u0432\n- \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u0441\u0435\u0441\u0441...",
      "summary_source": "docstring",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "fd4ed2c0-b1ce-49fa-bb88-1dcc84a1f812"
    },
    {
      "module_id": "scripts.process_926_items",
      "path": "scripts/process_926_items.py",
      "category": "core",
      "module_doc": "926 Items Processing Script - Updated Implementation\nProcesses items according to GitHub roadmap + personal management vision\nImplements all decisions from 926_items_processing_execution_plan.md",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            16,
            51
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.process_926_items.__init__:16#function",
          "uid_components": [
            "scripts",
            "scripts.process_926_items",
            "scripts.process_926_items.__init__:16"
          ],
          "hash": "784a5e508bfa71c5606b6bd58be931c89abf4760b806d0e00d7c7d5c40fb79ff",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-process-926-items---init--",
          "summary": "Function for init",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "datetime.now",
            "Path"
          ],
          "called_by": []
        },
        {
          "name": "load_comprehensive_index",
          "docstring": "Load the 926 items from comprehensive index",
          "line_range": [
            53,
            111
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.process_926_items.load_comprehensive_index:53#function",
          "uid_components": [
            "scripts",
            "scripts.process_926_items",
            "scripts.process_926_items.load_comprehensive_index:53"
          ],
          "hash": "a5226f8a120e8cff1287e4d3e98e3e4cc0ac2e19ab81a58b3b31d44107c6cb5c",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-process-926-items-load-comprehensive-index",
          "summary": "Load the 926 items from comprehensive index",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "value.items",
            "str",
            "set",
            "len",
            "items.append",
            "any",
            "items.extend",
            "item.get",
            "hash",
            "json.load",
            "item_content.lower",
            "unique_items.append",
            "isinstance",
            "data.items",
            "open",
            "index_path.exists",
            "seen_items.add",
            "print"
          ],
          "called_by": []
        },
        {
          "name": "calculate_confidence_score",
          "docstring": "Calculate confidence score for categorization decision",
          "line_range": [
            113,
            146
          ],
          "parameters": [
            "self",
            "item",
            "category"
          ],
          "decorators": [],
          "uid": "scripts.process_926_items.calculate_confidence_score:113#function",
          "uid_components": [
            "scripts",
            "scripts.process_926_items",
            "scripts.process_926_items.calculate_confidence_score:113"
          ],
          "hash": "4adfe6d2823f1fc60ee59ce838b44074aced3095cdb72bf835be48860acac00a",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-process-926-items-calculate-confidence-score",
          "summary": "Calculate confidence score for categorization decision",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "min",
            "sum",
            "item.get",
            "self.check_t_pot_related",
            "str"
          ],
          "called_by": []
        },
        {
          "name": "check_t_pot_related",
          "docstring": "Enhanced T-Pot detection",
          "line_range": [
            148,
            155
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": [],
          "uid": "scripts.process_926_items.check_t_pot_related:148#function",
          "uid_components": [
            "scripts",
            "scripts.process_926_items",
            "scripts.process_926_items.check_t_pot_related:148"
          ],
          "hash": "c23cc147d361fc36bf9e50235aa6665eecac67a246204bccfc01e2f9b4f23ec0",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-process-926-items-check-t-pot-related",
          "summary": "Enhanced T-Pot detection",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "any",
            "str"
          ],
          "called_by": []
        },
        {
          "name": "check_team_implementable",
          "docstring": "Check if team can implement without architecture review",
          "line_range": [
            157,
            176
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": [],
          "uid": "scripts.process_926_items.check_team_implementable:157#function",
          "uid_components": [
            "scripts",
            "scripts.process_926_items",
            "scripts.process_926_items.check_team_implementable:157"
          ],
          "hash": "ffaf85cd52fce6e31033ecba89f4baef1c8ceeb794df429d9d1f7a1b5b3f5139",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-process-926-items-check-team-implementable",
          "summary": "Check if team can implement without architecture review",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "sum",
            "str"
          ],
          "called_by": []
        },
        {
          "name": "check_personal_vs_team_vs_business",
          "docstring": "Classify as personal/team/business",
          "line_range": [
            178,
            214
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": [],
          "uid": "scripts.process_926_items.check_personal_vs_team_vs_business:178#function",
          "uid_components": [
            "scripts",
            "scripts.process_926_items",
            "scripts.process_926_items.check_personal_vs_team_vs_business:178"
          ],
          "hash": "c45acd6bef1097508f7487392cd4f142d92e4ddc87613e3f25b2cfed66e5fd67",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-process-926-items-check-personal-vs-team-vs-business",
          "summary": "Classify as personal/team/business",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "max",
            "sum",
            "item.get",
            "str"
          ],
          "called_by": []
        },
        {
          "name": "identify_epic_candidates",
          "docstring": "Identify items that should be grouped into epics",
          "line_range": [
            216,
            233
          ],
          "parameters": [
            "self",
            "items"
          ],
          "decorators": [],
          "uid": "scripts.process_926_items.identify_epic_candidates:216#function",
          "uid_components": [
            "scripts",
            "scripts.process_926_items",
            "scripts.process_926_items.identify_epic_candidates:216"
          ],
          "hash": "1fa7284362dc241a7b213e19854d4b906128b235a548e187c39458988b6a7eb5",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-process-926-items-identify-epic-candidates",
          "summary": "Identify items that should be grouped into epics",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "len",
            "any",
            "self.extract_epic_name",
            "item.get",
            "epic_groups.items",
            "str"
          ],
          "called_by": []
        },
        {
          "name": "extract_epic_name",
          "docstring": "Extract epic name from item",
          "line_range": [
            235,
            241
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": [],
          "uid": "scripts.process_926_items.extract_epic_name:235#function",
          "uid_components": [
            "scripts",
            "scripts.process_926_items",
            "scripts.process_926_items.extract_epic_name:235"
          ],
          "hash": "d4d9d90ef127bf0c16829b448c55c206d676877bf6dbca2c9059a49a3d584833",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-process-926-items-extract-epic-name",
          "summary": "Extract epic name from item",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "title.split",
            "item.get"
          ],
          "called_by": []
        },
        {
          "name": "categorize_item",
          "docstring": "Main categorization logic with confidence scoring",
          "line_range": [
            243,
            278
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": [],
          "uid": "scripts.process_926_items.categorize_item:243#function",
          "uid_components": [
            "scripts",
            "scripts.process_926_items",
            "scripts.process_926_items.categorize_item:243"
          ],
          "hash": "66252b63a24bc050aed1b44d8aec58d6cd427c23c7dee4b8485522e992742e7a",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-process-926-items-categorize-item",
          "summary": "Main categorization logic with confidence scoring",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "self.check_team_implementable",
            "any",
            "self.calculate_confidence_score",
            "self.check_t_pot_related",
            "self.check_personal_vs_team_vs_business",
            "str"
          ],
          "called_by": []
        },
        {
          "name": "find_duplicates",
          "docstring": "Enhanced duplicate detection with T-Pot special handling",
          "line_range": [
            280,
            319
          ],
          "parameters": [
            "self",
            "items"
          ],
          "decorators": [],
          "uid": "scripts.process_926_items.find_duplicates:280#function",
          "uid_components": [
            "scripts",
            "scripts.process_926_items",
            "scripts.process_926_items.find_duplicates:280"
          ],
          "hash": "21210da965c7e5df63b92413c707ef5f5d0867cc1201c8f6307db8c7f9ccc087",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-process-926-items-find-duplicates",
          "summary": "Enhanced duplicate detection with T-Pot special handling",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "seen_items.items",
            "self.suggest_merge_strategy",
            "item.get",
            "duplicates.append",
            "self.calculate_similarity",
            "self.check_t_pot_related"
          ],
          "called_by": []
        },
        {
          "name": "calculate_similarity",
          "docstring": "Enhanced similarity calculation",
          "line_range": [
            321,
            342
          ],
          "parameters": [
            "self",
            "title1",
            "title2"
          ],
          "decorators": [],
          "uid": "scripts.process_926_items.calculate_similarity:321#function",
          "uid_components": [
            "scripts",
            "scripts.process_926_items",
            "scripts.process_926_items.calculate_similarity:321"
          ],
          "hash": "a00ac21e6e9ac940b392d7d82431cb5a562093c155cb91c3cad39a637c69743c",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-process-926-items-calculate-similarity",
          "summary": "Enhanced similarity calculation",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "words1.intersection",
            "set",
            "len",
            "min",
            "title1.split",
            "title2.split",
            "words1.union"
          ],
          "called_by": []
        },
        {
          "name": "suggest_merge_strategy",
          "docstring": "Enhanced merge strategy with T-Pot consideration",
          "line_range": [
            344,
            359
          ],
          "parameters": [
            "self",
            "item1",
            "item2"
          ],
          "decorators": [],
          "uid": "scripts.process_926_items.suggest_merge_strategy:344#function",
          "uid_components": [
            "scripts",
            "scripts.process_926_items",
            "scripts.process_926_items.suggest_merge_strategy:344"
          ],
          "hash": "d9497d608ad20c59807364d3a806ad21707bbf0063e012d0bcbb5d0570e2cad3",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-process-926-items-suggest-merge-strategy",
          "summary": "Enhanced merge strategy with T-Pot consideration",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "len",
            "item2.get",
            "item1.get",
            "self.check_t_pot_related",
            "str"
          ],
          "called_by": []
        },
        {
          "name": "process_items",
          "docstring": "Main processing workflow implementing execution plan",
          "line_range": [
            361,
            468
          ],
          "parameters": [
            "self",
            "items"
          ],
          "decorators": [],
          "uid": "scripts.process_926_items.process_items:361#function",
          "uid_components": [
            "scripts",
            "scripts.process_926_items",
            "scripts.process_926_items.process_items:361"
          ],
          "hash": "f12d9ea07c565cb123d8454f007ebd3aa09d31bd146b18060b44895912f05dbb",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-process-926-items-process-items",
          "summary": "Main processing workflow implementing execution plan",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "self.find_duplicates",
            "len",
            "set",
            "str",
            "low_confidence_items.append",
            "self.categorize_item",
            "id",
            "self.check_team_implementable",
            "any",
            "self.extract_epic_name",
            "processed_item.copy",
            "duplicate_item_ids.add",
            "datetime.now",
            "category.startswith",
            "self.check_t_pot_related",
            "print"
          ],
          "called_by": []
        },
        {
          "name": "save_results",
          "docstring": "Save categorized results with enhanced metadata",
          "line_range": [
            470,
            546
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.process_926_items.save_results:470#function",
          "uid_components": [
            "scripts",
            "scripts.process_926_items",
            "scripts.process_926_items.save_results:470"
          ],
          "hash": "88c9a9827bc04c4ebbde30c5af25096506e52632ddba932fbda3ec7f55ab0574",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-process-926-items-save-results",
          "summary": "Save categorized results with enhanced metadata",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "len",
            "sum",
            "item.get",
            "datetime.now",
            "self.get_category_description",
            "json.dump",
            "open",
            "print"
          ],
          "called_by": []
        },
        {
          "name": "get_category_description",
          "docstring": "Category descriptions per execution plan",
          "line_range": [
            548,
            562
          ],
          "parameters": [
            "self",
            "category"
          ],
          "decorators": [],
          "uid": "scripts.process_926_items.get_category_description:548#function",
          "uid_components": [
            "scripts",
            "scripts.process_926_items",
            "scripts.process_926_items.get_category_description:548"
          ],
          "hash": "809047d25f9f0f68f9714a81be11a5487a420a17168930374ac801c58cb67f4b",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-process-926-items-get-category-description",
          "summary": "Category descriptions per execution plan",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "descriptions.get"
          ],
          "called_by": []
        },
        {
          "name": "run",
          "docstring": "Main execution workflow per execution plan",
          "line_range": [
            564,
            606
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.process_926_items.run:564#function",
          "uid_components": [
            "scripts",
            "scripts.process_926_items",
            "scripts.process_926_items.run:564"
          ],
          "hash": "e9944575b60de5be0248ee99bcd8c3a0fdfe439a291cbf8b417bf669a37cfb63",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-process-926-items-run",
          "summary": "Main execution workflow per execution plan",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "self.load_comprehensive_index",
            "self.process_items",
            "self.save_results",
            "print"
          ],
          "called_by": []
        }
      ],
      "classes": [
        {
          "name": "TaskProcessor926",
          "docstring": "",
          "line_range": [
            15,
            606
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                16,
                51
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.process_926_items.TaskProcessor926.__init__:16#method",
              "uid_components": [
                "scripts",
                "scripts.process_926_items",
                "scripts.process_926_items.TaskProcessor926",
                "scripts.process_926_items.TaskProcessor926.__init__:16"
              ],
              "hash": "f37921e8f44711b661315f0355911001460bebdc90aa64822537960426695dc6",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-process-926-items-taskprocessor926---init--",
              "summary": "Method for taskprocessor926. init",
              "summary_source": "heuristic",
              "tags": [
                "method",
                "private",
                "public"
              ],
              "calls": [
                "datetime.now",
                "Path"
              ],
              "called_by": []
            },
            {
              "name": "load_comprehensive_index",
              "docstring": "Load the 926 items from comprehensive index",
              "line_range": [
                53,
                111
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.process_926_items.TaskProcessor926.load_comprehensive_index:53#method",
              "uid_components": [
                "scripts",
                "scripts.process_926_items",
                "scripts.process_926_items.TaskProcessor926",
                "scripts.process_926_items.TaskProcessor926.load_comprehensive_index:53"
              ],
              "hash": "e5a8341a0e02f749e0ccfd08ab06eb2eeac49e3bfcc428104aad20dd6dbe345c",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-process-926-items-taskprocessor926-load-comprehensive-index",
              "summary": "Load the 926 items from comprehensive index",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "value.items",
                "str",
                "set",
                "len",
                "items.append",
                "any",
                "items.extend",
                "item.get",
                "hash",
                "json.load",
                "item_content.lower",
                "unique_items.append",
                "isinstance",
                "data.items",
                "open",
                "index_path.exists",
                "seen_items.add",
                "print"
              ],
              "called_by": []
            },
            {
              "name": "calculate_confidence_score",
              "docstring": "Calculate confidence score for categorization decision",
              "line_range": [
                113,
                146
              ],
              "parameters": [
                "self",
                "item",
                "category"
              ],
              "uid": "scripts.process_926_items.TaskProcessor926.calculate_confidence_score:113#method",
              "uid_components": [
                "scripts",
                "scripts.process_926_items",
                "scripts.process_926_items.TaskProcessor926",
                "scripts.process_926_items.TaskProcessor926.calculate_confidence_score:113"
              ],
              "hash": "f8d9fad58f52480aa895e83a1b6368157e1e2d4c4d05ac69c412bf650bd161e0",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-process-926-items-taskprocessor926-calculate-confidence-score",
              "summary": "Calculate confidence score for categorization decision",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "min",
                "sum",
                "item.get",
                "self.check_t_pot_related",
                "str"
              ],
              "called_by": []
            },
            {
              "name": "check_t_pot_related",
              "docstring": "Enhanced T-Pot detection",
              "line_range": [
                148,
                155
              ],
              "parameters": [
                "self",
                "item"
              ],
              "uid": "scripts.process_926_items.TaskProcessor926.check_t_pot_related:148#method",
              "uid_components": [
                "scripts",
                "scripts.process_926_items",
                "scripts.process_926_items.TaskProcessor926",
                "scripts.process_926_items.TaskProcessor926.check_t_pot_related:148"
              ],
              "hash": "683d4d91b58a26f374fdb253c8dede3790496366a0b43794a85925471db9a71b",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-process-926-items-taskprocessor926-check-t-pot-related",
              "summary": "Enhanced T-Pot detection",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "any",
                "str"
              ],
              "called_by": []
            },
            {
              "name": "check_team_implementable",
              "docstring": "Check if team can implement without architecture review",
              "line_range": [
                157,
                176
              ],
              "parameters": [
                "self",
                "item"
              ],
              "uid": "scripts.process_926_items.TaskProcessor926.check_team_implementable:157#method",
              "uid_components": [
                "scripts",
                "scripts.process_926_items",
                "scripts.process_926_items.TaskProcessor926",
                "scripts.process_926_items.TaskProcessor926.check_team_implementable:157"
              ],
              "hash": "70cb1a3ba0c5badb648c9f1ae0d82ab4bd2e2eeb99f982f69238e738b56f3a9f",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-process-926-items-taskprocessor926-check-team-implementable",
              "summary": "Check if team can implement without architecture review",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "sum",
                "str"
              ],
              "called_by": []
            },
            {
              "name": "check_personal_vs_team_vs_business",
              "docstring": "Classify as personal/team/business",
              "line_range": [
                178,
                214
              ],
              "parameters": [
                "self",
                "item"
              ],
              "uid": "scripts.process_926_items.TaskProcessor926.check_personal_vs_team_vs_business:178#method",
              "uid_components": [
                "scripts",
                "scripts.process_926_items",
                "scripts.process_926_items.TaskProcessor926",
                "scripts.process_926_items.TaskProcessor926.check_personal_vs_team_vs_business:178"
              ],
              "hash": "ddcea9bf77f05735b905539f7f52554c54f3ca8fdfa98c1962b0e2dbe42a345e",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-process-926-items-taskprocessor926-check-personal-vs-team-vs-business",
              "summary": "Classify as personal/team/business",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "max",
                "sum",
                "item.get",
                "str"
              ],
              "called_by": []
            },
            {
              "name": "identify_epic_candidates",
              "docstring": "Identify items that should be grouped into epics",
              "line_range": [
                216,
                233
              ],
              "parameters": [
                "self",
                "items"
              ],
              "uid": "scripts.process_926_items.TaskProcessor926.identify_epic_candidates:216#method",
              "uid_components": [
                "scripts",
                "scripts.process_926_items",
                "scripts.process_926_items.TaskProcessor926",
                "scripts.process_926_items.TaskProcessor926.identify_epic_candidates:216"
              ],
              "hash": "3f43d5830753303187b02b2c5cbea6b3a3d58cd44d1b7fc57ab232b20f1ee283",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-process-926-items-taskprocessor926-identify-epic-candidates",
              "summary": "Identify items that should be grouped into epics",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "len",
                "any",
                "self.extract_epic_name",
                "item.get",
                "epic_groups.items",
                "str"
              ],
              "called_by": []
            },
            {
              "name": "extract_epic_name",
              "docstring": "Extract epic name from item",
              "line_range": [
                235,
                241
              ],
              "parameters": [
                "self",
                "item"
              ],
              "uid": "scripts.process_926_items.TaskProcessor926.extract_epic_name:235#method",
              "uid_components": [
                "scripts",
                "scripts.process_926_items",
                "scripts.process_926_items.TaskProcessor926",
                "scripts.process_926_items.TaskProcessor926.extract_epic_name:235"
              ],
              "hash": "5d5c93639d190965e88cfff70e33990232a08db29114472e793a6cc788cd42b4",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-process-926-items-taskprocessor926-extract-epic-name",
              "summary": "Extract epic name from item",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "title.split",
                "item.get"
              ],
              "called_by": []
            },
            {
              "name": "categorize_item",
              "docstring": "Main categorization logic with confidence scoring",
              "line_range": [
                243,
                278
              ],
              "parameters": [
                "self",
                "item"
              ],
              "uid": "scripts.process_926_items.TaskProcessor926.categorize_item:243#method",
              "uid_components": [
                "scripts",
                "scripts.process_926_items",
                "scripts.process_926_items.TaskProcessor926",
                "scripts.process_926_items.TaskProcessor926.categorize_item:243"
              ],
              "hash": "5f71e0a6e2295147da6ce873ca28c3e361aafa98cf0e413669d21c2e2834bab0",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-process-926-items-taskprocessor926-categorize-item",
              "summary": "Main categorization logic with confidence scoring",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "self.check_team_implementable",
                "any",
                "self.calculate_confidence_score",
                "self.check_t_pot_related",
                "self.check_personal_vs_team_vs_business",
                "str"
              ],
              "called_by": []
            },
            {
              "name": "find_duplicates",
              "docstring": "Enhanced duplicate detection with T-Pot special handling",
              "line_range": [
                280,
                319
              ],
              "parameters": [
                "self",
                "items"
              ],
              "uid": "scripts.process_926_items.TaskProcessor926.find_duplicates:280#method",
              "uid_components": [
                "scripts",
                "scripts.process_926_items",
                "scripts.process_926_items.TaskProcessor926",
                "scripts.process_926_items.TaskProcessor926.find_duplicates:280"
              ],
              "hash": "ef84b4db16d6b62eff7ac7bf4ad412a4e2523ed1abc881d925e093124fd70020",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-process-926-items-taskprocessor926-find-duplicates",
              "summary": "Enhanced duplicate detection with T-Pot special handling",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "seen_items.items",
                "self.suggest_merge_strategy",
                "item.get",
                "duplicates.append",
                "self.calculate_similarity",
                "self.check_t_pot_related"
              ],
              "called_by": []
            },
            {
              "name": "calculate_similarity",
              "docstring": "Enhanced similarity calculation",
              "line_range": [
                321,
                342
              ],
              "parameters": [
                "self",
                "title1",
                "title2"
              ],
              "uid": "scripts.process_926_items.TaskProcessor926.calculate_similarity:321#method",
              "uid_components": [
                "scripts",
                "scripts.process_926_items",
                "scripts.process_926_items.TaskProcessor926",
                "scripts.process_926_items.TaskProcessor926.calculate_similarity:321"
              ],
              "hash": "c638cba96624dddcaea746fde5c87fd329928eaede874e2f446db9220b57ed82",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-process-926-items-taskprocessor926-calculate-similarity",
              "summary": "Enhanced similarity calculation",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "words1.intersection",
                "set",
                "len",
                "min",
                "title1.split",
                "title2.split",
                "words1.union"
              ],
              "called_by": []
            },
            {
              "name": "suggest_merge_strategy",
              "docstring": "Enhanced merge strategy with T-Pot consideration",
              "line_range": [
                344,
                359
              ],
              "parameters": [
                "self",
                "item1",
                "item2"
              ],
              "uid": "scripts.process_926_items.TaskProcessor926.suggest_merge_strategy:344#method",
              "uid_components": [
                "scripts",
                "scripts.process_926_items",
                "scripts.process_926_items.TaskProcessor926",
                "scripts.process_926_items.TaskProcessor926.suggest_merge_strategy:344"
              ],
              "hash": "94750ab20e834bc1111b6860c573a24cdd4f82179906abe8c5da372e3cb13be5",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-process-926-items-taskprocessor926-suggest-merge-strategy",
              "summary": "Enhanced merge strategy with T-Pot consideration",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "len",
                "item2.get",
                "item1.get",
                "self.check_t_pot_related",
                "str"
              ],
              "called_by": []
            },
            {
              "name": "process_items",
              "docstring": "Main processing workflow implementing execution plan",
              "line_range": [
                361,
                468
              ],
              "parameters": [
                "self",
                "items"
              ],
              "uid": "scripts.process_926_items.TaskProcessor926.process_items:361#method",
              "uid_components": [
                "scripts",
                "scripts.process_926_items",
                "scripts.process_926_items.TaskProcessor926",
                "scripts.process_926_items.TaskProcessor926.process_items:361"
              ],
              "hash": "04d4981ddcf51fb7e8670d0addc9675d9fa4a0c4930bd229b24a492a53fd7f0f",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-process-926-items-taskprocessor926-process-items",
              "summary": "Main processing workflow implementing execution plan",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "self.find_duplicates",
                "len",
                "set",
                "str",
                "low_confidence_items.append",
                "self.categorize_item",
                "id",
                "self.check_team_implementable",
                "any",
                "self.extract_epic_name",
                "processed_item.copy",
                "duplicate_item_ids.add",
                "datetime.now",
                "category.startswith",
                "self.check_t_pot_related",
                "print"
              ],
              "called_by": []
            },
            {
              "name": "save_results",
              "docstring": "Save categorized results with enhanced metadata",
              "line_range": [
                470,
                546
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.process_926_items.TaskProcessor926.save_results:470#method",
              "uid_components": [
                "scripts",
                "scripts.process_926_items",
                "scripts.process_926_items.TaskProcessor926",
                "scripts.process_926_items.TaskProcessor926.save_results:470"
              ],
              "hash": "a7281112f60f22a69255139e5ab01a5d37d04ccd0729e831a08b1ab1434953cf",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-process-926-items-taskprocessor926-save-results",
              "summary": "Save categorized results with enhanced metadata",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "len",
                "sum",
                "item.get",
                "datetime.now",
                "self.get_category_description",
                "json.dump",
                "open",
                "print"
              ],
              "called_by": []
            },
            {
              "name": "get_category_description",
              "docstring": "Category descriptions per execution plan",
              "line_range": [
                548,
                562
              ],
              "parameters": [
                "self",
                "category"
              ],
              "uid": "scripts.process_926_items.TaskProcessor926.get_category_description:548#method",
              "uid_components": [
                "scripts",
                "scripts.process_926_items",
                "scripts.process_926_items.TaskProcessor926",
                "scripts.process_926_items.TaskProcessor926.get_category_description:548"
              ],
              "hash": "ddfd7d66fa092340daec171247ad8d3160d8e486eab89d3e258b62c5c168875d",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-process-926-items-taskprocessor926-get-category-description",
              "summary": "Category descriptions per execution plan",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "descriptions.get"
              ],
              "called_by": []
            },
            {
              "name": "run",
              "docstring": "Main execution workflow per execution plan",
              "line_range": [
                564,
                606
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.process_926_items.TaskProcessor926.run:564#method",
              "uid_components": [
                "scripts",
                "scripts.process_926_items",
                "scripts.process_926_items.TaskProcessor926",
                "scripts.process_926_items.TaskProcessor926.run:564"
              ],
              "hash": "d45d89563282f95f28d7a7f23f6ddff4c08e58ab1e5042d8e2ec68fb3d97bbf5",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-process-926-items-taskprocessor926-run",
              "summary": "Main execution workflow per execution plan",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "self.load_comprehensive_index",
                "self.process_items",
                "self.save_results",
                "print"
              ],
              "called_by": []
            }
          ],
          "bases": [],
          "uid": "scripts.process_926_items.TaskProcessor926:15#class",
          "uid_components": [
            "scripts",
            "scripts.process_926_items",
            "scripts.process_926_items.TaskProcessor926:15"
          ],
          "hash": "d414f60eb6942b5f016625a0fd38efedc588d507c46fb5187e50abc4ca66b161",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-process-926-items-taskprocessor926",
          "summary": "Class for task processor",
          "summary_source": "heuristic",
          "tags": [
            "class",
            "public"
          ]
        }
      ],
      "callgraph": {
        "__init__": [
          "datetime.now",
          "Path"
        ],
        "load_comprehensive_index": [
          "value.items",
          "str",
          "set",
          "len",
          "items.append",
          "any",
          "items.extend",
          "item.get",
          "hash",
          "json.load",
          "item_content.lower",
          "unique_items.append",
          "isinstance",
          "data.items",
          "open",
          "index_path.exists",
          "seen_items.add",
          "print"
        ],
        "calculate_confidence_score": [
          "min",
          "sum",
          "item.get",
          "self.check_t_pot_related",
          "str"
        ],
        "check_t_pot_related": [
          "any",
          "str"
        ],
        "check_team_implementable": [
          "sum",
          "str"
        ],
        "check_personal_vs_team_vs_business": [
          "max",
          "sum",
          "item.get",
          "str"
        ],
        "identify_epic_candidates": [
          "len",
          "any",
          "self.extract_epic_name",
          "item.get",
          "epic_groups.items",
          "str"
        ],
        "extract_epic_name": [
          "title.split",
          "item.get"
        ],
        "categorize_item": [
          "self.check_team_implementable",
          "any",
          "self.calculate_confidence_score",
          "self.check_t_pot_related",
          "self.check_personal_vs_team_vs_business",
          "str"
        ],
        "find_duplicates": [
          "seen_items.items",
          "self.suggest_merge_strategy",
          "item.get",
          "duplicates.append",
          "self.calculate_similarity",
          "self.check_t_pot_related"
        ],
        "calculate_similarity": [
          "words1.intersection",
          "set",
          "len",
          "min",
          "title1.split",
          "title2.split",
          "words1.union"
        ],
        "suggest_merge_strategy": [
          "len",
          "item2.get",
          "item1.get",
          "self.check_t_pot_related",
          "str"
        ],
        "process_items": [
          "self.find_duplicates",
          "len",
          "set",
          "str",
          "low_confidence_items.append",
          "self.categorize_item",
          "id",
          "self.check_team_implementable",
          "any",
          "self.extract_epic_name",
          "processed_item.copy",
          "duplicate_item_ids.add",
          "datetime.now",
          "category.startswith",
          "self.check_t_pot_related",
          "print"
        ],
        "save_results": [
          "len",
          "sum",
          "item.get",
          "datetime.now",
          "self.get_category_description",
          "json.dump",
          "open",
          "print"
        ],
        "get_category_description": [
          "descriptions.get"
        ],
        "run": [
          "self.load_comprehensive_index",
          "self.process_items",
          "self.save_results",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "Tuple",
        "datetime",
        "json",
        "os",
        "pathlib",
        "re",
        "typing"
      ],
      "hash": "75943c116813d77b47300deeaeadb26b7ccd4a37912497bdb82871198feedcf5",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "scripts.process_926_items.scripts.process_926_items#module",
      "uid_components": [
        "scripts",
        "scripts.process_926_items",
        "scripts.process_926_items.scripts.process_926_items"
      ],
      "summary": "926 Items Processing Script - Updated Implementation\nProcesses items according to GitHub roadmap + personal managemen...",
      "summary_source": "docstring",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "395a2fe5-346c-4e14-8e8c-f62b9cd3dc29"
    },
    {
      "module_id": "scripts.session_cli",
      "path": "scripts/session_cli.py",
      "category": "core",
      "module_doc": "Session Management CLI\nAutomates session tracking, worklog updates, and session switching for llmstruct.\nPart of the comprehensive session management system.",
      "functions": [
        {
          "name": "get_current_branch",
          "docstring": "Get current git branch.",
          "line_range": [
            24,
            31
          ],
          "parameters": [],
          "decorators": [],
          "uid": "scripts.session_cli.get_current_branch:24#function",
          "uid_components": [
            "scripts",
            "scripts.session_cli",
            "scripts.session_cli.get_current_branch:24"
          ],
          "hash": "6b6946d58d8dbafb14f4f31e35c35f148115190214898cd3751cbbd5db31e8a7",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-session-cli-get-current-branch",
          "summary": "Get current git branch.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "subprocess.run"
          ],
          "called_by": [
            "switch_session",
            "log_event"
          ]
        },
        {
          "name": "load_json_file",
          "docstring": "Load JSON file with error handling.",
          "line_range": [
            33,
            40
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": [],
          "uid": "scripts.session_cli.load_json_file:33#function",
          "uid_components": [
            "scripts",
            "scripts.session_cli",
            "scripts.session_cli.load_json_file:33"
          ],
          "hash": "bf8ffba884014cc0217338f43b7d9802e019b28c0bdcee3a08ed5e3491b1993d",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-session-cli-load-json-file",
          "summary": "Load JSON file with error handling.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "json.load",
            "open",
            "print"
          ],
          "called_by": [
            "show_current_session",
            "log_event",
            "switch_session",
            "list_sessions",
            "show_worklog"
          ]
        },
        {
          "name": "save_json_file",
          "docstring": "Save JSON file with error handling.",
          "line_range": [
            42,
            51
          ],
          "parameters": [
            "file_path",
            "data"
          ],
          "decorators": [],
          "uid": "scripts.session_cli.save_json_file:42#function",
          "uid_components": [
            "scripts",
            "scripts.session_cli",
            "scripts.session_cli.save_json_file:42"
          ],
          "hash": "fbed88581f75e27fffd53429bbe091f3e31d0f799664d8ab21295497ad7edadf",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-session-cli-save-json-file",
          "summary": "Save JSON file with error handling.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "json.dump",
            "os.makedirs",
            "open",
            "print"
          ],
          "called_by": [
            "switch_session",
            "log_event"
          ]
        },
        {
          "name": "get_current_timestamp",
          "docstring": "Get current timestamp in ISO format.",
          "line_range": [
            53,
            55
          ],
          "parameters": [],
          "decorators": [],
          "uid": "scripts.session_cli.get_current_timestamp:53#function",
          "uid_components": [
            "scripts",
            "scripts.session_cli",
            "scripts.session_cli.get_current_timestamp:53"
          ],
          "hash": "b485c698e28737b1c95534127089facafcada2df8841a9123ef76605e52db501",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-session-cli-get-current-timestamp",
          "summary": "Get current timestamp in ISO format.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "datetime.now"
          ],
          "called_by": [
            "switch_session",
            "log_event"
          ]
        },
        {
          "name": "log_event",
          "docstring": "Log an event to worklog.json.",
          "line_range": [
            57,
            88
          ],
          "parameters": [
            "event_message",
            "author"
          ],
          "decorators": [],
          "uid": "scripts.session_cli.log_event:57#function",
          "uid_components": [
            "scripts",
            "scripts.session_cli",
            "scripts.session_cli.log_event:57"
          ],
          "hash": "7308c7f5c5dfa4f9ad74490e8ffc8de7fdd5289d8fc78e7e7e7d7d5ab5815ff9",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-session-cli-log-event",
          "summary": "Log an event to worklog.json.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "get_current_timestamp",
            "get_current_branch",
            "save_json_file",
            "current_session.get",
            "load_json_file",
            "print"
          ],
          "called_by": [
            "switch_session",
            "main"
          ]
        },
        {
          "name": "switch_session",
          "docstring": "Switch to a different session or create new one.",
          "line_range": [
            90,
            141
          ],
          "parameters": [
            "session_id"
          ],
          "decorators": [],
          "uid": "scripts.session_cli.switch_session:90#function",
          "uid_components": [
            "scripts",
            "scripts.session_cli",
            "scripts.session_cli.switch_session:90"
          ],
          "hash": "ed401ea43186ea7070887a0b9f44f7b7199c4e6b0c482865b8cf6c5242a43a6e",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-session-cli-switch-session",
          "summary": "Switch to a different session or create new one.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "get_current_timestamp",
            "log_event",
            "get_current_branch",
            "save_json_file",
            "load_json_file",
            "print"
          ],
          "called_by": [
            "main"
          ]
        },
        {
          "name": "list_sessions",
          "docstring": "List all available sessions.",
          "line_range": [
            143,
            166
          ],
          "parameters": [],
          "decorators": [],
          "uid": "scripts.session_cli.list_sessions:143#function",
          "uid_components": [
            "scripts",
            "scripts.session_cli",
            "scripts.session_cli.list_sessions:143"
          ],
          "hash": "f8ce03c177a1c64f416dacaf78629ca5841b333de5779c833e3839e41fb4a5bd",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-session-cli-list-sessions",
          "summary": "List all available sessions.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "current_session.get",
            "load_json_file",
            "print"
          ],
          "called_by": [
            "main"
          ]
        },
        {
          "name": "show_current_session",
          "docstring": "Show current session details.",
          "line_range": [
            168,
            183
          ],
          "parameters": [],
          "decorators": [],
          "uid": "scripts.session_cli.show_current_session:168#function",
          "uid_components": [
            "scripts",
            "scripts.session_cli",
            "scripts.session_cli.show_current_session:168"
          ],
          "hash": "f2f2442c3da41d5ab58de7534c68890bc34571f9e1828f5775d67f04719b9873",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-session-cli-show-current-session",
          "summary": "Show current session details.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "current_session.get",
            "load_json_file",
            "print"
          ],
          "called_by": [
            "main"
          ]
        },
        {
          "name": "show_worklog",
          "docstring": "Show recent worklog entries.",
          "line_range": [
            185,
            203
          ],
          "parameters": [
            "limit"
          ],
          "decorators": [],
          "uid": "scripts.session_cli.show_worklog:185#function",
          "uid_components": [
            "scripts",
            "scripts.session_cli",
            "scripts.session_cli.show_worklog:185"
          ],
          "hash": "513c988a1c7e15159fc274e1589e629e9611c0c7b31420c51cf1c8eb3fd34ab2",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-session-cli-show-worklog",
          "summary": "Show recent worklog entries.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "len",
            "reversed",
            "load_json_file",
            "print"
          ],
          "called_by": [
            "main"
          ]
        },
        {
          "name": "main",
          "docstring": "Main CLI interface.",
          "line_range": [
            205,
            244
          ],
          "parameters": [],
          "decorators": [],
          "uid": "scripts.session_cli.main:205#function",
          "uid_components": [
            "scripts",
            "scripts.session_cli",
            "scripts.session_cli.main:205"
          ],
          "hash": "327674efac8f7c517256cb7541d8d0a6a0ff11e9235fc61c19f8f546ac439d25",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-session-cli-main",
          "summary": "Main CLI interface.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "int",
            "show_current_session",
            "len",
            "log_event",
            "switch_session",
            "list_sessions",
            "show_worklog",
            "print"
          ],
          "called_by": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": [
            16,
            22
          ],
          "methods": [],
          "bases": [],
          "uid": "scripts.session_cli.Colors:16#class",
          "uid_components": [
            "scripts",
            "scripts.session_cli",
            "scripts.session_cli.Colors:16"
          ],
          "hash": "10d3da2b3c01a62d2ef32fc5070e23980f9167b32f2d7df6b0f3bf5e0f69a1d8",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-session-cli-colors",
          "summary": "Class for colors",
          "summary_source": "heuristic",
          "tags": [
            "class",
            "public"
          ]
        }
      ],
      "callgraph": {
        "get_current_branch": [
          "subprocess.run"
        ],
        "load_json_file": [
          "json.load",
          "open",
          "print"
        ],
        "save_json_file": [
          "json.dump",
          "os.makedirs",
          "open",
          "print"
        ],
        "get_current_timestamp": [
          "datetime.now"
        ],
        "log_event": [
          "get_current_timestamp",
          "get_current_branch",
          "save_json_file",
          "current_session.get",
          "load_json_file",
          "print"
        ],
        "switch_session": [
          "get_current_timestamp",
          "log_event",
          "get_current_branch",
          "save_json_file",
          "load_json_file",
          "print"
        ],
        "list_sessions": [
          "current_session.get",
          "load_json_file",
          "print"
        ],
        "show_current_session": [
          "current_session.get",
          "load_json_file",
          "print"
        ],
        "show_worklog": [
          "len",
          "reversed",
          "load_json_file",
          "print"
        ],
        "main": [
          "int",
          "show_current_session",
          "len",
          "log_event",
          "switch_session",
          "list_sessions",
          "show_worklog",
          "print"
        ]
      },
      "dependencies": [
        "Path",
        "datetime",
        "json",
        "os",
        "pathlib",
        "subprocess",
        "sys"
      ],
      "hash": "23aca9a658e60715b7fa3e4a009c3de7baebdd1eca3acae17d87938ae622cc41",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "scripts.session_cli.scripts.session_cli#module",
      "uid_components": [
        "scripts",
        "scripts.session_cli",
        "scripts.session_cli.scripts.session_cli"
      ],
      "summary": "Session Management CLI\nAutomates session tracking, worklog updates, and session switching for llmstruct",
      "summary_source": "docstring",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "c8843a80-2452-4ffd-bb8e-2ef8df6ab294"
    },
    {
      "module_id": "scripts.validate_epics",
      "path": "scripts/validate_epics.py",
      "category": "core",
      "module_doc": "Epic Data Validator\n\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0445 \u044d\u043f\u0438\u043a\u043e\u0432 \u043f\u0435\u0440\u0435\u0434 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435\u043c GitHub issues",
      "functions": [
        {
          "name": "validate_epic_structure",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u044d\u043f\u0438\u043a\u0430",
          "line_range": [
            12,
            35
          ],
          "parameters": [
            "epic"
          ],
          "decorators": [],
          "uid": "scripts.validate_epics.validate_epic_structure:12#function",
          "uid_components": [
            "scripts",
            "scripts.validate_epics",
            "scripts.validate_epics.validate_epic_structure:12"
          ],
          "hash": "f3b03afbe13c0079d2bf4cdd4931e57b13c881561a999d3243bee5cf6395b838",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-validate-epics-validate-epic-structure",
          "summary": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u044d\u043f\u0438\u043a\u0430",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "errors.append",
            "isinstance"
          ],
          "called_by": [
            "main"
          ]
        },
        {
          "name": "validate_task_structure",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            37,
            53
          ],
          "parameters": [
            "task",
            "epic_id"
          ],
          "decorators": [],
          "uid": "scripts.validate_epics.validate_task_structure:37#function",
          "uid_components": [
            "scripts",
            "scripts.validate_epics",
            "scripts.validate_epics.validate_task_structure:37"
          ],
          "hash": "7fa6e75f61fb67eb77c00d06798c7f80717abcf2a912472fc27031aca672f2c1",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-validate-epics-validate-task-structure",
          "summary": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0437\u0430\u0434\u0430\u0447\u0438",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "errors.append",
            "task.get",
            "isinstance"
          ],
          "called_by": [
            "main"
          ]
        },
        {
          "name": "validate_priorities",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043e\u0432",
          "line_range": [
            55,
            68
          ],
          "parameters": [
            "data"
          ],
          "decorators": [],
          "uid": "scripts.validate_epics.validate_priorities:55#function",
          "uid_components": [
            "scripts",
            "scripts.validate_epics",
            "scripts.validate_epics.validate_priorities:55"
          ],
          "hash": "06b685921bd6dd7098cb32a16533dec4e9a6a9ce7c5e50fcdf36773d01be9cc3",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-validate-epics-validate-priorities",
          "summary": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043e\u0432",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "errors.append",
            "data.get",
            "task.get",
            "epic.get"
          ],
          "called_by": [
            "main"
          ]
        },
        {
          "name": "validate_task_ids",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c ID \u0437\u0430\u0434\u0430\u0447",
          "line_range": [
            70,
            82
          ],
          "parameters": [
            "data"
          ],
          "decorators": [],
          "uid": "scripts.validate_epics.validate_task_ids:70#function",
          "uid_components": [
            "scripts",
            "scripts.validate_epics",
            "scripts.validate_epics.validate_task_ids:70"
          ],
          "hash": "cf15c306a71c5457ff7f4afa5611846837d1858d3bf6fb8ea374e0b2d575b714",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-validate-epics-validate-task-ids",
          "summary": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c ID \u0437\u0430\u0434\u0430\u0447",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "errors.append",
            "set",
            "data.get",
            "seen_ids.add",
            "epic.get",
            "task.get"
          ],
          "called_by": [
            "main"
          ]
        },
        {
          "name": "main",
          "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438",
          "line_range": [
            84,
            131
          ],
          "parameters": [],
          "decorators": [],
          "uid": "scripts.validate_epics.main:84#function",
          "uid_components": [
            "scripts",
            "scripts.validate_epics",
            "scripts.validate_epics.main:84"
          ],
          "hash": "4de744a9f2cd875ddfa75d083fd1cb094c4363ad39608e50ed178cbaa89cbba5",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-validate-epics-main",
          "summary": "\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "validate_epic_structure",
            "validate_task_ids",
            "validate_task_structure",
            "len",
            "all_errors.extend",
            "sum",
            "json.load",
            "e.get",
            "open",
            "Path",
            "epic.get",
            "validate_priorities",
            "epics_file.exists",
            "sys.exit",
            "isinstance",
            "all_errors.append",
            "print"
          ],
          "called_by": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_epic_structure": [
          "errors.append",
          "isinstance"
        ],
        "validate_task_structure": [
          "errors.append",
          "task.get",
          "isinstance"
        ],
        "validate_priorities": [
          "errors.append",
          "data.get",
          "task.get",
          "epic.get"
        ],
        "validate_task_ids": [
          "errors.append",
          "set",
          "data.get",
          "seen_ids.add",
          "epic.get",
          "task.get"
        ],
        "main": [
          "validate_epic_structure",
          "validate_task_ids",
          "validate_task_structure",
          "len",
          "all_errors.extend",
          "sum",
          "json.load",
          "e.get",
          "open",
          "Path",
          "epic.get",
          "validate_priorities",
          "epics_file.exists",
          "sys.exit",
          "isinstance",
          "all_errors.append",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "json",
        "pathlib",
        "sys",
        "typing"
      ],
      "hash": "43fb177eab31592c2b7c17c990f728cb1401eeba26a2e3191857ca218208a3df",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "scripts.validate_epics.scripts.validate_epics#module",
      "uid_components": [
        "scripts",
        "scripts.validate_epics",
        "scripts.validate_epics.scripts.validate_epics"
      ],
      "summary": "Epic Data Validator\n\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0445 \u044d\u043f\u0438\u043a\u043e\u0432 \u043f\u0435\u0440\u0435\u0434 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435\u043c GitHub issues",
      "summary_source": "docstring",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "7865bc85-0056-442c-bcc5-527cb3a9bb47"
    },
    {
      "module_id": "scripts.export_to_github_projects",
      "path": "scripts/export_to_github_projects.py",
      "category": "core",
      "module_doc": "Export script for GitHub Projects integration\nConverts official tasks.json and ideas.json to GitHub Project cards",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            183,
            266
          ],
          "parameters": [],
          "decorators": [],
          "uid": "scripts.export_to_github_projects.main:183#function",
          "uid_components": [
            "scripts",
            "scripts.export_to_github_projects",
            "scripts.export_to_github_projects.main:183"
          ],
          "hash": "b5a8f11aed36452944bf2fa7d5b98de5a6c45b7bd35659404afd55d8e090bee1",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-export-to-github-projects-main",
          "summary": "Function for main",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "GitHubProjectsExportScript",
            "exporter.export_ideas_to_project",
            "exporter._save_mapping",
            "parser.add_argument",
            "exporter.export_tasks_to_project",
            "parser.parse_args",
            "argparse.ArgumentParser",
            "exporter.load_official_data",
            "exporter.filter_data",
            "sys.exit",
            "exporter.check_github_cli",
            "print"
          ],
          "called_by": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            23,
            26
          ],
          "parameters": [
            "self",
            "config_path",
            "dry_run"
          ],
          "decorators": [],
          "uid": "scripts.export_to_github_projects.__init__:23#function",
          "uid_components": [
            "scripts",
            "scripts.export_to_github_projects",
            "scripts.export_to_github_projects.__init__:23"
          ],
          "hash": "34330419ccc1faae7094d33b9fd1a225eabeb98d088242de46c86b119d99d368",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-export-to-github-projects---init--",
          "summary": "Function for init",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "super"
          ],
          "called_by": []
        },
        {
          "name": "check_github_cli",
          "docstring": "Check if GitHub CLI is installed and authenticated",
          "line_range": [
            28,
            36
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.export_to_github_projects.check_github_cli:28#function",
          "uid_components": [
            "scripts",
            "scripts.export_to_github_projects",
            "scripts.export_to_github_projects.check_github_cli:28"
          ],
          "hash": "679aed9c3132e18a51000fed4be58da984c771bbf271f5746d49c0126407870d",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-export-to-github-projects-check-github-cli",
          "summary": "Check if GitHub CLI is installed and authenticated",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "self._run_gh_command",
            "print"
          ],
          "called_by": []
        },
        {
          "name": "list_projects",
          "docstring": "List available GitHub Projects (via gh-projects extension)",
          "line_range": [
            38,
            55
          ],
          "parameters": [
            "self",
            "owner",
            "repo"
          ],
          "decorators": [],
          "uid": "scripts.export_to_github_projects.list_projects:38#function",
          "uid_components": [
            "scripts",
            "scripts.export_to_github_projects",
            "scripts.export_to_github_projects.list_projects:38"
          ],
          "hash": "5b56038ca7fc2c65b4c745ac2491135f24c8d1ed5240c274643ff024856384a2",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-export-to-github-projects-list-projects",
          "summary": "List available GitHub Projects (via gh-projects extension)",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "isinstance",
            "self._run_gh_command",
            "json.loads",
            "print"
          ],
          "called_by": []
        },
        {
          "name": "create_project_item",
          "docstring": "Create a new item in GitHub Project (via gh-projects extension)\nTODO: \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 GraphQL API \u0438\u043b\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c",
          "line_range": [
            57,
            82
          ],
          "parameters": [
            "self",
            "project_number",
            "title",
            "body",
            "owner",
            "repo"
          ],
          "decorators": [],
          "uid": "scripts.export_to_github_projects.create_project_item:57#function",
          "uid_components": [
            "scripts",
            "scripts.export_to_github_projects",
            "scripts.export_to_github_projects.create_project_item:57"
          ],
          "hash": "ba0f8a67fb83048a582d2c9837b399110f00b548ebf7148fe6e3fd75817b977a",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-export-to-github-projects-create-project-item",
          "summary": "Create a new item in GitHub Project (via gh-projects extension)\nTODO: \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 GraphQL API \u0438\u043b\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430...",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "output.strip",
            "self._run_gh_command",
            "print",
            "str"
          ],
          "called_by": []
        },
        {
          "name": "export_tasks_to_project",
          "docstring": "Export tasks to GitHub Project",
          "line_range": [
            84,
            123
          ],
          "parameters": [
            "self",
            "tasks",
            "project_number",
            "owner",
            "repo"
          ],
          "decorators": [],
          "uid": "scripts.export_to_github_projects.export_tasks_to_project:84#function",
          "uid_components": [
            "scripts",
            "scripts.export_to_github_projects",
            "scripts.export_to_github_projects.export_tasks_to_project:84"
          ],
          "hash": "9b49ffbe2d722cbfd5cedf24b49fe0b5744d41cfca6cf35dd6b34ba65fe52fb9",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-export-to-github-projects-export-tasks-to-project",
          "summary": "Export tasks to GitHub Project",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "self.create_project_item",
            "len",
            "self.format_task_for_github",
            "task.get",
            "print"
          ],
          "called_by": []
        },
        {
          "name": "export_ideas_to_project",
          "docstring": "Export ideas to GitHub Project",
          "line_range": [
            125,
            164
          ],
          "parameters": [
            "self",
            "ideas",
            "project_number",
            "owner",
            "repo"
          ],
          "decorators": [],
          "uid": "scripts.export_to_github_projects.export_ideas_to_project:125#function",
          "uid_components": [
            "scripts",
            "scripts.export_to_github_projects",
            "scripts.export_to_github_projects.export_ideas_to_project:125"
          ],
          "hash": "bc898280f39e9147976349c94f9069e60d524313869466113eda8cf73110580b",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-export-to-github-projects-export-ideas-to-project",
          "summary": "Export ideas to GitHub Project",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "self.create_project_item",
            "len",
            "self.format_idea_for_github",
            "idea.get",
            "print"
          ],
          "called_by": []
        },
        {
          "name": "filter_data",
          "docstring": "Filter data by status and priority",
          "line_range": [
            166,
            180
          ],
          "parameters": [
            "self",
            "data",
            "status_filter",
            "priority_filter"
          ],
          "decorators": [],
          "uid": "scripts.export_to_github_projects.filter_data:166#function",
          "uid_components": [
            "scripts",
            "scripts.export_to_github_projects",
            "scripts.export_to_github_projects.filter_data:166"
          ],
          "hash": "0919ef842235aef6e2147a6599318056f9fea1b66703896ee643cffbd0535ba3",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-export-to-github-projects-filter-data",
          "summary": "Filter data by status and priority",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "item.get"
          ],
          "called_by": []
        }
      ],
      "classes": [
        {
          "name": "GitHubProjectsExportScript",
          "docstring": "Extended exporter with command-line interface and GitHub CLI integration",
          "line_range": [
            20,
            180
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                23,
                26
              ],
              "parameters": [
                "self",
                "config_path",
                "dry_run"
              ],
              "uid": "scripts.export_to_github_projects.GitHubProjectsExportScript.__init__:23#method",
              "uid_components": [
                "scripts",
                "scripts.export_to_github_projects",
                "scripts.export_to_github_projects.GitHubProjectsExportScript",
                "scripts.export_to_github_projects.GitHubProjectsExportScript.__init__:23"
              ],
              "hash": "56b732719272da24d732a7d45a4aef77420102c9428fd308aa335815c41a4a5c",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-export-to-github-projects-githubprojectsexportscript---init--",
              "summary": "Method for githubprojectsexportscript. init",
              "summary_source": "heuristic",
              "tags": [
                "method",
                "private",
                "public"
              ],
              "calls": [
                "super"
              ],
              "called_by": []
            },
            {
              "name": "check_github_cli",
              "docstring": "Check if GitHub CLI is installed and authenticated",
              "line_range": [
                28,
                36
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.export_to_github_projects.GitHubProjectsExportScript.check_github_cli:28#method",
              "uid_components": [
                "scripts",
                "scripts.export_to_github_projects",
                "scripts.export_to_github_projects.GitHubProjectsExportScript",
                "scripts.export_to_github_projects.GitHubProjectsExportScript.check_github_cli:28"
              ],
              "hash": "ed8fa6e086df206144b0e69a6521d7f19135c8ca10646a2a682bcc77f42a54fa",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-export-to-github-projects-githubprojectsexportscript-check-github-cli",
              "summary": "Check if GitHub CLI is installed and authenticated",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "self._run_gh_command",
                "print"
              ],
              "called_by": []
            },
            {
              "name": "list_projects",
              "docstring": "List available GitHub Projects (via gh-projects extension)",
              "line_range": [
                38,
                55
              ],
              "parameters": [
                "self",
                "owner",
                "repo"
              ],
              "uid": "scripts.export_to_github_projects.GitHubProjectsExportScript.list_projects:38#method",
              "uid_components": [
                "scripts",
                "scripts.export_to_github_projects",
                "scripts.export_to_github_projects.GitHubProjectsExportScript",
                "scripts.export_to_github_projects.GitHubProjectsExportScript.list_projects:38"
              ],
              "hash": "99322b4f789c0d4bf55058a15e7cabb5d5166f8aaeb173b80ebb8e02a4fd1f03",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-export-to-github-projects-githubprojectsexportscript-list-projects",
              "summary": "List available GitHub Projects (via gh-projects extension)",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "isinstance",
                "self._run_gh_command",
                "json.loads",
                "print"
              ],
              "called_by": []
            },
            {
              "name": "create_project_item",
              "docstring": "Create a new item in GitHub Project (via gh-projects extension)\nTODO: \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 GraphQL API \u0438\u043b\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c",
              "line_range": [
                57,
                82
              ],
              "parameters": [
                "self",
                "project_number",
                "title",
                "body",
                "owner",
                "repo"
              ],
              "uid": "scripts.export_to_github_projects.GitHubProjectsExportScript.create_project_item:57#method",
              "uid_components": [
                "scripts",
                "scripts.export_to_github_projects",
                "scripts.export_to_github_projects.GitHubProjectsExportScript",
                "scripts.export_to_github_projects.GitHubProjectsExportScript.create_project_item:57"
              ],
              "hash": "4aa5c7d61d324b0c9112dae647588ddfb8b58e7186aa20097f3b8cd2bd896357",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-export-to-github-projects-githubprojectsexportscript-create-project-item",
              "summary": "Create a new item in GitHub Project (via gh-projects extension)\nTODO: \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 GraphQL API \u0438\u043b\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430...",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "output.strip",
                "self._run_gh_command",
                "print",
                "str"
              ],
              "called_by": []
            },
            {
              "name": "export_tasks_to_project",
              "docstring": "Export tasks to GitHub Project",
              "line_range": [
                84,
                123
              ],
              "parameters": [
                "self",
                "tasks",
                "project_number",
                "owner",
                "repo"
              ],
              "uid": "scripts.export_to_github_projects.GitHubProjectsExportScript.export_tasks_to_project:84#method",
              "uid_components": [
                "scripts",
                "scripts.export_to_github_projects",
                "scripts.export_to_github_projects.GitHubProjectsExportScript",
                "scripts.export_to_github_projects.GitHubProjectsExportScript.export_tasks_to_project:84"
              ],
              "hash": "29d4feef7061bc631a24be85d579d8d06e2ec6eeed6a2616cfe4d3739804519c",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-export-to-github-projects-githubprojectsexportscript-export-tasks-to-project",
              "summary": "Export tasks to GitHub Project",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "self.create_project_item",
                "len",
                "self.format_task_for_github",
                "task.get",
                "print"
              ],
              "called_by": []
            },
            {
              "name": "export_ideas_to_project",
              "docstring": "Export ideas to GitHub Project",
              "line_range": [
                125,
                164
              ],
              "parameters": [
                "self",
                "ideas",
                "project_number",
                "owner",
                "repo"
              ],
              "uid": "scripts.export_to_github_projects.GitHubProjectsExportScript.export_ideas_to_project:125#method",
              "uid_components": [
                "scripts",
                "scripts.export_to_github_projects",
                "scripts.export_to_github_projects.GitHubProjectsExportScript",
                "scripts.export_to_github_projects.GitHubProjectsExportScript.export_ideas_to_project:125"
              ],
              "hash": "3f96415528ba66efff766243b3a3fca5ff07231292034b915c8d506cf509be6d",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-export-to-github-projects-githubprojectsexportscript-export-ideas-to-project",
              "summary": "Export ideas to GitHub Project",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "self.create_project_item",
                "len",
                "self.format_idea_for_github",
                "idea.get",
                "print"
              ],
              "called_by": []
            },
            {
              "name": "filter_data",
              "docstring": "Filter data by status and priority",
              "line_range": [
                166,
                180
              ],
              "parameters": [
                "self",
                "data",
                "status_filter",
                "priority_filter"
              ],
              "uid": "scripts.export_to_github_projects.GitHubProjectsExportScript.filter_data:166#method",
              "uid_components": [
                "scripts",
                "scripts.export_to_github_projects",
                "scripts.export_to_github_projects.GitHubProjectsExportScript",
                "scripts.export_to_github_projects.GitHubProjectsExportScript.filter_data:166"
              ],
              "hash": "01bbf5652d94fec688b84c89cb1ebc3341bd7d4a554bb2efe553a7251154fa86",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-export-to-github-projects-githubprojectsexportscript-filter-data",
              "summary": "Filter data by status and priority",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "item.get"
              ],
              "called_by": []
            }
          ],
          "bases": [
            "GitHubProjectsExporter"
          ],
          "uid": "scripts.export_to_github_projects.GitHubProjectsExportScript:20#class",
          "uid_components": [
            "scripts",
            "scripts.export_to_github_projects",
            "scripts.export_to_github_projects.GitHubProjectsExportScript:20"
          ],
          "hash": "25052efa95c4ee52fb80a7f28b4a33ce5cbe7d29868bed5e97d35d3b40c3f93c",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-export-to-github-projects-githubprojectsexportscript",
          "summary": "Extended exporter with command-line interface and GitHub CLI integration",
          "summary_source": "docstring",
          "tags": [
            "class",
            "public"
          ]
        }
      ],
      "callgraph": {
        "__init__": [
          "super"
        ],
        "check_github_cli": [
          "self._run_gh_command",
          "print"
        ],
        "list_projects": [
          "isinstance",
          "self._run_gh_command",
          "json.loads",
          "print"
        ],
        "create_project_item": [
          "output.strip",
          "self._run_gh_command",
          "print",
          "str"
        ],
        "export_tasks_to_project": [
          "self.create_project_item",
          "len",
          "self.format_task_for_github",
          "task.get",
          "print"
        ],
        "export_ideas_to_project": [
          "self.create_project_item",
          "len",
          "self.format_idea_for_github",
          "idea.get",
          "print"
        ],
        "filter_data": [
          "item.get"
        ],
        "main": [
          "GitHubProjectsExportScript",
          "exporter.export_ideas_to_project",
          "exporter._save_mapping",
          "parser.add_argument",
          "exporter.export_tasks_to_project",
          "parser.parse_args",
          "argparse.ArgumentParser",
          "exporter.load_official_data",
          "exporter.filter_data",
          "sys.exit",
          "exporter.check_github_cli",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "GitHubProjectsExporter",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "argparse",
        "datetime",
        "json",
        "llmstruct.gh_view",
        "pathlib",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": "b6b4f700d8fed14e918455d59e88d15bc3259556aad468ee3c3ea4816d710f2a",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "scripts.export_to_github_projects.scripts.export_to_github_projects#module",
      "uid_components": [
        "scripts",
        "scripts.export_to_github_projects",
        "scripts.export_to_github_projects.scripts.export_to_github_projects"
      ],
      "summary": "Export script for GitHub Projects integration\nConverts official tasks.json and ideas.json to GitHub Project cards",
      "summary_source": "docstring",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "7573e4c5-8442-4c89-b056-e2e184e6050c"
    },
    {
      "module_id": "scripts.validate_json",
      "path": "scripts/validate_json.py",
      "category": "core",
      "module_doc": "JSON Validation Script\nValidates JSON files against their respective schemas.",
      "functions": [
        {
          "name": "load_json",
          "docstring": "Load JSON file with error handling.",
          "line_range": [
            13,
            23
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": [],
          "uid": "scripts.validate_json.load_json:13#function",
          "uid_components": [
            "scripts",
            "scripts.validate_json",
            "scripts.validate_json.load_json:13"
          ],
          "hash": "ea3621a9216a9b14a14e1ef6c079f372139e128ef1b4d62f8643d4c3867dcb45",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-validate-json-load-json",
          "summary": "Load JSON file with error handling.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "json.load",
            "open",
            "print"
          ],
          "called_by": [
            "validate_json"
          ]
        },
        {
          "name": "validate_json",
          "docstring": "Validate a JSON file against a schema.",
          "line_range": [
            26,
            49
          ],
          "parameters": [
            "file_path",
            "schema_path"
          ],
          "decorators": [],
          "uid": "scripts.validate_json.validate_json:26#function",
          "uid_components": [
            "scripts",
            "scripts.validate_json",
            "scripts.validate_json.validate_json:26"
          ],
          "hash": "2e2365b34f9b92d634c897d85fcc24e0c1268567bd4dbf7584e96d6c8b9b4621",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-validate-json-validate-json",
          "summary": "Validate a JSON file against a schema.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "str",
            "load_json",
            "validator.validate",
            "Path",
            "Draft7Validator",
            "print"
          ],
          "called_by": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json": [
          "json.load",
          "open",
          "print"
        ],
        "validate_json": [
          "str",
          "load_json",
          "validator.validate",
          "Path",
          "Draft7Validator",
          "print"
        ]
      },
      "dependencies": [
        "Draft7Validator",
        "Path",
        "ValidationError",
        "json",
        "jsonschema",
        "pathlib",
        "sys",
        "validate"
      ],
      "hash": "0d360b788079e8804f864e0cef5eb33006fb4dbae00eaaea95ef0d692e79640d",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "scripts.validate_json.scripts.validate_json#module",
      "uid_components": [
        "scripts",
        "scripts.validate_json",
        "scripts.validate_json.scripts.validate_json"
      ],
      "summary": "JSON Validation Script\nValidates JSON files against their respective schemas.",
      "summary_source": "docstring",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "0261d932-684a-413e-8e4a-db13f8cc8660"
    },
    {
      "module_id": "scripts.create_comprehensive_index",
      "path": "scripts/create_comprehensive_index.py",
      "category": "core",
      "module_doc": "Comprehensive Project Index Creator\nScans ALL project directories for tasks, ideas, sessions, and concepts.\nProvides complete visibility into project state and unaccounted innovations.",
      "functions": [
        {
          "name": "main",
          "docstring": "Main execution function.",
          "line_range": [
            714,
            735
          ],
          "parameters": [],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index.main:714#function",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index.main:714"
          ],
          "hash": "7e7ca7a47660cec7bc9037f24b899ac7f63ecf08fa45272668aa9ac8bade2728",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-comprehensive-index-main",
          "summary": "Main execution function.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "logger.info",
            "len",
            "by_strategic.get",
            "indexer.save_comprehensive_index",
            "ComprehensiveIndexer",
            "indexer.scan_all_directories",
            "print"
          ],
          "called_by": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            45,
            58
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index.__init__:45#function",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index.__init__:45"
          ],
          "hash": "55d05adfaef87c55e40848d0c4b0eb48aef0c6b633d7a45fb810cbbcd0e11bdc",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-comprehensive-index---init--",
          "summary": "Function for init",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "self._init_patterns",
            "Path"
          ],
          "called_by": []
        },
        {
          "name": "_init_patterns",
          "docstring": "Initialize comprehensive extraction patterns.",
          "line_range": [
            60,
            92
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._init_patterns:60#function",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._init_patterns:60"
          ],
          "hash": "3bf0818966c538afa61cb59041ebabfb0464757cfcde9bfd1e0d2567d6fcccf9",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-comprehensive-index--init-patterns",
          "summary": "Initialize comprehensive extraction patterns.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "re.compile"
          ],
          "called_by": []
        },
        {
          "name": "scan_all_directories",
          "docstring": "Scan all configured directories comprehensively.",
          "line_range": [
            94,
            111
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index.scan_all_directories:94#function",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index.scan_all_directories:94"
          ],
          "hash": "b4fe02ecd55020ac011997cb124636b4cce259777abc3efcedde3d40615db612",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-comprehensive-index-scan-all-directories",
          "summary": "Scan all configured directories comprehensively.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "logger.info",
            "self._scan_directory",
            "len",
            "self._parse_json_files",
            "self._scan_root_files",
            "self._enhance_items"
          ],
          "called_by": []
        },
        {
          "name": "_scan_directory",
          "docstring": "Scan a specific directory according to its configuration.",
          "line_range": [
            113,
            127
          ],
          "parameters": [
            "self",
            "directory",
            "config"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._scan_directory:113#function",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._scan_directory:113"
          ],
          "hash": "f5f4aace2a1c24e74fb8afd49fbd7d38c8f20a98a09ff3da5a9e1cd38f532ae3",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-comprehensive-index--scan-directory",
          "summary": "Scan a specific directory according to its configuration.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "logger.info",
            "file_path.is_file",
            "logger.warning",
            "dir_path.exists",
            "dir_path.glob",
            "self._should_scan_file",
            "self._scan_file"
          ],
          "called_by": []
        },
        {
          "name": "_scan_root_files",
          "docstring": "Scan root-level files.",
          "line_range": [
            129,
            133
          ],
          "parameters": [
            "self",
            "config"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._scan_root_files:129#function",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._scan_root_files:129"
          ],
          "hash": "b05641b55e850e631b7e93bcbda0dcbca2462236421ec789c9c6ed3caa4f2dcc",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-comprehensive-index--scan-root-files",
          "summary": "Scan root-level files.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "file_path.is_file",
            "self._should_scan_file",
            "self._scan_file"
          ],
          "called_by": []
        },
        {
          "name": "_should_scan_file",
          "docstring": "Check if file should be scanned based on extension.",
          "line_range": [
            135,
            137
          ],
          "parameters": [
            "self",
            "file_path",
            "allowed_types"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._should_scan_file:135#function",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._should_scan_file:135"
          ],
          "hash": "ffbb0f88b0c5614291dbbba469f224ce5363a7673ba16dbc87637af98ed84c2a",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-comprehensive-index--should-scan-file",
          "summary": "Check if file should be scanned based on extension.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [],
          "called_by": []
        },
        {
          "name": "_scan_file",
          "docstring": "Scan individual file for project items.",
          "line_range": [
            139,
            152
          ],
          "parameters": [
            "self",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._scan_file:139#function",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._scan_file:139"
          ],
          "hash": "583e6e566e3b42a595d6953c6c505ee9f79805d2f2995b413c06dd6b82a43364",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-comprehensive-index--scan-file",
          "summary": "Scan individual file for project items.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "f.read",
            "self._extract_from_text",
            "self._extract_from_json",
            "logger.error",
            "open"
          ],
          "called_by": []
        },
        {
          "name": "_extract_from_text",
          "docstring": "Extract items from text/markdown files.",
          "line_range": [
            154,
            206
          ],
          "parameters": [
            "self",
            "file_path",
            "content",
            "source_dir",
            "priority"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._extract_from_text:154#function",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._extract_from_text:154"
          ],
          "hash": "75fc57092148821c326bffaa13081ce5eb10c78e4fca70ed00029644f28f9e4b",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-comprehensive-index--extract-from-text",
          "summary": "Extract items from text/markdown files.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "self._create_simple_item",
            "match.start",
            "self._create_checkbox_item",
            "self._create_item_from_match",
            "self._extract_innovation_concepts",
            "match.group",
            "self._is_noise_checkbox"
          ],
          "called_by": []
        },
        {
          "name": "_extract_from_json",
          "docstring": "Extract items from JSON files.",
          "line_range": [
            208,
            225
          ],
          "parameters": [
            "self",
            "file_path",
            "content",
            "source_dir",
            "priority"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._extract_from_json:208#function",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._extract_from_json:208"
          ],
          "hash": "6843da8b413b86fecc5b8f8a0810cfdf3103f56c37fd560c408eba1c8aad2ef5",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-comprehensive-index--extract-from-json",
          "summary": "Extract items from JSON files.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "self._extract_json_tasks",
            "json.loads",
            "logger.warning",
            "self._extract_json_ideas",
            "self._extract_json_array",
            "self._extract_json_sessions",
            "isinstance"
          ],
          "called_by": []
        },
        {
          "name": "_create_item_from_match",
          "docstring": "Create ProjectItem from regex match.",
          "line_range": [
            227,
            249
          ],
          "parameters": [
            "self",
            "match",
            "content",
            "file_path",
            "item_type",
            "source_dir",
            "priority"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._create_item_from_match:227#function",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._create_item_from_match:227"
          ],
          "hash": "1cd7614e19809d2d8240b98198b1459cb70730f088d8f4755d0f802e82aa5637",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-comprehensive-index--create-item-from-match",
          "summary": "Create ProjectItem from regex match.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "self._estimate_effort",
            "ProjectItem",
            "match.start",
            "self._extract_context",
            "self._detect_priority",
            "self._detect_category",
            "datetime.now",
            "self._assess_strategic_value",
            "match.group",
            "self._detect_status",
            "self._extract_tags",
            "title.strip",
            "str"
          ],
          "called_by": []
        },
        {
          "name": "_create_checkbox_item",
          "docstring": "Create ProjectItem from checkbox match.",
          "line_range": [
            251,
            274
          ],
          "parameters": [
            "self",
            "match",
            "content",
            "file_path",
            "item_type",
            "source_dir",
            "priority"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._create_checkbox_item:251#function",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._create_checkbox_item:251"
          ],
          "hash": "2cad82454501c04115d0796fb6ecd75be552a5e8787f4e8d0b364258b89a2d15",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-comprehensive-index--create-checkbox-item",
          "summary": "Create ProjectItem from checkbox match.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "self._estimate_effort",
            "ProjectItem",
            "match.start",
            "self._extract_context",
            "self._detect_priority",
            "self._detect_category",
            "datetime.now",
            "self._assess_strategic_value",
            "match.group",
            "self._extract_tags",
            "str"
          ],
          "called_by": []
        },
        {
          "name": "_create_simple_item",
          "docstring": "Create simple ProjectItem.",
          "line_range": [
            276,
            297
          ],
          "parameters": [
            "self",
            "title",
            "content",
            "file_path",
            "item_type",
            "source_dir",
            "priority",
            "position"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._create_simple_item:276#function",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._create_simple_item:276"
          ],
          "hash": "adbff1338bc4b2cd097446b9409d7c2c8bd17c07a3ff54b12e13f458d41c1a63",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-comprehensive-index--create-simple-item",
          "summary": "Create simple ProjectItem.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "ProjectItem",
            "self._extract_context",
            "datetime.now",
            "title.strip",
            "str"
          ],
          "called_by": []
        },
        {
          "name": "_detect_status",
          "docstring": "Detect item status from surrounding content.",
          "line_range": [
            299,
            308
          ],
          "parameters": [
            "self",
            "content",
            "position"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._detect_status:299#function",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._detect_status:299"
          ],
          "hash": "b77d46ff3b31992ba45ccc9ccd041c4a1386ef934355fc12777aa9c3a5cfa68e",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-comprehensive-index--detect-status",
          "summary": "Detect item status from surrounding content.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "max"
          ],
          "called_by": []
        },
        {
          "name": "_detect_priority",
          "docstring": "Detect item priority from surrounding content.",
          "line_range": [
            310,
            319
          ],
          "parameters": [
            "self",
            "content",
            "position",
            "default"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._detect_priority:310#function",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._detect_priority:310"
          ],
          "hash": "87fc50ec55dbc8b5472dcc8e73fc86c63dbb8f96ca51d4404b8df73cf18fef7d",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-comprehensive-index--detect-priority",
          "summary": "Detect item priority from surrounding content.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "max"
          ],
          "called_by": []
        },
        {
          "name": "_assess_strategic_value",
          "docstring": "Assess strategic value of item.",
          "line_range": [
            321,
            330
          ],
          "parameters": [
            "self",
            "title",
            "content"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._assess_strategic_value:321#function",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._assess_strategic_value:321"
          ],
          "hash": "ad86c5caa295c938ce647e3b716f589459d396d2eaa8c86d6809c5172d1267ff",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-comprehensive-index--assess-strategic-value",
          "summary": "Assess strategic value of item.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [],
          "called_by": []
        },
        {
          "name": "_extract_context",
          "docstring": "Extract context around position.",
          "line_range": [
            332,
            336
          ],
          "parameters": [
            "self",
            "content",
            "position",
            "length"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._extract_context:332#function",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._extract_context:332"
          ],
          "hash": "0cb99948ffac42f7e6e354bca570ab74f123fa1b3251dcd2e222b798f9981711",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-comprehensive-index--extract-context",
          "summary": "Extract context around position.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "min",
            "max",
            "len"
          ],
          "called_by": []
        },
        {
          "name": "_detect_category",
          "docstring": "Detect item category.",
          "line_range": [
            338,
            351
          ],
          "parameters": [
            "self",
            "title",
            "content"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._detect_category:338#function",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._detect_category:338"
          ],
          "hash": "418e2791616791eaf06d1fb54e724f88dd8839ed8ffd52247478df2e9688bb4e",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-comprehensive-index--detect-category",
          "summary": "Detect item category.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "title.lower",
            "any"
          ],
          "called_by": []
        },
        {
          "name": "_estimate_effort",
          "docstring": "Estimate effort required.",
          "line_range": [
            353,
            362
          ],
          "parameters": [
            "self",
            "title",
            "content"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._estimate_effort:353#function",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._estimate_effort:353"
          ],
          "hash": "cfa317f6a91280c43801f874c307fb5d5fe578530d649be88abd2f7bcd801d3a",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-comprehensive-index--estimate-effort",
          "summary": "Estimate effort required.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "any"
          ],
          "called_by": []
        },
        {
          "name": "_extract_tags",
          "docstring": "Extract relevant tags.",
          "line_range": [
            364,
            378
          ],
          "parameters": [
            "self",
            "title",
            "content",
            "source_dir"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._extract_tags:364#function",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._extract_tags:364"
          ],
          "hash": "e99519989b0b098cd0616d02491fbcb979ee91a606c8e5801a422124e0157f53",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-comprehensive-index--extract-tags",
          "summary": "Extract relevant tags.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "title.lower",
            "source_dir.replace",
            "tags.append"
          ],
          "called_by": []
        },
        {
          "name": "_is_noise_checkbox",
          "docstring": "Check if checkbox is noise (navigation, etc).",
          "line_range": [
            380,
            384
          ],
          "parameters": [
            "self",
            "text"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._is_noise_checkbox:380#function",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._is_noise_checkbox:380"
          ],
          "hash": "75bf83fc858d27c097f2903862decf14fa2993eb7e4f91b5882b5430b0875d43",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-comprehensive-index--is-noise-checkbox",
          "summary": "Check if checkbox is noise (navigation, etc).",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "any",
            "text.lower",
            "text.strip",
            "len"
          ],
          "called_by": []
        },
        {
          "name": "_parse_json_files",
          "docstring": "Parse structured JSON files for existing data.",
          "line_range": [
            386,
            402
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._parse_json_files:386#function",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._parse_json_files:386"
          ],
          "hash": "206ea38b45fe03e6431a4846dbafbb74b78a06728315077f6ac8e052a66558ea",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-comprehensive-index--parse-json-files",
          "summary": "Parse structured JSON files for existing data.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "file_path.exists",
            "self._process_structured_json",
            "json.load",
            "logger.error",
            "open"
          ],
          "called_by": []
        },
        {
          "name": "_process_structured_json",
          "docstring": "Process structured JSON data.",
          "line_range": [
            404,
            419
          ],
          "parameters": [
            "self",
            "data",
            "file_path"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._process_structured_json:404#function",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._process_structured_json:404"
          ],
          "hash": "5d61826273ecbe617fdcaf1f88a2ad54707405b78602c3ccc8b4109b64da880b",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-comprehensive-index--process-structured-json",
          "summary": "Process structured JSON data.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "self._add_json_item",
            "isinstance"
          ],
          "called_by": []
        },
        {
          "name": "_add_json_item",
          "docstring": "Add item from JSON structure.",
          "line_range": [
            421,
            441
          ],
          "parameters": [
            "self",
            "item",
            "file_path",
            "item_type"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._add_json_item:421#function",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._add_json_item:421"
          ],
          "hash": "53ffc83d3ac698c10d62b1722d27e2f475379cadd3836141462c446f79f677de",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-comprehensive-index--add-json-item",
          "summary": "Add item from JSON structure.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "len",
            "ProjectItem",
            "item.get",
            "datetime.now",
            "self._assess_json_strategic_value",
            "str"
          ],
          "called_by": []
        },
        {
          "name": "_assess_json_strategic_value",
          "docstring": "Assess strategic value from JSON item.",
          "line_range": [
            443,
            450
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._assess_json_strategic_value:443#function",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._assess_json_strategic_value:443"
          ],
          "hash": "219b9a0938b29c6441f5c121ab650a6e564672b5b0254cd1541284216f12fdb8",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-comprehensive-index--assess-json-strategic-value",
          "summary": "Assess strategic value from JSON item.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "item.get"
          ],
          "called_by": []
        },
        {
          "name": "_extract_innovation_concepts",
          "docstring": "Extract innovation concepts from content.",
          "line_range": [
            452,
            482
          ],
          "parameters": [
            "self",
            "file_path",
            "content",
            "source_dir",
            "priority"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._extract_innovation_concepts:452#function",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._extract_innovation_concepts:452"
          ],
          "hash": "52fe394c82767f2094391291bc52319a411d69c24ef851b43bcf9b261f0560e5",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-comprehensive-index--extract-innovation-concepts",
          "summary": "Extract innovation concepts from content.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "source_dir.replace",
            "len",
            "enumerate",
            "line.strip",
            "ProjectItem",
            "content.find",
            "self._extract_context",
            "datetime.now",
            "content.split",
            "innovation_lines.append",
            "str"
          ],
          "called_by": []
        },
        {
          "name": "_enhance_items",
          "docstring": "Post-process items to enhance metadata and find relationships.",
          "line_range": [
            484,
            501
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._enhance_items:484#function",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._enhance_items:484"
          ],
          "hash": "675414a4118ab35e8dce2c6aaae63ac67e9e0df3f001bc35475ea34348df3aab",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-comprehensive-index--enhance-items",
          "summary": "Post-process items to enhance metadata and find relationships.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "re.sub",
            "logger.info",
            "self._find_related_items"
          ],
          "called_by": []
        },
        {
          "name": "_find_related_items",
          "docstring": "Find related items based on content similarity.",
          "line_range": [
            503,
            517
          ],
          "parameters": [
            "self",
            "item",
            "id_map",
            "title_map"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._find_related_items:503#function",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._find_related_items:503"
          ],
          "hash": "65679174a40053d23cbfe9c9f7cd44f6fe9096e088469a445defb94911d01b26",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-comprehensive-index--find-related-items",
          "summary": "Find related items based on content similarity.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "ref_type.upper",
            "re.findall",
            "related.append"
          ],
          "called_by": []
        },
        {
          "name": "generate_comprehensive_report",
          "docstring": "Generate comprehensive analysis report.",
          "line_range": [
            519,
            561
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index.generate_comprehensive_report:519#function",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index.generate_comprehensive_report:519"
          ],
          "hash": "bb8961b842380b1ca46b0f03cead57e03983c7d4f0ef4b015a46f6c9c1c32ead",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-comprehensive-index-generate-comprehensive-report",
          "summary": "Generate comprehensive analysis report.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "len",
            "by_type.get",
            "asdict",
            "by_strategic_value.get",
            "by_priority.get",
            "by_source.get",
            "datetime.now",
            "by_status.get"
          ],
          "called_by": []
        },
        {
          "name": "save_comprehensive_index",
          "docstring": "Save comprehensive index and reports.",
          "line_range": [
            563,
            582
          ],
          "parameters": [
            "self",
            "output_dir"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index.save_comprehensive_index:563#function",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index.save_comprehensive_index:563"
          ],
          "hash": "d257abb77406fb873023540400b4e84fa8d6e4c2d60660ebf01c8aa4bea68d32",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-comprehensive-index-save-comprehensive-index",
          "summary": "Save comprehensive index and reports.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "logger.info",
            "len",
            "self._generate_analysis_report",
            "json.dump",
            "self.generate_comprehensive_report",
            "f.write",
            "os.makedirs",
            "open"
          ],
          "called_by": []
        },
        {
          "name": "_generate_analysis_report",
          "docstring": "Generate human-readable analysis report.",
          "line_range": [
            584,
            658
          ],
          "parameters": [
            "self",
            "report"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._generate_analysis_report:584#function",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._generate_analysis_report:584"
          ],
          "hash": "becebc1a7192044a416dafe9c9e3285e9d6c3189c2e066d2332a5893a4fa0be4",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-comprehensive-index--generate-analysis-report",
          "summary": "Generate human-readable analysis report.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "self._format_items_list",
            "len",
            "self._format_dict"
          ],
          "called_by": []
        },
        {
          "name": "_format_dict",
          "docstring": "Format dictionary for markdown display.",
          "line_range": [
            660,
            662
          ],
          "parameters": [
            "self",
            "d"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._format_dict:660#function",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._format_dict:660"
          ],
          "hash": "c26861dad0591e7b24a214ded7117b449a9590e6a0726a58540cb072cd9a5cf8",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-comprehensive-index--format-dict",
          "summary": "Format dictionary for markdown display.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "d.items",
            "sorted"
          ],
          "called_by": []
        },
        {
          "name": "_format_items_list",
          "docstring": "Format items list for markdown display.",
          "line_range": [
            664,
            677
          ],
          "parameters": [
            "self",
            "items"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._format_items_list:664#function",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._format_items_list:664"
          ],
          "hash": "956b6d5209a280a7200f0159004fb74a377c6008d4f6f24340b6d4e6c147c479",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-comprehensive-index--format-items-list",
          "summary": "Format items list for markdown display.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "result.append"
          ],
          "called_by": []
        },
        {
          "name": "_extract_json_tasks",
          "docstring": "Extract tasks from JSON tasks array.",
          "line_range": [
            679,
            684
          ],
          "parameters": [
            "self",
            "tasks_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._extract_json_tasks:679#function",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._extract_json_tasks:679"
          ],
          "hash": "8e38b963d4aa7d2cb97f71cbf89fef3d357b6f35a8fb87d00586728273a8956e",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-comprehensive-index--extract-json-tasks",
          "summary": "Extract tasks from JSON tasks array.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "self._add_json_item",
            "isinstance"
          ],
          "called_by": []
        },
        {
          "name": "_extract_json_ideas",
          "docstring": "Extract ideas from JSON ideas array.",
          "line_range": [
            686,
            691
          ],
          "parameters": [
            "self",
            "ideas_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._extract_json_ideas:686#function",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._extract_json_ideas:686"
          ],
          "hash": "b0d6c2437e0321c2f8e0323c40980715b1a693915c00bbb8f00315bd37aa5507",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-comprehensive-index--extract-json-ideas",
          "summary": "Extract ideas from JSON ideas array.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "self._add_json_item",
            "isinstance"
          ],
          "called_by": []
        },
        {
          "name": "_extract_json_sessions",
          "docstring": "Extract sessions from JSON sessions array.",
          "line_range": [
            693,
            698
          ],
          "parameters": [
            "self",
            "sessions_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._extract_json_sessions:693#function",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._extract_json_sessions:693"
          ],
          "hash": "1b39fcbf65bdd54a9a807833b1831ad951f391975042f026f815c2154a8fdf3d",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-comprehensive-index--extract-json-sessions",
          "summary": "Extract sessions from JSON sessions array.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "self._add_json_item",
            "isinstance"
          ],
          "called_by": []
        },
        {
          "name": "_extract_json_array",
          "docstring": "Extract items from JSON array.",
          "line_range": [
            700,
            711
          ],
          "parameters": [
            "self",
            "array_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._extract_json_array:700#function",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._extract_json_array:700"
          ],
          "hash": "8cec2308e83a7eba35827824beac7ce0517ec16300c63dfec3a2988cb7316581",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-comprehensive-index--extract-json-array",
          "summary": "Extract items from JSON array.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "self._add_json_item",
            "isinstance",
            "str"
          ],
          "called_by": []
        }
      ],
      "classes": [
        {
          "name": "ProjectItem",
          "docstring": "Unified representation of any project item (task, idea, session, concept).",
          "line_range": [
            22,
            39
          ],
          "methods": [],
          "bases": [],
          "uid": "scripts.create_comprehensive_index.ProjectItem:22#class",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index.ProjectItem:22"
          ],
          "hash": "3d9cbf2c0d19cc767447d21f1fc4ec09dab1010b31696fbe8cfe583cfc1c7863",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-comprehensive-index-projectitem",
          "summary": "Unified representation of any project item (task, idea, session, concept).",
          "summary_source": "docstring",
          "tags": [
            "class",
            "public"
          ]
        },
        {
          "name": "ComprehensiveIndexer",
          "docstring": "Comprehensive indexer for all project content.",
          "line_range": [
            42,
            711
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                45,
                58
              ],
              "parameters": [
                "self",
                "project_root"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer.__init__:45#method",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer.__init__:45"
              ],
              "hash": "d6a7ac92e5cfb86bdba400f37148238a230f090e5999b2b0e4d00ac49771f3f9",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-comprehensive-index-comprehensiveindexer---init--",
              "summary": "Method for comprehensiveindexer. init",
              "summary_source": "heuristic",
              "tags": [
                "method",
                "private",
                "public"
              ],
              "calls": [
                "self._init_patterns",
                "Path"
              ],
              "called_by": []
            },
            {
              "name": "_init_patterns",
              "docstring": "Initialize comprehensive extraction patterns.",
              "line_range": [
                60,
                92
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._init_patterns:60#method",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._init_patterns:60"
              ],
              "hash": "cca82add88d0d4fa4c9b18763c2a1d0d2079f2385b80edf4418b3c7045209c5e",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-comprehensive-index-comprehensiveindexer--init-patterns",
              "summary": "Initialize comprehensive extraction patterns.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "re.compile"
              ],
              "called_by": []
            },
            {
              "name": "scan_all_directories",
              "docstring": "Scan all configured directories comprehensively.",
              "line_range": [
                94,
                111
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer.scan_all_directories:94#method",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer.scan_all_directories:94"
              ],
              "hash": "4b2f338c67e78f6ab6cffcea73e3dd9659d53604fed68d03f13925f69286e4c1",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-comprehensive-index-comprehensiveindexer-scan-all-directories",
              "summary": "Scan all configured directories comprehensively.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "logger.info",
                "self._scan_directory",
                "len",
                "self._parse_json_files",
                "self._scan_root_files",
                "self._enhance_items"
              ],
              "called_by": []
            },
            {
              "name": "_scan_directory",
              "docstring": "Scan a specific directory according to its configuration.",
              "line_range": [
                113,
                127
              ],
              "parameters": [
                "self",
                "directory",
                "config"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._scan_directory:113#method",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._scan_directory:113"
              ],
              "hash": "6da5638fcffe0089d4ca33d2427566afb7efa8a27b51307ddda3edb03122c625",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-comprehensive-index-comprehensiveindexer--scan-directory",
              "summary": "Scan a specific directory according to its configuration.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "logger.info",
                "file_path.is_file",
                "logger.warning",
                "dir_path.exists",
                "dir_path.glob",
                "self._should_scan_file",
                "self._scan_file"
              ],
              "called_by": []
            },
            {
              "name": "_scan_root_files",
              "docstring": "Scan root-level files.",
              "line_range": [
                129,
                133
              ],
              "parameters": [
                "self",
                "config"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._scan_root_files:129#method",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._scan_root_files:129"
              ],
              "hash": "8a6d62761ec859753bbe46e43c29be8675759a35e2384b1b191b4af9e7eb179a",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-comprehensive-index-comprehensiveindexer--scan-root-files",
              "summary": "Scan root-level files.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "file_path.is_file",
                "self._should_scan_file",
                "self._scan_file"
              ],
              "called_by": []
            },
            {
              "name": "_should_scan_file",
              "docstring": "Check if file should be scanned based on extension.",
              "line_range": [
                135,
                137
              ],
              "parameters": [
                "self",
                "file_path",
                "allowed_types"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._should_scan_file:135#method",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._should_scan_file:135"
              ],
              "hash": "b585a128a82601b277b41feced8eb5d7f65bd5801db3479ffede9d8c2c958c8f",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-comprehensive-index-comprehensiveindexer--should-scan-file",
              "summary": "Check if file should be scanned based on extension.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [],
              "called_by": []
            },
            {
              "name": "_scan_file",
              "docstring": "Scan individual file for project items.",
              "line_range": [
                139,
                152
              ],
              "parameters": [
                "self",
                "file_path",
                "source_dir",
                "priority"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._scan_file:139#method",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._scan_file:139"
              ],
              "hash": "0d1fae66138e36a9b1e3e47b5a634acd3514a24019c8ea522946a0a13aa139ab",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-comprehensive-index-comprehensiveindexer--scan-file",
              "summary": "Scan individual file for project items.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "f.read",
                "self._extract_from_text",
                "self._extract_from_json",
                "logger.error",
                "open"
              ],
              "called_by": []
            },
            {
              "name": "_extract_from_text",
              "docstring": "Extract items from text/markdown files.",
              "line_range": [
                154,
                206
              ],
              "parameters": [
                "self",
                "file_path",
                "content",
                "source_dir",
                "priority"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._extract_from_text:154#method",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._extract_from_text:154"
              ],
              "hash": "044ec011ef822b711faf2c09efbd29cef76fd705475bac4186bd0083bf778842",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-comprehensive-index-comprehensiveindexer--extract-from-text",
              "summary": "Extract items from text/markdown files.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "self._create_simple_item",
                "match.start",
                "self._create_checkbox_item",
                "self._create_item_from_match",
                "self._extract_innovation_concepts",
                "match.group",
                "self._is_noise_checkbox"
              ],
              "called_by": []
            },
            {
              "name": "_extract_from_json",
              "docstring": "Extract items from JSON files.",
              "line_range": [
                208,
                225
              ],
              "parameters": [
                "self",
                "file_path",
                "content",
                "source_dir",
                "priority"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._extract_from_json:208#method",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._extract_from_json:208"
              ],
              "hash": "bc42f688bb0f4727ac82cdea8662752963d34ff76ebdba153e037ff9bd144f7d",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-comprehensive-index-comprehensiveindexer--extract-from-json",
              "summary": "Extract items from JSON files.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "self._extract_json_tasks",
                "json.loads",
                "logger.warning",
                "self._extract_json_ideas",
                "self._extract_json_array",
                "self._extract_json_sessions",
                "isinstance"
              ],
              "called_by": []
            },
            {
              "name": "_create_item_from_match",
              "docstring": "Create ProjectItem from regex match.",
              "line_range": [
                227,
                249
              ],
              "parameters": [
                "self",
                "match",
                "content",
                "file_path",
                "item_type",
                "source_dir",
                "priority"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._create_item_from_match:227#method",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._create_item_from_match:227"
              ],
              "hash": "27a321c5f8fc3284c4875630e2eb993e1cf04a0a0cb576787b779d684b185715",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-comprehensive-index-comprehensiveindexer--create-item-from-match",
              "summary": "Create ProjectItem from regex match.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "self._estimate_effort",
                "ProjectItem",
                "match.start",
                "self._extract_context",
                "self._detect_priority",
                "self._detect_category",
                "datetime.now",
                "self._assess_strategic_value",
                "match.group",
                "self._detect_status",
                "self._extract_tags",
                "title.strip",
                "str"
              ],
              "called_by": []
            },
            {
              "name": "_create_checkbox_item",
              "docstring": "Create ProjectItem from checkbox match.",
              "line_range": [
                251,
                274
              ],
              "parameters": [
                "self",
                "match",
                "content",
                "file_path",
                "item_type",
                "source_dir",
                "priority"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._create_checkbox_item:251#method",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._create_checkbox_item:251"
              ],
              "hash": "3ee01ba282d0c1e9695c549bcb4ca8aa9bd3f9e9510e978c196c79abec25f21d",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-comprehensive-index-comprehensiveindexer--create-checkbox-item",
              "summary": "Create ProjectItem from checkbox match.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "self._estimate_effort",
                "ProjectItem",
                "match.start",
                "self._extract_context",
                "self._detect_priority",
                "self._detect_category",
                "datetime.now",
                "self._assess_strategic_value",
                "match.group",
                "self._extract_tags",
                "str"
              ],
              "called_by": []
            },
            {
              "name": "_create_simple_item",
              "docstring": "Create simple ProjectItem.",
              "line_range": [
                276,
                297
              ],
              "parameters": [
                "self",
                "title",
                "content",
                "file_path",
                "item_type",
                "source_dir",
                "priority",
                "position"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._create_simple_item:276#method",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._create_simple_item:276"
              ],
              "hash": "a50ef4dcb299f7ab2eeb31e0a88e68efe7b11a5e02a4fd7aa3b36ca3c1c1d431",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-comprehensive-index-comprehensiveindexer--create-simple-item",
              "summary": "Create simple ProjectItem.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "ProjectItem",
                "self._extract_context",
                "datetime.now",
                "title.strip",
                "str"
              ],
              "called_by": []
            },
            {
              "name": "_detect_status",
              "docstring": "Detect item status from surrounding content.",
              "line_range": [
                299,
                308
              ],
              "parameters": [
                "self",
                "content",
                "position"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._detect_status:299#method",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._detect_status:299"
              ],
              "hash": "7adfd7189a62380a6167b7a0ea9c6d1d858b8fffffd1a9157b5c294372967945",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-comprehensive-index-comprehensiveindexer--detect-status",
              "summary": "Detect item status from surrounding content.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "max"
              ],
              "called_by": []
            },
            {
              "name": "_detect_priority",
              "docstring": "Detect item priority from surrounding content.",
              "line_range": [
                310,
                319
              ],
              "parameters": [
                "self",
                "content",
                "position",
                "default"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._detect_priority:310#method",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._detect_priority:310"
              ],
              "hash": "745aa1901c16526c097849785a906d94387abd7db61a22354ef7272584c042e7",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-comprehensive-index-comprehensiveindexer--detect-priority",
              "summary": "Detect item priority from surrounding content.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "max"
              ],
              "called_by": []
            },
            {
              "name": "_assess_strategic_value",
              "docstring": "Assess strategic value of item.",
              "line_range": [
                321,
                330
              ],
              "parameters": [
                "self",
                "title",
                "content"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._assess_strategic_value:321#method",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._assess_strategic_value:321"
              ],
              "hash": "3b048e4373a490091dbea4d3e639a0b9db8651818be6be9c100afb348a1609a4",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-comprehensive-index-comprehensiveindexer--assess-strategic-value",
              "summary": "Assess strategic value of item.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [],
              "called_by": []
            },
            {
              "name": "_extract_context",
              "docstring": "Extract context around position.",
              "line_range": [
                332,
                336
              ],
              "parameters": [
                "self",
                "content",
                "position",
                "length"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._extract_context:332#method",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._extract_context:332"
              ],
              "hash": "b23c3036049d645b934bff8c98808b478a92833ed5a012e978fd0ba2f04a10e6",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-comprehensive-index-comprehensiveindexer--extract-context",
              "summary": "Extract context around position.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "min",
                "max",
                "len"
              ],
              "called_by": []
            },
            {
              "name": "_detect_category",
              "docstring": "Detect item category.",
              "line_range": [
                338,
                351
              ],
              "parameters": [
                "self",
                "title",
                "content"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._detect_category:338#method",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._detect_category:338"
              ],
              "hash": "a2c71e7d75b0d9f3900aff84960082d7bbed38951eab9aee399391d9d9a93088",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-comprehensive-index-comprehensiveindexer--detect-category",
              "summary": "Detect item category.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "title.lower",
                "any"
              ],
              "called_by": []
            },
            {
              "name": "_estimate_effort",
              "docstring": "Estimate effort required.",
              "line_range": [
                353,
                362
              ],
              "parameters": [
                "self",
                "title",
                "content"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._estimate_effort:353#method",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._estimate_effort:353"
              ],
              "hash": "406fcf15b12f4bd6dbc252ee0acc9ac1c720db2926e758d81c1007e2633af7f2",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-comprehensive-index-comprehensiveindexer--estimate-effort",
              "summary": "Estimate effort required.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "any"
              ],
              "called_by": []
            },
            {
              "name": "_extract_tags",
              "docstring": "Extract relevant tags.",
              "line_range": [
                364,
                378
              ],
              "parameters": [
                "self",
                "title",
                "content",
                "source_dir"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._extract_tags:364#method",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._extract_tags:364"
              ],
              "hash": "05d0983b5c3e2fd919e0406f0db8c1067f8d678822c0ea2c719cc689a547407a",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-comprehensive-index-comprehensiveindexer--extract-tags",
              "summary": "Extract relevant tags.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "title.lower",
                "source_dir.replace",
                "tags.append"
              ],
              "called_by": []
            },
            {
              "name": "_is_noise_checkbox",
              "docstring": "Check if checkbox is noise (navigation, etc).",
              "line_range": [
                380,
                384
              ],
              "parameters": [
                "self",
                "text"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._is_noise_checkbox:380#method",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._is_noise_checkbox:380"
              ],
              "hash": "837951a838c6df07ca8adf3aa9d73dcd60e4a7edaa30335656e8728f8153d6d1",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-comprehensive-index-comprehensiveindexer--is-noise-checkbox",
              "summary": "Check if checkbox is noise (navigation, etc).",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "any",
                "text.lower",
                "text.strip",
                "len"
              ],
              "called_by": []
            },
            {
              "name": "_parse_json_files",
              "docstring": "Parse structured JSON files for existing data.",
              "line_range": [
                386,
                402
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._parse_json_files:386#method",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._parse_json_files:386"
              ],
              "hash": "5b1602914d1d09bf0bb965df5228cdba765450c7c3571cb8990690e5997d09e1",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-comprehensive-index-comprehensiveindexer--parse-json-files",
              "summary": "Parse structured JSON files for existing data.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "file_path.exists",
                "self._process_structured_json",
                "json.load",
                "logger.error",
                "open"
              ],
              "called_by": []
            },
            {
              "name": "_process_structured_json",
              "docstring": "Process structured JSON data.",
              "line_range": [
                404,
                419
              ],
              "parameters": [
                "self",
                "data",
                "file_path"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._process_structured_json:404#method",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._process_structured_json:404"
              ],
              "hash": "4ef096a1511d963d35cea3812f6ac45aaffebcfbd34e75a2a94ff79c700870a9",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-comprehensive-index-comprehensiveindexer--process-structured-json",
              "summary": "Process structured JSON data.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "self._add_json_item",
                "isinstance"
              ],
              "called_by": []
            },
            {
              "name": "_add_json_item",
              "docstring": "Add item from JSON structure.",
              "line_range": [
                421,
                441
              ],
              "parameters": [
                "self",
                "item",
                "file_path",
                "item_type"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._add_json_item:421#method",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._add_json_item:421"
              ],
              "hash": "7a91490d143bb796cb28cabd29043840087afddc8f6861a804c4ebfff9f3b44c",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-comprehensive-index-comprehensiveindexer--add-json-item",
              "summary": "Add item from JSON structure.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "len",
                "ProjectItem",
                "item.get",
                "datetime.now",
                "self._assess_json_strategic_value",
                "str"
              ],
              "called_by": []
            },
            {
              "name": "_assess_json_strategic_value",
              "docstring": "Assess strategic value from JSON item.",
              "line_range": [
                443,
                450
              ],
              "parameters": [
                "self",
                "item"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._assess_json_strategic_value:443#method",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._assess_json_strategic_value:443"
              ],
              "hash": "a82e1ef2ba958914f34895784d3de319a521729c93bf9c1d6ca83e256668e20e",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-comprehensive-index-comprehensiveindexer--assess-json-strategic-value",
              "summary": "Assess strategic value from JSON item.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "item.get"
              ],
              "called_by": []
            },
            {
              "name": "_extract_innovation_concepts",
              "docstring": "Extract innovation concepts from content.",
              "line_range": [
                452,
                482
              ],
              "parameters": [
                "self",
                "file_path",
                "content",
                "source_dir",
                "priority"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._extract_innovation_concepts:452#method",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._extract_innovation_concepts:452"
              ],
              "hash": "c29a0ebf8eeb43135409fcf25431f1967c3a3875bbb4f17f4ff482f212b4e9ea",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-comprehensive-index-comprehensiveindexer--extract-innovation-concepts",
              "summary": "Extract innovation concepts from content.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "source_dir.replace",
                "len",
                "enumerate",
                "line.strip",
                "ProjectItem",
                "content.find",
                "self._extract_context",
                "datetime.now",
                "content.split",
                "innovation_lines.append",
                "str"
              ],
              "called_by": []
            },
            {
              "name": "_enhance_items",
              "docstring": "Post-process items to enhance metadata and find relationships.",
              "line_range": [
                484,
                501
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._enhance_items:484#method",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._enhance_items:484"
              ],
              "hash": "fa04535a5c84915588ef8aa27f31c777f698d05007d26802022d573abb2e69b2",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-comprehensive-index-comprehensiveindexer--enhance-items",
              "summary": "Post-process items to enhance metadata and find relationships.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "re.sub",
                "logger.info",
                "self._find_related_items"
              ],
              "called_by": []
            },
            {
              "name": "_find_related_items",
              "docstring": "Find related items based on content similarity.",
              "line_range": [
                503,
                517
              ],
              "parameters": [
                "self",
                "item",
                "id_map",
                "title_map"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._find_related_items:503#method",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._find_related_items:503"
              ],
              "hash": "cae016ba2afcf0df55bd3ae9f17fab8a1d1bccf51eef1966e40d44b9784b4d15",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-comprehensive-index-comprehensiveindexer--find-related-items",
              "summary": "Find related items based on content similarity.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "ref_type.upper",
                "re.findall",
                "related.append"
              ],
              "called_by": []
            },
            {
              "name": "generate_comprehensive_report",
              "docstring": "Generate comprehensive analysis report.",
              "line_range": [
                519,
                561
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer.generate_comprehensive_report:519#method",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer.generate_comprehensive_report:519"
              ],
              "hash": "6aff7e44b21d894b1111f984810405ae889b09e9978c750059a75164234a4b5a",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-comprehensive-index-comprehensiveindexer-generate-comprehensive-report",
              "summary": "Generate comprehensive analysis report.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "len",
                "by_type.get",
                "asdict",
                "by_strategic_value.get",
                "by_priority.get",
                "by_source.get",
                "datetime.now",
                "by_status.get"
              ],
              "called_by": []
            },
            {
              "name": "save_comprehensive_index",
              "docstring": "Save comprehensive index and reports.",
              "line_range": [
                563,
                582
              ],
              "parameters": [
                "self",
                "output_dir"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer.save_comprehensive_index:563#method",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer.save_comprehensive_index:563"
              ],
              "hash": "2fffa99d5bec457abd5cb6fd0b9dd966822cc182b5232faf2f26f6e536ab40b3",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-comprehensive-index-comprehensiveindexer-save-comprehensive-index",
              "summary": "Save comprehensive index and reports.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "logger.info",
                "len",
                "self._generate_analysis_report",
                "json.dump",
                "self.generate_comprehensive_report",
                "f.write",
                "os.makedirs",
                "open"
              ],
              "called_by": []
            },
            {
              "name": "_generate_analysis_report",
              "docstring": "Generate human-readable analysis report.",
              "line_range": [
                584,
                658
              ],
              "parameters": [
                "self",
                "report"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._generate_analysis_report:584#method",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._generate_analysis_report:584"
              ],
              "hash": "76a6130372710973cdbb630508779f6b27bbf155db43a8a7453960040fe174b7",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-comprehensive-index-comprehensiveindexer--generate-analysis-report",
              "summary": "Generate human-readable analysis report.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "self._format_items_list",
                "len",
                "self._format_dict"
              ],
              "called_by": []
            },
            {
              "name": "_format_dict",
              "docstring": "Format dictionary for markdown display.",
              "line_range": [
                660,
                662
              ],
              "parameters": [
                "self",
                "d"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._format_dict:660#method",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._format_dict:660"
              ],
              "hash": "70451ea988a043126feb169f2472419cf18f5ee8d38c409cee42842061d03b06",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-comprehensive-index-comprehensiveindexer--format-dict",
              "summary": "Format dictionary for markdown display.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "d.items",
                "sorted"
              ],
              "called_by": []
            },
            {
              "name": "_format_items_list",
              "docstring": "Format items list for markdown display.",
              "line_range": [
                664,
                677
              ],
              "parameters": [
                "self",
                "items"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._format_items_list:664#method",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._format_items_list:664"
              ],
              "hash": "80bd116e893b23c07cba1b2c747882f39abd04a29a67fd000fe9f66a41d286f8",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-comprehensive-index-comprehensiveindexer--format-items-list",
              "summary": "Format items list for markdown display.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "result.append"
              ],
              "called_by": []
            },
            {
              "name": "_extract_json_tasks",
              "docstring": "Extract tasks from JSON tasks array.",
              "line_range": [
                679,
                684
              ],
              "parameters": [
                "self",
                "tasks_data",
                "file_path",
                "source_dir",
                "priority"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._extract_json_tasks:679#method",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._extract_json_tasks:679"
              ],
              "hash": "816a1ecb06903eddf24062fccaeb2e0fdeaa866fb9ed748746af78dc7f3a694e",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-comprehensive-index-comprehensiveindexer--extract-json-tasks",
              "summary": "Extract tasks from JSON tasks array.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "self._add_json_item",
                "isinstance"
              ],
              "called_by": []
            },
            {
              "name": "_extract_json_ideas",
              "docstring": "Extract ideas from JSON ideas array.",
              "line_range": [
                686,
                691
              ],
              "parameters": [
                "self",
                "ideas_data",
                "file_path",
                "source_dir",
                "priority"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._extract_json_ideas:686#method",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._extract_json_ideas:686"
              ],
              "hash": "6cbcd8020e9ebbbfc3b038f0ff21ec14a27a0a7c2549c70dd08b48fa56738e0f",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-comprehensive-index-comprehensiveindexer--extract-json-ideas",
              "summary": "Extract ideas from JSON ideas array.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "self._add_json_item",
                "isinstance"
              ],
              "called_by": []
            },
            {
              "name": "_extract_json_sessions",
              "docstring": "Extract sessions from JSON sessions array.",
              "line_range": [
                693,
                698
              ],
              "parameters": [
                "self",
                "sessions_data",
                "file_path",
                "source_dir",
                "priority"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._extract_json_sessions:693#method",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._extract_json_sessions:693"
              ],
              "hash": "c0605904fb20097e2a7f9622779d082657dd3d027dba0f257adee929b1ba0e11",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-comprehensive-index-comprehensiveindexer--extract-json-sessions",
              "summary": "Extract sessions from JSON sessions array.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "self._add_json_item",
                "isinstance"
              ],
              "called_by": []
            },
            {
              "name": "_extract_json_array",
              "docstring": "Extract items from JSON array.",
              "line_range": [
                700,
                711
              ],
              "parameters": [
                "self",
                "array_data",
                "file_path",
                "source_dir",
                "priority"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._extract_json_array:700#method",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._extract_json_array:700"
              ],
              "hash": "be2abee13ac65ba171202df0b8a8e72a65d48f34d4f43da514907547b075a9a1",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-comprehensive-index-comprehensiveindexer--extract-json-array",
              "summary": "Extract items from JSON array.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "self._add_json_item",
                "isinstance",
                "str"
              ],
              "called_by": []
            }
          ],
          "bases": [],
          "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer:42#class",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index.ComprehensiveIndexer:42"
          ],
          "hash": "48d230a09e12c2e6240a2b30b2574deddfc6bbb6178fdb4458374261c95b698f",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-comprehensive-index-comprehensiveindexer",
          "summary": "Comprehensive indexer for all project content.",
          "summary_source": "docstring",
          "tags": [
            "class",
            "public"
          ]
        }
      ],
      "callgraph": {
        "__init__": [
          "self._init_patterns",
          "Path"
        ],
        "_init_patterns": [
          "re.compile"
        ],
        "scan_all_directories": [
          "logger.info",
          "self._scan_directory",
          "len",
          "self._parse_json_files",
          "self._scan_root_files",
          "self._enhance_items"
        ],
        "_scan_directory": [
          "logger.info",
          "file_path.is_file",
          "logger.warning",
          "dir_path.exists",
          "dir_path.glob",
          "self._should_scan_file",
          "self._scan_file"
        ],
        "_scan_root_files": [
          "file_path.is_file",
          "self._should_scan_file",
          "self._scan_file"
        ],
        "_should_scan_file": [],
        "_scan_file": [
          "f.read",
          "self._extract_from_text",
          "self._extract_from_json",
          "logger.error",
          "open"
        ],
        "_extract_from_text": [
          "self._create_simple_item",
          "match.start",
          "self._create_checkbox_item",
          "self._create_item_from_match",
          "self._extract_innovation_concepts",
          "match.group",
          "self._is_noise_checkbox"
        ],
        "_extract_from_json": [
          "self._extract_json_tasks",
          "json.loads",
          "logger.warning",
          "self._extract_json_ideas",
          "self._extract_json_array",
          "self._extract_json_sessions",
          "isinstance"
        ],
        "_create_item_from_match": [
          "self._estimate_effort",
          "ProjectItem",
          "match.start",
          "self._extract_context",
          "self._detect_priority",
          "self._detect_category",
          "datetime.now",
          "self._assess_strategic_value",
          "match.group",
          "self._detect_status",
          "self._extract_tags",
          "title.strip",
          "str"
        ],
        "_create_checkbox_item": [
          "self._estimate_effort",
          "ProjectItem",
          "match.start",
          "self._extract_context",
          "self._detect_priority",
          "self._detect_category",
          "datetime.now",
          "self._assess_strategic_value",
          "match.group",
          "self._extract_tags",
          "str"
        ],
        "_create_simple_item": [
          "ProjectItem",
          "self._extract_context",
          "datetime.now",
          "title.strip",
          "str"
        ],
        "_detect_status": [
          "max"
        ],
        "_detect_priority": [
          "max"
        ],
        "_assess_strategic_value": [],
        "_extract_context": [
          "min",
          "max",
          "len"
        ],
        "_detect_category": [
          "title.lower",
          "any"
        ],
        "_estimate_effort": [
          "any"
        ],
        "_extract_tags": [
          "title.lower",
          "source_dir.replace",
          "tags.append"
        ],
        "_is_noise_checkbox": [
          "any",
          "text.lower",
          "text.strip",
          "len"
        ],
        "_parse_json_files": [
          "file_path.exists",
          "self._process_structured_json",
          "json.load",
          "logger.error",
          "open"
        ],
        "_process_structured_json": [
          "self._add_json_item",
          "isinstance"
        ],
        "_add_json_item": [
          "len",
          "ProjectItem",
          "item.get",
          "datetime.now",
          "self._assess_json_strategic_value",
          "str"
        ],
        "_assess_json_strategic_value": [
          "item.get"
        ],
        "_extract_innovation_concepts": [
          "source_dir.replace",
          "len",
          "enumerate",
          "line.strip",
          "ProjectItem",
          "content.find",
          "self._extract_context",
          "datetime.now",
          "content.split",
          "innovation_lines.append",
          "str"
        ],
        "_enhance_items": [
          "re.sub",
          "logger.info",
          "self._find_related_items"
        ],
        "_find_related_items": [
          "ref_type.upper",
          "re.findall",
          "related.append"
        ],
        "generate_comprehensive_report": [
          "len",
          "by_type.get",
          "asdict",
          "by_strategic_value.get",
          "by_priority.get",
          "by_source.get",
          "datetime.now",
          "by_status.get"
        ],
        "save_comprehensive_index": [
          "logger.info",
          "len",
          "self._generate_analysis_report",
          "json.dump",
          "self.generate_comprehensive_report",
          "f.write",
          "os.makedirs",
          "open"
        ],
        "_generate_analysis_report": [
          "self._format_items_list",
          "len",
          "self._format_dict"
        ],
        "_format_dict": [
          "d.items",
          "sorted"
        ],
        "_format_items_list": [
          "result.append"
        ],
        "_extract_json_tasks": [
          "self._add_json_item",
          "isinstance"
        ],
        "_extract_json_ideas": [
          "self._add_json_item",
          "isinstance"
        ],
        "_extract_json_sessions": [
          "self._add_json_item",
          "isinstance"
        ],
        "_extract_json_array": [
          "self._add_json_item",
          "isinstance",
          "str"
        ],
        "main": [
          "logger.info",
          "len",
          "by_strategic.get",
          "indexer.save_comprehensive_index",
          "ComprehensiveIndexer",
          "indexer.scan_all_directories",
          "print"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "Set",
        "asdict",
        "dataclass",
        "dataclasses",
        "datetime",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "typing"
      ],
      "hash": "3de71f291650a50e7e3c04fc660a7c31d909a1f929d375ec5324f909c0a81c97",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "scripts.create_comprehensive_index.scripts.create_comprehensive_index#module",
      "uid_components": [
        "scripts",
        "scripts.create_comprehensive_index",
        "scripts.create_comprehensive_index.scripts.create_comprehensive_index"
      ],
      "summary": "Comprehensive Project Index Creator\nScans ALL project directories for tasks, ideas, sessions, and concepts",
      "summary_source": "docstring",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "7faf14ca-9867-4e18-9277-2048cf8e0b4c"
    },
    {
      "module_id": "scripts.github_sync_manager_enhanced",
      "path": "scripts/github_sync_manager_enhanced.py",
      "category": "core",
      "module_doc": "Enhanced GitHub Sync Manager - \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u043b\u0443\u0447\u0448\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0438\u0437 full_project_rollout\n\u0418\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u0443\u0435\u0442: processing results + GitHub API + token management + CLI fallback",
      "functions": [
        {
          "name": "print_info",
          "docstring": "",
          "line_range": [
            25,
            26
          ],
          "parameters": [
            "msg"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced.print_info:25#function",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced.print_info:25"
          ],
          "hash": "14d0a7b4cc50f7215d38fdd61f466d6041c87950025c900ee470e4f637b669a5",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-github-sync-manager-enhanced-print-info",
          "summary": "Function for print info",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "print"
          ],
          "called_by": [
            "create_github_epic_enhanced",
            "__init__",
            "detect_repo_from_git",
            "create_github_discussion_enhanced",
            "create_github_issue_enhanced",
            "run_enhanced_sync",
            "sync_category_enhanced"
          ]
        },
        {
          "name": "print_success",
          "docstring": "",
          "line_range": [
            28,
            29
          ],
          "parameters": [
            "msg"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced.print_success:28#function",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced.print_success:28"
          ],
          "hash": "a6c70b7d361c8990f3b2e016038adc133b1504d6f794277e58384bfef1203981",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-github-sync-manager-enhanced-print-success",
          "summary": "Function for print success",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "print"
          ],
          "called_by": [
            "create_github_epic_enhanced",
            "main",
            "validate_before_sync",
            "create_github_issue_enhanced",
            "run_enhanced_sync"
          ]
        },
        {
          "name": "print_warning",
          "docstring": "",
          "line_range": [
            31,
            32
          ],
          "parameters": [
            "msg"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced.print_warning:31#function",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced.print_warning:31"
          ],
          "hash": "d79803354ae7d7aa43992934af4bd4e64a8052f2e0c4187e9e0539631e794a48",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-github-sync-manager-enhanced-print-warning",
          "summary": "Function for print warning",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "print"
          ],
          "called_by": [
            "get_github_token",
            "_api_request_direct",
            "detect_repo_from_git",
            "_api_request_via_cli",
            "create_github_discussion_enhanced",
            "sync_category_enhanced"
          ]
        },
        {
          "name": "print_error",
          "docstring": "",
          "line_range": [
            34,
            35
          ],
          "parameters": [
            "msg"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced.print_error:34#function",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced.print_error:34"
          ],
          "hash": "24e97c2d8259ec49bfeff7329a80cccc1c4cba3061b45475cd7eb03b2eb8f625",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-github-sync-manager-enhanced-print-error",
          "summary": "Function for print error",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "print"
          ],
          "called_by": [
            "main",
            "api_request",
            "_api_request_direct",
            "_api_request_via_cli",
            "validate_before_sync",
            "sync_category_enhanced"
          ]
        },
        {
          "name": "print_step",
          "docstring": "",
          "line_range": [
            37,
            38
          ],
          "parameters": [
            "step",
            "total",
            "msg"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced.print_step:37#function",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced.print_step:37"
          ],
          "hash": "18ba28c320176babe9948d1dda6af979b181ca0d91ab9c9ed9c309006577b0a8",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-github-sync-manager-enhanced-print-step",
          "summary": "Function for print step",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "print"
          ],
          "called_by": [
            "run_enhanced_sync",
            "validate_before_sync"
          ]
        },
        {
          "name": "main",
          "docstring": "Enhanced CLI interface",
          "line_range": [
            620,
            655
          ],
          "parameters": [],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced.main:620#function",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced.main:620"
          ],
          "hash": "8867e1872506be22632483739e8d48c74ca0209ac0010c127da5b5c1ab23c0b9",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-github-sync-manager-enhanced-main",
          "summary": "Enhanced CLI interface",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "print_success",
            "EnhancedGitHubSyncManager",
            "len",
            "print_error",
            "manager.run_enhanced_sync",
            "parser.add_argument",
            "parser.parse_args",
            "result.get",
            "argparse.ArgumentParser"
          ],
          "called_by": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            43,
            44
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced.__init__:43#function",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced.__init__:43"
          ],
          "hash": "8063a809daa37710bbdacfd7a28f631eca19f103476b7d4918f797630e8c8e9c",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-github-sync-manager-enhanced---init--",
          "summary": "Function for init",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "self.detect_repo_from_git",
            "print_info",
            "Path",
            "GitHubTokenManager",
            "self.load_sync_log"
          ],
          "called_by": []
        },
        {
          "name": "load_env_file",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            46,
            57
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced.load_env_file:46#function",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced.load_env_file:46"
          ],
          "hash": "27205d7a64c1a290be54445376cc4e8addf52f0c39d9d1b6846c92212c5443ba",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-github-sync-manager-enhanced-load-env-file",
          "summary": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "value.strip",
            "line.startswith",
            "line.strip",
            "key.strip",
            "Path",
            "line.split",
            "open",
            "env_file.exists"
          ],
          "called_by": []
        },
        {
          "name": "test_github_token",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0442\u043e\u043a\u0435\u043d\u0430",
          "line_range": [
            59,
            73
          ],
          "parameters": [
            "self",
            "token"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced.test_github_token:59#function",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced.test_github_token:59"
          ],
          "hash": "5d4306cd8a9e9dac3ca31340d03cc3e095cfdd8a2d2c76609b569b6ade91a55c",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-github-sync-manager-enhanced-test-github-token",
          "summary": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0442\u043e\u043a\u0435\u043d\u0430",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "requests.get",
            "response.json"
          ],
          "called_by": []
        },
        {
          "name": "check_gh_cli",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 GitHub CLI",
          "line_range": [
            75,
            82
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced.check_gh_cli:75#function",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced.check_gh_cli:75"
          ],
          "hash": "d6837f2c885559f0876324ede9a689ad561a712e9019c2dd8d302aa0f8d93f64",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-github-sync-manager-enhanced-check-gh-cli",
          "summary": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 GitHub CLI",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "subprocess.run"
          ],
          "called_by": []
        },
        {
          "name": "get_token_from_gh_cli",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 \u0438\u0437 GitHub CLI",
          "line_range": [
            84,
            93
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced.get_token_from_gh_cli:84#function",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced.get_token_from_gh_cli:84"
          ],
          "hash": "dc2c5c8d82769e9df3a3691d9297664845bf16202da8ae18fc5970852e49b74e",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-github-sync-manager-enhanced-get-token-from-gh-cli",
          "summary": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 \u0438\u0437 GitHub CLI",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "subprocess.run"
          ],
          "called_by": []
        },
        {
          "name": "get_github_token",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c GitHub \u0442\u043e\u043a\u0435\u043d \u0441 multiple fallbacks\n\nReturns:\n    (token, method) \u0433\u0434\u0435 method = 'env' | 'cli' | 'none'",
          "line_range": [
            95,
            117
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced.get_github_token:95#function",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced.get_github_token:95"
          ],
          "hash": "88497990aa3891985202b3c54ecbbd5c55c9cfcafad471d03db68707ad4e4f38",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-github-sync-manager-enhanced-get-github-token",
          "summary": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c GitHub \u0442\u043e\u043a\u0435\u043d \u0441 multiple fallbacks\n\nReturns:\n    (token, method) \u0433\u0434\u0435 method = 'env' | 'cli' | 'none'",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "os.getenv",
            "self.test_github_token",
            "self.check_gh_cli",
            "print_warning",
            "self.get_token_from_gh_cli"
          ],
          "called_by": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            122,
            164
          ],
          "parameters": [
            "self",
            "repo_owner",
            "repo_name",
            "dry_run"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced.__init__:122#function",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced.__init__:122"
          ],
          "hash": "617c04e2a1ef3f06ec1c8fb2b83dfd3874ea06eea81b7c0ab00b39a54444f1cc",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-github-sync-manager-enhanced---init--",
          "summary": "Function for init",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "self.detect_repo_from_git",
            "print_info",
            "Path",
            "GitHubTokenManager",
            "self.load_sync_log"
          ],
          "called_by": []
        },
        {
          "name": "detect_repo_from_git",
          "docstring": "\u0410\u0432\u0442\u043e\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 owner/repo \u0438\u0437 git remote",
          "line_range": [
            166,
            198
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced.detect_repo_from_git:166#function",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced.detect_repo_from_git:166"
          ],
          "hash": "fb98e36f5d9d9af5462dd4f9babd5a6337d97d6655af719a1835303c03a4cc5f",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-github-sync-manager-enhanced-detect-repo-from-git",
          "summary": "\u0410\u0432\u0442\u043e\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 owner/repo \u0438\u0437 git remote",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "len",
            "path.split",
            "print_info",
            "url.replace",
            "url.startswith",
            "url.split",
            "print_warning",
            "url.endswith",
            "subprocess.run"
          ],
          "called_by": []
        },
        {
          "name": "load_sync_log",
          "docstring": "Load previous sync results",
          "line_range": [
            200,
            211
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced.load_sync_log:200#function",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced.load_sync_log:200"
          ],
          "hash": "97e0d71d371bca9623e23f101b297f99084324754c06cd1fd97e9852f98e98f2",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-github-sync-manager-enhanced-load-sync-log",
          "summary": "Load previous sync results",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "json.load",
            "open"
          ],
          "called_by": []
        },
        {
          "name": "save_sync_log",
          "docstring": "Save sync log",
          "line_range": [
            213,
            216
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced.save_sync_log:213#function",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced.save_sync_log:213"
          ],
          "hash": "96dc122d99d530b77dd962de8bbbd6c0bae72a2bfdc53f0d45e28e7c42c07369",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-github-sync-manager-enhanced-save-sync-log",
          "summary": "Save sync log",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "json.dump",
            "open"
          ],
          "called_by": []
        },
        {
          "name": "api_request",
          "docstring": "Enhanced API request with CLI fallback",
          "line_range": [
            218,
            231
          ],
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced.api_request:218#function",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced.api_request:218"
          ],
          "hash": "661d311b83ffc175f259f0057173d5e85402b52a3fe40a002ddffcac9db1848c",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-github-sync-manager-enhanced-api-request",
          "summary": "Enhanced API request with CLI fallback",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "self._api_request_via_cli",
            "self._api_request_direct",
            "time.sleep",
            "print_error"
          ],
          "called_by": []
        },
        {
          "name": "_api_request_direct",
          "docstring": "Direct API request",
          "line_range": [
            233,
            261
          ],
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced._api_request_direct:233#function",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced._api_request_direct:233"
          ],
          "hash": "9d8de219f08af882b606cb29cd48a7d7d346087cbfd3b4b4cdba48c578eb0e76",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-github-sync-manager-enhanced--api-request-direct",
          "summary": "Direct API request",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private",
            "public"
          ],
          "calls": [
            "int",
            "response.raise_for_status",
            "print_error",
            "requests.patch",
            "requests.post",
            "response.json",
            "ValueError",
            "requests.get",
            "method.upper",
            "print_warning"
          ],
          "called_by": []
        },
        {
          "name": "_api_request_via_cli",
          "docstring": "API request via GitHub CLI",
          "line_range": [
            263,
            293
          ],
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced._api_request_via_cli:263#function",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced._api_request_via_cli:263"
          ],
          "hash": "7948d36db4c5d43f42dec4841de235b479c08e7affd842ab079be83de441f6b5",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-github-sync-manager-enhanced--api-request-via-cli",
          "summary": "API request via GitHub CLI",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private",
            "public"
          ],
          "calls": [
            "json.dumps",
            "json.loads",
            "print_error",
            "method.upper",
            "print_warning",
            "cmd.extend",
            "subprocess.run"
          ],
          "called_by": []
        },
        {
          "name": "create_github_issue_enhanced",
          "docstring": "Enhanced issue creation (\u0438\u0437 create_github_issues.py)",
          "line_range": [
            295,
            359
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced.create_github_issue_enhanced:295#function",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced.create_github_issue_enhanced:295"
          ],
          "hash": "afcf3b655e830f17273b1c376b1d40ff39b7cf5c5fe2b6b443ce462c46f9f5bd",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-github-sync-manager-enhanced-create-github-issue-enhanced",
          "summary": "Enhanced issue creation (\u0438\u0437 create_github_issues.py)",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "print_success",
            "self.api_request",
            "processing_meta.get",
            "item.get",
            "print_info",
            "self._format_implementation_notes",
            "self._format_acceptance_criteria",
            "labels.append"
          ],
          "called_by": []
        },
        {
          "name": "_format_acceptance_criteria",
          "docstring": "Format acceptance criteria from item metadata",
          "line_range": [
            361,
            380
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced._format_acceptance_criteria:361#function",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced._format_acceptance_criteria:361"
          ],
          "hash": "0c956157fc1e1f5651cc3122d981b4df0892956133cf23b4f82a8d15a7b7c726",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-github-sync-manager-enhanced--format-acceptance-criteria",
          "summary": "Format acceptance criteria from item metadata",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "criteria.append",
            "criteria.extend",
            "item.get"
          ],
          "called_by": []
        },
        {
          "name": "_format_implementation_notes",
          "docstring": "Format implementation notes",
          "line_range": [
            382,
            397
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced._format_implementation_notes:382#function",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced._format_implementation_notes:382"
          ],
          "hash": "b1768e37072085e6c2c81bf1c5abdb025a1e75c0353585e9767a963371ca49fd",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-github-sync-manager-enhanced--format-implementation-notes",
          "summary": "Format implementation notes",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "processing_meta.get",
            "item.get",
            "notes.append"
          ],
          "called_by": []
        },
        {
          "name": "validate_before_sync",
          "docstring": "Enhanced validation",
          "line_range": [
            399,
            434
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced.validate_before_sync:399#function",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced.validate_before_sync:399"
          ],
          "hash": "94e8dc7d321373910a0cd3552dbd6ac9ce8c226630468f89023279374050cec7",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-github-sync-manager-enhanced-validate-before-sync",
          "summary": "Enhanced validation",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "print_success",
            "print_error",
            "self.api_request",
            "file_path.exists",
            "user_info.get",
            "print_step",
            "repo_info.get"
          ],
          "called_by": []
        },
        {
          "name": "run_enhanced_sync",
          "docstring": "Enhanced sync with full project rollout integration",
          "line_range": [
            436,
            494
          ],
          "parameters": [
            "self",
            "categories"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced.run_enhanced_sync:436#function",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced.run_enhanced_sync:436"
          ],
          "hash": "64dd791589163a9bb725da6629d484c11a4f32fa0ca199b19321671d64d07a30",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-github-sync-manager-enhanced-run-enhanced-sync",
          "summary": "Enhanced sync with full project rollout integration",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "print_success",
            "enumerate",
            "result.get",
            "print_info",
            "datetime.now",
            "self.sync_category_enhanced",
            "print",
            "self.save_sync_log",
            "print_step",
            "self.validate_before_sync"
          ],
          "called_by": []
        },
        {
          "name": "sync_category_enhanced",
          "docstring": "Enhanced category sync",
          "line_range": [
            496,
            554
          ],
          "parameters": [
            "self",
            "category"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced.sync_category_enhanced:496#function",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced.sync_category_enhanced:496"
          ],
          "hash": "f543b576f5e24f9a74e29d4decbf28c0280948886cb27f556ee58307ba6da7af",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-github-sync-manager-enhanced-sync-category-enhanced",
          "summary": "Enhanced category sync",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "print_error",
            "self.create_github_epic_enhanced",
            "file_path.exists",
            "item.get",
            "result.get",
            "print_info",
            "json.load",
            "datetime.now",
            "data.get",
            "self.create_github_discussion_enhanced",
            "self.item_already_synced",
            "print_warning",
            "self.create_github_issue_enhanced",
            "open"
          ],
          "called_by": []
        },
        {
          "name": "item_already_synced",
          "docstring": "Check if item was already synced",
          "line_range": [
            556,
            560
          ],
          "parameters": [
            "self",
            "item",
            "category"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced.item_already_synced:556#function",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced.item_already_synced:556"
          ],
          "hash": "e8c66112f14870d72461eb03d4f277675cd08de326ad6db9a79876f21149a976",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-github-sync-manager-enhanced-item-already-synced",
          "summary": "Check if item was already synced",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "item.get"
          ],
          "called_by": []
        },
        {
          "name": "create_github_epic_enhanced",
          "docstring": "Enhanced epic creation",
          "line_range": [
            562,
            607
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced.create_github_epic_enhanced:562#function",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced.create_github_epic_enhanced:562"
          ],
          "hash": "33b5a4a728f5ec7b6729dfb3f6da2cc45f76be86adf4c30369e010c71579edd8",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-github-sync-manager-enhanced-create-github-epic-enhanced",
          "summary": "Enhanced epic creation",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "self.api_request",
            "print_success",
            "item.get",
            "print_info"
          ],
          "called_by": []
        },
        {
          "name": "create_github_discussion_enhanced",
          "docstring": "Enhanced discussion creation (placeholder - requires GraphQL)",
          "line_range": [
            609,
            618
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced.create_github_discussion_enhanced:609#function",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced.create_github_discussion_enhanced:609"
          ],
          "hash": "cf88933083291e1dcf0768d399601117d4c6a5a19251dea1cdb8f7ba8b7c755e",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-github-sync-manager-enhanced-create-github-discussion-enhanced",
          "summary": "Enhanced discussion creation (placeholder - requires GraphQL)",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "print_warning",
            "item.get",
            "print_info"
          ],
          "called_by": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": [
            18,
            23
          ],
          "methods": [],
          "bases": [],
          "uid": "scripts.github_sync_manager_enhanced.Colors:18#class",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced.Colors:18"
          ],
          "hash": "d8792eeb7a225947376c101718d32b84225e1d84cc68e05880a7dc1942648a1c",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-github-sync-manager-enhanced-colors",
          "summary": "Class for colors",
          "summary_source": "heuristic",
          "tags": [
            "class",
            "public"
          ]
        },
        {
          "name": "GitHubTokenManager",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 GitHub \u0442\u043e\u043a\u0435\u043d\u0430\u043c\u0438 (\u0438\u0437 setup_github_token.sh)",
          "line_range": [
            40,
            117
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                43,
                44
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.github_sync_manager_enhanced.GitHubTokenManager.__init__:43#method",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.GitHubTokenManager",
                "scripts.github_sync_manager_enhanced.GitHubTokenManager.__init__:43"
              ],
              "hash": "5eab8fcd51d3cd9614a0d391408d2d603386276a12aca2ba96688a7dbac6f04c",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-github-sync-manager-enhanced-githubtokenmanager---init--",
              "summary": "Method for githubtokenmanager. init",
              "summary_source": "heuristic",
              "tags": [
                "method",
                "private",
                "public"
              ],
              "calls": [
                "self.detect_repo_from_git",
                "print_info",
                "Path",
                "GitHubTokenManager",
                "self.load_sync_log"
              ],
              "called_by": []
            },
            {
              "name": "load_env_file",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430",
              "line_range": [
                46,
                57
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.github_sync_manager_enhanced.GitHubTokenManager.load_env_file:46#method",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.GitHubTokenManager",
                "scripts.github_sync_manager_enhanced.GitHubTokenManager.load_env_file:46"
              ],
              "hash": "b9951f3e09960daa04fa4e49a573776cf896ac21bcc0d87319bd83cba2132d87",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-github-sync-manager-enhanced-githubtokenmanager-load-env-file",
              "summary": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "value.strip",
                "line.startswith",
                "line.strip",
                "key.strip",
                "Path",
                "line.split",
                "open",
                "env_file.exists"
              ],
              "called_by": []
            },
            {
              "name": "test_github_token",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0442\u043e\u043a\u0435\u043d\u0430",
              "line_range": [
                59,
                73
              ],
              "parameters": [
                "self",
                "token"
              ],
              "uid": "scripts.github_sync_manager_enhanced.GitHubTokenManager.test_github_token:59#method",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.GitHubTokenManager",
                "scripts.github_sync_manager_enhanced.GitHubTokenManager.test_github_token:59"
              ],
              "hash": "2ce69a4e39eea63774c2436033cc1fb297313044cf82bfac0d0b3bb64a3ebf5d",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-github-sync-manager-enhanced-githubtokenmanager-test-github-token",
              "summary": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0442\u043e\u043a\u0435\u043d\u0430",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "requests.get",
                "response.json"
              ],
              "called_by": []
            },
            {
              "name": "check_gh_cli",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 GitHub CLI",
              "line_range": [
                75,
                82
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.github_sync_manager_enhanced.GitHubTokenManager.check_gh_cli:75#method",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.GitHubTokenManager",
                "scripts.github_sync_manager_enhanced.GitHubTokenManager.check_gh_cli:75"
              ],
              "hash": "243340954a468d567905cf32ca393cf2590d8d136fb753dfd8d9cda181eae6d5",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-github-sync-manager-enhanced-githubtokenmanager-check-gh-cli",
              "summary": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 GitHub CLI",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "subprocess.run"
              ],
              "called_by": []
            },
            {
              "name": "get_token_from_gh_cli",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 \u0438\u0437 GitHub CLI",
              "line_range": [
                84,
                93
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.github_sync_manager_enhanced.GitHubTokenManager.get_token_from_gh_cli:84#method",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.GitHubTokenManager",
                "scripts.github_sync_manager_enhanced.GitHubTokenManager.get_token_from_gh_cli:84"
              ],
              "hash": "e42b5e32454fcdc10c0dd9b3ecc078989b9a9d86ba6b101b951aae9175f5ad9d",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-github-sync-manager-enhanced-githubtokenmanager-get-token-from-gh-cli",
              "summary": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 \u0438\u0437 GitHub CLI",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "subprocess.run"
              ],
              "called_by": []
            },
            {
              "name": "get_github_token",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c GitHub \u0442\u043e\u043a\u0435\u043d \u0441 multiple fallbacks\n\nReturns:\n    (token, method) \u0433\u0434\u0435 method = 'env' | 'cli' | 'none'",
              "line_range": [
                95,
                117
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.github_sync_manager_enhanced.GitHubTokenManager.get_github_token:95#method",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.GitHubTokenManager",
                "scripts.github_sync_manager_enhanced.GitHubTokenManager.get_github_token:95"
              ],
              "hash": "bdd59d1a9d9344bd0d6180c7b051e736338a86eadff29e1d8cb41efd7097e30a",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-github-sync-manager-enhanced-githubtokenmanager-get-github-token",
              "summary": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c GitHub \u0442\u043e\u043a\u0435\u043d \u0441 multiple fallbacks\n\nReturns:\n    (token, method) \u0433\u0434\u0435 method = 'env' | 'cli' | 'none'",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "os.getenv",
                "self.test_github_token",
                "self.check_gh_cli",
                "print_warning",
                "self.get_token_from_gh_cli"
              ],
              "called_by": []
            }
          ],
          "bases": [],
          "uid": "scripts.github_sync_manager_enhanced.GitHubTokenManager:40#class",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced.GitHubTokenManager:40"
          ],
          "hash": "6f8355725dccb91c5553f8e9e1834f3b878fcd0e593cee92e5979a5f7095491f",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-github-sync-manager-enhanced-githubtokenmanager",
          "summary": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 GitHub \u0442\u043e\u043a\u0435\u043d\u0430\u043c\u0438 (\u0438\u0437 setup_github_token.sh)",
          "summary_source": "docstring",
          "tags": [
            "class",
            "public"
          ]
        },
        {
          "name": "EnhancedGitHubSyncManager",
          "docstring": "\u0423\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u044b\u0439 GitHub Sync Manager \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 \u0432\u0441\u0435\u0445 \u043b\u0443\u0447\u0448\u0438\u0445 \u043f\u0440\u0430\u043a\u0442\u0438\u043a",
          "line_range": [
            119,
            618
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                122,
                164
              ],
              "parameters": [
                "self",
                "repo_owner",
                "repo_name",
                "dry_run"
              ],
              "uid": "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.__init__:122#method",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.__init__:122"
              ],
              "hash": "16117d66f37c971b0d4a7ff41278ba10af5080ed4ebd51572332a87bb8a8eb30",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-github-sync-manager-enhanced-enhancedgithubsyncmanager---init--",
              "summary": "Method for enhancedgithubsyncmanager. init",
              "summary_source": "heuristic",
              "tags": [
                "method",
                "private",
                "public"
              ],
              "calls": [
                "self.detect_repo_from_git",
                "print_info",
                "Path",
                "GitHubTokenManager",
                "self.load_sync_log"
              ],
              "called_by": []
            },
            {
              "name": "detect_repo_from_git",
              "docstring": "\u0410\u0432\u0442\u043e\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 owner/repo \u0438\u0437 git remote",
              "line_range": [
                166,
                198
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.detect_repo_from_git:166#method",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.detect_repo_from_git:166"
              ],
              "hash": "e1f680b713922df96da7d0d328aa7ef9e55bcd88e8d44da017aa5383320f3e2c",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-github-sync-manager-enhanced-enhancedgithubsyncmanager-detect-repo-from-git",
              "summary": "\u0410\u0432\u0442\u043e\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 owner/repo \u0438\u0437 git remote",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "len",
                "path.split",
                "print_info",
                "url.replace",
                "url.startswith",
                "url.split",
                "print_warning",
                "url.endswith",
                "subprocess.run"
              ],
              "called_by": []
            },
            {
              "name": "load_sync_log",
              "docstring": "Load previous sync results",
              "line_range": [
                200,
                211
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.load_sync_log:200#method",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.load_sync_log:200"
              ],
              "hash": "69525e58c0f74a247b62fed9f07f733c4904c036f7b8c84781d1168b93ec980e",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-github-sync-manager-enhanced-enhancedgithubsyncmanager-load-sync-log",
              "summary": "Load previous sync results",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "json.load",
                "open"
              ],
              "called_by": []
            },
            {
              "name": "save_sync_log",
              "docstring": "Save sync log",
              "line_range": [
                213,
                216
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.save_sync_log:213#method",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.save_sync_log:213"
              ],
              "hash": "fea7039ce7b1a2ec3d05067417cc727ab69b51493dcf32a3b97b4fc2ef1c9014",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-github-sync-manager-enhanced-enhancedgithubsyncmanager-save-sync-log",
              "summary": "Save sync log",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "json.dump",
                "open"
              ],
              "called_by": []
            },
            {
              "name": "api_request",
              "docstring": "Enhanced API request with CLI fallback",
              "line_range": [
                218,
                231
              ],
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ],
              "uid": "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.api_request:218#method",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.api_request:218"
              ],
              "hash": "f62640e2377d9144eba218e3ef99e6f7a81255f678ff5acb006c18d63741442a",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-github-sync-manager-enhanced-enhancedgithubsyncmanager-api-request",
              "summary": "Enhanced API request with CLI fallback",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "self._api_request_via_cli",
                "self._api_request_direct",
                "time.sleep",
                "print_error"
              ],
              "called_by": []
            },
            {
              "name": "_api_request_direct",
              "docstring": "Direct API request",
              "line_range": [
                233,
                261
              ],
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ],
              "uid": "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager._api_request_direct:233#method",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager._api_request_direct:233"
              ],
              "hash": "7902296db61d33698edd032f63166158ffb0b5f7feb6541bab1edcf27adb598f",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-github-sync-manager-enhanced-enhancedgithubsyncmanager--api-request-direct",
              "summary": "Direct API request",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private",
                "public"
              ],
              "calls": [
                "int",
                "response.raise_for_status",
                "print_error",
                "requests.patch",
                "requests.post",
                "response.json",
                "ValueError",
                "requests.get",
                "method.upper",
                "print_warning"
              ],
              "called_by": []
            },
            {
              "name": "_api_request_via_cli",
              "docstring": "API request via GitHub CLI",
              "line_range": [
                263,
                293
              ],
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ],
              "uid": "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager._api_request_via_cli:263#method",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager._api_request_via_cli:263"
              ],
              "hash": "d6911612f561fc1056fda4280e72ee536efc0a47de6e06f40572c30b488b68ce",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-github-sync-manager-enhanced-enhancedgithubsyncmanager--api-request-via-cli",
              "summary": "API request via GitHub CLI",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private",
                "public"
              ],
              "calls": [
                "json.dumps",
                "json.loads",
                "print_error",
                "method.upper",
                "print_warning",
                "cmd.extend",
                "subprocess.run"
              ],
              "called_by": []
            },
            {
              "name": "create_github_issue_enhanced",
              "docstring": "Enhanced issue creation (\u0438\u0437 create_github_issues.py)",
              "line_range": [
                295,
                359
              ],
              "parameters": [
                "self",
                "item"
              ],
              "uid": "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.create_github_issue_enhanced:295#method",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.create_github_issue_enhanced:295"
              ],
              "hash": "a86aabf85e91410f8e30e20cca7cdf77b8f027ed472f2c531b669d2f91abf54e",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-github-sync-manager-enhanced-enhancedgithubsyncmanager-create-github-issue-enhanced",
              "summary": "Enhanced issue creation (\u0438\u0437 create_github_issues.py)",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "print_success",
                "self.api_request",
                "processing_meta.get",
                "item.get",
                "print_info",
                "self._format_implementation_notes",
                "self._format_acceptance_criteria",
                "labels.append"
              ],
              "called_by": []
            },
            {
              "name": "_format_acceptance_criteria",
              "docstring": "Format acceptance criteria from item metadata",
              "line_range": [
                361,
                380
              ],
              "parameters": [
                "self",
                "item"
              ],
              "uid": "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager._format_acceptance_criteria:361#method",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager._format_acceptance_criteria:361"
              ],
              "hash": "aadd725ea1d9d103a265a493c5b6b8e62e370350c159753f4ce95cf6d6f1eff5",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-github-sync-manager-enhanced-enhancedgithubsyncmanager--format-acceptance-criteria",
              "summary": "Format acceptance criteria from item metadata",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "criteria.append",
                "criteria.extend",
                "item.get"
              ],
              "called_by": []
            },
            {
              "name": "_format_implementation_notes",
              "docstring": "Format implementation notes",
              "line_range": [
                382,
                397
              ],
              "parameters": [
                "self",
                "item"
              ],
              "uid": "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager._format_implementation_notes:382#method",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager._format_implementation_notes:382"
              ],
              "hash": "6f7bcb9e3555a80685dbc8f5eb33d5cb571f9e558ae6f46ad3620d8e13c0d749",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-github-sync-manager-enhanced-enhancedgithubsyncmanager--format-implementation-notes",
              "summary": "Format implementation notes",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "processing_meta.get",
                "item.get",
                "notes.append"
              ],
              "called_by": []
            },
            {
              "name": "validate_before_sync",
              "docstring": "Enhanced validation",
              "line_range": [
                399,
                434
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.validate_before_sync:399#method",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.validate_before_sync:399"
              ],
              "hash": "2742a209a65264118e2d8179da7461d6ff286c2cacafc8052e978c63f80e058b",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-github-sync-manager-enhanced-enhancedgithubsyncmanager-validate-before-sync",
              "summary": "Enhanced validation",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "print_success",
                "print_error",
                "self.api_request",
                "file_path.exists",
                "user_info.get",
                "print_step",
                "repo_info.get"
              ],
              "called_by": []
            },
            {
              "name": "run_enhanced_sync",
              "docstring": "Enhanced sync with full project rollout integration",
              "line_range": [
                436,
                494
              ],
              "parameters": [
                "self",
                "categories"
              ],
              "uid": "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.run_enhanced_sync:436#method",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.run_enhanced_sync:436"
              ],
              "hash": "cdad02f15f346019ff05b5b42ff7ba0126d96de7eaa457e24378b11a93164982",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-github-sync-manager-enhanced-enhancedgithubsyncmanager-run-enhanced-sync",
              "summary": "Enhanced sync with full project rollout integration",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "print_success",
                "enumerate",
                "result.get",
                "print_info",
                "datetime.now",
                "self.sync_category_enhanced",
                "print",
                "self.save_sync_log",
                "print_step",
                "self.validate_before_sync"
              ],
              "called_by": []
            },
            {
              "name": "sync_category_enhanced",
              "docstring": "Enhanced category sync",
              "line_range": [
                496,
                554
              ],
              "parameters": [
                "self",
                "category"
              ],
              "uid": "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.sync_category_enhanced:496#method",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.sync_category_enhanced:496"
              ],
              "hash": "8a347c354fbbf3c57a1219d326f8adf857c8fe2cde6abdbcaf58a03a5fefcb73",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-github-sync-manager-enhanced-enhancedgithubsyncmanager-sync-category-enhanced",
              "summary": "Enhanced category sync",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "print_error",
                "self.create_github_epic_enhanced",
                "file_path.exists",
                "item.get",
                "result.get",
                "print_info",
                "json.load",
                "datetime.now",
                "data.get",
                "self.create_github_discussion_enhanced",
                "self.item_already_synced",
                "print_warning",
                "self.create_github_issue_enhanced",
                "open"
              ],
              "called_by": []
            },
            {
              "name": "item_already_synced",
              "docstring": "Check if item was already synced",
              "line_range": [
                556,
                560
              ],
              "parameters": [
                "self",
                "item",
                "category"
              ],
              "uid": "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.item_already_synced:556#method",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.item_already_synced:556"
              ],
              "hash": "1882e7ec1174fec3066c68164dc298e09dc53ceb03d349d089b1801435840b0f",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-github-sync-manager-enhanced-enhancedgithubsyncmanager-item-already-synced",
              "summary": "Check if item was already synced",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "item.get"
              ],
              "called_by": []
            },
            {
              "name": "create_github_epic_enhanced",
              "docstring": "Enhanced epic creation",
              "line_range": [
                562,
                607
              ],
              "parameters": [
                "self",
                "item"
              ],
              "uid": "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.create_github_epic_enhanced:562#method",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.create_github_epic_enhanced:562"
              ],
              "hash": "09286d0e1e7a9b23bef65e663e7c65c75feeefb2eb8ab17d97c6df2d8dd0040c",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-github-sync-manager-enhanced-enhancedgithubsyncmanager-create-github-epic-enhanced",
              "summary": "Enhanced epic creation",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "self.api_request",
                "print_success",
                "item.get",
                "print_info"
              ],
              "called_by": []
            },
            {
              "name": "create_github_discussion_enhanced",
              "docstring": "Enhanced discussion creation (placeholder - requires GraphQL)",
              "line_range": [
                609,
                618
              ],
              "parameters": [
                "self",
                "item"
              ],
              "uid": "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.create_github_discussion_enhanced:609#method",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.create_github_discussion_enhanced:609"
              ],
              "hash": "98fe714e937e759d32f935128019d42d2fabbaf2c0d90cccd4e91300db20f246",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-github-sync-manager-enhanced-enhancedgithubsyncmanager-create-github-discussion-enhanced",
              "summary": "Enhanced discussion creation (placeholder - requires GraphQL)",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "print_warning",
                "item.get",
                "print_info"
              ],
              "called_by": []
            }
          ],
          "bases": [],
          "uid": "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager:119#class",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager:119"
          ],
          "hash": "d17c20065299e8df72f0d24cb409d6b524cfca8fd31c3c0e8076ef99219abf83",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-github-sync-manager-enhanced-enhancedgithubsyncmanager",
          "summary": "\u0423\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u044b\u0439 GitHub Sync Manager \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 \u0432\u0441\u0435\u0445 \u043b\u0443\u0447\u0448\u0438\u0445 \u043f\u0440\u0430\u043a\u0442\u0438\u043a",
          "summary_source": "docstring",
          "tags": [
            "class",
            "public"
          ]
        }
      ],
      "callgraph": {
        "print_info": [
          "print"
        ],
        "print_success": [
          "print"
        ],
        "print_warning": [
          "print"
        ],
        "print_error": [
          "print"
        ],
        "print_step": [
          "print"
        ],
        "__init__": [
          "self.detect_repo_from_git",
          "print_info",
          "Path",
          "GitHubTokenManager",
          "self.load_sync_log"
        ],
        "load_env_file": [
          "value.strip",
          "line.startswith",
          "line.strip",
          "key.strip",
          "Path",
          "line.split",
          "open",
          "env_file.exists"
        ],
        "test_github_token": [
          "requests.get",
          "response.json"
        ],
        "check_gh_cli": [
          "subprocess.run"
        ],
        "get_token_from_gh_cli": [
          "subprocess.run"
        ],
        "get_github_token": [
          "os.getenv",
          "self.test_github_token",
          "self.check_gh_cli",
          "print_warning",
          "self.get_token_from_gh_cli"
        ],
        "detect_repo_from_git": [
          "len",
          "path.split",
          "print_info",
          "url.replace",
          "url.startswith",
          "url.split",
          "print_warning",
          "url.endswith",
          "subprocess.run"
        ],
        "load_sync_log": [
          "json.load",
          "open"
        ],
        "save_sync_log": [
          "json.dump",
          "open"
        ],
        "api_request": [
          "self._api_request_via_cli",
          "self._api_request_direct",
          "time.sleep",
          "print_error"
        ],
        "_api_request_direct": [
          "int",
          "response.raise_for_status",
          "print_error",
          "requests.patch",
          "requests.post",
          "response.json",
          "ValueError",
          "requests.get",
          "method.upper",
          "print_warning"
        ],
        "_api_request_via_cli": [
          "json.dumps",
          "json.loads",
          "print_error",
          "method.upper",
          "print_warning",
          "cmd.extend",
          "subprocess.run"
        ],
        "create_github_issue_enhanced": [
          "print_success",
          "self.api_request",
          "processing_meta.get",
          "item.get",
          "print_info",
          "self._format_implementation_notes",
          "self._format_acceptance_criteria",
          "labels.append"
        ],
        "_format_acceptance_criteria": [
          "criteria.append",
          "criteria.extend",
          "item.get"
        ],
        "_format_implementation_notes": [
          "processing_meta.get",
          "item.get",
          "notes.append"
        ],
        "validate_before_sync": [
          "print_success",
          "print_error",
          "self.api_request",
          "file_path.exists",
          "user_info.get",
          "print_step",
          "repo_info.get"
        ],
        "run_enhanced_sync": [
          "print_success",
          "enumerate",
          "result.get",
          "print_info",
          "datetime.now",
          "self.sync_category_enhanced",
          "print",
          "self.save_sync_log",
          "print_step",
          "self.validate_before_sync"
        ],
        "sync_category_enhanced": [
          "print_error",
          "self.create_github_epic_enhanced",
          "file_path.exists",
          "item.get",
          "result.get",
          "print_info",
          "json.load",
          "datetime.now",
          "data.get",
          "self.create_github_discussion_enhanced",
          "self.item_already_synced",
          "print_warning",
          "self.create_github_issue_enhanced",
          "open"
        ],
        "item_already_synced": [
          "item.get"
        ],
        "create_github_epic_enhanced": [
          "self.api_request",
          "print_success",
          "item.get",
          "print_info"
        ],
        "create_github_discussion_enhanced": [
          "print_warning",
          "item.get",
          "print_info"
        ],
        "main": [
          "print_success",
          "EnhancedGitHubSyncManager",
          "len",
          "print_error",
          "manager.run_enhanced_sync",
          "parser.add_argument",
          "parser.parse_args",
          "result.get",
          "argparse.ArgumentParser"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "json",
        "os",
        "pathlib",
        "requests",
        "subprocess",
        "sys",
        "time",
        "typing"
      ],
      "hash": "dee5ab49d5c48115c3b9b6df054a1160c44fb7addfa035958aa7db8619301d96",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "scripts.github_sync_manager_enhanced.scripts.github_sync_manager_enhanced#module",
      "uid_components": [
        "scripts",
        "scripts.github_sync_manager_enhanced",
        "scripts.github_sync_manager_enhanced.scripts.github_sync_manager_enhanced"
      ],
      "summary": "Enhanced GitHub Sync Manager - \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u043b\u0443\u0447\u0448\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0438\u0437 full_project_rollout\n\u0418\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u0443\u0435\u0442: processing results + G...",
      "summary_source": "docstring",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "77311e78-5679-46c7-948e-ea77569993d5"
    },
    {
      "module_id": "scripts.deploy_embedded_files",
      "path": "scripts/deploy_embedded_files.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_json",
          "docstring": "",
          "line_range": [
            931,
            941
          ],
          "parameters": [
            "data",
            "schema",
            "base_path"
          ],
          "decorators": [],
          "uid": "scripts.deploy_embedded_files.validate_json:931#function",
          "uid_components": [
            "scripts",
            "scripts.deploy_embedded_files",
            "scripts.deploy_embedded_files.validate_json:931"
          ],
          "hash": "631b9a91e2d01bfc71ee5753c6ec30ca56f04dbe8546f13486c2c9cbeefc197a",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-deploy-embedded-files-validate-json",
          "summary": "Validates json",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "logger.warning",
            "RefResolver",
            "validate",
            "logger.error"
          ],
          "called_by": [
            "deploy_embedded_files"
          ]
        },
        {
          "name": "backup_files",
          "docstring": "",
          "line_range": [
            944,
            950
          ],
          "parameters": [
            "target_dir",
            "backup_root"
          ],
          "decorators": [],
          "uid": "scripts.deploy_embedded_files.backup_files:944#function",
          "uid_components": [
            "scripts",
            "scripts.deploy_embedded_files",
            "scripts.deploy_embedded_files.backup_files:944"
          ],
          "hash": "dd8366118a4b1b53ecfe6575a256765632fe41509dafcdccdb5810f8b138abdf",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-deploy-embedded-files-backup-files",
          "summary": "Function for backup files",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "datetime.now",
            "shutil.copytree",
            "target_dir.exists",
            "logger.info"
          ],
          "called_by": [
            "deploy_embedded_files"
          ]
        },
        {
          "name": "deploy_embedded_files",
          "docstring": "",
          "line_range": [
            953,
            1007
          ],
          "parameters": [],
          "decorators": [],
          "uid": "scripts.deploy_embedded_files.deploy_embedded_files:953#function",
          "uid_components": [
            "scripts",
            "scripts.deploy_embedded_files",
            "scripts.deploy_embedded_files.deploy_embedded_files:953"
          ],
          "hash": "450983531b61566fa2ca91488e1316c1a59932c0f1374a93fe9bb7fed38316ec",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-deploy-embedded-files-deploy-embedded-files",
          "summary": "Function for deploy embedded files",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "logger.info",
            "target_path.open",
            "logger.warning",
            "Path.cwd",
            "target_path.exists",
            "json.dump",
            "f.write",
            "Path",
            "backup_files",
            "logger.error",
            "EMBEDDED_FILES.get",
            "validate_json"
          ],
          "called_by": [
            "main"
          ]
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            1010,
            1011
          ],
          "parameters": [],
          "decorators": [],
          "uid": "scripts.deploy_embedded_files.main:1010#function",
          "uid_components": [
            "scripts",
            "scripts.deploy_embedded_files",
            "scripts.deploy_embedded_files.main:1010"
          ],
          "hash": "be0d4f7ad71467f492f9efe553a9b7de980d0e325b799529adeddf25bbfcf430",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-deploy-embedded-files-main",
          "summary": "Function for main",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "deploy_embedded_files"
          ],
          "called_by": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_json": [
          "logger.warning",
          "RefResolver",
          "validate",
          "logger.error"
        ],
        "backup_files": [
          "datetime.now",
          "shutil.copytree",
          "target_dir.exists",
          "logger.info"
        ],
        "deploy_embedded_files": [
          "logger.info",
          "target_path.open",
          "logger.warning",
          "Path.cwd",
          "target_path.exists",
          "json.dump",
          "f.write",
          "Path",
          "backup_files",
          "logger.error",
          "EMBEDDED_FILES.get",
          "validate_json"
        ],
        "main": [
          "deploy_embedded_files"
        ]
      },
      "dependencies": [
        "Path",
        "RefResolver",
        "ValidationError",
        "datetime",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "shutil",
        "validate"
      ],
      "hash": "965c984b688301f0d0c65fc65cc8c95a878218aec94afab5dca3b3c7f65cea19",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "scripts.deploy_embedded_files.scripts.deploy_embedded_files#module",
      "uid_components": [
        "scripts",
        "scripts.deploy_embedded_files",
        "scripts.deploy_embedded_files.scripts.deploy_embedded_files"
      ],
      "summary": "Module for scripts.deploy embedded files",
      "summary_source": "heuristic",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "e81e6b3d-4c86-4318-8a21-7f144b02c502"
    },
    {
      "module_id": "scripts.fix_hardcoded_usernames",
      "path": "scripts/fix_hardcoded_usernames.py",
      "category": "core",
      "module_doc": "Fix Hardcoded Usernames Script\nAutomatically detects and replaces hardcoded usernames with dynamic values from .env or git config.",
      "functions": [
        {
          "name": "main",
          "docstring": "Main execution function.",
          "line_range": [
            234,
            288
          ],
          "parameters": [],
          "decorators": [],
          "uid": "scripts.fix_hardcoded_usernames.main:234#function",
          "uid_components": [
            "scripts",
            "scripts.fix_hardcoded_usernames",
            "scripts.fix_hardcoded_usernames.main:234"
          ],
          "hash": "1da801b1ecc9a6456b1c7df9b0bc3203979cbf2679c463ac2a752d60b57f20a7",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-fix-hardcoded-usernames-main",
          "summary": "Main execution function.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "logger.info",
            "len",
            "replacements.items",
            "fixer.fix_all_files",
            "parser.add_argument",
            "fixer.scan_files",
            "HardcodeFixer",
            "parser.parse_args",
            "argparse.ArgumentParser",
            "f.write",
            "Path",
            "fixer.generate_env_template",
            "open",
            "results.items",
            "print"
          ],
          "called_by": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            22,
            24
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": [],
          "uid": "scripts.fix_hardcoded_usernames.__init__:22#function",
          "uid_components": [
            "scripts",
            "scripts.fix_hardcoded_usernames",
            "scripts.fix_hardcoded_usernames.__init__:22"
          ],
          "hash": "33030a0e6dcccdcd3567c2835f15259ae9e70b3a7dc4b5863647affbe8fce96d",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-fix-hardcoded-usernames---init--",
          "summary": "Function for init",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "UserInfoDetector",
            "Path"
          ],
          "called_by": []
        },
        {
          "name": "_detect_user_info",
          "docstring": "Detect user info from .env, git config, or environment.",
          "line_range": [
            26,
            62
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.fix_hardcoded_usernames._detect_user_info:26#function",
          "uid_components": [
            "scripts",
            "scripts.fix_hardcoded_usernames",
            "scripts.fix_hardcoded_usernames._detect_user_info:26"
          ],
          "hash": "b2fa098ca7a14d0e6961f53a1b3db498c1b82d8e73f22d5f791d9e28548dd5d4",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-fix-hardcoded-usernames--detect-user-info",
          "summary": "Detect user info from .env, git config, or environment.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "logger.info",
            "env_info.items",
            "user_info.update",
            "self._load_from_environment",
            "self._load_from_env",
            "self._load_from_git",
            "user_info.get",
            "env_vars.items"
          ],
          "called_by": []
        },
        {
          "name": "_load_from_env",
          "docstring": "Load user info from .env file.",
          "line_range": [
            64,
            86
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.fix_hardcoded_usernames._load_from_env:64#function",
          "uid_components": [
            "scripts",
            "scripts.fix_hardcoded_usernames",
            "scripts.fix_hardcoded_usernames._load_from_env:64"
          ],
          "hash": "4a2f5b9c109076768fbd715266b6f690ae29c698bdf37714208d3cc63b22ec87",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-fix-hardcoded-usernames--load-from-env",
          "summary": "Load user info from .env file.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "value.strip",
            "line.startswith",
            "line.strip",
            "key.strip",
            "env_vars.get",
            "env_file.exists",
            "logger.error",
            "open",
            "line.split"
          ],
          "called_by": []
        },
        {
          "name": "_load_from_git",
          "docstring": "Load user info from git config.",
          "line_range": [
            88,
            120
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.fix_hardcoded_usernames._load_from_git:88#function",
          "uid_components": [
            "scripts",
            "scripts.fix_hardcoded_usernames",
            "scripts.fix_hardcoded_usernames._load_from_git:88"
          ],
          "hash": "e4252ea267654874462b7b4460833a01360a8f6ba277e85dc5582d31d9a08c08",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-fix-hardcoded-usernames--load-from-git",
          "summary": "Load user info from git config.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "logger.error",
            "re.search",
            "match.group",
            "subprocess.run"
          ],
          "called_by": []
        },
        {
          "name": "_load_from_environment",
          "docstring": "Load user info from environment variables.",
          "line_range": [
            122,
            128
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.fix_hardcoded_usernames._load_from_environment:122#function",
          "uid_components": [
            "scripts",
            "scripts.fix_hardcoded_usernames",
            "scripts.fix_hardcoded_usernames._load_from_environment:122"
          ],
          "hash": "3937506acab321930ef18e6ffab5aaf2c6794ba3fc1be1a72009c390ff506bc6",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-fix-hardcoded-usernames--load-from-environment",
          "summary": "Load user info from environment variables.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [],
          "called_by": []
        },
        {
          "name": "get_user_info",
          "docstring": "Get detected user information.",
          "line_range": [
            130,
            132
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.fix_hardcoded_usernames.get_user_info:130#function",
          "uid_components": [
            "scripts",
            "scripts.fix_hardcoded_usernames",
            "scripts.fix_hardcoded_usernames.get_user_info:130"
          ],
          "hash": "d163dab41f6294a963e398de9691c3f37e83e8ee0fe7e398a66636d96a14af08",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-fix-hardcoded-usernames-get-user-info",
          "summary": "Get detected user information.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [],
          "called_by": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            138,
            148
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": [],
          "uid": "scripts.fix_hardcoded_usernames.__init__:138#function",
          "uid_components": [
            "scripts",
            "scripts.fix_hardcoded_usernames",
            "scripts.fix_hardcoded_usernames.__init__:138"
          ],
          "hash": "68708c3b3fd979c4f818d3400a7642e8e59a665b88407a5bc34a5f66caa6e153",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-fix-hardcoded-usernames---init--",
          "summary": "Function for init",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "UserInfoDetector",
            "Path"
          ],
          "called_by": []
        },
        {
          "name": "scan_files",
          "docstring": "Scan for files containing hardcoded usernames.",
          "line_range": [
            150,
            172
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.fix_hardcoded_usernames.scan_files:150#function",
          "uid_components": [
            "scripts",
            "scripts.fix_hardcoded_usernames",
            "scripts.fix_hardcoded_usernames.scan_files:150"
          ],
          "hash": "3072b8a15130718b3888e2e916b487ff855322a608ca688d6862cb910e23b028",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-fix-hardcoded-usernames-scan-files",
          "summary": "Scan for files containing hardcoded usernames.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "f.read",
            "logger.warning",
            "any",
            "files_with_hardcode.append",
            "open",
            "content.count",
            "str"
          ],
          "called_by": []
        },
        {
          "name": "fix_file",
          "docstring": "Fix hardcoded usernames in a single file.",
          "line_range": [
            174,
            200
          ],
          "parameters": [
            "self",
            "file_path",
            "dry_run"
          ],
          "decorators": [],
          "uid": "scripts.fix_hardcoded_usernames.fix_file:174#function",
          "uid_components": [
            "scripts",
            "scripts.fix_hardcoded_usernames",
            "scripts.fix_hardcoded_usernames.fix_file:174"
          ],
          "hash": "1a8759ddbc692dd36db022a9bf3da19adf670b2a99072beec2eb126f99b71bf3",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-fix-hardcoded-usernames-fix-file",
          "summary": "Fix hardcoded usernames in a single file.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "logger.info",
            "f.read",
            "content.replace",
            "f.write",
            "logger.error",
            "open",
            "content.count"
          ],
          "called_by": []
        },
        {
          "name": "fix_all_files",
          "docstring": "Fix hardcoded usernames in all project files.",
          "line_range": [
            202,
            214
          ],
          "parameters": [
            "self",
            "dry_run"
          ],
          "decorators": [],
          "uid": "scripts.fix_hardcoded_usernames.fix_all_files:202#function",
          "uid_components": [
            "scripts",
            "scripts.fix_hardcoded_usernames",
            "scripts.fix_hardcoded_usernames.fix_all_files:202"
          ],
          "hash": "dee77dc9bf71077500bac150b532b665ba47163b98cb661345d0c68c553d6cb1",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-fix-hardcoded-usernames-fix-all-files",
          "summary": "Fix hardcoded usernames in all project files.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "logger.info",
            "len",
            "self.scan_files",
            "self.fix_file",
            "str"
          ],
          "called_by": []
        },
        {
          "name": "generate_env_template",
          "docstring": "Generate .env template with required variables.",
          "line_range": [
            216,
            231
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.fix_hardcoded_usernames.generate_env_template:216#function",
          "uid_components": [
            "scripts",
            "scripts.fix_hardcoded_usernames",
            "scripts.fix_hardcoded_usernames.generate_env_template:216"
          ],
          "hash": "568cc4c4fb6d7b198618d28ddafc8b80e41ff0990c25418bdb64e193fd2a950e",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-fix-hardcoded-usernames-generate-env-template",
          "summary": "Generate .env template with required variables.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [],
          "called_by": []
        }
      ],
      "classes": [
        {
          "name": "UserInfoDetector",
          "docstring": "Detect user information from various sources.",
          "line_range": [
            19,
            132
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                22,
                24
              ],
              "parameters": [
                "self",
                "project_root"
              ],
              "uid": "scripts.fix_hardcoded_usernames.UserInfoDetector.__init__:22#method",
              "uid_components": [
                "scripts",
                "scripts.fix_hardcoded_usernames",
                "scripts.fix_hardcoded_usernames.UserInfoDetector",
                "scripts.fix_hardcoded_usernames.UserInfoDetector.__init__:22"
              ],
              "hash": "93f6d756b42c939a636a1e2cad540e8b5f5c95642bf5c1393f029a0712a0fc85",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-fix-hardcoded-usernames-userinfodetector---init--",
              "summary": "Method for userinfodetector. init",
              "summary_source": "heuristic",
              "tags": [
                "method",
                "private",
                "public"
              ],
              "calls": [
                "UserInfoDetector",
                "Path"
              ],
              "called_by": []
            },
            {
              "name": "_detect_user_info",
              "docstring": "Detect user info from .env, git config, or environment.",
              "line_range": [
                26,
                62
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.fix_hardcoded_usernames.UserInfoDetector._detect_user_info:26#method",
              "uid_components": [
                "scripts",
                "scripts.fix_hardcoded_usernames",
                "scripts.fix_hardcoded_usernames.UserInfoDetector",
                "scripts.fix_hardcoded_usernames.UserInfoDetector._detect_user_info:26"
              ],
              "hash": "36d2486359020426e83c130a46e96291fa29031a9f25d09ed95b8a3ebbf75474",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-fix-hardcoded-usernames-userinfodetector--detect-user-info",
              "summary": "Detect user info from .env, git config, or environment.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "logger.info",
                "env_info.items",
                "user_info.update",
                "self._load_from_environment",
                "self._load_from_env",
                "self._load_from_git",
                "user_info.get",
                "env_vars.items"
              ],
              "called_by": []
            },
            {
              "name": "_load_from_env",
              "docstring": "Load user info from .env file.",
              "line_range": [
                64,
                86
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.fix_hardcoded_usernames.UserInfoDetector._load_from_env:64#method",
              "uid_components": [
                "scripts",
                "scripts.fix_hardcoded_usernames",
                "scripts.fix_hardcoded_usernames.UserInfoDetector",
                "scripts.fix_hardcoded_usernames.UserInfoDetector._load_from_env:64"
              ],
              "hash": "55a0aa54590c20d3cedc139153a6edc508cd874996f8f84a6c6f520af7ce8619",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-fix-hardcoded-usernames-userinfodetector--load-from-env",
              "summary": "Load user info from .env file.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "value.strip",
                "line.startswith",
                "line.strip",
                "key.strip",
                "env_vars.get",
                "env_file.exists",
                "logger.error",
                "open",
                "line.split"
              ],
              "called_by": []
            },
            {
              "name": "_load_from_git",
              "docstring": "Load user info from git config.",
              "line_range": [
                88,
                120
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.fix_hardcoded_usernames.UserInfoDetector._load_from_git:88#method",
              "uid_components": [
                "scripts",
                "scripts.fix_hardcoded_usernames",
                "scripts.fix_hardcoded_usernames.UserInfoDetector",
                "scripts.fix_hardcoded_usernames.UserInfoDetector._load_from_git:88"
              ],
              "hash": "afbe90f301b3475b6c6288f21aef2c5e396fd410f1324b8ce2125944ac977fb4",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-fix-hardcoded-usernames-userinfodetector--load-from-git",
              "summary": "Load user info from git config.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "logger.error",
                "re.search",
                "match.group",
                "subprocess.run"
              ],
              "called_by": []
            },
            {
              "name": "_load_from_environment",
              "docstring": "Load user info from environment variables.",
              "line_range": [
                122,
                128
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.fix_hardcoded_usernames.UserInfoDetector._load_from_environment:122#method",
              "uid_components": [
                "scripts",
                "scripts.fix_hardcoded_usernames",
                "scripts.fix_hardcoded_usernames.UserInfoDetector",
                "scripts.fix_hardcoded_usernames.UserInfoDetector._load_from_environment:122"
              ],
              "hash": "a91502c436f2f3fcd00a6f37eba3bed24eab4ca228e84869f51eecd24811aa9e",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-fix-hardcoded-usernames-userinfodetector--load-from-environment",
              "summary": "Load user info from environment variables.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [],
              "called_by": []
            },
            {
              "name": "get_user_info",
              "docstring": "Get detected user information.",
              "line_range": [
                130,
                132
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.fix_hardcoded_usernames.UserInfoDetector.get_user_info:130#method",
              "uid_components": [
                "scripts",
                "scripts.fix_hardcoded_usernames",
                "scripts.fix_hardcoded_usernames.UserInfoDetector",
                "scripts.fix_hardcoded_usernames.UserInfoDetector.get_user_info:130"
              ],
              "hash": "e6c50b40dba6c5b9d3982137540424ef3ec02d8602e32e8a175786aa0519dea4",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-fix-hardcoded-usernames-userinfodetector-get-user-info",
              "summary": "Get detected user information.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [],
              "called_by": []
            }
          ],
          "bases": [],
          "uid": "scripts.fix_hardcoded_usernames.UserInfoDetector:19#class",
          "uid_components": [
            "scripts",
            "scripts.fix_hardcoded_usernames",
            "scripts.fix_hardcoded_usernames.UserInfoDetector:19"
          ],
          "hash": "659135c5173aa8e7da8df054b36ee2ebeb5a92bc7ddcdc36a1aa17f87519f1f2",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-fix-hardcoded-usernames-userinfodetector",
          "summary": "Detect user information from various sources.",
          "summary_source": "docstring",
          "tags": [
            "class",
            "public"
          ]
        },
        {
          "name": "HardcodeFixer",
          "docstring": "Fix hardcoded usernames in project files.",
          "line_range": [
            135,
            231
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                138,
                148
              ],
              "parameters": [
                "self",
                "project_root"
              ],
              "uid": "scripts.fix_hardcoded_usernames.HardcodeFixer.__init__:138#method",
              "uid_components": [
                "scripts",
                "scripts.fix_hardcoded_usernames",
                "scripts.fix_hardcoded_usernames.HardcodeFixer",
                "scripts.fix_hardcoded_usernames.HardcodeFixer.__init__:138"
              ],
              "hash": "7d183841459aa6257d416f8e19b73ad10b133449f1120a48c8433913114b8c24",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-fix-hardcoded-usernames-hardcodefixer---init--",
              "summary": "Method for hardcodefixer. init",
              "summary_source": "heuristic",
              "tags": [
                "method",
                "private",
                "public"
              ],
              "calls": [
                "UserInfoDetector",
                "Path"
              ],
              "called_by": []
            },
            {
              "name": "scan_files",
              "docstring": "Scan for files containing hardcoded usernames.",
              "line_range": [
                150,
                172
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.fix_hardcoded_usernames.HardcodeFixer.scan_files:150#method",
              "uid_components": [
                "scripts",
                "scripts.fix_hardcoded_usernames",
                "scripts.fix_hardcoded_usernames.HardcodeFixer",
                "scripts.fix_hardcoded_usernames.HardcodeFixer.scan_files:150"
              ],
              "hash": "779c247595b470545e891c3783d5bc6872e1e4c2c8ca86ec4f73ca4dc8b1a1f8",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-fix-hardcoded-usernames-hardcodefixer-scan-files",
              "summary": "Scan for files containing hardcoded usernames.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "f.read",
                "logger.warning",
                "any",
                "files_with_hardcode.append",
                "open",
                "content.count",
                "str"
              ],
              "called_by": []
            },
            {
              "name": "fix_file",
              "docstring": "Fix hardcoded usernames in a single file.",
              "line_range": [
                174,
                200
              ],
              "parameters": [
                "self",
                "file_path",
                "dry_run"
              ],
              "uid": "scripts.fix_hardcoded_usernames.HardcodeFixer.fix_file:174#method",
              "uid_components": [
                "scripts",
                "scripts.fix_hardcoded_usernames",
                "scripts.fix_hardcoded_usernames.HardcodeFixer",
                "scripts.fix_hardcoded_usernames.HardcodeFixer.fix_file:174"
              ],
              "hash": "7866e4450d49eb05427fcf458ba10a1db40a0f63f1ddc934454fbcea56e25148",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-fix-hardcoded-usernames-hardcodefixer-fix-file",
              "summary": "Fix hardcoded usernames in a single file.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "logger.info",
                "f.read",
                "content.replace",
                "f.write",
                "logger.error",
                "open",
                "content.count"
              ],
              "called_by": []
            },
            {
              "name": "fix_all_files",
              "docstring": "Fix hardcoded usernames in all project files.",
              "line_range": [
                202,
                214
              ],
              "parameters": [
                "self",
                "dry_run"
              ],
              "uid": "scripts.fix_hardcoded_usernames.HardcodeFixer.fix_all_files:202#method",
              "uid_components": [
                "scripts",
                "scripts.fix_hardcoded_usernames",
                "scripts.fix_hardcoded_usernames.HardcodeFixer",
                "scripts.fix_hardcoded_usernames.HardcodeFixer.fix_all_files:202"
              ],
              "hash": "50896427cb94b928cd48e3449178db2cd1bf4193b6492f5da9369b99cd1480c7",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-fix-hardcoded-usernames-hardcodefixer-fix-all-files",
              "summary": "Fix hardcoded usernames in all project files.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "logger.info",
                "len",
                "self.scan_files",
                "self.fix_file",
                "str"
              ],
              "called_by": []
            },
            {
              "name": "generate_env_template",
              "docstring": "Generate .env template with required variables.",
              "line_range": [
                216,
                231
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.fix_hardcoded_usernames.HardcodeFixer.generate_env_template:216#method",
              "uid_components": [
                "scripts",
                "scripts.fix_hardcoded_usernames",
                "scripts.fix_hardcoded_usernames.HardcodeFixer",
                "scripts.fix_hardcoded_usernames.HardcodeFixer.generate_env_template:216"
              ],
              "hash": "80875a689c805a2947c32c4f54b5a551e74682beb21db614aec5ae58af61dc9b",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-fix-hardcoded-usernames-hardcodefixer-generate-env-template",
              "summary": "Generate .env template with required variables.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [],
              "called_by": []
            }
          ],
          "bases": [],
          "uid": "scripts.fix_hardcoded_usernames.HardcodeFixer:135#class",
          "uid_components": [
            "scripts",
            "scripts.fix_hardcoded_usernames",
            "scripts.fix_hardcoded_usernames.HardcodeFixer:135"
          ],
          "hash": "86af093eb895a1c23fcac936a1a138cef3eea1e76b818d9916b036c708de592c",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-fix-hardcoded-usernames-hardcodefixer",
          "summary": "Fix hardcoded usernames in project files.",
          "summary_source": "docstring",
          "tags": [
            "class",
            "public"
          ]
        }
      ],
      "callgraph": {
        "__init__": [
          "UserInfoDetector",
          "Path"
        ],
        "_detect_user_info": [
          "logger.info",
          "env_info.items",
          "user_info.update",
          "self._load_from_environment",
          "self._load_from_env",
          "self._load_from_git",
          "user_info.get",
          "env_vars.items"
        ],
        "_load_from_env": [
          "value.strip",
          "line.startswith",
          "line.strip",
          "key.strip",
          "env_vars.get",
          "env_file.exists",
          "logger.error",
          "open",
          "line.split"
        ],
        "_load_from_git": [
          "logger.error",
          "re.search",
          "match.group",
          "subprocess.run"
        ],
        "_load_from_environment": [],
        "get_user_info": [],
        "scan_files": [
          "f.read",
          "logger.warning",
          "any",
          "files_with_hardcode.append",
          "open",
          "content.count",
          "str"
        ],
        "fix_file": [
          "logger.info",
          "f.read",
          "content.replace",
          "f.write",
          "logger.error",
          "open",
          "content.count"
        ],
        "fix_all_files": [
          "logger.info",
          "len",
          "self.scan_files",
          "self.fix_file",
          "str"
        ],
        "generate_env_template": [],
        "main": [
          "logger.info",
          "len",
          "replacements.items",
          "fixer.fix_all_files",
          "parser.add_argument",
          "fixer.scan_files",
          "HardcodeFixer",
          "parser.parse_args",
          "argparse.ArgumentParser",
          "f.write",
          "Path",
          "fixer.generate_env_template",
          "open",
          "results.items",
          "print"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "argparse",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "subprocess",
        "typing"
      ],
      "hash": "04fdd50dde3b144c4c93f598ab0748be398c1287e006924d5a573d5b520395a3",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "scripts.fix_hardcoded_usernames.scripts.fix_hardcoded_usernames#module",
      "uid_components": [
        "scripts",
        "scripts.fix_hardcoded_usernames",
        "scripts.fix_hardcoded_usernames.scripts.fix_hardcoded_usernames"
      ],
      "summary": "Fix Hardcoded Usernames Script\nAutomatically detects and replaces hardcoded usernames with dynamic values from .env o...",
      "summary_source": "docstring",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "706dde2d-da08-472d-bcbe-e73631aea031"
    },
    {
      "module_id": "scripts.create_tasks_index",
      "path": "scripts/create_tasks_index.py",
      "category": "core",
      "module_doc": "Tasks Index Creator\nScans all documentation files and creates comprehensive index of tasks, EPICs, TODOs, and other actionable items.",
      "functions": [
        {
          "name": "main",
          "docstring": "Main execution function.",
          "line_range": [
            469,
            515
          ],
          "parameters": [],
          "decorators": [],
          "uid": "scripts.create_tasks_index.main:469#function",
          "uid_components": [
            "scripts",
            "scripts.create_tasks_index",
            "scripts.create_tasks_index.main:469"
          ],
          "hash": "7fa5e480ae715285b1c3f10d54322008a5486d0d03084842fa82817d18184cd5",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-tasks-index-main",
          "summary": "Main execution function.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "logger.info",
            "len",
            "by_category.get",
            "generator.scan_documentation",
            "generator.generate_index",
            "parser.add_argument",
            "parser.parse_args",
            "argparse.ArgumentParser",
            "sorted",
            "by_status.get",
            "generator.generate_summary_report",
            "by_status.items",
            "generator.save_index",
            "by_category.items",
            "TaskIndexGenerator",
            "print"
          ],
          "called_by": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            42,
            44
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": [],
          "uid": "scripts.create_tasks_index.__init__:42#function",
          "uid_components": [
            "scripts",
            "scripts.create_tasks_index",
            "scripts.create_tasks_index.__init__:42"
          ],
          "hash": "e73306e6d7f7d9a7e1f10ecf377d1d2eab6231541dc8ac7ee92ee867317d57e4",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-tasks-index---init--",
          "summary": "Function for init",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "Path",
            "TaskExtractor"
          ],
          "called_by": []
        },
        {
          "name": "_init_patterns",
          "docstring": "Initialize regex patterns for task extraction.",
          "line_range": [
            46,
            73
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.create_tasks_index._init_patterns:46#function",
          "uid_components": [
            "scripts",
            "scripts.create_tasks_index",
            "scripts.create_tasks_index._init_patterns:46"
          ],
          "hash": "101d74db9144546ec8b97ec38656013e8249c332458e53daa04ef62862cd0908",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-tasks-index--init-patterns",
          "summary": "Initialize regex patterns for task extraction.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "re.compile"
          ],
          "called_by": []
        },
        {
          "name": "extract_from_markdown",
          "docstring": "Extract tasks from markdown file.",
          "line_range": [
            75,
            107
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": [],
          "uid": "scripts.create_tasks_index.extract_from_markdown:75#function",
          "uid_components": [
            "scripts",
            "scripts.create_tasks_index",
            "scripts.create_tasks_index.extract_from_markdown:75"
          ],
          "hash": "832c3464e2ea9bb8b26c129d4f490d718e9ca8249a13e2d2f271dca1d366f687",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-tasks-index-extract-from-markdown",
          "summary": "Extract tasks from markdown file.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "self._extract_status",
            "self._extract_checkboxes",
            "f.read",
            "self._extract_tasks",
            "self._extract_epics",
            "self._extract_priority",
            "tasks.extend",
            "self._extract_todos",
            "logger.error",
            "open",
            "self._extract_date",
            "self._extract_phases"
          ],
          "called_by": []
        },
        {
          "name": "_extract_status",
          "docstring": "Extract document status.",
          "line_range": [
            109,
            120
          ],
          "parameters": [
            "self",
            "content"
          ],
          "decorators": [],
          "uid": "scripts.create_tasks_index._extract_status:109#function",
          "uid_components": [
            "scripts",
            "scripts.create_tasks_index",
            "scripts.create_tasks_index._extract_status:109"
          ],
          "hash": "58b49ca7da90af26a03ed1c4f9b2af7473d17919fd330de1829bb0be7a026085",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-tasks-index--extract-status",
          "summary": "Extract document status.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "match.group"
          ],
          "called_by": []
        },
        {
          "name": "_extract_priority",
          "docstring": "Extract document priority.",
          "line_range": [
            122,
            135
          ],
          "parameters": [
            "self",
            "content"
          ],
          "decorators": [],
          "uid": "scripts.create_tasks_index._extract_priority:122#function",
          "uid_components": [
            "scripts",
            "scripts.create_tasks_index",
            "scripts.create_tasks_index._extract_priority:122"
          ],
          "hash": "b50b3b507420caf0930c140fbd89ef6ba4f585b3de02bfdba7128df63b8c28b2",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-tasks-index--extract-priority",
          "summary": "Extract document priority.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "match.group"
          ],
          "called_by": []
        },
        {
          "name": "_extract_date",
          "docstring": "Extract document date.",
          "line_range": [
            137,
            142
          ],
          "parameters": [
            "self",
            "content"
          ],
          "decorators": [],
          "uid": "scripts.create_tasks_index._extract_date:137#function",
          "uid_components": [
            "scripts",
            "scripts.create_tasks_index",
            "scripts.create_tasks_index._extract_date:137"
          ],
          "hash": "936a30c0d3047016ef704a4c0bd9273a606be38c24c27db1f0d012cee2b7ccc5",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-tasks-index--extract-date",
          "summary": "Extract document date.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "datetime.now",
            "match.group"
          ],
          "called_by": []
        },
        {
          "name": "_extract_epics",
          "docstring": "Extract EPIC items.",
          "line_range": [
            144,
            168
          ],
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": [],
          "uid": "scripts.create_tasks_index._extract_epics:144#function",
          "uid_components": [
            "scripts",
            "scripts.create_tasks_index",
            "scripts.create_tasks_index._extract_epics:144"
          ],
          "hash": "975980e082ea7565328764a21ab625a1e10c88d259bfb69320bf531ff5c0f3c7",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-tasks-index--extract-epics",
          "summary": "Extract EPIC items.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "match.start",
            "Task",
            "self._extract_context",
            "match.end",
            "tasks.append",
            "match.group",
            "str"
          ],
          "called_by": []
        },
        {
          "name": "_extract_tasks",
          "docstring": "Extract explicit task items.",
          "line_range": [
            170,
            194
          ],
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": [],
          "uid": "scripts.create_tasks_index._extract_tasks:170#function",
          "uid_components": [
            "scripts",
            "scripts.create_tasks_index",
            "scripts.create_tasks_index._extract_tasks:170"
          ],
          "hash": "0996c7fce6808b752c9cf81d66206cb6ab2f8279652042311d8d235b68dba78e",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-tasks-index--extract-tasks",
          "summary": "Extract explicit task items.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "match.start",
            "Task",
            "self._extract_context",
            "match.end",
            "tasks.append",
            "match.group",
            "str"
          ],
          "called_by": []
        },
        {
          "name": "_extract_todos",
          "docstring": "Extract TODO items.",
          "line_range": [
            196,
            219
          ],
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": [],
          "uid": "scripts.create_tasks_index._extract_todos:196#function",
          "uid_components": [
            "scripts",
            "scripts.create_tasks_index",
            "scripts.create_tasks_index._extract_todos:196"
          ],
          "hash": "7d563054d8233341a7c7e97610a398f4adb4cb0855c20c1f931599923584f927",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-tasks-index--extract-todos",
          "summary": "Extract TODO items.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "match.start",
            "Task",
            "tasks.append",
            "match.group",
            "str"
          ],
          "called_by": []
        },
        {
          "name": "_extract_phases",
          "docstring": "Extract phase/step items.",
          "line_range": [
            221,
            245
          ],
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": [],
          "uid": "scripts.create_tasks_index._extract_phases:221#function",
          "uid_components": [
            "scripts",
            "scripts.create_tasks_index",
            "scripts.create_tasks_index._extract_phases:221"
          ],
          "hash": "54dd8142dbd354e0296057250d2c3e94f42fa1c4b9ab37ccc377ae0fd02b8744",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-tasks-index--extract-phases",
          "summary": "Extract phase/step items.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "match.start",
            "Task",
            "self._extract_context",
            "match.end",
            "tasks.append",
            "match.group",
            "str"
          ],
          "called_by": []
        },
        {
          "name": "_extract_checkboxes",
          "docstring": "Extract checkbox items as tasks.",
          "line_range": [
            247,
            275
          ],
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": [],
          "uid": "scripts.create_tasks_index._extract_checkboxes:247#function",
          "uid_components": [
            "scripts",
            "scripts.create_tasks_index",
            "scripts.create_tasks_index._extract_checkboxes:247"
          ],
          "hash": "251b28242a59e58b1dee0d37dd5d9f1559911bc1bc62ca99919c852995c0f3f2",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-tasks-index--extract-checkboxes",
          "summary": "Extract checkbox items as tasks.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "match.start",
            "Task",
            "any",
            "match.group",
            "tasks.append",
            "task_title.upper",
            "str"
          ],
          "called_by": []
        },
        {
          "name": "_extract_context",
          "docstring": "Extract surrounding context for a match.",
          "line_range": [
            277,
            286
          ],
          "parameters": [
            "self",
            "content",
            "start",
            "end",
            "context_lines"
          ],
          "decorators": [],
          "uid": "scripts.create_tasks_index._extract_context:277#function",
          "uid_components": [
            "scripts",
            "scripts.create_tasks_index",
            "scripts.create_tasks_index._extract_context:277"
          ],
          "hash": "451861a790f941d9554811b9eeae808cf979ba77685f4b0138c85e75eeb89022",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-tasks-index--extract-context",
          "summary": "Extract surrounding context for a match.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "min",
            "len",
            "context.strip",
            "content.split",
            "max"
          ],
          "called_by": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            292,
            294
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": [],
          "uid": "scripts.create_tasks_index.__init__:292#function",
          "uid_components": [
            "scripts",
            "scripts.create_tasks_index",
            "scripts.create_tasks_index.__init__:292"
          ],
          "hash": "acb0efd27f4cc652fe6a7c6123f829190fedac3f67701b9dc211611037dc191a",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-tasks-index---init--",
          "summary": "Function for init",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "Path",
            "TaskExtractor"
          ],
          "called_by": []
        },
        {
          "name": "scan_documentation",
          "docstring": "Scan all documentation files for tasks.",
          "line_range": [
            296,
            314
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.create_tasks_index.scan_documentation:296#function",
          "uid_components": [
            "scripts",
            "scripts.create_tasks_index",
            "scripts.create_tasks_index.scan_documentation:296"
          ],
          "hash": "f11771913fa296d7b1538e5e509b8cf24b9e63cbc7384d2f6688bc8ac01e27b1",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-tasks-index-scan-documentation",
          "summary": "Scan all documentation files for tasks.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "docs_dir.exists",
            "logger.info",
            "docs_dir.glob",
            "all_tasks.extend"
          ],
          "called_by": []
        },
        {
          "name": "generate_index",
          "docstring": "Generate comprehensive task index.",
          "line_range": [
            316,
            367
          ],
          "parameters": [
            "self",
            "tasks"
          ],
          "decorators": [],
          "uid": "scripts.create_tasks_index.generate_index:316#function",
          "uid_components": [
            "scripts",
            "scripts.create_tasks_index",
            "scripts.create_tasks_index.generate_index:316"
          ],
          "hash": "f5f72cfc024e22c096f45636f933e1cfb83e803acd705688fe3c31755be03048",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-tasks-index-generate-index",
          "summary": "Generate comprehensive task index.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "len",
            "by_file.items",
            "by_priority.items",
            "asdict",
            "datetime.now",
            "by_status.items",
            "by_category.items"
          ],
          "called_by": []
        },
        {
          "name": "generate_summary_report",
          "docstring": "Generate human-readable summary report.",
          "line_range": [
            369,
            446
          ],
          "parameters": [
            "self",
            "index"
          ],
          "decorators": [],
          "uid": "scripts.create_tasks_index.generate_summary_report:369#function",
          "uid_components": [
            "scripts",
            "scripts.create_tasks_index",
            "scripts.create_tasks_index.generate_summary_report:369"
          ],
          "hash": "bf9e9f763a0b22fd3bf35f63f74dbedd2e73f7f5c90c3d04175754e75add33c3",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-tasks-index-generate-summary-report",
          "summary": "Generate human-readable summary report.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "len",
            "sorted",
            "file_categories.items",
            "Path",
            "category.upper",
            "priority.upper",
            "status.upper"
          ],
          "called_by": []
        },
        {
          "name": "save_index",
          "docstring": "Save index and summary to files.",
          "line_range": [
            448,
            466
          ],
          "parameters": [
            "self",
            "index",
            "summary",
            "output_dir"
          ],
          "decorators": [],
          "uid": "scripts.create_tasks_index.save_index:448#function",
          "uid_components": [
            "scripts",
            "scripts.create_tasks_index",
            "scripts.create_tasks_index.save_index:448"
          ],
          "hash": "64e753792fc1b22977f10ea82b23052f4fbf3d901c6a94e812569a4818267e4a",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-tasks-index-save-index",
          "summary": "Save index and summary to files.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "logger.info",
            "output_path.mkdir",
            "json.dump",
            "f.write",
            "Path",
            "open"
          ],
          "called_by": []
        }
      ],
      "classes": [
        {
          "name": "Task",
          "docstring": "Represents a single task or actionable item.",
          "line_range": [
            21,
            36
          ],
          "methods": [],
          "bases": [],
          "uid": "scripts.create_tasks_index.Task:21#class",
          "uid_components": [
            "scripts",
            "scripts.create_tasks_index",
            "scripts.create_tasks_index.Task:21"
          ],
          "hash": "897fc23382e7dc18a1e8e4861ae57b08b61ce502edc0d9366b8f04f5fb4be377",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-tasks-index-task",
          "summary": "Represents a single task or actionable item.",
          "summary_source": "docstring",
          "tags": [
            "class",
            "public"
          ]
        },
        {
          "name": "TaskExtractor",
          "docstring": "Extract tasks from various document formats.",
          "line_range": [
            39,
            286
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                42,
                44
              ],
              "parameters": [
                "self",
                "project_root"
              ],
              "uid": "scripts.create_tasks_index.TaskExtractor.__init__:42#method",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index.TaskExtractor",
                "scripts.create_tasks_index.TaskExtractor.__init__:42"
              ],
              "hash": "546fd5156f9acd2cfcc8fa1a21d90929235b3923c475734069a8fc1b6331f8bc",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-tasks-index-taskextractor---init--",
              "summary": "Method for taskextractor. init",
              "summary_source": "heuristic",
              "tags": [
                "method",
                "private",
                "public"
              ],
              "calls": [
                "Path",
                "TaskExtractor"
              ],
              "called_by": []
            },
            {
              "name": "_init_patterns",
              "docstring": "Initialize regex patterns for task extraction.",
              "line_range": [
                46,
                73
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.create_tasks_index.TaskExtractor._init_patterns:46#method",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index.TaskExtractor",
                "scripts.create_tasks_index.TaskExtractor._init_patterns:46"
              ],
              "hash": "9abdd5c4b445f297e416708337b9add768468788502737a82a3fd771e7b0bf5e",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-tasks-index-taskextractor--init-patterns",
              "summary": "Initialize regex patterns for task extraction.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "re.compile"
              ],
              "called_by": []
            },
            {
              "name": "extract_from_markdown",
              "docstring": "Extract tasks from markdown file.",
              "line_range": [
                75,
                107
              ],
              "parameters": [
                "self",
                "file_path"
              ],
              "uid": "scripts.create_tasks_index.TaskExtractor.extract_from_markdown:75#method",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index.TaskExtractor",
                "scripts.create_tasks_index.TaskExtractor.extract_from_markdown:75"
              ],
              "hash": "7c5d9091bac6fb483a2844b9e9cb35a9f0de409ab8466f2419eb7a912b26a0ed",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-tasks-index-taskextractor-extract-from-markdown",
              "summary": "Extract tasks from markdown file.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "self._extract_status",
                "self._extract_checkboxes",
                "f.read",
                "self._extract_tasks",
                "self._extract_epics",
                "self._extract_priority",
                "tasks.extend",
                "self._extract_todos",
                "logger.error",
                "open",
                "self._extract_date",
                "self._extract_phases"
              ],
              "called_by": []
            },
            {
              "name": "_extract_status",
              "docstring": "Extract document status.",
              "line_range": [
                109,
                120
              ],
              "parameters": [
                "self",
                "content"
              ],
              "uid": "scripts.create_tasks_index.TaskExtractor._extract_status:109#method",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index.TaskExtractor",
                "scripts.create_tasks_index.TaskExtractor._extract_status:109"
              ],
              "hash": "9717d15a166b45d221ef72f105f3cdd288bdb7a214ba698c86c6b03ce2d464ae",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-tasks-index-taskextractor--extract-status",
              "summary": "Extract document status.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "match.group"
              ],
              "called_by": []
            },
            {
              "name": "_extract_priority",
              "docstring": "Extract document priority.",
              "line_range": [
                122,
                135
              ],
              "parameters": [
                "self",
                "content"
              ],
              "uid": "scripts.create_tasks_index.TaskExtractor._extract_priority:122#method",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index.TaskExtractor",
                "scripts.create_tasks_index.TaskExtractor._extract_priority:122"
              ],
              "hash": "49f568988e7911484cac7a5a24496d3444e696c51e7ba63c26ae89ea42331949",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-tasks-index-taskextractor--extract-priority",
              "summary": "Extract document priority.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "match.group"
              ],
              "called_by": []
            },
            {
              "name": "_extract_date",
              "docstring": "Extract document date.",
              "line_range": [
                137,
                142
              ],
              "parameters": [
                "self",
                "content"
              ],
              "uid": "scripts.create_tasks_index.TaskExtractor._extract_date:137#method",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index.TaskExtractor",
                "scripts.create_tasks_index.TaskExtractor._extract_date:137"
              ],
              "hash": "74b5e8839d89000ba9cb2c2e76bf14a9f78034895f7ab6581a9b41c8bd807276",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-tasks-index-taskextractor--extract-date",
              "summary": "Extract document date.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "datetime.now",
                "match.group"
              ],
              "called_by": []
            },
            {
              "name": "_extract_epics",
              "docstring": "Extract EPIC items.",
              "line_range": [
                144,
                168
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ],
              "uid": "scripts.create_tasks_index.TaskExtractor._extract_epics:144#method",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index.TaskExtractor",
                "scripts.create_tasks_index.TaskExtractor._extract_epics:144"
              ],
              "hash": "023e111e9c66bf3ff3773300929080a0419c7b737a1b81bbb237b81f617b2b27",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-tasks-index-taskextractor--extract-epics",
              "summary": "Extract EPIC items.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "match.start",
                "Task",
                "self._extract_context",
                "match.end",
                "tasks.append",
                "match.group",
                "str"
              ],
              "called_by": []
            },
            {
              "name": "_extract_tasks",
              "docstring": "Extract explicit task items.",
              "line_range": [
                170,
                194
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ],
              "uid": "scripts.create_tasks_index.TaskExtractor._extract_tasks:170#method",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index.TaskExtractor",
                "scripts.create_tasks_index.TaskExtractor._extract_tasks:170"
              ],
              "hash": "b0edc41b9b0282593f7bc43405fa4ace015fcb6b48b9c261d6f64397f1620a4e",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-tasks-index-taskextractor--extract-tasks",
              "summary": "Extract explicit task items.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "match.start",
                "Task",
                "self._extract_context",
                "match.end",
                "tasks.append",
                "match.group",
                "str"
              ],
              "called_by": []
            },
            {
              "name": "_extract_todos",
              "docstring": "Extract TODO items.",
              "line_range": [
                196,
                219
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ],
              "uid": "scripts.create_tasks_index.TaskExtractor._extract_todos:196#method",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index.TaskExtractor",
                "scripts.create_tasks_index.TaskExtractor._extract_todos:196"
              ],
              "hash": "ea7328a8ec95ec0e76ed98270999210b561df37ada8e0d12375edee23eb738c6",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-tasks-index-taskextractor--extract-todos",
              "summary": "Extract TODO items.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "match.start",
                "Task",
                "tasks.append",
                "match.group",
                "str"
              ],
              "called_by": []
            },
            {
              "name": "_extract_phases",
              "docstring": "Extract phase/step items.",
              "line_range": [
                221,
                245
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ],
              "uid": "scripts.create_tasks_index.TaskExtractor._extract_phases:221#method",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index.TaskExtractor",
                "scripts.create_tasks_index.TaskExtractor._extract_phases:221"
              ],
              "hash": "eac833ef2fd57440dc0851f54a4cdf809e6a0f02726e9d2803dec5e50a75eb8a",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-tasks-index-taskextractor--extract-phases",
              "summary": "Extract phase/step items.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "match.start",
                "Task",
                "self._extract_context",
                "match.end",
                "tasks.append",
                "match.group",
                "str"
              ],
              "called_by": []
            },
            {
              "name": "_extract_checkboxes",
              "docstring": "Extract checkbox items as tasks.",
              "line_range": [
                247,
                275
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ],
              "uid": "scripts.create_tasks_index.TaskExtractor._extract_checkboxes:247#method",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index.TaskExtractor",
                "scripts.create_tasks_index.TaskExtractor._extract_checkboxes:247"
              ],
              "hash": "3271990352bea2cf1f31795105b026bac5f4ad80e4aef7dd801916afc5464235",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-tasks-index-taskextractor--extract-checkboxes",
              "summary": "Extract checkbox items as tasks.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "match.start",
                "Task",
                "any",
                "match.group",
                "tasks.append",
                "task_title.upper",
                "str"
              ],
              "called_by": []
            },
            {
              "name": "_extract_context",
              "docstring": "Extract surrounding context for a match.",
              "line_range": [
                277,
                286
              ],
              "parameters": [
                "self",
                "content",
                "start",
                "end",
                "context_lines"
              ],
              "uid": "scripts.create_tasks_index.TaskExtractor._extract_context:277#method",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index.TaskExtractor",
                "scripts.create_tasks_index.TaskExtractor._extract_context:277"
              ],
              "hash": "6e0a74f7d595524e888e8188e9818629ef979c341d31930e66bd1d06ad8a1399",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-tasks-index-taskextractor--extract-context",
              "summary": "Extract surrounding context for a match.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "min",
                "len",
                "context.strip",
                "content.split",
                "max"
              ],
              "called_by": []
            }
          ],
          "bases": [],
          "uid": "scripts.create_tasks_index.TaskExtractor:39#class",
          "uid_components": [
            "scripts",
            "scripts.create_tasks_index",
            "scripts.create_tasks_index.TaskExtractor:39"
          ],
          "hash": "34dabde7169b81d401ffef4e371379f99e2321f514060f7d78a4970b2206d923",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-tasks-index-taskextractor",
          "summary": "Extract tasks from various document formats.",
          "summary_source": "docstring",
          "tags": [
            "class",
            "public"
          ]
        },
        {
          "name": "TaskIndexGenerator",
          "docstring": "Generate comprehensive task index.",
          "line_range": [
            289,
            466
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                292,
                294
              ],
              "parameters": [
                "self",
                "project_root"
              ],
              "uid": "scripts.create_tasks_index.TaskIndexGenerator.__init__:292#method",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index.TaskIndexGenerator",
                "scripts.create_tasks_index.TaskIndexGenerator.__init__:292"
              ],
              "hash": "0dde8a0c22f6db01153c64df150c47640eea02dd6d2224bc3fa8b369113b4c10",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-tasks-index-taskindexgenerator---init--",
              "summary": "Method for taskindexgenerator. init",
              "summary_source": "heuristic",
              "tags": [
                "method",
                "private",
                "public"
              ],
              "calls": [
                "Path",
                "TaskExtractor"
              ],
              "called_by": []
            },
            {
              "name": "scan_documentation",
              "docstring": "Scan all documentation files for tasks.",
              "line_range": [
                296,
                314
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.create_tasks_index.TaskIndexGenerator.scan_documentation:296#method",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index.TaskIndexGenerator",
                "scripts.create_tasks_index.TaskIndexGenerator.scan_documentation:296"
              ],
              "hash": "8c79ad1f27251beb14825ca92d8681bcd3de32d52a7d4be3698f643d165eb689",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-tasks-index-taskindexgenerator-scan-documentation",
              "summary": "Scan all documentation files for tasks.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "docs_dir.exists",
                "logger.info",
                "docs_dir.glob",
                "all_tasks.extend"
              ],
              "called_by": []
            },
            {
              "name": "generate_index",
              "docstring": "Generate comprehensive task index.",
              "line_range": [
                316,
                367
              ],
              "parameters": [
                "self",
                "tasks"
              ],
              "uid": "scripts.create_tasks_index.TaskIndexGenerator.generate_index:316#method",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index.TaskIndexGenerator",
                "scripts.create_tasks_index.TaskIndexGenerator.generate_index:316"
              ],
              "hash": "e2344d1d43ef4a9d50697f633e906f472f5453cbdefe49db6b7e2395052cc92f",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-tasks-index-taskindexgenerator-generate-index",
              "summary": "Generate comprehensive task index.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "len",
                "by_file.items",
                "by_priority.items",
                "asdict",
                "datetime.now",
                "by_status.items",
                "by_category.items"
              ],
              "called_by": []
            },
            {
              "name": "generate_summary_report",
              "docstring": "Generate human-readable summary report.",
              "line_range": [
                369,
                446
              ],
              "parameters": [
                "self",
                "index"
              ],
              "uid": "scripts.create_tasks_index.TaskIndexGenerator.generate_summary_report:369#method",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index.TaskIndexGenerator",
                "scripts.create_tasks_index.TaskIndexGenerator.generate_summary_report:369"
              ],
              "hash": "f367a1e80b919594e7594f521314819ee5641644734f31e17859873efeb581a1",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-tasks-index-taskindexgenerator-generate-summary-report",
              "summary": "Generate human-readable summary report.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "len",
                "sorted",
                "file_categories.items",
                "Path",
                "category.upper",
                "priority.upper",
                "status.upper"
              ],
              "called_by": []
            },
            {
              "name": "save_index",
              "docstring": "Save index and summary to files.",
              "line_range": [
                448,
                466
              ],
              "parameters": [
                "self",
                "index",
                "summary",
                "output_dir"
              ],
              "uid": "scripts.create_tasks_index.TaskIndexGenerator.save_index:448#method",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index.TaskIndexGenerator",
                "scripts.create_tasks_index.TaskIndexGenerator.save_index:448"
              ],
              "hash": "dcf060dd35b880b328d500ecdc7fbce2b2eec9384aa74701b0186600906f8713",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#scripts-create-tasks-index-taskindexgenerator-save-index",
              "summary": "Save index and summary to files.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "logger.info",
                "output_path.mkdir",
                "json.dump",
                "f.write",
                "Path",
                "open"
              ],
              "called_by": []
            }
          ],
          "bases": [],
          "uid": "scripts.create_tasks_index.TaskIndexGenerator:289#class",
          "uid_components": [
            "scripts",
            "scripts.create_tasks_index",
            "scripts.create_tasks_index.TaskIndexGenerator:289"
          ],
          "hash": "2509935a4a258966df5fa82f5c6a3ce34e0451c2eb7eb2ba4c9ea9d492426caf",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#scripts-create-tasks-index-taskindexgenerator",
          "summary": "Generate comprehensive task index.",
          "summary_source": "docstring",
          "tags": [
            "class",
            "public"
          ]
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "TaskExtractor"
        ],
        "_init_patterns": [
          "re.compile"
        ],
        "extract_from_markdown": [
          "self._extract_status",
          "self._extract_checkboxes",
          "f.read",
          "self._extract_tasks",
          "self._extract_epics",
          "self._extract_priority",
          "tasks.extend",
          "self._extract_todos",
          "logger.error",
          "open",
          "self._extract_date",
          "self._extract_phases"
        ],
        "_extract_status": [
          "match.group"
        ],
        "_extract_priority": [
          "match.group"
        ],
        "_extract_date": [
          "datetime.now",
          "match.group"
        ],
        "_extract_epics": [
          "match.start",
          "Task",
          "self._extract_context",
          "match.end",
          "tasks.append",
          "match.group",
          "str"
        ],
        "_extract_tasks": [
          "match.start",
          "Task",
          "self._extract_context",
          "match.end",
          "tasks.append",
          "match.group",
          "str"
        ],
        "_extract_todos": [
          "match.start",
          "Task",
          "tasks.append",
          "match.group",
          "str"
        ],
        "_extract_phases": [
          "match.start",
          "Task",
          "self._extract_context",
          "match.end",
          "tasks.append",
          "match.group",
          "str"
        ],
        "_extract_checkboxes": [
          "match.start",
          "Task",
          "any",
          "match.group",
          "tasks.append",
          "task_title.upper",
          "str"
        ],
        "_extract_context": [
          "min",
          "len",
          "context.strip",
          "content.split",
          "max"
        ],
        "scan_documentation": [
          "docs_dir.exists",
          "logger.info",
          "docs_dir.glob",
          "all_tasks.extend"
        ],
        "generate_index": [
          "len",
          "by_file.items",
          "by_priority.items",
          "asdict",
          "datetime.now",
          "by_status.items",
          "by_category.items"
        ],
        "generate_summary_report": [
          "len",
          "sorted",
          "file_categories.items",
          "Path",
          "category.upper",
          "priority.upper",
          "status.upper"
        ],
        "save_index": [
          "logger.info",
          "output_path.mkdir",
          "json.dump",
          "f.write",
          "Path",
          "open"
        ],
        "main": [
          "logger.info",
          "len",
          "by_category.get",
          "generator.scan_documentation",
          "generator.generate_index",
          "parser.add_argument",
          "parser.parse_args",
          "argparse.ArgumentParser",
          "sorted",
          "by_status.get",
          "generator.generate_summary_report",
          "by_status.items",
          "generator.save_index",
          "by_category.items",
          "TaskIndexGenerator",
          "print"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "argparse",
        "asdict",
        "dataclass",
        "dataclasses",
        "datetime",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "typing"
      ],
      "hash": "8dc454229e01725267e1ece8a1363faf1501013df5f34f371865de1d1d386035",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "scripts.create_tasks_index.scripts.create_tasks_index#module",
      "uid_components": [
        "scripts",
        "scripts.create_tasks_index",
        "scripts.create_tasks_index.scripts.create_tasks_index"
      ],
      "summary": "Tasks Index Creator\nScans all documentation files and creates comprehensive index of tasks, EPICs, TODOs, and other a...",
      "summary_source": "docstring",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "83eb81cf-591c-4fa8-a03c-d5732ec3cc63"
    },
    {
      "module_id": "llmstruct.templates.__init__",
      "path": "llmstruct/templates/__init__.py",
      "category": "cli",
      "module_doc": "Templates for LLM prompts used in LLMStruct integration.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "2421ea45b39e72f090ee252149c45385f679971e48ca50f0883e313c3db9fa6d",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.templates.__init__.llmstruct.templates.__init__#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.templates",
        "llmstruct.templates.__init__",
        "llmstruct.templates.__init__.llmstruct.templates.__init__"
      ],
      "summary": "Templates for LLM prompts used in LLMStruct integration.",
      "summary_source": "docstring",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "68c90b61-457e-4a63-bb21-ad81bc1d64a2"
    },
    {
      "module_id": "llmstruct.ARCHIVE.cli_argument_parser",
      "path": "llmstruct/ARCHIVE/cli_argument_parser.py",
      "category": "core",
      "module_doc": "CLI argument parsing for LLMStruct.",
      "functions": [
        {
          "name": "create_argument_parser",
          "docstring": "Create and configure the main argument parser.",
          "line_range": [
            14,
            113
          ],
          "parameters": [],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_argument_parser.create_argument_parser:14#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_argument_parser",
            "llmstruct.ARCHIVE.cli_argument_parser.create_argument_parser:14"
          ],
          "hash": "7617f984aea08c4768393f1073fb9f9b2b51c2416c460f8da2442e287cc97d34",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-argument-parser-create-argument-parser",
          "summary": "Create and configure the main argument parser.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "parser.add_subparsers",
            "query_parser.add_argument",
            "audit_parser.add_argument",
            "duplicates_parser.add_argument",
            "dogfood_parser.add_argument",
            "subparsers.add_parser",
            "argparse.ArgumentParser",
            "interactive_parser.add_argument",
            "review_parser.add_argument",
            "parse_parser.add_argument",
            "copilot_parser.add_argument",
            "context_parser.add_argument"
          ],
          "called_by": [
            "create_full_argument_parser"
          ]
        },
        {
          "name": "add_api_bot_commands",
          "docstring": "Add API and bot management commands to the parser.",
          "line_range": [
            116,
            126
          ],
          "parameters": [
            "subparsers"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_argument_parser.add_api_bot_commands:116#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_argument_parser",
            "llmstruct.ARCHIVE.cli_argument_parser.add_api_bot_commands:116"
          ],
          "hash": "8bc8a0c6c922705ada148e5381a78a900194f32d56cdb424bce6d5c7348fe3c9",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-argument-parser-add-api-bot-commands",
          "summary": "Add API and bot management commands to the parser.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "add_api_commands",
            "add_bot_commands"
          ],
          "called_by": [
            "create_full_argument_parser"
          ]
        },
        {
          "name": "create_full_argument_parser",
          "docstring": "Create the full argument parser with all commands.",
          "line_range": [
            129,
            137
          ],
          "parameters": [],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_argument_parser.create_full_argument_parser:129#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_argument_parser",
            "llmstruct.ARCHIVE.cli_argument_parser.create_full_argument_parser:129"
          ],
          "hash": "0f796591c0b06bd2c804416fd4686f50e00dabf92081a18a9d5639d62abc2069",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-argument-parser-create-full-argument-parser",
          "summary": "Create the full argument parser with all commands.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "create_argument_parser",
            "add_api_bot_commands"
          ],
          "called_by": []
        }
      ],
      "classes": [],
      "callgraph": {
        "create_argument_parser": [
          "parser.add_subparsers",
          "query_parser.add_argument",
          "audit_parser.add_argument",
          "duplicates_parser.add_argument",
          "dogfood_parser.add_argument",
          "subparsers.add_parser",
          "argparse.ArgumentParser",
          "interactive_parser.add_argument",
          "review_parser.add_argument",
          "parse_parser.add_argument",
          "copilot_parser.add_argument",
          "context_parser.add_argument"
        ],
        "add_api_bot_commands": [
          "add_api_commands",
          "add_bot_commands"
        ],
        "create_full_argument_parser": [
          "create_argument_parser",
          "add_api_bot_commands"
        ]
      },
      "dependencies": [
        "Path",
        "add_api_commands",
        "add_bot_commands",
        "api_commands",
        "argparse",
        "bot_commands",
        "pathlib"
      ],
      "hash": "e54ef1274816747eae572b5045a59d35b9d2eb27b4358919ab57d61cef9fb47b",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.ARCHIVE.cli_argument_parser.llmstruct.ARCHIVE.cli_argument_parser#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.ARCHIVE",
        "llmstruct.ARCHIVE.cli_argument_parser",
        "llmstruct.ARCHIVE.cli_argument_parser.llmstruct.ARCHIVE.cli_argument_parser"
      ],
      "summary": "CLI argument parsing for LLMStruct.",
      "summary_source": "docstring",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "3aabba9b-5933-4818-8ac5-02f37f40b8f4"
    },
    {
      "module_id": "llmstruct.ARCHIVE.cli_core",
      "path": "llmstruct/ARCHIVE/cli_core.py",
      "category": "core",
      "module_doc": "Core CLI functionality and main loop.",
      "functions": [
        {
          "name": "create_cli_core",
          "docstring": "Factory function to create CLI core instance.",
          "line_range": [
            110,
            112
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_core.create_cli_core:110#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_core",
            "llmstruct.ARCHIVE.cli_core.create_cli_core:110"
          ],
          "hash": "a90be231359eeda7a69fe75a2c020a3f50d9b5a01d7eaf47b52cbab838994134",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-core-create-cli-core",
          "summary": "Factory function to create CLI core instance.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "CLICore"
          ],
          "called_by": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize CLI core with root directory.",
          "line_range": [
            28,
            35
          ],
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_core.__init__:28#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_core",
            "llmstruct.ARCHIVE.cli_core.__init__:28"
          ],
          "hash": "830976c0c8a035ce0e372e4267a8208343343b39994d803ece09ed4883554e8f",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-core---init--",
          "summary": "Initialize CLI core with root directory.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "CommandProcessor",
            "CLIUtils",
            "CLIConfig"
          ],
          "called_by": []
        },
        {
          "name": "setup_cache",
          "docstring": "Initialize cache if enabled in config.",
          "line_range": [
            37,
            53
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_core.setup_cache:37#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_core",
            "llmstruct.ARCHIVE.cli_core.setup_cache:37"
          ],
          "hash": "1aa6e7d3906dcfff56ef0a147a6aefdad469f40b0702963c0d2579f20446cb7e",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-core-setup-cache",
          "summary": "Initialize cache if enabled in config.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "JSONCache",
            "cache_config.get",
            "logging.warning",
            "logging.info",
            "Path",
            "cache_path.mkdir",
            "str"
          ],
          "called_by": []
        },
        {
          "name": "setup_copilot",
          "docstring": "Initialize Copilot integration if enabled.",
          "line_range": [
            55,
            63
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_core.setup_copilot:55#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_core",
            "llmstruct.ARCHIVE.cli_core.setup_copilot:55"
          ],
          "hash": "c1d63d453200f07cd2da5eb1ea4092660f7b5ad5ed3b59d99d16413e5b51b3a3",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-core-setup-copilot",
          "summary": "Initialize Copilot integration if enabled.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "logging.warning",
            "initialize_copilot",
            "logging.info",
            "copilot_config.get"
          ],
          "called_by": []
        },
        {
          "name": "run_interactive_mode",
          "docstring": "Run the interactive CLI mode.",
          "line_range": [
            65,
            97
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_core.run_interactive_mode:65#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_core",
            "llmstruct.ARCHIVE.cli_core.run_interactive_mode:65"
          ],
          "hash": "572fdbe0db6c885ccd13b6335f0cdfc384a6eb766f9016129719799d3683f5bc",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-core-run-interactive-mode",
          "summary": "Run the interactive CLI mode.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "logging.error",
            "user_input.lower",
            "self.setup_copilot",
            "input",
            "user_input.startswith",
            "self.cleanup",
            "self.setup_cache",
            "print"
          ],
          "called_by": []
        },
        {
          "name": "cleanup",
          "docstring": "Clean up resources.",
          "line_range": [
            99,
            107
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_core.cleanup:99#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_core",
            "llmstruct.ARCHIVE.cli_core.cleanup:99"
          ],
          "hash": "07b8748250b4d91351ebf1aa31aa0c71e03eebe19b18641e76fd8dc17605280f",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-core-cleanup",
          "summary": "Clean up resources.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "logging.info"
          ],
          "called_by": []
        }
      ],
      "classes": [
        {
          "name": "CLICore",
          "docstring": "Core CLI class handling main loop and coordination.",
          "line_range": [
            25,
            107
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize CLI core with root directory.",
              "line_range": [
                28,
                35
              ],
              "parameters": [
                "self",
                "root_dir"
              ],
              "uid": "llmstruct.ARCHIVE.cli_core.CLICore.__init__:28#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_core",
                "llmstruct.ARCHIVE.cli_core.CLICore",
                "llmstruct.ARCHIVE.cli_core.CLICore.__init__:28"
              ],
              "hash": "4aba432ef153112ff2c2609d28a5c4257f55fa2ba4cc1e3b2fa89d3e88292cee",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-core-clicore---init--",
              "summary": "Initialize CLI core with root directory.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "CommandProcessor",
                "CLIUtils",
                "CLIConfig"
              ],
              "called_by": []
            },
            {
              "name": "setup_cache",
              "docstring": "Initialize cache if enabled in config.",
              "line_range": [
                37,
                53
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.ARCHIVE.cli_core.CLICore.setup_cache:37#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_core",
                "llmstruct.ARCHIVE.cli_core.CLICore",
                "llmstruct.ARCHIVE.cli_core.CLICore.setup_cache:37"
              ],
              "hash": "00b8b074d92cd4bfd2afb63a29ac0c5c3cade112d02d2ce911a5fc328ad1ab7c",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-core-clicore-setup-cache",
              "summary": "Initialize cache if enabled in config.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "JSONCache",
                "cache_config.get",
                "logging.warning",
                "logging.info",
                "Path",
                "cache_path.mkdir",
                "str"
              ],
              "called_by": []
            },
            {
              "name": "setup_copilot",
              "docstring": "Initialize Copilot integration if enabled.",
              "line_range": [
                55,
                63
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.ARCHIVE.cli_core.CLICore.setup_copilot:55#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_core",
                "llmstruct.ARCHIVE.cli_core.CLICore",
                "llmstruct.ARCHIVE.cli_core.CLICore.setup_copilot:55"
              ],
              "hash": "7cce3d8a3dbc2dd54c1ad1ac4fd3240ff54cc7701d32d83be4ee1847b5239406",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-core-clicore-setup-copilot",
              "summary": "Initialize Copilot integration if enabled.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "logging.warning",
                "initialize_copilot",
                "logging.info",
                "copilot_config.get"
              ],
              "called_by": []
            },
            {
              "name": "run_interactive_mode",
              "docstring": "Run the interactive CLI mode.",
              "line_range": [
                65,
                97
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.ARCHIVE.cli_core.CLICore.run_interactive_mode:65#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_core",
                "llmstruct.ARCHIVE.cli_core.CLICore",
                "llmstruct.ARCHIVE.cli_core.CLICore.run_interactive_mode:65"
              ],
              "hash": "b5bca6399b61ad70a9a46dc5c2eb3fbab5263db8163f541bbb228ca2a0233136",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-core-clicore-run-interactive-mode",
              "summary": "Run the interactive CLI mode.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "logging.error",
                "user_input.lower",
                "self.setup_copilot",
                "input",
                "user_input.startswith",
                "self.cleanup",
                "self.setup_cache",
                "print"
              ],
              "called_by": []
            },
            {
              "name": "cleanup",
              "docstring": "Clean up resources.",
              "line_range": [
                99,
                107
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.ARCHIVE.cli_core.CLICore.cleanup:99#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_core",
                "llmstruct.ARCHIVE.cli_core.CLICore",
                "llmstruct.ARCHIVE.cli_core.CLICore.cleanup:99"
              ],
              "hash": "c16045388935076f9899277b2de3629b95cdc90424d27c689e89af1e2d19db61",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-core-clicore-cleanup",
              "summary": "Clean up resources.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "logging.info"
              ],
              "called_by": []
            }
          ],
          "bases": [],
          "uid": "llmstruct.ARCHIVE.cli_core.CLICore:25#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_core",
            "llmstruct.ARCHIVE.cli_core.CLICore:25"
          ],
          "hash": "0f57113de26c40818665dc65437a8fde3d7cf358e1c21fddb397ea16249ded83",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-core-clicore",
          "summary": "Core CLI class handling main loop and coordination.",
          "summary_source": "docstring",
          "tags": [
            "class",
            "public"
          ]
        }
      ],
      "callgraph": {
        "__init__": [
          "CommandProcessor",
          "CLIUtils",
          "CLIConfig"
        ],
        "setup_cache": [
          "JSONCache",
          "cache_config.get",
          "logging.warning",
          "logging.info",
          "Path",
          "cache_path.mkdir",
          "str"
        ],
        "setup_copilot": [
          "logging.warning",
          "initialize_copilot",
          "logging.info",
          "copilot_config.get"
        ],
        "run_interactive_mode": [
          "logging.error",
          "user_input.lower",
          "self.setup_copilot",
          "input",
          "user_input.startswith",
          "self.cleanup",
          "self.setup_cache",
          "print"
        ],
        "cleanup": [
          "logging.info"
        ],
        "create_cli_core": [
          "CLICore"
        ]
      },
      "dependencies": [
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "CopilotContextManager",
        "JSONCache",
        "Optional",
        "Path",
        "cli_commands",
        "cli_config",
        "cli_utils",
        "copilot",
        "initialize_copilot",
        "llmstruct.cache",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": "57a534c55c12bacfaf26ed4b4124fe97a3c2559253b5a62346e9c9f0368e5132",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.ARCHIVE.cli_core.llmstruct.ARCHIVE.cli_core#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.ARCHIVE",
        "llmstruct.ARCHIVE.cli_core",
        "llmstruct.ARCHIVE.cli_core.llmstruct.ARCHIVE.cli_core"
      ],
      "summary": "Core CLI functionality and main loop.",
      "summary_source": "docstring",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "75979c1a-677f-4588-ac29-b99e9eb0d9b5"
    },
    {
      "module_id": "llmstruct.ARCHIVE.cli_utils",
      "path": "llmstruct/ARCHIVE/cli_utils.py",
      "category": "core",
      "module_doc": "CLI utility functions.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize utils with root directory.",
          "line_range": [
            24,
            26
          ],
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_utils.__init__:24#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_utils",
            "llmstruct.ARCHIVE.cli_utils.__init__:24"
          ],
          "hash": "a5ef1260925a702f06990a487419e975cb062bfd7da7fb7ec05f65a29be1dca9",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-utils---init--",
          "summary": "Initialize utils with root directory.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [],
          "called_by": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read file content with size limit.",
          "line_range": [
            28,
            50
          ],
          "parameters": [
            "self",
            "file_path",
            "max_size"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_utils.read_file_content:28#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_utils",
            "llmstruct.ARCHIVE.cli_utils.read_file_content:28"
          ],
          "hash": "ac908f82c5071b1dce87c4d9c3b9e54f11bbf350285a4876821b7616f93ed971",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-utils-read-file-content",
          "summary": "Read file content with size limit.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "f.read",
            "logging.warning",
            "open",
            "os.stat",
            "logging.error"
          ],
          "called_by": []
        },
        {
          "name": "write_file_content",
          "docstring": "Write content to file.",
          "line_range": [
            52,
            70
          ],
          "parameters": [
            "self",
            "file_path",
            "content"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_utils.write_file_content:52#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_utils",
            "llmstruct.ARCHIVE.cli_utils.write_file_content:52"
          ],
          "hash": "dd0c4885982b5ec2f3b563ee52db025092e8c6b2b3390258d53dd31fa0ea7d31",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-utils-write-file-content",
          "summary": "Write content to file.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "logging.info",
            "f.write",
            "Path",
            "open",
            "logging.error"
          ],
          "called_by": []
        },
        {
          "name": "get_directory_structure",
          "docstring": "Get directory structure using folder generator.",
          "line_range": [
            72,
            115
          ],
          "parameters": [
            "self",
            "path",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_utils.get_directory_structure:72#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_utils",
            "llmstruct.ARCHIVE.cli_utils.get_directory_structure:72"
          ],
          "hash": "79fc829e35ff409bb589f3878808da94313ea29e2ec3b72f5bfd9238b263c369",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-utils-get-directory-structure",
          "summary": "Get directory structure using folder generator.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "generator",
            "public"
          ],
          "calls": [
            "os.listdir",
            "sorted",
            "logging.error",
            "get_folder_structure"
          ],
          "called_by": []
        },
        {
          "name": "validate_json",
          "docstring": "Validate JSON content.",
          "line_range": [
            117,
            123
          ],
          "parameters": [
            "self",
            "content"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_utils.validate_json:117#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_utils",
            "llmstruct.ARCHIVE.cli_utils.validate_json:117"
          ],
          "hash": "195acaf2945158e0dcc7ce8b698e54380d30bff7868ceaeb51084234bc425f0a",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-utils-validate-json",
          "summary": "Validate JSON content.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "json.loads",
            "str"
          ],
          "called_by": []
        },
        {
          "name": "format_json",
          "docstring": "Format data as JSON string.",
          "line_range": [
            125,
            131
          ],
          "parameters": [
            "self",
            "data",
            "indent"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_utils.format_json:125#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_utils",
            "llmstruct.ARCHIVE.cli_utils.format_json:125"
          ],
          "hash": "d17b516f915483063bd38169d3811cebc88375a57ec752ae9395c8fe15ed6de9",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-utils-format-json",
          "summary": "Format data as JSON string.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "json.dumps",
            "str",
            "logging.error"
          ],
          "called_by": []
        },
        {
          "name": "generate_unique_id",
          "docstring": "Generate unique ID for commands, queues, etc.",
          "line_range": [
            133,
            137
          ],
          "parameters": [
            "self",
            "prefix"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_utils.generate_unique_id:133#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_utils",
            "llmstruct.ARCHIVE.cli_utils.generate_unique_id:133"
          ],
          "hash": "55115475f7c729bc87ced188c45fac5895c94dc090a44d352ae89858919f509b",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-utils-generate-unique-id",
          "summary": "Generate unique ID for commands, queues, etc.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "int",
            "time.time",
            "uuid.uuid4",
            "str"
          ],
          "called_by": []
        },
        {
          "name": "safe_path_join",
          "docstring": "Safely join path parts, preventing directory traversal.",
          "line_range": [
            139,
            149
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_utils.safe_path_join:139#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_utils",
            "llmstruct.ARCHIVE.cli_utils.safe_path_join:139"
          ],
          "hash": "d779f331cb7d0f083b9463b16bbf5b36cdb2a8ec7f1d21e136874c9569035e82",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-utils-safe-path-join",
          "summary": "Safely join path parts, preventing directory traversal.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "ValueError",
            "resolved_path.startswith"
          ],
          "called_by": []
        },
        {
          "name": "file_exists",
          "docstring": "Check if file exists.",
          "line_range": [
            151,
            157
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_utils.file_exists:151#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_utils",
            "llmstruct.ARCHIVE.cli_utils.file_exists:151"
          ],
          "hash": "726bff5ab4ccd705611aa02bfe6415dd8f4cb668a704681c9086ea780d0f5b7d",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-utils-file-exists",
          "summary": "Check if file exists.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "self.safe_path_join"
          ],
          "called_by": []
        },
        {
          "name": "dir_exists",
          "docstring": "Check if directory exists.",
          "line_range": [
            159,
            165
          ],
          "parameters": [
            "self",
            "dir_path"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_utils.dir_exists:159#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_utils",
            "llmstruct.ARCHIVE.cli_utils.dir_exists:159"
          ],
          "hash": "52577d28ca24723f97580451e23b1ac9d514e259dd86b306b4f3c4ec1d3be4ad",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-utils-dir-exists",
          "summary": "Check if directory exists.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "self.safe_path_join"
          ],
          "called_by": []
        },
        {
          "name": "get_file_size",
          "docstring": "Get file size in bytes.",
          "line_range": [
            167,
            173
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_utils.get_file_size:167#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_utils",
            "llmstruct.ARCHIVE.cli_utils.get_file_size:167"
          ],
          "hash": "22dcec3dc9b6aecd0838aa57388f7cd15fd01333f54faa7573c242b5f3b3e111",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-utils-get-file-size",
          "summary": "Get file size in bytes.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "self.safe_path_join"
          ],
          "called_by": []
        },
        {
          "name": "backup_file",
          "docstring": "Create backup of file with timestamp.",
          "line_range": [
            175,
            191
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_utils.backup_file:175#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_utils",
            "llmstruct.ARCHIVE.cli_utils.backup_file:175"
          ],
          "hash": "9cba5b1bd7f8c42497ea884b0f8ea5bdde869e5fb9d67cabf5812e4a1a238e07",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-utils-backup-file",
          "summary": "Create backup of file with timestamp.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "int",
            "dst.write",
            "self.safe_path_join",
            "time.time",
            "src.read",
            "open",
            "logging.error"
          ],
          "called_by": []
        },
        {
          "name": "cleanup_old_backups",
          "docstring": "Clean up old backup files, keeping only the most recent ones.",
          "line_range": [
            193,
            222
          ],
          "parameters": [
            "self",
            "file_path",
            "keep_count"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_utils.cleanup_old_backups:193#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_utils",
            "llmstruct.ARCHIVE.cli_utils.cleanup_old_backups:193"
          ],
          "hash": "faba391d7a0c5962fad5e279736fc98e6b449baee6ab07e5ea5faf9022b96d41",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-utils-cleanup-old-backups",
          "summary": "Clean up old backup files, keeping only the most recent ones.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "int",
            "self.safe_path_join",
            "logging.warning",
            "filename.split",
            "os.remove",
            "filename.startswith",
            "backups.sort",
            "logging.info",
            "os.listdir",
            "backups.append",
            "logging.error"
          ],
          "called_by": []
        }
      ],
      "classes": [
        {
          "name": "CLIUtils",
          "docstring": "Utility functions for CLI operations.",
          "line_range": [
            21,
            222
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize utils with root directory.",
              "line_range": [
                24,
                26
              ],
              "parameters": [
                "self",
                "root_dir"
              ],
              "uid": "llmstruct.ARCHIVE.cli_utils.CLIUtils.__init__:24#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_utils",
                "llmstruct.ARCHIVE.cli_utils.CLIUtils",
                "llmstruct.ARCHIVE.cli_utils.CLIUtils.__init__:24"
              ],
              "hash": "5870892ee817c59b3278b42dea382dd30e4117252c43a8ca2d55360e25290e6a",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-utils-cliutils---init--",
              "summary": "Initialize utils with root directory.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [],
              "called_by": []
            },
            {
              "name": "read_file_content",
              "docstring": "Read file content with size limit.",
              "line_range": [
                28,
                50
              ],
              "parameters": [
                "self",
                "file_path",
                "max_size"
              ],
              "uid": "llmstruct.ARCHIVE.cli_utils.CLIUtils.read_file_content:28#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_utils",
                "llmstruct.ARCHIVE.cli_utils.CLIUtils",
                "llmstruct.ARCHIVE.cli_utils.CLIUtils.read_file_content:28"
              ],
              "hash": "12c7f0bf6408c0b13c0f0327d97977913ee7225e50e74496bcb6385cc55c563c",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-utils-cliutils-read-file-content",
              "summary": "Read file content with size limit.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "f.read",
                "logging.warning",
                "open",
                "os.stat",
                "logging.error"
              ],
              "called_by": []
            },
            {
              "name": "write_file_content",
              "docstring": "Write content to file.",
              "line_range": [
                52,
                70
              ],
              "parameters": [
                "self",
                "file_path",
                "content"
              ],
              "uid": "llmstruct.ARCHIVE.cli_utils.CLIUtils.write_file_content:52#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_utils",
                "llmstruct.ARCHIVE.cli_utils.CLIUtils",
                "llmstruct.ARCHIVE.cli_utils.CLIUtils.write_file_content:52"
              ],
              "hash": "de5fc9bba66fed78e5bc611e03e5f16ad106ecaae01236b2fc543448818bd9e4",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-utils-cliutils-write-file-content",
              "summary": "Write content to file.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "logging.info",
                "f.write",
                "Path",
                "open",
                "logging.error"
              ],
              "called_by": []
            },
            {
              "name": "get_directory_structure",
              "docstring": "Get directory structure using folder generator.",
              "line_range": [
                72,
                115
              ],
              "parameters": [
                "self",
                "path",
                "gitignore_patterns",
                "include_patterns",
                "exclude_patterns",
                "exclude_dirs"
              ],
              "uid": "llmstruct.ARCHIVE.cli_utils.CLIUtils.get_directory_structure:72#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_utils",
                "llmstruct.ARCHIVE.cli_utils.CLIUtils",
                "llmstruct.ARCHIVE.cli_utils.CLIUtils.get_directory_structure:72"
              ],
              "hash": "24e0a97bfd91e7589750a8fef42df63984d426bb78b1c45e0c6cac692201aba4",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-utils-cliutils-get-directory-structure",
              "summary": "Get directory structure using folder generator.",
              "summary_source": "docstring",
              "tags": [
                "generator",
                "method",
                "public"
              ],
              "calls": [
                "os.listdir",
                "sorted",
                "logging.error",
                "get_folder_structure"
              ],
              "called_by": []
            },
            {
              "name": "validate_json",
              "docstring": "Validate JSON content.",
              "line_range": [
                117,
                123
              ],
              "parameters": [
                "self",
                "content"
              ],
              "uid": "llmstruct.ARCHIVE.cli_utils.CLIUtils.validate_json:117#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_utils",
                "llmstruct.ARCHIVE.cli_utils.CLIUtils",
                "llmstruct.ARCHIVE.cli_utils.CLIUtils.validate_json:117"
              ],
              "hash": "5a257413cbdee3ee9eabb31d4ea85ac908355ad22cfaa174529382c473414a6d",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-utils-cliutils-validate-json",
              "summary": "Validate JSON content.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "json.loads",
                "str"
              ],
              "called_by": []
            },
            {
              "name": "format_json",
              "docstring": "Format data as JSON string.",
              "line_range": [
                125,
                131
              ],
              "parameters": [
                "self",
                "data",
                "indent"
              ],
              "uid": "llmstruct.ARCHIVE.cli_utils.CLIUtils.format_json:125#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_utils",
                "llmstruct.ARCHIVE.cli_utils.CLIUtils",
                "llmstruct.ARCHIVE.cli_utils.CLIUtils.format_json:125"
              ],
              "hash": "d9bdda18564fc386b8c7cf72d813923e708049ce53c796d6661b0a454ee20e05",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-utils-cliutils-format-json",
              "summary": "Format data as JSON string.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "json.dumps",
                "str",
                "logging.error"
              ],
              "called_by": []
            },
            {
              "name": "generate_unique_id",
              "docstring": "Generate unique ID for commands, queues, etc.",
              "line_range": [
                133,
                137
              ],
              "parameters": [
                "self",
                "prefix"
              ],
              "uid": "llmstruct.ARCHIVE.cli_utils.CLIUtils.generate_unique_id:133#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_utils",
                "llmstruct.ARCHIVE.cli_utils.CLIUtils",
                "llmstruct.ARCHIVE.cli_utils.CLIUtils.generate_unique_id:133"
              ],
              "hash": "88373fbaa02c3afbf8c5085c990845939e12a25fb177221537f8982e49b2058e",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-utils-cliutils-generate-unique-id",
              "summary": "Generate unique ID for commands, queues, etc.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "int",
                "time.time",
                "uuid.uuid4",
                "str"
              ],
              "called_by": []
            },
            {
              "name": "safe_path_join",
              "docstring": "Safely join path parts, preventing directory traversal.",
              "line_range": [
                139,
                149
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.ARCHIVE.cli_utils.CLIUtils.safe_path_join:139#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_utils",
                "llmstruct.ARCHIVE.cli_utils.CLIUtils",
                "llmstruct.ARCHIVE.cli_utils.CLIUtils.safe_path_join:139"
              ],
              "hash": "1fd495cce83b114ed710797dbab5333cb8b0e1ca15486e38576d94041001ad60",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-utils-cliutils-safe-path-join",
              "summary": "Safely join path parts, preventing directory traversal.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "ValueError",
                "resolved_path.startswith"
              ],
              "called_by": []
            },
            {
              "name": "file_exists",
              "docstring": "Check if file exists.",
              "line_range": [
                151,
                157
              ],
              "parameters": [
                "self",
                "file_path"
              ],
              "uid": "llmstruct.ARCHIVE.cli_utils.CLIUtils.file_exists:151#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_utils",
                "llmstruct.ARCHIVE.cli_utils.CLIUtils",
                "llmstruct.ARCHIVE.cli_utils.CLIUtils.file_exists:151"
              ],
              "hash": "6346437744a89a395cecdf4a1412ae8125af6b59bea17266c0a6d1372744cb7f",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-utils-cliutils-file-exists",
              "summary": "Check if file exists.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "self.safe_path_join"
              ],
              "called_by": []
            },
            {
              "name": "dir_exists",
              "docstring": "Check if directory exists.",
              "line_range": [
                159,
                165
              ],
              "parameters": [
                "self",
                "dir_path"
              ],
              "uid": "llmstruct.ARCHIVE.cli_utils.CLIUtils.dir_exists:159#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_utils",
                "llmstruct.ARCHIVE.cli_utils.CLIUtils",
                "llmstruct.ARCHIVE.cli_utils.CLIUtils.dir_exists:159"
              ],
              "hash": "b8cf95a46cfe270fa54ed1b42491181f642f2014588621e025a7d9246824f3c4",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-utils-cliutils-dir-exists",
              "summary": "Check if directory exists.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "self.safe_path_join"
              ],
              "called_by": []
            },
            {
              "name": "get_file_size",
              "docstring": "Get file size in bytes.",
              "line_range": [
                167,
                173
              ],
              "parameters": [
                "self",
                "file_path"
              ],
              "uid": "llmstruct.ARCHIVE.cli_utils.CLIUtils.get_file_size:167#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_utils",
                "llmstruct.ARCHIVE.cli_utils.CLIUtils",
                "llmstruct.ARCHIVE.cli_utils.CLIUtils.get_file_size:167"
              ],
              "hash": "42a9c5b78726818f2b3b159b89164e68f5f93e2c2abcc24857b2b00d049bb44c",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-utils-cliutils-get-file-size",
              "summary": "Get file size in bytes.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "self.safe_path_join"
              ],
              "called_by": []
            },
            {
              "name": "backup_file",
              "docstring": "Create backup of file with timestamp.",
              "line_range": [
                175,
                191
              ],
              "parameters": [
                "self",
                "file_path"
              ],
              "uid": "llmstruct.ARCHIVE.cli_utils.CLIUtils.backup_file:175#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_utils",
                "llmstruct.ARCHIVE.cli_utils.CLIUtils",
                "llmstruct.ARCHIVE.cli_utils.CLIUtils.backup_file:175"
              ],
              "hash": "a090cc21b1b4a7100a11ba4ed02508e4aa73efcd95cc16d2d41fa43a51380a5b",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-utils-cliutils-backup-file",
              "summary": "Create backup of file with timestamp.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "int",
                "dst.write",
                "self.safe_path_join",
                "time.time",
                "src.read",
                "open",
                "logging.error"
              ],
              "called_by": []
            },
            {
              "name": "cleanup_old_backups",
              "docstring": "Clean up old backup files, keeping only the most recent ones.",
              "line_range": [
                193,
                222
              ],
              "parameters": [
                "self",
                "file_path",
                "keep_count"
              ],
              "uid": "llmstruct.ARCHIVE.cli_utils.CLIUtils.cleanup_old_backups:193#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_utils",
                "llmstruct.ARCHIVE.cli_utils.CLIUtils",
                "llmstruct.ARCHIVE.cli_utils.CLIUtils.cleanup_old_backups:193"
              ],
              "hash": "d670d9d01cda5a33b4cf7e128d67150b6eb0e30b339186afcc8efc55f706b436",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-utils-cliutils-cleanup-old-backups",
              "summary": "Clean up old backup files, keeping only the most recent ones.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "int",
                "self.safe_path_join",
                "logging.warning",
                "filename.split",
                "os.remove",
                "filename.startswith",
                "backups.sort",
                "logging.info",
                "os.listdir",
                "backups.append",
                "logging.error"
              ],
              "called_by": []
            }
          ],
          "bases": [],
          "uid": "llmstruct.ARCHIVE.cli_utils.CLIUtils:21#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_utils",
            "llmstruct.ARCHIVE.cli_utils.CLIUtils:21"
          ],
          "hash": "f56dd77924f853b70d904f1b086d94c0fe493a5410bdb213e990bd9d0c7aa5bc",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-utils-cliutils",
          "summary": "Utility functions for CLI operations.",
          "summary_source": "docstring",
          "tags": [
            "class",
            "public"
          ]
        }
      ],
      "callgraph": {
        "__init__": [],
        "read_file_content": [
          "f.read",
          "logging.warning",
          "open",
          "os.stat",
          "logging.error"
        ],
        "write_file_content": [
          "logging.info",
          "f.write",
          "Path",
          "open",
          "logging.error"
        ],
        "get_directory_structure": [
          "os.listdir",
          "sorted",
          "logging.error",
          "get_folder_structure"
        ],
        "validate_json": [
          "json.loads",
          "str"
        ],
        "format_json": [
          "json.dumps",
          "str",
          "logging.error"
        ],
        "generate_unique_id": [
          "int",
          "time.time",
          "uuid.uuid4",
          "str"
        ],
        "safe_path_join": [
          "ValueError",
          "resolved_path.startswith"
        ],
        "file_exists": [
          "self.safe_path_join"
        ],
        "dir_exists": [
          "self.safe_path_join"
        ],
        "get_file_size": [
          "self.safe_path_join"
        ],
        "backup_file": [
          "int",
          "dst.write",
          "self.safe_path_join",
          "time.time",
          "src.read",
          "open",
          "logging.error"
        ],
        "cleanup_old_backups": [
          "int",
          "self.safe_path_join",
          "logging.warning",
          "filename.split",
          "os.remove",
          "filename.startswith",
          "backups.sort",
          "logging.info",
          "os.listdir",
          "backups.append",
          "logging.error"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "get_folder_structure",
        "json",
        "llmstruct.generators.json_generator",
        "logging",
        "os",
        "pathlib",
        "time",
        "typing",
        "uuid"
      ],
      "hash": "105ac5d21c6d1870ac478aadb62ca79e99a3453df4457642fcda39f575abf367",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.ARCHIVE.cli_utils.llmstruct.ARCHIVE.cli_utils#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.ARCHIVE",
        "llmstruct.ARCHIVE.cli_utils",
        "llmstruct.ARCHIVE.cli_utils.llmstruct.ARCHIVE.cli_utils"
      ],
      "summary": "CLI utility functions.",
      "summary_source": "docstring",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "633cc8a1-0582-4379-bb32-56a57c46720f"
    },
    {
      "module_id": "llmstruct.ARCHIVE.cli_main_commands",
      "path": "llmstruct/ARCHIVE/cli_main_commands.py",
      "category": "core",
      "module_doc": "Main CLI command handlers for LLMStruct.",
      "functions": [
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": [
            33,
            68
          ],
          "parameters": [
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_main_commands.parse:33#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_main_commands",
            "llmstruct.ARCHIVE.cli_main_commands.parse:33"
          ],
          "hash": "a93bd8b15cc09ad8234c35d727a12a0c0b588b91975b4dca288d3fc9b0dde0b5",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-main-commands-parse",
          "summary": "Parse codebase and generate struct.json.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "logging.error",
            "cache.close",
            "JSONCache",
            "load_gitignore",
            "logging.info",
            "attach_to_llm_request",
            "generate_json"
          ],
          "called_by": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": [
            71,
            127
          ],
          "parameters": [
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_main_commands.query:71#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_main_commands",
            "llmstruct.ARCHIVE.cli_main_commands.query:71"
          ],
          "hash": "afaea5ae510d51f3c4c1041a8d447203c821436284656c4bd60a78aad4dc2a1c",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-main-commands-query",
          "summary": "Query LLMs with prompt and context.",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "public"
          ],
          "calls": [
            "cache.close",
            "orchestrator.get_context_for_scenario",
            "LLMClient",
            "JSONCache",
            "client.query_with_context",
            "logging.warning",
            "client.query",
            "logging.info",
            "json.dump",
            "Path",
            "hasattr",
            "create_context_orchestrator",
            "logging.error"
          ],
          "called_by": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with modular structure if available, fallback to legacy.",
          "line_range": [
            130,
            136
          ],
          "parameters": [
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_main_commands.interactive:130#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_main_commands",
            "llmstruct.ARCHIVE.cli_main_commands.interactive:130"
          ],
          "hash": "5293b899a1902f2f86a13c950f86dec75df5b630c3006e2198b6110a1088a968",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-main-commands-interactive",
          "summary": "Run interactive CLI with modular structure if available, fallback to legacy.",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "public"
          ],
          "calls": [
            "logging.warning",
            "interactive_modular",
            "interactive_legacy"
          ],
          "called_by": []
        },
        {
          "name": "interactive_modular",
          "docstring": "Run interactive CLI with modular structure.",
          "line_range": [
            139,
            146
          ],
          "parameters": [
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_main_commands.interactive_modular:139#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_main_commands",
            "llmstruct.ARCHIVE.cli_main_commands.interactive_modular:139"
          ],
          "hash": "216a589df376b3e776928ff0f88b88db015d9593706dff0003fe3a912add4cfd",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-main-commands-interactive-modular",
          "summary": "Run interactive CLI with modular structure.",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "public"
          ],
          "calls": [
            "create_cli_core",
            "cli_core.run_interactive_mode",
            "interactive_legacy",
            "logging.error"
          ],
          "called_by": [
            "interactive"
          ]
        },
        {
          "name": "interactive_legacy",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": [
            149,
            175
          ],
          "parameters": [
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_main_commands.interactive_legacy:149#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_main_commands",
            "llmstruct.ARCHIVE.cli_main_commands.interactive_legacy:149"
          ],
          "hash": "d04fbd294612f21c2ea9a1d3730b824b94617c571a7ce9bc9f78b7aafa5bdfaa",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-main-commands-interactive-legacy",
          "summary": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "public"
          ],
          "calls": [
            "cache.close",
            "basic_interactive_processing",
            "LLMClient",
            "JSONCache",
            "Path",
            "print",
            "process_cli_queue_enhanced",
            "logging.error"
          ],
          "called_by": [
            "interactive_modular",
            "interactive"
          ]
        },
        {
          "name": "basic_interactive_processing",
          "docstring": "Basic interactive processing without enhanced features.",
          "line_range": [
            178,
            230
          ],
          "parameters": [
            "args",
            "cache",
            "client"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_main_commands.basic_interactive_processing:178#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_main_commands",
            "llmstruct.ARCHIVE.cli_main_commands.basic_interactive_processing:178"
          ],
          "hash": "7990abacfd140abea1127f580492a8aef2545c1782fd654e4659a56b58850c43",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-main-commands-basic-interactive-processing",
          "summary": "Basic interactive processing without enhanced features.",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "public"
          ],
          "calls": [
            "user_input.lower",
            "f.read",
            "input",
            "user_input.startswith",
            "client.query",
            "open",
            "print"
          ],
          "called_by": [
            "interactive_legacy"
          ]
        },
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": [
            233,
            235
          ],
          "parameters": [
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_main_commands.context:233#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_main_commands",
            "llmstruct.ARCHIVE.cli_main_commands.context:233"
          ],
          "hash": "47892e5184afb07903e2ff67f3d0847b1b4268ff91f147b408158ce1e50275b2",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-main-commands-context",
          "summary": "Generate context.json from input JSON.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "logging.warning"
          ],
          "called_by": []
        },
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": [
            238,
            240
          ],
          "parameters": [
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_main_commands.dogfood:238#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_main_commands",
            "llmstruct.ARCHIVE.cli_main_commands.dogfood:238"
          ],
          "hash": "fc8bede20e59fb938cbba48298a2034a7f0c84bd11f7a20959a965bd91563f69",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-main-commands-dogfood",
          "summary": "Run dogfooding analysis.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "logging.warning"
          ],
          "called_by": []
        },
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": [
            243,
            245
          ],
          "parameters": [
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_main_commands.review:243#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_main_commands",
            "llmstruct.ARCHIVE.cli_main_commands.review:243"
          ],
          "hash": "80cea308d5ad291f8e465f8da5af88c8dcabc057b6dae4b49e568021da26422d",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-main-commands-review",
          "summary": "Review codebase with LLM.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "logging.warning"
          ],
          "called_by": []
        },
        {
          "name": "copilot",
          "docstring": "Copilot integration and context management.",
          "line_range": [
            248,
            366
          ],
          "parameters": [
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_main_commands.copilot:248#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_main_commands",
            "llmstruct.ARCHIVE.cli_main_commands.copilot:248"
          ],
          "hash": "5b159d5d0fec2180653f221fca3c89b5a40b746ad03975dac88c41647f048db1",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-main-commands-copilot",
          "summary": "Copilot integration and context management.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "enumerate",
            "getattr",
            "open",
            "logging.error",
            "manager.refresh_all_contexts",
            "manager.load_context_layer",
            "manager.get_context_status",
            "shutil.copy",
            "manager.export_context",
            "logging.info",
            "config_path.exists",
            "manager.unload_context_layer",
            "manager.validate_change",
            "f.write",
            "hasattr",
            "smart_suggest",
            "print",
            "manager.close",
            "Path",
            "layers.split",
            "initialize_copilot",
            "template_path.exists"
          ],
          "called_by": []
        },
        {
          "name": "audit",
          "docstring": "Audit project structure and generate reports.",
          "line_range": [
            369,
            387
          ],
          "parameters": [
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_main_commands.audit:369#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_main_commands",
            "llmstruct.ARCHIVE.cli_main_commands.audit:369"
          ],
          "hash": "e831ffd4a5b798511e8638016002a1f055531474aecb84ec790c16c158351f38",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-main-commands-audit",
          "summary": "Audit project structure and generate reports.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "file_path.exists",
            "Path",
            "hasattr",
            "analyze_duplicates",
            "print"
          ],
          "called_by": []
        },
        {
          "name": "analyze_duplicates",
          "docstring": "Analyze function duplication using struct.json deep analysis.",
          "line_range": [
            390,
            495
          ],
          "parameters": [
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_main_commands.analyze_duplicates:390#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_main_commands",
            "llmstruct.ARCHIVE.cli_main_commands.analyze_duplicates:390"
          ],
          "hash": "75f8e553a75951d871b7831de1a81f554f394828cc3f58a5d05485f2a0c0f7e5",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-main-commands-analyze-duplicates",
          "summary": "Analyze function duplication using struct.json deep analysis.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "json.dumps",
            "func.get",
            "logging.error",
            "WorkflowOrchestrator",
            "len",
            "f.get",
            "orchestrator.analyze_codebase_for_duplicates",
            "getattr",
            "json.dump",
            "analysis.get",
            "open",
            "print"
          ],
          "called_by": [
            "audit"
          ]
        }
      ],
      "classes": [],
      "callgraph": {
        "parse": [
          "logging.error",
          "cache.close",
          "JSONCache",
          "load_gitignore",
          "logging.info",
          "attach_to_llm_request",
          "generate_json"
        ],
        "query": [
          "cache.close",
          "orchestrator.get_context_for_scenario",
          "LLMClient",
          "JSONCache",
          "client.query_with_context",
          "logging.warning",
          "client.query",
          "logging.info",
          "json.dump",
          "Path",
          "hasattr",
          "create_context_orchestrator",
          "logging.error"
        ],
        "interactive": [
          "logging.warning",
          "interactive_modular",
          "interactive_legacy"
        ],
        "interactive_modular": [
          "create_cli_core",
          "cli_core.run_interactive_mode",
          "interactive_legacy",
          "logging.error"
        ],
        "interactive_legacy": [
          "cache.close",
          "basic_interactive_processing",
          "LLMClient",
          "JSONCache",
          "Path",
          "print",
          "process_cli_queue_enhanced",
          "logging.error"
        ],
        "basic_interactive_processing": [
          "user_input.lower",
          "f.read",
          "input",
          "user_input.startswith",
          "client.query",
          "open",
          "print"
        ],
        "context": [
          "logging.warning"
        ],
        "dogfood": [
          "logging.warning"
        ],
        "review": [
          "logging.warning"
        ],
        "copilot": [
          "enumerate",
          "getattr",
          "open",
          "logging.error",
          "manager.refresh_all_contexts",
          "manager.load_context_layer",
          "manager.get_context_status",
          "shutil.copy",
          "manager.export_context",
          "logging.info",
          "config_path.exists",
          "manager.unload_context_layer",
          "manager.validate_change",
          "f.write",
          "hasattr",
          "smart_suggest",
          "print",
          "manager.close",
          "Path",
          "layers.split",
          "initialize_copilot",
          "template_path.exists"
        ],
        "audit": [
          "file_path.exists",
          "Path",
          "hasattr",
          "analyze_duplicates",
          "print"
        ],
        "analyze_duplicates": [
          "json.dumps",
          "func.get",
          "logging.error",
          "WorkflowOrchestrator",
          "len",
          "f.get",
          "orchestrator.analyze_codebase_for_duplicates",
          "getattr",
          "json.dump",
          "analysis.get",
          "open",
          "print"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "Optional",
        "Path",
        "WorkflowOrchestrator",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "cli",
        "cli_core",
        "context_orchestrator",
        "copilot",
        "create_cli_core",
        "create_context_orchestrator",
        "generate_json",
        "initialize_copilot",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "load_gitignore",
        "logging",
        "os",
        "pathlib",
        "process_cli_queue_enhanced",
        "shutil",
        "smart_suggest",
        "typing",
        "workflow_orchestrator"
      ],
      "hash": "06e7d297542ace93514d731c2af8e0f0daa4c7c3a8fc1e90466f3b5fc5486189",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.ARCHIVE.cli_main_commands.llmstruct.ARCHIVE.cli_main_commands#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.ARCHIVE",
        "llmstruct.ARCHIVE.cli_main_commands",
        "llmstruct.ARCHIVE.cli_main_commands.llmstruct.ARCHIVE.cli_main_commands"
      ],
      "summary": "Main CLI command handlers for LLMStruct.",
      "summary_source": "docstring",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "556f563c-177c-478f-89a2-55403483a9d9"
    },
    {
      "module_id": "llmstruct.ARCHIVE.cli_config",
      "path": "llmstruct/ARCHIVE/cli_config.py",
      "category": "core",
      "module_doc": "CLI configuration management.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize configuration manager.",
          "line_range": [
            20,
            24
          ],
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_config.__init__:20#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_config",
            "llmstruct.ARCHIVE.cli_config.__init__:20"
          ],
          "hash": "909438f302c64df7b360401f3900680681b14432536b09901489ae8c83c36a13",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-config---init--",
          "summary": "Initialize configuration manager.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "self._load_config",
            "Path"
          ],
          "called_by": []
        },
        {
          "name": "_load_config",
          "docstring": "Load configuration from llmstruct.toml.",
          "line_range": [
            26,
            34
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_config._load_config:26#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_config",
            "llmstruct.ARCHIVE.cli_config._load_config:26"
          ],
          "hash": "87d00793e42c8c57744acb3738c5ea1565678568c6fd770296ebdff5802e93bc",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-config--load-config",
          "summary": "Load configuration from llmstruct.toml.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "toml.load",
            "logging.error"
          ],
          "called_by": []
        },
        {
          "name": "get_cache_config",
          "docstring": "Get cache configuration section.",
          "line_range": [
            36,
            38
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_config.get_cache_config:36#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_config",
            "llmstruct.ARCHIVE.cli_config.get_cache_config:36"
          ],
          "hash": "ac2ab73da745a70d0180b361c989422ba1b7cf6e40a48b56766e2519cda8ebe7",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-config-get-cache-config",
          "summary": "Get cache configuration section.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [],
          "called_by": []
        },
        {
          "name": "get_copilot_config",
          "docstring": "Get Copilot configuration section.",
          "line_range": [
            40,
            42
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_config.get_copilot_config:40#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_config",
            "llmstruct.ARCHIVE.cli_config.get_copilot_config:40"
          ],
          "hash": "a94ea01f6bbfdaa9a15521bedd4a4629daa8748bbff29c7948832a75c613e7d0",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-config-get-copilot-config",
          "summary": "Get Copilot configuration section.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [],
          "called_by": []
        },
        {
          "name": "get_queue_config",
          "docstring": "Get queue configuration section.",
          "line_range": [
            44,
            46
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_config.get_queue_config:44#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_config",
            "llmstruct.ARCHIVE.cli_config.get_queue_config:44"
          ],
          "hash": "885d551df2e9798e34406a020b0aea4863edc5a3c6ea7614238ec0d0d0b4fbae",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-config-get-queue-config",
          "summary": "Get queue configuration section.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [],
          "called_by": []
        },
        {
          "name": "get_context_config",
          "docstring": "Get context configuration section.",
          "line_range": [
            48,
            50
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_config.get_context_config:48#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_config",
            "llmstruct.ARCHIVE.cli_config.get_context_config:48"
          ],
          "hash": "b9e18f83398b40e37b193a6e89715fd45e2a4d956339f81dfc17f9d0976636a0",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-config-get-context-config",
          "summary": "Get context configuration section.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [],
          "called_by": []
        },
        {
          "name": "get_gitignore_patterns",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": [
            52,
            66
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_config.get_gitignore_patterns:52#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_config",
            "llmstruct.ARCHIVE.cli_config.get_gitignore_patterns:52"
          ],
          "hash": "97408c64d34564d88870d47456f29d5f920854a73f90f6e8b12e0b2a2f4d290e",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-config-get-gitignore-patterns",
          "summary": "Load and normalize patterns from .gitignore.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "line.startswith",
            "line.strip",
            "gitignore_path.exists",
            "gitignore_path.open",
            "Path",
            "logging.error"
          ],
          "called_by": []
        },
        {
          "name": "get_exclude_dirs",
          "docstring": "Get directories to exclude from scanning.",
          "line_range": [
            68,
            82
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_config.get_exclude_dirs:68#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_config",
            "llmstruct.ARCHIVE.cli_config.get_exclude_dirs:68"
          ],
          "hash": "c57a8bce9eee1c7e46606bdaaf303ea49d38c9a8873890ccc1053bf9c8999140",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-config-get-exclude-dirs",
          "summary": "Get directories to exclude from scanning.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "list",
            "cli_config.get",
            "set",
            "parsing_config.get"
          ],
          "called_by": []
        },
        {
          "name": "get_include_patterns",
          "docstring": "Get file patterns to include.",
          "line_range": [
            84,
            89
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_config.get_include_patterns:84#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_config",
            "llmstruct.ARCHIVE.cli_config.get_include_patterns:84"
          ],
          "hash": "be64dcd7ccf8ec9bda6a57c5b693b226e8f454780d8174d64ee2f70724db480b",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-config-get-include-patterns",
          "summary": "Get file patterns to include.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "cli_config.get",
            "parsing_config.get"
          ],
          "called_by": []
        },
        {
          "name": "get_exclude_patterns",
          "docstring": "Get file patterns to exclude.",
          "line_range": [
            91,
            96
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_config.get_exclude_patterns:91#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_config",
            "llmstruct.ARCHIVE.cli_config.get_exclude_patterns:91"
          ],
          "hash": "6f5c6a579bd7e7d79efd45f64b2e9a983b4049ded8579a4ff9144c5f5c987b5b",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-config-get-exclude-patterns",
          "summary": "Get file patterns to exclude.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "cli_config.get",
            "parsing_config.get"
          ],
          "called_by": []
        },
        {
          "name": "get_max_file_size",
          "docstring": "Get maximum file size for processing (in bytes).",
          "line_range": [
            98,
            100
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_config.get_max_file_size:98#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_config",
            "llmstruct.ARCHIVE.cli_config.get_max_file_size:98"
          ],
          "hash": "0de7874805ffa07c3b78d77851d2e395b58c8bad5d8d349a17646e2f797c4988",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-config-get-max-file-size",
          "summary": "Get maximum file size for processing (in bytes).",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [],
          "called_by": []
        },
        {
          "name": "get_auto_update_config",
          "docstring": "Get auto-update configuration.",
          "line_range": [
            102,
            104
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_config.get_auto_update_config:102#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_config",
            "llmstruct.ARCHIVE.cli_config.get_auto_update_config:102"
          ],
          "hash": "7cc7c3a61ef638a390acf6e9ddc083cfee252866d10b6f09ecdb41602955a9e5",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-config-get-auto-update-config",
          "summary": "Get auto-update configuration.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [],
          "called_by": []
        },
        {
          "name": "is_auto_update_enabled",
          "docstring": "Check if auto-update is enabled.",
          "line_range": [
            106,
            108
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_config.is_auto_update_enabled:106#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_config",
            "llmstruct.ARCHIVE.cli_config.is_auto_update_enabled:106"
          ],
          "hash": "fa7b49214f2e66e069e41f1988649895f5932435fd4ea615c427e9488c618991",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-config-is-auto-update-enabled",
          "summary": "Check if auto-update is enabled.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "self.get_auto_update_config"
          ],
          "called_by": []
        },
        {
          "name": "get_struct_file_path",
          "docstring": "Get path to struct.json file.",
          "line_range": [
            110,
            112
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_config.get_struct_file_path:110#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_config",
            "llmstruct.ARCHIVE.cli_config.get_struct_file_path:110"
          ],
          "hash": "e70f386e444b7329381eab5a43b38114aced94e9f63ee1ff62f7e5b2761e1827",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-config-get-struct-file-path",
          "summary": "Get path to struct.json file.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [],
          "called_by": []
        },
        {
          "name": "get_context_file_path",
          "docstring": "Get path to context file.",
          "line_range": [
            114,
            116
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_config.get_context_file_path:114#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_config",
            "llmstruct.ARCHIVE.cli_config.get_context_file_path:114"
          ],
          "hash": "6a06a4537d35027b744ad7dcf9dd0bbded90f7ec3aaacfcd919fc4cbc3bc5caa",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-config-get-context-file-path",
          "summary": "Get path to context file.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [],
          "called_by": []
        },
        {
          "name": "save_config",
          "docstring": "Save current configuration to file.",
          "line_range": [
            118,
            124
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_config.save_config:118#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_config",
            "llmstruct.ARCHIVE.cli_config.save_config:118"
          ],
          "hash": "0791684a866565c2ed84325fe9c021142fb2c56b22bc26c3a9d5f3ec5223517d",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-config-save-config",
          "summary": "Save current configuration to file.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "toml.dump",
            "logging.error"
          ],
          "called_by": []
        },
        {
          "name": "update_config",
          "docstring": "Update configuration value.",
          "line_range": [
            126,
            131
          ],
          "parameters": [
            "self",
            "section",
            "key",
            "value"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_config.update_config:126#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_config",
            "llmstruct.ARCHIVE.cli_config.update_config:126"
          ],
          "hash": "617b915be28900bb115194f1fa947acc20ec86f77348ef32d9d8aeb98f066e33",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-config-update-config",
          "summary": "Update configuration value.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "self.save_config"
          ],
          "called_by": []
        },
        {
          "name": "reload_config",
          "docstring": "Reload configuration from file.",
          "line_range": [
            133,
            135
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_config.reload_config:133#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_config",
            "llmstruct.ARCHIVE.cli_config.reload_config:133"
          ],
          "hash": "678356fe0f1b9e2e573116386a13bb0e7f0cfacfd05944f03a1b5ec99debb701",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-config-reload-config",
          "summary": "Reload configuration from file.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "self._load_config"
          ],
          "called_by": []
        }
      ],
      "classes": [
        {
          "name": "CLIConfig",
          "docstring": "Manages CLI configuration from llmstruct.toml and other sources.",
          "line_range": [
            17,
            135
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize configuration manager.",
              "line_range": [
                20,
                24
              ],
              "parameters": [
                "self",
                "root_dir"
              ],
              "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig.__init__:20#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config.CLIConfig",
                "llmstruct.ARCHIVE.cli_config.CLIConfig.__init__:20"
              ],
              "hash": "bf97d73bb1ad648c8aeb96689b75ff6bd480e65d09dabd3063672f72c268cb9e",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-config-cliconfig---init--",
              "summary": "Initialize configuration manager.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "self._load_config",
                "Path"
              ],
              "called_by": []
            },
            {
              "name": "_load_config",
              "docstring": "Load configuration from llmstruct.toml.",
              "line_range": [
                26,
                34
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig._load_config:26#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config.CLIConfig",
                "llmstruct.ARCHIVE.cli_config.CLIConfig._load_config:26"
              ],
              "hash": "84ba1f45fa0b2c27eb49454ad2b4fd04206138f8d6230a3841b72c9ca3e60bc5",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-config-cliconfig--load-config",
              "summary": "Load configuration from llmstruct.toml.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "toml.load",
                "logging.error"
              ],
              "called_by": []
            },
            {
              "name": "get_cache_config",
              "docstring": "Get cache configuration section.",
              "line_range": [
                36,
                38
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig.get_cache_config:36#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config.CLIConfig",
                "llmstruct.ARCHIVE.cli_config.CLIConfig.get_cache_config:36"
              ],
              "hash": "dff303b39d6f13b9e2ba1086402fb3e25902d09b633edc2ec40c04e5ea995023",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-config-cliconfig-get-cache-config",
              "summary": "Get cache configuration section.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [],
              "called_by": []
            },
            {
              "name": "get_copilot_config",
              "docstring": "Get Copilot configuration section.",
              "line_range": [
                40,
                42
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig.get_copilot_config:40#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config.CLIConfig",
                "llmstruct.ARCHIVE.cli_config.CLIConfig.get_copilot_config:40"
              ],
              "hash": "f65ccb1dc1a62ecda0246f28ed01da632c6d148b5751879863c3cca466a08837",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-config-cliconfig-get-copilot-config",
              "summary": "Get Copilot configuration section.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [],
              "called_by": []
            },
            {
              "name": "get_queue_config",
              "docstring": "Get queue configuration section.",
              "line_range": [
                44,
                46
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig.get_queue_config:44#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config.CLIConfig",
                "llmstruct.ARCHIVE.cli_config.CLIConfig.get_queue_config:44"
              ],
              "hash": "a4a7e611c95440703cd3e0805d64fdebfbb047abcbd9e4b0cbb73b22841cc1fe",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-config-cliconfig-get-queue-config",
              "summary": "Get queue configuration section.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [],
              "called_by": []
            },
            {
              "name": "get_context_config",
              "docstring": "Get context configuration section.",
              "line_range": [
                48,
                50
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig.get_context_config:48#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config.CLIConfig",
                "llmstruct.ARCHIVE.cli_config.CLIConfig.get_context_config:48"
              ],
              "hash": "544bdf4144751517839424fd04b843c87212dab135d986cfe7e8a15a002b10b9",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-config-cliconfig-get-context-config",
              "summary": "Get context configuration section.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [],
              "called_by": []
            },
            {
              "name": "get_gitignore_patterns",
              "docstring": "Load and normalize patterns from .gitignore.",
              "line_range": [
                52,
                66
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig.get_gitignore_patterns:52#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config.CLIConfig",
                "llmstruct.ARCHIVE.cli_config.CLIConfig.get_gitignore_patterns:52"
              ],
              "hash": "a93f535cbf2fded35a5d0a3e5d47ba31ad8f89a0e2b9137182e9312c9fb012c1",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-config-cliconfig-get-gitignore-patterns",
              "summary": "Load and normalize patterns from .gitignore.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "line.startswith",
                "line.strip",
                "gitignore_path.exists",
                "gitignore_path.open",
                "Path",
                "logging.error"
              ],
              "called_by": []
            },
            {
              "name": "get_exclude_dirs",
              "docstring": "Get directories to exclude from scanning.",
              "line_range": [
                68,
                82
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig.get_exclude_dirs:68#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config.CLIConfig",
                "llmstruct.ARCHIVE.cli_config.CLIConfig.get_exclude_dirs:68"
              ],
              "hash": "0135081391bf2da254dcab02f14a6b7ebc9af1373bb7c85824e3ec1eb07ce716",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-config-cliconfig-get-exclude-dirs",
              "summary": "Get directories to exclude from scanning.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "list",
                "cli_config.get",
                "set",
                "parsing_config.get"
              ],
              "called_by": []
            },
            {
              "name": "get_include_patterns",
              "docstring": "Get file patterns to include.",
              "line_range": [
                84,
                89
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig.get_include_patterns:84#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config.CLIConfig",
                "llmstruct.ARCHIVE.cli_config.CLIConfig.get_include_patterns:84"
              ],
              "hash": "7d9cd972bb5b65ab496c31ca4e699856df1adb7b2b818e2ddd8f295c0f7e23ac",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-config-cliconfig-get-include-patterns",
              "summary": "Get file patterns to include.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "cli_config.get",
                "parsing_config.get"
              ],
              "called_by": []
            },
            {
              "name": "get_exclude_patterns",
              "docstring": "Get file patterns to exclude.",
              "line_range": [
                91,
                96
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig.get_exclude_patterns:91#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config.CLIConfig",
                "llmstruct.ARCHIVE.cli_config.CLIConfig.get_exclude_patterns:91"
              ],
              "hash": "ca9ee32e73ea52465e40c73984c5e754d33066d1e934aa16a83e17283857963b",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-config-cliconfig-get-exclude-patterns",
              "summary": "Get file patterns to exclude.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "cli_config.get",
                "parsing_config.get"
              ],
              "called_by": []
            },
            {
              "name": "get_max_file_size",
              "docstring": "Get maximum file size for processing (in bytes).",
              "line_range": [
                98,
                100
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig.get_max_file_size:98#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config.CLIConfig",
                "llmstruct.ARCHIVE.cli_config.CLIConfig.get_max_file_size:98"
              ],
              "hash": "279cdb8f33ff8181ef544cbfcfd77074b8e09590d50be622dbaf39d3cd11a88b",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-config-cliconfig-get-max-file-size",
              "summary": "Get maximum file size for processing (in bytes).",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [],
              "called_by": []
            },
            {
              "name": "get_auto_update_config",
              "docstring": "Get auto-update configuration.",
              "line_range": [
                102,
                104
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig.get_auto_update_config:102#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config.CLIConfig",
                "llmstruct.ARCHIVE.cli_config.CLIConfig.get_auto_update_config:102"
              ],
              "hash": "4cb2e762f4d10ae334f6b595fadc3f26d1fc059dce26a0699cda84d94cb56f55",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-config-cliconfig-get-auto-update-config",
              "summary": "Get auto-update configuration.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [],
              "called_by": []
            },
            {
              "name": "is_auto_update_enabled",
              "docstring": "Check if auto-update is enabled.",
              "line_range": [
                106,
                108
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig.is_auto_update_enabled:106#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config.CLIConfig",
                "llmstruct.ARCHIVE.cli_config.CLIConfig.is_auto_update_enabled:106"
              ],
              "hash": "c012c8fd31bdb401452a8bac7d19044358b4c2d25d89fb7a94e136c4a71ddc92",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-config-cliconfig-is-auto-update-enabled",
              "summary": "Check if auto-update is enabled.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "self.get_auto_update_config"
              ],
              "called_by": []
            },
            {
              "name": "get_struct_file_path",
              "docstring": "Get path to struct.json file.",
              "line_range": [
                110,
                112
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig.get_struct_file_path:110#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config.CLIConfig",
                "llmstruct.ARCHIVE.cli_config.CLIConfig.get_struct_file_path:110"
              ],
              "hash": "68297fd7990b48ddc1c1bd0c7a6767d0d645cfa02a13ac369edf63fa64d0eb97",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-config-cliconfig-get-struct-file-path",
              "summary": "Get path to struct.json file.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [],
              "called_by": []
            },
            {
              "name": "get_context_file_path",
              "docstring": "Get path to context file.",
              "line_range": [
                114,
                116
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig.get_context_file_path:114#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config.CLIConfig",
                "llmstruct.ARCHIVE.cli_config.CLIConfig.get_context_file_path:114"
              ],
              "hash": "3267a2f85eccaa24e9a5be162d1936956cb48c18f8846c5f5a682e48f5d1e4a2",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-config-cliconfig-get-context-file-path",
              "summary": "Get path to context file.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [],
              "called_by": []
            },
            {
              "name": "save_config",
              "docstring": "Save current configuration to file.",
              "line_range": [
                118,
                124
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig.save_config:118#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config.CLIConfig",
                "llmstruct.ARCHIVE.cli_config.CLIConfig.save_config:118"
              ],
              "hash": "2c0912d0355399b64c7b3a64ede938fbeb34bb9508f6b8f1bb67acbace3b94f0",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-config-cliconfig-save-config",
              "summary": "Save current configuration to file.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "toml.dump",
                "logging.error"
              ],
              "called_by": []
            },
            {
              "name": "update_config",
              "docstring": "Update configuration value.",
              "line_range": [
                126,
                131
              ],
              "parameters": [
                "self",
                "section",
                "key",
                "value"
              ],
              "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig.update_config:126#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config.CLIConfig",
                "llmstruct.ARCHIVE.cli_config.CLIConfig.update_config:126"
              ],
              "hash": "480282aa76c8c8abda339a41be0fa104836ef478cfeb615cb397bfea124790e1",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-config-cliconfig-update-config",
              "summary": "Update configuration value.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "self.save_config"
              ],
              "called_by": []
            },
            {
              "name": "reload_config",
              "docstring": "Reload configuration from file.",
              "line_range": [
                133,
                135
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig.reload_config:133#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config.CLIConfig",
                "llmstruct.ARCHIVE.cli_config.CLIConfig.reload_config:133"
              ],
              "hash": "cce60698addd57cfe13f11410fdd3341fb7154e8a1a5942efa1d0c9737dcea0c",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-config-cliconfig-reload-config",
              "summary": "Reload configuration from file.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "self._load_config"
              ],
              "called_by": []
            }
          ],
          "bases": [],
          "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig:17#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_config",
            "llmstruct.ARCHIVE.cli_config.CLIConfig:17"
          ],
          "hash": "229d3669a4b5ce459ef93d2dcb911c46d35e0f7087fc86a4d31f71a91444db9e",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-config-cliconfig",
          "summary": "Manages CLI configuration from llmstruct.toml and other sources.",
          "summary_source": "docstring",
          "tags": [
            "class",
            "public"
          ]
        }
      ],
      "callgraph": {
        "__init__": [
          "self._load_config",
          "Path"
        ],
        "_load_config": [
          "toml.load",
          "logging.error"
        ],
        "get_cache_config": [],
        "get_copilot_config": [],
        "get_queue_config": [],
        "get_context_config": [],
        "get_gitignore_patterns": [
          "line.startswith",
          "line.strip",
          "gitignore_path.exists",
          "gitignore_path.open",
          "Path",
          "logging.error"
        ],
        "get_exclude_dirs": [
          "list",
          "cli_config.get",
          "set",
          "parsing_config.get"
        ],
        "get_include_patterns": [
          "cli_config.get",
          "parsing_config.get"
        ],
        "get_exclude_patterns": [
          "cli_config.get",
          "parsing_config.get"
        ],
        "get_max_file_size": [],
        "get_auto_update_config": [],
        "is_auto_update_enabled": [
          "self.get_auto_update_config"
        ],
        "get_struct_file_path": [],
        "get_context_file_path": [],
        "save_config": [
          "toml.dump",
          "logging.error"
        ],
        "update_config": [
          "self.save_config"
        ],
        "reload_config": [
          "self._load_config"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "logging",
        "pathlib",
        "toml",
        "typing"
      ],
      "hash": "4e3a5903ff3fcd932118bf5521902da18bc72c67f93835354f70576d1413de49",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.ARCHIVE.cli_config.llmstruct.ARCHIVE.cli_config#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.ARCHIVE",
        "llmstruct.ARCHIVE.cli_config",
        "llmstruct.ARCHIVE.cli_config.llmstruct.ARCHIVE.cli_config"
      ],
      "summary": "CLI configuration management.",
      "summary_source": "docstring",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "00e3dda3-fecc-49c6-9373-4204f1189c4f"
    },
    {
      "module_id": "llmstruct.ARCHIVE.cli_commands",
      "path": "llmstruct/ARCHIVE/cli_commands.py",
      "category": "core",
      "module_doc": "CLI command processing and handlers.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize command processor.",
          "line_range": [
            33,
            72
          ],
          "parameters": [
            "self",
            "root_dir",
            "config",
            "utils"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_commands.__init__:33#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_commands",
            "llmstruct.ARCHIVE.cli_commands.__init__:33"
          ],
          "hash": "63979f6972e7264004c197de7eced1f0947db7629d354f204446ad4dcb806d67",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-commands---init--",
          "summary": "Initialize command processor.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "WorkspaceStateManager",
            "print"
          ],
          "called_by": []
        },
        {
          "name": "set_cache",
          "docstring": "Set cache instance.",
          "line_range": [
            74,
            76
          ],
          "parameters": [
            "self",
            "cache"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_commands.set_cache:74#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_commands",
            "llmstruct.ARCHIVE.cli_commands.set_cache:74"
          ],
          "hash": "1e6890db585bdfcde0ab548d230f3421b4ef00a5ce1b3cf63c108483530f6298",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-commands-set-cache",
          "summary": "Set cache instance.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [],
          "called_by": []
        },
        {
          "name": "set_copilot",
          "docstring": "Set Copilot manager instance.",
          "line_range": [
            78,
            80
          ],
          "parameters": [
            "self",
            "copilot_manager"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_commands.set_copilot:78#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_commands",
            "llmstruct.ARCHIVE.cli_commands.set_copilot:78"
          ],
          "hash": "1a7fae2bcbd37219c82a9229f8ac0cd9780dba27bc2dbf44791985c643cb6657",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-commands-set-copilot",
          "summary": "Set Copilot manager instance.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [],
          "called_by": []
        },
        {
          "name": "process_command",
          "docstring": "Process a command starting with /.",
          "line_range": [
            82,
            98
          ],
          "parameters": [
            "self",
            "command_line"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_commands.process_command:82#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_commands",
            "llmstruct.ARCHIVE.cli_commands.process_command:82"
          ],
          "hash": "bb29d07bb48c1414a08b36c656089d3c51c293fd42d73d11a07327a3c2a5d877",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-commands-process-command",
          "summary": "Process a command starting with /.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "len",
            "command_line.split",
            "print",
            "command_line.strip",
            "logging.error"
          ],
          "called_by": []
        },
        {
          "name": "process_prompt",
          "docstring": "Process a regular user prompt (not a command).",
          "line_range": [
            100,
            152
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_commands.process_prompt:100#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_commands",
            "llmstruct.ARCHIVE.cli_commands.process_prompt:100"
          ],
          "hash": "3c44245198ddd7c64bdcac20cd3a671ca00cc78f924a409961626b69c5f7297a",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-commands-process-prompt",
          "summary": "Process a regular user prompt (not a command).",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "logging.error",
            "len",
            "context_info.get",
            "CopilotEvent",
            "logging.warning",
            "logging.info",
            "get_optimized_context",
            "prompt.strip",
            "context_data.get",
            "print"
          ],
          "called_by": []
        },
        {
          "name": "cmd_help",
          "docstring": "Show help information.",
          "line_range": [
            154,
            217
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_commands.cmd_help:154#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_commands",
            "llmstruct.ARCHIVE.cli_commands.cmd_help:154"
          ],
          "hash": "6012a9083de90b77869b7fe87dbe0859d00a149bf08b58e880306a28ea79796c",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-commands-cmd-help",
          "summary": "Show help information.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "print"
          ],
          "called_by": []
        },
        {
          "name": "cmd_workspace",
          "docstring": "Handle workspace state and permissions management.",
          "line_range": [
            219,
            334
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_commands.cmd_workspace:219#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_commands",
            "llmstruct.ARCHIVE.cli_commands.cmd_workspace:219"
          ],
          "hash": "a6377a20384058ea6a69c9e35f6d1e015a5c06bffa52419bf5bae5bf708c7327",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-commands-cmd-workspace",
          "summary": "Handle workspace state and permissions management.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "state.get",
            "int",
            "logging.error",
            "len",
            "entry.get",
            "permissions.get",
            "args.strip",
            "result.get",
            "boundaries.get",
            "override.get",
            "action_args.split",
            "print"
          ],
          "called_by": []
        },
        {
          "name": "cmd_mode",
          "docstring": "Handle context mode operations with workspace integration.",
          "line_range": [
            336,
            437
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_commands.cmd_mode:336#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_commands",
            "llmstruct.ARCHIVE.cli_commands.cmd_mode:336"
          ],
          "hash": "e471be8f37f7a38a86038bb1c733248b6bf917df0eac424534d220a19f99032a",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-commands-cmd-mode",
          "summary": "Handle context mode operations with workspace integration.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "len",
            "metrics.get",
            "permissions.get",
            "args.strip",
            "args.upper",
            "result.get",
            "get_optimized_context",
            "context_data.get",
            "args.lower",
            "re.findall",
            "print"
          ],
          "called_by": []
        },
        {
          "name": "cmd_view",
          "docstring": "View file or directory contents.",
          "line_range": [
            439,
            478
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_commands.cmd_view:439#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_commands",
            "llmstruct.ARCHIVE.cli_commands.cmd_view:439"
          ],
          "hash": "1deee22a4cf8827589541fd577e2380d71b39c2b11b23b0b03f540a8fac62c55",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-commands-cmd-view",
          "summary": "View file or directory contents.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "os.listdir",
            "sorted",
            "args.strip",
            "print"
          ],
          "called_by": []
        },
        {
          "name": "cmd_write",
          "docstring": "Write content to a file.",
          "line_range": [
            480,
            505
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_commands.cmd_write:480#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_commands",
            "llmstruct.ARCHIVE.cli_commands.cmd_write:480"
          ],
          "hash": "ea45fa5f03580e2fd42ac8e0c0b4b71bb4f1cf33be045e40bade44e570ba3503",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-commands-cmd-write",
          "summary": "Write content to a file.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "len",
            "content.endswith",
            "content.startswith",
            "print",
            "args.split"
          ],
          "called_by": []
        },
        {
          "name": "cmd_queue",
          "docstring": "Handle queue operations.",
          "line_range": [
            507,
            549
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_commands.cmd_queue:507#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_commands",
            "llmstruct.ARCHIVE.cli_commands.cmd_queue:507"
          ],
          "hash": "d6bda3db417490e85c87a2be46236dbe69149ca1894caec6371322ee553902b0",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-commands-cmd-queue",
          "summary": "Handle queue operations.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "len",
            "enumerate",
            "args.strip",
            "json.load",
            "os.remove",
            "queue_data.get",
            "cmd.get",
            "open",
            "print"
          ],
          "called_by": []
        },
        {
          "name": "cmd_cache",
          "docstring": "Handle cache operations.",
          "line_range": [
            551,
            590
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_commands.cmd_cache:551#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_commands",
            "llmstruct.ARCHIVE.cli_commands.cmd_cache:551"
          ],
          "hash": "14fb6fe86b8ce2fc73abeec3e2f54491c0b72b45369c7af323a75d6d7fdbe1b8",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-commands-cmd-cache",
          "summary": "Handle cache operations.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "len",
            "args.strip",
            "stats.get",
            "os.listdir",
            "print"
          ],
          "called_by": []
        },
        {
          "name": "cmd_copilot",
          "docstring": "Handle Copilot operations.",
          "line_range": [
            592,
            626
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_commands.cmd_copilot:592#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_commands",
            "llmstruct.ARCHIVE.cli_commands.cmd_copilot:592"
          ],
          "hash": "4fb5205cdec45b543f4cfd1c85f50654942a56e352d6ca1a7cbb735695833adc",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-commands-cmd-copilot",
          "summary": "Handle Copilot operations.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "json.dumps",
            "args.strip",
            "json.load",
            "open",
            "print"
          ],
          "called_by": []
        },
        {
          "name": "cmd_config",
          "docstring": "Handle configuration operations.",
          "line_range": [
            628,
            660
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_commands.cmd_config:628#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_commands",
            "llmstruct.ARCHIVE.cli_commands.cmd_config:628"
          ],
          "hash": "5ae937855221c184dc0283e9f6932dde08243cf7a2d27ca7164ac55e21371057",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-commands-cmd-config",
          "summary": "Handle configuration operations.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "json.dumps",
            "args.strip",
            "print"
          ],
          "called_by": []
        },
        {
          "name": "cmd_status",
          "docstring": "Show system status.",
          "line_range": [
            662,
            676
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_commands.cmd_status:662#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_commands",
            "llmstruct.ARCHIVE.cli_commands.cmd_status:662"
          ],
          "hash": "258fe91ca5977153ca1654f0a5242b7e36a58db8f8c761ce72272e1c66a5e909",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-commands-cmd-status",
          "summary": "Show system status.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "print"
          ],
          "called_by": []
        },
        {
          "name": "cmd_backup",
          "docstring": "Create backup of a file.",
          "line_range": [
            678,
            693
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_commands.cmd_backup:678#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_commands",
            "llmstruct.ARCHIVE.cli_commands.cmd_backup:678"
          ],
          "hash": "9ca7f02a4ecf65621f63c43f22a37aad18a77b8be8031c174431274f16304eeb",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-commands-cmd-backup",
          "summary": "Create backup of a file.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "args.strip",
            "print"
          ],
          "called_by": []
        },
        {
          "name": "cmd_parse",
          "docstring": "Parse project structure.",
          "line_range": [
            695,
            715
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_commands.cmd_parse:695#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_commands",
            "llmstruct.ARCHIVE.cli_commands.cmd_parse:695"
          ],
          "hash": "92065faf40ff682bf6f774c5706c08f05abbe5a4efa409f0de3e93c526eeed68",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-commands-cmd-parse",
          "summary": "Parse project structure.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "generate_json",
            "print"
          ],
          "called_by": []
        },
        {
          "name": "cmd_audit",
          "docstring": "Handle audit operations.",
          "line_range": [
            717,
            743
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_commands.cmd_audit:717#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_commands",
            "llmstruct.ARCHIVE.cli_commands.cmd_audit:717"
          ],
          "hash": "6923dc15085241e31140c62c40d65a59b972da87caad02b045e8309bbcbfeb65",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-commands-cmd-audit",
          "summary": "Handle audit operations.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "args.strip",
            "print"
          ],
          "called_by": []
        },
        {
          "name": "handle_auto_update",
          "docstring": "Handle auto-update operations.",
          "line_range": [
            745,
            765
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_commands.handle_auto_update:745#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_commands",
            "llmstruct.ARCHIVE.cli_commands.handle_auto_update:745"
          ],
          "hash": "1a434bb1022c21726206e1cb6a47378c6f751f6126a6cdd33b9218dfffa08f98",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-commands-handle-auto-update",
          "summary": "Handle auto-update operations.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "generate_json",
            "print"
          ],
          "called_by": []
        },
        {
          "name": "handle_struct_status",
          "docstring": "Handle struct status operations.",
          "line_range": [
            767,
            791
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_commands.handle_struct_status:767#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_commands",
            "llmstruct.ARCHIVE.cli_commands.handle_struct_status:767"
          ],
          "hash": "31eb3122009a3115e7187d2fbf94aca25a4310fdcfa0a9afa3f8fd3c6ff20df6",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-commands-handle-struct-status",
          "summary": "Handle struct status operations.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "len",
            "struct_data.get",
            "json.load",
            "datetime.fromtimestamp",
            "open",
            "os.stat",
            "print"
          ],
          "called_by": []
        },
        {
          "name": "cmd_context",
          "docstring": "Handle context operations.",
          "line_range": [
            793,
            849
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_commands.cmd_context:793#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_commands",
            "llmstruct.ARCHIVE.cli_commands.cmd_context:793"
          ],
          "hash": "ea4930f004f390ae4cdb08b84d1eeaa085615e257fe310547590bef0b52e23ba",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-commands-cmd-context",
          "summary": "Handle context operations.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "len",
            "metrics.get",
            "args.strip",
            "get_optimized_context",
            "context_data.get",
            "print"
          ],
          "called_by": []
        },
        {
          "name": "cmd_session",
          "docstring": "Handle session operations.",
          "line_range": [
            851,
            902
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_commands.cmd_session:851#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_commands",
            "llmstruct.ARCHIVE.cli_commands.cmd_session:851"
          ],
          "hash": "e730ba1b3720fa165f346eb490a52bbb56bed16c7f93cbdb46b264177be509f0",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-commands-cmd-session",
          "summary": "Handle session operations.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "state.get",
            "len",
            "args.strip",
            "datetime.now",
            "print"
          ],
          "called_by": []
        }
      ],
      "classes": [
        {
          "name": "CommandProcessor",
          "docstring": "Processes CLI commands and user prompts.",
          "line_range": [
            30,
            902
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize command processor.",
              "line_range": [
                33,
                72
              ],
              "parameters": [
                "self",
                "root_dir",
                "config",
                "utils"
              ],
              "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.__init__:33#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor.__init__:33"
              ],
              "hash": "394a47edc78660ad77056f316201365990e542bb55e7b7faa007ef1926228635",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-commands-commandprocessor---init--",
              "summary": "Initialize command processor.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "WorkspaceStateManager",
                "print"
              ],
              "called_by": []
            },
            {
              "name": "set_cache",
              "docstring": "Set cache instance.",
              "line_range": [
                74,
                76
              ],
              "parameters": [
                "self",
                "cache"
              ],
              "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.set_cache:74#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor.set_cache:74"
              ],
              "hash": "436c159d9b94704c01bb6fa162dee7d94bcd85304060ef6f92174238c74fd02b",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-commands-commandprocessor-set-cache",
              "summary": "Set cache instance.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [],
              "called_by": []
            },
            {
              "name": "set_copilot",
              "docstring": "Set Copilot manager instance.",
              "line_range": [
                78,
                80
              ],
              "parameters": [
                "self",
                "copilot_manager"
              ],
              "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.set_copilot:78#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor.set_copilot:78"
              ],
              "hash": "b8768ce4f296b39d8e9f4c925211e6e09beb5675961138781c2cbb15fd90152c",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-commands-commandprocessor-set-copilot",
              "summary": "Set Copilot manager instance.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [],
              "called_by": []
            },
            {
              "name": "process_command",
              "docstring": "Process a command starting with /.",
              "line_range": [
                82,
                98
              ],
              "parameters": [
                "self",
                "command_line"
              ],
              "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.process_command:82#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor.process_command:82"
              ],
              "hash": "6ded44564cdb490c6915f62557f6e46bcd4256d33567c00bff4b9a3b05f52833",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-commands-commandprocessor-process-command",
              "summary": "Process a command starting with /.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "len",
                "command_line.split",
                "print",
                "command_line.strip",
                "logging.error"
              ],
              "called_by": []
            },
            {
              "name": "process_prompt",
              "docstring": "Process a regular user prompt (not a command).",
              "line_range": [
                100,
                152
              ],
              "parameters": [
                "self",
                "prompt"
              ],
              "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.process_prompt:100#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor.process_prompt:100"
              ],
              "hash": "b0b84b8e3eb9945e8574c3a44852b8fb5cc035e97fb9fee45ad2debd814c08bf",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-commands-commandprocessor-process-prompt",
              "summary": "Process a regular user prompt (not a command).",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "logging.error",
                "len",
                "context_info.get",
                "CopilotEvent",
                "logging.warning",
                "logging.info",
                "get_optimized_context",
                "prompt.strip",
                "context_data.get",
                "print"
              ],
              "called_by": []
            },
            {
              "name": "cmd_help",
              "docstring": "Show help information.",
              "line_range": [
                154,
                217
              ],
              "parameters": [
                "self",
                "args"
              ],
              "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_help:154#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_help:154"
              ],
              "hash": "16bc2108d7fe2dea5a659c5738119baddc54a21e653e0404074de92415f4884c",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-commands-commandprocessor-cmd-help",
              "summary": "Show help information.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "print"
              ],
              "called_by": []
            },
            {
              "name": "cmd_workspace",
              "docstring": "Handle workspace state and permissions management.",
              "line_range": [
                219,
                334
              ],
              "parameters": [
                "self",
                "args"
              ],
              "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_workspace:219#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_workspace:219"
              ],
              "hash": "f1e337a868c7cde5b4405ca314e859fe024a4c5d3d3a2c431392682abbf8ee5f",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-commands-commandprocessor-cmd-workspace",
              "summary": "Handle workspace state and permissions management.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "state.get",
                "int",
                "logging.error",
                "len",
                "entry.get",
                "permissions.get",
                "args.strip",
                "result.get",
                "boundaries.get",
                "override.get",
                "action_args.split",
                "print"
              ],
              "called_by": []
            },
            {
              "name": "cmd_mode",
              "docstring": "Handle context mode operations with workspace integration.",
              "line_range": [
                336,
                437
              ],
              "parameters": [
                "self",
                "args"
              ],
              "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_mode:336#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_mode:336"
              ],
              "hash": "d274e919b7e439d6bdeea54f5300e2352c3c05f7a15349a0a35a2432be0cdb08",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-commands-commandprocessor-cmd-mode",
              "summary": "Handle context mode operations with workspace integration.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "len",
                "metrics.get",
                "permissions.get",
                "args.strip",
                "args.upper",
                "result.get",
                "get_optimized_context",
                "context_data.get",
                "args.lower",
                "re.findall",
                "print"
              ],
              "called_by": []
            },
            {
              "name": "cmd_view",
              "docstring": "View file or directory contents.",
              "line_range": [
                439,
                478
              ],
              "parameters": [
                "self",
                "args"
              ],
              "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_view:439#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_view:439"
              ],
              "hash": "59cb10eefd4843edfc9900ccc442cfc0e9033bc0d9dcbf90e03d022604bf51af",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-commands-commandprocessor-cmd-view",
              "summary": "View file or directory contents.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "os.listdir",
                "sorted",
                "args.strip",
                "print"
              ],
              "called_by": []
            },
            {
              "name": "cmd_write",
              "docstring": "Write content to a file.",
              "line_range": [
                480,
                505
              ],
              "parameters": [
                "self",
                "args"
              ],
              "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_write:480#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_write:480"
              ],
              "hash": "c902f47b41b54bcfd0e5b627dc1c2ca33daee100a57044e8c657201bae8a32d1",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-commands-commandprocessor-cmd-write",
              "summary": "Write content to a file.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "len",
                "content.endswith",
                "content.startswith",
                "print",
                "args.split"
              ],
              "called_by": []
            },
            {
              "name": "cmd_queue",
              "docstring": "Handle queue operations.",
              "line_range": [
                507,
                549
              ],
              "parameters": [
                "self",
                "args"
              ],
              "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_queue:507#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_queue:507"
              ],
              "hash": "5134981737bcf7a2332d738df91afb75063321ab0060f4803f94edaf5bb1845c",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-commands-commandprocessor-cmd-queue",
              "summary": "Handle queue operations.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "len",
                "enumerate",
                "args.strip",
                "json.load",
                "os.remove",
                "queue_data.get",
                "cmd.get",
                "open",
                "print"
              ],
              "called_by": []
            },
            {
              "name": "cmd_cache",
              "docstring": "Handle cache operations.",
              "line_range": [
                551,
                590
              ],
              "parameters": [
                "self",
                "args"
              ],
              "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_cache:551#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_cache:551"
              ],
              "hash": "306cb6ae173e87a95a95c0c7be44fc600ed383098f1b0cbe08e9d54692fbcd76",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-commands-commandprocessor-cmd-cache",
              "summary": "Handle cache operations.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "len",
                "args.strip",
                "stats.get",
                "os.listdir",
                "print"
              ],
              "called_by": []
            },
            {
              "name": "cmd_copilot",
              "docstring": "Handle Copilot operations.",
              "line_range": [
                592,
                626
              ],
              "parameters": [
                "self",
                "args"
              ],
              "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_copilot:592#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_copilot:592"
              ],
              "hash": "45f40f53101e24c0d351e45171daef1df47a791969584b816ed47319117b2b5b",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-commands-commandprocessor-cmd-copilot",
              "summary": "Handle Copilot operations.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "json.dumps",
                "args.strip",
                "json.load",
                "open",
                "print"
              ],
              "called_by": []
            },
            {
              "name": "cmd_config",
              "docstring": "Handle configuration operations.",
              "line_range": [
                628,
                660
              ],
              "parameters": [
                "self",
                "args"
              ],
              "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_config:628#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_config:628"
              ],
              "hash": "136c75b88b7782486cdd364a540f58f859d6516c8ac85b934203b947984538c5",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-commands-commandprocessor-cmd-config",
              "summary": "Handle configuration operations.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "json.dumps",
                "args.strip",
                "print"
              ],
              "called_by": []
            },
            {
              "name": "cmd_status",
              "docstring": "Show system status.",
              "line_range": [
                662,
                676
              ],
              "parameters": [
                "self",
                "args"
              ],
              "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_status:662#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_status:662"
              ],
              "hash": "9e7216db178900d3708900712fe187af02ef9330547a54766356fff39f7814c3",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-commands-commandprocessor-cmd-status",
              "summary": "Show system status.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "print"
              ],
              "called_by": []
            },
            {
              "name": "cmd_backup",
              "docstring": "Create backup of a file.",
              "line_range": [
                678,
                693
              ],
              "parameters": [
                "self",
                "args"
              ],
              "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_backup:678#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_backup:678"
              ],
              "hash": "14fdec161beb40bf0a93bbacfe7242a1eb8a3abfc582b109cc717dd3bc5ab351",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-commands-commandprocessor-cmd-backup",
              "summary": "Create backup of a file.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "args.strip",
                "print"
              ],
              "called_by": []
            },
            {
              "name": "cmd_parse",
              "docstring": "Parse project structure.",
              "line_range": [
                695,
                715
              ],
              "parameters": [
                "self",
                "args"
              ],
              "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_parse:695#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_parse:695"
              ],
              "hash": "ff966d50960bbc0bccaa55dccd993cc5815248b3c693f873f597b8c781117940",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-commands-commandprocessor-cmd-parse",
              "summary": "Parse project structure.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "generate_json",
                "print"
              ],
              "called_by": []
            },
            {
              "name": "cmd_audit",
              "docstring": "Handle audit operations.",
              "line_range": [
                717,
                743
              ],
              "parameters": [
                "self",
                "args"
              ],
              "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_audit:717#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_audit:717"
              ],
              "hash": "e57b90a6f0dee5cded047a92a029dfebfb707943e405bb01d1553dc7afaceeaf",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-commands-commandprocessor-cmd-audit",
              "summary": "Handle audit operations.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "args.strip",
                "print"
              ],
              "called_by": []
            },
            {
              "name": "handle_auto_update",
              "docstring": "Handle auto-update operations.",
              "line_range": [
                745,
                765
              ],
              "parameters": [
                "self",
                "args"
              ],
              "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.handle_auto_update:745#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor.handle_auto_update:745"
              ],
              "hash": "256303cd303ef81871b2c55c84617fdb77d3fa261d394d9709e65345e8bed16f",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-commands-commandprocessor-handle-auto-update",
              "summary": "Handle auto-update operations.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "generate_json",
                "print"
              ],
              "called_by": []
            },
            {
              "name": "handle_struct_status",
              "docstring": "Handle struct status operations.",
              "line_range": [
                767,
                791
              ],
              "parameters": [
                "self",
                "args"
              ],
              "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.handle_struct_status:767#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor.handle_struct_status:767"
              ],
              "hash": "d2cf83e544c39332a5ef3145b9537fbb0e3092b2d65af41cd41425315207c5db",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-commands-commandprocessor-handle-struct-status",
              "summary": "Handle struct status operations.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "len",
                "struct_data.get",
                "json.load",
                "datetime.fromtimestamp",
                "open",
                "os.stat",
                "print"
              ],
              "called_by": []
            },
            {
              "name": "cmd_context",
              "docstring": "Handle context operations.",
              "line_range": [
                793,
                849
              ],
              "parameters": [
                "self",
                "args"
              ],
              "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_context:793#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_context:793"
              ],
              "hash": "372ed3d1b517787c19c9093c6f754852e80bd5ebbe5f3bc8006748e084cfdaf7",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-commands-commandprocessor-cmd-context",
              "summary": "Handle context operations.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "len",
                "metrics.get",
                "args.strip",
                "get_optimized_context",
                "context_data.get",
                "print"
              ],
              "called_by": []
            },
            {
              "name": "cmd_session",
              "docstring": "Handle session operations.",
              "line_range": [
                851,
                902
              ],
              "parameters": [
                "self",
                "args"
              ],
              "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_session:851#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_session:851"
              ],
              "hash": "c189c552ce1c62006c33cbfdaae296d9178b6600517ae746b02dc78e4003b029",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-archive-cli-commands-commandprocessor-cmd-session",
              "summary": "Handle session operations.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "state.get",
                "len",
                "args.strip",
                "datetime.now",
                "print"
              ],
              "called_by": []
            }
          ],
          "bases": [],
          "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor:30#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_commands",
            "llmstruct.ARCHIVE.cli_commands.CommandProcessor:30"
          ],
          "hash": "953fcf30aea94a6fe43f250e65493c239fc78e4ee066df2f818aee847d6ebb35",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-archive-cli-commands-commandprocessor",
          "summary": "Processes CLI commands and user prompts.",
          "summary_source": "docstring",
          "tags": [
            "class",
            "public"
          ]
        }
      ],
      "callgraph": {
        "__init__": [
          "WorkspaceStateManager",
          "print"
        ],
        "set_cache": [],
        "set_copilot": [],
        "process_command": [
          "len",
          "command_line.split",
          "print",
          "command_line.strip",
          "logging.error"
        ],
        "process_prompt": [
          "logging.error",
          "len",
          "context_info.get",
          "CopilotEvent",
          "logging.warning",
          "logging.info",
          "get_optimized_context",
          "prompt.strip",
          "context_data.get",
          "print"
        ],
        "cmd_help": [
          "print"
        ],
        "cmd_workspace": [
          "state.get",
          "int",
          "logging.error",
          "len",
          "entry.get",
          "permissions.get",
          "args.strip",
          "result.get",
          "boundaries.get",
          "override.get",
          "action_args.split",
          "print"
        ],
        "cmd_mode": [
          "len",
          "metrics.get",
          "permissions.get",
          "args.strip",
          "args.upper",
          "result.get",
          "get_optimized_context",
          "context_data.get",
          "args.lower",
          "re.findall",
          "print"
        ],
        "cmd_view": [
          "os.listdir",
          "sorted",
          "args.strip",
          "print"
        ],
        "cmd_write": [
          "len",
          "content.endswith",
          "content.startswith",
          "print",
          "args.split"
        ],
        "cmd_queue": [
          "len",
          "enumerate",
          "args.strip",
          "json.load",
          "os.remove",
          "queue_data.get",
          "cmd.get",
          "open",
          "print"
        ],
        "cmd_cache": [
          "len",
          "args.strip",
          "stats.get",
          "os.listdir",
          "print"
        ],
        "cmd_copilot": [
          "json.dumps",
          "args.strip",
          "json.load",
          "open",
          "print"
        ],
        "cmd_config": [
          "json.dumps",
          "args.strip",
          "print"
        ],
        "cmd_status": [
          "print"
        ],
        "cmd_backup": [
          "args.strip",
          "print"
        ],
        "cmd_parse": [
          "generate_json",
          "print"
        ],
        "cmd_audit": [
          "args.strip",
          "print"
        ],
        "handle_auto_update": [
          "generate_json",
          "print"
        ],
        "handle_struct_status": [
          "len",
          "struct_data.get",
          "json.load",
          "datetime.fromtimestamp",
          "open",
          "os.stat",
          "print"
        ],
        "cmd_context": [
          "len",
          "metrics.get",
          "args.strip",
          "get_optimized_context",
          "context_data.get",
          "print"
        ],
        "cmd_session": [
          "state.get",
          "len",
          "args.strip",
          "datetime.now",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "CLIConfig",
        "CLIUtils",
        "CopilotContextManager",
        "CopilotEvent",
        "Dict",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "WorkspaceStateManager",
        "cli_config",
        "cli_utils",
        "copilot",
        "create_context_orchestrator",
        "datetime",
        "generate_json",
        "get_optimized_context",
        "get_optimized_context_for_scenario",
        "initialize_copilot",
        "json",
        "llmstruct.cache",
        "llmstruct.context_orchestrator",
        "llmstruct.copilot",
        "llmstruct.generators.json_generator",
        "logging",
        "os",
        "pathlib",
        "re",
        "subprocess",
        "sys",
        "trigger_copilot_event",
        "typing",
        "workspace"
      ],
      "hash": "dd0d9e75fb410d85bfe10f3e554b2fa45c45847ccb317cd54107e4ac6ce33bec",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.ARCHIVE.cli_commands.llmstruct.ARCHIVE.cli_commands#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.ARCHIVE",
        "llmstruct.ARCHIVE.cli_commands",
        "llmstruct.ARCHIVE.cli_commands.llmstruct.ARCHIVE.cli_commands"
      ],
      "summary": "CLI command processing and handlers.",
      "summary_source": "docstring",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "f67d8032-6795-4cb7-9fea-ebef8cecb426"
    },
    {
      "module_id": "llmstruct.api.__init__",
      "path": "llmstruct/api/__init__.py",
      "category": "cli",
      "module_doc": "LLMStruct FastAPI Module\n\nProvides HTTP REST API access to LLMStruct CLI functionality.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "a9ca65f873c3361ae7a8000072fa4f5b926851fe59f7ae8cecec41df9ba72707",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.api.__init__.llmstruct.api.__init__#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.api",
        "llmstruct.api.__init__",
        "llmstruct.api.__init__.llmstruct.api.__init__"
      ],
      "summary": "LLMStruct FastAPI Module\n\nProvides HTTP REST API access to LLMStruct CLI functionality.",
      "summary_source": "docstring",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "adbcb66b-eb57-4f8f-b3c0-d1d6f762e879"
    },
    {
      "module_id": "llmstruct.api.config",
      "path": "llmstruct/api/config.py",
      "category": "core",
      "module_doc": "Configuration management for LLMStruct FastAPI",
      "functions": [],
      "classes": [
        {
          "name": "Settings",
          "docstring": "Application settings with environment variable support",
          "line_range": [
            12,
            43
          ],
          "methods": [],
          "bases": [
            "BaseSettings"
          ],
          "uid": "llmstruct.api.config.Settings:12#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.config",
            "llmstruct.api.config.Settings:12"
          ],
          "hash": "57b0137f17d174083cdb3d05f5ca0df7a6c49514a0885653c1d2251d5449f52a",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-config-settings",
          "summary": "Application settings with environment variable support",
          "summary_source": "docstring",
          "tags": [
            "class",
            "public"
          ]
        }
      ],
      "callgraph": {},
      "dependencies": [
        "BaseSettings",
        "List",
        "pydantic",
        "pydantic_settings",
        "typing"
      ],
      "hash": "714131daa5c1b3f6d461173939ed6f29e670e6ace0067bac322bd30ca3341f48",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.api.config.llmstruct.api.config#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.api",
        "llmstruct.api.config",
        "llmstruct.api.config.llmstruct.api.config"
      ],
      "summary": "Configuration management for LLMStruct FastAPI",
      "summary_source": "docstring",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "656a9491-2ba6-4785-af94-ebdd5c976398"
    },
    {
      "module_id": "llmstruct.api.app",
      "path": "llmstruct/api/app.py",
      "category": "core",
      "module_doc": "Main FastAPI application for LLMStruct",
      "functions": [
        {
          "name": "root",
          "docstring": "Root endpoint with API information",
          "line_range": [
            78,
            86
          ],
          "parameters": [],
          "decorators": [
            "app.get('/', tags=['root'])"
          ],
          "uid": "llmstruct.api.app.root:78#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.app",
            "llmstruct.api.app.root:78"
          ],
          "hash": "db3cb3ed1e7923b7fbb49d541e810df2ed343938196134d72e18509ae8e38056",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-app-root",
          "summary": "Root endpoint with API information",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "public"
          ],
          "calls": [
            "app.get"
          ],
          "called_by": []
        }
      ],
      "classes": [],
      "callgraph": {
        "root": [
          "app.get"
        ]
      },
      "dependencies": [
        "CORSMiddleware",
        "Depends",
        "FastAPI",
        "GZipMiddleware",
        "api_key_middleware",
        "chat",
        "config",
        "continue_adapter",
        "fastapi",
        "fastapi.middleware.cors",
        "fastapi.middleware.gzip",
        "logging",
        "middleware.auth",
        "middleware.logging",
        "request_logging_middleware",
        "routes",
        "settings",
        "system",
        "uvicorn"
      ],
      "hash": "ce8bc5451d35e263884b85be7e9c7bb6a332b5c3eae63322911e57a1d0eb44c1",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.api.app.llmstruct.api.app#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.api",
        "llmstruct.api.app",
        "llmstruct.api.app.llmstruct.api.app"
      ],
      "summary": "Main FastAPI application for LLMStruct",
      "summary_source": "docstring",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "55599de5-d1bf-46da-b7ac-213066b3801b"
    },
    {
      "module_id": "llmstruct.core.summary_core",
      "path": "llmstruct/core/summary_core.py",
      "category": "core",
      "module_doc": "Summary Core Types and Abstractions\n\nContains base classes, enums, and data structures for the summary system.",
      "functions": [
        {
          "name": "is_empty",
          "docstring": "Check if summary is effectively empty",
          "line_range": [
            30,
            32
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.core.summary_core.is_empty:30#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.summary_core",
            "llmstruct.core.summary_core.is_empty:30"
          ],
          "hash": "bce618d90757bb6d789a8ee0723408594d3fa28a61feae442d1409f3956aaf39",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-summary-core-is-empty",
          "summary": "Check if summary is effectively empty",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [],
          "called_by": []
        },
        {
          "name": "generate_summary",
          "docstring": "Generate summary for code entity",
          "line_range": [
            39,
            46
          ],
          "parameters": [
            "self",
            "code",
            "entity_type",
            "entity_name",
            "docstring"
          ],
          "decorators": [
            "abstractmethod"
          ],
          "uid": "llmstruct.core.summary_core.generate_summary:39#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.summary_core",
            "llmstruct.core.summary_core.generate_summary:39"
          ],
          "hash": "0ddc7dd82cb0672f6e09c88018d76c9e7352c3129675d93bb7b123ba437b9bc4",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-summary-core-generate-summary",
          "summary": "Generate summary for code entity",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [],
          "called_by": []
        },
        {
          "name": "get_provider_name",
          "docstring": "Get provider name",
          "line_range": [
            49,
            51
          ],
          "parameters": [
            "self"
          ],
          "decorators": [
            "abstractmethod"
          ],
          "uid": "llmstruct.core.summary_core.get_provider_name:49#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.summary_core",
            "llmstruct.core.summary_core.get_provider_name:49"
          ],
          "hash": "f03830d0d1bf4599f6d186048da62cb046aac0abe52999ede0456508e3b8d0f8",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-summary-core-get-provider-name",
          "summary": "Get provider name",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [],
          "called_by": []
        }
      ],
      "classes": [
        {
          "name": "SummarySource",
          "docstring": "Source of the summary",
          "line_range": [
            13,
            18
          ],
          "methods": [],
          "bases": [
            "Enum"
          ],
          "uid": "llmstruct.core.summary_core.SummarySource:13#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.summary_core",
            "llmstruct.core.summary_core.SummarySource:13"
          ],
          "hash": "a497862f1fdfdb34a252badec55ea034d4ca706b22f442a5671f064f1f57d801",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-summary-core-summarysource",
          "summary": "Source of the summary",
          "summary_source": "docstring",
          "tags": [
            "class",
            "public"
          ]
        },
        {
          "name": "CodeSummary",
          "docstring": "Container for code summary with metadata",
          "line_range": [
            22,
            32
          ],
          "methods": [
            {
              "name": "is_empty",
              "docstring": "Check if summary is effectively empty",
              "line_range": [
                30,
                32
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.core.summary_core.CodeSummary.is_empty:30#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.summary_core",
                "llmstruct.core.summary_core.CodeSummary",
                "llmstruct.core.summary_core.CodeSummary.is_empty:30"
              ],
              "hash": "7f9af407be92d4979ef19fbe28ab4001ed0f87e1d4bd5633e3476068d1e76014",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-core-summary-core-codesummary-is-empty",
              "summary": "Check if summary is effectively empty",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [],
              "called_by": []
            }
          ],
          "bases": [],
          "uid": "llmstruct.core.summary_core.CodeSummary:22#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.summary_core",
            "llmstruct.core.summary_core.CodeSummary:22"
          ],
          "hash": "75cf2d3c41c0c6500344d9b8795dee1d260b5472ae48b120c757021101942b10",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-summary-core-codesummary",
          "summary": "Container for code summary with metadata",
          "summary_source": "docstring",
          "tags": [
            "class",
            "public"
          ]
        },
        {
          "name": "SummaryProvider",
          "docstring": "Abstract base class for summary providers",
          "line_range": [
            35,
            51
          ],
          "methods": [
            {
              "name": "generate_summary",
              "docstring": "Generate summary for code entity",
              "line_range": [
                39,
                46
              ],
              "parameters": [
                "self",
                "code",
                "entity_type",
                "entity_name",
                "docstring"
              ],
              "uid": "llmstruct.core.summary_core.SummaryProvider.generate_summary:39#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.summary_core",
                "llmstruct.core.summary_core.SummaryProvider",
                "llmstruct.core.summary_core.SummaryProvider.generate_summary:39"
              ],
              "hash": "879fdf5907f47e0e942751d170e4ceb33c2e9e9ab86d5857fef970fb565490da",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-core-summary-core-summaryprovider-generate-summary",
              "summary": "Generate summary for code entity",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [],
              "called_by": []
            },
            {
              "name": "get_provider_name",
              "docstring": "Get provider name",
              "line_range": [
                49,
                51
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.core.summary_core.SummaryProvider.get_provider_name:49#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.summary_core",
                "llmstruct.core.summary_core.SummaryProvider",
                "llmstruct.core.summary_core.SummaryProvider.get_provider_name:49"
              ],
              "hash": "f737b16e1d80939818aef4b674b2cf5aa67218025f64cc39ecc2d6bad0162423",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-core-summary-core-summaryprovider-get-provider-name",
              "summary": "Get provider name",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [],
              "called_by": []
            }
          ],
          "bases": [
            "ABC"
          ],
          "uid": "llmstruct.core.summary_core.SummaryProvider:35#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.summary_core",
            "llmstruct.core.summary_core.SummaryProvider:35"
          ],
          "hash": "5c0b966ddf115c20b97a297926c54c0c28de9bbe0c154a20346527a39f2de96b",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-summary-core-summaryprovider",
          "summary": "Abstract base class for summary providers",
          "summary_source": "docstring",
          "tags": [
            "class",
            "public"
          ]
        }
      ],
      "callgraph": {
        "is_empty": [],
        "generate_summary": [],
        "get_provider_name": []
      },
      "dependencies": [
        "ABC",
        "Enum",
        "List",
        "Optional",
        "abc",
        "abstractmethod",
        "dataclass",
        "dataclasses",
        "enum",
        "typing"
      ],
      "hash": "fb6fa773980dc2f7b3aa8f6576f1a4dff3b2bed0cc3a96fe6ce83e69c83b6c27",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.core.summary_core.llmstruct.core.summary_core#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.core",
        "llmstruct.core.summary_core",
        "llmstruct.core.summary_core.llmstruct.core.summary_core"
      ],
      "summary": "Summary Core Types and Abstractions\n\nContains base classes, enums, and data structures for the summary system.",
      "summary_source": "docstring",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "5edc6c8b-b553-41c3-8114-d42eb594ca93"
    },
    {
      "module_id": "llmstruct.core.hash_utils",
      "path": "llmstruct/core/hash_utils.py",
      "category": "core",
      "module_doc": "Hash Utilities for LLMStruct\n\nProvides consistent hashing for files, functions, and code entities\nto support incremental builds and change detection.",
      "functions": [
        {
          "name": "hash_content",
          "docstring": "Generate hash for string content.\n\nArgs:\n    content: String content to hash\n    algorithm: Hash algorithm (sha256, md5, sha1)\n    \nReturns:\n    Hex digest of the hash",
          "line_range": [
            14,
            30
          ],
          "parameters": [
            "content",
            "algorithm"
          ],
          "decorators": [],
          "uid": "llmstruct.core.hash_utils.hash_content:14#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.hash_utils",
            "llmstruct.core.hash_utils.hash_content:14"
          ],
          "hash": "fec4da722ef311003ac0c59137e980d83ecbc8daeb022d2b4841e235226c74b8",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-hash-utils-hash-content",
          "summary": "Generate hash for string content",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "hashlib.new",
            "content.encode",
            "hasher.update",
            "hasher.hexdigest"
          ],
          "called_by": [
            "hash_entity",
            "hash_source",
            "quick_content_hash"
          ]
        },
        {
          "name": "hash_file",
          "docstring": "Generate hash for file content.\n\nArgs:\n    file_path: Path to file\n    algorithm: Hash algorithm\n    \nReturns:\n    Hex digest of file hash, None if file doesn't exist",
          "line_range": [
            33,
            56
          ],
          "parameters": [
            "file_path",
            "algorithm"
          ],
          "decorators": [],
          "uid": "llmstruct.core.hash_utils.hash_file:33#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.hash_utils",
            "llmstruct.core.hash_utils.hash_file:33"
          ],
          "hash": "fa1b8c8680c3ad1b715764a1e407adf0b40e814ada9cb931d5fbca6b2e0c7720",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-hash-utils-hash-file",
          "summary": "Generate hash for file content",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "hasher.update",
            "f.read",
            "path.is_file",
            "path.exists",
            "hashlib.new",
            "iter",
            "hasher.hexdigest",
            "Path",
            "open"
          ],
          "called_by": [
            "has_file_changed",
            "create_file_hash_map",
            "create_incremental_hash_database",
            "quick_file_hash"
          ]
        },
        {
          "name": "hash_source",
          "docstring": "Generate hash for source code content.\n\nNormalizes whitespace and removes comments for consistent hashing.\n\nArgs:\n    content: Source code content\n    algorithm: Hash algorithm\n    \nReturns:\n    Hex digest of normalized source hash",
          "line_range": [
            59,
            77
          ],
          "parameters": [
            "content",
            "algorithm"
          ],
          "decorators": [],
          "uid": "llmstruct.core.hash_utils.hash_source:59#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.hash_utils",
            "llmstruct.core.hash_utils.hash_source:59"
          ],
          "hash": "047feb051edaf01138da6efab3faee059413a02616891be861964083a92ca1dc",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-hash-utils-hash-source",
          "summary": "Generate hash for source code content",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "normalize_source_for_hashing",
            "hash_content"
          ],
          "called_by": [
            "quick_source_hash"
          ]
        },
        {
          "name": "normalize_source_for_hashing",
          "docstring": "Normalize source code for consistent hashing.\n\n- Removes leading/trailing whitespace\n- Normalizes line endings\n- Removes empty lines\n- Strips inline comments (# comments)\n\nArgs:\n    content: Source code content\n    \nReturns:\n    Normalized content",
          "line_range": [
            80,
            127
          ],
          "parameters": [
            "content"
          ],
          "decorators": [],
          "uid": "llmstruct.core.hash_utils.normalize_source_for_hashing:80#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.hash_utils",
            "llmstruct.core.hash_utils.normalize_source_for_hashing:80"
          ],
          "hash": "6e9c92d688035487ec44b7e81ac537a1c4c5edaab0cf0ccbe04c4a7b1360bba1",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-hash-utils-normalize-source-for-hashing",
          "summary": "Normalize source code for consistent hashing",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "lines.append",
            "enumerate",
            "line.strip",
            "content.splitlines"
          ],
          "called_by": [
            "hash_entity",
            "hash_source"
          ]
        },
        {
          "name": "hash_entity",
          "docstring": "Generate hash for a code entity (function, class, etc.).\n\nUses entity content and metadata for hashing.\n\nArgs:\n    entity: Entity dictionary with 'content', 'name', 'type' keys\n    algorithm: Hash algorithm\n    \nReturns:\n    Hex digest of entity hash",
          "line_range": [
            130,
            171
          ],
          "parameters": [
            "entity",
            "algorithm"
          ],
          "decorators": [],
          "uid": "llmstruct.core.hash_utils.hash_entity:130#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.hash_utils",
            "llmstruct.core.hash_utils.hash_entity:130"
          ],
          "hash": "0ae6671255d0a6bfeb5cc7bbe210074c7e1537cc64c2a6aaa289169302104bfe",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-hash-utils-hash-entity",
          "summary": "Generate hash for a code entity (function, class, etc.)",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "normalize_source_for_hashing",
            "p.get",
            "hash_content",
            "hash_parts.append"
          ],
          "called_by": []
        },
        {
          "name": "create_file_hash_map",
          "docstring": "Create hash map for multiple files.\n\nArgs:\n    file_paths: List of file paths\n    algorithm: Hash algorithm\n    \nReturns:\n    Dictionary mapping file paths to their hashes",
          "line_range": [
            174,
            188
          ],
          "parameters": [
            "file_paths",
            "algorithm"
          ],
          "decorators": [],
          "uid": "llmstruct.core.hash_utils.create_file_hash_map:174#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.hash_utils",
            "llmstruct.core.hash_utils.create_file_hash_map:174"
          ],
          "hash": "7393e9bdfc51dec6f8bdb42bd005f95e80e88249e98cdb1749fde1809365572f",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-hash-utils-create-file-hash-map",
          "summary": "Create hash map for multiple files",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "hash_file"
          ],
          "called_by": []
        },
        {
          "name": "has_file_changed",
          "docstring": "Check if file has changed since previous hash.\n\nArgs:\n    file_path: Path to file\n    previous_hash: Previously computed hash\n    algorithm: Hash algorithm\n    \nReturns:\n    True if file has changed, False otherwise",
          "line_range": [
            191,
            204
          ],
          "parameters": [
            "file_path",
            "previous_hash",
            "algorithm"
          ],
          "decorators": [],
          "uid": "llmstruct.core.hash_utils.has_file_changed:191#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.hash_utils",
            "llmstruct.core.hash_utils.has_file_changed:191"
          ],
          "hash": "67beb5e3aa78c4a9f9680f408b29e42664bed96d36b6a2b16e29e45dda87927b",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-hash-utils-has-file-changed",
          "summary": "Check if file has changed since previous hash",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "hash_file"
          ],
          "called_by": []
        },
        {
          "name": "create_incremental_hash_database",
          "docstring": "Create hash database for incremental builds.\n\nArgs:\n    base_path: Base directory to scan\n    file_patterns: List of glob patterns for files to include\n    algorithm: Hash algorithm\n    \nReturns:\n    Dictionary mapping file paths to hashes",
          "line_range": [
            207,
            235
          ],
          "parameters": [
            "base_path",
            "file_patterns",
            "algorithm"
          ],
          "decorators": [],
          "uid": "llmstruct.core.hash_utils.create_incremental_hash_database:207#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.hash_utils",
            "llmstruct.core.hash_utils.create_incremental_hash_database:207"
          ],
          "hash": "4bd873231de2b77df775209fd8485fe1613dc7f6b29de94b3680450b0df3b2dc",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-hash-utils-create-incremental-hash-database",
          "summary": "Create hash database for incremental builds",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "file_path.relative_to",
            "Path",
            "hash_file",
            "file_path.is_file",
            "base_path.glob",
            "str"
          ],
          "called_by": []
        },
        {
          "name": "compare_hash_databases",
          "docstring": "Compare two hash databases to find changes.\n\nArgs:\n    old_db: Previous hash database\n    new_db: Current hash database\n    \nReturns:\n    Dictionary with 'added', 'modified', 'deleted' file lists",
          "line_range": [
            238,
            265
          ],
          "parameters": [
            "old_db",
            "new_db"
          ],
          "decorators": [],
          "uid": "llmstruct.core.hash_utils.compare_hash_databases:238#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.hash_utils",
            "llmstruct.core.hash_utils.compare_hash_databases:238"
          ],
          "hash": "24f3070c7d80788c96b28a6fbba953592f95683a1a0f269d4402bef08a99e4b7",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-hash-utils-compare-hash-databases",
          "summary": "Compare two hash databases to find changes",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "list",
            "set",
            "old_db.keys",
            "sorted",
            "modified.append",
            "new_db.keys"
          ],
          "called_by": []
        },
        {
          "name": "quick_file_hash",
          "docstring": "Quick SHA-256 hash of a file",
          "line_range": [
            270,
            272
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": [],
          "uid": "llmstruct.core.hash_utils.quick_file_hash:270#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.hash_utils",
            "llmstruct.core.hash_utils.quick_file_hash:270"
          ],
          "hash": "33ae6f768b288b556e0ae2bb14700e9f8c00b446c1e43747757d23ad4bcd4652",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-hash-utils-quick-file-hash",
          "summary": "Quick SHA-256 hash of a file",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "hash_file"
          ],
          "called_by": []
        },
        {
          "name": "quick_content_hash",
          "docstring": "Quick SHA-256 hash of content",
          "line_range": [
            275,
            277
          ],
          "parameters": [
            "content"
          ],
          "decorators": [],
          "uid": "llmstruct.core.hash_utils.quick_content_hash:275#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.hash_utils",
            "llmstruct.core.hash_utils.quick_content_hash:275"
          ],
          "hash": "93b10947b0b5caae4297b8476f326dc784a5f9961625402f05f2a4dc0da4a17d",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-hash-utils-quick-content-hash",
          "summary": "Quick SHA-256 hash of content",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "hash_content"
          ],
          "called_by": []
        },
        {
          "name": "quick_source_hash",
          "docstring": "Quick SHA-256 hash of normalized source code",
          "line_range": [
            280,
            282
          ],
          "parameters": [
            "source_code"
          ],
          "decorators": [],
          "uid": "llmstruct.core.hash_utils.quick_source_hash:280#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.hash_utils",
            "llmstruct.core.hash_utils.quick_source_hash:280"
          ],
          "hash": "0f5d8085a445868b9c8f42276d2850ade224a908e296ece8042fe7580acd07d2",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-hash-utils-quick-source-hash",
          "summary": "Quick SHA-256 hash of normalized source code",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "hash_source"
          ],
          "called_by": []
        }
      ],
      "classes": [],
      "callgraph": {
        "hash_content": [
          "hashlib.new",
          "content.encode",
          "hasher.update",
          "hasher.hexdigest"
        ],
        "hash_file": [
          "hasher.update",
          "f.read",
          "path.is_file",
          "path.exists",
          "hashlib.new",
          "iter",
          "hasher.hexdigest",
          "Path",
          "open"
        ],
        "hash_source": [
          "normalize_source_for_hashing",
          "hash_content"
        ],
        "normalize_source_for_hashing": [
          "lines.append",
          "enumerate",
          "line.strip",
          "content.splitlines"
        ],
        "hash_entity": [
          "normalize_source_for_hashing",
          "p.get",
          "hash_content",
          "hash_parts.append"
        ],
        "create_file_hash_map": [
          "hash_file"
        ],
        "has_file_changed": [
          "hash_file"
        ],
        "create_incremental_hash_database": [
          "file_path.relative_to",
          "Path",
          "hash_file",
          "file_path.is_file",
          "base_path.glob",
          "str"
        ],
        "compare_hash_databases": [
          "list",
          "set",
          "old_db.keys",
          "sorted",
          "modified.append",
          "new_db.keys"
        ],
        "quick_file_hash": [
          "hash_file"
        ],
        "quick_content_hash": [
          "hash_content"
        ],
        "quick_source_hash": [
          "hash_source"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "hashlib",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": "a09dfbc3793462b66bfbb6489f69e55e430eb5ea5bce1679e1a365aeefcc2527",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.core.hash_utils.llmstruct.core.hash_utils#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.core",
        "llmstruct.core.hash_utils",
        "llmstruct.core.hash_utils.llmstruct.core.hash_utils"
      ],
      "summary": "Hash Utilities for LLMStruct\n\nProvides consistent hashing for files, functions, and code entities\nto support incremen...",
      "summary_source": "docstring",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "9aecac0a-ca45-4549-b211-7d43c3ceee7c"
    },
    {
      "module_id": "llmstruct.core.summary_providers",
      "path": "llmstruct/core/summary_providers.py",
      "category": "core",
      "module_doc": "Summary Providers Implementation\n\nConcrete implementations of summary providers:\n- HeuristicProvider: Fast, offline, deterministic (default)  \n- LLMProvider: AI-powered but optional and disabled by default\n- SummarySystem: Main orchestrator",
      "functions": [
        {
          "name": "get_summary_system",
          "docstring": "Get global summary system instance",
          "line_range": [
            346,
            351
          ],
          "parameters": [],
          "decorators": [],
          "uid": "llmstruct.core.summary_providers.get_summary_system:346#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.summary_providers",
            "llmstruct.core.summary_providers.get_summary_system:346"
          ],
          "hash": "cf17f96e29b1be4f78d7c22074397529dae0b7fb32fe6eefa889b102ad8cc0a9",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-summary-providers-get-summary-system",
          "summary": "Get global summary system instance",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "SummarySystem"
          ],
          "called_by": [
            "generate_summary"
          ]
        },
        {
          "name": "generate_summary",
          "docstring": "Generate summary using the configured provider",
          "line_range": [
            354,
            362
          ],
          "parameters": [
            "code",
            "entity_type",
            "entity_name",
            "docstring"
          ],
          "decorators": [],
          "uid": "llmstruct.core.summary_providers.generate_summary:354#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.summary_providers",
            "llmstruct.core.summary_providers.generate_summary:354"
          ],
          "hash": "388395653f28a78d36d85c8d9be21dc2ecde9ca698772a73a2c68ff2898040ed",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-summary-providers-generate-summary",
          "summary": "Generate summary using the configured provider",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "get_summary_system"
          ],
          "called_by": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            28,
            29
          ],
          "parameters": [
            "self",
            "max_length"
          ],
          "decorators": [],
          "uid": "llmstruct.core.summary_providers.__init__:28#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.summary_providers",
            "llmstruct.core.summary_providers.__init__:28"
          ],
          "hash": "43371322618f5dae110b9db73c9fce93bbff13f26e2415ba2d75364128c7038c",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-summary-providers---init--",
          "summary": "Function for init",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "HeuristicProvider",
            "LLMProvider"
          ],
          "called_by": []
        },
        {
          "name": "generate_summary",
          "docstring": "Generate heuristic summary",
          "line_range": [
            31,
            69
          ],
          "parameters": [
            "self",
            "code",
            "entity_type",
            "entity_name",
            "docstring"
          ],
          "decorators": [],
          "uid": "llmstruct.core.summary_providers.generate_summary:31#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.summary_providers",
            "llmstruct.core.summary_providers.generate_summary:31"
          ],
          "hash": "ab6119924425a943db35627bc9da54aae3245ba329162ace0427c0c36656bde4",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-summary-providers-generate-summary",
          "summary": "Generate heuristic summary",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "get_summary_system"
          ],
          "called_by": []
        },
        {
          "name": "_clean_docstring",
          "docstring": "Clean and truncate docstring",
          "line_range": [
            71,
            88
          ],
          "parameters": [
            "self",
            "docstring"
          ],
          "decorators": [],
          "uid": "llmstruct.core.summary_providers._clean_docstring:71#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.summary_providers",
            "llmstruct.core.summary_providers._clean_docstring:71"
          ],
          "hash": "d93f6b948daf07e662f2e9d1837c84206dabf2ac62c3baad577731c858010ef3",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-summary-providers--clean-docstring",
          "summary": "Clean and truncate docstring",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "re.sub",
            "len",
            "re.split"
          ],
          "called_by": []
        },
        {
          "name": "_generate_heuristic_summary",
          "docstring": "Generate summary based on naming patterns and code structure",
          "line_range": [
            90,
            128
          ],
          "parameters": [
            "self",
            "entity_type",
            "entity_name",
            "code"
          ],
          "decorators": [],
          "uid": "llmstruct.core.summary_providers._generate_heuristic_summary:90#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.summary_providers",
            "llmstruct.core.summary_providers._generate_heuristic_summary:90"
          ],
          "hash": "0bd48cad480fc5f6959754837237eb6c90a4ebd9c20d954f0ffb60fb72e3d038",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-summary-providers--generate-heuristic-summary",
          "summary": "Generate summary based on naming patterns and code structure",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "name_lower.startswith",
            "entity_name.lower",
            "name_lower.endswith",
            "entity_type.title",
            "self._humanize_name"
          ],
          "called_by": []
        },
        {
          "name": "_humanize_name",
          "docstring": "Convert snake_case or CamelCase to human readable",
          "line_range": [
            130,
            139
          ],
          "parameters": [
            "self",
            "name"
          ],
          "decorators": [],
          "uid": "llmstruct.core.summary_providers._humanize_name:130#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.summary_providers",
            "llmstruct.core.summary_providers._humanize_name:130"
          ],
          "hash": "eef5831388e276e0ac6bf70a593fee0da313262e1f8f17970b4d24edcc02a5dc",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-summary-providers--humanize-name",
          "summary": "Convert snake_case or CamelCase to human readable",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "name.split",
            "re.findall",
            "word.lower"
          ],
          "called_by": []
        },
        {
          "name": "_extract_tags_from_docstring",
          "docstring": "Extract tags from docstring content",
          "line_range": [
            141,
            160
          ],
          "parameters": [
            "self",
            "docstring"
          ],
          "decorators": [],
          "uid": "llmstruct.core.summary_providers._extract_tags_from_docstring:141#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.summary_providers",
            "llmstruct.core.summary_providers._extract_tags_from_docstring:141"
          ],
          "hash": "d266379303c0475c5de9742597aa48a9941eab74a98674497fd5e74fcabe37c6",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-summary-providers--extract-tags-from-docstring",
          "summary": "Extract tags from docstring content",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "docstring.lower",
            "any",
            "tags.append"
          ],
          "called_by": []
        },
        {
          "name": "_extract_tags_from_code",
          "docstring": "Extract tags from code analysis",
          "line_range": [
            162,
            187
          ],
          "parameters": [
            "self",
            "entity_type",
            "entity_name",
            "code"
          ],
          "decorators": [],
          "uid": "llmstruct.core.summary_providers._extract_tags_from_code:162#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.summary_providers",
            "llmstruct.core.summary_providers._extract_tags_from_code:162"
          ],
          "hash": "1568b60a5c9d3d618c9d7da8c1ebde75bb1f53d7a84876ffe6ea8bee9e6a0df0",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-summary-providers--extract-tags-from-code",
          "summary": "Extract tags from code analysis",
          "summary_source": "docstring",
          "tags": [
            "async",
            "classmethod",
            "function",
            "private",
            "property",
            "static"
          ],
          "calls": [
            "tags.append",
            "entity_name.startswith"
          ],
          "called_by": []
        },
        {
          "name": "get_provider_name",
          "docstring": "Get provider name for identification",
          "line_range": [
            189,
            191
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.core.summary_providers.get_provider_name:189#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.summary_providers",
            "llmstruct.core.summary_providers.get_provider_name:189"
          ],
          "hash": "56f2d15c21f3bd727e407684e9ef83de86b52ecc8f7e4efb0337bf146ca1f49f",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-summary-providers-get-provider-name",
          "summary": "Get provider name for identification",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [],
          "called_by": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            201,
            203
          ],
          "parameters": [
            "self",
            "api_key"
          ],
          "decorators": [],
          "uid": "llmstruct.core.summary_providers.__init__:201#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.summary_providers",
            "llmstruct.core.summary_providers.__init__:201"
          ],
          "hash": "d762b29cc3e492be87f93062b210158467409f37c800325c995dd251ec9d3a88",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-summary-providers---init--",
          "summary": "Function for init",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "HeuristicProvider",
            "LLMProvider"
          ],
          "called_by": []
        },
        {
          "name": "generate_summary",
          "docstring": "Generate LLM-powered summary",
          "line_range": [
            205,
            243
          ],
          "parameters": [
            "self",
            "code",
            "entity_type",
            "entity_name",
            "docstring"
          ],
          "decorators": [],
          "uid": "llmstruct.core.summary_providers.generate_summary:205#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.summary_providers",
            "llmstruct.core.summary_providers.generate_summary:205"
          ],
          "hash": "8aab5910ff13958c49ed2819a3bfc469c3f5d6a8e3def16b3a1eee91191df8e5",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-summary-providers-generate-summary",
          "summary": "Generate LLM-powered summary",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "get_summary_system"
          ],
          "called_by": []
        },
        {
          "name": "_create_cache_key",
          "docstring": "Create cache key for LLM results",
          "line_range": [
            245,
            248
          ],
          "parameters": [
            "self",
            "code",
            "entity_type",
            "entity_name"
          ],
          "decorators": [],
          "uid": "llmstruct.core.summary_providers._create_cache_key:245#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.summary_providers",
            "llmstruct.core.summary_providers._create_cache_key:245"
          ],
          "hash": "7184a8357f3531867ee8aab8513c3330187b2707ab2f4165058c4b542ee93206",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-summary-providers--create-cache-key",
          "summary": "Create cache key for LLM results",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "content.encode",
            "hashlib.md5"
          ],
          "called_by": []
        },
        {
          "name": "_call_llm_api",
          "docstring": "Call LLM API to generate summary",
          "line_range": [
            250,
            266
          ],
          "parameters": [
            "self",
            "code",
            "entity_type",
            "entity_name",
            "docstring"
          ],
          "decorators": [],
          "uid": "llmstruct.core.summary_providers._call_llm_api:250#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.summary_providers",
            "llmstruct.core.summary_providers._call_llm_api:250"
          ],
          "hash": "99393e3bc1dd5db6b07af95d1210a75c13debff262d51ea6700aa4dec15e66c4",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-summary-providers--call-llm-api",
          "summary": "Call LLM API to generate summary",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private",
            "public"
          ],
          "calls": [
            "CodeSummary",
            "self._create_prompt",
            "get_config"
          ],
          "called_by": []
        },
        {
          "name": "_create_prompt",
          "docstring": "Create LLM prompt for summary generation",
          "line_range": [
            268,
            295
          ],
          "parameters": [
            "self",
            "code",
            "entity_type",
            "entity_name",
            "docstring"
          ],
          "decorators": [],
          "uid": "llmstruct.core.summary_providers._create_prompt:268#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.summary_providers",
            "llmstruct.core.summary_providers._create_prompt:268"
          ],
          "hash": "c8c689b8a86484b19fff4084e207c760db5884fb90891ddb4bb2db44ee1f2f62",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-summary-providers--create-prompt",
          "summary": "Create LLM prompt for summary generation",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "get_config"
          ],
          "called_by": []
        },
        {
          "name": "get_provider_name",
          "docstring": "Get provider name for identification",
          "line_range": [
            297,
            299
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.core.summary_providers.get_provider_name:297#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.summary_providers",
            "llmstruct.core.summary_providers.get_provider_name:297"
          ],
          "hash": "31841cf859c06ebad9de4f128b4c810cf1cea546c7d527bd096fbedd1d790370",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-summary-providers-get-provider-name",
          "summary": "Get provider name for identification",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [],
          "called_by": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            305,
            307
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.core.summary_providers.__init__:305#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.summary_providers",
            "llmstruct.core.summary_providers.__init__:305"
          ],
          "hash": "6505577ade9ac70cd86970fc2fe17456f95f1f2e9d76d40fda16a6405260852f",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-summary-providers---init--",
          "summary": "Function for init",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "HeuristicProvider",
            "LLMProvider"
          ],
          "called_by": []
        },
        {
          "name": "generate_summary",
          "docstring": "Generate summary using configured provider",
          "line_range": [
            309,
            332
          ],
          "parameters": [
            "self",
            "code",
            "entity_type",
            "entity_name",
            "docstring"
          ],
          "decorators": [],
          "uid": "llmstruct.core.summary_providers.generate_summary:309#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.summary_providers",
            "llmstruct.core.summary_providers.generate_summary:309"
          ],
          "hash": "fff44a860f6b7661bf4a0ca30760a836c810662be85f5e96415632de487b8322",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-summary-providers-generate-summary",
          "summary": "Generate summary using configured provider",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "get_summary_system"
          ],
          "called_by": []
        },
        {
          "name": "get_active_provider",
          "docstring": "Get name of currently active provider",
          "line_range": [
            334,
            339
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.core.summary_providers.get_active_provider:334#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.summary_providers",
            "llmstruct.core.summary_providers.get_active_provider:334"
          ],
          "hash": "cedc1ffe93391197241182a73b9d0aab9885da903f6289fbf45955ed43e704f7",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-summary-providers-get-active-provider",
          "summary": "Get name of currently active provider",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "is_llm_enabled",
            "get_config"
          ],
          "called_by": []
        }
      ],
      "classes": [
        {
          "name": "HeuristicProvider",
          "docstring": "Fast, deterministic summary provider using heuristics.\n\nFallback chain:\n1. Extract and clean docstring (confidence: 0.9)\n2. Generate from function/class name (confidence: 0.3)\n3. Return empty (confidence: 0.0)",
          "line_range": [
            18,
            191
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                28,
                29
              ],
              "parameters": [
                "self",
                "max_length"
              ],
              "uid": "llmstruct.core.summary_providers.HeuristicProvider.__init__:28#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.summary_providers",
                "llmstruct.core.summary_providers.HeuristicProvider",
                "llmstruct.core.summary_providers.HeuristicProvider.__init__:28"
              ],
              "hash": "b40c33310510144111555ddf4ea5f58d262d798972c2534d05bcb4032806ccd7",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-core-summary-providers-heuristicprovider---init--",
              "summary": "Method for heuristicprovider. init",
              "summary_source": "heuristic",
              "tags": [
                "method",
                "private",
                "public"
              ],
              "calls": [
                "HeuristicProvider",
                "LLMProvider"
              ],
              "called_by": []
            },
            {
              "name": "generate_summary",
              "docstring": "Generate heuristic summary",
              "line_range": [
                31,
                69
              ],
              "parameters": [
                "self",
                "code",
                "entity_type",
                "entity_name",
                "docstring"
              ],
              "uid": "llmstruct.core.summary_providers.HeuristicProvider.generate_summary:31#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.summary_providers",
                "llmstruct.core.summary_providers.HeuristicProvider",
                "llmstruct.core.summary_providers.HeuristicProvider.generate_summary:31"
              ],
              "hash": "b372915e7ffdec09d912a943f8c17035f42b730c9d85fe7ea8040a73ec373672",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-core-summary-providers-heuristicprovider-generate-summary",
              "summary": "Generate heuristic summary",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "get_summary_system"
              ],
              "called_by": []
            },
            {
              "name": "_clean_docstring",
              "docstring": "Clean and truncate docstring",
              "line_range": [
                71,
                88
              ],
              "parameters": [
                "self",
                "docstring"
              ],
              "uid": "llmstruct.core.summary_providers.HeuristicProvider._clean_docstring:71#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.summary_providers",
                "llmstruct.core.summary_providers.HeuristicProvider",
                "llmstruct.core.summary_providers.HeuristicProvider._clean_docstring:71"
              ],
              "hash": "a199e02182d46a08c05dced578490ae314e37f012c7eb33f9aca325e0bbc1c8d",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-core-summary-providers-heuristicprovider--clean-docstring",
              "summary": "Clean and truncate docstring",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "re.sub",
                "len",
                "re.split"
              ],
              "called_by": []
            },
            {
              "name": "_generate_heuristic_summary",
              "docstring": "Generate summary based on naming patterns and code structure",
              "line_range": [
                90,
                128
              ],
              "parameters": [
                "self",
                "entity_type",
                "entity_name",
                "code"
              ],
              "uid": "llmstruct.core.summary_providers.HeuristicProvider._generate_heuristic_summary:90#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.summary_providers",
                "llmstruct.core.summary_providers.HeuristicProvider",
                "llmstruct.core.summary_providers.HeuristicProvider._generate_heuristic_summary:90"
              ],
              "hash": "b0e963e48560359345bf20b6ffa5b89db6c9d7a010c991b4767e37c6f7b658cb",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-core-summary-providers-heuristicprovider--generate-heuristic-summary",
              "summary": "Generate summary based on naming patterns and code structure",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "name_lower.startswith",
                "entity_name.lower",
                "name_lower.endswith",
                "entity_type.title",
                "self._humanize_name"
              ],
              "called_by": []
            },
            {
              "name": "_humanize_name",
              "docstring": "Convert snake_case or CamelCase to human readable",
              "line_range": [
                130,
                139
              ],
              "parameters": [
                "self",
                "name"
              ],
              "uid": "llmstruct.core.summary_providers.HeuristicProvider._humanize_name:130#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.summary_providers",
                "llmstruct.core.summary_providers.HeuristicProvider",
                "llmstruct.core.summary_providers.HeuristicProvider._humanize_name:130"
              ],
              "hash": "6b751afa99cfa4ff36bf1c2ad13ae6ff9e818b4c587eac2d3ac5a543075b8996",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-core-summary-providers-heuristicprovider--humanize-name",
              "summary": "Convert snake_case or CamelCase to human readable",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "name.split",
                "re.findall",
                "word.lower"
              ],
              "called_by": []
            },
            {
              "name": "_extract_tags_from_docstring",
              "docstring": "Extract tags from docstring content",
              "line_range": [
                141,
                160
              ],
              "parameters": [
                "self",
                "docstring"
              ],
              "uid": "llmstruct.core.summary_providers.HeuristicProvider._extract_tags_from_docstring:141#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.summary_providers",
                "llmstruct.core.summary_providers.HeuristicProvider",
                "llmstruct.core.summary_providers.HeuristicProvider._extract_tags_from_docstring:141"
              ],
              "hash": "08f692927b31c5f79e352d8b12226597fa54b2f602ae351cdda50a75e6a0900d",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-core-summary-providers-heuristicprovider--extract-tags-from-docstring",
              "summary": "Extract tags from docstring content",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "docstring.lower",
                "any",
                "tags.append"
              ],
              "called_by": []
            },
            {
              "name": "_extract_tags_from_code",
              "docstring": "Extract tags from code analysis",
              "line_range": [
                162,
                187
              ],
              "parameters": [
                "self",
                "entity_type",
                "entity_name",
                "code"
              ],
              "uid": "llmstruct.core.summary_providers.HeuristicProvider._extract_tags_from_code:162#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.summary_providers",
                "llmstruct.core.summary_providers.HeuristicProvider",
                "llmstruct.core.summary_providers.HeuristicProvider._extract_tags_from_code:162"
              ],
              "hash": "55cf52d19bc667653dd05c0b0636de4a0f93bd7b3c162abd10c5c0564d92a879",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-core-summary-providers-heuristicprovider--extract-tags-from-code",
              "summary": "Extract tags from code analysis",
              "summary_source": "docstring",
              "tags": [
                "async",
                "classmethod",
                "method",
                "private",
                "property",
                "static"
              ],
              "calls": [
                "tags.append",
                "entity_name.startswith"
              ],
              "called_by": []
            },
            {
              "name": "get_provider_name",
              "docstring": "Get provider name for identification",
              "line_range": [
                189,
                191
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.core.summary_providers.HeuristicProvider.get_provider_name:189#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.summary_providers",
                "llmstruct.core.summary_providers.HeuristicProvider",
                "llmstruct.core.summary_providers.HeuristicProvider.get_provider_name:189"
              ],
              "hash": "e39a24a45ef587fe80957d95adb72e42e66b4c363c6ea28d0b312ca46cfa80ce",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-core-summary-providers-heuristicprovider-get-provider-name",
              "summary": "Get provider name for identification",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [],
              "called_by": []
            }
          ],
          "bases": [
            "SummaryProvider"
          ],
          "uid": "llmstruct.core.summary_providers.HeuristicProvider:18#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.summary_providers",
            "llmstruct.core.summary_providers.HeuristicProvider:18"
          ],
          "hash": "c588ca99affef01aaf3d7f3732e59f8c8726e79203683b2e935e1f2243f97db7",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-summary-providers-heuristicprovider",
          "summary": "Fast, deterministic summary provider using heuristics",
          "summary_source": "docstring",
          "tags": [
            "async",
            "class",
            "classmethod",
            "property",
            "public",
            "static"
          ]
        },
        {
          "name": "LLMProvider",
          "docstring": "LLM-powered summary provider (optional, disabled by default).\n\nOnly works when LLM is explicitly enabled via configuration.",
          "line_range": [
            194,
            299
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                201,
                203
              ],
              "parameters": [
                "self",
                "api_key"
              ],
              "uid": "llmstruct.core.summary_providers.LLMProvider.__init__:201#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.summary_providers",
                "llmstruct.core.summary_providers.LLMProvider",
                "llmstruct.core.summary_providers.LLMProvider.__init__:201"
              ],
              "hash": "ef68905c33365e95718999ac8ca9503ae0ca57bc5ab5925951631b6e7d0f2f4a",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-core-summary-providers-llmprovider---init--",
              "summary": "Method for llmprovider. init",
              "summary_source": "heuristic",
              "tags": [
                "method",
                "private",
                "public"
              ],
              "calls": [
                "HeuristicProvider",
                "LLMProvider"
              ],
              "called_by": []
            },
            {
              "name": "generate_summary",
              "docstring": "Generate LLM-powered summary",
              "line_range": [
                205,
                243
              ],
              "parameters": [
                "self",
                "code",
                "entity_type",
                "entity_name",
                "docstring"
              ],
              "uid": "llmstruct.core.summary_providers.LLMProvider.generate_summary:205#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.summary_providers",
                "llmstruct.core.summary_providers.LLMProvider",
                "llmstruct.core.summary_providers.LLMProvider.generate_summary:205"
              ],
              "hash": "85b4645aa34e5b7e0344731129834a32cbde55bee60985e071e2d4616ba581ca",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-core-summary-providers-llmprovider-generate-summary",
              "summary": "Generate LLM-powered summary",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "get_summary_system"
              ],
              "called_by": []
            },
            {
              "name": "_create_cache_key",
              "docstring": "Create cache key for LLM results",
              "line_range": [
                245,
                248
              ],
              "parameters": [
                "self",
                "code",
                "entity_type",
                "entity_name"
              ],
              "uid": "llmstruct.core.summary_providers.LLMProvider._create_cache_key:245#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.summary_providers",
                "llmstruct.core.summary_providers.LLMProvider",
                "llmstruct.core.summary_providers.LLMProvider._create_cache_key:245"
              ],
              "hash": "689fb58c083c373f722db807b8e60d7232bc705b911f49072cb332299d0e1845",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-core-summary-providers-llmprovider--create-cache-key",
              "summary": "Create cache key for LLM results",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "content.encode",
                "hashlib.md5"
              ],
              "called_by": []
            },
            {
              "name": "_call_llm_api",
              "docstring": "Call LLM API to generate summary",
              "line_range": [
                250,
                266
              ],
              "parameters": [
                "self",
                "code",
                "entity_type",
                "entity_name",
                "docstring"
              ],
              "uid": "llmstruct.core.summary_providers.LLMProvider._call_llm_api:250#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.summary_providers",
                "llmstruct.core.summary_providers.LLMProvider",
                "llmstruct.core.summary_providers.LLMProvider._call_llm_api:250"
              ],
              "hash": "f8c261c10010defb35b7c654aceedc28ea5b7146a72e01a2282fffb2fbc16cb0",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-core-summary-providers-llmprovider--call-llm-api",
              "summary": "Call LLM API to generate summary",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private",
                "public"
              ],
              "calls": [
                "CodeSummary",
                "self._create_prompt",
                "get_config"
              ],
              "called_by": []
            },
            {
              "name": "_create_prompt",
              "docstring": "Create LLM prompt for summary generation",
              "line_range": [
                268,
                295
              ],
              "parameters": [
                "self",
                "code",
                "entity_type",
                "entity_name",
                "docstring"
              ],
              "uid": "llmstruct.core.summary_providers.LLMProvider._create_prompt:268#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.summary_providers",
                "llmstruct.core.summary_providers.LLMProvider",
                "llmstruct.core.summary_providers.LLMProvider._create_prompt:268"
              ],
              "hash": "aaef37510fffd09773c0be60c09540a6dd4956f00834af40ad5eeb2711d39fce",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-core-summary-providers-llmprovider--create-prompt",
              "summary": "Create LLM prompt for summary generation",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "get_config"
              ],
              "called_by": []
            },
            {
              "name": "get_provider_name",
              "docstring": "Get provider name for identification",
              "line_range": [
                297,
                299
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.core.summary_providers.LLMProvider.get_provider_name:297#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.summary_providers",
                "llmstruct.core.summary_providers.LLMProvider",
                "llmstruct.core.summary_providers.LLMProvider.get_provider_name:297"
              ],
              "hash": "d02406906179b1c7147f97c0577ab3bc485ff0b91298fbe7766a6eab6fb001cb",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-core-summary-providers-llmprovider-get-provider-name",
              "summary": "Get provider name for identification",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [],
              "called_by": []
            }
          ],
          "bases": [
            "SummaryProvider"
          ],
          "uid": "llmstruct.core.summary_providers.LLMProvider:194#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.summary_providers",
            "llmstruct.core.summary_providers.LLMProvider:194"
          ],
          "hash": "d888d7ecdb2bf2d760fd8e15eddb54471933b382fa330bf95932351f5af6e6e2",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-summary-providers-llmprovider",
          "summary": "LLM-powered summary provider (optional, disabled by default)",
          "summary_source": "docstring",
          "tags": [
            "class",
            "public"
          ]
        },
        {
          "name": "SummarySystem",
          "docstring": "Main summary system that orchestrates different providers",
          "line_range": [
            302,
            339
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                305,
                307
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.core.summary_providers.SummarySystem.__init__:305#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.summary_providers",
                "llmstruct.core.summary_providers.SummarySystem",
                "llmstruct.core.summary_providers.SummarySystem.__init__:305"
              ],
              "hash": "87a611766d6fa870f1ff2be93dd2eb8d47a62a698dafcaedce42913ef3a7081a",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-core-summary-providers-summarysystem---init--",
              "summary": "Method for summarysystem. init",
              "summary_source": "heuristic",
              "tags": [
                "method",
                "private",
                "public"
              ],
              "calls": [
                "HeuristicProvider",
                "LLMProvider"
              ],
              "called_by": []
            },
            {
              "name": "generate_summary",
              "docstring": "Generate summary using configured provider",
              "line_range": [
                309,
                332
              ],
              "parameters": [
                "self",
                "code",
                "entity_type",
                "entity_name",
                "docstring"
              ],
              "uid": "llmstruct.core.summary_providers.SummarySystem.generate_summary:309#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.summary_providers",
                "llmstruct.core.summary_providers.SummarySystem",
                "llmstruct.core.summary_providers.SummarySystem.generate_summary:309"
              ],
              "hash": "a8de707c57f823270878880526694b40cfe97e9f033235a634f7d8e456355cf3",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-core-summary-providers-summarysystem-generate-summary",
              "summary": "Generate summary using configured provider",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "get_summary_system"
              ],
              "called_by": []
            },
            {
              "name": "get_active_provider",
              "docstring": "Get name of currently active provider",
              "line_range": [
                334,
                339
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.core.summary_providers.SummarySystem.get_active_provider:334#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.summary_providers",
                "llmstruct.core.summary_providers.SummarySystem",
                "llmstruct.core.summary_providers.SummarySystem.get_active_provider:334"
              ],
              "hash": "13766ac1b83c60fe733964d3a8eeebd821638f613fc564363876596e8aa22397",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-core-summary-providers-summarysystem-get-active-provider",
              "summary": "Get name of currently active provider",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "is_llm_enabled",
                "get_config"
              ],
              "called_by": []
            }
          ],
          "bases": [],
          "uid": "llmstruct.core.summary_providers.SummarySystem:302#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.summary_providers",
            "llmstruct.core.summary_providers.SummarySystem:302"
          ],
          "hash": "054029a85a27486d2af65cd63f8c2a0b20590a224032db657feaccc61f30dc34",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-summary-providers-summarysystem",
          "summary": "Main summary system that orchestrates different providers",
          "summary_source": "docstring",
          "tags": [
            "class",
            "public"
          ]
        }
      ],
      "callgraph": {
        "__init__": [
          "HeuristicProvider",
          "LLMProvider"
        ],
        "generate_summary": [
          "get_summary_system"
        ],
        "_clean_docstring": [
          "re.sub",
          "len",
          "re.split"
        ],
        "_generate_heuristic_summary": [
          "name_lower.startswith",
          "entity_name.lower",
          "name_lower.endswith",
          "entity_type.title",
          "self._humanize_name"
        ],
        "_humanize_name": [
          "name.split",
          "re.findall",
          "word.lower"
        ],
        "_extract_tags_from_docstring": [
          "docstring.lower",
          "any",
          "tags.append"
        ],
        "_extract_tags_from_code": [
          "tags.append",
          "entity_name.startswith"
        ],
        "get_provider_name": [],
        "_create_cache_key": [
          "content.encode",
          "hashlib.md5"
        ],
        "_call_llm_api": [
          "CodeSummary",
          "self._create_prompt",
          "get_config"
        ],
        "_create_prompt": [
          "get_config"
        ],
        "get_active_provider": [
          "is_llm_enabled",
          "get_config"
        ],
        "get_summary_system": [
          "SummarySystem"
        ]
      },
      "dependencies": [
        "Any",
        "CodeSummary",
        "Dict",
        "List",
        "Optional",
        "SummaryProvider",
        "SummarySource",
        "config_manager",
        "get_config",
        "hashlib",
        "is_llm_enabled",
        "re",
        "summary_core",
        "typing"
      ],
      "hash": "bcc20c0a8fff1f6cbf17c4554109513cc1ce12fdf7d7c79c88c133cad69cd643",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.core.summary_providers.llmstruct.core.summary_providers#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.core",
        "llmstruct.core.summary_providers",
        "llmstruct.core.summary_providers.llmstruct.core.summary_providers"
      ],
      "summary": "Summary Providers Implementation\n\nConcrete implementations of summary providers:\n- HeuristicProvider: Fast, offline, ...",
      "summary_source": "docstring",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "a792a18a-14f7-4e8d-84be-99d5ac65426c"
    },
    {
      "module_id": "llmstruct.core.uid_generator",
      "path": "llmstruct/core/uid_generator.py",
      "category": "core",
      "module_doc": "Advanced UID Generator System for LLMStruct v2.1\n\nGenerates stable, unique identifiers for code entities using FQNAME-based approach.\nFixes duplicate issues in uid_components array.",
      "functions": [
        {
          "name": "normalize_path",
          "docstring": "Normalize file path for consistent UID generation",
          "line_range": [
            25,
            45
          ],
          "parameters": [
            "path"
          ],
          "decorators": [],
          "uid": "llmstruct.core.uid_generator.normalize_path:25#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.uid_generator",
            "llmstruct.core.uid_generator.normalize_path:25"
          ],
          "hash": "780d3d1173a3d2e89e5d88af4d1c72d03d40358f9d4ed5637e808d14c9374349",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-uid-generator-normalize-path",
          "summary": "Normalize file path for consistent UID generation",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "list",
            "normalized.endswith",
            "Path"
          ],
          "called_by": [
            "generate_uid_components",
            "create_legacy_artifact_id",
            "generate_uid"
          ]
        },
        {
          "name": "generate_uid",
          "docstring": "Generate stable UID using FQNAME approach.\n\nArgs:\n    entity_type: Type of entity\n    module_path: Path to module (e.g., 'src/llmstruct/core/uid_generator.py')\n    entity_name: Name of entity\n    parent_name: Parent entity name (for methods, nested classes)\n    \nReturns:\n    Stable UID string",
          "line_range": [
            48,
            85
          ],
          "parameters": [
            "entity_type",
            "module_path",
            "entity_name",
            "parent_name"
          ],
          "decorators": [],
          "uid": "llmstruct.core.uid_generator.generate_uid:48#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.uid_generator",
            "llmstruct.core.uid_generator.generate_uid:48"
          ],
          "hash": "f281a627dcaa4f09161bce0306ff50f5df9caf0827e2de58f308b9ffa9d6b125",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-uid-generator-generate-uid",
          "summary": "Generate stable UID using FQNAME approach",
          "summary_source": "docstring",
          "tags": [
            "function",
            "generator",
            "public"
          ],
          "calls": [
            "normalize_path",
            "fqname_parts.append"
          ],
          "called_by": [
            "create_method_uid",
            "create_function_uid",
            "create_module_uid",
            "create_class_uid",
            "enhance_entity_with_uid"
          ]
        },
        {
          "name": "generate_uid_components",
          "docstring": "Generate hierarchical UID components for navigation.\n\nFIXED: Removes duplicates and ensures each level is unique.\n\nArgs:\n    entity_type: Type of entity\n    module_path: Path to module\n    entity_name: Name of entity  \n    parent_name: Parent entity name\n    \nReturns:\n    List of hierarchical components without duplicates",
          "line_range": [
            88,
            147
          ],
          "parameters": [
            "entity_type",
            "module_path",
            "entity_name",
            "parent_name"
          ],
          "decorators": [],
          "uid": "llmstruct.core.uid_generator.generate_uid_components:88#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.uid_generator",
            "llmstruct.core.uid_generator.generate_uid_components:88"
          ],
          "hash": "3311e00d1d33a1f3da8da5e51c1a9193a31251e7c13549f83afe33f7c0dabc5f",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-uid-generator-generate-uid-components",
          "summary": "Generate hierarchical UID components for navigation",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "set",
            "entity_name.strip",
            "seen.add",
            "part.strip",
            "current_path.append",
            "unique_components.append",
            "normalized_module.split",
            "components.append",
            "parent_name.strip",
            "normalize_path"
          ],
          "called_by": [
            "enhance_entity_with_uid"
          ]
        },
        {
          "name": "create_stable_uid",
          "docstring": "Create stable UID based on content hash (fallback method).\n\nArgs:\n    content: Entity content\n    entity_type: Type of entity\n    \nReturns:\n    Stable hash-based UID",
          "line_range": [
            150,
            167
          ],
          "parameters": [
            "content",
            "entity_type"
          ],
          "decorators": [],
          "uid": "llmstruct.core.uid_generator.create_stable_uid:150#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.uid_generator",
            "llmstruct.core.uid_generator.create_stable_uid:150"
          ],
          "hash": "a7e0745164214a65706526aa7511d758bfa17e216b636cd6bd6f8e2b4fdc9256",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-uid-generator-create-stable-uid",
          "summary": "Create stable UID based on content hash (fallback method)",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "content.encode",
            "hashlib.sha256"
          ],
          "called_by": []
        },
        {
          "name": "create_legacy_artifact_id",
          "docstring": "Create legacy artifact_id for backward compatibility.\n\nArgs:\n    entity: Entity dictionary\n    \nReturns:\n    Legacy artifact ID",
          "line_range": [
            170,
            205
          ],
          "parameters": [
            "entity"
          ],
          "decorators": [],
          "uid": "llmstruct.core.uid_generator.create_legacy_artifact_id:170#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.uid_generator",
            "llmstruct.core.uid_generator.create_legacy_artifact_id:170"
          ],
          "hash": "977e7a007125799bc8e2ec7bb6fb5ed80b5e263d50cc8925c4f3dc2b273927fe",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-uid-generator-create-legacy-artifact-id",
          "summary": "Create legacy artifact_id for backward compatibility",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "hashlib.md5",
            "p.get",
            "id_components.append",
            "combined.encode",
            "normalize_path",
            "entity.get"
          ],
          "called_by": [
            "enhance_entity_with_uid"
          ]
        },
        {
          "name": "enhance_entity_with_uid",
          "docstring": "Enhance entity with UID system components.\n\nArgs:\n    entity: Entity dictionary\n    \nReturns:\n    Enhanced entity with uid, uid_components, and artifact_id",
          "line_range": [
            208,
            243
          ],
          "parameters": [
            "entity"
          ],
          "decorators": [],
          "uid": "llmstruct.core.uid_generator.enhance_entity_with_uid:208#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.uid_generator",
            "llmstruct.core.uid_generator.enhance_entity_with_uid:208"
          ],
          "hash": "54df053bb8b064f3fb3d6efe69c48184ba4fc41683c174286753620d96a256e8",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-uid-generator-enhance-entity-with-uid",
          "summary": "Enhance entity with UID system components",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "generate_uid_components",
            "entity.get",
            "generate_uid",
            "create_legacy_artifact_id",
            "entity.copy",
            "UIDType"
          ],
          "called_by": []
        },
        {
          "name": "validate_uid_uniqueness",
          "docstring": "Validate UID uniqueness across entities.\n\nArgs:\n    entities: List of entities with UIDs\n    \nReturns:\n    Dictionary with 'duplicates' and 'conflicts' lists",
          "line_range": [
            246,
            276
          ],
          "parameters": [
            "entities"
          ],
          "decorators": [],
          "uid": "llmstruct.core.uid_generator.validate_uid_uniqueness:246#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.uid_generator",
            "llmstruct.core.uid_generator.validate_uid_uniqueness:246"
          ],
          "hash": "08634b357cc86766e0e0107635f13bfa1b557cc43051a79e3cb712ed328b2d1a",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-uid-generator-validate-uid-uniqueness",
          "summary": "Validate UID uniqueness across entities",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "duplicates.append",
            "existing.get",
            "entity.get"
          ],
          "called_by": []
        },
        {
          "name": "create_module_uid",
          "docstring": "Create UID for module",
          "line_range": [
            281,
            283
          ],
          "parameters": [
            "module_path"
          ],
          "decorators": [],
          "uid": "llmstruct.core.uid_generator.create_module_uid:281#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.uid_generator",
            "llmstruct.core.uid_generator.create_module_uid:281"
          ],
          "hash": "78a6139201fb016110552a2f16a1b676eb4df0982379bfa7b626e2c875032d6d",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-uid-generator-create-module-uid",
          "summary": "Create UID for module",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "Path",
            "generate_uid"
          ],
          "called_by": []
        },
        {
          "name": "create_function_uid",
          "docstring": "Create UID for function",
          "line_range": [
            286,
            288
          ],
          "parameters": [
            "module_path",
            "function_name"
          ],
          "decorators": [],
          "uid": "llmstruct.core.uid_generator.create_function_uid:286#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.uid_generator",
            "llmstruct.core.uid_generator.create_function_uid:286"
          ],
          "hash": "1bad93a530f99de51e1a76acc227e19d2b284812586e671a704819ad92959c91",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-uid-generator-create-function-uid",
          "summary": "Create UID for function",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "generate_uid"
          ],
          "called_by": []
        },
        {
          "name": "create_class_uid",
          "docstring": "Create UID for class",
          "line_range": [
            291,
            293
          ],
          "parameters": [
            "module_path",
            "class_name"
          ],
          "decorators": [],
          "uid": "llmstruct.core.uid_generator.create_class_uid:291#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.uid_generator",
            "llmstruct.core.uid_generator.create_class_uid:291"
          ],
          "hash": "9e9a260bd9100a255e8a16c9a392584a8c531373e3df55b5c211ae2e2e30b62e",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-uid-generator-create-class-uid",
          "summary": "Create UID for class",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "generate_uid"
          ],
          "called_by": []
        },
        {
          "name": "create_method_uid",
          "docstring": "Create UID for method",
          "line_range": [
            296,
            298
          ],
          "parameters": [
            "module_path",
            "class_name",
            "method_name"
          ],
          "decorators": [],
          "uid": "llmstruct.core.uid_generator.create_method_uid:296#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.uid_generator",
            "llmstruct.core.uid_generator.create_method_uid:296"
          ],
          "hash": "8e968c8f148a680dff56fb64b9cf3c15f77138b3325d257b17e477e9f33c5b99",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-uid-generator-create-method-uid",
          "summary": "Create UID for method",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "generate_uid"
          ],
          "called_by": []
        }
      ],
      "classes": [
        {
          "name": "UIDType",
          "docstring": "Types of entities that can have UIDs",
          "line_range": [
            14,
            22
          ],
          "methods": [],
          "bases": [
            "Enum"
          ],
          "uid": "llmstruct.core.uid_generator.UIDType:14#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.uid_generator",
            "llmstruct.core.uid_generator.UIDType:14"
          ],
          "hash": "f6ef36a90761b4842e608007476e6fc2561aedace6e12a22b2fb557db990d671",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-uid-generator-uidtype",
          "summary": "Types of entities that can have UIDs",
          "summary_source": "docstring",
          "tags": [
            "class",
            "public"
          ]
        }
      ],
      "callgraph": {
        "normalize_path": [
          "list",
          "normalized.endswith",
          "Path"
        ],
        "generate_uid": [
          "normalize_path",
          "fqname_parts.append"
        ],
        "generate_uid_components": [
          "set",
          "entity_name.strip",
          "seen.add",
          "part.strip",
          "current_path.append",
          "unique_components.append",
          "normalized_module.split",
          "components.append",
          "parent_name.strip",
          "normalize_path"
        ],
        "create_stable_uid": [
          "content.encode",
          "hashlib.sha256"
        ],
        "create_legacy_artifact_id": [
          "hashlib.md5",
          "p.get",
          "id_components.append",
          "combined.encode",
          "normalize_path",
          "entity.get"
        ],
        "enhance_entity_with_uid": [
          "generate_uid_components",
          "entity.get",
          "generate_uid",
          "create_legacy_artifact_id",
          "entity.copy",
          "UIDType"
        ],
        "validate_uid_uniqueness": [
          "duplicates.append",
          "existing.get",
          "entity.get"
        ],
        "create_module_uid": [
          "Path",
          "generate_uid"
        ],
        "create_function_uid": [
          "generate_uid"
        ],
        "create_class_uid": [
          "generate_uid"
        ],
        "create_method_uid": [
          "generate_uid"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "enum",
        "hashlib",
        "pathlib",
        "typing"
      ],
      "hash": "374c80a334ad6c8431a1c2f1e928ced04318c6b8c118cf6b80db4cac71906906",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.core.uid_generator.llmstruct.core.uid_generator#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.core",
        "llmstruct.core.uid_generator",
        "llmstruct.core.uid_generator.llmstruct.core.uid_generator"
      ],
      "summary": "Advanced UID Generator System for LLMStruct v2.1\n\nGenerates stable, unique identifiers for code entities using FQNAME...",
      "summary_source": "docstring",
      "tags": [
        "generator",
        "module",
        "public"
      ],
      "artifact_id": "346f2d58-8042-4b86-81c3-f4c3906da75c"
    },
    {
      "module_id": "llmstruct.core.__init__",
      "path": "llmstruct/core/__init__.py",
      "category": "cli",
      "module_doc": "LLMStruct Core Module\n\nProvides core functionality for code analysis and structure generation.\nAll LLM-dependent features are optional and disabled by default.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "CodeSummary",
        "ConfigManager",
        "HeuristicProvider",
        "LLMProvider",
        "LLMStructConfig",
        "SummaryProvider",
        "SummarySource",
        "SummarySystem",
        "UIDType",
        "config_manager",
        "create_legacy_artifact_id",
        "enhance_entity_with_uid",
        "generate_summary",
        "generate_uid",
        "generate_uid_components",
        "get_config",
        "get_config_manager",
        "get_summary_provider",
        "get_summary_system",
        "hash_content",
        "hash_entity",
        "hash_file",
        "hash_source",
        "hash_utils",
        "is_llm_enabled",
        "quick_content_hash",
        "quick_file_hash",
        "quick_source_hash",
        "summary_core",
        "summary_providers",
        "uid_generator"
      ],
      "hash": "eadf7f00989631985d8df6b12ad76f573b59bcf70daeec4ca41d358c8efce05d",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.core.__init__.llmstruct.core.__init__#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.core",
        "llmstruct.core.__init__",
        "llmstruct.core.__init__.llmstruct.core.__init__"
      ],
      "summary": "LLMStruct Core Module\n\nProvides core functionality for code analysis and structure generation",
      "summary_source": "docstring",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "1ce53665-9bb3-4c50-aa3c-1ac71c5e7295"
    },
    {
      "module_id": "llmstruct.core.tag_inference",
      "path": "llmstruct/core/tag_inference.py",
      "category": "core",
      "module_doc": "llmstruct.core.tag_inference\n\nUtilities for inferring semantic tags for code entities.\n\nThe tag system is used across the project for quick categorisation and\nfiltering.  This module centralises heuristics so that they are consistent\nand testable.  It does **not** modify existing entities \u2013 higher-level\nparsers/generators should call it when they need fresh tags.\n\nRules mirror those used in Phase 1 but \u0432\u044b\u043d\u0435\u0441\u0435\u043d\u044b \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043c\u043e\u0434\u0443\u043b\u044c \u0434\u043b\u044f\nPhase 1.5 quality-assurance.",
      "functions": [
        {
          "name": "_name_based_tags",
          "docstring": "Infer tags from naming conventions.",
          "line_range": [
            61,
            67
          ],
          "parameters": [
            "name"
          ],
          "decorators": [],
          "uid": "llmstruct.core.tag_inference._name_based_tags:61#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.tag_inference",
            "llmstruct.core.tag_inference._name_based_tags:61"
          ],
          "hash": "dfb1ce7c4852fad7240b69db4af1e2acec65be1e9dfc146b77db20db6d59debd",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-tag-inference--name-based-tags",
          "summary": "Infer tags from naming conventions.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "result.add",
            "set",
            "re.search",
            "_NAME_BASED_PATTERNS.items"
          ],
          "called_by": [
            "infer_tags"
          ]
        },
        {
          "name": "_code_based_tags",
          "docstring": "Infer tags by scanning source code for specific patterns.",
          "line_range": [
            70,
            76
          ],
          "parameters": [
            "code"
          ],
          "decorators": [],
          "uid": "llmstruct.core.tag_inference._code_based_tags:70#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.tag_inference",
            "llmstruct.core.tag_inference._code_based_tags:70"
          ],
          "hash": "d88e397b897fef8ccee505694a5217b52911adffc492882b00f3dcf0e3b52b9f",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-tag-inference--code-based-tags",
          "summary": "Infer tags by scanning source code for specific patterns.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "set",
            "re.search",
            "result.add",
            "_CODE_BASED_PATTERNS.items"
          ],
          "called_by": [
            "infer_tags"
          ]
        },
        {
          "name": "infer_tags",
          "docstring": "Infer a list of semantic tags for a code entity.\n\nArgs:\n    code: Raw source code snippet (may be trimmed).\n    entity_type: One of ``\"module\"``, ``\"class\"``, ``\"function\"``,\n        ``\"method\"`` \u2013 anything else will be treated as generic.\n    entity_name: Canonical name of the entity (optional).\n\nReturns:\n    Sorted list of *unique* tag strings.",
          "line_range": [
            79,
            112
          ],
          "parameters": [],
          "decorators": [],
          "uid": "llmstruct.core.tag_inference.infer_tags:79#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.tag_inference",
            "llmstruct.core.tag_inference.infer_tags:79"
          ],
          "hash": "5c9f54b28d8ee6f43b5808bae4615cb69846b56def0c234632aac812d466c811",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-tag-inference-infer-tags",
          "summary": "Infer a list of semantic tags for a code entity",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "set",
            "tags.add",
            "_name_based_tags",
            "sorted",
            "Tag",
            "_code_based_tags",
            "str"
          ],
          "called_by": []
        },
        {
          "name": "__str__",
          "docstring": "",
          "line_range": [
            41,
            42
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.core.tag_inference.__str__:41#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.tag_inference",
            "llmstruct.core.tag_inference.__str__:41"
          ],
          "hash": "486efe1df6a4f57b8ffb28105fb13ef36cd52cb83af7636e6e1d57a0292edb67",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-tag-inference---str--",
          "summary": "Function for str",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "private"
          ],
          "calls": [],
          "called_by": []
        }
      ],
      "classes": [
        {
          "name": "Tag",
          "docstring": "Canonical tag values used in the project.",
          "line_range": [
            26,
            42
          ],
          "methods": [
            {
              "name": "__str__",
              "docstring": "",
              "line_range": [
                41,
                42
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.core.tag_inference.Tag.__str__:41#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.tag_inference",
                "llmstruct.core.tag_inference.Tag",
                "llmstruct.core.tag_inference.Tag.__str__:41"
              ],
              "hash": "3c258d452bed971d6a29529c2be01892aebd80dc44bde3181030993d425193ca",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-core-tag-inference-tag---str--",
              "summary": "Method for tag. str",
              "summary_source": "heuristic",
              "tags": [
                "method",
                "private",
                "public"
              ],
              "calls": [],
              "called_by": []
            }
          ],
          "bases": [
            "str",
            "Enum"
          ],
          "uid": "llmstruct.core.tag_inference.Tag:26#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.tag_inference",
            "llmstruct.core.tag_inference.Tag:26"
          ],
          "hash": "a7f3d9433d3cff6239a79b36c0a2cdfd49579530b7e742014cfc2e9c06690db2",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-tag-inference-tag",
          "summary": "Canonical tag values used in the project.",
          "summary_source": "docstring",
          "tags": [
            "class",
            "public"
          ]
        }
      ],
      "callgraph": {
        "__str__": [],
        "_name_based_tags": [
          "result.add",
          "set",
          "re.search",
          "_NAME_BASED_PATTERNS.items"
        ],
        "_code_based_tags": [
          "set",
          "re.search",
          "result.add",
          "_CODE_BASED_PATTERNS.items"
        ],
        "infer_tags": [
          "set",
          "tags.add",
          "_name_based_tags",
          "sorted",
          "Tag",
          "_code_based_tags",
          "str"
        ]
      },
      "dependencies": [
        "Enum",
        "List",
        "Set",
        "__future__",
        "annotations",
        "auto",
        "enum",
        "re",
        "typing"
      ],
      "hash": "dff27ad9a8177860f06a4b2583f1bc509e25ff10a603a679f6c8216b2d9d83f8",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.core.tag_inference.llmstruct.core.tag_inference#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.core",
        "llmstruct.core.tag_inference",
        "llmstruct.core.tag_inference.llmstruct.core.tag_inference"
      ],
      "summary": "llmstruct.core.tag_inference\n\nUtilities for inferring semantic tags for code entities",
      "summary_source": "docstring",
      "tags": [
        "generator",
        "module",
        "public"
      ],
      "artifact_id": "bca446d5-bb3a-4b1d-a5fa-5992794f779d"
    },
    {
      "module_id": "llmstruct.core.config_manager",
      "path": "llmstruct/core/config_manager.py",
      "category": "core",
      "module_doc": "Configuration Management System for LLMStruct\n\nManages global settings including LLM enablement, provider selection,\nand security controls for offline mode.",
      "functions": [
        {
          "name": "get_config_manager",
          "docstring": "Get global configuration manager instance",
          "line_range": [
            199,
            204
          ],
          "parameters": [],
          "decorators": [],
          "uid": "llmstruct.core.config_manager.get_config_manager:199#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.config_manager",
            "llmstruct.core.config_manager.get_config_manager:199"
          ],
          "hash": "ccae3172baaba1b476f2fb699935ac2a0702bd04c672819b224c0948a6eb7577",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-config-manager-get-config-manager",
          "summary": "Get global configuration manager instance",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "ConfigManager"
          ],
          "called_by": [
            "get_summary_provider",
            "is_llm_enabled",
            "get_config"
          ]
        },
        {
          "name": "get_config",
          "docstring": "Get current configuration",
          "line_range": [
            207,
            209
          ],
          "parameters": [],
          "decorators": [],
          "uid": "llmstruct.core.config_manager.get_config:207#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.config_manager",
            "llmstruct.core.config_manager.get_config:207"
          ],
          "hash": "ed17b278584474c6655dda7eefd3c2aad18d87e1dba68a0bae6fc1a99e94240e",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-config-manager-get-config",
          "summary": "Get current configuration",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "get_config_manager"
          ],
          "called_by": []
        },
        {
          "name": "is_llm_enabled",
          "docstring": "Check if LLM functionality is globally enabled",
          "line_range": [
            212,
            214
          ],
          "parameters": [],
          "decorators": [],
          "uid": "llmstruct.core.config_manager.is_llm_enabled:212#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.config_manager",
            "llmstruct.core.config_manager.is_llm_enabled:212"
          ],
          "hash": "d04719dca42512d3de6f533a5a31654ba0b336c51ebab188a983a9cb9fe26757",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-config-manager-is-llm-enabled",
          "summary": "Check if LLM functionality is globally enabled",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "get_config_manager"
          ],
          "called_by": []
        },
        {
          "name": "get_summary_provider",
          "docstring": "Get active summary provider (heuristic or llm)",
          "line_range": [
            217,
            219
          ],
          "parameters": [],
          "decorators": [],
          "uid": "llmstruct.core.config_manager.get_summary_provider:217#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.config_manager",
            "llmstruct.core.config_manager.get_summary_provider:217"
          ],
          "hash": "d3cb348364e32d70ca393e59f2f4569c999bc911f649ff6aaa82ec407f7c537a",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-config-manager-get-summary-provider",
          "summary": "Get active summary provider (heuristic or llm)",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "get_config_manager"
          ],
          "called_by": []
        },
        {
          "name": "__post_init__",
          "docstring": "Apply environment variable overrides",
          "line_range": [
            66,
            82
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.core.config_manager.__post_init__:66#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.config_manager",
            "llmstruct.core.config_manager.__post_init__:66"
          ],
          "hash": "2f773667c86d9024f5cb251efe5d7697d5132f4cfef6f2e1c468d47e2e0238dc",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-config-manager---post-init--",
          "summary": "Apply environment variable overrides",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "os.getenv"
          ],
          "called_by": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            88,
            90
          ],
          "parameters": [
            "self",
            "config_path"
          ],
          "decorators": [],
          "uid": "llmstruct.core.config_manager.__init__:88#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.config_manager",
            "llmstruct.core.config_manager.__init__:88"
          ],
          "hash": "855afcfcbc26d17ef511908f0c094ea503fb719ebcd842e3a4572368ab03aa45",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-config-manager---init--",
          "summary": "Function for init",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "private"
          ],
          "calls": [],
          "called_by": []
        },
        {
          "name": "load_config",
          "docstring": "Load configuration from file or create default",
          "line_range": [
            92,
            110
          ],
          "parameters": [
            "self",
            "config_path"
          ],
          "decorators": [],
          "uid": "llmstruct.core.config_manager.load_config:92#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.config_manager",
            "llmstruct.core.config_manager.load_config:92"
          ],
          "hash": "ffb910fd55457ea8cd9a08da9f80453251c457253bed7fa3569758a6ace4abb4",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-config-manager-load-config",
          "summary": "Load configuration from file or create default",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "LLMStructConfig",
            "self._create_config_from_dict",
            "Path",
            "open",
            "yaml.safe_load",
            "print"
          ],
          "called_by": []
        },
        {
          "name": "_create_config_from_dict",
          "docstring": "Create configuration from dictionary",
          "line_range": [
            112,
            138
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": [],
          "uid": "llmstruct.core.config_manager._create_config_from_dict:112#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.config_manager",
            "llmstruct.core.config_manager._create_config_from_dict:112"
          ],
          "hash": "7cf478596b1c294a686be49624494c6b3308075a5bb5cf7baedc7bd559289ab4",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-config-manager--create-config-from-dict",
          "summary": "Create configuration from dictionary",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "LLMStructConfig",
            "summary_data.get",
            "data.get",
            "llm_data.get",
            "security_data.get"
          ],
          "called_by": []
        },
        {
          "name": "get_config",
          "docstring": "Get current configuration, loading if necessary",
          "line_range": [
            140,
            144
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.core.config_manager.get_config:140#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.config_manager",
            "llmstruct.core.config_manager.get_config:140"
          ],
          "hash": "f769160fe21295fe8360a36dbd35a1b833546756a475c4c7dbb554aa77bdf6d7",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-config-manager-get-config",
          "summary": "Get current configuration, loading if necessary",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "get_config_manager"
          ],
          "called_by": []
        },
        {
          "name": "is_llm_enabled",
          "docstring": "Check if LLM functionality is enabled",
          "line_range": [
            146,
            154
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.core.config_manager.is_llm_enabled:146#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.config_manager",
            "llmstruct.core.config_manager.is_llm_enabled:146"
          ],
          "hash": "8f2063e7efcdf584bd4e344f1bba49e8690b7719bb342b8d4272d5f6c42d248a",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-config-manager-is-llm-enabled",
          "summary": "Check if LLM functionality is enabled",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "get_config_manager"
          ],
          "called_by": []
        },
        {
          "name": "get_summary_provider",
          "docstring": "Get active summary provider",
          "line_range": [
            156,
            161
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.core.config_manager.get_summary_provider:156#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.config_manager",
            "llmstruct.core.config_manager.get_summary_provider:156"
          ],
          "hash": "704ac3974e12a3ee15241d1a1891786d1291237f86579a29dfa119bef86fe137",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-config-manager-get-summary-provider",
          "summary": "Get active summary provider",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "get_config_manager"
          ],
          "called_by": []
        },
        {
          "name": "save_config_template",
          "docstring": "Save configuration template file",
          "line_range": [
            163,
            192
          ],
          "parameters": [
            "self",
            "path"
          ],
          "decorators": [],
          "uid": "llmstruct.core.config_manager.save_config_template:163#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.config_manager",
            "llmstruct.core.config_manager.save_config_template:163"
          ],
          "hash": "a266d91ce9fcf07a18787a6a3f54be5e1be60b4867b4379cb2da6210a17e282e",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-config-manager-save-config-template",
          "summary": "Save configuration template file",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "open",
            "yaml.dump"
          ],
          "called_by": []
        }
      ],
      "classes": [
        {
          "name": "LLMConfig",
          "docstring": "LLM-specific configuration",
          "line_range": [
            16,
            25
          ],
          "methods": [],
          "bases": [],
          "uid": "llmstruct.core.config_manager.LLMConfig:16#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.config_manager",
            "llmstruct.core.config_manager.LLMConfig:16"
          ],
          "hash": "345da16afa7f698468b6412179fcf8d85c15636fc6518f8f5713c3309f329cc1",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-config-manager-llmconfig",
          "summary": "LLM-specific configuration",
          "summary_source": "docstring",
          "tags": [
            "class",
            "public"
          ]
        },
        {
          "name": "SummaryConfig",
          "docstring": "Summary generation configuration",
          "line_range": [
            29,
            35
          ],
          "methods": [],
          "bases": [],
          "uid": "llmstruct.core.config_manager.SummaryConfig:29#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.config_manager",
            "llmstruct.core.config_manager.SummaryConfig:29"
          ],
          "hash": "41cbf67f60932cf431b8f2b0a4a41e86998bf99521ffcf02d53a4183e8fdec32",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-config-manager-summaryconfig",
          "summary": "Summary generation configuration",
          "summary_source": "docstring",
          "tags": [
            "class",
            "public"
          ]
        },
        {
          "name": "MetricsConfig",
          "docstring": "Code metrics configuration",
          "line_range": [
            39,
            45
          ],
          "methods": [],
          "bases": [],
          "uid": "llmstruct.core.config_manager.MetricsConfig:39#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.config_manager",
            "llmstruct.core.config_manager.MetricsConfig:39"
          ],
          "hash": "4f6f72a899c52ac892adf9e6bb19d4ffdf1ec9101894e0530ec07ead0e911848",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-config-manager-metricsconfig",
          "summary": "Code metrics configuration",
          "summary_source": "docstring",
          "tags": [
            "class",
            "public"
          ]
        },
        {
          "name": "SecurityConfig",
          "docstring": "Security and privacy configuration",
          "line_range": [
            49,
            54
          ],
          "methods": [],
          "bases": [],
          "uid": "llmstruct.core.config_manager.SecurityConfig:49#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.config_manager",
            "llmstruct.core.config_manager.SecurityConfig:49"
          ],
          "hash": "870a74b18097d10ea0d4d2c21a439a4fb086f108ceddd0aa63c1b294499a4b22",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-config-manager-securityconfig",
          "summary": "Security and privacy configuration",
          "summary_source": "docstring",
          "tags": [
            "class",
            "public"
          ]
        },
        {
          "name": "LLMStructConfig",
          "docstring": "Main LLMStruct configuration",
          "line_range": [
            58,
            82
          ],
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "Apply environment variable overrides",
              "line_range": [
                66,
                82
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.core.config_manager.LLMStructConfig.__post_init__:66#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.config_manager",
                "llmstruct.core.config_manager.LLMStructConfig",
                "llmstruct.core.config_manager.LLMStructConfig.__post_init__:66"
              ],
              "hash": "37ddc37c92ba219fc4827c5f59f0e3bf3407acc0f88cf0433cb0f9d2dc925bc8",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-core-config-manager-llmstructconfig---post-init--",
              "summary": "Apply environment variable overrides",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "os.getenv"
              ],
              "called_by": []
            }
          ],
          "bases": [],
          "uid": "llmstruct.core.config_manager.LLMStructConfig:58#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.config_manager",
            "llmstruct.core.config_manager.LLMStructConfig:58"
          ],
          "hash": "c3bfbc6f8a5a448cfcdb6227a1d1a037e6a9a16e5f9b67943d2bd0ba1d2213df",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-config-manager-llmstructconfig",
          "summary": "Main LLMStruct configuration",
          "summary_source": "docstring",
          "tags": [
            "class",
            "public"
          ]
        },
        {
          "name": "ConfigManager",
          "docstring": "Manages LLMStruct configuration with security-first defaults",
          "line_range": [
            85,
            192
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                88,
                90
              ],
              "parameters": [
                "self",
                "config_path"
              ],
              "uid": "llmstruct.core.config_manager.ConfigManager.__init__:88#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.config_manager",
                "llmstruct.core.config_manager.ConfigManager",
                "llmstruct.core.config_manager.ConfigManager.__init__:88"
              ],
              "hash": "70f9c367d4ec7f136214aa9a2b09e04e8cd417386ec746414fdb8a9b3336bb2b",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-core-config-manager-configmanager---init--",
              "summary": "Method for configmanager. init",
              "summary_source": "heuristic",
              "tags": [
                "method",
                "private",
                "public"
              ],
              "calls": [],
              "called_by": []
            },
            {
              "name": "load_config",
              "docstring": "Load configuration from file or create default",
              "line_range": [
                92,
                110
              ],
              "parameters": [
                "self",
                "config_path"
              ],
              "uid": "llmstruct.core.config_manager.ConfigManager.load_config:92#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.config_manager",
                "llmstruct.core.config_manager.ConfigManager",
                "llmstruct.core.config_manager.ConfigManager.load_config:92"
              ],
              "hash": "bb860c91210bb8536df45ee96eacea69c89877af4a62917276a9ec1efa664ba7",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-core-config-manager-configmanager-load-config",
              "summary": "Load configuration from file or create default",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "LLMStructConfig",
                "self._create_config_from_dict",
                "Path",
                "open",
                "yaml.safe_load",
                "print"
              ],
              "called_by": []
            },
            {
              "name": "_create_config_from_dict",
              "docstring": "Create configuration from dictionary",
              "line_range": [
                112,
                138
              ],
              "parameters": [
                "self",
                "data"
              ],
              "uid": "llmstruct.core.config_manager.ConfigManager._create_config_from_dict:112#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.config_manager",
                "llmstruct.core.config_manager.ConfigManager",
                "llmstruct.core.config_manager.ConfigManager._create_config_from_dict:112"
              ],
              "hash": "ec82f9ac1623deb2ca2336e5c0f6c54f97f6eae66d265102a022b87781a42b3a",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-core-config-manager-configmanager--create-config-from-dict",
              "summary": "Create configuration from dictionary",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "LLMStructConfig",
                "summary_data.get",
                "data.get",
                "llm_data.get",
                "security_data.get"
              ],
              "called_by": []
            },
            {
              "name": "get_config",
              "docstring": "Get current configuration, loading if necessary",
              "line_range": [
                140,
                144
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.core.config_manager.ConfigManager.get_config:140#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.config_manager",
                "llmstruct.core.config_manager.ConfigManager",
                "llmstruct.core.config_manager.ConfigManager.get_config:140"
              ],
              "hash": "878ab43c973cc22087da6c340079262bca60eae6c2c30c0d91e0f3463f7f2146",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-core-config-manager-configmanager-get-config",
              "summary": "Get current configuration, loading if necessary",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "get_config_manager"
              ],
              "called_by": []
            },
            {
              "name": "is_llm_enabled",
              "docstring": "Check if LLM functionality is enabled",
              "line_range": [
                146,
                154
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.core.config_manager.ConfigManager.is_llm_enabled:146#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.config_manager",
                "llmstruct.core.config_manager.ConfigManager",
                "llmstruct.core.config_manager.ConfigManager.is_llm_enabled:146"
              ],
              "hash": "0c53b0efcd962ac528480eff59c52fd83d96be386850e4f36be958f31e1dcffe",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-core-config-manager-configmanager-is-llm-enabled",
              "summary": "Check if LLM functionality is enabled",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "get_config_manager"
              ],
              "called_by": []
            },
            {
              "name": "get_summary_provider",
              "docstring": "Get active summary provider",
              "line_range": [
                156,
                161
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.core.config_manager.ConfigManager.get_summary_provider:156#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.config_manager",
                "llmstruct.core.config_manager.ConfigManager",
                "llmstruct.core.config_manager.ConfigManager.get_summary_provider:156"
              ],
              "hash": "ab50e501bedc9c0420d5e35e345f8380cc2d20ae507e84dce76bec9c6fccc8bb",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-core-config-manager-configmanager-get-summary-provider",
              "summary": "Get active summary provider",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "get_config_manager"
              ],
              "called_by": []
            },
            {
              "name": "save_config_template",
              "docstring": "Save configuration template file",
              "line_range": [
                163,
                192
              ],
              "parameters": [
                "self",
                "path"
              ],
              "uid": "llmstruct.core.config_manager.ConfigManager.save_config_template:163#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.config_manager",
                "llmstruct.core.config_manager.ConfigManager",
                "llmstruct.core.config_manager.ConfigManager.save_config_template:163"
              ],
              "hash": "9d56cddc3439f18f39ef37b0eb6f04cab0e354b061fa75266a95cb6cef21d6b4",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-core-config-manager-configmanager-save-config-template",
              "summary": "Save configuration template file",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "open",
                "yaml.dump"
              ],
              "called_by": []
            }
          ],
          "bases": [],
          "uid": "llmstruct.core.config_manager.ConfigManager:85#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.config_manager",
            "llmstruct.core.config_manager.ConfigManager:85"
          ],
          "hash": "4fc310574a57eff742c940e502817a66ddfa5c60b44b2b66173206fcd134c6f5",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-core-config-manager-configmanager",
          "summary": "Manages LLMStruct configuration with security-first defaults",
          "summary_source": "docstring",
          "tags": [
            "class",
            "public"
          ]
        }
      ],
      "callgraph": {
        "__post_init__": [
          "os.getenv"
        ],
        "__init__": [],
        "load_config": [
          "LLMStructConfig",
          "self._create_config_from_dict",
          "Path",
          "open",
          "yaml.safe_load",
          "print"
        ],
        "_create_config_from_dict": [
          "LLMStructConfig",
          "summary_data.get",
          "data.get",
          "llm_data.get",
          "security_data.get"
        ],
        "get_config": [
          "get_config_manager"
        ],
        "is_llm_enabled": [
          "get_config_manager"
        ],
        "get_summary_provider": [
          "get_config_manager"
        ],
        "save_config_template": [
          "open",
          "yaml.dump"
        ],
        "get_config_manager": [
          "ConfigManager"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "dataclass",
        "dataclasses",
        "field",
        "os",
        "pathlib",
        "typing",
        "yaml"
      ],
      "hash": "48402181f4ae2ca639e8f3f536266117621f603cd820a524a4bc84e12fc203bc",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.core.config_manager.llmstruct.core.config_manager#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.core",
        "llmstruct.core.config_manager",
        "llmstruct.core.config_manager.llmstruct.core.config_manager"
      ],
      "summary": "Configuration Management System for LLMStruct\n\nManages global settings including LLM enablement, provider selection,\n...",
      "summary_source": "docstring",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "f25f11ff-159c-453f-b147-a87f5771c5e7"
    },
    {
      "module_id": "llmstruct.validators.__init__",
      "path": "llmstruct/validators/__init__.py",
      "category": "cli",
      "module_doc": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "json_validator",
        "validate_struct_json"
      ],
      "hash": "f0ee4f577643fd8bc74b46fd7debd96cc15683b5a7ad0018bb0788523f4b8d34",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.validators.__init__.llmstruct.validators.__init__#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.validators",
        "llmstruct.validators.__init__",
        "llmstruct.validators.__init__.llmstruct.validators.__init__"
      ],
      "summary": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "summary_source": "docstring",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "f81cae0c-1e49-46de-b095-937d69a9f441"
    },
    {
      "module_id": "llmstruct.validators.json_validator",
      "path": "llmstruct/validators/json_validator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_struct_json",
          "docstring": "Validate a single JSON file against a schema.",
          "line_range": [
            12,
            40
          ],
          "parameters": [
            "json_path",
            "schema_path"
          ],
          "decorators": [],
          "uid": "llmstruct.validators.json_validator.validate_struct_json:12#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.validators",
            "llmstruct.validators.json_validator",
            "llmstruct.validators.json_validator.validate_struct_json:12"
          ],
          "hash": "319d835a59daa400ecf67979fb92bff6b583cf4efb2ad355f51b6f0e68f610d9",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-validators-json-validator-validate-struct-json",
          "summary": "Validate a single JSON file against a schema.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "str",
            "logging.info",
            "json.load",
            "schema_file.exists",
            "Path",
            "json_file.exists",
            "open",
            "validate",
            "logging.error"
          ],
          "called_by": [
            "validate_directory"
          ]
        },
        {
          "name": "validate_directory",
          "docstring": "Validate all JSON files in a directory against a schema.",
          "line_range": [
            43,
            61
          ],
          "parameters": [
            "directory",
            "schema_path",
            "include_patterns",
            "exclude_patterns"
          ],
          "decorators": [],
          "uid": "llmstruct.validators.json_validator.validate_directory:43#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.validators",
            "llmstruct.validators.json_validator",
            "llmstruct.validators.json_validator.validate_directory:43"
          ],
          "hash": "eac33611d1ef053c58c1ad711fed261fccad6559a5252ba9a07f567b3e693576",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-validators-json-validator-validate-directory",
          "summary": "Validate all JSON files in a directory against a schema.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "json_file.match",
            "any",
            "Path",
            "validate_struct_json",
            "str"
          ],
          "called_by": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_struct_json": [
          "str",
          "logging.info",
          "json.load",
          "schema_file.exists",
          "Path",
          "json_file.exists",
          "open",
          "validate",
          "logging.error"
        ],
        "validate_directory": [
          "json_file.match",
          "any",
          "Path",
          "validate_struct_json",
          "str"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "ValidationError",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "sys",
        "typing",
        "validate"
      ],
      "hash": "cc5c6b4f74409f89459ec86a9d59d83cd92c691e95ab4e670e6b8ac8c979a232",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.validators.json_validator.llmstruct.validators.json_validator#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.validators",
        "llmstruct.validators.json_validator",
        "llmstruct.validators.json_validator.llmstruct.validators.json_validator"
      ],
      "summary": "Module for llmstruct.validators.json validator",
      "summary_source": "heuristic",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "a354b8b3-c64d-4701-801d-e3edb7ca51c5"
    },
    {
      "module_id": "llmstruct.parsers.universal_converter",
      "path": "llmstruct/parsers/universal_converter.py",
      "category": "core",
      "module_doc": "Universal Code Converter - Orchestrates all language parsers\nConverts any codebase to llmstruct JSON format",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface for universal converter",
          "line_range": [
            313,
            366
          ],
          "parameters": [],
          "decorators": [],
          "uid": "llmstruct.parsers.universal_converter.main:313#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.universal_converter",
            "llmstruct.parsers.universal_converter.main:313"
          ],
          "hash": "fe3ede5a83e750e6391b8f84d2c5df8772aa76f9c676f685703e2179f3f9e9a6",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-parsers-universal-converter-main",
          "summary": "CLI interface for universal converter",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "json.dumps",
            "exit",
            "ConverterConfig",
            "parser.add_argument",
            "traceback.print_exc",
            "parser.parse_args",
            "result.get",
            "converter.convert_multi_language_project",
            "argparse.ArgumentParser",
            "UniversalConverter",
            "open",
            "Language",
            "f.write",
            "stats.get",
            "logger.error",
            "converter.convert_project",
            "print"
          ],
          "called_by": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            36,
            39
          ],
          "parameters": [
            "self",
            "config"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.universal_converter.__init__:36#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.universal_converter",
            "llmstruct.parsers.universal_converter.__init__:36"
          ],
          "hash": "92a4ada9933ceea2efe34a7dfb288dc2b2b3119ef0f52f0fd657d9f376ad6954",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-parsers-universal-converter---init--",
          "summary": "Function for init",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "JavaScriptParser",
            "GoAnalyzer",
            "ConverterConfig"
          ],
          "called_by": []
        },
        {
          "name": "detect_language",
          "docstring": "Detect programming language from file extension",
          "line_range": [
            41,
            43
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.universal_converter.detect_language:41#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.universal_converter",
            "llmstruct.parsers.universal_converter.detect_language:41"
          ],
          "hash": "323e4f3d27acb83d96a2a5a011bbaafe9b2ffea6515245b1f6159fb12e90dd34",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-parsers-universal-converter-detect-language",
          "summary": "Detect programming language from file extension",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "LanguageDetector.detect_language"
          ],
          "called_by": []
        },
        {
          "name": "detect_project_languages",
          "docstring": "Detect all languages in project and count files",
          "line_range": [
            45,
            47
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.universal_converter.detect_project_languages:45#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.universal_converter",
            "llmstruct.parsers.universal_converter.detect_project_languages:45"
          ],
          "hash": "a7c6830c0e61e75b3c8e147cf36c0498be21923370128e30b2587ce61299abd2",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-parsers-universal-converter-detect-project-languages",
          "summary": "Detect all languages in project and count files",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "LanguageDetector.detect_project_languages"
          ],
          "called_by": []
        },
        {
          "name": "get_project_files",
          "docstring": "Get all relevant files for conversion",
          "line_range": [
            49,
            76
          ],
          "parameters": [
            "self",
            "project_path",
            "language"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.universal_converter.get_project_files:49#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.universal_converter",
            "llmstruct.parsers.universal_converter.get_project_files:49"
          ],
          "hash": "fede24ffe5e655175df930c9760219b1f199c01ccf672558a64f1d31e8b5865e",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-parsers-universal-converter-get-project-files",
          "summary": "Get all relevant files for conversion",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "files.append",
            "any",
            "self.detect_language",
            "os.walk"
          ],
          "called_by": []
        },
        {
          "name": "convert_python_project",
          "docstring": "Convert Python project to llmstruct format",
          "line_range": [
            78,
            109
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.universal_converter.convert_python_project:78#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.universal_converter",
            "llmstruct.parsers.universal_converter.convert_python_project:78"
          ],
          "hash": "eeebe9086503522655aa89041dd49f2863bb4c37009b5916c0217b03332a4de4",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-parsers-universal-converter-convert-python-project",
          "summary": "Convert Python project to llmstruct format",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "logger.info",
            "len",
            "analyze_python",
            "self.get_project_files",
            "self._build_project_structure",
            "logger.warning",
            "toc.append",
            "modules.append",
            "module_data.get"
          ],
          "called_by": []
        },
        {
          "name": "convert_go_project",
          "docstring": "Convert Go project to llmstruct format",
          "line_range": [
            111,
            128
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.universal_converter.convert_go_project:111#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.universal_converter",
            "llmstruct.parsers.universal_converter.convert_go_project:111"
          ],
          "hash": "3b55f91cc1169a0c2f15f2d1212d209780b68551b554384e8f8f4be0a7604c14",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-parsers-universal-converter-convert-go-project",
          "summary": "Convert Go project to llmstruct format",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "logger.info",
            "self._build_empty_project_structure",
            "convert_to_llmstruct_format",
            "logger.error",
            "str"
          ],
          "called_by": []
        },
        {
          "name": "convert_javascript_project",
          "docstring": "Convert JavaScript project to llmstruct format",
          "line_range": [
            130,
            161
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.universal_converter.convert_javascript_project:130#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.universal_converter",
            "llmstruct.parsers.universal_converter.convert_javascript_project:130"
          ],
          "hash": "15797be0ac26b8ccf6ca6b1ea79fcf8a4b7d0dfb04dbb0ef3dc94b5bc9a82164",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-parsers-universal-converter-convert-javascript-project",
          "summary": "Convert JavaScript project to llmstruct format",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "logger.info",
            "len",
            "self.get_project_files",
            "self._build_project_structure",
            "logger.warning",
            "toc.append",
            "modules.append",
            "module_data.get"
          ],
          "called_by": []
        },
        {
          "name": "convert_project",
          "docstring": "Convert any project to llmstruct format",
          "line_range": [
            163,
            188
          ],
          "parameters": [
            "self",
            "project_path",
            "language"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.universal_converter.convert_project:163#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.universal_converter",
            "llmstruct.parsers.universal_converter.convert_project:163"
          ],
          "hash": "a91fc4fa793193a3478bb6e07d39635671c4c7ea8d59de8f8e0dadf02318f21b",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-parsers-universal-converter-convert-project",
          "summary": "Convert any project to llmstruct format",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "logger.info",
            "self.convert_javascript_project",
            "languages.keys",
            "self.convert_go_project",
            "ValueError",
            "self.convert_python_project",
            "self.detect_project_languages",
            "NotImplementedError",
            "max"
          ],
          "called_by": []
        },
        {
          "name": "convert_multi_language_project",
          "docstring": "Convert multi-language project with separate sections per language",
          "line_range": [
            190,
            220
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.universal_converter.convert_multi_language_project:190#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.universal_converter",
            "llmstruct.parsers.universal_converter.convert_multi_language_project:190"
          ],
          "hash": "6fc8040d78d1c780ccd95fb20dc605fb97c7c47f7ac4c01fca89ea6c5dade735",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-parsers-universal-converter-convert-multi-language-project",
          "summary": "Convert multi-language project with separate sections per language",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "logger.info",
            "self._merge_language_results",
            "self.convert_javascript_project",
            "languages.keys",
            "logger.warning",
            "self.convert_go_project",
            "ValueError",
            "self.convert_python_project",
            "self.detect_project_languages",
            "logger.error"
          ],
          "called_by": []
        },
        {
          "name": "_build_project_structure",
          "docstring": "Build standard llmstruct project structure",
          "line_range": [
            222,
            250
          ],
          "parameters": [
            "self",
            "language",
            "project_path",
            "modules",
            "toc"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.universal_converter._build_project_structure:222#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.universal_converter",
            "llmstruct.parsers.universal_converter._build_project_structure:222"
          ],
          "hash": "d1f9263af0ea948b3097a2badb09575388efb3a55178d02205d28f4f9ff9bba0",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-parsers-universal-converter--build-project-structure",
          "summary": "Build standard llmstruct project structure",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "m.get",
            "len",
            "sum",
            "language.title"
          ],
          "called_by": []
        },
        {
          "name": "_build_empty_project_structure",
          "docstring": "Build empty structure when conversion fails",
          "line_range": [
            252,
            267
          ],
          "parameters": [
            "self",
            "language",
            "project_path",
            "error"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.universal_converter._build_empty_project_structure:252#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.universal_converter",
            "llmstruct.parsers.universal_converter._build_empty_project_structure:252"
          ],
          "hash": "183a30cd4a7f4a468c2af98e9f7076d028ac1c2e17eba10346b7287bcbe660c0",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-parsers-universal-converter--build-empty-project-structure",
          "summary": "Build empty structure when conversion fails",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [],
          "called_by": []
        },
        {
          "name": "_merge_language_results",
          "docstring": "Merge multiple language results into unified structure",
          "line_range": [
            269,
            310
          ],
          "parameters": [
            "self",
            "project_path",
            "language_results"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.universal_converter._merge_language_results:269#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.universal_converter",
            "llmstruct.parsers.universal_converter._merge_language_results:269"
          ],
          "hash": "632fab77b6aa0544e722ef2a2a6550b7d32088729a96c4adf4f59df77172c8f1",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-parsers-universal-converter--merge-language-results",
          "summary": "Merge multiple language results into unified structure",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "list",
            "result.get",
            "all_toc.append",
            "stats.get",
            "language_results.keys",
            "all_modules.append",
            "language_results.items"
          ],
          "called_by": []
        }
      ],
      "classes": [
        {
          "name": "UniversalConverter",
          "docstring": "Universal code converter for any programming language",
          "line_range": [
            33,
            310
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                36,
                39
              ],
              "parameters": [
                "self",
                "config"
              ],
              "uid": "llmstruct.parsers.universal_converter.UniversalConverter.__init__:36#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.universal_converter",
                "llmstruct.parsers.universal_converter.UniversalConverter",
                "llmstruct.parsers.universal_converter.UniversalConverter.__init__:36"
              ],
              "hash": "72ab193439b8d6339c00a4855a7a366dc8e40203b3f25b500009c0649c7a9127",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-parsers-universal-converter-universalconverter---init--",
              "summary": "Method for universalconverter. init",
              "summary_source": "heuristic",
              "tags": [
                "method",
                "private",
                "public"
              ],
              "calls": [
                "JavaScriptParser",
                "GoAnalyzer",
                "ConverterConfig"
              ],
              "called_by": []
            },
            {
              "name": "detect_language",
              "docstring": "Detect programming language from file extension",
              "line_range": [
                41,
                43
              ],
              "parameters": [
                "self",
                "file_path"
              ],
              "uid": "llmstruct.parsers.universal_converter.UniversalConverter.detect_language:41#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.universal_converter",
                "llmstruct.parsers.universal_converter.UniversalConverter",
                "llmstruct.parsers.universal_converter.UniversalConverter.detect_language:41"
              ],
              "hash": "e82e4983ec7bf9ced4143f6552313b3f0adf3282e462902308f80182fe881087",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-parsers-universal-converter-universalconverter-detect-language",
              "summary": "Detect programming language from file extension",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "LanguageDetector.detect_language"
              ],
              "called_by": []
            },
            {
              "name": "detect_project_languages",
              "docstring": "Detect all languages in project and count files",
              "line_range": [
                45,
                47
              ],
              "parameters": [
                "self",
                "project_path"
              ],
              "uid": "llmstruct.parsers.universal_converter.UniversalConverter.detect_project_languages:45#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.universal_converter",
                "llmstruct.parsers.universal_converter.UniversalConverter",
                "llmstruct.parsers.universal_converter.UniversalConverter.detect_project_languages:45"
              ],
              "hash": "27ce302c47aa78ceb3a19209855a7f210a028be108c9006a5b98db5a6cf122c5",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-parsers-universal-converter-universalconverter-detect-project-languages",
              "summary": "Detect all languages in project and count files",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "LanguageDetector.detect_project_languages"
              ],
              "called_by": []
            },
            {
              "name": "get_project_files",
              "docstring": "Get all relevant files for conversion",
              "line_range": [
                49,
                76
              ],
              "parameters": [
                "self",
                "project_path",
                "language"
              ],
              "uid": "llmstruct.parsers.universal_converter.UniversalConverter.get_project_files:49#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.universal_converter",
                "llmstruct.parsers.universal_converter.UniversalConverter",
                "llmstruct.parsers.universal_converter.UniversalConverter.get_project_files:49"
              ],
              "hash": "d0714393b90e5f25e5bd435201db2593db681567b2df43418391c063390c25f5",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-parsers-universal-converter-universalconverter-get-project-files",
              "summary": "Get all relevant files for conversion",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "files.append",
                "any",
                "self.detect_language",
                "os.walk"
              ],
              "called_by": []
            },
            {
              "name": "convert_python_project",
              "docstring": "Convert Python project to llmstruct format",
              "line_range": [
                78,
                109
              ],
              "parameters": [
                "self",
                "project_path"
              ],
              "uid": "llmstruct.parsers.universal_converter.UniversalConverter.convert_python_project:78#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.universal_converter",
                "llmstruct.parsers.universal_converter.UniversalConverter",
                "llmstruct.parsers.universal_converter.UniversalConverter.convert_python_project:78"
              ],
              "hash": "4a2ddfea868ef9b6a2e74c378b51be23e8b99065a8e5005cd8700fe733ff4736",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-parsers-universal-converter-universalconverter-convert-python-project",
              "summary": "Convert Python project to llmstruct format",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "logger.info",
                "len",
                "analyze_python",
                "self.get_project_files",
                "self._build_project_structure",
                "logger.warning",
                "toc.append",
                "modules.append",
                "module_data.get"
              ],
              "called_by": []
            },
            {
              "name": "convert_go_project",
              "docstring": "Convert Go project to llmstruct format",
              "line_range": [
                111,
                128
              ],
              "parameters": [
                "self",
                "project_path"
              ],
              "uid": "llmstruct.parsers.universal_converter.UniversalConverter.convert_go_project:111#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.universal_converter",
                "llmstruct.parsers.universal_converter.UniversalConverter",
                "llmstruct.parsers.universal_converter.UniversalConverter.convert_go_project:111"
              ],
              "hash": "feaee83d710076a2867506d0a7e5b413842a86111598911d946e0989192355cc",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-parsers-universal-converter-universalconverter-convert-go-project",
              "summary": "Convert Go project to llmstruct format",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "logger.info",
                "self._build_empty_project_structure",
                "convert_to_llmstruct_format",
                "logger.error",
                "str"
              ],
              "called_by": []
            },
            {
              "name": "convert_javascript_project",
              "docstring": "Convert JavaScript project to llmstruct format",
              "line_range": [
                130,
                161
              ],
              "parameters": [
                "self",
                "project_path"
              ],
              "uid": "llmstruct.parsers.universal_converter.UniversalConverter.convert_javascript_project:130#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.universal_converter",
                "llmstruct.parsers.universal_converter.UniversalConverter",
                "llmstruct.parsers.universal_converter.UniversalConverter.convert_javascript_project:130"
              ],
              "hash": "c2f6ad4d34ae616c6bbcdc32f62218d541c4df6591c5183ec328e1e9680c80c1",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-parsers-universal-converter-universalconverter-convert-javascript-project",
              "summary": "Convert JavaScript project to llmstruct format",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "logger.info",
                "len",
                "self.get_project_files",
                "self._build_project_structure",
                "logger.warning",
                "toc.append",
                "modules.append",
                "module_data.get"
              ],
              "called_by": []
            },
            {
              "name": "convert_project",
              "docstring": "Convert any project to llmstruct format",
              "line_range": [
                163,
                188
              ],
              "parameters": [
                "self",
                "project_path",
                "language"
              ],
              "uid": "llmstruct.parsers.universal_converter.UniversalConverter.convert_project:163#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.universal_converter",
                "llmstruct.parsers.universal_converter.UniversalConverter",
                "llmstruct.parsers.universal_converter.UniversalConverter.convert_project:163"
              ],
              "hash": "1d49f3ac2e6821673a48ac87e9f801c55bd1e41e5f51bd2217841dc4793aca61",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-parsers-universal-converter-universalconverter-convert-project",
              "summary": "Convert any project to llmstruct format",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "logger.info",
                "self.convert_javascript_project",
                "languages.keys",
                "self.convert_go_project",
                "ValueError",
                "self.convert_python_project",
                "self.detect_project_languages",
                "NotImplementedError",
                "max"
              ],
              "called_by": []
            },
            {
              "name": "convert_multi_language_project",
              "docstring": "Convert multi-language project with separate sections per language",
              "line_range": [
                190,
                220
              ],
              "parameters": [
                "self",
                "project_path"
              ],
              "uid": "llmstruct.parsers.universal_converter.UniversalConverter.convert_multi_language_project:190#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.universal_converter",
                "llmstruct.parsers.universal_converter.UniversalConverter",
                "llmstruct.parsers.universal_converter.UniversalConverter.convert_multi_language_project:190"
              ],
              "hash": "b26de1066705771520d5c523ebb57d5c652a34534b416188445ffabd7924d3d0",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-parsers-universal-converter-universalconverter-convert-multi-language-project",
              "summary": "Convert multi-language project with separate sections per language",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "logger.info",
                "self._merge_language_results",
                "self.convert_javascript_project",
                "languages.keys",
                "logger.warning",
                "self.convert_go_project",
                "ValueError",
                "self.convert_python_project",
                "self.detect_project_languages",
                "logger.error"
              ],
              "called_by": []
            },
            {
              "name": "_build_project_structure",
              "docstring": "Build standard llmstruct project structure",
              "line_range": [
                222,
                250
              ],
              "parameters": [
                "self",
                "language",
                "project_path",
                "modules",
                "toc"
              ],
              "uid": "llmstruct.parsers.universal_converter.UniversalConverter._build_project_structure:222#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.universal_converter",
                "llmstruct.parsers.universal_converter.UniversalConverter",
                "llmstruct.parsers.universal_converter.UniversalConverter._build_project_structure:222"
              ],
              "hash": "8ab72a9ef1dbcbacce2808575787f6878a5aef452d3e2db3f08007df5546b6ea",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-parsers-universal-converter-universalconverter--build-project-structure",
              "summary": "Build standard llmstruct project structure",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "m.get",
                "len",
                "sum",
                "language.title"
              ],
              "called_by": []
            },
            {
              "name": "_build_empty_project_structure",
              "docstring": "Build empty structure when conversion fails",
              "line_range": [
                252,
                267
              ],
              "parameters": [
                "self",
                "language",
                "project_path",
                "error"
              ],
              "uid": "llmstruct.parsers.universal_converter.UniversalConverter._build_empty_project_structure:252#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.universal_converter",
                "llmstruct.parsers.universal_converter.UniversalConverter",
                "llmstruct.parsers.universal_converter.UniversalConverter._build_empty_project_structure:252"
              ],
              "hash": "f4e08305f0d98c66a950aeef1538e6d45344f48e18f525e4373c1a8756663697",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-parsers-universal-converter-universalconverter--build-empty-project-structure",
              "summary": "Build empty structure when conversion fails",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [],
              "called_by": []
            },
            {
              "name": "_merge_language_results",
              "docstring": "Merge multiple language results into unified structure",
              "line_range": [
                269,
                310
              ],
              "parameters": [
                "self",
                "project_path",
                "language_results"
              ],
              "uid": "llmstruct.parsers.universal_converter.UniversalConverter._merge_language_results:269#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.universal_converter",
                "llmstruct.parsers.universal_converter.UniversalConverter",
                "llmstruct.parsers.universal_converter.UniversalConverter._merge_language_results:269"
              ],
              "hash": "67d9d2b57113fc7bde1fe75013fd47598ec8cb159aba787bdab55b5825646fc2",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-parsers-universal-converter-universalconverter--merge-language-results",
              "summary": "Merge multiple language results into unified structure",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "list",
                "result.get",
                "all_toc.append",
                "stats.get",
                "language_results.keys",
                "all_modules.append",
                "language_results.items"
              ],
              "called_by": []
            }
          ],
          "bases": [],
          "uid": "llmstruct.parsers.universal_converter.UniversalConverter:33#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.universal_converter",
            "llmstruct.parsers.universal_converter.UniversalConverter:33"
          ],
          "hash": "30c9b53ce0d527167956398eb6af62dbefea2df555025dc32053de77a0af13e9",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-parsers-universal-converter-universalconverter",
          "summary": "Universal code converter for any programming language",
          "summary_source": "docstring",
          "tags": [
            "class",
            "public"
          ]
        }
      ],
      "callgraph": {
        "__init__": [
          "JavaScriptParser",
          "GoAnalyzer",
          "ConverterConfig"
        ],
        "detect_language": [
          "LanguageDetector.detect_language"
        ],
        "detect_project_languages": [
          "LanguageDetector.detect_project_languages"
        ],
        "get_project_files": [
          "files.append",
          "any",
          "self.detect_language",
          "os.walk"
        ],
        "convert_python_project": [
          "logger.info",
          "len",
          "analyze_python",
          "self.get_project_files",
          "self._build_project_structure",
          "logger.warning",
          "toc.append",
          "modules.append",
          "module_data.get"
        ],
        "convert_go_project": [
          "logger.info",
          "self._build_empty_project_structure",
          "convert_to_llmstruct_format",
          "logger.error",
          "str"
        ],
        "convert_javascript_project": [
          "logger.info",
          "len",
          "self.get_project_files",
          "self._build_project_structure",
          "logger.warning",
          "toc.append",
          "modules.append",
          "module_data.get"
        ],
        "convert_project": [
          "logger.info",
          "self.convert_javascript_project",
          "languages.keys",
          "self.convert_go_project",
          "ValueError",
          "self.convert_python_project",
          "self.detect_project_languages",
          "NotImplementedError",
          "max"
        ],
        "convert_multi_language_project": [
          "logger.info",
          "self._merge_language_results",
          "self.convert_javascript_project",
          "languages.keys",
          "logger.warning",
          "self.convert_go_project",
          "ValueError",
          "self.convert_python_project",
          "self.detect_project_languages",
          "logger.error"
        ],
        "_build_project_structure": [
          "m.get",
          "len",
          "sum",
          "language.title"
        ],
        "_build_empty_project_structure": [],
        "_merge_language_results": [
          "list",
          "result.get",
          "all_toc.append",
          "stats.get",
          "language_results.keys",
          "all_modules.append",
          "language_results.items"
        ],
        "main": [
          "json.dumps",
          "exit",
          "ConverterConfig",
          "parser.add_argument",
          "traceback.print_exc",
          "parser.parse_args",
          "result.get",
          "converter.convert_multi_language_project",
          "argparse.ArgumentParser",
          "UniversalConverter",
          "open",
          "Language",
          "f.write",
          "stats.get",
          "logger.error",
          "converter.convert_project",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "ConverterConfig",
        "Dict",
        "GoAnalyzer",
        "JavaScriptParser",
        "Language",
        "LanguageDetector",
        "List",
        "Optional",
        "Path",
        "Union",
        "analyze_module",
        "argparse",
        "convert_to_llmstruct_format",
        "converter_config",
        "go_analyzer",
        "go_converter",
        "javascript_parser",
        "json",
        "logging",
        "os",
        "pathlib",
        "python_parser",
        "sys",
        "traceback",
        "typing"
      ],
      "hash": "0e9cb6b474f43c12c13883fa595623e56289a98334605e24c843bb548bc85295",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.parsers.universal_converter.llmstruct.parsers.universal_converter#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.parsers",
        "llmstruct.parsers.universal_converter",
        "llmstruct.parsers.universal_converter.llmstruct.parsers.universal_converter"
      ],
      "summary": "Universal Code Converter - Orchestrates all language parsers\nConverts any codebase to llmstruct JSON format",
      "summary_source": "docstring",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "b51c4a69-140e-49d3-aeb0-c3e9329226e3"
    },
    {
      "module_id": "llmstruct.parsers.python_parser",
      "path": "llmstruct/parsers/python_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "infer_category",
          "docstring": "Infer module category based on its path.",
          "line_range": [
            24,
            31
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.python_parser.infer_category:24#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.python_parser",
            "llmstruct.parsers.python_parser.infer_category:24"
          ],
          "hash": "df0f0386752c4aea7395ed7fe6c06e60cabf1e92a29ee771c6b54a0266dbf026",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-parsers-python-parser-infer-category",
          "summary": "Infer module category based on its path.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "Path"
          ],
          "called_by": [
            "analyze_module"
          ]
        },
        {
          "name": "compute_file_hash",
          "docstring": "Compute SHA-256 hash of file content using new hash system.",
          "line_range": [
            95,
            101
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.python_parser.compute_file_hash:95#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.python_parser",
            "llmstruct.parsers.python_parser.compute_file_hash:95"
          ],
          "hash": "688a6c306eee4e77f11f0305ca8ccdf3aea95f9688ee5d4d6856d8d8ffd901a8",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-parsers-python-parser-compute-file-hash",
          "summary": "Compute SHA-256 hash of file content using new hash system.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "hash_file",
            "logging.error"
          ],
          "called_by": [
            "analyze_module"
          ]
        },
        {
          "name": "analyze_module",
          "docstring": "Analyze Python module and return structured data with Phase 1 enhancements.",
          "line_range": [
            104,
            324
          ],
          "parameters": [
            "file_path",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.python_parser.analyze_module:104#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.python_parser",
            "llmstruct.parsers.python_parser.analyze_module:104"
          ],
          "hash": "e1479f669828f127c3cf127aad81acf970c16598e72a9e8dcb745237c6c2011d",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-parsers-python-parser-analyze-module",
          "summary": "Analyze Python module and return structured data with Phase 1 enhancements.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "generate_uid_components",
            "ast.parse",
            "f.read",
            "generate_uid",
            "ast.get_docstring",
            "hash_entity",
            "getattr",
            "open",
            "visitor.visit",
            "logging.error",
            "infer_tags",
            "CallVisitor",
            "generate_summary",
            "sorted",
            "isinstance",
            "set",
            "hasattr",
            "str",
            "compute_file_hash",
            "list",
            "ast.get_source_segment",
            "infer_category",
            "methods.append",
            "ast.unparse",
            "Path",
            "classes.append",
            "functions.append",
            "ast.walk"
          ],
          "called_by": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            37,
            41
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.python_parser.__init__:37#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.python_parser",
            "llmstruct.parsers.python_parser.__init__:37"
          ],
          "hash": "8ad385724c65e3c67595c783cfa689bd42fa81dda6652545b65b1c3ff6aeba46",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-parsers-python-parser---init--",
          "summary": "Function for init",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "set"
          ],
          "called_by": []
        },
        {
          "name": "visit_Import",
          "docstring": "Capture import statements.",
          "line_range": [
            43,
            47
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.python_parser.visit_Import:43#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.python_parser",
            "llmstruct.parsers.python_parser.visit_Import:43"
          ],
          "hash": "ab69ee6a266a9da94401702b101e07111ba02f77eebe9c558c42b413a82f2cd1",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-parsers-python-parser-visit-import",
          "summary": "Capture import statements.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "self.generic_visit"
          ],
          "called_by": []
        },
        {
          "name": "visit_ImportFrom",
          "docstring": "Capture from-import statements.",
          "line_range": [
            49,
            55
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.python_parser.visit_ImportFrom:49#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.python_parser",
            "llmstruct.parsers.python_parser.visit_ImportFrom:49"
          ],
          "hash": "121c38e0aac956b69bf6b035839aa81da9b1cebd3d8f4ed011c2eabdb11fc3d8",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-parsers-python-parser-visit-importfrom",
          "summary": "Capture from-import statements.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "self.generic_visit"
          ],
          "called_by": []
        },
        {
          "name": "visit_FunctionDef",
          "docstring": "Track function definitions and their calls.",
          "line_range": [
            57,
            64
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.python_parser.visit_FunctionDef:57#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.python_parser",
            "llmstruct.parsers.python_parser.visit_FunctionDef:57"
          ],
          "hash": "85813e45714f1274788061abe4ea0e222fd9b7ff26b45162e4c507fd194f7ee7",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-parsers-python-parser-visit-functiondef",
          "summary": "Track function definitions and their calls.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "self.generic_visit",
            "set"
          ],
          "called_by": []
        },
        {
          "name": "visit_AsyncFunctionDef",
          "docstring": "Track async function definitions and their calls.",
          "line_range": [
            66,
            73
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.python_parser.visit_AsyncFunctionDef:66#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.python_parser",
            "llmstruct.parsers.python_parser.visit_AsyncFunctionDef:66"
          ],
          "hash": "bccc675c99c3960e5316a0527b315108c08ef3eb324253b5703091a03f19c4e1",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-parsers-python-parser-visit-asyncfunctiondef",
          "summary": "Track async function definitions and their calls.",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "public"
          ],
          "calls": [
            "self.generic_visit",
            "set"
          ],
          "called_by": []
        },
        {
          "name": "visit_Call",
          "docstring": "Capture function calls.",
          "line_range": [
            75,
            92
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.python_parser.visit_Call:75#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.python_parser",
            "llmstruct.parsers.python_parser.visit_Call:75"
          ],
          "hash": "2983d602553f68c0f5b3ed8f3e67301b85d159ad0b7781b886d04b85e1a405b6",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-parsers-python-parser-visit-call",
          "summary": "Capture function calls.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "self.generic_visit",
            "set",
            "isinstance"
          ],
          "called_by": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "AST visitor to collect function calls and dependencies.",
          "line_range": [
            34,
            92
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                37,
                41
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.parsers.python_parser.CallVisitor.__init__:37#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.python_parser",
                "llmstruct.parsers.python_parser.CallVisitor",
                "llmstruct.parsers.python_parser.CallVisitor.__init__:37"
              ],
              "hash": "321dff657958c0076f39048930bff47d562e95ec91e0a707404d00668ba05da1",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-parsers-python-parser-callvisitor---init--",
              "summary": "Method for callvisitor. init",
              "summary_source": "heuristic",
              "tags": [
                "method",
                "private",
                "public"
              ],
              "calls": [
                "set"
              ],
              "called_by": []
            },
            {
              "name": "visit_Import",
              "docstring": "Capture import statements.",
              "line_range": [
                43,
                47
              ],
              "parameters": [
                "self",
                "node"
              ],
              "uid": "llmstruct.parsers.python_parser.CallVisitor.visit_Import:43#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.python_parser",
                "llmstruct.parsers.python_parser.CallVisitor",
                "llmstruct.parsers.python_parser.CallVisitor.visit_Import:43"
              ],
              "hash": "5ded0f67ba185e14d6f7467014420dee417cc7cf5843a58a93e2976f08999ae9",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-parsers-python-parser-callvisitor-visit-import",
              "summary": "Capture import statements.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "self.generic_visit"
              ],
              "called_by": []
            },
            {
              "name": "visit_ImportFrom",
              "docstring": "Capture from-import statements.",
              "line_range": [
                49,
                55
              ],
              "parameters": [
                "self",
                "node"
              ],
              "uid": "llmstruct.parsers.python_parser.CallVisitor.visit_ImportFrom:49#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.python_parser",
                "llmstruct.parsers.python_parser.CallVisitor",
                "llmstruct.parsers.python_parser.CallVisitor.visit_ImportFrom:49"
              ],
              "hash": "8514065421eb9d4f0fa385ac614f3ac4649058fa8addcb489dc9a04f8237f2db",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-parsers-python-parser-callvisitor-visit-importfrom",
              "summary": "Capture from-import statements.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "self.generic_visit"
              ],
              "called_by": []
            },
            {
              "name": "visit_FunctionDef",
              "docstring": "Track function definitions and their calls.",
              "line_range": [
                57,
                64
              ],
              "parameters": [
                "self",
                "node"
              ],
              "uid": "llmstruct.parsers.python_parser.CallVisitor.visit_FunctionDef:57#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.python_parser",
                "llmstruct.parsers.python_parser.CallVisitor",
                "llmstruct.parsers.python_parser.CallVisitor.visit_FunctionDef:57"
              ],
              "hash": "96cfdffbcaa16342a112234cf3e7149e9a508c8e3c06ecb203d6d0bf420ee12b",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-parsers-python-parser-callvisitor-visit-functiondef",
              "summary": "Track function definitions and their calls.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "self.generic_visit",
                "set"
              ],
              "called_by": []
            },
            {
              "name": "visit_AsyncFunctionDef",
              "docstring": "Track async function definitions and their calls.",
              "line_range": [
                66,
                73
              ],
              "parameters": [
                "self",
                "node"
              ],
              "uid": "llmstruct.parsers.python_parser.CallVisitor.visit_AsyncFunctionDef:66#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.python_parser",
                "llmstruct.parsers.python_parser.CallVisitor",
                "llmstruct.parsers.python_parser.CallVisitor.visit_AsyncFunctionDef:66"
              ],
              "hash": "2ce93d493bb568cd599bdaaf37d8188ddb259441935310f4329c2f61336d5c1e",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-parsers-python-parser-callvisitor-visit-asyncfunctiondef",
              "summary": "Track async function definitions and their calls.",
              "summary_source": "docstring",
              "tags": [
                "async",
                "method",
                "public"
              ],
              "calls": [
                "self.generic_visit",
                "set"
              ],
              "called_by": []
            },
            {
              "name": "visit_Call",
              "docstring": "Capture function calls.",
              "line_range": [
                75,
                92
              ],
              "parameters": [
                "self",
                "node"
              ],
              "uid": "llmstruct.parsers.python_parser.CallVisitor.visit_Call:75#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.python_parser",
                "llmstruct.parsers.python_parser.CallVisitor",
                "llmstruct.parsers.python_parser.CallVisitor.visit_Call:75"
              ],
              "hash": "49383b46e1602248b721376640948d58e3dfabd59d619604db74f5507220cf8e",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-parsers-python-parser-callvisitor-visit-call",
              "summary": "Capture function calls.",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "self.generic_visit",
                "set",
                "isinstance"
              ],
              "called_by": []
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ],
          "uid": "llmstruct.parsers.python_parser.CallVisitor:34#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.python_parser",
            "llmstruct.parsers.python_parser.CallVisitor:34"
          ],
          "hash": "08bf9974965a822fdb737bada8082bb6bf6e14d66e0002c267d9a66204b2e07b",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-parsers-python-parser-callvisitor",
          "summary": "AST visitor to collect function calls and dependencies.",
          "summary_source": "docstring",
          "tags": [
            "class",
            "public"
          ]
        }
      ],
      "callgraph": {
        "infer_category": [
          "Path"
        ],
        "__init__": [
          "set"
        ],
        "visit_Import": [
          "self.generic_visit"
        ],
        "visit_ImportFrom": [
          "self.generic_visit"
        ],
        "visit_FunctionDef": [
          "self.generic_visit",
          "set"
        ],
        "visit_AsyncFunctionDef": [
          "self.generic_visit",
          "set"
        ],
        "visit_Call": [
          "self.generic_visit",
          "set",
          "isinstance"
        ],
        "compute_file_hash": [
          "hash_file",
          "logging.error"
        ],
        "analyze_module": [
          "generate_uid_components",
          "ast.parse",
          "f.read",
          "generate_uid",
          "ast.get_docstring",
          "hash_entity",
          "getattr",
          "open",
          "visitor.visit",
          "logging.error",
          "infer_tags",
          "CallVisitor",
          "generate_summary",
          "sorted",
          "isinstance",
          "set",
          "hasattr",
          "str",
          "compute_file_hash",
          "list",
          "ast.get_source_segment",
          "infer_category",
          "methods.append",
          "ast.unparse",
          "Path",
          "classes.append",
          "functions.append",
          "ast.walk"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "Set",
        "UIDType",
        "ast",
        "core.hash_utils",
        "core.summary_providers",
        "core.uid_generator",
        "enhance_entity_with_uid",
        "generate_summary",
        "generate_uid",
        "generate_uid_components",
        "hash_content",
        "hash_entity",
        "hash_file",
        "hashlib",
        "infer_tags",
        "llmstruct.core.tag_inference",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": "38c6570a5aee1901b6a02d1299f1c65c8d97329426d3672b51768aa3cc4e082f",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.parsers.python_parser.llmstruct.parsers.python_parser#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.parsers",
        "llmstruct.parsers.python_parser",
        "llmstruct.parsers.python_parser.llmstruct.parsers.python_parser"
      ],
      "summary": "Module for llmstruct.parsers.python parser",
      "summary_source": "heuristic",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "67420b30-3f38-40a8-9f43-1f5d27f2bc8a"
    },
    {
      "module_id": "llmstruct.parsers.go_analyzer",
      "path": "llmstruct/parsers/go_analyzer.py",
      "category": "core",
      "module_doc": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 Go \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043b\u044f Docker \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b: go/packages, go/analysis",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            24,
            26
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.go_analyzer.__init__:24#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.go_analyzer",
            "llmstruct.parsers.go_analyzer.__init__:24"
          ],
          "hash": "73289a34394d70bd49e0ef4790249c9c21dd4ffc95af85ffcbe09e98af541e92",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-parsers-go-analyzer---init--",
          "summary": "Function for init",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "private"
          ],
          "calls": [],
          "called_by": []
        },
        {
          "name": "_setup_analyzer",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0441\u0440\u0435\u0434\u0443 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430",
          "line_range": [
            28,
            66
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.go_analyzer._setup_analyzer:28#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.go_analyzer",
            "llmstruct.parsers.go_analyzer._setup_analyzer:28"
          ],
          "hash": "07c62b3c282b045f57e6d586abd73cf23d8aca0545d2bca7b8cd3e31034190e6",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-parsers-go-analyzer--setup-analyzer",
          "summary": "\u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0441\u0440\u0435\u0434\u0443 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "str",
            "analyzer_file.write_text",
            "logging.warning",
            "analyzer_source.read_text",
            "Path",
            "tempfile.mkdtemp",
            "subprocess.run"
          ],
          "called_by": []
        },
        {
          "name": "_cleanup",
          "docstring": "\u041e\u0447\u0438\u0449\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b",
          "line_range": [
            68,
            72
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.go_analyzer._cleanup:68#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.go_analyzer",
            "llmstruct.parsers.go_analyzer._cleanup:68"
          ],
          "hash": "4d1926ca9b8732303f11a9635a56e68bf2bd0172476bbb73a771b015bc33d5e1",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-parsers-go-analyzer--cleanup",
          "summary": "\u041e\u0447\u0438\u0449\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "Path",
            "shutil.rmtree"
          ],
          "called_by": []
        },
        {
          "name": "analyze_project",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 Go \u043f\u0440\u043e\u0435\u043a\u0442",
          "line_range": [
            74,
            125
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.go_analyzer.analyze_project:74#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.go_analyzer",
            "llmstruct.parsers.go_analyzer.analyze_project:74"
          ],
          "hash": "1f68bb098a115f2659701f316c2d106324c6000199a95921729b7c0eb5d894f6",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-parsers-go-analyzer-analyze-project",
          "summary": "\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 Go \u043f\u0440\u043e\u0435\u043a\u0442",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "self._setup_analyzer",
            "json.loads",
            "logging.warning",
            "logging.info",
            "self._fallback_analysis",
            "self._cleanup",
            "subprocess.run",
            "logging.error"
          ],
          "called_by": []
        },
        {
          "name": "_fallback_analysis",
          "docstring": "Fallback \u0430\u043d\u0430\u043b\u0438\u0437 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0444\u0430\u0439\u043b\u043e\u0432",
          "line_range": [
            127,
            201
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.go_analyzer._fallback_analysis:127#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.go_analyzer",
            "llmstruct.parsers.go_analyzer._fallback_analysis:127"
          ],
          "hash": "1e57cc4ddae332baa6731dd1a354a71095677d49cf5dad9a382d398a5e104f70",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-parsers-go-analyzer--fallback-analysis",
          "summary": "Fallback \u0430\u043d\u0430\u043b\u0438\u0437 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0444\u0430\u0439\u043b\u043e\u0432",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "list",
            "file_path.relative_to",
            "set",
            "go_mod_path.read_text",
            "line.strip",
            "line.startswith",
            "file_path.read_text",
            "go_mod_path.exists",
            "len",
            "packages.add",
            "logging.warning",
            "logging.info",
            "sorted",
            "Path",
            "content.split",
            "line.split",
            "str"
          ],
          "called_by": []
        }
      ],
      "classes": [
        {
          "name": "GoAnalyzer",
          "docstring": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 Go \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432",
          "line_range": [
            21,
            201
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                24,
                26
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.parsers.go_analyzer.GoAnalyzer.__init__:24#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.go_analyzer",
                "llmstruct.parsers.go_analyzer.GoAnalyzer",
                "llmstruct.parsers.go_analyzer.GoAnalyzer.__init__:24"
              ],
              "hash": "665db2cc93a062ac242dcb02c0a9fe15bb874d4f6131fd416666d9dc58017539",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-parsers-go-analyzer-goanalyzer---init--",
              "summary": "Method for goanalyzer. init",
              "summary_source": "heuristic",
              "tags": [
                "method",
                "private",
                "public"
              ],
              "calls": [],
              "called_by": []
            },
            {
              "name": "_setup_analyzer",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0441\u0440\u0435\u0434\u0443 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430",
              "line_range": [
                28,
                66
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.parsers.go_analyzer.GoAnalyzer._setup_analyzer:28#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.go_analyzer",
                "llmstruct.parsers.go_analyzer.GoAnalyzer",
                "llmstruct.parsers.go_analyzer.GoAnalyzer._setup_analyzer:28"
              ],
              "hash": "5629fd8be9f03119e916793c2a0c7f7c3a1e0a3be40a94ff7346cef1a863d7d2",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-parsers-go-analyzer-goanalyzer--setup-analyzer",
              "summary": "\u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0441\u0440\u0435\u0434\u0443 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "str",
                "analyzer_file.write_text",
                "logging.warning",
                "analyzer_source.read_text",
                "Path",
                "tempfile.mkdtemp",
                "subprocess.run"
              ],
              "called_by": []
            },
            {
              "name": "_cleanup",
              "docstring": "\u041e\u0447\u0438\u0449\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b",
              "line_range": [
                68,
                72
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.parsers.go_analyzer.GoAnalyzer._cleanup:68#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.go_analyzer",
                "llmstruct.parsers.go_analyzer.GoAnalyzer",
                "llmstruct.parsers.go_analyzer.GoAnalyzer._cleanup:68"
              ],
              "hash": "cf403ad4ba6eefb2b8442720397f69f1ee1cddf5b1d010441b686f3604274531",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-parsers-go-analyzer-goanalyzer--cleanup",
              "summary": "\u041e\u0447\u0438\u0449\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "Path",
                "shutil.rmtree"
              ],
              "called_by": []
            },
            {
              "name": "analyze_project",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 Go \u043f\u0440\u043e\u0435\u043a\u0442",
              "line_range": [
                74,
                125
              ],
              "parameters": [
                "self",
                "project_path"
              ],
              "uid": "llmstruct.parsers.go_analyzer.GoAnalyzer.analyze_project:74#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.go_analyzer",
                "llmstruct.parsers.go_analyzer.GoAnalyzer",
                "llmstruct.parsers.go_analyzer.GoAnalyzer.analyze_project:74"
              ],
              "hash": "930237fddbe938b91ce1322f9bd8dcc24e927b3b9d8ee49e913c8128d2f63ba3",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-parsers-go-analyzer-goanalyzer-analyze-project",
              "summary": "\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 Go \u043f\u0440\u043e\u0435\u043a\u0442",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "self._setup_analyzer",
                "json.loads",
                "logging.warning",
                "logging.info",
                "self._fallback_analysis",
                "self._cleanup",
                "subprocess.run",
                "logging.error"
              ],
              "called_by": []
            },
            {
              "name": "_fallback_analysis",
              "docstring": "Fallback \u0430\u043d\u0430\u043b\u0438\u0437 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0444\u0430\u0439\u043b\u043e\u0432",
              "line_range": [
                127,
                201
              ],
              "parameters": [
                "self",
                "project_path"
              ],
              "uid": "llmstruct.parsers.go_analyzer.GoAnalyzer._fallback_analysis:127#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.go_analyzer",
                "llmstruct.parsers.go_analyzer.GoAnalyzer",
                "llmstruct.parsers.go_analyzer.GoAnalyzer._fallback_analysis:127"
              ],
              "hash": "63c8d7aed1da8a3ae2b910cb14b87dd58b559051aa36a4122da4f79c736bb139",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-parsers-go-analyzer-goanalyzer--fallback-analysis",
              "summary": "Fallback \u0430\u043d\u0430\u043b\u0438\u0437 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0444\u0430\u0439\u043b\u043e\u0432",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "list",
                "file_path.relative_to",
                "set",
                "go_mod_path.read_text",
                "line.strip",
                "line.startswith",
                "file_path.read_text",
                "go_mod_path.exists",
                "len",
                "packages.add",
                "logging.warning",
                "logging.info",
                "sorted",
                "Path",
                "content.split",
                "line.split",
                "str"
              ],
              "called_by": []
            }
          ],
          "bases": [],
          "uid": "llmstruct.parsers.go_analyzer.GoAnalyzer:21#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.go_analyzer",
            "llmstruct.parsers.go_analyzer.GoAnalyzer:21"
          ],
          "hash": "20a5addcbf0c936c5bcce9a06a5b784b0424036ed6a17656c87af78ba1acc242",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-parsers-go-analyzer-goanalyzer",
          "summary": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 Go \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432",
          "summary_source": "docstring",
          "tags": [
            "class",
            "public"
          ]
        }
      ],
      "callgraph": {
        "__init__": [],
        "_setup_analyzer": [
          "str",
          "analyzer_file.write_text",
          "logging.warning",
          "analyzer_source.read_text",
          "Path",
          "tempfile.mkdtemp",
          "subprocess.run"
        ],
        "_cleanup": [
          "Path",
          "shutil.rmtree"
        ],
        "analyze_project": [
          "self._setup_analyzer",
          "json.loads",
          "logging.warning",
          "logging.info",
          "self._fallback_analysis",
          "self._cleanup",
          "subprocess.run",
          "logging.error"
        ],
        "_fallback_analysis": [
          "list",
          "file_path.relative_to",
          "set",
          "go_mod_path.read_text",
          "line.strip",
          "line.startswith",
          "file_path.read_text",
          "go_mod_path.exists",
          "len",
          "packages.add",
          "logging.warning",
          "logging.info",
          "sorted",
          "Path",
          "content.split",
          "line.split",
          "str"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "convert_to_llmstruct_format",
        "datetime",
        "go_converter",
        "hashlib",
        "json",
        "logging",
        "os",
        "pathlib",
        "shutil",
        "subprocess",
        "sys",
        "tempfile",
        "traceback",
        "typing",
        "uuid"
      ],
      "hash": "923fb543f6854ce1a1bac463656f2585ff577dd5b130532b28b617620281a8a4",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.parsers.go_analyzer.llmstruct.parsers.go_analyzer#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.parsers",
        "llmstruct.parsers.go_analyzer",
        "llmstruct.parsers.go_analyzer.llmstruct.parsers.go_analyzer"
      ],
      "summary": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 Go \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043b\u044f Docker \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b: go/packages, go/analysis",
      "summary_source": "docstring",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "fe80f60c-cda3-4bf6-8e18-1ff83a1cd11e"
    },
    {
      "module_id": "llmstruct.parsers.__init__",
      "path": "llmstruct/parsers/__init__.py",
      "category": "cli",
      "module_doc": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "JavaScriptParser",
        "javascript_parser"
      ],
      "hash": "2f1fce5cf3e867869608b18a8ab1197f8a32add4fd35d4de75f891a9dad04b63",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.parsers.__init__.llmstruct.parsers.__init__#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.parsers",
        "llmstruct.parsers.__init__",
        "llmstruct.parsers.__init__.llmstruct.parsers.__init__"
      ],
      "summary": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "summary_source": "docstring",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "ac1d8c48-32c0-45ca-9c8d-b0ca1766afbf"
    },
    {
      "module_id": "llmstruct.parsers.go_converter",
      "path": "llmstruct/parsers/go_converter.py",
      "category": "core",
      "module_doc": "Go to LLMStruct Converter\n\nUtilities for converting Go analysis results to llmstruct JSON format.",
      "functions": [
        {
          "name": "convert_to_llmstruct_format",
          "docstring": "\u041a\u043e\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 llmstruct",
          "line_range": [
            16,
            158
          ],
          "parameters": [
            "analysis",
            "include_ranges",
            "goals"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.go_converter.convert_to_llmstruct_format:16#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.go_converter",
            "llmstruct.parsers.go_converter.convert_to_llmstruct_format:16"
          ],
          "hash": "b83d228873310f00b5f078579d36bb6fdbba0375577d737182c636f9b734a38a",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-parsers-go-converter-convert-to-llmstruct-format",
          "summary": "\u041a\u043e\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 llmstruct",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "path.endswith",
            "infer_tags",
            "compute_file_hash",
            "iface.get",
            "str",
            "functions.append",
            "module.get",
            "len",
            "sum",
            "struct.get",
            "modules.append",
            "classes.append",
            "path.replace",
            "uuid.uuid4",
            "fn.get",
            "analysis.get",
            "toc.append",
            "file_data.get"
          ],
          "called_by": []
        },
        {
          "name": "compute_file_hash",
          "docstring": "\u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 SHA-256 \u0445\u044d\u0448 \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            161,
            167
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.go_converter.compute_file_hash:161#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.go_converter",
            "llmstruct.parsers.go_converter.compute_file_hash:161"
          ],
          "hash": "b84ba51534a735a772dce34fa1052266dc82a307c1a15c6205fda86e0946c647",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-parsers-go-converter-compute-file-hash",
          "summary": "\u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 SHA-256 \u0445\u044d\u0448 \u0444\u0430\u0439\u043b\u0430",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "hashlib.sha256",
            "open",
            "f.read"
          ],
          "called_by": [
            "convert_to_llmstruct_format"
          ]
        }
      ],
      "classes": [],
      "callgraph": {
        "convert_to_llmstruct_format": [
          "path.endswith",
          "infer_tags",
          "compute_file_hash",
          "iface.get",
          "str",
          "functions.append",
          "module.get",
          "len",
          "sum",
          "struct.get",
          "modules.append",
          "classes.append",
          "path.replace",
          "uuid.uuid4",
          "fn.get",
          "analysis.get",
          "toc.append",
          "file_data.get"
        ],
        "compute_file_hash": [
          "hashlib.sha256",
          "open",
          "f.read"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "datetime",
        "hashlib",
        "infer_tags",
        "llmstruct.core.tag_inference",
        "typing",
        "uuid"
      ],
      "hash": "65ced6861f11e18b23a88480e17634c4208abcb8fcbcc0452f49f80956bd78d2",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.parsers.go_converter.llmstruct.parsers.go_converter#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.parsers",
        "llmstruct.parsers.go_converter",
        "llmstruct.parsers.go_converter.llmstruct.parsers.go_converter"
      ],
      "summary": "Go to LLMStruct Converter\n\nUtilities for converting Go analysis results to llmstruct JSON format.",
      "summary_source": "docstring",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "913a4ba0-fa92-4480-82d4-732936e2e1c4"
    },
    {
      "module_id": "llmstruct.parsers.javascript_parser",
      "path": "llmstruct/parsers/javascript_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            10,
            14
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.javascript_parser.__init__:10#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.javascript_parser",
            "llmstruct.parsers.javascript_parser.__init__:10"
          ],
          "hash": "762cabed76f63a744cf9a908c0b9837c98785f00c6d72afaa237516fcebfaa2d",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-parsers-javascript-parser---init--",
          "summary": "Function for init",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "set"
          ],
          "called_by": []
        },
        {
          "name": "file_hash",
          "docstring": "",
          "line_range": [
            16,
            21
          ],
          "parameters": [
            "self",
            "filepath"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.javascript_parser.file_hash:16#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.javascript_parser",
            "llmstruct.parsers.javascript_parser.file_hash:16"
          ],
          "hash": "3c082f86791d67acc2f6e933cde5020857a82c7cdf76d5305715646b266910e1",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-parsers-javascript-parser-file-hash",
          "summary": "Function for file hash",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "hashlib.sha256",
            "open",
            "f.read"
          ],
          "called_by": []
        },
        {
          "name": "compute_file_metadata",
          "docstring": "",
          "line_range": [
            23,
            42
          ],
          "parameters": [
            "self",
            "filepath",
            "include_hashes"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.javascript_parser.compute_file_metadata:23#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.javascript_parser",
            "llmstruct.parsers.javascript_parser.compute_file_metadata:23"
          ],
          "hash": "1cd1bbdaae1c8bcfd3b1247f73ccab5236d15d29671e72cfc0e42037f07388df",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-parsers-javascript-parser-compute-file-metadata",
          "summary": "Function for compute file metadata",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "self.file_hash",
            "open",
            "os.stat",
            "sum"
          ],
          "called_by": []
        },
        {
          "name": "parse_module",
          "docstring": "",
          "line_range": [
            44,
            128
          ],
          "parameters": [
            "self",
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.javascript_parser.parse_module:44#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.javascript_parser",
            "llmstruct.parsers.javascript_parser.parse_module:44"
          ],
          "hash": "c37772ef1d536efd59349137025d6db2e068b87d2296b5a74747379b62fd4c6e",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-parsers-javascript-parser-parse-module",
          "summary": "Parses module",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "f.read",
            "self.compute_file_metadata",
            "open",
            "esprima.parseModule",
            "str"
          ],
          "called_by": []
        },
        {
          "name": "extract_signature",
          "docstring": "",
          "line_range": [
            79,
            81
          ],
          "parameters": [
            "node"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.javascript_parser.extract_signature:79#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.javascript_parser",
            "llmstruct.parsers.javascript_parser.extract_signature:79"
          ],
          "hash": "b6cf590b77cbb7534d0ad4718649c5b5795550dbce83274a5d98d520c1feca21",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-parsers-javascript-parser-extract-signature",
          "summary": "Function for extract signature",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "hasattr"
          ],
          "called_by": []
        }
      ],
      "classes": [
        {
          "name": "JavaScriptParser",
          "docstring": "",
          "line_range": [
            9,
            128
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                10,
                14
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.parsers.javascript_parser.JavaScriptParser.__init__:10#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.javascript_parser",
                "llmstruct.parsers.javascript_parser.JavaScriptParser",
                "llmstruct.parsers.javascript_parser.JavaScriptParser.__init__:10"
              ],
              "hash": "a8f8e880938f2355f36774163a149162e7c41f5b37b046fb7dd410eb57f6f207",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-parsers-javascript-parser-javascriptparser---init--",
              "summary": "Method for javascriptparser. init",
              "summary_source": "heuristic",
              "tags": [
                "method",
                "private",
                "public"
              ],
              "calls": [
                "set"
              ],
              "called_by": []
            },
            {
              "name": "file_hash",
              "docstring": "",
              "line_range": [
                16,
                21
              ],
              "parameters": [
                "self",
                "filepath"
              ],
              "uid": "llmstruct.parsers.javascript_parser.JavaScriptParser.file_hash:16#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.javascript_parser",
                "llmstruct.parsers.javascript_parser.JavaScriptParser",
                "llmstruct.parsers.javascript_parser.JavaScriptParser.file_hash:16"
              ],
              "hash": "6d81a19156536d23b0e56bbc4feba77000d091b3bf82ee1aa67e8e2ab074994b",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-parsers-javascript-parser-javascriptparser-file-hash",
              "summary": "Method for javascriptparser.file hash",
              "summary_source": "heuristic",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "hashlib.sha256",
                "open",
                "f.read"
              ],
              "called_by": []
            },
            {
              "name": "compute_file_metadata",
              "docstring": "",
              "line_range": [
                23,
                42
              ],
              "parameters": [
                "self",
                "filepath",
                "include_hashes"
              ],
              "uid": "llmstruct.parsers.javascript_parser.JavaScriptParser.compute_file_metadata:23#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.javascript_parser",
                "llmstruct.parsers.javascript_parser.JavaScriptParser",
                "llmstruct.parsers.javascript_parser.JavaScriptParser.compute_file_metadata:23"
              ],
              "hash": "11293964e3e3bd270371bd80bd9283d77f07aab0255ca8d630fdd8f571549321",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-parsers-javascript-parser-javascriptparser-compute-file-metadata",
              "summary": "Method for javascriptparser.compute file metadata",
              "summary_source": "heuristic",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "self.file_hash",
                "open",
                "os.stat",
                "sum"
              ],
              "called_by": []
            },
            {
              "name": "parse_module",
              "docstring": "",
              "line_range": [
                44,
                128
              ],
              "parameters": [
                "self",
                "filepath",
                "root_dir",
                "include_ranges",
                "include_hashes"
              ],
              "uid": "llmstruct.parsers.javascript_parser.JavaScriptParser.parse_module:44#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.javascript_parser",
                "llmstruct.parsers.javascript_parser.JavaScriptParser",
                "llmstruct.parsers.javascript_parser.JavaScriptParser.parse_module:44"
              ],
              "hash": "6fb8c915ba29e6fc18b6107296ad9e27b05804f96b709dfe6d19406714d34a7f",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-parsers-javascript-parser-javascriptparser-parse-module",
              "summary": "Method for javascriptparser.parse module",
              "summary_source": "heuristic",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "f.read",
                "self.compute_file_metadata",
                "open",
                "esprima.parseModule",
                "str"
              ],
              "called_by": []
            }
          ],
          "bases": [],
          "uid": "llmstruct.parsers.javascript_parser.JavaScriptParser:9#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.javascript_parser",
            "llmstruct.parsers.javascript_parser.JavaScriptParser:9"
          ],
          "hash": "3b8dd4b47d2d59a9ee50387cfb4aaa6e51e3b0f9958574840e2878f290c3fddc",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-parsers-javascript-parser-javascriptparser",
          "summary": "Parses java script",
          "summary_source": "heuristic",
          "tags": [
            "class",
            "public"
          ]
        }
      ],
      "callgraph": {
        "__init__": [
          "set"
        ],
        "file_hash": [
          "hashlib.sha256",
          "open",
          "f.read"
        ],
        "compute_file_metadata": [
          "self.file_hash",
          "open",
          "os.stat",
          "sum"
        ],
        "parse_module": [
          "f.read",
          "self.compute_file_metadata",
          "open",
          "esprima.parseModule",
          "str"
        ],
        "extract_signature": [
          "hasattr"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "datetime",
        "esprima",
        "hashlib",
        "infer_tags",
        "llmstruct.core.tag_inference",
        "os",
        "typing"
      ],
      "hash": "d72a535878665688c103a8e225916fe245049497b97813cfbe91c9dc6016cb28",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.parsers.javascript_parser.llmstruct.parsers.javascript_parser#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.parsers",
        "llmstruct.parsers.javascript_parser",
        "llmstruct.parsers.javascript_parser.llmstruct.parsers.javascript_parser"
      ],
      "summary": "Module for llmstruct.parsers.javascript parser",
      "summary_source": "heuristic",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "4c1cfe9e-a82c-44be-8bb1-eec7077c5c8f"
    },
    {
      "module_id": "llmstruct.parsers.converter_config",
      "path": "llmstruct/parsers/converter_config.py",
      "category": "core",
      "module_doc": "Universal Converter Configuration and Constants\n\nContains configuration dataclasses, enums, and utilities for the universal converter.",
      "functions": [
        {
          "name": "__post_init__",
          "docstring": "",
          "line_range": [
            36,
            43
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.converter_config.__post_init__:36#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.converter_config",
            "llmstruct.parsers.converter_config.__post_init__:36"
          ],
          "hash": "4b1abf4fc7ebd16b405d5e6d752cc9d6a811603eb54822de00fc1d5e268f82c0",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-parsers-converter-config---post-init--",
          "summary": "Function for post init",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "private"
          ],
          "calls": [],
          "called_by": []
        },
        {
          "name": "detect_language",
          "docstring": "Detect programming language from file extension",
          "line_range": [
            61,
            69
          ],
          "parameters": [
            "cls",
            "file_path"
          ],
          "decorators": [
            "classmethod"
          ],
          "uid": "llmstruct.parsers.converter_config.detect_language:61#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.converter_config",
            "llmstruct.parsers.converter_config.detect_language:61"
          ],
          "hash": "fa6c3e2ab9f84c00740b48ac532845ad4a096c9888eb96bd74cc52577e7d3be3",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-parsers-converter-config-detect-language",
          "summary": "Detect programming language from file extension",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "Path"
          ],
          "called_by": []
        },
        {
          "name": "detect_project_languages",
          "docstring": "Detect all languages in project and count files",
          "line_range": [
            72,
            88
          ],
          "parameters": [
            "cls",
            "project_path",
            "exclude_patterns"
          ],
          "decorators": [
            "classmethod"
          ],
          "uid": "llmstruct.parsers.converter_config.detect_project_languages:72#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.converter_config",
            "llmstruct.parsers.converter_config.detect_project_languages:72"
          ],
          "hash": "0d70ce82518f618f076d05c4679cf9de83537d1f43673c8138f75ae72e0603f8",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-parsers-converter-config-detect-project-languages",
          "summary": "Detect all languages in project and count files",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "languages.get",
            "any",
            "cls.detect_language",
            "os.walk"
          ],
          "called_by": []
        }
      ],
      "classes": [
        {
          "name": "Language",
          "docstring": "Supported programming languages",
          "line_range": [
            13,
            23
          ],
          "methods": [],
          "bases": [
            "Enum"
          ],
          "uid": "llmstruct.parsers.converter_config.Language:13#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.converter_config",
            "llmstruct.parsers.converter_config.Language:13"
          ],
          "hash": "b9d51a534a3187175b87073cbac05b1b0c7fa81a9b4e3cb902f0bd486156e4e0",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-parsers-converter-config-language",
          "summary": "Supported programming languages",
          "summary_source": "docstring",
          "tags": [
            "class",
            "public"
          ]
        },
        {
          "name": "ConverterConfig",
          "docstring": "Configuration for universal converter",
          "line_range": [
            27,
            43
          ],
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "",
              "line_range": [
                36,
                43
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.parsers.converter_config.ConverterConfig.__post_init__:36#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.converter_config",
                "llmstruct.parsers.converter_config.ConverterConfig",
                "llmstruct.parsers.converter_config.ConverterConfig.__post_init__:36"
              ],
              "hash": "5c4681fd5ba8bc4d8841677ce2809a03e8486a1f4114b1606a1aade7c997214c",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-parsers-converter-config-converterconfig---post-init--",
              "summary": "Method for converterconfig. post init",
              "summary_source": "heuristic",
              "tags": [
                "method",
                "private",
                "public"
              ],
              "calls": [],
              "called_by": []
            }
          ],
          "bases": [],
          "uid": "llmstruct.parsers.converter_config.ConverterConfig:27#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.converter_config",
            "llmstruct.parsers.converter_config.ConverterConfig:27"
          ],
          "hash": "db95f27d00cb854a231ffb0ab65cc4dda628f95db08d1a71ba67608e0adc6fea",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-parsers-converter-config-converterconfig",
          "summary": "Configuration for universal converter",
          "summary_source": "docstring",
          "tags": [
            "class",
            "public"
          ]
        },
        {
          "name": "LanguageDetector",
          "docstring": "Utility class for language detection",
          "line_range": [
            46,
            88
          ],
          "methods": [
            {
              "name": "detect_language",
              "docstring": "Detect programming language from file extension",
              "line_range": [
                61,
                69
              ],
              "parameters": [
                "cls",
                "file_path"
              ],
              "uid": "llmstruct.parsers.converter_config.LanguageDetector.detect_language:61#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.converter_config",
                "llmstruct.parsers.converter_config.LanguageDetector",
                "llmstruct.parsers.converter_config.LanguageDetector.detect_language:61"
              ],
              "hash": "e787d14db6fec97ca3f15cd65f168206c7d65329622f0b39d714ea516ff8e15f",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-parsers-converter-config-languagedetector-detect-language",
              "summary": "Detect programming language from file extension",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "Path"
              ],
              "called_by": []
            },
            {
              "name": "detect_project_languages",
              "docstring": "Detect all languages in project and count files",
              "line_range": [
                72,
                88
              ],
              "parameters": [
                "cls",
                "project_path",
                "exclude_patterns"
              ],
              "uid": "llmstruct.parsers.converter_config.LanguageDetector.detect_project_languages:72#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.converter_config",
                "llmstruct.parsers.converter_config.LanguageDetector",
                "llmstruct.parsers.converter_config.LanguageDetector.detect_project_languages:72"
              ],
              "hash": "5af8751ade4cb067ac205d6880135bcf47b2716a747d40d11d0330c3ff25f22f",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-parsers-converter-config-languagedetector-detect-project-languages",
              "summary": "Detect all languages in project and count files",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "languages.get",
                "any",
                "cls.detect_language",
                "os.walk"
              ],
              "called_by": []
            }
          ],
          "bases": [],
          "uid": "llmstruct.parsers.converter_config.LanguageDetector:46#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.converter_config",
            "llmstruct.parsers.converter_config.LanguageDetector:46"
          ],
          "hash": "4448c836642b0247d5c6fd72e150fb82c641b31d56a47c1ed292ca675bf771a4",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-parsers-converter-config-languagedetector",
          "summary": "Utility class for language detection",
          "summary_source": "docstring",
          "tags": [
            "class",
            "classmethod",
            "public"
          ]
        }
      ],
      "callgraph": {
        "__post_init__": [],
        "detect_language": [
          "Path"
        ],
        "detect_project_languages": [
          "languages.get",
          "any",
          "cls.detect_language",
          "os.walk"
        ]
      },
      "dependencies": [
        "Dict",
        "Enum",
        "List",
        "Path",
        "dataclass",
        "dataclasses",
        "enum",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": "9473cda938ff7f0deaae682690c3b46b90b9c8a1bf68ec1977c21fd67b16dd43",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.parsers.converter_config.llmstruct.parsers.converter_config#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.parsers",
        "llmstruct.parsers.converter_config",
        "llmstruct.parsers.converter_config.llmstruct.parsers.converter_config"
      ],
      "summary": "Universal Converter Configuration and Constants\n\nContains configuration dataclasses, enums, and utilities for the uni...",
      "summary_source": "docstring",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "a90681a3-85e4-4416-b05b-4f5df88c63df"
    },
    {
      "module_id": "llmstruct.generators.go_json_generator",
      "path": "llmstruct/generators/go_json_generator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_go_folder_structure",
          "docstring": "Capture directory and file structure for Go projects with artifact_id, respecting .gitignore and patterns.",
          "line_range": [
            15,
            85
          ],
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": [],
          "uid": "llmstruct.generators.go_json_generator.get_go_folder_structure:15#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.generators",
            "llmstruct.generators.go_json_generator",
            "llmstruct.generators.go_json_generator.get_go_folder_structure:15"
          ],
          "hash": "3164b468cae908bf3424dc6388b53468b3d5ca15b708e7ad4c117871010850d7",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-generators-go-json-generator-get-go-folder-structure",
          "summary": "Capture directory and file structure for Go projects with artifact_id, respecting .gitignore and patterns.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "file_path.relative_to",
            "str",
            "set",
            "p.rstrip",
            "any",
            "file_path.match",
            "sorted",
            "p.endswith",
            "Path",
            "uuid.uuid4",
            "structure.append",
            "os.walk"
          ],
          "called_by": [
            "generate_go_json"
          ]
        },
        {
          "name": "build_go_toc_and_modules",
          "docstring": "Build TOC and modules for Go projects with artifact_id and robust filtering.",
          "line_range": [
            88,
            143
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "exclude_dirs"
          ],
          "decorators": [],
          "uid": "llmstruct.generators.go_json_generator.build_go_toc_and_modules:88#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.generators",
            "llmstruct.generators.go_json_generator",
            "llmstruct.generators.go_json_generator.build_go_toc_and_modules:88"
          ],
          "hash": "96c13f35dd3548f0ab2d308201e5999eb71c9be7e297d22b3272df59068d6ef9",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-generators-go-json-generator-build-go-toc-and-modules",
          "summary": "Build TOC and modules for Go projects with artifact_id and robust filtering.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "f.match",
            "set",
            "module.get",
            "p.rstrip",
            "len",
            "modules.append",
            "any",
            "analyze_module",
            "p.endswith",
            "Path",
            "toc.append",
            "uuid.uuid4",
            "str"
          ],
          "called_by": [
            "generate_go_json"
          ]
        },
        {
          "name": "extract_go_mod_info",
          "docstring": "Extract information from go.mod file.",
          "line_range": [
            146,
            182
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": [],
          "uid": "llmstruct.generators.go_json_generator.extract_go_mod_info:146#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.generators",
            "llmstruct.generators.go_json_generator",
            "llmstruct.generators.go_json_generator.extract_go_mod_info:146"
          ],
          "hash": "73081d99831487144acbdeceb76226995a0bf9fd5bccdfa3bd1bb3bbdda3d0f0",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-generators-go-json-generator-extract-go-mod-info",
          "summary": "Extract information from go.mod file.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "len",
            "line.startswith",
            "f.read",
            "line.strip",
            "go_mod_path.exists",
            "content.strip",
            "dependencies.append",
            "Path",
            "open",
            "line.split",
            "logging.error"
          ],
          "called_by": [
            "generate_go_json"
          ]
        },
        {
          "name": "generate_go_json",
          "docstring": "Generate JSON structure for Go project with artifact_id, summary, and tags.",
          "line_range": [
            185,
            259
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals",
            "exclude_dirs"
          ],
          "decorators": [],
          "uid": "llmstruct.generators.go_json_generator.generate_go_json:185#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.generators",
            "llmstruct.generators.go_json_generator",
            "llmstruct.generators.go_json_generator.generate_go_json:185"
          ],
          "hash": "d89b0107ee87e17082b4529db9594d2e6b2d0b5491d11ebf917fded1087b7899",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-generators-go-json-generator-generate-go-json",
          "summary": "Generate JSON structure for Go project with artifact_id, summary, and tags.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "list",
            "len",
            "sum",
            "build_go_toc_and_modules",
            "set",
            "extract_go_mod_info",
            "go_mod_info.get",
            "Path",
            "uuid.uuid4",
            "m.get",
            "get_go_folder_structure",
            "str"
          ],
          "called_by": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_go_folder_structure": [
          "file_path.relative_to",
          "str",
          "set",
          "p.rstrip",
          "any",
          "file_path.match",
          "sorted",
          "p.endswith",
          "Path",
          "uuid.uuid4",
          "structure.append",
          "os.walk"
        ],
        "build_go_toc_and_modules": [
          "f.match",
          "set",
          "module.get",
          "p.rstrip",
          "len",
          "modules.append",
          "any",
          "analyze_module",
          "p.endswith",
          "Path",
          "toc.append",
          "uuid.uuid4",
          "str"
        ],
        "extract_go_mod_info": [
          "len",
          "line.startswith",
          "f.read",
          "line.strip",
          "go_mod_path.exists",
          "content.strip",
          "dependencies.append",
          "Path",
          "open",
          "line.split",
          "logging.error"
        ],
        "generate_go_json": [
          "list",
          "len",
          "sum",
          "build_go_toc_and_modules",
          "set",
          "extract_go_mod_info",
          "go_mod_info.get",
          "Path",
          "uuid.uuid4",
          "m.get",
          "get_go_folder_structure",
          "str"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "analyze_module",
        "datetime",
        "logging",
        "os",
        "parsers.go_parser",
        "pathlib",
        "typing",
        "uuid"
      ],
      "hash": "2e11ebd0b1baad6e008b5c7c7dcff832215263638561a7d78670b0cb647d4bf1",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.generators.go_json_generator.llmstruct.generators.go_json_generator#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.generators",
        "llmstruct.generators.go_json_generator",
        "llmstruct.generators.go_json_generator.llmstruct.generators.go_json_generator"
      ],
      "summary": "Module for llmstruct.generators.go json generator",
      "summary_source": "heuristic",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "b6c10510-db73-4e63-bc5e-bcb031429d09"
    },
    {
      "module_id": "llmstruct.generators.__init__",
      "path": "llmstruct/generators/__init__.py",
      "category": "cli",
      "module_doc": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "generate_json",
        "json_generator"
      ],
      "hash": "6510b9d89fa5bff008cf7b1ee6f50343f96b76737b5842a930c06888c5cbba6c",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.generators.__init__.llmstruct.generators.__init__#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.generators",
        "llmstruct.generators.__init__",
        "llmstruct.generators.__init__.llmstruct.generators.__init__"
      ],
      "summary": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "summary_source": "docstring",
      "tags": [
        "generator",
        "module",
        "public"
      ],
      "artifact_id": "6f3f02ad-6cfa-4bb2-8815-2a4e4550575d"
    },
    {
      "module_id": "llmstruct.generators.index_generator",
      "path": "llmstruct/generators/index_generator.py",
      "category": "core",
      "module_doc": "Index.json Generator for LLMStruct Phase 1\n\nGenerates manifest file with uid \u2192 hash mapping for diff capabilities.",
      "functions": [
        {
          "name": "generate_index_json",
          "docstring": "Generate index.json manifest from struct data.\n\nArgs:\n    struct_data: Full struct.json data\n    \nReturns:\n    Dict containing index manifest with uid \u2192 hash mappings",
          "line_range": [
            11,
            88
          ],
          "parameters": [
            "struct_data"
          ],
          "decorators": [],
          "uid": "llmstruct.generators.index_generator.generate_index_json:11#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.generators",
            "llmstruct.generators.index_generator",
            "llmstruct.generators.index_generator.generate_index_json:11"
          ],
          "hash": "97e4b13ed0f79cf6c0a87c1ec363f711d073f8d06dcebe828e9c8f10e36635a5",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-generators-index-generator-generate-index-json",
          "summary": "Generate index.json manifest from struct data",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "list",
            "func.get",
            "struct_data.get",
            "len",
            "set",
            "cls.get",
            "entities.append",
            "e.get",
            "method.get",
            "module.get"
          ],
          "called_by": [
            "save_index_json"
          ]
        },
        {
          "name": "save_index_json",
          "docstring": "Save index.json to file.\n\nArgs:\n    struct_data: Full struct.json data\n    output_path: Path to save index.json",
          "line_range": [
            91,
            103
          ],
          "parameters": [
            "struct_data",
            "output_path"
          ],
          "decorators": [],
          "uid": "llmstruct.generators.index_generator.save_index_json:91#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.generators",
            "llmstruct.generators.index_generator",
            "llmstruct.generators.index_generator.save_index_json:91"
          ],
          "hash": "bb67555ab5325d97048b733453acb0c4e52c1a387bc588764564a19a1f47ed2d",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-generators-index-generator-save-index-json",
          "summary": "Save index.json to file",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "json.dump",
            "open",
            "generate_index_json"
          ],
          "called_by": []
        },
        {
          "name": "diff_by_hash",
          "docstring": "Compare two index.json files and return differences.\n\nArgs:\n    old_index_path: Path to old index.json\n    new_index_path: Path to new index.json\n    \nReturns:\n    Dict with added, modified, deleted entities",
          "line_range": [
            106,
            163
          ],
          "parameters": [
            "old_index_path",
            "new_index_path"
          ],
          "decorators": [],
          "uid": "llmstruct.generators.index_generator.diff_by_hash:106#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.generators",
            "llmstruct.generators.index_generator",
            "llmstruct.generators.index_generator.diff_by_hash:106"
          ],
          "hash": "beea2d513084c9ad30b02c6921011cf799c4126b889762ba275aacbeda586560",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-generators-index-generator-diff-by-hash",
          "summary": "Compare two index.json files and return differences",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "new_entities.items",
            "len",
            "deleted.append",
            "json.load",
            "added.append",
            "modified.append",
            "open",
            "old_entities.items"
          ],
          "called_by": []
        }
      ],
      "classes": [],
      "callgraph": {
        "generate_index_json": [
          "list",
          "func.get",
          "struct_data.get",
          "len",
          "set",
          "cls.get",
          "entities.append",
          "e.get",
          "method.get",
          "module.get"
        ],
        "save_index_json": [
          "json.dump",
          "open",
          "generate_index_json"
        ],
        "diff_by_hash": [
          "new_entities.items",
          "len",
          "deleted.append",
          "json.load",
          "added.append",
          "modified.append",
          "open",
          "old_entities.items"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "datetime",
        "json",
        "typing"
      ],
      "hash": "4cc0c5db387e8b0316c6d17e47ba6a9bd64bb33281da542a6077d0f158a54e86",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.generators.index_generator.llmstruct.generators.index_generator#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.generators",
        "llmstruct.generators.index_generator",
        "llmstruct.generators.index_generator.llmstruct.generators.index_generator"
      ],
      "summary": "Index.json Generator for LLMStruct Phase 1\n\nGenerates manifest file with uid \u2192 hash mapping for diff capabilities.",
      "summary_source": "docstring",
      "tags": [
        "generator",
        "module",
        "public"
      ],
      "artifact_id": "c70f69f5-588c-4dcd-bc5a-2d03ac9d3179"
    },
    {
      "module_id": "llmstruct.generators.json_generator",
      "path": "llmstruct/generators/json_generator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_folder_structure",
          "docstring": "Capture directory and file structure with artifact_id, respecting .gitignore and patterns.",
          "line_range": [
            17,
            91
          ],
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": [],
          "uid": "llmstruct.generators.json_generator.get_folder_structure:17#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.generators",
            "llmstruct.generators.json_generator",
            "llmstruct.generators.json_generator.get_folder_structure:17"
          ],
          "hash": "aa0b0c72e55a125de7cedc95c17d644f82771d575ac6b678a92db3c3201a4f38",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-generators-json-generator-get-folder-structure",
          "summary": "Capture directory and file structure with artifact_id, respecting .gitignore and patterns.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "abs_dir_path.match",
            "file_path.relative_to",
            "str",
            "set",
            "p.rstrip",
            "any",
            "file_path.match",
            "abs_dir_path.relative_to",
            "sorted",
            "p.endswith",
            "Path",
            "structure.append",
            "uuid.uuid4",
            "abs_dir_path.joinpath",
            "os.walk"
          ],
          "called_by": [
            "generate_json"
          ]
        },
        {
          "name": "build_toc_and_modules",
          "docstring": "Build TOC and modules with artifact_id and robust filtering. \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 include_dirs.",
          "line_range": [
            94,
            164
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "exclude_dirs",
            "include_dirs"
          ],
          "decorators": [],
          "uid": "llmstruct.generators.json_generator.build_toc_and_modules:94#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.generators",
            "llmstruct.generators.json_generator",
            "llmstruct.generators.json_generator.build_toc_and_modules:94"
          ],
          "hash": "a81b49791194e659adcdc493472db2c82560c057484c1f6fb9133eebb8becd83",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-generators-json-generator-build-toc-and-modules",
          "summary": "Build TOC and modules with artifact_id and robust filtering",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [],
          "called_by": [
            "generate_json"
          ]
        },
        {
          "name": "generate_json",
          "docstring": "Generate JSON structure for project with artifact_id, summary, and tags. \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 include_dirs.",
          "line_range": [
            167,
            252
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals",
            "exclude_dirs",
            "include_dirs"
          ],
          "decorators": [],
          "uid": "llmstruct.generators.json_generator.generate_json:167#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.generators",
            "llmstruct.generators.json_generator",
            "llmstruct.generators.json_generator.generate_json:167"
          ],
          "hash": "08ae70cc0a805dbe7df10f63a17c8db3b040f1800f8e948ecfa171352b05d309",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-generators-json-generator-generate-json",
          "summary": "Generate JSON structure for project with artifact_id, summary, and tags",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "infer_tags",
            "func.get",
            "len",
            "sum",
            "str",
            "get_folder_structure",
            "build_toc_and_modules",
            "cls.get",
            "method.get",
            "Path",
            "uuid.uuid4",
            "module.get"
          ],
          "called_by": [
            "generate_json_with_output_file"
          ]
        },
        {
          "name": "generate_json_with_output_file",
          "docstring": "",
          "line_range": [
            255,
            287
          ],
          "parameters": [
            "root_dir",
            "output_file",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs",
            "include_ranges",
            "include_hashes",
            "goals",
            "generate_index"
          ],
          "decorators": [],
          "uid": "llmstruct.generators.json_generator.generate_json_with_output_file:255#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.generators",
            "llmstruct.generators.json_generator",
            "llmstruct.generators.json_generator.generate_json_with_output_file:255"
          ],
          "hash": "ddb1a88592d9e90dfb7b123a9c57a197759602ce7e517071f23ac1ab233a80dc",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-generators-json-generator-generate-json-with-output-file",
          "summary": "Function for generate json with output file",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "output_file.replace",
            "json.dump",
            "print",
            "save_index_json",
            "open",
            "generate_json"
          ],
          "called_by": []
        },
        {
          "name": "norm_dirname",
          "docstring": "",
          "line_range": [
            116,
            117
          ],
          "parameters": [
            "d"
          ],
          "decorators": [],
          "uid": "llmstruct.generators.json_generator.norm_dirname:116#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.generators",
            "llmstruct.generators.json_generator",
            "llmstruct.generators.json_generator.norm_dirname:116"
          ],
          "hash": "c825f2ae3487d8875bfe16d6558825e22b1d32471c89d57fc9f60a86bc9fad28",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-generators-json-generator-norm-dirname",
          "summary": "Function for norm dirname",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "public"
          ],
          "calls": [],
          "called_by": [
            "is_included_dir"
          ]
        },
        {
          "name": "is_included_dir",
          "docstring": "",
          "line_range": [
            126,
            130
          ],
          "parameters": [
            "f"
          ],
          "decorators": [],
          "uid": "llmstruct.generators.json_generator.is_included_dir:126#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.generators",
            "llmstruct.generators.json_generator",
            "llmstruct.generators.json_generator.is_included_dir:126"
          ],
          "hash": "c7576e392566d2a7b950e9f2c7966da058871fb408b2c33217c771d72dcb42c7",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-generators-json-generator-is-included-dir",
          "summary": "Checks if included dir",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "any",
            "norm_dirname"
          ],
          "called_by": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_folder_structure": [
          "abs_dir_path.match",
          "file_path.relative_to",
          "str",
          "set",
          "p.rstrip",
          "any",
          "file_path.match",
          "abs_dir_path.relative_to",
          "sorted",
          "p.endswith",
          "Path",
          "structure.append",
          "uuid.uuid4",
          "abs_dir_path.joinpath",
          "os.walk"
        ],
        "build_toc_and_modules": [],
        "norm_dirname": [],
        "is_included_dir": [
          "any",
          "norm_dirname"
        ],
        "generate_json": [
          "infer_tags",
          "func.get",
          "len",
          "sum",
          "str",
          "get_folder_structure",
          "build_toc_and_modules",
          "cls.get",
          "method.get",
          "Path",
          "uuid.uuid4",
          "module.get"
        ],
        "generate_json_with_output_file": [
          "output_file.replace",
          "json.dump",
          "print",
          "save_index_json",
          "open",
          "generate_json"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "analyze_module",
        "datetime",
        "index_generator",
        "infer_tags",
        "json",
        "llmstruct.core.tag_inference",
        "logging",
        "os",
        "parsers.python_parser",
        "pathlib",
        "save_index_json",
        "typing",
        "uuid"
      ],
      "hash": "9e7ccd5af8b0c4dcaec64f9bb262176c4cc1bd1dbc918d80677a2d47601757ae",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.generators.json_generator.llmstruct.generators.json_generator#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.generators",
        "llmstruct.generators.json_generator",
        "llmstruct.generators.json_generator.llmstruct.generators.json_generator"
      ],
      "summary": "Module for llmstruct.generators.json generator",
      "summary_source": "heuristic",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "0f8f22aa-4c65-44d0-a2bb-ba024a3302ee"
    },
    {
      "module_id": "llmstruct.api.routes.system",
      "path": "llmstruct/api/routes/system.py",
      "category": "core",
      "module_doc": "System routes for LLMStruct FastAPI\n\nHealth checks, metrics, and system information endpoints.",
      "functions": [
        {
          "name": "get_cli_bridge",
          "docstring": "Dependency to get CLI bridge instance",
          "line_range": [
            17,
            19
          ],
          "parameters": [],
          "decorators": [],
          "uid": "llmstruct.api.routes.system.get_cli_bridge:17#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.routes",
            "llmstruct.api.routes.system",
            "llmstruct.api.routes.system.get_cli_bridge:17"
          ],
          "hash": "a82b79e634a4a2a6e7e7c81bae5751d13f26edf957ea2e2800d578c94882b9a6",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-routes-system-get-cli-bridge",
          "summary": "Dependency to get CLI bridge instance",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "CLIBridge"
          ],
          "called_by": []
        },
        {
          "name": "health_check",
          "docstring": "Health check endpoint\n\nReturns the health status of the API and its dependencies.\nThis endpoint does not require authentication.",
          "line_range": [
            23,
            61
          ],
          "parameters": [
            "cli"
          ],
          "decorators": [
            "router.get('/health', response_model=HealthResponse)"
          ],
          "uid": "llmstruct.api.routes.system.health_check:23#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.routes",
            "llmstruct.api.routes.system",
            "llmstruct.api.routes.system.health_check:23"
          ],
          "hash": "4a31af2024c7fbe4896be1ad64ca37eb3da3e1c0a507b8e64201e3bb9c978fe5",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-routes-system-health-check",
          "summary": "Health check endpoint\n\nReturns the health status of the API and its dependencies",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "public"
          ],
          "calls": [
            "cli.health_check",
            "router.get",
            "datetime.utcnow",
            "Depends",
            "cli_health.get",
            "HealthResponse",
            "str"
          ],
          "called_by": []
        },
        {
          "name": "get_system_status",
          "docstring": "Get detailed system status\n\nReturns detailed system information including:\n- API version and configuration\n- CLI status and version\n- Resource usage (if available)",
          "line_range": [
            65,
            97
          ],
          "parameters": [],
          "decorators": [
            "router.get('/status')"
          ],
          "uid": "llmstruct.api.routes.system.get_system_status:65#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.routes",
            "llmstruct.api.routes.system",
            "llmstruct.api.routes.system.get_system_status:65"
          ],
          "hash": "7badf3944f45f8fedcf92531e9716dd6008792f6ad3b61512b4093eafe0f1319",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-routes-system-get-system-status",
          "summary": "Get detailed system status\n\nReturns detailed system information including:\n- API version and configuration\n- CLI stat...",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "public"
          ],
          "calls": [
            "HTTPException",
            "cli.health_check",
            "router.get",
            "datetime.utcnow",
            "CLIBridge",
            "cli_health.get",
            "str"
          ],
          "called_by": []
        },
        {
          "name": "get_version",
          "docstring": "Get API version information\n\nReturns version information for the API and underlying components.",
          "line_range": [
            101,
            123
          ],
          "parameters": [],
          "decorators": [
            "router.get('/version')"
          ],
          "uid": "llmstruct.api.routes.system.get_version:101#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.routes",
            "llmstruct.api.routes.system",
            "llmstruct.api.routes.system.get_version:101"
          ],
          "hash": "f4562b61bc6b83b5ffb6ef40a5a3ebec06b3c821e8a334893fb3cdbe94f65acc",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-routes-system-get-version",
          "summary": "Get API version information\n\nReturns version information for the API and underlying components.",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "public"
          ],
          "calls": [
            "HTTPException",
            "cli.health_check",
            "router.get",
            "datetime.utcnow",
            "CLIBridge",
            "cli_health.get",
            "str"
          ],
          "called_by": []
        },
        {
          "name": "ping",
          "docstring": "Simple ping endpoint for basic connectivity testing",
          "line_range": [
            127,
            134
          ],
          "parameters": [],
          "decorators": [
            "router.get('/ping')"
          ],
          "uid": "llmstruct.api.routes.system.ping:127#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.routes",
            "llmstruct.api.routes.system",
            "llmstruct.api.routes.system.ping:127"
          ],
          "hash": "eddcafe4d803c82775be31890024d0255c663ddb1efaaf2ee5b05849450c9a37",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-routes-system-ping",
          "summary": "Simple ping endpoint for basic connectivity testing",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "public"
          ],
          "calls": [
            "datetime.utcnow",
            "router.get"
          ],
          "called_by": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_cli_bridge": [
          "CLIBridge"
        ],
        "health_check": [
          "cli.health_check",
          "router.get",
          "datetime.utcnow",
          "Depends",
          "cli_health.get",
          "HealthResponse",
          "str"
        ],
        "get_system_status": [
          "HTTPException",
          "cli.health_check",
          "router.get",
          "datetime.utcnow",
          "CLIBridge",
          "cli_health.get",
          "str"
        ],
        "get_version": [
          "HTTPException",
          "cli.health_check",
          "router.get",
          "datetime.utcnow",
          "CLIBridge",
          "cli_health.get",
          "str"
        ],
        "ping": [
          "datetime.utcnow",
          "router.get"
        ]
      },
      "dependencies": [
        "APIRouter",
        "CLIBridge",
        "Depends",
        "HTTPException",
        "HealthResponse",
        "HealthStatus",
        "asyncio",
        "datetime",
        "fastapi",
        "models.responses",
        "services.cli_bridge"
      ],
      "hash": "12d5f16af2648af5535ac4f2428296ca65266db6fe621f2d3e919e49c5cf70eb",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.api.routes.system.llmstruct.api.routes.system#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.api",
        "llmstruct.api.routes",
        "llmstruct.api.routes.system",
        "llmstruct.api.routes.system.llmstruct.api.routes.system"
      ],
      "summary": "System routes for LLMStruct FastAPI\n\nHealth checks, metrics, and system information endpoints.",
      "summary_source": "docstring",
      "tags": [
        "async",
        "module",
        "public"
      ],
      "artifact_id": "d4af1845-e904-4cb3-b85a-3b7ff6a4eeac"
    },
    {
      "module_id": "llmstruct.api.routes.__init__",
      "path": "llmstruct/api/routes/__init__.py",
      "category": "cli",
      "module_doc": "Routes package for LLMStruct FastAPI\n\nContains all API endpoint routers.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "c55fef17f5bf04d1b099b37498ea82c52295667412e308642a36e6ddaa95e49d",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.api.routes.__init__.llmstruct.api.routes.__init__#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.api",
        "llmstruct.api.routes",
        "llmstruct.api.routes.__init__",
        "llmstruct.api.routes.__init__.llmstruct.api.routes.__init__"
      ],
      "summary": "Routes package for LLMStruct FastAPI\n\nContains all API endpoint routers.",
      "summary_source": "docstring",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "042bdbde-d5b9-4770-b18f-fccfc4f81610"
    },
    {
      "module_id": "llmstruct.api.routes.chat",
      "path": "llmstruct/api/routes/chat.py",
      "category": "core",
      "module_doc": "Chat Routes\n\nWebSocket-based real-time chat with LLM integration",
      "functions": [
        {
          "name": "websocket_chat",
          "docstring": "WebSocket endpoint for real-time chat",
          "line_range": [
            52,
            131
          ],
          "parameters": [
            "websocket",
            "session_id",
            "api_key"
          ],
          "decorators": [
            "router.websocket('/chat/ws')"
          ],
          "uid": "llmstruct.api.routes.chat.websocket_chat:52#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.routes",
            "llmstruct.api.routes.chat",
            "llmstruct.api.routes.chat.websocket_chat:52"
          ],
          "hash": "a85a3a9f1351b8b916f9c824ea02cd0810e268d9344ce9bb7b8f5f6c9683e738",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-routes-chat-websocket-chat",
          "summary": "WebSocket endpoint for real-time chat",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "public"
          ],
          "calls": [
            "websocket.close",
            "message_data.get",
            "logger.info",
            "json.loads",
            "manager.connect",
            "router.websocket",
            "llm_service.process_message",
            "datetime.now",
            "manager.disconnect",
            "websocket.receive_text",
            "session_manager.add_message",
            "uuid.uuid4",
            "logger.error",
            "manager.send_message",
            "session_manager.get_or_create_session",
            "str"
          ],
          "called_by": []
        },
        {
          "name": "list_sessions",
          "docstring": "List active chat sessions",
          "line_range": [
            134,
            137
          ],
          "parameters": [],
          "decorators": [
            "router.get('/chat/sessions', dependencies=[Depends(get_api_key)])"
          ],
          "uid": "llmstruct.api.routes.chat.list_sessions:134#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.routes",
            "llmstruct.api.routes.chat",
            "llmstruct.api.routes.chat.list_sessions:134"
          ],
          "hash": "da92180005f74c68d1d9374d2330f3bfc2fd29f9e3e6fe73c620d59ef8b2dd35",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-routes-chat-list-sessions",
          "summary": "List active chat sessions",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "public"
          ],
          "calls": [
            "session_manager.list_sessions",
            "router.get",
            "Depends"
          ],
          "called_by": []
        },
        {
          "name": "get_session",
          "docstring": "Get session details and history",
          "line_range": [
            140,
            145
          ],
          "parameters": [
            "session_id"
          ],
          "decorators": [
            "router.get('/chat/sessions/{session_id}', dependencies=[Depends(get_api_key)])"
          ],
          "uid": "llmstruct.api.routes.chat.get_session:140#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.routes",
            "llmstruct.api.routes.chat",
            "llmstruct.api.routes.chat.get_session:140"
          ],
          "hash": "4db411d85c4b8c4f98e57c2fdbcf041240fd9034070419b3266b571116913fd5",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-routes-chat-get-session",
          "summary": "Get session details and history",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "public"
          ],
          "calls": [
            "HTTPException",
            "router.get",
            "session_manager.get_session",
            "Depends"
          ],
          "called_by": []
        },
        {
          "name": "delete_session",
          "docstring": "Delete a chat session",
          "line_range": [
            148,
            153
          ],
          "parameters": [
            "session_id"
          ],
          "decorators": [
            "router.delete('/chat/sessions/{session_id}', dependencies=[Depends(get_api_key)])"
          ],
          "uid": "llmstruct.api.routes.chat.delete_session:148#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.routes",
            "llmstruct.api.routes.chat",
            "llmstruct.api.routes.chat.delete_session:148"
          ],
          "hash": "3f2b31eb29dd7666e9d3f0d6b01b396f3376cfb51d89c16a746eb0823e2a5b25",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-routes-chat-delete-session",
          "summary": "Delete a chat session",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "public"
          ],
          "calls": [
            "HTTPException",
            "session_manager.delete_session",
            "router.delete",
            "Depends"
          ],
          "called_by": []
        },
        {
          "name": "send_message",
          "docstring": "Send a message via HTTP (alternative to WebSocket)",
          "line_range": [
            156,
            179
          ],
          "parameters": [
            "message"
          ],
          "decorators": [
            "router.post('/chat/message', dependencies=[Depends(get_api_key)])"
          ],
          "uid": "llmstruct.api.routes.chat.send_message:156#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.routes",
            "llmstruct.api.routes.chat",
            "llmstruct.api.routes.chat.send_message:156"
          ],
          "hash": "281431b8593f67021bb6bfeefd113912db742df9a603944f708570cd59ab27cd",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-routes-chat-send-message",
          "summary": "Send a message via HTTP (alternative to WebSocket)",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "public"
          ],
          "calls": [
            "HTTPException",
            "router.post",
            "llm_service.process_message",
            "ChatResponse",
            "session_manager.add_message",
            "Depends",
            "logger.error",
            "str"
          ],
          "called_by": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            32,
            33
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.api.routes.chat.__init__:32#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.routes",
            "llmstruct.api.routes.chat",
            "llmstruct.api.routes.chat.__init__:32"
          ],
          "hash": "ccb0d82db36d7566e64269cbf68a1b0c879ab5183a5845e2e1c66a4a9c2befaf",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-routes-chat---init--",
          "summary": "Function for init",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "private"
          ],
          "calls": [],
          "called_by": []
        },
        {
          "name": "connect",
          "docstring": "",
          "line_range": [
            35,
            38
          ],
          "parameters": [
            "self",
            "websocket",
            "session_id"
          ],
          "decorators": [],
          "uid": "llmstruct.api.routes.chat.connect:35#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.routes",
            "llmstruct.api.routes.chat",
            "llmstruct.api.routes.chat.connect:35"
          ],
          "hash": "19f9c5d0629f829578da234c029234449d78cb1cbccc6402d3302a5f9721ba10",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-routes-chat-connect",
          "summary": "Function for connect",
          "summary_source": "heuristic",
          "tags": [
            "async",
            "function",
            "public"
          ],
          "calls": [
            "websocket.accept",
            "logger.info"
          ],
          "called_by": []
        },
        {
          "name": "disconnect",
          "docstring": "",
          "line_range": [
            40,
            43
          ],
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": [],
          "uid": "llmstruct.api.routes.chat.disconnect:40#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.routes",
            "llmstruct.api.routes.chat",
            "llmstruct.api.routes.chat.disconnect:40"
          ],
          "hash": "7cbff4ac918f757b8d3f83fb16e4c30f31f9dcf7cfc6cf8875651eab88f999a6",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-routes-chat-disconnect",
          "summary": "Function for disconnect",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "logger.info"
          ],
          "called_by": []
        },
        {
          "name": "send_message",
          "docstring": "",
          "line_range": [
            45,
            47
          ],
          "parameters": [
            "self",
            "session_id",
            "message"
          ],
          "decorators": [],
          "uid": "llmstruct.api.routes.chat.send_message:45#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.routes",
            "llmstruct.api.routes.chat",
            "llmstruct.api.routes.chat.send_message:45"
          ],
          "hash": "95071c104f45396b3a82a2b3f7cde3d802899beef908c9e9196d5f7254205dbd",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-routes-chat-send-message",
          "summary": "Function for send message",
          "summary_source": "heuristic",
          "tags": [
            "async",
            "function",
            "public"
          ],
          "calls": [
            "HTTPException",
            "router.post",
            "llm_service.process_message",
            "ChatResponse",
            "session_manager.add_message",
            "Depends",
            "logger.error",
            "str"
          ],
          "called_by": []
        }
      ],
      "classes": [
        {
          "name": "ConnectionManager",
          "docstring": "Manages WebSocket connections",
          "line_range": [
            29,
            47
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                32,
                33
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.api.routes.chat.ConnectionManager.__init__:32#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.routes",
                "llmstruct.api.routes.chat",
                "llmstruct.api.routes.chat.ConnectionManager",
                "llmstruct.api.routes.chat.ConnectionManager.__init__:32"
              ],
              "hash": "48ee2bea369ebb46f2f199c06d5ef90e491a2e88c92fbb2bf1460e5a5cecd6e0",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-api-routes-chat-connectionmanager---init--",
              "summary": "Method for connectionmanager. init",
              "summary_source": "heuristic",
              "tags": [
                "method",
                "private",
                "public"
              ],
              "calls": [],
              "called_by": []
            },
            {
              "name": "connect",
              "docstring": "",
              "line_range": [
                35,
                38
              ],
              "parameters": [
                "self",
                "websocket",
                "session_id"
              ],
              "uid": "llmstruct.api.routes.chat.ConnectionManager.connect:35#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.routes",
                "llmstruct.api.routes.chat",
                "llmstruct.api.routes.chat.ConnectionManager",
                "llmstruct.api.routes.chat.ConnectionManager.connect:35"
              ],
              "hash": "6569527d4c75cf3bbba78d1b289c117fef5f0bc0f6516bbe916416ac22589320",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-api-routes-chat-connectionmanager-connect",
              "summary": "Method for connection manager connect",
              "summary_source": "heuristic",
              "tags": [
                "async",
                "method",
                "public"
              ],
              "calls": [
                "websocket.accept",
                "logger.info"
              ],
              "called_by": []
            },
            {
              "name": "disconnect",
              "docstring": "",
              "line_range": [
                40,
                43
              ],
              "parameters": [
                "self",
                "session_id"
              ],
              "uid": "llmstruct.api.routes.chat.ConnectionManager.disconnect:40#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.routes",
                "llmstruct.api.routes.chat",
                "llmstruct.api.routes.chat.ConnectionManager",
                "llmstruct.api.routes.chat.ConnectionManager.disconnect:40"
              ],
              "hash": "3ca18d55eacedac9f4180960cb33124316a7f7f734c7f00530f09a8f9cdbf926",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-api-routes-chat-connectionmanager-disconnect",
              "summary": "Method for connection manager disconnect",
              "summary_source": "heuristic",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "logger.info"
              ],
              "called_by": []
            },
            {
              "name": "send_message",
              "docstring": "",
              "line_range": [
                45,
                47
              ],
              "parameters": [
                "self",
                "session_id",
                "message"
              ],
              "uid": "llmstruct.api.routes.chat.ConnectionManager.send_message:45#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.routes",
                "llmstruct.api.routes.chat",
                "llmstruct.api.routes.chat.ConnectionManager",
                "llmstruct.api.routes.chat.ConnectionManager.send_message:45"
              ],
              "hash": "270e122d7969a62a5fc24f237ab22bf3f9bf2f4ffa428ed131df51b022c2637a",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-api-routes-chat-connectionmanager-send-message",
              "summary": "Method for connectionmanager.send message",
              "summary_source": "heuristic",
              "tags": [
                "async",
                "method",
                "public"
              ],
              "calls": [
                "HTTPException",
                "router.post",
                "llm_service.process_message",
                "ChatResponse",
                "session_manager.add_message",
                "Depends",
                "logger.error",
                "str"
              ],
              "called_by": []
            }
          ],
          "bases": [],
          "uid": "llmstruct.api.routes.chat.ConnectionManager:29#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.routes",
            "llmstruct.api.routes.chat",
            "llmstruct.api.routes.chat.ConnectionManager:29"
          ],
          "hash": "0ba999bf36c8e0dbeaa6132961a5b55d432cdad0a52f58c6f49789d2084f8feb",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-routes-chat-connectionmanager",
          "summary": "Manages WebSocket connections",
          "summary_source": "docstring",
          "tags": [
            "async",
            "class",
            "public"
          ]
        }
      ],
      "callgraph": {
        "__init__": [],
        "connect": [
          "websocket.accept",
          "logger.info"
        ],
        "disconnect": [
          "logger.info"
        ],
        "send_message": [
          "HTTPException",
          "router.post",
          "llm_service.process_message",
          "ChatResponse",
          "session_manager.add_message",
          "Depends",
          "logger.error",
          "str"
        ],
        "websocket_chat": [
          "websocket.close",
          "message_data.get",
          "logger.info",
          "json.loads",
          "manager.connect",
          "router.websocket",
          "llm_service.process_message",
          "datetime.now",
          "manager.disconnect",
          "websocket.receive_text",
          "session_manager.add_message",
          "uuid.uuid4",
          "logger.error",
          "manager.send_message",
          "session_manager.get_or_create_session",
          "str"
        ],
        "list_sessions": [
          "session_manager.list_sessions",
          "router.get",
          "Depends"
        ],
        "get_session": [
          "HTTPException",
          "router.get",
          "session_manager.get_session",
          "Depends"
        ],
        "delete_session": [
          "HTTPException",
          "session_manager.delete_session",
          "router.delete",
          "Depends"
        ]
      },
      "dependencies": [
        "APIRouter",
        "Any",
        "ChatMessage",
        "ChatResponse",
        "ChatSessionManager",
        "Depends",
        "Dict",
        "HTTPBearer",
        "HTTPException",
        "LLMService",
        "Optional",
        "WebSocket",
        "WebSocketDisconnect",
        "asyncio",
        "datetime",
        "fastapi",
        "fastapi.security",
        "get_api_key",
        "json",
        "logging",
        "middleware.auth",
        "models.requests",
        "models.responses",
        "services.chat_session",
        "services.llm_service",
        "typing",
        "uuid"
      ],
      "hash": "59b0748bcb0b7a09f0c062ff814d3af7c5f8741d6aea2514170fffeed3366e63",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.api.routes.chat.llmstruct.api.routes.chat#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.api",
        "llmstruct.api.routes",
        "llmstruct.api.routes.chat",
        "llmstruct.api.routes.chat.llmstruct.api.routes.chat"
      ],
      "summary": "Chat Routes\n\nWebSocket-based real-time chat with LLM integration",
      "summary_source": "docstring",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "c8acd944-9135-4edf-9025-1b81d675f1ed"
    },
    {
      "module_id": "llmstruct.api.routes.continue_adapter",
      "path": "llmstruct/api/routes/continue_adapter.py",
      "category": "core",
      "module_doc": "Continue API Adapter\n\nTranslates Continue extension requests to LLMStruct chat API format",
      "functions": [
        {
          "name": "continue_chat_completion",
          "docstring": "Continue-compatible chat completion endpoint\nTranslates Continue requests to our LLMStruct format",
          "line_range": [
            59,
            129
          ],
          "parameters": [
            "request",
            "api_key"
          ],
          "decorators": [
            "router.post('/v1/chat/completions')"
          ],
          "uid": "llmstruct.api.routes.continue_adapter.continue_chat_completion:59#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.routes",
            "llmstruct.api.routes.continue_adapter",
            "llmstruct.api.routes.continue_adapter.continue_chat_completion:59"
          ],
          "hash": "e7bfe22ecfff52a9b01e03c102c4e24b92eaebc044c8d66b4b8116e419841957",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-routes-continue-adapter-continue-chat-completion",
          "summary": "Continue-compatible chat completion endpoint\nTranslates Continue requests to our LLMStruct format",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "public"
          ],
          "calls": [
            "request.json",
            "logger.info",
            "HTTPException",
            "len",
            "msg.get",
            "logger.error",
            "router.post",
            "request_data.get",
            "reversed",
            "llm_service.process_message",
            "datetime.now",
            "Depends",
            "ContinueResponse",
            "str"
          ],
          "called_by": []
        },
        {
          "name": "continue_models",
          "docstring": "List available models for Continue",
          "line_range": [
            132,
            158
          ],
          "parameters": [
            "api_key"
          ],
          "decorators": [
            "router.get('/v1/models')"
          ],
          "uid": "llmstruct.api.routes.continue_adapter.continue_models:132#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.routes",
            "llmstruct.api.routes.continue_adapter",
            "llmstruct.api.routes.continue_adapter.continue_models:132"
          ],
          "hash": "2ab3b5eef578885b577d1d13bb919d08ab1ddb4df08cb1729a61527c6187d733",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-routes-continue-adapter-continue-models",
          "summary": "List available models for Continue",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "public"
          ],
          "calls": [
            "int",
            "datetime.now",
            "router.get",
            "Depends"
          ],
          "called_by": []
        },
        {
          "name": "continue_embeddings",
          "docstring": "Embeddings endpoint for Continue (placeholder)",
          "line_range": [
            161,
            193
          ],
          "parameters": [
            "request",
            "api_key"
          ],
          "decorators": [
            "router.post('/v1/embeddings')"
          ],
          "uid": "llmstruct.api.routes.continue_adapter.continue_embeddings:161#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.routes",
            "llmstruct.api.routes.continue_adapter",
            "llmstruct.api.routes.continue_adapter.continue_embeddings:161"
          ],
          "hash": "b00ae91abe5b959e19f8e38a243035629f60b27ec3568cd991353ac17acdf4c0",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-routes-continue-adapter-continue-embeddings",
          "summary": "Embeddings endpoint for Continue (placeholder)",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "public"
          ],
          "calls": [
            "request.json",
            "HTTPException",
            "len",
            "router.post",
            "request_data.get",
            "input_text.split",
            "Depends",
            "logger.error",
            "str"
          ],
          "called_by": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            25,
            35
          ],
          "parameters": [
            "self",
            "messages",
            "model",
            "temperature",
            "max_tokens",
            "stream"
          ],
          "decorators": [],
          "uid": "llmstruct.api.routes.continue_adapter.__init__:25#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.routes",
            "llmstruct.api.routes.continue_adapter",
            "llmstruct.api.routes.continue_adapter.__init__:25"
          ],
          "hash": "0dfe53a092f985580f1a1720da44888cc1f4ff913957075045bd2b02c3da674d",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-routes-continue-adapter---init--",
          "summary": "Function for init",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "datetime.now",
            "content.split",
            "len",
            "int"
          ],
          "called_by": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            39,
            56
          ],
          "parameters": [
            "self",
            "content",
            "model"
          ],
          "decorators": [],
          "uid": "llmstruct.api.routes.continue_adapter.__init__:39#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.routes",
            "llmstruct.api.routes.continue_adapter",
            "llmstruct.api.routes.continue_adapter.__init__:39"
          ],
          "hash": "2d986922429a1fde40c89276c139e162ec76aca43d2416d9be8294ee38bba627",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-routes-continue-adapter---init--",
          "summary": "Function for init",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "datetime.now",
            "content.split",
            "len",
            "int"
          ],
          "called_by": []
        }
      ],
      "classes": [
        {
          "name": "ContinueRequest",
          "docstring": "Continue API request format",
          "line_range": [
            23,
            35
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                25,
                35
              ],
              "parameters": [
                "self",
                "messages",
                "model",
                "temperature",
                "max_tokens",
                "stream"
              ],
              "uid": "llmstruct.api.routes.continue_adapter.ContinueRequest.__init__:25#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.routes",
                "llmstruct.api.routes.continue_adapter",
                "llmstruct.api.routes.continue_adapter.ContinueRequest",
                "llmstruct.api.routes.continue_adapter.ContinueRequest.__init__:25"
              ],
              "hash": "23cc85d9260151e5465b54527705b6bea865c26aee9dd770294cc36d1446eb17",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-api-routes-continue-adapter-continuerequest---init--",
              "summary": "Method for continuerequest. init",
              "summary_source": "heuristic",
              "tags": [
                "method",
                "private",
                "public"
              ],
              "calls": [
                "datetime.now",
                "content.split",
                "len",
                "int"
              ],
              "called_by": []
            }
          ],
          "bases": [],
          "uid": "llmstruct.api.routes.continue_adapter.ContinueRequest:23#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.routes",
            "llmstruct.api.routes.continue_adapter",
            "llmstruct.api.routes.continue_adapter.ContinueRequest:23"
          ],
          "hash": "7550da31412ca55276c8010a1f8d3f16dbed6ca10b983a0bea4710cbfebbd11b",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-routes-continue-adapter-continuerequest",
          "summary": "Continue API request format",
          "summary_source": "docstring",
          "tags": [
            "class",
            "public"
          ]
        },
        {
          "name": "ContinueResponse",
          "docstring": "Continue API response format (OpenAI-compatible)",
          "line_range": [
            37,
            56
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                39,
                56
              ],
              "parameters": [
                "self",
                "content",
                "model"
              ],
              "uid": "llmstruct.api.routes.continue_adapter.ContinueResponse.__init__:39#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.routes",
                "llmstruct.api.routes.continue_adapter",
                "llmstruct.api.routes.continue_adapter.ContinueResponse",
                "llmstruct.api.routes.continue_adapter.ContinueResponse.__init__:39"
              ],
              "hash": "ed3c9f8f01cfb61e39bc597714e337e2b1bd16fa7eca7d61b3b29cbe67f3e565",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-api-routes-continue-adapter-continueresponse---init--",
              "summary": "Method for continueresponse. init",
              "summary_source": "heuristic",
              "tags": [
                "method",
                "private",
                "public"
              ],
              "calls": [
                "datetime.now",
                "content.split",
                "len",
                "int"
              ],
              "called_by": []
            }
          ],
          "bases": [],
          "uid": "llmstruct.api.routes.continue_adapter.ContinueResponse:37#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.routes",
            "llmstruct.api.routes.continue_adapter",
            "llmstruct.api.routes.continue_adapter.ContinueResponse:37"
          ],
          "hash": "30c957fa131d1d01b2ebf9208ed899c787226772740a2327e8d642d2f3f51c04",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-routes-continue-adapter-continueresponse",
          "summary": "Continue API response format (OpenAI-compatible)",
          "summary_source": "docstring",
          "tags": [
            "class",
            "public"
          ]
        }
      ],
      "callgraph": {
        "__init__": [
          "datetime.now",
          "content.split",
          "len",
          "int"
        ],
        "continue_chat_completion": [
          "request.json",
          "logger.info",
          "HTTPException",
          "len",
          "msg.get",
          "logger.error",
          "router.post",
          "request_data.get",
          "reversed",
          "llm_service.process_message",
          "datetime.now",
          "Depends",
          "ContinueResponse",
          "str"
        ],
        "continue_models": [
          "int",
          "datetime.now",
          "router.get",
          "Depends"
        ],
        "continue_embeddings": [
          "request.json",
          "HTTPException",
          "len",
          "router.post",
          "request_data.get",
          "input_text.split",
          "Depends",
          "logger.error",
          "str"
        ]
      },
      "dependencies": [
        "APIRouter",
        "Any",
        "ChatMessage",
        "ChatResponse",
        "Depends",
        "Dict",
        "HTTPException",
        "LLMService",
        "List",
        "Optional",
        "Request",
        "datetime",
        "fastapi",
        "get_api_key",
        "logging",
        "middleware.auth",
        "models.requests",
        "models.responses",
        "services.llm_service",
        "typing"
      ],
      "hash": "98b3a53aab4b11fc41c646ed118d313f39f0f4a02aa39cde44fe28a4f89706f2",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.api.routes.continue_adapter.llmstruct.api.routes.continue_adapter#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.api",
        "llmstruct.api.routes",
        "llmstruct.api.routes.continue_adapter",
        "llmstruct.api.routes.continue_adapter.llmstruct.api.routes.continue_adapter"
      ],
      "summary": "Continue API Adapter\n\nTranslates Continue extension requests to LLMStruct chat API format",
      "summary_source": "docstring",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "bead413d-8c35-41e4-8153-3c0b8339027e"
    },
    {
      "module_id": "llmstruct.api.middleware.__init__",
      "path": "llmstruct/api/middleware/__init__.py",
      "category": "cli",
      "module_doc": "Middleware package for LLMStruct FastAPI\n\nContains authentication, logging, and other middleware.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "2675b95488b2d45c21c244b8c633aa8a1cbbc2af4d2a4094c07426c9fed917ce",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.api.middleware.__init__.llmstruct.api.middleware.__init__#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.api",
        "llmstruct.api.middleware",
        "llmstruct.api.middleware.__init__",
        "llmstruct.api.middleware.__init__.llmstruct.api.middleware.__init__"
      ],
      "summary": "Middleware package for LLMStruct FastAPI\n\nContains authentication, logging, and other middleware.",
      "summary_source": "docstring",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "4b44a011-c1d9-44f1-86ab-9b479f72f381"
    },
    {
      "module_id": "llmstruct.api.middleware.logging",
      "path": "llmstruct/api/middleware/logging.py",
      "category": "core",
      "module_doc": "Logging middleware for LLMStruct FastAPI",
      "functions": [
        {
          "name": "request_logging_middleware",
          "docstring": "Request and response logging middleware",
          "line_range": [
            14,
            72
          ],
          "parameters": [
            "request",
            "call_next"
          ],
          "decorators": [],
          "uid": "llmstruct.api.middleware.logging.request_logging_middleware:14#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.middleware",
            "llmstruct.api.middleware.logging",
            "llmstruct.api.middleware.logging.request_logging_middleware:14"
          ],
          "hash": "9628e62e8b7ae84dc6ff34ed09df1cda3e5f148cd0e2f9b3410c1dbd67f8f3b6",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-middleware-logging-request-logging-middleware",
          "summary": "Request and response logging middleware",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "public"
          ],
          "calls": [
            "logger.info",
            "call_next",
            "time.time",
            "getattr",
            "uuid.uuid4",
            "logger.error",
            "str"
          ],
          "called_by": []
        }
      ],
      "classes": [],
      "callgraph": {
        "request_logging_middleware": [
          "logger.info",
          "call_next",
          "time.time",
          "getattr",
          "uuid.uuid4",
          "logger.error",
          "str"
        ]
      },
      "dependencies": [
        "Callable",
        "Request",
        "fastapi",
        "logging",
        "time",
        "typing",
        "uuid"
      ],
      "hash": "ad05f6fcbc2b6f2eb916437708888f9bdbd21efbb0a3b1c83cf36463bce9fcea",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.api.middleware.logging.llmstruct.api.middleware.logging#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.api",
        "llmstruct.api.middleware",
        "llmstruct.api.middleware.logging",
        "llmstruct.api.middleware.logging.llmstruct.api.middleware.logging"
      ],
      "summary": "Logging middleware for LLMStruct FastAPI",
      "summary_source": "docstring",
      "tags": [
        "async",
        "module",
        "public"
      ],
      "artifact_id": "39bac83d-0c02-41d7-9147-c3d022b96a48"
    },
    {
      "module_id": "llmstruct.api.services.llm_service",
      "path": "llmstruct/api/services/llm_service.py",
      "category": "core",
      "module_doc": "LLM Service\n\nIntegrates with existing LLM models and context orchestration",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            24,
            28
          ],
          "parameters": [
            "self",
            "content",
            "context_info",
            "token_usage"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.llm_service.__init__:24#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.llm_service",
            "llmstruct.api.services.llm_service.__init__:24"
          ],
          "hash": "17bff780d11bb9946204fbfefa5df46e37c448b4f7c9c941ed3f41abbb327ee3",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-services-llm-service---init--",
          "summary": "Function for init",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "AnthropicClient",
            "Path.cwd",
            "self._initialize_components",
            "GrokClient"
          ],
          "called_by": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            33,
            36
          ],
          "parameters": [
            "self",
            "api_key"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.llm_service.__init__:33#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.llm_service",
            "llmstruct.api.services.llm_service.__init__:33"
          ],
          "hash": "2ea2cc1860184f00a7b5732988ea1eb064aed42866aca107ca19cfaa073a6823",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-services-llm-service---init--",
          "summary": "Function for init",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "AnthropicClient",
            "Path.cwd",
            "self._initialize_components",
            "GrokClient"
          ],
          "called_by": []
        },
        {
          "name": "chat_completion",
          "docstring": "Send chat completion request to Anthropic",
          "line_range": [
            38,
            77
          ],
          "parameters": [
            "self",
            "messages",
            "temperature"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.llm_service.chat_completion:38#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.llm_service",
            "llmstruct.api.services.llm_service.chat_completion:38"
          ],
          "hash": "92c157f655c05c4a545df568090c2747198aab939a8185dca36341651ad274e7",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-services-llm-service-chat-completion",
          "summary": "Send chat completion request to Anthropic",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "public"
          ],
          "calls": [
            "response.raise_for_status",
            "client.post",
            "response.json",
            "ValueError",
            "httpx.AsyncClient"
          ],
          "called_by": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            82,
            85
          ],
          "parameters": [
            "self",
            "api_key"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.llm_service.__init__:82#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.llm_service",
            "llmstruct.api.services.llm_service.__init__:82"
          ],
          "hash": "208f8bbb0395c2f961cd94b23bafde2457f26885c6ed593bf9678557a5975c8e",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-services-llm-service---init--",
          "summary": "Function for init",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "AnthropicClient",
            "Path.cwd",
            "self._initialize_components",
            "GrokClient"
          ],
          "called_by": []
        },
        {
          "name": "chat_completion",
          "docstring": "Send chat completion request to Grok",
          "line_range": [
            87,
            113
          ],
          "parameters": [
            "self",
            "messages",
            "temperature"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.llm_service.chat_completion:87#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.llm_service",
            "llmstruct.api.services.llm_service.chat_completion:87"
          ],
          "hash": "581846733790b44029e50327c01d3276800a88d33cc21ad2531f47ddbfbc2973",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-services-llm-service-chat-completion",
          "summary": "Send chat completion request to Grok",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "public"
          ],
          "calls": [
            "response.raise_for_status",
            "client.post",
            "response.json",
            "ValueError",
            "httpx.AsyncClient"
          ],
          "called_by": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            118,
            124
          ],
          "parameters": [
            "self",
            "base_path"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.llm_service.__init__:118#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.llm_service",
            "llmstruct.api.services.llm_service.__init__:118"
          ],
          "hash": "c95cd1d07650400611069d174b2761ee3580d4b82cff3a852b3b39a62f1efbbb",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-services-llm-service---init--",
          "summary": "Function for init",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "AnthropicClient",
            "Path.cwd",
            "self._initialize_components",
            "GrokClient"
          ],
          "called_by": []
        },
        {
          "name": "_initialize_components",
          "docstring": "Initialize context orchestrator and copilot manager",
          "line_range": [
            126,
            140
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.llm_service._initialize_components:126#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.llm_service",
            "llmstruct.api.services.llm_service._initialize_components:126"
          ],
          "hash": "49556b9156ff28e0c1f121d4fe8ad1f66f3410456490144b0136fcb0fac9fea6",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-services-llm-service--initialize-components",
          "summary": "Initialize context orchestrator and copilot manager",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "SmartContextOrchestrator",
            "logger.info",
            "CopilotContextManager",
            "logger.error",
            "str"
          ],
          "called_by": []
        },
        {
          "name": "process_message",
          "docstring": "Process a user message and return AI response",
          "line_range": [
            143,
            168
          ],
          "parameters": [
            "self",
            "message",
            "session_id",
            "context_mode"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.llm_service.process_message:143#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.llm_service",
            "llmstruct.api.services.llm_service.process_message:143"
          ],
          "hash": "5748744190347b7bba9a644bf3b0f9ecf92b72c26e1b329f9751be80c1c29799",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-services-llm-service-process-message",
          "summary": "Process a user message and return AI response",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "public"
          ],
          "calls": [
            "self._try_llm_providers",
            "LLMResponse",
            "self._get_context",
            "logger.error",
            "str"
          ],
          "called_by": []
        },
        {
          "name": "_try_llm_providers",
          "docstring": "Try LLM providers in order and return response",
          "line_range": [
            170,
            195
          ],
          "parameters": [
            "self",
            "message",
            "context_info"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.llm_service._try_llm_providers:170#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.llm_service",
            "llmstruct.api.services.llm_service._try_llm_providers:170"
          ],
          "hash": "1d5b1d1eb37f6200ab5819e47306775b580850ce4d079a5bd37d45ada93f0244",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-services-llm-service--try-llm-providers",
          "summary": "Try LLM providers in order and return response",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "private"
          ],
          "calls": [
            "logger.info",
            "self._generate_grok_response",
            "len",
            "logger.warning",
            "self._generate_mock_response",
            "self._generate_anthropic_response"
          ],
          "called_by": []
        },
        {
          "name": "_get_context",
          "docstring": "Get relevant context for the message",
          "line_range": [
            197,
            229
          ],
          "parameters": [
            "self",
            "message",
            "context_mode"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.llm_service._get_context:197#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.llm_service",
            "llmstruct.api.services.llm_service._get_context:197"
          ],
          "hash": "85349ac39df68dee80376c119f187fda367464893a8aab9abb9de2dfc4e2eecb",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-services-llm-service--get-context",
          "summary": "Get relevant context for the message",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "private"
          ],
          "calls": [
            "context_info.update",
            "self._get_focused_context",
            "self._get_full_context",
            "self._get_minimal_context",
            "logger.error",
            "str"
          ],
          "called_by": []
        },
        {
          "name": "_get_full_context",
          "docstring": "Get full project context",
          "line_range": [
            231,
            243
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.llm_service._get_full_context:231#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.llm_service",
            "llmstruct.api.services.llm_service._get_full_context:231"
          ],
          "hash": "082903753662fa5f24783aead8fe59dda4eda6dec9b07edfe069aededa1ac1f9",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-services-llm-service--get-full-context",
          "summary": "Get full project context",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "private"
          ],
          "calls": [
            "list",
            "struct_data.get",
            "len",
            "json.load",
            "open",
            "struct_file.exists"
          ],
          "called_by": []
        },
        {
          "name": "_get_focused_context",
          "docstring": "Get focused context based on message content",
          "line_range": [
            245,
            260
          ],
          "parameters": [
            "self",
            "message"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.llm_service._get_focused_context:245#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.llm_service",
            "llmstruct.api.services.llm_service._get_focused_context:245"
          ],
          "hash": "a955b9a0349c56964da02be7b4759e9b5a594669fd7cf3bd69e8a607b0107543",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-services-llm-service--get-focused-context",
          "summary": "Get focused context based on message content",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "private"
          ],
          "calls": [
            "message.lower",
            "any"
          ],
          "called_by": []
        },
        {
          "name": "_get_minimal_context",
          "docstring": "Get minimal context - basic project info",
          "line_range": [
            262,
            267
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.llm_service._get_minimal_context:262#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.llm_service",
            "llmstruct.api.services.llm_service._get_minimal_context:262"
          ],
          "hash": "0157570eb5d641c94992edbb356745096a73ab3a37b5a3beba7a6ed2565c8e73",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-services-llm-service--get-minimal-context",
          "summary": "Get minimal context - basic project info",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "private"
          ],
          "calls": [
            "datetime.now",
            "str"
          ],
          "called_by": []
        },
        {
          "name": "_generate_grok_response",
          "docstring": "Generate response using Grok API",
          "line_range": [
            269,
            287
          ],
          "parameters": [
            "self",
            "message",
            "context_info"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.llm_service._generate_grok_response:269#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.llm_service",
            "llmstruct.api.services.llm_service._generate_grok_response:269"
          ],
          "hash": "712ac53fb61f6dad55a73b47ccb1b27ec1c894c3cf9ae57523fe6f570c0dfb54",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-services-llm-service--generate-grok-response",
          "summary": "Generate response using Grok API",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "private",
            "public"
          ],
          "calls": [
            "ValueError",
            "len",
            "self._build_system_prompt"
          ],
          "called_by": []
        },
        {
          "name": "_generate_anthropic_response",
          "docstring": "Generate response using Anthropic API",
          "line_range": [
            289,
            307
          ],
          "parameters": [
            "self",
            "message",
            "context_info"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.llm_service._generate_anthropic_response:289#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.llm_service",
            "llmstruct.api.services.llm_service._generate_anthropic_response:289"
          ],
          "hash": "65d4015b8484afbb1f9aca2eb1cc9306707331e590045855293e56c1fef967ec",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-services-llm-service--generate-anthropic-response",
          "summary": "Generate response using Anthropic API",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "private",
            "public"
          ],
          "calls": [
            "ValueError",
            "len",
            "self._build_system_prompt"
          ],
          "called_by": []
        },
        {
          "name": "_build_system_prompt",
          "docstring": "Build system prompt with project context",
          "line_range": [
            309,
            344
          ],
          "parameters": [
            "self",
            "context_info"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.llm_service._build_system_prompt:309#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.llm_service",
            "llmstruct.api.services.llm_service._build_system_prompt:309"
          ],
          "hash": "745150db274e41e0b90fdcecc308d171fb18ab09cf3d1fab65b5c364025dc4a1",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-services-llm-service--build-system-prompt",
          "summary": "Build system prompt with project context",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "context_info.get"
          ],
          "called_by": []
        },
        {
          "name": "_generate_mock_response",
          "docstring": "Generate a mock AI response (placeholder for real LLM)",
          "line_range": [
            346,
            380
          ],
          "parameters": [
            "self",
            "message",
            "context_info"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.llm_service._generate_mock_response:346#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.llm_service",
            "llmstruct.api.services.llm_service._generate_mock_response:346"
          ],
          "hash": "39d733b3b8f33f11ca06299926b1de1b961676ceb22cc0b62ff2a761d702ce2c",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-services-llm-service--generate-mock-response",
          "summary": "Generate a mock AI response (placeholder for real LLM)",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "private"
          ],
          "calls": [
            "context_info.get",
            "message.lower",
            "len"
          ],
          "called_by": []
        }
      ],
      "classes": [
        {
          "name": "LLMResponse",
          "docstring": "Response from LLM processing",
          "line_range": [
            21,
            28
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                24,
                28
              ],
              "parameters": [
                "self",
                "content",
                "context_info",
                "token_usage"
              ],
              "uid": "llmstruct.api.services.llm_service.LLMResponse.__init__:24#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service.LLMResponse",
                "llmstruct.api.services.llm_service.LLMResponse.__init__:24"
              ],
              "hash": "7a8466dc7f0982fe21ad83f943c3f04d83c3c30274ce3122c8cf43bb38124524",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-api-services-llm-service-llmresponse---init--",
              "summary": "Method for llmresponse. init",
              "summary_source": "heuristic",
              "tags": [
                "method",
                "private",
                "public"
              ],
              "calls": [
                "AnthropicClient",
                "Path.cwd",
                "self._initialize_components",
                "GrokClient"
              ],
              "called_by": []
            }
          ],
          "bases": [],
          "uid": "llmstruct.api.services.llm_service.LLMResponse:21#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.llm_service",
            "llmstruct.api.services.llm_service.LLMResponse:21"
          ],
          "hash": "0781556a187c19bc51fdd57bd6d763ec176c687e7d1359f882c9001cb233d970",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-services-llm-service-llmresponse",
          "summary": "Response from LLM processing",
          "summary_source": "docstring",
          "tags": [
            "class",
            "public"
          ]
        },
        {
          "name": "AnthropicClient",
          "docstring": "Client for Anthropic Claude API",
          "line_range": [
            30,
            77
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                33,
                36
              ],
              "parameters": [
                "self",
                "api_key"
              ],
              "uid": "llmstruct.api.services.llm_service.AnthropicClient.__init__:33#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service.AnthropicClient",
                "llmstruct.api.services.llm_service.AnthropicClient.__init__:33"
              ],
              "hash": "24c5eb8b4ab502d5375abf606163bb522ab69515b6e533fc791daca713dfa35a",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-api-services-llm-service-anthropicclient---init--",
              "summary": "Method for anthropicclient. init",
              "summary_source": "heuristic",
              "tags": [
                "method",
                "private",
                "public"
              ],
              "calls": [
                "AnthropicClient",
                "Path.cwd",
                "self._initialize_components",
                "GrokClient"
              ],
              "called_by": []
            },
            {
              "name": "chat_completion",
              "docstring": "Send chat completion request to Anthropic",
              "line_range": [
                38,
                77
              ],
              "parameters": [
                "self",
                "messages",
                "temperature"
              ],
              "uid": "llmstruct.api.services.llm_service.AnthropicClient.chat_completion:38#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service.AnthropicClient",
                "llmstruct.api.services.llm_service.AnthropicClient.chat_completion:38"
              ],
              "hash": "dcb0ee04ed46795f2ebf38b922466eddf7bfb3a34003decd9dca3fa2b2b2724e",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-api-services-llm-service-anthropicclient-chat-completion",
              "summary": "Send chat completion request to Anthropic",
              "summary_source": "docstring",
              "tags": [
                "async",
                "method",
                "public"
              ],
              "calls": [
                "response.raise_for_status",
                "client.post",
                "response.json",
                "ValueError",
                "httpx.AsyncClient"
              ],
              "called_by": []
            }
          ],
          "bases": [],
          "uid": "llmstruct.api.services.llm_service.AnthropicClient:30#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.llm_service",
            "llmstruct.api.services.llm_service.AnthropicClient:30"
          ],
          "hash": "51646771adcc98c89f78c86e2127c7123b5b9bc0bcbc9e64599c1aca40bf4fd8",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-services-llm-service-anthropicclient",
          "summary": "Client for Anthropic Claude API",
          "summary_source": "docstring",
          "tags": [
            "async",
            "class",
            "public"
          ]
        },
        {
          "name": "GrokClient",
          "docstring": "Client for Grok API integration",
          "line_range": [
            79,
            113
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                82,
                85
              ],
              "parameters": [
                "self",
                "api_key"
              ],
              "uid": "llmstruct.api.services.llm_service.GrokClient.__init__:82#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service.GrokClient",
                "llmstruct.api.services.llm_service.GrokClient.__init__:82"
              ],
              "hash": "1766a16abf0ade7730aa70cddd2682aa5d1dedb2b91c1f7f55b2ea39b28e84cb",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-api-services-llm-service-grokclient---init--",
              "summary": "Method for grokclient. init",
              "summary_source": "heuristic",
              "tags": [
                "method",
                "private",
                "public"
              ],
              "calls": [
                "AnthropicClient",
                "Path.cwd",
                "self._initialize_components",
                "GrokClient"
              ],
              "called_by": []
            },
            {
              "name": "chat_completion",
              "docstring": "Send chat completion request to Grok",
              "line_range": [
                87,
                113
              ],
              "parameters": [
                "self",
                "messages",
                "temperature"
              ],
              "uid": "llmstruct.api.services.llm_service.GrokClient.chat_completion:87#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service.GrokClient",
                "llmstruct.api.services.llm_service.GrokClient.chat_completion:87"
              ],
              "hash": "4efda3a7467cacccf0032061ef8a01dc57ca8552e022c1ebba1ab2b2ac5e222e",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-api-services-llm-service-grokclient-chat-completion",
              "summary": "Send chat completion request to Grok",
              "summary_source": "docstring",
              "tags": [
                "async",
                "method",
                "public"
              ],
              "calls": [
                "response.raise_for_status",
                "client.post",
                "response.json",
                "ValueError",
                "httpx.AsyncClient"
              ],
              "called_by": []
            }
          ],
          "bases": [],
          "uid": "llmstruct.api.services.llm_service.GrokClient:79#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.llm_service",
            "llmstruct.api.services.llm_service.GrokClient:79"
          ],
          "hash": "c637b5ecfe4fa466c4beb1104be4497772726c3fc0558ffb28622967cc40cb49",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-services-llm-service-grokclient",
          "summary": "Client for Grok API integration",
          "summary_source": "docstring",
          "tags": [
            "async",
            "class",
            "public"
          ]
        },
        {
          "name": "LLMService",
          "docstring": "Service for LLM processing with context integration",
          "line_range": [
            115,
            380
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                118,
                124
              ],
              "parameters": [
                "self",
                "base_path"
              ],
              "uid": "llmstruct.api.services.llm_service.LLMService.__init__:118#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service.LLMService",
                "llmstruct.api.services.llm_service.LLMService.__init__:118"
              ],
              "hash": "68239e38020efff54b40270897fb48d1f03112d2c2a8cb558d402378c9cb7a83",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-api-services-llm-service-llmservice---init--",
              "summary": "Method for llmservice. init",
              "summary_source": "heuristic",
              "tags": [
                "method",
                "private",
                "public"
              ],
              "calls": [
                "AnthropicClient",
                "Path.cwd",
                "self._initialize_components",
                "GrokClient"
              ],
              "called_by": []
            },
            {
              "name": "_initialize_components",
              "docstring": "Initialize context orchestrator and copilot manager",
              "line_range": [
                126,
                140
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.api.services.llm_service.LLMService._initialize_components:126#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service.LLMService",
                "llmstruct.api.services.llm_service.LLMService._initialize_components:126"
              ],
              "hash": "c040be5a4b2046dcee97697a3dc6adf22f9f4181cec4701f486f2fc25ed392b3",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-api-services-llm-service-llmservice--initialize-components",
              "summary": "Initialize context orchestrator and copilot manager",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "SmartContextOrchestrator",
                "logger.info",
                "CopilotContextManager",
                "logger.error",
                "str"
              ],
              "called_by": []
            },
            {
              "name": "process_message",
              "docstring": "Process a user message and return AI response",
              "line_range": [
                143,
                168
              ],
              "parameters": [
                "self",
                "message",
                "session_id",
                "context_mode"
              ],
              "uid": "llmstruct.api.services.llm_service.LLMService.process_message:143#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service.LLMService",
                "llmstruct.api.services.llm_service.LLMService.process_message:143"
              ],
              "hash": "1a3ba41b99b884218aac0377df6b4cd5c248082fd303f421954583368bc70aaa",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-api-services-llm-service-llmservice-process-message",
              "summary": "Process a user message and return AI response",
              "summary_source": "docstring",
              "tags": [
                "async",
                "method",
                "public"
              ],
              "calls": [
                "self._try_llm_providers",
                "LLMResponse",
                "self._get_context",
                "logger.error",
                "str"
              ],
              "called_by": []
            },
            {
              "name": "_try_llm_providers",
              "docstring": "Try LLM providers in order and return response",
              "line_range": [
                170,
                195
              ],
              "parameters": [
                "self",
                "message",
                "context_info"
              ],
              "uid": "llmstruct.api.services.llm_service.LLMService._try_llm_providers:170#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service.LLMService",
                "llmstruct.api.services.llm_service.LLMService._try_llm_providers:170"
              ],
              "hash": "f3e14bc18804f9304ed164c7f0e851c206e03583a92607eac93c1984047910d7",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-api-services-llm-service-llmservice--try-llm-providers",
              "summary": "Try LLM providers in order and return response",
              "summary_source": "docstring",
              "tags": [
                "async",
                "method",
                "private"
              ],
              "calls": [
                "logger.info",
                "self._generate_grok_response",
                "len",
                "logger.warning",
                "self._generate_mock_response",
                "self._generate_anthropic_response"
              ],
              "called_by": []
            },
            {
              "name": "_get_context",
              "docstring": "Get relevant context for the message",
              "line_range": [
                197,
                229
              ],
              "parameters": [
                "self",
                "message",
                "context_mode"
              ],
              "uid": "llmstruct.api.services.llm_service.LLMService._get_context:197#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service.LLMService",
                "llmstruct.api.services.llm_service.LLMService._get_context:197"
              ],
              "hash": "a4abee5ae3a08cbbccbbe245c0de68e9285ad98ef441ece6cd98d1480b797f3c",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-api-services-llm-service-llmservice--get-context",
              "summary": "Get relevant context for the message",
              "summary_source": "docstring",
              "tags": [
                "async",
                "method",
                "private"
              ],
              "calls": [
                "context_info.update",
                "self._get_focused_context",
                "self._get_full_context",
                "self._get_minimal_context",
                "logger.error",
                "str"
              ],
              "called_by": []
            },
            {
              "name": "_get_full_context",
              "docstring": "Get full project context",
              "line_range": [
                231,
                243
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.api.services.llm_service.LLMService._get_full_context:231#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service.LLMService",
                "llmstruct.api.services.llm_service.LLMService._get_full_context:231"
              ],
              "hash": "46e7fd0239f934f1c404ff4fa1a40b219417705babd2aa67ca8e399c9c00aaf2",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-api-services-llm-service-llmservice--get-full-context",
              "summary": "Get full project context",
              "summary_source": "docstring",
              "tags": [
                "async",
                "method",
                "private"
              ],
              "calls": [
                "list",
                "struct_data.get",
                "len",
                "json.load",
                "open",
                "struct_file.exists"
              ],
              "called_by": []
            },
            {
              "name": "_get_focused_context",
              "docstring": "Get focused context based on message content",
              "line_range": [
                245,
                260
              ],
              "parameters": [
                "self",
                "message"
              ],
              "uid": "llmstruct.api.services.llm_service.LLMService._get_focused_context:245#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service.LLMService",
                "llmstruct.api.services.llm_service.LLMService._get_focused_context:245"
              ],
              "hash": "9e856c7b070ccc439dd39cb6062bb0d7f67fd0bb4d164378415bc2358c0059d4",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-api-services-llm-service-llmservice--get-focused-context",
              "summary": "Get focused context based on message content",
              "summary_source": "docstring",
              "tags": [
                "async",
                "method",
                "private"
              ],
              "calls": [
                "message.lower",
                "any"
              ],
              "called_by": []
            },
            {
              "name": "_get_minimal_context",
              "docstring": "Get minimal context - basic project info",
              "line_range": [
                262,
                267
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.api.services.llm_service.LLMService._get_minimal_context:262#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service.LLMService",
                "llmstruct.api.services.llm_service.LLMService._get_minimal_context:262"
              ],
              "hash": "e6c214a8bdb9c0d917b99fcac07e065fbdd3b8c424184548209c6f661d104a59",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-api-services-llm-service-llmservice--get-minimal-context",
              "summary": "Get minimal context - basic project info",
              "summary_source": "docstring",
              "tags": [
                "async",
                "method",
                "private"
              ],
              "calls": [
                "datetime.now",
                "str"
              ],
              "called_by": []
            },
            {
              "name": "_generate_grok_response",
              "docstring": "Generate response using Grok API",
              "line_range": [
                269,
                287
              ],
              "parameters": [
                "self",
                "message",
                "context_info"
              ],
              "uid": "llmstruct.api.services.llm_service.LLMService._generate_grok_response:269#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service.LLMService",
                "llmstruct.api.services.llm_service.LLMService._generate_grok_response:269"
              ],
              "hash": "ebc94f0982c750a3a1452dd4734aac87bb5f0a37d9abd908024b5685218bbeed",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-api-services-llm-service-llmservice--generate-grok-response",
              "summary": "Generate response using Grok API",
              "summary_source": "docstring",
              "tags": [
                "async",
                "method",
                "private",
                "public"
              ],
              "calls": [
                "ValueError",
                "len",
                "self._build_system_prompt"
              ],
              "called_by": []
            },
            {
              "name": "_generate_anthropic_response",
              "docstring": "Generate response using Anthropic API",
              "line_range": [
                289,
                307
              ],
              "parameters": [
                "self",
                "message",
                "context_info"
              ],
              "uid": "llmstruct.api.services.llm_service.LLMService._generate_anthropic_response:289#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service.LLMService",
                "llmstruct.api.services.llm_service.LLMService._generate_anthropic_response:289"
              ],
              "hash": "846af9c140e61d33f16caeade890f66301fc17875e132e6c86172fe0c891af13",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-api-services-llm-service-llmservice--generate-anthropic-response",
              "summary": "Generate response using Anthropic API",
              "summary_source": "docstring",
              "tags": [
                "async",
                "method",
                "private",
                "public"
              ],
              "calls": [
                "ValueError",
                "len",
                "self._build_system_prompt"
              ],
              "called_by": []
            },
            {
              "name": "_build_system_prompt",
              "docstring": "Build system prompt with project context",
              "line_range": [
                309,
                344
              ],
              "parameters": [
                "self",
                "context_info"
              ],
              "uid": "llmstruct.api.services.llm_service.LLMService._build_system_prompt:309#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service.LLMService",
                "llmstruct.api.services.llm_service.LLMService._build_system_prompt:309"
              ],
              "hash": "e3baf5ed7f5e0d3bac7b11b0dda32f4fc66f1e4456895339d8074ee7665f6b1b",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-api-services-llm-service-llmservice--build-system-prompt",
              "summary": "Build system prompt with project context",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "context_info.get"
              ],
              "called_by": []
            },
            {
              "name": "_generate_mock_response",
              "docstring": "Generate a mock AI response (placeholder for real LLM)",
              "line_range": [
                346,
                380
              ],
              "parameters": [
                "self",
                "message",
                "context_info"
              ],
              "uid": "llmstruct.api.services.llm_service.LLMService._generate_mock_response:346#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service.LLMService",
                "llmstruct.api.services.llm_service.LLMService._generate_mock_response:346"
              ],
              "hash": "667fc23998e6b1f8e8b448d754bf5100a4f34ef2e54095c98fadc582ddeb96b0",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-api-services-llm-service-llmservice--generate-mock-response",
              "summary": "Generate a mock AI response (placeholder for real LLM)",
              "summary_source": "docstring",
              "tags": [
                "async",
                "method",
                "private"
              ],
              "calls": [
                "context_info.get",
                "message.lower",
                "len"
              ],
              "called_by": []
            }
          ],
          "bases": [],
          "uid": "llmstruct.api.services.llm_service.LLMService:115#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.llm_service",
            "llmstruct.api.services.llm_service.LLMService:115"
          ],
          "hash": "450e8b12bc163bd7e9b2a889bd45847dc4f5ff29bc6309b4f9c84b39094b78e5",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-services-llm-service-llmservice",
          "summary": "Service for LLM processing with context integration",
          "summary_source": "docstring",
          "tags": [
            "async",
            "class",
            "public"
          ]
        }
      ],
      "callgraph": {
        "__init__": [
          "AnthropicClient",
          "Path.cwd",
          "self._initialize_components",
          "GrokClient"
        ],
        "chat_completion": [
          "response.raise_for_status",
          "client.post",
          "response.json",
          "ValueError",
          "httpx.AsyncClient"
        ],
        "_initialize_components": [
          "SmartContextOrchestrator",
          "logger.info",
          "CopilotContextManager",
          "logger.error",
          "str"
        ],
        "process_message": [
          "self._try_llm_providers",
          "LLMResponse",
          "self._get_context",
          "logger.error",
          "str"
        ],
        "_try_llm_providers": [
          "logger.info",
          "self._generate_grok_response",
          "len",
          "logger.warning",
          "self._generate_mock_response",
          "self._generate_anthropic_response"
        ],
        "_get_context": [
          "context_info.update",
          "self._get_focused_context",
          "self._get_full_context",
          "self._get_minimal_context",
          "logger.error",
          "str"
        ],
        "_get_full_context": [
          "list",
          "struct_data.get",
          "len",
          "json.load",
          "open",
          "struct_file.exists"
        ],
        "_get_focused_context": [
          "message.lower",
          "any"
        ],
        "_get_minimal_context": [
          "datetime.now",
          "str"
        ],
        "_generate_grok_response": [
          "ValueError",
          "len",
          "self._build_system_prompt"
        ],
        "_generate_anthropic_response": [
          "ValueError",
          "len",
          "self._build_system_prompt"
        ],
        "_build_system_prompt": [
          "context_info.get"
        ],
        "_generate_mock_response": [
          "context_info.get",
          "message.lower",
          "len"
        ]
      },
      "dependencies": [
        "Any",
        "CopilotContextManager",
        "Dict",
        "List",
        "Optional",
        "Path",
        "SmartContextOrchestrator",
        "asyncio",
        "context_orchestrator",
        "copilot",
        "datetime",
        "httpx",
        "json",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": "a1d741ba8e78df4c0ac307472301c495c4ea017423b103d7472bc5ae6250ab6f",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.api.services.llm_service.llmstruct.api.services.llm_service#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.api",
        "llmstruct.api.services",
        "llmstruct.api.services.llm_service",
        "llmstruct.api.services.llm_service.llmstruct.api.services.llm_service"
      ],
      "summary": "LLM Service\n\nIntegrates with existing LLM models and context orchestration",
      "summary_source": "docstring",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "f3b16d8f-f97d-4888-b5bd-ae50c8329e5f"
    },
    {
      "module_id": "llmstruct.api.services.__init__",
      "path": "llmstruct/api/services/__init__.py",
      "category": "cli",
      "module_doc": "Services package for LLMStruct FastAPI\n\nContains business logic and integration services.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "44b6e1c9b0237a6636ef094dffd5589c9565f840159c5dd657c930c8838d323d",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.api.services.__init__.llmstruct.api.services.__init__#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.api",
        "llmstruct.api.services",
        "llmstruct.api.services.__init__",
        "llmstruct.api.services.__init__.llmstruct.api.services.__init__"
      ],
      "summary": "Services package for LLMStruct FastAPI\n\nContains business logic and integration services.",
      "summary_source": "docstring",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "ca4c43e7-29ac-4fe3-96d9-ceb4afc67946"
    },
    {
      "module_id": "llmstruct.api.services.cli_bridge",
      "path": "llmstruct/api/services/cli_bridge.py",
      "category": "core",
      "module_doc": "CLI Bridge Service\n\nProvides async integration between FastAPI and existing LLMStruct CLI functionality.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            29,
            33
          ],
          "parameters": [
            "self",
            "base_path"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.cli_bridge.__init__:29#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.cli_bridge",
            "llmstruct.api.services.cli_bridge.__init__:29"
          ],
          "hash": "1adbeaa43a3de00a07fa8ecc5a76f77dfe72deda2f48bfd4c416184e7cecfb1d",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-services-cli-bridge---init--",
          "summary": "Function for init",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "self._get_python_command",
            "Path.cwd"
          ],
          "called_by": []
        },
        {
          "name": "_get_python_command",
          "docstring": "Determine the best Python command to use",
          "line_range": [
            35,
            40
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.cli_bridge._get_python_command:35#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.cli_bridge",
            "llmstruct.api.services.cli_bridge._get_python_command:35"
          ],
          "hash": "4c1174a76df96465f7c593c8d03a3c024b97d5d461f00b11fe0f0f767258754b",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-services-cli-bridge--get-python-command",
          "summary": "Determine the best Python command to use",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "venv_python.exists",
            "str"
          ],
          "called_by": []
        },
        {
          "name": "scan_project",
          "docstring": "Execute project scan via CLI",
          "line_range": [
            42,
            87
          ],
          "parameters": [
            "self",
            "options"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.cli_bridge.scan_project:42#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.cli_bridge",
            "llmstruct.api.services.cli_bridge.scan_project:42"
          ],
          "hash": "d8315d85c9905272142b680ca00eb3023cb1b2b6182f3758e8bf53b128240216",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-services-cli-bridge-scan-project",
          "summary": "Execute project scan via CLI",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "public"
          ],
          "calls": [
            "options.get",
            "self._run_command",
            "os.close",
            "tempfile.mkstemp",
            "json.load",
            "self._parse_cli_output",
            "os.unlink",
            "logger.error",
            "cmd.extend",
            "open",
            "cmd.append"
          ],
          "called_by": []
        },
        {
          "name": "get_context",
          "docstring": "Get project context in specified mode",
          "line_range": [
            89,
            98
          ],
          "parameters": [
            "self",
            "mode",
            "include_files"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.cli_bridge.get_context:89#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.cli_bridge",
            "llmstruct.api.services.cli_bridge.get_context:89"
          ],
          "hash": "92656855b5092f4c5745ab85d1e37b00198e9ef9d78364b9c263581f8116ce20",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-services-cli-bridge-get-context",
          "summary": "Get project context in specified mode",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "public"
          ],
          "calls": [
            "cmd.extend",
            "self._parse_cli_output",
            "self._run_command"
          ],
          "called_by": []
        },
        {
          "name": "get_project_info",
          "docstring": "Get basic project information",
          "line_range": [
            100,
            104
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.cli_bridge.get_project_info:100#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.cli_bridge",
            "llmstruct.api.services.cli_bridge.get_project_info:100"
          ],
          "hash": "d17b6c42ea4c7c3b34a6837d3c50ef0fe6beb6a3c8c4d3beced6ea6ff08bd7f0",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-services-cli-bridge-get-project-info",
          "summary": "Get basic project information",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "public"
          ],
          "calls": [
            "self._parse_cli_output",
            "self._run_command"
          ],
          "called_by": []
        },
        {
          "name": "validate_json",
          "docstring": "Validate JSON structure",
          "line_range": [
            106,
            110
          ],
          "parameters": [
            "self",
            "json_path"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.cli_bridge.validate_json:106#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.cli_bridge",
            "llmstruct.api.services.cli_bridge.validate_json:106"
          ],
          "hash": "b25b52fd25bc734eb4db31ee5f4fe61368063809c4e8729206b4f6f60d78b753",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-services-cli-bridge-validate-json",
          "summary": "Validate JSON structure",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "public"
          ],
          "calls": [
            "self._parse_cli_output",
            "self._run_command"
          ],
          "called_by": []
        },
        {
          "name": "health_check",
          "docstring": "Check CLI health and availability",
          "line_range": [
            112,
            128
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.cli_bridge.health_check:112#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.cli_bridge",
            "llmstruct.api.services.cli_bridge.health_check:112"
          ],
          "hash": "435711a1a2ff6bcad7f8f4c8f99ffa297d0c1f075f341daaf9b7addb0d11c7cf",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-services-cli-bridge-health-check",
          "summary": "Check CLI health and availability",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "public"
          ],
          "calls": [
            "self._run_command",
            "str"
          ],
          "called_by": []
        },
        {
          "name": "_run_command",
          "docstring": "Run CLI command asynchronously",
          "line_range": [
            130,
            161
          ],
          "parameters": [
            "self",
            "cmd",
            "timeout"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.cli_bridge._run_command:130#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.cli_bridge",
            "llmstruct.api.services.cli_bridge._run_command:130"
          ],
          "hash": "6f7e78750b3cd7a902ae1588903109e0682aebe4c13ae5b03efd8d2d3406e2b2",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-services-cli-bridge--run-command",
          "summary": "Run CLI command asynchronously",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "private"
          ],
          "calls": [
            "logger.info",
            "stdout.decode",
            "CLIBridgeError",
            "process.communicate",
            "stderr.decode",
            "asyncio.create_subprocess_exec",
            "logger.error",
            "asyncio.wait_for",
            "str"
          ],
          "called_by": []
        },
        {
          "name": "_parse_cli_output",
          "docstring": "Parse CLI JSON output",
          "line_range": [
            163,
            176
          ],
          "parameters": [
            "self",
            "output"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.cli_bridge._parse_cli_output:163#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.cli_bridge",
            "llmstruct.api.services.cli_bridge._parse_cli_output:163"
          ],
          "hash": "bb123f1fd67db65b8da0db72c12d91655f0fa8c6758f7fe1846a2640c92b0a75",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-services-cli-bridge--parse-cli-output",
          "summary": "Parse CLI JSON output",
          "summary_source": "docstring",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "output.strip",
            "json.loads"
          ],
          "called_by": []
        }
      ],
      "classes": [
        {
          "name": "CLIBridgeError",
          "docstring": "CLI Bridge specific errors",
          "line_range": [
            21,
            23
          ],
          "methods": [],
          "bases": [
            "Exception"
          ],
          "uid": "llmstruct.api.services.cli_bridge.CLIBridgeError:21#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.cli_bridge",
            "llmstruct.api.services.cli_bridge.CLIBridgeError:21"
          ],
          "hash": "f2e139322bae3b81a8ae85d1d961d601b928ab6a74e5d00980195779dc31654e",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-services-cli-bridge-clibridgeerror",
          "summary": "CLI Bridge specific errors",
          "summary_source": "docstring",
          "tags": [
            "class",
            "public"
          ]
        },
        {
          "name": "CLIBridge",
          "docstring": "Bridge between FastAPI and existing CLI functionality",
          "line_range": [
            26,
            176
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                29,
                33
              ],
              "parameters": [
                "self",
                "base_path"
              ],
              "uid": "llmstruct.api.services.cli_bridge.CLIBridge.__init__:29#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.cli_bridge",
                "llmstruct.api.services.cli_bridge.CLIBridge",
                "llmstruct.api.services.cli_bridge.CLIBridge.__init__:29"
              ],
              "hash": "a542c0d24785a0452ea1b1f260e79aa0655d17e77765c921bacaa9fef2c95242",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-api-services-cli-bridge-clibridge---init--",
              "summary": "Method for clibridge. init",
              "summary_source": "heuristic",
              "tags": [
                "method",
                "private",
                "public"
              ],
              "calls": [
                "self._get_python_command",
                "Path.cwd"
              ],
              "called_by": []
            },
            {
              "name": "_get_python_command",
              "docstring": "Determine the best Python command to use",
              "line_range": [
                35,
                40
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.api.services.cli_bridge.CLIBridge._get_python_command:35#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.cli_bridge",
                "llmstruct.api.services.cli_bridge.CLIBridge",
                "llmstruct.api.services.cli_bridge.CLIBridge._get_python_command:35"
              ],
              "hash": "5bf9a065ba319854243ea6c78f1eda7fb83ccaf1edfa2494bf1cc35b3d4ae0b0",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-api-services-cli-bridge-clibridge--get-python-command",
              "summary": "Determine the best Python command to use",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "venv_python.exists",
                "str"
              ],
              "called_by": []
            },
            {
              "name": "scan_project",
              "docstring": "Execute project scan via CLI",
              "line_range": [
                42,
                87
              ],
              "parameters": [
                "self",
                "options"
              ],
              "uid": "llmstruct.api.services.cli_bridge.CLIBridge.scan_project:42#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.cli_bridge",
                "llmstruct.api.services.cli_bridge.CLIBridge",
                "llmstruct.api.services.cli_bridge.CLIBridge.scan_project:42"
              ],
              "hash": "2f5260c11deca435248b2bd6c395f5335b51b5739663272871c70825362eb816",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-api-services-cli-bridge-clibridge-scan-project",
              "summary": "Execute project scan via CLI",
              "summary_source": "docstring",
              "tags": [
                "async",
                "method",
                "public"
              ],
              "calls": [
                "options.get",
                "self._run_command",
                "os.close",
                "tempfile.mkstemp",
                "json.load",
                "self._parse_cli_output",
                "os.unlink",
                "logger.error",
                "cmd.extend",
                "open",
                "cmd.append"
              ],
              "called_by": []
            },
            {
              "name": "get_context",
              "docstring": "Get project context in specified mode",
              "line_range": [
                89,
                98
              ],
              "parameters": [
                "self",
                "mode",
                "include_files"
              ],
              "uid": "llmstruct.api.services.cli_bridge.CLIBridge.get_context:89#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.cli_bridge",
                "llmstruct.api.services.cli_bridge.CLIBridge",
                "llmstruct.api.services.cli_bridge.CLIBridge.get_context:89"
              ],
              "hash": "2bae5f0828f16e5c2bd836a17ab034e8932762d3f306306a526f879d6b144d2d",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-api-services-cli-bridge-clibridge-get-context",
              "summary": "Get project context in specified mode",
              "summary_source": "docstring",
              "tags": [
                "async",
                "method",
                "public"
              ],
              "calls": [
                "cmd.extend",
                "self._parse_cli_output",
                "self._run_command"
              ],
              "called_by": []
            },
            {
              "name": "get_project_info",
              "docstring": "Get basic project information",
              "line_range": [
                100,
                104
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.api.services.cli_bridge.CLIBridge.get_project_info:100#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.cli_bridge",
                "llmstruct.api.services.cli_bridge.CLIBridge",
                "llmstruct.api.services.cli_bridge.CLIBridge.get_project_info:100"
              ],
              "hash": "12fc98f5d0e79d15920a721573f0973f8179b1f9e71aec76da96b12732156509",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-api-services-cli-bridge-clibridge-get-project-info",
              "summary": "Get basic project information",
              "summary_source": "docstring",
              "tags": [
                "async",
                "method",
                "public"
              ],
              "calls": [
                "self._parse_cli_output",
                "self._run_command"
              ],
              "called_by": []
            },
            {
              "name": "validate_json",
              "docstring": "Validate JSON structure",
              "line_range": [
                106,
                110
              ],
              "parameters": [
                "self",
                "json_path"
              ],
              "uid": "llmstruct.api.services.cli_bridge.CLIBridge.validate_json:106#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.cli_bridge",
                "llmstruct.api.services.cli_bridge.CLIBridge",
                "llmstruct.api.services.cli_bridge.CLIBridge.validate_json:106"
              ],
              "hash": "63abf625ff7b25f21b25cbeb77f9fda4c3481002e746b56ebc9e9a4274bcdad9",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-api-services-cli-bridge-clibridge-validate-json",
              "summary": "Validate JSON structure",
              "summary_source": "docstring",
              "tags": [
                "async",
                "method",
                "public"
              ],
              "calls": [
                "self._parse_cli_output",
                "self._run_command"
              ],
              "called_by": []
            },
            {
              "name": "health_check",
              "docstring": "Check CLI health and availability",
              "line_range": [
                112,
                128
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.api.services.cli_bridge.CLIBridge.health_check:112#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.cli_bridge",
                "llmstruct.api.services.cli_bridge.CLIBridge",
                "llmstruct.api.services.cli_bridge.CLIBridge.health_check:112"
              ],
              "hash": "d9503e6bde350b0c39161382ff1f7a50c724c8caadf78e46db3c314d95928d56",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-api-services-cli-bridge-clibridge-health-check",
              "summary": "Check CLI health and availability",
              "summary_source": "docstring",
              "tags": [
                "async",
                "method",
                "public"
              ],
              "calls": [
                "self._run_command",
                "str"
              ],
              "called_by": []
            },
            {
              "name": "_run_command",
              "docstring": "Run CLI command asynchronously",
              "line_range": [
                130,
                161
              ],
              "parameters": [
                "self",
                "cmd",
                "timeout"
              ],
              "uid": "llmstruct.api.services.cli_bridge.CLIBridge._run_command:130#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.cli_bridge",
                "llmstruct.api.services.cli_bridge.CLIBridge",
                "llmstruct.api.services.cli_bridge.CLIBridge._run_command:130"
              ],
              "hash": "a5cf586bb95c63abf5d5f0dcdb1be8190e55d2ff8a6febd6c0b82399b95ca3e6",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-api-services-cli-bridge-clibridge--run-command",
              "summary": "Run CLI command asynchronously",
              "summary_source": "docstring",
              "tags": [
                "async",
                "method",
                "private"
              ],
              "calls": [
                "logger.info",
                "stdout.decode",
                "CLIBridgeError",
                "process.communicate",
                "stderr.decode",
                "asyncio.create_subprocess_exec",
                "logger.error",
                "asyncio.wait_for",
                "str"
              ],
              "called_by": []
            },
            {
              "name": "_parse_cli_output",
              "docstring": "Parse CLI JSON output",
              "line_range": [
                163,
                176
              ],
              "parameters": [
                "self",
                "output"
              ],
              "uid": "llmstruct.api.services.cli_bridge.CLIBridge._parse_cli_output:163#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.cli_bridge",
                "llmstruct.api.services.cli_bridge.CLIBridge",
                "llmstruct.api.services.cli_bridge.CLIBridge._parse_cli_output:163"
              ],
              "hash": "895faae32b02c8856db283c828d8c16fad2fe048a0bc1727e02f962baaea475f",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-api-services-cli-bridge-clibridge--parse-cli-output",
              "summary": "Parse CLI JSON output",
              "summary_source": "docstring",
              "tags": [
                "method",
                "private"
              ],
              "calls": [
                "output.strip",
                "json.loads"
              ],
              "called_by": []
            }
          ],
          "bases": [],
          "uid": "llmstruct.api.services.cli_bridge.CLIBridge:26#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.cli_bridge",
            "llmstruct.api.services.cli_bridge.CLIBridge:26"
          ],
          "hash": "766223e49df69d829e487546a802e55071d03fc426521d9a4d9ebb6332b69dfe",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-services-cli-bridge-clibridge",
          "summary": "Bridge between FastAPI and existing CLI functionality",
          "summary_source": "docstring",
          "tags": [
            "async",
            "class",
            "public"
          ]
        }
      ],
      "callgraph": {
        "__init__": [
          "self._get_python_command",
          "Path.cwd"
        ],
        "_get_python_command": [
          "venv_python.exists",
          "str"
        ],
        "scan_project": [
          "options.get",
          "self._run_command",
          "os.close",
          "tempfile.mkstemp",
          "json.load",
          "self._parse_cli_output",
          "os.unlink",
          "logger.error",
          "cmd.extend",
          "open",
          "cmd.append"
        ],
        "get_context": [
          "cmd.extend",
          "self._parse_cli_output",
          "self._run_command"
        ],
        "get_project_info": [
          "self._parse_cli_output",
          "self._run_command"
        ],
        "validate_json": [
          "self._parse_cli_output",
          "self._run_command"
        ],
        "health_check": [
          "self._run_command",
          "str"
        ],
        "_run_command": [
          "logger.info",
          "stdout.decode",
          "CLIBridgeError",
          "process.communicate",
          "stderr.decode",
          "asyncio.create_subprocess_exec",
          "logger.error",
          "asyncio.wait_for",
          "str"
        ],
        "_parse_cli_output": [
          "output.strip",
          "json.loads"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "asyncio",
        "config",
        "json",
        "logging",
        "os",
        "pathlib",
        "settings",
        "subprocess",
        "tempfile",
        "typing"
      ],
      "hash": "ae6642d6b4982964e62cfd89d281408fbc17bf8540df9d761aa7c540a33cd9d0",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.api.services.cli_bridge.llmstruct.api.services.cli_bridge#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.api",
        "llmstruct.api.services",
        "llmstruct.api.services.cli_bridge",
        "llmstruct.api.services.cli_bridge.llmstruct.api.services.cli_bridge"
      ],
      "summary": "CLI Bridge Service\n\nProvides async integration between FastAPI and existing LLMStruct CLI functionality.",
      "summary_source": "docstring",
      "tags": [
        "async",
        "module",
        "public"
      ],
      "artifact_id": "83185888-4adb-46bc-a7ab-ab39be09a450"
    },
    {
      "module_id": "llmstruct.api.services.chat_session",
      "path": "llmstruct/api/services/chat_session.py",
      "category": "core",
      "module_doc": "Chat Session Manager\n\nManages persistent chat sessions and conversation history",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            19,
            24
          ],
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.chat_session.__init__:19#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.chat_session",
            "llmstruct.api.services.chat_session.__init__:19"
          ],
          "hash": "8cd85887069519d690a45a007d676eaefbee92c54fa95d6a5d6c22183f44c466",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-services-chat-session---init--",
          "summary": "Function for init",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "Path.cwd"
          ],
          "called_by": []
        },
        {
          "name": "add_message",
          "docstring": "Add a message to the session",
          "line_range": [
            26,
            36
          ],
          "parameters": [
            "self",
            "role",
            "content",
            "metadata"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.chat_session.add_message:26#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.chat_session",
            "llmstruct.api.services.chat_session.add_message:26"
          ],
          "hash": "5ecf506e06c951f4aee60300243278a4d0040918955efbf8b53a7b9e550c85d5",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-services-chat-session-add-message",
          "summary": "Add a message to the session",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "self._save_session",
            "self.get_or_create_session",
            "session.add_message"
          ],
          "called_by": []
        },
        {
          "name": "get_messages",
          "docstring": "Get messages from session, optionally limited",
          "line_range": [
            38,
            42
          ],
          "parameters": [
            "self",
            "limit"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.chat_session.get_messages:38#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.chat_session",
            "llmstruct.api.services.chat_session.get_messages:38"
          ],
          "hash": "77c5cb2f1ac9583c14d8efaa7501322fde71d0605f9677a30864dc57a2135eed",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-services-chat-session-get-messages",
          "summary": "Get messages from session, optionally limited",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [],
          "called_by": []
        },
        {
          "name": "get_context_string",
          "docstring": "Get recent messages as context string",
          "line_range": [
            44,
            54
          ],
          "parameters": [
            "self",
            "limit"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.chat_session.get_context_string:44#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.chat_session",
            "llmstruct.api.services.chat_session.get_context_string:44"
          ],
          "hash": "4b3d04c6a2af008ad4beb358da7eba6a0fdf8d8638552f8638b968126919023e",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-services-chat-session-get-context-string",
          "summary": "Get recent messages as context string",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "context_parts.append",
            "self.get_messages"
          ],
          "called_by": []
        },
        {
          "name": "to_dict",
          "docstring": "Convert session to dictionary",
          "line_range": [
            56,
            65
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.chat_session.to_dict:56#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.chat_session",
            "llmstruct.api.services.chat_session.to_dict:56"
          ],
          "hash": "d18aefae796ad3959e7fed0827a5414572276aac505f04df85d8afcc62a72269",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-services-chat-session-to-dict",
          "summary": "Convert session to dictionary",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "len"
          ],
          "called_by": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            70,
            73
          ],
          "parameters": [
            "self",
            "storage_path"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.chat_session.__init__:70#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.chat_session",
            "llmstruct.api.services.chat_session.__init__:70"
          ],
          "hash": "28b81ad5f9e061d76a08659a0f9802dbf88162b8df454c4d991c1bbf44102daf",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-services-chat-session---init--",
          "summary": "Function for init",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "private"
          ],
          "calls": [
            "Path.cwd"
          ],
          "called_by": []
        },
        {
          "name": "get_or_create_session",
          "docstring": "Get existing session or create new one",
          "line_range": [
            75,
            87
          ],
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.chat_session.get_or_create_session:75#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.chat_session",
            "llmstruct.api.services.chat_session.get_or_create_session:75"
          ],
          "hash": "3c0d6fc1dcdb4f7b211dd269d7c46cbd8375676339caf387aa9dcd23743deb5d",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-services-chat-session-get-or-create-session",
          "summary": "Get existing session or create new one",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "public"
          ],
          "calls": [
            "self._load_session",
            "session_file.exists",
            "ChatSession"
          ],
          "called_by": []
        },
        {
          "name": "get_session",
          "docstring": "Get session by ID",
          "line_range": [
            89,
            101
          ],
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.chat_session.get_session:89#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.chat_session",
            "llmstruct.api.services.chat_session.get_session:89"
          ],
          "hash": "a290884a3e81f6d3cbf6c56b4c3fa94bd42e5c11a268cf06768ed8e0a49b729c",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-services-chat-session-get-session",
          "summary": "Get session by ID",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "public"
          ],
          "calls": [
            "self._load_session",
            "session_file.exists"
          ],
          "called_by": []
        },
        {
          "name": "add_message",
          "docstring": "Add message to session",
          "line_range": [
            103,
            109
          ],
          "parameters": [
            "self",
            "session_id",
            "role",
            "content",
            "metadata"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.chat_session.add_message:103#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.chat_session",
            "llmstruct.api.services.chat_session.add_message:103"
          ],
          "hash": "4478a76ded3115d8b844adea12ad86a8608357009af736b9eb9e1d3ac57e359e",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-services-chat-session-add-message",
          "summary": "Add message to session",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "public"
          ],
          "calls": [
            "self._save_session",
            "self.get_or_create_session",
            "session.add_message"
          ],
          "called_by": []
        },
        {
          "name": "list_sessions",
          "docstring": "List all sessions with summary info",
          "line_range": [
            111,
            138
          ],
          "parameters": [
            "self",
            "limit"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.chat_session.list_sessions:111#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.chat_session",
            "llmstruct.api.services.chat_session.list_sessions:111"
          ],
          "hash": "db97eb7b0825e461e4129ef303ac168105866511d811811235ac296fc3d4c785",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-services-chat-session-list-sessions",
          "summary": "List all sessions with summary info",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "public"
          ],
          "calls": [
            "len",
            "self._load_session",
            "sessions.sort",
            "logger.error",
            "sessions.append"
          ],
          "called_by": []
        },
        {
          "name": "delete_session",
          "docstring": "Delete a session",
          "line_range": [
            140,
            152
          ],
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.chat_session.delete_session:140#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.chat_session",
            "llmstruct.api.services.chat_session.delete_session:140"
          ],
          "hash": "4aa9c3539344f952f0b5a133090aa09bf32f08b14654ce2392d3fe5c8d10f606",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-services-chat-session-delete-session",
          "summary": "Delete a session",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "public"
          ],
          "calls": [
            "session_file.exists",
            "session_file.unlink"
          ],
          "called_by": []
        },
        {
          "name": "_load_session",
          "docstring": "Load session from storage",
          "line_range": [
            154,
            167
          ],
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.chat_session._load_session:154#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.chat_session",
            "llmstruct.api.services.chat_session._load_session:154"
          ],
          "hash": "c5d11a50596522ab4d0e5a8bf66d208e7794863416c56b06465534f9e5ff7fe9",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-services-chat-session--load-session",
          "summary": "Load session from storage",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "private"
          ],
          "calls": [
            "json.load",
            "data.get",
            "open",
            "ChatSession"
          ],
          "called_by": []
        },
        {
          "name": "_save_session",
          "docstring": "Save session to storage",
          "line_range": [
            169,
            178
          ],
          "parameters": [
            "self",
            "session"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.chat_session._save_session:169#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.chat_session",
            "llmstruct.api.services.chat_session._save_session:169"
          ],
          "hash": "0d378d6745ac922a1f3da7ebac23358ac8a91734f5dbcc5e1a687672cced4a81",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-services-chat-session--save-session",
          "summary": "Save session to storage",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "private"
          ],
          "calls": [
            "logger.error",
            "json.dump",
            "open",
            "session.to_dict"
          ],
          "called_by": []
        },
        {
          "name": "cleanup_old_sessions",
          "docstring": "Clean up sessions older than specified days",
          "line_range": [
            180,
            183
          ],
          "parameters": [
            "self",
            "days"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.chat_session.cleanup_old_sessions:180#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.chat_session",
            "llmstruct.api.services.chat_session.cleanup_old_sessions:180"
          ],
          "hash": "3552836dd5e8b1ca3ebf54f4bdbde871a0072a8091ab31d3ab8dcb0f3dbfa657",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-services-chat-session-cleanup-old-sessions",
          "summary": "Clean up sessions older than specified days",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "public"
          ],
          "calls": [],
          "called_by": []
        }
      ],
      "classes": [
        {
          "name": "ChatSession",
          "docstring": "Represents a chat session with history",
          "line_range": [
            16,
            65
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                19,
                24
              ],
              "parameters": [
                "self",
                "session_id"
              ],
              "uid": "llmstruct.api.services.chat_session.ChatSession.__init__:19#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.chat_session",
                "llmstruct.api.services.chat_session.ChatSession",
                "llmstruct.api.services.chat_session.ChatSession.__init__:19"
              ],
              "hash": "a6a951ae4a8988ab0a291a973af5690bfc4d4c92e603a1a7a7647990b1b68334",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-api-services-chat-session-chatsession---init--",
              "summary": "Method for chatsession. init",
              "summary_source": "heuristic",
              "tags": [
                "method",
                "private",
                "public"
              ],
              "calls": [
                "Path.cwd"
              ],
              "called_by": []
            },
            {
              "name": "add_message",
              "docstring": "Add a message to the session",
              "line_range": [
                26,
                36
              ],
              "parameters": [
                "self",
                "role",
                "content",
                "metadata"
              ],
              "uid": "llmstruct.api.services.chat_session.ChatSession.add_message:26#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.chat_session",
                "llmstruct.api.services.chat_session.ChatSession",
                "llmstruct.api.services.chat_session.ChatSession.add_message:26"
              ],
              "hash": "5cee02a5b4983f274ffdd8c9d94b9308753b9c1abe761dcc5a3c248c27b9e2c6",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-api-services-chat-session-chatsession-add-message",
              "summary": "Add a message to the session",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "self._save_session",
                "self.get_or_create_session",
                "session.add_message"
              ],
              "called_by": []
            },
            {
              "name": "get_messages",
              "docstring": "Get messages from session, optionally limited",
              "line_range": [
                38,
                42
              ],
              "parameters": [
                "self",
                "limit"
              ],
              "uid": "llmstruct.api.services.chat_session.ChatSession.get_messages:38#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.chat_session",
                "llmstruct.api.services.chat_session.ChatSession",
                "llmstruct.api.services.chat_session.ChatSession.get_messages:38"
              ],
              "hash": "0303464ca71b180342984b5de04e3c15fbd64862212a4db01a99341c589a189b",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-api-services-chat-session-chatsession-get-messages",
              "summary": "Get messages from session, optionally limited",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [],
              "called_by": []
            },
            {
              "name": "get_context_string",
              "docstring": "Get recent messages as context string",
              "line_range": [
                44,
                54
              ],
              "parameters": [
                "self",
                "limit"
              ],
              "uid": "llmstruct.api.services.chat_session.ChatSession.get_context_string:44#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.chat_session",
                "llmstruct.api.services.chat_session.ChatSession",
                "llmstruct.api.services.chat_session.ChatSession.get_context_string:44"
              ],
              "hash": "cf7fdee7e77ac361cd4085b9796a3c6b6e2d08486c1173254f5a1a4517514916",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-api-services-chat-session-chatsession-get-context-string",
              "summary": "Get recent messages as context string",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "context_parts.append",
                "self.get_messages"
              ],
              "called_by": []
            },
            {
              "name": "to_dict",
              "docstring": "Convert session to dictionary",
              "line_range": [
                56,
                65
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.api.services.chat_session.ChatSession.to_dict:56#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.chat_session",
                "llmstruct.api.services.chat_session.ChatSession",
                "llmstruct.api.services.chat_session.ChatSession.to_dict:56"
              ],
              "hash": "fae71f0a6a2fb58bc9ea9613c651fe2b8b5d07727dece8222b1b6e80118bc18b",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-api-services-chat-session-chatsession-to-dict",
              "summary": "Convert session to dictionary",
              "summary_source": "docstring",
              "tags": [
                "method",
                "public"
              ],
              "calls": [
                "len"
              ],
              "called_by": []
            }
          ],
          "bases": [],
          "uid": "llmstruct.api.services.chat_session.ChatSession:16#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.chat_session",
            "llmstruct.api.services.chat_session.ChatSession:16"
          ],
          "hash": "bce36326deca3587680965da13931642b38e59b512276f4301d7b944462955c7",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-services-chat-session-chatsession",
          "summary": "Represents a chat session with history",
          "summary_source": "docstring",
          "tags": [
            "class",
            "public"
          ]
        },
        {
          "name": "ChatSessionManager",
          "docstring": "Manages multiple chat sessions",
          "line_range": [
            67,
            183
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                70,
                73
              ],
              "parameters": [
                "self",
                "storage_path"
              ],
              "uid": "llmstruct.api.services.chat_session.ChatSessionManager.__init__:70#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.chat_session",
                "llmstruct.api.services.chat_session.ChatSessionManager",
                "llmstruct.api.services.chat_session.ChatSessionManager.__init__:70"
              ],
              "hash": "0e29e2d67e3b39d3f722cd6bd63c7134be9431ce8ed9bb7cf7d0eef10d869b43",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-api-services-chat-session-chatsessionmanager---init--",
              "summary": "Method for chatsessionmanager. init",
              "summary_source": "heuristic",
              "tags": [
                "method",
                "private",
                "public"
              ],
              "calls": [
                "Path.cwd"
              ],
              "called_by": []
            },
            {
              "name": "get_or_create_session",
              "docstring": "Get existing session or create new one",
              "line_range": [
                75,
                87
              ],
              "parameters": [
                "self",
                "session_id"
              ],
              "uid": "llmstruct.api.services.chat_session.ChatSessionManager.get_or_create_session:75#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.chat_session",
                "llmstruct.api.services.chat_session.ChatSessionManager",
                "llmstruct.api.services.chat_session.ChatSessionManager.get_or_create_session:75"
              ],
              "hash": "422aa3c6e471563c1bd23da841b3b5c9bd0cdbd411742146749b7b1dd290bb4e",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-api-services-chat-session-chatsessionmanager-get-or-create-session",
              "summary": "Get existing session or create new one",
              "summary_source": "docstring",
              "tags": [
                "async",
                "method",
                "public"
              ],
              "calls": [
                "self._load_session",
                "session_file.exists",
                "ChatSession"
              ],
              "called_by": []
            },
            {
              "name": "get_session",
              "docstring": "Get session by ID",
              "line_range": [
                89,
                101
              ],
              "parameters": [
                "self",
                "session_id"
              ],
              "uid": "llmstruct.api.services.chat_session.ChatSessionManager.get_session:89#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.chat_session",
                "llmstruct.api.services.chat_session.ChatSessionManager",
                "llmstruct.api.services.chat_session.ChatSessionManager.get_session:89"
              ],
              "hash": "9bf4bd7e497365f45a558ce0c091ec7ce69d207b6f1dab5e2f3cdd68a0eea0eb",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-api-services-chat-session-chatsessionmanager-get-session",
              "summary": "Get session by ID",
              "summary_source": "docstring",
              "tags": [
                "async",
                "method",
                "public"
              ],
              "calls": [
                "self._load_session",
                "session_file.exists"
              ],
              "called_by": []
            },
            {
              "name": "add_message",
              "docstring": "Add message to session",
              "line_range": [
                103,
                109
              ],
              "parameters": [
                "self",
                "session_id",
                "role",
                "content",
                "metadata"
              ],
              "uid": "llmstruct.api.services.chat_session.ChatSessionManager.add_message:103#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.chat_session",
                "llmstruct.api.services.chat_session.ChatSessionManager",
                "llmstruct.api.services.chat_session.ChatSessionManager.add_message:103"
              ],
              "hash": "f6267f6b41fbe7329b75ef19b0fc3ea7bdde2f2c9d582b5ab93172ba53db8bed",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-api-services-chat-session-chatsessionmanager-add-message",
              "summary": "Add message to session",
              "summary_source": "docstring",
              "tags": [
                "async",
                "method",
                "public"
              ],
              "calls": [
                "self._save_session",
                "self.get_or_create_session",
                "session.add_message"
              ],
              "called_by": []
            },
            {
              "name": "list_sessions",
              "docstring": "List all sessions with summary info",
              "line_range": [
                111,
                138
              ],
              "parameters": [
                "self",
                "limit"
              ],
              "uid": "llmstruct.api.services.chat_session.ChatSessionManager.list_sessions:111#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.chat_session",
                "llmstruct.api.services.chat_session.ChatSessionManager",
                "llmstruct.api.services.chat_session.ChatSessionManager.list_sessions:111"
              ],
              "hash": "7d6d1badcb79aac3b4be97d25e98580094b16b6cee6ded3805a4335f24dfa460",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-api-services-chat-session-chatsessionmanager-list-sessions",
              "summary": "List all sessions with summary info",
              "summary_source": "docstring",
              "tags": [
                "async",
                "method",
                "public"
              ],
              "calls": [
                "len",
                "self._load_session",
                "sessions.sort",
                "logger.error",
                "sessions.append"
              ],
              "called_by": []
            },
            {
              "name": "delete_session",
              "docstring": "Delete a session",
              "line_range": [
                140,
                152
              ],
              "parameters": [
                "self",
                "session_id"
              ],
              "uid": "llmstruct.api.services.chat_session.ChatSessionManager.delete_session:140#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.chat_session",
                "llmstruct.api.services.chat_session.ChatSessionManager",
                "llmstruct.api.services.chat_session.ChatSessionManager.delete_session:140"
              ],
              "hash": "bdefd9765e976955797ee786a26a7db6f326e42c9082efe7f626f2a0fb66f9d5",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-api-services-chat-session-chatsessionmanager-delete-session",
              "summary": "Delete a session",
              "summary_source": "docstring",
              "tags": [
                "async",
                "method",
                "public"
              ],
              "calls": [
                "session_file.exists",
                "session_file.unlink"
              ],
              "called_by": []
            },
            {
              "name": "_load_session",
              "docstring": "Load session from storage",
              "line_range": [
                154,
                167
              ],
              "parameters": [
                "self",
                "session_id"
              ],
              "uid": "llmstruct.api.services.chat_session.ChatSessionManager._load_session:154#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.chat_session",
                "llmstruct.api.services.chat_session.ChatSessionManager",
                "llmstruct.api.services.chat_session.ChatSessionManager._load_session:154"
              ],
              "hash": "e78d4d192a8a5cf4156474f2e2150de0b66aeca38ea98f010db0cf71f8202726",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-api-services-chat-session-chatsessionmanager--load-session",
              "summary": "Load session from storage",
              "summary_source": "docstring",
              "tags": [
                "async",
                "method",
                "private"
              ],
              "calls": [
                "json.load",
                "data.get",
                "open",
                "ChatSession"
              ],
              "called_by": []
            },
            {
              "name": "_save_session",
              "docstring": "Save session to storage",
              "line_range": [
                169,
                178
              ],
              "parameters": [
                "self",
                "session"
              ],
              "uid": "llmstruct.api.services.chat_session.ChatSessionManager._save_session:169#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.chat_session",
                "llmstruct.api.services.chat_session.ChatSessionManager",
                "llmstruct.api.services.chat_session.ChatSessionManager._save_session:169"
              ],
              "hash": "1c70108976a58fc076ea0a985b1157b42065c5b4dc4463d66ac7a9cab63bb818",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-api-services-chat-session-chatsessionmanager--save-session",
              "summary": "Save session to storage",
              "summary_source": "docstring",
              "tags": [
                "async",
                "method",
                "private"
              ],
              "calls": [
                "logger.error",
                "json.dump",
                "open",
                "session.to_dict"
              ],
              "called_by": []
            },
            {
              "name": "cleanup_old_sessions",
              "docstring": "Clean up sessions older than specified days",
              "line_range": [
                180,
                183
              ],
              "parameters": [
                "self",
                "days"
              ],
              "uid": "llmstruct.api.services.chat_session.ChatSessionManager.cleanup_old_sessions:180#method",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.chat_session",
                "llmstruct.api.services.chat_session.ChatSessionManager",
                "llmstruct.api.services.chat_session.ChatSessionManager.cleanup_old_sessions:180"
              ],
              "hash": "ec56c297cc5808754336fc95a5fb8c077c9c70d96941c5f7bf7487962711a634",
              "hash_source": "code_ast_v1",
              "hash_version": "2.1.0",
              "markdown_anchor": "#llmstruct-api-services-chat-session-chatsessionmanager-cleanup-old-sessions",
              "summary": "Clean up sessions older than specified days",
              "summary_source": "docstring",
              "tags": [
                "async",
                "method",
                "public"
              ],
              "calls": [],
              "called_by": []
            }
          ],
          "bases": [],
          "uid": "llmstruct.api.services.chat_session.ChatSessionManager:67#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.chat_session",
            "llmstruct.api.services.chat_session.ChatSessionManager:67"
          ],
          "hash": "04ff73db795e9c45a05067d0869633634f7849ff4692d55c142319422269dddd",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-services-chat-session-chatsessionmanager",
          "summary": "Manages multiple chat sessions",
          "summary_source": "docstring",
          "tags": [
            "async",
            "class",
            "public"
          ]
        }
      ],
      "callgraph": {
        "__init__": [
          "Path.cwd"
        ],
        "add_message": [
          "self._save_session",
          "self.get_or_create_session",
          "session.add_message"
        ],
        "get_messages": [],
        "get_context_string": [
          "context_parts.append",
          "self.get_messages"
        ],
        "to_dict": [
          "len"
        ],
        "get_or_create_session": [
          "self._load_session",
          "session_file.exists",
          "ChatSession"
        ],
        "get_session": [
          "self._load_session",
          "session_file.exists"
        ],
        "list_sessions": [
          "len",
          "self._load_session",
          "sessions.sort",
          "logger.error",
          "sessions.append"
        ],
        "delete_session": [
          "session_file.exists",
          "session_file.unlink"
        ],
        "_load_session": [
          "json.load",
          "data.get",
          "open",
          "ChatSession"
        ],
        "_save_session": [
          "logger.error",
          "json.dump",
          "open",
          "session.to_dict"
        ],
        "cleanup_old_sessions": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "asyncio",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": "278a79380fa447dfedc355ffa26c5274625aba212f8c8febc0be832a4342f6aa",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.api.services.chat_session.llmstruct.api.services.chat_session#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.api",
        "llmstruct.api.services",
        "llmstruct.api.services.chat_session",
        "llmstruct.api.services.chat_session.llmstruct.api.services.chat_session"
      ],
      "summary": "Chat Session Manager\n\nManages persistent chat sessions and conversation history",
      "summary_source": "docstring",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "dc9bc199-33a3-44f2-b26f-8867ac45b3b3"
    },
    {
      "module_id": "llmstruct.api.models.requests",
      "path": "llmstruct/api/models/requests.py",
      "category": "core",
      "module_doc": "Request models for LLMStruct FastAPI",
      "functions": [],
      "classes": [
        {
          "name": "ContextMode",
          "docstring": "",
          "line_range": [
            10,
            14
          ],
          "methods": [],
          "bases": [
            "str",
            "Enum"
          ],
          "uid": "llmstruct.api.models.requests.ContextMode:10#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.requests",
            "llmstruct.api.models.requests.ContextMode:10"
          ],
          "hash": "9964f1c753f8b3676bb89be57fd0fdf8c06fa4c3fe44a2211379d4dde19d14aa",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-models-requests-contextmode",
          "summary": "Class for context mode",
          "summary_source": "heuristic",
          "tags": [
            "class",
            "public"
          ]
        },
        {
          "name": "Priority",
          "docstring": "",
          "line_range": [
            17,
            21
          ],
          "methods": [],
          "bases": [
            "str",
            "Enum"
          ],
          "uid": "llmstruct.api.models.requests.Priority:17#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.requests",
            "llmstruct.api.models.requests.Priority:17"
          ],
          "hash": "1be14261c1503d0b4eebfa992703453f53f7b49cd9baf266b1ef34a3670f325a",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-models-requests-priority",
          "summary": "Class for priority",
          "summary_source": "heuristic",
          "tags": [
            "class",
            "public"
          ]
        },
        {
          "name": "ScanRequest",
          "docstring": "Request model for project scanning",
          "line_range": [
            24,
            38
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ],
          "uid": "llmstruct.api.models.requests.ScanRequest:24#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.requests",
            "llmstruct.api.models.requests.ScanRequest:24"
          ],
          "hash": "16593c9e5e570ce4ab28e253d31dbf959e8fd1b563be0521af43c2df444ab35e",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-models-requests-scanrequest",
          "summary": "Request model for project scanning",
          "summary_source": "docstring",
          "tags": [
            "class",
            "public"
          ]
        },
        {
          "name": "ContextRequest",
          "docstring": "Request model for context generation",
          "line_range": [
            41,
            54
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ],
          "uid": "llmstruct.api.models.requests.ContextRequest:41#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.requests",
            "llmstruct.api.models.requests.ContextRequest:41"
          ],
          "hash": "40109f74b473762b782ef4ad6291f57a7ebcfa5aadcc085d321c4e00185a0f4e",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-models-requests-contextrequest",
          "summary": "Request model for context generation",
          "summary_source": "docstring",
          "tags": [
            "class",
            "public"
          ]
        },
        {
          "name": "TaskCreateRequest",
          "docstring": "Request model for creating tasks",
          "line_range": [
            57,
            74
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ],
          "uid": "llmstruct.api.models.requests.TaskCreateRequest:57#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.requests",
            "llmstruct.api.models.requests.TaskCreateRequest:57"
          ],
          "hash": "3859ed31e6ad259100e229a5dbc9316132aaa2c670b84f1d00ad9941140a4426",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-models-requests-taskcreaterequest",
          "summary": "Request model for creating tasks",
          "summary_source": "docstring",
          "tags": [
            "class",
            "public"
          ]
        },
        {
          "name": "TaskUpdateRequest",
          "docstring": "Request model for updating tasks",
          "line_range": [
            77,
            92
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ],
          "uid": "llmstruct.api.models.requests.TaskUpdateRequest:77#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.requests",
            "llmstruct.api.models.requests.TaskUpdateRequest:77"
          ],
          "hash": "ef4dfa8b14b1c07f88e680947de4b07fb069d9ad27409c103f6a8f2cf58a6347",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-models-requests-taskupdaterequest",
          "summary": "Request model for updating tasks",
          "summary_source": "docstring",
          "tags": [
            "class",
            "public"
          ]
        },
        {
          "name": "QueryRequest",
          "docstring": "Request model for LLM queries",
          "line_range": [
            95,
            110
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ],
          "uid": "llmstruct.api.models.requests.QueryRequest:95#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.requests",
            "llmstruct.api.models.requests.QueryRequest:95"
          ],
          "hash": "b5bc9616fc4ef90532ddb23dcde6643928ea5383301c1167b6ee6b589e3ed126",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-models-requests-queryrequest",
          "summary": "Request model for LLM queries",
          "summary_source": "docstring",
          "tags": [
            "class",
            "public"
          ]
        },
        {
          "name": "ValidationRequest",
          "docstring": "Request model for JSON validation",
          "line_range": [
            113,
            124
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ],
          "uid": "llmstruct.api.models.requests.ValidationRequest:113#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.requests",
            "llmstruct.api.models.requests.ValidationRequest:113"
          ],
          "hash": "ac475d5a4763caf6d96426b8973c521948e8f668762e1f0d3144a3a98bbc26de",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-models-requests-validationrequest",
          "summary": "Request model for JSON validation",
          "summary_source": "docstring",
          "tags": [
            "class",
            "public"
          ]
        },
        {
          "name": "ChatMessage",
          "docstring": "Chat message request",
          "line_range": [
            127,
            132
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ],
          "uid": "llmstruct.api.models.requests.ChatMessage:127#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.requests",
            "llmstruct.api.models.requests.ChatMessage:127"
          ],
          "hash": "decb1bcde2739e1d98a6ccd7212e7ba82b4ac9bec5849f3d367efc7ea7ca4894",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-models-requests-chatmessage",
          "summary": "Chat message request",
          "summary_source": "docstring",
          "tags": [
            "class",
            "public"
          ]
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": [
            31,
            38
          ],
          "methods": [],
          "bases": [],
          "uid": "llmstruct.api.models.requests.Config:31#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.requests",
            "llmstruct.api.models.requests.Config:31"
          ],
          "hash": "dea8fcd07edd00b2a846a227c12c59ff832fdac23e4bd376f9929f6ee3507b33",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-models-requests-config",
          "summary": "Class for config",
          "summary_source": "heuristic",
          "tags": [
            "class",
            "public"
          ]
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": [
            47,
            54
          ],
          "methods": [],
          "bases": [],
          "uid": "llmstruct.api.models.requests.Config:47#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.requests",
            "llmstruct.api.models.requests.Config:47"
          ],
          "hash": "33bcda245bdb6e4199f2b1e7d588b856b6995ea563a43151827eb8975f7939e7",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-models-requests-config",
          "summary": "Class for config",
          "summary_source": "heuristic",
          "tags": [
            "class",
            "public"
          ]
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": [
            65,
            74
          ],
          "methods": [],
          "bases": [],
          "uid": "llmstruct.api.models.requests.Config:65#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.requests",
            "llmstruct.api.models.requests.Config:65"
          ],
          "hash": "8f334722174489d808c2183bb06c3e551a396b56e910bb76ad1a79d1157943d9",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-models-requests-config",
          "summary": "Class for config",
          "summary_source": "heuristic",
          "tags": [
            "class",
            "public"
          ]
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": [
            86,
            92
          ],
          "methods": [],
          "bases": [],
          "uid": "llmstruct.api.models.requests.Config:86#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.requests",
            "llmstruct.api.models.requests.Config:86"
          ],
          "hash": "e34e5ce52f6e48630cb43f378c244c590b5b17eb12ab59fbde7df66465e9dc26",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-models-requests-config",
          "summary": "Class for config",
          "summary_source": "heuristic",
          "tags": [
            "class",
            "public"
          ]
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": [
            102,
            110
          ],
          "methods": [],
          "bases": [],
          "uid": "llmstruct.api.models.requests.Config:102#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.requests",
            "llmstruct.api.models.requests.Config:102"
          ],
          "hash": "5a630b5fceb77910fb90e6f33ba19d919332a80a7717b501c85b76b5fa6f11cf",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-models-requests-config",
          "summary": "Class for config",
          "summary_source": "heuristic",
          "tags": [
            "class",
            "public"
          ]
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": [
            118,
            124
          ],
          "methods": [],
          "bases": [],
          "uid": "llmstruct.api.models.requests.Config:118#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.requests",
            "llmstruct.api.models.requests.Config:118"
          ],
          "hash": "415e80e4b25fc388598ca61bd61ca44c974d05fadee92afe05764962633ffe79",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-models-requests-config",
          "summary": "Class for config",
          "summary_source": "heuristic",
          "tags": [
            "class",
            "public"
          ]
        }
      ],
      "callgraph": {},
      "dependencies": [
        "Any",
        "BaseModel",
        "Dict",
        "Enum",
        "Field",
        "List",
        "Optional",
        "enum",
        "pydantic",
        "typing"
      ],
      "hash": "dc0eeffef63529c5124c852cad0692908215fa4c7ebe8a6305ca8d701741d758",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.api.models.requests.llmstruct.api.models.requests#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.api",
        "llmstruct.api.models",
        "llmstruct.api.models.requests",
        "llmstruct.api.models.requests.llmstruct.api.models.requests"
      ],
      "summary": "Request models for LLMStruct FastAPI",
      "summary_source": "docstring",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "0a1b3081-3e44-437c-ae9b-e55f42a60e65"
    },
    {
      "module_id": "llmstruct.api.models.responses",
      "path": "llmstruct/api/models/responses.py",
      "category": "core",
      "module_doc": "Response models for LLMStruct FastAPI",
      "functions": [],
      "classes": [
        {
          "name": "TaskStatus",
          "docstring": "",
          "line_range": [
            11,
            15
          ],
          "methods": [],
          "bases": [
            "str",
            "Enum"
          ],
          "uid": "llmstruct.api.models.responses.TaskStatus:11#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.responses",
            "llmstruct.api.models.responses.TaskStatus:11"
          ],
          "hash": "2bba0414572897a6c168ec18ba7cb64e75bc36cb7dc19078dfa986b460881b70",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-models-responses-taskstatus",
          "summary": "Class for task status",
          "summary_source": "heuristic",
          "tags": [
            "class",
            "public"
          ]
        },
        {
          "name": "HealthStatus",
          "docstring": "",
          "line_range": [
            18,
            21
          ],
          "methods": [],
          "bases": [
            "str",
            "Enum"
          ],
          "uid": "llmstruct.api.models.responses.HealthStatus:18#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.responses",
            "llmstruct.api.models.responses.HealthStatus:18"
          ],
          "hash": "177a3437ddfeaaba28d673a2078c689bfcfbb3c2cd4043359ad0ea42678ba87f",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-models-responses-healthstatus",
          "summary": "Class for health status",
          "summary_source": "heuristic",
          "tags": [
            "class",
            "public"
          ]
        },
        {
          "name": "ProjectInfo",
          "docstring": "Response model for project information",
          "line_range": [
            24,
            49
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ],
          "uid": "llmstruct.api.models.responses.ProjectInfo:24#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.responses",
            "llmstruct.api.models.responses.ProjectInfo:24"
          ],
          "hash": "d38a27f75461ffb8bcf5d499189adbee1a96b0a3e098e250fa95af36983605c3",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-models-responses-projectinfo",
          "summary": "Response model for project information",
          "summary_source": "docstring",
          "tags": [
            "class",
            "public"
          ]
        },
        {
          "name": "ScanResponse",
          "docstring": "Response model for project scan results",
          "line_range": [
            52,
            77
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ],
          "uid": "llmstruct.api.models.responses.ScanResponse:52#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.responses",
            "llmstruct.api.models.responses.ScanResponse:52"
          ],
          "hash": "b2ab2d647dd595aa7dc580c8a4a406e33d0aa85d94fbad18cacffc7772cbd26c",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-models-responses-scanresponse",
          "summary": "Response model for project scan results",
          "summary_source": "docstring",
          "tags": [
            "class",
            "public"
          ]
        },
        {
          "name": "ContextResponse",
          "docstring": "Response model for context generation",
          "line_range": [
            80,
            100
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ],
          "uid": "llmstruct.api.models.responses.ContextResponse:80#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.responses",
            "llmstruct.api.models.responses.ContextResponse:80"
          ],
          "hash": "0defb343933aa1366e8e35724969d8f49c70ab6fc58de48eb1f57bf298d0df12",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-models-responses-contextresponse",
          "summary": "Response model for context generation",
          "summary_source": "docstring",
          "tags": [
            "class",
            "public"
          ]
        },
        {
          "name": "TaskResponse",
          "docstring": "Response model for task operations",
          "line_range": [
            103,
            128
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ],
          "uid": "llmstruct.api.models.responses.TaskResponse:103#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.responses",
            "llmstruct.api.models.responses.TaskResponse:103"
          ],
          "hash": "5cc190626cc0823979f6648d709b63d621bf9d33b4d2a4a2e327a3525d894fa4",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-models-responses-taskresponse",
          "summary": "Response model for task operations",
          "summary_source": "docstring",
          "tags": [
            "class",
            "public"
          ]
        },
        {
          "name": "QueryResponse",
          "docstring": "Response model for LLM queries",
          "line_range": [
            131,
            155
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ],
          "uid": "llmstruct.api.models.responses.QueryResponse:131#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.responses",
            "llmstruct.api.models.responses.QueryResponse:131"
          ],
          "hash": "7a7a53e1101cd335338b1bd9199759e64b37726554a03cc26a77dda7e3ec44ab",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-models-responses-queryresponse",
          "summary": "Response model for LLM queries",
          "summary_source": "docstring",
          "tags": [
            "class",
            "public"
          ]
        },
        {
          "name": "ValidationResponse",
          "docstring": "Response model for JSON validation",
          "line_range": [
            158,
            175
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ],
          "uid": "llmstruct.api.models.responses.ValidationResponse:158#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.responses",
            "llmstruct.api.models.responses.ValidationResponse:158"
          ],
          "hash": "8b22195717c11bc83e95a1ed7df9e2af1361fd4091a87363d0b6dcf2da221058",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-models-responses-validationresponse",
          "summary": "Response model for JSON validation",
          "summary_source": "docstring",
          "tags": [
            "class",
            "public"
          ]
        },
        {
          "name": "HealthResponse",
          "docstring": "Response model for health checks",
          "line_range": [
            178,
            199
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ],
          "uid": "llmstruct.api.models.responses.HealthResponse:178#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.responses",
            "llmstruct.api.models.responses.HealthResponse:178"
          ],
          "hash": "6b2c90928a5d4cb5d60bf59a3fd978e4a374c9994b545032ebd12d4c7cb4d797",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-models-responses-healthresponse",
          "summary": "Response model for health checks",
          "summary_source": "docstring",
          "tags": [
            "class",
            "public"
          ]
        },
        {
          "name": "ErrorResponse",
          "docstring": "Response model for API errors",
          "line_range": [
            202,
            217
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ],
          "uid": "llmstruct.api.models.responses.ErrorResponse:202#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.responses",
            "llmstruct.api.models.responses.ErrorResponse:202"
          ],
          "hash": "723a7fd27923ea731df8ebb17f16adfd354f1faac08b2d27fd9fe467bc48d901",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-models-responses-errorresponse",
          "summary": "Response model for API errors",
          "summary_source": "docstring",
          "tags": [
            "class",
            "public"
          ]
        },
        {
          "name": "ChatResponse",
          "docstring": "Chat response",
          "line_range": [
            220,
            226
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ],
          "uid": "llmstruct.api.models.responses.ChatResponse:220#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.responses",
            "llmstruct.api.models.responses.ChatResponse:220"
          ],
          "hash": "4dc86793a03a2854c5e3eb75d3be11d1b0e3b22f2a8b1be4e20d03be9414f4aa",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-models-responses-chatresponse",
          "summary": "Chat response",
          "summary_source": "docstring",
          "tags": [
            "class",
            "public"
          ]
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": [
            36,
            49
          ],
          "methods": [],
          "bases": [],
          "uid": "llmstruct.api.models.responses.Config:36#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.responses",
            "llmstruct.api.models.responses.Config:36"
          ],
          "hash": "ae92cd6b46f76fa16f56896ea45007d05a8f43f8bfc55abb70dd72f1dcc59704",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-models-responses-config",
          "summary": "Class for config",
          "summary_source": "heuristic",
          "tags": [
            "class",
            "public"
          ]
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": [
            62,
            77
          ],
          "methods": [],
          "bases": [],
          "uid": "llmstruct.api.models.responses.Config:62#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.responses",
            "llmstruct.api.models.responses.Config:62"
          ],
          "hash": "b2f29a2510fa20976f7e88318bdd92b9f7adf9f0c63c1dbf16207dc5f8705d01",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-models-responses-config",
          "summary": "Class for config",
          "summary_source": "heuristic",
          "tags": [
            "class",
            "public"
          ]
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": [
            88,
            100
          ],
          "methods": [],
          "bases": [],
          "uid": "llmstruct.api.models.responses.Config:88#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.responses",
            "llmstruct.api.models.responses.Config:88"
          ],
          "hash": "79b7665c4da906336c94716892a37218bc48fc0f8e430dbe85146c6a8bf23cce",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-models-responses-config",
          "summary": "Class for config",
          "summary_source": "heuristic",
          "tags": [
            "class",
            "public"
          ]
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": [
            115,
            128
          ],
          "methods": [],
          "bases": [],
          "uid": "llmstruct.api.models.responses.Config:115#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.responses",
            "llmstruct.api.models.responses.Config:115"
          ],
          "hash": "56847b715ddb6bfbba470914f36eb74d03fdd66a6293f7d37e50a54d3f14e3f8",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-models-responses-config",
          "summary": "Class for config",
          "summary_source": "heuristic",
          "tags": [
            "class",
            "public"
          ]
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": [
            139,
            155
          ],
          "methods": [],
          "bases": [],
          "uid": "llmstruct.api.models.responses.Config:139#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.responses",
            "llmstruct.api.models.responses.Config:139"
          ],
          "hash": "73d96a341dafe29db09ddf134c5d253b0e3ba3b910896df793ab950163f9d837",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-models-responses-config",
          "summary": "Class for config",
          "summary_source": "heuristic",
          "tags": [
            "class",
            "public"
          ]
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": [
            166,
            175
          ],
          "methods": [],
          "bases": [],
          "uid": "llmstruct.api.models.responses.Config:166#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.responses",
            "llmstruct.api.models.responses.Config:166"
          ],
          "hash": "eaf94bee09ed023089f70685eb2fa310237cb8b3c04c1d3209be251aa6039b7f",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-models-responses-config",
          "summary": "Class for config",
          "summary_source": "heuristic",
          "tags": [
            "class",
            "public"
          ]
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": [
            186,
            199
          ],
          "methods": [],
          "bases": [],
          "uid": "llmstruct.api.models.responses.Config:186#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.responses",
            "llmstruct.api.models.responses.Config:186"
          ],
          "hash": "ae51075b26543fe459ab3ce314c57438207bda505f8d372dff4e530734200d55",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-models-responses-config",
          "summary": "Class for config",
          "summary_source": "heuristic",
          "tags": [
            "class",
            "public"
          ]
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": [
            209,
            217
          ],
          "methods": [],
          "bases": [],
          "uid": "llmstruct.api.models.responses.Config:209#class",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.responses",
            "llmstruct.api.models.responses.Config:209"
          ],
          "hash": "9d94bf6f3bb25ed4187bfd58fca6edf59d1e59a4c18f645c386d0c5c16401489",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-api-models-responses-config",
          "summary": "Class for config",
          "summary_source": "heuristic",
          "tags": [
            "class",
            "public"
          ]
        }
      ],
      "callgraph": {},
      "dependencies": [
        "Any",
        "BaseModel",
        "Dict",
        "Enum",
        "Field",
        "List",
        "Optional",
        "datetime",
        "enum",
        "pydantic",
        "typing"
      ],
      "hash": "078fd90649a418e1a54b3ca016ffe75935a83f57d232ec351be8be93a8462dae",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.api.models.responses.llmstruct.api.models.responses#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.api",
        "llmstruct.api.models",
        "llmstruct.api.models.responses",
        "llmstruct.api.models.responses.llmstruct.api.models.responses"
      ],
      "summary": "Response models for LLMStruct FastAPI",
      "summary_source": "docstring",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "a3bee998-77e1-4cfc-b237-ab34b0d41dfd"
    },
    {
      "module_id": "llmstruct.api.models.__init__",
      "path": "llmstruct/api/models/__init__.py",
      "category": "cli",
      "module_doc": "Pydantic models for LLMStruct FastAPI\n\nDefines request and response models for API endpoints.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "b8e418fc588027c39078efbe602bc30126d34375ab863658b820247d69432b02",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.api.models.__init__.llmstruct.api.models.__init__#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.api",
        "llmstruct.api.models",
        "llmstruct.api.models.__init__",
        "llmstruct.api.models.__init__.llmstruct.api.models.__init__"
      ],
      "summary": "Pydantic models for LLMStruct FastAPI\n\nDefines request and response models for API endpoints.",
      "summary_source": "docstring",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "cc42d632-bb9a-4e75-be57-46d44e4646ac"
    },
    {
      "module_id": "llmstruct.modules.commands.metrics",
      "path": "llmstruct/modules/commands/metrics.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "metrics_status",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 \u043c\u0435\u0442\u0440\u0438\u043a",
          "line_range": [
            1,
            20
          ],
          "parameters": [],
          "decorators": [],
          "uid": "llmstruct.modules.commands.metrics.metrics_status:1#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.commands",
            "llmstruct.modules.commands.metrics",
            "llmstruct.modules.commands.metrics.metrics_status:1"
          ],
          "hash": "a8e8aa1abee6f37cc28128bd073aba68161abac5b0e67df78fa7d686797898c7",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-modules-commands-metrics-metrics-status",
          "summary": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 \u043c\u0435\u0442\u0440\u0438\u043a",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "get_metrics_tracker",
            "tracker.get_session_summary",
            "print"
          ],
          "called_by": [
            "cmd_metrics"
          ]
        },
        {
          "name": "metrics_summary",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u0443\u044e \u0441\u0432\u043e\u0434\u043a\u0443 \u043c\u0435\u0442\u0440\u0438\u043a",
          "line_range": [
            22,
            66
          ],
          "parameters": [],
          "decorators": [],
          "uid": "llmstruct.modules.commands.metrics.metrics_summary:22#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.commands",
            "llmstruct.modules.commands.metrics",
            "llmstruct.modules.commands.metrics.metrics_summary:22"
          ],
          "hash": "a487aa55e81669cb8a7e9738213416483c6cd45e6d3c00d71753ccca7967d5aa",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-modules-commands-metrics-metrics-summary",
          "summary": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u0443\u044e \u0441\u0432\u043e\u0434\u043a\u0443 \u043c\u0435\u0442\u0440\u0438\u043a",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "get_metrics_tracker",
            "max",
            "tracker.get_session_summary",
            "print"
          ],
          "called_by": [
            "cmd_metrics"
          ]
        },
        {
          "name": "metrics_analytics",
          "docstring": "\u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435",
          "line_range": [
            68,
            104
          ],
          "parameters": [
            "output_file",
            "format"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.commands.metrics.metrics_analytics:68#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.commands",
            "llmstruct.modules.commands.metrics",
            "llmstruct.modules.commands.metrics.metrics_analytics:68"
          ],
          "hash": "22669256fc52a06e7777c2b47d4ddc5da5c685f7ef281b77c4488341cbaf29aa",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-modules-commands-metrics-metrics-analytics",
          "summary": "\u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "writer.writerow",
            "json.dumps",
            "time.strftime",
            "enumerate",
            "tracker.get_analytics_data",
            "get_metrics_tracker",
            "csv.writer",
            "json.dump",
            "open",
            "tracker.get_session_summary",
            "print"
          ],
          "called_by": [
            "cmd_metrics"
          ]
        },
        {
          "name": "metrics_report",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u0441\u0435\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u0439 \u043e\u0442\u0447\u0435\u0442",
          "line_range": [
            106,
            134
          ],
          "parameters": [
            "sessions",
            "output_file"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.commands.metrics.metrics_report:106#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.commands",
            "llmstruct.modules.commands.metrics",
            "llmstruct.modules.commands.metrics.metrics_report:106"
          ],
          "hash": "04815663759b47971637c826ca3f53adb3d6f2909f8af91316787abeb52e78b4",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-modules-commands-metrics-metrics-report",
          "summary": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u0441\u0435\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u0439 \u043e\u0442\u0447\u0435\u0442",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "len",
            "time.strftime",
            "sum",
            "tracker.get_analytics_data",
            "min",
            "get_metrics_tracker",
            "f.write",
            "analytics.get",
            "open",
            "print"
          ],
          "called_by": [
            "cmd_metrics"
          ]
        },
        {
          "name": "metrics_track",
          "docstring": "\u0420\u0443\u0447\u043d\u043e\u0435 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u0439",
          "line_range": [
            136,
            145
          ],
          "parameters": [
            "event_type",
            "details"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.commands.metrics.metrics_track:136#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.commands",
            "llmstruct.modules.commands.metrics",
            "llmstruct.modules.commands.metrics.metrics_track:136"
          ],
          "hash": "6ff80ae3b85d0dc81f217625f1ca1139e27d8e5479bfe1acc1b1fe3cf2b9a99b",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-modules-commands-metrics-metrics-track",
          "summary": "\u0420\u0443\u0447\u043d\u043e\u0435 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u0439",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "track_workflow_event",
            "print"
          ],
          "called_by": [
            "cmd_metrics"
          ]
        },
        {
          "name": "metrics_tokens",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u0443\u044e \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u0442\u043e\u043a\u0435\u043d\u043e\u0432",
          "line_range": [
            147,
            185
          ],
          "parameters": [],
          "decorators": [],
          "uid": "llmstruct.modules.commands.metrics.metrics_tokens:147#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.commands",
            "llmstruct.modules.commands.metrics",
            "llmstruct.modules.commands.metrics.metrics_tokens:147"
          ],
          "hash": "7475fb266e46e8577d9d3d935b3b1be8273e54dd91152baa8a7aaba229d8cf94",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-modules-commands-metrics-metrics-tokens",
          "summary": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u0443\u044e \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u0442\u043e\u043a\u0435\u043d\u043e\u0432",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "enumerate",
            "summary.get",
            "get_token_summary",
            "get_metrics_tracker",
            "interaction.get",
            "print"
          ],
          "called_by": [
            "cmd_metrics"
          ]
        },
        {
          "name": "cmd_metrics",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0430\u043c\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            187,
            205
          ],
          "parameters": [
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.commands.metrics.cmd_metrics:187#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.commands",
            "llmstruct.modules.commands.metrics",
            "llmstruct.modules.commands.metrics.cmd_metrics:187"
          ],
          "hash": "e0b10c860dfe6ec367c7422114ada3c7f8063bd7b1ac2deecc4e90827783a8b9",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-modules-commands-metrics-cmd-metrics",
          "summary": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0430\u043c\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "public"
          ],
          "calls": [
            "metrics_analytics",
            "metrics_summary",
            "metrics_report",
            "metrics_status",
            "metrics_tokens",
            "metrics_track",
            "print"
          ],
          "called_by": []
        }
      ],
      "classes": [],
      "callgraph": {
        "metrics_status": [
          "get_metrics_tracker",
          "tracker.get_session_summary",
          "print"
        ],
        "metrics_summary": [
          "get_metrics_tracker",
          "max",
          "tracker.get_session_summary",
          "print"
        ],
        "metrics_analytics": [
          "writer.writerow",
          "json.dumps",
          "time.strftime",
          "enumerate",
          "tracker.get_analytics_data",
          "get_metrics_tracker",
          "csv.writer",
          "json.dump",
          "open",
          "tracker.get_session_summary",
          "print"
        ],
        "metrics_report": [
          "len",
          "time.strftime",
          "sum",
          "tracker.get_analytics_data",
          "min",
          "get_metrics_tracker",
          "f.write",
          "analytics.get",
          "open",
          "print"
        ],
        "metrics_track": [
          "track_workflow_event",
          "print"
        ],
        "metrics_tokens": [
          "enumerate",
          "summary.get",
          "get_token_summary",
          "get_metrics_tracker",
          "interaction.get",
          "print"
        ],
        "cmd_metrics": [
          "metrics_analytics",
          "metrics_summary",
          "metrics_report",
          "metrics_status",
          "metrics_tokens",
          "metrics_track",
          "print"
        ]
      },
      "dependencies": [
        "csv",
        "get_metrics_tracker",
        "get_token_summary",
        "json",
        "llmstruct.metrics_tracker",
        "time",
        "track_workflow_event"
      ],
      "hash": "f3cdbecb744fbdb29ca949fe874d201a44bc014625127b14d500e5828dc11e54",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.modules.commands.metrics.llmstruct.modules.commands.metrics#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.modules",
        "llmstruct.modules.commands",
        "llmstruct.modules.commands.metrics",
        "llmstruct.modules.commands.metrics.llmstruct.modules.commands.metrics"
      ],
      "summary": "Module for llmstruct modules commands metrics",
      "summary_source": "heuristic",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "cabf1403-a7bb-42d2-9ac0-c461820d97b9"
    },
    {
      "module_id": "llmstruct.modules.commands.services",
      "path": "llmstruct/modules/commands/services.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "add_api_bot_commands",
          "docstring": "\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f API \u0438 Bot \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438",
          "line_range": [
            10,
            47
          ],
          "parameters": [
            "subparsers"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.commands.services.add_api_bot_commands:10#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.commands",
            "llmstruct.modules.commands.services",
            "llmstruct.modules.commands.services.add_api_bot_commands:10"
          ],
          "hash": "7aa7e28cd7de580c480438271b0f10c524dad6448bf7adbcdf9748611d427ed1",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-modules-commands-services-add-api-bot-commands",
          "summary": "\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f API \u0438 Bot \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "bot_subparsers.add_parser",
            "api_subparsers.add_parser",
            "services_parser.add_subparsers",
            "services_subparsers.add_parser",
            "metrics_parser.add_subparsers",
            "api_parser.add_subparsers",
            "metrics_analytics.add_argument",
            "subparsers.add_parser",
            "api_start.add_argument",
            "bot_start.add_argument",
            "metrics_subparsers.add_parser",
            "metrics_track.add_argument",
            "bot_parser.add_subparsers",
            "metrics_report.add_argument"
          ],
          "called_by": []
        },
        {
          "name": "cmd_api_management",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 API \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c",
          "line_range": [
            49,
            111
          ],
          "parameters": [
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.commands.services.cmd_api_management:49#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.commands",
            "llmstruct.modules.commands.services",
            "llmstruct.modules.commands.services.cmd_api_management:49"
          ],
          "hash": "b5dc8634e481dc1bac4861d3020cfc12f669abe523751af5ab92dbd32ec95b1a",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-modules-commands-services-cmd-api-management",
          "summary": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 API \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "public"
          ],
          "calls": [
            "process.wait",
            "int",
            "str",
            "f.read",
            "pid_file.exists",
            "requests.post",
            "response.json",
            "psutil.Process",
            "requests.get",
            "data.get",
            "process.terminate",
            "venv_path.exists",
            "Path",
            "f.write",
            "pid_file.unlink",
            "open",
            "subprocess.Popen",
            "print"
          ],
          "called_by": [
            "cmd_services"
          ]
        },
        {
          "name": "cmd_bot_management",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 Telegram \u0431\u043e\u0442\u0430\u043c\u0438",
          "line_range": [
            113,
            190
          ],
          "parameters": [
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.commands.services.cmd_bot_management:113#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.commands",
            "llmstruct.modules.commands.services",
            "llmstruct.modules.commands.services.cmd_bot_management:113"
          ],
          "hash": "cdf14e241859567316755fafc2b0baf4eb9545964b3d2d8fcbbf4c235e7348e3",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-modules-commands-services-cmd-bot-management",
          "summary": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 Telegram \u0431\u043e\u0442\u0430\u043c\u0438",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "public"
          ],
          "calls": [
            "os.getenv",
            "process.wait",
            "str",
            "int",
            "f.read",
            "pid_file.exists",
            "bot_scripts.get",
            "psutil.Process",
            "process.terminate",
            "f.write",
            "Path",
            "process.is_running",
            "active_bots.append",
            "pid_file.unlink",
            "open",
            "subprocess.Popen",
            "print"
          ],
          "called_by": [
            "cmd_services"
          ]
        },
        {
          "name": "cmd_services",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u043c\u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438 (API + Bots)",
          "line_range": [
            192,
            233
          ],
          "parameters": [
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.commands.services.cmd_services:192#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.commands",
            "llmstruct.modules.commands.services",
            "llmstruct.modules.commands.services.cmd_services:192"
          ],
          "hash": "df56eef293e4f407c6914b4e3a4e01a79a4010d3b84677224986b3d59c7318b8",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-modules-commands-services-cmd-services",
          "summary": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u043c\u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438 (API + Bots)",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "public"
          ],
          "calls": [
            "cmd_api_management",
            "type",
            "cmd_bot_management",
            "time.sleep",
            "print"
          ],
          "called_by": []
        }
      ],
      "classes": [],
      "callgraph": {
        "add_api_bot_commands": [
          "bot_subparsers.add_parser",
          "api_subparsers.add_parser",
          "services_parser.add_subparsers",
          "services_subparsers.add_parser",
          "metrics_parser.add_subparsers",
          "api_parser.add_subparsers",
          "metrics_analytics.add_argument",
          "subparsers.add_parser",
          "api_start.add_argument",
          "bot_start.add_argument",
          "metrics_subparsers.add_parser",
          "metrics_track.add_argument",
          "bot_parser.add_subparsers",
          "metrics_report.add_argument"
        ],
        "cmd_api_management": [
          "process.wait",
          "int",
          "str",
          "f.read",
          "pid_file.exists",
          "requests.post",
          "response.json",
          "psutil.Process",
          "requests.get",
          "data.get",
          "process.terminate",
          "venv_path.exists",
          "Path",
          "f.write",
          "pid_file.unlink",
          "open",
          "subprocess.Popen",
          "print"
        ],
        "cmd_bot_management": [
          "os.getenv",
          "process.wait",
          "str",
          "int",
          "f.read",
          "pid_file.exists",
          "bot_scripts.get",
          "psutil.Process",
          "process.terminate",
          "f.write",
          "Path",
          "process.is_running",
          "active_bots.append",
          "pid_file.unlink",
          "open",
          "subprocess.Popen",
          "print"
        ],
        "cmd_services": [
          "cmd_api_management",
          "type",
          "cmd_bot_management",
          "time.sleep",
          "print"
        ]
      },
      "dependencies": [
        "Path",
        "os",
        "pathlib",
        "psutil",
        "requests",
        "signal",
        "subprocess",
        "time"
      ],
      "hash": "96ca731ade5a7043ea0459124cc364e27740657bccffde74544182d938e57d98",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.modules.commands.services.llmstruct.modules.commands.services#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.modules",
        "llmstruct.modules.commands",
        "llmstruct.modules.commands.services",
        "llmstruct.modules.commands.services.llmstruct.modules.commands.services"
      ],
      "summary": "Module for llmstruct modules commands services",
      "summary_source": "heuristic",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "ba4c00cb-56e4-4fda-ba80-5bc8bbe66c3c"
    },
    {
      "module_id": "llmstruct.modules.commands.__init__",
      "path": "llmstruct/modules/commands/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "36a9e7f1c95b82ffb99743e0c5c4ce95d83c9a430aac59f84ef3cbfab6145068",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.modules.commands.__init__.llmstruct.modules.commands.__init__#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.modules",
        "llmstruct.modules.commands",
        "llmstruct.modules.commands.__init__",
        "llmstruct.modules.commands.__init__.llmstruct.modules.commands.__init__"
      ],
      "summary": "Module for llmstruct.modules.commands. init",
      "summary_source": "heuristic",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "4105e051-5408-4037-afb1-af4eaf2dcce9"
    },
    {
      "module_id": "llmstruct.modules.commands.queue",
      "path": "llmstruct/modules/commands/queue.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "process_cli_queue_enhanced",
          "docstring": "Enhanced queue processing with workflow support, performance tracking, and safety validation.",
          "line_range": [
            9,
            208
          ],
          "parameters": [
            "root_dir",
            "context_path",
            "args",
            "cache",
            "client"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.commands.queue.process_cli_queue_enhanced:9#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.commands",
            "llmstruct.modules.commands.queue",
            "llmstruct.modules.commands.queue.process_cli_queue_enhanced:9"
          ],
          "hash": "d68410f894092abdca6271bf2d1b28c6f07a1467d24ff14e5d6945b34c15e214",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-modules-commands-queue-process-cli-queue-enhanced",
          "summary": "Enhanced queue processing with workflow support, performance tracking, and safety validation.",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "public"
          ],
          "calls": [
            "len",
            "enumerate",
            "options.get",
            "get_folder_structure",
            "load_gitignore",
            "client.query",
            "write_to_file",
            "workflow.get",
            "item.get",
            "logging.info",
            "json.load",
            "time.time",
            "read_file_content",
            "print",
            "attach_to_llm_request",
            "open",
            "isinstance",
            "logging.error"
          ],
          "called_by": []
        }
      ],
      "classes": [],
      "callgraph": {
        "process_cli_queue_enhanced": [
          "len",
          "enumerate",
          "options.get",
          "get_folder_structure",
          "load_gitignore",
          "client.query",
          "write_to_file",
          "workflow.get",
          "item.get",
          "logging.info",
          "json.load",
          "time.time",
          "read_file_content",
          "print",
          "attach_to_llm_request",
          "open",
          "isinstance",
          "logging.error"
        ]
      },
      "dependencies": [
        "attach_to_llm_request",
        "get_folder_structure",
        "json",
        "llmstruct.generators.json_generator",
        "llmstruct.modules.cli.utils",
        "llmstruct.self_run",
        "load_gitignore",
        "logging",
        "os",
        "read_file_content",
        "time",
        "write_to_file"
      ],
      "hash": "93ea2acd1be91706282b474b0d3d20881d6894688201c8b0acd0ee1f7266b285",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.modules.commands.queue.llmstruct.modules.commands.queue#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.modules",
        "llmstruct.modules.commands",
        "llmstruct.modules.commands.queue",
        "llmstruct.modules.commands.queue.llmstruct.modules.commands.queue"
      ],
      "summary": "Module for llmstruct modules commands queue",
      "summary_source": "heuristic",
      "tags": [
        "async",
        "module",
        "public"
      ],
      "artifact_id": "6bd7a24b-2c91-4992-8be7-7de50b724075"
    },
    {
      "module_id": "llmstruct.modules.cli.audit",
      "path": "llmstruct/modules/cli/audit.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "audit",
          "docstring": "Audit project structure and generate reports.",
          "line_range": [
            4,
            17
          ],
          "parameters": [
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.audit.audit:4#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.audit",
            "llmstruct.modules.cli.audit.audit:4"
          ],
          "hash": "89c5abf97d178a5a83171733e515eaadd8c0555b2c8f41f58e4998084bb9a110",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-modules-cli-audit-audit",
          "summary": "Audit project structure and generate reports.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "file_path.exists",
            "Path",
            "hasattr",
            "analyze_duplicates",
            "print"
          ],
          "called_by": []
        }
      ],
      "classes": [],
      "callgraph": {
        "audit": [
          "file_path.exists",
          "Path",
          "hasattr",
          "analyze_duplicates",
          "print"
        ]
      },
      "dependencies": [
        "Path",
        "analyze_duplicates",
        "llmstruct.cli",
        "os",
        "pathlib"
      ],
      "hash": "2db7989b347f40218b0105a07e15164e4fa869ecf87fe977e929a36ad7b90179",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.modules.cli.audit.llmstruct.modules.cli.audit#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.modules",
        "llmstruct.modules.cli",
        "llmstruct.modules.cli.audit",
        "llmstruct.modules.cli.audit.llmstruct.modules.cli.audit"
      ],
      "summary": "Module for llmstruct modules cli audit",
      "summary_source": "heuristic",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "4aa56233-e376-461b-b272-a726b2681597"
    },
    {
      "module_id": "llmstruct.modules.cli.utils",
      "path": "llmstruct/modules/cli/utils.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": [
            6,
            20
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.utils.load_gitignore:6#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.utils",
            "llmstruct.modules.cli.utils.load_gitignore:6"
          ],
          "hash": "91a11d72c8a7d9754d0424746dbf2e7feec0369d23bdd8ad42251d5ba24490f3",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-modules-cli-utils-load-gitignore",
          "summary": "Load and normalize patterns from .gitignore.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "line.startswith",
            "line.strip",
            "gitignore_path.exists",
            "gitignore_path.open",
            "Path",
            "logging.error"
          ],
          "called_by": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from llmstruct.toml or return empty dict.",
          "line_range": [
            22,
            32
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.utils.load_config:22#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.utils",
            "llmstruct.modules.cli.utils.load_config:22"
          ],
          "hash": "7c0d27e637a8fa6eea95576359b17f4d56086ed958863ab46cb2b5f9272d9a32",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-modules-cli-utils-load-config",
          "summary": "Load settings from llmstruct.toml or return empty dict.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "config_path.open",
            "toml.load",
            "config_path.exists",
            "Path",
            "logging.error"
          ],
          "called_by": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": [
            34,
            43
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.utils.read_file_content:34#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.utils",
            "llmstruct.modules.cli.utils.read_file_content:34"
          ],
          "hash": "6c4641deb205e047f72d068ad72b782f0d5a9d7c737b3016ccf2f5f89e008bf8",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-modules-cli-utils-read-file-content",
          "summary": "Read content of a file if it exists and is a text file.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "f.read",
            "path.is_file",
            "Path",
            "path.open",
            "logging.error"
          ],
          "called_by": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default ./tmp) and return the path.",
          "line_range": [
            45,
            63
          ],
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.utils.write_to_file:45#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.utils",
            "llmstruct.modules.cli.utils.write_to_file:45"
          ],
          "hash": "b4c03140917f22d8a4346b485e4dc8c8e6c5367ebdbfba4bfb32bc1f2f70d4e7",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-modules-cli-utils-write-to-file",
          "summary": "Write content to a file in base_dir (default ./tmp) and return the path.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "str",
            "re.sub",
            "file_path.exists",
            "logging.warning",
            "file_path.open",
            "base_path.mkdir",
            "logging.info",
            "f.write",
            "Path",
            "logging.error"
          ],
          "called_by": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": [
            65,
            72
          ],
          "parameters": [
            "response"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.utils.parse_files_from_response:65#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.utils",
            "llmstruct.modules.cli.utils.parse_files_from_response:65"
          ],
          "hash": "f8120a3475717915bffe8458bcb097596608dff960675060358ceb732e546a31",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-modules-cli-utils-parse-files-from-response",
          "summary": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "filename.strip",
            "content.strip",
            "re.findall",
            "files.append"
          ],
          "called_by": []
        },
        {
          "name": "get_cache_config",
          "docstring": "",
          "line_range": [
            74,
            75
          ],
          "parameters": [
            "config"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.utils.get_cache_config:74#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.utils",
            "llmstruct.modules.cli.utils.get_cache_config:74"
          ],
          "hash": "46c8bf1e5b78fe7ce20a8b40db0fb751e5eac29134dcd83edf6520c1cac57636",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-modules-cli-utils-get-cache-config",
          "summary": "Retrieves cache config",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "config.get"
          ],
          "called_by": []
        },
        {
          "name": "get_copilot_config",
          "docstring": "",
          "line_range": [
            77,
            78
          ],
          "parameters": [
            "config"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.utils.get_copilot_config:77#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.utils",
            "llmstruct.modules.cli.utils.get_copilot_config:77"
          ],
          "hash": "35b5aa8d776b457fe142ff4a93b313b5e91997815f784b31f8a6b4e0f9cf3f24",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-modules-cli-utils-get-copilot-config",
          "summary": "Retrieves copilot config",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "config.get"
          ],
          "called_by": []
        },
        {
          "name": "get_queue_config",
          "docstring": "",
          "line_range": [
            80,
            81
          ],
          "parameters": [
            "config"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.utils.get_queue_config:80#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.utils",
            "llmstruct.modules.cli.utils.get_queue_config:80"
          ],
          "hash": "b0ff60708c2dbc4d7dc6b7d6c547235390412c90efa8f86f76680f4a1285b500",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-modules-cli-utils-get-queue-config",
          "summary": "Retrieves queue config",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "config.get"
          ],
          "called_by": []
        },
        {
          "name": "get_context_config",
          "docstring": "",
          "line_range": [
            83,
            84
          ],
          "parameters": [
            "config"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.utils.get_context_config:83#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.utils",
            "llmstruct.modules.cli.utils.get_context_config:83"
          ],
          "hash": "7bb42335281eec0728765ac20f5d904209a72048ecf68d9bc05b9829707e50de",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-modules-cli-utils-get-context-config",
          "summary": "Retrieves context config",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "config.get"
          ],
          "called_by": []
        },
        {
          "name": "get_exclude_dirs",
          "docstring": "",
          "line_range": [
            86,
            93
          ],
          "parameters": [
            "config"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.utils.get_exclude_dirs:86#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.utils",
            "llmstruct.modules.cli.utils.get_exclude_dirs:86"
          ],
          "hash": "224f24cad41c7f27dbadb8fa28036fe3e39d9c2b3093e4ebd92501749bf0db92",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-modules-cli-utils-get-exclude-dirs",
          "summary": "Retrieves exclude dirs",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "list",
            "cli_config.get",
            "set",
            "config.get",
            "parsing_config.get"
          ],
          "called_by": []
        },
        {
          "name": "get_include_patterns",
          "docstring": "",
          "line_range": [
            95,
            98
          ],
          "parameters": [
            "config"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.utils.get_include_patterns:95#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.utils",
            "llmstruct.modules.cli.utils.get_include_patterns:95"
          ],
          "hash": "46964f5605ef89a96a3e5b4e4ca5f60e477abd59faef374bdfee9e3af39c8753",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-modules-cli-utils-get-include-patterns",
          "summary": "Retrieves include patterns",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "cli_config.get",
            "config.get",
            "parsing_config.get"
          ],
          "called_by": []
        },
        {
          "name": "get_exclude_patterns",
          "docstring": "",
          "line_range": [
            100,
            103
          ],
          "parameters": [
            "config"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.utils.get_exclude_patterns:100#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.utils",
            "llmstruct.modules.cli.utils.get_exclude_patterns:100"
          ],
          "hash": "7ef78a95773da2e8fc2d470184f2ac6ef3879d91269e5d2dbc4e97b809be3942",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-modules-cli-utils-get-exclude-patterns",
          "summary": "Retrieves exclude patterns",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "cli_config.get",
            "config.get",
            "parsing_config.get"
          ],
          "called_by": []
        },
        {
          "name": "get_max_file_size",
          "docstring": "",
          "line_range": [
            105,
            106
          ],
          "parameters": [
            "config"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.utils.get_max_file_size:105#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.utils",
            "llmstruct.modules.cli.utils.get_max_file_size:105"
          ],
          "hash": "0251d4cb63f805d76cd8d4ae8180ab1cc721e5d6f05730d908a242e364bc940c",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-modules-cli-utils-get-max-file-size",
          "summary": "Retrieves max file size",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "config.get"
          ],
          "called_by": []
        },
        {
          "name": "get_struct_file_path",
          "docstring": "",
          "line_range": [
            108,
            109
          ],
          "parameters": [
            "config"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.utils.get_struct_file_path:108#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.utils",
            "llmstruct.modules.cli.utils.get_struct_file_path:108"
          ],
          "hash": "da9a84a4c3d8820bba7916bb3bedebd1f3a0726212696af4f631bc9cb8d1497e",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-modules-cli-utils-get-struct-file-path",
          "summary": "Retrieves struct file path",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "config.get"
          ],
          "called_by": []
        },
        {
          "name": "get_context_file_path",
          "docstring": "",
          "line_range": [
            111,
            112
          ],
          "parameters": [
            "config"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.utils.get_context_file_path:111#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.utils",
            "llmstruct.modules.cli.utils.get_context_file_path:111"
          ],
          "hash": "5d538c8d61cd6a4fdd8ef9fc0ff3129095b1222de7f523fb4ce4cca501617825",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-modules-cli-utils-get-context-file-path",
          "summary": "Retrieves context file path",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "config.get"
          ],
          "called_by": []
        },
        {
          "name": "save_config",
          "docstring": "",
          "line_range": [
            114,
            121
          ],
          "parameters": [
            "config",
            "root_dir"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.utils.save_config:114#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.utils",
            "llmstruct.modules.cli.utils.save_config:114"
          ],
          "hash": "67382b859eb9301c7a271df794891c97c0548f9869bcdd0f0725de26be4de700",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-modules-cli-utils-save-config",
          "summary": "Function for save config",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "config_path.open",
            "toml.dump",
            "Path",
            "logging.error"
          ],
          "called_by": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "line.startswith",
          "line.strip",
          "gitignore_path.exists",
          "gitignore_path.open",
          "Path",
          "logging.error"
        ],
        "load_config": [
          "config_path.open",
          "toml.load",
          "config_path.exists",
          "Path",
          "logging.error"
        ],
        "read_file_content": [
          "f.read",
          "path.is_file",
          "Path",
          "path.open",
          "logging.error"
        ],
        "write_to_file": [
          "str",
          "re.sub",
          "file_path.exists",
          "logging.warning",
          "file_path.open",
          "base_path.mkdir",
          "logging.info",
          "f.write",
          "Path",
          "logging.error"
        ],
        "parse_files_from_response": [
          "filename.strip",
          "content.strip",
          "re.findall",
          "files.append"
        ],
        "get_cache_config": [
          "config.get"
        ],
        "get_copilot_config": [
          "config.get"
        ],
        "get_queue_config": [
          "config.get"
        ],
        "get_context_config": [
          "config.get"
        ],
        "get_exclude_dirs": [
          "list",
          "cli_config.get",
          "set",
          "config.get",
          "parsing_config.get"
        ],
        "get_include_patterns": [
          "cli_config.get",
          "config.get",
          "parsing_config.get"
        ],
        "get_exclude_patterns": [
          "cli_config.get",
          "config.get",
          "parsing_config.get"
        ],
        "get_max_file_size": [
          "config.get"
        ],
        "get_struct_file_path": [
          "config.get"
        ],
        "get_context_file_path": [
          "config.get"
        ],
        "save_config": [
          "config_path.open",
          "toml.dump",
          "Path",
          "logging.error"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "logging",
        "pathlib",
        "re",
        "toml",
        "typing"
      ],
      "hash": "3f9f61b289dbdcbe85ccc89e60dd4e6a5a9a2cc31194ab9d0d8fe613fac51924",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.modules.cli.utils.llmstruct.modules.cli.utils#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.modules",
        "llmstruct.modules.cli",
        "llmstruct.modules.cli.utils",
        "llmstruct.modules.cli.utils.llmstruct.modules.cli.utils"
      ],
      "summary": "Module for llmstruct modules cli utils",
      "summary_source": "heuristic",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "90b4ccc6-e39f-4648-9ccc-89e9f2a105ac"
    },
    {
      "module_id": "llmstruct.modules.cli.dogfood",
      "path": "llmstruct/modules/cli/dogfood.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": [
            3,
            5
          ],
          "parameters": [
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.dogfood.dogfood:3#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.dogfood",
            "llmstruct.modules.cli.dogfood.dogfood:3"
          ],
          "hash": "74c8fc056be0a33122d1c1276bec0b7406e6e81a504455620b59d9ad65f7d1ee",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-modules-cli-dogfood-dogfood",
          "summary": "Run dogfooding analysis.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "logging.warning"
          ],
          "called_by": []
        }
      ],
      "classes": [],
      "callgraph": {
        "dogfood": [
          "logging.warning"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": "18989e9381a3f9872468dfd93602c7b12cbe7cb740a402dda2711c7c98bb3a98",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.modules.cli.dogfood.llmstruct.modules.cli.dogfood#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.modules",
        "llmstruct.modules.cli",
        "llmstruct.modules.cli.dogfood",
        "llmstruct.modules.cli.dogfood.llmstruct.modules.cli.dogfood"
      ],
      "summary": "Module for llmstruct modules cli dogfood",
      "summary_source": "heuristic",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "71226735-0947-4b05-aaf1-7d8412d86203"
    },
    {
      "module_id": "llmstruct.modules.cli.handlers_legacy",
      "path": "llmstruct/modules/cli/handlers_legacy.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "interactive_legacy",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": [
            14,
            149
          ],
          "parameters": [
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.handlers_legacy.interactive_legacy:14#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.handlers_legacy",
            "llmstruct.modules.cli.handlers_legacy.interactive_legacy:14"
          ],
          "hash": "79be658d073b50f1203cbc344c19320604022f883583fbfae492037a645140c3",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-modules-cli-handlers-legacy-interactive-legacy",
          "summary": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "public"
          ],
          "calls": [
            "json.dumps",
            "get_folder_structure",
            "input",
            "client.query",
            "logging.error",
            "m.group",
            "parse",
            "JSONCache",
            "read_file_content",
            "sorted",
            "os.listdir",
            "re.match",
            "cache.close",
            "user_input.lower",
            "LLMClient",
            "load_gitignore",
            "user_input.startswith",
            "print",
            "logging.warning",
            "write_to_file",
            "Path",
            "attach_to_llm_request",
            "args_str.strip"
          ],
          "called_by": []
        }
      ],
      "classes": [],
      "callgraph": {
        "interactive_legacy": [
          "json.dumps",
          "get_folder_structure",
          "input",
          "client.query",
          "logging.error",
          "m.group",
          "parse",
          "JSONCache",
          "read_file_content",
          "sorted",
          "os.listdir",
          "re.match",
          "cache.close",
          "user_input.lower",
          "LLMClient",
          "load_gitignore",
          "user_input.startswith",
          "print",
          "logging.warning",
          "write_to_file",
          "Path",
          "attach_to_llm_request",
          "args_str.strip"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "Path",
        "attach_to_llm_request",
        "get_folder_structure",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.cli",
        "llmstruct.generators.json_generator",
        "llmstruct.modules.cli.utils",
        "llmstruct.self_run",
        "load_gitignore",
        "logging",
        "os",
        "parse",
        "pathlib",
        "re",
        "read_file_content",
        "time",
        "write_to_file"
      ],
      "hash": "3676e871a4d165bc1a661bc3791663f9127c614086610286e69f1ddb1674c68e",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.modules.cli.handlers_legacy.llmstruct.modules.cli.handlers_legacy#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.modules",
        "llmstruct.modules.cli",
        "llmstruct.modules.cli.handlers_legacy",
        "llmstruct.modules.cli.handlers_legacy.llmstruct.modules.cli.handlers_legacy"
      ],
      "summary": "Module for llmstruct.modules.cli.handlers legacy",
      "summary_source": "heuristic",
      "tags": [
        "async",
        "module",
        "public"
      ],
      "artifact_id": "2efcc925-704c-4a6b-9af0-5d83ae43982e"
    },
    {
      "module_id": "llmstruct.modules.cli.analyze_duplicates",
      "path": "llmstruct/modules/cli/analyze_duplicates.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "analyze_duplicates",
          "docstring": "Analyze function duplication using struct.json deep analysis.",
          "line_range": [
            1,
            81
          ],
          "parameters": [
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.analyze_duplicates.analyze_duplicates:1#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.analyze_duplicates",
            "llmstruct.modules.cli.analyze_duplicates.analyze_duplicates:1"
          ],
          "hash": "fa04a3e02e210b59029b9112ff9f8874b1d358018bac09470d10b8ca0cb86937",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-modules-cli-analyze-duplicates-analyze-duplicates",
          "summary": "Analyze function duplication using struct.json deep analysis.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "json.dumps",
            "duplicates.items",
            "WorkflowOrchestrator",
            "len",
            "rec.get",
            "enumerate",
            "traceback.print_exc",
            "orchestrator.analyze_codebase_for_duplicates",
            "duplication_data.get",
            "sorted",
            "getattr",
            "json.dump",
            "r.get",
            "hasattr",
            "analysis.get",
            "filtered_duplicates.items",
            "open",
            "print"
          ],
          "called_by": []
        }
      ],
      "classes": [],
      "callgraph": {
        "analyze_duplicates": [
          "json.dumps",
          "duplicates.items",
          "WorkflowOrchestrator",
          "len",
          "rec.get",
          "enumerate",
          "traceback.print_exc",
          "orchestrator.analyze_codebase_for_duplicates",
          "duplication_data.get",
          "sorted",
          "getattr",
          "json.dump",
          "r.get",
          "hasattr",
          "analysis.get",
          "filtered_duplicates.items",
          "open",
          "print"
        ]
      },
      "dependencies": [
        "WorkflowOrchestrator",
        "json",
        "llmstruct.workflow_orchestrator",
        "traceback"
      ],
      "hash": "d9c98a76c4920b3bfe62a812811aa9edf7158fa6d307eecd1235c4a2d93f146c",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.modules.cli.analyze_duplicates.llmstruct.modules.cli.analyze_duplicates#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.modules",
        "llmstruct.modules.cli",
        "llmstruct.modules.cli.analyze_duplicates",
        "llmstruct.modules.cli.analyze_duplicates.llmstruct.modules.cli.analyze_duplicates"
      ],
      "summary": "Module for llmstruct.modules.cli.analyze duplicates",
      "summary_source": "heuristic",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "d7718778-d41a-456c-9def-6ed3b7e7aa97"
    },
    {
      "module_id": "llmstruct.modules.cli.__init__",
      "path": "llmstruct/modules/cli/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "36a9e7f1c95b82ffb99743e0c5c4ce95d83c9a430aac59f84ef3cbfab6145068",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.modules.cli.__init__.llmstruct.modules.cli.__init__#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.modules",
        "llmstruct.modules.cli",
        "llmstruct.modules.cli.__init__",
        "llmstruct.modules.cli.__init__.llmstruct.modules.cli.__init__"
      ],
      "summary": "Module for llmstruct.modules.cli. init",
      "summary_source": "heuristic",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "b4fc3f15-c85b-4a21-9e12-21f4c88cddd7"
    },
    {
      "module_id": "llmstruct.modules.cli.review",
      "path": "llmstruct/modules/cli/review.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": [
            3,
            5
          ],
          "parameters": [
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.review.review:3#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.review",
            "llmstruct.modules.cli.review.review:3"
          ],
          "hash": "ecefa9a7de23c921651c3ca2521eb84576aa734b46a1f552f49e435875a72e55",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-modules-cli-review-review",
          "summary": "Review codebase with LLM.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "logging.warning"
          ],
          "called_by": []
        }
      ],
      "classes": [],
      "callgraph": {
        "review": [
          "logging.warning"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": "1065196bb1074e1f669c0973da53285a04a2ab62d7462e97dfed418488d4a451",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.modules.cli.review.llmstruct.modules.cli.review#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.modules",
        "llmstruct.modules.cli",
        "llmstruct.modules.cli.review",
        "llmstruct.modules.cli.review.llmstruct.modules.cli.review"
      ],
      "summary": "Module for llmstruct modules cli review",
      "summary_source": "heuristic",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "f4b3cf2c-053c-40f5-8d8d-8c3dc9058e51"
    },
    {
      "module_id": "llmstruct.modules.cli.context",
      "path": "llmstruct/modules/cli/context.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": [
            3,
            5
          ],
          "parameters": [
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.context.context:3#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.context",
            "llmstruct.modules.cli.context.context:3"
          ],
          "hash": "623bfaa393d7cc1c8fb6ddf6b686d26e007b50e4d60a5639629885b852fce82a",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-modules-cli-context-context",
          "summary": "Generate context.json from input JSON.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "logging.warning"
          ],
          "called_by": []
        }
      ],
      "classes": [],
      "callgraph": {
        "context": [
          "logging.warning"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": "2eaa01d2531e7fab1705f319c2b166013a6c19186010ee7b126e5e8396dd4699",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.modules.cli.context.llmstruct.modules.cli.context#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.modules",
        "llmstruct.modules.cli",
        "llmstruct.modules.cli.context",
        "llmstruct.modules.cli.context.llmstruct.modules.cli.context"
      ],
      "summary": "Module for llmstruct modules cli context",
      "summary_source": "heuristic",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "bcbe07b2-edbc-4789-b07a-17e42d476ade"
    },
    {
      "module_id": "llmstruct.modules.cli.query",
      "path": "llmstruct/modules/cli/query.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": [
            8,
            64
          ],
          "parameters": [
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.query.query:8#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.query",
            "llmstruct.modules.cli.query.query:8"
          ],
          "hash": "9e6e38c137d3ea1b0b3089faec14dbb4dbb30a9469e21b5cf2d3ad83cb04c48d",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-modules-cli-query-query",
          "summary": "Query LLMs with prompt and context.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "cache.close",
            "orchestrator.get_context_for_scenario",
            "LLMClient",
            "JSONCache",
            "client.query_with_context",
            "logging.warning",
            "client.query",
            "logging.info",
            "json.dump",
            "Path",
            "hasattr",
            "create_context_orchestrator",
            "logging.error"
          ],
          "called_by": []
        }
      ],
      "classes": [],
      "callgraph": {
        "query": [
          "cache.close",
          "orchestrator.get_context_for_scenario",
          "LLMClient",
          "JSONCache",
          "client.query_with_context",
          "logging.warning",
          "client.query",
          "logging.info",
          "json.dump",
          "Path",
          "hasattr",
          "create_context_orchestrator",
          "logging.error"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "Path",
        "create_context_orchestrator",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.context_orchestrator",
        "logging",
        "os",
        "pathlib"
      ],
      "hash": "aebf4b74c71a6845676877cbd60f5530d3afab38fa6ccec41c114e158cb0f614",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.modules.cli.query.llmstruct.modules.cli.query#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.modules",
        "llmstruct.modules.cli",
        "llmstruct.modules.cli.query",
        "llmstruct.modules.cli.query.llmstruct.modules.cli.query"
      ],
      "summary": "Module for llmstruct modules cli query",
      "summary_source": "heuristic",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "f262c0cb-60b4-4f7f-80bf-1f44e0e35dae"
    },
    {
      "module_id": "llmstruct.modules.cli.copilot",
      "path": "llmstruct/modules/cli/copilot.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "copilot",
          "docstring": "Copilot integration and context management.",
          "line_range": [
            5,
            113
          ],
          "parameters": [
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.copilot.copilot:5#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.copilot",
            "llmstruct.modules.cli.copilot.copilot:5"
          ],
          "hash": "5dd7c89f49f08508f5dbb6e1164d86e79026a09d907896c772e50a54872ac543",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-modules-cli-copilot-copilot",
          "summary": "Copilot integration and context management.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "enumerate",
            "getattr",
            "open",
            "logging.error",
            "manager.refresh_all_contexts",
            "manager.load_context_layer",
            "manager.get_context_status",
            "shutil.copy",
            "manager.export_context",
            "logging.info",
            "config_path.exists",
            "manager.unload_context_layer",
            "manager.validate_change",
            "f.write",
            "hasattr",
            "smart_suggest",
            "print",
            "manager.close",
            "Path",
            "layers.split",
            "initialize_copilot",
            "template_path.exists"
          ],
          "called_by": []
        }
      ],
      "classes": [],
      "callgraph": {
        "copilot": [
          "enumerate",
          "getattr",
          "open",
          "logging.error",
          "manager.refresh_all_contexts",
          "manager.load_context_layer",
          "manager.get_context_status",
          "shutil.copy",
          "manager.export_context",
          "logging.info",
          "config_path.exists",
          "manager.unload_context_layer",
          "manager.validate_change",
          "f.write",
          "hasattr",
          "smart_suggest",
          "print",
          "manager.close",
          "Path",
          "layers.split",
          "initialize_copilot",
          "template_path.exists"
        ]
      },
      "dependencies": [
        "Path",
        "initialize_copilot",
        "llmstruct.copilot",
        "logging",
        "pathlib",
        "shutil",
        "smart_suggest"
      ],
      "hash": "7bc44c139d0fb9c7f3ae37544ef763d68cc55e4220c2e89d73d766801541f947",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.modules.cli.copilot.llmstruct.modules.cli.copilot#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.modules",
        "llmstruct.modules.cli",
        "llmstruct.modules.cli.copilot",
        "llmstruct.modules.cli.copilot.llmstruct.modules.cli.copilot"
      ],
      "summary": "Module for llmstruct modules cli copilot",
      "summary_source": "heuristic",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "5374749b-eff5-4085-8dfb-47081b124c43"
    },
    {
      "module_id": "llmstruct.modules.cli.parse",
      "path": "llmstruct/modules/cli/parse.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": [
            11,
            134
          ],
          "parameters": [
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.parse.parse:11#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.parse",
            "llmstruct.modules.cli.parse.parse:11"
          ],
          "hash": "c08334fca9e4c5b4918363db3ef75881806bf5ac88846a675c46a73ae56d6922",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-modules-cli-parse-parse",
          "summary": "Parse codebase and generate struct.json.",
          "summary_source": "docstring",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "cache.cache_json",
            "func.get",
            "config_manager.load_config",
            "load_config",
            "config_manager.get_config",
            "getattr",
            "generate_json",
            "module.get",
            "logging.error",
            "cli_config.get",
            "JSONCache",
            "save_index_json",
            "cache.close",
            "mod_dir.mkdir",
            "config.get",
            "logging.info",
            "struct_path.open",
            "json.dump",
            "hasattr",
            "ast_path.open",
            "parsing_config.get",
            "struct_data.get",
            "logging.warning",
            "Path",
            "get_config_manager"
          ],
          "called_by": []
        }
      ],
      "classes": [],
      "callgraph": {
        "parse": [
          "cache.cache_json",
          "func.get",
          "config_manager.load_config",
          "load_config",
          "config_manager.get_config",
          "getattr",
          "generate_json",
          "module.get",
          "logging.error",
          "cli_config.get",
          "JSONCache",
          "save_index_json",
          "cache.close",
          "mod_dir.mkdir",
          "config.get",
          "logging.info",
          "struct_path.open",
          "json.dump",
          "hasattr",
          "ast_path.open",
          "parsing_config.get",
          "struct_data.get",
          "logging.warning",
          "Path",
          "get_config_manager"
        ]
      },
      "dependencies": [
        "ConfigManager",
        "JSONCache",
        "Path",
        "generate_json",
        "get_config_manager",
        "json",
        "llmstruct.cache",
        "llmstruct.core.config_manager",
        "llmstruct.generators.index_generator",
        "llmstruct.generators.json_generator",
        "llmstruct.modules.cli.utils",
        "load_config",
        "logging",
        "os",
        "pathlib",
        "save_index_json"
      ],
      "hash": "956bae8ed64ccecfe5a00994c2e929c062fd7ba29d83200aba23f7fe75285d63",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.modules.cli.parse.llmstruct.modules.cli.parse#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.modules",
        "llmstruct.modules.cli",
        "llmstruct.modules.cli.parse",
        "llmstruct.modules.cli.parse.llmstruct.modules.cli.parse"
      ],
      "summary": "Module for llmstruct modules cli parse",
      "summary_source": "heuristic",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "0cb3c22a-c93c-4e01-a255-91eb178757cf"
    },
    {
      "module_id": "llmstruct.modules.cli.epic",
      "path": "llmstruct/modules/cli/epic.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "load_json",
          "docstring": "",
          "line_range": [
            5,
            7
          ],
          "parameters": [
            "path"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.epic.load_json:5#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.epic",
            "llmstruct.modules.cli.epic.load_json:5"
          ],
          "hash": "cdc6e2f9083b307268e25f05f5d476177bad479c9614badd5dab8af7219ff1d2",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-modules-cli-epic-load-json",
          "summary": "Function for load json",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "json.load",
            "open"
          ],
          "called_by": [
            "show_links"
          ]
        },
        {
          "name": "show_links",
          "docstring": "",
          "line_range": [
            9,
            57
          ],
          "parameters": [
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.epic.show_links:9#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.epic",
            "llmstruct.modules.cli.epic.show_links:9"
          ],
          "hash": "34a1fbe2e29c7a0f042a47d012963b273945ca444e7452ab5d73b00f9e691b0e",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-modules-cli-epic-show-links",
          "summary": "Function for show links",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "json.dumps",
            "str",
            "t.upper",
            "epic_path.exists",
            "load_json",
            "link_map.items",
            "item.get",
            "status_filter.lower",
            "data.get",
            "Path",
            "epic.get",
            "results.items",
            "print"
          ],
          "called_by": []
        },
        {
          "name": "add_epic_cli_subparser",
          "docstring": "",
          "line_range": [
            59,
            67
          ],
          "parameters": [
            "subparsers"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.epic.add_epic_cli_subparser:59#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.epic",
            "llmstruct.modules.cli.epic.add_epic_cli_subparser:59"
          ],
          "hash": "30f0b48d030c0c37fb0ae38cf55f382d2b0ecef7aa010502beb215a345845dc2",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-modules-cli-epic-add-epic-cli-subparser",
          "summary": "Function for add epic cli subparser",
          "summary_source": "heuristic",
          "tags": [
            "function",
            "public"
          ],
          "calls": [
            "show_links_parser.add_argument",
            "subparsers.add_parser",
            "show_links_parser.set_defaults",
            "epic_parser.add_subparsers",
            "epic_sub.add_parser"
          ],
          "called_by": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json": [
          "json.load",
          "open"
        ],
        "show_links": [
          "json.dumps",
          "str",
          "t.upper",
          "epic_path.exists",
          "load_json",
          "link_map.items",
          "item.get",
          "status_filter.lower",
          "data.get",
          "Path",
          "epic.get",
          "results.items",
          "print"
        ],
        "add_epic_cli_subparser": [
          "show_links_parser.add_argument",
          "subparsers.add_parser",
          "show_links_parser.set_defaults",
          "epic_parser.add_subparsers",
          "epic_sub.add_parser"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "json",
        "pathlib"
      ],
      "hash": "7a96cb38d4cc07f413b5da974e0eb6c461a8ce1c76f96f808c8a4414a7eb1b30",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.modules.cli.epic.llmstruct.modules.cli.epic#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.modules",
        "llmstruct.modules.cli",
        "llmstruct.modules.cli.epic",
        "llmstruct.modules.cli.epic.llmstruct.modules.cli.epic"
      ],
      "summary": "Module for llmstruct modules cli epic",
      "summary_source": "heuristic",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "3df662fd-1969-42e5-89b6-a9d9074b2a65"
    },
    {
      "module_id": "llmstruct.modules.cli.handlers",
      "path": "llmstruct/modules/cli/handlers.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with modular structure if available, fallback to legacy.",
          "line_range": [
            14,
            21
          ],
          "parameters": [
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.handlers.interactive:14#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.handlers",
            "llmstruct.modules.cli.handlers.interactive:14"
          ],
          "hash": "3502188e2b46336a3975c12a2a886739f176cd9f50dec057b5916ff0c03c513e",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-modules-cli-handlers-interactive",
          "summary": "Run interactive CLI with modular structure if available, fallback to legacy.",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "public"
          ],
          "calls": [
            "logging.warning",
            "interactive_modular",
            "interactive_legacy"
          ],
          "called_by": []
        },
        {
          "name": "interactive_modular",
          "docstring": "Run interactive CLI with modular structure.",
          "line_range": [
            23,
            32
          ],
          "parameters": [
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.handlers.interactive_modular:23#function",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.handlers",
            "llmstruct.modules.cli.handlers.interactive_modular:23"
          ],
          "hash": "3388997c90098e4891ecfbefa684aa81d8c25278022ee7c8f2b545430eeebc44",
          "hash_source": "code_ast_v1",
          "hash_version": "2.1.0",
          "markdown_anchor": "#llmstruct-modules-cli-handlers-interactive-modular",
          "summary": "Run interactive CLI with modular structure.",
          "summary_source": "docstring",
          "tags": [
            "async",
            "function",
            "public"
          ],
          "calls": [
            "create_cli_core",
            "cli_core.run_interactive_mode",
            "hasattr",
            "logging.info"
          ],
          "called_by": [
            "interactive"
          ]
        }
      ],
      "classes": [],
      "callgraph": {
        "interactive": [
          "logging.warning",
          "interactive_modular",
          "interactive_legacy"
        ],
        "interactive_modular": [
          "create_cli_core",
          "cli_core.run_interactive_mode",
          "hasattr",
          "logging.info"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "Path",
        "attach_to_llm_request",
        "create_cli_core",
        "get_folder_structure",
        "interactive_legacy",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.cli_core",
        "llmstruct.generators.json_generator",
        "llmstruct.modules.cli.handlers_legacy",
        "llmstruct.modules.cli.utils",
        "llmstruct.self_run",
        "load_gitignore",
        "logging",
        "os",
        "pathlib",
        "re",
        "read_file_content",
        "time",
        "write_to_file"
      ],
      "hash": "51450e4006a43d948e918bd87e43874e584f08c569cdbe9f89aff58c9d6293a2",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "llmstruct.modules.cli.handlers.llmstruct.modules.cli.handlers#module",
      "uid_components": [
        "llmstruct",
        "llmstruct.modules",
        "llmstruct.modules.cli",
        "llmstruct.modules.cli.handlers",
        "llmstruct.modules.cli.handlers.llmstruct.modules.cli.handlers"
      ],
      "summary": "Module for llmstruct modules cli handlers",
      "summary_source": "heuristic",
      "tags": [
        "async",
        "module",
        "public"
      ],
      "artifact_id": "561b88dc-48be-49b1-ad27-8c751f6588a8"
    },
    {
      "module_id": "scripts.team.__init__",
      "path": "scripts/team/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "hash_source": "file_content_v1",
      "hash_version": "2.1.0",
      "uid": "scripts.team.__init__.scripts.team.__init__#module",
      "uid_components": [
        "scripts",
        "scripts.team",
        "scripts.team.__init__",
        "scripts.team.__init__.scripts.team.__init__"
      ],
      "summary": "Module for scripts.team. init",
      "summary_source": "heuristic",
      "tags": [
        "module",
        "public"
      ],
      "artifact_id": "0657f98a-b8bc-4b67-93cb-8af651364f1b"
    }
  ]
}