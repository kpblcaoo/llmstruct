#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π Telegram –±–æ—Ç –¥–ª—è LLMStruct —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –º–µ—Ç—Ä–∏–∫
–ë–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
"""

import os
import json
import time
import asyncio
import logging
from typing import Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

try:
    from telegram import Update, BotCommand
    from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
except ImportError:
    print("‚ùå Missing telegram dependencies. Install with: pip install python-telegram-bot")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
try:
    import sys
    sys.path.append('../..')
    from src.llmstruct.metrics_tracker import get_metrics_tracker, track_workflow_event, track_task_start, track_task_complete
    METRICS_AVAILABLE = True
    logger.info("üìä Metrics system loaded")
except ImportError:
    METRICS_AVAILABLE = False
    logger.warning("‚ö†Ô∏è Metrics system not available")

class SimpleLLMStructBot:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π Telegram –±–æ—Ç –¥–ª—è LLMStruct"""
    
    def __init__(self, token: str):
        self.token = token
        self.application = Application.builder().token(token).build()
        self.setup_handlers()
        
        if METRICS_AVAILABLE:
            track_workflow_event("bot_startup")
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        self.application.add_handler(CommandHandler("metrics", self.metrics_command))
        self.application.add_handler(CommandHandler("struct", self.struct_command))
        self.application.add_handler(CommandHandler("parse", self.parse_command))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        if METRICS_AVAILABLE:
            track_workflow_event("bot_command", "start")
        
        welcome_message = """üß† LLMStruct Bot - –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/help - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã 
/metrics - –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
/struct - –°—Ç–∞—Ç—É—Å struct.json
/parse - –û–±–Ω–æ–≤–∏—Ç—å struct.json

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–∞ –æ –ø—Ä–æ–µ–∫—Ç–µ!
"""
        await update.message.reply_text(welcome_message)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        if METRICS_AVAILABLE:
            track_workflow_event("bot_command", "help")
        
        help_text = """üîß **LLMStruct Bot Commands**

**üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:**
/status - –°–∏—Å—Ç–µ–º–Ω—ã–π —Å—Ç–∞—Ç—É—Å
/metrics - –ú–µ—Ç—Ä–∏–∫–∏ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
/struct - –°–æ—Å—Ç–æ—è–Ω–∏–µ struct.json

**üõ† Workflow:**
/parse - –û–±–Ω–æ–≤–∏—Ç—å struct.json
–ü—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç - –ê–Ω–∞–ª–∏–∑/–≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–µ–∫—Ç–µ

**üìà –ú–µ—Ç—Ä–∏–∫–∏ –≤–∫–ª—é—á–µ–Ω—ã:** """ + ("‚úÖ" if METRICS_AVAILABLE else "‚ùå")
        
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /status"""
        task_id = f"bot_status_{int(time.time())}"
        
        if METRICS_AVAILABLE:
            track_task_start(task_id, "bot_status_check")
            track_workflow_event("bot_command", "status")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ API
            api_status = "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            try:
                import requests
                response = requests.get("http://localhost:8000/api/v1/system/health", timeout=2)
                if response.status_code == 200:
                    api_status = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç"
            except:
                pass
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ struct.json
            from pathlib import Path
            struct_file = Path("../../struct.json")
            struct_status = "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            if struct_file.exists():
                age_hours = (time.time() - struct_file.stat().st_mtime) / 3600
                if age_hours < 1:
                    struct_status = "‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω—ã–π"
                elif age_hours < 6:
                    struct_status = "üü° –ù–µ–¥–∞–≤–Ω–∏–π"
                else:
                    struct_status = "‚ö†Ô∏è –£—Å—Ç–∞—Ä–µ–≤—à–∏–π"
            
            status_text = f"""üìä **–°—Ç–∞—Ç—É—Å LLMStruct**

üåê **API:** {api_status}
üìÅ **struct.json:** {struct_status}
üìä **–ú–µ—Ç—Ä–∏–∫–∏:** {"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã" if METRICS_AVAILABLE else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã"}
ü§ñ **–ë–æ—Ç:** ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç
‚è∞ **–í—Ä–µ–º—è:** {time.strftime("%H:%M:%S")}
"""
            
            if METRICS_AVAILABLE:
                # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏
                tracker = get_metrics_tracker()
                summary = tracker.get_session_summary()
                status_text += f"""
üìà **–¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è:**
- ID: {summary['session_id'][:8]}
- –í—Ä–µ–º—è: {summary['duration']:.0f}s
- –¢–æ–∫–µ–Ω—ã: {summary['total_tokens']}
- –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {summary['efficiency_score']:.2f}
"""
                track_task_complete(task_id, "success")
            
            await update.message.reply_text(status_text, parse_mode='Markdown')
            
        except Exception as e:
            if METRICS_AVAILABLE:
                track_task_complete(task_id, "failed", str(e))
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    async def metrics_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /metrics"""
        if not METRICS_AVAILABLE:
            await update.message.reply_text("‚ùå –°–∏—Å—Ç–µ–º–∞ –º–µ—Ç—Ä–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        track_workflow_event("bot_command", "metrics")
        
        try:
            tracker = get_metrics_tracker()
            summary = tracker.get_session_summary()
            
            metrics_text = f"""üìä **–ú–µ—Ç—Ä–∏–∫–∏ —Å–µ—Å—Å–∏–∏ {summary['session_id'][:8]}**

‚è± **–í—Ä–µ–º—è:** {summary['duration']:.0f}s ({summary['duration']/60:.1f}m)
üéØ **–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** {summary['efficiency_score']:.2f}/1.0
üî¢ **–¢–æ–∫–µ–Ω—ã:** {summary['total_tokens']:,}
üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** ${summary['estimated_cost']:.4f}

üìã **–ó–∞–¥–∞—á–∏:** {summary['tasks_completed']}/{summary['tasks_total']}
üîÑ **–ü–æ–≤—Ç–æ—Ä—ã:** {summary['retries']}
‚ö†Ô∏è **–û—à–∏–±–∫–∏:** {summary['avoidable_errors']}

üõ§ **–õ–æ–∂–Ω—ã–µ –ø—É—Ç–∏:** {summary['false_paths']}
"""
            
            if summary['efficiency_score'] < 0.7:
                metrics_text += "\n‚ö†Ô∏è *–ù–∏–∑–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ä–∞–±–æ—Ç—ã*"
            
            await update.message.reply_text(metrics_text, parse_mode='Markdown')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
    
    async def struct_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /struct"""
        if METRICS_AVAILABLE:
            track_workflow_event("bot_command", "struct")
        
        try:
            from pathlib import Path
            struct_file = Path("../../struct.json")
            
            if not struct_file.exists():
                await update.message.reply_text("‚ùå struct.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /parse –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.")
                return
            
            stat = struct_file.stat()
            size_kb = stat.st_size / 1024
            modified = time.ctime(stat.st_mtime)
            age_hours = (time.time() - stat.st_mtime) / 3600
            
            status_emoji = "‚úÖ" if age_hours < 1 else "üü°" if age_hours < 6 else "‚ö†Ô∏è"
            
            struct_text = f"""üìÅ **struct.json Status**

{status_emoji} **–°—Ç–∞—Ç—É—Å:** {"–ê–∫—Ç—É–∞–ª—å–Ω—ã–π" if age_hours < 1 else "–£—Å—Ç–∞—Ä–µ–≤—à–∏–π" if age_hours > 6 else "–ù–µ–¥–∞–≤–Ω–∏–π"}
üìè **–†–∞–∑–º–µ—Ä:** {size_kb:.1f} KB
üìÖ **–ò–∑–º–µ–Ω–µ–Ω:** {modified}
‚è∞ **–í–æ–∑—Ä–∞—Å—Ç:** {age_hours:.1f} —á–∞—Å–æ–≤

{"‚ÑπÔ∏è *–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å*" if age_hours > 6 else "‚úÖ *–§–∞–π–ª –∞–∫—Ç—É–∞–ª–µ–Ω*"}
"""
            
            await update.message.reply_text(struct_text, parse_mode='Markdown')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ struct.json: {e}")
    
    async def parse_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /parse"""
        task_id = f"bot_parse_{int(time.time())}"
        
        if METRICS_AVAILABLE:
            track_task_start(task_id, "bot_struct_update")
            track_workflow_event("bot_command", "parse")
        
        await update.message.reply_text("üîÑ –û–±–Ω–æ–≤–ª—è—é struct.json...")
        
        try:
            import subprocess
            import os
            
            # –ú–µ–Ω—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
            os.chdir("../..")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ struct.json
            result = subprocess.run(
                ["python", "-m", "llmstruct.cli", "parse", ".", "-o", "struct.json"],
                capture_output=True,
                text=True,
                timeout=30
            )
            
            if result.returncode == 0:
                if METRICS_AVAILABLE:
                    track_workflow_event("struct_json_used")
                    track_task_complete(task_id, "success")
                
                await update.message.reply_text("‚úÖ struct.json —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
            else:
                if METRICS_AVAILABLE:
                    track_task_complete(task_id, "failed", "CLI command failed")
                
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n```\n{result.stderr}\n```", parse_mode='Markdown')
        
        except subprocess.TimeoutExpired:
            if METRICS_AVAILABLE:
                track_task_complete(task_id, "failed", "Timeout")
            await update.message.reply_text("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        
        except Exception as e:
            if METRICS_AVAILABLE:
                track_task_complete(task_id, "failed", str(e))
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        task_id = f"bot_message_{int(time.time())}"
        
        if METRICS_AVAILABLE:
            track_task_start(task_id, "bot_text_processing")
            track_workflow_event("bot_command", "text_message")
        
        user_message = update.message.text
        
        try:
            # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            if "–º–µ—Ç—Ä–∏–∫–∏" in user_message.lower() or "metrics" in user_message.lower():
                await self.metrics_command(update, context)
                return
            
            if "—Å—Ç–∞—Ç—É—Å" in user_message.lower() or "status" in user_message.lower():
                await self.status_command(update, context)
                return
            
            if "struct" in user_message.lower():
                await self.struct_command(update, context)
                return
            
            # –ë–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            response = f"""ü§ñ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: "{user_message[:50]}..."

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
- /status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
- /metrics - –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞  
- /struct - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ struct.json
- /parse - –û–±–Ω–æ–≤–∏—Ç—å struct.json

–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: "–º–µ—Ç—Ä–∏–∫–∏", "—Å—Ç–∞—Ç—É—Å", "struct"
"""
            
            if METRICS_AVAILABLE:
                # –¢—Ä–µ–∫–∏–Ω–≥ "—Ç–æ–∫–µ–Ω–æ–≤" –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
                input_tokens = len(user_message.split())
                output_tokens = len(response.split())
                tracker = get_metrics_tracker()
                tracker.track_token_usage("telegram_bot", "simple_echo", input_tokens, output_tokens)
                track_task_complete(task_id, "success")
            
            await update.message.reply_text(response)
            
        except Exception as e:
            if METRICS_AVAILABLE:
                track_task_complete(task_id, "failed", str(e))
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def run_sync(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
            commands = [
                BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
                BotCommand("help", "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å"),
                BotCommand("status", "–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"),
                BotCommand("metrics", "–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞"),
                BotCommand("struct", "–°—Ç–∞—Ç—É—Å struct.json"),
                BotCommand("parse", "–û–±–Ω–æ–≤–∏—Ç—å struct.json"),
            ]
            
            import asyncio
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(self.application.bot.set_my_commands(commands))
            
            logger.info("ü§ñ Starting LLMStruct Simple Bot...")
            if METRICS_AVAILABLE:
                tracker = get_metrics_tracker()
                logger.info(f"üìä Metrics session: {tracker.session_data['session_id']}")
            
            # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
            self.application.run_polling(drop_pending_updates=True)
            
        except Exception as e:
            logger.error(f"‚ùå Bot startup failed: {e}")
            if METRICS_AVAILABLE:
                track_workflow_event("bot_error", str(e))
        finally:
            if METRICS_AVAILABLE:
                track_workflow_event("bot_shutdown")
                tracker = get_metrics_tracker()
                tracker.save_session()
                logger.info("üìä Metrics saved")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    if not token:
        print("‚ùå Telegram bot token not found!")
        print("Set with: export TELEGRAM_BOT_TOKEN='your_token'")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot = SimpleLLMStructBot(token)
    bot.run_sync()

if __name__ == "__main__":
    main() 