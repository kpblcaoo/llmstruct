#!/usr/bin/env python3
"""
MP-002A Progress Bot - Telegram –∫–æ–Ω—Ç—Ä–æ–ª—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Smart Wrapper —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
–≠—Ç–∞–ø–Ω–∞—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å, –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞, –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
"""

import asyncio
import json
import os
import sys
import httpx
from datetime import datetime
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.join(os.path.dirname(__file__), '../../'))

class MP002ProgressBot:
    """
    Telegram –±–æ—Ç –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ MP-002A Smart Wrapper
    """
    
    def __init__(self, token):
        self.token = token
        self.api_base = "http://localhost:8000/api/v1"
        self.project_root = Path(__file__).parent.parent.parent
        self.progress_file = self.project_root / ".personal" / "mp002_progress.json"
        
        # –§–∞–∑—ã —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ MP-002A
        self.phases = {
            "phase_1": {
                "name": "MVP Smart Wrapper",
                "estimated_hours": "1-2 –¥–Ω—è",
                "tasks": [
                    "–°–æ–∑–¥–∞—Ç—å SmartWorkflow –∫–ª–∞—Å—Å",
                    "–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å ContextAnalyzer —Å venv detection", 
                    "–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å AccessController (Boss/Team)",
                    "–ë–∞–∑–æ–≤–∞—è CLI –∫–æ–º–∞–Ω–¥–∞ smart_workflow.py",
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ—Å—Ç—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö"
                ],
                "success_criteria": [
                    "100% –∞–≤—Ç–æ–∞–∫—Ç–∏–≤–∞—Ü–∏—è venv –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏",
                    "–†–∞–∑–ª–∏—á–∏–µ Boss/Team –∫–æ–º–∞–Ω–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç",
                    "Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"
                ]
            },
            "phase_2": {
                "name": "Epic Integration", 
                "estimated_hours": "1-2 –¥–Ω—è",
                "tasks": [
                    "–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å EpicAutofiller —Å Boss/Team —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º",
                    "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å GitHub sync (enhanced vs basic)",
                    "–®–∞–±–ª–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è",
                    "Fallback handlers –∏ error processing",
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ epic creation workflows"
                ],
                "success_criteria": [
                    "80%+ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è",
                    "–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ Boss/Team",
                    "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ GitHub workflows"
                ]
            },
            "phase_3": {
                "name": "AI Enhancement",
                "estimated_hours": "1 –¥–µ–Ω—å", 
                "tasks": [
                    "Hybrid –ø—Ä–∞–≤–∏–ª–∞ + –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ ContextAnalyzer",
                    "Machine learning –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤",
                    "–ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π",
                    "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å AI self-awareness —Å–∏—Å—Ç–µ–º–æ–π",
                    "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è LLM"
                ],
                "success_criteria": [
                    "–°—É–±—ä–µ–∫—Ç–∏–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —É–¥–æ–±—Å—Ç–≤–∞ 8/10+",
                    "–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ workflow –Ω–∞ 50%+",
                    "Smart context switching —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
                ]
            }
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.init_progress_tracking()
    
    def init_progress_tracking(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        if not self.progress_file.exists():
            initial_progress = {
                "started_at": datetime.now().isoformat(),
                "current_phase": "phase_1",
                "phases": {
                    phase_id: {
                        "status": "pending",
                        "started_at": None,
                        "completed_at": None,
                        "tasks_completed": [],
                        "issues": [],
                        "user_feedback": []
                    } for phase_id in self.phases.keys()
                },
                "overall_status": "in_progress",
                "blocking_issues": [],
                "user_approvals": []
            }
            
            # –°–æ–∑–¥–∞–µ–º .personal –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            self.progress_file.parent.mkdir(exist_ok=True)
            
            with open(self.progress_file, 'w', encoding='utf-8') as f:
                json.dump(initial_progress, f, indent=2, ensure_ascii=False)
    
    def load_progress(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        try:
            with open(self.progress_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            self.init_progress_tracking()
            return self.load_progress()
    
    def save_progress(self, progress):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        with open(self.progress_file, 'w', encoding='utf-8') as f:
            json.dump(progress, f, indent=2, ensure_ascii=False)
    
    async def send_message(self, chat_id, text, parse_mode="Markdown"):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        url = f"https://api.telegram.org/bot{self.token}/sendMessage"
        
        async with httpx.AsyncClient() as client:
            try:
                response = await client.post(url, json={
                    "chat_id": chat_id,
                    "text": text,
                    "parse_mode": parse_mode
                })
                return response.json()
            except Exception as e:
                print(f"‚ùå Error sending message: {e}")
                return {"ok": False, "error": str(e)}
    
    async def report_phase_start(self, chat_id, phase_id):
        """–û—Ç—á–µ—Ç –æ –Ω–∞—á–∞–ª–µ —Ñ–∞–∑—ã"""
        progress = self.load_progress()
        phase = self.phases[phase_id]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        progress["current_phase"] = phase_id
        progress["phases"][phase_id]["status"] = "in_progress"
        progress["phases"][phase_id]["started_at"] = datetime.now().isoformat()
        self.save_progress(progress)
        
        message = f"""
üöÄ **–ù–ê–ß–ê–õ–ê–°–¨ –§–ê–ó–ê {phase_id.upper()}**: {phase['name']}

‚è±Ô∏è **–û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏**: {phase['estimated_hours']}

üìã **–ó–∞–¥–∞—á–∏ —Ñ–∞–∑—ã**:
"""
        
        for i, task in enumerate(phase['tasks'], 1):
            message += f"{i}. {task}\n"
        
        message += f"""
üéØ **–ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞**:
"""
        
        for i, criteria in enumerate(phase['success_criteria'], 1):
            message += f"‚Ä¢ {criteria}\n"
        
        message += f"\nüí¨ –ù–∞—á–∏–Ω–∞—é —Ä–∞–±–æ—Ç—É! –ë—É–¥—É –æ—Ç—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ."
        
        await self.send_message(chat_id, message)
    
    async def report_task_completion(self, chat_id, phase_id, task_description, details=""):
        """–û—Ç—á–µ—Ç –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏"""
        progress = self.load_progress()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
        progress["phases"][phase_id]["tasks_completed"].append({
            "task": task_description,
            "completed_at": datetime.now().isoformat(),
            "details": details
        })
        self.save_progress(progress)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ñ–∞–∑—ã
        total_tasks = len(self.phases[phase_id]['tasks'])
        completed_tasks = len(progress["phases"][phase_id]["tasks_completed"])
        percentage = (completed_tasks / total_tasks) * 100
        
        message = f"""
‚úÖ **–ó–ê–î–ê–ß–ê –í–´–ü–û–õ–ù–ï–ù–ê** ({completed_tasks}/{total_tasks})

**–§–∞–∑–∞**: {self.phases[phase_id]['name']}
**–ó–∞–¥–∞—á–∞**: {task_description}
**–ü—Ä–æ–≥—Ä–µ—Å—Å**: {percentage:.1f}%

{'üìã **–î–µ—Ç–∞–ª–∏**: ' + details if details else ''}

{'üéâ **–§–ê–ó–ê –ì–û–¢–û–í–ê –ö –ó–ê–í–ï–†–®–ï–ù–ò–Æ!**' if completed_tasks == total_tasks else f'‚è≠Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–µ...'}
"""
        
        await self.send_message(chat_id, message)
        
        # –ï—Å–ª–∏ –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–¥–æ–±—Ä–µ–Ω–∏–µ
        if completed_tasks == total_tasks:
            await self.request_phase_approval(chat_id, phase_id)
    
    async def request_phase_approval(self, chat_id, phase_id):
        """–ó–∞–ø—Ä–æ—Å –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ñ–∞–∑—ã"""
        phase = self.phases[phase_id]
        
        message = f"""
üéØ **–§–ê–ó–ê {phase_id.upper()} –ó–ê–í–ï–†–®–ï–ù–ê**: {phase['name']}

**–ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏**:
"""
        
        for i, criteria in enumerate(phase['success_criteria'], 1):
            message += f"{i}. {criteria}\n"
        
        message += f"""
‚ùì **–ù—É–∂–Ω–æ –≤–∞—à–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ñ–∞–∑–µ.**

–ö–æ–º–∞–Ω–¥—ã:
‚Ä¢ `/approve {phase_id}` - –æ–¥–æ–±—Ä–∏—Ç—å –∏ –ø–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—å—à–µ
‚Ä¢ `/issues {phase_id}` - —Å–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö  
‚Ä¢ `/details {phase_id}` - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
‚Ä¢ `/status` - –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞
"""
        
        await self.send_message(chat_id, message)
    
    async def report_issue(self, chat_id, phase_id, issue_description):
        """–û—Ç—á–µ—Ç –æ –ø—Ä–æ–±–ª–µ–º–µ"""
        progress = self.load_progress()
        
        issue = {
            "description": issue_description,
            "reported_at": datetime.now().isoformat(),
            "phase": phase_id,
            "status": "open"
        }
        
        progress["blocking_issues"].append(issue)
        progress["phases"][phase_id]["issues"].append(issue)
        self.save_progress(progress)
        
        message = f"""
‚ö†Ô∏è **–ü–†–û–ë–õ–ï–ú–ê –û–ë–ù–ê–†–£–ñ–ï–ù–ê**

**–§–∞–∑–∞**: {self.phases[phase_id]['name']}
**–û–ø–∏—Å–∞–Ω–∏–µ**: {issue_description}

ü§î **–ß—Ç–æ –¥–µ–ª–∞—Ç—å?**
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥:
‚Ä¢ `/solution <–æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è>` - –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ
‚Ä¢ `/continue` - –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –ø—Ä–æ–±–ª–µ–º—É  
‚Ä¢ `/stop` - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

–ñ–¥—É –≤–∞—à–∏—Ö —É–∫–∞–∑–∞–Ω–∏–π! üôè
"""
        
        await self.send_message(chat_id, message)
    
    async def get_overall_status(self, chat_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
        progress = self.load_progress()
        
        message = f"""
üìä **–°–¢–ê–¢–£–° MP-002A SMART WRAPPER**

**–ù–∞—á–∞—Ç**: {progress['started_at'][:10]}
**–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å**: {progress['overall_status']}
**–¢–µ–∫—É—â–∞—è —Ñ–∞–∑–∞**: {progress['current_phase']}

"""
        
        for phase_id, phase_data in progress["phases"].items():
            phase_info = self.phases[phase_id]
            status_emoji = {
                "pending": "‚è≥",
                "in_progress": "üîÑ", 
                "completed": "‚úÖ",
                "blocked": "‚ùå"
            }.get(phase_data["status"], "‚ùì")
            
            completed_tasks = len(phase_data.get("tasks_completed", []))
            total_tasks = len(phase_info["tasks"])
            
            message += f"{status_emoji} **{phase_info['name']}**: {completed_tasks}/{total_tasks} –∑–∞–¥–∞—á\n"
        
        blocking_issues = len(progress.get("blocking_issues", []))
        if blocking_issues > 0:
            message += f"\n‚ö†Ô∏è **–ë–ª–æ–∫–∏—Ä—É—é—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã**: {blocking_issues}"
        
        message += f"""

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã**:
‚Ä¢ `/details <phase>` - –¥–µ—Ç–∞–ª–∏ —Ñ–∞–∑—ã
‚Ä¢ `/approve <phase>` - –æ–¥–æ–±—Ä–∏—Ç—å —Ñ–∞–∑—É
‚Ä¢ `/issues <phase>` - —Å–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö
‚Ä¢ `/continue` - –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É
‚Ä¢ `/help` - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
"""
        
        await self.send_message(chat_id, message)
    
    async def handle_message(self, update):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if "message" not in update:
            return
        
        message = update["message"]
        chat_id = message["chat"]["id"]
        text = message.get("text", "")
        
        if not text:
            return
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–∞–Ω–¥
        if text.startswith("/"):
            await self.handle_command(chat_id, text)
        else:
            # –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º –∫–∞–∫ feedback
            await self.handle_feedback(chat_id, text)
    
    async def handle_command(self, chat_id, command):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥"""
        parts = command.split()
        cmd = parts[0].lower()
        args = parts[1:] if len(parts) > 1 else []
        
        if cmd == "/start":
            await self.send_welcome(chat_id)
        elif cmd == "/status":
            await self.get_overall_status(chat_id)
        elif cmd == "/approve" and args:
            await self.approve_phase(chat_id, args[0])
        elif cmd == "/issues" and args:
            await self.report_user_issues(chat_id, args[0], " ".join(args[1:]))
        elif cmd == "/details" and args:
            await self.show_phase_details(chat_id, args[0])
        elif cmd == "/continue":
            await self.continue_work(chat_id)
        elif cmd == "/help":
            await self.show_help(chat_id)
        else:
            await self.send_message(chat_id, f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {cmd}\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")
    
    async def send_welcome(self, chat_id):
        """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        message = """
ü§ñ **MP-002A Progress Bot**

–Ø –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Smart Wrapper —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏!

**–ú–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏**:
‚úÖ –û—Ç—á–µ—Ç—ã –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –ø–æ —Ñ–∞–∑–∞–º
‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö  
üéØ –ó–∞–ø—Ä–æ—Å—ã –æ–¥–æ–±—Ä–µ–Ω–∏—è —ç—Ç–∞–ø–æ–≤
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
üí¨ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –Ω–∞—á–∞–ª–∞! üöÄ
"""
        await self.send_message(chat_id, message)
    
    async def approve_phase(self, chat_id, phase_id):
        """–û–¥–æ–±—Ä–µ–Ω–∏–µ —Ñ–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        progress = self.load_progress()
        
        if phase_id not in self.phases:
            await self.send_message(chat_id, f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ–∞–∑–∞: {phase_id}")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        progress["phases"][phase_id]["status"] = "completed"
        progress["phases"][phase_id]["completed_at"] = datetime.now().isoformat()
        progress["user_approvals"].append({
            "phase": phase_id,
            "approved_at": datetime.now().isoformat()
        })
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é —Ñ–∞–∑—É
        phases_list = list(self.phases.keys())
        current_idx = phases_list.index(phase_id)
        
        if current_idx < len(phases_list) - 1:
            next_phase = phases_list[current_idx + 1]
            progress["current_phase"] = next_phase
        else:
            progress["overall_status"] = "completed"
        
        self.save_progress(progress)
        
        message = f"""
‚úÖ **–§–ê–ó–ê {phase_id.upper()} –û–î–û–ë–†–ï–ù–ê!**

{self.phases[phase_id]['name']} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.
"""
        
        if progress["overall_status"] == "completed":
            message += "\nüéâ **–í–°–ï –§–ê–ó–´ –ó–ê–í–ï–†–®–ï–ù–´! MP-002A –†–ï–ê–õ–ò–ó–û–í–ê–ù!** üéâ"
        else:
            next_phase = progress["current_phase"] 
            message += f"\n‚è≠Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ñ–∞–∑–µ: {self.phases[next_phase]['name']}"
        
        await self.send_message(chat_id, message)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏–Ω–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Ñ–∞–∑—É
        if progress["overall_status"] != "completed":
            await self.report_phase_start(chat_id, progress["current_phase"])
    
    async def handle_feedback(self, chat_id, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ feedback"""
        progress = self.load_progress()
        current_phase = progress.get("current_phase")
        
        if current_phase:
            progress["phases"][current_phase]["user_feedback"].append({
                "message": text,
                "timestamp": datetime.now().isoformat()
            })
            self.save_progress(progress)
        
        await self.send_message(chat_id, f"üìù Feedback –∑–∞–ø–∏—Å–∞–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.")


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –±–æ—Ç–æ–º
async def start_mp002_bot():
    """–ó–∞–ø—É—Å–∫ MP-002A –±–æ—Ç–∞"""
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    
    if not token:
        print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω: export TELEGRAM_BOT_TOKEN='your_token'")
        return
    
    bot = MP002ProgressBot(token)
    
    print("ü§ñ MP-002A Progress Bot –∑–∞–ø—É—â–µ–Ω!")
    print("üì± –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ Telegram:")
    print("   /start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã")
    print("   /status - —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å")
    print("   /approve <phase> - –æ–¥–æ–±—Ä–∏—Ç—å —Ñ–∞–∑—É")
    print("   /issues <phase> - —Å–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö")
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram polling
    # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±–æ—Ç –≥–æ—Ç–æ–≤
    
    return bot


if __name__ == "__main__":
    asyncio.run(start_mp002_bot()) 