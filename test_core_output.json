{
  "metadata": {
    "project_name": "llmstruct",
    "description": "Utility for generating structured JSON for codebases",
    "version": "2025-06-25T19:36:58.992698Z",
    "authors": [
      {
        "name": "Mikhail Stepanov",
        "github": "kpblcaoo",
        "email": "kpblcaoo@gmail.com"
      }
    ],
    "instructions": [
      "Follow best practices, warn if instructions conflict with them",
      "Preserve functionality, ensure idempotency",
      "Use attached struct.json for context and navigation",
      "Request missing modules or functions if needed",
      "Regenerate JSON for significant changes, track via Git and artifacts",
      "Use internal comments for descriptions, append brief summary"
    ],
    "goals": [],
    "stats": {
      "modules_count": 5,
      "functions_count": 57,
      "classes_count": 13,
      "call_edges_count": 97
    },
    "artifact_id": "7c170b01-a5b1-4f4f-bebc-dab4cf1b7d76",
    "summary": "Structured JSON for llmstruct codebase",
    "tags": [
      "codebase",
      "automation"
    ],
    "folder_structure": [
      {
        "path": ".",
        "type": "directory",
        "artifact_id": "43f4a28c-b0e0-4d6e-9e9a-89fcc26be29e",
        "metadata": {}
      },
      {
        "path": "__init__.py",
        "type": "file",
        "artifact_id": "db4bd0bf-aea5-4fe5-8516-80fc9d5b1c0c",
        "metadata": {}
      },
      {
        "path": "config_manager.py",
        "type": "file",
        "artifact_id": "d983322e-d528-418f-bfcc-fde2190c78e3",
        "metadata": {}
      },
      {
        "path": "hash_utils.py",
        "type": "file",
        "artifact_id": "0278fdc3-54bf-4d0d-9262-b8c64012b120",
        "metadata": {}
      },
      {
        "path": "summary_providers.py",
        "type": "file",
        "artifact_id": "8b652205-614d-4541-a158-2537b5432cc9",
        "metadata": {}
      },
      {
        "path": "uid_generator.py",
        "type": "file",
        "artifact_id": "f25fdbe1-b686-428e-a17d-3b85eba96010",
        "metadata": {}
      }
    ]
  },
  "toc": [
    {
      "module_id": "hash_utils",
      "path": "hash_utils.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "Hash Utilities for LLMStruct",
      "artifact_id": "87b9afc1-389b-4685-b71c-6b480d9594bf"
    },
    {
      "module_id": "summary_providers",
      "path": "summary_providers.py",
      "category": "core",
      "functions": 22,
      "classes": 6,
      "summary": "Summary Providers System",
      "artifact_id": "6a802bcc-db10-46c3-a2af-b8340a799d91"
    },
    {
      "module_id": "uid_generator",
      "path": "uid_generator.py",
      "category": "core",
      "functions": 11,
      "classes": 1,
      "summary": "Advanced UID Generator System for LLMStruct v2.1",
      "artifact_id": "366f6dd3-28ae-45cc-b6dd-8f4a4fdd56a4"
    },
    {
      "module_id": "__init__",
      "path": "__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "LLMStruct Core Module",
      "artifact_id": "784d5a78-23ac-4028-b11e-aeff3e4c5b65"
    },
    {
      "module_id": "config_manager",
      "path": "config_manager.py",
      "category": "core",
      "functions": 12,
      "classes": 6,
      "summary": "Configuration Management System for LLMStruct",
      "artifact_id": "1c87de7e-5f2b-49be-b196-039f8eb6d606"
    }
  ],
  "modules": [
    {
      "module_id": "hash_utils",
      "path": "hash_utils.py",
      "category": "core",
      "module_doc": "Hash Utilities for LLMStruct\n\nProvides consistent hashing for files, functions, and code entities\nto support incremental builds and change detection.",
      "functions": [
        {
          "name": "hash_content",
          "docstring": "Generate hash for string content.\n\nArgs:\n    content: String content to hash\n    algorithm: Hash algorithm (sha256, md5, sha1)\n    \nReturns:\n    Hex digest of the hash",
          "line_range": null,
          "parameters": [
            "content",
            "algorithm"
          ],
          "decorators": []
        },
        {
          "name": "hash_file",
          "docstring": "Generate hash for file content.\n\nArgs:\n    file_path: Path to file\n    algorithm: Hash algorithm\n    \nReturns:\n    Hex digest of file hash, None if file doesn't exist",
          "line_range": null,
          "parameters": [
            "file_path",
            "algorithm"
          ],
          "decorators": []
        },
        {
          "name": "hash_source",
          "docstring": "Generate hash for source code content.\n\nNormalizes whitespace and removes comments for consistent hashing.\n\nArgs:\n    content: Source code content\n    algorithm: Hash algorithm\n    \nReturns:\n    Hex digest of normalized source hash",
          "line_range": null,
          "parameters": [
            "content",
            "algorithm"
          ],
          "decorators": []
        },
        {
          "name": "normalize_source_for_hashing",
          "docstring": "Normalize source code for consistent hashing.\n\n- Removes leading/trailing whitespace\n- Normalizes line endings\n- Removes empty lines\n- Strips inline comments (# comments)\n\nArgs:\n    content: Source code content\n    \nReturns:\n    Normalized content",
          "line_range": null,
          "parameters": [
            "content"
          ],
          "decorators": []
        },
        {
          "name": "hash_entity",
          "docstring": "Generate hash for a code entity (function, class, etc.).\n\nUses entity content and metadata for hashing.\n\nArgs:\n    entity: Entity dictionary with 'content', 'name', 'type' keys\n    algorithm: Hash algorithm\n    \nReturns:\n    Hex digest of entity hash",
          "line_range": null,
          "parameters": [
            "entity",
            "algorithm"
          ],
          "decorators": []
        },
        {
          "name": "create_file_hash_map",
          "docstring": "Create hash map for multiple files.\n\nArgs:\n    file_paths: List of file paths\n    algorithm: Hash algorithm\n    \nReturns:\n    Dictionary mapping file paths to their hashes",
          "line_range": null,
          "parameters": [
            "file_paths",
            "algorithm"
          ],
          "decorators": []
        },
        {
          "name": "has_file_changed",
          "docstring": "Check if file has changed since previous hash.\n\nArgs:\n    file_path: Path to file\n    previous_hash: Previously computed hash\n    algorithm: Hash algorithm\n    \nReturns:\n    True if file has changed, False otherwise",
          "line_range": null,
          "parameters": [
            "file_path",
            "previous_hash",
            "algorithm"
          ],
          "decorators": []
        },
        {
          "name": "create_incremental_hash_database",
          "docstring": "Create hash database for incremental builds.\n\nArgs:\n    base_path: Base directory to scan\n    file_patterns: List of glob patterns for files to include\n    algorithm: Hash algorithm\n    \nReturns:\n    Dictionary mapping file paths to hashes",
          "line_range": null,
          "parameters": [
            "base_path",
            "file_patterns",
            "algorithm"
          ],
          "decorators": []
        },
        {
          "name": "compare_hash_databases",
          "docstring": "Compare two hash databases to find changes.\n\nArgs:\n    old_db: Previous hash database\n    new_db: Current hash database\n    \nReturns:\n    Dictionary with 'added', 'modified', 'deleted' file lists",
          "line_range": null,
          "parameters": [
            "old_db",
            "new_db"
          ],
          "decorators": []
        },
        {
          "name": "quick_file_hash",
          "docstring": "Quick SHA-256 hash of a file",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "quick_content_hash",
          "docstring": "Quick SHA-256 hash of content",
          "line_range": null,
          "parameters": [
            "content"
          ],
          "decorators": []
        },
        {
          "name": "quick_source_hash",
          "docstring": "Quick SHA-256 hash of normalized source code",
          "line_range": null,
          "parameters": [
            "source_code"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "hash_content": [
          "hashlib.new",
          "content.encode",
          "hasher.update",
          "hasher.hexdigest"
        ],
        "hash_file": [
          "f.read",
          "path.is_file",
          "path.exists",
          "hasher.update",
          "Path",
          "hashlib.new",
          "open",
          "hasher.hexdigest",
          "iter"
        ],
        "hash_source": [
          "hash_content",
          "normalize_source_for_hashing"
        ],
        "normalize_source_for_hashing": [
          "lines.append",
          "content.splitlines",
          "enumerate",
          "line.strip"
        ],
        "hash_entity": [
          "hash_parts.append",
          "hash_content",
          "p.get",
          "normalize_source_for_hashing"
        ],
        "create_file_hash_map": [
          "hash_file"
        ],
        "has_file_changed": [
          "hash_file"
        ],
        "create_incremental_hash_database": [
          "str",
          "Path",
          "base_path.glob",
          "file_path.relative_to",
          "file_path.is_file",
          "hash_file"
        ],
        "compare_hash_databases": [
          "old_db.keys",
          "new_db.keys",
          "modified.append",
          "list",
          "set",
          "sorted"
        ],
        "quick_file_hash": [
          "hash_file"
        ],
        "quick_content_hash": [
          "hash_content"
        ],
        "quick_source_hash": [
          "hash_source"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "hashlib",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "87b9afc1-389b-4685-b71c-6b480d9594bf"
    },
    {
      "module_id": "summary_providers",
      "path": "summary_providers.py",
      "category": "core",
      "module_doc": "Summary Providers System\n\nProvides multiple strategies for generating code summaries:\n- HeuristicProvider: Fast, offline, deterministic (default)\n- LLMProvider: AI-powered but optional and disabled by default",
      "functions": [
        {
          "name": "get_summary_system",
          "docstring": "Get global summary system instance",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "generate_summary",
          "docstring": "Generate summary using the configured provider",
          "line_range": null,
          "parameters": [
            "code",
            "entity_type",
            "entity_name",
            "docstring"
          ],
          "decorators": []
        },
        {
          "name": "is_empty",
          "docstring": "Check if summary is effectively empty",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "generate_summary",
          "docstring": "Generate summary for code entity",
          "line_range": null,
          "parameters": [
            "self",
            "code",
            "entity_type",
            "entity_name",
            "docstring"
          ],
          "decorators": [
            "abstractmethod"
          ]
        },
        {
          "name": "get_provider_name",
          "docstring": "Get provider name",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": [
            "abstractmethod"
          ]
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "max_length"
          ],
          "decorators": []
        },
        {
          "name": "generate_summary",
          "docstring": "Generate heuristic summary",
          "line_range": null,
          "parameters": [
            "self",
            "code",
            "entity_type",
            "entity_name",
            "docstring"
          ],
          "decorators": []
        },
        {
          "name": "_clean_docstring",
          "docstring": "Clean and truncate docstring",
          "line_range": null,
          "parameters": [
            "self",
            "docstring"
          ],
          "decorators": []
        },
        {
          "name": "_generate_heuristic_summary",
          "docstring": "Generate summary based on naming patterns and code structure",
          "line_range": null,
          "parameters": [
            "self",
            "entity_type",
            "entity_name",
            "code"
          ],
          "decorators": []
        },
        {
          "name": "_humanize_name",
          "docstring": "Convert snake_case or CamelCase to human readable",
          "line_range": null,
          "parameters": [
            "self",
            "name"
          ],
          "decorators": []
        },
        {
          "name": "_extract_tags_from_docstring",
          "docstring": "Extract tags from docstring content",
          "line_range": null,
          "parameters": [
            "self",
            "docstring"
          ],
          "decorators": []
        },
        {
          "name": "_extract_tags_from_code",
          "docstring": "Extract tags from code analysis",
          "line_range": null,
          "parameters": [
            "self",
            "entity_type",
            "entity_name",
            "code"
          ],
          "decorators": []
        },
        {
          "name": "get_provider_name",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "api_key"
          ],
          "decorators": []
        },
        {
          "name": "generate_summary",
          "docstring": "Generate LLM-powered summary",
          "line_range": null,
          "parameters": [
            "self",
            "code",
            "entity_type",
            "entity_name",
            "docstring"
          ],
          "decorators": []
        },
        {
          "name": "_create_cache_key",
          "docstring": "Create cache key for LLM results",
          "line_range": null,
          "parameters": [
            "self",
            "code",
            "entity_type",
            "entity_name"
          ],
          "decorators": []
        },
        {
          "name": "_call_llm_api",
          "docstring": "Call LLM API to generate summary",
          "line_range": null,
          "parameters": [
            "self",
            "code",
            "entity_type",
            "entity_name",
            "docstring"
          ],
          "decorators": []
        },
        {
          "name": "_create_prompt",
          "docstring": "Create LLM prompt for summary generation",
          "line_range": null,
          "parameters": [
            "self",
            "code",
            "entity_type",
            "entity_name",
            "docstring"
          ],
          "decorators": []
        },
        {
          "name": "get_provider_name",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "generate_summary",
          "docstring": "Generate summary using configured provider",
          "line_range": null,
          "parameters": [
            "self",
            "code",
            "entity_type",
            "entity_name",
            "docstring"
          ],
          "decorators": []
        },
        {
          "name": "get_active_provider",
          "docstring": "Get name of currently active provider",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "SummarySource",
          "docstring": "Source of the summary",
          "line_range": null,
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "CodeSummary",
          "docstring": "Container for code summary with metadata",
          "line_range": null,
          "methods": [
            {
              "name": "is_empty",
              "docstring": "Check if summary is effectively empty",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "SummaryProvider",
          "docstring": "Abstract base class for summary providers",
          "line_range": null,
          "methods": [
            {
              "name": "generate_summary",
              "docstring": "Generate summary for code entity",
              "line_range": null,
              "parameters": [
                "self",
                "code",
                "entity_type",
                "entity_name",
                "docstring"
              ]
            },
            {
              "name": "get_provider_name",
              "docstring": "Get provider name",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": [
            "ABC"
          ]
        },
        {
          "name": "HeuristicProvider",
          "docstring": "Fast, deterministic summary provider using heuristics.\n\nFallback chain:\n1. Extract and clean docstring (confidence: 0.9)\n2. Generate from function/class name (confidence: 0.3)\n3. Return empty (confidence: 0.0)",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "max_length"
              ]
            },
            {
              "name": "generate_summary",
              "docstring": "Generate heuristic summary",
              "line_range": null,
              "parameters": [
                "self",
                "code",
                "entity_type",
                "entity_name",
                "docstring"
              ]
            },
            {
              "name": "_clean_docstring",
              "docstring": "Clean and truncate docstring",
              "line_range": null,
              "parameters": [
                "self",
                "docstring"
              ]
            },
            {
              "name": "_generate_heuristic_summary",
              "docstring": "Generate summary based on naming patterns and code structure",
              "line_range": null,
              "parameters": [
                "self",
                "entity_type",
                "entity_name",
                "code"
              ]
            },
            {
              "name": "_humanize_name",
              "docstring": "Convert snake_case or CamelCase to human readable",
              "line_range": null,
              "parameters": [
                "self",
                "name"
              ]
            },
            {
              "name": "_extract_tags_from_docstring",
              "docstring": "Extract tags from docstring content",
              "line_range": null,
              "parameters": [
                "self",
                "docstring"
              ]
            },
            {
              "name": "_extract_tags_from_code",
              "docstring": "Extract tags from code analysis",
              "line_range": null,
              "parameters": [
                "self",
                "entity_type",
                "entity_name",
                "code"
              ]
            },
            {
              "name": "get_provider_name",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": [
            "SummaryProvider"
          ]
        },
        {
          "name": "LLMProvider",
          "docstring": "LLM-powered summary provider (optional, disabled by default).\n\nOnly works when LLM is explicitly enabled via configuration.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "api_key"
              ]
            },
            {
              "name": "generate_summary",
              "docstring": "Generate LLM-powered summary",
              "line_range": null,
              "parameters": [
                "self",
                "code",
                "entity_type",
                "entity_name",
                "docstring"
              ]
            },
            {
              "name": "_create_cache_key",
              "docstring": "Create cache key for LLM results",
              "line_range": null,
              "parameters": [
                "self",
                "code",
                "entity_type",
                "entity_name"
              ]
            },
            {
              "name": "_call_llm_api",
              "docstring": "Call LLM API to generate summary",
              "line_range": null,
              "parameters": [
                "self",
                "code",
                "entity_type",
                "entity_name",
                "docstring"
              ]
            },
            {
              "name": "_create_prompt",
              "docstring": "Create LLM prompt for summary generation",
              "line_range": null,
              "parameters": [
                "self",
                "code",
                "entity_type",
                "entity_name",
                "docstring"
              ]
            },
            {
              "name": "get_provider_name",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": [
            "SummaryProvider"
          ]
        },
        {
          "name": "SummarySystem",
          "docstring": "Main summary system that orchestrates different providers",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "generate_summary",
              "docstring": "Generate summary using configured provider",
              "line_range": null,
              "parameters": [
                "self",
                "code",
                "entity_type",
                "entity_name",
                "docstring"
              ]
            },
            {
              "name": "get_active_provider",
              "docstring": "Get name of currently active provider",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "is_empty": [],
        "generate_summary": [
          "get_summary_system"
        ],
        "get_provider_name": [],
        "__init__": [
          "HeuristicProvider",
          "LLMProvider"
        ],
        "_clean_docstring": [
          "re.split",
          "len",
          "re.sub"
        ],
        "_generate_heuristic_summary": [
          "name_lower.endswith",
          "entity_name.lower",
          "name_lower.startswith",
          "entity_type.title",
          "self._humanize_name"
        ],
        "_humanize_name": [
          "word.lower",
          "re.findall",
          "name.split"
        ],
        "_extract_tags_from_docstring": [
          "tags.append",
          "docstring.lower",
          "any"
        ],
        "_extract_tags_from_code": [
          "tags.append",
          "entity_name.startswith"
        ],
        "_create_cache_key": [
          "content.encode",
          "hashlib.md5"
        ],
        "_call_llm_api": [
          "get_config",
          "self._create_prompt",
          "CodeSummary"
        ],
        "_create_prompt": [
          "get_config"
        ],
        "get_active_provider": [
          "get_config",
          "is_llm_enabled"
        ],
        "get_summary_system": [
          "SummarySystem"
        ]
      },
      "dependencies": [
        "ABC",
        "Any",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "abc",
        "abstractmethod",
        "config_manager",
        "dataclass",
        "dataclasses",
        "enum",
        "get_config",
        "hashlib",
        "is_llm_enabled",
        "re",
        "typing"
      ],
      "hash": null,
      "artifact_id": "6a802bcc-db10-46c3-a2af-b8340a799d91"
    },
    {
      "module_id": "uid_generator",
      "path": "uid_generator.py",
      "category": "core",
      "module_doc": "Advanced UID Generator System for LLMStruct v2.1\n\nGenerates stable, unique identifiers for code entities using FQNAME-based approach.\nFixes duplicate issues in uid_components array.",
      "functions": [
        {
          "name": "normalize_path",
          "docstring": "Normalize file path for consistent UID generation",
          "line_range": null,
          "parameters": [
            "path"
          ],
          "decorators": []
        },
        {
          "name": "generate_uid",
          "docstring": "Generate stable UID using FQNAME approach.\n\nArgs:\n    entity_type: Type of entity\n    module_path: Path to module (e.g., 'src/llmstruct/core/uid_generator.py')\n    entity_name: Name of entity\n    parent_name: Parent entity name (for methods, nested classes)\n    \nReturns:\n    Stable UID string",
          "line_range": null,
          "parameters": [
            "entity_type",
            "module_path",
            "entity_name",
            "parent_name"
          ],
          "decorators": []
        },
        {
          "name": "generate_uid_components",
          "docstring": "Generate hierarchical UID components for navigation.\n\nFIXED: Removes duplicates and ensures each level is unique.\n\nArgs:\n    entity_type: Type of entity\n    module_path: Path to module\n    entity_name: Name of entity  \n    parent_name: Parent entity name\n    \nReturns:\n    List of hierarchical components without duplicates",
          "line_range": null,
          "parameters": [
            "entity_type",
            "module_path",
            "entity_name",
            "parent_name"
          ],
          "decorators": []
        },
        {
          "name": "create_stable_uid",
          "docstring": "Create stable UID based on content hash (fallback method).\n\nArgs:\n    content: Entity content\n    entity_type: Type of entity\n    \nReturns:\n    Stable hash-based UID",
          "line_range": null,
          "parameters": [
            "content",
            "entity_type"
          ],
          "decorators": []
        },
        {
          "name": "create_legacy_artifact_id",
          "docstring": "Create legacy artifact_id for backward compatibility.\n\nArgs:\n    entity: Entity dictionary\n    \nReturns:\n    Legacy artifact ID",
          "line_range": null,
          "parameters": [
            "entity"
          ],
          "decorators": []
        },
        {
          "name": "enhance_entity_with_uid",
          "docstring": "Enhance entity with UID system components.\n\nArgs:\n    entity: Entity dictionary\n    \nReturns:\n    Enhanced entity with uid, uid_components, and artifact_id",
          "line_range": null,
          "parameters": [
            "entity"
          ],
          "decorators": []
        },
        {
          "name": "validate_uid_uniqueness",
          "docstring": "Validate UID uniqueness across entities.\n\nArgs:\n    entities: List of entities with UIDs\n    \nReturns:\n    Dictionary with 'duplicates' and 'conflicts' lists",
          "line_range": null,
          "parameters": [
            "entities"
          ],
          "decorators": []
        },
        {
          "name": "create_module_uid",
          "docstring": "Create UID for module",
          "line_range": null,
          "parameters": [
            "module_path"
          ],
          "decorators": []
        },
        {
          "name": "create_function_uid",
          "docstring": "Create UID for function",
          "line_range": null,
          "parameters": [
            "module_path",
            "function_name"
          ],
          "decorators": []
        },
        {
          "name": "create_class_uid",
          "docstring": "Create UID for class",
          "line_range": null,
          "parameters": [
            "module_path",
            "class_name"
          ],
          "decorators": []
        },
        {
          "name": "create_method_uid",
          "docstring": "Create UID for method",
          "line_range": null,
          "parameters": [
            "module_path",
            "class_name",
            "method_name"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "UIDType",
          "docstring": "Types of entities that can have UIDs",
          "line_range": null,
          "methods": [],
          "bases": [
            "Enum"
          ]
        }
      ],
      "callgraph": {
        "normalize_path": [
          "list",
          "normalized.endswith",
          "Path"
        ],
        "generate_uid": [
          "fqname_parts.append",
          "normalize_path"
        ],
        "generate_uid_components": [
          "components.append",
          "parent_name.strip",
          "normalized_module.split",
          "seen.add",
          "entity_name.strip",
          "part.strip",
          "current_path.append",
          "unique_components.append",
          "set",
          "normalize_path"
        ],
        "create_stable_uid": [
          "content.encode",
          "hashlib.sha256"
        ],
        "create_legacy_artifact_id": [
          "combined.encode",
          "entity.get",
          "id_components.append",
          "hashlib.md5",
          "p.get",
          "normalize_path"
        ],
        "enhance_entity_with_uid": [
          "UIDType",
          "generate_uid",
          "entity.get",
          "entity.copy",
          "create_legacy_artifact_id",
          "generate_uid_components"
        ],
        "validate_uid_uniqueness": [
          "duplicates.append",
          "existing.get",
          "entity.get"
        ],
        "create_module_uid": [
          "Path",
          "generate_uid"
        ],
        "create_function_uid": [
          "generate_uid"
        ],
        "create_class_uid": [
          "generate_uid"
        ],
        "create_method_uid": [
          "generate_uid"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "enum",
        "hashlib",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "366f6dd3-28ae-45cc-b6dd-8f4a4fdd56a4"
    },
    {
      "module_id": "__init__",
      "path": "__init__.py",
      "category": "cli",
      "module_doc": "LLMStruct Core Module\n\nProvides core functionality for code analysis and structure generation.\nAll LLM-dependent features are optional and disabled by default.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "CodeSummary",
        "ConfigManager",
        "HeuristicProvider",
        "LLMProvider",
        "LLMStructConfig",
        "SummarySource",
        "SummarySystem",
        "UIDType",
        "config_manager",
        "create_legacy_artifact_id",
        "enhance_entity_with_uid",
        "generate_summary",
        "generate_uid",
        "generate_uid_components",
        "get_config",
        "get_config_manager",
        "get_summary_provider",
        "get_summary_system",
        "hash_content",
        "hash_entity",
        "hash_file",
        "hash_source",
        "hash_utils",
        "is_llm_enabled",
        "quick_content_hash",
        "quick_file_hash",
        "quick_source_hash",
        "summary_providers",
        "uid_generator"
      ],
      "hash": null,
      "artifact_id": "784d5a78-23ac-4028-b11e-aeff3e4c5b65"
    },
    {
      "module_id": "config_manager",
      "path": "config_manager.py",
      "category": "core",
      "module_doc": "Configuration Management System for LLMStruct\n\nManages global settings including LLM enablement, provider selection,\nand security controls for offline mode.",
      "functions": [
        {
          "name": "get_config_manager",
          "docstring": "Get global configuration manager instance",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "get_config",
          "docstring": "Get current configuration",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "is_llm_enabled",
          "docstring": "Check if LLM functionality is globally enabled",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "get_summary_provider",
          "docstring": "Get active summary provider (heuristic or llm)",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__post_init__",
          "docstring": "Apply environment variable overrides",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "config_path"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load configuration from file or create default",
          "line_range": null,
          "parameters": [
            "self",
            "config_path"
          ],
          "decorators": []
        },
        {
          "name": "_create_config_from_dict",
          "docstring": "Create configuration from dictionary",
          "line_range": null,
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "get_config",
          "docstring": "Get current configuration, loading if necessary",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "is_llm_enabled",
          "docstring": "Check if LLM functionality is enabled",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_summary_provider",
          "docstring": "Get active summary provider",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_config_template",
          "docstring": "Save configuration template file",
          "line_range": null,
          "parameters": [
            "self",
            "path"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMConfig",
          "docstring": "LLM-specific configuration",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "SummaryConfig",
          "docstring": "Summary generation configuration",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "MetricsConfig",
          "docstring": "Code metrics configuration",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "SecurityConfig",
          "docstring": "Security and privacy configuration",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "LLMStructConfig",
          "docstring": "Main LLMStruct configuration",
          "line_range": null,
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "Apply environment variable overrides",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "ConfigManager",
          "docstring": "Manages LLMStruct configuration with security-first defaults",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "config_path"
              ]
            },
            {
              "name": "load_config",
              "docstring": "Load configuration from file or create default",
              "line_range": null,
              "parameters": [
                "self",
                "config_path"
              ]
            },
            {
              "name": "_create_config_from_dict",
              "docstring": "Create configuration from dictionary",
              "line_range": null,
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "get_config",
              "docstring": "Get current configuration, loading if necessary",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "is_llm_enabled",
              "docstring": "Check if LLM functionality is enabled",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_summary_provider",
              "docstring": "Get active summary provider",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_config_template",
              "docstring": "Save configuration template file",
              "line_range": null,
              "parameters": [
                "self",
                "path"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__post_init__": [
          "os.getenv"
        ],
        "__init__": [],
        "load_config": [
          "print",
          "self._create_config_from_dict",
          "LLMStructConfig",
          "yaml.safe_load",
          "Path",
          "open"
        ],
        "_create_config_from_dict": [
          "summary_data.get",
          "security_data.get",
          "LLMStructConfig",
          "llm_data.get",
          "data.get"
        ],
        "get_config": [
          "get_config_manager"
        ],
        "is_llm_enabled": [
          "get_config_manager"
        ],
        "get_summary_provider": [
          "get_config_manager"
        ],
        "save_config_template": [
          "open",
          "yaml.dump"
        ],
        "get_config_manager": [
          "ConfigManager"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "dataclass",
        "dataclasses",
        "field",
        "os",
        "pathlib",
        "typing",
        "yaml"
      ],
      "hash": null,
      "artifact_id": "1c87de7e-5f2b-49be-b196-039f8eb6d606"
    }
  ]
}