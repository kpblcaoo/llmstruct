{
  "metadata": {
    "project_name": "llmstruct",
    "description": "Utility for generating structured JSON for codebases",
    "version": "2025-05-26T02:58:52.021641Z",
    "authors": [
      {
        "name": "Mikhail Stepanov",
        "github": "kpblcaoo",
        "email": "kpblcaoo@gmail.com"
      }
    ],
    "instructions": [
      "Follow best practices, warn if instructions conflict with them",
      "Preserve functionality, ensure idempotency",
      "Use attached struct.json for context and navigation",
      "Request missing modules or functions if needed",
      "Regenerate JSON for significant changes, track via Git and artifacts",
      "Use internal comments for descriptions, append brief summary"
    ],
    "goals": {
      "goals": [
        "Create universal JSON format for codebase structure (modules, functions, classes, calls, metadata)",
        "Ensure extensibility for new languages and entity types",
        "Develop modular, plugin-based parsers for new languages",
        "Maintain an open, RFC-style documented format",
        "Integrate with LLMs by generating and attaching JSON structure to queries"
      ]
    },
    "stats": {
      "modules_count": 127,
      "functions_count": 551,
      "classes_count": 42,
      "call_edges_count": 2123
    },
    "artifact_id": "035574cb-5971-47d2-a7a6-2f8d14970b22",
    "summary": "Structured JSON for llmstruct codebase",
    "tags": [
      "codebase",
      "automation"
    ],
    "folder_structure": [
      {
        "path": ".",
        "type": "directory",
        "artifact_id": "da0ce0bf-4fa4-4f11-94ed-eb653b884860",
        "metadata": {}
      },
      {
        "path": ".github",
        "type": "directory",
        "artifact_id": "b006dc99-47e3-44c3-8c6f-322a6c9cf34c",
        "metadata": {}
      },
      {
        "path": ".github/workflows",
        "type": "directory",
        "artifact_id": "daed1fb8-364d-4bf9-9048-1a26ae564588",
        "metadata": {}
      },
      {
        "path": ".llmstruct_cache",
        "type": "directory",
        "artifact_id": "8c647c26-50bb-49d8-a7f5-df7060a0083c",
        "metadata": {}
      },
      {
        "path": "bak",
        "type": "directory",
        "artifact_id": "3524e82e-e9dc-4f85-a990-da18c869a668",
        "metadata": {}
      },
      {
        "path": "board_cli.py",
        "type": "file",
        "artifact_id": "f86629d2-df0e-4ffc-ad2e-9043f13863f9",
        "metadata": {}
      },
      {
        "path": "collector.py",
        "type": "file",
        "artifact_id": "3efb240d-11b1-48ba-8055-521bef786211",
        "metadata": {}
      },
      {
        "path": "data",
        "type": "directory",
        "artifact_id": "252c8c84-0e13-4d76-9861-f7b44947dddc",
        "metadata": {}
      },
      {
        "path": "data/artifacts",
        "type": "directory",
        "artifact_id": "35361c87-ab5a-4094-b2e1-6593d307cb02",
        "metadata": {}
      },
      {
        "path": "data/copilot",
        "type": "directory",
        "artifact_id": "0970a05e-b9e6-47cf-ab5f-36320df8932a",
        "metadata": {}
      },
      {
        "path": "data/sessions",
        "type": "directory",
        "artifact_id": "e880c272-98a8-4ee9-b1d2-c580c02ae958",
        "metadata": {}
      },
      {
        "path": "docs",
        "type": "directory",
        "artifact_id": "d96974be-e5dd-4b7c-90c8-75720b871d32",
        "metadata": {}
      },
      {
        "path": "docs/ai-session-monitor",
        "type": "directory",
        "artifact_id": "2ac6e895-dc39-40d0-b61c-aeb53b4fe22b",
        "metadata": {}
      },
      {
        "path": "docs/cache.py",
        "type": "file",
        "artifact_id": "7299a7fd-63e6-489f-8c19-c2ff466b88ee",
        "metadata": {}
      },
      {
        "path": "docs/cli.py",
        "type": "file",
        "artifact_id": "80a97f39-bc24-4c09-a1c0-34f469901976",
        "metadata": {}
      },
      {
        "path": "docs/examples",
        "type": "directory",
        "artifact_id": "b833ba1a-d5dd-4c06-aa21-dde94f13d883",
        "metadata": {}
      },
      {
        "path": "docs/internal",
        "type": "directory",
        "artifact_id": "3a49152b-4e0d-4c01-b65b-159c7a1d9c43",
        "metadata": {}
      },
      {
        "path": "docs/internal/notes",
        "type": "directory",
        "artifact_id": "3b2c5813-91d8-4981-9f70-a1b65a14247d",
        "metadata": {}
      },
      {
        "path": "docs/internal/ru",
        "type": "directory",
        "artifact_id": "d3ae984c-366f-41d3-91e4-bd691e8fa241",
        "metadata": {}
      },
      {
        "path": "docs/json_selector.py",
        "type": "file",
        "artifact_id": "adb2544d-37f6-4c0c-90a7-ecdbd6c2ea76",
        "metadata": {}
      },
      {
        "path": "docs/ru",
        "type": "directory",
        "artifact_id": "6bd3f297-c0dc-40b7-ac69-3a3d1e6c4288",
        "metadata": {}
      },
      {
        "path": "docs/ru/examples",
        "type": "directory",
        "artifact_id": "97c66635-cd55-4a0b-b386-cab8ef95a514",
        "metadata": {}
      },
      {
        "path": "docs/self_run.py",
        "type": "file",
        "artifact_id": "7e500873-233c-4400-add2-943c4873c749",
        "metadata": {}
      },
      {
        "path": "docs/test_self_run.py",
        "type": "file",
        "artifact_id": "0687a394-ccae-4df6-b24d-b2e29a540a95",
        "metadata": {}
      },
      {
        "path": "examples",
        "type": "directory",
        "artifact_id": "5acef806-1094-4a94-b3f4-7a7e4d9dd4a7",
        "metadata": {}
      },
      {
        "path": "examples/python_project_main.py",
        "type": "file",
        "artifact_id": "f09b44c4-5feb-48a5-bbf9-fef0b4970c45",
        "metadata": {}
      },
      {
        "path": "examples/python_project_utils.py",
        "type": "file",
        "artifact_id": "63a526bf-8e0f-4ea7-a847-4ae6bbf31aef",
        "metadata": {}
      },
      {
        "path": "final_system_check.py",
        "type": "file",
        "artifact_id": "fd42154b-251a-4a0d-9c13-cc2d3c6c41eb",
        "metadata": {}
      },
      {
        "path": "final_system_validation.py",
        "type": "file",
        "artifact_id": "c31a61b4-b1c5-40db-842c-8b03844cabd3",
        "metadata": {}
      },
      {
        "path": "internal",
        "type": "directory",
        "artifact_id": "5696a425-480d-448b-91b4-fa2daa9b60d1",
        "metadata": {}
      },
      {
        "path": "schema",
        "type": "directory",
        "artifact_id": "f3302662-ae01-42cb-a805-652fda32bc74",
        "metadata": {}
      },
      {
        "path": "schema/common",
        "type": "directory",
        "artifact_id": "56701a1c-cf2d-4a57-8af7-b41177fef169",
        "metadata": {}
      },
      {
        "path": "schema/plugins",
        "type": "directory",
        "artifact_id": "a3abcbdf-df77-4c44-aeb3-f24d63d892de",
        "metadata": {}
      },
      {
        "path": "scripts",
        "type": "directory",
        "artifact_id": "c85c44d6-ef65-4256-a5d1-70fb26ccc9ad",
        "metadata": {}
      },
      {
        "path": "scripts/auto_update_struct.py",
        "type": "file",
        "artifact_id": "392b9475-b4cf-4bdb-b3d6-0cc9ae72291f",
        "metadata": {}
      },
      {
        "path": "scripts/collector.py",
        "type": "file",
        "artifact_id": "ff31a027-b24b-40df-b4c6-ffbf4d6ed7d2",
        "metadata": {}
      },
      {
        "path": "scripts/deploy_embedded_files.py",
        "type": "file",
        "artifact_id": "89c15993-1543-45de-be84-e340488113cf",
        "metadata": {}
      },
      {
        "path": "scripts/export_to_github_projects.py",
        "type": "file",
        "artifact_id": "111eaa95-5df8-457c-b421-325b79ef80ef",
        "metadata": {}
      },
      {
        "path": "scripts/session_cli.py",
        "type": "file",
        "artifact_id": "bc264d76-1ca4-42c6-8b02-b61d02d0a32d",
        "metadata": {}
      },
      {
        "path": "scripts/validate_refs.py",
        "type": "file",
        "artifact_id": "c013e6e0-62a4-44e0-ab25-77f644417cd3",
        "metadata": {}
      },
      {
        "path": "sorting_workspace",
        "type": "directory",
        "artifact_id": "3afd1c3a-e4bd-4511-850d-ff0a213446bf",
        "metadata": {}
      },
      {
        "path": "src",
        "type": "directory",
        "artifact_id": "ea85544e-c525-4492-a77f-6a4e65da0fac",
        "metadata": {}
      },
      {
        "path": "src/llmstruct",
        "type": "directory",
        "artifact_id": "197734e0-d771-46fa-9c4b-83773804d102",
        "metadata": {}
      },
      {
        "path": "src/llmstruct.egg-info",
        "type": "directory",
        "artifact_id": "d12a98c0-b1bd-4a68-a412-afde4e7ea7a0",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/__init__.py",
        "type": "file",
        "artifact_id": "b73a56ba-f285-42a8-afa2-b85396ce4ae9",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/__main__.py",
        "type": "file",
        "artifact_id": "feee6dc6-4cb4-4c86-87e2-10ecafc853fd",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cache.py",
        "type": "file",
        "artifact_id": "791dae1a-2ce5-4363-9b6e-b7554cc9946f",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli.py",
        "type": "file",
        "artifact_id": "63a826d4-c75c-4a11-b464-0bac8a309f3f",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli_commands.py",
        "type": "file",
        "artifact_id": "c0602b33-31ff-45e7-8f8d-22c94c07417b",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli_config.py",
        "type": "file",
        "artifact_id": "b4e77af5-cc90-4409-8034-5ff4991877c3",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli_core.py",
        "type": "file",
        "artifact_id": "c8867776-95af-45de-a89e-b371780fc159",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli_utils.py",
        "type": "file",
        "artifact_id": "41023fd4-3d23-47e7-a252-4e695e584801",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/context_orchestrator.py",
        "type": "file",
        "artifact_id": "cc3dc4bd-3333-44c3-9b55-f2c6870c7855",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/copilot.py",
        "type": "file",
        "artifact_id": "8748a4e7-0944-4686-bdeb-1b89d3fedc3c",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators",
        "type": "directory",
        "artifact_id": "3f556d14-0151-4fad-9a4f-e739c2ad1f5a",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators/__init__.py",
        "type": "file",
        "artifact_id": "279f99d9-bc26-4430-bcb6-ff1fb3987652",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators/json_generator.py",
        "type": "file",
        "artifact_id": "e9eaf037-30c9-4e97-afcd-e96bba081f6e",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/gh_view.py",
        "type": "file",
        "artifact_id": "0101e082-b5d9-4858-a341-8c53adf6105e",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/grok.py",
        "type": "file",
        "artifact_id": "d968ed4c-4a26-497c-9096-3bf365d64e12",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/json_selector.py",
        "type": "file",
        "artifact_id": "cbe4be5b-6162-47ce-89da-229f07e97ec9",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/llm_client.py",
        "type": "file",
        "artifact_id": "b733c56e-8797-4f0a-b836-cb2aff3d9144",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers",
        "type": "directory",
        "artifact_id": "5f1c5959-185a-4c6e-a6cd-fbfe584acbe6",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/__init__.py",
        "type": "file",
        "artifact_id": "178b048d-494a-46c5-b601-d7019672c979",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/javascript_parser.py",
        "type": "file",
        "artifact_id": "0e42030a-d6d0-44db-afff-3c2b4abbd095",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/python_parser.py",
        "type": "file",
        "artifact_id": "82846020-bf85-4703-bd35-dddfa783ec10",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/self_run.py",
        "type": "file",
        "artifact_id": "2f85de0b-50d3-4d01-a403-267e0b89b526",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/templates",
        "type": "directory",
        "artifact_id": "266fd634-eb8b-4729-a7d9-44546e02b6a3",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/templates/__init__.py",
        "type": "file",
        "artifact_id": "61eea4f7-d5e3-43d7-9692-408dad248a74",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/validators",
        "type": "directory",
        "artifact_id": "a70774f2-d683-4995-8dcf-4ee4fea8d686",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/validators/__init__.py",
        "type": "file",
        "artifact_id": "0f78822a-6aad-4356-ae6e-54140bd1d9ee",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/validators/json_validator.py",
        "type": "file",
        "artifact_id": "875db5c7-4c72-424d-ab4e-7df2dc730100",
        "metadata": {}
      },
      {
        "path": "temp_workfiles",
        "type": "directory",
        "artifact_id": "d6052192-973b-4af1-ae79-50d1130ad5f2",
        "metadata": {}
      },
      {
        "path": "test_audit.py",
        "type": "file",
        "artifact_id": "7a33c09c-0939-49ee-b0b2-cf05a4806e45",
        "metadata": {}
      },
      {
        "path": "test_cli.py",
        "type": "file",
        "artifact_id": "615dea96-d267-4ba0-ad06-ff4fa42c6ce2",
        "metadata": {}
      },
      {
        "path": "test_cli_demo.py",
        "type": "file",
        "artifact_id": "721975ef-00d0-465a-8eeb-6db73bc965bb",
        "metadata": {}
      },
      {
        "path": "test_cli_integration.py",
        "type": "file",
        "artifact_id": "31988018-a187-4540-a6e6-ed6fa6ef2b7f",
        "metadata": {}
      },
      {
        "path": "test_efficiency.py",
        "type": "file",
        "artifact_id": "971410e8-c599-49d1-bc26-286044500839",
        "metadata": {}
      },
      {
        "path": "test_export.py",
        "type": "file",
        "artifact_id": "383ada4f-9379-404c-a13e-5114fcbc60ed",
        "metadata": {}
      },
      {
        "path": "test_modular_cli.py",
        "type": "file",
        "artifact_id": "c3cbe788-8c78-4997-af3c-a1ce395caef3",
        "metadata": {}
      },
      {
        "path": "tests",
        "type": "directory",
        "artifact_id": "ad7028dd-fdae-4b5d-b2a5-2537ce92be4c",
        "metadata": {}
      },
      {
        "path": "tests/__init__.py",
        "type": "file",
        "artifact_id": "6d5f7cc7-57be-4884-9fc4-57850228a33b",
        "metadata": {}
      },
      {
        "path": "tests/test_self_run.py",
        "type": "file",
        "artifact_id": "f0606a72-f06b-4536-ba09-18f6b681dcd6",
        "metadata": {}
      },
      {
        "path": "tmp",
        "type": "directory",
        "artifact_id": "567601e9-da28-4208-8541-cf5274804ade",
        "metadata": {}
      },
      {
        "path": "validate_schemas.py",
        "type": "file",
        "artifact_id": "14fa1d92-b6c2-494c-84f2-2fcba5b56228",
        "metadata": {}
      },
      {
        "path": "validate_sessions.py",
        "type": "file",
        "artifact_id": "ba47f62e-7827-46a6-be26-65bba544cf5b",
        "metadata": {}
      },
      {
        "path": "verify_llm_response.py",
        "type": "file",
        "artifact_id": "44e301fe-61c1-4852-80aa-3cdd0c6c8ef6",
        "metadata": {}
      },
      {
        "path": "workflow_archive",
        "type": "directory",
        "artifact_id": "cc7997da-43bd-456f-a276-dff6abb29006",
        "metadata": {}
      }
    ]
  },
  "toc": [
    {
      "module_id": "test_cli_integration",
      "path": "test_cli_integration.py",
      "category": "test",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "c0eda686-46e5-48ba-9876-fe08f3c1e752"
    },
    {
      "module_id": "test_efficiency",
      "path": "test_efficiency.py",
      "category": "test",
      "functions": 12,
      "classes": 0,
      "summary": "",
      "artifact_id": "a5400256-758a-4f24-af97-93a3f9875537"
    },
    {
      "module_id": "test_cli",
      "path": "test_cli.py",
      "category": "test",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "ddbdf4e5-3cf3-4067-9847-a603b6f43d0e"
    },
    {
      "module_id": "test_audit",
      "path": "test_audit.py",
      "category": "test",
      "functions": 1,
      "classes": 0,
      "summary": "Test script for audit functionality.",
      "artifact_id": "785fc710-40cb-43a4-bc1e-6e9168c01bf6"
    },
    {
      "module_id": "collector",
      "path": "collector.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "606c763d-adbc-43b9-8856-ece4e73b2f9e"
    },
    {
      "module_id": "final_system_check",
      "path": "final_system_check.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "5107ee53-a1c3-4286-ab72-0c473a539e72"
    },
    {
      "module_id": "board_cli",
      "path": "board_cli.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "CLI Kanban Board for llmstruct tasks and ideas",
      "artifact_id": "f22b3b40-142c-4d66-a2e4-9f590fe3d74d"
    },
    {
      "module_id": "final_system_validation",
      "path": "final_system_validation.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "667bb999-699b-4568-923c-9f8b1a6acb95"
    },
    {
      "module_id": "validate_schemas",
      "path": "validate_schemas.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "JSON Schema Validation Script for llmstruct",
      "artifact_id": "0c221813-81e4-441d-b420-1e26b9af7992"
    },
    {
      "module_id": "test_export",
      "path": "test_export.py",
      "category": "test",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "af11d8c4-54f5-405f-b9a6-629ddcd7ee90"
    },
    {
      "module_id": "test_modular_cli",
      "path": "test_modular_cli.py",
      "category": "test",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "42d5a546-d06b-48d9-88da-497aa3caa634"
    },
    {
      "module_id": "validate_sessions",
      "path": "validate_sessions.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "Session Schema Validation Script for llmstruct",
      "artifact_id": "f6ddfa21-381d-444f-b19a-ff9b9be6b38e"
    },
    {
      "module_id": "verify_llm_response",
      "path": "verify_llm_response.py",
      "category": "core",
      "functions": 6,
      "classes": 0,
      "summary": "",
      "artifact_id": "20362bfc-8be0-49e3-8f6c-565f21d1735a"
    },
    {
      "module_id": "test_cli_demo",
      "path": "test_cli_demo.py",
      "category": "test",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "3ed724b4-e8f8-4642-bea4-cd1dd2b21af4"
    },
    {
      "module_id": "examples.python_project_utils",
      "path": "examples/python_project_utils.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "Utility functions for the sample project.",
      "artifact_id": "a750b1ca-32d8-477e-ac34-31a87517ef90"
    },
    {
      "module_id": "examples.python_project_main",
      "path": "examples/python_project_main.py",
      "category": "core",
      "functions": 2,
      "classes": 1,
      "summary": "Main module for the sample project.",
      "artifact_id": "066aeca3-4773-41fd-91ec-5ccaea94f91b"
    },
    {
      "module_id": "docs.test_self_run",
      "path": "docs/test_self_run.py",
      "category": "test",
      "functions": 5,
      "classes": 0,
      "summary": "",
      "artifact_id": "d311c47d-8d66-42d9-815c-f6842b6705c2"
    },
    {
      "module_id": "docs.cache",
      "path": "docs/cache.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "2a75b907-18f8-4875-b20f-111b285b1126"
    },
    {
      "module_id": "docs.self_run",
      "path": "docs/self_run.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "14d645ec-91e9-454e-bd65-9b4b7a125f14"
    },
    {
      "module_id": "docs.json_selector",
      "path": "docs/json_selector.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "9fa6ded1-ddca-464c-b503-fe5de28bbe7e"
    },
    {
      "module_id": "docs.cli",
      "path": "docs/cli.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "",
      "artifact_id": "6742ab0e-320b-4841-8602-e346296bc301"
    },
    {
      "module_id": "src.llmstruct.cli_config",
      "path": "src/llmstruct/cli_config.py",
      "category": "core",
      "functions": 18,
      "classes": 1,
      "summary": "CLI configuration management.",
      "artifact_id": "5116c483-667f-4384-9a2d-0a34f578da1f"
    },
    {
      "module_id": "src.llmstruct.grok",
      "path": "src/llmstruct/grok.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "",
      "artifact_id": "ae05c752-4f41-44ee-b618-6b3ca98f7b2f"
    },
    {
      "module_id": "src.llmstruct.cli_commands",
      "path": "src/llmstruct/cli_commands.py",
      "category": "core",
      "functions": 34,
      "classes": 1,
      "summary": "CLI command processing and handlers.",
      "artifact_id": "9b8ce337-32cf-4c88-848d-4f7b5f867c0c"
    },
    {
      "module_id": "src.llmstruct.context_orchestrator",
      "path": "src/llmstruct/context_orchestrator.py",
      "category": "core",
      "functions": 19,
      "classes": 5,
      "summary": "Smart Context Orchestration for LLMStruct",
      "artifact_id": "60c5d1d7-1f0f-45e3-a972-9a2f6a94ef49"
    },
    {
      "module_id": "src.llmstruct.__init__",
      "path": "src/llmstruct/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "1d35c0f7-51ac-4b6c-b754-32038fa8a878"
    },
    {
      "module_id": "src.llmstruct.__main__",
      "path": "src/llmstruct/__main__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "d48624a0-422c-4c4b-862e-33ff7e48b9dc"
    },
    {
      "module_id": "src.llmstruct.cli_utils",
      "path": "src/llmstruct/cli_utils.py",
      "category": "core",
      "functions": 13,
      "classes": 1,
      "summary": "CLI utility functions.",
      "artifact_id": "d74e09f5-8b25-499e-918e-becd7d4f0546"
    },
    {
      "module_id": "src.llmstruct.copilot",
      "path": "src/llmstruct/copilot.py",
      "category": "core",
      "functions": 26,
      "classes": 5,
      "summary": "LLMStruct Copilot Integration Module",
      "artifact_id": "173df6f4-d469-4b68-b7fe-94cabea97fd8"
    },
    {
      "module_id": "src.llmstruct.gh_view",
      "path": "src/llmstruct/gh_view.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "GitHub visualization/graph feature (gh-view-v1)",
      "artifact_id": "ab5d6ec9-f4cd-4dfc-bb6d-44c2dbd303fa"
    },
    {
      "module_id": "src.llmstruct.llm_client",
      "path": "src/llmstruct/llm_client.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "2d506d31-39bb-4d10-8072-7afa6874be12"
    },
    {
      "module_id": "src.llmstruct.cache",
      "path": "src/llmstruct/cache.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "5a986388-91f3-4613-b3a5-d7e9c43dc409"
    },
    {
      "module_id": "src.llmstruct.self_run",
      "path": "src/llmstruct/self_run.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "679deeec-7aaf-4a42-9121-658ec5b2e615"
    },
    {
      "module_id": "src.llmstruct.json_selector",
      "path": "src/llmstruct/json_selector.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "f7e3278e-2300-450d-bdd3-63c1fc883ef5"
    },
    {
      "module_id": "src.llmstruct.cli",
      "path": "src/llmstruct/cli.py",
      "category": "core",
      "functions": 17,
      "classes": 0,
      "summary": "LLMStruct CLI - Main entry point for the command-line interface.",
      "artifact_id": "d60d9d0d-e6ee-4e91-bbe0-18e648ffee42"
    },
    {
      "module_id": "src.llmstruct.cli_core",
      "path": "src/llmstruct/cli_core.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "Core CLI functionality and main loop.",
      "artifact_id": "52a8e118-1e38-4048-b664-e35208f38ffc"
    },
    {
      "module_id": "src.llmstruct.parsers.__init__",
      "path": "src/llmstruct/parsers/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "artifact_id": "59593816-3cd1-4ff0-9ad2-2d190de80e14"
    },
    {
      "module_id": "src.llmstruct.parsers.javascript_parser",
      "path": "src/llmstruct/parsers/javascript_parser.py",
      "category": "core",
      "functions": 5,
      "classes": 1,
      "summary": "",
      "artifact_id": "5ee01bcf-4c75-439a-a1e9-77b63198f921"
    },
    {
      "module_id": "src.llmstruct.parsers.python_parser",
      "path": "src/llmstruct/parsers/python_parser.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "",
      "artifact_id": "a220824f-4c54-43f6-bf59-e5c721918bcd"
    },
    {
      "module_id": "src.llmstruct.templates.__init__",
      "path": "src/llmstruct/templates/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Templates for LLM prompts used in LLMStruct integration.",
      "artifact_id": "64667caf-9d27-4f12-b9c3-28e2d38d52fe"
    },
    {
      "module_id": "src.llmstruct.validators.__init__",
      "path": "src/llmstruct/validators/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "artifact_id": "a8db65b5-5a52-44a9-877c-f7bd768a94a1"
    },
    {
      "module_id": "src.llmstruct.validators.json_validator",
      "path": "src/llmstruct/validators/json_validator.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "3c04af0f-56c1-4c12-9408-2163330a085d"
    },
    {
      "module_id": "src.llmstruct.generators.json_generator",
      "path": "src/llmstruct/generators/json_generator.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "9a9359b9-8844-4380-875f-e54beea7b625"
    },
    {
      "module_id": "src.llmstruct.generators.__init__",
      "path": "src/llmstruct/generators/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "artifact_id": "e0e2a239-a2b6-4738-8938-2648d928c9c5"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_self_run",
      "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_self_run.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "086197c6-feab-48e7-9b5c-f033b7db6ea8"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.collector (1)",
      "path": "temp_workfiles/unsorted_mess/22.05.25/collector (1).py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "480547b7-7136-4dd4-895a-1800e2fc1f68"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.test_self_run",
      "path": "temp_workfiles/unsorted_mess/22.05.25/test_self_run.py",
      "category": "test",
      "functions": 5,
      "classes": 0,
      "summary": "",
      "artifact_id": "0725b207-4f0c-4ddf-8fa2-fef1f02cec7f"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.test_cli",
      "path": "temp_workfiles/unsorted_mess/22.05.25/test_cli.py",
      "category": "test",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "e0a62f09-8235-436d-9ab0-a3ddf6a111a6"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.deploy_embedded_files (1)",
      "path": "temp_workfiles/unsorted_mess/22.05.25/deploy_embedded_files (1).py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "09d6ef58-6c6e-4d59-bb20-96a8da38e468"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_json_selector",
      "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_json_selector.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "0aed5af1-48ca-4633-bc5b-a46a29955674"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.collector",
      "path": "temp_workfiles/unsorted_mess/22.05.25/collector.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "25bbeb01-5d6c-495b-be7c-184223f0c7f8"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.scripts_validate_refs",
      "path": "temp_workfiles/unsorted_mess/22.05.25/scripts_validate_refs.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "57c4c755-7b26-4fd3-acd1-b35a1bf82cbd"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_cache",
      "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_cache.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "7bcb5dba-a314-45e2-be1e-4457508c50a6"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.cli_parser",
      "path": "temp_workfiles/unsorted_mess/22.05.25/cli_parser.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "8052f073-39ee-4e80-aa0c-f14e2eac0119"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.scripts_collector",
      "path": "temp_workfiles/unsorted_mess/22.05.25/scripts_collector.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "bd1e522f-6da8-4015-b621-e8ae3b988267"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.cache",
      "path": "temp_workfiles/unsorted_mess/22.05.25/cache.py",
      "category": "core",
      "functions": 7,
      "classes": 1,
      "summary": "",
      "artifact_id": "4d5981a1-f432-4f0b-bb88-9cc46b664544"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.validate_refs",
      "path": "temp_workfiles/unsorted_mess/22.05.25/validate_refs.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "93ede707-332f-49c4-945b-46e6f5629961"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.test_deploy_embedded_files",
      "path": "temp_workfiles/unsorted_mess/22.05.25/test_deploy_embedded_files.py",
      "category": "test",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "aae949b3-9d71-4e38-acb6-0408c3095e1e"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.cli",
      "path": "temp_workfiles/unsorted_mess/22.05.25/cli.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "a073b8ae-85f3-4067-9457-e3eae8354163"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.deploy_embedded_files",
      "path": "temp_workfiles/unsorted_mess/22.05.25/deploy_embedded_files.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "65894b16-4d33-45b5-b266-8fe58fbab1cd"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_cli",
      "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_cli.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "",
      "artifact_id": "54457c0a-b0e7-4f03-a9e2-f4c7851124c5"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.extract_artifacts",
      "path": "temp_workfiles/unsorted_mess/22.05.25/extract_artifacts.py",
      "category": "core",
      "functions": 6,
      "classes": 0,
      "summary": "",
      "artifact_id": "e0bced34-16ef-4de6-96c6-34fcf3757e4b"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.dumper",
      "path": "temp_workfiles/unsorted_mess/dump/dumper.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "dc957883-2b6b-470f-9826-70e75a5bf2ff"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_generators___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_generators___init__.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "artifact_id": "f7f72d12-7087-4a43-800a-5eabcdbf3973"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.examples_python_project_utils",
      "path": "temp_workfiles/unsorted_mess/dump/examples_python_project_utils.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "Utility functions for the sample project.",
      "artifact_id": "9b3e118b-8b9f-456b-b0f0-bf3bf56dc7c3"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_ideas_tree",
      "path": "temp_workfiles/unsorted_mess/dump/generate_ideas_tree.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "680b300f-6928-4a26-b1b2-afb030054897"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct___init__.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "LLMStruct: A tool for generating JSON-based code structures for LLM integration.",
      "artifact_id": "cedfee1e-def5-4dac-ae21-138f6456b4dd"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_efficiency1",
      "path": "temp_workfiles/unsorted_mess/dump/test_efficiency1.py",
      "category": "test",
      "functions": 7,
      "classes": 0,
      "summary": "",
      "artifact_id": "d859cc81-5d9d-46bc-9a73-fe9f894f4b5b"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_efficiency",
      "path": "temp_workfiles/unsorted_mess/dump/test_efficiency.py",
      "category": "test",
      "functions": 6,
      "classes": 0,
      "summary": "",
      "artifact_id": "fdc59ec6-9b5a-4969-b200-c818cfa37644"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.grok",
      "path": "temp_workfiles/unsorted_mess/dump/grok.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "",
      "artifact_id": "97eae184-cf4e-4df6-8d9f-af80770a8a24"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct___main__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct___main__.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "3a2a5d34-268f-4ced-9cdf-d1a943ee0c00"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_ru_docs (1)",
      "path": "temp_workfiles/unsorted_mess/dump/generate_ru_docs (1).py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "dff4a2ad-37ea-4941-a933-5da2a5d8f251"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_efficiency (1)",
      "path": "temp_workfiles/unsorted_mess/dump/test_efficiency (1).py",
      "category": "test",
      "functions": 9,
      "classes": 0,
      "summary": "",
      "artifact_id": "9f511dda-dc1f-4155-adff-dab3dc455b24"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.json_generator",
      "path": "temp_workfiles/unsorted_mess/dump/json_generator.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "0bd50fe1-00ba-4ce2-99f7-b47c481b8a01"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.llm_client_engines",
      "path": "temp_workfiles/unsorted_mess/dump/llm_client_engines.py",
      "category": "core",
      "functions": 5,
      "classes": 0,
      "summary": "",
      "artifact_id": "81ee84bc-37b0-4a9d-9921-1787467a02c6"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.llm_client_config",
      "path": "temp_workfiles/unsorted_mess/dump/llm_client_config.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "37f405e4-0c73-44cb-b80d-13dcb920f6a6"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_parsers_python_parser",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_parsers_python_parser.py",
      "category": "core",
      "functions": 11,
      "classes": 1,
      "summary": "",
      "artifact_id": "f8aeeb80-1722-4dba-9fe8-6aca87a48108"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_generators_json_generator",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_generators_json_generator.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "796ea96f-528e-4660-921d-5e237fae0a18"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_llmstruct",
      "path": "temp_workfiles/unsorted_mess/dump/generate_llmstruct.py",
      "category": "core",
      "functions": 16,
      "classes": 1,
      "summary": "Generate JSON for workspace based on user instructions template.",
      "artifact_id": "c97e1b0e-0ccc-4936-8550-acb1076a3038"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_docs (1)",
      "path": "temp_workfiles/unsorted_mess/dump/generate_docs (1).py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "ab8a0089-6821-419b-9059-d035eb21b3b2"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_ru_docs",
      "path": "temp_workfiles/unsorted_mess/dump/generate_ru_docs.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "732239c7-6b89-46c2-9f3c-7a2ca3403b04"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.collector",
      "path": "temp_workfiles/unsorted_mess/dump/collector.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "e84aeb17-7516-42d3-9eb8-075089628de1"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.collect_docs (1)",
      "path": "temp_workfiles/unsorted_mess/dump/collect_docs (1).py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "f5fbe7b6-ec47-4e7b-a03d-2fe4a152e37b"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.collect_docs",
      "path": "temp_workfiles/unsorted_mess/dump/collect_docs.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "682fcf19-7664-4178-bc2a-1cfd5dd693ec"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.refactored_structure",
      "path": "temp_workfiles/unsorted_mess/dump/refactored_structure.py",
      "category": "core",
      "functions": 5,
      "classes": 3,
      "summary": "",
      "artifact_id": "eaa516ee-5701-45e2-b22c-2e8bf998d934"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_parsers_python_parser (1)",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_parsers_python_parser (1).py",
      "category": "core",
      "functions": 4,
      "classes": 1,
      "summary": "",
      "artifact_id": "77cec129-cff0-4732-9afa-f83cb7826bd0"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_templates___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_templates___init__.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "Templates for LLM prompts used in LLMStruct integration.",
      "artifact_id": "abac1d30-be3c-47df-9d18-2014d64ab6aa"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_end_to_end (1)",
      "path": "temp_workfiles/unsorted_mess/dump/test_end_to_end (1).py",
      "category": "test",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "0e29c4aa-e73b-4cd8-936c-cc0962c91e3e"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_docs",
      "path": "temp_workfiles/unsorted_mess/dump/generate_docs.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "45009ac5-8cc1-440c-9120-a02c31d75c7e"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.examples_python_project_main",
      "path": "temp_workfiles/unsorted_mess/dump/examples_python_project_main.py",
      "category": "core",
      "functions": 2,
      "classes": 1,
      "summary": "Main module for the sample project.",
      "artifact_id": "710ad766-b826-480b-9100-296552f2873d"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.filter_llmstruct_json",
      "path": "temp_workfiles/unsorted_mess/dump/filter_llmstruct_json.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "379df94e-7e23-4e36-a196-9f86e372faf0"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_ru_internal_docs",
      "path": "temp_workfiles/unsorted_mess/dump/generate_ru_internal_docs.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "b94a9bc1-38f3-4735-aeaf-ef92bf5f87d6"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.llm_client",
      "path": "temp_workfiles/unsorted_mess/dump/llm_client.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "46fcc3d1-c75e-4495-a7df-06c82da61eb5"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.llm_client (3)",
      "path": "temp_workfiles/unsorted_mess/dump/llm_client (3).py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "9ae994f1-f8a0-4e54-8bdd-d541d24f5600"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.tests___init__",
      "path": "temp_workfiles/unsorted_mess/dump/tests___init__.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "Test suite for LLMStruct, covering parsers, generators, validators, and integration.",
      "artifact_id": "0c3dc5dc-6793-4cf5-b13c-99968474d03d"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.check_docs",
      "path": "temp_workfiles/unsorted_mess/dump/check_docs.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "3e940d4f-94e6-41fa-be51-276cb32a1f4f"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.javascript_parser",
      "path": "temp_workfiles/unsorted_mess/dump/javascript_parser.py",
      "category": "core",
      "functions": 5,
      "classes": 1,
      "summary": "",
      "artifact_id": "5b650cdb-6a94-410a-b001-39b8b547503d"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.self_run",
      "path": "temp_workfiles/unsorted_mess/dump/self_run.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "a4fb5858-d2ac-4f20-8b4b-5c1410c6ef6b"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_generators_json_generator (1)",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_generators_json_generator (1).py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "75147e0b-fafd-4037-b523-85322d863b71"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_end_to_end",
      "path": "temp_workfiles/unsorted_mess/dump/test_end_to_end.py",
      "category": "test",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "0d3020ff-bb9d-4b56-91a2-70be3bd772c2"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.python_parser",
      "path": "temp_workfiles/unsorted_mess/dump/python_parser.py",
      "category": "core",
      "functions": 6,
      "classes": 2,
      "summary": "",
      "artifact_id": "92905a4b-71cd-4655-965b-7864191725ae"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_parsers___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_parsers___init__.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "artifact_id": "bcb0e915-5035-400c-af80-a8991186c89a"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_cli (1)",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_cli (1).py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "253a0f8f-4490-425a-b5e2-d75b5ffb9aa4"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_efficiency_proxybypass",
      "path": "temp_workfiles/unsorted_mess/dump/test_efficiency_proxybypass.py",
      "category": "test",
      "functions": 8,
      "classes": 0,
      "summary": "",
      "artifact_id": "2de2430e-aa1a-4f86-82a4-81b8f41f999c"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.scripts_setup_github",
      "path": "temp_workfiles/unsorted_mess/dump/scripts_setup_github.py",
      "category": "core",
      "functions": 6,
      "classes": 0,
      "summary": "",
      "artifact_id": "784893a7-4c26-4f98-aed8-8aae4e65bd71"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct___init__ (1)",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct___init__ (1).py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "59baa6ca-dd81-4a2d-aad4-b8eabe57fa5a"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.cli",
      "path": "temp_workfiles/unsorted_mess/dump/cli.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "",
      "artifact_id": "9e07ab23-865c-4e1b-9dee-3e18212b9faa"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_validators___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_validators___init__.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "artifact_id": "05aef646-4895-4821-a4b7-e2f7a7f23fa0"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_llmstruct (1)",
      "path": "temp_workfiles/unsorted_mess/dump/generate_llmstruct (1).py",
      "category": "core",
      "functions": 15,
      "classes": 1,
      "summary": "Generate JSON for workspace based on user instructions template.",
      "artifact_id": "57aa5e8a-cb1c-499f-aa9f-0fb641f7086f"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.json_validator",
      "path": "temp_workfiles/unsorted_mess/dump/json_validator.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "3e1e519a-fbac-4c5c-a2db-a8df6405db6d"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.validate_json",
      "path": "temp_workfiles/unsorted_mess/dump/validate_json.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "a2b18170-b6e8-402a-ab9a-0fbf40bbd42a"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_cli",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_cli.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "f9b15fd4-5662-4595-9ed9-99cd2d9cd1c9"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.clean.internal_cleaner",
      "path": "temp_workfiles/unsorted_mess/dump/clean/internal_cleaner.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "51aae0f2-68c5-47c6-8ddb-e21c3ddd24f4"
    },
    {
      "module_id": "bak.20250522_102827.scripts.collector",
      "path": "bak/20250522_102827/scripts/collector.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "ad90c739-7d23-49a6-8e77-8b5a965396c9"
    },
    {
      "module_id": "bak.20250522_102827.scripts.validate_refs",
      "path": "bak/20250522_102827/scripts/validate_refs.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "9a81d4fe-96f2-4d0a-9c00-18dcfa289eb2"
    },
    {
      "module_id": "bak.20250522_102827.scripts.deploy_embedded_files",
      "path": "bak/20250522_102827/scripts/deploy_embedded_files.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "f703eeaa-cd96-46c2-9779-b595df603c44"
    },
    {
      "module_id": "bak.20250522_131121.scripts.collector",
      "path": "bak/20250522_131121/scripts/collector.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "70fd95c3-7039-4618-8dcc-b96cb7c875d1"
    },
    {
      "module_id": "bak.20250522_131121.scripts.validate_refs",
      "path": "bak/20250522_131121/scripts/validate_refs.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "5cf25e0c-a152-4723-9904-e74edd9be77b"
    },
    {
      "module_id": "bak.20250522_131121.scripts.deploy_embedded_files",
      "path": "bak/20250522_131121/scripts/deploy_embedded_files.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "83fef984-02f6-49f3-b944-8f3442def3e3"
    },
    {
      "module_id": "tests.test_self_run",
      "path": "tests/test_self_run.py",
      "category": "test",
      "functions": 5,
      "classes": 0,
      "summary": "",
      "artifact_id": "5069ef6a-788b-4b38-8956-1b78d8c444d9"
    },
    {
      "module_id": "tests.__init__",
      "path": "tests/__init__.py",
      "category": "test",
      "functions": 0,
      "classes": 0,
      "summary": "Test suite for LLMStruct, covering parsers, generators, validators, and integration.",
      "artifact_id": "04472d6a-00a1-4186-99b0-013815f8264c"
    },
    {
      "module_id": "scripts.collector",
      "path": "scripts/collector.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "5da91f49-a0a7-4802-b216-3fe459aff2bb"
    },
    {
      "module_id": "scripts.session_cli",
      "path": "scripts/session_cli.py",
      "category": "core",
      "functions": 10,
      "classes": 1,
      "summary": "Session Management CLI",
      "artifact_id": "e0176ac6-792f-4d9b-a483-436c810b585f"
    },
    {
      "module_id": "scripts.auto_update_struct",
      "path": "scripts/auto_update_struct.py",
      "category": "core",
      "functions": 8,
      "classes": 0,
      "summary": "Automatic struct.json update script",
      "artifact_id": "24ea6a0e-840d-45f9-aa6d-0e0f62d1e79d"
    },
    {
      "module_id": "scripts.export_to_github_projects",
      "path": "scripts/export_to_github_projects.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "Export script for GitHub Projects integration",
      "artifact_id": "ec356119-2246-436c-b9be-05b9764db215"
    },
    {
      "module_id": "scripts.validate_refs",
      "path": "scripts/validate_refs.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "15e48150-1d17-4d17-b8fc-27a154d0a3a0"
    },
    {
      "module_id": "scripts.deploy_embedded_files",
      "path": "scripts/deploy_embedded_files.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "b927acdd-162a-434d-9b28-7bbf55c308d1"
    }
  ],
  "modules": [
    {
      "module_id": "test_cli_integration",
      "path": "test_cli_integration.py",
      "category": "test",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "c0eda686-46e5-48ba-9876-fe08f3c1e752"
    },
    {
      "module_id": "test_efficiency",
      "path": "test_efficiency.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "get_system_metrics",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "is_local_address",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "url"
          ],
          "decorators": []
        },
        {
          "name": "setup_proxy",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "proxy_url"
          ],
          "decorators": []
        },
        {
          "name": "check_ollama",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url"
          ],
          "decorators": []
        },
        {
          "name": "optimize_prompt",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "struct_data",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "run_llm_request",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "payload",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "check_llmstruct_cli",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_with_llmstruct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "project_path",
            "proxy",
            "use_placeholder"
          ],
          "decorators": []
        },
        {
          "name": "test_without_llmstruct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "project_path",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "test_with_grok",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_key",
            "project_path",
            "proxy",
            "use_placeholder"
          ],
          "decorators": []
        },
        {
          "name": "evaluate_accuracy",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "response_text",
            "expected"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_system_metrics": [
          "psutil.virtual_memory",
          "psutil.cpu_percent"
        ],
        "is_local_address": [
          "ipaddress.ip_address",
          "urlparse"
        ],
        "setup_proxy": [
          "os.getenv"
        ],
        "check_ollama": [
          "requests.get",
          "str",
          "response.json",
          "api_url.replace"
        ],
        "optimize_prompt": [
          "print",
          "struct_data.split",
          "len"
        ],
        "run_llm_request": [
          "requests.Session",
          "type",
          "time.perf_counter",
          "response.json",
          "response.raise_for_status",
          "get_system_metrics",
          "print",
          "len",
          "session.post",
          "is_local_address"
        ],
        "check_llmstruct_cli": [
          "shutil.which"
        ],
        "test_with_llmstruct": [
          "str",
          "run_llm_request",
          "subprocess.run",
          "f.read",
          "FileNotFoundError",
          "Path",
          "open",
          "json.dump",
          "check_llmstruct_cli",
          "target_path.exists",
          "optimize_prompt"
        ],
        "test_without_llmstruct": [
          "f.read",
          "Path",
          "open",
          "run_llm_request",
          "optimize_prompt"
        ],
        "test_with_grok": [
          "f.read",
          "FileNotFoundError",
          "Path",
          "open",
          "json.dump",
          "test_grok",
          "target_path.exists",
          "optimize_prompt"
        ],
        "evaluate_accuracy": [
          "response_text.lower",
          "sum",
          "len"
        ],
        "main": [
          "argparse.ArgumentParser",
          "str",
          "evaluate_accuracy",
          "parser.parse_args",
          "range",
          "parser.add_argument",
          "test_with_llmstruct",
          "test_without_llmstruct",
          "check_ollama",
          "print",
          "test_with_grok",
          "open",
          "setup_proxy",
          "json.dump",
          "check_llmstruct_cli"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "ipaddress",
        "json",
        "os",
        "pathlib",
        "psutil",
        "requests",
        "shutil",
        "src.llmstruct.grok",
        "subprocess",
        "test_grok",
        "time",
        "urllib.parse",
        "urlparse"
      ],
      "hash": null,
      "artifact_id": "a5400256-758a-4f24-af97-93a3f9875537"
    },
    {
      "module_id": "test_cli",
      "path": "test_cli.py",
      "category": "test",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "ddbdf4e5-3cf3-4067-9847-a603b6f43d0e"
    },
    {
      "module_id": "test_audit",
      "path": "test_audit.py",
      "category": "test",
      "module_doc": "Test script for audit functionality.",
      "functions": [
        {
          "name": "test_audit_status",
          "docstring": "Test audit status directly.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_audit_status": [
          "ideas_data.keys",
          "tasks_file.exists",
          "list",
          "t.get",
          "tasks_data.keys",
          "json.load",
          "Path",
          "i.get",
          "print",
          "open",
          "ideas_file.exists",
          "len"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "785fc710-40cb-43a4-bc1e-6e9168c01bf6"
    },
    {
      "module_id": "collector",
      "path": "collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "is_text_file",
          "docstring": "Check if file is likely a text file based on extension.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "collect_project",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "Path",
          "gitignore_parser.parse_gitignore",
          "gitignore_path.exists"
        ],
        "is_text_file": [],
        "collect_project": [
          "gitignore",
          "str",
          "file_path.is_file",
          "is_text_file",
          "load_gitignore",
          "doc_files.items",
          "f.read",
          "logger.warning",
          "Path",
          "open",
          "logger.error",
          "any",
          "json.dump",
          "logger.info",
          "root_dir.rglob",
          "len"
        ]
      },
      "dependencies": [
        "Path",
        "gitignore_parser",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "606c763d-adbc-43b9-8856-ece4e73b2f9e"
    },
    {
      "module_id": "final_system_check",
      "path": "final_system_check.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "5107ee53-a1c3-4286-ab72-0c473a539e72"
    },
    {
      "module_id": "board_cli",
      "path": "board_cli.py",
      "category": "core",
      "module_doc": "CLI Kanban Board for llmstruct tasks and ideas\n- Reads data/tasks.json and data/ideas.json\n- Shows board in terminal: columns by status, rows by priority\n- Supports filtering, sorting, and shows links between tasks/ideas",
      "functions": [
        {
          "name": "load_json",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "path"
          ],
          "decorators": []
        },
        {
          "name": "group_by_status_and_priority",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "items",
            "kind"
          ],
          "decorators": []
        },
        {
          "name": "render_board",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "board",
            "kind"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json": [
          "open",
          "json.load"
        ],
        "group_by_status_and_priority": [
          "item.get",
          "defaultdict"
        ],
        "render_board": [
          "kind.capitalize",
          "table.add_column",
          "console.print",
          "table.add_row",
          "item.get",
          "Table",
          "links.append",
          "Panel",
          "links.extend"
        ],
        "main": [
          "group_by_status_and_priority",
          "render_board",
          "tasks_data.get",
          "console.rule",
          "load_json",
          "ideas_data.get"
        ]
      },
      "dependencies": [
        "Console",
        "Panel",
        "Path",
        "Table",
        "box",
        "collections",
        "defaultdict",
        "json",
        "os",
        "pathlib",
        "rich",
        "rich.console",
        "rich.panel",
        "rich.table"
      ],
      "hash": null,
      "artifact_id": "f22b3b40-142c-4d66-a2e4-9f590fe3d74d"
    },
    {
      "module_id": "final_system_validation",
      "path": "final_system_validation.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "667bb999-699b-4568-923c-9f8b1a6acb95"
    },
    {
      "module_id": "validate_schemas",
      "path": "validate_schemas.py",
      "category": "core",
      "module_doc": "JSON Schema Validation Script for llmstruct\nValidates all enhanced JSON files against their appropriate schemas.\nPart of TSK-130 implementation.",
      "functions": [
        {
          "name": "load_json",
          "docstring": "Load JSON file with error handling.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_json_against_schema",
          "docstring": "Validate JSON data against schema.",
          "line_range": null,
          "parameters": [
            "json_data",
            "schema_data",
            "file_name"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {
        "load_json": [
          "print",
          "open",
          "json.load"
        ],
        "validate_json_against_schema": [
          "str",
          "validate",
          "print"
        ],
        "main": [
          "validate_json_against_schema",
          "print",
          "load_json",
          "errors.append"
        ]
      },
      "dependencies": [
        "Draft7Validator",
        "ValidationError",
        "json",
        "jsonschema",
        "sys",
        "validate"
      ],
      "hash": null,
      "artifact_id": "0c221813-81e4-441d-b420-1e26b9af7992"
    },
    {
      "module_id": "test_export",
      "path": "test_export.py",
      "category": "test",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "Path",
        "json",
        "pathlib",
        "sys"
      ],
      "hash": null,
      "artifact_id": "af11d8c4-54f5-405f-b9a6-629ddcd7ee90"
    },
    {
      "module_id": "test_modular_cli",
      "path": "test_modular_cli.py",
      "category": "test",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "42d5a546-d06b-48d9-88da-497aa3caa634"
    },
    {
      "module_id": "validate_sessions",
      "path": "validate_sessions.py",
      "category": "core",
      "module_doc": "Session Schema Validation Script for llmstruct\nValidates session management JSON files against their schemas.\nFocused validation for session system only.",
      "functions": [
        {
          "name": "load_json",
          "docstring": "Load JSON file with error handling.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_json_against_schema",
          "docstring": "Validate JSON data against schema.",
          "line_range": null,
          "parameters": [
            "json_data",
            "schema_data",
            "file_name"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {
        "load_json": [
          "print",
          "open",
          "json.load"
        ],
        "validate_json_against_schema": [
          "str",
          "list",
          "validator.iter_errors",
          "print",
          "Draft7Validator",
          "len"
        ],
        "main": [
          "validate_json_against_schema",
          "print",
          "load_json",
          "errors.append"
        ]
      },
      "dependencies": [
        "Draft7Validator",
        "ValidationError",
        "json",
        "jsonschema",
        "sys",
        "validate"
      ],
      "hash": null,
      "artifact_id": "f6ddfa21-381d-444f-b19a-ff9b9be6b38e"
    },
    {
      "module_id": "verify_llm_response",
      "path": "verify_llm_response.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_json_file",
          "docstring": "Load a JSON file and return its contents.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "verify_response_with_struct",
          "docstring": "Verify llm_response.json against struct.json.",
          "line_range": null,
          "parameters": [
            "response_text",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "verify_response_without_struct",
          "docstring": "Verify llm_response.json based on LLMstruct principles.",
          "line_range": null,
          "parameters": [
            "response_text"
          ],
          "decorators": []
        },
        {
          "name": "generate_metrics",
          "docstring": "Generate metrics for the response per EXT-004.",
          "line_range": null,
          "parameters": [
            "response_data",
            "server_log"
          ],
          "decorators": []
        },
        {
          "name": "update_tasks_json",
          "docstring": "Append a new task to tasks.json.",
          "line_range": null,
          "parameters": [
            "tasks_file",
            "new_task"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json_file": [
          "open",
          "json.load",
          "logging.error"
        ],
        "verify_response_with_struct": [
          "logging.info",
          "e.startswith",
          "expected_extensions.issubset",
          "expected_files.issubset",
          "logging.error",
          "expected_goals.issubset",
          "set",
          "struct_data.get",
          "re.findall"
        ],
        "verify_response_without_struct": [
          "logging.info",
          "expected_extensions.issubset",
          "expected_files.issubset",
          "response_text.lower",
          "principle.lower",
          "logging.error",
          "expected_goals.issubset",
          "set",
          "re.findall"
        ],
        "generate_metrics": [
          "datetime.utcnow",
          "server_log.get",
          "len",
          "re.findall",
          "response_text.split"
        ],
        "update_tasks_json": [
          "logging.info",
          "tasks.get",
          "load_json_file",
          "open",
          "json.dump"
        ],
        "main": [
          "argparse.ArgumentParser",
          "logging.info",
          "parser.parse_args",
          "load_json_file",
          "parser.add_argument",
          "update_tasks_json",
          "open",
          "json.dump",
          "generate_metrics",
          "verify_response_without_struct",
          "verify_response_with_struct"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "argparse",
        "datetime",
        "json",
        "logging",
        "os",
        "re",
        "typing"
      ],
      "hash": null,
      "artifact_id": "20362bfc-8be0-49e3-8f6c-565f21d1735a"
    },
    {
      "module_id": "test_cli_demo",
      "path": "test_cli_demo.py",
      "category": "test",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "3ed724b4-e8f8-4642-bea4-cd1dd2b21af4"
    },
    {
      "module_id": "examples.python_project_utils",
      "path": "examples/python_project_utils.py",
      "category": "core",
      "module_doc": "Utility functions for the sample project.",
      "functions": [
        {
          "name": "helper",
          "docstring": "Help the main function.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "log",
          "docstring": "Log a message.",
          "line_range": null,
          "parameters": [
            "message"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "helper": [
          "log"
        ],
        "log": [
          "logging.info"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": null,
      "artifact_id": "a750b1ca-32d8-477e-ac34-31a87517ef90"
    },
    {
      "module_id": "examples.python_project_main",
      "path": "examples/python_project_main.py",
      "category": "core",
      "module_doc": "Main module for the sample project.",
      "functions": [
        {
          "name": "main",
          "docstring": "Run the program.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "Execute the app.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "App",
          "docstring": "Application class.",
          "line_range": null,
          "methods": [
            {
              "name": "run",
              "docstring": "Execute the app.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "main": [
          "utils.helper",
          "print"
        ],
        "run": [
          "utils.log"
        ]
      },
      "dependencies": [
        "utils"
      ],
      "hash": null,
      "artifact_id": "066aeca3-4773-41fd-91ec-5ccaea94f91b"
    },
    {
      "module_id": "docs.test_self_run",
      "path": "docs/test_self_run.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "test_filter_json_init_json",
          "docstring": "Test filter_json with init.json structure.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_select_json_partial",
          "docstring": "Test partial JSON loading.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_cache_json",
          "docstring": "Test JSON caching.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_attach_to_llm_request_init_json",
          "docstring": "Test attach_to_llm_request with init.json and cache.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_attach_to_llm_request_missing_file",
          "docstring": "Test attach_to_llm_request with missing file.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_filter_json_init_json": [
          "filter_json"
        ],
        "test_select_json_partial": [
          "select_json",
          "str",
          "open",
          "json.dump"
        ],
        "test_cache_json": [
          "str",
          "cache.cache_json",
          "cache.close",
          "open",
          "json.dump",
          "cache.get_metadata",
          "JSONCache",
          "cache.get_full_json"
        ],
        "test_attach_to_llm_request_init_json": [
          "str",
          "cache.close",
          "attach_to_llm_request",
          "open",
          "json.dump",
          "JSONCache"
        ],
        "test_attach_to_llm_request_missing_file": [
          "str",
          "attach_to_llm_request"
        ]
      },
      "dependencies": [
        "JSONCache",
        "Path",
        "attach_to_llm_request",
        "filter_json",
        "filter_struct",
        "json",
        "llmstruct.cache",
        "llmstruct.json_selector",
        "llmstruct.self_run",
        "pathlib",
        "pytest",
        "select_json"
      ],
      "hash": null,
      "artifact_id": "d311c47d-8d66-42d9-815c-f6842b6705c2"
    },
    {
      "module_id": "docs.cache",
      "path": "docs/cache.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize SQLite cache for JSON files.",
          "line_range": null,
          "parameters": [
            "self",
            "db_path"
          ],
          "decorators": []
        },
        {
          "name": "create_tables",
          "docstring": "Create tables for metadata and file paths.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cache_json",
          "docstring": "Cache JSON metadata and store full file path.",
          "line_range": null,
          "parameters": [
            "self",
            "json_path",
            "artifact_id",
            "summary",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "get_metadata",
          "docstring": "Retrieve metadata by artifact_id.",
          "line_range": null,
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "get_full_json",
          "docstring": "Load full JSON by artifact_id.",
          "line_range": null,
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Close database connection.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JSONCache",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize SQLite cache for JSON files.",
              "line_range": null,
              "parameters": [
                "self",
                "db_path"
              ]
            },
            {
              "name": "create_tables",
              "docstring": "Create tables for metadata and file paths.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cache_json",
              "docstring": "Cache JSON metadata and store full file path.",
              "line_range": null,
              "parameters": [
                "self",
                "json_path",
                "artifact_id",
                "summary",
                "tags"
              ]
            },
            {
              "name": "get_metadata",
              "docstring": "Retrieve metadata by artifact_id.",
              "line_range": null,
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "get_full_json",
              "docstring": "Load full JSON by artifact_id.",
              "line_range": null,
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "close",
              "docstring": "Close database connection.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.create_tables",
          "sqlite3.connect"
        ],
        "create_tables": [],
        "cache_json": [
          "logging.info",
          "str",
          "content.encode",
          "f.read",
          "hashlib.sha256",
          "Path",
          "json.dumps",
          "open",
          "json_file.exists",
          "logging.error"
        ],
        "get_metadata": [
          "json.loads",
          "cursor.fetchone"
        ],
        "get_full_json": [
          "logging.error",
          "open",
          "json.load",
          "cursor.fetchone"
        ],
        "close": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "hashlib",
        "json",
        "logging",
        "pathlib",
        "sqlite3",
        "typing"
      ],
      "hash": null,
      "artifact_id": "2a75b907-18f8-4875-b20f-111b285b1126"
    },
    {
      "module_id": "docs.self_run",
      "path": "docs/self_run.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_struct",
          "docstring": "Filter struct.json or init.json based on prompt keywords.",
          "line_range": null,
          "parameters": [
            "struct",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "Attach filtered JSON to LLM prompt, using cache if available.",
          "line_range": null,
          "parameters": [
            "context_path",
            "prompt",
            "cache"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_struct": [
          "module.get",
          "struct.get",
          "prompt.lower",
          "any",
          "filter_json"
        ],
        "attach_to_llm_request": [
          "logging.info",
          "filter_json",
          "prompt.lower",
          "cache.cache_json",
          "json.dumps",
          "Path",
          "filter_struct",
          "cache.get_metadata",
          "logging.error",
          "select_json",
          "context_file.exists",
          "cache.get_full_json"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "JSONCache",
        "List",
        "Path",
        "cache",
        "filter_json",
        "json",
        "json_selector",
        "logging",
        "pathlib",
        "select_json",
        "typing"
      ],
      "hash": null,
      "artifact_id": "14d645ec-91e9-454e-bd65-9b4b7a125f14"
    },
    {
      "module_id": "docs.json_selector",
      "path": "docs/json_selector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_json",
          "docstring": "Filter JSON data by key-value pair and select fields.",
          "line_range": null,
          "parameters": [
            "data",
            "filter_key",
            "filter_value",
            "fields"
          ],
          "decorators": []
        },
        {
          "name": "select_json",
          "docstring": "Load and filter JSON file, optionally parsing partially.",
          "line_range": null,
          "parameters": [
            "json_path",
            "filter_key",
            "filter_value",
            "fields",
            "partial"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_json": [
          "filtered.append",
          "item.get",
          "isinstance",
          "data.get"
        ],
        "select_json": [
          "f.seek",
          "ijson.parse",
          "current_item.get",
          "path.append",
          "filtered.append",
          "json.load",
          "Path",
          "prefix.startswith",
          "open",
          "json_file.exists",
          "logging.error",
          "filter_json"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "ijson",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "9fa6ded1-ddca-464c-b503-fe5de28bbe7e"
    },
    {
      "module_id": "docs.cli",
      "path": "docs/cli.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from llmstruct.toml or return empty dict.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default /tmp) and return the path.",
          "line_range": null,
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": null,
          "parameters": [
            "response"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "line.startswith",
          "gitignore_path.exists",
          "gitignore_path.open",
          "Path",
          "logging.error",
          "line.strip"
        ],
        "load_config": [
          "toml.load",
          "config_path\u30aa\u30fc\u30d7\u30f3",
          "Path",
          "config_path.exists",
          "logging.error"
        ],
        "read_file_content": [
          "path.open",
          "f.read",
          "Path",
          "path.is_file",
          "logging.error"
        ],
        "write_to_file": [
          "logging.info",
          "str",
          "base_path.mkdir",
          "f.write",
          "Path",
          "file_path.exists",
          "file_path.open",
          "logging.error",
          "logging.warning"
        ],
        "parse_files_from_response": [
          "files.append",
          "content.strip",
          "filename.strip",
          "re.findall"
        ],
        "interactive": [
          "write_match.group",
          "read_file_content",
          "input",
          "parse_files_from_response",
          "files_to_write.append",
          "get_folder_structure",
          "json.dumps",
          "Path",
          "re.search",
          "load_gitignore",
          "cache.close",
          "write_dir.startswith",
          "attach_to_llm_request",
          "parse",
          "LLMClient",
          "sorted",
          "logging.error",
          "os.listdir",
          "write_to_file",
          "scan_match.group",
          "client.query",
          "user_input.lower",
          "print",
          "JSONCache",
          "logging.warning"
        ],
        "parse": [
          "logging.info",
          "load_gitignore",
          "load_config",
          "cache.cache_json",
          "cache.close",
          "generate_json",
          "Path",
          "json.dump",
          "logging.error",
          "JSONCache",
          "logging.warning",
          "config.get"
        ],
        "query": [
          "logging.info",
          "client.query",
          "cache.close",
          "LLMClient",
          "Path",
          "json.dump",
          "logging.error",
          "JSONCache"
        ],
        "context": [
          "logging.warning"
        ],
        "dogfood": [
          "logging.warning"
        ],
        "review": [
          "logging.warning"
        ],
        "main": [
          "argparse.ArgumentParser",
          "parse_parser.add_argument",
          "interactive",
          "parser.add_subparsers",
          "interactive_parser.add_argument",
          "context",
          "context_parser.add_argument",
          "dogfood",
          "dogfood_parser.add_argument",
          "parser.parse_args",
          "parse",
          "review_parser.add_argument",
          "review",
          "subparsers.add_parser",
          "query_parser.add_argument",
          "asyncio.run",
          "query"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "generate_json",
        "get_folder_structure",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "logging",
        "os",
        "pathlib",
        "re",
        "toml",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "6742ab0e-320b-4841-8602-e346296bc301"
    },
    {
      "module_id": "src.llmstruct.cli_config",
      "path": "src/llmstruct/cli_config.py",
      "category": "core",
      "module_doc": "CLI configuration management.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize configuration manager.",
          "line_range": null,
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load configuration from llmstruct.toml.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_cache_config",
          "docstring": "Get cache configuration section.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_copilot_config",
          "docstring": "Get Copilot configuration section.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_queue_config",
          "docstring": "Get queue configuration section.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_config",
          "docstring": "Get context configuration section.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_gitignore_patterns",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_dirs",
          "docstring": "Get directories to exclude from scanning.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_include_patterns",
          "docstring": "Get file patterns to include.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_patterns",
          "docstring": "Get file patterns to exclude.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_max_file_size",
          "docstring": "Get maximum file size for processing (in bytes).",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_auto_update_config",
          "docstring": "Get auto-update configuration.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "is_auto_update_enabled",
          "docstring": "Check if auto-update is enabled.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_struct_file_path",
          "docstring": "Get path to struct.json file.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_file_path",
          "docstring": "Get path to context file.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_config",
          "docstring": "Save current configuration to file.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "update_config",
          "docstring": "Update configuration value.",
          "line_range": null,
          "parameters": [
            "self",
            "section",
            "key",
            "value"
          ],
          "decorators": []
        },
        {
          "name": "reload_config",
          "docstring": "Reload configuration from file.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLIConfig",
          "docstring": "Manages CLI configuration from llmstruct.toml and other sources.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize configuration manager.",
              "line_range": null,
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load configuration from llmstruct.toml.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_cache_config",
              "docstring": "Get cache configuration section.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_copilot_config",
              "docstring": "Get Copilot configuration section.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_queue_config",
              "docstring": "Get queue configuration section.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_config",
              "docstring": "Get context configuration section.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_gitignore_patterns",
              "docstring": "Load and normalize patterns from .gitignore.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_exclude_dirs",
              "docstring": "Get directories to exclude from scanning.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_include_patterns",
              "docstring": "Get file patterns to include.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_exclude_patterns",
              "docstring": "Get file patterns to exclude.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_max_file_size",
              "docstring": "Get maximum file size for processing (in bytes).",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_auto_update_config",
              "docstring": "Get auto-update configuration.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "is_auto_update_enabled",
              "docstring": "Check if auto-update is enabled.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_struct_file_path",
              "docstring": "Get path to struct.json file.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_file_path",
              "docstring": "Get path to context file.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_config",
              "docstring": "Save current configuration to file.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "update_config",
              "docstring": "Update configuration value.",
              "line_range": null,
              "parameters": [
                "self",
                "section",
                "key",
                "value"
              ]
            },
            {
              "name": "reload_config",
              "docstring": "Reload configuration from file.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self._load_config"
        ],
        "_load_config": [
          "toml.load",
          "logging.error"
        ],
        "get_cache_config": [],
        "get_copilot_config": [],
        "get_queue_config": [],
        "get_context_config": [],
        "get_gitignore_patterns": [
          "line.startswith",
          "gitignore_path.exists",
          "gitignore_path.open",
          "Path",
          "logging.error",
          "line.strip"
        ],
        "get_exclude_dirs": [
          "set",
          "cli_config.get",
          "list",
          "parsing_config.get"
        ],
        "get_include_patterns": [
          "cli_config.get",
          "parsing_config.get"
        ],
        "get_exclude_patterns": [
          "cli_config.get",
          "parsing_config.get"
        ],
        "get_max_file_size": [],
        "get_auto_update_config": [],
        "is_auto_update_enabled": [
          "self.get_auto_update_config"
        ],
        "get_struct_file_path": [],
        "get_context_file_path": [],
        "save_config": [
          "toml.dump",
          "logging.error"
        ],
        "update_config": [
          "self.save_config"
        ],
        "reload_config": [
          "self._load_config"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "logging",
        "pathlib",
        "toml",
        "typing"
      ],
      "hash": null,
      "artifact_id": "5116c483-667f-4384-9a2d-0a34f578da1f"
    },
    {
      "module_id": "src.llmstruct.grok",
      "path": "src/llmstruct/grok.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "test_grok",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_key",
            "prompt",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "api_key",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "generate",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GrokClient",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "api_key",
                "proxy"
              ]
            },
            {
              "name": "generate",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "requests.Session"
        ],
        "generate": [
          "response.raise_for_status",
          "prompt.split",
          "response.json",
          "len"
        ],
        "test_grok": [
          "client.generate",
          "GrokClient",
          "time.perf_counter"
        ]
      },
      "dependencies": [
        "requests",
        "time"
      ],
      "hash": null,
      "artifact_id": "ae05c752-4f41-44ee-b618-6b3ca98f7b2f"
    },
    {
      "module_id": "src.llmstruct.cli_commands",
      "path": "src/llmstruct/cli_commands.py",
      "category": "core",
      "module_doc": "CLI command processing and handlers.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize command processor.",
          "line_range": null,
          "parameters": [
            "self",
            "root_dir",
            "config",
            "utils"
          ],
          "decorators": []
        },
        {
          "name": "set_cache",
          "docstring": "Set cache instance.",
          "line_range": null,
          "parameters": [
            "self",
            "cache"
          ],
          "decorators": []
        },
        {
          "name": "set_copilot",
          "docstring": "Set Copilot manager instance.",
          "line_range": null,
          "parameters": [
            "self",
            "copilot_manager"
          ],
          "decorators": []
        },
        {
          "name": "process_command",
          "docstring": "Process a command starting with /.",
          "line_range": null,
          "parameters": [
            "self",
            "command_line"
          ],
          "decorators": []
        },
        {
          "name": "process_prompt",
          "docstring": "Process a regular user prompt (not a command).",
          "line_range": null,
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "cmd_help",
          "docstring": "Show help information.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_view",
          "docstring": "View file or directory contents.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_write",
          "docstring": "Write content to file.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_queue",
          "docstring": "Handle queue operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_cache",
          "docstring": "Handle cache operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_copilot",
          "docstring": "Handle Copilot operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_config",
          "docstring": "View or modify configuration.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_status",
          "docstring": "Show system status.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_backup",
          "docstring": "Create backup of file.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_parse",
          "docstring": "Parse project structure.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_audit",
          "docstring": "Audit and recover missing tasks/ideas from source files.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_mode",
          "docstring": "Handle context mode operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_auto_update",
          "docstring": "Handle auto-update struct.json command.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_struct_status",
          "docstring": "Handle struct status command.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_context",
          "docstring": "Handle smart context operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_session",
          "docstring": "Handle session management operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "_start_new_session",
          "docstring": "Start a new session.",
          "line_range": null,
          "parameters": [
            "self",
            "branch_name",
            "sessions_dir"
          ],
          "decorators": []
        },
        {
          "name": "_switch_session",
          "docstring": "Switch to an existing session.",
          "line_range": null,
          "parameters": [
            "self",
            "session_id",
            "sessions_dir"
          ],
          "decorators": []
        },
        {
          "name": "_show_session_status",
          "docstring": "Show current session status.",
          "line_range": null,
          "parameters": [
            "self",
            "current_session_file"
          ],
          "decorators": []
        },
        {
          "name": "_generate_session_summary",
          "docstring": "Generate session summary.",
          "line_range": null,
          "parameters": [
            "self",
            "current_session_file",
            "worklog_file"
          ],
          "decorators": []
        },
        {
          "name": "_list_sessions",
          "docstring": "List all sessions.",
          "line_range": null,
          "parameters": [
            "self",
            "ai_sessions_file"
          ],
          "decorators": []
        },
        {
          "name": "_audit_scan_sources",
          "docstring": "Scan dump directory for recoverable content.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_audit_recover_placeholders",
          "docstring": "Recover placeholder entries from source files.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_audit_show_status",
          "docstring": "Show current placeholder status.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_process_queue",
          "docstring": "Process command queue.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_show_queue_status",
          "docstring": "Show queue status.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_clear_queue",
          "docstring": "Clear command queue.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_list_queue",
          "docstring": "List queue items.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_trigger_auto_update",
          "docstring": "Trigger auto-update of struct.json.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CommandProcessor",
          "docstring": "Processes CLI commands and user prompts.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize command processor.",
              "line_range": null,
              "parameters": [
                "self",
                "root_dir",
                "config",
                "utils"
              ]
            },
            {
              "name": "set_cache",
              "docstring": "Set cache instance.",
              "line_range": null,
              "parameters": [
                "self",
                "cache"
              ]
            },
            {
              "name": "set_copilot",
              "docstring": "Set Copilot manager instance.",
              "line_range": null,
              "parameters": [
                "self",
                "copilot_manager"
              ]
            },
            {
              "name": "process_command",
              "docstring": "Process a command starting with /.",
              "line_range": null,
              "parameters": [
                "self",
                "command_line"
              ]
            },
            {
              "name": "process_prompt",
              "docstring": "Process a regular user prompt (not a command).",
              "line_range": null,
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "cmd_help",
              "docstring": "Show help information.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_view",
              "docstring": "View file or directory contents.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_write",
              "docstring": "Write content to file.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_queue",
              "docstring": "Handle queue operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_cache",
              "docstring": "Handle cache operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_copilot",
              "docstring": "Handle Copilot operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_config",
              "docstring": "View or modify configuration.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_status",
              "docstring": "Show system status.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_backup",
              "docstring": "Create backup of file.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_parse",
              "docstring": "Parse project structure.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_audit",
              "docstring": "Audit and recover missing tasks/ideas from source files.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_mode",
              "docstring": "Handle context mode operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "handle_auto_update",
              "docstring": "Handle auto-update struct.json command.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "handle_struct_status",
              "docstring": "Handle struct status command.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_context",
              "docstring": "Handle smart context operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_session",
              "docstring": "Handle session management operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "_start_new_session",
              "docstring": "Start a new session.",
              "line_range": null,
              "parameters": [
                "self",
                "branch_name",
                "sessions_dir"
              ]
            },
            {
              "name": "_switch_session",
              "docstring": "Switch to an existing session.",
              "line_range": null,
              "parameters": [
                "self",
                "session_id",
                "sessions_dir"
              ]
            },
            {
              "name": "_show_session_status",
              "docstring": "Show current session status.",
              "line_range": null,
              "parameters": [
                "self",
                "current_session_file"
              ]
            },
            {
              "name": "_generate_session_summary",
              "docstring": "Generate session summary.",
              "line_range": null,
              "parameters": [
                "self",
                "current_session_file",
                "worklog_file"
              ]
            },
            {
              "name": "_list_sessions",
              "docstring": "List all sessions.",
              "line_range": null,
              "parameters": [
                "self",
                "ai_sessions_file"
              ]
            },
            {
              "name": "_audit_scan_sources",
              "docstring": "Scan dump directory for recoverable content.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_audit_recover_placeholders",
              "docstring": "Recover placeholder entries from source files.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_audit_show_status",
              "docstring": "Show current placeholder status.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_process_queue",
              "docstring": "Process command queue.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_show_queue_status",
              "docstring": "Show queue status.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_clear_queue",
              "docstring": "Clear command queue.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_list_queue",
              "docstring": "List queue items.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_trigger_auto_update",
              "docstring": "Trigger auto-update of struct.json.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "set_cache": [],
        "set_copilot": [],
        "process_command": [
          "command_line.split",
          "command_line.strip",
          "print",
          "logging.error",
          "len"
        ],
        "process_prompt": [
          "logging.info",
          "context_data.get",
          "CopilotEvent",
          "prompt.strip",
          "context_info.get",
          "print",
          "logging.error",
          "logging.warning",
          "get_optimized_context",
          "len"
        ],
        "cmd_help": [
          "print"
        ],
        "cmd_view": [
          "args.strip",
          "print"
        ],
        "cmd_write": [
          "re.match",
          "self._trigger_auto_update",
          "match.groups",
          "content.strip",
          "print",
          "content.endswith",
          "content.startswith"
        ],
        "cmd_queue": [
          "self._list_queue",
          "self._show_queue_status",
          "self._clear_queue",
          "self._process_queue",
          "print",
          "args.strip"
        ],
        "cmd_cache": [
          "args.strip",
          "print",
          "len"
        ],
        "cmd_copilot": [
          "args.strip",
          "CopilotEvent",
          "print"
        ],
        "cmd_config": [
          "args.strip",
          "section.title",
          "print"
        ],
        "cmd_status": [
          "print"
        ],
        "cmd_backup": [
          "args.strip",
          "print"
        ],
        "cmd_parse": [
          "generate_json",
          "print",
          "logging.error"
        ],
        "cmd_audit": [
          "self._audit_recover_placeholders",
          "self._audit_scan_sources",
          "print",
          "logging.error",
          "args.strip",
          "self._audit_show_status"
        ],
        "cmd_mode": [
          "context_data.get",
          "metrics.get",
          "print",
          "args.strip",
          "get_optimized_context",
          "len"
        ],
        "handle_auto_update": [
          "str",
          "subprocess.run",
          "Path",
          "print",
          "logging.error",
          "script_path.exists"
        ],
        "handle_struct_status": [
          "metadata.get",
          "time.ctime",
          "json.load",
          "Path",
          "struct_path.exists",
          "print",
          "script_path.exists",
          "open",
          "stats.get",
          "logging.error",
          "struct_path.stat",
          "struct_data.get",
          "len"
        ],
        "cmd_context": [
          "orchestrator.get_context_for_scenario",
          "context.get",
          "metrics.get",
          "config.items",
          "create_context_orchestrator",
          "print",
          "logging.error",
          "args.strip",
          "get_optimized_context",
          "len"
        ],
        "cmd_session": [
          "self._generate_session_summary",
          "logging.error",
          "self._switch_session",
          "self._list_sessions",
          "Path",
          "print",
          "self._start_new_session",
          "args.strip",
          "self._show_session_status",
          "len"
        ],
        "_start_new_session": [
          "ai_sessions_file.exists",
          "str",
          "os.makedirs",
          "uuid.uuid4",
          "json.load",
          "datetime.now",
          "open",
          "json.dump",
          "print"
        ],
        "_switch_session": [
          "ai_sessions_file.exists",
          "ai_sessions.get",
          "json.load",
          "session.get",
          "print",
          "open",
          "json.dump",
          "target_session.get"
        ],
        "_show_session_status": [
          "json.load",
          "current_session_file.exists",
          "print",
          "open",
          "current_session.get"
        ],
        "_generate_session_summary": [
          "worklog_file.exists",
          "json.load",
          "current_session_file.exists",
          "entry.get",
          "print",
          "open",
          "len",
          "current_session.get",
          "worklog.get"
        ],
        "_list_sessions": [
          "ai_sessions_file.exists",
          "ai_sessions.get",
          "json.load",
          "session.get",
          "print",
          "open",
          "len"
        ],
        "_audit_scan_sources": [
          "list",
          "dump_dir.exists",
          "json.load",
          "Path",
          "print",
          "open",
          "isinstance",
          "dump_dir.glob",
          "len"
        ],
        "_audit_recover_placeholders": [
          "print"
        ],
        "_audit_show_status": [
          "tasks_file.exists",
          "t.get",
          "json.load",
          "Path",
          "i.get",
          "print",
          "open",
          "ideas_file.exists",
          "len"
        ],
        "_process_queue": [
          "queue_file.open",
          "item.get",
          "json.load",
          "Path",
          "print",
          "queue_file.exists",
          "logging.error",
          "queue_data.get"
        ],
        "_show_queue_status": [
          "queue_file.open",
          "item.get",
          "json.load",
          "Path",
          "sum",
          "print",
          "queue_file.exists",
          "queue_data.get",
          "len"
        ],
        "_clear_queue": [
          "queue_file.open",
          "json.load",
          "Path",
          "print",
          "queue_file.exists",
          "json.dump"
        ],
        "_list_queue": [
          "enumerate",
          "queue_file.open",
          "item.get",
          "json.load",
          "Path",
          "print",
          "queue_file.exists",
          "queue_data.get"
        ],
        "_trigger_auto_update": [
          "self.handle_auto_update",
          "print",
          "logging.error"
        ]
      },
      "dependencies": [
        "Any",
        "CLIConfig",
        "CLIUtils",
        "CopilotContextManager",
        "CopilotEvent",
        "Dict",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "cli_config",
        "cli_utils",
        "copilot",
        "create_context_orchestrator",
        "datetime",
        "generate_json",
        "get_optimized_context",
        "get_optimized_context_for_scenario",
        "initialize_copilot",
        "json",
        "llmstruct.cache",
        "llmstruct.context_orchestrator",
        "llmstruct.copilot",
        "llmstruct.generators.json_generator",
        "logging",
        "os",
        "pathlib",
        "re",
        "subprocess",
        "sys",
        "time",
        "trigger_copilot_event",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "9b8ce337-32cf-4c88-848d-4f7b5f867c0c"
    },
    {
      "module_id": "src.llmstruct.context_orchestrator",
      "path": "src/llmstruct/context_orchestrator.py",
      "category": "core",
      "module_doc": "Smart Context Orchestration for LLMStruct\nOptimizes context loading for different LLM usage scenarios",
      "functions": [
        {
          "name": "create_context_orchestrator",
          "docstring": "Factory function to create context orchestrator.",
          "line_range": null,
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_optimized_context",
          "docstring": "Get optimized context for scenario - convenience function.\n\nArgs:\n    project_root: Project root directory\n    scenario: Usage scenario (cli_direct, vscode_copilot, session_work)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
          "line_range": null,
          "parameters": [
            "project_root",
            "scenario",
            "file_path",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load context orchestration configuration.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_for_scenario",
          "docstring": "Get optimized context for specific usage scenario.\n\nArgs:\n    scenario: Usage scenario (cli_direct, vscode_copilot, etc.)\n    file_path: Optional file path for focused context\n    custom_budget: Optional custom token budget\n    \nReturns:\n    Optimized context dictionary",
          "line_range": null,
          "parameters": [
            "self",
            "scenario",
            "file_path",
            "custom_budget"
          ],
          "decorators": []
        },
        {
          "name": "_get_budget_for_scenario",
          "docstring": "Create budget configuration for scenario.",
          "line_range": null,
          "parameters": [
            "self",
            "scenario_config"
          ],
          "decorators": []
        },
        {
          "name": "_load_full_context",
          "docstring": "Load complete context without token restrictions.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_focused_context",
          "docstring": "Load focused context optimized for VS Code Copilot.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "budget"
          ],
          "decorators": []
        },
        {
          "name": "_load_session_context",
          "docstring": "Load session-specific context.",
          "line_range": null,
          "parameters": [
            "self",
            "budget"
          ],
          "decorators": []
        },
        {
          "name": "_load_minimal_context",
          "docstring": "Load minimal context for quick operations.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_source_with_filtering",
          "docstring": "Load source with optional filtering based on budget.",
          "line_range": null,
          "parameters": [
            "self",
            "source_name",
            "budget"
          ],
          "decorators": []
        },
        {
          "name": "_get_file_context",
          "docstring": "Get context specific to a file.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_extract_essential_parts",
          "docstring": "Extract essential parts of data to fit token budget.",
          "line_range": null,
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_filter_for_current_session",
          "docstring": "Filter data to items relevant to current session.",
          "line_range": null,
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_extract_summary",
          "docstring": "Extract summary information from data.",
          "line_range": null,
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_apply_section_filtering",
          "docstring": "Apply section filtering to exclude specified sections.",
          "line_range": null,
          "parameters": [
            "self",
            "data",
            "exclude_sections"
          ],
          "decorators": []
        },
        {
          "name": "_update_metrics",
          "docstring": "Update performance metrics.",
          "line_range": null,
          "parameters": [
            "self",
            "scenario",
            "context",
            "load_time"
          ],
          "decorators": []
        },
        {
          "name": "get_metrics_summary",
          "docstring": "Get summary of context loading metrics.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_metrics",
          "docstring": "Save metrics to file for analysis.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ContextMode",
          "docstring": "Context loading modes for different scenarios.",
          "line_range": null,
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextLevel",
          "docstring": "Progressive context levels with token budgets.",
          "line_range": null,
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextBudget",
          "docstring": "Token budget configuration for context loading.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "ContextMetrics",
          "docstring": "Metrics for context loading performance.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "SmartContextOrchestrator",
          "docstring": "Orchestrates context loading based on usage scenario and token budget.\nProvides optimized context for different LLM integration patterns.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load context orchestration configuration.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_for_scenario",
              "docstring": "Get optimized context for specific usage scenario.\n\nArgs:\n    scenario: Usage scenario (cli_direct, vscode_copilot, etc.)\n    file_path: Optional file path for focused context\n    custom_budget: Optional custom token budget\n    \nReturns:\n    Optimized context dictionary",
              "line_range": null,
              "parameters": [
                "self",
                "scenario",
                "file_path",
                "custom_budget"
              ]
            },
            {
              "name": "_get_budget_for_scenario",
              "docstring": "Create budget configuration for scenario.",
              "line_range": null,
              "parameters": [
                "self",
                "scenario_config"
              ]
            },
            {
              "name": "_load_full_context",
              "docstring": "Load complete context without token restrictions.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_focused_context",
              "docstring": "Load focused context optimized for VS Code Copilot.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "budget"
              ]
            },
            {
              "name": "_load_session_context",
              "docstring": "Load session-specific context.",
              "line_range": null,
              "parameters": [
                "self",
                "budget"
              ]
            },
            {
              "name": "_load_minimal_context",
              "docstring": "Load minimal context for quick operations.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_source_with_filtering",
              "docstring": "Load source with optional filtering based on budget.",
              "line_range": null,
              "parameters": [
                "self",
                "source_name",
                "budget"
              ]
            },
            {
              "name": "_get_file_context",
              "docstring": "Get context specific to a file.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_extract_essential_parts",
              "docstring": "Extract essential parts of data to fit token budget.",
              "line_range": null,
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_filter_for_current_session",
              "docstring": "Filter data to items relevant to current session.",
              "line_range": null,
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_extract_summary",
              "docstring": "Extract summary information from data.",
              "line_range": null,
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_apply_section_filtering",
              "docstring": "Apply section filtering to exclude specified sections.",
              "line_range": null,
              "parameters": [
                "self",
                "data",
                "exclude_sections"
              ]
            },
            {
              "name": "_update_metrics",
              "docstring": "Update performance metrics.",
              "line_range": null,
              "parameters": [
                "self",
                "scenario",
                "context",
                "load_time"
              ]
            },
            {
              "name": "get_metrics_summary",
              "docstring": "Get summary of context loading metrics.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_metrics",
              "docstring": "Save metrics to file for analysis.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self._load_config"
        ],
        "_load_config": [
          "config_path.exists",
          "open",
          "json.load"
        ],
        "get_context_for_scenario": [
          "ContextMode",
          "self._load_focused_context",
          "scenario_config.get",
          "self._load_minimal_context",
          "self._get_budget_for_scenario",
          "self._update_metrics",
          "time.time",
          "self._load_session_context",
          "self._load_full_context"
        ],
        "_get_budget_for_scenario": [
          "budget_config.get",
          "scenario_config.get",
          "ContextBudget"
        ],
        "_load_full_context": [
          "json.load",
          "logger.warning",
          "open",
          "full_path.exists"
        ],
        "_load_focused_context": [
          "self._load_source_with_filtering",
          "self._get_file_context",
          "json.dumps",
          "self._extract_essential_parts",
          "len"
        ],
        "_load_session_context": [
          "self._load_source_with_filtering",
          "self._filter_for_current_session"
        ],
        "_load_minimal_context": [
          "logger.warning",
          "json.load",
          "source_path.exists",
          "open",
          "self._extract_summary"
        ],
        "_load_source_with_filtering": [
          "logger.warning",
          "json.load",
          "source_path.exists",
          "open",
          "self._apply_section_filtering"
        ],
        "_get_file_context": [
          "Path"
        ],
        "_extract_essential_parts": [
          "isinstance",
          "task.get"
        ],
        "_filter_for_current_session": [
          "json.load",
          "logger.warning",
          "open",
          "idea.get",
          "current_session_path.exists",
          "current_session.get",
          "task.get",
          "data.items"
        ],
        "_extract_summary": [
          "t.get",
          "isinstance",
          "len"
        ],
        "_apply_section_filtering": [
          "data.items"
        ],
        "_update_metrics": [
          "ContextMetrics",
          "context.get",
          "len"
        ],
        "get_metrics_summary": [
          "sum",
          "len"
        ],
        "save_metrics": [
          "open",
          "json.dump",
          "self.get_metrics_summary"
        ],
        "create_context_orchestrator": [
          "SmartContextOrchestrator"
        ],
        "get_optimized_context": [
          "orchestrator.get_context_for_scenario",
          "ContextBudget",
          "create_context_orchestrator"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "Union",
        "dataclass",
        "dataclasses",
        "enum",
        "json",
        "logging",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "60c5d1d7-1f0f-45e3-a972-9a2f6a94ef49"
    },
    {
      "module_id": "src.llmstruct.__init__",
      "path": "src/llmstruct/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "LLMClient",
        "llm_client"
      ],
      "hash": null,
      "artifact_id": "1d35c0f7-51ac-4b6c-b754-32038fa8a878"
    },
    {
      "module_id": "src.llmstruct.__main__",
      "path": "src/llmstruct/__main__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "llmstruct.cli",
        "main"
      ],
      "hash": null,
      "artifact_id": "d48624a0-422c-4c4b-862e-33ff7e48b9dc"
    },
    {
      "module_id": "src.llmstruct.cli_utils",
      "path": "src/llmstruct/cli_utils.py",
      "category": "core",
      "module_doc": "CLI utility functions.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize utils with root directory.",
          "line_range": null,
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read file content with size limit.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "max_size"
          ],
          "decorators": []
        },
        {
          "name": "write_file_content",
          "docstring": "Write content to file.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "get_directory_structure",
          "docstring": "Get directory structure using folder generator.",
          "line_range": null,
          "parameters": [
            "self",
            "path",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "validate_json",
          "docstring": "Validate JSON content.",
          "line_range": null,
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "format_json",
          "docstring": "Format data as JSON string.",
          "line_range": null,
          "parameters": [
            "self",
            "data",
            "indent"
          ],
          "decorators": []
        },
        {
          "name": "generate_unique_id",
          "docstring": "Generate unique ID for commands, queues, etc.",
          "line_range": null,
          "parameters": [
            "self",
            "prefix"
          ],
          "decorators": []
        },
        {
          "name": "safe_path_join",
          "docstring": "Safely join path parts, preventing directory traversal.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "file_exists",
          "docstring": "Check if file exists.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "dir_exists",
          "docstring": "Check if directory exists.",
          "line_range": null,
          "parameters": [
            "self",
            "dir_path"
          ],
          "decorators": []
        },
        {
          "name": "get_file_size",
          "docstring": "Get file size in bytes.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_file",
          "docstring": "Create backup of file with timestamp.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "cleanup_old_backups",
          "docstring": "Clean up old backup files, keeping only the most recent ones.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "keep_count"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLIUtils",
          "docstring": "Utility functions for CLI operations.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize utils with root directory.",
              "line_range": null,
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "read_file_content",
              "docstring": "Read file content with size limit.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "max_size"
              ]
            },
            {
              "name": "write_file_content",
              "docstring": "Write content to file.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "content"
              ]
            },
            {
              "name": "get_directory_structure",
              "docstring": "Get directory structure using folder generator.",
              "line_range": null,
              "parameters": [
                "self",
                "path",
                "gitignore_patterns",
                "include_patterns",
                "exclude_patterns",
                "exclude_dirs"
              ]
            },
            {
              "name": "validate_json",
              "docstring": "Validate JSON content.",
              "line_range": null,
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "format_json",
              "docstring": "Format data as JSON string.",
              "line_range": null,
              "parameters": [
                "self",
                "data",
                "indent"
              ]
            },
            {
              "name": "generate_unique_id",
              "docstring": "Generate unique ID for commands, queues, etc.",
              "line_range": null,
              "parameters": [
                "self",
                "prefix"
              ]
            },
            {
              "name": "safe_path_join",
              "docstring": "Safely join path parts, preventing directory traversal.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "file_exists",
              "docstring": "Check if file exists.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "dir_exists",
              "docstring": "Check if directory exists.",
              "line_range": null,
              "parameters": [
                "self",
                "dir_path"
              ]
            },
            {
              "name": "get_file_size",
              "docstring": "Get file size in bytes.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "backup_file",
              "docstring": "Create backup of file with timestamp.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "cleanup_old_backups",
              "docstring": "Clean up old backup files, keeping only the most recent ones.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "keep_count"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "read_file_content": [
          "f.read",
          "os.stat",
          "open",
          "logging.error",
          "logging.warning"
        ],
        "write_file_content": [
          "logging.info",
          "f.write",
          "Path",
          "open",
          "logging.error"
        ],
        "get_directory_structure": [
          "os.listdir",
          "get_folder_structure",
          "sorted",
          "logging.error"
        ],
        "validate_json": [
          "json.loads",
          "str"
        ],
        "format_json": [
          "json.dumps",
          "str",
          "logging.error"
        ],
        "generate_unique_id": [
          "int",
          "str",
          "uuid.uuid4",
          "time.time"
        ],
        "safe_path_join": [
          "ValueError",
          "resolved_path.startswith"
        ],
        "file_exists": [
          "self.safe_path_join"
        ],
        "dir_exists": [
          "self.safe_path_join"
        ],
        "get_file_size": [
          "self.safe_path_join"
        ],
        "backup_file": [
          "logging.error",
          "dst.write",
          "open",
          "time.time",
          "self.safe_path_join",
          "int",
          "src.read"
        ],
        "cleanup_old_backups": [
          "logging.info",
          "backups.sort",
          "int",
          "logging.error",
          "filename.split",
          "os.remove",
          "filename.startswith",
          "backups.append",
          "self.safe_path_join",
          "os.listdir",
          "logging.warning"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "get_folder_structure",
        "json",
        "llmstruct.generators.json_generator",
        "logging",
        "os",
        "pathlib",
        "time",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "d74e09f5-8b25-499e-918e-becd7d4f0546"
    },
    {
      "module_id": "src.llmstruct.copilot",
      "path": "src/llmstruct/copilot.py",
      "category": "core",
      "module_doc": "LLMStruct Copilot Integration Module\nProvides context-aware development assistance with hybrid copilot capabilities.",
      "functions": [
        {
          "name": "initialize_copilot",
          "docstring": "Initialize copilot context manager for the project.\n\nArgs:\n    project_root: Project root directory\n\nReturns:\n    Configured CopilotContextManager instance",
          "line_range": null,
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "trigger_copilot_event",
          "docstring": "Trigger a copilot event and get relevant context.\n\nArgs:\n    manager: CopilotContextManager instance\n    event_type: Type of event\n    file_path: Optional file path\n    **kwargs: Additional event metadata\n\nReturns:\n    Dict with event context",
          "line_range": null,
          "parameters": [
            "manager",
            "event_type",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "smart_suggest",
          "docstring": "Get smart suggestions based on query and context.\n\nArgs:\n    manager: CopilotContextManager instance\n    query: Query string\n    context: Context type (code, workflow, task, etc.)\n\nReturns:\n    List of suggestions",
          "line_range": null,
          "parameters": [
            "manager",
            "query",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "get_optimized_context_for_scenario",
          "docstring": "Get optimized context for specific scenario - standalone function.\n\nArgs:\n    project_root: Project root directory\n    scenario: Usage scenario (vscode_copilot, cli_direct, etc.)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
          "line_range": null,
          "parameters": [
            "project_root",
            "scenario",
            "file_path",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize the Copilot Context Manager.\n\nArgs:\n    project_root: Project root directory\n    config_path: Path to copilot_init.json",
          "line_range": null,
          "parameters": [
            "self",
            "project_root",
            "config_path"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load copilot configuration from JSON file.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_initialize_layers",
          "docstring": "Initialize context layers from configuration.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_context_layer",
          "docstring": "Load a specific context layer.\n\nArgs:\n    layer_name: Name of the layer to load\n    force: Force reload if already loaded\n\nReturns:\n    bool: True if successful",
          "line_range": null,
          "parameters": [
            "self",
            "layer_name",
            "force"
          ],
          "decorators": []
        },
        {
          "name": "unload_context_layer",
          "docstring": "Unload a context layer to free memory.\n\nArgs:\n    layer_name: Name of the layer to unload\n\nReturns:\n    bool: True if successful",
          "line_range": null,
          "parameters": [
            "self",
            "layer_name"
          ],
          "decorators": []
        },
        {
          "name": "get_optimized_context",
          "docstring": "Get optimized context using Smart Context Orchestrator.\n\nArgs:\n    scenario: Usage scenario (vscode_copilot, cli_direct, etc.)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
          "line_range": null,
          "parameters": [
            "self",
            "scenario",
            "file_path",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "_get_legacy_context",
          "docstring": "Fallback to legacy context loading.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_for_vscode",
          "docstring": "Get optimized context specifically for VS Code Copilot integration.\n\nArgs:\n    file_path: Optional file path for focused context\n    \nReturns:\n    Token-optimized context for VS Code",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "get_context_for_event",
          "docstring": "Get relevant context for a copilot event using Smart Context Orchestrator.\n\nArgs:\n    event: The copilot event\n\nReturns:\n    Dict containing relevant context",
          "line_range": null,
          "parameters": [
            "self",
            "event"
          ],
          "decorators": []
        },
        {
          "name": "_get_legacy_event_context",
          "docstring": "Legacy event context loading as fallback.",
          "line_range": null,
          "parameters": [
            "self",
            "event"
          ],
          "decorators": []
        },
        {
          "name": "suggest_completion",
          "docstring": "Generate context-aware code completions.\n\nArgs:\n    current_code: Current code content\n    file_path: Path to the current file\n    cursor_position: Cursor position in the code\n\nReturns:\n    List of completion suggestions",
          "line_range": null,
          "parameters": [
            "self",
            "current_code",
            "file_path",
            "cursor_position"
          ],
          "decorators": []
        },
        {
          "name": "validate_change",
          "docstring": "Validate a code change against safety rules.\n\nArgs:\n    file_path: Path to the changed file\n    change_type: Type of change (create, edit, delete)\n\nReturns:\n    Dict with validation results",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "change_type"
          ],
          "decorators": []
        },
        {
          "name": "_matches_scope",
          "docstring": "Check if file matches scope pattern.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "scope"
          ],
          "decorators": []
        },
        {
          "name": "_matches_trigger",
          "docstring": "Check if change type matches trigger.",
          "line_range": null,
          "parameters": [
            "self",
            "change_type",
            "trigger"
          ],
          "decorators": []
        },
        {
          "name": "_validate_json_schema",
          "docstring": "Validate JSON file against schema.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_check_circular_dependencies",
          "docstring": "Check for circular dependencies.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_validate_task_references",
          "docstring": "Validate task references in tasks.json.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "get_workflow_suggestions",
          "docstring": "Get workflow suggestions based on current command context.\n\nArgs:\n    command: Current command or operation\n\nReturns:\n    List of workflow suggestions",
          "line_range": null,
          "parameters": [
            "self",
            "command"
          ],
          "decorators": []
        },
        {
          "name": "refresh_all_contexts",
          "docstring": "Refresh all loaded context layers.\n\nReturns:\n    bool: True if successful",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_status",
          "docstring": "Get status of all context layers.\n\nReturns:\n    Dict with context status information",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "export_context",
          "docstring": "Export context in specified format.\n\nArgs:\n    layers: List of layers to export (None for all loaded)\n    format: Export format (json, yaml, etc.)\n\nReturns:\n    Exported context as string",
          "line_range": null,
          "parameters": [
            "self",
            "layers",
            "format"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Clean up resources.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ContextLayer",
          "docstring": "Context layer priorities for copilot integration.",
          "line_range": null,
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "AttachMode",
          "docstring": "Context attachment modes.",
          "line_range": null,
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextLayerConfig",
          "docstring": "Configuration for a context layer.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "CopilotEvent",
          "docstring": "Represents a copilot event for context triggering.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "CopilotContextManager",
          "docstring": "Manages context layers and integration with GitHub Copilot.\nProvides intelligent context loading and workflow assistance.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize the Copilot Context Manager.\n\nArgs:\n    project_root: Project root directory\n    config_path: Path to copilot_init.json",
              "line_range": null,
              "parameters": [
                "self",
                "project_root",
                "config_path"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load copilot configuration from JSON file.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_initialize_layers",
              "docstring": "Initialize context layers from configuration.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_context_layer",
              "docstring": "Load a specific context layer.\n\nArgs:\n    layer_name: Name of the layer to load\n    force: Force reload if already loaded\n\nReturns:\n    bool: True if successful",
              "line_range": null,
              "parameters": [
                "self",
                "layer_name",
                "force"
              ]
            },
            {
              "name": "unload_context_layer",
              "docstring": "Unload a context layer to free memory.\n\nArgs:\n    layer_name: Name of the layer to unload\n\nReturns:\n    bool: True if successful",
              "line_range": null,
              "parameters": [
                "self",
                "layer_name"
              ]
            },
            {
              "name": "get_optimized_context",
              "docstring": "Get optimized context using Smart Context Orchestrator.\n\nArgs:\n    scenario: Usage scenario (vscode_copilot, cli_direct, etc.)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
              "line_range": null,
              "parameters": [
                "self",
                "scenario",
                "file_path",
                "max_tokens"
              ]
            },
            {
              "name": "_get_legacy_context",
              "docstring": "Fallback to legacy context loading.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_for_vscode",
              "docstring": "Get optimized context specifically for VS Code Copilot integration.\n\nArgs:\n    file_path: Optional file path for focused context\n    \nReturns:\n    Token-optimized context for VS Code",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "get_context_for_event",
              "docstring": "Get relevant context for a copilot event using Smart Context Orchestrator.\n\nArgs:\n    event: The copilot event\n\nReturns:\n    Dict containing relevant context",
              "line_range": null,
              "parameters": [
                "self",
                "event"
              ]
            },
            {
              "name": "_get_legacy_event_context",
              "docstring": "Legacy event context loading as fallback.",
              "line_range": null,
              "parameters": [
                "self",
                "event"
              ]
            },
            {
              "name": "suggest_completion",
              "docstring": "Generate context-aware code completions.\n\nArgs:\n    current_code: Current code content\n    file_path: Path to the current file\n    cursor_position: Cursor position in the code\n\nReturns:\n    List of completion suggestions",
              "line_range": null,
              "parameters": [
                "self",
                "current_code",
                "file_path",
                "cursor_position"
              ]
            },
            {
              "name": "validate_change",
              "docstring": "Validate a code change against safety rules.\n\nArgs:\n    file_path: Path to the changed file\n    change_type: Type of change (create, edit, delete)\n\nReturns:\n    Dict with validation results",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "change_type"
              ]
            },
            {
              "name": "_matches_scope",
              "docstring": "Check if file matches scope pattern.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "scope"
              ]
            },
            {
              "name": "_matches_trigger",
              "docstring": "Check if change type matches trigger.",
              "line_range": null,
              "parameters": [
                "self",
                "change_type",
                "trigger"
              ]
            },
            {
              "name": "_validate_json_schema",
              "docstring": "Validate JSON file against schema.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_check_circular_dependencies",
              "docstring": "Check for circular dependencies.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_validate_task_references",
              "docstring": "Validate task references in tasks.json.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "get_workflow_suggestions",
              "docstring": "Get workflow suggestions based on current command context.\n\nArgs:\n    command: Current command or operation\n\nReturns:\n    List of workflow suggestions",
              "line_range": null,
              "parameters": [
                "self",
                "command"
              ]
            },
            {
              "name": "refresh_all_contexts",
              "docstring": "Refresh all loaded context layers.\n\nReturns:\n    bool: True if successful",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_status",
              "docstring": "Get status of all context layers.\n\nReturns:\n    Dict with context status information",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "export_context",
              "docstring": "Export context in specified format.\n\nArgs:\n    layers: List of layers to export (None for all loaded)\n    format: Export format (json, yaml, etc.)\n\nReturns:\n    Exported context as string",
              "line_range": null,
              "parameters": [
                "self",
                "layers",
                "format"
              ]
            },
            {
              "name": "close",
              "docstring": "Clean up resources.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "str",
          "os.getcwd",
          "self._load_config",
          "create_context_orchestrator",
          "Path",
          "JSONCache",
          "self._initialize_layers"
        ],
        "_load_config": [
          "logger.warning",
          "json.load",
          "Path",
          "open",
          "logger.error",
          "logger.info"
        ],
        "_initialize_layers": [
          "layer_config.get",
          "layers_config.items",
          "ContextLayerConfig"
        ],
        "load_context_layer": [
          "json.load",
          "logger.warning",
          "source_path.exists",
          "open",
          "logger.error",
          "logger.debug",
          "time.time",
          "logger.info"
        ],
        "unload_context_layer": [
          "logger.info"
        ],
        "get_optimized_context": [
          "scenario_mapping.get",
          "logger.error",
          "self._get_legacy_context"
        ],
        "_get_legacy_context": [
          "self.load_context_layer"
        ],
        "get_context_for_vscode": [
          "self.get_optimized_context"
        ],
        "get_context_for_event": [
          "self._get_legacy_event_context",
          "scenario_mapping.get",
          "self.get_optimized_context",
          "logger.error"
        ],
        "_get_legacy_event_context": [
          "triggers.get",
          "json.load",
          "code_triggers.get",
          "source_path.exists",
          "file_triggers.get",
          "open",
          "logger.error",
          "self.load_context_layer",
          "workflow_triggers.get"
        ],
        "suggest_completion": [
          "module.get",
          "str",
          "func.get",
          "struct_context.get",
          "suggestions.append",
          "current_module.get",
          "Path",
          "self.load_context_layer"
        ],
        "validate_change": [
          "rule.get",
          "self._matches_scope",
          "result.get",
          "self._check_circular_dependencies",
          "self._validate_task_references",
          "self._validate_json_schema",
          "self._matches_trigger",
          "safety_features.get",
          "len"
        ],
        "_matches_scope": [
          "Path",
          "str",
          "fnmatch"
        ],
        "_matches_trigger": [
          "trigger_map.get"
        ],
        "_validate_json_schema": [
          "open",
          "file_path.endswith",
          "json.load"
        ],
        "_check_circular_dependencies": [
          "module.get",
          "str",
          "Path",
          "self.load_context_layer",
          "struct_data.get",
          "len"
        ],
        "_validate_task_references": [
          "task_ids.add",
          "json.load",
          "tasks_data.get",
          "open",
          "file_path.endswith",
          "set",
          "task.get"
        ],
        "get_workflow_suggestions": [
          "command.lower",
          "workflow.get",
          "suggestions.append",
          "workflows.items",
          "suggestions.extend",
          "self.load_context_layer"
        ],
        "refresh_all_contexts": [
          "logger.info",
          "list",
          "self.load_context_layer"
        ],
        "get_context_status": [
          "list"
        ],
        "export_context": [
          "json.dumps",
          "str",
          "list"
        ],
        "close": [
          "hasattr",
          "logger.info"
        ],
        "initialize_copilot": [
          "CopilotContextManager"
        ],
        "trigger_copilot_event": [
          "manager.get_context_for_event",
          "CopilotEvent"
        ],
        "smart_suggest": [
          "manager.get_workflow_suggestions"
        ],
        "get_optimized_context_for_scenario": [
          "initialize_copilot",
          "manager.close",
          "locals",
          "manager.get_optimized_context"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "SmartContextOrchestrator",
        "Union",
        "create_context_orchestrator",
        "dataclass",
        "dataclasses",
        "enum",
        "fnmatch",
        "json",
        "llmstruct.cache",
        "llmstruct.context_orchestrator",
        "logging",
        "os",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "173df6f4-d469-4b68-b7fe-94cabea97fd8"
    },
    {
      "module_id": "src.llmstruct.gh_view",
      "path": "src/llmstruct/gh_view.py",
      "category": "core",
      "module_doc": "GitHub visualization/graph feature (gh-view-v1)\nExport consolidated tasks/ideas from JSON files to GitHub Project cards",
      "functions": [
        {
          "name": "main",
          "docstring": "Main entry point for GitHub Projects export",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize exporter with configuration",
          "line_range": null,
          "parameters": [
            "self",
            "config_path"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load configuration from TOML file",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_mapping",
          "docstring": "Load existing ID mapping between local and GitHub",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_mapping",
          "docstring": "Save ID mapping to file",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_run_gh_command",
          "docstring": "Run GitHub CLI command and return success status and output",
          "line_range": null,
          "parameters": [
            "self",
            "command"
          ],
          "decorators": []
        },
        {
          "name": "load_official_data",
          "docstring": "Load tasks and ideas from official JSON files",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "format_task_for_github",
          "docstring": "Format task data for GitHub Project card",
          "line_range": null,
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "format_idea_for_github",
          "docstring": "Format idea data for GitHub Project card",
          "line_range": null,
          "parameters": [
            "self",
            "idea"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubProjectsExporter",
          "docstring": "Export tasks and ideas to GitHub Projects as cards",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize exporter with configuration",
              "line_range": null,
              "parameters": [
                "self",
                "config_path"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load configuration from TOML file",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_mapping",
              "docstring": "Load existing ID mapping between local and GitHub",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_mapping",
              "docstring": "Save ID mapping to file",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_run_gh_command",
              "docstring": "Run GitHub CLI command and return success status and output",
              "line_range": null,
              "parameters": [
                "self",
                "command"
              ]
            },
            {
              "name": "load_official_data",
              "docstring": "Load tasks and ideas from official JSON files",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "format_task_for_github",
              "docstring": "Format task data for GitHub Project card",
              "line_range": null,
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "format_idea_for_github",
              "docstring": "Format idea data for GitHub Project card",
              "line_range": null,
              "parameters": [
                "self",
                "idea"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self._load_config",
          "self._load_mapping"
        ],
        "_load_config": [
          "toml.load",
          "print",
          "open",
          "config.get"
        ],
        "_load_mapping": [
          "open",
          "json.load"
        ],
        "_save_mapping": [
          "print",
          "open",
          "json.dump"
        ],
        "_run_gh_command": [
          "subprocess.run"
        ],
        "load_official_data": [
          "tasks_file.exists",
          "json.load",
          "tasks_data.get",
          "ideas_data.get",
          "print",
          "open",
          "ideas_file.exists",
          "len"
        ],
        "format_task_for_github": [
          "status_map.get",
          "task.get",
          "body_parts.append"
        ],
        "format_idea_for_github": [
          "idea.get",
          "status_map.get",
          "body_parts.append"
        ],
        "main": [
          "exporter.load_official_data",
          "GitHubProjectsExporter",
          "exporter.format_task_for_github",
          "print",
          "sys.exit",
          "exporter.format_idea_for_github",
          "len"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "datetime",
        "json",
        "pathlib",
        "subprocess",
        "sys",
        "toml",
        "typing"
      ],
      "hash": null,
      "artifact_id": "ab5d6ec9-f4cd-4dfc-bb6d-44c2dbd303fa"
    },
    {
      "module_id": "src.llmstruct.llm_client",
      "path": "src/llmstruct/llm_client.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize LLMClient with optional Ollama host.",
          "line_range": null,
          "parameters": [
            "self",
            "ollama_host"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt, context, and optional model.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "context_path",
            "mode",
            "model",
            "artifact_ids"
          ],
          "decorators": []
        },
        {
          "name": "_query_grok",
          "docstring": "Query Grok API.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_anthropic",
          "docstring": "Query Anthropic API.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_ollama",
          "docstring": "Query Ollama API with specified model.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "_query_hybrid",
          "docstring": "Query multiple LLMs and combine results.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMClient",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize LLMClient with optional Ollama host.",
              "line_range": null,
              "parameters": [
                "self",
                "ollama_host"
              ]
            },
            {
              "name": "query",
              "docstring": "Query LLMs with prompt, context, and optional model.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "context_path",
                "mode",
                "model",
                "artifact_ids"
              ]
            },
            {
              "name": "_query_grok",
              "docstring": "Query Grok API.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_anthropic",
              "docstring": "Query Anthropic API.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_ollama",
              "docstring": "Query Ollama API with specified model.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            },
            {
              "name": "_query_hybrid",
              "docstring": "Query multiple LLMs and combine results.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "logging.info",
          "int",
          "os.getenv"
        ],
        "query": [
          "logging.info",
          "self._query_hybrid",
          "self._query_ollama",
          "self._query_anthropic",
          "json.load",
          "range",
          "json.dumps",
          "Path",
          "logging.error",
          "self._query_grok",
          "asyncio.sleep",
          "logging.warning"
        ],
        "_query_grok": [
          "logging.info",
          "result.get",
          "response.json",
          "logging.error",
          "aiohttp.ClientSession",
          "session.post"
        ],
        "_query_anthropic": [
          "logging.info",
          "result.get",
          "response.json",
          "logging.error",
          "aiohttp.ClientSession",
          "session.post"
        ],
        "_query_ollama": [
          "logging.info",
          "logging.debug",
          "result.get",
          "response.json",
          "logging.error",
          "session.post",
          "aiohttp.ClientSession"
        ],
        "_query_hybrid": [
          "logging.info",
          "self._query_ollama",
          "asyncio.gather",
          "isinstance",
          "self._query_anthropic",
          "self._query_grok",
          "len"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "aiohttp",
        "asyncio",
        "dotenv",
        "json",
        "load_dotenv",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "2d506d31-39bb-4d10-8072-7afa6874be12"
    },
    {
      "module_id": "src.llmstruct.cache",
      "path": "src/llmstruct/cache.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize SQLite cache for JSON files.",
          "line_range": null,
          "parameters": [
            "self",
            "db_path"
          ],
          "decorators": []
        },
        {
          "name": "create_tables",
          "docstring": "Create tables for metadata and file paths.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cache_json",
          "docstring": "Cache JSON metadata and store full file path.",
          "line_range": null,
          "parameters": [
            "self",
            "json_path",
            "artifact_id",
            "summary",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "get_metadata",
          "docstring": "Retrieve metadata by artifact_id.",
          "line_range": null,
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "get_full_json",
          "docstring": "Load full JSON by artifact_id.",
          "line_range": null,
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Close database connection.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JSONCache",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize SQLite cache for JSON files.",
              "line_range": null,
              "parameters": [
                "self",
                "db_path"
              ]
            },
            {
              "name": "create_tables",
              "docstring": "Create tables for metadata and file paths.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cache_json",
              "docstring": "Cache JSON metadata and store full file path.",
              "line_range": null,
              "parameters": [
                "self",
                "json_path",
                "artifact_id",
                "summary",
                "tags"
              ]
            },
            {
              "name": "get_metadata",
              "docstring": "Retrieve metadata by artifact_id.",
              "line_range": null,
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "get_full_json",
              "docstring": "Load full JSON by artifact_id.",
              "line_range": null,
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "close",
              "docstring": "Close database connection.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.create_tables",
          "sqlite3.connect"
        ],
        "create_tables": [],
        "cache_json": [
          "logging.info",
          "str",
          "content.encode",
          "f.read",
          "hashlib.sha256",
          "Path",
          "json.dumps",
          "open",
          "json_file.exists",
          "logging.error"
        ],
        "get_metadata": [
          "json.loads",
          "cursor.fetchone"
        ],
        "get_full_json": [
          "logging.error",
          "open",
          "json.load",
          "cursor.fetchone"
        ],
        "close": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "hashlib",
        "json",
        "logging",
        "pathlib",
        "sqlite3",
        "typing"
      ],
      "hash": null,
      "artifact_id": "5a986388-91f3-4613-b3a5-d7e9c43dc409"
    },
    {
      "module_id": "src.llmstruct.self_run",
      "path": "src/llmstruct/self_run.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_struct",
          "docstring": "Filter struct.json or init.json based on prompt keywords. Supports dict or list as root.",
          "line_range": null,
          "parameters": [
            "struct",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "Attach filtered JSON to LLM prompt, using cache if available.",
          "line_range": null,
          "parameters": [
            "context_path",
            "prompt",
            "cache"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_struct": [
          "module.get",
          "str",
          "struct.get",
          "prompt.lower",
          "item.get",
          "isinstance",
          "any",
          "filter_json"
        ],
        "attach_to_llm_request": [
          "logging.info",
          "filter_json",
          "prompt.lower",
          "cache.cache_json",
          "json.dumps",
          "Path",
          "filter_struct",
          "cache.get_metadata",
          "logging.error",
          "select_json",
          "context_file.exists",
          "cache.get_full_json"
        ]
      },
      "dependencies": [
        "Any",
        "JSONCache",
        "Optional",
        "Path",
        "cache",
        "filter_json",
        "json",
        "json_selector",
        "logging",
        "pathlib",
        "select_json",
        "typing"
      ],
      "hash": null,
      "artifact_id": "679deeec-7aaf-4a42-9121-658ec5b2e615"
    },
    {
      "module_id": "src.llmstruct.json_selector",
      "path": "src/llmstruct/json_selector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_json",
          "docstring": "Filter JSON data by key-value pair and select fields.",
          "line_range": null,
          "parameters": [
            "data",
            "filter_key",
            "filter_value",
            "fields"
          ],
          "decorators": []
        },
        {
          "name": "select_json",
          "docstring": "Load and filter JSON file, optionally parsing partially.",
          "line_range": null,
          "parameters": [
            "json_path",
            "filter_key",
            "filter_value",
            "fields",
            "partial"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_json": [
          "filtered.append",
          "item.get",
          "isinstance",
          "data.get"
        ],
        "select_json": [
          "f.seek",
          "ijson.parse",
          "current_item.get",
          "path.append",
          "filtered.append",
          "json.load",
          "Path",
          "prefix.startswith",
          "open",
          "json_file.exists",
          "logging.error",
          "filter_json"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "ijson",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "f7e3278e-2300-450d-bdd3-63c1fc883ef5"
    },
    {
      "module_id": "src.llmstruct.cli",
      "path": "src/llmstruct/cli.py",
      "category": "core",
      "module_doc": "LLMStruct CLI - Main entry point for the command-line interface.",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from llmstruct.toml or return empty dict.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default ./tmp) and return the path.",
          "line_range": null,
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": null,
          "parameters": [
            "response"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with modular structure if available, fallback to legacy.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive_modular",
          "docstring": "Run interactive CLI with modular structure.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive_legacy",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "process_cli_queue_enhanced",
          "docstring": "Enhanced queue processing with workflow support, performance tracking, and safety validation.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "context_path",
            "args",
            "cache",
            "client"
          ],
          "decorators": []
        },
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "copilot",
          "docstring": "Copilot integration and context management.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "audit",
          "docstring": "Handle audit command for recovering lost ideas/tasks.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "line.startswith",
          "gitignore_path.exists",
          "gitignore_path.open",
          "Path",
          "logging.error",
          "line.strip"
        ],
        "load_config": [
          "toml.load",
          "Path",
          "config_path.open",
          "config_path.exists",
          "logging.error"
        ],
        "read_file_content": [
          "path.open",
          "f.read",
          "Path",
          "path.is_file",
          "logging.error"
        ],
        "write_to_file": [
          "logging.info",
          "str",
          "base_path.mkdir",
          "f.write",
          "Path",
          "re.sub",
          "file_path.exists",
          "file_path.open",
          "logging.error",
          "logging.warning"
        ],
        "parse_files_from_response": [
          "files.append",
          "content.strip",
          "filename.strip",
          "re.findall"
        ],
        "interactive": [
          "interactive_modular",
          "interactive_legacy",
          "logging.warning"
        ],
        "interactive_modular": [
          "logging.info",
          "hasattr",
          "create_cli_core",
          "cli_core.run_interactive_mode"
        ],
        "interactive_legacy": [
          "read_file_content",
          "subprocess.run",
          "cache.list_keys",
          "json.load",
          "input",
          "args_str.strip",
          "user_input.startswith",
          "get_folder_structure",
          "json.dumps",
          "Path",
          "cache.clear",
          "cache.get_stats",
          "process_cli_queue_enhanced",
          "len",
          "load_gitignore",
          "cache.close",
          "attach_to_llm_request",
          "parse",
          "LLMClient",
          "sorted",
          "json.dump",
          "logging.error",
          "time.time",
          "os.listdir",
          "write_to_file",
          "struct_data.get",
          "client.query",
          "user_input.lower",
          "workflow.get",
          "time.ctime",
          "os.makedirs",
          "re.match",
          "os.stat",
          "events_data.append",
          "print",
          "m.group",
          "open",
          "isinstance",
          "JSONCache",
          "int",
          "logging.warning"
        ],
        "process_cli_queue_enhanced": [
          "logging.info",
          "client.query",
          "time.time",
          "load_gitignore",
          "workflow.get",
          "read_file_content",
          "get_folder_structure",
          "item.get",
          "attach_to_llm_request",
          "json.load",
          "print",
          "open",
          "isinstance",
          "logging.error",
          "write_to_file",
          "options.get",
          "enumerate",
          "len"
        ],
        "parse": [
          "logging.info",
          "load_gitignore",
          "load_config",
          "cache.cache_json",
          "cache.close",
          "generate_json",
          "parsing_config.get",
          "Path",
          "json.dump",
          "logging.error",
          "JSONCache",
          "cli_config.get",
          "logging.warning",
          "config.get"
        ],
        "query": [
          "orchestrator.get_context_for_scenario",
          "logging.info",
          "client.query_with_context",
          "client.query",
          "cache.close",
          "LLMClient",
          "create_context_orchestrator",
          "Path",
          "hasattr",
          "json.dump",
          "logging.error",
          "JSONCache",
          "logging.warning"
        ],
        "context": [
          "logging.warning"
        ],
        "dogfood": [
          "logging.warning"
        ],
        "review": [
          "logging.warning"
        ],
        "copilot": [
          "initialize_copilot",
          "f.write",
          "manager.export_context",
          "manager.load_context_layer",
          "manager.refresh_all_contexts",
          "Path",
          "layers.split",
          "shutil.copy",
          "enumerate",
          "template_path.exists",
          "logging.info",
          "manager.close",
          "manager.validate_change",
          "config_path.exists",
          "logging.error",
          "manager.unload_context_layer",
          "getattr",
          "manager.get_context_status",
          "hasattr",
          "print",
          "open",
          "smart_suggest"
        ],
        "audit": [
          "os.getcwd",
          "processor.cmd_audit",
          "CLIUtils",
          "CommandProcessor",
          "logging.error",
          "CLIConfig"
        ],
        "main": [
          "dogfood_parser.add_argument",
          "subparsers.add_parser",
          "copilot_parser.add_argument",
          "argparse.ArgumentParser",
          "dogfood",
          "copilot",
          "audit_parser.add_argument",
          "parse_parser.add_argument",
          "interactive",
          "parser.parse_args",
          "parse",
          "review",
          "query",
          "audit",
          "context",
          "parser.add_subparsers",
          "interactive_parser.add_argument",
          "context_parser.add_argument",
          "review_parser.add_argument",
          "query_parser.add_argument",
          "asyncio.run"
        ]
      },
      "dependencies": [
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "cli_commands",
        "cli_config",
        "cli_core",
        "cli_utils",
        "context_orchestrator",
        "copilot",
        "create_cli_core",
        "create_context_orchestrator",
        "generate_json",
        "get_folder_structure",
        "initialize_copilot",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "logging",
        "os",
        "pathlib",
        "re",
        "shutil",
        "smart_suggest",
        "subprocess",
        "sys",
        "time",
        "toml",
        "typing"
      ],
      "hash": null,
      "artifact_id": "d60d9d0d-e6ee-4e91-bbe0-18e648ffee42"
    },
    {
      "module_id": "src.llmstruct.cli_core",
      "path": "src/llmstruct/cli_core.py",
      "category": "core",
      "module_doc": "Core CLI functionality and main loop.",
      "functions": [
        {
          "name": "create_cli_core",
          "docstring": "Factory function to create CLI core instance.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize CLI core with root directory.",
          "line_range": null,
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "setup_cache",
          "docstring": "Initialize cache if enabled in config.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "setup_copilot",
          "docstring": "Initialize Copilot integration if enabled.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_interactive_mode",
          "docstring": "Run the interactive CLI mode.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cleanup",
          "docstring": "Clean up resources.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLICore",
          "docstring": "Core CLI class handling main loop and coordination.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize CLI core with root directory.",
              "line_range": null,
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "setup_cache",
              "docstring": "Initialize cache if enabled in config.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "setup_copilot",
              "docstring": "Initialize Copilot integration if enabled.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run_interactive_mode",
              "docstring": "Run the interactive CLI mode.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cleanup",
              "docstring": "Clean up resources.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "CLIConfig",
          "CommandProcessor",
          "CLIUtils"
        ],
        "setup_cache": [
          "logging.info",
          "str",
          "Path",
          "cache_path.mkdir",
          "JSONCache",
          "logging.warning",
          "cache_config.get"
        ],
        "setup_copilot": [
          "initialize_copilot",
          "copilot_config.get",
          "logging.info",
          "logging.warning"
        ],
        "run_interactive_mode": [
          "self.setup_copilot",
          "self.cleanup",
          "user_input.lower",
          "user_input.startswith",
          "print",
          "input",
          "logging.error",
          "self.setup_cache"
        ],
        "cleanup": [
          "logging.info"
        ],
        "create_cli_core": [
          "CLICore"
        ]
      },
      "dependencies": [
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "CopilotContextManager",
        "JSONCache",
        "Optional",
        "Path",
        "cli_commands",
        "cli_config",
        "cli_utils",
        "copilot",
        "initialize_copilot",
        "llmstruct.cache",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "52a8e118-1e38-4048-b664-e35208f38ffc"
    },
    {
      "module_id": "src.llmstruct.parsers.__init__",
      "path": "src/llmstruct/parsers/__init__.py",
      "category": "cli",
      "module_doc": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "JavaScriptParser",
        "javascript_parser"
      ],
      "hash": null,
      "artifact_id": "59593816-3cd1-4ff0-9ad2-2d190de80e14"
    },
    {
      "module_id": "src.llmstruct.parsers.javascript_parser",
      "path": "src/llmstruct/parsers/javascript_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "file_hash",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_metadata",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "parse_module",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "extract_signature",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JavaScriptParser",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "file_hash",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath"
              ]
            },
            {
              "name": "compute_file_metadata",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath",
                "include_hashes"
              ]
            },
            {
              "name": "parse_module",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath",
                "root_dir",
                "include_ranges",
                "include_hashes"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "set"
        ],
        "file_hash": [
          "hashlib.sha256",
          "f.read",
          "open"
        ],
        "compute_file_metadata": [
          "sum",
          "self.file_hash",
          "open",
          "os.stat"
        ],
        "parse_module": [
          "str",
          "self.compute_file_metadata",
          "f.read",
          "open",
          "esprima.parseModule"
        ],
        "extract_signature": [
          "hasattr"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "datetime",
        "esprima",
        "hashlib",
        "os",
        "typing"
      ],
      "hash": null,
      "artifact_id": "5ee01bcf-4c75-439a-a1e9-77b63198f921"
    },
    {
      "module_id": "src.llmstruct.parsers.python_parser",
      "path": "src/llmstruct/parsers/python_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "infer_category",
          "docstring": "Infer module category based on its path.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_hash",
          "docstring": "Compute SHA-256 hash of file content.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "analyze_module",
          "docstring": "Analyze Python module and return structured data.",
          "line_range": null,
          "parameters": [
            "file_path",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "visit_Import",
          "docstring": "Capture import statements.",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_ImportFrom",
          "docstring": "Capture from-import statements.",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_FunctionDef",
          "docstring": "Track function definitions and their calls.",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_AsyncFunctionDef",
          "docstring": "Track async function definitions and their calls.",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_Call",
          "docstring": "Capture function calls.",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "AST visitor to collect function calls and dependencies.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "visit_Import",
              "docstring": "Capture import statements.",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_ImportFrom",
              "docstring": "Capture from-import statements.",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_FunctionDef",
              "docstring": "Track function definitions and their calls.",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_AsyncFunctionDef",
              "docstring": "Track async function definitions and their calls.",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_Call",
              "docstring": "Capture function calls.",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ]
        }
      ],
      "callgraph": {
        "infer_category": [
          "Path"
        ],
        "__init__": [
          "set"
        ],
        "visit_Import": [
          "self.generic_visit"
        ],
        "visit_ImportFrom": [
          "self.generic_visit"
        ],
        "visit_FunctionDef": [
          "self.generic_visit",
          "set"
        ],
        "visit_AsyncFunctionDef": [
          "self.generic_visit",
          "set"
        ],
        "visit_Call": [
          "self.generic_visit",
          "isinstance"
        ],
        "compute_file_hash": [
          "hashlib.sha256",
          "f.read",
          "open",
          "logging.error"
        ],
        "analyze_module": [
          "str",
          "visitor.visit",
          "list",
          "ast.unparse",
          "f.read",
          "classes.append",
          "infer_category",
          "ast.parse",
          "Path",
          "sorted",
          "open",
          "isinstance",
          "ast.walk",
          "logging.error",
          "ast.get_docstring",
          "compute_file_hash",
          "functions.append",
          "CallVisitor"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "Set",
        "ast",
        "hashlib",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "a220824f-4c54-43f6-bf59-e5c721918bcd"
    },
    {
      "module_id": "src.llmstruct.templates.__init__",
      "path": "src/llmstruct/templates/__init__.py",
      "category": "cli",
      "module_doc": "Templates for LLM prompts used in LLMStruct integration.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "64667caf-9d27-4f12-b9c3-28e2d38d52fe"
    },
    {
      "module_id": "src.llmstruct.validators.__init__",
      "path": "src/llmstruct/validators/__init__.py",
      "category": "cli",
      "module_doc": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "json_validator",
        "validate_struct_json"
      ],
      "hash": null,
      "artifact_id": "a8db65b5-5a52-44a9-877c-f7bd768a94a1"
    },
    {
      "module_id": "src.llmstruct.validators.json_validator",
      "path": "src/llmstruct/validators/json_validator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_struct_json",
          "docstring": "Validate a single JSON file against a schema.",
          "line_range": null,
          "parameters": [
            "json_path",
            "schema_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_directory",
          "docstring": "Validate all JSON files in a directory against a schema.",
          "line_range": null,
          "parameters": [
            "directory",
            "schema_path",
            "include_patterns",
            "exclude_patterns"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_struct_json": [
          "logging.info",
          "str",
          "validate",
          "json.load",
          "Path",
          "open",
          "json_file.exists",
          "logging.error",
          "schema_file.exists"
        ],
        "validate_directory": [
          "str",
          "validate_struct_json",
          "Path",
          "any",
          "json_file.match"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "ValidationError",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "sys",
        "typing",
        "validate"
      ],
      "hash": null,
      "artifact_id": "3c04af0f-56c1-4c12-9408-2163330a085d"
    },
    {
      "module_id": "src.llmstruct.generators.json_generator",
      "path": "src/llmstruct/generators/json_generator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_folder_structure",
          "docstring": "Capture directory and file structure with artifact_id, respecting .gitignore and patterns.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "build_toc_and_modules",
          "docstring": "Build TOC and modules with artifact_id and robust filtering.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "Generate JSON structure for project with artifact_id, summary, and tags.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals",
            "exclude_dirs"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_folder_structure": [
          "str",
          "os.walk",
          "file_path.relative_to",
          "p.endswith",
          "uuid.uuid4",
          "file_path.match",
          "p.rstrip",
          "Path",
          "sorted",
          "any",
          "set",
          "structure.append"
        ],
        "build_toc_and_modules": [
          "f.match",
          "str",
          "analyze_module",
          "p.endswith",
          "uuid.uuid4",
          "modules.append",
          "toc.append",
          "p.rstrip",
          "Path",
          "any",
          "set",
          "len"
        ],
        "generate_json": [
          "str",
          "list",
          "get_folder_structure",
          "uuid.uuid4",
          "Path",
          "sum",
          "build_toc_and_modules",
          "set",
          "len"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "analyze_module",
        "datetime",
        "logging",
        "os",
        "parsers.python_parser",
        "pathlib",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "9a9359b9-8844-4380-875f-e54beea7b625"
    },
    {
      "module_id": "src.llmstruct.generators.__init__",
      "path": "src/llmstruct/generators/__init__.py",
      "category": "cli",
      "module_doc": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "generate_json",
        "json_generator"
      ],
      "hash": null,
      "artifact_id": "e0e2a239-a2b6-4738-8938-2648d928c9c5"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_self_run",
      "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_self_run.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_struct",
          "docstring": "Filter struct.json or init.json based on prompt keywords.",
          "line_range": null,
          "parameters": [
            "struct",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "Attach filtered JSON to LLM prompt, using cache if available.",
          "line_range": null,
          "parameters": [
            "context_path",
            "prompt",
            "cache"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_struct": [
          "module.get",
          "struct.get",
          "prompt.lower",
          "any",
          "filter_json"
        ],
        "attach_to_llm_request": [
          "logging.info",
          "filter_json",
          "prompt.lower",
          "cache.cache_json",
          "json.dumps",
          "Path",
          "filter_struct",
          "cache.get_metadata",
          "logging.error",
          "select_json",
          "context_file.exists",
          "cache.get_full_json"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "JSONCache",
        "List",
        "Path",
        "cache",
        "filter_json",
        "json",
        "json_selector",
        "logging",
        "pathlib",
        "select_json",
        "typing"
      ],
      "hash": null,
      "artifact_id": "086197c6-feab-48e7-9b5c-f033b7db6ea8"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.collector (1)",
      "path": "temp_workfiles/unsorted_mess/22.05.25/collector (1).py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "apply_filters",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "files",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "collect_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "generate_struct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "output"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "apply_filters": [
          "filtered.append",
          "pattern.startswith",
          "fnmatch.fnmatch"
        ],
        "collect_files": [
          "str",
          "apply_filters",
          "path.is_file",
          "path.relative_to",
          "files.append",
          "root_dir.rglob"
        ],
        "generate_struct": [
          "str",
          "output_path.exists",
          "uuid.uuid4",
          "json.load",
          "Path",
          "json.dump",
          "collect_files",
          "output_path.open",
          "existing.get",
          "logger.info",
          "len"
        ],
        "main": [
          "generate_struct"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "logging",
        "pathlib",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "480547b7-7136-4dd4-895a-1800e2fc1f68"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.test_self_run",
      "path": "temp_workfiles/unsorted_mess/22.05.25/test_self_run.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "test_filter_json_init_json",
          "docstring": "Test filter_json with init.json structure.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_select_json_partial",
          "docstring": "Test partial JSON loading.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_cache_json",
          "docstring": "Test JSON caching.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_attach_to_llm_request_init_json",
          "docstring": "Test attach_to_llm_request with init.json and cache.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_attach_to_llm_request_missing_file",
          "docstring": "Test attach_to_llm_request with missing file.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_filter_json_init_json": [
          "filter_json"
        ],
        "test_select_json_partial": [
          "select_json",
          "str",
          "open",
          "json.dump"
        ],
        "test_cache_json": [
          "str",
          "cache.cache_json",
          "cache.close",
          "open",
          "json.dump",
          "cache.get_metadata",
          "JSONCache",
          "cache.get_full_json"
        ],
        "test_attach_to_llm_request_init_json": [
          "str",
          "cache.close",
          "attach_to_llm_request",
          "open",
          "json.dump",
          "JSONCache"
        ],
        "test_attach_to_llm_request_missing_file": [
          "str",
          "attach_to_llm_request"
        ]
      },
      "dependencies": [
        "JSONCache",
        "Path",
        "attach_to_llm_request",
        "filter_json",
        "filter_struct",
        "json",
        "llmstruct.cache",
        "llmstruct.json_selector",
        "llmstruct.self_run",
        "pathlib",
        "pytest",
        "select_json"
      ],
      "hash": null,
      "artifact_id": "0725b207-4f0c-4ddf-8fa2-fef1f02cec7f"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.test_cli",
      "path": "temp_workfiles/unsorted_mess/22.05.25/test_cli.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "setup_files",
          "docstring": "Set up test files.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": [
            "pytest.fixture"
          ]
        },
        {
          "name": "test_interactive_with_cli_json",
          "docstring": "Test interactive mode with cli.json.",
          "line_range": null,
          "parameters": [
            "setup_files",
            "monkeypatch"
          ],
          "decorators": [
            "pytest.mark.asyncio"
          ]
        }
      ],
      "classes": [],
      "callgraph": {
        "setup_files": [
          "json.dumps"
        ],
        "test_interactive_with_cli_json": [
          "interactive",
          "str",
          "type",
          "patch.object",
          "monkeypatch.setattr",
          "AsyncMock",
          "inputs.pop"
        ]
      },
      "dependencies": [
        "AsyncMock",
        "LLMClient",
        "Path",
        "context",
        "dogfood",
        "interactive",
        "json",
        "llmstruct",
        "llmstruct.cli",
        "patch",
        "pathlib",
        "pytest",
        "read_file_content",
        "review",
        "unittest.mock"
      ],
      "hash": null,
      "artifact_id": "e0a62f09-8235-436d-9ab0-a3ddf6a111a6"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.deploy_embedded_files (1)",
      "path": "temp_workfiles/unsorted_mess/22.05.25/deploy_embedded_files (1).py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_json",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "data",
            "schema"
          ],
          "decorators": []
        },
        {
          "name": "backup_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "target_dir",
            "backup_root"
          ],
          "decorators": []
        },
        {
          "name": "deploy_embedded_files",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_json": [
          "validate",
          "logger.warning"
        ],
        "backup_files": [
          "logger.info",
          "target_dir.exists",
          "datetime.now",
          "shutil.copytree"
        ],
        "deploy_embedded_files": [
          "target_path.open",
          "backup_files",
          "EMBEDDED_FILES.get",
          "f.write",
          "Path",
          "logger.error",
          "json.dump",
          "EMBEDDED_FILES.items",
          "logger.info",
          "validate_json",
          "target_path.exists"
        ],
        "main": [
          "deploy_embedded_files"
        ]
      },
      "dependencies": [
        "Path",
        "ValidationError",
        "datetime",
        "json",
        "jsonschema",
        "logging",
        "os",
        "pathlib",
        "shutil",
        "validate"
      ],
      "hash": null,
      "artifact_id": "09d6ef58-6c6e-4d59-bb20-96a8da38e468"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_json_selector",
      "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_json_selector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_json",
          "docstring": "Filter JSON data by key-value pair and select fields.",
          "line_range": null,
          "parameters": [
            "data",
            "filter_key",
            "filter_value",
            "fields"
          ],
          "decorators": []
        },
        {
          "name": "select_json",
          "docstring": "Load and filter JSON file, optionally parsing partially.",
          "line_range": null,
          "parameters": [
            "json_path",
            "filter_key",
            "filter_value",
            "fields",
            "partial"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_json": [
          "filtered.append",
          "item.get",
          "isinstance",
          "data.get"
        ],
        "select_json": [
          "f.seek",
          "ijson.parse",
          "current_item.get",
          "path.append",
          "filtered.append",
          "json.load",
          "Path",
          "prefix.startswith",
          "open",
          "json_file.exists",
          "logging.error",
          "filter_json"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "ijson",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "0aed5af1-48ca-4633-bc5b-a46a29955674"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.collector",
      "path": "temp_workfiles/unsorted_mess/22.05.25/collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "generate_project_json",
          "docstring": "Generate project JSON with schema validation.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "output_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "generate_project_json": [
          "logging.info",
          "str",
          "validate",
          "uuid.uuid4",
          "json.load",
          "cli_path.exists",
          "Path",
          "cli_path.open",
          "open",
          "json.dump"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "validate"
      ],
      "hash": null,
      "artifact_id": "25bbeb01-5d6c-495b-be7c-184223f0c7f8"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.scripts_validate_refs",
      "path": "temp_workfiles/unsorted_mess/22.05.25/scripts_validate_refs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_references",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_references": [
          "target_file.exists",
          "broken_links.append",
          "logger.info",
          "json.load",
          "logger.warning",
          "Path",
          "logger.error",
          "json.dump",
          "idea.get",
          "enumerate",
          "source_file.exists"
        ],
        "main": [
          "validate_references"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "57c4c755-7b26-4fd3-acd1-b35a1bf82cbd"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_cache",
      "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_cache.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize SQLite cache for JSON files.",
          "line_range": null,
          "parameters": [
            "self",
            "db_path"
          ],
          "decorators": []
        },
        {
          "name": "create_tables",
          "docstring": "Create tables for metadata and file paths.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cache_json",
          "docstring": "Cache JSON metadata and store full file path.",
          "line_range": null,
          "parameters": [
            "self",
            "json_path",
            "artifact_id",
            "summary",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "get_metadata",
          "docstring": "Retrieve metadata by artifact_id.",
          "line_range": null,
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "get_full_json",
          "docstring": "Load full JSON by artifact_id.",
          "line_range": null,
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Close database connection.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JSONCache",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize SQLite cache for JSON files.",
              "line_range": null,
              "parameters": [
                "self",
                "db_path"
              ]
            },
            {
              "name": "create_tables",
              "docstring": "Create tables for metadata and file paths.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cache_json",
              "docstring": "Cache JSON metadata and store full file path.",
              "line_range": null,
              "parameters": [
                "self",
                "json_path",
                "artifact_id",
                "summary",
                "tags"
              ]
            },
            {
              "name": "get_metadata",
              "docstring": "Retrieve metadata by artifact_id.",
              "line_range": null,
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "get_full_json",
              "docstring": "Load full JSON by artifact_id.",
              "line_range": null,
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "close",
              "docstring": "Close database connection.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.create_tables",
          "sqlite3.connect"
        ],
        "create_tables": [],
        "cache_json": [
          "logging.info",
          "str",
          "content.encode",
          "f.read",
          "hashlib.sha256",
          "Path",
          "json.dumps",
          "open",
          "json_file.exists",
          "logging.error"
        ],
        "get_metadata": [
          "json.loads",
          "cursor.fetchone"
        ],
        "get_full_json": [
          "logging.error",
          "open",
          "json.load",
          "cursor.fetchone"
        ],
        "close": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "hashlib",
        "json",
        "logging",
        "pathlib",
        "sqlite3",
        "typing"
      ],
      "hash": null,
      "artifact_id": "7bcb5dba-a314-45e2-be1e-4457508c50a6"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.cli_parser",
      "path": "temp_workfiles/unsorted_mess/22.05.25/cli_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "parse_argparse",
          "docstring": "Parse argparse setup in cli.py to extract commands and arguments.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "generate_cli_json",
          "docstring": "Generate cli.json from cli.py.",
          "line_range": null,
          "parameters": [
            "cli_path",
            "output_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "parse_argparse": [
          "commands.append",
          "f.read",
          "arg_name.lstrip",
          "ast.parse",
          "cmd_args.append",
          "isinstance",
          "open",
          "ast.walk",
          "arg_name.startswith",
          "any",
          "next"
        ],
        "generate_cli_json": [
          "str",
          "validate",
          "parse_argparse",
          "json.load",
          "uuid.uuid4",
          "open",
          "json.dump"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "ast",
        "json",
        "jsonschema",
        "pathlib",
        "typing",
        "uuid",
        "validate"
      ],
      "hash": null,
      "artifact_id": "8052f073-39ee-4e80-aa0c-f14e2eac0119"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.scripts_collector",
      "path": "temp_workfiles/unsorted_mess/22.05.25/scripts_collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "apply_filters",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "files",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "collect_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "generate_struct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "output"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "apply_filters": [
          "filtered.append",
          "pattern.startswith",
          "fnmatch.fnmatch"
        ],
        "collect_files": [
          "str",
          "apply_filters",
          "path.is_file",
          "path.relative_to",
          "files.append",
          "root_dir.rglob"
        ],
        "generate_struct": [
          "str",
          "output_path.exists",
          "uuid.uuid4",
          "json.load",
          "Path",
          "json.dump",
          "collect_files",
          "output_path.open",
          "existing.get",
          "logger.info",
          "len"
        ],
        "main": [
          "generate_struct"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "logging",
        "pathlib",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "bd1e522f-6da8-4015-b621-e8ae3b988267"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.cache",
      "path": "temp_workfiles/unsorted_mess/22.05.25/cache.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "cache_path",
            "max_size"
          ],
          "decorators": []
        },
        {
          "name": "load_cache",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_cache",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "update_cache",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "task_id",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "get_context",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "task_id"
          ],
          "decorators": []
        },
        {
          "name": "clear_cache",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "task_id"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ChatCache",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "cache_path",
                "max_size"
              ]
            },
            {
              "name": "load_cache",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_cache",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "update_cache",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "task_id",
                "message"
              ]
            },
            {
              "name": "get_context",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "task_id"
              ]
            },
            {
              "name": "clear_cache",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "task_id"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.load_cache"
        ],
        "load_cache": [
          "open",
          "json.load"
        ],
        "save_cache": [
          "open",
          "json.dump"
        ],
        "update_cache": [
          "self.save_cache",
          "datetime.utcnow",
          "len"
        ],
        "get_context": [],
        "clear_cache": [
          "self.save_cache"
        ],
        "main": [
          "ChatCache",
          "cache.update_cache",
          "json.dumps",
          "print",
          "cache.get_context"
        ]
      },
      "dependencies": [
        "datetime",
        "json",
        "os"
      ],
      "hash": null,
      "artifact_id": "4d5981a1-f432-4f0b-bb88-9cc46b664544"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.validate_refs",
      "path": "temp_workfiles/unsorted_mess/22.05.25/validate_refs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_references",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_references": [
          "target_file.exists",
          "broken_links.append",
          "logger.info",
          "json.load",
          "logger.warning",
          "Path",
          "logger.error",
          "json.dump",
          "idea.get",
          "enumerate",
          "source_file.exists"
        ],
        "main": [
          "validate_references"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "93ede707-332f-49c4-945b-46e6f5629961"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.test_deploy_embedded_files",
      "path": "temp_workfiles/unsorted_mess/22.05.25/test_deploy_embedded_files.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "setup_dirs",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": [
            "pytest.fixture"
          ]
        },
        {
          "name": "test_deploy_embedded_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "setup_dirs"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "setup_dirs": [
          "json.dumps",
          "schemas_dir.mkdir",
          "docs_dir.mkdir",
          "data_dir.mkdir"
        ],
        "test_deploy_embedded_files": [
          "backup_root.glob",
          "list",
          "json.load",
          "deploy_embedded_files",
          "len"
        ]
      },
      "dependencies": [
        "Path",
        "deploy_embedded_files",
        "json",
        "pathlib",
        "pytest",
        "scripts.deploy_embedded_files"
      ],
      "hash": null,
      "artifact_id": "aae949b3-9d71-4e38-acb6-0408c3095e1e"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.cli",
      "path": "temp_workfiles/unsorted_mess/22.05.25/cli.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_cli_json",
          "docstring": "Load cli.json for command metadata.",
          "line_range": null,
          "parameters": [
            "cli_json_path"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with LLM, using cli.json for command metadata.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_cli_json": [
          "Path",
          "cli_json_path.open",
          "json.load",
          "cli_json_path.exists"
        ],
        "interactive": [
          "JSONCache",
          "input",
          "parse_files_from_response",
          "cli_json.get",
          "Path",
          "load_cli_json",
          "cache.close",
          "attach_to_llm_request",
          "parse",
          "LLMClient",
          "logging.error",
          "write_to_file",
          "client.query",
          "user_input.lower",
          "prompt.lower",
          "print",
          "cmd.get",
          "any",
          "t.format",
          "logging.warning"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "generate_json",
        "get_folder_structure",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "logging",
        "os",
        "pathlib",
        "re",
        "toml",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "a073b8ae-85f3-4067-9457-e3eae8354163"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.deploy_embedded_files",
      "path": "temp_workfiles/unsorted_mess/22.05.25/deploy_embedded_files.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_json",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "data",
            "schema"
          ],
          "decorators": []
        },
        {
          "name": "backup_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "target_dir",
            "backup_root"
          ],
          "decorators": []
        },
        {
          "name": "deploy_embedded_files",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_json": [
          "validate",
          "logger.warning"
        ],
        "backup_files": [
          "logger.info",
          "target_dir.exists",
          "datetime.now",
          "shutil.copytree"
        ],
        "deploy_embedded_files": [
          "target_path.open",
          "backup_files",
          "EMBEDDED_FILES.get",
          "f.write",
          "Path",
          "logger.error",
          "json.dump",
          "EMBEDDED_FILES.items",
          "logger.info",
          "validate_json",
          "target_path.exists"
        ],
        "main": [
          "deploy_embedded_files"
        ]
      },
      "dependencies": [
        "Path",
        "ValidationError",
        "datetime",
        "json",
        "jsonschema",
        "logging",
        "os",
        "pathlib",
        "shutil",
        "validate"
      ],
      "hash": null,
      "artifact_id": "65894b16-4d33-45b5-b266-8fe58fbab1cd"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_cli",
      "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_cli.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from llmstruct.toml or return empty dict.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default /tmp) and return the path.",
          "line_range": null,
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": null,
          "parameters": [
            "response"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "line.startswith",
          "gitignore_path.exists",
          "gitignore_path.open",
          "Path",
          "logging.error",
          "line.strip"
        ],
        "load_config": [
          "toml.load",
          "config_path\u30aa\u30fc\u30d7\u30f3",
          "Path",
          "config_path.exists",
          "logging.error"
        ],
        "read_file_content": [
          "path.open",
          "f.read",
          "Path",
          "path.is_file",
          "logging.error"
        ],
        "write_to_file": [
          "logging.info",
          "str",
          "base_path.mkdir",
          "f.write",
          "Path",
          "file_path.exists",
          "file_path.open",
          "logging.error",
          "logging.warning"
        ],
        "parse_files_from_response": [
          "files.append",
          "content.strip",
          "filename.strip",
          "re.findall"
        ],
        "interactive": [
          "write_match.group",
          "read_file_content",
          "input",
          "parse_files_from_response",
          "files_to_write.append",
          "get_folder_structure",
          "json.dumps",
          "Path",
          "re.search",
          "load_gitignore",
          "cache.close",
          "write_dir.startswith",
          "attach_to_llm_request",
          "parse",
          "LLMClient",
          "sorted",
          "logging.error",
          "os.listdir",
          "write_to_file",
          "scan_match.group",
          "client.query",
          "user_input.lower",
          "print",
          "JSONCache",
          "logging.warning"
        ],
        "parse": [
          "logging.info",
          "load_gitignore",
          "load_config",
          "cache.cache_json",
          "cache.close",
          "generate_json",
          "Path",
          "json.dump",
          "logging.error",
          "JSONCache",
          "logging.warning",
          "config.get"
        ],
        "query": [
          "logging.info",
          "client.query",
          "cache.close",
          "LLMClient",
          "Path",
          "json.dump",
          "logging.error",
          "JSONCache"
        ],
        "context": [
          "logging.warning"
        ],
        "dogfood": [
          "logging.warning"
        ],
        "review": [
          "logging.warning"
        ],
        "main": [
          "argparse.ArgumentParser",
          "parse_parser.add_argument",
          "interactive",
          "parser.add_subparsers",
          "interactive_parser.add_argument",
          "context",
          "context_parser.add_argument",
          "dogfood",
          "dogfood_parser.add_argument",
          "parser.parse_args",
          "parse",
          "review_parser.add_argument",
          "review",
          "subparsers.add_parser",
          "query_parser.add_argument",
          "asyncio.run",
          "query"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "generate_json",
        "get_folder_structure",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "logging",
        "os",
        "pathlib",
        "re",
        "toml",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "54457c0a-b0e7-4f03-a9e2-f4c7851124c5"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.extract_artifacts",
      "path": "temp_workfiles/unsorted_mess/22.05.25/extract_artifacts.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "parse_args",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_artifacts_index",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "index_path"
          ],
          "decorators": []
        },
        {
          "name": "save_artifacts_index",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "index",
            "index_path"
          ],
          "decorators": []
        },
        {
          "name": "calculate_sha256",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "content"
          ],
          "decorators": []
        },
        {
          "name": "extract_artifacts",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "html_file",
            "output_dir",
            "index_path"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "parse_args": [
          "argparse.ArgumentParser",
          "parser.parse_args",
          "parser.add_argument"
        ],
        "load_artifacts_index": [
          "open",
          "json.load"
        ],
        "save_artifacts_index": [
          "open",
          "json.dump"
        ],
        "calculate_sha256": [
          "hashlib.sha256",
          "content.encode"
        ],
        "extract_artifacts": [
          "datetime.utcnow",
          "artifact.get",
          "f.write",
          "content_type.split",
          "title.endswith",
          "os.makedirs",
          "f.read",
          "print",
          "open",
          "calculate_sha256",
          "save_artifacts_index",
          "BeautifulSoup",
          "load_artifacts_index",
          "soup.find_all",
          "extracted.append"
        ],
        "main": [
          "extract_artifacts",
          "parse_args",
          "print"
        ]
      },
      "dependencies": [
        "BeautifulSoup",
        "argparse",
        "bs4",
        "datetime",
        "hashlib",
        "json",
        "os",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "e0bced34-16ef-4de6-96c6-34fcf3757e4b"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.dumper",
      "path": "temp_workfiles/unsorted_mess/dump/dumper.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "json_hash",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "obj"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "json_hash": [
          "json.dumps",
          "dumped.encode",
          "hashlib.md5"
        ]
      },
      "dependencies": [
        "glob",
        "hashlib",
        "json",
        "os"
      ],
      "hash": null,
      "artifact_id": "dc957883-2b6b-470f-9826-70e75a5bf2ff"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_generators___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_generators___init__.py",
      "category": "core",
      "module_doc": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "JSONGenerator",
        "json_generator"
      ],
      "hash": null,
      "artifact_id": "f7f72d12-7087-4a43-800a-5eabcdbf3973"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.examples_python_project_utils",
      "path": "temp_workfiles/unsorted_mess/dump/examples_python_project_utils.py",
      "category": "core",
      "module_doc": "Utility functions for the sample project.",
      "functions": [
        {
          "name": "helper",
          "docstring": "Help the main function.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "log",
          "docstring": "Log a message.",
          "line_range": null,
          "parameters": [
            "message"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "helper": [
          "log"
        ],
        "log": [
          "logging.info"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": null,
      "artifact_id": "9b3e118b-8b9f-456b-b0f0-bf3bf56dc7c3"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_ideas_tree",
      "path": "temp_workfiles/unsorted_mess/dump/generate_ideas_tree.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "Path",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "680b300f-6928-4a26-b1b2-afb030054897"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct___init__.py",
      "category": "core",
      "module_doc": "LLMStruct: A tool for generating JSON-based code structures for LLM integration.\n\nThis package provides modular parsers, generators, and validators to create and validate\nJSON representations of code projects, supporting automation and context-aware LLM assistance.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "cedfee1e-def5-4dac-ae21-138f6456b4dd"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_efficiency1",
      "path": "temp_workfiles/unsorted_mess/dump/test_efficiency1.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "get_system_metrics",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "setup_proxy",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "proxy_url"
          ],
          "decorators": []
        },
        {
          "name": "run_llm_request",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "payload",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "test_with_llmstruct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "project_path",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "test_without_llmstruct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "project_path",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "evaluate_accuracy",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "response_text",
            "expected"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_system_metrics": [
          "psutil.virtual_memory",
          "psutil.cpu_percent"
        ],
        "setup_proxy": [
          "os.getenv"
        ],
        "run_llm_request": [
          "requests.Session",
          "time.perf_counter",
          "response.json",
          "get_system_metrics",
          "session.post",
          "len"
        ],
        "test_with_llmstruct": [
          "str",
          "subprocess.run",
          "f.read",
          "Path",
          "struct_path.exists",
          "open",
          "run_llm_request"
        ],
        "test_without_llmstruct": [
          "Path",
          "f.read",
          "open",
          "run_llm_request"
        ],
        "evaluate_accuracy": [
          "response_text.lower",
          "sum",
          "len"
        ],
        "main": [
          "argparse.ArgumentParser",
          "evaluate_accuracy",
          "range",
          "parser.parse_args",
          "parser.add_argument",
          "test_with_llmstruct",
          "test_without_llmstruct",
          "print",
          "open",
          "json.dump",
          "setup_proxy"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "json",
        "os",
        "pathlib",
        "psutil",
        "requests",
        "subprocess",
        "time"
      ],
      "hash": null,
      "artifact_id": "d859cc81-5d9d-46bc-9a73-fe9f894f4b5b"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_efficiency",
      "path": "temp_workfiles/unsorted_mess/dump/test_efficiency.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "get_system_metrics",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run_llm_request",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "payload"
          ],
          "decorators": []
        },
        {
          "name": "test_with_llmstruct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "test_without_llmstruct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "evaluate_accuracy",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "response_text",
            "expected"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_system_metrics": [
          "psutil.virtual_memory",
          "psutil.cpu_percent"
        ],
        "run_llm_request": [
          "requests.post",
          "time.perf_counter",
          "response.json",
          "get_system_metrics",
          "len"
        ],
        "test_with_llmstruct": [
          "str",
          "subprocess.run",
          "f.read",
          "Path",
          "struct_path.exists",
          "open",
          "run_llm_request"
        ],
        "test_without_llmstruct": [
          "Path",
          "f.read",
          "open",
          "run_llm_request"
        ],
        "evaluate_accuracy": [
          "response_text.lower",
          "sum",
          "len"
        ],
        "main": [
          "evaluate_accuracy",
          "range",
          "test_with_llmstruct",
          "test_without_llmstruct",
          "print",
          "open",
          "json.dump"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "pathlib",
        "psutil",
        "requests",
        "subprocess",
        "time"
      ],
      "hash": null,
      "artifact_id": "fdc59ec6-9b5a-4969-b200-c818cfa37644"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.grok",
      "path": "temp_workfiles/unsorted_mess/dump/grok.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "test_grok",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_key",
            "prompt",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "api_key",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "generate",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GrokClient",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "api_key",
                "proxy"
              ]
            },
            {
              "name": "generate",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "requests.Session"
        ],
        "generate": [
          "response.raise_for_status",
          "prompt.split",
          "response.json",
          "len"
        ],
        "test_grok": [
          "client.generate",
          "GrokClient",
          "time.perf_counter"
        ]
      },
      "dependencies": [
        "os",
        "requests"
      ],
      "hash": null,
      "artifact_id": "97eae184-cf4e-4df6-8d9f-af80770a8a24"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct___main__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct___main__.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "cli",
        "main"
      ],
      "hash": null,
      "artifact_id": "3a2a5d34-268f-4ced-9cdf-d1a943ee0c00"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_ru_docs (1)",
      "path": "temp_workfiles/unsorted_mess/dump/generate_ru_docs (1).py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "Path",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "dff4a2ad-37ea-4941-a933-5da2a5d8f251"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_efficiency (1)",
      "path": "temp_workfiles/unsorted_mess/dump/test_efficiency (1).py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "get_system_metrics",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "setup_proxy",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "proxy_url"
          ],
          "decorators": []
        },
        {
          "name": "run_llm_request",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "payload",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "check_llmstruct_cli",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_with_llmstruct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "project_path",
            "proxy",
            "use_placeholder"
          ],
          "decorators": []
        },
        {
          "name": "test_without_llmstruct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "project_path",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "test_with_grok",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_key",
            "project_path",
            "proxy",
            "use_placeholder"
          ],
          "decorators": []
        },
        {
          "name": "evaluate_accuracy",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "response_text",
            "expected"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_system_metrics": [
          "psutil.virtual_memory",
          "psutil.cpu_percent"
        ],
        "setup_proxy": [
          "os.getenv"
        ],
        "run_llm_request": [
          "requests.Session",
          "time.perf_counter",
          "response.json",
          "get_system_metrics",
          "session.post",
          "len"
        ],
        "check_llmstruct_cli": [
          "shutil.which"
        ],
        "test_with_llmstruct": [
          "str",
          "run_llm_request",
          "subprocess.run",
          "f.read",
          "FileNotFoundError",
          "Path",
          "open",
          "json.dump",
          "check_llmstruct_cli",
          "target_path.exists"
        ],
        "test_without_llmstruct": [
          "Path",
          "f.read",
          "open",
          "run_llm_request"
        ],
        "test_with_grok": [
          "f.read",
          "FileNotFoundError",
          "Path",
          "open",
          "json.dump",
          "test_grok",
          "target_path.exists"
        ],
        "evaluate_accuracy": [
          "response_text.lower",
          "sum",
          "len"
        ],
        "main": [
          "argparse.ArgumentParser",
          "str",
          "evaluate_accuracy",
          "parser.parse_args",
          "range",
          "parser.add_argument",
          "test_with_llmstruct",
          "test_without_llmstruct",
          "print",
          "test_with_grok",
          "open",
          "setup_proxy",
          "json.dump",
          "check_llmstruct_cli"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "json",
        "os",
        "pathlib",
        "psutil",
        "requests",
        "shutil",
        "src.llmstruct.grok",
        "subprocess",
        "test_grok",
        "time"
      ],
      "hash": null,
      "artifact_id": "9f511dda-dc1f-4155-adff-dab3dc455b24"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.json_generator",
      "path": "temp_workfiles/unsorted_mess/dump/json_generator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_folder_structure",
          "docstring": "Capture directory and file structure with artifact_id, respecting .gitignore and patterns.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "build_toc_and_modules",
          "docstring": "Build TOC and modules with artifact_id and robust filtering.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "Generate JSON structure for project with artifact_id, summary, and tags.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals",
            "exclude_dirs"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_folder_structure": [
          "str",
          "os.walk",
          "file_path.relative_to",
          "p.endswith",
          "uuid.uuid4",
          "file_path.match",
          "p.rstrip",
          "Path",
          "sorted",
          "any",
          "set",
          "structure.append"
        ],
        "build_toc_and_modules": [
          "f.match",
          "str",
          "analyze_module",
          "p.endswith",
          "uuid.uuid4",
          "modules.append",
          "toc.append",
          "p.rstrip",
          "Path",
          "any",
          "set",
          "len"
        ],
        "generate_json": [
          "str",
          "list",
          "get_folder_structure",
          "uuid.uuid4",
          "Path",
          "sum",
          "build_toc_and_modules",
          "set",
          "len"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "analyze_module",
        "datetime",
        "json",
        "logging",
        "os",
        "parsers.python_parser",
        "pathlib",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "0bd50fe1-00ba-4ce2-99f7-b47c481b8a01"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.llm_client_engines",
      "path": "temp_workfiles/unsorted_mess/dump/llm_client_engines.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "call_llm",
          "docstring": "Call the specified LLM backend with the given prompt.",
          "line_range": null,
          "parameters": [
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "call_ollama",
          "docstring": "Call Ollama with the specified prompt.",
          "line_range": null,
          "parameters": [
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "call_openai",
          "docstring": "Call OpenAI API with the specified prompt.",
          "line_range": null,
          "parameters": [
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "call_anthropic",
          "docstring": "Call Anthropic API with the specified prompt.",
          "line_range": null,
          "parameters": [
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "call_grok",
          "docstring": "Call xAI Grok API with the specified prompt.",
          "line_range": null,
          "parameters": [
            "prompt"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "call_llm": [
          "RuntimeError",
          "call_openai",
          "str",
          "call_anthropic",
          "call_grok",
          "ValueError",
          "call_ollama"
        ],
        "call_ollama": [
          "subprocess.run"
        ],
        "call_openai": [
          "os.getenv",
          "openai.OpenAI",
          "ValueError"
        ],
        "call_anthropic": [
          "ValueError",
          "os.getenv",
          "anthropic.Anthropic"
        ],
        "call_grok": [
          "requests.post",
          "response.json",
          "response.raise_for_status",
          "os.getenv",
          "ValueError"
        ]
      },
      "dependencies": [
        "LLM_BACKEND",
        "MODEL_NAME",
        "anthropic",
        "json",
        "llm_client.config",
        "openai",
        "os",
        "requests",
        "subprocess"
      ],
      "hash": null,
      "artifact_id": "81ee84bc-37b0-4a9d-9921-1787467a02c6"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.llm_client_config",
      "path": "temp_workfiles/unsorted_mess/dump/llm_client_config.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "os"
      ],
      "hash": null,
      "artifact_id": "37f405e4-0c73-44cb-b80d-13dcb920f6a6"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_parsers_python_parser",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_parsers_python_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "file_hash",
          "docstring": "Compute SHA-256 hash of file contents.",
          "line_range": null,
          "parameters": [
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "extract_comments",
          "docstring": "Extract single-line and multi-line comments using tokenize.",
          "line_range": null,
          "parameters": [
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_metadata",
          "docstring": "Compute file size, last modified time, line count, and optional hash.",
          "line_range": null,
          "parameters": [
            "filepath",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "infer_category",
          "docstring": "Infer module category based on path and dependencies.",
          "line_range": null,
          "parameters": [
            "path",
            "dependencies"
          ],
          "decorators": []
        },
        {
          "name": "get_signature",
          "docstring": "Generate function signature.",
          "line_range": null,
          "parameters": [
            "func_node"
          ],
          "decorators": []
        },
        {
          "name": "extract_dependencies",
          "docstring": "Extract module-level imports.",
          "line_range": null,
          "parameters": [
            "tree"
          ],
          "decorators": []
        },
        {
          "name": "analyze_module",
          "docstring": "Analyze a Python module in a single pass.",
          "line_range": null,
          "parameters": [
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "visit_Call",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_Import",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_ImportFrom",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "Extract function calls and module dependencies.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "visit_Call",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_Import",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_ImportFrom",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ]
        }
      ],
      "callgraph": {
        "file_hash": [
          "hashlib.sha256",
          "f.read",
          "open",
          "logging.error"
        ],
        "extract_comments": [
          "comments.append",
          "tokenize.tokenize",
          "open",
          "logging.error"
        ],
        "compute_file_metadata": [
          "os.stat",
          "file_hash",
          "sum",
          "open",
          "logging.error"
        ],
        "infer_category": [
          "path.lower",
          "any"
        ],
        "get_signature": [],
        "__init__": [
          "set"
        ],
        "visit_Call": [
          "self.generic_visit",
          "isinstance"
        ],
        "visit_Import": [
          "self.generic_visit"
        ],
        "visit_ImportFrom": [
          "self.generic_visit"
        ],
        "extract_dependencies": [
          "dependencies.update",
          "dependencies.add",
          "sorted",
          "isinstance",
          "ast.walk",
          "set"
        ],
        "analyze_module": [
          "str",
          "f.read",
          "infer_category",
          "ast.parse",
          "methods.append",
          "ast.get_docstring",
          "extract_comments",
          "classes.append",
          "hashlib.sha256",
          "compute_file_metadata",
          "CallVisitor",
          "source.splitlines",
          "sorted",
          "logging.error",
          "functions.append",
          "getattr",
          "get_signature",
          "visitor.visit",
          "extract_dependencies",
          "open",
          "isinstance"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "Set",
        "ast",
        "hashlib",
        "logging",
        "os",
        "pathlib",
        "tokenize",
        "typing"
      ],
      "hash": null,
      "artifact_id": "f8aeeb80-1722-4dba-9fe8-6aca87a48108"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_generators_json_generator",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_generators_json_generator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_folder_structure",
          "docstring": "Capture directory and file structure, respecting .gitignore and patterns.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns"
          ],
          "decorators": []
        },
        {
          "name": "build_toc_and_modules",
          "docstring": "Build TOC and modules with robust .gitignore filtering using pathlib.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "Generate JSON structure for project.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_folder_structure": [
          "str",
          "os.walk",
          "logging.debug",
          "rel_dir.split",
          "file_path.relative_to",
          "exclude_patterns.extend",
          "fnmatch.fnmatch",
          "dir_path.relative_to",
          "Path",
          "sorted",
          "any",
          "dirnames.clear",
          "structure.append"
        ],
        "build_toc_and_modules": [
          "logging.info",
          "str",
          "os.walk",
          "logging.debug",
          "rel_dir.split",
          "file_path.relative_to",
          "analyze_module",
          "exclude_patterns.extend",
          "fnmatch.fnmatch",
          "dir_path.relative_to",
          "modules.append",
          "Path",
          "sum",
          "toc.append",
          "any",
          "len"
        ],
        "generate_json": [
          "get_folder_structure",
          "build_toc_and_modules",
          "len"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "Tuple",
        "analyze_module",
        "datetime",
        "json",
        "logging",
        "os",
        "parsers.python_parser",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "796ea96f-528e-4660-921d-5e237fae0a18"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_llmstruct",
      "path": "temp_workfiles/unsorted_mess/dump/generate_llmstruct.py",
      "category": "core",
      "module_doc": "Generate JSON for workspace based on user instructions template.\n\nCreates structure:\n- metadata with description, instructions, and version\n- toc with module summaries and categories\n- modules with detailed function/class info, comments, call graphs, and categories",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore, logging loaded patterns.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_goals",
          "docstring": "Load goals from semicolon-separated string, file, or interactive editor.",
          "line_range": null,
          "parameters": [
            "goals_input"
          ],
          "decorators": []
        },
        {
          "name": "file_hash",
          "docstring": "Compute SHA-256 hash of file contents.",
          "line_range": null,
          "parameters": [
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "extract_comments",
          "docstring": "Extract single-line and multi-line comments using tokenize.",
          "line_range": null,
          "parameters": [
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_metadata",
          "docstring": "Compute file size, last modified time, line count, and optional hash.",
          "line_range": null,
          "parameters": [
            "filepath",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "infer_category",
          "docstring": "Infer module category based on path and dependencies.",
          "line_range": null,
          "parameters": [
            "path",
            "dependencies"
          ],
          "decorators": []
        },
        {
          "name": "get_signature",
          "docstring": "Generate function signature.",
          "line_range": null,
          "parameters": [
            "func_node"
          ],
          "decorators": []
        },
        {
          "name": "extract_dependencies",
          "docstring": "Extract module-level imports.",
          "line_range": null,
          "parameters": [
            "tree"
          ],
          "decorators": []
        },
        {
          "name": "analyze_module",
          "docstring": "Analyze a Python module in a single pass.",
          "line_range": null,
          "parameters": [
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "build_toc_and_modules",
          "docstring": "Build TOC and modules with robust .gitignore filtering using pathlib.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "Generate JSON structure for project.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "include_ranges",
            "include_hashes",
            "goals_input"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "visit_Call",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_Import",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_ImportFrom",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "Extract function calls and module dependencies.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "visit_Call",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_Import",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_ImportFrom",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ]
        }
      ],
      "callgraph": {
        "load_gitignore": [
          "logging.info",
          "line.startswith",
          "open",
          "logging.error",
          "line.strip",
          "logging.warning",
          "len"
        ],
        "load_goals": [
          "logging.info",
          "temp.flush",
          "g.strip",
          "line.startswith",
          "goals_input.split",
          "subprocess.run",
          "tempfile.NamedTemporaryFile",
          "temp.write",
          "os.unlink",
          "open",
          "logging.error",
          "line.strip",
          "len"
        ],
        "file_hash": [
          "hashlib.sha256",
          "f.read",
          "open",
          "logging.error"
        ],
        "extract_comments": [
          "comments.append",
          "tokenize.tokenize",
          "open",
          "logging.error"
        ],
        "compute_file_metadata": [
          "os.stat",
          "file_hash",
          "sum",
          "open",
          "logging.error"
        ],
        "infer_category": [
          "path.lower",
          "any"
        ],
        "get_signature": [],
        "__init__": [
          "set"
        ],
        "visit_Call": [
          "self.generic_visit",
          "isinstance"
        ],
        "visit_Import": [
          "self.generic_visit"
        ],
        "visit_ImportFrom": [
          "self.generic_visit"
        ],
        "extract_dependencies": [
          "dependencies.update",
          "dependencies.add",
          "sorted",
          "isinstance",
          "ast.walk",
          "set"
        ],
        "analyze_module": [
          "str",
          "f.read",
          "infer_category",
          "ast.parse",
          "methods.append",
          "ast.get_docstring",
          "extract_comments",
          "classes.append",
          "hashlib.sha256",
          "compute_file_metadata",
          "CallVisitor",
          "source.splitlines",
          "sorted",
          "logging.error",
          "functions.append",
          "getattr",
          "get_signature",
          "visitor.visit",
          "extract_dependencies",
          "open",
          "isinstance"
        ],
        "build_toc_and_modules": [
          "logging.info",
          "str",
          "os.walk",
          "logging.debug",
          "load_gitignore",
          "rel_dir.split",
          "file_path.relative_to",
          "analyze_module",
          "exclude_patterns.extend",
          "fnmatch.fnmatch",
          "dir_path.relative_to",
          "modules.append",
          "Path",
          "sum",
          "toc.append",
          "any",
          "len"
        ],
        "generate_json": [
          "len",
          "build_toc_and_modules",
          "load_goals"
        ],
        "main": [
          "argparse.ArgumentParser",
          "logging.info",
          "generate_json",
          "parser.parse_args",
          "parser.add_argument",
          "language_patterns.get",
          "open",
          "json.dump",
          "include_patterns.extend",
          "logging.error",
          "logging.warning"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "ast",
        "datetime",
        "fnmatch",
        "hashlib",
        "json",
        "logging",
        "os",
        "pathlib",
        "subprocess",
        "tempfile",
        "tokenize",
        "typing"
      ],
      "hash": null,
      "artifact_id": "c97e1b0e-0ccc-4936-8550-acb1076a3038"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_docs (1)",
      "path": "temp_workfiles/unsorted_mess/dump/generate_docs (1).py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "compute_hash",
          "docstring": "Compute SHA-256 hash of content.",
          "line_range": null,
          "parameters": [
            "content"
          ],
          "decorators": []
        },
        {
          "name": "load_struct_json",
          "docstring": "Load struct.json for metadata.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_llmstruct_toml",
          "docstring": "Load llmstruct.toml for configuration.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "generate_docs",
          "docstring": "Generate all documentation files with idempotency.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "compute_hash": [
          "hashlib.sha256",
          "content.encode"
        ],
        "load_struct_json": [
          "Path",
          "struct_path.exists",
          "open",
          "json.load"
        ],
        "load_llmstruct_toml": [
          "toml.load",
          "Path",
          "open",
          "toml_path.exists"
        ],
        "generate_docs": [
          "str",
          "metadata.get",
          "f.write",
          "f.read",
          "json.dumps",
          "Path",
          "project_name.lower",
          "compute_hash",
          "file_path.exists",
          "load_struct_json",
          "struct_data.get",
          "datetime.utcnow",
          "toml_data.get",
          "chr",
          "doc_files.items",
          "load_llmstruct_toml",
          "open",
          "any",
          "logger.info"
        ]
      },
      "dependencies": [
        "Path",
        "datetime",
        "hashlib",
        "json",
        "logging",
        "os",
        "pathlib",
        "toml"
      ],
      "hash": null,
      "artifact_id": "ab8a0089-6821-419b-9059-d035eb21b3b2"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_ru_docs",
      "path": "temp_workfiles/unsorted_mess/dump/generate_ru_docs.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "Path",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "732239c7-6b89-46c2-9f3c-7a2ca3403b04"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.collector",
      "path": "temp_workfiles/unsorted_mess/dump/collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "collect_project",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "Path",
          "gitignore_parser.parse_gitignore",
          "gitignore_path.exists"
        ],
        "collect_project": [
          "gitignore",
          "str",
          "file_path.is_file",
          "load_gitignore",
          "doc_files.items",
          "f.read",
          "Path",
          "open",
          "json.dump",
          "any",
          "root_dir.rglob"
        ]
      },
      "dependencies": [
        "Path",
        "gitignore_parser",
        "json",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "e84aeb17-7516-42d3-9eb8-075089628de1"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.collect_docs (1)",
      "path": "temp_workfiles/unsorted_mess/dump/collect_docs (1).py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load patterns from .gitignore.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "should_ignore",
          "docstring": "Check if path should be ignored based on directories or .gitignore.",
          "line_range": null,
          "parameters": [
            "path",
            "root_dir",
            "ignore_dirs",
            "gitignore_patterns"
          ],
          "decorators": []
        },
        {
          "name": "collect_docs",
          "docstring": "Collect all documentation files into a JSON file.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "patterns.append",
          "line.startswith",
          "gitignore_path.exists",
          "open",
          "line.strip"
        ],
        "should_ignore": [
          "rel_path.startswith",
          "str",
          "path.relative_to",
          "fnmatch"
        ],
        "collect_docs": [
          "str",
          "load_gitignore",
          "f.read",
          "Path",
          "path.is_file",
          "print",
          "open",
          "path.relative_to",
          "json.dump",
          "root_dir.rglob",
          "should_ignore"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "f5fbe7b6-ec47-4e7b-a03d-2fe4a152e37b"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.collect_docs",
      "path": "temp_workfiles/unsorted_mess/dump/collect_docs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "collect_docs",
          "docstring": "Collect all documentation files into a single text file.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "collect_docs": [
          "dir_path.rglob",
          "file_path.is_file",
          "f.write",
          "f.read",
          "collected.append",
          "Path",
          "file_path.exists",
          "print",
          "open",
          "dir_path.exists"
        ]
      },
      "dependencies": [
        "Path",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "682fcf19-7664-4178-bc2a-1cfd5dd693ec"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.refactored_structure",
      "path": "temp_workfiles/unsorted_mess/dump/refactored_structure.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "json_path",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "parse_module",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "parse_module",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "generate",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "modules",
            "metadata"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "PythonParser",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "parse_module",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath",
                "root_dir",
                "include_ranges",
                "include_hashes"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "JavaScriptParser",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "parse_module",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath",
                "root_dir",
                "include_ranges",
                "include_hashes"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "JSONGenerator",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "generate",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "modules",
                "metadata"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "parse_module": [],
        "generate": [],
        "main": [
          "argparse.ArgumentParser",
          "JavaScriptParser",
          "parser.parse_args",
          "parser.parse_module",
          "parser.add_argument",
          "generator.generate",
          "open",
          "json.dump",
          "JSONGenerator",
          "PythonParser"
        ],
        "attach_to_llm_request": [
          "json.dumps",
          "open",
          "json.load"
        ]
      },
      "dependencies": [],
      "hash": null,
      "artifact_id": "eaa516ee-5701-45e2-b22c-2e8bf998d934"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_parsers_python_parser (1)",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_parsers_python_parser (1).py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "infer_category",
          "docstring": "Infer module category based on path.",
          "line_range": null,
          "parameters": [
            "path"
          ],
          "decorators": []
        },
        {
          "name": "analyze_module",
          "docstring": "Analyze a Python module to extract functions, classes, and call graph.",
          "line_range": null,
          "parameters": [
            "file_path",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "visit_Call",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "AST visitor to collect function and module calls.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "visit_Call",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ]
        }
      ],
      "callgraph": {
        "infer_category": [
          "path.lower"
        ],
        "__init__": [
          "set"
        ],
        "visit_Call": [
          "self.generic_visit",
          "isinstance"
        ],
        "analyze_module": [
          "str",
          "dependencies.add",
          "f.read",
          "infer_category",
          "ast.parse",
          "relative_path.encode",
          "ast.walk",
          "ast.get_docstring",
          "methods.append",
          "code.encode",
          "classes.append",
          "hashlib.sha256",
          "Path",
          "CallVisitor",
          "len",
          "code.splitlines",
          "dependencies.update",
          "sorted",
          "logging.error",
          "set",
          "functions.append",
          "visitor.visit",
          "datetime.fromtimestamp",
          "os.stat",
          "open",
          "isinstance",
          "ast.unparse"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "Set",
        "ast",
        "datetime",
        "hashlib",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "77cec129-cff0-4732-9afa-f83cb7826bd0"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_templates___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_templates___init__.py",
      "category": "core",
      "module_doc": "Templates for LLM prompts used in LLMStruct integration.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "abac1d30-be3c-47df-9d18-2014d64ab6aa"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_end_to_end (1)",
      "path": "temp_workfiles/unsorted_mess/dump/test_end_to_end (1).py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "test_end_to_end",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_end_to_end": [
          "main",
          "str",
          "tasks_json.write_text",
          "main_py.write_text",
          "validate_struct_json",
          "json.load",
          "open",
          "project_dir.mkdir",
          "output_json.exists",
          "any",
          "utils_py.write_text",
          "next",
          "len"
        ]
      },
      "dependencies": [
        "json",
        "llmstruct.cli",
        "llmstruct.validators.json_validator",
        "main",
        "os",
        "pytest",
        "sys",
        "validate_struct_json"
      ],
      "hash": null,
      "artifact_id": "0e29c4aa-e73b-4cd8-936c-cc0962c91e3e"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_docs",
      "path": "temp_workfiles/unsorted_mess/dump/generate_docs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_content_hash",
          "docstring": "Calculate hash of content for idempotency.",
          "line_range": null,
          "parameters": [
            "content"
          ],
          "decorators": []
        },
        {
          "name": "create_file",
          "docstring": "Create or update file if content changed.",
          "line_range": null,
          "parameters": [
            "path",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "generate_docs_tree",
          "docstring": "Generate Di\u00e1taxis-compliant documentation for llmstruct.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "print_docs_tree",
          "docstring": "Print documentation tree.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_content_hash": [
          "hashlib.sha256",
          "content.encode"
        ],
        "create_file": [
          "get_content_hash",
          "f.write",
          "f.read",
          "content.strip",
          "print",
          "open",
          "path.exists"
        ],
        "generate_docs_tree": [
          "Path",
          "create_file"
        ],
        "print_docs_tree": [
          "root.replace",
          "print",
          "os.walk",
          "root.startswith"
        ]
      },
      "dependencies": [
        "Path",
        "hashlib",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "45009ac5-8cc1-440c-9120-a02c31d75c7e"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.examples_python_project_main",
      "path": "temp_workfiles/unsorted_mess/dump/examples_python_project_main.py",
      "category": "core",
      "module_doc": "Main module for the sample project.",
      "functions": [
        {
          "name": "main",
          "docstring": "Run the program.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "Execute the app.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "App",
          "docstring": "Application class.",
          "line_range": null,
          "methods": [
            {
              "name": "run",
              "docstring": "Execute the app.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "main": [
          "utils.helper",
          "print"
        ],
        "run": [
          "utils.log"
        ]
      },
      "dependencies": [
        "utils"
      ],
      "hash": null,
      "artifact_id": "710ad766-b826-480b-9100-296552f2873d"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.filter_llmstruct_json",
      "path": "temp_workfiles/unsorted_mess/dump/filter_llmstruct_json.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load .gitignore patterns.",
          "line_range": null,
          "parameters": [
            "gitignore_path"
          ],
          "decorators": []
        },
        {
          "name": "filter_json",
          "docstring": "Filter struct.json to exclude .gitignore paths and optionally tests.",
          "line_range": null,
          "parameters": [
            "data",
            "gitignore_patterns",
            "include_tests"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "line.strip",
          "patterns.append",
          "open",
          "line.startswith"
        ],
        "filter_json": [
          "module.get",
          "fnmatch.fnmatch",
          "any",
          "data.get",
          "len"
        ],
        "main": [
          "argparse.ArgumentParser",
          "logging.info",
          "str",
          "logging.basicConfig",
          "load_gitignore",
          "parser.parse_args",
          "json.load",
          "parser.add_argument",
          "open",
          "json.dump",
          "logging.error",
          "filter_json"
        ]
      },
      "dependencies": [
        "argparse",
        "fnmatch",
        "json",
        "logging",
        "os"
      ],
      "hash": null,
      "artifact_id": "379df94e-7e23-4e36-a196-9f86e372faf0"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_ru_internal_docs",
      "path": "temp_workfiles/unsorted_mess/dump/generate_ru_internal_docs.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "Path",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "b94a9bc1-38f3-4735-aeaf-ef92bf5f87d6"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.llm_client",
      "path": "temp_workfiles/unsorted_mess/dump/llm_client.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize LLMClient with optional Ollama host.",
          "line_range": null,
          "parameters": [
            "self",
            "ollama_host"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt, context, and optional model.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "context_path",
            "mode",
            "model",
            "artifact_ids"
          ],
          "decorators": []
        },
        {
          "name": "_query_grok",
          "docstring": "Query Grok API.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_anthropic",
          "docstring": "Query Anthropic API.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_ollama",
          "docstring": "Query Ollama API with specified model.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "_query_hybrid",
          "docstring": "Query multiple LLMs and combine results.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMClient",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize LLMClient with optional Ollama host.",
              "line_range": null,
              "parameters": [
                "self",
                "ollama_host"
              ]
            },
            {
              "name": "query",
              "docstring": "Query LLMs with prompt, context, and optional model.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "context_path",
                "mode",
                "model",
                "artifact_ids"
              ]
            },
            {
              "name": "_query_grok",
              "docstring": "Query Grok API.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_anthropic",
              "docstring": "Query Anthropic API.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_ollama",
              "docstring": "Query Ollama API with specified model.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            },
            {
              "name": "_query_hybrid",
              "docstring": "Query multiple LLMs and combine results.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "logging.info",
          "int",
          "os.getenv"
        ],
        "query": [
          "logging.info",
          "self._query_hybrid",
          "self._query_ollama",
          "self._query_anthropic",
          "json.load",
          "range",
          "json.dumps",
          "Path",
          "logging.error",
          "self._query_grok",
          "asyncio.sleep",
          "logging.warning"
        ],
        "_query_grok": [
          "logging.info",
          "result.get",
          "response.json",
          "logging.error",
          "aiohttp.ClientSession",
          "session.post"
        ],
        "_query_anthropic": [
          "logging.info",
          "result.get",
          "response.json",
          "logging.error",
          "aiohttp.ClientSession",
          "session.post"
        ],
        "_query_ollama": [
          "logging.info",
          "logging.debug",
          "result.get",
          "response.json",
          "logging.error",
          "session.post",
          "aiohttp.ClientSession"
        ],
        "_query_hybrid": [
          "logging.info",
          "self._query_ollama",
          "asyncio.gather",
          "isinstance",
          "self._query_anthropic",
          "self._query_grok",
          "len"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "aiohttp",
        "asyncio",
        "dotenv",
        "json",
        "load_dotenv",
        "logging",
        "os",
        "pathlib",
        "requests",
        "typing",
        "urljoin",
        "urllib.parse"
      ],
      "hash": null,
      "artifact_id": "46fcc3d1-c75e-4495-a7df-06c82da61eb5"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.llm_client (3)",
      "path": "temp_workfiles/unsorted_mess/dump/llm_client (3).py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize LLMClient with optional Ollama host.",
          "line_range": null,
          "parameters": [
            "self",
            "ollama_host"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt, context, and optional model.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "context_path",
            "mode",
            "model",
            "artifact_ids"
          ],
          "decorators": []
        },
        {
          "name": "_query_grok",
          "docstring": "Query Grok API.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_anthropic",
          "docstring": "Query Anthropic API.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_ollama",
          "docstring": "Query Ollama API with specified model.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "_query_hybrid",
          "docstring": "Query multiple LLMs and combine results.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMClient",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize LLMClient with optional Ollama host.",
              "line_range": null,
              "parameters": [
                "self",
                "ollama_host"
              ]
            },
            {
              "name": "query",
              "docstring": "Query LLMs with prompt, context, and optional model.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "context_path",
                "mode",
                "model",
                "artifact_ids"
              ]
            },
            {
              "name": "_query_grok",
              "docstring": "Query Grok API.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_anthropic",
              "docstring": "Query Anthropic API.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_ollama",
              "docstring": "Query Ollama API with specified model.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            },
            {
              "name": "_query_hybrid",
              "docstring": "Query multiple LLMs and combine results.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "int",
          "os.getenv"
        ],
        "query": [
          "logging.info",
          "self._query_hybrid",
          "self._query_ollama",
          "self._query_anthropic",
          "json.load",
          "range",
          "json.dumps",
          "Path",
          "logging.error",
          "self._query_grok",
          "asyncio.sleep",
          "logging.warning"
        ],
        "_query_grok": [
          "logging.info",
          "result.get",
          "response.json",
          "logging.error",
          "aiohttp.ClientSession",
          "session.post"
        ],
        "_query_anthropic": [
          "logging.info",
          "result.get",
          "response.json",
          "logging.error",
          "aiohttp.ClientSession",
          "session.post"
        ],
        "_query_ollama": [
          "logging.info",
          "result.get",
          "urljoin",
          "response.json",
          "logging.error",
          "aiohttp.ClientSession",
          "session.post"
        ],
        "_query_hybrid": [
          "logging.info",
          "self._query_ollama",
          "asyncio.gather",
          "isinstance",
          "self._query_anthropic",
          "self._query_grok",
          "len"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "aiohttp",
        "asyncio",
        "dotenv",
        "json",
        "load_dotenv",
        "logging",
        "os",
        "pathlib",
        "requests",
        "typing",
        "urljoin",
        "urllib.parse"
      ],
      "hash": null,
      "artifact_id": "9ae994f1-f8a0-4e54-8bdd-d541d24f5600"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.tests___init__",
      "path": "temp_workfiles/unsorted_mess/dump/tests___init__.py",
      "category": "core",
      "module_doc": "Test suite for LLMStruct, covering parsers, generators, validators, and integration.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "0c3dc5dc-6793-4cf5-b13c-99968474d03d"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.check_docs",
      "path": "temp_workfiles/unsorted_mess/dump/check_docs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_struct",
          "docstring": "Load struct.json.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "check_docs",
          "docstring": "Check docs/ against struct.json and dialogue state.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Run doc check and print report.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_struct": [
          "open",
          "json.load"
        ],
        "check_docs": [
          "struct.get",
          "os.walk",
          "f.read",
          "issues.append",
          "Path",
          "open",
          "load_struct",
          "content.lower"
        ],
        "main": [
          "check_docs",
          "print"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "3e940d4f-94e6-41fa-be51-276cb32a1f4f"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.javascript_parser",
      "path": "temp_workfiles/unsorted_mess/dump/javascript_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "file_hash",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_metadata",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "parse_module",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "extract_signature",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JavaScriptParser",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "file_hash",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath"
              ]
            },
            {
              "name": "compute_file_metadata",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath",
                "include_hashes"
              ]
            },
            {
              "name": "parse_module",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath",
                "root_dir",
                "include_ranges",
                "include_hashes"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "set"
        ],
        "file_hash": [
          "hashlib.sha256",
          "f.read",
          "open"
        ],
        "compute_file_metadata": [
          "sum",
          "self.file_hash",
          "open",
          "os.stat"
        ],
        "parse_module": [
          "str",
          "self.compute_file_metadata",
          "f.read",
          "open",
          "esprima.parseModule"
        ],
        "extract_signature": [
          "hasattr"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "datetime",
        "esprima",
        "hashlib",
        "os",
        "typing"
      ],
      "hash": null,
      "artifact_id": "5b650cdb-6a94-410a-b001-39b8b547503d"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.self_run",
      "path": "temp_workfiles/unsorted_mess/dump/self_run.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_struct",
          "docstring": "Filter struct.json based on prompt keywords.",
          "line_range": null,
          "parameters": [
            "struct",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "Attach filtered struct.json to LLM prompt.",
          "line_range": null,
          "parameters": [
            "context_path",
            "prompt"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_struct": [
          "module.get",
          "any",
          "struct.get",
          "prompt.lower"
        ],
        "attach_to_llm_request": [
          "prompt.lower",
          "json.load",
          "json.dumps",
          "Path",
          "filter_struct",
          "open",
          "logging.error",
          "context_file.exists",
          "filter_json"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "filter_json",
        "json",
        "json_selector",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "a4fb5858-d2ac-4f20-8b4b-5c1410c6ef6b"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_generators_json_generator (1)",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_generators_json_generator (1).py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_folder_structure",
          "docstring": "Capture directory and file structure, respecting .gitignore and patterns.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns"
          ],
          "decorators": []
        },
        {
          "name": "build_toc_and_modules",
          "docstring": "Build TOC and modules with robust .gitignore filtering using pathlib.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "Generate JSON structure for project.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_folder_structure": [
          "str",
          "os.walk",
          "file_path.relative_to",
          "file_path.match",
          "Path",
          "sorted",
          "any",
          "structure.append"
        ],
        "build_toc_and_modules": [
          "f.match",
          "str",
          "python_parser.analyze_module",
          "modules.append",
          "toc.append",
          "Path",
          "any",
          "len"
        ],
        "generate_json": [
          "list",
          "get_folder_structure",
          "Path",
          "sum",
          "build_toc_and_modules",
          "set",
          "len"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "datetime",
        "json",
        "logging",
        "os",
        "parsers",
        "pathlib",
        "python_parser",
        "typing"
      ],
      "hash": null,
      "artifact_id": "75147e0b-fafd-4037-b523-85322d863b71"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_end_to_end",
      "path": "temp_workfiles/unsorted_mess/dump/test_end_to_end.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "test_end_to_end",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_end_to_end": [
          "main",
          "str",
          "main_py.write_text",
          "validate_struct_json",
          "json.load",
          "open",
          "project_dir.mkdir",
          "output_json.exists"
        ]
      },
      "dependencies": [
        "json",
        "llmstruct.cli",
        "llmstruct.validators.json_validator",
        "main",
        "os",
        "pytest",
        "sys",
        "validate_struct_json"
      ],
      "hash": null,
      "artifact_id": "0d3020ff-bb9d-4b56-91a2-70be3bd772c2"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.python_parser",
      "path": "temp_workfiles/unsorted_mess/dump/python_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "visit_Call",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "file_hash",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_metadata",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "parse_module",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "visit_Call",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ]
        },
        {
          "name": "PythonParser",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "file_hash",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath"
              ]
            },
            {
              "name": "compute_file_metadata",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath",
                "include_hashes"
              ]
            },
            {
              "name": "parse_module",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath",
                "root_dir",
                "include_ranges",
                "include_hashes"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "set"
        ],
        "visit_Call": [
          "self.generic_visit",
          "isinstance"
        ],
        "file_hash": [
          "hashlib.sha256",
          "f.read",
          "open"
        ],
        "compute_file_metadata": [
          "sum",
          "self.file_hash",
          "open",
          "os.stat"
        ],
        "parse_module": [
          "dependencies.append",
          "str",
          "call.split",
          "f.read",
          "ast.parse",
          "methods.append",
          "ast.walk",
          "ast.get_docstring",
          "list",
          "classes.append",
          "CallVisitor",
          "sorted",
          "set",
          "functions.append",
          "visitor.visit",
          "self.compute_file_metadata",
          "dependencies.extend",
          "open",
          "isinstance"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "ast",
        "datetime",
        "hashlib",
        "os",
        "typing"
      ],
      "hash": null,
      "artifact_id": "92905a4b-71cd-4655-965b-7864191725ae"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_parsers___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_parsers___init__.py",
      "category": "core",
      "module_doc": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "JavaScriptParser",
        "PythonParser",
        "javascript_parser",
        "python_parser"
      ],
      "hash": null,
      "artifact_id": "bcb0e915-5035-400c-af80-a8991186c89a"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_cli (1)",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_cli (1).py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_goals",
          "docstring": "Load project goals from pyproject.toml or default.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "line.startswith",
          "gitignore_path.exists",
          "gitignore_path.open",
          "Path",
          "logging.error",
          "line.strip"
        ],
        "load_goals": [
          "toml.load",
          "Path",
          "pyproject_path.open",
          "pyproject_path.exists",
          "logging.error",
          "config.get"
        ],
        "main": [
          "argparse.ArgumentParser",
          "logging.info",
          "load_gitignore",
          "generate_json",
          "parser.parse_args",
          "load_goals",
          "parser.add_argument",
          "open",
          "json.dump",
          "logging.error"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "argparse",
        "generate_json",
        "generators.json_generator",
        "json",
        "logging",
        "os",
        "pathlib",
        "toml",
        "typing"
      ],
      "hash": null,
      "artifact_id": "253a0f8f-4490-425a-b5e2-d75b5ffb9aa4"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_efficiency_proxybypass",
      "path": "temp_workfiles/unsorted_mess/dump/test_efficiency_proxybypass.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "is_local_address",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "url"
          ],
          "decorators": []
        },
        {
          "name": "get_system_metrics",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "setup_proxy",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "proxy_url"
          ],
          "decorators": []
        },
        {
          "name": "run_llm_request",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "payload",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "test_with_llmstruct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "project_path",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "test_without_llmstruct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "project_path",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "evaluate_accuracy",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "response_text",
            "expected"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "is_local_address": [
          "ipaddress.ip_address",
          "urlparse"
        ],
        "get_system_metrics": [
          "psutil.virtual_memory",
          "psutil.cpu_percent"
        ],
        "setup_proxy": [
          "os.getenv"
        ],
        "run_llm_request": [
          "requests.Session",
          "time.perf_counter",
          "response.json",
          "get_system_metrics",
          "len",
          "session.post",
          "is_local_address"
        ],
        "test_with_llmstruct": [
          "str",
          "subprocess.run",
          "f.read",
          "Path",
          "struct_path.exists",
          "open",
          "run_llm_request"
        ],
        "test_without_llmstruct": [
          "Path",
          "f.read",
          "open",
          "run_llm_request"
        ],
        "evaluate_accuracy": [
          "response_text.lower",
          "sum",
          "len"
        ],
        "main": [
          "argparse.ArgumentParser",
          "evaluate_accuracy",
          "range",
          "parser.parse_args",
          "parser.add_argument",
          "test_with_llmstruct",
          "test_without_llmstruct",
          "print",
          "open",
          "json.dump",
          "setup_proxy"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "ipaddress",
        "json",
        "os",
        "pathlib",
        "psutil",
        "requests",
        "subprocess",
        "time",
        "urllib.parse",
        "urlparse"
      ],
      "hash": null,
      "artifact_id": "2de2430e-aa1a-4f86-82a4-81b8f41f999c"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.scripts_setup_github",
      "path": "temp_workfiles/unsorted_mess/dump/scripts_setup_github.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_json",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "create_issue",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "repo",
            "token",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "setup_ci_cd",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "repo_dir"
          ],
          "decorators": []
        },
        {
          "name": "setup_templates",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "repo_dir"
          ],
          "decorators": []
        },
        {
          "name": "update_readme",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "repo_dir",
            "user_guide_path"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json": [
          "open",
          "json.load"
        ],
        "create_issue": [
          "requests.post",
          "task.get",
          "response.json"
        ],
        "setup_ci_cd": [
          "Path",
          "ci_yml.write_text",
          "workflow_dir.mkdir"
        ],
        "setup_templates": [
          "issue_template.write_text",
          "Path",
          "template_dir.mkdir",
          "pr_template.write_text"
        ],
        "update_readme": [
          "Path",
          "readme.write_text"
        ],
        "main": [
          "argparse.ArgumentParser",
          "update_readme",
          "setup_ci_cd",
          "parser.parse_args",
          "issue.get",
          "parser.add_argument",
          "load_json",
          "print",
          "create_issue",
          "setup_templates",
          "task.get"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "json",
        "os",
        "pathlib",
        "requests"
      ],
      "hash": null,
      "artifact_id": "784893a7-4c26-4f98-aed8-8aae4e65bd71"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct___init__ (1)",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct___init__ (1).py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "59baa6ca-dd81-4a2d-aad4-b8eabe57fa5a"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.cli",
      "path": "temp_workfiles/unsorted_mess/dump/cli.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from llmstruct.toml or return empty dict.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default /tmp) and return the path.",
          "line_range": null,
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": null,
          "parameters": [
            "response"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "line.startswith",
          "gitignore_path.exists",
          "gitignore_path.open",
          "Path",
          "logging.error",
          "line.strip"
        ],
        "load_config": [
          "toml.load",
          "Path",
          "config_path.open",
          "config_path.exists",
          "logging.error"
        ],
        "read_file_content": [
          "path.open",
          "f.read",
          "Path",
          "path.is_file",
          "logging.error"
        ],
        "write_to_file": [
          "logging.info",
          "str",
          "base_path.mkdir",
          "f.write",
          "Path",
          "file_path.exists",
          "file_path.open",
          "logging.error",
          "logging.warning"
        ],
        "parse_files_from_response": [
          "files.append",
          "content.strip",
          "filename.strip",
          "re.findall"
        ],
        "interactive": [
          "write_match.group",
          "read_file_content",
          "input",
          "parse_files_from_response",
          "files_to_write.append",
          "get_folder_structure",
          "json.dumps",
          "Path",
          "re.search",
          "load_gitignore",
          "write_dir.startswith",
          "attach_to_llm_request",
          "parse",
          "LLMClient",
          "sorted",
          "logging.error",
          "os.listdir",
          "write_to_file",
          "scan_match.group",
          "client.query",
          "user_input.lower",
          "print",
          "logging.warning"
        ],
        "parse": [
          "logging.info",
          "load_gitignore",
          "load_config",
          "generate_json",
          "Path",
          "json.dump",
          "logging.error",
          "logging.warning",
          "config.get"
        ],
        "query": [
          "logging.info",
          "client.query",
          "LLMClient",
          "Path",
          "json.dump",
          "logging.error"
        ],
        "context": [
          "logging.warning"
        ],
        "dogfood": [
          "logging.warning"
        ],
        "review": [
          "logging.warning"
        ],
        "main": [
          "argparse.ArgumentParser",
          "parse_parser.add_argument",
          "interactive",
          "parser.add_subparsers",
          "interactive_parser.add_argument",
          "context",
          "context_parser.add_argument",
          "dogfood",
          "dogfood_parser.add_argument",
          "parser.parse_args",
          "parse",
          "review_parser.add_argument",
          "review",
          "subparsers.add_parser",
          "query_parser.add_argument",
          "asyncio.run",
          "query"
        ]
      },
      "dependencies": [
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "generate_json",
        "get_folder_structure",
        "json",
        "llmstruct",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "logging",
        "os",
        "pathlib",
        "re",
        "toml",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "9e07ab23-865c-4e1b-9dee-3e18212b9faa"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_validators___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_validators___init__.py",
      "category": "core",
      "module_doc": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "json_validator",
        "validate_struct_json"
      ],
      "hash": null,
      "artifact_id": "05aef646-4895-4821-a4b7-e2f7a7f23fa0"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_llmstruct (1)",
      "path": "temp_workfiles/unsorted_mess/dump/generate_llmstruct (1).py",
      "category": "core",
      "module_doc": "Generate JSON for workspace based on user instructions template.\n\nCreates structure:\n- metadata with description, instructions, and version\n- toc with module summaries and categories\n- modules with detailed function/class info, comments, call graphs, and categories",
      "functions": [
        {
          "name": "load_goals",
          "docstring": "Load goals from file or interactive editor.",
          "line_range": null,
          "parameters": [
            "goals_file"
          ],
          "decorators": []
        },
        {
          "name": "file_hash",
          "docstring": "Compute SHA-256 hash of file contents.",
          "line_range": null,
          "parameters": [
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "extract_comments",
          "docstring": "Extract single-line and multi-line comments using tokenize.",
          "line_range": null,
          "parameters": [
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_metadata",
          "docstring": "Compute file size, last modified time, line count, and optional hash.",
          "line_range": null,
          "parameters": [
            "filepath",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "infer_category",
          "docstring": "Infer module category based on path and dependencies.",
          "line_range": null,
          "parameters": [
            "path",
            "dependencies"
          ],
          "decorators": []
        },
        {
          "name": "get_signature",
          "docstring": "Generate function signature.",
          "line_range": null,
          "parameters": [
            "func_node"
          ],
          "decorators": []
        },
        {
          "name": "extract_dependencies",
          "docstring": "Extract module-level imports.",
          "line_range": null,
          "parameters": [
            "tree"
          ],
          "decorators": []
        },
        {
          "name": "analyze_module",
          "docstring": "Analyze a Python module in a single pass.",
          "line_range": null,
          "parameters": [
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "build_toc_and_modules",
          "docstring": "Build TOC and modules with filtering.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "Generate JSON structure for project.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "include_ranges",
            "include_hashes",
            "goals_file"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "visit_Call",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_Import",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_ImportFrom",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "Extract function calls and module dependencies.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "visit_Call",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_Import",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_ImportFrom",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ]
        }
      ],
      "callgraph": {
        "load_goals": [
          "temp.flush",
          "line.startswith",
          "subprocess.run",
          "tempfile.NamedTemporaryFile",
          "temp.write",
          "os.unlink",
          "open",
          "logging.error",
          "line.strip"
        ],
        "file_hash": [
          "hashlib.sha256",
          "f.read",
          "open",
          "logging.error"
        ],
        "extract_comments": [
          "comments.append",
          "tokenize.tokenize",
          "open",
          "logging.error"
        ],
        "compute_file_metadata": [
          "os.stat",
          "file_hash",
          "sum",
          "open",
          "logging.error"
        ],
        "infer_category": [
          "path.lower",
          "any"
        ],
        "get_signature": [],
        "__init__": [
          "set"
        ],
        "visit_Call": [
          "self.generic_visit",
          "isinstance"
        ],
        "visit_Import": [
          "self.generic_visit"
        ],
        "visit_ImportFrom": [
          "self.generic_visit"
        ],
        "extract_dependencies": [
          "dependencies.update",
          "dependencies.add",
          "sorted",
          "isinstance",
          "ast.walk",
          "set"
        ],
        "analyze_module": [
          "str",
          "f.read",
          "infer_category",
          "ast.parse",
          "methods.append",
          "ast.get_docstring",
          "extract_comments",
          "classes.append",
          "hashlib.sha256",
          "compute_file_metadata",
          "CallVisitor",
          "source.splitlines",
          "sorted",
          "logging.error",
          "functions.append",
          "getattr",
          "get_signature",
          "visitor.visit",
          "extract_dependencies",
          "open",
          "isinstance"
        ],
        "build_toc_and_modules": [
          "os.walk",
          "dirpath.split",
          "load_gitignore",
          "analyze_module",
          "exclude_patterns.extend",
          "fnmatch.fnmatch",
          "modules.append",
          "toc.append",
          "sum",
          "any",
          "len"
        ],
        "generate_json": [
          "len",
          "build_toc_and_modules",
          "load_goals"
        ],
        "main": [
          "argparse.ArgumentParser",
          "logging.info",
          "generate_json",
          "parser.parse_args",
          "parser.add_argument",
          "open",
          "json.dump",
          "logging.error"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "argparse",
        "ast",
        "datetime",
        "fnmatch",
        "hashlib",
        "json",
        "logging",
        "os",
        "subprocess",
        "tempfile",
        "tokenize",
        "typing"
      ],
      "hash": null,
      "artifact_id": "57aa5e8a-cb1c-499f-aa9f-0fb641f7086f"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.json_validator",
      "path": "temp_workfiles/unsorted_mess/dump/json_validator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_struct_json",
          "docstring": "Validate a single JSON file against a schema.",
          "line_range": null,
          "parameters": [
            "json_path",
            "schema_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_directory",
          "docstring": "Validate all JSON files in a directory against a schema.",
          "line_range": null,
          "parameters": [
            "directory",
            "schema_path",
            "include_patterns",
            "exclude_patterns"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_struct_json": [
          "logging.info",
          "str",
          "validate",
          "json.load",
          "Path",
          "open",
          "json_file.exists",
          "logging.error",
          "schema_file.exists"
        ],
        "validate_directory": [
          "str",
          "validate_struct_json",
          "Path",
          "any",
          "json_file.match"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "ValidationError",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "sys",
        "typing",
        "validate"
      ],
      "hash": null,
      "artifact_id": "3e1e519a-fbac-4c5c-a2db-a8df6405db6d"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.validate_json",
      "path": "temp_workfiles/unsorted_mess/dump/validate_json.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_struct_json",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "json_path",
            "schema_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_struct_json": [
          "str",
          "validate",
          "json.load",
          "print",
          "open"
        ]
      },
      "dependencies": [
        "ValidationError",
        "json",
        "jsonschema",
        "sys",
        "validate"
      ],
      "hash": null,
      "artifact_id": "a2b18170-b6e8-402a-ab9a-0fbf40bbd42a"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_cli",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_cli.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore, logging loaded patterns.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_goals",
          "docstring": "Load goals from semicolon-separated string, file, or interactive editor.",
          "line_range": null,
          "parameters": [
            "goals_input"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "logging.info",
          "line.startswith",
          "open",
          "logging.error",
          "line.strip",
          "logging.warning",
          "len"
        ],
        "load_goals": [
          "logging.info",
          "temp.flush",
          "g.strip",
          "line.startswith",
          "goals_input.split",
          "subprocess.run",
          "tempfile.NamedTemporaryFile",
          "temp.write",
          "os.unlink",
          "open",
          "logging.error",
          "line.strip",
          "len"
        ],
        "main": [
          "argparse.ArgumentParser",
          "logging.info",
          "load_gitignore",
          "generate_json",
          "parser.parse_args",
          "parser.add_argument",
          "load_goals",
          "language_patterns.get",
          "open",
          "json.dump",
          "include_patterns.extend",
          "logging.error",
          "logging.warning"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "argparse",
        "generate_json",
        "generators.json_generator",
        "logging",
        "os",
        "subprocess",
        "tempfile",
        "typing"
      ],
      "hash": null,
      "artifact_id": "f9b15fd4-5662-4595-9ed9-99cd2d9cd1c9"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.clean.internal_cleaner",
      "path": "temp_workfiles/unsorted_mess/dump/clean/internal_cleaner.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "normalize",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "record"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "normalize": [
          "str",
          "id.strip",
          "record.get",
          "content.strip",
          "isinstance"
        ]
      },
      "dependencies": [
        "collections",
        "defaultdict",
        "glob",
        "json",
        "os"
      ],
      "hash": null,
      "artifact_id": "51aae0f2-68c5-47c6-8ddb-e21c3ddd24f4"
    },
    {
      "module_id": "bak.20250522_102827.scripts.collector",
      "path": "bak/20250522_102827/scripts/collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "apply_filters",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "files",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "collect_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "generate_struct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "output"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "apply_filters": [
          "filtered.append",
          "pattern.startswith",
          "fnmatch.fnmatch"
        ],
        "collect_files": [
          "str",
          "apply_filters",
          "path.is_file",
          "path.relative_to",
          "files.append",
          "root_dir.rglob"
        ],
        "generate_struct": [
          "str",
          "output_path.exists",
          "uuid.uuid4",
          "json.load",
          "Path",
          "json.dump",
          "collect_files",
          "output_path.open",
          "existing.get",
          "logger.info",
          "len"
        ],
        "main": [
          "generate_struct"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "logging",
        "pathlib",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "ad90c739-7d23-49a6-8e77-8b5a965396c9"
    },
    {
      "module_id": "bak.20250522_102827.scripts.validate_refs",
      "path": "bak/20250522_102827/scripts/validate_refs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_references",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_references": [
          "target_file.exists",
          "broken_links.append",
          "logger.info",
          "json.load",
          "logger.warning",
          "Path",
          "logger.error",
          "json.dump",
          "idea.get",
          "enumerate",
          "source_file.exists"
        ],
        "main": [
          "validate_references"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "9a81d4fe-96f2-4d0a-9c00-18dcfa289eb2"
    },
    {
      "module_id": "bak.20250522_102827.scripts.deploy_embedded_files",
      "path": "bak/20250522_102827/scripts/deploy_embedded_files.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_json",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "data",
            "schema"
          ],
          "decorators": []
        },
        {
          "name": "backup_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "target_dir",
            "backup_root"
          ],
          "decorators": []
        },
        {
          "name": "deploy_embedded_files",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_json": [
          "validate",
          "logger.warning"
        ],
        "backup_files": [
          "logger.info",
          "target_dir.exists",
          "datetime.now",
          "shutil.copytree"
        ],
        "deploy_embedded_files": [
          "target_path.open",
          "backup_files",
          "EMBEDDED_FILES.get",
          "f.write",
          "Path",
          "logger.error",
          "json.dump",
          "EMBEDDED_FILES.items",
          "logger.info",
          "validate_json",
          "target_path.exists"
        ],
        "main": [
          "deploy_embedded_files"
        ]
      },
      "dependencies": [
        "Path",
        "ValidationError",
        "datetime",
        "json",
        "jsonschema",
        "logging",
        "os",
        "pathlib",
        "shutil",
        "validate"
      ],
      "hash": null,
      "artifact_id": "f703eeaa-cd96-46c2-9779-b595df603c44"
    },
    {
      "module_id": "bak.20250522_131121.scripts.collector",
      "path": "bak/20250522_131121/scripts/collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "apply_filters",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "files",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "collect_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "generate_struct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "output"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "apply_filters": [
          "filtered.append",
          "pattern.startswith",
          "fnmatch.fnmatch"
        ],
        "collect_files": [
          "str",
          "apply_filters",
          "path.is_file",
          "path.relative_to",
          "files.append",
          "root_dir.rglob"
        ],
        "generate_struct": [
          "str",
          "output_path.exists",
          "uuid.uuid4",
          "json.load",
          "Path",
          "json.dump",
          "collect_files",
          "output_path.open",
          "existing.get",
          "logger.info",
          "len"
        ],
        "main": [
          "generate_struct"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "logging",
        "pathlib",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "70fd95c3-7039-4618-8dcc-b96cb7c875d1"
    },
    {
      "module_id": "bak.20250522_131121.scripts.validate_refs",
      "path": "bak/20250522_131121/scripts/validate_refs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_references",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_references": [
          "target_file.exists",
          "broken_links.append",
          "logger.info",
          "json.load",
          "logger.warning",
          "Path",
          "logger.error",
          "json.dump",
          "idea.get",
          "enumerate",
          "source_file.exists"
        ],
        "main": [
          "validate_references"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "5cf25e0c-a152-4723-9904-e74edd9be77b"
    },
    {
      "module_id": "bak.20250522_131121.scripts.deploy_embedded_files",
      "path": "bak/20250522_131121/scripts/deploy_embedded_files.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_json",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "data",
            "schema",
            "base_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "target_dir",
            "backup_root"
          ],
          "decorators": []
        },
        {
          "name": "deploy_embedded_files",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_json": [
          "RefResolver",
          "validate",
          "logger.error",
          "logger.warning"
        ],
        "backup_files": [
          "logger.info",
          "target_dir.exists",
          "datetime.now",
          "shutil.copytree"
        ],
        "deploy_embedded_files": [
          "Path.cwd",
          "target_path.open",
          "backup_files",
          "EMBEDDED_FILES.get",
          "f.write",
          "logger.warning",
          "Path",
          "logger.error",
          "json.dump",
          "logger.info",
          "validate_json",
          "target_path.exists"
        ],
        "main": [
          "deploy_embedded_files"
        ]
      },
      "dependencies": [
        "Path",
        "RefResolver",
        "ValidationError",
        "datetime",
        "json",
        "jsonschema",
        "logging",
        "os",
        "pathlib",
        "shutil",
        "validate"
      ],
      "hash": null,
      "artifact_id": "83fef984-02f6-49f3-b944-8f3442def3e3"
    },
    {
      "module_id": "tests.test_self_run",
      "path": "tests/test_self_run.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "test_filter_json_init_json",
          "docstring": "Test filter_json with init.json structure.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_select_json_partial",
          "docstring": "Test partial JSON loading.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_cache_json",
          "docstring": "Test JSON caching.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_attach_to_llm_request_init_json",
          "docstring": "Test attach_to_llm_request with init.json and cache.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_attach_to_llm_request_missing_file",
          "docstring": "Test attach_to_llm_request with missing file.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_filter_json_init_json": [
          "filter_json"
        ],
        "test_select_json_partial": [
          "select_json",
          "str",
          "open",
          "json.dump"
        ],
        "test_cache_json": [
          "str",
          "cache.cache_json",
          "cache.close",
          "open",
          "json.dump",
          "cache.get_metadata",
          "JSONCache",
          "cache.get_full_json"
        ],
        "test_attach_to_llm_request_init_json": [
          "str",
          "cache.close",
          "attach_to_llm_request",
          "open",
          "json.dump",
          "JSONCache"
        ],
        "test_attach_to_llm_request_missing_file": [
          "str",
          "attach_to_llm_request"
        ]
      },
      "dependencies": [
        "JSONCache",
        "attach_to_llm_request",
        "filter_json",
        "json",
        "llmstruct.cache",
        "llmstruct.json_selector",
        "llmstruct.self_run",
        "select_json"
      ],
      "hash": null,
      "artifact_id": "5069ef6a-788b-4b38-8956-1b78d8c444d9"
    },
    {
      "module_id": "tests.__init__",
      "path": "tests/__init__.py",
      "category": "test",
      "module_doc": "Test suite for LLMStruct, covering parsers, generators, validators, and integration.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "04472d6a-00a1-4186-99b0-013815f8264c"
    },
    {
      "module_id": "scripts.collector",
      "path": "scripts/collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "apply_filters",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "files",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "collect_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "generate_struct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "output"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "apply_filters": [
          "filtered.append",
          "pattern.startswith",
          "fnmatch.fnmatch"
        ],
        "collect_files": [
          "str",
          "apply_filters",
          "path.is_file",
          "path.relative_to",
          "files.append",
          "root_dir.rglob"
        ],
        "generate_struct": [
          "str",
          "output_path.exists",
          "uuid.uuid4",
          "json.load",
          "Path",
          "json.dump",
          "collect_files",
          "output_path.open",
          "existing.get",
          "logger.info",
          "len"
        ],
        "main": [
          "generate_struct"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "logging",
        "pathlib",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "5da91f49-a0a7-4802-b216-3fe459aff2bb"
    },
    {
      "module_id": "scripts.session_cli",
      "path": "scripts/session_cli.py",
      "category": "core",
      "module_doc": "Session Management CLI\nAutomates session tracking, worklog updates, and session switching for llmstruct.\nPart of the comprehensive session management system.",
      "functions": [
        {
          "name": "get_current_branch",
          "docstring": "Get current git branch.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_json_file",
          "docstring": "Load JSON file with error handling.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "save_json_file",
          "docstring": "Save JSON file with error handling.",
          "line_range": null,
          "parameters": [
            "file_path",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "get_current_timestamp",
          "docstring": "Get current timestamp in ISO format.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "log_event",
          "docstring": "Log an event to worklog.json.",
          "line_range": null,
          "parameters": [
            "event_message",
            "author"
          ],
          "decorators": []
        },
        {
          "name": "switch_session",
          "docstring": "Switch to a different session or create new one.",
          "line_range": null,
          "parameters": [
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "list_sessions",
          "docstring": "List all available sessions.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_current_session",
          "docstring": "Show current session details.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_worklog",
          "docstring": "Show recent worklog entries.",
          "line_range": null,
          "parameters": [
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Main CLI interface.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {
        "get_current_branch": [
          "subprocess.run"
        ],
        "load_json_file": [
          "print",
          "open",
          "json.load"
        ],
        "save_json_file": [
          "os.makedirs",
          "open",
          "json.dump",
          "print"
        ],
        "get_current_timestamp": [
          "datetime.now"
        ],
        "log_event": [
          "load_json_file",
          "get_current_timestamp",
          "print",
          "get_current_branch",
          "current_session.get",
          "save_json_file"
        ],
        "switch_session": [
          "load_json_file",
          "get_current_timestamp",
          "print",
          "log_event",
          "get_current_branch",
          "save_json_file"
        ],
        "list_sessions": [
          "current_session.get",
          "print",
          "load_json_file"
        ],
        "show_current_session": [
          "current_session.get",
          "print",
          "load_json_file"
        ],
        "show_worklog": [
          "reversed",
          "print",
          "load_json_file",
          "len"
        ],
        "main": [
          "show_current_session",
          "print",
          "log_event",
          "list_sessions",
          "show_worklog",
          "int",
          "switch_session",
          "len"
        ]
      },
      "dependencies": [
        "Path",
        "datetime",
        "json",
        "os",
        "pathlib",
        "subprocess",
        "sys"
      ],
      "hash": null,
      "artifact_id": "e0176ac6-792f-4d9b-a483-436c810b585f"
    },
    {
      "module_id": "scripts.auto_update_struct",
      "path": "scripts/auto_update_struct.py",
      "category": "core",
      "module_doc": "Automatic struct.json update script\nThis script automatically parses the project and updates struct.json\nwithout requiring LLM intervention.",
      "functions": [
        {
          "name": "detect_project_changes",
          "docstring": "Detect if project files have changed since last struct.json generation.\nUses git status to check for modifications.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_struct_json",
          "docstring": "Create a backup of existing struct.json.",
          "line_range": null,
          "parameters": [
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_struct_json",
          "docstring": "Validate generated struct.json for basic structure.",
          "line_range": null,
          "parameters": [
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "update_struct_json",
          "docstring": "Main function to update struct.json automatically.\n\nArgs:\n    root_dir: Project root directory (default: current directory)\n    struct_path: Path to struct.json (default: ./struct.json)\n    force: Force regeneration even if no changes detected\n    config_override: Override default configuration\n\nReturns:\n    bool: True if update was successful",
          "line_range": null,
          "parameters": [
            "root_dir",
            "struct_path",
            "force",
            "config_override"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for auto-update script.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_gitignore",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_config": [],
        "load_gitignore": [],
        "generate_json": [
          "ImportError"
        ],
        "detect_project_changes": [
          "subprocess.run",
          "logger.warning",
          "Path",
          "file_path.stat",
          "logger.info"
        ],
        "backup_struct_json": [
          "subprocess.run",
          "Path",
          "datetime.now",
          "logger.error",
          "logger.info"
        ],
        "validate_struct_json": [
          "logger.error",
          "open",
          "json.load",
          "logger.info"
        ],
        "update_struct_json": [
          "os.getcwd",
          "backup_struct_json",
          "detect_project_changes",
          "load_gitignore",
          "load_config",
          "generate_json",
          "validate_struct_json",
          "config.update",
          "subprocess.run",
          "open",
          "json.dump",
          "logger.error",
          "cli_config.get",
          "logger.info",
          "config.get"
        ],
        "main": [
          "argparse.ArgumentParser",
          "logging.getLogger",
          "os.getcwd",
          "detect_project_changes",
          "parser.parse_args",
          "parser.add_argument",
          "print",
          "update_struct_json",
          "sys.exit"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "generate_json",
        "json",
        "llmstruct.cli",
        "llmstruct.generators.json_generator",
        "load_config",
        "load_gitignore",
        "logging",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "24ea6a0e-840d-45f9-aa6d-0e0f62d1e79d"
    },
    {
      "module_id": "scripts.export_to_github_projects",
      "path": "scripts/export_to_github_projects.py",
      "category": "core",
      "module_doc": "Export script for GitHub Projects integration\nConverts official tasks.json and ideas.json to GitHub Project cards",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "config_path",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "check_github_cli",
          "docstring": "Check if GitHub CLI is installed and authenticated",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "list_projects",
          "docstring": "List available GitHub Projects (via gh-projects extension)",
          "line_range": null,
          "parameters": [
            "self",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "create_project_item",
          "docstring": "Create a new item in GitHub Project (via gh-projects extension)\nTODO: \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 GraphQL API \u0438\u043b\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c",
          "line_range": null,
          "parameters": [
            "self",
            "project_number",
            "title",
            "body",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "export_tasks_to_project",
          "docstring": "Export tasks to GitHub Project",
          "line_range": null,
          "parameters": [
            "self",
            "tasks",
            "project_number",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "export_ideas_to_project",
          "docstring": "Export ideas to GitHub Project",
          "line_range": null,
          "parameters": [
            "self",
            "ideas",
            "project_number",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "filter_data",
          "docstring": "Filter data by status and priority",
          "line_range": null,
          "parameters": [
            "self",
            "data",
            "status_filter",
            "priority_filter"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubProjectsExportScript",
          "docstring": "Extended exporter with command-line interface and GitHub CLI integration",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "config_path",
                "dry_run"
              ]
            },
            {
              "name": "check_github_cli",
              "docstring": "Check if GitHub CLI is installed and authenticated",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "list_projects",
              "docstring": "List available GitHub Projects (via gh-projects extension)",
              "line_range": null,
              "parameters": [
                "self",
                "owner",
                "repo"
              ]
            },
            {
              "name": "create_project_item",
              "docstring": "Create a new item in GitHub Project (via gh-projects extension)\nTODO: \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 GraphQL API \u0438\u043b\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c",
              "line_range": null,
              "parameters": [
                "self",
                "project_number",
                "title",
                "body",
                "owner",
                "repo"
              ]
            },
            {
              "name": "export_tasks_to_project",
              "docstring": "Export tasks to GitHub Project",
              "line_range": null,
              "parameters": [
                "self",
                "tasks",
                "project_number",
                "owner",
                "repo"
              ]
            },
            {
              "name": "export_ideas_to_project",
              "docstring": "Export ideas to GitHub Project",
              "line_range": null,
              "parameters": [
                "self",
                "ideas",
                "project_number",
                "owner",
                "repo"
              ]
            },
            {
              "name": "filter_data",
              "docstring": "Filter data by status and priority",
              "line_range": null,
              "parameters": [
                "self",
                "data",
                "status_filter",
                "priority_filter"
              ]
            }
          ],
          "bases": [
            "GitHubProjectsExporter"
          ]
        }
      ],
      "callgraph": {
        "__init__": [
          "super"
        ],
        "check_github_cli": [
          "print",
          "self._run_gh_command"
        ],
        "list_projects": [
          "isinstance",
          "json.loads",
          "print",
          "self._run_gh_command"
        ],
        "create_project_item": [
          "str",
          "print",
          "self._run_gh_command",
          "output.strip"
        ],
        "export_tasks_to_project": [
          "print",
          "self.create_project_item",
          "self.format_task_for_github",
          "task.get",
          "len"
        ],
        "export_ideas_to_project": [
          "self.format_idea_for_github",
          "print",
          "self.create_project_item",
          "idea.get",
          "len"
        ],
        "filter_data": [
          "item.get"
        ],
        "main": [
          "argparse.ArgumentParser",
          "exporter.load_official_data",
          "exporter.export_tasks_to_project",
          "exporter.export_ideas_to_project",
          "parser.parse_args",
          "parser.add_argument",
          "exporter.check_github_cli",
          "GitHubProjectsExportScript",
          "print",
          "exporter.filter_data",
          "exporter._save_mapping",
          "sys.exit"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "GitHubProjectsExporter",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "argparse",
        "datetime",
        "json",
        "llmstruct.gh_view",
        "pathlib",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "ec356119-2246-436c-b9be-05b9764db215"
    },
    {
      "module_id": "scripts.validate_refs",
      "path": "scripts/validate_refs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_references",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_references": [
          "target_file.exists",
          "broken_links.append",
          "logger.info",
          "json.load",
          "logger.warning",
          "Path",
          "logger.error",
          "json.dump",
          "idea.get",
          "enumerate",
          "source_file.exists"
        ],
        "main": [
          "validate_references"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "15e48150-1d17-4d17-b8fc-27a154d0a3a0"
    },
    {
      "module_id": "scripts.deploy_embedded_files",
      "path": "scripts/deploy_embedded_files.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_json",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "data",
            "schema",
            "base_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "target_dir",
            "backup_root"
          ],
          "decorators": []
        },
        {
          "name": "deploy_embedded_files",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_json": [
          "RefResolver",
          "validate",
          "logger.error",
          "logger.warning"
        ],
        "backup_files": [
          "logger.info",
          "target_dir.exists",
          "datetime.now",
          "shutil.copytree"
        ],
        "deploy_embedded_files": [
          "Path.cwd",
          "target_path.open",
          "backup_files",
          "EMBEDDED_FILES.get",
          "f.write",
          "logger.warning",
          "Path",
          "logger.error",
          "json.dump",
          "logger.info",
          "validate_json",
          "target_path.exists"
        ],
        "main": [
          "deploy_embedded_files"
        ]
      },
      "dependencies": [
        "Path",
        "RefResolver",
        "ValidationError",
        "datetime",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "shutil",
        "validate"
      ],
      "hash": null,
      "artifact_id": "b927acdd-162a-434d-9b28-7bbf55c308d1"
    }
  ]
}