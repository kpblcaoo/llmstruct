{
  "metadata": {
    "project_name": "llmstruct",
    "description": "Utility for generating structured JSON for codebases",
    "version": "2025-05-27T22:20:22.978829Z",
    "authors": [
      {
        "name": "Mikhail Stepanov",
        "github": "kpblcaoo",
        "email": "kpblcaoo@gmail.com"
      }
    ],
    "instructions": [
      "Follow best practices, warn if instructions conflict with them",
      "Preserve functionality, ensure idempotency",
      "Use attached struct.json for context and navigation",
      "Request missing modules or functions if needed",
      "Regenerate JSON for significant changes, track via Git and artifacts",
      "Use internal comments for descriptions, append brief summary"
    ],
    "goals": {
      "goals": [
        "Create universal JSON format for codebase structure (modules, functions, classes, calls, metadata)",
        "Ensure extensibility for new languages and entity types",
        "Develop modular, plugin-based parsers for new languages",
        "Maintain an open, RFC-style documented format",
        "Integrate with LLMs by generating and attaching JSON structure to queries"
      ]
    },
    "stats": {
      "modules_count": 148,
      "functions_count": 690,
      "classes_count": 56,
      "call_edges_count": 2628
    },
    "artifact_id": "18fc2f63-e665-423f-9042-5cb7a03e5dab",
    "summary": "Structured JSON for llmstruct codebase",
    "tags": [
      "codebase",
      "automation"
    ],
    "folder_structure": [
      {
        "path": ".",
        "type": "directory",
        "artifact_id": "e1483214-375b-4f67-8822-bf4459d184d9",
        "metadata": {}
      },
      {
        "path": ".github",
        "type": "directory",
        "artifact_id": "e85bd8bd-5e8a-45dd-a626-a9e6df78ef0d",
        "metadata": {}
      },
      {
        "path": ".github/workflows",
        "type": "directory",
        "artifact_id": "6793eeb0-1ea3-4fbe-87c5-7d26891ac3e0",
        "metadata": {}
      },
      {
        "path": "analyze_unused_components.py",
        "type": "file",
        "artifact_id": "ad786c30-8c7d-405f-a49f-2dde30ecce63",
        "metadata": {}
      },
      {
        "path": "analyze_unused_components_v2.py",
        "type": "file",
        "artifact_id": "3e86bd3c-110b-4c27-9826-f62b2110caf1",
        "metadata": {}
      },
      {
        "path": "bak",
        "type": "directory",
        "artifact_id": "ef693a54-f6da-44df-a6fe-933428953c5c",
        "metadata": {}
      },
      {
        "path": "board_cli.py",
        "type": "file",
        "artifact_id": "718f6e41-c1a9-4d0e-b54a-703d51cb709e",
        "metadata": {}
      },
      {
        "path": "collector.py",
        "type": "file",
        "artifact_id": "f5ad628e-ce22-41cd-94e3-33762bd18de5",
        "metadata": {}
      },
      {
        "path": "data",
        "type": "directory",
        "artifact_id": "aa9e1723-d5ac-4ca7-9ed8-d4dbb2920797",
        "metadata": {}
      },
      {
        "path": "data/ai_self_awareness",
        "type": "directory",
        "artifact_id": "f59b0dea-3b30-4a62-8762-411f8719c4f7",
        "metadata": {}
      },
      {
        "path": "data/artifacts",
        "type": "directory",
        "artifact_id": "be3b0a29-e2c4-434e-aee9-b6242f60ebf6",
        "metadata": {}
      },
      {
        "path": "data/copilot",
        "type": "directory",
        "artifact_id": "e5d25662-48f1-4dcd-9be2-297602f1baa2",
        "metadata": {}
      },
      {
        "path": "data/sessions",
        "type": "directory",
        "artifact_id": "bc1ea832-57de-4442-b3c5-d2d2dcb4ce29",
        "metadata": {}
      },
      {
        "path": "data/workspace",
        "type": "directory",
        "artifact_id": "20f528c3-89b9-4666-b66a-e4e00b24a8fc",
        "metadata": {}
      },
      {
        "path": "docs",
        "type": "directory",
        "artifact_id": "b13bd17b-899c-4dc6-902d-7ecc290de224",
        "metadata": {}
      },
      {
        "path": "docs/ai-session-monitor",
        "type": "directory",
        "artifact_id": "4a3046d9-ce50-4714-af15-656b90fcf02d",
        "metadata": {}
      },
      {
        "path": "docs/cache.py",
        "type": "file",
        "artifact_id": "e31c6109-5a1a-4c9d-86a2-df953d63234a",
        "metadata": {}
      },
      {
        "path": "docs/cli.py",
        "type": "file",
        "artifact_id": "9e2f2db1-894a-437f-a93a-06e7cff30e87",
        "metadata": {}
      },
      {
        "path": "docs/examples",
        "type": "directory",
        "artifact_id": "af9bac01-f79e-439f-9f94-d738f3b5cf77",
        "metadata": {}
      },
      {
        "path": "docs/internal",
        "type": "directory",
        "artifact_id": "f1de3702-fb3a-4829-a779-4d235d9f57b7",
        "metadata": {}
      },
      {
        "path": "docs/internal/notes",
        "type": "directory",
        "artifact_id": "cece8e11-97bf-4a73-b0c4-ae60d49d3494",
        "metadata": {}
      },
      {
        "path": "docs/internal/ru",
        "type": "directory",
        "artifact_id": "fb86b79f-17db-4074-9931-0ce1245d48f7",
        "metadata": {}
      },
      {
        "path": "docs/json_selector.py",
        "type": "file",
        "artifact_id": "39b65f50-7c9f-41af-9156-3d975f1658e7",
        "metadata": {}
      },
      {
        "path": "docs/ru",
        "type": "directory",
        "artifact_id": "dc01d228-2892-4001-9c3c-69d710f9461d",
        "metadata": {}
      },
      {
        "path": "docs/ru/examples",
        "type": "directory",
        "artifact_id": "ede801bf-8adc-4cb9-a6e8-88794e00130b",
        "metadata": {}
      },
      {
        "path": "docs/self_run.py",
        "type": "file",
        "artifact_id": "44cc0eb2-7b8b-4fa8-aa27-eb1e86efd3b9",
        "metadata": {}
      },
      {
        "path": "docs/test_self_run.py",
        "type": "file",
        "artifact_id": "2958e0dc-1a16-49e5-ac09-dc742d0e7d96",
        "metadata": {}
      },
      {
        "path": "examples",
        "type": "directory",
        "artifact_id": "7c963ab5-62e4-4f0f-be99-f39240f52b1e",
        "metadata": {}
      },
      {
        "path": "examples/python_project_main.py",
        "type": "file",
        "artifact_id": "2c099a76-5256-4890-bc0c-27445131ccac",
        "metadata": {}
      },
      {
        "path": "examples/python_project_utils.py",
        "type": "file",
        "artifact_id": "f5cfdd5f-d9e2-4c0e-9f0a-3fc96c9d17df",
        "metadata": {}
      },
      {
        "path": "final_system_check.py",
        "type": "file",
        "artifact_id": "1ec8dcfa-5db2-4a45-aba4-af0afc7e6ebb",
        "metadata": {}
      },
      {
        "path": "final_system_validation.py",
        "type": "file",
        "artifact_id": "a476803a-4ef5-4e01-8ecc-550bbbff1155",
        "metadata": {}
      },
      {
        "path": "internal",
        "type": "directory",
        "artifact_id": "6386f1b8-3d3e-42e7-898f-b7a2687b5b05",
        "metadata": {}
      },
      {
        "path": "quick_analysis.py",
        "type": "file",
        "artifact_id": "8e600249-b6a8-4cb3-ae01-14205bae7feb",
        "metadata": {}
      },
      {
        "path": "quick_unused_check.py",
        "type": "file",
        "artifact_id": "3f90d449-d855-4e0c-a8a1-d18088e3c400",
        "metadata": {}
      },
      {
        "path": "schema",
        "type": "directory",
        "artifact_id": "f157a162-55a0-4d71-ad73-0b4a736fa5f7",
        "metadata": {}
      },
      {
        "path": "schema/common",
        "type": "directory",
        "artifact_id": "6d43eb96-d0d6-4022-b9f7-5c10532f4956",
        "metadata": {}
      },
      {
        "path": "schema/plugins",
        "type": "directory",
        "artifact_id": "994e5850-03cd-4685-b69c-4f395520042d",
        "metadata": {}
      },
      {
        "path": "scripts",
        "type": "directory",
        "artifact_id": "a8e85d92-b250-43a8-b0c9-7e49a3f7261d",
        "metadata": {}
      },
      {
        "path": "scripts/auto_update_struct.py",
        "type": "file",
        "artifact_id": "6585371a-4bfc-46e0-9ef8-4359fb6068d7",
        "metadata": {}
      },
      {
        "path": "scripts/collector.py",
        "type": "file",
        "artifact_id": "9fcbc6c2-f8c0-4a6b-aaf1-e75b0501acdf",
        "metadata": {}
      },
      {
        "path": "scripts/deploy_embedded_files.py",
        "type": "file",
        "artifact_id": "7554cff4-0a20-41be-8520-06ae102bb726",
        "metadata": {}
      },
      {
        "path": "scripts/export_to_github_projects.py",
        "type": "file",
        "artifact_id": "b0eda265-23f8-4bd1-a992-8090fec0cb4c",
        "metadata": {}
      },
      {
        "path": "scripts/session_cli.py",
        "type": "file",
        "artifact_id": "04b6620c-92c3-400f-af41-d74432f49156",
        "metadata": {}
      },
      {
        "path": "scripts/validate_json.py",
        "type": "file",
        "artifact_id": "e92fc54a-bd18-4f84-ad82-f46fdc4f6e96",
        "metadata": {}
      },
      {
        "path": "scripts/validate_refs.py",
        "type": "file",
        "artifact_id": "b5a5a11b-8696-4a03-a57a-12d690b573e0",
        "metadata": {}
      },
      {
        "path": "scripts/validate_schemas.py",
        "type": "file",
        "artifact_id": "edbe4b3a-bbcc-40a0-9d89-6620b810f5b6",
        "metadata": {}
      },
      {
        "path": "simple_analyzer.py",
        "type": "file",
        "artifact_id": "2448a416-98b2-4f9b-a53c-b6cbfea51ffa",
        "metadata": {}
      },
      {
        "path": "smart_usage_analyzer.py",
        "type": "file",
        "artifact_id": "fda9848a-2c35-4b05-b8f5-7cec95cda1c3",
        "metadata": {}
      },
      {
        "path": "sorting_workspace",
        "type": "directory",
        "artifact_id": "a22b4403-bcbe-4db9-854b-53c14cb9d74a",
        "metadata": {}
      },
      {
        "path": "src",
        "type": "directory",
        "artifact_id": "b48141c6-cb39-4079-8e30-420653da3235",
        "metadata": {}
      },
      {
        "path": "src/llmstruct",
        "type": "directory",
        "artifact_id": "7ae1d644-086f-4d8b-b3c8-4ca1f992662d",
        "metadata": {}
      },
      {
        "path": "src/llmstruct.egg-info",
        "type": "directory",
        "artifact_id": "a370c79a-c8fc-4172-822a-a54899f12f61",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/__init__.py",
        "type": "file",
        "artifact_id": "d4514357-6192-401d-afdc-1e1d7c143bac",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/__main__.py",
        "type": "file",
        "artifact_id": "5fdd685b-1583-475e-bfb6-d942906b359a",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/ai_cli_integration.py",
        "type": "file",
        "artifact_id": "dba895ea-4051-49b3-ae5a-0c517323e38f",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/ai_self_awareness.py",
        "type": "file",
        "artifact_id": "1d6f328b-4de4-49a1-8bbb-e294c5015148",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cache.py",
        "type": "file",
        "artifact_id": "30d37577-9129-4171-8ca9-aa2d0af67cb3",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli.py",
        "type": "file",
        "artifact_id": "256c619d-a185-4445-9db2-bde24e3eeb3c",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli_commands.py",
        "type": "file",
        "artifact_id": "a6dbc58d-8944-4331-9d1e-89bc7507de50",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli_config.py",
        "type": "file",
        "artifact_id": "bab26475-46a6-40f3-a87c-79396ab9f186",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli_core.py",
        "type": "file",
        "artifact_id": "99ca49b8-d998-40a3-a36c-2532263800eb",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli_utils.py",
        "type": "file",
        "artifact_id": "256085d2-7e72-4d91-8c83-4ebfb57b1b17",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/context_orchestrator.py",
        "type": "file",
        "artifact_id": "195a6cc1-c635-4cf6-995f-470370291bad",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/copilot.py",
        "type": "file",
        "artifact_id": "241c562e-0549-4994-a686-da2df2dc7855",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators",
        "type": "directory",
        "artifact_id": "76038d95-94c7-4346-9aa4-feb6fcb2e914",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators/__init__.py",
        "type": "file",
        "artifact_id": "391ddc9e-0791-44be-b19d-80ef22bfacf2",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators/json_generator.py",
        "type": "file",
        "artifact_id": "c40bc6d7-dc58-437c-9c71-b62f48994773",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/gh_view.py",
        "type": "file",
        "artifact_id": "d30d9d57-7bef-46fe-a54a-42a1c8ee5b48",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/grok.py",
        "type": "file",
        "artifact_id": "1e762bd7-6e6d-4300-87f8-921448ca3ac3",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/json_selector.py",
        "type": "file",
        "artifact_id": "76abda94-75e0-4b0e-8778-b25ba1facb8e",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/llm_client.py",
        "type": "file",
        "artifact_id": "08cf5162-e3eb-4722-9615-51a883045422",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers",
        "type": "directory",
        "artifact_id": "00724c52-c0e7-48de-8f15-b8bcb668babd",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/__init__.py",
        "type": "file",
        "artifact_id": "3222a88f-6c4a-4199-8c21-fcc4772f0152",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/javascript_parser.py",
        "type": "file",
        "artifact_id": "d985eb4f-9e18-496b-b23b-00b33e9e3caf",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/python_parser.py",
        "type": "file",
        "artifact_id": "60e8dc60-39c7-46ea-bb1e-dd75dc0519e7",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/self_run.py",
        "type": "file",
        "artifact_id": "b9328f62-405f-4648-98e1-41c44c243590",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/templates",
        "type": "directory",
        "artifact_id": "11cb7feb-edc4-4ab0-afdb-2c0447cf13ca",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/templates/__init__.py",
        "type": "file",
        "artifact_id": "264b599e-09ca-49b3-b5f0-8cce86b0dc23",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/validators",
        "type": "directory",
        "artifact_id": "35b9448d-0919-4b7f-8cb3-092f1d097bee",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/validators/__init__.py",
        "type": "file",
        "artifact_id": "6201d931-a6a5-47a7-a75f-4c9391380846",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/validators/json_validator.py",
        "type": "file",
        "artifact_id": "c083b5f8-ad4d-418e-9f80-34dbe1740dd0",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/workspace.py",
        "type": "file",
        "artifact_id": "c4cd7732-1dd9-4994-8399-5384c71b3920",
        "metadata": {}
      },
      {
        "path": "temp_workfiles",
        "type": "directory",
        "artifact_id": "27ae2f58-4271-4aa1-b3c9-c322f3251c04",
        "metadata": {}
      },
      {
        "path": "test_ai_cli_debug.py",
        "type": "file",
        "artifact_id": "13f5731e-8109-4b28-b649-c28725aeb8ce",
        "metadata": {}
      },
      {
        "path": "test_ai_cli_integration.py",
        "type": "file",
        "artifact_id": "f2340efa-354c-4797-b300-e02289e83014",
        "metadata": {}
      },
      {
        "path": "test_ai_cli_simple.py",
        "type": "file",
        "artifact_id": "08a4f4b4-5d86-4071-9a31-c2b4ec945fc8",
        "metadata": {}
      },
      {
        "path": "test_audit.py",
        "type": "file",
        "artifact_id": "d42c78a0-4bc7-4fe8-b634-4dd11200fef0",
        "metadata": {}
      },
      {
        "path": "test_cli.py",
        "type": "file",
        "artifact_id": "755f9c5a-5790-4442-932f-0cee30983c06",
        "metadata": {}
      },
      {
        "path": "test_cli_demo.py",
        "type": "file",
        "artifact_id": "a0bb2f7d-af3f-406a-b554-67ce8b3c940e",
        "metadata": {}
      },
      {
        "path": "test_cli_integration.py",
        "type": "file",
        "artifact_id": "4bcd7936-48ed-4567-80f6-9ac094ed14c8",
        "metadata": {}
      },
      {
        "path": "test_context_orchestration.py",
        "type": "file",
        "artifact_id": "d97dbeec-5a29-459c-8195-f3cb607ffc88",
        "metadata": {}
      },
      {
        "path": "test_efficiency.py",
        "type": "file",
        "artifact_id": "1a6854d6-9d94-40a1-9883-d7a03cb95e49",
        "metadata": {}
      },
      {
        "path": "test_enhanced_ai_awareness.py",
        "type": "file",
        "artifact_id": "a2b67ced-b187-4fef-a8c5-7c61f55dba12",
        "metadata": {}
      },
      {
        "path": "test_export.py",
        "type": "file",
        "artifact_id": "eaefe225-399d-4fd2-ac26-4dc1e34fd95a",
        "metadata": {}
      },
      {
        "path": "test_final_validation.py",
        "type": "file",
        "artifact_id": "2861e167-9254-4457-99c4-7fa9ff3bf453",
        "metadata": {}
      },
      {
        "path": "test_modular_cli.py",
        "type": "file",
        "artifact_id": "8cc0d72b-51d2-4053-ac52-4501aa6870b2",
        "metadata": {}
      },
      {
        "path": "test_strict_mode.py",
        "type": "file",
        "artifact_id": "00ed11d1-96ad-4b06-992e-e985554afcf6",
        "metadata": {}
      },
      {
        "path": "tests",
        "type": "directory",
        "artifact_id": "5a160855-0ab2-4d8c-ab54-e018329aed61",
        "metadata": {}
      },
      {
        "path": "tests/__init__.py",
        "type": "file",
        "artifact_id": "37bfe222-ddfa-4fbd-aceb-33f580fe5f11",
        "metadata": {}
      },
      {
        "path": "tests/test_self_run.py",
        "type": "file",
        "artifact_id": "a5ba1797-9827-4a0e-9b66-26ee8b481820",
        "metadata": {}
      },
      {
        "path": "tmp",
        "type": "directory",
        "artifact_id": "59e54047-370e-4b25-913e-a57526386147",
        "metadata": {}
      },
      {
        "path": "usage_analysis_report.py",
        "type": "file",
        "artifact_id": "ea8aca8d-9adb-40b6-8341-97d193031487",
        "metadata": {}
      },
      {
        "path": "validate_schemas.py",
        "type": "file",
        "artifact_id": "226b9ddf-094c-47aa-b253-0661635986cd",
        "metadata": {}
      },
      {
        "path": "validate_sessions.py",
        "type": "file",
        "artifact_id": "c4d2620e-7126-4162-9b0f-d28d8d016d10",
        "metadata": {}
      },
      {
        "path": "verify_llm_response.py",
        "type": "file",
        "artifact_id": "a3862d4f-80a6-4944-8ba7-fe99ebe3eae7",
        "metadata": {}
      },
      {
        "path": "workflow_archive",
        "type": "directory",
        "artifact_id": "6cb1fa92-0272-48e4-ac7a-2a51b27f466d",
        "metadata": {}
      }
    ]
  },
  "toc": [
    {
      "module_id": "test_cli_integration",
      "path": "test_cli_integration.py",
      "category": "test",
      "functions": 1,
      "classes": 0,
      "summary": "Test script for CLI integration with new commands",
      "artifact_id": "5ce89b68-e055-40f7-aee1-7e1156e64f8d"
    },
    {
      "module_id": "test_final_validation",
      "path": "test_final_validation.py",
      "category": "test",
      "functions": 5,
      "classes": 0,
      "summary": "Final validation test for AI self-awareness system.",
      "artifact_id": "5a90c500-78fa-40fb-bfe9-3a9ed524f10f"
    },
    {
      "module_id": "test_efficiency",
      "path": "test_efficiency.py",
      "category": "test",
      "functions": 12,
      "classes": 0,
      "summary": "",
      "artifact_id": "b6034d58-b032-43e7-b71c-f9c2516f73a8"
    },
    {
      "module_id": "usage_analysis_report",
      "path": "usage_analysis_report.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "c6803c05-b40c-4bcb-bbe2-a2ed229405c5"
    },
    {
      "module_id": "test_cli",
      "path": "test_cli.py",
      "category": "test",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "60e08588-0fcb-40bf-8a4e-6c4ebcedcbd2"
    },
    {
      "module_id": "test_ai_cli_integration",
      "path": "test_ai_cli_integration.py",
      "category": "test",
      "functions": 14,
      "classes": 2,
      "summary": "AI CLI Integration Testing Suite",
      "artifact_id": "7287133c-075f-4f81-9229-415bb1391754"
    },
    {
      "module_id": "test_audit",
      "path": "test_audit.py",
      "category": "test",
      "functions": 1,
      "classes": 0,
      "summary": "Test script for audit functionality.",
      "artifact_id": "67c794db-68e1-484e-9451-0a12f3aef711"
    },
    {
      "module_id": "collector",
      "path": "collector.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "f7089b48-ac7c-4d6b-9fa1-636380d1c819"
    },
    {
      "module_id": "simple_analyzer",
      "path": "simple_analyzer.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "\u041f\u0440\u043e\u0441\u0442\u043e\u0439 \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 struct.json \u0441 \u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0432\u044b\u0432\u043e\u0434\u0430",
      "artifact_id": "d2071430-d87a-46b0-bd28-44c206f71864"
    },
    {
      "module_id": "test_strict_mode",
      "path": "test_strict_mode.py",
      "category": "test",
      "functions": 1,
      "classes": 0,
      "summary": "\u0422\u0435\u0441\u0442 [strict] \u0440\u0435\u0436\u0438\u043c\u0430 \u0434\u043b\u044f \u044d\u043a\u0441\u0442\u0440\u0435\u043d\u043d\u043e\u0439 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438",
      "artifact_id": "3733f780-ff37-4607-ad7b-7bbcc8af8cc1"
    },
    {
      "module_id": "final_system_check",
      "path": "final_system_check.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Final System Status Check - LLMStruct Modular CLI Integration",
      "artifact_id": "7a2a081f-f600-4a5d-93db-20e48d80e2e5"
    },
    {
      "module_id": "board_cli",
      "path": "board_cli.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "CLI Kanban Board for llmstruct tasks and ideas",
      "artifact_id": "ec82721b-5e7c-4832-ae82-f27f76a96f08"
    },
    {
      "module_id": "test_ai_cli_debug",
      "path": "test_ai_cli_debug.py",
      "category": "test",
      "functions": 2,
      "classes": 0,
      "summary": "Simple test for AI CLI Integration - Debug Version",
      "artifact_id": "9c112824-864a-4584-a522-bc75436f4299"
    },
    {
      "module_id": "final_system_validation",
      "path": "final_system_validation.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Final system validation script for LLMStruct Modular CLI Integration",
      "artifact_id": "77b499f2-1bb2-4aba-9960-1722143e6ca1"
    },
    {
      "module_id": "test_enhanced_ai_awareness",
      "path": "test_enhanced_ai_awareness.py",
      "category": "test",
      "functions": 1,
      "classes": 0,
      "summary": "Test script for AI Self-Awareness Enhancement with Unused Function Integration",
      "artifact_id": "f91c9001-53f7-4ca2-8499-5f8275a290d3"
    },
    {
      "module_id": "validate_schemas",
      "path": "validate_schemas.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "JSON Schema Validation Script for llmstruct",
      "artifact_id": "c9ab83a2-b11f-46e6-9b5e-bec62008b8c1"
    },
    {
      "module_id": "test_context_orchestration",
      "path": "test_context_orchestration.py",
      "category": "test",
      "functions": 21,
      "classes": 2,
      "summary": "LLM Context Orchestration Testing Suite",
      "artifact_id": "73ff3790-cac9-405f-b6d2-109f10d6fda4"
    },
    {
      "module_id": "test_export",
      "path": "test_export.py",
      "category": "test",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "a09b0de4-a00e-4c55-8da3-1bc08b4bf71c"
    },
    {
      "module_id": "smart_usage_analyzer",
      "path": "smart_usage_analyzer.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "40fc65be-5e25-46a1-a90c-ad9098d134d3"
    },
    {
      "module_id": "quick_unused_check",
      "path": "quick_unused_check.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "ad82820e-f97c-40ef-975f-0e6184df4c9d"
    },
    {
      "module_id": "test_modular_cli",
      "path": "test_modular_cli.py",
      "category": "test",
      "functions": 2,
      "classes": 0,
      "summary": "Test script for modular CLI structure",
      "artifact_id": "3e57c252-0f24-49e7-8ff5-babef13b6c94"
    },
    {
      "module_id": "validate_sessions",
      "path": "validate_sessions.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "Session Schema Validation Script for llmstruct",
      "artifact_id": "9689d38d-c9fa-41c0-a46c-fddc0725a554"
    },
    {
      "module_id": "analyze_unused_components_v2",
      "path": "analyze_unused_components_v2.py",
      "category": "core",
      "functions": 7,
      "classes": 0,
      "summary": "\u0410\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u043d\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 \u043d\u0430 \u0431\u0430\u0437\u0435 struct.json",
      "artifact_id": "7d07fb74-f009-48e0-9d96-468eca5de5a3"
    },
    {
      "module_id": "test_ai_cli_simple",
      "path": "test_ai_cli_simple.py",
      "category": "test",
      "functions": 1,
      "classes": 0,
      "summary": "Simple AI CLI Integration Test",
      "artifact_id": "d9c177f7-cece-4621-9d3c-8b3a5142d6b8"
    },
    {
      "module_id": "verify_llm_response",
      "path": "verify_llm_response.py",
      "category": "core",
      "functions": 6,
      "classes": 0,
      "summary": "",
      "artifact_id": "cfca1c6d-dc97-4a3d-9ad3-0f69dd37cc56"
    },
    {
      "module_id": "quick_analysis",
      "path": "quick_analysis.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Quick analysis of struct.json for unused components",
      "artifact_id": "b8d45551-307f-49be-9e7b-7083d9303d99"
    },
    {
      "module_id": "analyze_unused_components",
      "path": "analyze_unused_components.py",
      "category": "core",
      "functions": 8,
      "classes": 0,
      "summary": "\u042d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u043d\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
      "artifact_id": "46813ffa-68d2-4bd9-9ccb-8035b1853860"
    },
    {
      "module_id": "test_cli_demo",
      "path": "test_cli_demo.py",
      "category": "test",
      "functions": 1,
      "classes": 0,
      "summary": "Quick CLI test to demonstrate new commands",
      "artifact_id": "a46e2bb2-5429-48cb-a407-7fe07d835677"
    },
    {
      "module_id": "examples.python_project_utils",
      "path": "examples/python_project_utils.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "Utility functions for the sample project.",
      "artifact_id": "6a854b4f-0a4e-432a-bca2-acce1027a57c"
    },
    {
      "module_id": "examples.python_project_main",
      "path": "examples/python_project_main.py",
      "category": "core",
      "functions": 2,
      "classes": 1,
      "summary": "Main module for the sample project.",
      "artifact_id": "9afb9268-5b1d-442c-8fae-f0f4725bcebb"
    },
    {
      "module_id": "docs.test_self_run",
      "path": "docs/test_self_run.py",
      "category": "test",
      "functions": 5,
      "classes": 0,
      "summary": "",
      "artifact_id": "0d1f412a-b469-4a66-9683-15fbcc94f689"
    },
    {
      "module_id": "docs.cache",
      "path": "docs/cache.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "6d0de273-f744-400c-8cf9-e6b79c0e5d13"
    },
    {
      "module_id": "docs.self_run",
      "path": "docs/self_run.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "5196aa34-69f0-46fc-a2cd-7f2bd837f54a"
    },
    {
      "module_id": "docs.json_selector",
      "path": "docs/json_selector.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "2a92280e-1d04-47d4-a8ef-051bc9c6804b"
    },
    {
      "module_id": "docs.cli",
      "path": "docs/cli.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "",
      "artifact_id": "413d3f05-f237-454e-884f-27428eb76254"
    },
    {
      "module_id": "src.llmstruct.cli_config",
      "path": "src/llmstruct/cli_config.py",
      "category": "core",
      "functions": 18,
      "classes": 1,
      "summary": "CLI configuration management.",
      "artifact_id": "d88828d2-1bee-407d-8fee-8ea82a3abf0b"
    },
    {
      "module_id": "src.llmstruct.grok",
      "path": "src/llmstruct/grok.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "",
      "artifact_id": "27208886-6f83-4774-b109-b720931f3538"
    },
    {
      "module_id": "src.llmstruct.cli_commands",
      "path": "src/llmstruct/cli_commands.py",
      "category": "core",
      "functions": 22,
      "classes": 1,
      "summary": "CLI command processing and handlers.",
      "artifact_id": "f0cf7a49-bed4-482a-a1d9-994b1b3e33b7"
    },
    {
      "module_id": "src.llmstruct.context_orchestrator",
      "path": "src/llmstruct/context_orchestrator.py",
      "category": "core",
      "functions": 19,
      "classes": 5,
      "summary": "Smart Context Orchestration for LLMStruct",
      "artifact_id": "033da71e-62f1-4633-9b73-244c3866ba27"
    },
    {
      "module_id": "src.llmstruct.__init__",
      "path": "src/llmstruct/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "70752c8a-03da-40d0-8ee5-8914e071710a"
    },
    {
      "module_id": "src.llmstruct.ai_cli_integration",
      "path": "src/llmstruct/ai_cli_integration.py",
      "category": "core",
      "functions": 14,
      "classes": 1,
      "summary": "AI Self-Awareness CLI Integration Module",
      "artifact_id": "b2c3a9cb-c383-48ee-b370-83f1fa99991a"
    },
    {
      "module_id": "src.llmstruct.__main__",
      "path": "src/llmstruct/__main__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "1abeba33-7f37-4a9a-96c0-5339ae2f1bba"
    },
    {
      "module_id": "src.llmstruct.cli_utils",
      "path": "src/llmstruct/cli_utils.py",
      "category": "core",
      "functions": 13,
      "classes": 1,
      "summary": "CLI utility functions.",
      "artifact_id": "a98b7e4a-d2cf-4723-9dae-781dd3fe5a31"
    },
    {
      "module_id": "src.llmstruct.copilot",
      "path": "src/llmstruct/copilot.py",
      "category": "core",
      "functions": 26,
      "classes": 5,
      "summary": "LLMStruct Copilot Integration Module",
      "artifact_id": "d6e03749-68c3-4992-8094-84d9c66be537"
    },
    {
      "module_id": "src.llmstruct.gh_view",
      "path": "src/llmstruct/gh_view.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "GitHub visualization/graph feature (gh-view-v1)",
      "artifact_id": "a27ac0c3-f0cc-40e8-8752-4d99f4251f77"
    },
    {
      "module_id": "src.llmstruct.llm_client",
      "path": "src/llmstruct/llm_client.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "ff0aefcc-b8e8-4612-88ea-c40c28947616"
    },
    {
      "module_id": "src.llmstruct.ai_self_awareness",
      "path": "src/llmstruct/ai_self_awareness.py",
      "category": "core",
      "functions": 33,
      "classes": 8,
      "summary": "AI Self-Awareness Enhancement Module",
      "artifact_id": "129367a7-62f3-4bb4-a294-229641cd1a6a"
    },
    {
      "module_id": "src.llmstruct.cache",
      "path": "src/llmstruct/cache.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "1eaef5fe-f52e-4733-ad49-dc89606b6070"
    },
    {
      "module_id": "src.llmstruct.self_run",
      "path": "src/llmstruct/self_run.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "a86a6d03-dac1-47ac-8eda-9e767b2ddd7a"
    },
    {
      "module_id": "src.llmstruct.json_selector",
      "path": "src/llmstruct/json_selector.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "66bdd469-5680-4eac-a6d8-e06781b499d3"
    },
    {
      "module_id": "src.llmstruct.cli",
      "path": "src/llmstruct/cli.py",
      "category": "core",
      "functions": 17,
      "classes": 0,
      "summary": "LLMStruct CLI - Main entry point for the command-line interface.",
      "artifact_id": "d6886663-7828-425e-997d-1304747f0357"
    },
    {
      "module_id": "src.llmstruct.cli_core",
      "path": "src/llmstruct/cli_core.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "Core CLI functionality and main loop.",
      "artifact_id": "36a7b075-fbfa-45ef-b919-2b308c193943"
    },
    {
      "module_id": "src.llmstruct.workspace",
      "path": "src/llmstruct/workspace.py",
      "category": "core",
      "functions": 20,
      "classes": 1,
      "summary": "Workspace State & Mode Management System",
      "artifact_id": "0ce744f7-209a-417a-b393-5e9aade2d15c"
    },
    {
      "module_id": "src.llmstruct.parsers.__init__",
      "path": "src/llmstruct/parsers/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "artifact_id": "39f2f724-0826-4bc5-919c-981ac4d73988"
    },
    {
      "module_id": "src.llmstruct.parsers.javascript_parser",
      "path": "src/llmstruct/parsers/javascript_parser.py",
      "category": "core",
      "functions": 5,
      "classes": 1,
      "summary": "",
      "artifact_id": "d02079aa-3725-4423-8cc1-83c7b04f1488"
    },
    {
      "module_id": "src.llmstruct.parsers.python_parser",
      "path": "src/llmstruct/parsers/python_parser.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "",
      "artifact_id": "b0436dc7-5899-4536-920d-35786126cfe1"
    },
    {
      "module_id": "src.llmstruct.templates.__init__",
      "path": "src/llmstruct/templates/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Templates for LLM prompts used in LLMStruct integration.",
      "artifact_id": "cac0210b-49b8-47fe-a369-790428cfa8a4"
    },
    {
      "module_id": "src.llmstruct.validators.__init__",
      "path": "src/llmstruct/validators/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "artifact_id": "a8fe3a97-4f27-4927-adbe-dcb6f1a5c592"
    },
    {
      "module_id": "src.llmstruct.validators.json_validator",
      "path": "src/llmstruct/validators/json_validator.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "7aba3b10-4ae2-406a-88f5-ceb1f3552da6"
    },
    {
      "module_id": "src.llmstruct.generators.json_generator",
      "path": "src/llmstruct/generators/json_generator.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "ed87dba2-2b97-49ae-898b-b520415370b7"
    },
    {
      "module_id": "src.llmstruct.generators.__init__",
      "path": "src/llmstruct/generators/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "artifact_id": "8eb39e00-9731-4da2-9eba-944aefd663bb"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_self_run",
      "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_self_run.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "5a8dfc61-4992-46bd-bc45-b21224918fa9"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.collector (1)",
      "path": "temp_workfiles/unsorted_mess/22.05.25/collector (1).py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "59499f53-7df1-40ed-b241-24afa48c98d8"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.test_self_run",
      "path": "temp_workfiles/unsorted_mess/22.05.25/test_self_run.py",
      "category": "test",
      "functions": 5,
      "classes": 0,
      "summary": "",
      "artifact_id": "7a60998b-032d-4af7-a5fb-4a3152db11bf"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.test_cli",
      "path": "temp_workfiles/unsorted_mess/22.05.25/test_cli.py",
      "category": "test",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "02391f14-c5e7-4771-8dd5-8ca4cda0b021"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.deploy_embedded_files (1)",
      "path": "temp_workfiles/unsorted_mess/22.05.25/deploy_embedded_files (1).py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "76b1f066-734e-4e7b-937c-4dfbebef1ab8"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_json_selector",
      "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_json_selector.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "00591868-01d0-4086-b13a-379d1207ae7a"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.collector",
      "path": "temp_workfiles/unsorted_mess/22.05.25/collector.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "096fdb10-b4aa-481b-8c5f-9c715bfe80d1"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.scripts_validate_refs",
      "path": "temp_workfiles/unsorted_mess/22.05.25/scripts_validate_refs.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "db29d836-6d63-49ad-b1bf-8d3152a14524"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_cache",
      "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_cache.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "047ecfee-e10d-4399-b2d3-cac7d9b3fc55"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.cli_parser",
      "path": "temp_workfiles/unsorted_mess/22.05.25/cli_parser.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "5f006b43-7ec4-4507-bf82-50b6cf4c607e"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.scripts_collector",
      "path": "temp_workfiles/unsorted_mess/22.05.25/scripts_collector.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "2c6af87e-5860-431b-b011-8d760e5404f8"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.cache",
      "path": "temp_workfiles/unsorted_mess/22.05.25/cache.py",
      "category": "core",
      "functions": 7,
      "classes": 1,
      "summary": "",
      "artifact_id": "6cc30af9-c5e8-41d8-918b-ddaa22930772"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.validate_refs",
      "path": "temp_workfiles/unsorted_mess/22.05.25/validate_refs.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "2c9f7583-3757-49dd-b10e-f3a80ab7f883"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.test_deploy_embedded_files",
      "path": "temp_workfiles/unsorted_mess/22.05.25/test_deploy_embedded_files.py",
      "category": "test",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "8e4d60b3-2a31-44e5-a27c-885f4b98c336"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.cli",
      "path": "temp_workfiles/unsorted_mess/22.05.25/cli.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "a06702fb-477e-4aa2-985c-699285284a32"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.deploy_embedded_files",
      "path": "temp_workfiles/unsorted_mess/22.05.25/deploy_embedded_files.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "486e6779-de1f-4c42-b2f6-f31e0cbbd40a"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_cli",
      "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_cli.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "",
      "artifact_id": "4820a12f-13ca-405e-ab6c-f5836761051a"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.extract_artifacts",
      "path": "temp_workfiles/unsorted_mess/22.05.25/extract_artifacts.py",
      "category": "core",
      "functions": 6,
      "classes": 0,
      "summary": "",
      "artifact_id": "4308219e-5c09-4aa0-939a-89d849011456"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.dumper",
      "path": "temp_workfiles/unsorted_mess/dump/dumper.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "ef897347-8ec1-45d5-a7b7-20f06d52acf2"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_generators___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_generators___init__.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "artifact_id": "b6fb2528-59dd-47d6-b406-7ccf312aa6c2"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.examples_python_project_utils",
      "path": "temp_workfiles/unsorted_mess/dump/examples_python_project_utils.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "Utility functions for the sample project.",
      "artifact_id": "9aebf340-619e-4787-8acd-9b172a5915ce"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_ideas_tree",
      "path": "temp_workfiles/unsorted_mess/dump/generate_ideas_tree.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "83b7c80a-f42b-4a29-949f-4156da46ff60"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct___init__.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "LLMStruct: A tool for generating JSON-based code structures for LLM integration.",
      "artifact_id": "6591874f-b6fb-4689-ae6c-265b4a9e2084"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_efficiency1",
      "path": "temp_workfiles/unsorted_mess/dump/test_efficiency1.py",
      "category": "test",
      "functions": 7,
      "classes": 0,
      "summary": "",
      "artifact_id": "124e5850-59f5-434f-9706-4f30234fd84f"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_efficiency",
      "path": "temp_workfiles/unsorted_mess/dump/test_efficiency.py",
      "category": "test",
      "functions": 6,
      "classes": 0,
      "summary": "",
      "artifact_id": "69aeb298-a0c6-4401-b2dd-06bc93188200"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.grok",
      "path": "temp_workfiles/unsorted_mess/dump/grok.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "",
      "artifact_id": "f7878e34-5450-4e8b-b9a3-3937b17a72f9"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct___main__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct___main__.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "bfb1437f-482d-4903-a6ef-4c530e92d4ea"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_ru_docs (1)",
      "path": "temp_workfiles/unsorted_mess/dump/generate_ru_docs (1).py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "cfd15cc5-12b7-4712-9d9a-d1d3cbd7b3ae"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_efficiency (1)",
      "path": "temp_workfiles/unsorted_mess/dump/test_efficiency (1).py",
      "category": "test",
      "functions": 9,
      "classes": 0,
      "summary": "",
      "artifact_id": "f8b7c716-fc1f-4319-b0b0-d3a9c6414226"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.json_generator",
      "path": "temp_workfiles/unsorted_mess/dump/json_generator.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "f13d7bdd-c4d7-4132-a026-bc1d26a2dc83"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.llm_client_engines",
      "path": "temp_workfiles/unsorted_mess/dump/llm_client_engines.py",
      "category": "core",
      "functions": 5,
      "classes": 0,
      "summary": "",
      "artifact_id": "57642827-5c69-454d-af82-d8beef5c1395"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.llm_client_config",
      "path": "temp_workfiles/unsorted_mess/dump/llm_client_config.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "95289fb6-f208-4c96-87d8-6dc5b88d3e5e"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_parsers_python_parser",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_parsers_python_parser.py",
      "category": "core",
      "functions": 11,
      "classes": 1,
      "summary": "",
      "artifact_id": "2e89bd67-fe04-457d-82da-1875a70fea7b"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_generators_json_generator",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_generators_json_generator.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "85662860-23d2-4419-a3b3-0598efd68bba"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_llmstruct",
      "path": "temp_workfiles/unsorted_mess/dump/generate_llmstruct.py",
      "category": "core",
      "functions": 16,
      "classes": 1,
      "summary": "Generate JSON for workspace based on user instructions template.",
      "artifact_id": "3835624d-9f3d-45d4-9e37-2bac1303eda8"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_docs (1)",
      "path": "temp_workfiles/unsorted_mess/dump/generate_docs (1).py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "0a138c55-4d73-4138-990c-ea07131915be"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_ru_docs",
      "path": "temp_workfiles/unsorted_mess/dump/generate_ru_docs.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "b83fe830-605b-439b-a2fc-8b53a162c35b"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.collector",
      "path": "temp_workfiles/unsorted_mess/dump/collector.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "894d19c5-b2c3-4976-9341-6286b0fbad43"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.collect_docs (1)",
      "path": "temp_workfiles/unsorted_mess/dump/collect_docs (1).py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "fdae3c4f-5839-42b5-80ec-16adf6dd76d3"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.collect_docs",
      "path": "temp_workfiles/unsorted_mess/dump/collect_docs.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "7378f86a-595a-452e-b03f-9c35450963e2"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.refactored_structure",
      "path": "temp_workfiles/unsorted_mess/dump/refactored_structure.py",
      "category": "core",
      "functions": 5,
      "classes": 3,
      "summary": "",
      "artifact_id": "36e37d72-13dc-410b-99f4-08bc74d5e2d4"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_parsers_python_parser (1)",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_parsers_python_parser (1).py",
      "category": "core",
      "functions": 4,
      "classes": 1,
      "summary": "",
      "artifact_id": "eb36310e-efe4-4302-987b-03bc55a063ef"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_templates___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_templates___init__.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "Templates for LLM prompts used in LLMStruct integration.",
      "artifact_id": "c71402f3-34fe-4f7f-928d-21c154708ef4"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_end_to_end (1)",
      "path": "temp_workfiles/unsorted_mess/dump/test_end_to_end (1).py",
      "category": "test",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "decb6ce0-68f3-4353-9c97-78eb3ff6251b"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_docs",
      "path": "temp_workfiles/unsorted_mess/dump/generate_docs.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "b3a9329b-61ea-4bec-9ac3-e502d77d1bce"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.examples_python_project_main",
      "path": "temp_workfiles/unsorted_mess/dump/examples_python_project_main.py",
      "category": "core",
      "functions": 2,
      "classes": 1,
      "summary": "Main module for the sample project.",
      "artifact_id": "cc8454b4-3e92-4d39-b6a2-fe1a1bb582fe"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.filter_llmstruct_json",
      "path": "temp_workfiles/unsorted_mess/dump/filter_llmstruct_json.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "5e63986b-9c22-4066-bc47-d9e49086c523"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_ru_internal_docs",
      "path": "temp_workfiles/unsorted_mess/dump/generate_ru_internal_docs.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "3a3f885e-cf40-4016-9fec-210cee6f75f8"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.llm_client",
      "path": "temp_workfiles/unsorted_mess/dump/llm_client.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "4c5c0b64-d1ef-446c-b7ea-b7ff8cf80a94"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.llm_client (3)",
      "path": "temp_workfiles/unsorted_mess/dump/llm_client (3).py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "3cc486e8-2fb6-461d-9535-14bcee6ce4b5"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.tests___init__",
      "path": "temp_workfiles/unsorted_mess/dump/tests___init__.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "Test suite for LLMStruct, covering parsers, generators, validators, and integration.",
      "artifact_id": "29132589-6481-4ea4-b451-6d34299cd730"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.check_docs",
      "path": "temp_workfiles/unsorted_mess/dump/check_docs.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "7253d596-5623-4dbe-a636-556614f89260"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.javascript_parser",
      "path": "temp_workfiles/unsorted_mess/dump/javascript_parser.py",
      "category": "core",
      "functions": 5,
      "classes": 1,
      "summary": "",
      "artifact_id": "ec5841bc-92b9-4a22-954b-b8c225f994b1"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.self_run",
      "path": "temp_workfiles/unsorted_mess/dump/self_run.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "86ffa974-e0e0-4d28-8692-e5e5fa47cc66"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_generators_json_generator (1)",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_generators_json_generator (1).py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "757b3ff5-8649-4917-a461-8f637e13581e"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_end_to_end",
      "path": "temp_workfiles/unsorted_mess/dump/test_end_to_end.py",
      "category": "test",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "1f478b26-2cea-4ff5-b3a6-937fa94a9649"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.python_parser",
      "path": "temp_workfiles/unsorted_mess/dump/python_parser.py",
      "category": "core",
      "functions": 6,
      "classes": 2,
      "summary": "",
      "artifact_id": "dd674525-46e2-4fce-b2cb-eb221ad81e22"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_parsers___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_parsers___init__.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "artifact_id": "40af187c-852b-4918-b63a-73127d14f29e"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_cli (1)",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_cli (1).py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "038abc04-8062-409a-811b-8974d15e3eec"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_efficiency_proxybypass",
      "path": "temp_workfiles/unsorted_mess/dump/test_efficiency_proxybypass.py",
      "category": "test",
      "functions": 8,
      "classes": 0,
      "summary": "",
      "artifact_id": "02cd05d5-8cb4-4bec-864c-63f56928bdab"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.scripts_setup_github",
      "path": "temp_workfiles/unsorted_mess/dump/scripts_setup_github.py",
      "category": "core",
      "functions": 6,
      "classes": 0,
      "summary": "",
      "artifact_id": "de4354a6-f28a-46b4-bc67-d9ba4d420510"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct___init__ (1)",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct___init__ (1).py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "d1764e16-ad5c-4a69-accb-be0db97a3446"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.cli",
      "path": "temp_workfiles/unsorted_mess/dump/cli.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "",
      "artifact_id": "2b54b161-eddc-4188-a3de-a9c29da96045"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_validators___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_validators___init__.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "artifact_id": "9edd6892-cfd1-4b1e-98bf-77b0b63f62bd"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_llmstruct (1)",
      "path": "temp_workfiles/unsorted_mess/dump/generate_llmstruct (1).py",
      "category": "core",
      "functions": 15,
      "classes": 1,
      "summary": "Generate JSON for workspace based on user instructions template.",
      "artifact_id": "69a1e300-dd2b-4c88-832e-8a1b92149da6"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.json_validator",
      "path": "temp_workfiles/unsorted_mess/dump/json_validator.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "738e2203-03cd-4e59-9245-e6b65c1816b6"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.validate_json",
      "path": "temp_workfiles/unsorted_mess/dump/validate_json.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "6c45a638-1ba4-4ab2-aaa6-702a0d196bb0"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_cli",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_cli.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "b1fa6834-5663-41b2-8890-96a3c26fc40a"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.clean.internal_cleaner",
      "path": "temp_workfiles/unsorted_mess/dump/clean/internal_cleaner.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "713a7644-ef15-4ab7-8946-c6f96f8ea966"
    },
    {
      "module_id": "temp_workfiles.dev_utils.test_efficiency",
      "path": "temp_workfiles/dev_utils/test_efficiency.py",
      "category": "test",
      "functions": 12,
      "classes": 0,
      "summary": "",
      "artifact_id": "66ed3b38-7ff0-498a-bb0b-eb298b07fffc"
    },
    {
      "module_id": "temp_workfiles.dev_utils.test_audit",
      "path": "temp_workfiles/dev_utils/test_audit.py",
      "category": "test",
      "functions": 1,
      "classes": 0,
      "summary": "Test script for audit functionality.",
      "artifact_id": "a451a06a-aa24-48d1-b1e7-b0c1ffbcb2e7"
    },
    {
      "module_id": "bak.20250522_102827.scripts.collector",
      "path": "bak/20250522_102827/scripts/collector.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "952c8fcf-a9ec-4ecd-ba4a-e2a3b6e9d39a"
    },
    {
      "module_id": "bak.20250522_102827.scripts.validate_refs",
      "path": "bak/20250522_102827/scripts/validate_refs.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "9344386e-ccf5-4c25-ab95-fec71ac5c5b2"
    },
    {
      "module_id": "bak.20250522_102827.scripts.deploy_embedded_files",
      "path": "bak/20250522_102827/scripts/deploy_embedded_files.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "b5f3077a-1050-4a9f-86cc-86946e234cb0"
    },
    {
      "module_id": "bak.20250522_131121.scripts.collector",
      "path": "bak/20250522_131121/scripts/collector.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "6de5d5b8-8590-43b0-8167-77fb2b755205"
    },
    {
      "module_id": "bak.20250522_131121.scripts.validate_refs",
      "path": "bak/20250522_131121/scripts/validate_refs.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "f66c4b3e-bb03-4718-a86d-58c55aeb89e6"
    },
    {
      "module_id": "bak.20250522_131121.scripts.deploy_embedded_files",
      "path": "bak/20250522_131121/scripts/deploy_embedded_files.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "08506526-1b67-4a54-8541-af45cd77667f"
    },
    {
      "module_id": "tests.test_self_run",
      "path": "tests/test_self_run.py",
      "category": "test",
      "functions": 5,
      "classes": 0,
      "summary": "",
      "artifact_id": "e8250ece-374d-4fc0-8a45-789e9ea506d9"
    },
    {
      "module_id": "tests.__init__",
      "path": "tests/__init__.py",
      "category": "test",
      "functions": 0,
      "classes": 0,
      "summary": "Test suite for LLMStruct, covering parsers, generators, validators, and integration.",
      "artifact_id": "21efce60-a0b4-499e-809f-74d465f27dad"
    },
    {
      "module_id": "scripts.collector",
      "path": "scripts/collector.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "6c5da8d1-53eb-4d5b-bcda-2c67fba91d37"
    },
    {
      "module_id": "scripts.session_cli",
      "path": "scripts/session_cli.py",
      "category": "core",
      "functions": 10,
      "classes": 1,
      "summary": "Session Management CLI",
      "artifact_id": "87f49784-de5f-423c-aee6-4aba2c7a14a9"
    },
    {
      "module_id": "scripts.auto_update_struct",
      "path": "scripts/auto_update_struct.py",
      "category": "core",
      "functions": 8,
      "classes": 0,
      "summary": "Automatic struct.json update script",
      "artifact_id": "94d22556-ad1c-496d-a762-33d7eedfd50e"
    },
    {
      "module_id": "scripts.validate_schemas",
      "path": "scripts/validate_schemas.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "aa35ecc2-1598-403b-83d6-b462198dcb9f"
    },
    {
      "module_id": "scripts.export_to_github_projects",
      "path": "scripts/export_to_github_projects.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "Export script for GitHub Projects integration",
      "artifact_id": "e0f03496-1382-4fb9-a2b0-d1d4eb6a6fde"
    },
    {
      "module_id": "scripts.validate_refs",
      "path": "scripts/validate_refs.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "1a54ed84-4faf-4914-b0ab-62c27c674145"
    },
    {
      "module_id": "scripts.deploy_embedded_files",
      "path": "scripts/deploy_embedded_files.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "f941e911-c3f3-4890-a2d2-19b65e0cd3dc"
    },
    {
      "module_id": "scripts.validate_json",
      "path": "scripts/validate_json.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "JSON Validation Script",
      "artifact_id": "ca0a3b87-6a4b-41cb-b1c8-78586c3213b1"
    }
  ],
  "modules": [
    {
      "module_id": "test_cli_integration",
      "path": "test_cli_integration.py",
      "category": "test",
      "module_doc": "Test script for CLI integration with new commands",
      "functions": [
        {
          "name": "test_modular_cli_commands",
          "docstring": "Test new CLI commands integration",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_modular_cli_commands": [
          "os.stat",
          "int",
          "time.ctime",
          "time.time",
          "events_data.append",
          "os.makedirs",
          "json.load",
          "print",
          "open",
          "subprocess.run",
          "create_cli_core",
          "json.dump"
        ]
      },
      "dependencies": [
        "CLIConfig",
        "CLICore",
        "CLIUtils",
        "CommandProcessor",
        "CopilotContextManager",
        "Path",
        "create_cli_core",
        "json",
        "llmstruct.cli_commands",
        "llmstruct.cli_config",
        "llmstruct.cli_core",
        "llmstruct.cli_utils",
        "llmstruct.copilot",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "time"
      ],
      "hash": null,
      "artifact_id": "5ce89b68-e055-40f7-aee1-7e1156e64f8d"
    },
    {
      "module_id": "test_final_validation",
      "path": "test_final_validation.py",
      "category": "test",
      "module_doc": "Final validation test for AI self-awareness system.\nTests all components after struct.json and cache system fixes.",
      "functions": [
        {
          "name": "test_struct_validation",
          "docstring": "Test struct.json validation with correct structure.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_cache_system",
          "docstring": "Test cache system with correct JSONCache methods.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_ai_awareness_system",
          "docstring": "Test the full AI self-awareness system.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_cli_integration",
          "docstring": "Test AI CLI integration.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Run complete validation test.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_struct_validation": [
          "struct_data.keys",
          "struct_file.exists",
          "Path",
          "json.load",
          "print",
          "list",
          "open"
        ],
        "test_cache_system": [
          "time.time",
          "str",
          "JSONCache",
          "cache.cache_json",
          "retrieved.get",
          "Path",
          "print",
          "cache.get_full_json"
        ],
        "test_ai_awareness_system": [
          "len",
          "str",
          "discovery.get_enhanced_capabilities_summary",
          "discovery.get_comprehensive_ai_status",
          "traceback.print_exc",
          "Path",
          "print",
          "SystemCapabilityDiscovery",
          "discovery.discover_all_capabilities"
        ],
        "test_cli_integration": [
          "str",
          "get_ai_enhanced_cli_summary",
          "Path",
          "print",
          "cli_integration.get_integration_summary",
          "create_ai_cli_integration"
        ],
        "main": [
          "len",
          "print",
          "results.append",
          "test_func"
        ]
      },
      "dependencies": [
        "JSONCache",
        "Path",
        "SystemCapabilityDiscovery",
        "create_ai_cli_integration",
        "get_ai_enhanced_cli_summary",
        "json",
        "llmstruct.ai_cli_integration",
        "llmstruct.ai_self_awareness",
        "llmstruct.cache",
        "pathlib",
        "sys",
        "time",
        "traceback"
      ],
      "hash": null,
      "artifact_id": "5a90c500-78fa-40fb-bfe9-3a9ed524f10f"
    },
    {
      "module_id": "test_efficiency",
      "path": "test_efficiency.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "get_system_metrics",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "is_local_address",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "url"
          ],
          "decorators": []
        },
        {
          "name": "setup_proxy",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "proxy_url"
          ],
          "decorators": []
        },
        {
          "name": "check_ollama",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url"
          ],
          "decorators": []
        },
        {
          "name": "optimize_prompt",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "struct_data",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "run_llm_request",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "payload",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "check_llmstruct_cli",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_with_llmstruct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "project_path",
            "proxy",
            "use_placeholder"
          ],
          "decorators": []
        },
        {
          "name": "test_without_llmstruct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "project_path",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "test_with_grok",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_key",
            "project_path",
            "proxy",
            "use_placeholder"
          ],
          "decorators": []
        },
        {
          "name": "evaluate_accuracy",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "response_text",
            "expected"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_system_metrics": [
          "psutil.virtual_memory",
          "psutil.cpu_percent"
        ],
        "is_local_address": [
          "ipaddress.ip_address",
          "urlparse"
        ],
        "setup_proxy": [
          "os.getenv"
        ],
        "check_ollama": [
          "str",
          "api_url.replace",
          "requests.get",
          "response.json"
        ],
        "optimize_prompt": [
          "len",
          "print",
          "struct_data.split"
        ],
        "run_llm_request": [
          "is_local_address",
          "len",
          "requests.Session",
          "response.json",
          "session.post",
          "type",
          "get_system_metrics",
          "time.perf_counter",
          "print",
          "response.raise_for_status"
        ],
        "check_llmstruct_cli": [
          "shutil.which"
        ],
        "test_with_llmstruct": [
          "FileNotFoundError",
          "subprocess.run",
          "target_path.exists",
          "optimize_prompt",
          "f.read",
          "str",
          "Path",
          "open",
          "check_llmstruct_cli",
          "run_llm_request",
          "json.dump"
        ],
        "test_without_llmstruct": [
          "optimize_prompt",
          "f.read",
          "Path",
          "open",
          "run_llm_request"
        ],
        "test_with_grok": [
          "FileNotFoundError",
          "target_path.exists",
          "optimize_prompt",
          "f.read",
          "Path",
          "test_grok",
          "open",
          "json.dump"
        ],
        "evaluate_accuracy": [
          "len",
          "response_text.lower",
          "sum"
        ],
        "main": [
          "check_ollama",
          "parser.parse_args",
          "range",
          "parser.add_argument",
          "test_with_llmstruct",
          "str",
          "setup_proxy",
          "evaluate_accuracy",
          "test_with_grok",
          "print",
          "open",
          "check_llmstruct_cli",
          "argparse.ArgumentParser",
          "test_without_llmstruct",
          "json.dump"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "ipaddress",
        "json",
        "os",
        "pathlib",
        "psutil",
        "requests",
        "shutil",
        "src.llmstruct.grok",
        "subprocess",
        "test_grok",
        "time",
        "urllib.parse",
        "urlparse"
      ],
      "hash": null,
      "artifact_id": "b6034d58-b032-43e7-b71c-f9c2516f73a8"
    },
    {
      "module_id": "usage_analysis_report",
      "path": "usage_analysis_report.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "c6803c05-b40c-4bcb-bbe2-a2ed229405c5"
    },
    {
      "module_id": "test_cli",
      "path": "test_cli.py",
      "category": "test",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "60e08588-0fcb-40bf-8a4e-6c4ebcedcbd2"
    },
    {
      "module_id": "test_ai_cli_integration",
      "path": "test_ai_cli_integration.py",
      "category": "test",
      "module_doc": "AI CLI Integration Testing Suite\n\nAdvanced testing framework to validate how AI agents can populate and interact\nwith the LLMStruct CLI system across different scenarios and use cases.",
      "functions": [
        {
          "name": "main",
          "docstring": "Main function for AI CLI integration testing.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "setup_logging",
          "docstring": "Set up logging for AI CLI integration testing.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_ai_cli_scenario",
          "docstring": "Test a specific AI CLI integration scenario.",
          "line_range": null,
          "parameters": [
            "self",
            "scenario",
            "ai_agent"
          ],
          "decorators": []
        },
        {
          "name": "get_scenario_config",
          "docstring": "Get configuration for specific test scenario.",
          "line_range": null,
          "parameters": [
            "self",
            "scenario"
          ],
          "decorators": []
        },
        {
          "name": "simulate_ai_cli_execution",
          "docstring": "Simulate AI agent executing CLI command with context.",
          "line_range": null,
          "parameters": [
            "self",
            "command",
            "context_sources",
            "ai_agent"
          ],
          "decorators": []
        },
        {
          "name": "load_simulation_context",
          "docstring": "Load simulated context data for testing.",
          "line_range": null,
          "parameters": [
            "self",
            "sources"
          ],
          "decorators": []
        },
        {
          "name": "load_json_safely",
          "docstring": "Safely load JSON file for testing.",
          "line_range": null,
          "parameters": [
            "self",
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "estimate_context_tokens",
          "docstring": "Estimate token consumption for context data.",
          "line_range": null,
          "parameters": [
            "self",
            "context_data"
          ],
          "decorators": []
        },
        {
          "name": "calculate_output_quality",
          "docstring": "Calculate output quality score based on various factors.",
          "line_range": null,
          "parameters": [
            "self",
            "command",
            "context_data",
            "ai_agent"
          ],
          "decorators": []
        },
        {
          "name": "run_comprehensive_ai_cli_tests",
          "docstring": "Run comprehensive AI CLI integration test suite.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "generate_ai_cli_report",
          "docstring": "Generate comprehensive AI CLI integration report.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "calculate_scenario_complexity",
          "docstring": "Calculate complexity score for scenario.",
          "line_range": null,
          "parameters": [
            "self",
            "scenario"
          ],
          "decorators": []
        },
        {
          "name": "generate_ai_cli_recommendations",
          "docstring": "Generate recommendations based on AI CLI test results.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "AICliTestResult",
          "docstring": "Test result for AI CLI integration testing.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "AICliIntegrationTester",
          "docstring": "Advanced testing class for AI CLI integration capabilities.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "session_id"
              ]
            },
            {
              "name": "setup_logging",
              "docstring": "Set up logging for AI CLI integration testing.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_ai_cli_scenario",
              "docstring": "Test a specific AI CLI integration scenario.",
              "line_range": null,
              "parameters": [
                "self",
                "scenario",
                "ai_agent"
              ]
            },
            {
              "name": "get_scenario_config",
              "docstring": "Get configuration for specific test scenario.",
              "line_range": null,
              "parameters": [
                "self",
                "scenario"
              ]
            },
            {
              "name": "simulate_ai_cli_execution",
              "docstring": "Simulate AI agent executing CLI command with context.",
              "line_range": null,
              "parameters": [
                "self",
                "command",
                "context_sources",
                "ai_agent"
              ]
            },
            {
              "name": "load_simulation_context",
              "docstring": "Load simulated context data for testing.",
              "line_range": null,
              "parameters": [
                "self",
                "sources"
              ]
            },
            {
              "name": "load_json_safely",
              "docstring": "Safely load JSON file for testing.",
              "line_range": null,
              "parameters": [
                "self",
                "filepath"
              ]
            },
            {
              "name": "estimate_context_tokens",
              "docstring": "Estimate token consumption for context data.",
              "line_range": null,
              "parameters": [
                "self",
                "context_data"
              ]
            },
            {
              "name": "calculate_output_quality",
              "docstring": "Calculate output quality score based on various factors.",
              "line_range": null,
              "parameters": [
                "self",
                "command",
                "context_data",
                "ai_agent"
              ]
            },
            {
              "name": "run_comprehensive_ai_cli_tests",
              "docstring": "Run comprehensive AI CLI integration test suite.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "generate_ai_cli_report",
              "docstring": "Generate comprehensive AI CLI integration report.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "calculate_scenario_complexity",
              "docstring": "Calculate complexity score for scenario.",
              "line_range": null,
              "parameters": [
                "self",
                "scenario"
              ]
            },
            {
              "name": "generate_ai_cli_recommendations",
              "docstring": "Generate recommendations based on AI CLI test results.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.setup_logging"
        ],
        "setup_logging": [
          "logging.StreamHandler",
          "logging.basicConfig",
          "logging.FileHandler",
          "logging.getLogger"
        ],
        "test_ai_cli_scenario": [
          "self.simulate_ai_cli_execution",
          "execution_result.get",
          "time.time",
          "str",
          "ai_agent.replace",
          "self.get_scenario_config",
          "AICliTestResult"
        ],
        "get_scenario_config": [
          "scenarios.get"
        ],
        "simulate_ai_cli_execution": [
          "self.calculate_output_quality",
          "self.estimate_context_tokens",
          "asyncio.sleep",
          "self.load_simulation_context"
        ],
        "load_simulation_context": [
          "self.load_json_safely"
        ],
        "load_json_safely": [
          "Path",
          "json.load",
          "path.exists",
          "open"
        ],
        "estimate_context_tokens": [
          "len",
          "json.dumps"
        ],
        "calculate_output_quality": [
          "len",
          "command.split",
          "min",
          "agent_bonuses.get"
        ],
        "run_comprehensive_ai_cli_tests": [
          "self.test_ai_cli_scenario",
          "self.generate_ai_cli_report"
        ],
        "generate_ai_cli_report": [
          "scenario_results.items",
          "len",
          "self.calculate_scenario_complexity",
          "self.generate_ai_cli_recommendations",
          "agent_results.items",
          "sum",
          "Path",
          "asdict",
          "agent_analysis.keys",
          "list",
          "open",
          "json.dump"
        ],
        "calculate_scenario_complexity": [
          "complexity_scores.get"
        ],
        "generate_ai_cli_recommendations": [
          "recommendations.append",
          "len",
          "sum"
        ],
        "main": [
          "parser.parse_args",
          "parser.add_argument",
          "tester.run_comprehensive_ai_cli_tests",
          "print",
          "argparse.ArgumentParser",
          "AICliIntegrationTester",
          "tester.test_ai_cli_scenario"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "asdict",
        "asyncio",
        "dataclass",
        "dataclasses",
        "json",
        "logging",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "7287133c-075f-4f81-9229-415bb1391754"
    },
    {
      "module_id": "test_audit",
      "path": "test_audit.py",
      "category": "test",
      "module_doc": "Test script for audit functionality.",
      "functions": [
        {
          "name": "test_audit_status",
          "docstring": "Test audit status directly.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_audit_status": [
          "ideas_data.keys",
          "len",
          "t.get",
          "ideas_file.exists",
          "tasks_data.keys",
          "i.get",
          "Path",
          "json.load",
          "print",
          "list",
          "open",
          "tasks_file.exists"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "67c794db-68e1-484e-9451-0a12f3aef711"
    },
    {
      "module_id": "collector",
      "path": "collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "is_text_file",
          "docstring": "Check if file is likely a text file based on extension.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "collect_project",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "Path",
          "gitignore_parser.parse_gitignore",
          "gitignore_path.exists"
        ],
        "is_text_file": [],
        "collect_project": [
          "len",
          "logger.info",
          "gitignore",
          "f.read",
          "str",
          "doc_files.items",
          "is_text_file",
          "logger.warning",
          "Path",
          "logger.error",
          "any",
          "file_path.is_file",
          "root_dir.rglob",
          "open",
          "load_gitignore",
          "json.dump"
        ]
      },
      "dependencies": [
        "Path",
        "gitignore_parser",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "f7089b48-ac7c-4d6b-9fa1-636380d1c819"
    },
    {
      "module_id": "simple_analyzer",
      "path": "simple_analyzer.py",
      "category": "core",
      "module_doc": "\u041f\u0440\u043e\u0441\u0442\u043e\u0439 \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 struct.json \u0441 \u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0432\u044b\u0432\u043e\u0434\u0430",
      "functions": [
        {
          "name": "log_and_print",
          "docstring": "\u0414\u0443\u0431\u043b\u0438\u0440\u0443\u0435\u043c \u0432\u044b\u0432\u043e\u0434 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c \u0438 \u0444\u0430\u0439\u043b",
          "line_range": null,
          "parameters": [
            "message"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "log_and_print": [
          "f.write",
          "print",
          "datetime.now",
          "open"
        ],
        "main": [
          "len",
          "module.get",
          "temp_modules.append",
          "path.lower",
          "module_id.lower",
          "json.load",
          "any",
          "open",
          "data.get",
          "enumerate",
          "log_and_print",
          "stats.get"
        ]
      },
      "dependencies": [
        "datetime",
        "json",
        "sys"
      ],
      "hash": null,
      "artifact_id": "d2071430-d87a-46b0-bd28-44c206f71864"
    },
    {
      "module_id": "test_strict_mode",
      "path": "test_strict_mode.py",
      "category": "test",
      "module_doc": "\u0422\u0435\u0441\u0442 [strict] \u0440\u0435\u0436\u0438\u043c\u0430 \u0434\u043b\u044f \u044d\u043a\u0441\u0442\u0440\u0435\u043d\u043d\u043e\u0439 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438",
      "functions": [
        {
          "name": "test_strict_mode",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_strict_mode": [
          "len",
          "config.get",
          "processor.parse_tags_from_prompt",
          "CLIConfig",
          "processor.cmd_mode",
          "print",
          "CommandProcessor",
          "processor.validate_strict_mode",
          "CLIUtils"
        ]
      },
      "dependencies": [
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "llmstruct.cli_commands",
        "llmstruct.cli_config",
        "llmstruct.cli_utils",
        "os",
        "sys"
      ],
      "hash": null,
      "artifact_id": "3733f780-ff37-4607-ad7b-7bbcc8af8cc1"
    },
    {
      "module_id": "final_system_check",
      "path": "final_system_check.py",
      "category": "core",
      "module_doc": "Final System Status Check - LLMStruct Modular CLI Integration\nComprehensive validation of all completed components",
      "functions": [
        {
          "name": "check_system_status",
          "docstring": "Comprehensive system status check",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "check_system_status": [
          "len",
          "t.get",
          "i.get",
          "json.load",
          "print",
          "open",
          "data.get"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "os",
        "pathlib",
        "sys"
      ],
      "hash": null,
      "artifact_id": "7a2a081f-f600-4a5d-93db-20e48d80e2e5"
    },
    {
      "module_id": "board_cli",
      "path": "board_cli.py",
      "category": "core",
      "module_doc": "CLI Kanban Board for llmstruct tasks and ideas\n- Reads data/tasks.json and data/ideas.json\n- Shows board in terminal: columns by status, rows by priority\n- Supports filtering, sorting, and shows links between tasks/ideas",
      "functions": [
        {
          "name": "load_json",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "path"
          ],
          "decorators": []
        },
        {
          "name": "group_by_status_and_priority",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "items",
            "kind"
          ],
          "decorators": []
        },
        {
          "name": "render_board",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "board",
            "kind"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json": [
          "json.load",
          "open"
        ],
        "group_by_status_and_priority": [
          "item.get",
          "defaultdict"
        ],
        "render_board": [
          "links.append",
          "Table",
          "Panel",
          "kind.capitalize",
          "item.get",
          "table.add_column",
          "table.add_row",
          "links.extend",
          "console.print"
        ],
        "main": [
          "ideas_data.get",
          "group_by_status_and_priority",
          "console.rule",
          "render_board",
          "tasks_data.get",
          "load_json"
        ]
      },
      "dependencies": [
        "Console",
        "Panel",
        "Path",
        "Table",
        "box",
        "collections",
        "defaultdict",
        "json",
        "os",
        "pathlib",
        "rich",
        "rich.console",
        "rich.panel",
        "rich.table"
      ],
      "hash": null,
      "artifact_id": "ec82721b-5e7c-4832-ae82-f27f76a96f08"
    },
    {
      "module_id": "test_ai_cli_debug",
      "path": "test_ai_cli_debug.py",
      "category": "test",
      "module_doc": "Simple test for AI CLI Integration - Debug Version",
      "functions": [
        {
          "name": "test_basic_functionality",
          "docstring": "Test basic functionality step by step.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_ai_self_awareness",
          "docstring": "Test the main AI self-awareness system.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_basic_functionality": [
          "len",
          "AISelfAwarenessCLIIntegration",
          "str",
          "traceback.print_exc",
          "print",
          "integration.integrate_ai_status_command",
          "status_result.get",
          "integration.get_integration_summary"
        ],
        "test_ai_self_awareness": [
          "len",
          "str",
          "discovery.get_enhanced_capabilities_summary",
          "traceback.print_exc",
          "print",
          "SystemCapabilityDiscovery",
          "discovery.discover_all_capabilities"
        ]
      },
      "dependencies": [
        "AISelfAwarenessCLIIntegration",
        "Path",
        "SystemCapabilityDiscovery",
        "os",
        "pathlib",
        "src.llmstruct.ai_cli_integration",
        "src.llmstruct.ai_self_awareness",
        "sys",
        "traceback"
      ],
      "hash": null,
      "artifact_id": "9c112824-864a-4584-a522-bc75436f4299"
    },
    {
      "module_id": "final_system_validation",
      "path": "final_system_validation.py",
      "category": "core",
      "module_doc": "Final system validation script for LLMStruct Modular CLI Integration",
      "functions": [
        {
          "name": "main",
          "docstring": "Run comprehensive system validation",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "main": [
          "len",
          "task.get",
          "next",
          "__import__",
          "json.load",
          "print",
          "open",
          "subprocess.run",
          "getattr",
          "status.upper",
          "create_cli_core"
        ]
      },
      "dependencies": [
        "Path",
        "create_cli_core",
        "json",
        "llmstruct.cli_core",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "time"
      ],
      "hash": null,
      "artifact_id": "77b499f2-1bb2-4aba-9960-1722143e6ca1"
    },
    {
      "module_id": "test_enhanced_ai_awareness",
      "path": "test_enhanced_ai_awareness.py",
      "category": "test",
      "module_doc": "Test script for AI Self-Awareness Enhancement with Unused Function Integration",
      "functions": [
        {
          "name": "test_enhanced_ai_self_awareness",
          "docstring": "Test the enhanced AI self-awareness system.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_enhanced_ai_self_awareness": [
          "integration_metrics.get",
          "discovery.get_comprehensive_ai_status",
          "traceback.print_exc",
          "print",
          "SystemCapabilityDiscovery",
          "discovery.discover_all_capabilities"
        ]
      },
      "dependencies": [
        "SystemCapabilityDiscovery",
        "os",
        "src.llmstruct.ai_self_awareness",
        "sys",
        "traceback"
      ],
      "hash": null,
      "artifact_id": "f91c9001-53f7-4ca2-8499-5f8275a290d3"
    },
    {
      "module_id": "validate_schemas",
      "path": "validate_schemas.py",
      "category": "core",
      "module_doc": "JSON Schema Validation Script for llmstruct\nValidates all enhanced JSON files against their appropriate schemas.\nPart of TSK-130 implementation.",
      "functions": [
        {
          "name": "load_json",
          "docstring": "Load JSON file with error handling.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_json_against_schema",
          "docstring": "Validate JSON data against schema.",
          "line_range": null,
          "parameters": [
            "json_data",
            "schema_data",
            "file_name"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {
        "load_json": [
          "json.load",
          "print",
          "open"
        ],
        "validate_json_against_schema": [
          "str",
          "print",
          "validate"
        ],
        "main": [
          "errors.append",
          "print",
          "validate_json_against_schema",
          "load_json"
        ]
      },
      "dependencies": [
        "Draft7Validator",
        "ValidationError",
        "json",
        "jsonschema",
        "sys",
        "validate"
      ],
      "hash": null,
      "artifact_id": "c9ab83a2-b11f-46e6-9b5e-bec62008b8c1"
    },
    {
      "module_id": "test_context_orchestration",
      "path": "test_context_orchestration.py",
      "category": "test",
      "module_doc": "LLM Context Orchestration Testing Suite\n\nComprehensive testing framework for validating context modes, token budgets,\nand LLM integration capabilities across different scenarios.",
      "functions": [
        {
          "name": "main",
          "docstring": "Main function for CLI testing.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "config_path"
          ],
          "decorators": []
        },
        {
          "name": "setup_logging",
          "docstring": "Set up logging for test execution.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_test_config",
          "docstring": "Load context orchestration configuration.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_context_mode",
          "docstring": "Test a specific context mode with given scenario.",
          "line_range": null,
          "parameters": [
            "self",
            "mode",
            "scenario"
          ],
          "decorators": []
        },
        {
          "name": "load_context_for_mode",
          "docstring": "Load context data based on mode and token budget.",
          "line_range": null,
          "parameters": [
            "self",
            "mode",
            "token_budget"
          ],
          "decorators": []
        },
        {
          "name": "load_json_file",
          "docstring": "Load JSON file with error handling.",
          "line_range": null,
          "parameters": [
            "self",
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "load_file_content",
          "docstring": "Load text file content.",
          "line_range": null,
          "parameters": [
            "self",
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "load_docs_summary",
          "docstring": "Load documentation summary.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_src_summary",
          "docstring": "Load source code summary.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_current_context",
          "docstring": "Load current working context.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_project_summary",
          "docstring": "Load minimal project summary.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_current_task",
          "docstring": "Load current task information.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_session_context",
          "docstring": "Load AI session context.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "estimate_tokens",
          "docstring": "Estimate token count for context data.",
          "line_range": null,
          "parameters": [
            "self",
            "context_data"
          ],
          "decorators": []
        },
        {
          "name": "trim_context_to_budget",
          "docstring": "Trim context data to fit within token budget.",
          "line_range": null,
          "parameters": [
            "self",
            "context_data",
            "budget"
          ],
          "decorators": []
        },
        {
          "name": "truncate_content",
          "docstring": "Truncate content to fit token budget.",
          "line_range": null,
          "parameters": [
            "self",
            "content",
            "token_budget"
          ],
          "decorators": []
        },
        {
          "name": "assess_response_quality",
          "docstring": "Assess the quality of context for LLM response.",
          "line_range": null,
          "parameters": [
            "self",
            "context_data",
            "scenario"
          ],
          "decorators": []
        },
        {
          "name": "run_comprehensive_test_suite",
          "docstring": "Run the complete test suite for all context modes and scenarios.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "generate_test_report",
          "docstring": "Generate comprehensive test report.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "generate_recommendations",
          "docstring": "Generate recommendations based on test results.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ContextTestResult",
          "docstring": "Test result for context orchestration testing.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "LLMContextTester",
          "docstring": "Main testing class for LLM context capabilities.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "config_path"
              ]
            },
            {
              "name": "setup_logging",
              "docstring": "Set up logging for test execution.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_test_config",
              "docstring": "Load context orchestration configuration.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_context_mode",
              "docstring": "Test a specific context mode with given scenario.",
              "line_range": null,
              "parameters": [
                "self",
                "mode",
                "scenario"
              ]
            },
            {
              "name": "load_context_for_mode",
              "docstring": "Load context data based on mode and token budget.",
              "line_range": null,
              "parameters": [
                "self",
                "mode",
                "token_budget"
              ]
            },
            {
              "name": "load_json_file",
              "docstring": "Load JSON file with error handling.",
              "line_range": null,
              "parameters": [
                "self",
                "filepath"
              ]
            },
            {
              "name": "load_file_content",
              "docstring": "Load text file content.",
              "line_range": null,
              "parameters": [
                "self",
                "filepath"
              ]
            },
            {
              "name": "load_docs_summary",
              "docstring": "Load documentation summary.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_src_summary",
              "docstring": "Load source code summary.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_current_context",
              "docstring": "Load current working context.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_project_summary",
              "docstring": "Load minimal project summary.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_current_task",
              "docstring": "Load current task information.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_session_context",
              "docstring": "Load AI session context.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "estimate_tokens",
              "docstring": "Estimate token count for context data.",
              "line_range": null,
              "parameters": [
                "self",
                "context_data"
              ]
            },
            {
              "name": "trim_context_to_budget",
              "docstring": "Trim context data to fit within token budget.",
              "line_range": null,
              "parameters": [
                "self",
                "context_data",
                "budget"
              ]
            },
            {
              "name": "truncate_content",
              "docstring": "Truncate content to fit token budget.",
              "line_range": null,
              "parameters": [
                "self",
                "content",
                "token_budget"
              ]
            },
            {
              "name": "assess_response_quality",
              "docstring": "Assess the quality of context for LLM response.",
              "line_range": null,
              "parameters": [
                "self",
                "context_data",
                "scenario"
              ]
            },
            {
              "name": "run_comprehensive_test_suite",
              "docstring": "Run the complete test suite for all context modes and scenarios.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "generate_test_report",
              "docstring": "Generate comprehensive test report.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "generate_recommendations",
              "docstring": "Generate recommendations based on test results.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self.setup_logging"
        ],
        "setup_logging": [
          "logging.StreamHandler",
          "logging.basicConfig",
          "logging.FileHandler",
          "logging.getLogger"
        ],
        "load_test_config": [
          "json.load",
          "open"
        ],
        "test_context_mode": [
          "ContextTestResult",
          "time.time",
          "config.get",
          "mode_config.get",
          "self.estimate_tokens",
          "self.assess_response_quality",
          "str",
          "isinstance",
          "context_data.keys",
          "self.load_context_for_mode",
          "list",
          "self.load_test_config"
        ],
        "load_context_for_mode": [
          "self.load_current_context",
          "self.load_file_content",
          "self.load_json_file",
          "self.load_current_task",
          "self.load_docs_summary",
          "self.load_session_context",
          "self.load_src_summary",
          "self.trim_context_to_budget",
          "self.load_project_summary"
        ],
        "load_json_file": [
          "Path",
          "json.load",
          "path.exists",
          "open"
        ],
        "load_file_content": [
          "Path",
          "path.exists",
          "f.read",
          "open"
        ],
        "load_docs_summary": [],
        "load_src_summary": [],
        "load_current_context": [],
        "load_project_summary": [],
        "load_current_task": [],
        "load_session_context": [
          "self.load_json_file"
        ],
        "estimate_tokens": [
          "isinstance",
          "len",
          "json.dumps",
          "str"
        ],
        "trim_context_to_budget": [
          "self.truncate_content",
          "self.estimate_tokens"
        ],
        "truncate_content": [
          "isinstance",
          "len"
        ],
        "assess_response_quality": [
          "len",
          "min"
        ],
        "run_comprehensive_test_suite": [
          "self.generate_test_report",
          "self.test_context_mode"
        ],
        "generate_test_report": [
          "len",
          "self.generate_recommendations",
          "sum",
          "Path",
          "mode_results.items",
          "asdict",
          "open",
          "json.dump"
        ],
        "generate_recommendations": [
          "recommendations.append",
          "len",
          "mode_success.items",
          "sum"
        ],
        "main": [
          "parser.parse_args",
          "parser.add_argument",
          "LLMContextTester",
          "tester.run_comprehensive_test_suite",
          "print",
          "tester.test_context_mode",
          "argparse.ArgumentParser"
        ]
      },
      "dependencies": [
        "Any",
        "CLICommands",
        "Dict",
        "List",
        "Optional",
        "Path",
        "SmartContextOrchestrator",
        "argparse",
        "asdict",
        "asyncio",
        "dataclass",
        "dataclasses",
        "json",
        "logging",
        "pathlib",
        "pytest",
        "src.llmstruct.cli_commands",
        "src.llmstruct.context_orchestrator",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "73ff3790-cac9-405f-b6d2-109f10d6fda4"
    },
    {
      "module_id": "test_export",
      "path": "test_export.py",
      "category": "test",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "Path",
        "json",
        "pathlib",
        "sys"
      ],
      "hash": null,
      "artifact_id": "a09b0de4-a00e-4c55-8da3-1bc08b4bf71c"
    },
    {
      "module_id": "smart_usage_analyzer",
      "path": "smart_usage_analyzer.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "40fc65be-5e25-46a1-a90c-ad9098d134d3"
    },
    {
      "module_id": "quick_unused_check",
      "path": "quick_unused_check.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "ad82820e-f97c-40ef-975f-0e6184df4c9d"
    },
    {
      "module_id": "test_modular_cli",
      "path": "test_modular_cli.py",
      "category": "test",
      "module_doc": "Test script for modular CLI structure",
      "functions": [
        {
          "name": "test_modular_cli",
          "docstring": "Test basic modular CLI functionality.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_copilot_integration",
          "docstring": "Test Copilot integration.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_modular_cli": [
          "len",
          "config.get_cache_config",
          "tempfile.TemporaryDirectory",
          "create_cli_core",
          "utils.write_file_content",
          "CLIConfig",
          "traceback.print_exc",
          "print",
          "utils.read_file_content",
          "CommandProcessor",
          "CLIUtils"
        ],
        "test_copilot_integration": [
          "len",
          "tempfile.TemporaryDirectory",
          "manager.close",
          "manager.get_context_status",
          "initialize_copilot",
          "traceback.print_exc",
          "print",
          "CopilotEvent"
        ]
      },
      "dependencies": [
        "CLIConfig",
        "CLICore",
        "CLIUtils",
        "CommandProcessor",
        "CopilotContextManager",
        "CopilotEvent",
        "Path",
        "create_cli_core",
        "initialize_copilot",
        "llmstruct.cli_commands",
        "llmstruct.cli_config",
        "llmstruct.cli_core",
        "llmstruct.cli_utils",
        "llmstruct.copilot",
        "os",
        "pathlib",
        "sys",
        "tempfile",
        "traceback"
      ],
      "hash": null,
      "artifact_id": "3e57c252-0f24-49e7-8ff5-babef13b6c94"
    },
    {
      "module_id": "validate_sessions",
      "path": "validate_sessions.py",
      "category": "core",
      "module_doc": "Session Schema Validation Script for llmstruct\nValidates session management JSON files against their schemas.\nFocused validation for session system only.",
      "functions": [
        {
          "name": "load_json",
          "docstring": "Load JSON file with error handling.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_json_against_schema",
          "docstring": "Validate JSON data against schema.",
          "line_range": null,
          "parameters": [
            "json_data",
            "schema_data",
            "file_name"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {
        "load_json": [
          "json.load",
          "print",
          "open"
        ],
        "validate_json_against_schema": [
          "len",
          "Draft7Validator",
          "str",
          "print",
          "list",
          "validator.iter_errors"
        ],
        "main": [
          "errors.append",
          "print",
          "validate_json_against_schema",
          "load_json"
        ]
      },
      "dependencies": [
        "Draft7Validator",
        "ValidationError",
        "json",
        "jsonschema",
        "sys",
        "validate"
      ],
      "hash": null,
      "artifact_id": "9689d38d-c9fa-41c0-a46c-fddc0725a554"
    },
    {
      "module_id": "analyze_unused_components_v2",
      "path": "analyze_unused_components_v2.py",
      "category": "core",
      "module_doc": "\u0410\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u043d\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 \u043d\u0430 \u0431\u0430\u0437\u0435 struct.json\n\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0447\u0435\u0442 \u0441 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0434\u043b\u044f \u043d\u0430\u0434\u0435\u0436\u043d\u043e\u0441\u0442\u0438",
      "functions": [
        {
          "name": "load_struct_data",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 struct.json",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "find_temp_and_backup_modules",
          "docstring": "\u041f\u043e\u0438\u0441\u043a \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0438 backup \u043c\u043e\u0434\u0443\u043b\u0435\u0439",
          "line_range": null,
          "parameters": [
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "find_duplicate_modules",
          "docstring": "\u041f\u043e\u0438\u0441\u043a \u0434\u0443\u0431\u043b\u0438\u0440\u0443\u044e\u0449\u0438\u0445\u0441\u044f \u043c\u043e\u0434\u0443\u043b\u0435\u0439",
          "line_range": null,
          "parameters": [
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "find_unused_functions",
          "docstring": "\u041f\u043e\u0438\u0441\u043a \u043f\u043e\u0442\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u043e \u043d\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439",
          "line_range": null,
          "parameters": [
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "analyze_test_coverage",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u043e\u043a\u0440\u044b\u0442\u0438\u044f \u0442\u0435\u0441\u0442\u0430\u043c\u0438",
          "line_range": null,
          "parameters": [
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "generate_report",
          "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043e\u0442\u0447\u0435\u0442\u0430",
          "line_range": null,
          "parameters": [
            "struct_data",
            "temp_modules",
            "duplicates",
            "unused_functions",
            "test_coverage"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_struct_data": [
          "len",
          "logger.info",
          "struct_path.exists",
          "Path",
          "json.load",
          "logger.error",
          "open",
          "data.get"
        ],
        "find_temp_and_backup_modules": [
          "len",
          "module.get",
          "temp_modules.append",
          "logger.info",
          "path.lower",
          "module_id.lower",
          "struct_data.get",
          "any"
        ],
        "find_duplicate_modules": [
          "len",
          "module.get",
          "logger.info",
          "module_id.split",
          "name_groups.items",
          "struct_data.get",
          "defaultdict"
        ],
        "find_unused_functions": [
          "all_functions.append",
          "module.get",
          "logger.info",
          "len",
          "unused_functions.append",
          "func.get",
          "isinstance",
          "struct_data.get",
          "func_name.startswith",
          "call_references.update",
          "callgraph.items",
          "set"
        ],
        "analyze_test_coverage": [
          "len",
          "logger.info",
          "sum",
          "struct_data.get",
          "m.get"
        ],
        "generate_report": [
          "len",
          "module.get",
          "logger.info",
          "datetime.now",
          "f.write",
          "struct_data.get",
          "duplicates.items",
          "open",
          "stats.get"
        ],
        "main": [
          "len",
          "generate_report",
          "logger.info",
          "find_unused_functions",
          "find_duplicate_modules",
          "load_struct_data",
          "print",
          "analyze_test_coverage",
          "find_temp_and_backup_modules"
        ]
      },
      "dependencies": [
        "Path",
        "collections",
        "datetime",
        "defaultdict",
        "json",
        "logging",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "7d07fb74-f009-48e0-9d96-468eca5de5a3"
    },
    {
      "module_id": "test_ai_cli_simple",
      "path": "test_ai_cli_simple.py",
      "category": "test",
      "module_doc": "Simple AI CLI Integration Test\n\nQuick validation of AI agent CLI population capabilities.",
      "functions": [
        {
          "name": "test_ai_cli_integration",
          "docstring": "Simple test for AI CLI integration.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_ai_cli_integration": [
          "len",
          "time.sleep",
          "results.append",
          "time.time",
          "min",
          "sum",
          "Path",
          "print",
          "scenario.replace",
          "open",
          "enumerate",
          "json.dump"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "pathlib",
        "time"
      ],
      "hash": null,
      "artifact_id": "d9c177f7-cece-4621-9d3c-8b3a5142d6b8"
    },
    {
      "module_id": "verify_llm_response",
      "path": "verify_llm_response.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_json_file",
          "docstring": "Load a JSON file and return its contents.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "verify_response_with_struct",
          "docstring": "Verify llm_response.json against struct.json.",
          "line_range": null,
          "parameters": [
            "response_text",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "verify_response_without_struct",
          "docstring": "Verify llm_response.json based on LLMstruct principles.",
          "line_range": null,
          "parameters": [
            "response_text"
          ],
          "decorators": []
        },
        {
          "name": "generate_metrics",
          "docstring": "Generate metrics for the response per EXT-004.",
          "line_range": null,
          "parameters": [
            "response_data",
            "server_log"
          ],
          "decorators": []
        },
        {
          "name": "update_tasks_json",
          "docstring": "Append a new task to tasks.json.",
          "line_range": null,
          "parameters": [
            "tasks_file",
            "new_task"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json_file": [
          "json.load",
          "logging.error",
          "open"
        ],
        "verify_response_with_struct": [
          "e.startswith",
          "expected_goals.issubset",
          "expected_extensions.issubset",
          "expected_files.issubset",
          "struct_data.get",
          "logging.error",
          "logging.info",
          "set",
          "re.findall"
        ],
        "verify_response_without_struct": [
          "expected_goals.issubset",
          "expected_extensions.issubset",
          "expected_files.issubset",
          "response_text.lower",
          "logging.error",
          "principle.lower",
          "logging.info",
          "set",
          "re.findall"
        ],
        "generate_metrics": [
          "len",
          "server_log.get",
          "datetime.utcnow",
          "response_text.split",
          "re.findall"
        ],
        "update_tasks_json": [
          "load_json_file",
          "tasks.get",
          "open",
          "logging.info",
          "json.dump"
        ],
        "main": [
          "verify_response_without_struct",
          "parser.parse_args",
          "parser.add_argument",
          "load_json_file",
          "verify_response_with_struct",
          "logging.info",
          "open",
          "generate_metrics",
          "argparse.ArgumentParser",
          "update_tasks_json",
          "json.dump"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "argparse",
        "datetime",
        "json",
        "logging",
        "os",
        "re",
        "typing"
      ],
      "hash": null,
      "artifact_id": "cfca1c6d-dc97-4a3d-9ad3-0f69dd37cc56"
    },
    {
      "module_id": "quick_analysis",
      "path": "quick_analysis.py",
      "category": "core",
      "module_doc": "Quick analysis of struct.json for unused components",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "main": [
          "len",
          "module.get",
          "func.get",
          "all_functions.items",
          "f.write",
          "all_calls.update",
          "json.load",
          "isinstance",
          "func_name.startswith",
          "print",
          "open",
          "data.get",
          "unused_functions.append",
          "callgraph.items",
          "set",
          "sorted"
        ]
      },
      "dependencies": [
        "json",
        "sys"
      ],
      "hash": null,
      "artifact_id": "b8d45551-307f-49be-9e7b-7083d9303d99"
    },
    {
      "module_id": "analyze_unused_components",
      "path": "analyze_unused_components.py",
      "category": "core",
      "module_doc": "\u042d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u043d\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 struct.json \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u0438 \u0432\u044b\u044f\u0432\u043b\u0435\u043d\u0438\u044f unused \u0444\u0443\u043d\u043a\u0446\u0438\u0439/\u043c\u043e\u0434\u0443\u043b\u0435\u0439",
      "functions": [
        {
          "name": "load_struct_data",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c struct.json",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "analyze_module_usage",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u043e\u0434\u0443\u043b\u0435\u0439 \u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0439",
          "line_range": null,
          "parameters": [
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "find_unused_functions",
          "docstring": "\u041d\u0430\u0439\u0442\u0438 \u043d\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438",
          "line_range": null,
          "parameters": [
            "all_calls",
            "all_functions"
          ],
          "decorators": []
        },
        {
          "name": "analyze_test_modules",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u043c\u043e\u0434\u0443\u043b\u0435\u0439",
          "line_range": null,
          "parameters": [
            "modules"
          ],
          "decorators": []
        },
        {
          "name": "analyze_duplicate_candidates",
          "docstring": "\u041f\u043e\u0438\u0441\u043a \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432 \u043f\u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u0439",
          "line_range": null,
          "parameters": [
            "modules"
          ],
          "decorators": []
        },
        {
          "name": "analyze_categories",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u043c",
          "line_range": null,
          "parameters": [
            "modules"
          ],
          "decorators": []
        },
        {
          "name": "generate_report",
          "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u043d\u043e\u0433\u043e \u043e\u0442\u0447\u0435\u0442\u0430",
          "line_range": null,
          "parameters": [
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_struct_data": [
          "struct_path.exists",
          "Path",
          "json.load",
          "print",
          "open"
        ],
        "analyze_module_usage": [
          "module.get",
          "func.get",
          "all_functions.add",
          "struct_data.get",
          "isinstance",
          "all_modules.add",
          "callgraph.items",
          "set",
          "defaultdict"
        ],
        "find_unused_functions": [
          "all_calls.items",
          "called_functions.update",
          "func_name.startswith",
          "func.split",
          "unused.append",
          "set"
        ],
        "analyze_test_modules": [
          "func.get",
          "test_modules.append",
          "module.get",
          "test_functions.append"
        ],
        "analyze_duplicate_candidates": [
          "len",
          "module.get",
          "func.get",
          "function_names.items",
          "defaultdict"
        ],
        "analyze_categories": [
          "Counter",
          "module.get",
          "defaultdict"
        ],
        "generate_report": [
          "len",
          "dict",
          "find_unused_functions",
          "analyze_duplicate_candidates",
          "sum",
          "print",
          "categories.most_common",
          "list",
          "duplicates.items",
          "analyze_categories",
          "analyze_test_modules",
          "analyze_module_usage",
          "m.get",
          "all_calls.values"
        ],
        "main": [
          "generate_report",
          "load_struct_data",
          "print",
          "open",
          "datetime.now",
          "json.dump"
        ]
      },
      "dependencies": [
        "Any",
        "Counter",
        "Dict",
        "List",
        "Path",
        "Set",
        "collections",
        "datetime",
        "defaultdict",
        "json",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "46813ffa-68d2-4bd9-9ccb-8035b1853860"
    },
    {
      "module_id": "test_cli_demo",
      "path": "test_cli_demo.py",
      "category": "test",
      "module_doc": "Quick CLI test to demonstrate new commands",
      "functions": [
        {
          "name": "test_interactive_cli",
          "docstring": "Test interactive CLI with new commands",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_interactive_cli": [
          "subprocess.run",
          "print"
        ]
      },
      "dependencies": [
        "subprocess",
        "sys",
        "time"
      ],
      "hash": null,
      "artifact_id": "a46e2bb2-5429-48cb-a407-7fe07d835677"
    },
    {
      "module_id": "examples.python_project_utils",
      "path": "examples/python_project_utils.py",
      "category": "core",
      "module_doc": "Utility functions for the sample project.",
      "functions": [
        {
          "name": "helper",
          "docstring": "Help the main function.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "log",
          "docstring": "Log a message.",
          "line_range": null,
          "parameters": [
            "message"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "helper": [
          "log"
        ],
        "log": [
          "logging.info"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": null,
      "artifact_id": "6a854b4f-0a4e-432a-bca2-acce1027a57c"
    },
    {
      "module_id": "examples.python_project_main",
      "path": "examples/python_project_main.py",
      "category": "core",
      "module_doc": "Main module for the sample project.",
      "functions": [
        {
          "name": "main",
          "docstring": "Run the program.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "Execute the app.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "App",
          "docstring": "Application class.",
          "line_range": null,
          "methods": [
            {
              "name": "run",
              "docstring": "Execute the app.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "main": [
          "print",
          "utils.helper"
        ],
        "run": [
          "utils.log"
        ]
      },
      "dependencies": [
        "utils"
      ],
      "hash": null,
      "artifact_id": "9afb9268-5b1d-442c-8fae-f0f4725bcebb"
    },
    {
      "module_id": "docs.test_self_run",
      "path": "docs/test_self_run.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "test_filter_json_init_json",
          "docstring": "Test filter_json with init.json structure.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_select_json_partial",
          "docstring": "Test partial JSON loading.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_cache_json",
          "docstring": "Test JSON caching.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_attach_to_llm_request_init_json",
          "docstring": "Test attach_to_llm_request with init.json and cache.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_attach_to_llm_request_missing_file",
          "docstring": "Test attach_to_llm_request with missing file.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_filter_json_init_json": [
          "filter_json"
        ],
        "test_select_json_partial": [
          "str",
          "select_json",
          "open",
          "json.dump"
        ],
        "test_cache_json": [
          "cache.get_metadata",
          "JSONCache",
          "str",
          "cache.cache_json",
          "cache.close",
          "open",
          "cache.get_full_json",
          "json.dump"
        ],
        "test_attach_to_llm_request_init_json": [
          "attach_to_llm_request",
          "JSONCache",
          "str",
          "cache.close",
          "open",
          "json.dump"
        ],
        "test_attach_to_llm_request_missing_file": [
          "attach_to_llm_request",
          "str"
        ]
      },
      "dependencies": [
        "JSONCache",
        "Path",
        "attach_to_llm_request",
        "filter_json",
        "filter_struct",
        "json",
        "llmstruct.cache",
        "llmstruct.json_selector",
        "llmstruct.self_run",
        "pathlib",
        "pytest",
        "select_json"
      ],
      "hash": null,
      "artifact_id": "0d1f412a-b469-4a66-9683-15fbcc94f689"
    },
    {
      "module_id": "docs.cache",
      "path": "docs/cache.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize SQLite cache for JSON files.",
          "line_range": null,
          "parameters": [
            "self",
            "db_path"
          ],
          "decorators": []
        },
        {
          "name": "create_tables",
          "docstring": "Create tables for metadata and file paths.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cache_json",
          "docstring": "Cache JSON metadata and store full file path.",
          "line_range": null,
          "parameters": [
            "self",
            "json_path",
            "artifact_id",
            "summary",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "get_metadata",
          "docstring": "Retrieve metadata by artifact_id.",
          "line_range": null,
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "get_full_json",
          "docstring": "Load full JSON by artifact_id.",
          "line_range": null,
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Close database connection.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JSONCache",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize SQLite cache for JSON files.",
              "line_range": null,
              "parameters": [
                "self",
                "db_path"
              ]
            },
            {
              "name": "create_tables",
              "docstring": "Create tables for metadata and file paths.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cache_json",
              "docstring": "Cache JSON metadata and store full file path.",
              "line_range": null,
              "parameters": [
                "self",
                "json_path",
                "artifact_id",
                "summary",
                "tags"
              ]
            },
            {
              "name": "get_metadata",
              "docstring": "Retrieve metadata by artifact_id.",
              "line_range": null,
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "get_full_json",
              "docstring": "Load full JSON by artifact_id.",
              "line_range": null,
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "close",
              "docstring": "Close database connection.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.create_tables",
          "sqlite3.connect"
        ],
        "create_tables": [],
        "cache_json": [
          "json.dumps",
          "f.read",
          "json_file.exists",
          "str",
          "content.encode",
          "Path",
          "logging.error",
          "open",
          "logging.info",
          "hashlib.sha256"
        ],
        "get_metadata": [
          "cursor.fetchone",
          "json.loads"
        ],
        "get_full_json": [
          "json.load",
          "cursor.fetchone",
          "logging.error",
          "open"
        ],
        "close": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "hashlib",
        "json",
        "logging",
        "pathlib",
        "sqlite3",
        "typing"
      ],
      "hash": null,
      "artifact_id": "6d0de273-f744-400c-8cf9-e6b79c0e5d13"
    },
    {
      "module_id": "docs.self_run",
      "path": "docs/self_run.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_struct",
          "docstring": "Filter struct.json or init.json based on prompt keywords.",
          "line_range": null,
          "parameters": [
            "struct",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "Attach filtered JSON to LLM prompt, using cache if available.",
          "line_range": null,
          "parameters": [
            "context_path",
            "prompt",
            "cache"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_struct": [
          "module.get",
          "filter_json",
          "struct.get",
          "any",
          "prompt.lower"
        ],
        "attach_to_llm_request": [
          "json.dumps",
          "cache.get_metadata",
          "filter_json",
          "cache.cache_json",
          "context_file.exists",
          "Path",
          "select_json",
          "logging.error",
          "prompt.lower",
          "logging.info",
          "cache.get_full_json",
          "filter_struct"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "JSONCache",
        "List",
        "Path",
        "cache",
        "filter_json",
        "json",
        "json_selector",
        "logging",
        "pathlib",
        "select_json",
        "typing"
      ],
      "hash": null,
      "artifact_id": "5196aa34-69f0-46fc-a2cd-7f2bd837f54a"
    },
    {
      "module_id": "docs.json_selector",
      "path": "docs/json_selector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_json",
          "docstring": "Filter JSON data by key-value pair and select fields.",
          "line_range": null,
          "parameters": [
            "data",
            "filter_key",
            "filter_value",
            "fields"
          ],
          "decorators": []
        },
        {
          "name": "select_json",
          "docstring": "Load and filter JSON file, optionally parsing partially.",
          "line_range": null,
          "parameters": [
            "json_path",
            "filter_key",
            "filter_value",
            "fields",
            "partial"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_json": [
          "isinstance",
          "item.get",
          "data.get",
          "filtered.append"
        ],
        "select_json": [
          "filter_json",
          "json_file.exists",
          "ijson.parse",
          "f.seek",
          "filtered.append",
          "Path",
          "json.load",
          "logging.error",
          "open",
          "path.append",
          "prefix.startswith",
          "current_item.get"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "ijson",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "2a92280e-1d04-47d4-a8ef-051bc9c6804b"
    },
    {
      "module_id": "docs.cli",
      "path": "docs/cli.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from llmstruct.toml or return empty dict.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default /tmp) and return the path.",
          "line_range": null,
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": null,
          "parameters": [
            "response"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "gitignore_path.exists",
          "Path",
          "line.strip",
          "line.startswith",
          "logging.error",
          "gitignore_path.open"
        ],
        "load_config": [
          "config_path.exists",
          "toml.load",
          "Path",
          "config_path\u30aa\u30fc\u30d7\u30f3",
          "logging.error"
        ],
        "read_file_content": [
          "f.read",
          "path.open",
          "Path",
          "path.is_file",
          "logging.error"
        ],
        "write_to_file": [
          "str",
          "f.write",
          "file_path.open",
          "base_path.mkdir",
          "logging.warning",
          "Path",
          "logging.error",
          "file_path.exists",
          "logging.info"
        ],
        "parse_files_from_response": [
          "content.strip",
          "filename.strip",
          "files.append",
          "re.findall"
        ],
        "interactive": [
          "json.dumps",
          "scan_match.group",
          "logging.warning",
          "print",
          "user_input.lower",
          "os.listdir",
          "JSONCache",
          "read_file_content",
          "re.search",
          "load_gitignore",
          "LLMClient",
          "cache.close",
          "Path",
          "write_dir.startswith",
          "parse_files_from_response",
          "sorted",
          "write_match.group",
          "attach_to_llm_request",
          "client.query",
          "write_to_file",
          "get_folder_structure",
          "input",
          "files_to_write.append",
          "logging.error",
          "parse"
        ],
        "parse": [
          "JSONCache",
          "config.get",
          "cache.cache_json",
          "cache.close",
          "generate_json",
          "logging.warning",
          "Path",
          "load_config",
          "logging.error",
          "logging.info",
          "load_gitignore",
          "json.dump"
        ],
        "query": [
          "client.query",
          "LLMClient",
          "JSONCache",
          "cache.close",
          "Path",
          "logging.error",
          "logging.info",
          "json.dump"
        ],
        "context": [
          "logging.warning"
        ],
        "dogfood": [
          "logging.warning"
        ],
        "review": [
          "logging.warning"
        ],
        "main": [
          "parser.parse_args",
          "interactive",
          "subparsers.add_parser",
          "parser.add_subparsers",
          "review",
          "asyncio.run",
          "query_parser.add_argument",
          "parse_parser.add_argument",
          "interactive_parser.add_argument",
          "context_parser.add_argument",
          "review_parser.add_argument",
          "argparse.ArgumentParser",
          "query",
          "parse",
          "context",
          "dogfood_parser.add_argument",
          "dogfood"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "generate_json",
        "get_folder_structure",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "logging",
        "os",
        "pathlib",
        "re",
        "toml",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "413d3f05-f237-454e-884f-27428eb76254"
    },
    {
      "module_id": "src.llmstruct.cli_config",
      "path": "src/llmstruct/cli_config.py",
      "category": "core",
      "module_doc": "CLI configuration management.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize configuration manager.",
          "line_range": null,
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load configuration from llmstruct.toml.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_cache_config",
          "docstring": "Get cache configuration section.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_copilot_config",
          "docstring": "Get Copilot configuration section.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_queue_config",
          "docstring": "Get queue configuration section.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_config",
          "docstring": "Get context configuration section.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_gitignore_patterns",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_dirs",
          "docstring": "Get directories to exclude from scanning.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_include_patterns",
          "docstring": "Get file patterns to include.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_patterns",
          "docstring": "Get file patterns to exclude.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_max_file_size",
          "docstring": "Get maximum file size for processing (in bytes).",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_auto_update_config",
          "docstring": "Get auto-update configuration.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "is_auto_update_enabled",
          "docstring": "Check if auto-update is enabled.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_struct_file_path",
          "docstring": "Get path to struct.json file.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_file_path",
          "docstring": "Get path to context file.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_config",
          "docstring": "Save current configuration to file.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "update_config",
          "docstring": "Update configuration value.",
          "line_range": null,
          "parameters": [
            "self",
            "section",
            "key",
            "value"
          ],
          "decorators": []
        },
        {
          "name": "reload_config",
          "docstring": "Reload configuration from file.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLIConfig",
          "docstring": "Manages CLI configuration from llmstruct.toml and other sources.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize configuration manager.",
              "line_range": null,
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load configuration from llmstruct.toml.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_cache_config",
              "docstring": "Get cache configuration section.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_copilot_config",
              "docstring": "Get Copilot configuration section.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_queue_config",
              "docstring": "Get queue configuration section.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_config",
              "docstring": "Get context configuration section.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_gitignore_patterns",
              "docstring": "Load and normalize patterns from .gitignore.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_exclude_dirs",
              "docstring": "Get directories to exclude from scanning.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_include_patterns",
              "docstring": "Get file patterns to include.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_exclude_patterns",
              "docstring": "Get file patterns to exclude.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_max_file_size",
              "docstring": "Get maximum file size for processing (in bytes).",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_auto_update_config",
              "docstring": "Get auto-update configuration.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "is_auto_update_enabled",
              "docstring": "Check if auto-update is enabled.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_struct_file_path",
              "docstring": "Get path to struct.json file.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_file_path",
              "docstring": "Get path to context file.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_config",
              "docstring": "Save current configuration to file.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "update_config",
              "docstring": "Update configuration value.",
              "line_range": null,
              "parameters": [
                "self",
                "section",
                "key",
                "value"
              ]
            },
            {
              "name": "reload_config",
              "docstring": "Reload configuration from file.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self._load_config"
        ],
        "_load_config": [
          "logging.error",
          "toml.load"
        ],
        "get_cache_config": [],
        "get_copilot_config": [],
        "get_queue_config": [],
        "get_context_config": [],
        "get_gitignore_patterns": [
          "gitignore_path.exists",
          "Path",
          "line.strip",
          "line.startswith",
          "logging.error",
          "gitignore_path.open"
        ],
        "get_exclude_dirs": [
          "cli_config.get",
          "set",
          "list",
          "parsing_config.get"
        ],
        "get_include_patterns": [
          "cli_config.get",
          "parsing_config.get"
        ],
        "get_exclude_patterns": [
          "cli_config.get",
          "parsing_config.get"
        ],
        "get_max_file_size": [],
        "get_auto_update_config": [],
        "is_auto_update_enabled": [
          "self.get_auto_update_config"
        ],
        "get_struct_file_path": [],
        "get_context_file_path": [],
        "save_config": [
          "logging.error",
          "toml.dump"
        ],
        "update_config": [
          "self.save_config"
        ],
        "reload_config": [
          "self._load_config"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "logging",
        "pathlib",
        "toml",
        "typing"
      ],
      "hash": null,
      "artifact_id": "d88828d2-1bee-407d-8fee-8ea82a3abf0b"
    },
    {
      "module_id": "src.llmstruct.grok",
      "path": "src/llmstruct/grok.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "test_grok",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_key",
            "prompt",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "api_key",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "generate",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GrokClient",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "api_key",
                "proxy"
              ]
            },
            {
              "name": "generate",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "requests.Session"
        ],
        "generate": [
          "prompt.split",
          "len",
          "response.raise_for_status",
          "response.json"
        ],
        "test_grok": [
          "time.perf_counter",
          "client.generate",
          "GrokClient"
        ]
      },
      "dependencies": [
        "requests",
        "time"
      ],
      "hash": null,
      "artifact_id": "27208886-6f83-4774-b109-b720931f3538"
    },
    {
      "module_id": "src.llmstruct.cli_commands",
      "path": "src/llmstruct/cli_commands.py",
      "category": "core",
      "module_doc": "CLI command processing and handlers.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize command processor.",
          "line_range": null,
          "parameters": [
            "self",
            "root_dir",
            "config",
            "utils"
          ],
          "decorators": []
        },
        {
          "name": "set_cache",
          "docstring": "Set cache instance.",
          "line_range": null,
          "parameters": [
            "self",
            "cache"
          ],
          "decorators": []
        },
        {
          "name": "set_copilot",
          "docstring": "Set Copilot manager instance.",
          "line_range": null,
          "parameters": [
            "self",
            "copilot_manager"
          ],
          "decorators": []
        },
        {
          "name": "process_command",
          "docstring": "Process a command starting with /.",
          "line_range": null,
          "parameters": [
            "self",
            "command_line"
          ],
          "decorators": []
        },
        {
          "name": "process_prompt",
          "docstring": "Process a regular user prompt (not a command).",
          "line_range": null,
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "cmd_help",
          "docstring": "Show help information.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_workspace",
          "docstring": "Handle workspace state and permissions management.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_mode",
          "docstring": "Handle context mode operations with workspace integration.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_view",
          "docstring": "View file or directory contents.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_write",
          "docstring": "Write content to a file.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_queue",
          "docstring": "Handle queue operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_cache",
          "docstring": "Handle cache operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_copilot",
          "docstring": "Handle Copilot operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_config",
          "docstring": "Handle configuration operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_status",
          "docstring": "Show system status.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_backup",
          "docstring": "Create backup of a file.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_parse",
          "docstring": "Parse project structure.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_audit",
          "docstring": "Handle audit operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_auto_update",
          "docstring": "Handle auto-update operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_struct_status",
          "docstring": "Handle struct status operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_context",
          "docstring": "Handle context operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_session",
          "docstring": "Handle session operations.",
          "line_range": null,
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CommandProcessor",
          "docstring": "Processes CLI commands and user prompts.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize command processor.",
              "line_range": null,
              "parameters": [
                "self",
                "root_dir",
                "config",
                "utils"
              ]
            },
            {
              "name": "set_cache",
              "docstring": "Set cache instance.",
              "line_range": null,
              "parameters": [
                "self",
                "cache"
              ]
            },
            {
              "name": "set_copilot",
              "docstring": "Set Copilot manager instance.",
              "line_range": null,
              "parameters": [
                "self",
                "copilot_manager"
              ]
            },
            {
              "name": "process_command",
              "docstring": "Process a command starting with /.",
              "line_range": null,
              "parameters": [
                "self",
                "command_line"
              ]
            },
            {
              "name": "process_prompt",
              "docstring": "Process a regular user prompt (not a command).",
              "line_range": null,
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "cmd_help",
              "docstring": "Show help information.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_workspace",
              "docstring": "Handle workspace state and permissions management.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_mode",
              "docstring": "Handle context mode operations with workspace integration.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_view",
              "docstring": "View file or directory contents.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_write",
              "docstring": "Write content to a file.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_queue",
              "docstring": "Handle queue operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_cache",
              "docstring": "Handle cache operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_copilot",
              "docstring": "Handle Copilot operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_config",
              "docstring": "Handle configuration operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_status",
              "docstring": "Show system status.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_backup",
              "docstring": "Create backup of a file.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_parse",
              "docstring": "Parse project structure.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_audit",
              "docstring": "Handle audit operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "handle_auto_update",
              "docstring": "Handle auto-update operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "handle_struct_status",
              "docstring": "Handle struct status operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_context",
              "docstring": "Handle context operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_session",
              "docstring": "Handle session operations.",
              "line_range": null,
              "parameters": [
                "self",
                "args"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "print",
          "WorkspaceStateManager"
        ],
        "set_cache": [],
        "set_copilot": [],
        "process_command": [
          "len",
          "logging.error",
          "print",
          "command_line.strip",
          "command_line.split"
        ],
        "process_prompt": [
          "len",
          "get_optimized_context",
          "prompt.strip",
          "context_data.get",
          "logging.warning",
          "print",
          "CopilotEvent",
          "context_info.get",
          "logging.error",
          "logging.info"
        ],
        "cmd_help": [
          "print"
        ],
        "cmd_workspace": [
          "int",
          "len",
          "entry.get",
          "args.strip",
          "override.get",
          "state.get",
          "print",
          "boundaries.get",
          "action_args.split",
          "permissions.get",
          "logging.error",
          "result.get"
        ],
        "cmd_mode": [
          "len",
          "get_optimized_context",
          "args.lower",
          "args.strip",
          "context_data.get",
          "metrics.get",
          "print",
          "permissions.get",
          "args.upper",
          "result.get",
          "re.findall"
        ],
        "cmd_view": [
          "args.strip",
          "os.listdir",
          "print",
          "sorted"
        ],
        "cmd_write": [
          "len",
          "content.startswith",
          "print",
          "content.endswith",
          "args.split"
        ],
        "cmd_queue": [
          "len",
          "os.remove",
          "args.strip",
          "json.load",
          "cmd.get",
          "print",
          "open",
          "enumerate",
          "queue_data.get"
        ],
        "cmd_cache": [
          "len",
          "args.strip",
          "print",
          "os.listdir",
          "stats.get"
        ],
        "cmd_copilot": [
          "json.dumps",
          "args.strip",
          "json.load",
          "print",
          "open"
        ],
        "cmd_config": [
          "args.strip",
          "print",
          "json.dumps"
        ],
        "cmd_status": [
          "print"
        ],
        "cmd_backup": [
          "args.strip",
          "print"
        ],
        "cmd_parse": [
          "print",
          "generate_json"
        ],
        "cmd_audit": [
          "args.strip",
          "print"
        ],
        "handle_auto_update": [
          "print",
          "generate_json"
        ],
        "handle_struct_status": [
          "os.stat",
          "len",
          "datetime.fromtimestamp",
          "json.load",
          "struct_data.get",
          "print",
          "open"
        ],
        "cmd_context": [
          "len",
          "get_optimized_context",
          "args.strip",
          "context_data.get",
          "metrics.get",
          "print"
        ],
        "cmd_session": [
          "len",
          "args.strip",
          "state.get",
          "print",
          "datetime.now"
        ]
      },
      "dependencies": [
        "Any",
        "CLIConfig",
        "CLIUtils",
        "CopilotContextManager",
        "CopilotEvent",
        "Dict",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "WorkspaceStateManager",
        "cli_config",
        "cli_utils",
        "copilot",
        "create_context_orchestrator",
        "datetime",
        "generate_json",
        "get_optimized_context",
        "get_optimized_context_for_scenario",
        "initialize_copilot",
        "json",
        "llmstruct.cache",
        "llmstruct.context_orchestrator",
        "llmstruct.copilot",
        "llmstruct.generators.json_generator",
        "logging",
        "os",
        "pathlib",
        "re",
        "subprocess",
        "sys",
        "trigger_copilot_event",
        "typing",
        "workspace"
      ],
      "hash": null,
      "artifact_id": "f0cf7a49-bed4-482a-a1d9-994b1b3e33b7"
    },
    {
      "module_id": "src.llmstruct.context_orchestrator",
      "path": "src/llmstruct/context_orchestrator.py",
      "category": "core",
      "module_doc": "Smart Context Orchestration for LLMStruct\nOptimizes context loading for different LLM usage scenarios",
      "functions": [
        {
          "name": "create_context_orchestrator",
          "docstring": "Factory function to create context orchestrator.",
          "line_range": null,
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_optimized_context",
          "docstring": "Get optimized context for scenario - convenience function.\n\nArgs:\n    project_root: Project root directory\n    scenario: Usage scenario (cli_direct, vscode_copilot, session_work)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
          "line_range": null,
          "parameters": [
            "project_root",
            "scenario",
            "file_path",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load context orchestration configuration.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_for_scenario",
          "docstring": "Get optimized context for specific usage scenario.\n\nArgs:\n    scenario: Usage scenario (cli_direct, vscode_copilot, etc.)\n    file_path: Optional file path for focused context\n    custom_budget: Optional custom token budget\n    \nReturns:\n    Optimized context dictionary",
          "line_range": null,
          "parameters": [
            "self",
            "scenario",
            "file_path",
            "custom_budget"
          ],
          "decorators": []
        },
        {
          "name": "_get_budget_for_scenario",
          "docstring": "Create budget configuration for scenario.",
          "line_range": null,
          "parameters": [
            "self",
            "scenario_config"
          ],
          "decorators": []
        },
        {
          "name": "_load_full_context",
          "docstring": "Load complete context without token restrictions.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_focused_context",
          "docstring": "Load focused context optimized for VS Code Copilot.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "budget"
          ],
          "decorators": []
        },
        {
          "name": "_load_session_context",
          "docstring": "Load session-specific context.",
          "line_range": null,
          "parameters": [
            "self",
            "budget"
          ],
          "decorators": []
        },
        {
          "name": "_load_minimal_context",
          "docstring": "Load minimal context for quick operations.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_source_with_filtering",
          "docstring": "Load source with optional filtering based on budget.",
          "line_range": null,
          "parameters": [
            "self",
            "source_name",
            "budget"
          ],
          "decorators": []
        },
        {
          "name": "_get_file_context",
          "docstring": "Get context specific to a file.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_extract_essential_parts",
          "docstring": "Extract essential parts of data to fit token budget.",
          "line_range": null,
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_filter_for_current_session",
          "docstring": "Filter data to items relevant to current session.",
          "line_range": null,
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_extract_summary",
          "docstring": "Extract summary information from data.",
          "line_range": null,
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_apply_section_filtering",
          "docstring": "Apply section filtering to exclude specified sections.",
          "line_range": null,
          "parameters": [
            "self",
            "data",
            "exclude_sections"
          ],
          "decorators": []
        },
        {
          "name": "_update_metrics",
          "docstring": "Update performance metrics.",
          "line_range": null,
          "parameters": [
            "self",
            "scenario",
            "context",
            "load_time"
          ],
          "decorators": []
        },
        {
          "name": "get_metrics_summary",
          "docstring": "Get summary of context loading metrics.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_metrics",
          "docstring": "Save metrics to file for analysis.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ContextMode",
          "docstring": "Context loading modes for different scenarios.",
          "line_range": null,
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextLevel",
          "docstring": "Progressive context levels with token budgets.",
          "line_range": null,
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextBudget",
          "docstring": "Token budget configuration for context loading.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "ContextMetrics",
          "docstring": "Metrics for context loading performance.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "SmartContextOrchestrator",
          "docstring": "Orchestrates context loading based on usage scenario and token budget.\nProvides optimized context for different LLM integration patterns.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load context orchestration configuration.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_for_scenario",
              "docstring": "Get optimized context for specific usage scenario.\n\nArgs:\n    scenario: Usage scenario (cli_direct, vscode_copilot, etc.)\n    file_path: Optional file path for focused context\n    custom_budget: Optional custom token budget\n    \nReturns:\n    Optimized context dictionary",
              "line_range": null,
              "parameters": [
                "self",
                "scenario",
                "file_path",
                "custom_budget"
              ]
            },
            {
              "name": "_get_budget_for_scenario",
              "docstring": "Create budget configuration for scenario.",
              "line_range": null,
              "parameters": [
                "self",
                "scenario_config"
              ]
            },
            {
              "name": "_load_full_context",
              "docstring": "Load complete context without token restrictions.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_focused_context",
              "docstring": "Load focused context optimized for VS Code Copilot.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "budget"
              ]
            },
            {
              "name": "_load_session_context",
              "docstring": "Load session-specific context.",
              "line_range": null,
              "parameters": [
                "self",
                "budget"
              ]
            },
            {
              "name": "_load_minimal_context",
              "docstring": "Load minimal context for quick operations.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_source_with_filtering",
              "docstring": "Load source with optional filtering based on budget.",
              "line_range": null,
              "parameters": [
                "self",
                "source_name",
                "budget"
              ]
            },
            {
              "name": "_get_file_context",
              "docstring": "Get context specific to a file.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_extract_essential_parts",
              "docstring": "Extract essential parts of data to fit token budget.",
              "line_range": null,
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_filter_for_current_session",
              "docstring": "Filter data to items relevant to current session.",
              "line_range": null,
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_extract_summary",
              "docstring": "Extract summary information from data.",
              "line_range": null,
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_apply_section_filtering",
              "docstring": "Apply section filtering to exclude specified sections.",
              "line_range": null,
              "parameters": [
                "self",
                "data",
                "exclude_sections"
              ]
            },
            {
              "name": "_update_metrics",
              "docstring": "Update performance metrics.",
              "line_range": null,
              "parameters": [
                "self",
                "scenario",
                "context",
                "load_time"
              ]
            },
            {
              "name": "get_metrics_summary",
              "docstring": "Get summary of context loading metrics.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_metrics",
              "docstring": "Save metrics to file for analysis.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self._load_config"
        ],
        "_load_config": [
          "json.load",
          "config_path.exists",
          "open"
        ],
        "get_context_for_scenario": [
          "self._load_full_context",
          "scenario_config.get",
          "time.time",
          "self._load_focused_context",
          "self._update_metrics",
          "self._load_minimal_context",
          "ContextMode",
          "self._get_budget_for_scenario",
          "self._load_session_context"
        ],
        "_get_budget_for_scenario": [
          "ContextBudget",
          "budget_config.get",
          "scenario_config.get"
        ],
        "_load_full_context": [
          "json.load",
          "full_path.exists",
          "logger.warning",
          "open"
        ],
        "_load_focused_context": [
          "len",
          "json.dumps",
          "self._load_source_with_filtering",
          "self._extract_essential_parts",
          "self._get_file_context"
        ],
        "_load_session_context": [
          "self._filter_for_current_session",
          "self._load_source_with_filtering"
        ],
        "_load_minimal_context": [
          "logger.warning",
          "source_path.exists",
          "json.load",
          "open",
          "self._extract_summary"
        ],
        "_load_source_with_filtering": [
          "logger.warning",
          "source_path.exists",
          "json.load",
          "self._apply_section_filtering",
          "open"
        ],
        "_get_file_context": [
          "Path"
        ],
        "_extract_essential_parts": [
          "isinstance",
          "task.get"
        ],
        "_filter_for_current_session": [
          "task.get",
          "logger.warning",
          "json.load",
          "current_session.get",
          "idea.get",
          "data.items",
          "open",
          "current_session_path.exists"
        ],
        "_extract_summary": [
          "isinstance",
          "len",
          "t.get"
        ],
        "_apply_section_filtering": [
          "data.items"
        ],
        "_update_metrics": [
          "context.get",
          "len",
          "ContextMetrics"
        ],
        "get_metrics_summary": [
          "len",
          "sum"
        ],
        "save_metrics": [
          "self.get_metrics_summary",
          "open",
          "json.dump"
        ],
        "create_context_orchestrator": [
          "SmartContextOrchestrator"
        ],
        "get_optimized_context": [
          "orchestrator.get_context_for_scenario",
          "ContextBudget",
          "create_context_orchestrator"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "Union",
        "dataclass",
        "dataclasses",
        "enum",
        "json",
        "logging",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "033da71e-62f1-4633-9b73-244c3866ba27"
    },
    {
      "module_id": "src.llmstruct.__init__",
      "path": "src/llmstruct/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "LLMClient",
        "llm_client"
      ],
      "hash": null,
      "artifact_id": "70752c8a-03da-40d0-8ee5-8914e071710a"
    },
    {
      "module_id": "src.llmstruct.ai_cli_integration",
      "path": "src/llmstruct/ai_cli_integration.py",
      "category": "core",
      "module_doc": "AI Self-Awareness CLI Integration Module\nIntegrates unused CLI functions into the AI self-awareness system.",
      "functions": [
        {
          "name": "create_ai_cli_integration",
          "docstring": "Factory function to create AI CLI integration instance.",
          "line_range": null,
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_enhanced_cli_summary",
          "docstring": "Get a formatted summary of AI CLI integration capabilities.",
          "line_range": null,
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize CLI integration system.",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_discover_available_commands",
          "docstring": "Discover which unused CLI commands are available for integration.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_ai_status_command",
          "docstring": "Integrate cmd_status for real-time AI system status awareness.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_ai_audit_command",
          "docstring": "Integrate cmd_audit for system health analysis awareness.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_ai_context_command",
          "docstring": "Integrate cmd_context for context mode awareness.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_ai_queue_command",
          "docstring": "Integrate cmd_queue for workflow queue monitoring.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_integration_summary",
          "docstring": "Get summary of CLI command integrations for AI awareness.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_ai_enhancement_impact",
          "docstring": "Calculate the impact of integrating unused CLI commands on AI capabilities.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_create_fallback_status",
          "docstring": "Create fallback status information if cmd_status is not available.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_create_fallback_audit",
          "docstring": "Create fallback audit information if cmd_audit is not available.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_create_fallback_context",
          "docstring": "Create fallback context information if cmd_context is not available.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_create_fallback_queue",
          "docstring": "Create fallback queue information if cmd_queue is not available.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "AISelfAwarenessCLIIntegration",
          "docstring": "Integrates unused CLI functions to enhance AI self-awareness capabilities.\nTransforms 21 unused CLI commands into useful AI interaction tools.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize CLI integration system.",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_discover_available_commands",
              "docstring": "Discover which unused CLI commands are available for integration.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_ai_status_command",
              "docstring": "Integrate cmd_status for real-time AI system status awareness.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_ai_audit_command",
              "docstring": "Integrate cmd_audit for system health analysis awareness.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_ai_context_command",
              "docstring": "Integrate cmd_context for context mode awareness.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_ai_queue_command",
              "docstring": "Integrate cmd_queue for workflow queue monitoring.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_integration_summary",
              "docstring": "Get summary of CLI command integrations for AI awareness.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_calculate_ai_enhancement_impact",
              "docstring": "Calculate the impact of integrating unused CLI commands on AI capabilities.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_create_fallback_status",
              "docstring": "Create fallback status information if cmd_status is not available.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_create_fallback_audit",
              "docstring": "Create fallback audit information if cmd_audit is not available.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_create_fallback_context",
              "docstring": "Create fallback context information if cmd_context is not available.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_create_fallback_queue",
              "docstring": "Create fallback queue information if cmd_queue is not available.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self._discover_available_commands"
        ],
        "_discover_available_commands": [
          "hasattr",
          "logger.error",
          "unused_command_mapping.items",
          "getattr"
        ],
        "integrate_ai_status_command": [
          "str",
          "cmd_status",
          "logger.error",
          "self._create_fallback_status"
        ],
        "integrate_ai_audit_command": [
          "str",
          "logger.error",
          "self._create_fallback_audit",
          "cmd_audit"
        ],
        "integrate_ai_context_command": [
          "str",
          "self._create_fallback_context",
          "logger.error",
          "cmd_context"
        ],
        "integrate_ai_queue_command": [
          "str",
          "logger.error",
          "self._create_fallback_queue",
          "cmd_queue"
        ],
        "get_integration_summary": [
          "len",
          "sum",
          "cmd.get",
          "self._calculate_ai_enhancement_impact",
          "info.get"
        ],
        "_calculate_ai_enhancement_impact": [
          "len",
          "capability_categories.items",
          "enhanced_categories.append",
          "any",
          "info.get"
        ],
        "_create_fallback_status": [
          "str"
        ],
        "_create_fallback_audit": [
          "str"
        ],
        "_create_fallback_context": [],
        "_create_fallback_queue": [],
        "create_ai_cli_integration": [
          "AISelfAwarenessCLIIntegration"
        ],
        "get_ai_enhanced_cli_summary": [
          "integration.integrate_ai_queue_command",
          "integration.integrate_ai_context_command",
          "integration.integrate_ai_status_command",
          "integration.get_integration_summary",
          "integration.integrate_ai_audit_command",
          "create_ai_cli_integration"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "cli_commands",
        "json",
        "llmstruct",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "b2c3a9cb-c383-48ee-b370-83f1fa99991a"
    },
    {
      "module_id": "src.llmstruct.__main__",
      "path": "src/llmstruct/__main__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "llmstruct.cli",
        "main"
      ],
      "hash": null,
      "artifact_id": "1abeba33-7f37-4a9a-96c0-5339ae2f1bba"
    },
    {
      "module_id": "src.llmstruct.cli_utils",
      "path": "src/llmstruct/cli_utils.py",
      "category": "core",
      "module_doc": "CLI utility functions.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize utils with root directory.",
          "line_range": null,
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read file content with size limit.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "max_size"
          ],
          "decorators": []
        },
        {
          "name": "write_file_content",
          "docstring": "Write content to file.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "get_directory_structure",
          "docstring": "Get directory structure using folder generator.",
          "line_range": null,
          "parameters": [
            "self",
            "path",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "validate_json",
          "docstring": "Validate JSON content.",
          "line_range": null,
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "format_json",
          "docstring": "Format data as JSON string.",
          "line_range": null,
          "parameters": [
            "self",
            "data",
            "indent"
          ],
          "decorators": []
        },
        {
          "name": "generate_unique_id",
          "docstring": "Generate unique ID for commands, queues, etc.",
          "line_range": null,
          "parameters": [
            "self",
            "prefix"
          ],
          "decorators": []
        },
        {
          "name": "safe_path_join",
          "docstring": "Safely join path parts, preventing directory traversal.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "file_exists",
          "docstring": "Check if file exists.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "dir_exists",
          "docstring": "Check if directory exists.",
          "line_range": null,
          "parameters": [
            "self",
            "dir_path"
          ],
          "decorators": []
        },
        {
          "name": "get_file_size",
          "docstring": "Get file size in bytes.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_file",
          "docstring": "Create backup of file with timestamp.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "cleanup_old_backups",
          "docstring": "Clean up old backup files, keeping only the most recent ones.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "keep_count"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLIUtils",
          "docstring": "Utility functions for CLI operations.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize utils with root directory.",
              "line_range": null,
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "read_file_content",
              "docstring": "Read file content with size limit.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "max_size"
              ]
            },
            {
              "name": "write_file_content",
              "docstring": "Write content to file.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "content"
              ]
            },
            {
              "name": "get_directory_structure",
              "docstring": "Get directory structure using folder generator.",
              "line_range": null,
              "parameters": [
                "self",
                "path",
                "gitignore_patterns",
                "include_patterns",
                "exclude_patterns",
                "exclude_dirs"
              ]
            },
            {
              "name": "validate_json",
              "docstring": "Validate JSON content.",
              "line_range": null,
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "format_json",
              "docstring": "Format data as JSON string.",
              "line_range": null,
              "parameters": [
                "self",
                "data",
                "indent"
              ]
            },
            {
              "name": "generate_unique_id",
              "docstring": "Generate unique ID for commands, queues, etc.",
              "line_range": null,
              "parameters": [
                "self",
                "prefix"
              ]
            },
            {
              "name": "safe_path_join",
              "docstring": "Safely join path parts, preventing directory traversal.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "file_exists",
              "docstring": "Check if file exists.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "dir_exists",
              "docstring": "Check if directory exists.",
              "line_range": null,
              "parameters": [
                "self",
                "dir_path"
              ]
            },
            {
              "name": "get_file_size",
              "docstring": "Get file size in bytes.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "backup_file",
              "docstring": "Create backup of file with timestamp.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "cleanup_old_backups",
              "docstring": "Clean up old backup files, keeping only the most recent ones.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "keep_count"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "read_file_content": [
          "os.stat",
          "f.read",
          "logging.warning",
          "logging.error",
          "open"
        ],
        "write_file_content": [
          "f.write",
          "Path",
          "logging.error",
          "open",
          "logging.info"
        ],
        "get_directory_structure": [
          "os.listdir",
          "logging.error",
          "sorted",
          "get_folder_structure"
        ],
        "validate_json": [
          "str",
          "json.loads"
        ],
        "format_json": [
          "str",
          "json.dumps",
          "logging.error"
        ],
        "generate_unique_id": [
          "int",
          "str",
          "uuid.uuid4",
          "time.time"
        ],
        "safe_path_join": [
          "ValueError",
          "resolved_path.startswith"
        ],
        "file_exists": [
          "self.safe_path_join"
        ],
        "dir_exists": [
          "self.safe_path_join"
        ],
        "get_file_size": [
          "self.safe_path_join"
        ],
        "backup_file": [
          "int",
          "src.read",
          "time.time",
          "dst.write",
          "self.safe_path_join",
          "logging.error",
          "open"
        ],
        "cleanup_old_backups": [
          "int",
          "filename.split",
          "backups.sort",
          "backups.append",
          "os.remove",
          "filename.startswith",
          "logging.warning",
          "logging.info",
          "self.safe_path_join",
          "logging.error",
          "os.listdir"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "get_folder_structure",
        "json",
        "llmstruct.generators.json_generator",
        "logging",
        "os",
        "pathlib",
        "time",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "a98b7e4a-d2cf-4723-9dae-781dd3fe5a31"
    },
    {
      "module_id": "src.llmstruct.copilot",
      "path": "src/llmstruct/copilot.py",
      "category": "core",
      "module_doc": "LLMStruct Copilot Integration Module\nProvides context-aware development assistance with hybrid copilot capabilities.",
      "functions": [
        {
          "name": "initialize_copilot",
          "docstring": "Initialize copilot context manager for the project.\n\nArgs:\n    project_root: Project root directory\n\nReturns:\n    Configured CopilotContextManager instance",
          "line_range": null,
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "trigger_copilot_event",
          "docstring": "Trigger a copilot event and get relevant context.\n\nArgs:\n    manager: CopilotContextManager instance\n    event_type: Type of event\n    file_path: Optional file path\n    **kwargs: Additional event metadata\n\nReturns:\n    Dict with event context",
          "line_range": null,
          "parameters": [
            "manager",
            "event_type",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "smart_suggest",
          "docstring": "Get smart suggestions based on query and context.\n\nArgs:\n    manager: CopilotContextManager instance\n    query: Query string\n    context: Context type (code, workflow, task, etc.)\n\nReturns:\n    List of suggestions",
          "line_range": null,
          "parameters": [
            "manager",
            "query",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "get_optimized_context_for_scenario",
          "docstring": "Get optimized context for specific scenario - standalone function.\n\nArgs:\n    project_root: Project root directory\n    scenario: Usage scenario (vscode_copilot, cli_direct, etc.)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
          "line_range": null,
          "parameters": [
            "project_root",
            "scenario",
            "file_path",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize the Copilot Context Manager.\n\nArgs:\n    project_root: Project root directory\n    config_path: Path to copilot_init.json",
          "line_range": null,
          "parameters": [
            "self",
            "project_root",
            "config_path"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load copilot configuration from JSON file.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_initialize_layers",
          "docstring": "Initialize context layers from configuration.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_context_layer",
          "docstring": "Load a specific context layer.\n\nArgs:\n    layer_name: Name of the layer to load\n    force: Force reload if already loaded\n\nReturns:\n    bool: True if successful",
          "line_range": null,
          "parameters": [
            "self",
            "layer_name",
            "force"
          ],
          "decorators": []
        },
        {
          "name": "unload_context_layer",
          "docstring": "Unload a context layer to free memory.\n\nArgs:\n    layer_name: Name of the layer to unload\n\nReturns:\n    bool: True if successful",
          "line_range": null,
          "parameters": [
            "self",
            "layer_name"
          ],
          "decorators": []
        },
        {
          "name": "get_optimized_context",
          "docstring": "Get optimized context using Smart Context Orchestrator.\n\nArgs:\n    scenario: Usage scenario (vscode_copilot, cli_direct, etc.)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
          "line_range": null,
          "parameters": [
            "self",
            "scenario",
            "file_path",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "_get_legacy_context",
          "docstring": "Fallback to legacy context loading.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_for_vscode",
          "docstring": "Get optimized context specifically for VS Code Copilot integration.\n\nArgs:\n    file_path: Optional file path for focused context\n    \nReturns:\n    Token-optimized context for VS Code",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "get_context_for_event",
          "docstring": "Get relevant context for a copilot event using Smart Context Orchestrator.\n\nArgs:\n    event: The copilot event\n\nReturns:\n    Dict containing relevant context",
          "line_range": null,
          "parameters": [
            "self",
            "event"
          ],
          "decorators": []
        },
        {
          "name": "_get_legacy_event_context",
          "docstring": "Legacy event context loading as fallback.",
          "line_range": null,
          "parameters": [
            "self",
            "event"
          ],
          "decorators": []
        },
        {
          "name": "suggest_completion",
          "docstring": "Generate context-aware code completions.\n\nArgs:\n    current_code: Current code content\n    file_path: Path to the current file\n    cursor_position: Cursor position in the code\n\nReturns:\n    List of completion suggestions",
          "line_range": null,
          "parameters": [
            "self",
            "current_code",
            "file_path",
            "cursor_position"
          ],
          "decorators": []
        },
        {
          "name": "validate_change",
          "docstring": "Validate a code change against safety rules.\n\nArgs:\n    file_path: Path to the changed file\n    change_type: Type of change (create, edit, delete)\n\nReturns:\n    Dict with validation results",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "change_type"
          ],
          "decorators": []
        },
        {
          "name": "_matches_scope",
          "docstring": "Check if file matches scope pattern.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path",
            "scope"
          ],
          "decorators": []
        },
        {
          "name": "_matches_trigger",
          "docstring": "Check if change type matches trigger.",
          "line_range": null,
          "parameters": [
            "self",
            "change_type",
            "trigger"
          ],
          "decorators": []
        },
        {
          "name": "_validate_json_schema",
          "docstring": "Validate JSON file against schema.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_check_circular_dependencies",
          "docstring": "Check for circular dependencies.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_validate_task_references",
          "docstring": "Validate task references in tasks.json.",
          "line_range": null,
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "get_workflow_suggestions",
          "docstring": "Get workflow suggestions based on current command context.\n\nArgs:\n    command: Current command or operation\n\nReturns:\n    List of workflow suggestions",
          "line_range": null,
          "parameters": [
            "self",
            "command"
          ],
          "decorators": []
        },
        {
          "name": "refresh_all_contexts",
          "docstring": "Refresh all loaded context layers.\n\nReturns:\n    bool: True if successful",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_status",
          "docstring": "Get status of all context layers.\n\nReturns:\n    Dict with context status information",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "export_context",
          "docstring": "Export context in specified format.\n\nArgs:\n    layers: List of layers to export (None for all loaded)\n    format: Export format (json, yaml, etc.)\n\nReturns:\n    Exported context as string",
          "line_range": null,
          "parameters": [
            "self",
            "layers",
            "format"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Clean up resources.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ContextLayer",
          "docstring": "Context layer priorities for copilot integration.",
          "line_range": null,
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "AttachMode",
          "docstring": "Context attachment modes.",
          "line_range": null,
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextLayerConfig",
          "docstring": "Configuration for a context layer.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "CopilotEvent",
          "docstring": "Represents a copilot event for context triggering.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "CopilotContextManager",
          "docstring": "Manages context layers and integration with GitHub Copilot.\nProvides intelligent context loading and workflow assistance.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize the Copilot Context Manager.\n\nArgs:\n    project_root: Project root directory\n    config_path: Path to copilot_init.json",
              "line_range": null,
              "parameters": [
                "self",
                "project_root",
                "config_path"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load copilot configuration from JSON file.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_initialize_layers",
              "docstring": "Initialize context layers from configuration.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_context_layer",
              "docstring": "Load a specific context layer.\n\nArgs:\n    layer_name: Name of the layer to load\n    force: Force reload if already loaded\n\nReturns:\n    bool: True if successful",
              "line_range": null,
              "parameters": [
                "self",
                "layer_name",
                "force"
              ]
            },
            {
              "name": "unload_context_layer",
              "docstring": "Unload a context layer to free memory.\n\nArgs:\n    layer_name: Name of the layer to unload\n\nReturns:\n    bool: True if successful",
              "line_range": null,
              "parameters": [
                "self",
                "layer_name"
              ]
            },
            {
              "name": "get_optimized_context",
              "docstring": "Get optimized context using Smart Context Orchestrator.\n\nArgs:\n    scenario: Usage scenario (vscode_copilot, cli_direct, etc.)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
              "line_range": null,
              "parameters": [
                "self",
                "scenario",
                "file_path",
                "max_tokens"
              ]
            },
            {
              "name": "_get_legacy_context",
              "docstring": "Fallback to legacy context loading.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_for_vscode",
              "docstring": "Get optimized context specifically for VS Code Copilot integration.\n\nArgs:\n    file_path: Optional file path for focused context\n    \nReturns:\n    Token-optimized context for VS Code",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "get_context_for_event",
              "docstring": "Get relevant context for a copilot event using Smart Context Orchestrator.\n\nArgs:\n    event: The copilot event\n\nReturns:\n    Dict containing relevant context",
              "line_range": null,
              "parameters": [
                "self",
                "event"
              ]
            },
            {
              "name": "_get_legacy_event_context",
              "docstring": "Legacy event context loading as fallback.",
              "line_range": null,
              "parameters": [
                "self",
                "event"
              ]
            },
            {
              "name": "suggest_completion",
              "docstring": "Generate context-aware code completions.\n\nArgs:\n    current_code: Current code content\n    file_path: Path to the current file\n    cursor_position: Cursor position in the code\n\nReturns:\n    List of completion suggestions",
              "line_range": null,
              "parameters": [
                "self",
                "current_code",
                "file_path",
                "cursor_position"
              ]
            },
            {
              "name": "validate_change",
              "docstring": "Validate a code change against safety rules.\n\nArgs:\n    file_path: Path to the changed file\n    change_type: Type of change (create, edit, delete)\n\nReturns:\n    Dict with validation results",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "change_type"
              ]
            },
            {
              "name": "_matches_scope",
              "docstring": "Check if file matches scope pattern.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path",
                "scope"
              ]
            },
            {
              "name": "_matches_trigger",
              "docstring": "Check if change type matches trigger.",
              "line_range": null,
              "parameters": [
                "self",
                "change_type",
                "trigger"
              ]
            },
            {
              "name": "_validate_json_schema",
              "docstring": "Validate JSON file against schema.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_check_circular_dependencies",
              "docstring": "Check for circular dependencies.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_validate_task_references",
              "docstring": "Validate task references in tasks.json.",
              "line_range": null,
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "get_workflow_suggestions",
              "docstring": "Get workflow suggestions based on current command context.\n\nArgs:\n    command: Current command or operation\n\nReturns:\n    List of workflow suggestions",
              "line_range": null,
              "parameters": [
                "self",
                "command"
              ]
            },
            {
              "name": "refresh_all_contexts",
              "docstring": "Refresh all loaded context layers.\n\nReturns:\n    bool: True if successful",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_status",
              "docstring": "Get status of all context layers.\n\nReturns:\n    Dict with context status information",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "export_context",
              "docstring": "Export context in specified format.\n\nArgs:\n    layers: List of layers to export (None for all loaded)\n    format: Export format (json, yaml, etc.)\n\nReturns:\n    Exported context as string",
              "line_range": null,
              "parameters": [
                "self",
                "layers",
                "format"
              ]
            },
            {
              "name": "close",
              "docstring": "Clean up resources.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._load_config",
          "JSONCache",
          "str",
          "self._initialize_layers",
          "Path",
          "create_context_orchestrator",
          "os.getcwd"
        ],
        "_load_config": [
          "logger.info",
          "logger.warning",
          "Path",
          "json.load",
          "logger.error",
          "open"
        ],
        "_initialize_layers": [
          "ContextLayerConfig",
          "layer_config.get",
          "layers_config.items"
        ],
        "load_context_layer": [
          "logger.info",
          "time.time",
          "logger.debug",
          "source_path.exists",
          "logger.warning",
          "logger.error",
          "json.load",
          "open"
        ],
        "unload_context_layer": [
          "logger.info"
        ],
        "get_optimized_context": [
          "logger.error",
          "self._get_legacy_context",
          "scenario_mapping.get"
        ],
        "_get_legacy_context": [
          "self.load_context_layer"
        ],
        "get_context_for_vscode": [
          "self.get_optimized_context"
        ],
        "get_context_for_event": [
          "logger.error",
          "self.get_optimized_context",
          "self._get_legacy_event_context",
          "scenario_mapping.get"
        ],
        "_get_legacy_event_context": [
          "workflow_triggers.get",
          "self.load_context_layer",
          "source_path.exists",
          "json.load",
          "file_triggers.get",
          "triggers.get",
          "logger.error",
          "open",
          "code_triggers.get"
        ],
        "suggest_completion": [
          "module.get",
          "self.load_context_layer",
          "str",
          "func.get",
          "current_module.get",
          "Path",
          "struct_context.get",
          "suggestions.append"
        ],
        "validate_change": [
          "len",
          "self._matches_trigger",
          "safety_features.get",
          "self._validate_task_references",
          "self._validate_json_schema",
          "self._check_circular_dependencies",
          "result.get",
          "self._matches_scope",
          "rule.get"
        ],
        "_matches_scope": [
          "str",
          "fnmatch",
          "Path"
        ],
        "_matches_trigger": [
          "trigger_map.get"
        ],
        "_validate_json_schema": [
          "file_path.endswith",
          "json.load",
          "open"
        ],
        "_check_circular_dependencies": [
          "len",
          "module.get",
          "self.load_context_layer",
          "str",
          "Path",
          "struct_data.get"
        ],
        "_validate_task_references": [
          "task.get",
          "file_path.endswith",
          "json.load",
          "open",
          "task_ids.add",
          "tasks_data.get",
          "set"
        ],
        "get_workflow_suggestions": [
          "self.load_context_layer",
          "suggestions.extend",
          "workflows.items",
          "suggestions.append",
          "command.lower",
          "workflow.get"
        ],
        "refresh_all_contexts": [
          "logger.info",
          "self.load_context_layer",
          "list"
        ],
        "get_context_status": [
          "list"
        ],
        "export_context": [
          "str",
          "json.dumps",
          "list"
        ],
        "close": [
          "hasattr",
          "logger.info"
        ],
        "initialize_copilot": [
          "CopilotContextManager"
        ],
        "trigger_copilot_event": [
          "CopilotEvent",
          "manager.get_context_for_event"
        ],
        "smart_suggest": [
          "manager.get_workflow_suggestions"
        ],
        "get_optimized_context_for_scenario": [
          "locals",
          "manager.close",
          "initialize_copilot",
          "manager.get_optimized_context"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "SmartContextOrchestrator",
        "Union",
        "create_context_orchestrator",
        "dataclass",
        "dataclasses",
        "enum",
        "fnmatch",
        "json",
        "llmstruct.cache",
        "llmstruct.context_orchestrator",
        "logging",
        "os",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "d6e03749-68c3-4992-8094-84d9c66be537"
    },
    {
      "module_id": "src.llmstruct.gh_view",
      "path": "src/llmstruct/gh_view.py",
      "category": "core",
      "module_doc": "GitHub visualization/graph feature (gh-view-v1)\nExport consolidated tasks/ideas from JSON files to GitHub Project cards",
      "functions": [
        {
          "name": "main",
          "docstring": "Main entry point for GitHub Projects export",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize exporter with configuration",
          "line_range": null,
          "parameters": [
            "self",
            "config_path"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load configuration from TOML file",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_mapping",
          "docstring": "Load existing ID mapping between local and GitHub",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_mapping",
          "docstring": "Save ID mapping to file",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_run_gh_command",
          "docstring": "Run GitHub CLI command and return success status and output",
          "line_range": null,
          "parameters": [
            "self",
            "command"
          ],
          "decorators": []
        },
        {
          "name": "load_official_data",
          "docstring": "Load tasks and ideas from official JSON files",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "format_task_for_github",
          "docstring": "Format task data for GitHub Project card",
          "line_range": null,
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "format_idea_for_github",
          "docstring": "Format idea data for GitHub Project card",
          "line_range": null,
          "parameters": [
            "self",
            "idea"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubProjectsExporter",
          "docstring": "Export tasks and ideas to GitHub Projects as cards",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize exporter with configuration",
              "line_range": null,
              "parameters": [
                "self",
                "config_path"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load configuration from TOML file",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_mapping",
              "docstring": "Load existing ID mapping between local and GitHub",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_mapping",
              "docstring": "Save ID mapping to file",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_run_gh_command",
              "docstring": "Run GitHub CLI command and return success status and output",
              "line_range": null,
              "parameters": [
                "self",
                "command"
              ]
            },
            {
              "name": "load_official_data",
              "docstring": "Load tasks and ideas from official JSON files",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "format_task_for_github",
              "docstring": "Format task data for GitHub Project card",
              "line_range": null,
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "format_idea_for_github",
              "docstring": "Format idea data for GitHub Project card",
              "line_range": null,
              "parameters": [
                "self",
                "idea"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self._load_config",
          "self._load_mapping"
        ],
        "_load_config": [
          "config.get",
          "toml.load",
          "print",
          "open"
        ],
        "_load_mapping": [
          "json.load",
          "open"
        ],
        "_save_mapping": [
          "print",
          "open",
          "json.dump"
        ],
        "_run_gh_command": [
          "subprocess.run"
        ],
        "load_official_data": [
          "len",
          "ideas_file.exists",
          "json.load",
          "ideas_data.get",
          "print",
          "open",
          "tasks_data.get",
          "tasks_file.exists"
        ],
        "format_task_for_github": [
          "task.get",
          "status_map.get",
          "body_parts.append"
        ],
        "format_idea_for_github": [
          "idea.get",
          "status_map.get",
          "body_parts.append"
        ],
        "main": [
          "len",
          "exporter.format_idea_for_github",
          "exporter.format_task_for_github",
          "GitHubProjectsExporter",
          "print",
          "exporter.load_official_data",
          "sys.exit"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "datetime",
        "json",
        "pathlib",
        "subprocess",
        "sys",
        "toml",
        "typing"
      ],
      "hash": null,
      "artifact_id": "a27ac0c3-f0cc-40e8-8752-4d99f4251f77"
    },
    {
      "module_id": "src.llmstruct.llm_client",
      "path": "src/llmstruct/llm_client.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize LLMClient with optional Ollama host.",
          "line_range": null,
          "parameters": [
            "self",
            "ollama_host"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt, context, and optional model.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "context_path",
            "mode",
            "model",
            "artifact_ids"
          ],
          "decorators": []
        },
        {
          "name": "_query_grok",
          "docstring": "Query Grok API.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_anthropic",
          "docstring": "Query Anthropic API.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_ollama",
          "docstring": "Query Ollama API with specified model.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "_query_hybrid",
          "docstring": "Query multiple LLMs and combine results.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMClient",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize LLMClient with optional Ollama host.",
              "line_range": null,
              "parameters": [
                "self",
                "ollama_host"
              ]
            },
            {
              "name": "query",
              "docstring": "Query LLMs with prompt, context, and optional model.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "context_path",
                "mode",
                "model",
                "artifact_ids"
              ]
            },
            {
              "name": "_query_grok",
              "docstring": "Query Grok API.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_anthropic",
              "docstring": "Query Anthropic API.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_ollama",
              "docstring": "Query Ollama API with specified model.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            },
            {
              "name": "_query_hybrid",
              "docstring": "Query multiple LLMs and combine results.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "int",
          "logging.info",
          "os.getenv"
        ],
        "query": [
          "range",
          "json.dumps",
          "self._query_ollama",
          "self._query_grok",
          "logging.warning",
          "Path",
          "json.load",
          "self._query_hybrid",
          "logging.error",
          "self._query_anthropic",
          "logging.info",
          "asyncio.sleep"
        ],
        "_query_grok": [
          "response.json",
          "session.post",
          "logging.error",
          "logging.info",
          "result.get",
          "aiohttp.ClientSession"
        ],
        "_query_anthropic": [
          "response.json",
          "session.post",
          "logging.error",
          "logging.info",
          "result.get",
          "aiohttp.ClientSession"
        ],
        "_query_ollama": [
          "response.json",
          "session.post",
          "result.get",
          "logging.error",
          "logging.info",
          "logging.debug",
          "aiohttp.ClientSession"
        ],
        "_query_hybrid": [
          "len",
          "asyncio.gather",
          "self._query_ollama",
          "self._query_grok",
          "isinstance",
          "logging.info",
          "self._query_anthropic"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "aiohttp",
        "asyncio",
        "dotenv",
        "json",
        "load_dotenv",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "ff0aefcc-b8e8-4612-88ea-c40c28947616"
    },
    {
      "module_id": "src.llmstruct.ai_self_awareness",
      "path": "src/llmstruct/ai_self_awareness.py",
      "category": "core",
      "module_doc": "AI Self-Awareness Enhancement Module\nProvides comprehensive system introspection and capability discovery for llmstruct AI systems.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize the capability discovery system with CLI integration.",
          "line_range": null,
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_ensure_directories",
          "docstring": "Ensure required directories exist.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "discover_all_capabilities",
          "docstring": "Perform comprehensive capability discovery with unused function integration.\n\nArgs:\n    force_refresh: If True, bypass cache and perform fresh discovery\n    \nReturns:\n    Complete system capabilities overview enhanced with integrated unused functions",
          "line_range": null,
          "parameters": [
            "self",
            "force_refresh"
          ],
          "decorators": []
        },
        {
          "name": "_get_integration_metrics",
          "docstring": "Get metrics about unused function integration success.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_enhanced_capabilities_summary",
          "docstring": "Get enhanced capabilities summary including unused function integration.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_comprehensive_ai_status",
          "docstring": "Get comprehensive AI status including unused function integration analysis.\nThis is the primary method for AI self-awareness reporting.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_discover_tools",
          "docstring": "Discover and check health of all available tools.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_cli_processor",
          "docstring": "Check CLI processor health.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_copilot_manager",
          "docstring": "Check Copilot manager health.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_context_orchestrator",
          "docstring": "Check context orchestrator health.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_cache_system",
          "docstring": "Check cache system health.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_struct_parser",
          "docstring": "Check struct.json parser health.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_docs_system",
          "docstring": "Check docs.json system health.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_discover_context_capabilities",
          "docstring": "Discover available context capabilities.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_integration_health",
          "docstring": "Check health of all system integrations.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_component_status",
          "docstring": "Check status of a specific component.",
          "line_range": null,
          "parameters": [
            "self",
            "component_name"
          ],
          "decorators": []
        },
        {
          "name": "_discover_vscode_capabilities",
          "docstring": "Discover VS Code specific capabilities.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_cache_hit_rate",
          "docstring": "Calculate cache hit rate.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_estimate_system_load",
          "docstring": "Estimate current system load.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_is_cache_valid",
          "docstring": "Check if cached capabilities are still valid.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_cached_capabilities",
          "docstring": "Load capabilities from cache.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_cache_capabilities",
          "docstring": "Cache capabilities to disk.",
          "line_range": null,
          "parameters": [
            "self",
            "capabilities"
          ],
          "decorators": []
        },
        {
          "name": "get_capabilities_summary",
          "docstring": "Get a human-readable summary of current capabilities.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_project_structure",
          "docstring": "Enhanced project structure analysis integrating multiple unused functions\nfor comprehensive AI self-awareness.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_enhanced_directory_structure",
          "docstring": "Integration of unused cli_utils.get_directory_structure() function\nfor enhanced AI project awareness.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_unused_capabilities",
          "docstring": "Analyze unused functions to discover hidden AI capabilities.\nThis transforms the 115 unused functions into potential AI enhancements.",
          "line_range": null,
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_discover_config_capabilities",
          "docstring": "Integration of unused cli_config functions for AI configuration awareness.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_discover_context_scenarios",
          "docstring": "Integration of unused context_orchestrator functions for scenario awareness.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_is_ai_useful_command",
          "docstring": "Determine if a CLI command function would be useful for AI self-awareness.",
          "line_range": null,
          "parameters": [
            "self",
            "function_name"
          ],
          "decorators": []
        },
        {
          "name": "_is_ai_useful_config",
          "docstring": "Determine if a config function would be useful for AI configuration awareness.",
          "line_range": null,
          "parameters": [
            "self",
            "function_name"
          ],
          "decorators": []
        },
        {
          "name": "_is_ai_useful_utility",
          "docstring": "Determine if a utility function would be useful for AI operations.",
          "line_range": null,
          "parameters": [
            "self",
            "function_name"
          ],
          "decorators": []
        },
        {
          "name": "_prioritize_integrations",
          "docstring": "Prioritize which unused functions should be integrated first.",
          "line_range": null,
          "parameters": [
            "self",
            "capabilities"
          ],
          "decorators": []
        },
        {
          "name": "_basic_directory_scan",
          "docstring": "Basic fallback directory scanning if enhanced method fails.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CapabilityStatus",
          "docstring": "Status of system capabilities.",
          "line_range": null,
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextMode",
          "docstring": "Available context modes.",
          "line_range": null,
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ToolHealth",
          "docstring": "Health status of a specific tool.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "ContextCapabilities",
          "docstring": "Available context capabilities.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "IntegrationHealth",
          "docstring": "Status of system integrations.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "VSCodeCapabilities",
          "docstring": "VS Code specific capabilities.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "SystemCapabilities",
          "docstring": "Complete system capabilities overview.",
          "line_range": null,
          "methods": [],
          "bases": []
        },
        {
          "name": "SystemCapabilityDiscovery",
          "docstring": "Discovers and monitors system capabilities in real-time.\nProvides AI with comprehensive understanding of available tools and systems.\nEnhanced with unused function integration for maximum AI self-awareness.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize the capability discovery system with CLI integration.",
              "line_range": null,
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_ensure_directories",
              "docstring": "Ensure required directories exist.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "discover_all_capabilities",
              "docstring": "Perform comprehensive capability discovery with unused function integration.\n\nArgs:\n    force_refresh: If True, bypass cache and perform fresh discovery\n    \nReturns:\n    Complete system capabilities overview enhanced with integrated unused functions",
              "line_range": null,
              "parameters": [
                "self",
                "force_refresh"
              ]
            },
            {
              "name": "_get_integration_metrics",
              "docstring": "Get metrics about unused function integration success.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_enhanced_capabilities_summary",
              "docstring": "Get enhanced capabilities summary including unused function integration.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_comprehensive_ai_status",
              "docstring": "Get comprehensive AI status including unused function integration analysis.\nThis is the primary method for AI self-awareness reporting.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_discover_tools",
              "docstring": "Discover and check health of all available tools.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_cli_processor",
              "docstring": "Check CLI processor health.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_copilot_manager",
              "docstring": "Check Copilot manager health.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_context_orchestrator",
              "docstring": "Check context orchestrator health.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_cache_system",
              "docstring": "Check cache system health.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_struct_parser",
              "docstring": "Check struct.json parser health.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_docs_system",
              "docstring": "Check docs.json system health.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_discover_context_capabilities",
              "docstring": "Discover available context capabilities.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_integration_health",
              "docstring": "Check health of all system integrations.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_component_status",
              "docstring": "Check status of a specific component.",
              "line_range": null,
              "parameters": [
                "self",
                "component_name"
              ]
            },
            {
              "name": "_discover_vscode_capabilities",
              "docstring": "Discover VS Code specific capabilities.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_calculate_cache_hit_rate",
              "docstring": "Calculate cache hit rate.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_estimate_system_load",
              "docstring": "Estimate current system load.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_is_cache_valid",
              "docstring": "Check if cached capabilities are still valid.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_cached_capabilities",
              "docstring": "Load capabilities from cache.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_cache_capabilities",
              "docstring": "Cache capabilities to disk.",
              "line_range": null,
              "parameters": [
                "self",
                "capabilities"
              ]
            },
            {
              "name": "get_capabilities_summary",
              "docstring": "Get a human-readable summary of current capabilities.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_analyze_project_structure",
              "docstring": "Enhanced project structure analysis integrating multiple unused functions\nfor comprehensive AI self-awareness.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_enhanced_directory_structure",
              "docstring": "Integration of unused cli_utils.get_directory_structure() function\nfor enhanced AI project awareness.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_analyze_unused_capabilities",
              "docstring": "Analyze unused functions to discover hidden AI capabilities.\nThis transforms the 115 unused functions into potential AI enhancements.",
              "line_range": null,
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_discover_config_capabilities",
              "docstring": "Integration of unused cli_config functions for AI configuration awareness.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_discover_context_scenarios",
              "docstring": "Integration of unused context_orchestrator functions for scenario awareness.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_is_ai_useful_command",
              "docstring": "Determine if a CLI command function would be useful for AI self-awareness.",
              "line_range": null,
              "parameters": [
                "self",
                "function_name"
              ]
            },
            {
              "name": "_is_ai_useful_config",
              "docstring": "Determine if a config function would be useful for AI configuration awareness.",
              "line_range": null,
              "parameters": [
                "self",
                "function_name"
              ]
            },
            {
              "name": "_is_ai_useful_utility",
              "docstring": "Determine if a utility function would be useful for AI operations.",
              "line_range": null,
              "parameters": [
                "self",
                "function_name"
              ]
            },
            {
              "name": "_prioritize_integrations",
              "docstring": "Prioritize which unused functions should be integrated first.",
              "line_range": null,
              "parameters": [
                "self",
                "capabilities"
              ]
            },
            {
              "name": "_basic_directory_scan",
              "docstring": "Basic fallback directory scanning if enhanced method fails.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self._ensure_directories",
          "create_ai_cli_integration"
        ],
        "_ensure_directories": [],
        "discover_all_capabilities": [
          "logger.info",
          "self._is_cache_valid",
          "time.time",
          "self._analyze_project_structure",
          "self._estimate_system_load",
          "self._discover_context_capabilities",
          "self._get_integration_metrics",
          "self._cache_capabilities",
          "self._check_integration_health",
          "self._calculate_cache_hit_rate",
          "self._discover_tools",
          "self._discover_vscode_capabilities",
          "self._load_cached_capabilities",
          "SystemCapabilities",
          "datetime.now"
        ],
        "_get_integration_metrics": [],
        "get_enhanced_capabilities_summary": [
          "hasattr",
          "self.get_capabilities_summary",
          "enhanced_info.append",
          "str"
        ],
        "get_comprehensive_ai_status": [
          "str",
          "self.get_enhanced_capabilities_summary",
          "get_ai_enhanced_cli_summary"
        ],
        "_discover_tools": [
          "self._check_docs_system",
          "self._check_cache_system",
          "self._check_struct_parser",
          "self._check_copilot_manager",
          "self._check_context_orchestrator",
          "self._check_cli_processor"
        ],
        "_check_cli_processor": [
          "datetime.now",
          "time.time",
          "str",
          "CLIConfig",
          "CommandProcessor",
          "ToolHealth",
          "CLIUtils"
        ],
        "_check_copilot_manager": [
          "time.time",
          "str",
          "manager.get_context_status",
          "initialize_copilot",
          "hasattr",
          "ToolHealth",
          "datetime.now"
        ],
        "_check_context_orchestrator": [
          "get_optimized_context",
          "time.time",
          "str",
          "logger.warning",
          "create_context_orchestrator",
          "hasattr",
          "ToolHealth",
          "datetime.now"
        ],
        "_check_cache_system": [
          "JSONCache",
          "str",
          "struct_file.exists",
          "cache.cache_json",
          "time.time",
          "cache.close",
          "ToolHealth",
          "cache.get_full_json",
          "datetime.now"
        ],
        "_check_struct_parser": [
          "FileNotFoundError",
          "struct_file.exists",
          "time.time",
          "str",
          "json.load",
          "struct_data.get",
          "missing_keys.append",
          "open",
          "ToolHealth",
          "datetime.now"
        ],
        "_check_docs_system": [
          "FileNotFoundError",
          "docs_file.exists",
          "time.time",
          "str",
          "json.load",
          "open",
          "ToolHealth",
          "datetime.now"
        ],
        "_discover_context_capabilities": [
          "ContextCapabilities",
          "str",
          "config.get",
          "isinstance",
          "logger.error",
          "list",
          "create_context_orchestrator",
          "scenario_mappings.keys"
        ],
        "_check_integration_health": [
          "self._check_component_status",
          "IntegrationHealth"
        ],
        "_check_component_status": [
          "hasattr"
        ],
        "_discover_vscode_capabilities": [
          "VSCodeCapabilities"
        ],
        "_calculate_cache_hit_rate": [],
        "_estimate_system_load": [],
        "_is_cache_valid": [
          "time.time"
        ],
        "_load_cached_capabilities": [
          "json.load",
          "logger.error",
          "open"
        ],
        "_cache_capabilities": [
          "logger.error",
          "asdict",
          "open",
          "json.dump"
        ],
        "get_capabilities_summary": [
          "str",
          "len",
          "chr",
          "self.discover_all_capabilities"
        ],
        "_analyze_project_structure": [
          "len",
          "module.get",
          "struct_file.exists",
          "str",
          "sum",
          "json.load",
          "struct_data.get",
          "self._get_enhanced_directory_structure",
          "self._analyze_unused_capabilities",
          "open",
          "self._discover_context_scenarios",
          "self._discover_config_capabilities"
        ],
        "_get_enhanced_directory_structure": [
          "str",
          "get_directory_structure",
          "self._basic_directory_scan"
        ],
        "_analyze_unused_capabilities": [
          "len",
          "self._is_ai_useful_utility",
          "utils_module.get",
          "self._prioritize_integrations",
          "str",
          "min",
          "f.startswith",
          "modules.get",
          "struct_data.get",
          "cli_module.get",
          "config_module.get",
          "self._is_ai_useful_config",
          "self._is_ai_useful_command"
        ],
        "_discover_config_capabilities": [
          "str",
          "get_copilot_config",
          "get_queue_config",
          "get_context_config",
          "is_auto_update_enabled"
        ],
        "_discover_context_scenarios": [
          "str",
          "get_metrics_summary",
          "get_context_for_scenario"
        ],
        "_is_ai_useful_command": [],
        "_is_ai_useful_config": [],
        "_is_ai_useful_utility": [],
        "_prioritize_integrations": [
          "priorities.append"
        ],
        "_basic_directory_scan": [
          "path.is_file",
          "path.relative_to",
          "path.stat",
          "str"
        ]
      },
      "dependencies": [
        "Any",
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "CopilotContextManager",
        "Dict",
        "Enum",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "asdict",
        "create_ai_cli_integration",
        "create_context_orchestrator",
        "dataclass",
        "dataclasses",
        "datetime",
        "enum",
        "get_ai_enhanced_cli_summary",
        "get_auto_update_config",
        "get_context_config",
        "get_context_for_scenario",
        "get_copilot_config",
        "get_directory_structure",
        "get_metrics_summary",
        "get_optimized_context",
        "get_queue_config",
        "initialize_copilot",
        "is_auto_update_enabled",
        "json",
        "llmstruct.ai_cli_integration",
        "llmstruct.cache",
        "llmstruct.cli_commands",
        "llmstruct.cli_config",
        "llmstruct.cli_utils",
        "llmstruct.context_orchestrator",
        "llmstruct.copilot",
        "logging",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "129367a7-62f3-4bb4-a294-229641cd1a6a"
    },
    {
      "module_id": "src.llmstruct.cache",
      "path": "src/llmstruct/cache.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize SQLite cache for JSON files.",
          "line_range": null,
          "parameters": [
            "self",
            "db_path"
          ],
          "decorators": []
        },
        {
          "name": "create_tables",
          "docstring": "Create tables for metadata and file paths.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cache_json",
          "docstring": "Cache JSON metadata and store full file path.",
          "line_range": null,
          "parameters": [
            "self",
            "json_path",
            "artifact_id",
            "summary",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "get_metadata",
          "docstring": "Retrieve metadata by artifact_id.",
          "line_range": null,
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "get_full_json",
          "docstring": "Load full JSON by artifact_id.",
          "line_range": null,
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Close database connection.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JSONCache",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize SQLite cache for JSON files.",
              "line_range": null,
              "parameters": [
                "self",
                "db_path"
              ]
            },
            {
              "name": "create_tables",
              "docstring": "Create tables for metadata and file paths.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cache_json",
              "docstring": "Cache JSON metadata and store full file path.",
              "line_range": null,
              "parameters": [
                "self",
                "json_path",
                "artifact_id",
                "summary",
                "tags"
              ]
            },
            {
              "name": "get_metadata",
              "docstring": "Retrieve metadata by artifact_id.",
              "line_range": null,
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "get_full_json",
              "docstring": "Load full JSON by artifact_id.",
              "line_range": null,
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "close",
              "docstring": "Close database connection.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.create_tables",
          "sqlite3.connect"
        ],
        "create_tables": [],
        "cache_json": [
          "json.dumps",
          "f.read",
          "json_file.exists",
          "str",
          "content.encode",
          "Path",
          "logging.error",
          "open",
          "logging.info",
          "hashlib.sha256"
        ],
        "get_metadata": [
          "cursor.fetchone",
          "json.loads"
        ],
        "get_full_json": [
          "json.load",
          "cursor.fetchone",
          "logging.error",
          "open"
        ],
        "close": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "hashlib",
        "json",
        "logging",
        "pathlib",
        "sqlite3",
        "typing"
      ],
      "hash": null,
      "artifact_id": "1eaef5fe-f52e-4733-ad49-dc89606b6070"
    },
    {
      "module_id": "src.llmstruct.self_run",
      "path": "src/llmstruct/self_run.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_struct",
          "docstring": "Filter struct.json or init.json based on prompt keywords. Supports dict or list as root.",
          "line_range": null,
          "parameters": [
            "struct",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "Attach filtered JSON to LLM prompt, using cache if available.",
          "line_range": null,
          "parameters": [
            "context_path",
            "prompt",
            "cache"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_struct": [
          "module.get",
          "filter_json",
          "str",
          "item.get",
          "struct.get",
          "isinstance",
          "any",
          "prompt.lower"
        ],
        "attach_to_llm_request": [
          "json.dumps",
          "cache.get_metadata",
          "filter_json",
          "cache.cache_json",
          "context_file.exists",
          "Path",
          "select_json",
          "logging.error",
          "prompt.lower",
          "logging.info",
          "cache.get_full_json",
          "filter_struct"
        ]
      },
      "dependencies": [
        "Any",
        "JSONCache",
        "Optional",
        "Path",
        "cache",
        "filter_json",
        "json",
        "json_selector",
        "logging",
        "pathlib",
        "select_json",
        "typing"
      ],
      "hash": null,
      "artifact_id": "a86a6d03-dac1-47ac-8eda-9e767b2ddd7a"
    },
    {
      "module_id": "src.llmstruct.json_selector",
      "path": "src/llmstruct/json_selector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_json",
          "docstring": "Filter JSON data by key-value pair and select fields.",
          "line_range": null,
          "parameters": [
            "data",
            "filter_key",
            "filter_value",
            "fields"
          ],
          "decorators": []
        },
        {
          "name": "select_json",
          "docstring": "Load and filter JSON file, optionally parsing partially.",
          "line_range": null,
          "parameters": [
            "json_path",
            "filter_key",
            "filter_value",
            "fields",
            "partial"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_json": [
          "isinstance",
          "item.get",
          "data.get",
          "filtered.append"
        ],
        "select_json": [
          "filter_json",
          "json_file.exists",
          "ijson.parse",
          "f.seek",
          "filtered.append",
          "Path",
          "json.load",
          "logging.error",
          "open",
          "path.append",
          "prefix.startswith",
          "current_item.get"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "ijson",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "66bdd469-5680-4eac-a6d8-e06781b499d3"
    },
    {
      "module_id": "src.llmstruct.cli",
      "path": "src/llmstruct/cli.py",
      "category": "core",
      "module_doc": "LLMStruct CLI - Main entry point for the command-line interface.",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from llmstruct.toml or return empty dict.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default ./tmp) and return the path.",
          "line_range": null,
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": null,
          "parameters": [
            "response"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with modular structure if available, fallback to legacy.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive_modular",
          "docstring": "Run interactive CLI with modular structure.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive_legacy",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "process_cli_queue_enhanced",
          "docstring": "Enhanced queue processing with workflow support, performance tracking, and safety validation.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "context_path",
            "args",
            "cache",
            "client"
          ],
          "decorators": []
        },
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "copilot",
          "docstring": "Copilot integration and context management.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "audit",
          "docstring": "Handle audit command for recovering lost ideas/tasks.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "gitignore_path.exists",
          "Path",
          "line.strip",
          "line.startswith",
          "logging.error",
          "gitignore_path.open"
        ],
        "load_config": [
          "config_path.exists",
          "toml.load",
          "Path",
          "config_path.open",
          "logging.error"
        ],
        "read_file_content": [
          "f.read",
          "path.open",
          "Path",
          "path.is_file",
          "logging.error"
        ],
        "write_to_file": [
          "str",
          "f.write",
          "file_path.open",
          "base_path.mkdir",
          "logging.warning",
          "Path",
          "logging.error",
          "file_path.exists",
          "logging.info",
          "re.sub"
        ],
        "parse_files_from_response": [
          "content.strip",
          "filename.strip",
          "files.append",
          "re.findall"
        ],
        "interactive": [
          "interactive_legacy",
          "interactive_modular",
          "logging.warning"
        ],
        "interactive_modular": [
          "hasattr",
          "logging.info",
          "cli_core.run_interactive_mode",
          "create_cli_core"
        ],
        "interactive_legacy": [
          "time.ctime",
          "json.dumps",
          "args_str.strip",
          "logging.warning",
          "json.load",
          "print",
          "user_input.lower",
          "subprocess.run",
          "os.listdir",
          "JSONCache",
          "read_file_content",
          "time.time",
          "user_input.startswith",
          "process_cli_queue_enhanced",
          "os.makedirs",
          "cache.get_stats",
          "open",
          "load_gitignore",
          "workflow.get",
          "json.dump",
          "os.stat",
          "LLMClient",
          "cache.close",
          "Path",
          "struct_data.get",
          "re.match",
          "cache.clear",
          "cache.list_keys",
          "sorted",
          "int",
          "write_to_file",
          "len",
          "attach_to_llm_request",
          "client.query",
          "get_folder_structure",
          "events_data.append",
          "input",
          "isinstance",
          "m.group",
          "logging.error",
          "parse"
        ],
        "process_cli_queue_enhanced": [
          "attach_to_llm_request",
          "len",
          "write_to_file",
          "client.query",
          "time.time",
          "get_folder_structure",
          "read_file_content",
          "item.get",
          "json.load",
          "isinstance",
          "logging.error",
          "print",
          "open",
          "options.get",
          "enumerate",
          "logging.info",
          "load_gitignore",
          "workflow.get"
        ],
        "parse": [
          "JSONCache",
          "config.get",
          "cache.cache_json",
          "json.dump",
          "cache.close",
          "logging.warning",
          "generate_json",
          "Path",
          "parsing_config.get",
          "load_config",
          "logging.error",
          "logging.info",
          "load_gitignore",
          "cli_config.get"
        ],
        "query": [
          "client.query",
          "LLMClient",
          "JSONCache",
          "client.query_with_context",
          "cache.close",
          "logging.warning",
          "Path",
          "orchestrator.get_context_for_scenario",
          "logging.error",
          "create_context_orchestrator",
          "hasattr",
          "logging.info",
          "json.dump"
        ],
        "context": [
          "logging.warning"
        ],
        "dogfood": [
          "logging.warning"
        ],
        "review": [
          "logging.warning"
        ],
        "copilot": [
          "f.write",
          "initialize_copilot",
          "print",
          "template_path.exists",
          "manager.refresh_all_contexts",
          "layers.split",
          "manager.close",
          "open",
          "enumerate",
          "manager.unload_context_layer",
          "manager.load_context_layer",
          "manager.export_context",
          "config_path.exists",
          "shutil.copy",
          "manager.validate_change",
          "Path",
          "logging.info",
          "getattr",
          "smart_suggest",
          "manager.get_context_status",
          "logging.error",
          "hasattr"
        ],
        "audit": [
          "CLIConfig",
          "logging.error",
          "processor.cmd_audit",
          "os.getcwd",
          "CommandProcessor",
          "CLIUtils"
        ],
        "main": [
          "parser.add_subparsers",
          "audit_parser.add_argument",
          "query_parser.add_argument",
          "subparsers.add_parser",
          "copilot",
          "review_parser.add_argument",
          "context",
          "parser.parse_args",
          "asyncio.run",
          "copilot_parser.add_argument",
          "dogfood_parser.add_argument",
          "audit",
          "review",
          "query",
          "interactive_parser.add_argument",
          "parse_parser.add_argument",
          "context_parser.add_argument",
          "argparse.ArgumentParser",
          "parse",
          "interactive",
          "dogfood"
        ]
      },
      "dependencies": [
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "cli_commands",
        "cli_config",
        "cli_core",
        "cli_utils",
        "context_orchestrator",
        "copilot",
        "create_cli_core",
        "create_context_orchestrator",
        "generate_json",
        "get_folder_structure",
        "initialize_copilot",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "logging",
        "os",
        "pathlib",
        "re",
        "shutil",
        "smart_suggest",
        "subprocess",
        "sys",
        "time",
        "toml",
        "typing"
      ],
      "hash": null,
      "artifact_id": "d6886663-7828-425e-997d-1304747f0357"
    },
    {
      "module_id": "src.llmstruct.cli_core",
      "path": "src/llmstruct/cli_core.py",
      "category": "core",
      "module_doc": "Core CLI functionality and main loop.",
      "functions": [
        {
          "name": "create_cli_core",
          "docstring": "Factory function to create CLI core instance.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize CLI core with root directory.",
          "line_range": null,
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "setup_cache",
          "docstring": "Initialize cache if enabled in config.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "setup_copilot",
          "docstring": "Initialize Copilot integration if enabled.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_interactive_mode",
          "docstring": "Run the interactive CLI mode.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cleanup",
          "docstring": "Clean up resources.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLICore",
          "docstring": "Core CLI class handling main loop and coordination.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize CLI core with root directory.",
              "line_range": null,
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "setup_cache",
              "docstring": "Initialize cache if enabled in config.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "setup_copilot",
              "docstring": "Initialize Copilot integration if enabled.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run_interactive_mode",
              "docstring": "Run the interactive CLI mode.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cleanup",
              "docstring": "Clean up resources.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "CommandProcessor",
          "CLIConfig",
          "CLIUtils"
        ],
        "setup_cache": [
          "JSONCache",
          "cache_path.mkdir",
          "str",
          "logging.warning",
          "Path",
          "logging.info",
          "cache_config.get"
        ],
        "setup_copilot": [
          "logging.info",
          "copilot_config.get",
          "initialize_copilot",
          "logging.warning"
        ],
        "run_interactive_mode": [
          "input",
          "user_input.startswith",
          "self.cleanup",
          "self.setup_copilot",
          "user_input.lower",
          "self.setup_cache",
          "print",
          "logging.error"
        ],
        "cleanup": [
          "logging.info"
        ],
        "create_cli_core": [
          "CLICore"
        ]
      },
      "dependencies": [
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "CopilotContextManager",
        "JSONCache",
        "Optional",
        "Path",
        "cli_commands",
        "cli_config",
        "cli_utils",
        "copilot",
        "initialize_copilot",
        "llmstruct.cache",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "36a7b075-fbfa-45ef-b919-2b308c193943"
    },
    {
      "module_id": "src.llmstruct.workspace",
      "path": "src/llmstruct/workspace.py",
      "category": "core",
      "module_doc": "Workspace State & Mode Management System\nEnhanced AI-Human Collaboration with Context Boundaries",
      "functions": [
        {
          "name": "create_workspace_manager",
          "docstring": "Factory function to create workspace manager",
          "line_range": null,
          "parameters": [
            "workspace_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "workspace_dir"
          ],
          "decorators": []
        },
        {
          "name": "_load_or_create_state",
          "docstring": "Load existing workspace state or create default",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_permission_templates",
          "docstring": "Load permission templates for different modes",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "set_mode",
          "docstring": "Set workspace mode(s) with smart combination logic.\n\nArgs:\n    modes: Single mode string \"[code]\" or list of modes [\"code\", \"debug\"]\n    session_id: Optional session identifier\n    \nReturns:\n    Dict with mode change result and applied permissions",
          "line_range": null,
          "parameters": [
            "self",
            "modes",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "_parse_modes_from_string",
          "docstring": "Parse modes from string like '[code][debug]' to ['code', 'debug']",
          "line_range": null,
          "parameters": [
            "self",
            "mode_string"
          ],
          "decorators": []
        },
        {
          "name": "_combine_mode_permissions",
          "docstring": "Smart combination of mode permissions (Decision: C - Smart Combination)",
          "line_range": null,
          "parameters": [
            "self",
            "modes"
          ],
          "decorators": []
        },
        {
          "name": "_get_mode_combination_name",
          "docstring": "Get descriptive name for mode combination",
          "line_range": null,
          "parameters": [
            "self",
            "modes"
          ],
          "decorators": []
        },
        {
          "name": "get_current_state",
          "docstring": "Get current workspace state",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "check_permission",
          "docstring": "Check if operation is permitted under current mode.\n\nArgs:\n    operation: Operation type (e.g., \"write_file\", \"run_command\")\n    target: Optional target (file path, command, etc.)\n    \nReturns:\n    Dict with permission result and reasoning",
          "line_range": null,
          "parameters": [
            "self",
            "operation",
            "target"
          ],
          "decorators": []
        },
        {
          "name": "_get_required_capability",
          "docstring": "Map operations to required capabilities",
          "line_range": null,
          "parameters": [
            "self",
            "operation"
          ],
          "decorators": []
        },
        {
          "name": "_is_restricted_target",
          "docstring": "Check if target matches any file restrictions",
          "line_range": null,
          "parameters": [
            "self",
            "target"
          ],
          "decorators": []
        },
        {
          "name": "set_emergency_override",
          "docstring": "Grant emergency override (Hybrid B+C: Escalation + Time-boxing)\n\nArgs:\n    level: Override level (1=extend permissions, 2=filesystem, 3=system)\n    reason: Reason for override\n    duration_minutes: Override duration",
          "line_range": null,
          "parameters": [
            "self",
            "level",
            "reason",
            "duration_minutes"
          ],
          "decorators": []
        },
        {
          "name": "_check_emergency_override",
          "docstring": "Check if emergency override is active and not expired",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_strict_mode",
          "docstring": "Integration with existing strict mode system",
          "line_range": null,
          "parameters": [
            "self",
            "strict_tags"
          ],
          "decorators": []
        },
        {
          "name": "add_decision_workflow",
          "docstring": "Add decision to workflow tracking (for [decide] mode)",
          "line_range": null,
          "parameters": [
            "self",
            "decision_id",
            "decision_data"
          ],
          "decorators": []
        },
        {
          "name": "get_workspace_status",
          "docstring": "Get comprehensive workspace status for debugging and display",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_override_time_remaining",
          "docstring": "Get formatted time remaining for emergency override",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_state",
          "docstring": "Save current state to file",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_mode_status",
          "docstring": "Get formatted status string for CLI display",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "WorkspaceStateManager",
          "docstring": "Core workspace state management with mode-based permissions and context boundaries.\n\nFeatures:\n- Multi-dimensional mode system ([code][debug], [discuss][meta])\n- Hybrid permission system (capabilities + file restrictions)\n- Smart mode combinations with context awareness\n- Emergency override protocols with time-boxing\n- Integration with existing strict mode system",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "workspace_dir"
              ]
            },
            {
              "name": "_load_or_create_state",
              "docstring": "Load existing workspace state or create default",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_permission_templates",
              "docstring": "Load permission templates for different modes",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "set_mode",
              "docstring": "Set workspace mode(s) with smart combination logic.\n\nArgs:\n    modes: Single mode string \"[code]\" or list of modes [\"code\", \"debug\"]\n    session_id: Optional session identifier\n    \nReturns:\n    Dict with mode change result and applied permissions",
              "line_range": null,
              "parameters": [
                "self",
                "modes",
                "session_id"
              ]
            },
            {
              "name": "_parse_modes_from_string",
              "docstring": "Parse modes from string like '[code][debug]' to ['code', 'debug']",
              "line_range": null,
              "parameters": [
                "self",
                "mode_string"
              ]
            },
            {
              "name": "_combine_mode_permissions",
              "docstring": "Smart combination of mode permissions (Decision: C - Smart Combination)",
              "line_range": null,
              "parameters": [
                "self",
                "modes"
              ]
            },
            {
              "name": "_get_mode_combination_name",
              "docstring": "Get descriptive name for mode combination",
              "line_range": null,
              "parameters": [
                "self",
                "modes"
              ]
            },
            {
              "name": "get_current_state",
              "docstring": "Get current workspace state",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "check_permission",
              "docstring": "Check if operation is permitted under current mode.\n\nArgs:\n    operation: Operation type (e.g., \"write_file\", \"run_command\")\n    target: Optional target (file path, command, etc.)\n    \nReturns:\n    Dict with permission result and reasoning",
              "line_range": null,
              "parameters": [
                "self",
                "operation",
                "target"
              ]
            },
            {
              "name": "_get_required_capability",
              "docstring": "Map operations to required capabilities",
              "line_range": null,
              "parameters": [
                "self",
                "operation"
              ]
            },
            {
              "name": "_is_restricted_target",
              "docstring": "Check if target matches any file restrictions",
              "line_range": null,
              "parameters": [
                "self",
                "target"
              ]
            },
            {
              "name": "set_emergency_override",
              "docstring": "Grant emergency override (Hybrid B+C: Escalation + Time-boxing)\n\nArgs:\n    level: Override level (1=extend permissions, 2=filesystem, 3=system)\n    reason: Reason for override\n    duration_minutes: Override duration",
              "line_range": null,
              "parameters": [
                "self",
                "level",
                "reason",
                "duration_minutes"
              ]
            },
            {
              "name": "_check_emergency_override",
              "docstring": "Check if emergency override is active and not expired",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_strict_mode",
              "docstring": "Integration with existing strict mode system",
              "line_range": null,
              "parameters": [
                "self",
                "strict_tags"
              ]
            },
            {
              "name": "add_decision_workflow",
              "docstring": "Add decision to workflow tracking (for [decide] mode)",
              "line_range": null,
              "parameters": [
                "self",
                "decision_id",
                "decision_data"
              ]
            },
            {
              "name": "get_workspace_status",
              "docstring": "Get comprehensive workspace status for debugging and display",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_override_time_remaining",
              "docstring": "Get formatted time remaining for emergency override",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_state",
              "docstring": "Save current state to file",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_mode_status",
              "docstring": "Get formatted status string for CLI display",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self._load_permission_templates",
          "self._load_or_create_state"
        ],
        "_load_or_create_state": [
          "json.load",
          "self._save_state",
          "datetime.now",
          "open"
        ],
        "_load_permission_templates": [],
        "set_mode": [
          "len",
          "self._combine_mode_permissions",
          "self._save_state",
          "self._get_mode_combination_name",
          "combined_permissions.get",
          "isinstance",
          "self._parse_modes_from_string",
          "datetime.now"
        ],
        "_parse_modes_from_string": [
          "re.findall"
        ],
        "_combine_mode_permissions": [
          "logger.info",
          "template.get",
          "list",
          "set",
          "sorted"
        ],
        "_get_mode_combination_name": [
          "combination_names.get",
          "sorted"
        ],
        "get_current_state": [],
        "check_permission": [
          "self._get_required_capability",
          "self._check_emergency_override",
          "self._is_restricted_target",
          "permissions.get"
        ],
        "_get_required_capability": [
          "operation.startswith",
          "capability_map.items"
        ],
        "_is_restricted_target": [
          "target.startswith",
          "fnmatch.fnmatch",
          "restriction.startswith"
        ],
        "set_emergency_override": [
          "timedelta",
          "self._save_state",
          "datetime.now",
          "expires_at.isoformat"
        ],
        "_check_emergency_override": [
          "override.get",
          "self._save_state",
          "datetime.now",
          "datetime.fromisoformat"
        ],
        "integrate_strict_mode": [
          "self._save_state",
          "datetime.now"
        ],
        "add_decision_workflow": [
          "self._save_state",
          "datetime.now"
        ],
        "get_workspace_status": [
          "self._get_mode_combination_name",
          "len",
          "override.get",
          "self._get_override_time_remaining"
        ],
        "_get_override_time_remaining": [
          "int",
          "remaining.total_seconds",
          "override.get",
          "datetime.now",
          "datetime.fromisoformat"
        ],
        "_save_state": [
          "open",
          "json.dump"
        ],
        "get_mode_status": [
          "self._get_mode_combination_name",
          "override.get"
        ],
        "create_workspace_manager": [
          "WorkspaceStateManager"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "Set",
        "Union",
        "datetime",
        "fnmatch",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "timedelta",
        "timezone",
        "typing"
      ],
      "hash": null,
      "artifact_id": "0ce744f7-209a-417a-b393-5e9aade2d15c"
    },
    {
      "module_id": "src.llmstruct.parsers.__init__",
      "path": "src/llmstruct/parsers/__init__.py",
      "category": "cli",
      "module_doc": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "JavaScriptParser",
        "javascript_parser"
      ],
      "hash": null,
      "artifact_id": "39f2f724-0826-4bc5-919c-981ac4d73988"
    },
    {
      "module_id": "src.llmstruct.parsers.javascript_parser",
      "path": "src/llmstruct/parsers/javascript_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "file_hash",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_metadata",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "parse_module",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "extract_signature",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JavaScriptParser",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "file_hash",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath"
              ]
            },
            {
              "name": "compute_file_metadata",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath",
                "include_hashes"
              ]
            },
            {
              "name": "parse_module",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath",
                "root_dir",
                "include_ranges",
                "include_hashes"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "set"
        ],
        "file_hash": [
          "hashlib.sha256",
          "f.read",
          "open"
        ],
        "compute_file_metadata": [
          "os.stat",
          "self.file_hash",
          "open",
          "sum"
        ],
        "parse_module": [
          "f.read",
          "str",
          "self.compute_file_metadata",
          "open",
          "esprima.parseModule"
        ],
        "extract_signature": [
          "hasattr"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "datetime",
        "esprima",
        "hashlib",
        "os",
        "typing"
      ],
      "hash": null,
      "artifact_id": "d02079aa-3725-4423-8cc1-83c7b04f1488"
    },
    {
      "module_id": "src.llmstruct.parsers.python_parser",
      "path": "src/llmstruct/parsers/python_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "infer_category",
          "docstring": "Infer module category based on its path.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_hash",
          "docstring": "Compute SHA-256 hash of file content.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "analyze_module",
          "docstring": "Analyze Python module and return structured data.",
          "line_range": null,
          "parameters": [
            "file_path",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "visit_Import",
          "docstring": "Capture import statements.",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_ImportFrom",
          "docstring": "Capture from-import statements.",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_FunctionDef",
          "docstring": "Track function definitions and their calls.",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_AsyncFunctionDef",
          "docstring": "Track async function definitions and their calls.",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_Call",
          "docstring": "Capture function calls.",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "AST visitor to collect function calls and dependencies.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "visit_Import",
              "docstring": "Capture import statements.",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_ImportFrom",
              "docstring": "Capture from-import statements.",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_FunctionDef",
              "docstring": "Track function definitions and their calls.",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_AsyncFunctionDef",
              "docstring": "Track async function definitions and their calls.",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_Call",
              "docstring": "Capture function calls.",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ]
        }
      ],
      "callgraph": {
        "infer_category": [
          "Path"
        ],
        "__init__": [
          "set"
        ],
        "visit_Import": [
          "self.generic_visit"
        ],
        "visit_ImportFrom": [
          "self.generic_visit"
        ],
        "visit_FunctionDef": [
          "self.generic_visit",
          "set"
        ],
        "visit_AsyncFunctionDef": [
          "self.generic_visit",
          "set"
        ],
        "visit_Call": [
          "isinstance",
          "self.generic_visit"
        ],
        "compute_file_hash": [
          "hashlib.sha256",
          "f.read",
          "open",
          "logging.error"
        ],
        "analyze_module": [
          "classes.append",
          "f.read",
          "str",
          "functions.append",
          "CallVisitor",
          "compute_file_hash",
          "Path",
          "isinstance",
          "logging.error",
          "ast.walk",
          "list",
          "open",
          "infer_category",
          "ast.get_docstring",
          "sorted",
          "ast.unparse",
          "ast.parse",
          "visitor.visit"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "Set",
        "ast",
        "hashlib",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "b0436dc7-5899-4536-920d-35786126cfe1"
    },
    {
      "module_id": "src.llmstruct.templates.__init__",
      "path": "src/llmstruct/templates/__init__.py",
      "category": "cli",
      "module_doc": "Templates for LLM prompts used in LLMStruct integration.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "cac0210b-49b8-47fe-a369-790428cfa8a4"
    },
    {
      "module_id": "src.llmstruct.validators.__init__",
      "path": "src/llmstruct/validators/__init__.py",
      "category": "cli",
      "module_doc": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "json_validator",
        "validate_struct_json"
      ],
      "hash": null,
      "artifact_id": "a8fe3a97-4f27-4927-adbe-dcb6f1a5c592"
    },
    {
      "module_id": "src.llmstruct.validators.json_validator",
      "path": "src/llmstruct/validators/json_validator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_struct_json",
          "docstring": "Validate a single JSON file against a schema.",
          "line_range": null,
          "parameters": [
            "json_path",
            "schema_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_directory",
          "docstring": "Validate all JSON files in a directory against a schema.",
          "line_range": null,
          "parameters": [
            "directory",
            "schema_path",
            "include_patterns",
            "exclude_patterns"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_struct_json": [
          "schema_file.exists",
          "json_file.exists",
          "str",
          "Path",
          "json.load",
          "logging.error",
          "validate",
          "open",
          "logging.info"
        ],
        "validate_directory": [
          "str",
          "validate_struct_json",
          "Path",
          "any",
          "json_file.match"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "ValidationError",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "sys",
        "typing",
        "validate"
      ],
      "hash": null,
      "artifact_id": "7aba3b10-4ae2-406a-88f5-ceb1f3552da6"
    },
    {
      "module_id": "src.llmstruct.generators.json_generator",
      "path": "src/llmstruct/generators/json_generator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_folder_structure",
          "docstring": "Capture directory and file structure with artifact_id, respecting .gitignore and patterns.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "build_toc_and_modules",
          "docstring": "Build TOC and modules with artifact_id and robust filtering.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "Generate JSON structure for project with artifact_id, summary, and tags.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals",
            "exclude_dirs"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_folder_structure": [
          "structure.append",
          "file_path.relative_to",
          "str",
          "uuid.uuid4",
          "Path",
          "os.walk",
          "any",
          "p.rstrip",
          "file_path.match",
          "p.endswith",
          "set",
          "sorted"
        ],
        "build_toc_and_modules": [
          "len",
          "analyze_module",
          "modules.append",
          "toc.append",
          "str",
          "uuid.uuid4",
          "Path",
          "any",
          "p.rstrip",
          "f.match",
          "p.endswith",
          "set"
        ],
        "generate_json": [
          "len",
          "get_folder_structure",
          "str",
          "uuid.uuid4",
          "sum",
          "Path",
          "list",
          "set",
          "build_toc_and_modules"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "analyze_module",
        "datetime",
        "logging",
        "os",
        "parsers.python_parser",
        "pathlib",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "ed87dba2-2b97-49ae-898b-b520415370b7"
    },
    {
      "module_id": "src.llmstruct.generators.__init__",
      "path": "src/llmstruct/generators/__init__.py",
      "category": "cli",
      "module_doc": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "generate_json",
        "json_generator"
      ],
      "hash": null,
      "artifact_id": "8eb39e00-9731-4da2-9eba-944aefd663bb"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_self_run",
      "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_self_run.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_struct",
          "docstring": "Filter struct.json or init.json based on prompt keywords.",
          "line_range": null,
          "parameters": [
            "struct",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "Attach filtered JSON to LLM prompt, using cache if available.",
          "line_range": null,
          "parameters": [
            "context_path",
            "prompt",
            "cache"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_struct": [
          "module.get",
          "filter_json",
          "struct.get",
          "any",
          "prompt.lower"
        ],
        "attach_to_llm_request": [
          "json.dumps",
          "cache.get_metadata",
          "filter_json",
          "cache.cache_json",
          "context_file.exists",
          "Path",
          "select_json",
          "logging.error",
          "prompt.lower",
          "logging.info",
          "cache.get_full_json",
          "filter_struct"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "JSONCache",
        "List",
        "Path",
        "cache",
        "filter_json",
        "json",
        "json_selector",
        "logging",
        "pathlib",
        "select_json",
        "typing"
      ],
      "hash": null,
      "artifact_id": "5a8dfc61-4992-46bd-bc45-b21224918fa9"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.collector (1)",
      "path": "temp_workfiles/unsorted_mess/22.05.25/collector (1).py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "apply_filters",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "files",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "collect_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "generate_struct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "output"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "apply_filters": [
          "pattern.startswith",
          "fnmatch.fnmatch",
          "filtered.append"
        ],
        "collect_files": [
          "path.relative_to",
          "str",
          "files.append",
          "path.is_file",
          "apply_filters",
          "root_dir.rglob"
        ],
        "generate_struct": [
          "len",
          "logger.info",
          "str",
          "output_path.open",
          "uuid.uuid4",
          "collect_files",
          "Path",
          "json.load",
          "existing.get",
          "output_path.exists",
          "json.dump"
        ],
        "main": [
          "generate_struct"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "logging",
        "pathlib",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "59499f53-7df1-40ed-b241-24afa48c98d8"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.test_self_run",
      "path": "temp_workfiles/unsorted_mess/22.05.25/test_self_run.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "test_filter_json_init_json",
          "docstring": "Test filter_json with init.json structure.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_select_json_partial",
          "docstring": "Test partial JSON loading.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_cache_json",
          "docstring": "Test JSON caching.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_attach_to_llm_request_init_json",
          "docstring": "Test attach_to_llm_request with init.json and cache.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_attach_to_llm_request_missing_file",
          "docstring": "Test attach_to_llm_request with missing file.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_filter_json_init_json": [
          "filter_json"
        ],
        "test_select_json_partial": [
          "str",
          "select_json",
          "open",
          "json.dump"
        ],
        "test_cache_json": [
          "cache.get_metadata",
          "JSONCache",
          "str",
          "cache.cache_json",
          "cache.close",
          "open",
          "cache.get_full_json",
          "json.dump"
        ],
        "test_attach_to_llm_request_init_json": [
          "attach_to_llm_request",
          "JSONCache",
          "str",
          "cache.close",
          "open",
          "json.dump"
        ],
        "test_attach_to_llm_request_missing_file": [
          "attach_to_llm_request",
          "str"
        ]
      },
      "dependencies": [
        "JSONCache",
        "Path",
        "attach_to_llm_request",
        "filter_json",
        "filter_struct",
        "json",
        "llmstruct.cache",
        "llmstruct.json_selector",
        "llmstruct.self_run",
        "pathlib",
        "pytest",
        "select_json"
      ],
      "hash": null,
      "artifact_id": "7a60998b-032d-4af7-a5fb-4a3152db11bf"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.test_cli",
      "path": "temp_workfiles/unsorted_mess/22.05.25/test_cli.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "setup_files",
          "docstring": "Set up test files.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": [
            "pytest.fixture"
          ]
        },
        {
          "name": "test_interactive_with_cli_json",
          "docstring": "Test interactive mode with cli.json.",
          "line_range": null,
          "parameters": [
            "setup_files",
            "monkeypatch"
          ],
          "decorators": [
            "pytest.mark.asyncio"
          ]
        }
      ],
      "classes": [],
      "callgraph": {
        "setup_files": [
          "json.dumps"
        ],
        "test_interactive_with_cli_json": [
          "AsyncMock",
          "str",
          "type",
          "inputs.pop",
          "monkeypatch.setattr",
          "patch.object",
          "interactive"
        ]
      },
      "dependencies": [
        "AsyncMock",
        "LLMClient",
        "Path",
        "context",
        "dogfood",
        "interactive",
        "json",
        "llmstruct",
        "llmstruct.cli",
        "patch",
        "pathlib",
        "pytest",
        "read_file_content",
        "review",
        "unittest.mock"
      ],
      "hash": null,
      "artifact_id": "02391f14-c5e7-4771-8dd5-8ca4cda0b021"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.deploy_embedded_files (1)",
      "path": "temp_workfiles/unsorted_mess/22.05.25/deploy_embedded_files (1).py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_json",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "data",
            "schema"
          ],
          "decorators": []
        },
        {
          "name": "backup_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "target_dir",
            "backup_root"
          ],
          "decorators": []
        },
        {
          "name": "deploy_embedded_files",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_json": [
          "logger.warning",
          "validate"
        ],
        "backup_files": [
          "logger.info",
          "target_dir.exists",
          "shutil.copytree",
          "datetime.now"
        ],
        "deploy_embedded_files": [
          "logger.info",
          "target_path.exists",
          "f.write",
          "backup_files",
          "Path",
          "logger.error",
          "validate_json",
          "target_path.open",
          "EMBEDDED_FILES.get",
          "EMBEDDED_FILES.items",
          "json.dump"
        ],
        "main": [
          "deploy_embedded_files"
        ]
      },
      "dependencies": [
        "Path",
        "ValidationError",
        "datetime",
        "json",
        "jsonschema",
        "logging",
        "os",
        "pathlib",
        "shutil",
        "validate"
      ],
      "hash": null,
      "artifact_id": "76b1f066-734e-4e7b-937c-4dfbebef1ab8"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_json_selector",
      "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_json_selector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_json",
          "docstring": "Filter JSON data by key-value pair and select fields.",
          "line_range": null,
          "parameters": [
            "data",
            "filter_key",
            "filter_value",
            "fields"
          ],
          "decorators": []
        },
        {
          "name": "select_json",
          "docstring": "Load and filter JSON file, optionally parsing partially.",
          "line_range": null,
          "parameters": [
            "json_path",
            "filter_key",
            "filter_value",
            "fields",
            "partial"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_json": [
          "isinstance",
          "item.get",
          "data.get",
          "filtered.append"
        ],
        "select_json": [
          "filter_json",
          "json_file.exists",
          "ijson.parse",
          "f.seek",
          "filtered.append",
          "Path",
          "json.load",
          "logging.error",
          "open",
          "path.append",
          "prefix.startswith",
          "current_item.get"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "ijson",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "00591868-01d0-4086-b13a-379d1207ae7a"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.collector",
      "path": "temp_workfiles/unsorted_mess/22.05.25/collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "generate_project_json",
          "docstring": "Generate project JSON with schema validation.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "output_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "generate_project_json": [
          "str",
          "cli_path.exists",
          "json.dump",
          "uuid.uuid4",
          "json.load",
          "Path",
          "validate",
          "open",
          "logging.info",
          "cli_path.open"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "validate"
      ],
      "hash": null,
      "artifact_id": "096fdb10-b4aa-481b-8c5f-9c715bfe80d1"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.scripts_validate_refs",
      "path": "temp_workfiles/unsorted_mess/22.05.25/scripts_validate_refs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_references",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_references": [
          "broken_links.append",
          "logger.info",
          "source_file.exists",
          "logger.warning",
          "target_file.exists",
          "json.load",
          "idea.get",
          "Path",
          "logger.error",
          "enumerate",
          "json.dump"
        ],
        "main": [
          "validate_references"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "db29d836-6d63-49ad-b1bf-8d3152a14524"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_cache",
      "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_cache.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize SQLite cache for JSON files.",
          "line_range": null,
          "parameters": [
            "self",
            "db_path"
          ],
          "decorators": []
        },
        {
          "name": "create_tables",
          "docstring": "Create tables for metadata and file paths.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cache_json",
          "docstring": "Cache JSON metadata and store full file path.",
          "line_range": null,
          "parameters": [
            "self",
            "json_path",
            "artifact_id",
            "summary",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "get_metadata",
          "docstring": "Retrieve metadata by artifact_id.",
          "line_range": null,
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "get_full_json",
          "docstring": "Load full JSON by artifact_id.",
          "line_range": null,
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Close database connection.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JSONCache",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize SQLite cache for JSON files.",
              "line_range": null,
              "parameters": [
                "self",
                "db_path"
              ]
            },
            {
              "name": "create_tables",
              "docstring": "Create tables for metadata and file paths.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cache_json",
              "docstring": "Cache JSON metadata and store full file path.",
              "line_range": null,
              "parameters": [
                "self",
                "json_path",
                "artifact_id",
                "summary",
                "tags"
              ]
            },
            {
              "name": "get_metadata",
              "docstring": "Retrieve metadata by artifact_id.",
              "line_range": null,
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "get_full_json",
              "docstring": "Load full JSON by artifact_id.",
              "line_range": null,
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "close",
              "docstring": "Close database connection.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.create_tables",
          "sqlite3.connect"
        ],
        "create_tables": [],
        "cache_json": [
          "json.dumps",
          "f.read",
          "json_file.exists",
          "str",
          "content.encode",
          "Path",
          "logging.error",
          "open",
          "logging.info",
          "hashlib.sha256"
        ],
        "get_metadata": [
          "cursor.fetchone",
          "json.loads"
        ],
        "get_full_json": [
          "json.load",
          "cursor.fetchone",
          "logging.error",
          "open"
        ],
        "close": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "hashlib",
        "json",
        "logging",
        "pathlib",
        "sqlite3",
        "typing"
      ],
      "hash": null,
      "artifact_id": "047ecfee-e10d-4399-b2d3-cac7d9b3fc55"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.cli_parser",
      "path": "temp_workfiles/unsorted_mess/22.05.25/cli_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "parse_argparse",
          "docstring": "Parse argparse setup in cli.py to extract commands and arguments.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "generate_cli_json",
          "docstring": "Generate cli.json from cli.py.",
          "line_range": null,
          "parameters": [
            "cli_path",
            "output_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "parse_argparse": [
          "cmd_args.append",
          "commands.append",
          "f.read",
          "arg_name.lstrip",
          "next",
          "arg_name.startswith",
          "isinstance",
          "any",
          "open",
          "ast.parse",
          "ast.walk"
        ],
        "generate_cli_json": [
          "parse_argparse",
          "str",
          "uuid.uuid4",
          "json.load",
          "validate",
          "open",
          "json.dump"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "ast",
        "json",
        "jsonschema",
        "pathlib",
        "typing",
        "uuid",
        "validate"
      ],
      "hash": null,
      "artifact_id": "5f006b43-7ec4-4507-bf82-50b6cf4c607e"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.scripts_collector",
      "path": "temp_workfiles/unsorted_mess/22.05.25/scripts_collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "apply_filters",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "files",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "collect_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "generate_struct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "output"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "apply_filters": [
          "pattern.startswith",
          "fnmatch.fnmatch",
          "filtered.append"
        ],
        "collect_files": [
          "path.relative_to",
          "str",
          "files.append",
          "path.is_file",
          "apply_filters",
          "root_dir.rglob"
        ],
        "generate_struct": [
          "len",
          "logger.info",
          "str",
          "output_path.open",
          "uuid.uuid4",
          "collect_files",
          "Path",
          "json.load",
          "existing.get",
          "output_path.exists",
          "json.dump"
        ],
        "main": [
          "generate_struct"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "logging",
        "pathlib",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "2c6af87e-5860-431b-b011-8d760e5404f8"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.cache",
      "path": "temp_workfiles/unsorted_mess/22.05.25/cache.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "cache_path",
            "max_size"
          ],
          "decorators": []
        },
        {
          "name": "load_cache",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_cache",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "update_cache",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "task_id",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "get_context",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "task_id"
          ],
          "decorators": []
        },
        {
          "name": "clear_cache",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "task_id"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ChatCache",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "cache_path",
                "max_size"
              ]
            },
            {
              "name": "load_cache",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_cache",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "update_cache",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "task_id",
                "message"
              ]
            },
            {
              "name": "get_context",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "task_id"
              ]
            },
            {
              "name": "clear_cache",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "task_id"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.load_cache"
        ],
        "load_cache": [
          "json.load",
          "open"
        ],
        "save_cache": [
          "open",
          "json.dump"
        ],
        "update_cache": [
          "len",
          "self.save_cache",
          "datetime.utcnow"
        ],
        "get_context": [],
        "clear_cache": [
          "self.save_cache"
        ],
        "main": [
          "json.dumps",
          "cache.get_context",
          "ChatCache",
          "cache.update_cache",
          "print"
        ]
      },
      "dependencies": [
        "datetime",
        "json",
        "os"
      ],
      "hash": null,
      "artifact_id": "6cc30af9-c5e8-41d8-918b-ddaa22930772"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.validate_refs",
      "path": "temp_workfiles/unsorted_mess/22.05.25/validate_refs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_references",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_references": [
          "broken_links.append",
          "logger.info",
          "source_file.exists",
          "logger.warning",
          "target_file.exists",
          "json.load",
          "idea.get",
          "Path",
          "logger.error",
          "enumerate",
          "json.dump"
        ],
        "main": [
          "validate_references"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "2c9f7583-3757-49dd-b10e-f3a80ab7f883"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.test_deploy_embedded_files",
      "path": "temp_workfiles/unsorted_mess/22.05.25/test_deploy_embedded_files.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "setup_dirs",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": [
            "pytest.fixture"
          ]
        },
        {
          "name": "test_deploy_embedded_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "setup_dirs"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "setup_dirs": [
          "schemas_dir.mkdir",
          "data_dir.mkdir",
          "json.dumps",
          "docs_dir.mkdir"
        ],
        "test_deploy_embedded_files": [
          "len",
          "backup_root.glob",
          "json.load",
          "list",
          "deploy_embedded_files"
        ]
      },
      "dependencies": [
        "Path",
        "deploy_embedded_files",
        "json",
        "pathlib",
        "pytest",
        "scripts.deploy_embedded_files"
      ],
      "hash": null,
      "artifact_id": "8e4d60b3-2a31-44e5-a27c-885f4b98c336"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.cli",
      "path": "temp_workfiles/unsorted_mess/22.05.25/cli.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_cli_json",
          "docstring": "Load cli.json for command metadata.",
          "line_range": null,
          "parameters": [
            "cli_json_path"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with LLM, using cli.json for command metadata.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_cli_json": [
          "Path",
          "json.load",
          "cli_json_path.open",
          "cli_json_path.exists"
        ],
        "interactive": [
          "logging.warning",
          "print",
          "user_input.lower",
          "load_cli_json",
          "JSONCache",
          "cli_json.get",
          "LLMClient",
          "cache.close",
          "Path",
          "cmd.get",
          "parse_files_from_response",
          "attach_to_llm_request",
          "client.query",
          "write_to_file",
          "t.format",
          "input",
          "logging.error",
          "any",
          "prompt.lower",
          "parse"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "generate_json",
        "get_folder_structure",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "logging",
        "os",
        "pathlib",
        "re",
        "toml",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "a06702fb-477e-4aa2-985c-699285284a32"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.deploy_embedded_files",
      "path": "temp_workfiles/unsorted_mess/22.05.25/deploy_embedded_files.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_json",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "data",
            "schema"
          ],
          "decorators": []
        },
        {
          "name": "backup_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "target_dir",
            "backup_root"
          ],
          "decorators": []
        },
        {
          "name": "deploy_embedded_files",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_json": [
          "logger.warning",
          "validate"
        ],
        "backup_files": [
          "logger.info",
          "target_dir.exists",
          "shutil.copytree",
          "datetime.now"
        ],
        "deploy_embedded_files": [
          "logger.info",
          "target_path.exists",
          "f.write",
          "backup_files",
          "Path",
          "logger.error",
          "validate_json",
          "target_path.open",
          "EMBEDDED_FILES.get",
          "EMBEDDED_FILES.items",
          "json.dump"
        ],
        "main": [
          "deploy_embedded_files"
        ]
      },
      "dependencies": [
        "Path",
        "ValidationError",
        "datetime",
        "json",
        "jsonschema",
        "logging",
        "os",
        "pathlib",
        "shutil",
        "validate"
      ],
      "hash": null,
      "artifact_id": "486e6779-de1f-4c42-b2f6-f31e0cbbd40a"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.src_llmstruct_cli",
      "path": "temp_workfiles/unsorted_mess/22.05.25/src_llmstruct_cli.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from llmstruct.toml or return empty dict.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default /tmp) and return the path.",
          "line_range": null,
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": null,
          "parameters": [
            "response"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "gitignore_path.exists",
          "Path",
          "line.strip",
          "line.startswith",
          "logging.error",
          "gitignore_path.open"
        ],
        "load_config": [
          "config_path.exists",
          "toml.load",
          "Path",
          "config_path\u30aa\u30fc\u30d7\u30f3",
          "logging.error"
        ],
        "read_file_content": [
          "f.read",
          "path.open",
          "Path",
          "path.is_file",
          "logging.error"
        ],
        "write_to_file": [
          "str",
          "f.write",
          "file_path.open",
          "base_path.mkdir",
          "logging.warning",
          "Path",
          "logging.error",
          "file_path.exists",
          "logging.info"
        ],
        "parse_files_from_response": [
          "content.strip",
          "filename.strip",
          "files.append",
          "re.findall"
        ],
        "interactive": [
          "json.dumps",
          "scan_match.group",
          "logging.warning",
          "print",
          "user_input.lower",
          "os.listdir",
          "JSONCache",
          "read_file_content",
          "re.search",
          "load_gitignore",
          "LLMClient",
          "cache.close",
          "Path",
          "write_dir.startswith",
          "parse_files_from_response",
          "sorted",
          "write_match.group",
          "attach_to_llm_request",
          "client.query",
          "write_to_file",
          "get_folder_structure",
          "input",
          "files_to_write.append",
          "logging.error",
          "parse"
        ],
        "parse": [
          "JSONCache",
          "config.get",
          "cache.cache_json",
          "cache.close",
          "generate_json",
          "logging.warning",
          "Path",
          "load_config",
          "logging.error",
          "logging.info",
          "load_gitignore",
          "json.dump"
        ],
        "query": [
          "client.query",
          "LLMClient",
          "JSONCache",
          "cache.close",
          "Path",
          "logging.error",
          "logging.info",
          "json.dump"
        ],
        "context": [
          "logging.warning"
        ],
        "dogfood": [
          "logging.warning"
        ],
        "review": [
          "logging.warning"
        ],
        "main": [
          "parser.parse_args",
          "interactive",
          "subparsers.add_parser",
          "parser.add_subparsers",
          "review",
          "asyncio.run",
          "query_parser.add_argument",
          "parse_parser.add_argument",
          "interactive_parser.add_argument",
          "context_parser.add_argument",
          "review_parser.add_argument",
          "argparse.ArgumentParser",
          "query",
          "parse",
          "context",
          "dogfood_parser.add_argument",
          "dogfood"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "generate_json",
        "get_folder_structure",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "logging",
        "os",
        "pathlib",
        "re",
        "toml",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "4820a12f-13ca-405e-ab6c-f5836761051a"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.22.05.25.extract_artifacts",
      "path": "temp_workfiles/unsorted_mess/22.05.25/extract_artifacts.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "parse_args",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_artifacts_index",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "index_path"
          ],
          "decorators": []
        },
        {
          "name": "save_artifacts_index",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "index",
            "index_path"
          ],
          "decorators": []
        },
        {
          "name": "calculate_sha256",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "content"
          ],
          "decorators": []
        },
        {
          "name": "extract_artifacts",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "html_file",
            "output_dir",
            "index_path"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "parse_args": [
          "parser.parse_args",
          "argparse.ArgumentParser",
          "parser.add_argument"
        ],
        "load_artifacts_index": [
          "json.load",
          "open"
        ],
        "save_artifacts_index": [
          "open",
          "json.dump"
        ],
        "calculate_sha256": [
          "content.encode",
          "hashlib.sha256"
        ],
        "extract_artifacts": [
          "calculate_sha256",
          "extracted.append",
          "BeautifulSoup",
          "f.read",
          "artifact.get",
          "datetime.utcnow",
          "f.write",
          "os.makedirs",
          "load_artifacts_index",
          "print",
          "title.endswith",
          "open",
          "save_artifacts_index",
          "soup.find_all",
          "content_type.split"
        ],
        "main": [
          "parse_args",
          "print",
          "extract_artifacts"
        ]
      },
      "dependencies": [
        "BeautifulSoup",
        "argparse",
        "bs4",
        "datetime",
        "hashlib",
        "json",
        "os",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "4308219e-5c09-4aa0-939a-89d849011456"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.dumper",
      "path": "temp_workfiles/unsorted_mess/dump/dumper.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "json_hash",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "obj"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "json_hash": [
          "dumped.encode",
          "json.dumps",
          "hashlib.md5"
        ]
      },
      "dependencies": [
        "glob",
        "hashlib",
        "json",
        "os"
      ],
      "hash": null,
      "artifact_id": "ef897347-8ec1-45d5-a7b7-20f06d52acf2"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_generators___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_generators___init__.py",
      "category": "core",
      "module_doc": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "JSONGenerator",
        "json_generator"
      ],
      "hash": null,
      "artifact_id": "b6fb2528-59dd-47d6-b406-7ccf312aa6c2"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.examples_python_project_utils",
      "path": "temp_workfiles/unsorted_mess/dump/examples_python_project_utils.py",
      "category": "core",
      "module_doc": "Utility functions for the sample project.",
      "functions": [
        {
          "name": "helper",
          "docstring": "Help the main function.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "log",
          "docstring": "Log a message.",
          "line_range": null,
          "parameters": [
            "message"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "helper": [
          "log"
        ],
        "log": [
          "logging.info"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": null,
      "artifact_id": "9aebf340-619e-4787-8acd-9b172a5915ce"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_ideas_tree",
      "path": "temp_workfiles/unsorted_mess/dump/generate_ideas_tree.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "Path",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "83b7c80a-f42b-4a29-949f-4156da46ff60"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct___init__.py",
      "category": "core",
      "module_doc": "LLMStruct: A tool for generating JSON-based code structures for LLM integration.\n\nThis package provides modular parsers, generators, and validators to create and validate\nJSON representations of code projects, supporting automation and context-aware LLM assistance.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "6591874f-b6fb-4689-ae6c-265b4a9e2084"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_efficiency1",
      "path": "temp_workfiles/unsorted_mess/dump/test_efficiency1.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "get_system_metrics",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "setup_proxy",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "proxy_url"
          ],
          "decorators": []
        },
        {
          "name": "run_llm_request",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "payload",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "test_with_llmstruct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "project_path",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "test_without_llmstruct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "project_path",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "evaluate_accuracy",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "response_text",
            "expected"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_system_metrics": [
          "psutil.virtual_memory",
          "psutil.cpu_percent"
        ],
        "setup_proxy": [
          "os.getenv"
        ],
        "run_llm_request": [
          "len",
          "requests.Session",
          "response.json",
          "session.post",
          "get_system_metrics",
          "time.perf_counter"
        ],
        "test_with_llmstruct": [
          "f.read",
          "str",
          "struct_path.exists",
          "Path",
          "open",
          "subprocess.run",
          "run_llm_request"
        ],
        "test_without_llmstruct": [
          "Path",
          "run_llm_request",
          "f.read",
          "open"
        ],
        "evaluate_accuracy": [
          "len",
          "response_text.lower",
          "sum"
        ],
        "main": [
          "range",
          "parser.parse_args",
          "parser.add_argument",
          "test_with_llmstruct",
          "setup_proxy",
          "evaluate_accuracy",
          "print",
          "open",
          "argparse.ArgumentParser",
          "test_without_llmstruct",
          "json.dump"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "json",
        "os",
        "pathlib",
        "psutil",
        "requests",
        "subprocess",
        "time"
      ],
      "hash": null,
      "artifact_id": "124e5850-59f5-434f-9706-4f30234fd84f"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_efficiency",
      "path": "temp_workfiles/unsorted_mess/dump/test_efficiency.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "get_system_metrics",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run_llm_request",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "payload"
          ],
          "decorators": []
        },
        {
          "name": "test_with_llmstruct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "test_without_llmstruct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "evaluate_accuracy",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "response_text",
            "expected"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_system_metrics": [
          "psutil.virtual_memory",
          "psutil.cpu_percent"
        ],
        "run_llm_request": [
          "len",
          "requests.post",
          "response.json",
          "get_system_metrics",
          "time.perf_counter"
        ],
        "test_with_llmstruct": [
          "f.read",
          "str",
          "struct_path.exists",
          "Path",
          "open",
          "subprocess.run",
          "run_llm_request"
        ],
        "test_without_llmstruct": [
          "Path",
          "run_llm_request",
          "f.read",
          "open"
        ],
        "evaluate_accuracy": [
          "len",
          "response_text.lower",
          "sum"
        ],
        "main": [
          "range",
          "test_with_llmstruct",
          "evaluate_accuracy",
          "print",
          "open",
          "test_without_llmstruct",
          "json.dump"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "pathlib",
        "psutil",
        "requests",
        "subprocess",
        "time"
      ],
      "hash": null,
      "artifact_id": "69aeb298-a0c6-4401-b2dd-06bc93188200"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.grok",
      "path": "temp_workfiles/unsorted_mess/dump/grok.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "test_grok",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_key",
            "prompt",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "api_key",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "generate",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GrokClient",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "api_key",
                "proxy"
              ]
            },
            {
              "name": "generate",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "requests.Session"
        ],
        "generate": [
          "prompt.split",
          "len",
          "response.raise_for_status",
          "response.json"
        ],
        "test_grok": [
          "time.perf_counter",
          "client.generate",
          "GrokClient"
        ]
      },
      "dependencies": [
        "os",
        "requests"
      ],
      "hash": null,
      "artifact_id": "f7878e34-5450-4e8b-b9a3-3937b17a72f9"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct___main__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct___main__.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "cli",
        "main"
      ],
      "hash": null,
      "artifact_id": "bfb1437f-482d-4903-a6ef-4c530e92d4ea"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_ru_docs (1)",
      "path": "temp_workfiles/unsorted_mess/dump/generate_ru_docs (1).py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "Path",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "cfd15cc5-12b7-4712-9d9a-d1d3cbd7b3ae"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_efficiency (1)",
      "path": "temp_workfiles/unsorted_mess/dump/test_efficiency (1).py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "get_system_metrics",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "setup_proxy",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "proxy_url"
          ],
          "decorators": []
        },
        {
          "name": "run_llm_request",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "payload",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "check_llmstruct_cli",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_with_llmstruct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "project_path",
            "proxy",
            "use_placeholder"
          ],
          "decorators": []
        },
        {
          "name": "test_without_llmstruct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "project_path",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "test_with_grok",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_key",
            "project_path",
            "proxy",
            "use_placeholder"
          ],
          "decorators": []
        },
        {
          "name": "evaluate_accuracy",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "response_text",
            "expected"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_system_metrics": [
          "psutil.virtual_memory",
          "psutil.cpu_percent"
        ],
        "setup_proxy": [
          "os.getenv"
        ],
        "run_llm_request": [
          "len",
          "requests.Session",
          "response.json",
          "session.post",
          "get_system_metrics",
          "time.perf_counter"
        ],
        "check_llmstruct_cli": [
          "shutil.which"
        ],
        "test_with_llmstruct": [
          "FileNotFoundError",
          "subprocess.run",
          "target_path.exists",
          "f.read",
          "str",
          "Path",
          "open",
          "check_llmstruct_cli",
          "run_llm_request",
          "json.dump"
        ],
        "test_without_llmstruct": [
          "Path",
          "run_llm_request",
          "f.read",
          "open"
        ],
        "test_with_grok": [
          "FileNotFoundError",
          "target_path.exists",
          "f.read",
          "Path",
          "test_grok",
          "open",
          "json.dump"
        ],
        "evaluate_accuracy": [
          "len",
          "response_text.lower",
          "sum"
        ],
        "main": [
          "range",
          "parser.parse_args",
          "parser.add_argument",
          "test_with_llmstruct",
          "str",
          "setup_proxy",
          "evaluate_accuracy",
          "test_with_grok",
          "print",
          "open",
          "check_llmstruct_cli",
          "argparse.ArgumentParser",
          "test_without_llmstruct",
          "json.dump"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "json",
        "os",
        "pathlib",
        "psutil",
        "requests",
        "shutil",
        "src.llmstruct.grok",
        "subprocess",
        "test_grok",
        "time"
      ],
      "hash": null,
      "artifact_id": "f8b7c716-fc1f-4319-b0b0-d3a9c6414226"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.json_generator",
      "path": "temp_workfiles/unsorted_mess/dump/json_generator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_folder_structure",
          "docstring": "Capture directory and file structure with artifact_id, respecting .gitignore and patterns.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "build_toc_and_modules",
          "docstring": "Build TOC and modules with artifact_id and robust filtering.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "Generate JSON structure for project with artifact_id, summary, and tags.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals",
            "exclude_dirs"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_folder_structure": [
          "structure.append",
          "file_path.relative_to",
          "str",
          "uuid.uuid4",
          "Path",
          "os.walk",
          "any",
          "p.rstrip",
          "file_path.match",
          "p.endswith",
          "set",
          "sorted"
        ],
        "build_toc_and_modules": [
          "len",
          "analyze_module",
          "modules.append",
          "toc.append",
          "str",
          "uuid.uuid4",
          "Path",
          "any",
          "p.rstrip",
          "f.match",
          "p.endswith",
          "set"
        ],
        "generate_json": [
          "len",
          "get_folder_structure",
          "str",
          "uuid.uuid4",
          "sum",
          "Path",
          "list",
          "set",
          "build_toc_and_modules"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "analyze_module",
        "datetime",
        "json",
        "logging",
        "os",
        "parsers.python_parser",
        "pathlib",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "f13d7bdd-c4d7-4132-a026-bc1d26a2dc83"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.llm_client_engines",
      "path": "temp_workfiles/unsorted_mess/dump/llm_client_engines.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "call_llm",
          "docstring": "Call the specified LLM backend with the given prompt.",
          "line_range": null,
          "parameters": [
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "call_ollama",
          "docstring": "Call Ollama with the specified prompt.",
          "line_range": null,
          "parameters": [
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "call_openai",
          "docstring": "Call OpenAI API with the specified prompt.",
          "line_range": null,
          "parameters": [
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "call_anthropic",
          "docstring": "Call Anthropic API with the specified prompt.",
          "line_range": null,
          "parameters": [
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "call_grok",
          "docstring": "Call xAI Grok API with the specified prompt.",
          "line_range": null,
          "parameters": [
            "prompt"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "call_llm": [
          "call_anthropic",
          "call_grok",
          "str",
          "call_openai",
          "RuntimeError",
          "ValueError",
          "call_ollama"
        ],
        "call_ollama": [
          "subprocess.run"
        ],
        "call_openai": [
          "os.getenv",
          "ValueError",
          "openai.OpenAI"
        ],
        "call_anthropic": [
          "os.getenv",
          "anthropic.Anthropic",
          "ValueError"
        ],
        "call_grok": [
          "requests.post",
          "response.json",
          "os.getenv",
          "ValueError",
          "response.raise_for_status"
        ]
      },
      "dependencies": [
        "LLM_BACKEND",
        "MODEL_NAME",
        "anthropic",
        "json",
        "llm_client.config",
        "openai",
        "os",
        "requests",
        "subprocess"
      ],
      "hash": null,
      "artifact_id": "57642827-5c69-454d-af82-d8beef5c1395"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.llm_client_config",
      "path": "temp_workfiles/unsorted_mess/dump/llm_client_config.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "os"
      ],
      "hash": null,
      "artifact_id": "95289fb6-f208-4c96-87d8-6dc5b88d3e5e"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_parsers_python_parser",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_parsers_python_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "file_hash",
          "docstring": "Compute SHA-256 hash of file contents.",
          "line_range": null,
          "parameters": [
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "extract_comments",
          "docstring": "Extract single-line and multi-line comments using tokenize.",
          "line_range": null,
          "parameters": [
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_metadata",
          "docstring": "Compute file size, last modified time, line count, and optional hash.",
          "line_range": null,
          "parameters": [
            "filepath",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "infer_category",
          "docstring": "Infer module category based on path and dependencies.",
          "line_range": null,
          "parameters": [
            "path",
            "dependencies"
          ],
          "decorators": []
        },
        {
          "name": "get_signature",
          "docstring": "Generate function signature.",
          "line_range": null,
          "parameters": [
            "func_node"
          ],
          "decorators": []
        },
        {
          "name": "extract_dependencies",
          "docstring": "Extract module-level imports.",
          "line_range": null,
          "parameters": [
            "tree"
          ],
          "decorators": []
        },
        {
          "name": "analyze_module",
          "docstring": "Analyze a Python module in a single pass.",
          "line_range": null,
          "parameters": [
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "visit_Call",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_Import",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_ImportFrom",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "Extract function calls and module dependencies.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "visit_Call",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_Import",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_ImportFrom",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ]
        }
      ],
      "callgraph": {
        "file_hash": [
          "hashlib.sha256",
          "f.read",
          "open",
          "logging.error"
        ],
        "extract_comments": [
          "tokenize.tokenize",
          "logging.error",
          "comments.append",
          "open"
        ],
        "compute_file_metadata": [
          "os.stat",
          "sum",
          "file_hash",
          "logging.error",
          "open"
        ],
        "infer_category": [
          "any",
          "path.lower"
        ],
        "get_signature": [],
        "__init__": [
          "set"
        ],
        "visit_Call": [
          "isinstance",
          "self.generic_visit"
        ],
        "visit_Import": [
          "self.generic_visit"
        ],
        "visit_ImportFrom": [
          "self.generic_visit"
        ],
        "extract_dependencies": [
          "dependencies.add",
          "isinstance",
          "sorted",
          "dependencies.update",
          "set",
          "ast.walk"
        ],
        "analyze_module": [
          "f.read",
          "compute_file_metadata",
          "extract_dependencies",
          "CallVisitor",
          "open",
          "infer_category",
          "methods.append",
          "classes.append",
          "str",
          "functions.append",
          "hashlib.sha256",
          "getattr",
          "extract_comments",
          "ast.parse",
          "sorted",
          "source.splitlines",
          "get_signature",
          "isinstance",
          "logging.error",
          "ast.get_docstring",
          "visitor.visit"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "Set",
        "ast",
        "hashlib",
        "logging",
        "os",
        "pathlib",
        "tokenize",
        "typing"
      ],
      "hash": null,
      "artifact_id": "2e89bd67-fe04-457d-82da-1875a70fea7b"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_generators_json_generator",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_generators_json_generator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_folder_structure",
          "docstring": "Capture directory and file structure, respecting .gitignore and patterns.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns"
          ],
          "decorators": []
        },
        {
          "name": "build_toc_and_modules",
          "docstring": "Build TOC and modules with robust .gitignore filtering using pathlib.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "Generate JSON structure for project.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_folder_structure": [
          "structure.append",
          "file_path.relative_to",
          "str",
          "exclude_patterns.extend",
          "fnmatch.fnmatch",
          "dir_path.relative_to",
          "Path",
          "os.walk",
          "rel_dir.split",
          "any",
          "logging.debug",
          "dirnames.clear",
          "sorted"
        ],
        "build_toc_and_modules": [
          "len",
          "modules.append",
          "file_path.relative_to",
          "str",
          "exclude_patterns.extend",
          "toc.append",
          "fnmatch.fnmatch",
          "dir_path.relative_to",
          "sum",
          "Path",
          "os.walk",
          "rel_dir.split",
          "any",
          "logging.info",
          "logging.debug",
          "analyze_module"
        ],
        "generate_json": [
          "len",
          "build_toc_and_modules",
          "get_folder_structure"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "Tuple",
        "analyze_module",
        "datetime",
        "json",
        "logging",
        "os",
        "parsers.python_parser",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "85662860-23d2-4419-a3b3-0598efd68bba"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_llmstruct",
      "path": "temp_workfiles/unsorted_mess/dump/generate_llmstruct.py",
      "category": "core",
      "module_doc": "Generate JSON for workspace based on user instructions template.\n\nCreates structure:\n- metadata with description, instructions, and version\n- toc with module summaries and categories\n- modules with detailed function/class info, comments, call graphs, and categories",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore, logging loaded patterns.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_goals",
          "docstring": "Load goals from semicolon-separated string, file, or interactive editor.",
          "line_range": null,
          "parameters": [
            "goals_input"
          ],
          "decorators": []
        },
        {
          "name": "file_hash",
          "docstring": "Compute SHA-256 hash of file contents.",
          "line_range": null,
          "parameters": [
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "extract_comments",
          "docstring": "Extract single-line and multi-line comments using tokenize.",
          "line_range": null,
          "parameters": [
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_metadata",
          "docstring": "Compute file size, last modified time, line count, and optional hash.",
          "line_range": null,
          "parameters": [
            "filepath",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "infer_category",
          "docstring": "Infer module category based on path and dependencies.",
          "line_range": null,
          "parameters": [
            "path",
            "dependencies"
          ],
          "decorators": []
        },
        {
          "name": "get_signature",
          "docstring": "Generate function signature.",
          "line_range": null,
          "parameters": [
            "func_node"
          ],
          "decorators": []
        },
        {
          "name": "extract_dependencies",
          "docstring": "Extract module-level imports.",
          "line_range": null,
          "parameters": [
            "tree"
          ],
          "decorators": []
        },
        {
          "name": "analyze_module",
          "docstring": "Analyze a Python module in a single pass.",
          "line_range": null,
          "parameters": [
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "build_toc_and_modules",
          "docstring": "Build TOC and modules with robust .gitignore filtering using pathlib.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "Generate JSON structure for project.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "include_ranges",
            "include_hashes",
            "goals_input"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "visit_Call",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_Import",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_ImportFrom",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "Extract function calls and module dependencies.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "visit_Call",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_Import",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_ImportFrom",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ]
        }
      ],
      "callgraph": {
        "load_gitignore": [
          "len",
          "logging.warning",
          "line.strip",
          "line.startswith",
          "logging.error",
          "open",
          "logging.info"
        ],
        "load_goals": [
          "len",
          "goals_input.split",
          "temp.write",
          "temp.flush",
          "line.strip",
          "line.startswith",
          "logging.error",
          "open",
          "tempfile.NamedTemporaryFile",
          "subprocess.run",
          "logging.info",
          "os.unlink",
          "g.strip"
        ],
        "file_hash": [
          "hashlib.sha256",
          "f.read",
          "open",
          "logging.error"
        ],
        "extract_comments": [
          "tokenize.tokenize",
          "logging.error",
          "comments.append",
          "open"
        ],
        "compute_file_metadata": [
          "os.stat",
          "sum",
          "file_hash",
          "logging.error",
          "open"
        ],
        "infer_category": [
          "any",
          "path.lower"
        ],
        "get_signature": [],
        "__init__": [
          "set"
        ],
        "visit_Call": [
          "isinstance",
          "self.generic_visit"
        ],
        "visit_Import": [
          "self.generic_visit"
        ],
        "visit_ImportFrom": [
          "self.generic_visit"
        ],
        "extract_dependencies": [
          "dependencies.add",
          "isinstance",
          "sorted",
          "dependencies.update",
          "set",
          "ast.walk"
        ],
        "analyze_module": [
          "f.read",
          "compute_file_metadata",
          "extract_dependencies",
          "CallVisitor",
          "open",
          "infer_category",
          "methods.append",
          "classes.append",
          "str",
          "functions.append",
          "hashlib.sha256",
          "getattr",
          "extract_comments",
          "ast.parse",
          "sorted",
          "source.splitlines",
          "get_signature",
          "isinstance",
          "logging.error",
          "ast.get_docstring",
          "visitor.visit"
        ],
        "build_toc_and_modules": [
          "len",
          "modules.append",
          "file_path.relative_to",
          "str",
          "exclude_patterns.extend",
          "toc.append",
          "fnmatch.fnmatch",
          "dir_path.relative_to",
          "logging.debug",
          "Path",
          "sum",
          "os.walk",
          "any",
          "rel_dir.split",
          "logging.info",
          "load_gitignore",
          "analyze_module"
        ],
        "generate_json": [
          "load_goals",
          "len",
          "build_toc_and_modules"
        ],
        "main": [
          "parser.parse_args",
          "parser.add_argument",
          "logging.warning",
          "generate_json",
          "logging.info",
          "logging.error",
          "open",
          "language_patterns.get",
          "argparse.ArgumentParser",
          "include_patterns.extend",
          "json.dump"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "ast",
        "datetime",
        "fnmatch",
        "hashlib",
        "json",
        "logging",
        "os",
        "pathlib",
        "subprocess",
        "tempfile",
        "tokenize",
        "typing"
      ],
      "hash": null,
      "artifact_id": "3835624d-9f3d-45d4-9e37-2bac1303eda8"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_docs (1)",
      "path": "temp_workfiles/unsorted_mess/dump/generate_docs (1).py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "compute_hash",
          "docstring": "Compute SHA-256 hash of content.",
          "line_range": null,
          "parameters": [
            "content"
          ],
          "decorators": []
        },
        {
          "name": "load_struct_json",
          "docstring": "Load struct.json for metadata.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_llmstruct_toml",
          "docstring": "Load llmstruct.toml for configuration.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "generate_docs",
          "docstring": "Generate all documentation files with idempotency.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "compute_hash": [
          "content.encode",
          "hashlib.sha256"
        ],
        "load_struct_json": [
          "Path",
          "json.load",
          "open",
          "struct_path.exists"
        ],
        "load_llmstruct_toml": [
          "Path",
          "toml.load",
          "toml_path.exists",
          "open"
        ],
        "generate_docs": [
          "json.dumps",
          "f.read",
          "metadata.get",
          "f.write",
          "load_llmstruct_toml",
          "toml_data.get",
          "datetime.utcnow",
          "open",
          "project_name.lower",
          "str",
          "compute_hash",
          "Path",
          "struct_data.get",
          "load_struct_json",
          "chr",
          "logger.info",
          "doc_files.items",
          "any",
          "file_path.exists"
        ]
      },
      "dependencies": [
        "Path",
        "datetime",
        "hashlib",
        "json",
        "logging",
        "os",
        "pathlib",
        "toml"
      ],
      "hash": null,
      "artifact_id": "0a138c55-4d73-4138-990c-ea07131915be"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_ru_docs",
      "path": "temp_workfiles/unsorted_mess/dump/generate_ru_docs.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "Path",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "b83fe830-605b-439b-a2fc-8b53a162c35b"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.collector",
      "path": "temp_workfiles/unsorted_mess/dump/collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "collect_project",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "Path",
          "gitignore_parser.parse_gitignore",
          "gitignore_path.exists"
        ],
        "collect_project": [
          "gitignore",
          "f.read",
          "str",
          "doc_files.items",
          "Path",
          "any",
          "file_path.is_file",
          "root_dir.rglob",
          "open",
          "load_gitignore",
          "json.dump"
        ]
      },
      "dependencies": [
        "Path",
        "gitignore_parser",
        "json",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "894d19c5-b2c3-4976-9341-6286b0fbad43"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.collect_docs (1)",
      "path": "temp_workfiles/unsorted_mess/dump/collect_docs (1).py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load patterns from .gitignore.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "should_ignore",
          "docstring": "Check if path should be ignored based on directories or .gitignore.",
          "line_range": null,
          "parameters": [
            "path",
            "root_dir",
            "ignore_dirs",
            "gitignore_patterns"
          ],
          "decorators": []
        },
        {
          "name": "collect_docs",
          "docstring": "Collect all documentation files into a JSON file.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "patterns.append",
          "gitignore_path.exists",
          "line.strip",
          "line.startswith",
          "open"
        ],
        "should_ignore": [
          "str",
          "rel_path.startswith",
          "fnmatch",
          "path.relative_to"
        ],
        "collect_docs": [
          "f.read",
          "path.relative_to",
          "str",
          "should_ignore",
          "Path",
          "path.is_file",
          "print",
          "root_dir.rglob",
          "open",
          "load_gitignore",
          "json.dump"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "fdae3c4f-5839-42b5-80ec-16adf6dd76d3"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.collect_docs",
      "path": "temp_workfiles/unsorted_mess/dump/collect_docs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "collect_docs",
          "docstring": "Collect all documentation files into a single text file.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "collect_docs": [
          "f.read",
          "f.write",
          "dir_path.rglob",
          "collected.append",
          "Path",
          "print",
          "file_path.is_file",
          "open",
          "file_path.exists",
          "dir_path.exists"
        ]
      },
      "dependencies": [
        "Path",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "7378f86a-595a-452e-b03f-9c35450963e2"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.refactored_structure",
      "path": "temp_workfiles/unsorted_mess/dump/refactored_structure.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "json_path",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "parse_module",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "parse_module",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "generate",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "modules",
            "metadata"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "PythonParser",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "parse_module",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath",
                "root_dir",
                "include_ranges",
                "include_hashes"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "JavaScriptParser",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "parse_module",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath",
                "root_dir",
                "include_ranges",
                "include_hashes"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "JSONGenerator",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "generate",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "modules",
                "metadata"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "parse_module": [],
        "generate": [],
        "main": [
          "JavaScriptParser",
          "parser.parse_args",
          "parser.add_argument",
          "generator.generate",
          "parser.parse_module",
          "open",
          "argparse.ArgumentParser",
          "PythonParser",
          "JSONGenerator",
          "json.dump"
        ],
        "attach_to_llm_request": [
          "json.load",
          "json.dumps",
          "open"
        ]
      },
      "dependencies": [],
      "hash": null,
      "artifact_id": "36e37d72-13dc-410b-99f4-08bc74d5e2d4"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_parsers_python_parser (1)",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_parsers_python_parser (1).py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "infer_category",
          "docstring": "Infer module category based on path.",
          "line_range": null,
          "parameters": [
            "path"
          ],
          "decorators": []
        },
        {
          "name": "analyze_module",
          "docstring": "Analyze a Python module to extract functions, classes, and call graph.",
          "line_range": null,
          "parameters": [
            "file_path",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "visit_Call",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "AST visitor to collect function and module calls.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "visit_Call",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ]
        }
      ],
      "callgraph": {
        "infer_category": [
          "path.lower"
        ],
        "__init__": [
          "set"
        ],
        "visit_Call": [
          "isinstance",
          "self.generic_visit"
        ],
        "analyze_module": [
          "f.read",
          "dependencies.add",
          "set",
          "ast.walk",
          "code.encode",
          "CallVisitor",
          "relative_path.encode",
          "open",
          "infer_category",
          "ast.unparse",
          "methods.append",
          "os.stat",
          "classes.append",
          "str",
          "functions.append",
          "datetime.fromtimestamp",
          "Path",
          "hashlib.sha256",
          "ast.parse",
          "sorted",
          "len",
          "code.splitlines",
          "isinstance",
          "logging.error",
          "ast.get_docstring",
          "dependencies.update",
          "visitor.visit"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "Set",
        "ast",
        "datetime",
        "hashlib",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "eb36310e-efe4-4302-987b-03bc55a063ef"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_templates___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_templates___init__.py",
      "category": "core",
      "module_doc": "Templates for LLM prompts used in LLMStruct integration.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "c71402f3-34fe-4f7f-928d-21c154708ef4"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_end_to_end (1)",
      "path": "temp_workfiles/unsorted_mess/dump/test_end_to_end (1).py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "test_end_to_end",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_end_to_end": [
          "main",
          "utils_py.write_text",
          "len",
          "str",
          "next",
          "validate_struct_json",
          "json.load",
          "any",
          "project_dir.mkdir",
          "open",
          "output_json.exists",
          "tasks_json.write_text",
          "main_py.write_text"
        ]
      },
      "dependencies": [
        "json",
        "llmstruct.cli",
        "llmstruct.validators.json_validator",
        "main",
        "os",
        "pytest",
        "sys",
        "validate_struct_json"
      ],
      "hash": null,
      "artifact_id": "decb6ce0-68f3-4353-9c97-78eb3ff6251b"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_docs",
      "path": "temp_workfiles/unsorted_mess/dump/generate_docs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_content_hash",
          "docstring": "Calculate hash of content for idempotency.",
          "line_range": null,
          "parameters": [
            "content"
          ],
          "decorators": []
        },
        {
          "name": "create_file",
          "docstring": "Create or update file if content changed.",
          "line_range": null,
          "parameters": [
            "path",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "generate_docs_tree",
          "docstring": "Generate Di\u00e1taxis-compliant documentation for llmstruct.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "print_docs_tree",
          "docstring": "Print documentation tree.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_content_hash": [
          "content.encode",
          "hashlib.sha256"
        ],
        "create_file": [
          "f.read",
          "get_content_hash",
          "f.write",
          "print",
          "open",
          "content.strip",
          "path.exists"
        ],
        "generate_docs_tree": [
          "Path",
          "create_file"
        ],
        "print_docs_tree": [
          "root.replace",
          "os.walk",
          "print",
          "root.startswith"
        ]
      },
      "dependencies": [
        "Path",
        "hashlib",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "b3a9329b-61ea-4bec-9ac3-e502d77d1bce"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.examples_python_project_main",
      "path": "temp_workfiles/unsorted_mess/dump/examples_python_project_main.py",
      "category": "core",
      "module_doc": "Main module for the sample project.",
      "functions": [
        {
          "name": "main",
          "docstring": "Run the program.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "Execute the app.",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "App",
          "docstring": "Application class.",
          "line_range": null,
          "methods": [
            {
              "name": "run",
              "docstring": "Execute the app.",
              "line_range": null,
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "main": [
          "print",
          "utils.helper"
        ],
        "run": [
          "utils.log"
        ]
      },
      "dependencies": [
        "utils"
      ],
      "hash": null,
      "artifact_id": "cc8454b4-3e92-4d39-b6a2-fe1a1bb582fe"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.filter_llmstruct_json",
      "path": "temp_workfiles/unsorted_mess/dump/filter_llmstruct_json.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load .gitignore patterns.",
          "line_range": null,
          "parameters": [
            "gitignore_path"
          ],
          "decorators": []
        },
        {
          "name": "filter_json",
          "docstring": "Filter struct.json to exclude .gitignore paths and optionally tests.",
          "line_range": null,
          "parameters": [
            "data",
            "gitignore_patterns",
            "include_tests"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "line.strip",
          "line.startswith",
          "patterns.append",
          "open"
        ],
        "filter_json": [
          "len",
          "module.get",
          "fnmatch.fnmatch",
          "any",
          "data.get"
        ],
        "main": [
          "parser.parse_args",
          "parser.add_argument",
          "filter_json",
          "str",
          "json.load",
          "logging.info",
          "logging.basicConfig",
          "logging.error",
          "open",
          "argparse.ArgumentParser",
          "load_gitignore",
          "json.dump"
        ]
      },
      "dependencies": [
        "argparse",
        "fnmatch",
        "json",
        "logging",
        "os"
      ],
      "hash": null,
      "artifact_id": "5e63986b-9c22-4066-bc47-d9e49086c523"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_ru_internal_docs",
      "path": "temp_workfiles/unsorted_mess/dump/generate_ru_internal_docs.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "Path",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "3a3f885e-cf40-4016-9fec-210cee6f75f8"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.llm_client",
      "path": "temp_workfiles/unsorted_mess/dump/llm_client.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize LLMClient with optional Ollama host.",
          "line_range": null,
          "parameters": [
            "self",
            "ollama_host"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt, context, and optional model.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "context_path",
            "mode",
            "model",
            "artifact_ids"
          ],
          "decorators": []
        },
        {
          "name": "_query_grok",
          "docstring": "Query Grok API.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_anthropic",
          "docstring": "Query Anthropic API.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_ollama",
          "docstring": "Query Ollama API with specified model.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "_query_hybrid",
          "docstring": "Query multiple LLMs and combine results.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMClient",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize LLMClient with optional Ollama host.",
              "line_range": null,
              "parameters": [
                "self",
                "ollama_host"
              ]
            },
            {
              "name": "query",
              "docstring": "Query LLMs with prompt, context, and optional model.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "context_path",
                "mode",
                "model",
                "artifact_ids"
              ]
            },
            {
              "name": "_query_grok",
              "docstring": "Query Grok API.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_anthropic",
              "docstring": "Query Anthropic API.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_ollama",
              "docstring": "Query Ollama API with specified model.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            },
            {
              "name": "_query_hybrid",
              "docstring": "Query multiple LLMs and combine results.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "int",
          "logging.info",
          "os.getenv"
        ],
        "query": [
          "range",
          "json.dumps",
          "self._query_ollama",
          "self._query_grok",
          "logging.warning",
          "Path",
          "json.load",
          "self._query_hybrid",
          "logging.error",
          "self._query_anthropic",
          "logging.info",
          "asyncio.sleep"
        ],
        "_query_grok": [
          "response.json",
          "session.post",
          "logging.error",
          "logging.info",
          "result.get",
          "aiohttp.ClientSession"
        ],
        "_query_anthropic": [
          "response.json",
          "session.post",
          "logging.error",
          "logging.info",
          "result.get",
          "aiohttp.ClientSession"
        ],
        "_query_ollama": [
          "response.json",
          "session.post",
          "result.get",
          "logging.error",
          "logging.info",
          "logging.debug",
          "aiohttp.ClientSession"
        ],
        "_query_hybrid": [
          "len",
          "asyncio.gather",
          "self._query_ollama",
          "self._query_grok",
          "isinstance",
          "logging.info",
          "self._query_anthropic"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "aiohttp",
        "asyncio",
        "dotenv",
        "json",
        "load_dotenv",
        "logging",
        "os",
        "pathlib",
        "requests",
        "typing",
        "urljoin",
        "urllib.parse"
      ],
      "hash": null,
      "artifact_id": "4c5c0b64-d1ef-446c-b7ea-b7ff8cf80a94"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.llm_client (3)",
      "path": "temp_workfiles/unsorted_mess/dump/llm_client (3).py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize LLMClient with optional Ollama host.",
          "line_range": null,
          "parameters": [
            "self",
            "ollama_host"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt, context, and optional model.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "context_path",
            "mode",
            "model",
            "artifact_ids"
          ],
          "decorators": []
        },
        {
          "name": "_query_grok",
          "docstring": "Query Grok API.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_anthropic",
          "docstring": "Query Anthropic API.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_ollama",
          "docstring": "Query Ollama API with specified model.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "_query_hybrid",
          "docstring": "Query multiple LLMs and combine results.",
          "line_range": null,
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMClient",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize LLMClient with optional Ollama host.",
              "line_range": null,
              "parameters": [
                "self",
                "ollama_host"
              ]
            },
            {
              "name": "query",
              "docstring": "Query LLMs with prompt, context, and optional model.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "context_path",
                "mode",
                "model",
                "artifact_ids"
              ]
            },
            {
              "name": "_query_grok",
              "docstring": "Query Grok API.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_anthropic",
              "docstring": "Query Anthropic API.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_ollama",
              "docstring": "Query Ollama API with specified model.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            },
            {
              "name": "_query_hybrid",
              "docstring": "Query multiple LLMs and combine results.",
              "line_range": null,
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "int",
          "os.getenv"
        ],
        "query": [
          "range",
          "json.dumps",
          "self._query_ollama",
          "self._query_grok",
          "logging.warning",
          "Path",
          "json.load",
          "self._query_hybrid",
          "logging.error",
          "self._query_anthropic",
          "logging.info",
          "asyncio.sleep"
        ],
        "_query_grok": [
          "response.json",
          "session.post",
          "logging.error",
          "logging.info",
          "result.get",
          "aiohttp.ClientSession"
        ],
        "_query_anthropic": [
          "response.json",
          "session.post",
          "logging.error",
          "logging.info",
          "result.get",
          "aiohttp.ClientSession"
        ],
        "_query_ollama": [
          "response.json",
          "session.post",
          "logging.error",
          "urljoin",
          "logging.info",
          "result.get",
          "aiohttp.ClientSession"
        ],
        "_query_hybrid": [
          "len",
          "asyncio.gather",
          "self._query_ollama",
          "self._query_grok",
          "isinstance",
          "logging.info",
          "self._query_anthropic"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "aiohttp",
        "asyncio",
        "dotenv",
        "json",
        "load_dotenv",
        "logging",
        "os",
        "pathlib",
        "requests",
        "typing",
        "urljoin",
        "urllib.parse"
      ],
      "hash": null,
      "artifact_id": "3cc486e8-2fb6-461d-9535-14bcee6ce4b5"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.tests___init__",
      "path": "temp_workfiles/unsorted_mess/dump/tests___init__.py",
      "category": "core",
      "module_doc": "Test suite for LLMStruct, covering parsers, generators, validators, and integration.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "29132589-6481-4ea4-b451-6d34299cd730"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.check_docs",
      "path": "temp_workfiles/unsorted_mess/dump/check_docs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_struct",
          "docstring": "Load struct.json.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "check_docs",
          "docstring": "Check docs/ against struct.json and dialogue state.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Run doc check and print report.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_struct": [
          "json.load",
          "open"
        ],
        "check_docs": [
          "f.read",
          "issues.append",
          "struct.get",
          "load_struct",
          "Path",
          "os.walk",
          "open",
          "content.lower"
        ],
        "main": [
          "print",
          "check_docs"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "7253d596-5623-4dbe-a636-556614f89260"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.javascript_parser",
      "path": "temp_workfiles/unsorted_mess/dump/javascript_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "file_hash",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_metadata",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "parse_module",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "extract_signature",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JavaScriptParser",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "file_hash",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath"
              ]
            },
            {
              "name": "compute_file_metadata",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath",
                "include_hashes"
              ]
            },
            {
              "name": "parse_module",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath",
                "root_dir",
                "include_ranges",
                "include_hashes"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "set"
        ],
        "file_hash": [
          "hashlib.sha256",
          "f.read",
          "open"
        ],
        "compute_file_metadata": [
          "os.stat",
          "self.file_hash",
          "open",
          "sum"
        ],
        "parse_module": [
          "f.read",
          "str",
          "self.compute_file_metadata",
          "open",
          "esprima.parseModule"
        ],
        "extract_signature": [
          "hasattr"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "datetime",
        "esprima",
        "hashlib",
        "os",
        "typing"
      ],
      "hash": null,
      "artifact_id": "ec5841bc-92b9-4a22-954b-b8c225f994b1"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.self_run",
      "path": "temp_workfiles/unsorted_mess/dump/self_run.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_struct",
          "docstring": "Filter struct.json based on prompt keywords.",
          "line_range": null,
          "parameters": [
            "struct",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "Attach filtered struct.json to LLM prompt.",
          "line_range": null,
          "parameters": [
            "context_path",
            "prompt"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_struct": [
          "any",
          "module.get",
          "prompt.lower",
          "struct.get"
        ],
        "attach_to_llm_request": [
          "json.dumps",
          "filter_json",
          "context_file.exists",
          "Path",
          "json.load",
          "logging.error",
          "prompt.lower",
          "open",
          "filter_struct"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "filter_json",
        "json",
        "json_selector",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "86ffa974-e0e0-4d28-8692-e5e5fa47cc66"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_generators_json_generator (1)",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_generators_json_generator (1).py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_folder_structure",
          "docstring": "Capture directory and file structure, respecting .gitignore and patterns.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns"
          ],
          "decorators": []
        },
        {
          "name": "build_toc_and_modules",
          "docstring": "Build TOC and modules with robust .gitignore filtering using pathlib.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "Generate JSON structure for project.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_folder_structure": [
          "structure.append",
          "file_path.relative_to",
          "str",
          "Path",
          "os.walk",
          "any",
          "file_path.match",
          "sorted"
        ],
        "build_toc_and_modules": [
          "len",
          "modules.append",
          "toc.append",
          "str",
          "Path",
          "python_parser.analyze_module",
          "any",
          "f.match"
        ],
        "generate_json": [
          "len",
          "get_folder_structure",
          "sum",
          "Path",
          "list",
          "set",
          "build_toc_and_modules"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "datetime",
        "json",
        "logging",
        "os",
        "parsers",
        "pathlib",
        "python_parser",
        "typing"
      ],
      "hash": null,
      "artifact_id": "757b3ff5-8649-4917-a461-8f637e13581e"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_end_to_end",
      "path": "temp_workfiles/unsorted_mess/dump/test_end_to_end.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "test_end_to_end",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_end_to_end": [
          "main",
          "str",
          "validate_struct_json",
          "json.load",
          "project_dir.mkdir",
          "open",
          "output_json.exists",
          "main_py.write_text"
        ]
      },
      "dependencies": [
        "json",
        "llmstruct.cli",
        "llmstruct.validators.json_validator",
        "main",
        "os",
        "pytest",
        "sys",
        "validate_struct_json"
      ],
      "hash": null,
      "artifact_id": "1f478b26-2cea-4ff5-b3a6-937fa94a9649"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.python_parser",
      "path": "temp_workfiles/unsorted_mess/dump/python_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "visit_Call",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "file_hash",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_metadata",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "parse_module",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "visit_Call",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ]
        },
        {
          "name": "PythonParser",
          "docstring": "",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "file_hash",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath"
              ]
            },
            {
              "name": "compute_file_metadata",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath",
                "include_hashes"
              ]
            },
            {
              "name": "parse_module",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "filepath",
                "root_dir",
                "include_ranges",
                "include_hashes"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "set"
        ],
        "visit_Call": [
          "isinstance",
          "self.generic_visit"
        ],
        "file_hash": [
          "hashlib.sha256",
          "f.read",
          "open"
        ],
        "compute_file_metadata": [
          "os.stat",
          "self.file_hash",
          "open",
          "sum"
        ],
        "parse_module": [
          "dependencies.extend",
          "f.read",
          "call.split",
          "set",
          "ast.walk",
          "CallVisitor",
          "open",
          "methods.append",
          "classes.append",
          "str",
          "functions.append",
          "dependencies.append",
          "ast.parse",
          "sorted",
          "self.compute_file_metadata",
          "isinstance",
          "list",
          "ast.get_docstring",
          "visitor.visit"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "ast",
        "datetime",
        "hashlib",
        "os",
        "typing"
      ],
      "hash": null,
      "artifact_id": "dd674525-46e2-4fce-b2cb-eb221ad81e22"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_parsers___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_parsers___init__.py",
      "category": "core",
      "module_doc": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "JavaScriptParser",
        "PythonParser",
        "javascript_parser",
        "python_parser"
      ],
      "hash": null,
      "artifact_id": "40af187c-852b-4918-b63a-73127d14f29e"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_cli (1)",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_cli (1).py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_goals",
          "docstring": "Load project goals from pyproject.toml or default.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "gitignore_path.exists",
          "Path",
          "line.strip",
          "line.startswith",
          "logging.error",
          "gitignore_path.open"
        ],
        "load_goals": [
          "config.get",
          "toml.load",
          "pyproject_path.exists",
          "Path",
          "logging.error",
          "pyproject_path.open"
        ],
        "main": [
          "parser.parse_args",
          "parser.add_argument",
          "generate_json",
          "logging.info",
          "load_goals",
          "logging.error",
          "open",
          "argparse.ArgumentParser",
          "load_gitignore",
          "json.dump"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "argparse",
        "generate_json",
        "generators.json_generator",
        "json",
        "logging",
        "os",
        "pathlib",
        "toml",
        "typing"
      ],
      "hash": null,
      "artifact_id": "038abc04-8062-409a-811b-8974d15e3eec"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.test_efficiency_proxybypass",
      "path": "temp_workfiles/unsorted_mess/dump/test_efficiency_proxybypass.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "is_local_address",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "url"
          ],
          "decorators": []
        },
        {
          "name": "get_system_metrics",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "setup_proxy",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "proxy_url"
          ],
          "decorators": []
        },
        {
          "name": "run_llm_request",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "payload",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "test_with_llmstruct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "project_path",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "test_without_llmstruct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "project_path",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "evaluate_accuracy",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "response_text",
            "expected"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "is_local_address": [
          "ipaddress.ip_address",
          "urlparse"
        ],
        "get_system_metrics": [
          "psutil.virtual_memory",
          "psutil.cpu_percent"
        ],
        "setup_proxy": [
          "os.getenv"
        ],
        "run_llm_request": [
          "is_local_address",
          "len",
          "requests.Session",
          "response.json",
          "session.post",
          "get_system_metrics",
          "time.perf_counter"
        ],
        "test_with_llmstruct": [
          "f.read",
          "str",
          "struct_path.exists",
          "Path",
          "open",
          "subprocess.run",
          "run_llm_request"
        ],
        "test_without_llmstruct": [
          "Path",
          "run_llm_request",
          "f.read",
          "open"
        ],
        "evaluate_accuracy": [
          "len",
          "response_text.lower",
          "sum"
        ],
        "main": [
          "range",
          "parser.parse_args",
          "parser.add_argument",
          "test_with_llmstruct",
          "setup_proxy",
          "evaluate_accuracy",
          "print",
          "open",
          "argparse.ArgumentParser",
          "test_without_llmstruct",
          "json.dump"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "ipaddress",
        "json",
        "os",
        "pathlib",
        "psutil",
        "requests",
        "subprocess",
        "time",
        "urllib.parse",
        "urlparse"
      ],
      "hash": null,
      "artifact_id": "02cd05d5-8cb4-4bec-864c-63f56928bdab"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.scripts_setup_github",
      "path": "temp_workfiles/unsorted_mess/dump/scripts_setup_github.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_json",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "create_issue",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "repo",
            "token",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "setup_ci_cd",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "repo_dir"
          ],
          "decorators": []
        },
        {
          "name": "setup_templates",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "repo_dir"
          ],
          "decorators": []
        },
        {
          "name": "update_readme",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "repo_dir",
            "user_guide_path"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json": [
          "json.load",
          "open"
        ],
        "create_issue": [
          "task.get",
          "requests.post",
          "response.json"
        ],
        "setup_ci_cd": [
          "Path",
          "ci_yml.write_text",
          "workflow_dir.mkdir"
        ],
        "setup_templates": [
          "Path",
          "template_dir.mkdir",
          "pr_template.write_text",
          "issue_template.write_text"
        ],
        "update_readme": [
          "Path",
          "readme.write_text"
        ],
        "main": [
          "parser.parse_args",
          "update_readme",
          "parser.add_argument",
          "create_issue",
          "task.get",
          "issue.get",
          "setup_templates",
          "print",
          "setup_ci_cd",
          "argparse.ArgumentParser",
          "load_json"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "json",
        "os",
        "pathlib",
        "requests"
      ],
      "hash": null,
      "artifact_id": "de4354a6-f28a-46b4-bc67-d9ba4d420510"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct___init__ (1)",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct___init__ (1).py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "d1764e16-ad5c-4a69-accb-be0db97a3446"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.cli",
      "path": "temp_workfiles/unsorted_mess/dump/cli.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from llmstruct.toml or return empty dict.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default /tmp) and return the path.",
          "line_range": null,
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": null,
          "parameters": [
            "response"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": null,
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "gitignore_path.exists",
          "Path",
          "line.strip",
          "line.startswith",
          "logging.error",
          "gitignore_path.open"
        ],
        "load_config": [
          "config_path.exists",
          "toml.load",
          "Path",
          "config_path.open",
          "logging.error"
        ],
        "read_file_content": [
          "f.read",
          "path.open",
          "Path",
          "path.is_file",
          "logging.error"
        ],
        "write_to_file": [
          "str",
          "f.write",
          "file_path.open",
          "base_path.mkdir",
          "logging.warning",
          "Path",
          "logging.error",
          "file_path.exists",
          "logging.info"
        ],
        "parse_files_from_response": [
          "content.strip",
          "filename.strip",
          "files.append",
          "re.findall"
        ],
        "interactive": [
          "json.dumps",
          "scan_match.group",
          "logging.warning",
          "print",
          "user_input.lower",
          "os.listdir",
          "read_file_content",
          "re.search",
          "load_gitignore",
          "LLMClient",
          "Path",
          "write_dir.startswith",
          "parse_files_from_response",
          "sorted",
          "write_match.group",
          "attach_to_llm_request",
          "client.query",
          "write_to_file",
          "get_folder_structure",
          "input",
          "files_to_write.append",
          "logging.error",
          "parse"
        ],
        "parse": [
          "config.get",
          "generate_json",
          "logging.warning",
          "Path",
          "load_config",
          "logging.error",
          "logging.info",
          "load_gitignore",
          "json.dump"
        ],
        "query": [
          "client.query",
          "LLMClient",
          "Path",
          "logging.error",
          "logging.info",
          "json.dump"
        ],
        "context": [
          "logging.warning"
        ],
        "dogfood": [
          "logging.warning"
        ],
        "review": [
          "logging.warning"
        ],
        "main": [
          "parser.parse_args",
          "interactive",
          "subparsers.add_parser",
          "parser.add_subparsers",
          "review",
          "asyncio.run",
          "query_parser.add_argument",
          "parse_parser.add_argument",
          "interactive_parser.add_argument",
          "context_parser.add_argument",
          "review_parser.add_argument",
          "argparse.ArgumentParser",
          "query",
          "parse",
          "context",
          "dogfood_parser.add_argument",
          "dogfood"
        ]
      },
      "dependencies": [
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "generate_json",
        "get_folder_structure",
        "json",
        "llmstruct",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "logging",
        "os",
        "pathlib",
        "re",
        "toml",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "2b54b161-eddc-4188-a3de-a9c29da96045"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_validators___init__",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_validators___init__.py",
      "category": "core",
      "module_doc": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "json_validator",
        "validate_struct_json"
      ],
      "hash": null,
      "artifact_id": "9edd6892-cfd1-4b1e-98bf-77b0b63f62bd"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.generate_llmstruct (1)",
      "path": "temp_workfiles/unsorted_mess/dump/generate_llmstruct (1).py",
      "category": "core",
      "module_doc": "Generate JSON for workspace based on user instructions template.\n\nCreates structure:\n- metadata with description, instructions, and version\n- toc with module summaries and categories\n- modules with detailed function/class info, comments, call graphs, and categories",
      "functions": [
        {
          "name": "load_goals",
          "docstring": "Load goals from file or interactive editor.",
          "line_range": null,
          "parameters": [
            "goals_file"
          ],
          "decorators": []
        },
        {
          "name": "file_hash",
          "docstring": "Compute SHA-256 hash of file contents.",
          "line_range": null,
          "parameters": [
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "extract_comments",
          "docstring": "Extract single-line and multi-line comments using tokenize.",
          "line_range": null,
          "parameters": [
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_metadata",
          "docstring": "Compute file size, last modified time, line count, and optional hash.",
          "line_range": null,
          "parameters": [
            "filepath",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "infer_category",
          "docstring": "Infer module category based on path and dependencies.",
          "line_range": null,
          "parameters": [
            "path",
            "dependencies"
          ],
          "decorators": []
        },
        {
          "name": "get_signature",
          "docstring": "Generate function signature.",
          "line_range": null,
          "parameters": [
            "func_node"
          ],
          "decorators": []
        },
        {
          "name": "extract_dependencies",
          "docstring": "Extract module-level imports.",
          "line_range": null,
          "parameters": [
            "tree"
          ],
          "decorators": []
        },
        {
          "name": "analyze_module",
          "docstring": "Analyze a Python module in a single pass.",
          "line_range": null,
          "parameters": [
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "build_toc_and_modules",
          "docstring": "Build TOC and modules with filtering.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "Generate JSON structure for project.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "include_ranges",
            "include_hashes",
            "goals_file"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "visit_Call",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_Import",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_ImportFrom",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "Extract function calls and module dependencies.",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "visit_Call",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_Import",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_ImportFrom",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "node"
              ]
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ]
        }
      ],
      "callgraph": {
        "load_goals": [
          "temp.write",
          "temp.flush",
          "line.strip",
          "line.startswith",
          "logging.error",
          "open",
          "tempfile.NamedTemporaryFile",
          "subprocess.run",
          "os.unlink"
        ],
        "file_hash": [
          "hashlib.sha256",
          "f.read",
          "open",
          "logging.error"
        ],
        "extract_comments": [
          "tokenize.tokenize",
          "logging.error",
          "comments.append",
          "open"
        ],
        "compute_file_metadata": [
          "os.stat",
          "sum",
          "file_hash",
          "logging.error",
          "open"
        ],
        "infer_category": [
          "any",
          "path.lower"
        ],
        "get_signature": [],
        "__init__": [
          "set"
        ],
        "visit_Call": [
          "isinstance",
          "self.generic_visit"
        ],
        "visit_Import": [
          "self.generic_visit"
        ],
        "visit_ImportFrom": [
          "self.generic_visit"
        ],
        "extract_dependencies": [
          "dependencies.add",
          "isinstance",
          "sorted",
          "dependencies.update",
          "set",
          "ast.walk"
        ],
        "analyze_module": [
          "f.read",
          "compute_file_metadata",
          "extract_dependencies",
          "CallVisitor",
          "open",
          "infer_category",
          "methods.append",
          "classes.append",
          "str",
          "functions.append",
          "hashlib.sha256",
          "getattr",
          "extract_comments",
          "ast.parse",
          "sorted",
          "source.splitlines",
          "get_signature",
          "isinstance",
          "logging.error",
          "ast.get_docstring",
          "visitor.visit"
        ],
        "build_toc_and_modules": [
          "len",
          "modules.append",
          "toc.append",
          "exclude_patterns.extend",
          "fnmatch.fnmatch",
          "sum",
          "os.walk",
          "any",
          "load_gitignore",
          "analyze_module",
          "dirpath.split"
        ],
        "generate_json": [
          "load_goals",
          "len",
          "build_toc_and_modules"
        ],
        "main": [
          "parser.parse_args",
          "parser.add_argument",
          "generate_json",
          "logging.info",
          "logging.error",
          "open",
          "argparse.ArgumentParser",
          "json.dump"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "argparse",
        "ast",
        "datetime",
        "fnmatch",
        "hashlib",
        "json",
        "logging",
        "os",
        "subprocess",
        "tempfile",
        "tokenize",
        "typing"
      ],
      "hash": null,
      "artifact_id": "69a1e300-dd2b-4c88-832e-8a1b92149da6"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.json_validator",
      "path": "temp_workfiles/unsorted_mess/dump/json_validator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_struct_json",
          "docstring": "Validate a single JSON file against a schema.",
          "line_range": null,
          "parameters": [
            "json_path",
            "schema_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_directory",
          "docstring": "Validate all JSON files in a directory against a schema.",
          "line_range": null,
          "parameters": [
            "directory",
            "schema_path",
            "include_patterns",
            "exclude_patterns"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_struct_json": [
          "schema_file.exists",
          "json_file.exists",
          "str",
          "Path",
          "json.load",
          "logging.error",
          "validate",
          "open",
          "logging.info"
        ],
        "validate_directory": [
          "str",
          "validate_struct_json",
          "Path",
          "any",
          "json_file.match"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "ValidationError",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "sys",
        "typing",
        "validate"
      ],
      "hash": null,
      "artifact_id": "738e2203-03cd-4e59-9245-e6b65c1816b6"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.validate_json",
      "path": "temp_workfiles/unsorted_mess/dump/validate_json.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_struct_json",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "json_path",
            "schema_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_struct_json": [
          "str",
          "json.load",
          "print",
          "validate",
          "open"
        ]
      },
      "dependencies": [
        "ValidationError",
        "json",
        "jsonschema",
        "sys",
        "validate"
      ],
      "hash": null,
      "artifact_id": "6c45a638-1ba4-4ab2-aaa6-702a0d196bb0"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.src_llmstruct_cli",
      "path": "temp_workfiles/unsorted_mess/dump/src_llmstruct_cli.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore, logging loaded patterns.",
          "line_range": null,
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_goals",
          "docstring": "Load goals from semicolon-separated string, file, or interactive editor.",
          "line_range": null,
          "parameters": [
            "goals_input"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "len",
          "logging.warning",
          "line.strip",
          "line.startswith",
          "logging.error",
          "open",
          "logging.info"
        ],
        "load_goals": [
          "len",
          "goals_input.split",
          "temp.write",
          "temp.flush",
          "line.strip",
          "line.startswith",
          "logging.error",
          "open",
          "tempfile.NamedTemporaryFile",
          "subprocess.run",
          "logging.info",
          "os.unlink",
          "g.strip"
        ],
        "main": [
          "parser.parse_args",
          "parser.add_argument",
          "logging.warning",
          "generate_json",
          "load_goals",
          "logging.info",
          "logging.error",
          "open",
          "language_patterns.get",
          "argparse.ArgumentParser",
          "load_gitignore",
          "include_patterns.extend",
          "json.dump"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "argparse",
        "generate_json",
        "generators.json_generator",
        "logging",
        "os",
        "subprocess",
        "tempfile",
        "typing"
      ],
      "hash": null,
      "artifact_id": "b1fa6834-5663-41b2-8890-96a3c26fc40a"
    },
    {
      "module_id": "temp_workfiles.unsorted_mess.dump.clean.internal_cleaner",
      "path": "temp_workfiles/unsorted_mess/dump/clean/internal_cleaner.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "normalize",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "record"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "normalize": [
          "record.get",
          "str",
          "isinstance",
          "id.strip",
          "content.strip"
        ]
      },
      "dependencies": [
        "collections",
        "defaultdict",
        "glob",
        "json",
        "os"
      ],
      "hash": null,
      "artifact_id": "713a7644-ef15-4ab7-8946-c6f96f8ea966"
    },
    {
      "module_id": "temp_workfiles.dev_utils.test_efficiency",
      "path": "temp_workfiles/dev_utils/test_efficiency.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "get_system_metrics",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "is_local_address",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "url"
          ],
          "decorators": []
        },
        {
          "name": "setup_proxy",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "proxy_url"
          ],
          "decorators": []
        },
        {
          "name": "check_ollama",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url"
          ],
          "decorators": []
        },
        {
          "name": "optimize_prompt",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "struct_data",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "run_llm_request",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "payload",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "check_llmstruct_cli",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_with_llmstruct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "project_path",
            "proxy",
            "use_placeholder"
          ],
          "decorators": []
        },
        {
          "name": "test_without_llmstruct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_url",
            "project_path",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "test_with_grok",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "api_key",
            "project_path",
            "proxy",
            "use_placeholder"
          ],
          "decorators": []
        },
        {
          "name": "evaluate_accuracy",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "response_text",
            "expected"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_system_metrics": [
          "psutil.virtual_memory",
          "psutil.cpu_percent"
        ],
        "is_local_address": [
          "ipaddress.ip_address",
          "urlparse"
        ],
        "setup_proxy": [
          "os.getenv"
        ],
        "check_ollama": [
          "str",
          "api_url.replace",
          "requests.get",
          "response.json"
        ],
        "optimize_prompt": [
          "len",
          "print",
          "struct_data.split"
        ],
        "run_llm_request": [
          "is_local_address",
          "len",
          "requests.Session",
          "response.json",
          "session.post",
          "type",
          "get_system_metrics",
          "time.perf_counter",
          "print",
          "response.raise_for_status"
        ],
        "check_llmstruct_cli": [
          "shutil.which"
        ],
        "test_with_llmstruct": [
          "FileNotFoundError",
          "subprocess.run",
          "target_path.exists",
          "optimize_prompt",
          "f.read",
          "str",
          "Path",
          "open",
          "check_llmstruct_cli",
          "run_llm_request",
          "json.dump"
        ],
        "test_without_llmstruct": [
          "optimize_prompt",
          "f.read",
          "Path",
          "open",
          "run_llm_request"
        ],
        "test_with_grok": [
          "FileNotFoundError",
          "target_path.exists",
          "optimize_prompt",
          "f.read",
          "Path",
          "test_grok",
          "open",
          "json.dump"
        ],
        "evaluate_accuracy": [
          "len",
          "response_text.lower",
          "sum"
        ],
        "main": [
          "check_ollama",
          "parser.parse_args",
          "range",
          "parser.add_argument",
          "test_with_llmstruct",
          "str",
          "setup_proxy",
          "evaluate_accuracy",
          "test_with_grok",
          "print",
          "open",
          "check_llmstruct_cli",
          "argparse.ArgumentParser",
          "test_without_llmstruct",
          "json.dump"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "ipaddress",
        "json",
        "os",
        "pathlib",
        "psutil",
        "requests",
        "shutil",
        "src.llmstruct.grok",
        "subprocess",
        "test_grok",
        "time",
        "urllib.parse",
        "urlparse"
      ],
      "hash": null,
      "artifact_id": "66ed3b38-7ff0-498a-bb0b-eb298b07fffc"
    },
    {
      "module_id": "temp_workfiles.dev_utils.test_audit",
      "path": "temp_workfiles/dev_utils/test_audit.py",
      "category": "test",
      "module_doc": "Test script for audit functionality.",
      "functions": [
        {
          "name": "test_audit_status",
          "docstring": "Test audit status directly.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_audit_status": [
          "ideas_data.keys",
          "len",
          "t.get",
          "ideas_file.exists",
          "tasks_data.keys",
          "i.get",
          "Path",
          "json.load",
          "print",
          "list",
          "open",
          "tasks_file.exists"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "a451a06a-aa24-48d1-b1e7-b0c1ffbcb2e7"
    },
    {
      "module_id": "bak.20250522_102827.scripts.collector",
      "path": "bak/20250522_102827/scripts/collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "apply_filters",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "files",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "collect_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "generate_struct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "output"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "apply_filters": [
          "pattern.startswith",
          "fnmatch.fnmatch",
          "filtered.append"
        ],
        "collect_files": [
          "path.relative_to",
          "str",
          "files.append",
          "path.is_file",
          "apply_filters",
          "root_dir.rglob"
        ],
        "generate_struct": [
          "len",
          "logger.info",
          "str",
          "output_path.open",
          "uuid.uuid4",
          "collect_files",
          "Path",
          "json.load",
          "existing.get",
          "output_path.exists",
          "json.dump"
        ],
        "main": [
          "generate_struct"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "logging",
        "pathlib",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "952c8fcf-a9ec-4ecd-ba4a-e2a3b6e9d39a"
    },
    {
      "module_id": "bak.20250522_102827.scripts.validate_refs",
      "path": "bak/20250522_102827/scripts/validate_refs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_references",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_references": [
          "broken_links.append",
          "logger.info",
          "source_file.exists",
          "logger.warning",
          "target_file.exists",
          "json.load",
          "idea.get",
          "Path",
          "logger.error",
          "enumerate",
          "json.dump"
        ],
        "main": [
          "validate_references"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "9344386e-ccf5-4c25-ab95-fec71ac5c5b2"
    },
    {
      "module_id": "bak.20250522_102827.scripts.deploy_embedded_files",
      "path": "bak/20250522_102827/scripts/deploy_embedded_files.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_json",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "data",
            "schema"
          ],
          "decorators": []
        },
        {
          "name": "backup_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "target_dir",
            "backup_root"
          ],
          "decorators": []
        },
        {
          "name": "deploy_embedded_files",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_json": [
          "logger.warning",
          "validate"
        ],
        "backup_files": [
          "logger.info",
          "target_dir.exists",
          "shutil.copytree",
          "datetime.now"
        ],
        "deploy_embedded_files": [
          "logger.info",
          "target_path.exists",
          "f.write",
          "backup_files",
          "Path",
          "logger.error",
          "validate_json",
          "target_path.open",
          "EMBEDDED_FILES.get",
          "EMBEDDED_FILES.items",
          "json.dump"
        ],
        "main": [
          "deploy_embedded_files"
        ]
      },
      "dependencies": [
        "Path",
        "ValidationError",
        "datetime",
        "json",
        "jsonschema",
        "logging",
        "os",
        "pathlib",
        "shutil",
        "validate"
      ],
      "hash": null,
      "artifact_id": "b5f3077a-1050-4a9f-86cc-86946e234cb0"
    },
    {
      "module_id": "bak.20250522_131121.scripts.collector",
      "path": "bak/20250522_131121/scripts/collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "apply_filters",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "files",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "collect_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "generate_struct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "output"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "apply_filters": [
          "pattern.startswith",
          "fnmatch.fnmatch",
          "filtered.append"
        ],
        "collect_files": [
          "path.relative_to",
          "str",
          "files.append",
          "path.is_file",
          "apply_filters",
          "root_dir.rglob"
        ],
        "generate_struct": [
          "len",
          "logger.info",
          "str",
          "output_path.open",
          "uuid.uuid4",
          "collect_files",
          "Path",
          "json.load",
          "existing.get",
          "output_path.exists",
          "json.dump"
        ],
        "main": [
          "generate_struct"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "logging",
        "pathlib",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "6de5d5b8-8590-43b0-8167-77fb2b755205"
    },
    {
      "module_id": "bak.20250522_131121.scripts.validate_refs",
      "path": "bak/20250522_131121/scripts/validate_refs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_references",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_references": [
          "broken_links.append",
          "logger.info",
          "source_file.exists",
          "logger.warning",
          "target_file.exists",
          "json.load",
          "idea.get",
          "Path",
          "logger.error",
          "enumerate",
          "json.dump"
        ],
        "main": [
          "validate_references"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "f66c4b3e-bb03-4718-a86d-58c55aeb89e6"
    },
    {
      "module_id": "bak.20250522_131121.scripts.deploy_embedded_files",
      "path": "bak/20250522_131121/scripts/deploy_embedded_files.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_json",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "data",
            "schema",
            "base_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "target_dir",
            "backup_root"
          ],
          "decorators": []
        },
        {
          "name": "deploy_embedded_files",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_json": [
          "logger.error",
          "logger.warning",
          "validate",
          "RefResolver"
        ],
        "backup_files": [
          "logger.info",
          "target_dir.exists",
          "shutil.copytree",
          "datetime.now"
        ],
        "deploy_embedded_files": [
          "logger.info",
          "target_path.exists",
          "f.write",
          "logger.warning",
          "backup_files",
          "Path",
          "logger.error",
          "validate_json",
          "target_path.open",
          "Path.cwd",
          "EMBEDDED_FILES.get",
          "json.dump"
        ],
        "main": [
          "deploy_embedded_files"
        ]
      },
      "dependencies": [
        "Path",
        "RefResolver",
        "ValidationError",
        "datetime",
        "json",
        "jsonschema",
        "logging",
        "os",
        "pathlib",
        "shutil",
        "validate"
      ],
      "hash": null,
      "artifact_id": "08506526-1b67-4a54-8541-af45cd77667f"
    },
    {
      "module_id": "tests.test_self_run",
      "path": "tests/test_self_run.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "test_filter_json_init_json",
          "docstring": "Test filter_json with init.json structure.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_select_json_partial",
          "docstring": "Test partial JSON loading.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_cache_json",
          "docstring": "Test JSON caching.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_attach_to_llm_request_init_json",
          "docstring": "Test attach_to_llm_request with init.json and cache.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_attach_to_llm_request_missing_file",
          "docstring": "Test attach_to_llm_request with missing file.",
          "line_range": null,
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_filter_json_init_json": [
          "filter_json"
        ],
        "test_select_json_partial": [
          "str",
          "select_json",
          "open",
          "json.dump"
        ],
        "test_cache_json": [
          "cache.get_metadata",
          "JSONCache",
          "str",
          "cache.cache_json",
          "cache.close",
          "open",
          "cache.get_full_json",
          "json.dump"
        ],
        "test_attach_to_llm_request_init_json": [
          "attach_to_llm_request",
          "JSONCache",
          "str",
          "cache.close",
          "open",
          "json.dump"
        ],
        "test_attach_to_llm_request_missing_file": [
          "attach_to_llm_request",
          "str"
        ]
      },
      "dependencies": [
        "JSONCache",
        "attach_to_llm_request",
        "filter_json",
        "json",
        "llmstruct.cache",
        "llmstruct.json_selector",
        "llmstruct.self_run",
        "select_json"
      ],
      "hash": null,
      "artifact_id": "e8250ece-374d-4fc0-8a45-789e9ea506d9"
    },
    {
      "module_id": "tests.__init__",
      "path": "tests/__init__.py",
      "category": "test",
      "module_doc": "Test suite for LLMStruct, covering parsers, generators, validators, and integration.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "21efce60-a0b4-499e-809f-74d465f27dad"
    },
    {
      "module_id": "scripts.collector",
      "path": "scripts/collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "apply_filters",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "files",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "collect_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "generate_struct",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "root_dir",
            "output"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "apply_filters": [
          "pattern.startswith",
          "fnmatch.fnmatch",
          "filtered.append"
        ],
        "collect_files": [
          "path.relative_to",
          "str",
          "files.append",
          "path.is_file",
          "apply_filters",
          "root_dir.rglob"
        ],
        "generate_struct": [
          "len",
          "logger.info",
          "str",
          "output_path.open",
          "uuid.uuid4",
          "collect_files",
          "Path",
          "json.load",
          "existing.get",
          "output_path.exists",
          "json.dump"
        ],
        "main": [
          "generate_struct"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "logging",
        "pathlib",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "6c5da8d1-53eb-4d5b-bcda-2c67fba91d37"
    },
    {
      "module_id": "scripts.session_cli",
      "path": "scripts/session_cli.py",
      "category": "core",
      "module_doc": "Session Management CLI\nAutomates session tracking, worklog updates, and session switching for llmstruct.\nPart of the comprehensive session management system.",
      "functions": [
        {
          "name": "get_current_branch",
          "docstring": "Get current git branch.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_json_file",
          "docstring": "Load JSON file with error handling.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "save_json_file",
          "docstring": "Save JSON file with error handling.",
          "line_range": null,
          "parameters": [
            "file_path",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "get_current_timestamp",
          "docstring": "Get current timestamp in ISO format.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "log_event",
          "docstring": "Log an event to worklog.json.",
          "line_range": null,
          "parameters": [
            "event_message",
            "author"
          ],
          "decorators": []
        },
        {
          "name": "switch_session",
          "docstring": "Switch to a different session or create new one.",
          "line_range": null,
          "parameters": [
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "list_sessions",
          "docstring": "List all available sessions.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_current_session",
          "docstring": "Show current session details.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_worklog",
          "docstring": "Show recent worklog entries.",
          "line_range": null,
          "parameters": [
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Main CLI interface.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": null,
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {
        "get_current_branch": [
          "subprocess.run"
        ],
        "load_json_file": [
          "json.load",
          "print",
          "open"
        ],
        "save_json_file": [
          "print",
          "open",
          "os.makedirs",
          "json.dump"
        ],
        "get_current_timestamp": [
          "datetime.now"
        ],
        "log_event": [
          "load_json_file",
          "get_current_timestamp",
          "current_session.get",
          "print",
          "get_current_branch",
          "save_json_file"
        ],
        "switch_session": [
          "load_json_file",
          "get_current_timestamp",
          "log_event",
          "print",
          "get_current_branch",
          "save_json_file"
        ],
        "list_sessions": [
          "current_session.get",
          "print",
          "load_json_file"
        ],
        "show_current_session": [
          "current_session.get",
          "print",
          "load_json_file"
        ],
        "show_worklog": [
          "reversed",
          "len",
          "print",
          "load_json_file"
        ],
        "main": [
          "int",
          "len",
          "show_current_session",
          "list_sessions",
          "show_worklog",
          "log_event",
          "print",
          "switch_session"
        ]
      },
      "dependencies": [
        "Path",
        "datetime",
        "json",
        "os",
        "pathlib",
        "subprocess",
        "sys"
      ],
      "hash": null,
      "artifact_id": "87f49784-de5f-423c-aee6-4aba2c7a14a9"
    },
    {
      "module_id": "scripts.auto_update_struct",
      "path": "scripts/auto_update_struct.py",
      "category": "core",
      "module_doc": "Automatic struct.json update script\nThis script automatically parses the project and updates struct.json\nwithout requiring LLM intervention.",
      "functions": [
        {
          "name": "detect_project_changes",
          "docstring": "Detect if project files have changed since last struct.json generation.\nUses git status to check for modifications.",
          "line_range": null,
          "parameters": [
            "root_dir",
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_struct_json",
          "docstring": "Create a backup of existing struct.json.",
          "line_range": null,
          "parameters": [
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_struct_json",
          "docstring": "Validate generated struct.json for basic structure.",
          "line_range": null,
          "parameters": [
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "update_struct_json",
          "docstring": "Main function to update struct.json automatically.\n\nArgs:\n    root_dir: Project root directory (default: current directory)\n    struct_path: Path to struct.json (default: ./struct.json)\n    force: Force regeneration even if no changes detected\n    config_override: Override default configuration\n\nReturns:\n    bool: True if update was successful",
          "line_range": null,
          "parameters": [
            "root_dir",
            "struct_path",
            "force",
            "config_override"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for auto-update script.",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_gitignore",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_config": [],
        "load_gitignore": [],
        "generate_json": [
          "ImportError"
        ],
        "detect_project_changes": [
          "logger.info",
          "file_path.stat",
          "logger.warning",
          "Path",
          "subprocess.run"
        ],
        "backup_struct_json": [
          "logger.info",
          "Path",
          "logger.error",
          "subprocess.run",
          "datetime.now"
        ],
        "validate_struct_json": [
          "json.load",
          "logger.info",
          "logger.error",
          "open"
        ],
        "update_struct_json": [
          "logger.info",
          "config.update",
          "detect_project_changes",
          "config.get",
          "json.dump",
          "validate_struct_json",
          "generate_json",
          "logger.error",
          "load_config",
          "os.getcwd",
          "open",
          "subprocess.run",
          "backup_struct_json",
          "load_gitignore",
          "cli_config.get"
        ],
        "main": [
          "logging.getLogger",
          "parser.parse_args",
          "parser.add_argument",
          "detect_project_changes",
          "update_struct_json",
          "print",
          "os.getcwd",
          "argparse.ArgumentParser",
          "sys.exit"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "generate_json",
        "json",
        "llmstruct.cli",
        "llmstruct.generators.json_generator",
        "load_config",
        "load_gitignore",
        "logging",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "94d22556-ad1c-496d-a762-33d7eedfd50e"
    },
    {
      "module_id": "scripts.validate_schemas",
      "path": "scripts/validate_schemas.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "aa35ecc2-1598-403b-83d6-b462198dcb9f"
    },
    {
      "module_id": "scripts.export_to_github_projects",
      "path": "scripts/export_to_github_projects.py",
      "category": "core",
      "module_doc": "Export script for GitHub Projects integration\nConverts official tasks.json and ideas.json to GitHub Project cards",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "self",
            "config_path",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "check_github_cli",
          "docstring": "Check if GitHub CLI is installed and authenticated",
          "line_range": null,
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "list_projects",
          "docstring": "List available GitHub Projects (via gh-projects extension)",
          "line_range": null,
          "parameters": [
            "self",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "create_project_item",
          "docstring": "Create a new item in GitHub Project (via gh-projects extension)\nTODO: \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 GraphQL API \u0438\u043b\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c",
          "line_range": null,
          "parameters": [
            "self",
            "project_number",
            "title",
            "body",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "export_tasks_to_project",
          "docstring": "Export tasks to GitHub Project",
          "line_range": null,
          "parameters": [
            "self",
            "tasks",
            "project_number",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "export_ideas_to_project",
          "docstring": "Export ideas to GitHub Project",
          "line_range": null,
          "parameters": [
            "self",
            "ideas",
            "project_number",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "filter_data",
          "docstring": "Filter data by status and priority",
          "line_range": null,
          "parameters": [
            "self",
            "data",
            "status_filter",
            "priority_filter"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubProjectsExportScript",
          "docstring": "Extended exporter with command-line interface and GitHub CLI integration",
          "line_range": null,
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": null,
              "parameters": [
                "self",
                "config_path",
                "dry_run"
              ]
            },
            {
              "name": "check_github_cli",
              "docstring": "Check if GitHub CLI is installed and authenticated",
              "line_range": null,
              "parameters": [
                "self"
              ]
            },
            {
              "name": "list_projects",
              "docstring": "List available GitHub Projects (via gh-projects extension)",
              "line_range": null,
              "parameters": [
                "self",
                "owner",
                "repo"
              ]
            },
            {
              "name": "create_project_item",
              "docstring": "Create a new item in GitHub Project (via gh-projects extension)\nTODO: \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 GraphQL API \u0438\u043b\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c",
              "line_range": null,
              "parameters": [
                "self",
                "project_number",
                "title",
                "body",
                "owner",
                "repo"
              ]
            },
            {
              "name": "export_tasks_to_project",
              "docstring": "Export tasks to GitHub Project",
              "line_range": null,
              "parameters": [
                "self",
                "tasks",
                "project_number",
                "owner",
                "repo"
              ]
            },
            {
              "name": "export_ideas_to_project",
              "docstring": "Export ideas to GitHub Project",
              "line_range": null,
              "parameters": [
                "self",
                "ideas",
                "project_number",
                "owner",
                "repo"
              ]
            },
            {
              "name": "filter_data",
              "docstring": "Filter data by status and priority",
              "line_range": null,
              "parameters": [
                "self",
                "data",
                "status_filter",
                "priority_filter"
              ]
            }
          ],
          "bases": [
            "GitHubProjectsExporter"
          ]
        }
      ],
      "callgraph": {
        "__init__": [
          "super"
        ],
        "check_github_cli": [
          "self._run_gh_command",
          "print"
        ],
        "list_projects": [
          "self._run_gh_command",
          "print",
          "json.loads",
          "isinstance"
        ],
        "create_project_item": [
          "str",
          "print",
          "self._run_gh_command",
          "output.strip"
        ],
        "export_tasks_to_project": [
          "len",
          "self.format_task_for_github",
          "task.get",
          "self.create_project_item",
          "print"
        ],
        "export_ideas_to_project": [
          "len",
          "self.create_project_item",
          "idea.get",
          "print",
          "self.format_idea_for_github"
        ],
        "filter_data": [
          "item.get"
        ],
        "main": [
          "parser.parse_args",
          "exporter.check_github_cli",
          "parser.add_argument",
          "exporter.filter_data",
          "GitHubProjectsExportScript",
          "exporter._save_mapping",
          "exporter.export_tasks_to_project",
          "print",
          "exporter.export_ideas_to_project",
          "argparse.ArgumentParser",
          "exporter.load_official_data",
          "sys.exit"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "GitHubProjectsExporter",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "argparse",
        "datetime",
        "json",
        "llmstruct.gh_view",
        "pathlib",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "e0f03496-1382-4fb9-a2b0-d1d4eb6a6fde"
    },
    {
      "module_id": "scripts.validate_refs",
      "path": "scripts/validate_refs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_references",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_references": [
          "broken_links.append",
          "logger.info",
          "source_file.exists",
          "logger.warning",
          "target_file.exists",
          "json.load",
          "idea.get",
          "Path",
          "logger.error",
          "enumerate",
          "json.dump"
        ],
        "main": [
          "validate_references"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "1a54ed84-4faf-4914-b0ab-62c27c674145"
    },
    {
      "module_id": "scripts.deploy_embedded_files",
      "path": "scripts/deploy_embedded_files.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_json",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "data",
            "schema",
            "base_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_files",
          "docstring": "",
          "line_range": null,
          "parameters": [
            "target_dir",
            "backup_root"
          ],
          "decorators": []
        },
        {
          "name": "deploy_embedded_files",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": null,
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_json": [
          "logger.error",
          "logger.warning",
          "validate",
          "RefResolver"
        ],
        "backup_files": [
          "logger.info",
          "target_dir.exists",
          "shutil.copytree",
          "datetime.now"
        ],
        "deploy_embedded_files": [
          "logger.info",
          "target_path.exists",
          "f.write",
          "logger.warning",
          "backup_files",
          "Path",
          "logger.error",
          "validate_json",
          "target_path.open",
          "Path.cwd",
          "EMBEDDED_FILES.get",
          "json.dump"
        ],
        "main": [
          "deploy_embedded_files"
        ]
      },
      "dependencies": [
        "Path",
        "RefResolver",
        "ValidationError",
        "datetime",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "shutil",
        "validate"
      ],
      "hash": null,
      "artifact_id": "f941e911-c3f3-4890-a2d2-19b65e0cd3dc"
    },
    {
      "module_id": "scripts.validate_json",
      "path": "scripts/validate_json.py",
      "category": "core",
      "module_doc": "JSON Validation Script\nValidates JSON files against their respective schemas.",
      "functions": [
        {
          "name": "load_json",
          "docstring": "Load JSON file with error handling.",
          "line_range": null,
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_json",
          "docstring": "Validate a JSON file against a schema.",
          "line_range": null,
          "parameters": [
            "file_path",
            "schema_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json": [
          "json.load",
          "print",
          "open"
        ],
        "validate_json": [
          "Draft7Validator",
          "str",
          "Path",
          "print",
          "validator.validate",
          "load_json"
        ]
      },
      "dependencies": [
        "Draft7Validator",
        "Path",
        "ValidationError",
        "json",
        "jsonschema",
        "pathlib",
        "sys",
        "validate"
      ],
      "hash": null,
      "artifact_id": "ca0a3b87-6a4b-41cb-b1c8-78586c3213b1"
    }
  ]
}