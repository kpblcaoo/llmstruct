{
  "metadata": {
    "project_name": "llmstruct",
    "description": "Utility for generating structured JSON for codebases",
    "version": "2025-06-25T19:19:35.892796Z",
    "authors": [
      {
        "name": "Mikhail Stepanov",
        "github": "kpblcaoo",
        "email": "kpblcaoo@gmail.com"
      }
    ],
    "instructions": [
      "Follow best practices, warn if instructions conflict with them",
      "Preserve functionality, ensure idempotency",
      "Use attached struct.json for context and navigation",
      "Request missing modules or functions if needed",
      "Regenerate JSON for significant changes, track via Git and artifacts",
      "Use internal comments for descriptions, append brief summary"
    ],
    "goals": [],
    "stats": {
      "modules_count": 81,
      "functions_count": 479,
      "classes_count": 92,
      "call_edges_count": 1628
    },
    "artifact_id": "2ec045bc-20d8-4c3e-ab3d-cefe5b726bdc",
    "summary": "Structured JSON for llmstruct codebase",
    "tags": [
      "codebase",
      "automation"
    ],
    "folder_structure": [
      {
        "path": ".",
        "type": "directory",
        "uid": "dir:.",
        "uid_components": [
          "dir:",
          "dir:."
        ],
        "artifact_id": "750cd970-1fb3-9ec6-2b41-89d1eb8fa8fd",
        "metadata": {}
      },
      {
        "path": "llmstruct",
        "type": "directory",
        "uid": "dir:llmstruct",
        "uid_components": [
          "dir:llmstruct"
        ],
        "artifact_id": "36f3a06d-49c1-6d0f-ddda-174b5851a3ae",
        "metadata": {}
      },
      {
        "path": "llmstruct.egg-info",
        "type": "directory",
        "uid": "dir:llmstruct.egg-info",
        "uid_components": [
          "dir:llmstruct",
          "dir:llmstruct.egg-info"
        ],
        "artifact_id": "1e1ec52d-97f4-1611-58fa-27b795871026",
        "metadata": {}
      },
      {
        "path": "llmstruct/ARCHIVE",
        "type": "directory",
        "uid": "dir:llmstruct/ARCHIVE",
        "uid_components": [
          "dir:llmstruct/ARCHIVE"
        ],
        "artifact_id": "9ea39439-9fb9-9a0f-8f85-53bce6d7edf4",
        "metadata": {}
      },
      {
        "path": "llmstruct/ARCHIVE/cli_argument_parser.py",
        "type": "file",
        "uid": "file:llmstruct/ARCHIVE/cli_argument_parser.py",
        "uid_components": [
          "file:llmstruct/ARCHIVE/cli_argument_parser",
          "file:llmstruct/ARCHIVE/cli_argument_parser.py"
        ],
        "artifact_id": "885f0393-a56f-3cd9-9e38-4f953490bc5e",
        "metadata": {}
      },
      {
        "path": "llmstruct/ARCHIVE/cli_commands.py",
        "type": "file",
        "uid": "file:llmstruct/ARCHIVE/cli_commands.py",
        "uid_components": [
          "file:llmstruct/ARCHIVE/cli_commands",
          "file:llmstruct/ARCHIVE/cli_commands.py"
        ],
        "artifact_id": "d9af851a-de36-febe-6cac-c9d66bc5f2d8",
        "metadata": {}
      },
      {
        "path": "llmstruct/ARCHIVE/cli_config.py",
        "type": "file",
        "uid": "file:llmstruct/ARCHIVE/cli_config.py",
        "uid_components": [
          "file:llmstruct/ARCHIVE/cli_config",
          "file:llmstruct/ARCHIVE/cli_config.py"
        ],
        "artifact_id": "611c904b-b7f9-74ba-93d8-68629c04cd3f",
        "metadata": {}
      },
      {
        "path": "llmstruct/ARCHIVE/cli_core.py",
        "type": "file",
        "uid": "file:llmstruct/ARCHIVE/cli_core.py",
        "uid_components": [
          "file:llmstruct/ARCHIVE/cli_core",
          "file:llmstruct/ARCHIVE/cli_core.py"
        ],
        "artifact_id": "a8f4cf4b-b881-d7ee-7d0c-b6c2fb056021",
        "metadata": {}
      },
      {
        "path": "llmstruct/ARCHIVE/cli_main_commands.py",
        "type": "file",
        "uid": "file:llmstruct/ARCHIVE/cli_main_commands.py",
        "uid_components": [
          "file:llmstruct/ARCHIVE/cli_main_commands",
          "file:llmstruct/ARCHIVE/cli_main_commands.py"
        ],
        "artifact_id": "6dd0f6ca-19c5-ef8c-a2d7-2de5eee3da53",
        "metadata": {}
      },
      {
        "path": "llmstruct/ARCHIVE/cli_utils.py",
        "type": "file",
        "uid": "file:llmstruct/ARCHIVE/cli_utils.py",
        "uid_components": [
          "file:llmstruct/ARCHIVE/cli_utils",
          "file:llmstruct/ARCHIVE/cli_utils.py"
        ],
        "artifact_id": "3916fcac-bf88-d59a-662d-0c9602e9f926",
        "metadata": {}
      },
      {
        "path": "llmstruct/__init__.py",
        "type": "file",
        "uid": "file:llmstruct/__init__.py",
        "uid_components": [
          "file:llmstruct/__init__",
          "file:llmstruct/__init__.py"
        ],
        "artifact_id": "a26fc03a-62a2-88af-9474-b825be5a3de8",
        "metadata": {}
      },
      {
        "path": "llmstruct/__main__.py",
        "type": "file",
        "uid": "file:llmstruct/__main__.py",
        "uid_components": [
          "file:llmstruct/__main__",
          "file:llmstruct/__main__.py"
        ],
        "artifact_id": "009d57e0-805a-7eb5-fac2-071fff8a91c8",
        "metadata": {}
      },
      {
        "path": "llmstruct/api",
        "type": "directory",
        "uid": "dir:llmstruct/api",
        "uid_components": [
          "dir:llmstruct/api"
        ],
        "artifact_id": "51cc13df-2e43-16ad-8888-1fe80bfc1a14",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/__init__.py",
        "type": "file",
        "uid": "file:llmstruct/api/__init__.py",
        "uid_components": [
          "file:llmstruct/api/__init__",
          "file:llmstruct/api/__init__.py"
        ],
        "artifact_id": "2dfd358a-5064-fca2-c540-0ee25ee4c69e",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/app.py",
        "type": "file",
        "uid": "file:llmstruct/api/app.py",
        "uid_components": [
          "file:llmstruct/api/app",
          "file:llmstruct/api/app.py"
        ],
        "artifact_id": "26d97353-05f4-a704-0c24-2f34a60df6e3",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/config.py",
        "type": "file",
        "uid": "file:llmstruct/api/config.py",
        "uid_components": [
          "file:llmstruct/api/config",
          "file:llmstruct/api/config.py"
        ],
        "artifact_id": "90453d03-e94e-fbae-f755-7939fdb05a46",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/middleware",
        "type": "directory",
        "uid": "dir:llmstruct/api/middleware",
        "uid_components": [
          "dir:llmstruct/api/middleware"
        ],
        "artifact_id": "4d48044c-979c-f5cd-0ac4-481032d52bf1",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/middleware/__init__.py",
        "type": "file",
        "uid": "file:llmstruct/api/middleware/__init__.py",
        "uid_components": [
          "file:llmstruct/api/middleware/__init__",
          "file:llmstruct/api/middleware/__init__.py"
        ],
        "artifact_id": "3b64cfd8-e706-ed19-fd99-0b8c102ea8d6",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/middleware/logging.py",
        "type": "file",
        "uid": "file:llmstruct/api/middleware/logging.py",
        "uid_components": [
          "file:llmstruct/api/middleware/logging",
          "file:llmstruct/api/middleware/logging.py"
        ],
        "artifact_id": "d975674a-1542-827a-4c4b-015064dac36f",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/models",
        "type": "directory",
        "uid": "dir:llmstruct/api/models",
        "uid_components": [
          "dir:llmstruct/api/models"
        ],
        "artifact_id": "ed2437e9-a1f4-b3f1-3e10-3d3ade76c3aa",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/models/__init__.py",
        "type": "file",
        "uid": "file:llmstruct/api/models/__init__.py",
        "uid_components": [
          "file:llmstruct/api/models/__init__",
          "file:llmstruct/api/models/__init__.py"
        ],
        "artifact_id": "a75cdb3d-a8be-434e-a637-9fd6f4785376",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/models/requests.py",
        "type": "file",
        "uid": "file:llmstruct/api/models/requests.py",
        "uid_components": [
          "file:llmstruct/api/models/requests",
          "file:llmstruct/api/models/requests.py"
        ],
        "artifact_id": "6238b520-3d30-d314-ced9-8f1467e3a443",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/models/responses.py",
        "type": "file",
        "uid": "file:llmstruct/api/models/responses.py",
        "uid_components": [
          "file:llmstruct/api/models/responses",
          "file:llmstruct/api/models/responses.py"
        ],
        "artifact_id": "b8d23d8c-d068-42f7-f7de-88a4e69e1d62",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/routes",
        "type": "directory",
        "uid": "dir:llmstruct/api/routes",
        "uid_components": [
          "dir:llmstruct/api/routes"
        ],
        "artifact_id": "4a86332b-5ee4-cbf3-3f45-a23efffca56b",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/routes/__init__.py",
        "type": "file",
        "uid": "file:llmstruct/api/routes/__init__.py",
        "uid_components": [
          "file:llmstruct/api/routes/__init__",
          "file:llmstruct/api/routes/__init__.py"
        ],
        "artifact_id": "c5a9cd52-a34a-3d25-efb9-d2496571439b",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/routes/chat.py",
        "type": "file",
        "uid": "file:llmstruct/api/routes/chat.py",
        "uid_components": [
          "file:llmstruct/api/routes/chat",
          "file:llmstruct/api/routes/chat.py"
        ],
        "artifact_id": "f648b92b-3aff-5643-3e64-19db7f2b4616",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/routes/continue_adapter.py",
        "type": "file",
        "uid": "file:llmstruct/api/routes/continue_adapter.py",
        "uid_components": [
          "file:llmstruct/api/routes/continue_adapter",
          "file:llmstruct/api/routes/continue_adapter.py"
        ],
        "artifact_id": "444910be-c00e-783f-46fe-d57993c42166",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/routes/system.py",
        "type": "file",
        "uid": "file:llmstruct/api/routes/system.py",
        "uid_components": [
          "file:llmstruct/api/routes/system",
          "file:llmstruct/api/routes/system.py"
        ],
        "artifact_id": "d92a16dc-68e5-aa0b-0ce9-af3e0dbcf9d5",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/services",
        "type": "directory",
        "uid": "dir:llmstruct/api/services",
        "uid_components": [
          "dir:llmstruct/api/services"
        ],
        "artifact_id": "4f1afeab-a950-69af-9cce-93408d0de159",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/services/__init__.py",
        "type": "file",
        "uid": "file:llmstruct/api/services/__init__.py",
        "uid_components": [
          "file:llmstruct/api/services/__init__",
          "file:llmstruct/api/services/__init__.py"
        ],
        "artifact_id": "3cd89322-5bc1-24be-bd3f-e614a2b8b4de",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/services/chat_session.py",
        "type": "file",
        "uid": "file:llmstruct/api/services/chat_session.py",
        "uid_components": [
          "file:llmstruct/api/services/chat_session",
          "file:llmstruct/api/services/chat_session.py"
        ],
        "artifact_id": "39f3508c-3305-cc6b-2992-9a9edbaa571f",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/services/cli_bridge.py",
        "type": "file",
        "uid": "file:llmstruct/api/services/cli_bridge.py",
        "uid_components": [
          "file:llmstruct/api/services/cli_bridge",
          "file:llmstruct/api/services/cli_bridge.py"
        ],
        "artifact_id": "92b7ec8b-2c44-39e1-b8a4-70f974e5f9c1",
        "metadata": {}
      },
      {
        "path": "llmstruct/api/services/llm_service.py",
        "type": "file",
        "uid": "file:llmstruct/api/services/llm_service.py",
        "uid_components": [
          "file:llmstruct/api/services/llm_service",
          "file:llmstruct/api/services/llm_service.py"
        ],
        "artifact_id": "a7f947ee-5d61-6593-7b0b-1c499f1ba3ec",
        "metadata": {}
      },
      {
        "path": "llmstruct/cache.py",
        "type": "file",
        "uid": "file:llmstruct/cache.py",
        "uid_components": [
          "file:llmstruct/cache",
          "file:llmstruct/cache.py"
        ],
        "artifact_id": "7ce40444-bd87-c6f7-9313-234974181ef7",
        "metadata": {}
      },
      {
        "path": "llmstruct/cli.py",
        "type": "file",
        "uid": "file:llmstruct/cli.py",
        "uid_components": [
          "file:llmstruct/cli",
          "file:llmstruct/cli.py"
        ],
        "artifact_id": "86700c74-a56b-3c48-16b9-b2f6985c3066",
        "metadata": {}
      },
      {
        "path": "llmstruct/core",
        "type": "directory",
        "uid": "dir:llmstruct/core",
        "uid_components": [
          "dir:llmstruct/core"
        ],
        "artifact_id": "206e2f55-b905-aeb6-c2e6-cab16839622c",
        "metadata": {}
      },
      {
        "path": "llmstruct/core/__init__.py",
        "type": "file",
        "uid": "file:llmstruct/core/__init__.py",
        "uid_components": [
          "file:llmstruct/core/__init__",
          "file:llmstruct/core/__init__.py"
        ],
        "artifact_id": "26fe5001-a6cb-de3a-a47a-82bf756b6849",
        "metadata": {}
      },
      {
        "path": "llmstruct/core/json_structure.py",
        "type": "file",
        "uid": "file:llmstruct/core/json_structure.py",
        "uid_components": [
          "file:llmstruct/core/json_structure",
          "file:llmstruct/core/json_structure.py"
        ],
        "artifact_id": "e2399236-0ab5-f617-ece3-44da3e75434d",
        "metadata": {}
      },
      {
        "path": "llmstruct/core/schema_validation.py",
        "type": "file",
        "uid": "file:llmstruct/core/schema_validation.py",
        "uid_components": [
          "file:llmstruct/core/schema_validation",
          "file:llmstruct/core/schema_validation.py"
        ],
        "artifact_id": "5f2de968-2760-10fb-a318-5e82f7943e48",
        "metadata": {}
      },
      {
        "path": "llmstruct/core/summary_system.py",
        "type": "file",
        "uid": "file:llmstruct/core/summary_system.py",
        "uid_components": [
          "file:llmstruct/core/summary_system",
          "file:llmstruct/core/summary_system.py"
        ],
        "artifact_id": "4b3f4442-09e6-df4b-aa3a-60b2fd12dd7b",
        "metadata": {}
      },
      {
        "path": "llmstruct/core/uid_generator.py",
        "type": "file",
        "uid": "file:llmstruct/core/uid_generator.py",
        "uid_components": [
          "file:llmstruct/core/uid_generator",
          "file:llmstruct/core/uid_generator.py"
        ],
        "artifact_id": "a4604057-d248-85f9-a30c-dbe60f1041b4",
        "metadata": {}
      },
      {
        "path": "llmstruct/generators",
        "type": "directory",
        "uid": "dir:llmstruct/generators",
        "uid_components": [
          "dir:llmstruct/generators"
        ],
        "artifact_id": "6458596b-9b6c-5b7b-7be2-923992a6e353",
        "metadata": {}
      },
      {
        "path": "llmstruct/generators/__init__.py",
        "type": "file",
        "uid": "file:llmstruct/generators/__init__.py",
        "uid_components": [
          "file:llmstruct/generators/__init__",
          "file:llmstruct/generators/__init__.py"
        ],
        "artifact_id": "6425cd37-6264-0b5a-cfed-dff09d8fd749",
        "metadata": {}
      },
      {
        "path": "llmstruct/generators/go_json_generator.py",
        "type": "file",
        "uid": "file:llmstruct/generators/go_json_generator.py",
        "uid_components": [
          "file:llmstruct/generators/go_json_generator",
          "file:llmstruct/generators/go_json_generator.py"
        ],
        "artifact_id": "b6387895-bebd-5925-589d-39bc4fe55d34",
        "metadata": {}
      },
      {
        "path": "llmstruct/generators/json_generator.py",
        "type": "file",
        "uid": "file:llmstruct/generators/json_generator.py",
        "uid_components": [
          "file:llmstruct/generators/json_generator",
          "file:llmstruct/generators/json_generator.py"
        ],
        "artifact_id": "a67fd8a5-75b1-1012-bf01-4201727191ab",
        "metadata": {}
      },
      {
        "path": "llmstruct/json_selector.py",
        "type": "file",
        "uid": "file:llmstruct/json_selector.py",
        "uid_components": [
          "file:llmstruct/json_selector",
          "file:llmstruct/json_selector.py"
        ],
        "artifact_id": "e20da16a-3606-c7cf-713e-4a4053b70fbb",
        "metadata": {}
      },
      {
        "path": "llmstruct/llm_client.py",
        "type": "file",
        "uid": "file:llmstruct/llm_client.py",
        "uid_components": [
          "file:llmstruct/llm_client",
          "file:llmstruct/llm_client.py"
        ],
        "artifact_id": "28414261-53c0-cb00-5833-67e9b1ce74d1",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules",
        "type": "directory",
        "uid": "dir:llmstruct/modules",
        "uid_components": [
          "dir:llmstruct/modules"
        ],
        "artifact_id": "ca661bfc-9456-c557-78d4-4f983fa2d302",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli",
        "type": "directory",
        "uid": "dir:llmstruct/modules/cli",
        "uid_components": [
          "dir:llmstruct/modules/cli"
        ],
        "artifact_id": "df1683f4-7b92-0d53-0fc5-33b89dea79bd",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli/__init__.py",
        "type": "file",
        "uid": "file:llmstruct/modules/cli/__init__.py",
        "uid_components": [
          "file:llmstruct/modules/cli/__init__",
          "file:llmstruct/modules/cli/__init__.py"
        ],
        "artifact_id": "a46a0bfd-bdbf-a85b-b884-0d640ee13b58",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli/analyze_duplicates.py",
        "type": "file",
        "uid": "file:llmstruct/modules/cli/analyze_duplicates.py",
        "uid_components": [
          "file:llmstruct/modules/cli/analyze_duplicates",
          "file:llmstruct/modules/cli/analyze_duplicates.py"
        ],
        "artifact_id": "abedf49d-deb2-66c1-aa9b-ae3ed3c1666f",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli/audit.py",
        "type": "file",
        "uid": "file:llmstruct/modules/cli/audit.py",
        "uid_components": [
          "file:llmstruct/modules/cli/audit",
          "file:llmstruct/modules/cli/audit.py"
        ],
        "artifact_id": "c6cc38da-b54e-32ca-e26e-3d01cd1af3ce",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli/context.py",
        "type": "file",
        "uid": "file:llmstruct/modules/cli/context.py",
        "uid_components": [
          "file:llmstruct/modules/cli/context",
          "file:llmstruct/modules/cli/context.py"
        ],
        "artifact_id": "5fa6229e-3c92-8159-73e5-441e48278b1f",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli/copilot.py",
        "type": "file",
        "uid": "file:llmstruct/modules/cli/copilot.py",
        "uid_components": [
          "file:llmstruct/modules/cli/copilot",
          "file:llmstruct/modules/cli/copilot.py"
        ],
        "artifact_id": "3028cc16-ff1e-b256-6fa8-82553c85e9cb",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli/dogfood.py",
        "type": "file",
        "uid": "file:llmstruct/modules/cli/dogfood.py",
        "uid_components": [
          "file:llmstruct/modules/cli/dogfood",
          "file:llmstruct/modules/cli/dogfood.py"
        ],
        "artifact_id": "20d95b86-ffd9-7ac0-7f7b-04599ae85bd0",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli/epic.py",
        "type": "file",
        "uid": "file:llmstruct/modules/cli/epic.py",
        "uid_components": [
          "file:llmstruct/modules/cli/epic",
          "file:llmstruct/modules/cli/epic.py"
        ],
        "artifact_id": "d85c0a4b-d86d-a242-5ecc-f96cb2dcc56e",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli/handlers.py",
        "type": "file",
        "uid": "file:llmstruct/modules/cli/handlers.py",
        "uid_components": [
          "file:llmstruct/modules/cli/handlers",
          "file:llmstruct/modules/cli/handlers.py"
        ],
        "artifact_id": "02546352-fe0b-26b1-1314-09e1c984c19f",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli/handlers_legacy.py",
        "type": "file",
        "uid": "file:llmstruct/modules/cli/handlers_legacy.py",
        "uid_components": [
          "file:llmstruct/modules/cli/handlers_legacy",
          "file:llmstruct/modules/cli/handlers_legacy.py"
        ],
        "artifact_id": "5db04df3-2966-9217-4fde-30eb2a5c4a0f",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli/parse.py",
        "type": "file",
        "uid": "file:llmstruct/modules/cli/parse.py",
        "uid_components": [
          "file:llmstruct/modules/cli/parse",
          "file:llmstruct/modules/cli/parse.py"
        ],
        "artifact_id": "d38eeea5-4f8d-bef5-0d61-b2d66f6c1b24",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli/query.py",
        "type": "file",
        "uid": "file:llmstruct/modules/cli/query.py",
        "uid_components": [
          "file:llmstruct/modules/cli/query",
          "file:llmstruct/modules/cli/query.py"
        ],
        "artifact_id": "abd8b0e4-3390-b99d-7da7-455ef28f1615",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli/review.py",
        "type": "file",
        "uid": "file:llmstruct/modules/cli/review.py",
        "uid_components": [
          "file:llmstruct/modules/cli/review",
          "file:llmstruct/modules/cli/review.py"
        ],
        "artifact_id": "acbb0d00-cd42-7b29-69ce-90c6325a46cd",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/cli/utils.py",
        "type": "file",
        "uid": "file:llmstruct/modules/cli/utils.py",
        "uid_components": [
          "file:llmstruct/modules/cli/utils",
          "file:llmstruct/modules/cli/utils.py"
        ],
        "artifact_id": "18249d2e-4081-f129-a78b-091795f6fc29",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/commands",
        "type": "directory",
        "uid": "dir:llmstruct/modules/commands",
        "uid_components": [
          "dir:llmstruct/modules/commands"
        ],
        "artifact_id": "8285664f-9325-74e1-c27c-75304f7d568f",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/commands/__init__.py",
        "type": "file",
        "uid": "file:llmstruct/modules/commands/__init__.py",
        "uid_components": [
          "file:llmstruct/modules/commands/__init__",
          "file:llmstruct/modules/commands/__init__.py"
        ],
        "artifact_id": "b66be5e0-7327-ca8d-7410-46a47c61c536",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/commands/metrics.py",
        "type": "file",
        "uid": "file:llmstruct/modules/commands/metrics.py",
        "uid_components": [
          "file:llmstruct/modules/commands/metrics",
          "file:llmstruct/modules/commands/metrics.py"
        ],
        "artifact_id": "a43b8c9d-4fd2-5c21-25be-0aeac1341ea6",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/commands/queue.py",
        "type": "file",
        "uid": "file:llmstruct/modules/commands/queue.py",
        "uid_components": [
          "file:llmstruct/modules/commands/queue",
          "file:llmstruct/modules/commands/queue.py"
        ],
        "artifact_id": "42e377bf-ab2d-620f-e767-b0350f75c96f",
        "metadata": {}
      },
      {
        "path": "llmstruct/modules/commands/services.py",
        "type": "file",
        "uid": "file:llmstruct/modules/commands/services.py",
        "uid_components": [
          "file:llmstruct/modules/commands/services",
          "file:llmstruct/modules/commands/services.py"
        ],
        "artifact_id": "6a88ec38-7344-9816-051d-2dbcf31ff188",
        "metadata": {}
      },
      {
        "path": "llmstruct/parsers",
        "type": "directory",
        "uid": "dir:llmstruct/parsers",
        "uid_components": [
          "dir:llmstruct/parsers"
        ],
        "artifact_id": "3b664bac-fdab-fc43-3837-4b8accf42243",
        "metadata": {}
      },
      {
        "path": "llmstruct/parsers/__init__.py",
        "type": "file",
        "uid": "file:llmstruct/parsers/__init__.py",
        "uid_components": [
          "file:llmstruct/parsers/__init__",
          "file:llmstruct/parsers/__init__.py"
        ],
        "artifact_id": "5af344b2-8ddd-0fcc-fdbf-fd64d0d1161c",
        "metadata": {}
      },
      {
        "path": "llmstruct/parsers/go_analyzer.py",
        "type": "file",
        "uid": "file:llmstruct/parsers/go_analyzer.py",
        "uid_components": [
          "file:llmstruct/parsers/go_analyzer",
          "file:llmstruct/parsers/go_analyzer.py"
        ],
        "artifact_id": "d1a9a05c-8603-c265-1537-c7e1f7344d41",
        "metadata": {}
      },
      {
        "path": "llmstruct/parsers/javascript_parser.py",
        "type": "file",
        "uid": "file:llmstruct/parsers/javascript_parser.py",
        "uid_components": [
          "file:llmstruct/parsers/javascript_parser",
          "file:llmstruct/parsers/javascript_parser.py"
        ],
        "artifact_id": "b948a15b-c71d-1c7f-f381-6192057ac58b",
        "metadata": {}
      },
      {
        "path": "llmstruct/parsers/python_parser.py",
        "type": "file",
        "uid": "file:llmstruct/parsers/python_parser.py",
        "uid_components": [
          "file:llmstruct/parsers/python_parser",
          "file:llmstruct/parsers/python_parser.py"
        ],
        "artifact_id": "80c997a9-3f8f-acf3-0ae2-a7753dd46ff6",
        "metadata": {}
      },
      {
        "path": "llmstruct/parsers/universal_converter.py",
        "type": "file",
        "uid": "file:llmstruct/parsers/universal_converter.py",
        "uid_components": [
          "file:llmstruct/parsers/universal_converter",
          "file:llmstruct/parsers/universal_converter.py"
        ],
        "artifact_id": "a39a2372-1f3c-7422-7836-05171ce74ec7",
        "metadata": {}
      },
      {
        "path": "llmstruct/self_run.py",
        "type": "file",
        "uid": "file:llmstruct/self_run.py",
        "uid_components": [
          "file:llmstruct/self_run",
          "file:llmstruct/self_run.py"
        ],
        "artifact_id": "9a0dcf75-48be-8949-1f7f-0a9f1cc85118",
        "metadata": {}
      },
      {
        "path": "llmstruct/templates",
        "type": "directory",
        "uid": "dir:llmstruct/templates",
        "uid_components": [
          "dir:llmstruct/templates"
        ],
        "artifact_id": "44395a92-4df7-3aa5-d30f-d8af9ffe975c",
        "metadata": {}
      },
      {
        "path": "llmstruct/templates/__init__.py",
        "type": "file",
        "uid": "file:llmstruct/templates/__init__.py",
        "uid_components": [
          "file:llmstruct/templates/__init__",
          "file:llmstruct/templates/__init__.py"
        ],
        "artifact_id": "589d91f1-344b-cb80-46ca-12aa99ca4f26",
        "metadata": {}
      },
      {
        "path": "llmstruct/validators",
        "type": "directory",
        "uid": "dir:llmstruct/validators",
        "uid_components": [
          "dir:llmstruct/validators"
        ],
        "artifact_id": "caf004ab-d38d-a666-e358-33e083890b21",
        "metadata": {}
      },
      {
        "path": "llmstruct/validators/__init__.py",
        "type": "file",
        "uid": "file:llmstruct/validators/__init__.py",
        "uid_components": [
          "file:llmstruct/validators/__init__",
          "file:llmstruct/validators/__init__.py"
        ],
        "artifact_id": "b424e7b3-50b6-958f-5eba-aa9f956014d6",
        "metadata": {}
      },
      {
        "path": "llmstruct/validators/json_validator.py",
        "type": "file",
        "uid": "file:llmstruct/validators/json_validator.py",
        "uid_components": [
          "file:llmstruct/validators/json_validator",
          "file:llmstruct/validators/json_validator.py"
        ],
        "artifact_id": "5b8a4d32-f377-2838-7fd9-b1addb7db5c4",
        "metadata": {}
      },
      {
        "path": "scripts",
        "type": "directory",
        "uid": "dir:scripts",
        "uid_components": [
          "dir:scripts"
        ],
        "artifact_id": "1bb1c2ee-5837-5e37-3d27-e0e6ea2b5c09",
        "metadata": {}
      },
      {
        "path": "scripts/auto_update_struct.py",
        "type": "file",
        "uid": "file:scripts/auto_update_struct.py",
        "uid_components": [
          "file:scripts/auto_update_struct",
          "file:scripts/auto_update_struct.py"
        ],
        "artifact_id": "1e7c7c20-cfaf-f320-9f65-d011234a353c",
        "metadata": {}
      },
      {
        "path": "scripts/collector.py",
        "type": "file",
        "uid": "file:scripts/collector.py",
        "uid_components": [
          "file:scripts/collector",
          "file:scripts/collector.py"
        ],
        "artifact_id": "660a7993-34e2-e218-f3ff-ce80313140c0",
        "metadata": {}
      },
      {
        "path": "scripts/create_comprehensive_index.py",
        "type": "file",
        "uid": "file:scripts/create_comprehensive_index.py",
        "uid_components": [
          "file:scripts/create_comprehensive_index",
          "file:scripts/create_comprehensive_index.py"
        ],
        "artifact_id": "47d3faeb-a0d0-4cfa-fc9f-fae816c359e8",
        "metadata": {}
      },
      {
        "path": "scripts/create_github_issues.py",
        "type": "file",
        "uid": "file:scripts/create_github_issues.py",
        "uid_components": [
          "file:scripts/create_github_issues",
          "file:scripts/create_github_issues.py"
        ],
        "artifact_id": "966fd14e-fb77-f00e-abce-2dbb9e7ba995",
        "metadata": {}
      },
      {
        "path": "scripts/create_tasks_index.py",
        "type": "file",
        "uid": "file:scripts/create_tasks_index.py",
        "uid_components": [
          "file:scripts/create_tasks_index",
          "file:scripts/create_tasks_index.py"
        ],
        "artifact_id": "cee896af-1c3a-5f7a-fb5a-f2267e4055ab",
        "metadata": {}
      },
      {
        "path": "scripts/deploy_embedded_files.py",
        "type": "file",
        "uid": "file:scripts/deploy_embedded_files.py",
        "uid_components": [
          "file:scripts/deploy_embedded_files",
          "file:scripts/deploy_embedded_files.py"
        ],
        "artifact_id": "3716c58b-8e6e-876b-7bc1-273193e4480a",
        "metadata": {}
      },
      {
        "path": "scripts/epic_roadmap_manager.py",
        "type": "file",
        "uid": "file:scripts/epic_roadmap_manager.py",
        "uid_components": [
          "file:scripts/epic_roadmap_manager",
          "file:scripts/epic_roadmap_manager.py"
        ],
        "artifact_id": "34b0f132-7763-96aa-7123-219361e1d660",
        "metadata": {}
      },
      {
        "path": "scripts/export_to_github_projects.py",
        "type": "file",
        "uid": "file:scripts/export_to_github_projects.py",
        "uid_components": [
          "file:scripts/export_to_github_projects",
          "file:scripts/export_to_github_projects.py"
        ],
        "artifact_id": "a2d492f0-b5ee-983f-8296-0db25278f886",
        "metadata": {}
      },
      {
        "path": "scripts/fix_github_script.py",
        "type": "file",
        "uid": "file:scripts/fix_github_script.py",
        "uid_components": [
          "file:scripts/fix_github_script",
          "file:scripts/fix_github_script.py"
        ],
        "artifact_id": "99b5c7f1-7d68-5fcc-af74-e6b489c9994e",
        "metadata": {}
      },
      {
        "path": "scripts/fix_hardcoded_usernames.py",
        "type": "file",
        "uid": "file:scripts/fix_hardcoded_usernames.py",
        "uid_components": [
          "file:scripts/fix_hardcoded_usernames",
          "file:scripts/fix_hardcoded_usernames.py"
        ],
        "artifact_id": "f5e02839-98e3-d171-bc0e-d2a3370fdbff",
        "metadata": {}
      },
      {
        "path": "scripts/github_sync_manager.py",
        "type": "file",
        "uid": "file:scripts/github_sync_manager.py",
        "uid_components": [
          "file:scripts/github_sync_manager",
          "file:scripts/github_sync_manager.py"
        ],
        "artifact_id": "ee064902-e33a-a856-06c1-236114f5bdff",
        "metadata": {}
      },
      {
        "path": "scripts/github_sync_manager_enhanced.py",
        "type": "file",
        "uid": "file:scripts/github_sync_manager_enhanced.py",
        "uid_components": [
          "file:scripts/github_sync_manager_enhanced",
          "file:scripts/github_sync_manager_enhanced.py"
        ],
        "artifact_id": "ab7a5154-92ad-10a8-dc0f-7e098efd05af",
        "metadata": {}
      },
      {
        "path": "scripts/old",
        "type": "directory",
        "uid": "dir:scripts/old",
        "uid_components": [
          "dir:scripts/old"
        ],
        "artifact_id": "674d5dae-659f-5e1b-45f8-cf8a07f7d1b9",
        "metadata": {}
      },
      {
        "path": "scripts/process_926_items.py",
        "type": "file",
        "uid": "file:scripts/process_926_items.py",
        "uid_components": [
          "file:scripts/process_926_items",
          "file:scripts/process_926_items.py"
        ],
        "artifact_id": "6e0b5439-bc49-996a-5dc3-310cecd6d65d",
        "metadata": {}
      },
      {
        "path": "scripts/session_cli.py",
        "type": "file",
        "uid": "file:scripts/session_cli.py",
        "uid_components": [
          "file:scripts/session_cli",
          "file:scripts/session_cli.py"
        ],
        "artifact_id": "71266a2f-3e76-366f-e4be-78bbcbc90207",
        "metadata": {}
      },
      {
        "path": "scripts/team",
        "type": "directory",
        "uid": "dir:scripts/team",
        "uid_components": [
          "dir:scripts/team"
        ],
        "artifact_id": "bbf9809b-aa0b-56a5-64b2-9e6462fd0b49",
        "metadata": {}
      },
      {
        "path": "scripts/team/__init__.py",
        "type": "file",
        "uid": "file:scripts/team/__init__.py",
        "uid_components": [
          "file:scripts/team/__init__",
          "file:scripts/team/__init__.py"
        ],
        "artifact_id": "75c30277-bd67-5757-afb5-c864dc4fadb7",
        "metadata": {}
      },
      {
        "path": "scripts/validate_epics.py",
        "type": "file",
        "uid": "file:scripts/validate_epics.py",
        "uid_components": [
          "file:scripts/validate_epics",
          "file:scripts/validate_epics.py"
        ],
        "artifact_id": "048aede5-0312-30b9-4575-9080cd8b47a4",
        "metadata": {}
      },
      {
        "path": "scripts/validate_json.py",
        "type": "file",
        "uid": "file:scripts/validate_json.py",
        "uid_components": [
          "file:scripts/validate_json",
          "file:scripts/validate_json.py"
        ],
        "artifact_id": "d8e2ac41-f231-12c4-3058-7b8e58f7a8f6",
        "metadata": {}
      },
      {
        "path": "scripts/validate_refs.py",
        "type": "file",
        "uid": "file:scripts/validate_refs.py",
        "uid_components": [
          "file:scripts/validate_refs",
          "file:scripts/validate_refs.py"
        ],
        "artifact_id": "cad9ef81-f701-c6d0-5db8-e16bfe6d702f",
        "metadata": {}
      },
      {
        "path": "scripts/validate_schemas.py",
        "type": "file",
        "uid": "file:scripts/validate_schemas.py",
        "uid_components": [
          "file:scripts/validate_schemas",
          "file:scripts/validate_schemas.py"
        ],
        "artifact_id": "47a81a6d-9236-2b86-e86f-7b416052fa5c",
        "metadata": {}
      }
    ],
    "structure_version": "2.1",
    "enhancements": [
      "hierarchical_organization",
      "built_in_metrics",
      "markdown_anchors",
      "uid_system"
    ]
  },
  "toc": [
    {
      "module_id": "llmstruct.json_selector",
      "path": "llmstruct/json_selector.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "uid": "llmstruct.json_selector",
      "uid_components": [
        "llmstruct",
        "llmstruct.json_selector"
      ],
      "uid_type": "module",
      "artifact_id": "29ac6c3a-c38d-a4bc-4a9e-0c3f4972b60a",
      "markdown_anchor": {
        "id": "llmstruct-json_selector",
        "title": "Module: llmstruct.json_selector",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.json_selector](#llmstruct-json_selector)",
        "html_anchor": "<a id=\"llmstruct-json_selector\"></a>"
      }
    },
    {
      "module_id": "llmstruct.__main__",
      "path": "llmstruct/__main__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "uid": "llmstruct.__main__",
      "uid_components": [
        "llmstruct",
        "llmstruct.__main__"
      ],
      "uid_type": "module",
      "artifact_id": "7134d95a-a456-ce18-72a8-d6984a7f122c",
      "markdown_anchor": {
        "id": "llmstruct-__main__",
        "title": "Module: llmstruct.__main__",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.__main__](#llmstruct-__main__)",
        "html_anchor": "<a id=\"llmstruct-__main__\"></a>"
      }
    },
    {
      "module_id": "llmstruct.__init__",
      "path": "llmstruct/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "uid": "llmstruct.__init__",
      "uid_components": [
        "llmstruct",
        "llmstruct.__init__"
      ],
      "uid_type": "module",
      "artifact_id": "dc463e5e-230a-f3d8-2cf2-0ec4c2d9604f",
      "markdown_anchor": {
        "id": "llmstruct-__init__",
        "title": "Module: llmstruct.__init__",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.__init__](#llmstruct-__init__)",
        "html_anchor": "<a id=\"llmstruct-__init__\"></a>"
      }
    },
    {
      "module_id": "llmstruct.cache",
      "path": "llmstruct/cache.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "uid": "llmstruct.cache",
      "uid_components": [
        "llmstruct",
        "llmstruct.cache"
      ],
      "uid_type": "module",
      "artifact_id": "a8002cd9-7403-8018-bca3-4860dc286f19",
      "markdown_anchor": {
        "id": "llmstruct-cache",
        "title": "Module: llmstruct.cache",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.cache](#llmstruct-cache)",
        "html_anchor": "<a id=\"llmstruct-cache\"></a>"
      }
    },
    {
      "module_id": "llmstruct.self_run",
      "path": "llmstruct/self_run.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "uid": "llmstruct.self_run",
      "uid_components": [
        "llmstruct",
        "llmstruct.self_run"
      ],
      "uid_type": "module",
      "artifact_id": "ab11dee2-8884-5709-18b0-b374571186b3",
      "markdown_anchor": {
        "id": "llmstruct-self_run",
        "title": "Module: llmstruct.self_run",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.self_run](#llmstruct-self_run)",
        "html_anchor": "<a id=\"llmstruct-self_run\"></a>"
      }
    },
    {
      "module_id": "llmstruct.llm_client",
      "path": "llmstruct/llm_client.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "uid": "llmstruct.llm_client",
      "uid_components": [
        "llmstruct",
        "llmstruct.llm_client"
      ],
      "uid_type": "module",
      "artifact_id": "2f939f0c-01ba-fe57-b74b-500aaab38e55",
      "markdown_anchor": {
        "id": "llmstruct-llm_client",
        "title": "Module: llmstruct.llm_client",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.llm_client](#llmstruct-llm_client)",
        "html_anchor": "<a id=\"llmstruct-llm_client\"></a>"
      }
    },
    {
      "module_id": "llmstruct.cli",
      "path": "llmstruct/cli.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "LLMStruct CLI - Main entry point for the command-line interface.",
      "uid": "llmstruct.cli",
      "uid_components": [
        "llmstruct",
        "llmstruct.cli"
      ],
      "uid_type": "module",
      "artifact_id": "83dd4586-28f0-5a6c-cdec-c5c5d628f474",
      "markdown_anchor": {
        "id": "llmstruct-cli",
        "title": "Module: llmstruct.cli",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.cli](#llmstruct-cli)",
        "html_anchor": "<a id=\"llmstruct-cli\"></a>"
      }
    },
    {
      "module_id": "scripts.auto_update_struct",
      "path": "scripts/auto_update_struct.py",
      "category": "core",
      "functions": 8,
      "classes": 0,
      "summary": "Automatic struct.json update script",
      "uid": "scripts.auto_update_struct",
      "uid_components": [
        "scripts",
        "scripts.auto_update_struct"
      ],
      "uid_type": "module",
      "artifact_id": "3761c72a-e8a5-6f08-fa7a-caa30b339d36",
      "markdown_anchor": {
        "id": "scripts-auto_update_struct",
        "title": "Module: scripts.auto_update_struct",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: scripts.auto_update_struct](#scripts-auto_update_struct)",
        "html_anchor": "<a id=\"scripts-auto_update_struct\"></a>"
      }
    },
    {
      "module_id": "scripts.validate_schemas",
      "path": "scripts/validate_schemas.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "uid": "scripts.validate_schemas",
      "uid_components": [
        "scripts",
        "scripts.validate_schemas"
      ],
      "uid_type": "module",
      "artifact_id": "e08c221d-3a74-597c-2b1b-e459cfe1f71e",
      "markdown_anchor": {
        "id": "scripts-validate_schemas",
        "title": "Module: scripts.validate_schemas",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: scripts.validate_schemas](#scripts-validate_schemas)",
        "html_anchor": "<a id=\"scripts-validate_schemas\"></a>"
      }
    },
    {
      "module_id": "scripts.github_sync_manager",
      "path": "scripts/github_sync_manager.py",
      "category": "core",
      "functions": 15,
      "classes": 1,
      "summary": "GitHub Sync Manager - \u0418\u0434\u0435\u043c\u043f\u043e\u0442\u0435\u043d\u0442\u043d\u0430\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f processing results \u0441 GitHub",
      "uid": "scripts.github_sync_manager",
      "uid_components": [
        "scripts",
        "scripts.github_sync_manager"
      ],
      "uid_type": "module",
      "artifact_id": "b435845e-165d-2218-9067-816eb10b2142",
      "markdown_anchor": {
        "id": "scripts-github_sync_manager",
        "title": "Module: scripts.github_sync_manager",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: scripts.github_sync_manager](#scripts-github_sync_manager)",
        "html_anchor": "<a id=\"scripts-github_sync_manager\"></a>"
      }
    },
    {
      "module_id": "scripts.fix_github_script",
      "path": "scripts/fix_github_script.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Quick fix for GitHub issues creation script",
      "uid": "scripts.fix_github_script",
      "uid_components": [
        "scripts",
        "scripts.fix_github_script"
      ],
      "uid_type": "module",
      "artifact_id": "00d09d4f-6a0b-3446-fae4-fab7d1876da8",
      "markdown_anchor": {
        "id": "scripts-fix_github_script",
        "title": "Module: scripts.fix_github_script",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: scripts.fix_github_script](#scripts-fix_github_script)",
        "html_anchor": "<a id=\"scripts-fix_github_script\"></a>"
      }
    },
    {
      "module_id": "scripts.create_github_issues",
      "path": "scripts/create_github_issues.py",
      "category": "core",
      "functions": 11,
      "classes": 1,
      "summary": "GitHub Issues Creator for AI-Dogfooding Project",
      "uid": "scripts.create_github_issues",
      "uid_components": [
        "scripts",
        "scripts.create_github_issues"
      ],
      "uid_type": "module",
      "artifact_id": "1e8efa86-5fb7-9e0a-464e-1c216c16eb54",
      "markdown_anchor": {
        "id": "scripts-create_github_issues",
        "title": "Module: scripts.create_github_issues",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: scripts.create_github_issues](#scripts-create_github_issues)",
        "html_anchor": "<a id=\"scripts-create_github_issues\"></a>"
      }
    },
    {
      "module_id": "scripts.collector",
      "path": "scripts/collector.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "uid": "scripts.collector",
      "uid_components": [
        "scripts",
        "scripts.collector"
      ],
      "uid_type": "module",
      "artifact_id": "996bfc6f-6c75-05e8-0194-b447db870574",
      "markdown_anchor": {
        "id": "scripts-collector",
        "title": "Module: scripts.collector",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: scripts.collector](#scripts-collector)",
        "html_anchor": "<a id=\"scripts-collector\"></a>"
      }
    },
    {
      "module_id": "scripts.validate_refs",
      "path": "scripts/validate_refs.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "uid": "scripts.validate_refs",
      "uid_components": [
        "scripts",
        "scripts.validate_refs"
      ],
      "uid_type": "module",
      "artifact_id": "b539279d-2fef-2683-43b6-6df8b2fa8e52",
      "markdown_anchor": {
        "id": "scripts-validate_refs",
        "title": "Module: scripts.validate_refs",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: scripts.validate_refs](#scripts-validate_refs)",
        "html_anchor": "<a id=\"scripts-validate_refs\"></a>"
      }
    },
    {
      "module_id": "scripts.epic_roadmap_manager",
      "path": "scripts/epic_roadmap_manager.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "Epic Roadmap Manager - \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430\u043c\u0438 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0441\u0435\u0441\u0441\u0438\u0439",
      "uid": "scripts.epic_roadmap_manager",
      "uid_components": [
        "scripts",
        "scripts.epic_roadmap_manager"
      ],
      "uid_type": "module",
      "artifact_id": "dec553d3-c70d-2bbd-b702-a43e5b5bd24a",
      "markdown_anchor": {
        "id": "scripts-epic_roadmap_manager",
        "title": "Module: scripts.epic_roadmap_manager",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: scripts.epic_roadmap_manager](#scripts-epic_roadmap_manager)",
        "html_anchor": "<a id=\"scripts-epic_roadmap_manager\"></a>"
      }
    },
    {
      "module_id": "scripts.process_926_items",
      "path": "scripts/process_926_items.py",
      "category": "core",
      "functions": 16,
      "classes": 1,
      "summary": "926 Items Processing Script - Updated Implementation",
      "uid": "scripts.process_926_items",
      "uid_components": [
        "scripts",
        "scripts.process_926_items"
      ],
      "uid_type": "module",
      "artifact_id": "e640a8aa-7f4d-2248-f2d9-103fa9ea1e6b",
      "markdown_anchor": {
        "id": "scripts-process_926_items",
        "title": "Module: scripts.process_926_items",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: scripts.process_926_items](#scripts-process_926_items)",
        "html_anchor": "<a id=\"scripts-process_926_items\"></a>"
      }
    },
    {
      "module_id": "scripts.session_cli",
      "path": "scripts/session_cli.py",
      "category": "core",
      "functions": 10,
      "classes": 1,
      "summary": "Session Management CLI",
      "uid": "scripts.session_cli",
      "uid_components": [
        "scripts",
        "scripts.session_cli"
      ],
      "uid_type": "module",
      "artifact_id": "53361e7e-713f-da83-9c65-be933b6c6ba5",
      "markdown_anchor": {
        "id": "scripts-session_cli",
        "title": "Module: scripts.session_cli",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: scripts.session_cli](#scripts-session_cli)",
        "html_anchor": "<a id=\"scripts-session_cli\"></a>"
      }
    },
    {
      "module_id": "scripts.validate_epics",
      "path": "scripts/validate_epics.py",
      "category": "core",
      "functions": 5,
      "classes": 0,
      "summary": "Epic Data Validator",
      "uid": "scripts.validate_epics",
      "uid_components": [
        "scripts",
        "scripts.validate_epics"
      ],
      "uid_type": "module",
      "artifact_id": "921b7ee9-8f4e-93e6-b17d-b8da7f76c5a6",
      "markdown_anchor": {
        "id": "scripts-validate_epics",
        "title": "Module: scripts.validate_epics",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: scripts.validate_epics](#scripts-validate_epics)",
        "html_anchor": "<a id=\"scripts-validate_epics\"></a>"
      }
    },
    {
      "module_id": "scripts.export_to_github_projects",
      "path": "scripts/export_to_github_projects.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "Export script for GitHub Projects integration",
      "uid": "scripts.export_to_github_projects",
      "uid_components": [
        "scripts",
        "scripts.export_to_github_projects"
      ],
      "uid_type": "module",
      "artifact_id": "7e970950-eb71-e9ac-4bdd-4ef4f550cf0e",
      "markdown_anchor": {
        "id": "scripts-export_to_github_projects",
        "title": "Module: scripts.export_to_github_projects",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: scripts.export_to_github_projects](#scripts-export_to_github_projects)",
        "html_anchor": "<a id=\"scripts-export_to_github_projects\"></a>"
      }
    },
    {
      "module_id": "scripts.validate_json",
      "path": "scripts/validate_json.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "JSON Validation Script",
      "uid": "scripts.validate_json",
      "uid_components": [
        "scripts",
        "scripts.validate_json"
      ],
      "uid_type": "module",
      "artifact_id": "67cc7277-2213-b604-eec5-96bfd9260be1",
      "markdown_anchor": {
        "id": "scripts-validate_json",
        "title": "Module: scripts.validate_json",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: scripts.validate_json](#scripts-validate_json)",
        "html_anchor": "<a id=\"scripts-validate_json\"></a>"
      }
    },
    {
      "module_id": "scripts.create_comprehensive_index",
      "path": "scripts/create_comprehensive_index.py",
      "category": "core",
      "functions": 37,
      "classes": 2,
      "summary": "Comprehensive Project Index Creator",
      "uid": "scripts.create_comprehensive_index",
      "uid_components": [
        "scripts",
        "scripts.create_comprehensive_index"
      ],
      "uid_type": "module",
      "artifact_id": "748e1e33-3da6-4585-49bf-22aec3e3021e",
      "markdown_anchor": {
        "id": "scripts-create_comprehensive_index",
        "title": "Module: scripts.create_comprehensive_index",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: scripts.create_comprehensive_index](#scripts-create_comprehensive_index)",
        "html_anchor": "<a id=\"scripts-create_comprehensive_index\"></a>"
      }
    },
    {
      "module_id": "scripts.github_sync_manager_enhanced",
      "path": "scripts/github_sync_manager_enhanced.py",
      "category": "core",
      "functions": 28,
      "classes": 3,
      "summary": "Enhanced GitHub Sync Manager - \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u043b\u0443\u0447\u0448\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0438\u0437 full_project_rollout",
      "uid": "scripts.github_sync_manager_enhanced",
      "uid_components": [
        "scripts",
        "scripts.github_sync_manager_enhanced"
      ],
      "uid_type": "module",
      "artifact_id": "676f670c-d4c4-a6a8-8ea5-b74ed18a5e27",
      "markdown_anchor": {
        "id": "scripts-github_sync_manager_enhanced",
        "title": "Module: scripts.github_sync_manager_enhanced",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: scripts.github_sync_manager_enhanced](#scripts-github_sync_manager_enhanced)",
        "html_anchor": "<a id=\"scripts-github_sync_manager_enhanced\"></a>"
      }
    },
    {
      "module_id": "scripts.deploy_embedded_files",
      "path": "scripts/deploy_embedded_files.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "uid": "scripts.deploy_embedded_files",
      "uid_components": [
        "scripts",
        "scripts.deploy_embedded_files"
      ],
      "uid_type": "module",
      "artifact_id": "88839b6d-384b-584e-dc17-97a527e38fab",
      "markdown_anchor": {
        "id": "scripts-deploy_embedded_files",
        "title": "Module: scripts.deploy_embedded_files",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: scripts.deploy_embedded_files](#scripts-deploy_embedded_files)",
        "html_anchor": "<a id=\"scripts-deploy_embedded_files\"></a>"
      }
    },
    {
      "module_id": "scripts.fix_hardcoded_usernames",
      "path": "scripts/fix_hardcoded_usernames.py",
      "category": "core",
      "functions": 12,
      "classes": 2,
      "summary": "Fix Hardcoded Usernames Script",
      "uid": "scripts.fix_hardcoded_usernames",
      "uid_components": [
        "scripts",
        "scripts.fix_hardcoded_usernames"
      ],
      "uid_type": "module",
      "artifact_id": "9b8f8595-817b-ba48-6d78-80c7370b6498",
      "markdown_anchor": {
        "id": "scripts-fix_hardcoded_usernames",
        "title": "Module: scripts.fix_hardcoded_usernames",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: scripts.fix_hardcoded_usernames](#scripts-fix_hardcoded_usernames)",
        "html_anchor": "<a id=\"scripts-fix_hardcoded_usernames\"></a>"
      }
    },
    {
      "module_id": "scripts.create_tasks_index",
      "path": "scripts/create_tasks_index.py",
      "category": "core",
      "functions": 18,
      "classes": 3,
      "summary": "Tasks Index Creator",
      "uid": "scripts.create_tasks_index",
      "uid_components": [
        "scripts",
        "scripts.create_tasks_index"
      ],
      "uid_type": "module",
      "artifact_id": "483f20d6-e58e-e1a6-0ef8-fe7c456c9b30",
      "markdown_anchor": {
        "id": "scripts-create_tasks_index",
        "title": "Module: scripts.create_tasks_index",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: scripts.create_tasks_index](#scripts-create_tasks_index)",
        "html_anchor": "<a id=\"scripts-create_tasks_index\"></a>"
      }
    },
    {
      "module_id": "llmstruct.templates.__init__",
      "path": "llmstruct/templates/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Templates for LLM prompts used in LLMStruct integration.",
      "uid": "llmstruct.templates.__init__",
      "uid_components": [
        "llmstruct",
        "llmstruct.templates",
        "llmstruct.templates.__init__"
      ],
      "uid_type": "module",
      "artifact_id": "5a0bec58-9b06-cbd7-f3b6-a3ce75f15c26",
      "markdown_anchor": {
        "id": "llmstruct-templates-__init__",
        "title": "Module: llmstruct.templates.__init__",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.templates.__init__](#llmstruct-templates-__init__)",
        "html_anchor": "<a id=\"llmstruct-templates-__init__\"></a>"
      }
    },
    {
      "module_id": "llmstruct.ARCHIVE.cli_argument_parser",
      "path": "llmstruct/ARCHIVE/cli_argument_parser.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "CLI argument parsing for LLMStruct.",
      "uid": "llmstruct.ARCHIVE.cli_argument_parser",
      "uid_components": [
        "llmstruct",
        "llmstruct.ARCHIVE",
        "llmstruct.ARCHIVE.cli_argument_parser"
      ],
      "uid_type": "module",
      "artifact_id": "29c72c43-22f1-cf0a-42e4-ab349153c323",
      "markdown_anchor": {
        "id": "llmstruct-archive-cli_argument_parser",
        "title": "Module: llmstruct.ARCHIVE.cli_argument_parser",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.ARCHIVE.cli_argument_parser](#llmstruct-archive-cli_argument_parser)",
        "html_anchor": "<a id=\"llmstruct-archive-cli_argument_parser\"></a>"
      }
    },
    {
      "module_id": "llmstruct.ARCHIVE.cli_core",
      "path": "llmstruct/ARCHIVE/cli_core.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "Core CLI functionality and main loop.",
      "uid": "llmstruct.ARCHIVE.cli_core",
      "uid_components": [
        "llmstruct",
        "llmstruct.ARCHIVE",
        "llmstruct.ARCHIVE.cli_core"
      ],
      "uid_type": "module",
      "artifact_id": "da6895e4-e8b1-8c4c-0b35-dcb62de6a925",
      "markdown_anchor": {
        "id": "llmstruct-archive-cli_core",
        "title": "Module: llmstruct.ARCHIVE.cli_core",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.ARCHIVE.cli_core](#llmstruct-archive-cli_core)",
        "html_anchor": "<a id=\"llmstruct-archive-cli_core\"></a>"
      }
    },
    {
      "module_id": "llmstruct.ARCHIVE.cli_utils",
      "path": "llmstruct/ARCHIVE/cli_utils.py",
      "category": "core",
      "functions": 13,
      "classes": 1,
      "summary": "CLI utility functions.",
      "uid": "llmstruct.ARCHIVE.cli_utils",
      "uid_components": [
        "llmstruct",
        "llmstruct.ARCHIVE",
        "llmstruct.ARCHIVE.cli_utils"
      ],
      "uid_type": "module",
      "artifact_id": "b1999703-b6c6-e00b-883f-76a844c39baf",
      "markdown_anchor": {
        "id": "llmstruct-archive-cli_utils",
        "title": "Module: llmstruct.ARCHIVE.cli_utils",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.ARCHIVE.cli_utils](#llmstruct-archive-cli_utils)",
        "html_anchor": "<a id=\"llmstruct-archive-cli_utils\"></a>"
      }
    },
    {
      "module_id": "llmstruct.ARCHIVE.cli_main_commands",
      "path": "llmstruct/ARCHIVE/cli_main_commands.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "Main CLI command handlers for LLMStruct.",
      "uid": "llmstruct.ARCHIVE.cli_main_commands",
      "uid_components": [
        "llmstruct",
        "llmstruct.ARCHIVE",
        "llmstruct.ARCHIVE.cli_main_commands"
      ],
      "uid_type": "module",
      "artifact_id": "009a509c-318a-7b41-59a1-da6b0755aa04",
      "markdown_anchor": {
        "id": "llmstruct-archive-cli_main_commands",
        "title": "Module: llmstruct.ARCHIVE.cli_main_commands",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.ARCHIVE.cli_main_commands](#llmstruct-archive-cli_main_commands)",
        "html_anchor": "<a id=\"llmstruct-archive-cli_main_commands\"></a>"
      }
    },
    {
      "module_id": "llmstruct.ARCHIVE.cli_config",
      "path": "llmstruct/ARCHIVE/cli_config.py",
      "category": "core",
      "functions": 18,
      "classes": 1,
      "summary": "CLI configuration management.",
      "uid": "llmstruct.ARCHIVE.cli_config",
      "uid_components": [
        "llmstruct",
        "llmstruct.ARCHIVE",
        "llmstruct.ARCHIVE.cli_config"
      ],
      "uid_type": "module",
      "artifact_id": "51bc580f-9cb1-8311-ba52-fcea74bd1748",
      "markdown_anchor": {
        "id": "llmstruct-archive-cli_config",
        "title": "Module: llmstruct.ARCHIVE.cli_config",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.ARCHIVE.cli_config](#llmstruct-archive-cli_config)",
        "html_anchor": "<a id=\"llmstruct-archive-cli_config\"></a>"
      }
    },
    {
      "module_id": "llmstruct.ARCHIVE.cli_commands",
      "path": "llmstruct/ARCHIVE/cli_commands.py",
      "category": "core",
      "functions": 22,
      "classes": 1,
      "summary": "CLI command processing and handlers.",
      "uid": "llmstruct.ARCHIVE.cli_commands",
      "uid_components": [
        "llmstruct",
        "llmstruct.ARCHIVE",
        "llmstruct.ARCHIVE.cli_commands"
      ],
      "uid_type": "module",
      "artifact_id": "f979850f-f5e1-f09f-c3f4-b432640bef6f",
      "markdown_anchor": {
        "id": "llmstruct-archive-cli_commands",
        "title": "Module: llmstruct.ARCHIVE.cli_commands",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.ARCHIVE.cli_commands](#llmstruct-archive-cli_commands)",
        "html_anchor": "<a id=\"llmstruct-archive-cli_commands\"></a>"
      }
    },
    {
      "module_id": "llmstruct.api.__init__",
      "path": "llmstruct/api/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "LLMStruct FastAPI Module",
      "uid": "llmstruct.api.__init__",
      "uid_components": [
        "llmstruct",
        "llmstruct.api",
        "llmstruct.api.__init__"
      ],
      "uid_type": "module",
      "artifact_id": "58118614-cbf0-0d1d-3c64-ea3b9612e27e",
      "markdown_anchor": {
        "id": "llmstruct-api-__init__",
        "title": "Module: llmstruct.api.__init__",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.api.__init__](#llmstruct-api-__init__)",
        "html_anchor": "<a id=\"llmstruct-api-__init__\"></a>"
      }
    },
    {
      "module_id": "llmstruct.api.config",
      "path": "llmstruct/api/config.py",
      "category": "core",
      "functions": 0,
      "classes": 1,
      "summary": "Configuration management for LLMStruct FastAPI",
      "uid": "llmstruct.api.config",
      "uid_components": [
        "llmstruct",
        "llmstruct.api",
        "llmstruct.api.config"
      ],
      "uid_type": "module",
      "artifact_id": "50e13f7c-a4d1-103b-d28c-897977ddb9b6",
      "markdown_anchor": {
        "id": "llmstruct-api-config",
        "title": "Module: llmstruct.api.config",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.api.config](#llmstruct-api-config)",
        "html_anchor": "<a id=\"llmstruct-api-config\"></a>"
      }
    },
    {
      "module_id": "llmstruct.api.app",
      "path": "llmstruct/api/app.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Main FastAPI application for LLMStruct",
      "uid": "llmstruct.api.app",
      "uid_components": [
        "llmstruct",
        "llmstruct.api",
        "llmstruct.api.app"
      ],
      "uid_type": "module",
      "artifact_id": "f424d86b-912b-c580-9011-dd5395980137",
      "markdown_anchor": {
        "id": "llmstruct-api-app",
        "title": "Module: llmstruct.api.app",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.api.app](#llmstruct-api-app)",
        "html_anchor": "<a id=\"llmstruct-api-app\"></a>"
      }
    },
    {
      "module_id": "llmstruct.core.summary_system",
      "path": "llmstruct/core/summary_system.py",
      "category": "core",
      "functions": 13,
      "classes": 5,
      "summary": "Smart Summary System for LLMStruct v2.1",
      "uid": "llmstruct.core.summary_system",
      "uid_components": [
        "llmstruct",
        "llmstruct.core",
        "llmstruct.core.summary_system"
      ],
      "uid_type": "module",
      "artifact_id": "b37dc2f4-d28c-f82c-a876-b9d582340c34",
      "markdown_anchor": {
        "id": "llmstruct-core-summary_system",
        "title": "Module: llmstruct.core.summary_system",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.core.summary_system](#llmstruct-core-summary_system)",
        "html_anchor": "<a id=\"llmstruct-core-summary_system\"></a>"
      }
    },
    {
      "module_id": "llmstruct.core.uid_generator",
      "path": "llmstruct/core/uid_generator.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "UID Generator for LLMStruct v2.1 - Advanced UID System",
      "uid": "llmstruct.core.uid_generator",
      "uid_components": [
        "llmstruct",
        "llmstruct.core",
        "llmstruct.core.uid_generator"
      ],
      "uid_type": "module",
      "artifact_id": "6d8e5cde-12d2-3f16-11af-c0d1eeae625d",
      "markdown_anchor": {
        "id": "llmstruct-core-uid_generator",
        "title": "Module: llmstruct.core.uid_generator",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.core.uid_generator](#llmstruct-core-uid_generator)",
        "html_anchor": "<a id=\"llmstruct-core-uid_generator\"></a>"
      }
    },
    {
      "module_id": "llmstruct.core.__init__",
      "path": "llmstruct/core/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Core LLMStruct v2.1 components for advanced processing.",
      "uid": "llmstruct.core.__init__",
      "uid_components": [
        "llmstruct",
        "llmstruct.core",
        "llmstruct.core.__init__"
      ],
      "uid_type": "module",
      "artifact_id": "f2bc0ecd-f40b-e986-3511-57176dee1b78",
      "markdown_anchor": {
        "id": "llmstruct-core-__init__",
        "title": "Module: llmstruct.core.__init__",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.core.__init__](#llmstruct-core-__init__)",
        "html_anchor": "<a id=\"llmstruct-core-__init__\"></a>"
      }
    },
    {
      "module_id": "llmstruct.core.schema_validation",
      "path": "llmstruct/core/schema_validation.py",
      "category": "core",
      "functions": 17,
      "classes": 9,
      "summary": "Schema Validation System for LLMStruct v2.1",
      "uid": "llmstruct.core.schema_validation",
      "uid_components": [
        "llmstruct",
        "llmstruct.core",
        "llmstruct.core.schema_validation"
      ],
      "uid_type": "module",
      "artifact_id": "a9d8df8b-26d6-d16e-7061-c978efdc9607",
      "markdown_anchor": {
        "id": "llmstruct-core-schema_validation",
        "title": "Module: llmstruct.core.schema_validation",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.core.schema_validation](#llmstruct-core-schema_validation)",
        "html_anchor": "<a id=\"llmstruct-core-schema_validation\"></a>"
      }
    },
    {
      "module_id": "llmstruct.core.json_structure",
      "path": "llmstruct/core/json_structure.py",
      "category": "core",
      "functions": 11,
      "classes": 3,
      "summary": "Enhanced JSON Structure for LLMStruct v2.1",
      "uid": "llmstruct.core.json_structure",
      "uid_components": [
        "llmstruct",
        "llmstruct.core",
        "llmstruct.core.json_structure"
      ],
      "uid_type": "module",
      "artifact_id": "623377b6-8fd5-a474-b685-4679c89ec3ef",
      "markdown_anchor": {
        "id": "llmstruct-core-json_structure",
        "title": "Module: llmstruct.core.json_structure",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.core.json_structure](#llmstruct-core-json_structure)",
        "html_anchor": "<a id=\"llmstruct-core-json_structure\"></a>"
      }
    },
    {
      "module_id": "llmstruct.validators.__init__",
      "path": "llmstruct/validators/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "uid": "llmstruct.validators.__init__",
      "uid_components": [
        "llmstruct",
        "llmstruct.validators",
        "llmstruct.validators.__init__"
      ],
      "uid_type": "module",
      "artifact_id": "72756c0b-d7ec-c7e6-ce76-7f0970a597c0",
      "markdown_anchor": {
        "id": "llmstruct-validators-__init__",
        "title": "Module: llmstruct.validators.__init__",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.validators.__init__](#llmstruct-validators-__init__)",
        "html_anchor": "<a id=\"llmstruct-validators-__init__\"></a>"
      }
    },
    {
      "module_id": "llmstruct.validators.json_validator",
      "path": "llmstruct/validators/json_validator.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "uid": "llmstruct.validators.json_validator",
      "uid_components": [
        "llmstruct",
        "llmstruct.validators",
        "llmstruct.validators.json_validator"
      ],
      "uid_type": "module",
      "artifact_id": "1ad2ca4d-0eea-8eb1-e56e-783bab7d7a66",
      "markdown_anchor": {
        "id": "llmstruct-validators-json_validator",
        "title": "Module: llmstruct.validators.json_validator",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.validators.json_validator](#llmstruct-validators-json_validator)",
        "html_anchor": "<a id=\"llmstruct-validators-json_validator\"></a>"
      }
    },
    {
      "module_id": "llmstruct.parsers.universal_converter",
      "path": "llmstruct/parsers/universal_converter.py",
      "category": "core",
      "functions": 14,
      "classes": 3,
      "summary": "Universal Code Converter - Orchestrates all language parsers",
      "uid": "llmstruct.parsers.universal_converter",
      "uid_components": [
        "llmstruct",
        "llmstruct.parsers",
        "llmstruct.parsers.universal_converter"
      ],
      "uid_type": "module",
      "artifact_id": "5cd02ca6-96a7-eb31-2641-504ec44f21da",
      "markdown_anchor": {
        "id": "llmstruct-parsers-universal_converter",
        "title": "Module: llmstruct.parsers.universal_converter",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.parsers.universal_converter](#llmstruct-parsers-universal_converter)",
        "html_anchor": "<a id=\"llmstruct-parsers-universal_converter\"></a>"
      }
    },
    {
      "module_id": "llmstruct.parsers.python_parser",
      "path": "llmstruct/parsers/python_parser.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "",
      "uid": "llmstruct.parsers.python_parser",
      "uid_components": [
        "llmstruct",
        "llmstruct.parsers",
        "llmstruct.parsers.python_parser"
      ],
      "uid_type": "module",
      "artifact_id": "e154ed01-afcb-6bdd-a6fe-19e3c12ab017",
      "markdown_anchor": {
        "id": "llmstruct-parsers-python_parser",
        "title": "Module: llmstruct.parsers.python_parser",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.parsers.python_parser](#llmstruct-parsers-python_parser)",
        "html_anchor": "<a id=\"llmstruct-parsers-python_parser\"></a>"
      }
    },
    {
      "module_id": "llmstruct.parsers.go_analyzer",
      "path": "llmstruct/parsers/go_analyzer.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 Go \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043b\u044f Docker \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430",
      "uid": "llmstruct.parsers.go_analyzer",
      "uid_components": [
        "llmstruct",
        "llmstruct.parsers",
        "llmstruct.parsers.go_analyzer"
      ],
      "uid_type": "module",
      "artifact_id": "4ed8ba53-8cab-f400-2cf5-ed5385ab3af6",
      "markdown_anchor": {
        "id": "llmstruct-parsers-go_analyzer",
        "title": "Module: llmstruct.parsers.go_analyzer",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.parsers.go_analyzer](#llmstruct-parsers-go_analyzer)",
        "html_anchor": "<a id=\"llmstruct-parsers-go_analyzer\"></a>"
      }
    },
    {
      "module_id": "llmstruct.parsers.__init__",
      "path": "llmstruct/parsers/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "uid": "llmstruct.parsers.__init__",
      "uid_components": [
        "llmstruct",
        "llmstruct.parsers",
        "llmstruct.parsers.__init__"
      ],
      "uid_type": "module",
      "artifact_id": "fe58e61b-3cf5-7a69-e34f-f349a3cae247",
      "markdown_anchor": {
        "id": "llmstruct-parsers-__init__",
        "title": "Module: llmstruct.parsers.__init__",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.parsers.__init__](#llmstruct-parsers-__init__)",
        "html_anchor": "<a id=\"llmstruct-parsers-__init__\"></a>"
      }
    },
    {
      "module_id": "llmstruct.parsers.javascript_parser",
      "path": "llmstruct/parsers/javascript_parser.py",
      "category": "core",
      "functions": 5,
      "classes": 1,
      "summary": "",
      "uid": "llmstruct.parsers.javascript_parser",
      "uid_components": [
        "llmstruct",
        "llmstruct.parsers",
        "llmstruct.parsers.javascript_parser"
      ],
      "uid_type": "module",
      "artifact_id": "9c2b1ba0-989a-33c7-dce1-184d5e0b4061",
      "markdown_anchor": {
        "id": "llmstruct-parsers-javascript_parser",
        "title": "Module: llmstruct.parsers.javascript_parser",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.parsers.javascript_parser](#llmstruct-parsers-javascript_parser)",
        "html_anchor": "<a id=\"llmstruct-parsers-javascript_parser\"></a>"
      }
    },
    {
      "module_id": "llmstruct.generators.go_json_generator",
      "path": "llmstruct/generators/go_json_generator.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "uid": "llmstruct.generators.go_json_generator",
      "uid_components": [
        "llmstruct",
        "llmstruct.generators",
        "llmstruct.generators.go_json_generator"
      ],
      "uid_type": "module",
      "artifact_id": "4b928e1a-5447-f3d5-dd1e-eda346bc6a17",
      "markdown_anchor": {
        "id": "llmstruct-generators-go_json_generator",
        "title": "Module: llmstruct.generators.go_json_generator",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.generators.go_json_generator](#llmstruct-generators-go_json_generator)",
        "html_anchor": "<a id=\"llmstruct-generators-go_json_generator\"></a>"
      }
    },
    {
      "module_id": "llmstruct.generators.__init__",
      "path": "llmstruct/generators/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "uid": "llmstruct.generators.__init__",
      "uid_components": [
        "llmstruct",
        "llmstruct.generators",
        "llmstruct.generators.__init__"
      ],
      "uid_type": "module",
      "artifact_id": "a0a37899-310c-683a-f0c1-aee876224953",
      "markdown_anchor": {
        "id": "llmstruct-generators-__init__",
        "title": "Module: llmstruct.generators.__init__",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.generators.__init__](#llmstruct-generators-__init__)",
        "html_anchor": "<a id=\"llmstruct-generators-__init__\"></a>"
      }
    },
    {
      "module_id": "llmstruct.generators.json_generator",
      "path": "llmstruct/generators/json_generator.py",
      "category": "core",
      "functions": 6,
      "classes": 0,
      "summary": "",
      "uid": "llmstruct.generators.json_generator",
      "uid_components": [
        "llmstruct",
        "llmstruct.generators",
        "llmstruct.generators.json_generator"
      ],
      "uid_type": "module",
      "artifact_id": "0235ea10-05bd-2ee9-e148-53ea337c3fcc",
      "markdown_anchor": {
        "id": "llmstruct-generators-json_generator",
        "title": "Module: llmstruct.generators.json_generator",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.generators.json_generator](#llmstruct-generators-json_generator)",
        "html_anchor": "<a id=\"llmstruct-generators-json_generator\"></a>"
      }
    },
    {
      "module_id": "llmstruct.api.routes.system",
      "path": "llmstruct/api/routes/system.py",
      "category": "core",
      "functions": 5,
      "classes": 0,
      "summary": "System routes for LLMStruct FastAPI",
      "uid": "llmstruct.api.routes.system",
      "uid_components": [
        "llmstruct",
        "llmstruct.api",
        "llmstruct.api.routes",
        "llmstruct.api.routes.system"
      ],
      "uid_type": "module",
      "artifact_id": "ceff4b1e-5bc4-a69e-e163-1b4affb70f4e",
      "markdown_anchor": {
        "id": "llmstruct-api-routes-system",
        "title": "Module: llmstruct.api.routes.system",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.api.routes.system](#llmstruct-api-routes-system)",
        "html_anchor": "<a id=\"llmstruct-api-routes-system\"></a>"
      }
    },
    {
      "module_id": "llmstruct.api.routes.__init__",
      "path": "llmstruct/api/routes/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Routes package for LLMStruct FastAPI",
      "uid": "llmstruct.api.routes.__init__",
      "uid_components": [
        "llmstruct",
        "llmstruct.api",
        "llmstruct.api.routes",
        "llmstruct.api.routes.__init__"
      ],
      "uid_type": "module",
      "artifact_id": "4da05f02-5d2d-a931-25b0-2b373ecd9f62",
      "markdown_anchor": {
        "id": "llmstruct-api-routes-__init__",
        "title": "Module: llmstruct.api.routes.__init__",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.api.routes.__init__](#llmstruct-api-routes-__init__)",
        "html_anchor": "<a id=\"llmstruct-api-routes-__init__\"></a>"
      }
    },
    {
      "module_id": "llmstruct.api.routes.chat",
      "path": "llmstruct/api/routes/chat.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "Chat Routes",
      "uid": "llmstruct.api.routes.chat",
      "uid_components": [
        "llmstruct",
        "llmstruct.api",
        "llmstruct.api.routes",
        "llmstruct.api.routes.chat"
      ],
      "uid_type": "module",
      "artifact_id": "9e24ecd3-be69-cf18-ff2e-8c147931bad0",
      "markdown_anchor": {
        "id": "llmstruct-api-routes-chat",
        "title": "Module: llmstruct.api.routes.chat",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.api.routes.chat](#llmstruct-api-routes-chat)",
        "html_anchor": "<a id=\"llmstruct-api-routes-chat\"></a>"
      }
    },
    {
      "module_id": "llmstruct.api.routes.continue_adapter",
      "path": "llmstruct/api/routes/continue_adapter.py",
      "category": "core",
      "functions": 5,
      "classes": 2,
      "summary": "Continue API Adapter",
      "uid": "llmstruct.api.routes.continue_adapter",
      "uid_components": [
        "llmstruct",
        "llmstruct.api",
        "llmstruct.api.routes",
        "llmstruct.api.routes.continue_adapter"
      ],
      "uid_type": "module",
      "artifact_id": "4f096db2-0ea3-43ce-d7fd-33aa0b597eab",
      "markdown_anchor": {
        "id": "llmstruct-api-routes-continue_adapter",
        "title": "Module: llmstruct.api.routes.continue_adapter",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.api.routes.continue_adapter](#llmstruct-api-routes-continue_adapter)",
        "html_anchor": "<a id=\"llmstruct-api-routes-continue_adapter\"></a>"
      }
    },
    {
      "module_id": "llmstruct.api.middleware.__init__",
      "path": "llmstruct/api/middleware/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Middleware package for LLMStruct FastAPI",
      "uid": "llmstruct.api.middleware.__init__",
      "uid_components": [
        "llmstruct",
        "llmstruct.api",
        "llmstruct.api.middleware",
        "llmstruct.api.middleware.__init__"
      ],
      "uid_type": "module",
      "artifact_id": "e16616e9-15ef-2908-e15f-72b28ecacc3d",
      "markdown_anchor": {
        "id": "llmstruct-api-middleware-__init__",
        "title": "Module: llmstruct.api.middleware.__init__",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.api.middleware.__init__](#llmstruct-api-middleware-__init__)",
        "html_anchor": "<a id=\"llmstruct-api-middleware-__init__\"></a>"
      }
    },
    {
      "module_id": "llmstruct.api.middleware.logging",
      "path": "llmstruct/api/middleware/logging.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Logging middleware for LLMStruct FastAPI",
      "uid": "llmstruct.api.middleware.logging",
      "uid_components": [
        "llmstruct",
        "llmstruct.api",
        "llmstruct.api.middleware",
        "llmstruct.api.middleware.logging"
      ],
      "uid_type": "module",
      "artifact_id": "28a396ce-d889-fa5c-51af-d1e18d8327fc",
      "markdown_anchor": {
        "id": "llmstruct-api-middleware-logging",
        "title": "Module: llmstruct.api.middleware.logging",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.api.middleware.logging](#llmstruct-api-middleware-logging)",
        "html_anchor": "<a id=\"llmstruct-api-middleware-logging\"></a>"
      }
    },
    {
      "module_id": "llmstruct.api.services.llm_service",
      "path": "llmstruct/api/services/llm_service.py",
      "category": "core",
      "functions": 17,
      "classes": 4,
      "summary": "LLM Service",
      "uid": "llmstruct.api.services.llm_service",
      "uid_components": [
        "llmstruct",
        "llmstruct.api",
        "llmstruct.api.services",
        "llmstruct.api.services.llm_service"
      ],
      "uid_type": "module",
      "artifact_id": "d409c9b3-c874-f2fe-0bc0-b1023dc6c80f",
      "markdown_anchor": {
        "id": "llmstruct-api-services-llm_service",
        "title": "Module: llmstruct.api.services.llm_service",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.api.services.llm_service](#llmstruct-api-services-llm_service)",
        "html_anchor": "<a id=\"llmstruct-api-services-llm_service\"></a>"
      }
    },
    {
      "module_id": "llmstruct.api.services.__init__",
      "path": "llmstruct/api/services/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Services package for LLMStruct FastAPI",
      "uid": "llmstruct.api.services.__init__",
      "uid_components": [
        "llmstruct",
        "llmstruct.api",
        "llmstruct.api.services",
        "llmstruct.api.services.__init__"
      ],
      "uid_type": "module",
      "artifact_id": "9ecbfe8b-427e-572f-cf56-4d55b18667f9",
      "markdown_anchor": {
        "id": "llmstruct-api-services-__init__",
        "title": "Module: llmstruct.api.services.__init__",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.api.services.__init__](#llmstruct-api-services-__init__)",
        "html_anchor": "<a id=\"llmstruct-api-services-__init__\"></a>"
      }
    },
    {
      "module_id": "llmstruct.api.services.cli_bridge",
      "path": "llmstruct/api/services/cli_bridge.py",
      "category": "core",
      "functions": 9,
      "classes": 2,
      "summary": "CLI Bridge Service",
      "uid": "llmstruct.api.services.cli_bridge",
      "uid_components": [
        "llmstruct",
        "llmstruct.api",
        "llmstruct.api.services",
        "llmstruct.api.services.cli_bridge"
      ],
      "uid_type": "module",
      "artifact_id": "d4a8f3aa-320f-8e55-b346-1ebb8cd53825",
      "markdown_anchor": {
        "id": "llmstruct-api-services-cli_bridge",
        "title": "Module: llmstruct.api.services.cli_bridge",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.api.services.cli_bridge](#llmstruct-api-services-cli_bridge)",
        "html_anchor": "<a id=\"llmstruct-api-services-cli_bridge\"></a>"
      }
    },
    {
      "module_id": "llmstruct.api.services.chat_session",
      "path": "llmstruct/api/services/chat_session.py",
      "category": "core",
      "functions": 14,
      "classes": 2,
      "summary": "Chat Session Manager",
      "uid": "llmstruct.api.services.chat_session",
      "uid_components": [
        "llmstruct",
        "llmstruct.api",
        "llmstruct.api.services",
        "llmstruct.api.services.chat_session"
      ],
      "uid_type": "module",
      "artifact_id": "feb86bd7-e3dd-9be2-cd5e-796d1a272666",
      "markdown_anchor": {
        "id": "llmstruct-api-services-chat_session",
        "title": "Module: llmstruct.api.services.chat_session",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.api.services.chat_session](#llmstruct-api-services-chat_session)",
        "html_anchor": "<a id=\"llmstruct-api-services-chat_session\"></a>"
      }
    },
    {
      "module_id": "llmstruct.api.models.requests",
      "path": "llmstruct/api/models/requests.py",
      "category": "core",
      "functions": 0,
      "classes": 15,
      "summary": "Request models for LLMStruct FastAPI",
      "uid": "llmstruct.api.models.requests",
      "uid_components": [
        "llmstruct",
        "llmstruct.api",
        "llmstruct.api.models",
        "llmstruct.api.models.requests"
      ],
      "uid_type": "module",
      "artifact_id": "5f768b49-a75c-d409-face-950f4bc8c81f",
      "markdown_anchor": {
        "id": "llmstruct-api-models-requests",
        "title": "Module: llmstruct.api.models.requests",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.api.models.requests](#llmstruct-api-models-requests)",
        "html_anchor": "<a id=\"llmstruct-api-models-requests\"></a>"
      }
    },
    {
      "module_id": "llmstruct.api.models.responses",
      "path": "llmstruct/api/models/responses.py",
      "category": "core",
      "functions": 0,
      "classes": 19,
      "summary": "Response models for LLMStruct FastAPI",
      "uid": "llmstruct.api.models.responses",
      "uid_components": [
        "llmstruct",
        "llmstruct.api",
        "llmstruct.api.models",
        "llmstruct.api.models.responses"
      ],
      "uid_type": "module",
      "artifact_id": "20bb04d4-65d2-d00b-d970-246c2cff6cab",
      "markdown_anchor": {
        "id": "llmstruct-api-models-responses",
        "title": "Module: llmstruct.api.models.responses",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.api.models.responses](#llmstruct-api-models-responses)",
        "html_anchor": "<a id=\"llmstruct-api-models-responses\"></a>"
      }
    },
    {
      "module_id": "llmstruct.api.models.__init__",
      "path": "llmstruct/api/models/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Pydantic models for LLMStruct FastAPI",
      "uid": "llmstruct.api.models.__init__",
      "uid_components": [
        "llmstruct",
        "llmstruct.api",
        "llmstruct.api.models",
        "llmstruct.api.models.__init__"
      ],
      "uid_type": "module",
      "artifact_id": "c09b00ac-ff59-af9e-7cf0-6f60231a2c01",
      "markdown_anchor": {
        "id": "llmstruct-api-models-__init__",
        "title": "Module: llmstruct.api.models.__init__",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.api.models.__init__](#llmstruct-api-models-__init__)",
        "html_anchor": "<a id=\"llmstruct-api-models-__init__\"></a>"
      }
    },
    {
      "module_id": "llmstruct.modules.commands.metrics",
      "path": "llmstruct/modules/commands/metrics.py",
      "category": "core",
      "functions": 7,
      "classes": 0,
      "summary": "",
      "uid": "llmstruct.modules.commands.metrics",
      "uid_components": [
        "llmstruct",
        "llmstruct.modules",
        "llmstruct.modules.commands",
        "llmstruct.modules.commands.metrics"
      ],
      "uid_type": "module",
      "artifact_id": "463aa85d-985a-29fe-37e6-4d742d7623e8",
      "markdown_anchor": {
        "id": "llmstruct-modules-commands-metrics",
        "title": "Module: llmstruct.modules.commands.metrics",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.modules.commands.metrics](#llmstruct-modules-commands-metrics)",
        "html_anchor": "<a id=\"llmstruct-modules-commands-metrics\"></a>"
      }
    },
    {
      "module_id": "llmstruct.modules.commands.services",
      "path": "llmstruct/modules/commands/services.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "uid": "llmstruct.modules.commands.services",
      "uid_components": [
        "llmstruct",
        "llmstruct.modules",
        "llmstruct.modules.commands",
        "llmstruct.modules.commands.services"
      ],
      "uid_type": "module",
      "artifact_id": "08f0b037-1139-fe8a-fb87-d5bbadac0985",
      "markdown_anchor": {
        "id": "llmstruct-modules-commands-services",
        "title": "Module: llmstruct.modules.commands.services",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.modules.commands.services](#llmstruct-modules-commands-services)",
        "html_anchor": "<a id=\"llmstruct-modules-commands-services\"></a>"
      }
    },
    {
      "module_id": "llmstruct.modules.commands.__init__",
      "path": "llmstruct/modules/commands/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "uid": "llmstruct.modules.commands.__init__",
      "uid_components": [
        "llmstruct",
        "llmstruct.modules",
        "llmstruct.modules.commands",
        "llmstruct.modules.commands.__init__"
      ],
      "uid_type": "module",
      "artifact_id": "1cf803b0-44b1-c1f9-11ee-4c84fda5d6ef",
      "markdown_anchor": {
        "id": "llmstruct-modules-commands-__init__",
        "title": "Module: llmstruct.modules.commands.__init__",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.modules.commands.__init__](#llmstruct-modules-commands-__init__)",
        "html_anchor": "<a id=\"llmstruct-modules-commands-__init__\"></a>"
      }
    },
    {
      "module_id": "llmstruct.modules.commands.queue",
      "path": "llmstruct/modules/commands/queue.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "uid": "llmstruct.modules.commands.queue",
      "uid_components": [
        "llmstruct",
        "llmstruct.modules",
        "llmstruct.modules.commands",
        "llmstruct.modules.commands.queue"
      ],
      "uid_type": "module",
      "artifact_id": "c4762ead-cbe1-3394-00c2-08956eaf56be",
      "markdown_anchor": {
        "id": "llmstruct-modules-commands-queue",
        "title": "Module: llmstruct.modules.commands.queue",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.modules.commands.queue](#llmstruct-modules-commands-queue)",
        "html_anchor": "<a id=\"llmstruct-modules-commands-queue\"></a>"
      }
    },
    {
      "module_id": "llmstruct.modules.cli.audit",
      "path": "llmstruct/modules/cli/audit.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "uid": "llmstruct.modules.cli.audit",
      "uid_components": [
        "llmstruct",
        "llmstruct.modules",
        "llmstruct.modules.cli",
        "llmstruct.modules.cli.audit"
      ],
      "uid_type": "module",
      "artifact_id": "bbb4f90b-4509-4ed8-3c67-e1ee4a7256ac",
      "markdown_anchor": {
        "id": "llmstruct-modules-cli-audit",
        "title": "Module: llmstruct.modules.cli.audit",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.modules.cli.audit](#llmstruct-modules-cli-audit)",
        "html_anchor": "<a id=\"llmstruct-modules-cli-audit\"></a>"
      }
    },
    {
      "module_id": "llmstruct.modules.cli.utils",
      "path": "llmstruct/modules/cli/utils.py",
      "category": "cli",
      "functions": 16,
      "classes": 0,
      "summary": "",
      "uid": "llmstruct.modules.cli.utils",
      "uid_components": [
        "llmstruct",
        "llmstruct.modules",
        "llmstruct.modules.cli",
        "llmstruct.modules.cli.utils"
      ],
      "uid_type": "module",
      "artifact_id": "328789c7-10e4-87cc-a020-50e033777aab",
      "markdown_anchor": {
        "id": "llmstruct-modules-cli-utils",
        "title": "Module: llmstruct.modules.cli.utils",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.modules.cli.utils](#llmstruct-modules-cli-utils)",
        "html_anchor": "<a id=\"llmstruct-modules-cli-utils\"></a>"
      }
    },
    {
      "module_id": "llmstruct.modules.cli.dogfood",
      "path": "llmstruct/modules/cli/dogfood.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "uid": "llmstruct.modules.cli.dogfood",
      "uid_components": [
        "llmstruct",
        "llmstruct.modules",
        "llmstruct.modules.cli",
        "llmstruct.modules.cli.dogfood"
      ],
      "uid_type": "module",
      "artifact_id": "a5b7abca-754f-ba39-2f95-998c6828fb41",
      "markdown_anchor": {
        "id": "llmstruct-modules-cli-dogfood",
        "title": "Module: llmstruct.modules.cli.dogfood",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.modules.cli.dogfood](#llmstruct-modules-cli-dogfood)",
        "html_anchor": "<a id=\"llmstruct-modules-cli-dogfood\"></a>"
      }
    },
    {
      "module_id": "llmstruct.modules.cli.handlers_legacy",
      "path": "llmstruct/modules/cli/handlers_legacy.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "uid": "llmstruct.modules.cli.handlers_legacy",
      "uid_components": [
        "llmstruct",
        "llmstruct.modules",
        "llmstruct.modules.cli",
        "llmstruct.modules.cli.handlers_legacy"
      ],
      "uid_type": "module",
      "artifact_id": "29c289c7-9793-1c8e-cf8b-e87a49081fca",
      "markdown_anchor": {
        "id": "llmstruct-modules-cli-handlers_legacy",
        "title": "Module: llmstruct.modules.cli.handlers_legacy",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.modules.cli.handlers_legacy](#llmstruct-modules-cli-handlers_legacy)",
        "html_anchor": "<a id=\"llmstruct-modules-cli-handlers_legacy\"></a>"
      }
    },
    {
      "module_id": "llmstruct.modules.cli.analyze_duplicates",
      "path": "llmstruct/modules/cli/analyze_duplicates.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "uid": "llmstruct.modules.cli.analyze_duplicates",
      "uid_components": [
        "llmstruct",
        "llmstruct.modules",
        "llmstruct.modules.cli",
        "llmstruct.modules.cli.analyze_duplicates"
      ],
      "uid_type": "module",
      "artifact_id": "fd9087ce-6a48-0597-b358-d806c3a97e86",
      "markdown_anchor": {
        "id": "llmstruct-modules-cli-analyze_duplicates",
        "title": "Module: llmstruct.modules.cli.analyze_duplicates",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.modules.cli.analyze_duplicates](#llmstruct-modules-cli-analyze_duplicates)",
        "html_anchor": "<a id=\"llmstruct-modules-cli-analyze_duplicates\"></a>"
      }
    },
    {
      "module_id": "llmstruct.modules.cli.__init__",
      "path": "llmstruct/modules/cli/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "uid": "llmstruct.modules.cli.__init__",
      "uid_components": [
        "llmstruct",
        "llmstruct.modules",
        "llmstruct.modules.cli",
        "llmstruct.modules.cli.__init__"
      ],
      "uid_type": "module",
      "artifact_id": "2c1279c6-0229-ae79-6051-352666fdfafb",
      "markdown_anchor": {
        "id": "llmstruct-modules-cli-__init__",
        "title": "Module: llmstruct.modules.cli.__init__",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.modules.cli.__init__](#llmstruct-modules-cli-__init__)",
        "html_anchor": "<a id=\"llmstruct-modules-cli-__init__\"></a>"
      }
    },
    {
      "module_id": "llmstruct.modules.cli.review",
      "path": "llmstruct/modules/cli/review.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "uid": "llmstruct.modules.cli.review",
      "uid_components": [
        "llmstruct",
        "llmstruct.modules",
        "llmstruct.modules.cli",
        "llmstruct.modules.cli.review"
      ],
      "uid_type": "module",
      "artifact_id": "da5616e9-ece9-95b1-79c1-1aad6c8387ff",
      "markdown_anchor": {
        "id": "llmstruct-modules-cli-review",
        "title": "Module: llmstruct.modules.cli.review",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.modules.cli.review](#llmstruct-modules-cli-review)",
        "html_anchor": "<a id=\"llmstruct-modules-cli-review\"></a>"
      }
    },
    {
      "module_id": "llmstruct.modules.cli.context",
      "path": "llmstruct/modules/cli/context.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "uid": "llmstruct.modules.cli.context",
      "uid_components": [
        "llmstruct",
        "llmstruct.modules",
        "llmstruct.modules.cli",
        "llmstruct.modules.cli.context"
      ],
      "uid_type": "module",
      "artifact_id": "1f6c2194-26a3-2ec5-42db-ec7df66ae94a",
      "markdown_anchor": {
        "id": "llmstruct-modules-cli-context",
        "title": "Module: llmstruct.modules.cli.context",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.modules.cli.context](#llmstruct-modules-cli-context)",
        "html_anchor": "<a id=\"llmstruct-modules-cli-context\"></a>"
      }
    },
    {
      "module_id": "llmstruct.modules.cli.query",
      "path": "llmstruct/modules/cli/query.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "uid": "llmstruct.modules.cli.query",
      "uid_components": [
        "llmstruct",
        "llmstruct.modules",
        "llmstruct.modules.cli",
        "llmstruct.modules.cli.query"
      ],
      "uid_type": "module",
      "artifact_id": "ecb3fbad-0e9c-08e7-1377-c16c6804cab9",
      "markdown_anchor": {
        "id": "llmstruct-modules-cli-query",
        "title": "Module: llmstruct.modules.cli.query",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.modules.cli.query](#llmstruct-modules-cli-query)",
        "html_anchor": "<a id=\"llmstruct-modules-cli-query\"></a>"
      }
    },
    {
      "module_id": "llmstruct.modules.cli.copilot",
      "path": "llmstruct/modules/cli/copilot.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "uid": "llmstruct.modules.cli.copilot",
      "uid_components": [
        "llmstruct",
        "llmstruct.modules",
        "llmstruct.modules.cli",
        "llmstruct.modules.cli.copilot"
      ],
      "uid_type": "module",
      "artifact_id": "fd92badd-aa9a-f801-0952-301efabcabf3",
      "markdown_anchor": {
        "id": "llmstruct-modules-cli-copilot",
        "title": "Module: llmstruct.modules.cli.copilot",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.modules.cli.copilot](#llmstruct-modules-cli-copilot)",
        "html_anchor": "<a id=\"llmstruct-modules-cli-copilot\"></a>"
      }
    },
    {
      "module_id": "llmstruct.modules.cli.parse",
      "path": "llmstruct/modules/cli/parse.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "uid": "llmstruct.modules.cli.parse",
      "uid_components": [
        "llmstruct",
        "llmstruct.modules",
        "llmstruct.modules.cli",
        "llmstruct.modules.cli.parse"
      ],
      "uid_type": "module",
      "artifact_id": "99242e67-f039-b360-51d2-e61cd9f73453",
      "markdown_anchor": {
        "id": "llmstruct-modules-cli-parse",
        "title": "Module: llmstruct.modules.cli.parse",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.modules.cli.parse](#llmstruct-modules-cli-parse)",
        "html_anchor": "<a id=\"llmstruct-modules-cli-parse\"></a>"
      }
    },
    {
      "module_id": "llmstruct.modules.cli.epic",
      "path": "llmstruct/modules/cli/epic.py",
      "category": "cli",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "uid": "llmstruct.modules.cli.epic",
      "uid_components": [
        "llmstruct",
        "llmstruct.modules",
        "llmstruct.modules.cli",
        "llmstruct.modules.cli.epic"
      ],
      "uid_type": "module",
      "artifact_id": "9cfb70b7-5ec4-27ed-a6c3-676bf20e7198",
      "markdown_anchor": {
        "id": "llmstruct-modules-cli-epic",
        "title": "Module: llmstruct.modules.cli.epic",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.modules.cli.epic](#llmstruct-modules-cli-epic)",
        "html_anchor": "<a id=\"llmstruct-modules-cli-epic\"></a>"
      }
    },
    {
      "module_id": "llmstruct.modules.cli.handlers",
      "path": "llmstruct/modules/cli/handlers.py",
      "category": "cli",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "uid": "llmstruct.modules.cli.handlers",
      "uid_components": [
        "llmstruct",
        "llmstruct.modules",
        "llmstruct.modules.cli",
        "llmstruct.modules.cli.handlers"
      ],
      "uid_type": "module",
      "artifact_id": "b84aefa9-910a-123a-8008-2fac20bfe643",
      "markdown_anchor": {
        "id": "llmstruct-modules-cli-handlers",
        "title": "Module: llmstruct.modules.cli.handlers",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.modules.cli.handlers](#llmstruct-modules-cli-handlers)",
        "html_anchor": "<a id=\"llmstruct-modules-cli-handlers\"></a>"
      }
    },
    {
      "module_id": "scripts.team.__init__",
      "path": "scripts/team/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "uid": "scripts.team.__init__",
      "uid_components": [
        "scripts",
        "scripts.team",
        "scripts.team.__init__"
      ],
      "uid_type": "module",
      "artifact_id": "2c2ae172-96a2-2dc7-da90-41914347e1e8",
      "markdown_anchor": {
        "id": "scripts-team-__init__",
        "title": "Module: scripts.team.__init__",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: scripts.team.__init__](#scripts-team-__init__)",
        "html_anchor": "<a id=\"scripts-team-__init__\"></a>"
      }
    }
  ],
  "modules": [
    {
      "module_id": "llmstruct.json_selector",
      "path": "llmstruct/json_selector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_json",
          "docstring": "Filter JSON data by key-value pair and select fields.",
          "line_range": [
            20,
            46
          ],
          "parameters": [
            "data",
            "filter_key",
            "filter_value",
            "fields"
          ],
          "decorators": [],
          "uid": "llmstruct.json_selector.filter_json",
          "uid_components": [
            "llmstruct",
            "llmstruct.json_selector",
            "llmstruct.json_selector.filter_json"
          ],
          "uid_type": "function"
        },
        {
          "name": "select_json",
          "docstring": "Load and filter JSON file, optionally parsing partially.",
          "line_range": [
            49,
            116
          ],
          "parameters": [
            "json_path",
            "filter_key",
            "filter_value",
            "fields",
            "partial"
          ],
          "decorators": [],
          "uid": "llmstruct.json_selector.select_json",
          "uid_components": [
            "llmstruct",
            "llmstruct.json_selector",
            "llmstruct.json_selector.select_json"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_json": [
          "filtered.append",
          "isinstance",
          "item.get",
          "data.get"
        ],
        "select_json": [
          "f.seek",
          "ijson.parse",
          "prefix.startswith",
          "open",
          "current_item.get",
          "Path",
          "logging.error",
          "json_file.exists",
          "json.load",
          "filter_json",
          "path.append",
          "filtered.append"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "ijson",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": "cc07b6d2cf42fd059429e43a0f8c985114c984ac92ba4ac6a618a8a7f8c588c2",
      "uid": "llmstruct.json_selector",
      "uid_components": [
        "llmstruct",
        "llmstruct.json_selector"
      ],
      "uid_type": "module",
      "artifact_id": "29ac6c3a-c38d-a4bc-4a9e-0c3f4972b60a",
      "metrics": {
        "cyclomatic_complexity": 2,
        "lines_of_code": 20,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 11,
        "test_coverage": 0.0,
        "maintainability_index": 90
      },
      "markdown_anchor": {
        "id": "llmstruct-json_selector",
        "title": "Module: llmstruct.json_selector",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.json_selector](#llmstruct-json_selector)",
        "html_anchor": "<a id=\"llmstruct-json_selector\"></a>"
      }
    },
    {
      "module_id": "llmstruct.__main__",
      "path": "llmstruct/__main__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "llmstruct.cli",
        "main"
      ],
      "hash": "de795cd58c2dc4122dd30b382c844a7c67fc36489e443b7d12170fa0e15994dc",
      "uid": "llmstruct.__main__",
      "uid_components": [
        "llmstruct",
        "llmstruct.__main__"
      ],
      "uid_type": "module",
      "artifact_id": "7134d95a-a456-ce18-72a8-d6984a7f122c",
      "metrics": {
        "cyclomatic_complexity": 0,
        "lines_of_code": 0,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 2,
        "test_coverage": 0.0,
        "maintainability_index": 100
      },
      "markdown_anchor": {
        "id": "llmstruct-__main__",
        "title": "Module: llmstruct.__main__",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.__main__](#llmstruct-__main__)",
        "html_anchor": "<a id=\"llmstruct-__main__\"></a>"
      }
    },
    {
      "module_id": "llmstruct.__init__",
      "path": "llmstruct/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "AISelfAwarenessCLIIntegration",
        "LLMClient",
        "SystemCapabilityDiscovery",
        "ai_cli_integration",
        "ai_self_awareness",
        "llm_client"
      ],
      "hash": "2592d45bae33fe6628051f9ae5eb6dd5f13fee9588b428a512203df62a55a122",
      "uid": "llmstruct.__init__",
      "uid_components": [
        "llmstruct",
        "llmstruct.__init__"
      ],
      "uid_type": "module",
      "artifact_id": "dc463e5e-230a-f3d8-2cf2-0ec4c2d9604f",
      "metrics": {
        "cyclomatic_complexity": 0,
        "lines_of_code": 0,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 6,
        "test_coverage": 0.0,
        "maintainability_index": 100
      },
      "markdown_anchor": {
        "id": "llmstruct-__init__",
        "title": "Module: llmstruct.__init__",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.__init__](#llmstruct-__init__)",
        "html_anchor": "<a id=\"llmstruct-__init__\"></a>"
      }
    },
    {
      "module_id": "llmstruct.cache",
      "path": "llmstruct/cache.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize SQLite cache for JSON files.",
          "line_range": [
            21,
            25
          ],
          "parameters": [
            "self",
            "db_path"
          ],
          "decorators": [],
          "uid": "llmstruct.cache.__init__",
          "uid_components": [
            "llmstruct",
            "llmstruct.cache",
            "llmstruct.cache.__init__"
          ],
          "uid_type": "function"
        },
        {
          "name": "create_tables",
          "docstring": "Create tables for metadata and file paths.",
          "line_range": [
            27,
            49
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.cache.create_tables",
          "uid_components": [
            "llmstruct",
            "llmstruct.cache",
            "llmstruct.cache.create_tables"
          ],
          "uid_type": "function"
        },
        {
          "name": "cache_json",
          "docstring": "Cache JSON metadata and store full file path.",
          "line_range": [
            51,
            90
          ],
          "parameters": [
            "self",
            "json_path",
            "artifact_id",
            "summary",
            "tags"
          ],
          "decorators": [],
          "uid": "llmstruct.cache.cache_json",
          "uid_components": [
            "llmstruct",
            "llmstruct.cache",
            "llmstruct.cache.cache_json"
          ],
          "uid_type": "function"
        },
        {
          "name": "get_metadata",
          "docstring": "Retrieve metadata by artifact_id.",
          "line_range": [
            92,
            108
          ],
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": [],
          "uid": "llmstruct.cache.get_metadata",
          "uid_components": [
            "llmstruct",
            "llmstruct.cache",
            "llmstruct.cache.get_metadata"
          ],
          "uid_type": "function"
        },
        {
          "name": "get_full_json",
          "docstring": "Load full JSON by artifact_id.",
          "line_range": [
            110,
            126
          ],
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": [],
          "uid": "llmstruct.cache.get_full_json",
          "uid_components": [
            "llmstruct",
            "llmstruct.cache",
            "llmstruct.cache.get_full_json"
          ],
          "uid_type": "function"
        },
        {
          "name": "close",
          "docstring": "Close database connection.",
          "line_range": [
            128,
            130
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.cache.close",
          "uid_components": [
            "llmstruct",
            "llmstruct.cache",
            "llmstruct.cache.close"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [
        {
          "name": "JSONCache",
          "docstring": "",
          "line_range": [
            20,
            130
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize SQLite cache for JSON files.",
              "line_range": [
                21,
                25
              ],
              "parameters": [
                "self",
                "db_path"
              ],
              "uid": "llmstruct.cache.JSONCache.__init__",
              "uid_components": [
                "llmstruct",
                "llmstruct.cache",
                "llmstruct.cache.JSONCache",
                "llmstruct.cache.JSONCache.__init__"
              ],
              "uid_type": "method"
            },
            {
              "name": "create_tables",
              "docstring": "Create tables for metadata and file paths.",
              "line_range": [
                27,
                49
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.cache.JSONCache.create_tables",
              "uid_components": [
                "llmstruct",
                "llmstruct.cache",
                "llmstruct.cache.JSONCache",
                "llmstruct.cache.JSONCache.create_tables"
              ],
              "uid_type": "method"
            },
            {
              "name": "cache_json",
              "docstring": "Cache JSON metadata and store full file path.",
              "line_range": [
                51,
                90
              ],
              "parameters": [
                "self",
                "json_path",
                "artifact_id",
                "summary",
                "tags"
              ],
              "uid": "llmstruct.cache.JSONCache.cache_json",
              "uid_components": [
                "llmstruct",
                "llmstruct.cache",
                "llmstruct.cache.JSONCache",
                "llmstruct.cache.JSONCache.cache_json"
              ],
              "uid_type": "method"
            },
            {
              "name": "get_metadata",
              "docstring": "Retrieve metadata by artifact_id.",
              "line_range": [
                92,
                108
              ],
              "parameters": [
                "self",
                "artifact_id"
              ],
              "uid": "llmstruct.cache.JSONCache.get_metadata",
              "uid_components": [
                "llmstruct",
                "llmstruct.cache",
                "llmstruct.cache.JSONCache",
                "llmstruct.cache.JSONCache.get_metadata"
              ],
              "uid_type": "method"
            },
            {
              "name": "get_full_json",
              "docstring": "Load full JSON by artifact_id.",
              "line_range": [
                110,
                126
              ],
              "parameters": [
                "self",
                "artifact_id"
              ],
              "uid": "llmstruct.cache.JSONCache.get_full_json",
              "uid_components": [
                "llmstruct",
                "llmstruct.cache",
                "llmstruct.cache.JSONCache",
                "llmstruct.cache.JSONCache.get_full_json"
              ],
              "uid_type": "method"
            },
            {
              "name": "close",
              "docstring": "Close database connection.",
              "line_range": [
                128,
                130
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.cache.JSONCache.close",
              "uid_components": [
                "llmstruct",
                "llmstruct.cache",
                "llmstruct.cache.JSONCache",
                "llmstruct.cache.JSONCache.close"
              ],
              "uid_type": "method"
            }
          ],
          "bases": [],
          "uid": "llmstruct.cache.JSONCache",
          "uid_components": [
            "llmstruct",
            "llmstruct.cache",
            "llmstruct.cache.JSONCache"
          ],
          "uid_type": "class"
        }
      ],
      "callgraph": {
        "__init__": [
          "self.create_tables",
          "sqlite3.connect"
        ],
        "create_tables": [],
        "cache_json": [
          "hashlib.sha256",
          "open",
          "Path",
          "logging.error",
          "json_file.exists",
          "json.dumps",
          "f.read",
          "content.encode",
          "str",
          "logging.info"
        ],
        "get_metadata": [
          "json.loads",
          "cursor.fetchone"
        ],
        "get_full_json": [
          "json.load",
          "cursor.fetchone",
          "open",
          "logging.error"
        ],
        "close": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "hashlib",
        "json",
        "logging",
        "pathlib",
        "sqlite3",
        "typing"
      ],
      "hash": "10a85d5ffece6af208cff17665640aeca3a1c44397e0b6da50f6a50fa53ae42f",
      "uid": "llmstruct.cache",
      "uid_components": [
        "llmstruct",
        "llmstruct.cache"
      ],
      "uid_type": "module",
      "artifact_id": "a8002cd9-7403-8018-bca3-4860dc286f19",
      "metrics": {
        "cyclomatic_complexity": 8,
        "lines_of_code": 60,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 11,
        "test_coverage": 0.0,
        "maintainability_index": 60
      },
      "markdown_anchor": {
        "id": "llmstruct-cache",
        "title": "Module: llmstruct.cache",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.cache](#llmstruct-cache)",
        "html_anchor": "<a id=\"llmstruct-cache\"></a>"
      }
    },
    {
      "module_id": "llmstruct.self_run",
      "path": "llmstruct/self_run.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_struct",
          "docstring": "Filter struct.json or init.json based on prompt keywords. Supports dict or list as root.",
          "line_range": [
            22,
            73
          ],
          "parameters": [
            "struct",
            "prompt"
          ],
          "decorators": [],
          "uid": "llmstruct.self_run.filter_struct",
          "uid_components": [
            "llmstruct",
            "llmstruct.self_run",
            "llmstruct.self_run.filter_struct"
          ],
          "uid_type": "function"
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "Attach filtered JSON to LLM prompt, using cache if available.",
          "line_range": [
            76,
            116
          ],
          "parameters": [
            "context_path",
            "prompt",
            "cache"
          ],
          "decorators": [],
          "uid": "llmstruct.self_run.attach_to_llm_request",
          "uid_components": [
            "llmstruct",
            "llmstruct.self_run",
            "llmstruct.self_run.attach_to_llm_request"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_struct": [
          "struct.get",
          "isinstance",
          "module.get",
          "filter_json",
          "str",
          "item.get",
          "any",
          "prompt.lower"
        ],
        "attach_to_llm_request": [
          "cache.get_metadata",
          "cache.get_full_json",
          "context_file.exists",
          "Path",
          "select_json",
          "logging.error",
          "json.dumps",
          "filter_json",
          "filter_struct",
          "cache.cache_json",
          "logging.info",
          "prompt.lower"
        ]
      },
      "dependencies": [
        "Any",
        "JSONCache",
        "Optional",
        "Path",
        "cache",
        "filter_json",
        "json",
        "json_selector",
        "logging",
        "pathlib",
        "select_json",
        "typing"
      ],
      "hash": "4bab9318950f2b239e5d0e642500367d03d5136749df94b40bfea53b93d54917",
      "uid": "llmstruct.self_run",
      "uid_components": [
        "llmstruct",
        "llmstruct.self_run"
      ],
      "uid_type": "module",
      "artifact_id": "ab11dee2-8884-5709-18b0-b374571186b3",
      "metrics": {
        "cyclomatic_complexity": 2,
        "lines_of_code": 20,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 12,
        "test_coverage": 0.0,
        "maintainability_index": 90
      },
      "markdown_anchor": {
        "id": "llmstruct-self_run",
        "title": "Module: llmstruct.self_run",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.self_run](#llmstruct-self_run)",
        "html_anchor": "<a id=\"llmstruct-self_run\"></a>"
      }
    },
    {
      "module_id": "llmstruct.llm_client",
      "path": "llmstruct/llm_client.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize LLMClient with optional Ollama host.",
          "line_range": [
            28,
            36
          ],
          "parameters": [
            "self",
            "ollama_host"
          ],
          "decorators": [],
          "uid": "llmstruct.llm_client.__init__",
          "uid_components": [
            "llmstruct",
            "llmstruct.llm_client",
            "llmstruct.llm_client.__init__"
          ],
          "uid_type": "function"
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt, context, and optional model.",
          "line_range": [
            38,
            86
          ],
          "parameters": [
            "self",
            "prompt",
            "context_path",
            "mode",
            "model",
            "artifact_ids"
          ],
          "decorators": [],
          "uid": "llmstruct.llm_client.query",
          "uid_components": [
            "llmstruct",
            "llmstruct.llm_client",
            "llmstruct.llm_client.query"
          ],
          "uid_type": "function"
        },
        {
          "name": "_query_grok",
          "docstring": "Query Grok API.",
          "line_range": [
            88,
            115
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": [],
          "uid": "llmstruct.llm_client._query_grok",
          "uid_components": [
            "llmstruct",
            "llmstruct.llm_client",
            "llmstruct.llm_client._query_grok"
          ],
          "uid_type": "function"
        },
        {
          "name": "_query_anthropic",
          "docstring": "Query Anthropic API.",
          "line_range": [
            117,
            141
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": [],
          "uid": "llmstruct.llm_client._query_anthropic",
          "uid_components": [
            "llmstruct",
            "llmstruct.llm_client",
            "llmstruct.llm_client._query_anthropic"
          ],
          "uid_type": "function"
        },
        {
          "name": "_query_ollama",
          "docstring": "Query Ollama API with specified model.",
          "line_range": [
            143,
            156
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": [],
          "uid": "llmstruct.llm_client._query_ollama",
          "uid_components": [
            "llmstruct",
            "llmstruct.llm_client",
            "llmstruct.llm_client._query_ollama"
          ],
          "uid_type": "function"
        },
        {
          "name": "_query_hybrid",
          "docstring": "Query multiple LLMs and combine results.",
          "line_range": [
            158,
            172
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": [],
          "uid": "llmstruct.llm_client._query_hybrid",
          "uid_components": [
            "llmstruct",
            "llmstruct.llm_client",
            "llmstruct.llm_client._query_hybrid"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [
        {
          "name": "LLMClient",
          "docstring": "",
          "line_range": [
            27,
            172
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize LLMClient with optional Ollama host.",
              "line_range": [
                28,
                36
              ],
              "parameters": [
                "self",
                "ollama_host"
              ],
              "uid": "llmstruct.llm_client.LLMClient.__init__",
              "uid_components": [
                "llmstruct",
                "llmstruct.llm_client",
                "llmstruct.llm_client.LLMClient",
                "llmstruct.llm_client.LLMClient.__init__"
              ],
              "uid_type": "method"
            },
            {
              "name": "query",
              "docstring": "Query LLMs with prompt, context, and optional model.",
              "line_range": [
                38,
                86
              ],
              "parameters": [
                "self",
                "prompt",
                "context_path",
                "mode",
                "model",
                "artifact_ids"
              ],
              "uid": "llmstruct.llm_client.LLMClient.query",
              "uid_components": [
                "llmstruct",
                "llmstruct.llm_client",
                "llmstruct.llm_client.LLMClient",
                "llmstruct.llm_client.LLMClient.query"
              ],
              "uid_type": "method"
            },
            {
              "name": "_query_grok",
              "docstring": "Query Grok API.",
              "line_range": [
                88,
                115
              ],
              "parameters": [
                "self",
                "prompt"
              ],
              "uid": "llmstruct.llm_client.LLMClient._query_grok",
              "uid_components": [
                "llmstruct",
                "llmstruct.llm_client",
                "llmstruct.llm_client.LLMClient",
                "llmstruct.llm_client.LLMClient._query_grok"
              ],
              "uid_type": "method"
            },
            {
              "name": "_query_anthropic",
              "docstring": "Query Anthropic API.",
              "line_range": [
                117,
                141
              ],
              "parameters": [
                "self",
                "prompt"
              ],
              "uid": "llmstruct.llm_client.LLMClient._query_anthropic",
              "uid_components": [
                "llmstruct",
                "llmstruct.llm_client",
                "llmstruct.llm_client.LLMClient",
                "llmstruct.llm_client.LLMClient._query_anthropic"
              ],
              "uid_type": "method"
            },
            {
              "name": "_query_ollama",
              "docstring": "Query Ollama API with specified model.",
              "line_range": [
                143,
                156
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ],
              "uid": "llmstruct.llm_client.LLMClient._query_ollama",
              "uid_components": [
                "llmstruct",
                "llmstruct.llm_client",
                "llmstruct.llm_client.LLMClient",
                "llmstruct.llm_client.LLMClient._query_ollama"
              ],
              "uid_type": "method"
            },
            {
              "name": "_query_hybrid",
              "docstring": "Query multiple LLMs and combine results.",
              "line_range": [
                158,
                172
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ],
              "uid": "llmstruct.llm_client.LLMClient._query_hybrid",
              "uid_components": [
                "llmstruct",
                "llmstruct.llm_client",
                "llmstruct.llm_client.LLMClient",
                "llmstruct.llm_client.LLMClient._query_hybrid"
              ],
              "uid_type": "method"
            }
          ],
          "bases": [],
          "uid": "llmstruct.llm_client.LLMClient",
          "uid_components": [
            "llmstruct",
            "llmstruct.llm_client",
            "llmstruct.llm_client.LLMClient"
          ],
          "uid_type": "class"
        }
      ],
      "callgraph": {
        "__init__": [
          "int",
          "logging.info",
          "os.getenv"
        ],
        "query": [
          "range",
          "logging.warning",
          "self._query_anthropic",
          "self._query_grok",
          "self._query_ollama",
          "Path",
          "self._query_hybrid",
          "logging.error",
          "json.load",
          "json.dumps",
          "asyncio.sleep",
          "logging.info"
        ],
        "_query_grok": [
          "response.json",
          "aiohttp.ClientSession",
          "session.post",
          "logging.error",
          "result.get",
          "logging.info"
        ],
        "_query_anthropic": [
          "response.json",
          "aiohttp.ClientSession",
          "session.post",
          "logging.error",
          "result.get",
          "logging.info"
        ],
        "_query_ollama": [
          "response.json",
          "aiohttp.ClientSession",
          "session.post",
          "logging.error",
          "result.get",
          "logging.info",
          "logging.debug"
        ],
        "_query_hybrid": [
          "len",
          "self._query_anthropic",
          "self._query_grok",
          "isinstance",
          "self._query_ollama",
          "asyncio.gather",
          "logging.info"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "aiohttp",
        "asyncio",
        "dotenv",
        "json",
        "load_dotenv",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": "c477d5e96f165fa96546ff8e2673db785cee146f6fffd0f424d21072431133ba",
      "uid": "llmstruct.llm_client",
      "uid_components": [
        "llmstruct",
        "llmstruct.llm_client"
      ],
      "uid_type": "module",
      "artifact_id": "2f939f0c-01ba-fe57-b74b-500aaab38e55",
      "metrics": {
        "cyclomatic_complexity": 8,
        "lines_of_code": 60,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 12,
        "test_coverage": 0.0,
        "maintainability_index": 60
      },
      "markdown_anchor": {
        "id": "llmstruct-llm_client",
        "title": "Module: llmstruct.llm_client",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.llm_client](#llmstruct-llm_client)",
        "html_anchor": "<a id=\"llmstruct-llm_client\"></a>"
      }
    },
    {
      "module_id": "llmstruct.cli",
      "path": "llmstruct/cli.py",
      "category": "core",
      "module_doc": "LLMStruct CLI - Main entry point for the command-line interface.",
      "functions": [
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": [
            55,
            318
          ],
          "parameters": [],
          "decorators": [],
          "uid": "llmstruct.cli.main",
          "uid_components": [
            "llmstruct",
            "llmstruct.cli",
            "llmstruct.cli.main"
          ],
          "uid_type": "function"
        },
        {
          "name": "normalize_patterns",
          "docstring": "",
          "line_range": [
            281,
            292
          ],
          "parameters": [
            "arglist"
          ],
          "decorators": [],
          "uid": "llmstruct.cli.normalize_patterns",
          "uid_components": [
            "llmstruct",
            "llmstruct.cli",
            "llmstruct.cli.normalize_patterns"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [],
      "callgraph": {
        "main": [
          "epic.add_epic_cli_subparser",
          "parser.add_subparsers",
          "argparse.ArgumentParser",
          "audit_parser.add_argument",
          "review_parser.add_argument",
          "duplicates_parser.add_argument",
          "query_parser.add_argument",
          "parser.parse_args",
          "dogfood_parser.add_argument",
          "subparsers.add_parser",
          "copilot_parser.add_argument",
          "parse_parser.add_argument",
          "context_parser.add_argument"
        ],
        "normalize_patterns": [
          "result.extend",
          "p.strip",
          "result.append",
          "item.split",
          "item.strip"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "analyze_duplicates",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "audit",
        "cli_core",
        "context",
        "copilot",
        "create_cli_core",
        "dogfood",
        "epic",
        "generate_json",
        "get_folder_structure",
        "initialize_copilot",
        "interactive",
        "interactive_legacy",
        "interactive_modular",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.modules.cli",
        "llmstruct.modules.cli.analyze_duplicates",
        "llmstruct.modules.cli.audit",
        "llmstruct.modules.cli.context",
        "llmstruct.modules.cli.copilot",
        "llmstruct.modules.cli.dogfood",
        "llmstruct.modules.cli.handlers",
        "llmstruct.modules.cli.parse",
        "llmstruct.modules.cli.query",
        "llmstruct.modules.cli.review",
        "llmstruct.modules.cli.utils",
        "llmstruct.modules.commands.queue",
        "llmstruct.self_run",
        "load_config",
        "load_gitignore",
        "logging",
        "os",
        "parse",
        "parse_files_from_response",
        "pathlib",
        "process_cli_queue_enhanced",
        "query",
        "re",
        "read_file_content",
        "review",
        "shutil",
        "sys",
        "time",
        "toml",
        "typing",
        "write_to_file"
      ],
      "hash": "0f1504317e34987adbd393567aa9bdaf5c356d1d6b9caa26781ccdb83ca3d0a3",
      "uid": "llmstruct.cli",
      "uid_components": [
        "llmstruct",
        "llmstruct.cli"
      ],
      "uid_type": "module",
      "artifact_id": "83dd4586-28f0-5a6c-cdec-c5c5d628f474",
      "metrics": {
        "cyclomatic_complexity": 2,
        "lines_of_code": 20,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 57,
        "test_coverage": 0.0,
        "maintainability_index": 90
      },
      "markdown_anchor": {
        "id": "llmstruct-cli",
        "title": "Module: llmstruct.cli",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.cli](#llmstruct-cli)",
        "html_anchor": "<a id=\"llmstruct-cli\"></a>"
      }
    },
    {
      "module_id": "scripts.auto_update_struct",
      "path": "scripts/auto_update_struct.py",
      "category": "core",
      "module_doc": "Automatic struct.json update script\nThis script automatically parses the project and updates struct.json\nwithout requiring LLM intervention.",
      "functions": [
        {
          "name": "detect_project_changes",
          "docstring": "Detect if project files have changed since last struct.json generation.\nUses git status to check for modifications.",
          "line_range": [
            44,
            81
          ],
          "parameters": [
            "root_dir",
            "struct_path"
          ],
          "decorators": [],
          "uid": "scripts.auto_update_struct.detect_project_changes",
          "uid_components": [
            "scripts",
            "scripts.auto_update_struct",
            "scripts.auto_update_struct.detect_project_changes"
          ],
          "uid_type": "function"
        },
        {
          "name": "backup_struct_json",
          "docstring": "Create a backup of existing struct.json.",
          "line_range": [
            84,
            97
          ],
          "parameters": [
            "struct_path"
          ],
          "decorators": [],
          "uid": "scripts.auto_update_struct.backup_struct_json",
          "uid_components": [
            "scripts",
            "scripts.auto_update_struct",
            "scripts.auto_update_struct.backup_struct_json"
          ],
          "uid_type": "function"
        },
        {
          "name": "validate_struct_json",
          "docstring": "Validate generated struct.json for basic structure.",
          "line_range": [
            100,
            128
          ],
          "parameters": [
            "struct_path"
          ],
          "decorators": [],
          "uid": "scripts.auto_update_struct.validate_struct_json",
          "uid_components": [
            "scripts",
            "scripts.auto_update_struct",
            "scripts.auto_update_struct.validate_struct_json"
          ],
          "uid_type": "function"
        },
        {
          "name": "update_struct_json",
          "docstring": "Main function to update struct.json automatically.\n\nArgs:\n    root_dir: Project root directory (default: current directory)\n    struct_path: Path to struct.json (default: ./struct.json)\n    force: Force regeneration even if no changes detected\n    config_override: Override default configuration\n\nReturns:\n    bool: True if update was successful",
          "line_range": [
            131,
            225
          ],
          "parameters": [
            "root_dir",
            "struct_path",
            "force",
            "config_override"
          ],
          "decorators": [],
          "uid": "scripts.auto_update_struct.update_struct_json",
          "uid_components": [
            "scripts",
            "scripts.auto_update_struct",
            "scripts.auto_update_struct.update_struct_json"
          ],
          "uid_type": "function"
        },
        {
          "name": "main",
          "docstring": "Command-line interface for auto-update script.",
          "line_range": [
            228,
            286
          ],
          "parameters": [],
          "decorators": [],
          "uid": "scripts.auto_update_struct.main",
          "uid_components": [
            "scripts",
            "scripts.auto_update_struct",
            "scripts.auto_update_struct.main"
          ],
          "uid_type": "function"
        },
        {
          "name": "load_config",
          "docstring": "",
          "line_range": [
            24,
            25
          ],
          "parameters": [],
          "decorators": [],
          "uid": "scripts.auto_update_struct.load_config",
          "uid_components": [
            "scripts",
            "scripts.auto_update_struct",
            "scripts.auto_update_struct.load_config"
          ],
          "uid_type": "function"
        },
        {
          "name": "load_gitignore",
          "docstring": "",
          "line_range": [
            26,
            27
          ],
          "parameters": [],
          "decorators": [],
          "uid": "scripts.auto_update_struct.load_gitignore",
          "uid_components": [
            "scripts",
            "scripts.auto_update_struct",
            "scripts.auto_update_struct.load_gitignore"
          ],
          "uid_type": "function"
        },
        {
          "name": "generate_json",
          "docstring": "",
          "line_range": [
            28,
            29
          ],
          "parameters": [],
          "decorators": [],
          "uid": "scripts.auto_update_struct.generate_json",
          "uid_components": [
            "scripts",
            "scripts.auto_update_struct",
            "scripts.auto_update_struct.generate_json"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [],
      "callgraph": {
        "load_config": [],
        "load_gitignore": [],
        "generate_json": [
          "ImportError"
        ],
        "detect_project_changes": [
          "subprocess.run",
          "logger.warning",
          "file_path.stat",
          "Path",
          "logger.info"
        ],
        "backup_struct_json": [
          "subprocess.run",
          "Path",
          "datetime.now",
          "logger.info",
          "logger.error"
        ],
        "validate_struct_json": [
          "json.load",
          "open",
          "logger.info",
          "logger.error"
        ],
        "update_struct_json": [
          "config.update",
          "load_gitignore",
          "detect_project_changes",
          "backup_struct_json",
          "config.get",
          "generate_json",
          "subprocess.run",
          "validate_struct_json",
          "os.getcwd",
          "open",
          "cli_config.get",
          "logger.info",
          "logger.error",
          "json.dump",
          "load_config"
        ],
        "main": [
          "detect_project_changes",
          "argparse.ArgumentParser",
          "parser.add_argument",
          "print",
          "os.getcwd",
          "update_struct_json",
          "parser.parse_args",
          "logging.getLogger",
          "sys.exit"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "generate_json",
        "json",
        "llmstruct.cli",
        "llmstruct.generators.json_generator",
        "load_config",
        "load_gitignore",
        "logging",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": "505bdb6b282e7e9befc6df4165834fa7481335c96bbb88b04501996e15e173c2",
      "uid": "scripts.auto_update_struct",
      "uid_components": [
        "scripts",
        "scripts.auto_update_struct"
      ],
      "uid_type": "module",
      "artifact_id": "3761c72a-e8a5-6f08-fa7a-caa30b339d36",
      "metrics": {
        "cyclomatic_complexity": 8,
        "lines_of_code": 80,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 18,
        "test_coverage": 0.0,
        "maintainability_index": 60
      },
      "markdown_anchor": {
        "id": "scripts-auto_update_struct",
        "title": "Module: scripts.auto_update_struct",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: scripts.auto_update_struct](#scripts-auto_update_struct)",
        "html_anchor": "<a id=\"scripts-auto_update_struct\"></a>"
      }
    },
    {
      "module_id": "scripts.validate_schemas",
      "path": "scripts/validate_schemas.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "uid": "scripts.validate_schemas",
      "uid_components": [
        "scripts",
        "scripts.validate_schemas"
      ],
      "uid_type": "module",
      "artifact_id": "e08c221d-3a74-597c-2b1b-e459cfe1f71e",
      "metrics": {
        "cyclomatic_complexity": 0,
        "lines_of_code": 0,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 0,
        "test_coverage": 0.0,
        "maintainability_index": 100
      },
      "markdown_anchor": {
        "id": "scripts-validate_schemas",
        "title": "Module: scripts.validate_schemas",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: scripts.validate_schemas](#scripts-validate_schemas)",
        "html_anchor": "<a id=\"scripts-validate_schemas\"></a>"
      }
    },
    {
      "module_id": "scripts.github_sync_manager",
      "path": "scripts/github_sync_manager.py",
      "category": "core",
      "module_doc": "GitHub Sync Manager - \u0418\u0434\u0435\u043c\u043f\u043e\u0442\u0435\u043d\u0442\u043d\u0430\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f processing results \u0441 GitHub\nSupports: Issues, Epics (Projects), Discussions\nSafety: dry-run mode, logging, collision detection",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface",
          "line_range": [
            375,
            408
          ],
          "parameters": [],
          "decorators": [],
          "uid": "scripts.github_sync_manager.main",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager",
            "scripts.github_sync_manager.main"
          ],
          "uid_type": "function"
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            17,
            48
          ],
          "parameters": [
            "self",
            "repo_owner",
            "repo_name",
            "dry_run"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager.__init__",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager",
            "scripts.github_sync_manager.__init__"
          ],
          "uid_type": "function"
        },
        {
          "name": "load_sync_log",
          "docstring": "Load previous sync results for idempotency",
          "line_range": [
            50,
            60
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager.load_sync_log",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager",
            "scripts.github_sync_manager.load_sync_log"
          ],
          "uid_type": "function"
        },
        {
          "name": "save_sync_log",
          "docstring": "Save sync log for future idempotency",
          "line_range": [
            62,
            65
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager.save_sync_log",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager",
            "scripts.github_sync_manager.save_sync_log"
          ],
          "uid_type": "function"
        },
        {
          "name": "api_request",
          "docstring": "Safe GitHub API request with rate limiting",
          "line_range": [
            67,
            94
          ],
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager.api_request",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager",
            "scripts.github_sync_manager.api_request"
          ],
          "uid_type": "function"
        },
        {
          "name": "get_existing_issues",
          "docstring": "Get existing GitHub issues for collision detection",
          "line_range": [
            96,
            112
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager.get_existing_issues",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager",
            "scripts.github_sync_manager.get_existing_issues"
          ],
          "uid_type": "function"
        },
        {
          "name": "get_existing_discussions",
          "docstring": "Get existing GitHub discussions",
          "line_range": [
            114,
            118
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager.get_existing_discussions",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager",
            "scripts.github_sync_manager.get_existing_discussions"
          ],
          "uid_type": "function"
        },
        {
          "name": "item_already_synced",
          "docstring": "Check if item was already synced (idempotency)",
          "line_range": [
            120,
            125
          ],
          "parameters": [
            "self",
            "item",
            "category"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager.item_already_synced",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager",
            "scripts.github_sync_manager.item_already_synced"
          ],
          "uid_type": "function"
        },
        {
          "name": "find_existing_by_title",
          "docstring": "Find existing GitHub item by title similarity",
          "line_range": [
            127,
            143
          ],
          "parameters": [
            "self",
            "title",
            "existing_items"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager.find_existing_by_title",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager",
            "scripts.github_sync_manager.find_existing_by_title"
          ],
          "uid_type": "function"
        },
        {
          "name": "create_github_issue",
          "docstring": "Create GitHub issue from processed item",
          "line_range": [
            145,
            182
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager.create_github_issue",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager",
            "scripts.github_sync_manager.create_github_issue"
          ],
          "uid_type": "function"
        },
        {
          "name": "create_github_discussion",
          "docstring": "Create GitHub discussion from processed item",
          "line_range": [
            184,
            194
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager.create_github_discussion",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager",
            "scripts.github_sync_manager.create_github_discussion"
          ],
          "uid_type": "function"
        },
        {
          "name": "create_github_epic",
          "docstring": "Create GitHub epic (as Project or enhanced Issue)",
          "line_range": [
            196,
            214
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager.create_github_epic",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager",
            "scripts.github_sync_manager.create_github_epic"
          ],
          "uid_type": "function"
        },
        {
          "name": "sync_category",
          "docstring": "Sync specific category with GitHub",
          "line_range": [
            216,
            290
          ],
          "parameters": [
            "self",
            "category",
            "filename"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager.sync_category",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager",
            "scripts.github_sync_manager.sync_category"
          ],
          "uid_type": "function"
        },
        {
          "name": "validate_before_sync",
          "docstring": "Pre-sync validation checks",
          "line_range": [
            292,
            322
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager.validate_before_sync",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager",
            "scripts.github_sync_manager.validate_before_sync"
          ],
          "uid_type": "function"
        },
        {
          "name": "run_sync",
          "docstring": "Main sync execution",
          "line_range": [
            324,
            373
          ],
          "parameters": [
            "self",
            "categories"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager.run_sync",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager",
            "scripts.github_sync_manager.run_sync"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [
        {
          "name": "GitHubSyncManager",
          "docstring": "",
          "line_range": [
            16,
            373
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                17,
                48
              ],
              "parameters": [
                "self",
                "repo_owner",
                "repo_name",
                "dry_run"
              ],
              "uid": "scripts.github_sync_manager.GitHubSyncManager.__init__",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager",
                "scripts.github_sync_manager.GitHubSyncManager",
                "scripts.github_sync_manager.GitHubSyncManager.__init__"
              ],
              "uid_type": "method"
            },
            {
              "name": "load_sync_log",
              "docstring": "Load previous sync results for idempotency",
              "line_range": [
                50,
                60
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.github_sync_manager.GitHubSyncManager.load_sync_log",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager",
                "scripts.github_sync_manager.GitHubSyncManager",
                "scripts.github_sync_manager.GitHubSyncManager.load_sync_log"
              ],
              "uid_type": "method"
            },
            {
              "name": "save_sync_log",
              "docstring": "Save sync log for future idempotency",
              "line_range": [
                62,
                65
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.github_sync_manager.GitHubSyncManager.save_sync_log",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager",
                "scripts.github_sync_manager.GitHubSyncManager",
                "scripts.github_sync_manager.GitHubSyncManager.save_sync_log"
              ],
              "uid_type": "method"
            },
            {
              "name": "api_request",
              "docstring": "Safe GitHub API request with rate limiting",
              "line_range": [
                67,
                94
              ],
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ],
              "uid": "scripts.github_sync_manager.GitHubSyncManager.api_request",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager",
                "scripts.github_sync_manager.GitHubSyncManager",
                "scripts.github_sync_manager.GitHubSyncManager.api_request"
              ],
              "uid_type": "method"
            },
            {
              "name": "get_existing_issues",
              "docstring": "Get existing GitHub issues for collision detection",
              "line_range": [
                96,
                112
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.github_sync_manager.GitHubSyncManager.get_existing_issues",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager",
                "scripts.github_sync_manager.GitHubSyncManager",
                "scripts.github_sync_manager.GitHubSyncManager.get_existing_issues"
              ],
              "uid_type": "method"
            },
            {
              "name": "get_existing_discussions",
              "docstring": "Get existing GitHub discussions",
              "line_range": [
                114,
                118
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.github_sync_manager.GitHubSyncManager.get_existing_discussions",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager",
                "scripts.github_sync_manager.GitHubSyncManager",
                "scripts.github_sync_manager.GitHubSyncManager.get_existing_discussions"
              ],
              "uid_type": "method"
            },
            {
              "name": "item_already_synced",
              "docstring": "Check if item was already synced (idempotency)",
              "line_range": [
                120,
                125
              ],
              "parameters": [
                "self",
                "item",
                "category"
              ],
              "uid": "scripts.github_sync_manager.GitHubSyncManager.item_already_synced",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager",
                "scripts.github_sync_manager.GitHubSyncManager",
                "scripts.github_sync_manager.GitHubSyncManager.item_already_synced"
              ],
              "uid_type": "method"
            },
            {
              "name": "find_existing_by_title",
              "docstring": "Find existing GitHub item by title similarity",
              "line_range": [
                127,
                143
              ],
              "parameters": [
                "self",
                "title",
                "existing_items"
              ],
              "uid": "scripts.github_sync_manager.GitHubSyncManager.find_existing_by_title",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager",
                "scripts.github_sync_manager.GitHubSyncManager",
                "scripts.github_sync_manager.GitHubSyncManager.find_existing_by_title"
              ],
              "uid_type": "method"
            },
            {
              "name": "create_github_issue",
              "docstring": "Create GitHub issue from processed item",
              "line_range": [
                145,
                182
              ],
              "parameters": [
                "self",
                "item"
              ],
              "uid": "scripts.github_sync_manager.GitHubSyncManager.create_github_issue",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager",
                "scripts.github_sync_manager.GitHubSyncManager",
                "scripts.github_sync_manager.GitHubSyncManager.create_github_issue"
              ],
              "uid_type": "method"
            },
            {
              "name": "create_github_discussion",
              "docstring": "Create GitHub discussion from processed item",
              "line_range": [
                184,
                194
              ],
              "parameters": [
                "self",
                "item"
              ],
              "uid": "scripts.github_sync_manager.GitHubSyncManager.create_github_discussion",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager",
                "scripts.github_sync_manager.GitHubSyncManager",
                "scripts.github_sync_manager.GitHubSyncManager.create_github_discussion"
              ],
              "uid_type": "method"
            },
            {
              "name": "create_github_epic",
              "docstring": "Create GitHub epic (as Project or enhanced Issue)",
              "line_range": [
                196,
                214
              ],
              "parameters": [
                "self",
                "item"
              ],
              "uid": "scripts.github_sync_manager.GitHubSyncManager.create_github_epic",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager",
                "scripts.github_sync_manager.GitHubSyncManager",
                "scripts.github_sync_manager.GitHubSyncManager.create_github_epic"
              ],
              "uid_type": "method"
            },
            {
              "name": "sync_category",
              "docstring": "Sync specific category with GitHub",
              "line_range": [
                216,
                290
              ],
              "parameters": [
                "self",
                "category",
                "filename"
              ],
              "uid": "scripts.github_sync_manager.GitHubSyncManager.sync_category",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager",
                "scripts.github_sync_manager.GitHubSyncManager",
                "scripts.github_sync_manager.GitHubSyncManager.sync_category"
              ],
              "uid_type": "method"
            },
            {
              "name": "validate_before_sync",
              "docstring": "Pre-sync validation checks",
              "line_range": [
                292,
                322
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.github_sync_manager.GitHubSyncManager.validate_before_sync",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager",
                "scripts.github_sync_manager.GitHubSyncManager",
                "scripts.github_sync_manager.GitHubSyncManager.validate_before_sync"
              ],
              "uid_type": "method"
            },
            {
              "name": "run_sync",
              "docstring": "Main sync execution",
              "line_range": [
                324,
                373
              ],
              "parameters": [
                "self",
                "categories"
              ],
              "uid": "scripts.github_sync_manager.GitHubSyncManager.run_sync",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager",
                "scripts.github_sync_manager.GitHubSyncManager",
                "scripts.github_sync_manager.GitHubSyncManager.run_sync"
              ],
              "uid_type": "method"
            }
          ],
          "bases": [],
          "uid": "scripts.github_sync_manager.GitHubSyncManager",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager",
            "scripts.github_sync_manager.GitHubSyncManager"
          ],
          "uid_type": "class"
        }
      ],
      "callgraph": {
        "__init__": [
          "print",
          "self.load_sync_log",
          "os.getenv",
          "Path"
        ],
        "load_sync_log": [
          "json.load",
          "open"
        ],
        "save_sync_log": [
          "json.dump",
          "open"
        ],
        "api_request": [
          "requests.get",
          "requests.post",
          "requests.patch",
          "print",
          "response.json",
          "int",
          "ValueError",
          "response.raise_for_status",
          "method.upper",
          "time.sleep"
        ],
        "get_existing_issues": [
          "self.api_request",
          "issues.extend",
          "len"
        ],
        "get_existing_discussions": [],
        "item_already_synced": [
          "item.get"
        ],
        "find_existing_by_title": [
          "title.lower",
          "item.get",
          "len"
        ],
        "create_github_issue": [
          "labels.append",
          "print",
          "self.api_request",
          "item.get",
          "processing_meta.get"
        ],
        "create_github_discussion": [
          "print",
          "item.get"
        ],
        "create_github_epic": [
          "print",
          "item.get",
          "self.api_request"
        ],
        "sync_category": [
          "self.create_github_epic",
          "self.find_existing_by_title",
          "data.get",
          "existing.get",
          "print",
          "open",
          "result.get",
          "self.get_existing_discussions",
          "file_path.exists",
          "json.load",
          "self.create_github_discussion",
          "self.item_already_synced",
          "datetime.now",
          "self.get_existing_issues",
          "self.create_github_issue",
          "item.get"
        ],
        "validate_before_sync": [
          "repo_info.get",
          "print",
          "core_limit.get",
          "rate_limit.get",
          "user_info.get",
          "self.api_request"
        ],
        "run_sync": [
          "r.get",
          "self.validate_before_sync",
          "self.save_sync_log",
          "results.values",
          "print",
          "sum",
          "datetime.now",
          "self.sync_category"
        ],
        "main": [
          "argparse.ArgumentParser",
          "len",
          "parser.add_argument",
          "print",
          "result.get",
          "parser.parse_args",
          "manager.run_sync",
          "GitHubSyncManager"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "json",
        "os",
        "pathlib",
        "requests",
        "time",
        "typing"
      ],
      "hash": "1ee49d0d031a76692ccc03ff995d0a75d198818dcf2c1f625d6e9aee0828a7c9",
      "uid": "scripts.github_sync_manager",
      "uid_components": [
        "scripts",
        "scripts.github_sync_manager"
      ],
      "uid_type": "module",
      "artifact_id": "b435845e-165d-2218-9067-816eb10b2142",
      "metrics": {
        "cyclomatic_complexity": 17,
        "lines_of_code": 150,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 13,
        "test_coverage": 0.0,
        "maintainability_index": 15
      },
      "markdown_anchor": {
        "id": "scripts-github_sync_manager",
        "title": "Module: scripts.github_sync_manager",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: scripts.github_sync_manager](#scripts-github_sync_manager)",
        "html_anchor": "<a id=\"scripts-github_sync_manager\"></a>"
      }
    },
    {
      "module_id": "scripts.fix_github_script",
      "path": "scripts/fix_github_script.py",
      "category": "core",
      "module_doc": "Quick fix for GitHub issues creation script\n\u0418\u0441\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u043e\u0439 JSON \u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445",
      "functions": [
        {
          "name": "fix_json_loading",
          "docstring": "\u0418\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0443 JSON \u0434\u0430\u043d\u043d\u044b\u0445",
          "line_range": [
            11,
            42
          ],
          "parameters": [],
          "decorators": [],
          "uid": "scripts.fix_github_script.fix_json_loading",
          "uid_components": [
            "scripts",
            "scripts.fix_github_script",
            "scripts.fix_github_script.fix_json_loading"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [],
      "callgraph": {
        "fix_json_loading": [
          "f.write",
          "print",
          "open",
          "Path",
          "f.read",
          "content.replace"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "os",
        "pathlib"
      ],
      "hash": "749ea82f6bcdc68da77827b691267646be1c85f5b2c20e39d085d768c9e64d87",
      "uid": "scripts.fix_github_script",
      "uid_components": [
        "scripts",
        "scripts.fix_github_script"
      ],
      "uid_type": "module",
      "artifact_id": "00d09d4f-6a0b-3446-fae4-fab7d1876da8",
      "metrics": {
        "cyclomatic_complexity": 1,
        "lines_of_code": 10,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 4,
        "test_coverage": 0.0,
        "maintainability_index": 95
      },
      "markdown_anchor": {
        "id": "scripts-fix_github_script",
        "title": "Module: scripts.fix_github_script",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: scripts.fix_github_script](#scripts-fix_github_script)",
        "html_anchor": "<a id=\"scripts-fix_github_script\"></a>"
      }
    },
    {
      "module_id": "scripts.create_github_issues",
      "path": "scripts/create_github_issues.py",
      "category": "core",
      "module_doc": "GitHub Issues Creator for AI-Dogfooding Project\n\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 GitHub issues \u0438\u0437 \u043d\u0430\u0448\u0438\u0445 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0437\u0430\u0434\u0430\u0447",
      "functions": [
        {
          "name": "load_env_file",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            16,
            28
          ],
          "parameters": [],
          "decorators": [],
          "uid": "scripts.create_github_issues.load_env_file",
          "uid_components": [
            "scripts",
            "scripts.create_github_issues",
            "scripts.create_github_issues.load_env_file"
          ],
          "uid_type": "function"
        },
        {
          "name": "load_epics_data",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438\u0437 JSON",
          "line_range": [
            205,
            213
          ],
          "parameters": [],
          "decorators": [],
          "uid": "scripts.create_github_issues.load_epics_data",
          "uid_components": [
            "scripts",
            "scripts.create_github_issues",
            "scripts.create_github_issues.load_epics_data"
          ],
          "uid_type": "function"
        },
        {
          "name": "main",
          "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f issues",
          "line_range": [
            215,
            252
          ],
          "parameters": [],
          "decorators": [],
          "uid": "scripts.create_github_issues.main",
          "uid_components": [
            "scripts",
            "scripts.create_github_issues",
            "scripts.create_github_issues.main"
          ],
          "uid_type": "function"
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            34,
            43
          ],
          "parameters": [
            "self",
            "repo_owner",
            "repo_name",
            "token",
            "use_cli"
          ],
          "decorators": [],
          "uid": "scripts.create_github_issues.__init__",
          "uid_components": [
            "scripts",
            "scripts.create_github_issues",
            "scripts.create_github_issues.__init__"
          ],
          "uid_type": "function"
        },
        {
          "name": "create_epic_issue",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u044d\u043f\u0438\u043a\u0430",
          "line_range": [
            45,
            83
          ],
          "parameters": [
            "self",
            "epic_data"
          ],
          "decorators": [],
          "uid": "scripts.create_github_issues.create_epic_issue",
          "uid_components": [
            "scripts",
            "scripts.create_github_issues",
            "scripts.create_github_issues.create_epic_issue"
          ],
          "uid_type": "function"
        },
        {
          "name": "create_task_issue",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            85,
            128
          ],
          "parameters": [
            "self",
            "task_data",
            "epic_number"
          ],
          "decorators": [],
          "uid": "scripts.create_github_issues.create_task_issue",
          "uid_components": [
            "scripts",
            "scripts.create_github_issues",
            "scripts.create_github_issues.create_task_issue"
          ],
          "uid_type": "function"
        },
        {
          "name": "_create_issue_via_api",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub API",
          "line_range": [
            130,
            150
          ],
          "parameters": [
            "self",
            "title",
            "body",
            "labels"
          ],
          "decorators": [],
          "uid": "scripts.create_github_issues._create_issue_via_api",
          "uid_components": [
            "scripts",
            "scripts.create_github_issues",
            "scripts.create_github_issues._create_issue_via_api"
          ],
          "uid_type": "function"
        },
        {
          "name": "_create_issue_via_cli",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub CLI",
          "line_range": [
            152,
            186
          ],
          "parameters": [
            "self",
            "title",
            "body",
            "labels"
          ],
          "decorators": [],
          "uid": "scripts.create_github_issues._create_issue_via_cli",
          "uid_components": [
            "scripts",
            "scripts.create_github_issues",
            "scripts.create_github_issues._create_issue_via_cli"
          ],
          "uid_type": "function"
        },
        {
          "name": "_format_criteria",
          "docstring": "",
          "line_range": [
            188,
            189
          ],
          "parameters": [
            "self",
            "criteria"
          ],
          "decorators": [],
          "uid": "scripts.create_github_issues._format_criteria",
          "uid_components": [
            "scripts",
            "scripts.create_github_issues",
            "scripts.create_github_issues._format_criteria"
          ],
          "uid_type": "function"
        },
        {
          "name": "_format_tasks",
          "docstring": "",
          "line_range": [
            191,
            200
          ],
          "parameters": [
            "self",
            "tasks"
          ],
          "decorators": [],
          "uid": "scripts.create_github_issues._format_tasks",
          "uid_components": [
            "scripts",
            "scripts.create_github_issues",
            "scripts.create_github_issues._format_tasks"
          ],
          "uid_type": "function"
        },
        {
          "name": "_format_metrics",
          "docstring": "",
          "line_range": [
            202,
            203
          ],
          "parameters": [
            "self",
            "metrics"
          ],
          "decorators": [],
          "uid": "scripts.create_github_issues._format_metrics",
          "uid_components": [
            "scripts",
            "scripts.create_github_issues",
            "scripts.create_github_issues._format_metrics"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [
        {
          "name": "GitHubIssuesCreator",
          "docstring": "",
          "line_range": [
            33,
            203
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                34,
                43
              ],
              "parameters": [
                "self",
                "repo_owner",
                "repo_name",
                "token",
                "use_cli"
              ],
              "uid": "scripts.create_github_issues.GitHubIssuesCreator.__init__",
              "uid_components": [
                "scripts",
                "scripts.create_github_issues",
                "scripts.create_github_issues.GitHubIssuesCreator",
                "scripts.create_github_issues.GitHubIssuesCreator.__init__"
              ],
              "uid_type": "method"
            },
            {
              "name": "create_epic_issue",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u044d\u043f\u0438\u043a\u0430",
              "line_range": [
                45,
                83
              ],
              "parameters": [
                "self",
                "epic_data"
              ],
              "uid": "scripts.create_github_issues.GitHubIssuesCreator.create_epic_issue",
              "uid_components": [
                "scripts",
                "scripts.create_github_issues",
                "scripts.create_github_issues.GitHubIssuesCreator",
                "scripts.create_github_issues.GitHubIssuesCreator.create_epic_issue"
              ],
              "uid_type": "method"
            },
            {
              "name": "create_task_issue",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
              "line_range": [
                85,
                128
              ],
              "parameters": [
                "self",
                "task_data",
                "epic_number"
              ],
              "uid": "scripts.create_github_issues.GitHubIssuesCreator.create_task_issue",
              "uid_components": [
                "scripts",
                "scripts.create_github_issues",
                "scripts.create_github_issues.GitHubIssuesCreator",
                "scripts.create_github_issues.GitHubIssuesCreator.create_task_issue"
              ],
              "uid_type": "method"
            },
            {
              "name": "_create_issue_via_api",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub API",
              "line_range": [
                130,
                150
              ],
              "parameters": [
                "self",
                "title",
                "body",
                "labels"
              ],
              "uid": "scripts.create_github_issues.GitHubIssuesCreator._create_issue_via_api",
              "uid_components": [
                "scripts",
                "scripts.create_github_issues",
                "scripts.create_github_issues.GitHubIssuesCreator",
                "scripts.create_github_issues.GitHubIssuesCreator._create_issue_via_api"
              ],
              "uid_type": "method"
            },
            {
              "name": "_create_issue_via_cli",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub CLI",
              "line_range": [
                152,
                186
              ],
              "parameters": [
                "self",
                "title",
                "body",
                "labels"
              ],
              "uid": "scripts.create_github_issues.GitHubIssuesCreator._create_issue_via_cli",
              "uid_components": [
                "scripts",
                "scripts.create_github_issues",
                "scripts.create_github_issues.GitHubIssuesCreator",
                "scripts.create_github_issues.GitHubIssuesCreator._create_issue_via_cli"
              ],
              "uid_type": "method"
            },
            {
              "name": "_format_criteria",
              "docstring": "",
              "line_range": [
                188,
                189
              ],
              "parameters": [
                "self",
                "criteria"
              ],
              "uid": "scripts.create_github_issues.GitHubIssuesCreator._format_criteria",
              "uid_components": [
                "scripts",
                "scripts.create_github_issues",
                "scripts.create_github_issues.GitHubIssuesCreator",
                "scripts.create_github_issues.GitHubIssuesCreator._format_criteria"
              ],
              "uid_type": "method"
            },
            {
              "name": "_format_tasks",
              "docstring": "",
              "line_range": [
                191,
                200
              ],
              "parameters": [
                "self",
                "tasks"
              ],
              "uid": "scripts.create_github_issues.GitHubIssuesCreator._format_tasks",
              "uid_components": [
                "scripts",
                "scripts.create_github_issues",
                "scripts.create_github_issues.GitHubIssuesCreator",
                "scripts.create_github_issues.GitHubIssuesCreator._format_tasks"
              ],
              "uid_type": "method"
            },
            {
              "name": "_format_metrics",
              "docstring": "",
              "line_range": [
                202,
                203
              ],
              "parameters": [
                "self",
                "metrics"
              ],
              "uid": "scripts.create_github_issues.GitHubIssuesCreator._format_metrics",
              "uid_components": [
                "scripts",
                "scripts.create_github_issues",
                "scripts.create_github_issues.GitHubIssuesCreator",
                "scripts.create_github_issues.GitHubIssuesCreator._format_metrics"
              ],
              "uid_type": "method"
            }
          ],
          "bases": [],
          "uid": "scripts.create_github_issues.GitHubIssuesCreator",
          "uid_components": [
            "scripts",
            "scripts.create_github_issues",
            "scripts.create_github_issues.GitHubIssuesCreator"
          ],
          "uid_type": "class"
        }
      ],
      "callgraph": {
        "load_env_file": [
          "print",
          "open",
          "line.startswith",
          "Path",
          "value.strip",
          "line.strip",
          "key.strip",
          "env_file.exists",
          "line.split"
        ],
        "__init__": [],
        "create_epic_issue": [
          "self._format_criteria",
          "self._format_metrics",
          "self._create_issue_via_api",
          "self._create_issue_via_cli",
          "epic_data.get",
          "self._format_tasks"
        ],
        "create_task_issue": [
          "self._create_issue_via_api",
          "self._format_criteria",
          "self._create_issue_via_cli",
          "task_data.get"
        ],
        "_create_issue_via_api": [
          "print",
          "response.json",
          "requests.post"
        ],
        "_create_issue_via_cli": [
          "subprocess.run",
          "print",
          "open",
          "os.unlink",
          "int",
          "os.getpid",
          "f.write",
          "issue_url.split"
        ],
        "_format_criteria": [],
        "_format_tasks": [],
        "_format_metrics": [
          "metrics.items"
        ],
        "load_epics_data": [
          "print",
          "open",
          "epics_file.exists",
          "Path",
          "json.load"
        ],
        "main": [
          "GitHubIssuesCreator",
          "len",
          "print",
          "load_epics_data",
          "creator.create_task_issue",
          "os.getenv",
          "epic_data.get",
          "creator.create_epic_issue",
          "epics_data.get"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "json",
        "os",
        "pathlib",
        "requests",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": "49ba6a19e2c3aa696879c666036ca56bf5678032d3a8a1004c9c1849b87104b7",
      "uid": "scripts.create_github_issues",
      "uid_components": [
        "scripts",
        "scripts.create_github_issues"
      ],
      "uid_type": "module",
      "artifact_id": "1e8efa86-5fb7-9e0a-464e-1c216c16eb54",
      "metrics": {
        "cyclomatic_complexity": 13,
        "lines_of_code": 110,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 11,
        "test_coverage": 0.0,
        "maintainability_index": 35
      },
      "markdown_anchor": {
        "id": "scripts-create_github_issues",
        "title": "Module: scripts.create_github_issues",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: scripts.create_github_issues](#scripts-create_github_issues)",
        "html_anchor": "<a id=\"scripts-create_github_issues\"></a>"
      }
    },
    {
      "module_id": "scripts.collector",
      "path": "scripts/collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "apply_filters",
          "docstring": "",
          "line_range": [
            13,
            29
          ],
          "parameters": [
            "files",
            "filters"
          ],
          "decorators": [],
          "uid": "scripts.collector.apply_filters",
          "uid_components": [
            "scripts",
            "scripts.collector",
            "scripts.collector.apply_filters"
          ],
          "uid_type": "function"
        },
        {
          "name": "collect_files",
          "docstring": "",
          "line_range": [
            32,
            38
          ],
          "parameters": [
            "root_dir",
            "filters"
          ],
          "decorators": [],
          "uid": "scripts.collector.collect_files",
          "uid_components": [
            "scripts",
            "scripts.collector",
            "scripts.collector.collect_files"
          ],
          "uid_type": "function"
        },
        {
          "name": "generate_struct",
          "docstring": "",
          "line_range": [
            41,
            88
          ],
          "parameters": [
            "root_dir",
            "output"
          ],
          "decorators": [],
          "uid": "scripts.collector.generate_struct",
          "uid_components": [
            "scripts",
            "scripts.collector",
            "scripts.collector.generate_struct"
          ],
          "uid_type": "function"
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            91,
            92
          ],
          "parameters": [],
          "decorators": [],
          "uid": "scripts.collector.main",
          "uid_components": [
            "scripts",
            "scripts.collector",
            "scripts.collector.main"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [],
      "callgraph": {
        "apply_filters": [
          "fnmatch.fnmatch",
          "filtered.append",
          "pattern.startswith"
        ],
        "collect_files": [
          "apply_filters",
          "files.append",
          "root_dir.rglob",
          "path.relative_to",
          "path.is_file",
          "str"
        ],
        "generate_struct": [
          "collect_files",
          "len",
          "existing.get",
          "Path",
          "json.load",
          "uuid.uuid4",
          "json.dump",
          "logger.info",
          "str",
          "output_path.exists",
          "output_path.open"
        ],
        "main": [
          "generate_struct"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "logging",
        "pathlib",
        "uuid"
      ],
      "hash": "251462380e2e135880f652ce7d9e6a1483d18a1202c336f76ac3f43536505049",
      "uid": "scripts.collector",
      "uid_components": [
        "scripts",
        "scripts.collector"
      ],
      "uid_type": "module",
      "artifact_id": "996bfc6f-6c75-05e8-0194-b447db870574",
      "metrics": {
        "cyclomatic_complexity": 4,
        "lines_of_code": 40,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 6,
        "test_coverage": 0.0,
        "maintainability_index": 80
      },
      "markdown_anchor": {
        "id": "scripts-collector",
        "title": "Module: scripts.collector",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: scripts.collector](#scripts-collector)",
        "html_anchor": "<a id=\"scripts-collector\"></a>"
      }
    },
    {
      "module_id": "scripts.validate_refs",
      "path": "scripts/validate_refs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_references",
          "docstring": "",
          "line_range": [
            11,
            43
          ],
          "parameters": [],
          "decorators": [],
          "uid": "scripts.validate_refs.validate_references",
          "uid_components": [
            "scripts",
            "scripts.validate_refs",
            "scripts.validate_refs.validate_references"
          ],
          "uid_type": "function"
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            46,
            47
          ],
          "parameters": [],
          "decorators": [],
          "uid": "scripts.validate_refs.main",
          "uid_components": [
            "scripts",
            "scripts.validate_refs",
            "scripts.validate_refs.main"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_references": [
          "target_file.exists",
          "broken_links.append",
          "source_file.exists",
          "logger.warning",
          "Path",
          "json.load",
          "enumerate",
          "logger.info",
          "logger.error",
          "json.dump",
          "idea.get"
        ],
        "main": [
          "validate_references"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": "6c57e53f4e4e0afdb8e8c78f1e6d38f284721f6729a7197ff483ed29f5363607",
      "uid": "scripts.validate_refs",
      "uid_components": [
        "scripts",
        "scripts.validate_refs"
      ],
      "uid_type": "module",
      "artifact_id": "b539279d-2fef-2683-43b6-6df8b2fa8e52",
      "metrics": {
        "cyclomatic_complexity": 2,
        "lines_of_code": 20,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 4,
        "test_coverage": 0.0,
        "maintainability_index": 90
      },
      "markdown_anchor": {
        "id": "scripts-validate_refs",
        "title": "Module: scripts.validate_refs",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: scripts.validate_refs](#scripts-validate_refs)",
        "html_anchor": "<a id=\"scripts-validate_refs\"></a>"
      }
    },
    {
      "module_id": "scripts.epic_roadmap_manager",
      "path": "scripts/epic_roadmap_manager.py",
      "category": "core",
      "module_doc": "Epic Roadmap Manager - \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430\u043c\u0438 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0441\u0435\u0441\u0441\u0438\u0439\n\n\u0424\u0443\u043d\u043a\u0446\u0438\u0438:\n- \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 roadmap \u0438 \u043f\u043b\u0430\u043d\u043e\u0432\n- \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u0441\u0435\u0441\u0441\u0438\u0439\n- \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u0441 GitHub epics\n- \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u043e\u0432",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            259,
            291
          ],
          "parameters": [],
          "decorators": [],
          "uid": "scripts.epic_roadmap_manager.main",
          "uid_components": [
            "scripts",
            "scripts.epic_roadmap_manager",
            "scripts.epic_roadmap_manager.main"
          ],
          "uid_type": "function"
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            19,
            22
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.epic_roadmap_manager.__init__",
          "uid_components": [
            "scripts",
            "scripts.epic_roadmap_manager",
            "scripts.epic_roadmap_manager.__init__"
          ],
          "uid_type": "function"
        },
        {
          "name": "load_roadmap",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c roadmap \u0438\u0437 \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            24,
            31
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.epic_roadmap_manager.load_roadmap",
          "uid_components": [
            "scripts",
            "scripts.epic_roadmap_manager",
            "scripts.epic_roadmap_manager.load_roadmap"
          ],
          "uid_type": "function"
        },
        {
          "name": "save_roadmap",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c roadmap \u0432 \u0444\u0430\u0439\u043b",
          "line_range": [
            33,
            40
          ],
          "parameters": [
            "self",
            "roadmap"
          ],
          "decorators": [],
          "uid": "scripts.epic_roadmap_manager.save_roadmap",
          "uid_components": [
            "scripts",
            "scripts.epic_roadmap_manager",
            "scripts.epic_roadmap_manager.save_roadmap"
          ],
          "uid_type": "function"
        },
        {
          "name": "show_overview",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043e\u0431\u0437\u043e\u0440 roadmap",
          "line_range": [
            42,
            80
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.epic_roadmap_manager.show_overview",
          "uid_components": [
            "scripts",
            "scripts.epic_roadmap_manager",
            "scripts.epic_roadmap_manager.show_overview"
          ],
          "uid_type": "function"
        },
        {
          "name": "show_epic_details",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u044d\u043f\u0438\u043a\u0430",
          "line_range": [
            82,
            125
          ],
          "parameters": [
            "self",
            "epic_id"
          ],
          "decorators": [],
          "uid": "scripts.epic_roadmap_manager.show_epic_details",
          "uid_components": [
            "scripts",
            "scripts.epic_roadmap_manager",
            "scripts.epic_roadmap_manager.show_epic_details"
          ],
          "uid_type": "function"
        },
        {
          "name": "start_session",
          "docstring": "\u041d\u0430\u0447\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043d\u0430\u0434 \u0441\u0435\u0441\u0441\u0438\u0435\u0439",
          "line_range": [
            127,
            189
          ],
          "parameters": [
            "self",
            "epic_id",
            "session_id"
          ],
          "decorators": [],
          "uid": "scripts.epic_roadmap_manager.start_session",
          "uid_components": [
            "scripts",
            "scripts.epic_roadmap_manager",
            "scripts.epic_roadmap_manager.start_session"
          ],
          "uid_type": "function"
        },
        {
          "name": "complete_session",
          "docstring": "\u0417\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e",
          "line_range": [
            191,
            257
          ],
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": [],
          "uid": "scripts.epic_roadmap_manager.complete_session",
          "uid_components": [
            "scripts",
            "scripts.epic_roadmap_manager",
            "scripts.epic_roadmap_manager.complete_session"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [
        {
          "name": "EpicRoadmapManager",
          "docstring": "",
          "line_range": [
            18,
            257
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                19,
                22
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.epic_roadmap_manager.EpicRoadmapManager.__init__",
              "uid_components": [
                "scripts",
                "scripts.epic_roadmap_manager",
                "scripts.epic_roadmap_manager.EpicRoadmapManager",
                "scripts.epic_roadmap_manager.EpicRoadmapManager.__init__"
              ],
              "uid_type": "method"
            },
            {
              "name": "load_roadmap",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c roadmap \u0438\u0437 \u0444\u0430\u0439\u043b\u0430",
              "line_range": [
                24,
                31
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.epic_roadmap_manager.EpicRoadmapManager.load_roadmap",
              "uid_components": [
                "scripts",
                "scripts.epic_roadmap_manager",
                "scripts.epic_roadmap_manager.EpicRoadmapManager",
                "scripts.epic_roadmap_manager.EpicRoadmapManager.load_roadmap"
              ],
              "uid_type": "method"
            },
            {
              "name": "save_roadmap",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c roadmap \u0432 \u0444\u0430\u0439\u043b",
              "line_range": [
                33,
                40
              ],
              "parameters": [
                "self",
                "roadmap"
              ],
              "uid": "scripts.epic_roadmap_manager.EpicRoadmapManager.save_roadmap",
              "uid_components": [
                "scripts",
                "scripts.epic_roadmap_manager",
                "scripts.epic_roadmap_manager.EpicRoadmapManager",
                "scripts.epic_roadmap_manager.EpicRoadmapManager.save_roadmap"
              ],
              "uid_type": "method"
            },
            {
              "name": "show_overview",
              "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043e\u0431\u0437\u043e\u0440 roadmap",
              "line_range": [
                42,
                80
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.epic_roadmap_manager.EpicRoadmapManager.show_overview",
              "uid_components": [
                "scripts",
                "scripts.epic_roadmap_manager",
                "scripts.epic_roadmap_manager.EpicRoadmapManager",
                "scripts.epic_roadmap_manager.EpicRoadmapManager.show_overview"
              ],
              "uid_type": "method"
            },
            {
              "name": "show_epic_details",
              "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u044d\u043f\u0438\u043a\u0430",
              "line_range": [
                82,
                125
              ],
              "parameters": [
                "self",
                "epic_id"
              ],
              "uid": "scripts.epic_roadmap_manager.EpicRoadmapManager.show_epic_details",
              "uid_components": [
                "scripts",
                "scripts.epic_roadmap_manager",
                "scripts.epic_roadmap_manager.EpicRoadmapManager",
                "scripts.epic_roadmap_manager.EpicRoadmapManager.show_epic_details"
              ],
              "uid_type": "method"
            },
            {
              "name": "start_session",
              "docstring": "\u041d\u0430\u0447\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043d\u0430\u0434 \u0441\u0435\u0441\u0441\u0438\u0435\u0439",
              "line_range": [
                127,
                189
              ],
              "parameters": [
                "self",
                "epic_id",
                "session_id"
              ],
              "uid": "scripts.epic_roadmap_manager.EpicRoadmapManager.start_session",
              "uid_components": [
                "scripts",
                "scripts.epic_roadmap_manager",
                "scripts.epic_roadmap_manager.EpicRoadmapManager",
                "scripts.epic_roadmap_manager.EpicRoadmapManager.start_session"
              ],
              "uid_type": "method"
            },
            {
              "name": "complete_session",
              "docstring": "\u0417\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e",
              "line_range": [
                191,
                257
              ],
              "parameters": [
                "self",
                "session_id"
              ],
              "uid": "scripts.epic_roadmap_manager.EpicRoadmapManager.complete_session",
              "uid_components": [
                "scripts",
                "scripts.epic_roadmap_manager",
                "scripts.epic_roadmap_manager.EpicRoadmapManager",
                "scripts.epic_roadmap_manager.EpicRoadmapManager.complete_session"
              ],
              "uid_type": "method"
            }
          ],
          "bases": [],
          "uid": "scripts.epic_roadmap_manager.EpicRoadmapManager",
          "uid_components": [
            "scripts",
            "scripts.epic_roadmap_manager",
            "scripts.epic_roadmap_manager.EpicRoadmapManager"
          ],
          "uid_type": "class"
        }
      ],
      "callgraph": {
        "__init__": [],
        "load_roadmap": [
          "print",
          "json.load",
          "open"
        ],
        "save_roadmap": [
          "json.dump",
          "datetime.now",
          "open",
          "print"
        ],
        "show_overview": [
          "print",
          "epic.get",
          "roadmap.get",
          "stats.get",
          "epics.items",
          "self.load_roadmap"
        ],
        "show_epic_details": [
          "len",
          "print",
          "epic.get",
          "roadmap.get",
          "epic_data.get",
          "session.get",
          "self.load_roadmap"
        ],
        "start_session": [
          "self.save_roadmap",
          "print",
          "os.makedirs",
          "epic.get",
          "open",
          "roadmap.get",
          "datetime.now",
          "epic_data.get",
          "json.dump",
          "sess.get",
          "session.get",
          "self.load_roadmap"
        ],
        "complete_session": [
          "self.save_roadmap",
          "os.remove",
          "current_session.get",
          "sessions_log.append",
          "print",
          "os.makedirs",
          "open",
          "epic.get",
          "all",
          "roadmap.get",
          "json.load",
          "datetime.now",
          "json.dump",
          "sess.get",
          "session.get",
          "self.load_roadmap"
        ],
        "main": [
          "argparse.ArgumentParser",
          "parser.add_argument",
          "print",
          "manager.complete_session",
          "EpicRoadmapManager",
          "parser.parse_args",
          "manager.show_epic_details",
          "manager.start_session",
          "manager.show_overview"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "datetime",
        "json",
        "os",
        "pathlib"
      ],
      "hash": "5125fc24bf131dbbbda814a26f75ecff0e8d6cebde166de88b637ee22ac7251e",
      "uid": "scripts.epic_roadmap_manager",
      "uid_components": [
        "scripts",
        "scripts.epic_roadmap_manager"
      ],
      "uid_type": "module",
      "artifact_id": "dec553d3-c70d-2bbd-b702-a43e5b5bd24a",
      "metrics": {
        "cyclomatic_complexity": 10,
        "lines_of_code": 80,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 6,
        "test_coverage": 0.0,
        "maintainability_index": 50
      },
      "markdown_anchor": {
        "id": "scripts-epic_roadmap_manager",
        "title": "Module: scripts.epic_roadmap_manager",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: scripts.epic_roadmap_manager](#scripts-epic_roadmap_manager)",
        "html_anchor": "<a id=\"scripts-epic_roadmap_manager\"></a>"
      }
    },
    {
      "module_id": "scripts.process_926_items",
      "path": "scripts/process_926_items.py",
      "category": "core",
      "module_doc": "926 Items Processing Script - Updated Implementation\nProcesses items according to GitHub roadmap + personal management vision\nImplements all decisions from 926_items_processing_execution_plan.md",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            16,
            51
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.process_926_items.__init__",
          "uid_components": [
            "scripts",
            "scripts.process_926_items",
            "scripts.process_926_items.__init__"
          ],
          "uid_type": "function"
        },
        {
          "name": "load_comprehensive_index",
          "docstring": "Load the 926 items from comprehensive index",
          "line_range": [
            53,
            111
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.process_926_items.load_comprehensive_index",
          "uid_components": [
            "scripts",
            "scripts.process_926_items",
            "scripts.process_926_items.load_comprehensive_index"
          ],
          "uid_type": "function"
        },
        {
          "name": "calculate_confidence_score",
          "docstring": "Calculate confidence score for categorization decision",
          "line_range": [
            113,
            146
          ],
          "parameters": [
            "self",
            "item",
            "category"
          ],
          "decorators": [],
          "uid": "scripts.process_926_items.calculate_confidence_score",
          "uid_components": [
            "scripts",
            "scripts.process_926_items",
            "scripts.process_926_items.calculate_confidence_score"
          ],
          "uid_type": "function"
        },
        {
          "name": "check_t_pot_related",
          "docstring": "Enhanced T-Pot detection",
          "line_range": [
            148,
            155
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": [],
          "uid": "scripts.process_926_items.check_t_pot_related",
          "uid_components": [
            "scripts",
            "scripts.process_926_items",
            "scripts.process_926_items.check_t_pot_related"
          ],
          "uid_type": "function"
        },
        {
          "name": "check_team_implementable",
          "docstring": "Check if team can implement without architecture review",
          "line_range": [
            157,
            176
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": [],
          "uid": "scripts.process_926_items.check_team_implementable",
          "uid_components": [
            "scripts",
            "scripts.process_926_items",
            "scripts.process_926_items.check_team_implementable"
          ],
          "uid_type": "function"
        },
        {
          "name": "check_personal_vs_team_vs_business",
          "docstring": "Classify as personal/team/business",
          "line_range": [
            178,
            214
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": [],
          "uid": "scripts.process_926_items.check_personal_vs_team_vs_business",
          "uid_components": [
            "scripts",
            "scripts.process_926_items",
            "scripts.process_926_items.check_personal_vs_team_vs_business"
          ],
          "uid_type": "function"
        },
        {
          "name": "identify_epic_candidates",
          "docstring": "Identify items that should be grouped into epics",
          "line_range": [
            216,
            233
          ],
          "parameters": [
            "self",
            "items"
          ],
          "decorators": [],
          "uid": "scripts.process_926_items.identify_epic_candidates",
          "uid_components": [
            "scripts",
            "scripts.process_926_items",
            "scripts.process_926_items.identify_epic_candidates"
          ],
          "uid_type": "function"
        },
        {
          "name": "extract_epic_name",
          "docstring": "Extract epic name from item",
          "line_range": [
            235,
            241
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": [],
          "uid": "scripts.process_926_items.extract_epic_name",
          "uid_components": [
            "scripts",
            "scripts.process_926_items",
            "scripts.process_926_items.extract_epic_name"
          ],
          "uid_type": "function"
        },
        {
          "name": "categorize_item",
          "docstring": "Main categorization logic with confidence scoring",
          "line_range": [
            243,
            278
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": [],
          "uid": "scripts.process_926_items.categorize_item",
          "uid_components": [
            "scripts",
            "scripts.process_926_items",
            "scripts.process_926_items.categorize_item"
          ],
          "uid_type": "function"
        },
        {
          "name": "find_duplicates",
          "docstring": "Enhanced duplicate detection with T-Pot special handling",
          "line_range": [
            280,
            319
          ],
          "parameters": [
            "self",
            "items"
          ],
          "decorators": [],
          "uid": "scripts.process_926_items.find_duplicates",
          "uid_components": [
            "scripts",
            "scripts.process_926_items",
            "scripts.process_926_items.find_duplicates"
          ],
          "uid_type": "function"
        },
        {
          "name": "calculate_similarity",
          "docstring": "Enhanced similarity calculation",
          "line_range": [
            321,
            342
          ],
          "parameters": [
            "self",
            "title1",
            "title2"
          ],
          "decorators": [],
          "uid": "scripts.process_926_items.calculate_similarity",
          "uid_components": [
            "scripts",
            "scripts.process_926_items",
            "scripts.process_926_items.calculate_similarity"
          ],
          "uid_type": "function"
        },
        {
          "name": "suggest_merge_strategy",
          "docstring": "Enhanced merge strategy with T-Pot consideration",
          "line_range": [
            344,
            359
          ],
          "parameters": [
            "self",
            "item1",
            "item2"
          ],
          "decorators": [],
          "uid": "scripts.process_926_items.suggest_merge_strategy",
          "uid_components": [
            "scripts",
            "scripts.process_926_items",
            "scripts.process_926_items.suggest_merge_strategy"
          ],
          "uid_type": "function"
        },
        {
          "name": "process_items",
          "docstring": "Main processing workflow implementing execution plan",
          "line_range": [
            361,
            468
          ],
          "parameters": [
            "self",
            "items"
          ],
          "decorators": [],
          "uid": "scripts.process_926_items.process_items",
          "uid_components": [
            "scripts",
            "scripts.process_926_items",
            "scripts.process_926_items.process_items"
          ],
          "uid_type": "function"
        },
        {
          "name": "save_results",
          "docstring": "Save categorized results with enhanced metadata",
          "line_range": [
            470,
            546
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.process_926_items.save_results",
          "uid_components": [
            "scripts",
            "scripts.process_926_items",
            "scripts.process_926_items.save_results"
          ],
          "uid_type": "function"
        },
        {
          "name": "get_category_description",
          "docstring": "Category descriptions per execution plan",
          "line_range": [
            548,
            562
          ],
          "parameters": [
            "self",
            "category"
          ],
          "decorators": [],
          "uid": "scripts.process_926_items.get_category_description",
          "uid_components": [
            "scripts",
            "scripts.process_926_items",
            "scripts.process_926_items.get_category_description"
          ],
          "uid_type": "function"
        },
        {
          "name": "run",
          "docstring": "Main execution workflow per execution plan",
          "line_range": [
            564,
            606
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.process_926_items.run",
          "uid_components": [
            "scripts",
            "scripts.process_926_items",
            "scripts.process_926_items.run"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [
        {
          "name": "TaskProcessor926",
          "docstring": "",
          "line_range": [
            15,
            606
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                16,
                51
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.process_926_items.TaskProcessor926.__init__",
              "uid_components": [
                "scripts",
                "scripts.process_926_items",
                "scripts.process_926_items.TaskProcessor926",
                "scripts.process_926_items.TaskProcessor926.__init__"
              ],
              "uid_type": "method"
            },
            {
              "name": "load_comprehensive_index",
              "docstring": "Load the 926 items from comprehensive index",
              "line_range": [
                53,
                111
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.process_926_items.TaskProcessor926.load_comprehensive_index",
              "uid_components": [
                "scripts",
                "scripts.process_926_items",
                "scripts.process_926_items.TaskProcessor926",
                "scripts.process_926_items.TaskProcessor926.load_comprehensive_index"
              ],
              "uid_type": "method"
            },
            {
              "name": "calculate_confidence_score",
              "docstring": "Calculate confidence score for categorization decision",
              "line_range": [
                113,
                146
              ],
              "parameters": [
                "self",
                "item",
                "category"
              ],
              "uid": "scripts.process_926_items.TaskProcessor926.calculate_confidence_score",
              "uid_components": [
                "scripts",
                "scripts.process_926_items",
                "scripts.process_926_items.TaskProcessor926",
                "scripts.process_926_items.TaskProcessor926.calculate_confidence_score"
              ],
              "uid_type": "method"
            },
            {
              "name": "check_t_pot_related",
              "docstring": "Enhanced T-Pot detection",
              "line_range": [
                148,
                155
              ],
              "parameters": [
                "self",
                "item"
              ],
              "uid": "scripts.process_926_items.TaskProcessor926.check_t_pot_related",
              "uid_components": [
                "scripts",
                "scripts.process_926_items",
                "scripts.process_926_items.TaskProcessor926",
                "scripts.process_926_items.TaskProcessor926.check_t_pot_related"
              ],
              "uid_type": "method"
            },
            {
              "name": "check_team_implementable",
              "docstring": "Check if team can implement without architecture review",
              "line_range": [
                157,
                176
              ],
              "parameters": [
                "self",
                "item"
              ],
              "uid": "scripts.process_926_items.TaskProcessor926.check_team_implementable",
              "uid_components": [
                "scripts",
                "scripts.process_926_items",
                "scripts.process_926_items.TaskProcessor926",
                "scripts.process_926_items.TaskProcessor926.check_team_implementable"
              ],
              "uid_type": "method"
            },
            {
              "name": "check_personal_vs_team_vs_business",
              "docstring": "Classify as personal/team/business",
              "line_range": [
                178,
                214
              ],
              "parameters": [
                "self",
                "item"
              ],
              "uid": "scripts.process_926_items.TaskProcessor926.check_personal_vs_team_vs_business",
              "uid_components": [
                "scripts",
                "scripts.process_926_items",
                "scripts.process_926_items.TaskProcessor926",
                "scripts.process_926_items.TaskProcessor926.check_personal_vs_team_vs_business"
              ],
              "uid_type": "method"
            },
            {
              "name": "identify_epic_candidates",
              "docstring": "Identify items that should be grouped into epics",
              "line_range": [
                216,
                233
              ],
              "parameters": [
                "self",
                "items"
              ],
              "uid": "scripts.process_926_items.TaskProcessor926.identify_epic_candidates",
              "uid_components": [
                "scripts",
                "scripts.process_926_items",
                "scripts.process_926_items.TaskProcessor926",
                "scripts.process_926_items.TaskProcessor926.identify_epic_candidates"
              ],
              "uid_type": "method"
            },
            {
              "name": "extract_epic_name",
              "docstring": "Extract epic name from item",
              "line_range": [
                235,
                241
              ],
              "parameters": [
                "self",
                "item"
              ],
              "uid": "scripts.process_926_items.TaskProcessor926.extract_epic_name",
              "uid_components": [
                "scripts",
                "scripts.process_926_items",
                "scripts.process_926_items.TaskProcessor926",
                "scripts.process_926_items.TaskProcessor926.extract_epic_name"
              ],
              "uid_type": "method"
            },
            {
              "name": "categorize_item",
              "docstring": "Main categorization logic with confidence scoring",
              "line_range": [
                243,
                278
              ],
              "parameters": [
                "self",
                "item"
              ],
              "uid": "scripts.process_926_items.TaskProcessor926.categorize_item",
              "uid_components": [
                "scripts",
                "scripts.process_926_items",
                "scripts.process_926_items.TaskProcessor926",
                "scripts.process_926_items.TaskProcessor926.categorize_item"
              ],
              "uid_type": "method"
            },
            {
              "name": "find_duplicates",
              "docstring": "Enhanced duplicate detection with T-Pot special handling",
              "line_range": [
                280,
                319
              ],
              "parameters": [
                "self",
                "items"
              ],
              "uid": "scripts.process_926_items.TaskProcessor926.find_duplicates",
              "uid_components": [
                "scripts",
                "scripts.process_926_items",
                "scripts.process_926_items.TaskProcessor926",
                "scripts.process_926_items.TaskProcessor926.find_duplicates"
              ],
              "uid_type": "method"
            },
            {
              "name": "calculate_similarity",
              "docstring": "Enhanced similarity calculation",
              "line_range": [
                321,
                342
              ],
              "parameters": [
                "self",
                "title1",
                "title2"
              ],
              "uid": "scripts.process_926_items.TaskProcessor926.calculate_similarity",
              "uid_components": [
                "scripts",
                "scripts.process_926_items",
                "scripts.process_926_items.TaskProcessor926",
                "scripts.process_926_items.TaskProcessor926.calculate_similarity"
              ],
              "uid_type": "method"
            },
            {
              "name": "suggest_merge_strategy",
              "docstring": "Enhanced merge strategy with T-Pot consideration",
              "line_range": [
                344,
                359
              ],
              "parameters": [
                "self",
                "item1",
                "item2"
              ],
              "uid": "scripts.process_926_items.TaskProcessor926.suggest_merge_strategy",
              "uid_components": [
                "scripts",
                "scripts.process_926_items",
                "scripts.process_926_items.TaskProcessor926",
                "scripts.process_926_items.TaskProcessor926.suggest_merge_strategy"
              ],
              "uid_type": "method"
            },
            {
              "name": "process_items",
              "docstring": "Main processing workflow implementing execution plan",
              "line_range": [
                361,
                468
              ],
              "parameters": [
                "self",
                "items"
              ],
              "uid": "scripts.process_926_items.TaskProcessor926.process_items",
              "uid_components": [
                "scripts",
                "scripts.process_926_items",
                "scripts.process_926_items.TaskProcessor926",
                "scripts.process_926_items.TaskProcessor926.process_items"
              ],
              "uid_type": "method"
            },
            {
              "name": "save_results",
              "docstring": "Save categorized results with enhanced metadata",
              "line_range": [
                470,
                546
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.process_926_items.TaskProcessor926.save_results",
              "uid_components": [
                "scripts",
                "scripts.process_926_items",
                "scripts.process_926_items.TaskProcessor926",
                "scripts.process_926_items.TaskProcessor926.save_results"
              ],
              "uid_type": "method"
            },
            {
              "name": "get_category_description",
              "docstring": "Category descriptions per execution plan",
              "line_range": [
                548,
                562
              ],
              "parameters": [
                "self",
                "category"
              ],
              "uid": "scripts.process_926_items.TaskProcessor926.get_category_description",
              "uid_components": [
                "scripts",
                "scripts.process_926_items",
                "scripts.process_926_items.TaskProcessor926",
                "scripts.process_926_items.TaskProcessor926.get_category_description"
              ],
              "uid_type": "method"
            },
            {
              "name": "run",
              "docstring": "Main execution workflow per execution plan",
              "line_range": [
                564,
                606
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.process_926_items.TaskProcessor926.run",
              "uid_components": [
                "scripts",
                "scripts.process_926_items",
                "scripts.process_926_items.TaskProcessor926",
                "scripts.process_926_items.TaskProcessor926.run"
              ],
              "uid_type": "method"
            }
          ],
          "bases": [],
          "uid": "scripts.process_926_items.TaskProcessor926",
          "uid_components": [
            "scripts",
            "scripts.process_926_items",
            "scripts.process_926_items.TaskProcessor926"
          ],
          "uid_type": "class"
        }
      ],
      "callgraph": {
        "__init__": [
          "datetime.now",
          "Path"
        ],
        "load_comprehensive_index": [
          "value.items",
          "len",
          "hash",
          "print",
          "isinstance",
          "open",
          "item_content.lower",
          "json.load",
          "index_path.exists",
          "seen_items.add",
          "unique_items.append",
          "str",
          "items.append",
          "item.get",
          "data.items",
          "any",
          "items.extend",
          "set"
        ],
        "calculate_confidence_score": [
          "min",
          "self.check_t_pot_related",
          "sum",
          "str",
          "item.get"
        ],
        "check_t_pot_related": [
          "str",
          "any"
        ],
        "check_team_implementable": [
          "str",
          "sum"
        ],
        "check_personal_vs_team_vs_business": [
          "str",
          "item.get",
          "max",
          "sum"
        ],
        "identify_epic_candidates": [
          "len",
          "self.extract_epic_name",
          "epic_groups.items",
          "str",
          "item.get",
          "any"
        ],
        "extract_epic_name": [
          "item.get",
          "title.split"
        ],
        "categorize_item": [
          "self.calculate_confidence_score",
          "self.check_team_implementable",
          "self.check_personal_vs_team_vs_business",
          "self.check_t_pot_related",
          "str",
          "any"
        ],
        "find_duplicates": [
          "duplicates.append",
          "self.suggest_merge_strategy",
          "self.calculate_similarity",
          "self.check_t_pot_related",
          "item.get",
          "seen_items.items"
        ],
        "calculate_similarity": [
          "len",
          "min",
          "title2.split",
          "title1.split",
          "words1.intersection",
          "words1.union",
          "set"
        ],
        "suggest_merge_strategy": [
          "item1.get",
          "item2.get",
          "len",
          "self.check_t_pot_related",
          "str"
        ],
        "process_items": [
          "self.categorize_item",
          "len",
          "low_confidence_items.append",
          "print",
          "self.extract_epic_name",
          "self.check_team_implementable",
          "processed_item.copy",
          "datetime.now",
          "str",
          "duplicate_item_ids.add",
          "self.check_t_pot_related",
          "self.find_duplicates",
          "category.startswith",
          "id",
          "any",
          "set"
        ],
        "save_results": [
          "len",
          "print",
          "open",
          "datetime.now",
          "sum",
          "self.get_category_description",
          "json.dump",
          "item.get"
        ],
        "get_category_description": [
          "descriptions.get"
        ],
        "run": [
          "self.save_results",
          "print",
          "self.process_items",
          "self.load_comprehensive_index"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "Tuple",
        "datetime",
        "json",
        "os",
        "pathlib",
        "re",
        "typing"
      ],
      "hash": "75943c116813d77b47300deeaeadb26b7ccd4a37912497bdb82871198feedcf5",
      "uid": "scripts.process_926_items",
      "uid_components": [
        "scripts",
        "scripts.process_926_items"
      ],
      "uid_type": "module",
      "artifact_id": "e640a8aa-7f4d-2248-f2d9-103fa9ea1e6b",
      "metrics": {
        "cyclomatic_complexity": 18,
        "lines_of_code": 160,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 11,
        "test_coverage": 0.0,
        "maintainability_index": 10
      },
      "markdown_anchor": {
        "id": "scripts-process_926_items",
        "title": "Module: scripts.process_926_items",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: scripts.process_926_items](#scripts-process_926_items)",
        "html_anchor": "<a id=\"scripts-process_926_items\"></a>"
      }
    },
    {
      "module_id": "scripts.session_cli",
      "path": "scripts/session_cli.py",
      "category": "core",
      "module_doc": "Session Management CLI\nAutomates session tracking, worklog updates, and session switching for llmstruct.\nPart of the comprehensive session management system.",
      "functions": [
        {
          "name": "get_current_branch",
          "docstring": "Get current git branch.",
          "line_range": [
            24,
            31
          ],
          "parameters": [],
          "decorators": [],
          "uid": "scripts.session_cli.get_current_branch",
          "uid_components": [
            "scripts",
            "scripts.session_cli",
            "scripts.session_cli.get_current_branch"
          ],
          "uid_type": "function"
        },
        {
          "name": "load_json_file",
          "docstring": "Load JSON file with error handling.",
          "line_range": [
            33,
            40
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": [],
          "uid": "scripts.session_cli.load_json_file",
          "uid_components": [
            "scripts",
            "scripts.session_cli",
            "scripts.session_cli.load_json_file"
          ],
          "uid_type": "function"
        },
        {
          "name": "save_json_file",
          "docstring": "Save JSON file with error handling.",
          "line_range": [
            42,
            51
          ],
          "parameters": [
            "file_path",
            "data"
          ],
          "decorators": [],
          "uid": "scripts.session_cli.save_json_file",
          "uid_components": [
            "scripts",
            "scripts.session_cli",
            "scripts.session_cli.save_json_file"
          ],
          "uid_type": "function"
        },
        {
          "name": "get_current_timestamp",
          "docstring": "Get current timestamp in ISO format.",
          "line_range": [
            53,
            55
          ],
          "parameters": [],
          "decorators": [],
          "uid": "scripts.session_cli.get_current_timestamp",
          "uid_components": [
            "scripts",
            "scripts.session_cli",
            "scripts.session_cli.get_current_timestamp"
          ],
          "uid_type": "function"
        },
        {
          "name": "log_event",
          "docstring": "Log an event to worklog.json.",
          "line_range": [
            57,
            88
          ],
          "parameters": [
            "event_message",
            "author"
          ],
          "decorators": [],
          "uid": "scripts.session_cli.log_event",
          "uid_components": [
            "scripts",
            "scripts.session_cli",
            "scripts.session_cli.log_event"
          ],
          "uid_type": "function"
        },
        {
          "name": "switch_session",
          "docstring": "Switch to a different session or create new one.",
          "line_range": [
            90,
            141
          ],
          "parameters": [
            "session_id"
          ],
          "decorators": [],
          "uid": "scripts.session_cli.switch_session",
          "uid_components": [
            "scripts",
            "scripts.session_cli",
            "scripts.session_cli.switch_session"
          ],
          "uid_type": "function"
        },
        {
          "name": "list_sessions",
          "docstring": "List all available sessions.",
          "line_range": [
            143,
            166
          ],
          "parameters": [],
          "decorators": [],
          "uid": "scripts.session_cli.list_sessions",
          "uid_components": [
            "scripts",
            "scripts.session_cli",
            "scripts.session_cli.list_sessions"
          ],
          "uid_type": "function"
        },
        {
          "name": "show_current_session",
          "docstring": "Show current session details.",
          "line_range": [
            168,
            183
          ],
          "parameters": [],
          "decorators": [],
          "uid": "scripts.session_cli.show_current_session",
          "uid_components": [
            "scripts",
            "scripts.session_cli",
            "scripts.session_cli.show_current_session"
          ],
          "uid_type": "function"
        },
        {
          "name": "show_worklog",
          "docstring": "Show recent worklog entries.",
          "line_range": [
            185,
            203
          ],
          "parameters": [
            "limit"
          ],
          "decorators": [],
          "uid": "scripts.session_cli.show_worklog",
          "uid_components": [
            "scripts",
            "scripts.session_cli",
            "scripts.session_cli.show_worklog"
          ],
          "uid_type": "function"
        },
        {
          "name": "main",
          "docstring": "Main CLI interface.",
          "line_range": [
            205,
            244
          ],
          "parameters": [],
          "decorators": [],
          "uid": "scripts.session_cli.main",
          "uid_components": [
            "scripts",
            "scripts.session_cli",
            "scripts.session_cli.main"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": [
            16,
            22
          ],
          "methods": [],
          "bases": [],
          "uid": "scripts.session_cli.Colors",
          "uid_components": [
            "scripts",
            "scripts.session_cli",
            "scripts.session_cli.Colors"
          ],
          "uid_type": "class"
        }
      ],
      "callgraph": {
        "get_current_branch": [
          "subprocess.run"
        ],
        "load_json_file": [
          "json.load",
          "open",
          "print"
        ],
        "save_json_file": [
          "os.makedirs",
          "json.dump",
          "open",
          "print"
        ],
        "get_current_timestamp": [
          "datetime.now"
        ],
        "log_event": [
          "load_json_file",
          "current_session.get",
          "get_current_branch",
          "get_current_timestamp",
          "print",
          "save_json_file"
        ],
        "switch_session": [
          "load_json_file",
          "get_current_branch",
          "get_current_timestamp",
          "print",
          "save_json_file",
          "log_event"
        ],
        "list_sessions": [
          "print",
          "load_json_file",
          "current_session.get"
        ],
        "show_current_session": [
          "print",
          "load_json_file",
          "current_session.get"
        ],
        "show_worklog": [
          "print",
          "load_json_file",
          "len",
          "reversed"
        ],
        "main": [
          "switch_session",
          "len",
          "print",
          "show_current_session",
          "list_sessions",
          "int",
          "show_worklog",
          "log_event"
        ]
      },
      "dependencies": [
        "Path",
        "datetime",
        "json",
        "os",
        "pathlib",
        "subprocess",
        "sys"
      ],
      "hash": "23aca9a658e60715b7fa3e4a009c3de7baebdd1eca3acae17d87938ae622cc41",
      "uid": "scripts.session_cli",
      "uid_components": [
        "scripts",
        "scripts.session_cli"
      ],
      "uid_type": "module",
      "artifact_id": "53361e7e-713f-da83-9c65-be933b6c6ba5",
      "metrics": {
        "cyclomatic_complexity": 12,
        "lines_of_code": 100,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 7,
        "test_coverage": 0.0,
        "maintainability_index": 40
      },
      "markdown_anchor": {
        "id": "scripts-session_cli",
        "title": "Module: scripts.session_cli",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: scripts.session_cli](#scripts-session_cli)",
        "html_anchor": "<a id=\"scripts-session_cli\"></a>"
      }
    },
    {
      "module_id": "scripts.validate_epics",
      "path": "scripts/validate_epics.py",
      "category": "core",
      "module_doc": "Epic Data Validator\n\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0445 \u044d\u043f\u0438\u043a\u043e\u0432 \u043f\u0435\u0440\u0435\u0434 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435\u043c GitHub issues",
      "functions": [
        {
          "name": "validate_epic_structure",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u044d\u043f\u0438\u043a\u0430",
          "line_range": [
            12,
            35
          ],
          "parameters": [
            "epic"
          ],
          "decorators": [],
          "uid": "scripts.validate_epics.validate_epic_structure",
          "uid_components": [
            "scripts",
            "scripts.validate_epics",
            "scripts.validate_epics.validate_epic_structure"
          ],
          "uid_type": "function"
        },
        {
          "name": "validate_task_structure",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            37,
            53
          ],
          "parameters": [
            "task",
            "epic_id"
          ],
          "decorators": [],
          "uid": "scripts.validate_epics.validate_task_structure",
          "uid_components": [
            "scripts",
            "scripts.validate_epics",
            "scripts.validate_epics.validate_task_structure"
          ],
          "uid_type": "function"
        },
        {
          "name": "validate_priorities",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043e\u0432",
          "line_range": [
            55,
            68
          ],
          "parameters": [
            "data"
          ],
          "decorators": [],
          "uid": "scripts.validate_epics.validate_priorities",
          "uid_components": [
            "scripts",
            "scripts.validate_epics",
            "scripts.validate_epics.validate_priorities"
          ],
          "uid_type": "function"
        },
        {
          "name": "validate_task_ids",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c ID \u0437\u0430\u0434\u0430\u0447",
          "line_range": [
            70,
            82
          ],
          "parameters": [
            "data"
          ],
          "decorators": [],
          "uid": "scripts.validate_epics.validate_task_ids",
          "uid_components": [
            "scripts",
            "scripts.validate_epics",
            "scripts.validate_epics.validate_task_ids"
          ],
          "uid_type": "function"
        },
        {
          "name": "main",
          "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438",
          "line_range": [
            84,
            131
          ],
          "parameters": [],
          "decorators": [],
          "uid": "scripts.validate_epics.main",
          "uid_components": [
            "scripts",
            "scripts.validate_epics",
            "scripts.validate_epics.main"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_epic_structure": [
          "errors.append",
          "isinstance"
        ],
        "validate_task_structure": [
          "errors.append",
          "isinstance",
          "task.get"
        ],
        "validate_priorities": [
          "errors.append",
          "epic.get",
          "data.get",
          "task.get"
        ],
        "validate_task_ids": [
          "data.get",
          "epic.get",
          "task.get",
          "errors.append",
          "seen_ids.add",
          "set"
        ],
        "main": [
          "e.get",
          "len",
          "validate_epic_structure",
          "print",
          "isinstance",
          "open",
          "all_errors.extend",
          "epics_file.exists",
          "epic.get",
          "Path",
          "validate_task_structure",
          "json.load",
          "validate_priorities",
          "validate_task_ids",
          "sum",
          "all_errors.append",
          "sys.exit"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "json",
        "pathlib",
        "sys",
        "typing"
      ],
      "hash": "43fb177eab31592c2b7c17c990f728cb1401eeba26a2e3191857ca218208a3df",
      "uid": "scripts.validate_epics",
      "uid_components": [
        "scripts",
        "scripts.validate_epics"
      ],
      "uid_type": "module",
      "artifact_id": "921b7ee9-8f4e-93e6-b17d-b8da7f76c5a6",
      "metrics": {
        "cyclomatic_complexity": 5,
        "lines_of_code": 50,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 8,
        "test_coverage": 0.0,
        "maintainability_index": 75
      },
      "markdown_anchor": {
        "id": "scripts-validate_epics",
        "title": "Module: scripts.validate_epics",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: scripts.validate_epics](#scripts-validate_epics)",
        "html_anchor": "<a id=\"scripts-validate_epics\"></a>"
      }
    },
    {
      "module_id": "scripts.export_to_github_projects",
      "path": "scripts/export_to_github_projects.py",
      "category": "core",
      "module_doc": "Export script for GitHub Projects integration\nConverts official tasks.json and ideas.json to GitHub Project cards",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            183,
            266
          ],
          "parameters": [],
          "decorators": [],
          "uid": "scripts.export_to_github_projects.main",
          "uid_components": [
            "scripts",
            "scripts.export_to_github_projects",
            "scripts.export_to_github_projects.main"
          ],
          "uid_type": "function"
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            23,
            26
          ],
          "parameters": [
            "self",
            "config_path",
            "dry_run"
          ],
          "decorators": [],
          "uid": "scripts.export_to_github_projects.__init__",
          "uid_components": [
            "scripts",
            "scripts.export_to_github_projects",
            "scripts.export_to_github_projects.__init__"
          ],
          "uid_type": "function"
        },
        {
          "name": "check_github_cli",
          "docstring": "Check if GitHub CLI is installed and authenticated",
          "line_range": [
            28,
            36
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.export_to_github_projects.check_github_cli",
          "uid_components": [
            "scripts",
            "scripts.export_to_github_projects",
            "scripts.export_to_github_projects.check_github_cli"
          ],
          "uid_type": "function"
        },
        {
          "name": "list_projects",
          "docstring": "List available GitHub Projects (via gh-projects extension)",
          "line_range": [
            38,
            55
          ],
          "parameters": [
            "self",
            "owner",
            "repo"
          ],
          "decorators": [],
          "uid": "scripts.export_to_github_projects.list_projects",
          "uid_components": [
            "scripts",
            "scripts.export_to_github_projects",
            "scripts.export_to_github_projects.list_projects"
          ],
          "uid_type": "function"
        },
        {
          "name": "create_project_item",
          "docstring": "Create a new item in GitHub Project (via gh-projects extension)\nTODO: \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 GraphQL API \u0438\u043b\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c",
          "line_range": [
            57,
            82
          ],
          "parameters": [
            "self",
            "project_number",
            "title",
            "body",
            "owner",
            "repo"
          ],
          "decorators": [],
          "uid": "scripts.export_to_github_projects.create_project_item",
          "uid_components": [
            "scripts",
            "scripts.export_to_github_projects",
            "scripts.export_to_github_projects.create_project_item"
          ],
          "uid_type": "function"
        },
        {
          "name": "export_tasks_to_project",
          "docstring": "Export tasks to GitHub Project",
          "line_range": [
            84,
            123
          ],
          "parameters": [
            "self",
            "tasks",
            "project_number",
            "owner",
            "repo"
          ],
          "decorators": [],
          "uid": "scripts.export_to_github_projects.export_tasks_to_project",
          "uid_components": [
            "scripts",
            "scripts.export_to_github_projects",
            "scripts.export_to_github_projects.export_tasks_to_project"
          ],
          "uid_type": "function"
        },
        {
          "name": "export_ideas_to_project",
          "docstring": "Export ideas to GitHub Project",
          "line_range": [
            125,
            164
          ],
          "parameters": [
            "self",
            "ideas",
            "project_number",
            "owner",
            "repo"
          ],
          "decorators": [],
          "uid": "scripts.export_to_github_projects.export_ideas_to_project",
          "uid_components": [
            "scripts",
            "scripts.export_to_github_projects",
            "scripts.export_to_github_projects.export_ideas_to_project"
          ],
          "uid_type": "function"
        },
        {
          "name": "filter_data",
          "docstring": "Filter data by status and priority",
          "line_range": [
            166,
            180
          ],
          "parameters": [
            "self",
            "data",
            "status_filter",
            "priority_filter"
          ],
          "decorators": [],
          "uid": "scripts.export_to_github_projects.filter_data",
          "uid_components": [
            "scripts",
            "scripts.export_to_github_projects",
            "scripts.export_to_github_projects.filter_data"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [
        {
          "name": "GitHubProjectsExportScript",
          "docstring": "Extended exporter with command-line interface and GitHub CLI integration",
          "line_range": [
            20,
            180
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                23,
                26
              ],
              "parameters": [
                "self",
                "config_path",
                "dry_run"
              ],
              "uid": "scripts.export_to_github_projects.GitHubProjectsExportScript.__init__",
              "uid_components": [
                "scripts",
                "scripts.export_to_github_projects",
                "scripts.export_to_github_projects.GitHubProjectsExportScript",
                "scripts.export_to_github_projects.GitHubProjectsExportScript.__init__"
              ],
              "uid_type": "method"
            },
            {
              "name": "check_github_cli",
              "docstring": "Check if GitHub CLI is installed and authenticated",
              "line_range": [
                28,
                36
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.export_to_github_projects.GitHubProjectsExportScript.check_github_cli",
              "uid_components": [
                "scripts",
                "scripts.export_to_github_projects",
                "scripts.export_to_github_projects.GitHubProjectsExportScript",
                "scripts.export_to_github_projects.GitHubProjectsExportScript.check_github_cli"
              ],
              "uid_type": "method"
            },
            {
              "name": "list_projects",
              "docstring": "List available GitHub Projects (via gh-projects extension)",
              "line_range": [
                38,
                55
              ],
              "parameters": [
                "self",
                "owner",
                "repo"
              ],
              "uid": "scripts.export_to_github_projects.GitHubProjectsExportScript.list_projects",
              "uid_components": [
                "scripts",
                "scripts.export_to_github_projects",
                "scripts.export_to_github_projects.GitHubProjectsExportScript",
                "scripts.export_to_github_projects.GitHubProjectsExportScript.list_projects"
              ],
              "uid_type": "method"
            },
            {
              "name": "create_project_item",
              "docstring": "Create a new item in GitHub Project (via gh-projects extension)\nTODO: \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 GraphQL API \u0438\u043b\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c",
              "line_range": [
                57,
                82
              ],
              "parameters": [
                "self",
                "project_number",
                "title",
                "body",
                "owner",
                "repo"
              ],
              "uid": "scripts.export_to_github_projects.GitHubProjectsExportScript.create_project_item",
              "uid_components": [
                "scripts",
                "scripts.export_to_github_projects",
                "scripts.export_to_github_projects.GitHubProjectsExportScript",
                "scripts.export_to_github_projects.GitHubProjectsExportScript.create_project_item"
              ],
              "uid_type": "method"
            },
            {
              "name": "export_tasks_to_project",
              "docstring": "Export tasks to GitHub Project",
              "line_range": [
                84,
                123
              ],
              "parameters": [
                "self",
                "tasks",
                "project_number",
                "owner",
                "repo"
              ],
              "uid": "scripts.export_to_github_projects.GitHubProjectsExportScript.export_tasks_to_project",
              "uid_components": [
                "scripts",
                "scripts.export_to_github_projects",
                "scripts.export_to_github_projects.GitHubProjectsExportScript",
                "scripts.export_to_github_projects.GitHubProjectsExportScript.export_tasks_to_project"
              ],
              "uid_type": "method"
            },
            {
              "name": "export_ideas_to_project",
              "docstring": "Export ideas to GitHub Project",
              "line_range": [
                125,
                164
              ],
              "parameters": [
                "self",
                "ideas",
                "project_number",
                "owner",
                "repo"
              ],
              "uid": "scripts.export_to_github_projects.GitHubProjectsExportScript.export_ideas_to_project",
              "uid_components": [
                "scripts",
                "scripts.export_to_github_projects",
                "scripts.export_to_github_projects.GitHubProjectsExportScript",
                "scripts.export_to_github_projects.GitHubProjectsExportScript.export_ideas_to_project"
              ],
              "uid_type": "method"
            },
            {
              "name": "filter_data",
              "docstring": "Filter data by status and priority",
              "line_range": [
                166,
                180
              ],
              "parameters": [
                "self",
                "data",
                "status_filter",
                "priority_filter"
              ],
              "uid": "scripts.export_to_github_projects.GitHubProjectsExportScript.filter_data",
              "uid_components": [
                "scripts",
                "scripts.export_to_github_projects",
                "scripts.export_to_github_projects.GitHubProjectsExportScript",
                "scripts.export_to_github_projects.GitHubProjectsExportScript.filter_data"
              ],
              "uid_type": "method"
            }
          ],
          "bases": [
            "GitHubProjectsExporter"
          ],
          "uid": "scripts.export_to_github_projects.GitHubProjectsExportScript",
          "uid_components": [
            "scripts",
            "scripts.export_to_github_projects",
            "scripts.export_to_github_projects.GitHubProjectsExportScript"
          ],
          "uid_type": "class"
        }
      ],
      "callgraph": {
        "__init__": [
          "super"
        ],
        "check_github_cli": [
          "print",
          "self._run_gh_command"
        ],
        "list_projects": [
          "json.loads",
          "print",
          "isinstance",
          "self._run_gh_command"
        ],
        "create_project_item": [
          "str",
          "print",
          "self._run_gh_command",
          "output.strip"
        ],
        "export_tasks_to_project": [
          "len",
          "print",
          "task.get",
          "self.create_project_item",
          "self.format_task_for_github"
        ],
        "export_ideas_to_project": [
          "len",
          "print",
          "self.format_idea_for_github",
          "self.create_project_item",
          "idea.get"
        ],
        "filter_data": [
          "item.get"
        ],
        "main": [
          "exporter.check_github_cli",
          "argparse.ArgumentParser",
          "parser.add_argument",
          "print",
          "exporter.load_official_data",
          "exporter._save_mapping",
          "parser.parse_args",
          "exporter.export_tasks_to_project",
          "GitHubProjectsExportScript",
          "exporter.filter_data",
          "exporter.export_ideas_to_project",
          "sys.exit"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "GitHubProjectsExporter",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "argparse",
        "datetime",
        "json",
        "llmstruct.gh_view",
        "pathlib",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": "b6b4f700d8fed14e918455d59e88d15bc3259556aad468ee3c3ea4816d710f2a",
      "uid": "scripts.export_to_github_projects",
      "uid_components": [
        "scripts",
        "scripts.export_to_github_projects"
      ],
      "uid_type": "module",
      "artifact_id": "7e970950-eb71-e9ac-4bdd-4ef4f550cf0e",
      "metrics": {
        "cyclomatic_complexity": 10,
        "lines_of_code": 80,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 15,
        "test_coverage": 0.0,
        "maintainability_index": 50
      },
      "markdown_anchor": {
        "id": "scripts-export_to_github_projects",
        "title": "Module: scripts.export_to_github_projects",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: scripts.export_to_github_projects](#scripts-export_to_github_projects)",
        "html_anchor": "<a id=\"scripts-export_to_github_projects\"></a>"
      }
    },
    {
      "module_id": "scripts.validate_json",
      "path": "scripts/validate_json.py",
      "category": "core",
      "module_doc": "JSON Validation Script\nValidates JSON files against their respective schemas.",
      "functions": [
        {
          "name": "load_json",
          "docstring": "Load JSON file with error handling.",
          "line_range": [
            13,
            23
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": [],
          "uid": "scripts.validate_json.load_json",
          "uid_components": [
            "scripts",
            "scripts.validate_json",
            "scripts.validate_json.load_json"
          ],
          "uid_type": "function"
        },
        {
          "name": "validate_json",
          "docstring": "Validate a JSON file against a schema.",
          "line_range": [
            26,
            49
          ],
          "parameters": [
            "file_path",
            "schema_path"
          ],
          "decorators": [],
          "uid": "scripts.validate_json.validate_json",
          "uid_components": [
            "scripts",
            "scripts.validate_json",
            "scripts.validate_json.validate_json"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json": [
          "json.load",
          "open",
          "print"
        ],
        "validate_json": [
          "Draft7Validator",
          "validator.validate",
          "print",
          "Path",
          "load_json",
          "str"
        ]
      },
      "dependencies": [
        "Draft7Validator",
        "Path",
        "ValidationError",
        "json",
        "jsonschema",
        "pathlib",
        "sys",
        "validate"
      ],
      "hash": "0d360b788079e8804f864e0cef5eb33006fb4dbae00eaaea95ef0d692e79640d",
      "uid": "scripts.validate_json",
      "uid_components": [
        "scripts",
        "scripts.validate_json"
      ],
      "uid_type": "module",
      "artifact_id": "67cc7277-2213-b604-eec5-96bfd9260be1",
      "metrics": {
        "cyclomatic_complexity": 2,
        "lines_of_code": 20,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 8,
        "test_coverage": 0.0,
        "maintainability_index": 90
      },
      "markdown_anchor": {
        "id": "scripts-validate_json",
        "title": "Module: scripts.validate_json",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: scripts.validate_json](#scripts-validate_json)",
        "html_anchor": "<a id=\"scripts-validate_json\"></a>"
      }
    },
    {
      "module_id": "scripts.create_comprehensive_index",
      "path": "scripts/create_comprehensive_index.py",
      "category": "core",
      "module_doc": "Comprehensive Project Index Creator\nScans ALL project directories for tasks, ideas, sessions, and concepts.\nProvides complete visibility into project state and unaccounted innovations.",
      "functions": [
        {
          "name": "main",
          "docstring": "Main execution function.",
          "line_range": [
            714,
            735
          ],
          "parameters": [],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index.main",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index.main"
          ],
          "uid_type": "function"
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            45,
            58
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index.__init__",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index.__init__"
          ],
          "uid_type": "function"
        },
        {
          "name": "_init_patterns",
          "docstring": "Initialize comprehensive extraction patterns.",
          "line_range": [
            60,
            92
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._init_patterns",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._init_patterns"
          ],
          "uid_type": "function"
        },
        {
          "name": "scan_all_directories",
          "docstring": "Scan all configured directories comprehensively.",
          "line_range": [
            94,
            111
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index.scan_all_directories",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index.scan_all_directories"
          ],
          "uid_type": "function"
        },
        {
          "name": "_scan_directory",
          "docstring": "Scan a specific directory according to its configuration.",
          "line_range": [
            113,
            127
          ],
          "parameters": [
            "self",
            "directory",
            "config"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._scan_directory",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._scan_directory"
          ],
          "uid_type": "function"
        },
        {
          "name": "_scan_root_files",
          "docstring": "Scan root-level files.",
          "line_range": [
            129,
            133
          ],
          "parameters": [
            "self",
            "config"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._scan_root_files",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._scan_root_files"
          ],
          "uid_type": "function"
        },
        {
          "name": "_should_scan_file",
          "docstring": "Check if file should be scanned based on extension.",
          "line_range": [
            135,
            137
          ],
          "parameters": [
            "self",
            "file_path",
            "allowed_types"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._should_scan_file",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._should_scan_file"
          ],
          "uid_type": "function"
        },
        {
          "name": "_scan_file",
          "docstring": "Scan individual file for project items.",
          "line_range": [
            139,
            152
          ],
          "parameters": [
            "self",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._scan_file",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._scan_file"
          ],
          "uid_type": "function"
        },
        {
          "name": "_extract_from_text",
          "docstring": "Extract items from text/markdown files.",
          "line_range": [
            154,
            206
          ],
          "parameters": [
            "self",
            "file_path",
            "content",
            "source_dir",
            "priority"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._extract_from_text",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._extract_from_text"
          ],
          "uid_type": "function"
        },
        {
          "name": "_extract_from_json",
          "docstring": "Extract items from JSON files.",
          "line_range": [
            208,
            225
          ],
          "parameters": [
            "self",
            "file_path",
            "content",
            "source_dir",
            "priority"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._extract_from_json",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._extract_from_json"
          ],
          "uid_type": "function"
        },
        {
          "name": "_create_item_from_match",
          "docstring": "Create ProjectItem from regex match.",
          "line_range": [
            227,
            249
          ],
          "parameters": [
            "self",
            "match",
            "content",
            "file_path",
            "item_type",
            "source_dir",
            "priority"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._create_item_from_match",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._create_item_from_match"
          ],
          "uid_type": "function"
        },
        {
          "name": "_create_checkbox_item",
          "docstring": "Create ProjectItem from checkbox match.",
          "line_range": [
            251,
            274
          ],
          "parameters": [
            "self",
            "match",
            "content",
            "file_path",
            "item_type",
            "source_dir",
            "priority"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._create_checkbox_item",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._create_checkbox_item"
          ],
          "uid_type": "function"
        },
        {
          "name": "_create_simple_item",
          "docstring": "Create simple ProjectItem.",
          "line_range": [
            276,
            297
          ],
          "parameters": [
            "self",
            "title",
            "content",
            "file_path",
            "item_type",
            "source_dir",
            "priority",
            "position"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._create_simple_item",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._create_simple_item"
          ],
          "uid_type": "function"
        },
        {
          "name": "_detect_status",
          "docstring": "Detect item status from surrounding content.",
          "line_range": [
            299,
            308
          ],
          "parameters": [
            "self",
            "content",
            "position"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._detect_status",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._detect_status"
          ],
          "uid_type": "function"
        },
        {
          "name": "_detect_priority",
          "docstring": "Detect item priority from surrounding content.",
          "line_range": [
            310,
            319
          ],
          "parameters": [
            "self",
            "content",
            "position",
            "default"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._detect_priority",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._detect_priority"
          ],
          "uid_type": "function"
        },
        {
          "name": "_assess_strategic_value",
          "docstring": "Assess strategic value of item.",
          "line_range": [
            321,
            330
          ],
          "parameters": [
            "self",
            "title",
            "content"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._assess_strategic_value",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._assess_strategic_value"
          ],
          "uid_type": "function"
        },
        {
          "name": "_extract_context",
          "docstring": "Extract context around position.",
          "line_range": [
            332,
            336
          ],
          "parameters": [
            "self",
            "content",
            "position",
            "length"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._extract_context",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._extract_context"
          ],
          "uid_type": "function"
        },
        {
          "name": "_detect_category",
          "docstring": "Detect item category.",
          "line_range": [
            338,
            351
          ],
          "parameters": [
            "self",
            "title",
            "content"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._detect_category",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._detect_category"
          ],
          "uid_type": "function"
        },
        {
          "name": "_estimate_effort",
          "docstring": "Estimate effort required.",
          "line_range": [
            353,
            362
          ],
          "parameters": [
            "self",
            "title",
            "content"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._estimate_effort",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._estimate_effort"
          ],
          "uid_type": "function"
        },
        {
          "name": "_extract_tags",
          "docstring": "Extract relevant tags.",
          "line_range": [
            364,
            378
          ],
          "parameters": [
            "self",
            "title",
            "content",
            "source_dir"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._extract_tags",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._extract_tags"
          ],
          "uid_type": "function"
        },
        {
          "name": "_is_noise_checkbox",
          "docstring": "Check if checkbox is noise (navigation, etc).",
          "line_range": [
            380,
            384
          ],
          "parameters": [
            "self",
            "text"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._is_noise_checkbox",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._is_noise_checkbox"
          ],
          "uid_type": "function"
        },
        {
          "name": "_parse_json_files",
          "docstring": "Parse structured JSON files for existing data.",
          "line_range": [
            386,
            402
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._parse_json_files",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._parse_json_files"
          ],
          "uid_type": "function"
        },
        {
          "name": "_process_structured_json",
          "docstring": "Process structured JSON data.",
          "line_range": [
            404,
            419
          ],
          "parameters": [
            "self",
            "data",
            "file_path"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._process_structured_json",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._process_structured_json"
          ],
          "uid_type": "function"
        },
        {
          "name": "_add_json_item",
          "docstring": "Add item from JSON structure.",
          "line_range": [
            421,
            441
          ],
          "parameters": [
            "self",
            "item",
            "file_path",
            "item_type"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._add_json_item",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._add_json_item"
          ],
          "uid_type": "function"
        },
        {
          "name": "_assess_json_strategic_value",
          "docstring": "Assess strategic value from JSON item.",
          "line_range": [
            443,
            450
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._assess_json_strategic_value",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._assess_json_strategic_value"
          ],
          "uid_type": "function"
        },
        {
          "name": "_extract_innovation_concepts",
          "docstring": "Extract innovation concepts from content.",
          "line_range": [
            452,
            482
          ],
          "parameters": [
            "self",
            "file_path",
            "content",
            "source_dir",
            "priority"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._extract_innovation_concepts",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._extract_innovation_concepts"
          ],
          "uid_type": "function"
        },
        {
          "name": "_enhance_items",
          "docstring": "Post-process items to enhance metadata and find relationships.",
          "line_range": [
            484,
            501
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._enhance_items",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._enhance_items"
          ],
          "uid_type": "function"
        },
        {
          "name": "_find_related_items",
          "docstring": "Find related items based on content similarity.",
          "line_range": [
            503,
            517
          ],
          "parameters": [
            "self",
            "item",
            "id_map",
            "title_map"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._find_related_items",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._find_related_items"
          ],
          "uid_type": "function"
        },
        {
          "name": "generate_comprehensive_report",
          "docstring": "Generate comprehensive analysis report.",
          "line_range": [
            519,
            561
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index.generate_comprehensive_report",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index.generate_comprehensive_report"
          ],
          "uid_type": "function"
        },
        {
          "name": "save_comprehensive_index",
          "docstring": "Save comprehensive index and reports.",
          "line_range": [
            563,
            582
          ],
          "parameters": [
            "self",
            "output_dir"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index.save_comprehensive_index",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index.save_comprehensive_index"
          ],
          "uid_type": "function"
        },
        {
          "name": "_generate_analysis_report",
          "docstring": "Generate human-readable analysis report.",
          "line_range": [
            584,
            658
          ],
          "parameters": [
            "self",
            "report"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._generate_analysis_report",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._generate_analysis_report"
          ],
          "uid_type": "function"
        },
        {
          "name": "_format_dict",
          "docstring": "Format dictionary for markdown display.",
          "line_range": [
            660,
            662
          ],
          "parameters": [
            "self",
            "d"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._format_dict",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._format_dict"
          ],
          "uid_type": "function"
        },
        {
          "name": "_format_items_list",
          "docstring": "Format items list for markdown display.",
          "line_range": [
            664,
            677
          ],
          "parameters": [
            "self",
            "items"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._format_items_list",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._format_items_list"
          ],
          "uid_type": "function"
        },
        {
          "name": "_extract_json_tasks",
          "docstring": "Extract tasks from JSON tasks array.",
          "line_range": [
            679,
            684
          ],
          "parameters": [
            "self",
            "tasks_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._extract_json_tasks",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._extract_json_tasks"
          ],
          "uid_type": "function"
        },
        {
          "name": "_extract_json_ideas",
          "docstring": "Extract ideas from JSON ideas array.",
          "line_range": [
            686,
            691
          ],
          "parameters": [
            "self",
            "ideas_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._extract_json_ideas",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._extract_json_ideas"
          ],
          "uid_type": "function"
        },
        {
          "name": "_extract_json_sessions",
          "docstring": "Extract sessions from JSON sessions array.",
          "line_range": [
            693,
            698
          ],
          "parameters": [
            "self",
            "sessions_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._extract_json_sessions",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._extract_json_sessions"
          ],
          "uid_type": "function"
        },
        {
          "name": "_extract_json_array",
          "docstring": "Extract items from JSON array.",
          "line_range": [
            700,
            711
          ],
          "parameters": [
            "self",
            "array_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": [],
          "uid": "scripts.create_comprehensive_index._extract_json_array",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index._extract_json_array"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [
        {
          "name": "ProjectItem",
          "docstring": "Unified representation of any project item (task, idea, session, concept).",
          "line_range": [
            22,
            39
          ],
          "methods": [],
          "bases": [],
          "uid": "scripts.create_comprehensive_index.ProjectItem",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index.ProjectItem"
          ],
          "uid_type": "class"
        },
        {
          "name": "ComprehensiveIndexer",
          "docstring": "Comprehensive indexer for all project content.",
          "line_range": [
            42,
            711
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                45,
                58
              ],
              "parameters": [
                "self",
                "project_root"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer.__init__",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer.__init__"
              ],
              "uid_type": "method"
            },
            {
              "name": "_init_patterns",
              "docstring": "Initialize comprehensive extraction patterns.",
              "line_range": [
                60,
                92
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._init_patterns",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._init_patterns"
              ],
              "uid_type": "method"
            },
            {
              "name": "scan_all_directories",
              "docstring": "Scan all configured directories comprehensively.",
              "line_range": [
                94,
                111
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer.scan_all_directories",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer.scan_all_directories"
              ],
              "uid_type": "method"
            },
            {
              "name": "_scan_directory",
              "docstring": "Scan a specific directory according to its configuration.",
              "line_range": [
                113,
                127
              ],
              "parameters": [
                "self",
                "directory",
                "config"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._scan_directory",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._scan_directory"
              ],
              "uid_type": "method"
            },
            {
              "name": "_scan_root_files",
              "docstring": "Scan root-level files.",
              "line_range": [
                129,
                133
              ],
              "parameters": [
                "self",
                "config"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._scan_root_files",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._scan_root_files"
              ],
              "uid_type": "method"
            },
            {
              "name": "_should_scan_file",
              "docstring": "Check if file should be scanned based on extension.",
              "line_range": [
                135,
                137
              ],
              "parameters": [
                "self",
                "file_path",
                "allowed_types"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._should_scan_file",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._should_scan_file"
              ],
              "uid_type": "method"
            },
            {
              "name": "_scan_file",
              "docstring": "Scan individual file for project items.",
              "line_range": [
                139,
                152
              ],
              "parameters": [
                "self",
                "file_path",
                "source_dir",
                "priority"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._scan_file",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._scan_file"
              ],
              "uid_type": "method"
            },
            {
              "name": "_extract_from_text",
              "docstring": "Extract items from text/markdown files.",
              "line_range": [
                154,
                206
              ],
              "parameters": [
                "self",
                "file_path",
                "content",
                "source_dir",
                "priority"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._extract_from_text",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._extract_from_text"
              ],
              "uid_type": "method"
            },
            {
              "name": "_extract_from_json",
              "docstring": "Extract items from JSON files.",
              "line_range": [
                208,
                225
              ],
              "parameters": [
                "self",
                "file_path",
                "content",
                "source_dir",
                "priority"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._extract_from_json",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._extract_from_json"
              ],
              "uid_type": "method"
            },
            {
              "name": "_create_item_from_match",
              "docstring": "Create ProjectItem from regex match.",
              "line_range": [
                227,
                249
              ],
              "parameters": [
                "self",
                "match",
                "content",
                "file_path",
                "item_type",
                "source_dir",
                "priority"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._create_item_from_match",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._create_item_from_match"
              ],
              "uid_type": "method"
            },
            {
              "name": "_create_checkbox_item",
              "docstring": "Create ProjectItem from checkbox match.",
              "line_range": [
                251,
                274
              ],
              "parameters": [
                "self",
                "match",
                "content",
                "file_path",
                "item_type",
                "source_dir",
                "priority"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._create_checkbox_item",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._create_checkbox_item"
              ],
              "uid_type": "method"
            },
            {
              "name": "_create_simple_item",
              "docstring": "Create simple ProjectItem.",
              "line_range": [
                276,
                297
              ],
              "parameters": [
                "self",
                "title",
                "content",
                "file_path",
                "item_type",
                "source_dir",
                "priority",
                "position"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._create_simple_item",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._create_simple_item"
              ],
              "uid_type": "method"
            },
            {
              "name": "_detect_status",
              "docstring": "Detect item status from surrounding content.",
              "line_range": [
                299,
                308
              ],
              "parameters": [
                "self",
                "content",
                "position"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._detect_status",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._detect_status"
              ],
              "uid_type": "method"
            },
            {
              "name": "_detect_priority",
              "docstring": "Detect item priority from surrounding content.",
              "line_range": [
                310,
                319
              ],
              "parameters": [
                "self",
                "content",
                "position",
                "default"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._detect_priority",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._detect_priority"
              ],
              "uid_type": "method"
            },
            {
              "name": "_assess_strategic_value",
              "docstring": "Assess strategic value of item.",
              "line_range": [
                321,
                330
              ],
              "parameters": [
                "self",
                "title",
                "content"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._assess_strategic_value",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._assess_strategic_value"
              ],
              "uid_type": "method"
            },
            {
              "name": "_extract_context",
              "docstring": "Extract context around position.",
              "line_range": [
                332,
                336
              ],
              "parameters": [
                "self",
                "content",
                "position",
                "length"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._extract_context",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._extract_context"
              ],
              "uid_type": "method"
            },
            {
              "name": "_detect_category",
              "docstring": "Detect item category.",
              "line_range": [
                338,
                351
              ],
              "parameters": [
                "self",
                "title",
                "content"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._detect_category",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._detect_category"
              ],
              "uid_type": "method"
            },
            {
              "name": "_estimate_effort",
              "docstring": "Estimate effort required.",
              "line_range": [
                353,
                362
              ],
              "parameters": [
                "self",
                "title",
                "content"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._estimate_effort",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._estimate_effort"
              ],
              "uid_type": "method"
            },
            {
              "name": "_extract_tags",
              "docstring": "Extract relevant tags.",
              "line_range": [
                364,
                378
              ],
              "parameters": [
                "self",
                "title",
                "content",
                "source_dir"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._extract_tags",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._extract_tags"
              ],
              "uid_type": "method"
            },
            {
              "name": "_is_noise_checkbox",
              "docstring": "Check if checkbox is noise (navigation, etc).",
              "line_range": [
                380,
                384
              ],
              "parameters": [
                "self",
                "text"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._is_noise_checkbox",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._is_noise_checkbox"
              ],
              "uid_type": "method"
            },
            {
              "name": "_parse_json_files",
              "docstring": "Parse structured JSON files for existing data.",
              "line_range": [
                386,
                402
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._parse_json_files",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._parse_json_files"
              ],
              "uid_type": "method"
            },
            {
              "name": "_process_structured_json",
              "docstring": "Process structured JSON data.",
              "line_range": [
                404,
                419
              ],
              "parameters": [
                "self",
                "data",
                "file_path"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._process_structured_json",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._process_structured_json"
              ],
              "uid_type": "method"
            },
            {
              "name": "_add_json_item",
              "docstring": "Add item from JSON structure.",
              "line_range": [
                421,
                441
              ],
              "parameters": [
                "self",
                "item",
                "file_path",
                "item_type"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._add_json_item",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._add_json_item"
              ],
              "uid_type": "method"
            },
            {
              "name": "_assess_json_strategic_value",
              "docstring": "Assess strategic value from JSON item.",
              "line_range": [
                443,
                450
              ],
              "parameters": [
                "self",
                "item"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._assess_json_strategic_value",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._assess_json_strategic_value"
              ],
              "uid_type": "method"
            },
            {
              "name": "_extract_innovation_concepts",
              "docstring": "Extract innovation concepts from content.",
              "line_range": [
                452,
                482
              ],
              "parameters": [
                "self",
                "file_path",
                "content",
                "source_dir",
                "priority"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._extract_innovation_concepts",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._extract_innovation_concepts"
              ],
              "uid_type": "method"
            },
            {
              "name": "_enhance_items",
              "docstring": "Post-process items to enhance metadata and find relationships.",
              "line_range": [
                484,
                501
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._enhance_items",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._enhance_items"
              ],
              "uid_type": "method"
            },
            {
              "name": "_find_related_items",
              "docstring": "Find related items based on content similarity.",
              "line_range": [
                503,
                517
              ],
              "parameters": [
                "self",
                "item",
                "id_map",
                "title_map"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._find_related_items",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._find_related_items"
              ],
              "uid_type": "method"
            },
            {
              "name": "generate_comprehensive_report",
              "docstring": "Generate comprehensive analysis report.",
              "line_range": [
                519,
                561
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer.generate_comprehensive_report",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer.generate_comprehensive_report"
              ],
              "uid_type": "method"
            },
            {
              "name": "save_comprehensive_index",
              "docstring": "Save comprehensive index and reports.",
              "line_range": [
                563,
                582
              ],
              "parameters": [
                "self",
                "output_dir"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer.save_comprehensive_index",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer.save_comprehensive_index"
              ],
              "uid_type": "method"
            },
            {
              "name": "_generate_analysis_report",
              "docstring": "Generate human-readable analysis report.",
              "line_range": [
                584,
                658
              ],
              "parameters": [
                "self",
                "report"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._generate_analysis_report",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._generate_analysis_report"
              ],
              "uid_type": "method"
            },
            {
              "name": "_format_dict",
              "docstring": "Format dictionary for markdown display.",
              "line_range": [
                660,
                662
              ],
              "parameters": [
                "self",
                "d"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._format_dict",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._format_dict"
              ],
              "uid_type": "method"
            },
            {
              "name": "_format_items_list",
              "docstring": "Format items list for markdown display.",
              "line_range": [
                664,
                677
              ],
              "parameters": [
                "self",
                "items"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._format_items_list",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._format_items_list"
              ],
              "uid_type": "method"
            },
            {
              "name": "_extract_json_tasks",
              "docstring": "Extract tasks from JSON tasks array.",
              "line_range": [
                679,
                684
              ],
              "parameters": [
                "self",
                "tasks_data",
                "file_path",
                "source_dir",
                "priority"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._extract_json_tasks",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._extract_json_tasks"
              ],
              "uid_type": "method"
            },
            {
              "name": "_extract_json_ideas",
              "docstring": "Extract ideas from JSON ideas array.",
              "line_range": [
                686,
                691
              ],
              "parameters": [
                "self",
                "ideas_data",
                "file_path",
                "source_dir",
                "priority"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._extract_json_ideas",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._extract_json_ideas"
              ],
              "uid_type": "method"
            },
            {
              "name": "_extract_json_sessions",
              "docstring": "Extract sessions from JSON sessions array.",
              "line_range": [
                693,
                698
              ],
              "parameters": [
                "self",
                "sessions_data",
                "file_path",
                "source_dir",
                "priority"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._extract_json_sessions",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._extract_json_sessions"
              ],
              "uid_type": "method"
            },
            {
              "name": "_extract_json_array",
              "docstring": "Extract items from JSON array.",
              "line_range": [
                700,
                711
              ],
              "parameters": [
                "self",
                "array_data",
                "file_path",
                "source_dir",
                "priority"
              ],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._extract_json_array",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer",
                "scripts.create_comprehensive_index.ComprehensiveIndexer._extract_json_array"
              ],
              "uid_type": "method"
            }
          ],
          "bases": [],
          "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index",
            "scripts.create_comprehensive_index.ComprehensiveIndexer"
          ],
          "uid_type": "class"
        }
      ],
      "callgraph": {
        "__init__": [
          "self._init_patterns",
          "Path"
        ],
        "_init_patterns": [
          "re.compile"
        ],
        "scan_all_directories": [
          "self._enhance_items",
          "len",
          "self._parse_json_files",
          "self._scan_directory",
          "logger.info",
          "self._scan_root_files"
        ],
        "_scan_directory": [
          "dir_path.glob",
          "self._should_scan_file",
          "logger.warning",
          "file_path.is_file",
          "logger.info",
          "dir_path.exists",
          "self._scan_file"
        ],
        "_scan_root_files": [
          "self._should_scan_file",
          "file_path.is_file",
          "self._scan_file"
        ],
        "_should_scan_file": [],
        "_scan_file": [
          "open",
          "self._extract_from_text",
          "f.read",
          "logger.error",
          "self._extract_from_json"
        ],
        "_extract_from_text": [
          "self._create_item_from_match",
          "self._extract_innovation_concepts",
          "self._create_simple_item",
          "self._is_noise_checkbox",
          "match.start",
          "self._create_checkbox_item",
          "match.group"
        ],
        "_extract_from_json": [
          "self._extract_json_ideas",
          "self._extract_json_array",
          "json.loads",
          "self._extract_json_sessions",
          "isinstance",
          "logger.warning",
          "self._extract_json_tasks"
        ],
        "_create_item_from_match": [
          "title.strip",
          "self._extract_context",
          "self._extract_tags",
          "self._estimate_effort",
          "datetime.now",
          "self._detect_priority",
          "ProjectItem",
          "self._assess_strategic_value",
          "self._detect_category",
          "str",
          "match.start",
          "self._detect_status",
          "match.group"
        ],
        "_create_checkbox_item": [
          "self._extract_context",
          "self._extract_tags",
          "self._estimate_effort",
          "datetime.now",
          "self._detect_priority",
          "ProjectItem",
          "self._assess_strategic_value",
          "self._detect_category",
          "str",
          "match.start",
          "match.group"
        ],
        "_create_simple_item": [
          "title.strip",
          "self._extract_context",
          "datetime.now",
          "ProjectItem",
          "str"
        ],
        "_detect_status": [
          "max"
        ],
        "_detect_priority": [
          "max"
        ],
        "_assess_strategic_value": [],
        "_extract_context": [
          "max",
          "len",
          "min"
        ],
        "_detect_category": [
          "title.lower",
          "any"
        ],
        "_estimate_effort": [
          "any"
        ],
        "_extract_tags": [
          "source_dir.replace",
          "tags.append",
          "title.lower"
        ],
        "_is_noise_checkbox": [
          "text.strip",
          "text.lower",
          "any",
          "len"
        ],
        "_parse_json_files": [
          "open",
          "self._process_structured_json",
          "file_path.exists",
          "json.load",
          "logger.error"
        ],
        "_process_structured_json": [
          "isinstance",
          "self._add_json_item"
        ],
        "_add_json_item": [
          "self._assess_json_strategic_value",
          "len",
          "datetime.now",
          "ProjectItem",
          "str",
          "item.get"
        ],
        "_assess_json_strategic_value": [
          "item.get"
        ],
        "_extract_innovation_concepts": [
          "len",
          "self._extract_context",
          "innovation_lines.append",
          "content.split",
          "content.find",
          "enumerate",
          "source_dir.replace",
          "datetime.now",
          "ProjectItem",
          "str",
          "line.strip"
        ],
        "_enhance_items": [
          "re.sub",
          "logger.info",
          "self._find_related_items"
        ],
        "_find_related_items": [
          "re.findall",
          "related.append",
          "ref_type.upper"
        ],
        "generate_comprehensive_report": [
          "by_type.get",
          "by_strategic_value.get",
          "by_status.get",
          "len",
          "datetime.now",
          "by_priority.get",
          "by_source.get",
          "asdict"
        ],
        "save_comprehensive_index": [
          "self.generate_comprehensive_report",
          "len",
          "os.makedirs",
          "f.write",
          "open",
          "logger.info",
          "json.dump",
          "self._generate_analysis_report"
        ],
        "_generate_analysis_report": [
          "self._format_items_list",
          "self._format_dict",
          "len"
        ],
        "_format_dict": [
          "d.items",
          "sorted"
        ],
        "_format_items_list": [
          "result.append"
        ],
        "_extract_json_tasks": [
          "isinstance",
          "self._add_json_item"
        ],
        "_extract_json_ideas": [
          "isinstance",
          "self._add_json_item"
        ],
        "_extract_json_sessions": [
          "isinstance",
          "self._add_json_item"
        ],
        "_extract_json_array": [
          "str",
          "isinstance",
          "self._add_json_item"
        ],
        "main": [
          "by_strategic.get",
          "len",
          "print",
          "ComprehensiveIndexer",
          "indexer.scan_all_directories",
          "logger.info",
          "indexer.save_comprehensive_index"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "Set",
        "asdict",
        "dataclass",
        "dataclasses",
        "datetime",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "typing"
      ],
      "hash": "3de71f291650a50e7e3c04fc660a7c31d909a1f929d375ec5324f909c0a81c97",
      "uid": "scripts.create_comprehensive_index",
      "uid_components": [
        "scripts",
        "scripts.create_comprehensive_index"
      ],
      "uid_type": "module",
      "artifact_id": "748e1e33-3da6-4585-49bf-22aec3e3021e",
      "metrics": {
        "cyclomatic_complexity": 41,
        "lines_of_code": 370,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 15,
        "test_coverage": 0.0,
        "maintainability_index": 0
      },
      "markdown_anchor": {
        "id": "scripts-create_comprehensive_index",
        "title": "Module: scripts.create_comprehensive_index",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: scripts.create_comprehensive_index](#scripts-create_comprehensive_index)",
        "html_anchor": "<a id=\"scripts-create_comprehensive_index\"></a>"
      }
    },
    {
      "module_id": "scripts.github_sync_manager_enhanced",
      "path": "scripts/github_sync_manager_enhanced.py",
      "category": "core",
      "module_doc": "Enhanced GitHub Sync Manager - \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u043b\u0443\u0447\u0448\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0438\u0437 full_project_rollout\n\u0418\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u0443\u0435\u0442: processing results + GitHub API + token management + CLI fallback",
      "functions": [
        {
          "name": "print_info",
          "docstring": "",
          "line_range": [
            25,
            26
          ],
          "parameters": [
            "msg"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced.print_info",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced.print_info"
          ],
          "uid_type": "function"
        },
        {
          "name": "print_success",
          "docstring": "",
          "line_range": [
            28,
            29
          ],
          "parameters": [
            "msg"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced.print_success",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced.print_success"
          ],
          "uid_type": "function"
        },
        {
          "name": "print_warning",
          "docstring": "",
          "line_range": [
            31,
            32
          ],
          "parameters": [
            "msg"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced.print_warning",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced.print_warning"
          ],
          "uid_type": "function"
        },
        {
          "name": "print_error",
          "docstring": "",
          "line_range": [
            34,
            35
          ],
          "parameters": [
            "msg"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced.print_error",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced.print_error"
          ],
          "uid_type": "function"
        },
        {
          "name": "print_step",
          "docstring": "",
          "line_range": [
            37,
            38
          ],
          "parameters": [
            "step",
            "total",
            "msg"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced.print_step",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced.print_step"
          ],
          "uid_type": "function"
        },
        {
          "name": "main",
          "docstring": "Enhanced CLI interface",
          "line_range": [
            620,
            655
          ],
          "parameters": [],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced.main",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced.main"
          ],
          "uid_type": "function"
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            43,
            44
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced.__init__",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced.__init__"
          ],
          "uid_type": "function"
        },
        {
          "name": "load_env_file",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            46,
            57
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced.load_env_file",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced.load_env_file"
          ],
          "uid_type": "function"
        },
        {
          "name": "test_github_token",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0442\u043e\u043a\u0435\u043d\u0430",
          "line_range": [
            59,
            73
          ],
          "parameters": [
            "self",
            "token"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced.test_github_token",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced.test_github_token"
          ],
          "uid_type": "function"
        },
        {
          "name": "check_gh_cli",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 GitHub CLI",
          "line_range": [
            75,
            82
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced.check_gh_cli",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced.check_gh_cli"
          ],
          "uid_type": "function"
        },
        {
          "name": "get_token_from_gh_cli",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 \u0438\u0437 GitHub CLI",
          "line_range": [
            84,
            93
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced.get_token_from_gh_cli",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced.get_token_from_gh_cli"
          ],
          "uid_type": "function"
        },
        {
          "name": "get_github_token",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c GitHub \u0442\u043e\u043a\u0435\u043d \u0441 multiple fallbacks\n\nReturns:\n    (token, method) \u0433\u0434\u0435 method = 'env' | 'cli' | 'none'",
          "line_range": [
            95,
            117
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced.get_github_token",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced.get_github_token"
          ],
          "uid_type": "function"
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            122,
            164
          ],
          "parameters": [
            "self",
            "repo_owner",
            "repo_name",
            "dry_run"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced.__init__",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced.__init__"
          ],
          "uid_type": "function"
        },
        {
          "name": "detect_repo_from_git",
          "docstring": "\u0410\u0432\u0442\u043e\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 owner/repo \u0438\u0437 git remote",
          "line_range": [
            166,
            198
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced.detect_repo_from_git",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced.detect_repo_from_git"
          ],
          "uid_type": "function"
        },
        {
          "name": "load_sync_log",
          "docstring": "Load previous sync results",
          "line_range": [
            200,
            211
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced.load_sync_log",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced.load_sync_log"
          ],
          "uid_type": "function"
        },
        {
          "name": "save_sync_log",
          "docstring": "Save sync log",
          "line_range": [
            213,
            216
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced.save_sync_log",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced.save_sync_log"
          ],
          "uid_type": "function"
        },
        {
          "name": "api_request",
          "docstring": "Enhanced API request with CLI fallback",
          "line_range": [
            218,
            231
          ],
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced.api_request",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced.api_request"
          ],
          "uid_type": "function"
        },
        {
          "name": "_api_request_direct",
          "docstring": "Direct API request",
          "line_range": [
            233,
            261
          ],
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced._api_request_direct",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced._api_request_direct"
          ],
          "uid_type": "function"
        },
        {
          "name": "_api_request_via_cli",
          "docstring": "API request via GitHub CLI",
          "line_range": [
            263,
            293
          ],
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced._api_request_via_cli",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced._api_request_via_cli"
          ],
          "uid_type": "function"
        },
        {
          "name": "create_github_issue_enhanced",
          "docstring": "Enhanced issue creation (\u0438\u0437 create_github_issues.py)",
          "line_range": [
            295,
            359
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced.create_github_issue_enhanced",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced.create_github_issue_enhanced"
          ],
          "uid_type": "function"
        },
        {
          "name": "_format_acceptance_criteria",
          "docstring": "Format acceptance criteria from item metadata",
          "line_range": [
            361,
            380
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced._format_acceptance_criteria",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced._format_acceptance_criteria"
          ],
          "uid_type": "function"
        },
        {
          "name": "_format_implementation_notes",
          "docstring": "Format implementation notes",
          "line_range": [
            382,
            397
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced._format_implementation_notes",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced._format_implementation_notes"
          ],
          "uid_type": "function"
        },
        {
          "name": "validate_before_sync",
          "docstring": "Enhanced validation",
          "line_range": [
            399,
            434
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced.validate_before_sync",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced.validate_before_sync"
          ],
          "uid_type": "function"
        },
        {
          "name": "run_enhanced_sync",
          "docstring": "Enhanced sync with full project rollout integration",
          "line_range": [
            436,
            494
          ],
          "parameters": [
            "self",
            "categories"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced.run_enhanced_sync",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced.run_enhanced_sync"
          ],
          "uid_type": "function"
        },
        {
          "name": "sync_category_enhanced",
          "docstring": "Enhanced category sync",
          "line_range": [
            496,
            554
          ],
          "parameters": [
            "self",
            "category"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced.sync_category_enhanced",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced.sync_category_enhanced"
          ],
          "uid_type": "function"
        },
        {
          "name": "item_already_synced",
          "docstring": "Check if item was already synced",
          "line_range": [
            556,
            560
          ],
          "parameters": [
            "self",
            "item",
            "category"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced.item_already_synced",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced.item_already_synced"
          ],
          "uid_type": "function"
        },
        {
          "name": "create_github_epic_enhanced",
          "docstring": "Enhanced epic creation",
          "line_range": [
            562,
            607
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced.create_github_epic_enhanced",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced.create_github_epic_enhanced"
          ],
          "uid_type": "function"
        },
        {
          "name": "create_github_discussion_enhanced",
          "docstring": "Enhanced discussion creation (placeholder - requires GraphQL)",
          "line_range": [
            609,
            618
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": [],
          "uid": "scripts.github_sync_manager_enhanced.create_github_discussion_enhanced",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced.create_github_discussion_enhanced"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": [
            18,
            23
          ],
          "methods": [],
          "bases": [],
          "uid": "scripts.github_sync_manager_enhanced.Colors",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced.Colors"
          ],
          "uid_type": "class"
        },
        {
          "name": "GitHubTokenManager",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 GitHub \u0442\u043e\u043a\u0435\u043d\u0430\u043c\u0438 (\u0438\u0437 setup_github_token.sh)",
          "line_range": [
            40,
            117
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                43,
                44
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.github_sync_manager_enhanced.GitHubTokenManager.__init__",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.GitHubTokenManager",
                "scripts.github_sync_manager_enhanced.GitHubTokenManager.__init__"
              ],
              "uid_type": "method"
            },
            {
              "name": "load_env_file",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430",
              "line_range": [
                46,
                57
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.github_sync_manager_enhanced.GitHubTokenManager.load_env_file",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.GitHubTokenManager",
                "scripts.github_sync_manager_enhanced.GitHubTokenManager.load_env_file"
              ],
              "uid_type": "method"
            },
            {
              "name": "test_github_token",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0442\u043e\u043a\u0435\u043d\u0430",
              "line_range": [
                59,
                73
              ],
              "parameters": [
                "self",
                "token"
              ],
              "uid": "scripts.github_sync_manager_enhanced.GitHubTokenManager.test_github_token",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.GitHubTokenManager",
                "scripts.github_sync_manager_enhanced.GitHubTokenManager.test_github_token"
              ],
              "uid_type": "method"
            },
            {
              "name": "check_gh_cli",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 GitHub CLI",
              "line_range": [
                75,
                82
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.github_sync_manager_enhanced.GitHubTokenManager.check_gh_cli",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.GitHubTokenManager",
                "scripts.github_sync_manager_enhanced.GitHubTokenManager.check_gh_cli"
              ],
              "uid_type": "method"
            },
            {
              "name": "get_token_from_gh_cli",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 \u0438\u0437 GitHub CLI",
              "line_range": [
                84,
                93
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.github_sync_manager_enhanced.GitHubTokenManager.get_token_from_gh_cli",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.GitHubTokenManager",
                "scripts.github_sync_manager_enhanced.GitHubTokenManager.get_token_from_gh_cli"
              ],
              "uid_type": "method"
            },
            {
              "name": "get_github_token",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c GitHub \u0442\u043e\u043a\u0435\u043d \u0441 multiple fallbacks\n\nReturns:\n    (token, method) \u0433\u0434\u0435 method = 'env' | 'cli' | 'none'",
              "line_range": [
                95,
                117
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.github_sync_manager_enhanced.GitHubTokenManager.get_github_token",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.GitHubTokenManager",
                "scripts.github_sync_manager_enhanced.GitHubTokenManager.get_github_token"
              ],
              "uid_type": "method"
            }
          ],
          "bases": [],
          "uid": "scripts.github_sync_manager_enhanced.GitHubTokenManager",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced.GitHubTokenManager"
          ],
          "uid_type": "class"
        },
        {
          "name": "EnhancedGitHubSyncManager",
          "docstring": "\u0423\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u044b\u0439 GitHub Sync Manager \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 \u0432\u0441\u0435\u0445 \u043b\u0443\u0447\u0448\u0438\u0445 \u043f\u0440\u0430\u043a\u0442\u0438\u043a",
          "line_range": [
            119,
            618
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                122,
                164
              ],
              "parameters": [
                "self",
                "repo_owner",
                "repo_name",
                "dry_run"
              ],
              "uid": "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.__init__",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.__init__"
              ],
              "uid_type": "method"
            },
            {
              "name": "detect_repo_from_git",
              "docstring": "\u0410\u0432\u0442\u043e\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 owner/repo \u0438\u0437 git remote",
              "line_range": [
                166,
                198
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.detect_repo_from_git",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.detect_repo_from_git"
              ],
              "uid_type": "method"
            },
            {
              "name": "load_sync_log",
              "docstring": "Load previous sync results",
              "line_range": [
                200,
                211
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.load_sync_log",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.load_sync_log"
              ],
              "uid_type": "method"
            },
            {
              "name": "save_sync_log",
              "docstring": "Save sync log",
              "line_range": [
                213,
                216
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.save_sync_log",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.save_sync_log"
              ],
              "uid_type": "method"
            },
            {
              "name": "api_request",
              "docstring": "Enhanced API request with CLI fallback",
              "line_range": [
                218,
                231
              ],
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ],
              "uid": "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.api_request",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.api_request"
              ],
              "uid_type": "method"
            },
            {
              "name": "_api_request_direct",
              "docstring": "Direct API request",
              "line_range": [
                233,
                261
              ],
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ],
              "uid": "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager._api_request_direct",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager._api_request_direct"
              ],
              "uid_type": "method"
            },
            {
              "name": "_api_request_via_cli",
              "docstring": "API request via GitHub CLI",
              "line_range": [
                263,
                293
              ],
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ],
              "uid": "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager._api_request_via_cli",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager._api_request_via_cli"
              ],
              "uid_type": "method"
            },
            {
              "name": "create_github_issue_enhanced",
              "docstring": "Enhanced issue creation (\u0438\u0437 create_github_issues.py)",
              "line_range": [
                295,
                359
              ],
              "parameters": [
                "self",
                "item"
              ],
              "uid": "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.create_github_issue_enhanced",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.create_github_issue_enhanced"
              ],
              "uid_type": "method"
            },
            {
              "name": "_format_acceptance_criteria",
              "docstring": "Format acceptance criteria from item metadata",
              "line_range": [
                361,
                380
              ],
              "parameters": [
                "self",
                "item"
              ],
              "uid": "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager._format_acceptance_criteria",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager._format_acceptance_criteria"
              ],
              "uid_type": "method"
            },
            {
              "name": "_format_implementation_notes",
              "docstring": "Format implementation notes",
              "line_range": [
                382,
                397
              ],
              "parameters": [
                "self",
                "item"
              ],
              "uid": "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager._format_implementation_notes",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager._format_implementation_notes"
              ],
              "uid_type": "method"
            },
            {
              "name": "validate_before_sync",
              "docstring": "Enhanced validation",
              "line_range": [
                399,
                434
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.validate_before_sync",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.validate_before_sync"
              ],
              "uid_type": "method"
            },
            {
              "name": "run_enhanced_sync",
              "docstring": "Enhanced sync with full project rollout integration",
              "line_range": [
                436,
                494
              ],
              "parameters": [
                "self",
                "categories"
              ],
              "uid": "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.run_enhanced_sync",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.run_enhanced_sync"
              ],
              "uid_type": "method"
            },
            {
              "name": "sync_category_enhanced",
              "docstring": "Enhanced category sync",
              "line_range": [
                496,
                554
              ],
              "parameters": [
                "self",
                "category"
              ],
              "uid": "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.sync_category_enhanced",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.sync_category_enhanced"
              ],
              "uid_type": "method"
            },
            {
              "name": "item_already_synced",
              "docstring": "Check if item was already synced",
              "line_range": [
                556,
                560
              ],
              "parameters": [
                "self",
                "item",
                "category"
              ],
              "uid": "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.item_already_synced",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.item_already_synced"
              ],
              "uid_type": "method"
            },
            {
              "name": "create_github_epic_enhanced",
              "docstring": "Enhanced epic creation",
              "line_range": [
                562,
                607
              ],
              "parameters": [
                "self",
                "item"
              ],
              "uid": "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.create_github_epic_enhanced",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.create_github_epic_enhanced"
              ],
              "uid_type": "method"
            },
            {
              "name": "create_github_discussion_enhanced",
              "docstring": "Enhanced discussion creation (placeholder - requires GraphQL)",
              "line_range": [
                609,
                618
              ],
              "parameters": [
                "self",
                "item"
              ],
              "uid": "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.create_github_discussion_enhanced",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.create_github_discussion_enhanced"
              ],
              "uid_type": "method"
            }
          ],
          "bases": [],
          "uid": "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced",
            "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager"
          ],
          "uid_type": "class"
        }
      ],
      "callgraph": {
        "print_info": [
          "print"
        ],
        "print_success": [
          "print"
        ],
        "print_warning": [
          "print"
        ],
        "print_error": [
          "print"
        ],
        "print_step": [
          "print"
        ],
        "__init__": [
          "self.load_sync_log",
          "GitHubTokenManager",
          "Path",
          "print_info",
          "self.detect_repo_from_git"
        ],
        "load_env_file": [
          "open",
          "line.startswith",
          "Path",
          "value.strip",
          "line.strip",
          "key.strip",
          "env_file.exists",
          "line.split"
        ],
        "test_github_token": [
          "requests.get",
          "response.json"
        ],
        "check_gh_cli": [
          "subprocess.run"
        ],
        "get_token_from_gh_cli": [
          "subprocess.run"
        ],
        "get_github_token": [
          "self.test_github_token",
          "print_warning",
          "self.get_token_from_gh_cli",
          "os.getenv",
          "self.check_gh_cli"
        ],
        "detect_repo_from_git": [
          "url.endswith",
          "len",
          "subprocess.run",
          "url.replace",
          "url.startswith",
          "url.split",
          "print_info",
          "print_warning",
          "path.split"
        ],
        "load_sync_log": [
          "json.load",
          "open"
        ],
        "save_sync_log": [
          "json.dump",
          "open"
        ],
        "api_request": [
          "self._api_request_via_cli",
          "time.sleep",
          "print_error",
          "self._api_request_direct"
        ],
        "_api_request_direct": [
          "requests.get",
          "requests.post",
          "requests.patch",
          "response.json",
          "print_warning",
          "int",
          "ValueError",
          "response.raise_for_status",
          "print_error",
          "method.upper"
        ],
        "_api_request_via_cli": [
          "json.loads",
          "subprocess.run",
          "cmd.extend",
          "print_warning",
          "json.dumps",
          "print_error",
          "method.upper"
        ],
        "create_github_issue_enhanced": [
          "self._format_implementation_notes",
          "print_success",
          "labels.append",
          "self._format_acceptance_criteria",
          "print_info",
          "self.api_request",
          "item.get",
          "processing_meta.get"
        ],
        "_format_acceptance_criteria": [
          "criteria.extend",
          "criteria.append",
          "item.get"
        ],
        "_format_implementation_notes": [
          "item.get",
          "processing_meta.get",
          "notes.append"
        ],
        "validate_before_sync": [
          "repo_info.get",
          "print_success",
          "file_path.exists",
          "self.api_request",
          "user_info.get",
          "print_error",
          "print_step"
        ],
        "run_enhanced_sync": [
          "self.validate_before_sync",
          "print_success",
          "self.save_sync_log",
          "print",
          "print_info",
          "enumerate",
          "self.sync_category_enhanced",
          "datetime.now",
          "result.get",
          "print_step"
        ],
        "sync_category_enhanced": [
          "data.get",
          "open",
          "result.get",
          "file_path.exists",
          "json.load",
          "print_info",
          "self.item_already_synced",
          "self.create_github_issue_enhanced",
          "self.create_github_discussion_enhanced",
          "print_warning",
          "self.create_github_epic_enhanced",
          "print_error",
          "datetime.now",
          "item.get"
        ],
        "item_already_synced": [
          "item.get"
        ],
        "create_github_epic_enhanced": [
          "print_info",
          "self.api_request",
          "item.get",
          "print_success"
        ],
        "create_github_discussion_enhanced": [
          "print_info",
          "item.get",
          "print_warning"
        ],
        "main": [
          "argparse.ArgumentParser",
          "len",
          "parser.add_argument",
          "print_success",
          "result.get",
          "parser.parse_args",
          "EnhancedGitHubSyncManager",
          "print_error",
          "manager.run_enhanced_sync"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "json",
        "os",
        "pathlib",
        "requests",
        "subprocess",
        "sys",
        "time",
        "typing"
      ],
      "hash": "dee5ab49d5c48115c3b9b6df054a1160c44fb7addfa035958aa7db8619301d96",
      "uid": "scripts.github_sync_manager_enhanced",
      "uid_components": [
        "scripts",
        "scripts.github_sync_manager_enhanced"
      ],
      "uid_type": "module",
      "artifact_id": "676f670c-d4c4-a6a8-8ea5-b74ed18a5e27",
      "metrics": {
        "cyclomatic_complexity": 34,
        "lines_of_code": 280,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 15,
        "test_coverage": 0.0,
        "maintainability_index": 0
      },
      "markdown_anchor": {
        "id": "scripts-github_sync_manager_enhanced",
        "title": "Module: scripts.github_sync_manager_enhanced",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: scripts.github_sync_manager_enhanced](#scripts-github_sync_manager_enhanced)",
        "html_anchor": "<a id=\"scripts-github_sync_manager_enhanced\"></a>"
      }
    },
    {
      "module_id": "scripts.deploy_embedded_files",
      "path": "scripts/deploy_embedded_files.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_json",
          "docstring": "",
          "line_range": [
            931,
            941
          ],
          "parameters": [
            "data",
            "schema",
            "base_path"
          ],
          "decorators": [],
          "uid": "scripts.deploy_embedded_files.validate_json",
          "uid_components": [
            "scripts",
            "scripts.deploy_embedded_files",
            "scripts.deploy_embedded_files.validate_json"
          ],
          "uid_type": "function"
        },
        {
          "name": "backup_files",
          "docstring": "",
          "line_range": [
            944,
            950
          ],
          "parameters": [
            "target_dir",
            "backup_root"
          ],
          "decorators": [],
          "uid": "scripts.deploy_embedded_files.backup_files",
          "uid_components": [
            "scripts",
            "scripts.deploy_embedded_files",
            "scripts.deploy_embedded_files.backup_files"
          ],
          "uid_type": "function"
        },
        {
          "name": "deploy_embedded_files",
          "docstring": "",
          "line_range": [
            953,
            1007
          ],
          "parameters": [],
          "decorators": [],
          "uid": "scripts.deploy_embedded_files.deploy_embedded_files",
          "uid_components": [
            "scripts",
            "scripts.deploy_embedded_files",
            "scripts.deploy_embedded_files.deploy_embedded_files"
          ],
          "uid_type": "function"
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            1010,
            1011
          ],
          "parameters": [],
          "decorators": [],
          "uid": "scripts.deploy_embedded_files.main",
          "uid_components": [
            "scripts",
            "scripts.deploy_embedded_files",
            "scripts.deploy_embedded_files.main"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_json": [
          "logger.warning",
          "logger.error",
          "RefResolver",
          "validate"
        ],
        "backup_files": [
          "datetime.now",
          "logger.info",
          "shutil.copytree",
          "target_dir.exists"
        ],
        "deploy_embedded_files": [
          "target_path.open",
          "target_path.exists",
          "EMBEDDED_FILES.get",
          "f.write",
          "logger.warning",
          "Path",
          "backup_files",
          "logger.info",
          "validate_json",
          "logger.error",
          "json.dump",
          "Path.cwd"
        ],
        "main": [
          "deploy_embedded_files"
        ]
      },
      "dependencies": [
        "Path",
        "RefResolver",
        "ValidationError",
        "datetime",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "shutil",
        "validate"
      ],
      "hash": "965c984b688301f0d0c65fc65cc8c95a878218aec94afab5dca3b3c7f65cea19",
      "uid": "scripts.deploy_embedded_files",
      "uid_components": [
        "scripts",
        "scripts.deploy_embedded_files"
      ],
      "uid_type": "module",
      "artifact_id": "88839b6d-384b-584e-dc17-97a527e38fab",
      "metrics": {
        "cyclomatic_complexity": 4,
        "lines_of_code": 40,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 10,
        "test_coverage": 0.0,
        "maintainability_index": 80
      },
      "markdown_anchor": {
        "id": "scripts-deploy_embedded_files",
        "title": "Module: scripts.deploy_embedded_files",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: scripts.deploy_embedded_files](#scripts-deploy_embedded_files)",
        "html_anchor": "<a id=\"scripts-deploy_embedded_files\"></a>"
      }
    },
    {
      "module_id": "scripts.fix_hardcoded_usernames",
      "path": "scripts/fix_hardcoded_usernames.py",
      "category": "core",
      "module_doc": "Fix Hardcoded Usernames Script\nAutomatically detects and replaces hardcoded usernames with dynamic values from .env or git config.",
      "functions": [
        {
          "name": "main",
          "docstring": "Main execution function.",
          "line_range": [
            234,
            288
          ],
          "parameters": [],
          "decorators": [],
          "uid": "scripts.fix_hardcoded_usernames.main",
          "uid_components": [
            "scripts",
            "scripts.fix_hardcoded_usernames",
            "scripts.fix_hardcoded_usernames.main"
          ],
          "uid_type": "function"
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            22,
            24
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": [],
          "uid": "scripts.fix_hardcoded_usernames.__init__",
          "uid_components": [
            "scripts",
            "scripts.fix_hardcoded_usernames",
            "scripts.fix_hardcoded_usernames.__init__"
          ],
          "uid_type": "function"
        },
        {
          "name": "_detect_user_info",
          "docstring": "Detect user info from .env, git config, or environment.",
          "line_range": [
            26,
            62
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.fix_hardcoded_usernames._detect_user_info",
          "uid_components": [
            "scripts",
            "scripts.fix_hardcoded_usernames",
            "scripts.fix_hardcoded_usernames._detect_user_info"
          ],
          "uid_type": "function"
        },
        {
          "name": "_load_from_env",
          "docstring": "Load user info from .env file.",
          "line_range": [
            64,
            86
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.fix_hardcoded_usernames._load_from_env",
          "uid_components": [
            "scripts",
            "scripts.fix_hardcoded_usernames",
            "scripts.fix_hardcoded_usernames._load_from_env"
          ],
          "uid_type": "function"
        },
        {
          "name": "_load_from_git",
          "docstring": "Load user info from git config.",
          "line_range": [
            88,
            120
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.fix_hardcoded_usernames._load_from_git",
          "uid_components": [
            "scripts",
            "scripts.fix_hardcoded_usernames",
            "scripts.fix_hardcoded_usernames._load_from_git"
          ],
          "uid_type": "function"
        },
        {
          "name": "_load_from_environment",
          "docstring": "Load user info from environment variables.",
          "line_range": [
            122,
            128
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.fix_hardcoded_usernames._load_from_environment",
          "uid_components": [
            "scripts",
            "scripts.fix_hardcoded_usernames",
            "scripts.fix_hardcoded_usernames._load_from_environment"
          ],
          "uid_type": "function"
        },
        {
          "name": "get_user_info",
          "docstring": "Get detected user information.",
          "line_range": [
            130,
            132
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.fix_hardcoded_usernames.get_user_info",
          "uid_components": [
            "scripts",
            "scripts.fix_hardcoded_usernames",
            "scripts.fix_hardcoded_usernames.get_user_info"
          ],
          "uid_type": "function"
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            138,
            148
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": [],
          "uid": "scripts.fix_hardcoded_usernames.__init__",
          "uid_components": [
            "scripts",
            "scripts.fix_hardcoded_usernames",
            "scripts.fix_hardcoded_usernames.__init__"
          ],
          "uid_type": "function"
        },
        {
          "name": "scan_files",
          "docstring": "Scan for files containing hardcoded usernames.",
          "line_range": [
            150,
            172
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.fix_hardcoded_usernames.scan_files",
          "uid_components": [
            "scripts",
            "scripts.fix_hardcoded_usernames",
            "scripts.fix_hardcoded_usernames.scan_files"
          ],
          "uid_type": "function"
        },
        {
          "name": "fix_file",
          "docstring": "Fix hardcoded usernames in a single file.",
          "line_range": [
            174,
            200
          ],
          "parameters": [
            "self",
            "file_path",
            "dry_run"
          ],
          "decorators": [],
          "uid": "scripts.fix_hardcoded_usernames.fix_file",
          "uid_components": [
            "scripts",
            "scripts.fix_hardcoded_usernames",
            "scripts.fix_hardcoded_usernames.fix_file"
          ],
          "uid_type": "function"
        },
        {
          "name": "fix_all_files",
          "docstring": "Fix hardcoded usernames in all project files.",
          "line_range": [
            202,
            214
          ],
          "parameters": [
            "self",
            "dry_run"
          ],
          "decorators": [],
          "uid": "scripts.fix_hardcoded_usernames.fix_all_files",
          "uid_components": [
            "scripts",
            "scripts.fix_hardcoded_usernames",
            "scripts.fix_hardcoded_usernames.fix_all_files"
          ],
          "uid_type": "function"
        },
        {
          "name": "generate_env_template",
          "docstring": "Generate .env template with required variables.",
          "line_range": [
            216,
            231
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.fix_hardcoded_usernames.generate_env_template",
          "uid_components": [
            "scripts",
            "scripts.fix_hardcoded_usernames",
            "scripts.fix_hardcoded_usernames.generate_env_template"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [
        {
          "name": "UserInfoDetector",
          "docstring": "Detect user information from various sources.",
          "line_range": [
            19,
            132
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                22,
                24
              ],
              "parameters": [
                "self",
                "project_root"
              ],
              "uid": "scripts.fix_hardcoded_usernames.UserInfoDetector.__init__",
              "uid_components": [
                "scripts",
                "scripts.fix_hardcoded_usernames",
                "scripts.fix_hardcoded_usernames.UserInfoDetector",
                "scripts.fix_hardcoded_usernames.UserInfoDetector.__init__"
              ],
              "uid_type": "method"
            },
            {
              "name": "_detect_user_info",
              "docstring": "Detect user info from .env, git config, or environment.",
              "line_range": [
                26,
                62
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.fix_hardcoded_usernames.UserInfoDetector._detect_user_info",
              "uid_components": [
                "scripts",
                "scripts.fix_hardcoded_usernames",
                "scripts.fix_hardcoded_usernames.UserInfoDetector",
                "scripts.fix_hardcoded_usernames.UserInfoDetector._detect_user_info"
              ],
              "uid_type": "method"
            },
            {
              "name": "_load_from_env",
              "docstring": "Load user info from .env file.",
              "line_range": [
                64,
                86
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.fix_hardcoded_usernames.UserInfoDetector._load_from_env",
              "uid_components": [
                "scripts",
                "scripts.fix_hardcoded_usernames",
                "scripts.fix_hardcoded_usernames.UserInfoDetector",
                "scripts.fix_hardcoded_usernames.UserInfoDetector._load_from_env"
              ],
              "uid_type": "method"
            },
            {
              "name": "_load_from_git",
              "docstring": "Load user info from git config.",
              "line_range": [
                88,
                120
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.fix_hardcoded_usernames.UserInfoDetector._load_from_git",
              "uid_components": [
                "scripts",
                "scripts.fix_hardcoded_usernames",
                "scripts.fix_hardcoded_usernames.UserInfoDetector",
                "scripts.fix_hardcoded_usernames.UserInfoDetector._load_from_git"
              ],
              "uid_type": "method"
            },
            {
              "name": "_load_from_environment",
              "docstring": "Load user info from environment variables.",
              "line_range": [
                122,
                128
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.fix_hardcoded_usernames.UserInfoDetector._load_from_environment",
              "uid_components": [
                "scripts",
                "scripts.fix_hardcoded_usernames",
                "scripts.fix_hardcoded_usernames.UserInfoDetector",
                "scripts.fix_hardcoded_usernames.UserInfoDetector._load_from_environment"
              ],
              "uid_type": "method"
            },
            {
              "name": "get_user_info",
              "docstring": "Get detected user information.",
              "line_range": [
                130,
                132
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.fix_hardcoded_usernames.UserInfoDetector.get_user_info",
              "uid_components": [
                "scripts",
                "scripts.fix_hardcoded_usernames",
                "scripts.fix_hardcoded_usernames.UserInfoDetector",
                "scripts.fix_hardcoded_usernames.UserInfoDetector.get_user_info"
              ],
              "uid_type": "method"
            }
          ],
          "bases": [],
          "uid": "scripts.fix_hardcoded_usernames.UserInfoDetector",
          "uid_components": [
            "scripts",
            "scripts.fix_hardcoded_usernames",
            "scripts.fix_hardcoded_usernames.UserInfoDetector"
          ],
          "uid_type": "class"
        },
        {
          "name": "HardcodeFixer",
          "docstring": "Fix hardcoded usernames in project files.",
          "line_range": [
            135,
            231
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                138,
                148
              ],
              "parameters": [
                "self",
                "project_root"
              ],
              "uid": "scripts.fix_hardcoded_usernames.HardcodeFixer.__init__",
              "uid_components": [
                "scripts",
                "scripts.fix_hardcoded_usernames",
                "scripts.fix_hardcoded_usernames.HardcodeFixer",
                "scripts.fix_hardcoded_usernames.HardcodeFixer.__init__"
              ],
              "uid_type": "method"
            },
            {
              "name": "scan_files",
              "docstring": "Scan for files containing hardcoded usernames.",
              "line_range": [
                150,
                172
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.fix_hardcoded_usernames.HardcodeFixer.scan_files",
              "uid_components": [
                "scripts",
                "scripts.fix_hardcoded_usernames",
                "scripts.fix_hardcoded_usernames.HardcodeFixer",
                "scripts.fix_hardcoded_usernames.HardcodeFixer.scan_files"
              ],
              "uid_type": "method"
            },
            {
              "name": "fix_file",
              "docstring": "Fix hardcoded usernames in a single file.",
              "line_range": [
                174,
                200
              ],
              "parameters": [
                "self",
                "file_path",
                "dry_run"
              ],
              "uid": "scripts.fix_hardcoded_usernames.HardcodeFixer.fix_file",
              "uid_components": [
                "scripts",
                "scripts.fix_hardcoded_usernames",
                "scripts.fix_hardcoded_usernames.HardcodeFixer",
                "scripts.fix_hardcoded_usernames.HardcodeFixer.fix_file"
              ],
              "uid_type": "method"
            },
            {
              "name": "fix_all_files",
              "docstring": "Fix hardcoded usernames in all project files.",
              "line_range": [
                202,
                214
              ],
              "parameters": [
                "self",
                "dry_run"
              ],
              "uid": "scripts.fix_hardcoded_usernames.HardcodeFixer.fix_all_files",
              "uid_components": [
                "scripts",
                "scripts.fix_hardcoded_usernames",
                "scripts.fix_hardcoded_usernames.HardcodeFixer",
                "scripts.fix_hardcoded_usernames.HardcodeFixer.fix_all_files"
              ],
              "uid_type": "method"
            },
            {
              "name": "generate_env_template",
              "docstring": "Generate .env template with required variables.",
              "line_range": [
                216,
                231
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.fix_hardcoded_usernames.HardcodeFixer.generate_env_template",
              "uid_components": [
                "scripts",
                "scripts.fix_hardcoded_usernames",
                "scripts.fix_hardcoded_usernames.HardcodeFixer",
                "scripts.fix_hardcoded_usernames.HardcodeFixer.generate_env_template"
              ],
              "uid_type": "method"
            }
          ],
          "bases": [],
          "uid": "scripts.fix_hardcoded_usernames.HardcodeFixer",
          "uid_components": [
            "scripts",
            "scripts.fix_hardcoded_usernames",
            "scripts.fix_hardcoded_usernames.HardcodeFixer"
          ],
          "uid_type": "class"
        }
      ],
      "callgraph": {
        "__init__": [
          "UserInfoDetector",
          "Path"
        ],
        "_detect_user_info": [
          "self._load_from_git",
          "user_info.update",
          "env_vars.items",
          "self._load_from_environment",
          "logger.info",
          "self._load_from_env",
          "env_info.items",
          "user_info.get"
        ],
        "_load_from_env": [
          "open",
          "line.startswith",
          "value.strip",
          "logger.error",
          "line.strip",
          "key.strip",
          "env_file.exists",
          "line.split",
          "env_vars.get"
        ],
        "_load_from_git": [
          "subprocess.run",
          "logger.error",
          "re.search",
          "match.group"
        ],
        "_load_from_environment": [],
        "get_user_info": [],
        "scan_files": [
          "open",
          "logger.warning",
          "content.count",
          "f.read",
          "str",
          "files_with_hardcode.append",
          "any"
        ],
        "fix_file": [
          "f.write",
          "open",
          "content.count",
          "f.read",
          "logger.info",
          "logger.error",
          "content.replace"
        ],
        "fix_all_files": [
          "len",
          "logger.info",
          "str",
          "self.scan_files",
          "self.fix_file"
        ],
        "generate_env_template": [],
        "main": [
          "fixer.fix_all_files",
          "results.items",
          "argparse.ArgumentParser",
          "len",
          "parser.add_argument",
          "fixer.generate_env_template",
          "print",
          "open",
          "HardcodeFixer",
          "Path",
          "parser.parse_args",
          "logger.info",
          "fixer.scan_files",
          "replacements.items",
          "f.write"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "argparse",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "subprocess",
        "typing"
      ],
      "hash": "04fdd50dde3b144c4c93f598ab0748be398c1287e006924d5a573d5b520395a3",
      "uid": "scripts.fix_hardcoded_usernames",
      "uid_components": [
        "scripts",
        "scripts.fix_hardcoded_usernames"
      ],
      "uid_type": "module",
      "artifact_id": "9b8f8595-817b-ba48-6d78-80c7370b6498",
      "metrics": {
        "cyclomatic_complexity": 16,
        "lines_of_code": 120,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 13,
        "test_coverage": 0.0,
        "maintainability_index": 20
      },
      "markdown_anchor": {
        "id": "scripts-fix_hardcoded_usernames",
        "title": "Module: scripts.fix_hardcoded_usernames",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: scripts.fix_hardcoded_usernames](#scripts-fix_hardcoded_usernames)",
        "html_anchor": "<a id=\"scripts-fix_hardcoded_usernames\"></a>"
      }
    },
    {
      "module_id": "scripts.create_tasks_index",
      "path": "scripts/create_tasks_index.py",
      "category": "core",
      "module_doc": "Tasks Index Creator\nScans all documentation files and creates comprehensive index of tasks, EPICs, TODOs, and other actionable items.",
      "functions": [
        {
          "name": "main",
          "docstring": "Main execution function.",
          "line_range": [
            469,
            515
          ],
          "parameters": [],
          "decorators": [],
          "uid": "scripts.create_tasks_index.main",
          "uid_components": [
            "scripts",
            "scripts.create_tasks_index",
            "scripts.create_tasks_index.main"
          ],
          "uid_type": "function"
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            42,
            44
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": [],
          "uid": "scripts.create_tasks_index.__init__",
          "uid_components": [
            "scripts",
            "scripts.create_tasks_index",
            "scripts.create_tasks_index.__init__"
          ],
          "uid_type": "function"
        },
        {
          "name": "_init_patterns",
          "docstring": "Initialize regex patterns for task extraction.",
          "line_range": [
            46,
            73
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.create_tasks_index._init_patterns",
          "uid_components": [
            "scripts",
            "scripts.create_tasks_index",
            "scripts.create_tasks_index._init_patterns"
          ],
          "uid_type": "function"
        },
        {
          "name": "extract_from_markdown",
          "docstring": "Extract tasks from markdown file.",
          "line_range": [
            75,
            107
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": [],
          "uid": "scripts.create_tasks_index.extract_from_markdown",
          "uid_components": [
            "scripts",
            "scripts.create_tasks_index",
            "scripts.create_tasks_index.extract_from_markdown"
          ],
          "uid_type": "function"
        },
        {
          "name": "_extract_status",
          "docstring": "Extract document status.",
          "line_range": [
            109,
            120
          ],
          "parameters": [
            "self",
            "content"
          ],
          "decorators": [],
          "uid": "scripts.create_tasks_index._extract_status",
          "uid_components": [
            "scripts",
            "scripts.create_tasks_index",
            "scripts.create_tasks_index._extract_status"
          ],
          "uid_type": "function"
        },
        {
          "name": "_extract_priority",
          "docstring": "Extract document priority.",
          "line_range": [
            122,
            135
          ],
          "parameters": [
            "self",
            "content"
          ],
          "decorators": [],
          "uid": "scripts.create_tasks_index._extract_priority",
          "uid_components": [
            "scripts",
            "scripts.create_tasks_index",
            "scripts.create_tasks_index._extract_priority"
          ],
          "uid_type": "function"
        },
        {
          "name": "_extract_date",
          "docstring": "Extract document date.",
          "line_range": [
            137,
            142
          ],
          "parameters": [
            "self",
            "content"
          ],
          "decorators": [],
          "uid": "scripts.create_tasks_index._extract_date",
          "uid_components": [
            "scripts",
            "scripts.create_tasks_index",
            "scripts.create_tasks_index._extract_date"
          ],
          "uid_type": "function"
        },
        {
          "name": "_extract_epics",
          "docstring": "Extract EPIC items.",
          "line_range": [
            144,
            168
          ],
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": [],
          "uid": "scripts.create_tasks_index._extract_epics",
          "uid_components": [
            "scripts",
            "scripts.create_tasks_index",
            "scripts.create_tasks_index._extract_epics"
          ],
          "uid_type": "function"
        },
        {
          "name": "_extract_tasks",
          "docstring": "Extract explicit task items.",
          "line_range": [
            170,
            194
          ],
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": [],
          "uid": "scripts.create_tasks_index._extract_tasks",
          "uid_components": [
            "scripts",
            "scripts.create_tasks_index",
            "scripts.create_tasks_index._extract_tasks"
          ],
          "uid_type": "function"
        },
        {
          "name": "_extract_todos",
          "docstring": "Extract TODO items.",
          "line_range": [
            196,
            219
          ],
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": [],
          "uid": "scripts.create_tasks_index._extract_todos",
          "uid_components": [
            "scripts",
            "scripts.create_tasks_index",
            "scripts.create_tasks_index._extract_todos"
          ],
          "uid_type": "function"
        },
        {
          "name": "_extract_phases",
          "docstring": "Extract phase/step items.",
          "line_range": [
            221,
            245
          ],
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": [],
          "uid": "scripts.create_tasks_index._extract_phases",
          "uid_components": [
            "scripts",
            "scripts.create_tasks_index",
            "scripts.create_tasks_index._extract_phases"
          ],
          "uid_type": "function"
        },
        {
          "name": "_extract_checkboxes",
          "docstring": "Extract checkbox items as tasks.",
          "line_range": [
            247,
            275
          ],
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": [],
          "uid": "scripts.create_tasks_index._extract_checkboxes",
          "uid_components": [
            "scripts",
            "scripts.create_tasks_index",
            "scripts.create_tasks_index._extract_checkboxes"
          ],
          "uid_type": "function"
        },
        {
          "name": "_extract_context",
          "docstring": "Extract surrounding context for a match.",
          "line_range": [
            277,
            286
          ],
          "parameters": [
            "self",
            "content",
            "start",
            "end",
            "context_lines"
          ],
          "decorators": [],
          "uid": "scripts.create_tasks_index._extract_context",
          "uid_components": [
            "scripts",
            "scripts.create_tasks_index",
            "scripts.create_tasks_index._extract_context"
          ],
          "uid_type": "function"
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            292,
            294
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": [],
          "uid": "scripts.create_tasks_index.__init__",
          "uid_components": [
            "scripts",
            "scripts.create_tasks_index",
            "scripts.create_tasks_index.__init__"
          ],
          "uid_type": "function"
        },
        {
          "name": "scan_documentation",
          "docstring": "Scan all documentation files for tasks.",
          "line_range": [
            296,
            314
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "scripts.create_tasks_index.scan_documentation",
          "uid_components": [
            "scripts",
            "scripts.create_tasks_index",
            "scripts.create_tasks_index.scan_documentation"
          ],
          "uid_type": "function"
        },
        {
          "name": "generate_index",
          "docstring": "Generate comprehensive task index.",
          "line_range": [
            316,
            367
          ],
          "parameters": [
            "self",
            "tasks"
          ],
          "decorators": [],
          "uid": "scripts.create_tasks_index.generate_index",
          "uid_components": [
            "scripts",
            "scripts.create_tasks_index",
            "scripts.create_tasks_index.generate_index"
          ],
          "uid_type": "function"
        },
        {
          "name": "generate_summary_report",
          "docstring": "Generate human-readable summary report.",
          "line_range": [
            369,
            446
          ],
          "parameters": [
            "self",
            "index"
          ],
          "decorators": [],
          "uid": "scripts.create_tasks_index.generate_summary_report",
          "uid_components": [
            "scripts",
            "scripts.create_tasks_index",
            "scripts.create_tasks_index.generate_summary_report"
          ],
          "uid_type": "function"
        },
        {
          "name": "save_index",
          "docstring": "Save index and summary to files.",
          "line_range": [
            448,
            466
          ],
          "parameters": [
            "self",
            "index",
            "summary",
            "output_dir"
          ],
          "decorators": [],
          "uid": "scripts.create_tasks_index.save_index",
          "uid_components": [
            "scripts",
            "scripts.create_tasks_index",
            "scripts.create_tasks_index.save_index"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [
        {
          "name": "Task",
          "docstring": "Represents a single task or actionable item.",
          "line_range": [
            21,
            36
          ],
          "methods": [],
          "bases": [],
          "uid": "scripts.create_tasks_index.Task",
          "uid_components": [
            "scripts",
            "scripts.create_tasks_index",
            "scripts.create_tasks_index.Task"
          ],
          "uid_type": "class"
        },
        {
          "name": "TaskExtractor",
          "docstring": "Extract tasks from various document formats.",
          "line_range": [
            39,
            286
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                42,
                44
              ],
              "parameters": [
                "self",
                "project_root"
              ],
              "uid": "scripts.create_tasks_index.TaskExtractor.__init__",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index.TaskExtractor",
                "scripts.create_tasks_index.TaskExtractor.__init__"
              ],
              "uid_type": "method"
            },
            {
              "name": "_init_patterns",
              "docstring": "Initialize regex patterns for task extraction.",
              "line_range": [
                46,
                73
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.create_tasks_index.TaskExtractor._init_patterns",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index.TaskExtractor",
                "scripts.create_tasks_index.TaskExtractor._init_patterns"
              ],
              "uid_type": "method"
            },
            {
              "name": "extract_from_markdown",
              "docstring": "Extract tasks from markdown file.",
              "line_range": [
                75,
                107
              ],
              "parameters": [
                "self",
                "file_path"
              ],
              "uid": "scripts.create_tasks_index.TaskExtractor.extract_from_markdown",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index.TaskExtractor",
                "scripts.create_tasks_index.TaskExtractor.extract_from_markdown"
              ],
              "uid_type": "method"
            },
            {
              "name": "_extract_status",
              "docstring": "Extract document status.",
              "line_range": [
                109,
                120
              ],
              "parameters": [
                "self",
                "content"
              ],
              "uid": "scripts.create_tasks_index.TaskExtractor._extract_status",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index.TaskExtractor",
                "scripts.create_tasks_index.TaskExtractor._extract_status"
              ],
              "uid_type": "method"
            },
            {
              "name": "_extract_priority",
              "docstring": "Extract document priority.",
              "line_range": [
                122,
                135
              ],
              "parameters": [
                "self",
                "content"
              ],
              "uid": "scripts.create_tasks_index.TaskExtractor._extract_priority",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index.TaskExtractor",
                "scripts.create_tasks_index.TaskExtractor._extract_priority"
              ],
              "uid_type": "method"
            },
            {
              "name": "_extract_date",
              "docstring": "Extract document date.",
              "line_range": [
                137,
                142
              ],
              "parameters": [
                "self",
                "content"
              ],
              "uid": "scripts.create_tasks_index.TaskExtractor._extract_date",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index.TaskExtractor",
                "scripts.create_tasks_index.TaskExtractor._extract_date"
              ],
              "uid_type": "method"
            },
            {
              "name": "_extract_epics",
              "docstring": "Extract EPIC items.",
              "line_range": [
                144,
                168
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ],
              "uid": "scripts.create_tasks_index.TaskExtractor._extract_epics",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index.TaskExtractor",
                "scripts.create_tasks_index.TaskExtractor._extract_epics"
              ],
              "uid_type": "method"
            },
            {
              "name": "_extract_tasks",
              "docstring": "Extract explicit task items.",
              "line_range": [
                170,
                194
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ],
              "uid": "scripts.create_tasks_index.TaskExtractor._extract_tasks",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index.TaskExtractor",
                "scripts.create_tasks_index.TaskExtractor._extract_tasks"
              ],
              "uid_type": "method"
            },
            {
              "name": "_extract_todos",
              "docstring": "Extract TODO items.",
              "line_range": [
                196,
                219
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ],
              "uid": "scripts.create_tasks_index.TaskExtractor._extract_todos",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index.TaskExtractor",
                "scripts.create_tasks_index.TaskExtractor._extract_todos"
              ],
              "uid_type": "method"
            },
            {
              "name": "_extract_phases",
              "docstring": "Extract phase/step items.",
              "line_range": [
                221,
                245
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ],
              "uid": "scripts.create_tasks_index.TaskExtractor._extract_phases",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index.TaskExtractor",
                "scripts.create_tasks_index.TaskExtractor._extract_phases"
              ],
              "uid_type": "method"
            },
            {
              "name": "_extract_checkboxes",
              "docstring": "Extract checkbox items as tasks.",
              "line_range": [
                247,
                275
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ],
              "uid": "scripts.create_tasks_index.TaskExtractor._extract_checkboxes",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index.TaskExtractor",
                "scripts.create_tasks_index.TaskExtractor._extract_checkboxes"
              ],
              "uid_type": "method"
            },
            {
              "name": "_extract_context",
              "docstring": "Extract surrounding context for a match.",
              "line_range": [
                277,
                286
              ],
              "parameters": [
                "self",
                "content",
                "start",
                "end",
                "context_lines"
              ],
              "uid": "scripts.create_tasks_index.TaskExtractor._extract_context",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index.TaskExtractor",
                "scripts.create_tasks_index.TaskExtractor._extract_context"
              ],
              "uid_type": "method"
            }
          ],
          "bases": [],
          "uid": "scripts.create_tasks_index.TaskExtractor",
          "uid_components": [
            "scripts",
            "scripts.create_tasks_index",
            "scripts.create_tasks_index.TaskExtractor"
          ],
          "uid_type": "class"
        },
        {
          "name": "TaskIndexGenerator",
          "docstring": "Generate comprehensive task index.",
          "line_range": [
            289,
            466
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                292,
                294
              ],
              "parameters": [
                "self",
                "project_root"
              ],
              "uid": "scripts.create_tasks_index.TaskIndexGenerator.__init__",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index.TaskIndexGenerator",
                "scripts.create_tasks_index.TaskIndexGenerator.__init__"
              ],
              "uid_type": "method"
            },
            {
              "name": "scan_documentation",
              "docstring": "Scan all documentation files for tasks.",
              "line_range": [
                296,
                314
              ],
              "parameters": [
                "self"
              ],
              "uid": "scripts.create_tasks_index.TaskIndexGenerator.scan_documentation",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index.TaskIndexGenerator",
                "scripts.create_tasks_index.TaskIndexGenerator.scan_documentation"
              ],
              "uid_type": "method"
            },
            {
              "name": "generate_index",
              "docstring": "Generate comprehensive task index.",
              "line_range": [
                316,
                367
              ],
              "parameters": [
                "self",
                "tasks"
              ],
              "uid": "scripts.create_tasks_index.TaskIndexGenerator.generate_index",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index.TaskIndexGenerator",
                "scripts.create_tasks_index.TaskIndexGenerator.generate_index"
              ],
              "uid_type": "method"
            },
            {
              "name": "generate_summary_report",
              "docstring": "Generate human-readable summary report.",
              "line_range": [
                369,
                446
              ],
              "parameters": [
                "self",
                "index"
              ],
              "uid": "scripts.create_tasks_index.TaskIndexGenerator.generate_summary_report",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index.TaskIndexGenerator",
                "scripts.create_tasks_index.TaskIndexGenerator.generate_summary_report"
              ],
              "uid_type": "method"
            },
            {
              "name": "save_index",
              "docstring": "Save index and summary to files.",
              "line_range": [
                448,
                466
              ],
              "parameters": [
                "self",
                "index",
                "summary",
                "output_dir"
              ],
              "uid": "scripts.create_tasks_index.TaskIndexGenerator.save_index",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index.TaskIndexGenerator",
                "scripts.create_tasks_index.TaskIndexGenerator.save_index"
              ],
              "uid_type": "method"
            }
          ],
          "bases": [],
          "uid": "scripts.create_tasks_index.TaskIndexGenerator",
          "uid_components": [
            "scripts",
            "scripts.create_tasks_index",
            "scripts.create_tasks_index.TaskIndexGenerator"
          ],
          "uid_type": "class"
        }
      ],
      "callgraph": {
        "__init__": [
          "TaskExtractor",
          "Path"
        ],
        "_init_patterns": [
          "re.compile"
        ],
        "extract_from_markdown": [
          "self._extract_date",
          "self._extract_priority",
          "self._extract_status",
          "open",
          "self._extract_phases",
          "self._extract_todos",
          "f.read",
          "logger.error",
          "self._extract_checkboxes",
          "self._extract_tasks",
          "tasks.extend",
          "self._extract_epics"
        ],
        "_extract_status": [
          "match.group"
        ],
        "_extract_priority": [
          "match.group"
        ],
        "_extract_date": [
          "datetime.now",
          "match.group"
        ],
        "_extract_epics": [
          "self._extract_context",
          "tasks.append",
          "Task",
          "str",
          "match.start",
          "match.end",
          "match.group"
        ],
        "_extract_tasks": [
          "self._extract_context",
          "tasks.append",
          "Task",
          "str",
          "match.start",
          "match.end",
          "match.group"
        ],
        "_extract_todos": [
          "tasks.append",
          "Task",
          "str",
          "match.start",
          "match.group"
        ],
        "_extract_phases": [
          "self._extract_context",
          "tasks.append",
          "Task",
          "str",
          "match.start",
          "match.end",
          "match.group"
        ],
        "_extract_checkboxes": [
          "any",
          "tasks.append",
          "Task",
          "str",
          "match.start",
          "task_title.upper",
          "match.group"
        ],
        "_extract_context": [
          "len",
          "max",
          "context.strip",
          "content.split",
          "min"
        ],
        "scan_documentation": [
          "all_tasks.extend",
          "docs_dir.exists",
          "docs_dir.glob",
          "logger.info"
        ],
        "generate_index": [
          "len",
          "by_priority.items",
          "datetime.now",
          "by_status.items",
          "by_file.items",
          "asdict",
          "by_category.items"
        ],
        "generate_summary_report": [
          "file_categories.items",
          "len",
          "category.upper",
          "status.upper",
          "priority.upper",
          "Path",
          "sorted"
        ],
        "save_index": [
          "output_path.mkdir",
          "f.write",
          "open",
          "Path",
          "logger.info",
          "json.dump"
        ],
        "main": [
          "TaskIndexGenerator",
          "by_status.get",
          "argparse.ArgumentParser",
          "len",
          "parser.add_argument",
          "by_category.items",
          "print",
          "generator.save_index",
          "by_category.get",
          "generator.scan_documentation",
          "parser.parse_args",
          "generator.generate_summary_report",
          "logger.info",
          "by_status.items",
          "sorted",
          "generator.generate_index"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "argparse",
        "asdict",
        "dataclass",
        "dataclasses",
        "datetime",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "typing"
      ],
      "hash": "8dc454229e01725267e1ece8a1363faf1501013df5f34f371865de1d1d386035",
      "uid": "scripts.create_tasks_index",
      "uid_components": [
        "scripts",
        "scripts.create_tasks_index"
      ],
      "uid_type": "module",
      "artifact_id": "483f20d6-e58e-e1a6-0ef8-fe7c456c9b30",
      "metrics": {
        "cyclomatic_complexity": 24,
        "lines_of_code": 180,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 16,
        "test_coverage": 0.0,
        "maintainability_index": 0
      },
      "markdown_anchor": {
        "id": "scripts-create_tasks_index",
        "title": "Module: scripts.create_tasks_index",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: scripts.create_tasks_index](#scripts-create_tasks_index)",
        "html_anchor": "<a id=\"scripts-create_tasks_index\"></a>"
      }
    },
    {
      "module_id": "llmstruct.templates.__init__",
      "path": "llmstruct/templates/__init__.py",
      "category": "cli",
      "module_doc": "Templates for LLM prompts used in LLMStruct integration.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "2421ea45b39e72f090ee252149c45385f679971e48ca50f0883e313c3db9fa6d",
      "uid": "llmstruct.templates.__init__",
      "uid_components": [
        "llmstruct",
        "llmstruct.templates",
        "llmstruct.templates.__init__"
      ],
      "uid_type": "module",
      "artifact_id": "5a0bec58-9b06-cbd7-f3b6-a3ce75f15c26",
      "metrics": {
        "cyclomatic_complexity": 0,
        "lines_of_code": 0,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 0,
        "test_coverage": 0.0,
        "maintainability_index": 100
      },
      "markdown_anchor": {
        "id": "llmstruct-templates-__init__",
        "title": "Module: llmstruct.templates.__init__",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.templates.__init__](#llmstruct-templates-__init__)",
        "html_anchor": "<a id=\"llmstruct-templates-__init__\"></a>"
      }
    },
    {
      "module_id": "llmstruct.ARCHIVE.cli_argument_parser",
      "path": "llmstruct/ARCHIVE/cli_argument_parser.py",
      "category": "core",
      "module_doc": "CLI argument parsing for LLMStruct.",
      "functions": [
        {
          "name": "create_argument_parser",
          "docstring": "Create and configure the main argument parser.",
          "line_range": [
            14,
            113
          ],
          "parameters": [],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_argument_parser.create_argument_parser",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_argument_parser",
            "llmstruct.ARCHIVE.cli_argument_parser.create_argument_parser"
          ],
          "uid_type": "function"
        },
        {
          "name": "add_api_bot_commands",
          "docstring": "Add API and bot management commands to the parser.",
          "line_range": [
            116,
            126
          ],
          "parameters": [
            "subparsers"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_argument_parser.add_api_bot_commands",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_argument_parser",
            "llmstruct.ARCHIVE.cli_argument_parser.add_api_bot_commands"
          ],
          "uid_type": "function"
        },
        {
          "name": "create_full_argument_parser",
          "docstring": "Create the full argument parser with all commands.",
          "line_range": [
            129,
            137
          ],
          "parameters": [],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_argument_parser.create_full_argument_parser",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_argument_parser",
            "llmstruct.ARCHIVE.cli_argument_parser.create_full_argument_parser"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [],
      "callgraph": {
        "create_argument_parser": [
          "parser.add_subparsers",
          "argparse.ArgumentParser",
          "audit_parser.add_argument",
          "review_parser.add_argument",
          "interactive_parser.add_argument",
          "duplicates_parser.add_argument",
          "query_parser.add_argument",
          "dogfood_parser.add_argument",
          "subparsers.add_parser",
          "copilot_parser.add_argument",
          "parse_parser.add_argument",
          "context_parser.add_argument"
        ],
        "add_api_bot_commands": [
          "add_api_commands",
          "add_bot_commands"
        ],
        "create_full_argument_parser": [
          "create_argument_parser",
          "add_api_bot_commands"
        ]
      },
      "dependencies": [
        "Path",
        "add_api_commands",
        "add_bot_commands",
        "api_commands",
        "argparse",
        "bot_commands",
        "pathlib"
      ],
      "hash": "e54ef1274816747eae572b5045a59d35b9d2eb27b4358919ab57d61cef9fb47b",
      "uid": "llmstruct.ARCHIVE.cli_argument_parser",
      "uid_components": [
        "llmstruct",
        "llmstruct.ARCHIVE",
        "llmstruct.ARCHIVE.cli_argument_parser"
      ],
      "uid_type": "module",
      "artifact_id": "29c72c43-22f1-cf0a-42e4-ab349153c323",
      "metrics": {
        "cyclomatic_complexity": 3,
        "lines_of_code": 30,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 7,
        "test_coverage": 0.0,
        "maintainability_index": 85
      },
      "markdown_anchor": {
        "id": "llmstruct-archive-cli_argument_parser",
        "title": "Module: llmstruct.ARCHIVE.cli_argument_parser",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.ARCHIVE.cli_argument_parser](#llmstruct-archive-cli_argument_parser)",
        "html_anchor": "<a id=\"llmstruct-archive-cli_argument_parser\"></a>"
      }
    },
    {
      "module_id": "llmstruct.ARCHIVE.cli_core",
      "path": "llmstruct/ARCHIVE/cli_core.py",
      "category": "core",
      "module_doc": "Core CLI functionality and main loop.",
      "functions": [
        {
          "name": "create_cli_core",
          "docstring": "Factory function to create CLI core instance.",
          "line_range": [
            110,
            112
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_core.create_cli_core",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_core",
            "llmstruct.ARCHIVE.cli_core.create_cli_core"
          ],
          "uid_type": "function"
        },
        {
          "name": "__init__",
          "docstring": "Initialize CLI core with root directory.",
          "line_range": [
            28,
            35
          ],
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_core.__init__",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_core",
            "llmstruct.ARCHIVE.cli_core.__init__"
          ],
          "uid_type": "function"
        },
        {
          "name": "setup_cache",
          "docstring": "Initialize cache if enabled in config.",
          "line_range": [
            37,
            53
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_core.setup_cache",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_core",
            "llmstruct.ARCHIVE.cli_core.setup_cache"
          ],
          "uid_type": "function"
        },
        {
          "name": "setup_copilot",
          "docstring": "Initialize Copilot integration if enabled.",
          "line_range": [
            55,
            63
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_core.setup_copilot",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_core",
            "llmstruct.ARCHIVE.cli_core.setup_copilot"
          ],
          "uid_type": "function"
        },
        {
          "name": "run_interactive_mode",
          "docstring": "Run the interactive CLI mode.",
          "line_range": [
            65,
            97
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_core.run_interactive_mode",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_core",
            "llmstruct.ARCHIVE.cli_core.run_interactive_mode"
          ],
          "uid_type": "function"
        },
        {
          "name": "cleanup",
          "docstring": "Clean up resources.",
          "line_range": [
            99,
            107
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_core.cleanup",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_core",
            "llmstruct.ARCHIVE.cli_core.cleanup"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [
        {
          "name": "CLICore",
          "docstring": "Core CLI class handling main loop and coordination.",
          "line_range": [
            25,
            107
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize CLI core with root directory.",
              "line_range": [
                28,
                35
              ],
              "parameters": [
                "self",
                "root_dir"
              ],
              "uid": "llmstruct.ARCHIVE.cli_core.CLICore.__init__",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_core",
                "llmstruct.ARCHIVE.cli_core.CLICore",
                "llmstruct.ARCHIVE.cli_core.CLICore.__init__"
              ],
              "uid_type": "method"
            },
            {
              "name": "setup_cache",
              "docstring": "Initialize cache if enabled in config.",
              "line_range": [
                37,
                53
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.ARCHIVE.cli_core.CLICore.setup_cache",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_core",
                "llmstruct.ARCHIVE.cli_core.CLICore",
                "llmstruct.ARCHIVE.cli_core.CLICore.setup_cache"
              ],
              "uid_type": "method"
            },
            {
              "name": "setup_copilot",
              "docstring": "Initialize Copilot integration if enabled.",
              "line_range": [
                55,
                63
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.ARCHIVE.cli_core.CLICore.setup_copilot",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_core",
                "llmstruct.ARCHIVE.cli_core.CLICore",
                "llmstruct.ARCHIVE.cli_core.CLICore.setup_copilot"
              ],
              "uid_type": "method"
            },
            {
              "name": "run_interactive_mode",
              "docstring": "Run the interactive CLI mode.",
              "line_range": [
                65,
                97
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.ARCHIVE.cli_core.CLICore.run_interactive_mode",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_core",
                "llmstruct.ARCHIVE.cli_core.CLICore",
                "llmstruct.ARCHIVE.cli_core.CLICore.run_interactive_mode"
              ],
              "uid_type": "method"
            },
            {
              "name": "cleanup",
              "docstring": "Clean up resources.",
              "line_range": [
                99,
                107
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.ARCHIVE.cli_core.CLICore.cleanup",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_core",
                "llmstruct.ARCHIVE.cli_core.CLICore",
                "llmstruct.ARCHIVE.cli_core.CLICore.cleanup"
              ],
              "uid_type": "method"
            }
          ],
          "bases": [],
          "uid": "llmstruct.ARCHIVE.cli_core.CLICore",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_core",
            "llmstruct.ARCHIVE.cli_core.CLICore"
          ],
          "uid_type": "class"
        }
      ],
      "callgraph": {
        "__init__": [
          "CommandProcessor",
          "CLIUtils",
          "CLIConfig"
        ],
        "setup_cache": [
          "logging.warning",
          "Path",
          "str",
          "JSONCache",
          "logging.info",
          "cache_path.mkdir",
          "cache_config.get"
        ],
        "setup_copilot": [
          "initialize_copilot",
          "logging.info",
          "copilot_config.get",
          "logging.warning"
        ],
        "run_interactive_mode": [
          "input",
          "user_input.lower",
          "print",
          "self.setup_copilot",
          "user_input.startswith",
          "self.setup_cache",
          "logging.error",
          "self.cleanup"
        ],
        "cleanup": [
          "logging.info"
        ],
        "create_cli_core": [
          "CLICore"
        ]
      },
      "dependencies": [
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "CopilotContextManager",
        "JSONCache",
        "Optional",
        "Path",
        "cli_commands",
        "cli_config",
        "cli_utils",
        "copilot",
        "initialize_copilot",
        "llmstruct.cache",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": "57a534c55c12bacfaf26ed4b4124fe97a3c2559253b5a62346e9c9f0368e5132",
      "uid": "llmstruct.ARCHIVE.cli_core",
      "uid_components": [
        "llmstruct",
        "llmstruct.ARCHIVE",
        "llmstruct.ARCHIVE.cli_core"
      ],
      "uid_type": "module",
      "artifact_id": "da6895e4-e8b1-8c4c-0b35-dcb62de6a925",
      "metrics": {
        "cyclomatic_complexity": 8,
        "lines_of_code": 60,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 16,
        "test_coverage": 0.0,
        "maintainability_index": 60
      },
      "markdown_anchor": {
        "id": "llmstruct-archive-cli_core",
        "title": "Module: llmstruct.ARCHIVE.cli_core",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.ARCHIVE.cli_core](#llmstruct-archive-cli_core)",
        "html_anchor": "<a id=\"llmstruct-archive-cli_core\"></a>"
      }
    },
    {
      "module_id": "llmstruct.ARCHIVE.cli_utils",
      "path": "llmstruct/ARCHIVE/cli_utils.py",
      "category": "core",
      "module_doc": "CLI utility functions.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize utils with root directory.",
          "line_range": [
            24,
            26
          ],
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_utils.__init__",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_utils",
            "llmstruct.ARCHIVE.cli_utils.__init__"
          ],
          "uid_type": "function"
        },
        {
          "name": "read_file_content",
          "docstring": "Read file content with size limit.",
          "line_range": [
            28,
            50
          ],
          "parameters": [
            "self",
            "file_path",
            "max_size"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_utils.read_file_content",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_utils",
            "llmstruct.ARCHIVE.cli_utils.read_file_content"
          ],
          "uid_type": "function"
        },
        {
          "name": "write_file_content",
          "docstring": "Write content to file.",
          "line_range": [
            52,
            70
          ],
          "parameters": [
            "self",
            "file_path",
            "content"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_utils.write_file_content",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_utils",
            "llmstruct.ARCHIVE.cli_utils.write_file_content"
          ],
          "uid_type": "function"
        },
        {
          "name": "get_directory_structure",
          "docstring": "Get directory structure using folder generator.",
          "line_range": [
            72,
            115
          ],
          "parameters": [
            "self",
            "path",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_utils.get_directory_structure",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_utils",
            "llmstruct.ARCHIVE.cli_utils.get_directory_structure"
          ],
          "uid_type": "function"
        },
        {
          "name": "validate_json",
          "docstring": "Validate JSON content.",
          "line_range": [
            117,
            123
          ],
          "parameters": [
            "self",
            "content"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_utils.validate_json",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_utils",
            "llmstruct.ARCHIVE.cli_utils.validate_json"
          ],
          "uid_type": "function"
        },
        {
          "name": "format_json",
          "docstring": "Format data as JSON string.",
          "line_range": [
            125,
            131
          ],
          "parameters": [
            "self",
            "data",
            "indent"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_utils.format_json",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_utils",
            "llmstruct.ARCHIVE.cli_utils.format_json"
          ],
          "uid_type": "function"
        },
        {
          "name": "generate_unique_id",
          "docstring": "Generate unique ID for commands, queues, etc.",
          "line_range": [
            133,
            137
          ],
          "parameters": [
            "self",
            "prefix"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_utils.generate_unique_id",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_utils",
            "llmstruct.ARCHIVE.cli_utils.generate_unique_id"
          ],
          "uid_type": "function"
        },
        {
          "name": "safe_path_join",
          "docstring": "Safely join path parts, preventing directory traversal.",
          "line_range": [
            139,
            149
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_utils.safe_path_join",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_utils",
            "llmstruct.ARCHIVE.cli_utils.safe_path_join"
          ],
          "uid_type": "function"
        },
        {
          "name": "file_exists",
          "docstring": "Check if file exists.",
          "line_range": [
            151,
            157
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_utils.file_exists",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_utils",
            "llmstruct.ARCHIVE.cli_utils.file_exists"
          ],
          "uid_type": "function"
        },
        {
          "name": "dir_exists",
          "docstring": "Check if directory exists.",
          "line_range": [
            159,
            165
          ],
          "parameters": [
            "self",
            "dir_path"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_utils.dir_exists",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_utils",
            "llmstruct.ARCHIVE.cli_utils.dir_exists"
          ],
          "uid_type": "function"
        },
        {
          "name": "get_file_size",
          "docstring": "Get file size in bytes.",
          "line_range": [
            167,
            173
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_utils.get_file_size",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_utils",
            "llmstruct.ARCHIVE.cli_utils.get_file_size"
          ],
          "uid_type": "function"
        },
        {
          "name": "backup_file",
          "docstring": "Create backup of file with timestamp.",
          "line_range": [
            175,
            191
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_utils.backup_file",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_utils",
            "llmstruct.ARCHIVE.cli_utils.backup_file"
          ],
          "uid_type": "function"
        },
        {
          "name": "cleanup_old_backups",
          "docstring": "Clean up old backup files, keeping only the most recent ones.",
          "line_range": [
            193,
            222
          ],
          "parameters": [
            "self",
            "file_path",
            "keep_count"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_utils.cleanup_old_backups",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_utils",
            "llmstruct.ARCHIVE.cli_utils.cleanup_old_backups"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [
        {
          "name": "CLIUtils",
          "docstring": "Utility functions for CLI operations.",
          "line_range": [
            21,
            222
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize utils with root directory.",
              "line_range": [
                24,
                26
              ],
              "parameters": [
                "self",
                "root_dir"
              ],
              "uid": "llmstruct.ARCHIVE.cli_utils.CLIUtils.__init__",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_utils",
                "llmstruct.ARCHIVE.cli_utils.CLIUtils",
                "llmstruct.ARCHIVE.cli_utils.CLIUtils.__init__"
              ],
              "uid_type": "method"
            },
            {
              "name": "read_file_content",
              "docstring": "Read file content with size limit.",
              "line_range": [
                28,
                50
              ],
              "parameters": [
                "self",
                "file_path",
                "max_size"
              ],
              "uid": "llmstruct.ARCHIVE.cli_utils.CLIUtils.read_file_content",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_utils",
                "llmstruct.ARCHIVE.cli_utils.CLIUtils",
                "llmstruct.ARCHIVE.cli_utils.CLIUtils.read_file_content"
              ],
              "uid_type": "method"
            },
            {
              "name": "write_file_content",
              "docstring": "Write content to file.",
              "line_range": [
                52,
                70
              ],
              "parameters": [
                "self",
                "file_path",
                "content"
              ],
              "uid": "llmstruct.ARCHIVE.cli_utils.CLIUtils.write_file_content",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_utils",
                "llmstruct.ARCHIVE.cli_utils.CLIUtils",
                "llmstruct.ARCHIVE.cli_utils.CLIUtils.write_file_content"
              ],
              "uid_type": "method"
            },
            {
              "name": "get_directory_structure",
              "docstring": "Get directory structure using folder generator.",
              "line_range": [
                72,
                115
              ],
              "parameters": [
                "self",
                "path",
                "gitignore_patterns",
                "include_patterns",
                "exclude_patterns",
                "exclude_dirs"
              ],
              "uid": "llmstruct.ARCHIVE.cli_utils.CLIUtils.get_directory_structure",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_utils",
                "llmstruct.ARCHIVE.cli_utils.CLIUtils",
                "llmstruct.ARCHIVE.cli_utils.CLIUtils.get_directory_structure"
              ],
              "uid_type": "method"
            },
            {
              "name": "validate_json",
              "docstring": "Validate JSON content.",
              "line_range": [
                117,
                123
              ],
              "parameters": [
                "self",
                "content"
              ],
              "uid": "llmstruct.ARCHIVE.cli_utils.CLIUtils.validate_json",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_utils",
                "llmstruct.ARCHIVE.cli_utils.CLIUtils",
                "llmstruct.ARCHIVE.cli_utils.CLIUtils.validate_json"
              ],
              "uid_type": "method"
            },
            {
              "name": "format_json",
              "docstring": "Format data as JSON string.",
              "line_range": [
                125,
                131
              ],
              "parameters": [
                "self",
                "data",
                "indent"
              ],
              "uid": "llmstruct.ARCHIVE.cli_utils.CLIUtils.format_json",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_utils",
                "llmstruct.ARCHIVE.cli_utils.CLIUtils",
                "llmstruct.ARCHIVE.cli_utils.CLIUtils.format_json"
              ],
              "uid_type": "method"
            },
            {
              "name": "generate_unique_id",
              "docstring": "Generate unique ID for commands, queues, etc.",
              "line_range": [
                133,
                137
              ],
              "parameters": [
                "self",
                "prefix"
              ],
              "uid": "llmstruct.ARCHIVE.cli_utils.CLIUtils.generate_unique_id",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_utils",
                "llmstruct.ARCHIVE.cli_utils.CLIUtils",
                "llmstruct.ARCHIVE.cli_utils.CLIUtils.generate_unique_id"
              ],
              "uid_type": "method"
            },
            {
              "name": "safe_path_join",
              "docstring": "Safely join path parts, preventing directory traversal.",
              "line_range": [
                139,
                149
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.ARCHIVE.cli_utils.CLIUtils.safe_path_join",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_utils",
                "llmstruct.ARCHIVE.cli_utils.CLIUtils",
                "llmstruct.ARCHIVE.cli_utils.CLIUtils.safe_path_join"
              ],
              "uid_type": "method"
            },
            {
              "name": "file_exists",
              "docstring": "Check if file exists.",
              "line_range": [
                151,
                157
              ],
              "parameters": [
                "self",
                "file_path"
              ],
              "uid": "llmstruct.ARCHIVE.cli_utils.CLIUtils.file_exists",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_utils",
                "llmstruct.ARCHIVE.cli_utils.CLIUtils",
                "llmstruct.ARCHIVE.cli_utils.CLIUtils.file_exists"
              ],
              "uid_type": "method"
            },
            {
              "name": "dir_exists",
              "docstring": "Check if directory exists.",
              "line_range": [
                159,
                165
              ],
              "parameters": [
                "self",
                "dir_path"
              ],
              "uid": "llmstruct.ARCHIVE.cli_utils.CLIUtils.dir_exists",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_utils",
                "llmstruct.ARCHIVE.cli_utils.CLIUtils",
                "llmstruct.ARCHIVE.cli_utils.CLIUtils.dir_exists"
              ],
              "uid_type": "method"
            },
            {
              "name": "get_file_size",
              "docstring": "Get file size in bytes.",
              "line_range": [
                167,
                173
              ],
              "parameters": [
                "self",
                "file_path"
              ],
              "uid": "llmstruct.ARCHIVE.cli_utils.CLIUtils.get_file_size",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_utils",
                "llmstruct.ARCHIVE.cli_utils.CLIUtils",
                "llmstruct.ARCHIVE.cli_utils.CLIUtils.get_file_size"
              ],
              "uid_type": "method"
            },
            {
              "name": "backup_file",
              "docstring": "Create backup of file with timestamp.",
              "line_range": [
                175,
                191
              ],
              "parameters": [
                "self",
                "file_path"
              ],
              "uid": "llmstruct.ARCHIVE.cli_utils.CLIUtils.backup_file",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_utils",
                "llmstruct.ARCHIVE.cli_utils.CLIUtils",
                "llmstruct.ARCHIVE.cli_utils.CLIUtils.backup_file"
              ],
              "uid_type": "method"
            },
            {
              "name": "cleanup_old_backups",
              "docstring": "Clean up old backup files, keeping only the most recent ones.",
              "line_range": [
                193,
                222
              ],
              "parameters": [
                "self",
                "file_path",
                "keep_count"
              ],
              "uid": "llmstruct.ARCHIVE.cli_utils.CLIUtils.cleanup_old_backups",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_utils",
                "llmstruct.ARCHIVE.cli_utils.CLIUtils",
                "llmstruct.ARCHIVE.cli_utils.CLIUtils.cleanup_old_backups"
              ],
              "uid_type": "method"
            }
          ],
          "bases": [],
          "uid": "llmstruct.ARCHIVE.cli_utils.CLIUtils",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_utils",
            "llmstruct.ARCHIVE.cli_utils.CLIUtils"
          ],
          "uid_type": "class"
        }
      ],
      "callgraph": {
        "__init__": [],
        "read_file_content": [
          "logging.warning",
          "os.stat",
          "open",
          "logging.error",
          "f.read"
        ],
        "write_file_content": [
          "open",
          "Path",
          "logging.error",
          "f.write",
          "logging.info"
        ],
        "get_directory_structure": [
          "logging.error",
          "get_folder_structure",
          "os.listdir",
          "sorted"
        ],
        "validate_json": [
          "json.loads",
          "str"
        ],
        "format_json": [
          "str",
          "json.dumps",
          "logging.error"
        ],
        "generate_unique_id": [
          "str",
          "uuid.uuid4",
          "int",
          "time.time"
        ],
        "safe_path_join": [
          "ValueError",
          "resolved_path.startswith"
        ],
        "file_exists": [
          "self.safe_path_join"
        ],
        "dir_exists": [
          "self.safe_path_join"
        ],
        "get_file_size": [
          "self.safe_path_join"
        ],
        "backup_file": [
          "self.safe_path_join",
          "open",
          "dst.write",
          "src.read",
          "time.time",
          "logging.error",
          "int"
        ],
        "cleanup_old_backups": [
          "os.remove",
          "self.safe_path_join",
          "logging.warning",
          "os.listdir",
          "logging.info",
          "logging.error",
          "int",
          "filename.split",
          "filename.startswith",
          "backups.sort",
          "backups.append"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "get_folder_structure",
        "json",
        "llmstruct.generators.json_generator",
        "logging",
        "os",
        "pathlib",
        "time",
        "typing",
        "uuid"
      ],
      "hash": "105ac5d21c6d1870ac478aadb62ca79e99a3453df4457642fcda39f575abf367",
      "uid": "llmstruct.ARCHIVE.cli_utils",
      "uid_components": [
        "llmstruct",
        "llmstruct.ARCHIVE",
        "llmstruct.ARCHIVE.cli_utils"
      ],
      "uid_type": "module",
      "artifact_id": "b1999703-b6c6-e00b-883f-76a844c39baf",
      "metrics": {
        "cyclomatic_complexity": 15,
        "lines_of_code": 130,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 14,
        "test_coverage": 0.0,
        "maintainability_index": 25
      },
      "markdown_anchor": {
        "id": "llmstruct-archive-cli_utils",
        "title": "Module: llmstruct.ARCHIVE.cli_utils",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.ARCHIVE.cli_utils](#llmstruct-archive-cli_utils)",
        "html_anchor": "<a id=\"llmstruct-archive-cli_utils\"></a>"
      }
    },
    {
      "module_id": "llmstruct.ARCHIVE.cli_main_commands",
      "path": "llmstruct/ARCHIVE/cli_main_commands.py",
      "category": "core",
      "module_doc": "Main CLI command handlers for LLMStruct.",
      "functions": [
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": [
            33,
            68
          ],
          "parameters": [
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_main_commands.parse",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_main_commands",
            "llmstruct.ARCHIVE.cli_main_commands.parse"
          ],
          "uid_type": "function"
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": [
            71,
            127
          ],
          "parameters": [
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_main_commands.query",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_main_commands",
            "llmstruct.ARCHIVE.cli_main_commands.query"
          ],
          "uid_type": "function"
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with modular structure if available, fallback to legacy.",
          "line_range": [
            130,
            136
          ],
          "parameters": [
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_main_commands.interactive",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_main_commands",
            "llmstruct.ARCHIVE.cli_main_commands.interactive"
          ],
          "uid_type": "function"
        },
        {
          "name": "interactive_modular",
          "docstring": "Run interactive CLI with modular structure.",
          "line_range": [
            139,
            146
          ],
          "parameters": [
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_main_commands.interactive_modular",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_main_commands",
            "llmstruct.ARCHIVE.cli_main_commands.interactive_modular"
          ],
          "uid_type": "function"
        },
        {
          "name": "interactive_legacy",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": [
            149,
            175
          ],
          "parameters": [
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_main_commands.interactive_legacy",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_main_commands",
            "llmstruct.ARCHIVE.cli_main_commands.interactive_legacy"
          ],
          "uid_type": "function"
        },
        {
          "name": "basic_interactive_processing",
          "docstring": "Basic interactive processing without enhanced features.",
          "line_range": [
            178,
            230
          ],
          "parameters": [
            "args",
            "cache",
            "client"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_main_commands.basic_interactive_processing",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_main_commands",
            "llmstruct.ARCHIVE.cli_main_commands.basic_interactive_processing"
          ],
          "uid_type": "function"
        },
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": [
            233,
            235
          ],
          "parameters": [
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_main_commands.context",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_main_commands",
            "llmstruct.ARCHIVE.cli_main_commands.context"
          ],
          "uid_type": "function"
        },
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": [
            238,
            240
          ],
          "parameters": [
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_main_commands.dogfood",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_main_commands",
            "llmstruct.ARCHIVE.cli_main_commands.dogfood"
          ],
          "uid_type": "function"
        },
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": [
            243,
            245
          ],
          "parameters": [
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_main_commands.review",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_main_commands",
            "llmstruct.ARCHIVE.cli_main_commands.review"
          ],
          "uid_type": "function"
        },
        {
          "name": "copilot",
          "docstring": "Copilot integration and context management.",
          "line_range": [
            248,
            366
          ],
          "parameters": [
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_main_commands.copilot",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_main_commands",
            "llmstruct.ARCHIVE.cli_main_commands.copilot"
          ],
          "uid_type": "function"
        },
        {
          "name": "audit",
          "docstring": "Audit project structure and generate reports.",
          "line_range": [
            369,
            387
          ],
          "parameters": [
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_main_commands.audit",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_main_commands",
            "llmstruct.ARCHIVE.cli_main_commands.audit"
          ],
          "uid_type": "function"
        },
        {
          "name": "analyze_duplicates",
          "docstring": "Analyze function duplication using struct.json deep analysis.",
          "line_range": [
            390,
            495
          ],
          "parameters": [
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_main_commands.analyze_duplicates",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_main_commands",
            "llmstruct.ARCHIVE.cli_main_commands.analyze_duplicates"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [],
      "callgraph": {
        "parse": [
          "load_gitignore",
          "generate_json",
          "cache.close",
          "attach_to_llm_request",
          "logging.error",
          "JSONCache",
          "logging.info"
        ],
        "query": [
          "hasattr",
          "client.query_with_context",
          "cache.close",
          "logging.warning",
          "Path",
          "client.query",
          "logging.error",
          "json.dump",
          "LLMClient",
          "JSONCache",
          "create_context_orchestrator",
          "logging.info",
          "orchestrator.get_context_for_scenario"
        ],
        "interactive": [
          "interactive_legacy",
          "interactive_modular",
          "logging.warning"
        ],
        "interactive_modular": [
          "create_cli_core",
          "logging.error",
          "interactive_legacy",
          "cli_core.run_interactive_mode"
        ],
        "interactive_legacy": [
          "basic_interactive_processing",
          "cache.close",
          "print",
          "Path",
          "logging.error",
          "LLMClient",
          "JSONCache",
          "process_cli_queue_enhanced"
        ],
        "basic_interactive_processing": [
          "input",
          "user_input.lower",
          "print",
          "user_input.startswith",
          "open",
          "client.query",
          "f.read"
        ],
        "context": [
          "logging.warning"
        ],
        "dogfood": [
          "logging.warning"
        ],
        "review": [
          "logging.warning"
        ],
        "copilot": [
          "hasattr",
          "open",
          "manager.load_context_layer",
          "manager.validate_change",
          "initialize_copilot",
          "manager.close",
          "print",
          "manager.export_context",
          "getattr",
          "shutil.copy",
          "config_path.exists",
          "enumerate",
          "manager.get_context_status",
          "smart_suggest",
          "manager.refresh_all_contexts",
          "template_path.exists",
          "Path",
          "manager.unload_context_layer",
          "logging.error",
          "layers.split",
          "f.write",
          "logging.info"
        ],
        "audit": [
          "analyze_duplicates",
          "hasattr",
          "print",
          "Path",
          "file_path.exists"
        ],
        "analyze_duplicates": [
          "f.get",
          "orchestrator.analyze_codebase_for_duplicates",
          "len",
          "print",
          "open",
          "analysis.get",
          "getattr",
          "json.dumps",
          "logging.error",
          "json.dump",
          "WorkflowOrchestrator",
          "func.get"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "Optional",
        "Path",
        "WorkflowOrchestrator",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "cli",
        "cli_core",
        "context_orchestrator",
        "copilot",
        "create_cli_core",
        "create_context_orchestrator",
        "generate_json",
        "initialize_copilot",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "load_gitignore",
        "logging",
        "os",
        "pathlib",
        "process_cli_queue_enhanced",
        "shutil",
        "smart_suggest",
        "typing",
        "workflow_orchestrator"
      ],
      "hash": "06e7d297542ace93514d731c2af8e0f0daa4c7c3a8fc1e90466f3b5fc5486189",
      "uid": "llmstruct.ARCHIVE.cli_main_commands",
      "uid_components": [
        "llmstruct",
        "llmstruct.ARCHIVE",
        "llmstruct.ARCHIVE.cli_main_commands"
      ],
      "uid_type": "module",
      "artifact_id": "009a509c-318a-7b41-59a1-da6b0755aa04",
      "metrics": {
        "cyclomatic_complexity": 12,
        "lines_of_code": 120,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 30,
        "test_coverage": 0.0,
        "maintainability_index": 40
      },
      "markdown_anchor": {
        "id": "llmstruct-archive-cli_main_commands",
        "title": "Module: llmstruct.ARCHIVE.cli_main_commands",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.ARCHIVE.cli_main_commands](#llmstruct-archive-cli_main_commands)",
        "html_anchor": "<a id=\"llmstruct-archive-cli_main_commands\"></a>"
      }
    },
    {
      "module_id": "llmstruct.ARCHIVE.cli_config",
      "path": "llmstruct/ARCHIVE/cli_config.py",
      "category": "core",
      "module_doc": "CLI configuration management.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize configuration manager.",
          "line_range": [
            20,
            24
          ],
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_config.__init__",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_config",
            "llmstruct.ARCHIVE.cli_config.__init__"
          ],
          "uid_type": "function"
        },
        {
          "name": "_load_config",
          "docstring": "Load configuration from llmstruct.toml.",
          "line_range": [
            26,
            34
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_config._load_config",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_config",
            "llmstruct.ARCHIVE.cli_config._load_config"
          ],
          "uid_type": "function"
        },
        {
          "name": "get_cache_config",
          "docstring": "Get cache configuration section.",
          "line_range": [
            36,
            38
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_config.get_cache_config",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_config",
            "llmstruct.ARCHIVE.cli_config.get_cache_config"
          ],
          "uid_type": "function"
        },
        {
          "name": "get_copilot_config",
          "docstring": "Get Copilot configuration section.",
          "line_range": [
            40,
            42
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_config.get_copilot_config",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_config",
            "llmstruct.ARCHIVE.cli_config.get_copilot_config"
          ],
          "uid_type": "function"
        },
        {
          "name": "get_queue_config",
          "docstring": "Get queue configuration section.",
          "line_range": [
            44,
            46
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_config.get_queue_config",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_config",
            "llmstruct.ARCHIVE.cli_config.get_queue_config"
          ],
          "uid_type": "function"
        },
        {
          "name": "get_context_config",
          "docstring": "Get context configuration section.",
          "line_range": [
            48,
            50
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_config.get_context_config",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_config",
            "llmstruct.ARCHIVE.cli_config.get_context_config"
          ],
          "uid_type": "function"
        },
        {
          "name": "get_gitignore_patterns",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": [
            52,
            66
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_config.get_gitignore_patterns",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_config",
            "llmstruct.ARCHIVE.cli_config.get_gitignore_patterns"
          ],
          "uid_type": "function"
        },
        {
          "name": "get_exclude_dirs",
          "docstring": "Get directories to exclude from scanning.",
          "line_range": [
            68,
            82
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_config.get_exclude_dirs",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_config",
            "llmstruct.ARCHIVE.cli_config.get_exclude_dirs"
          ],
          "uid_type": "function"
        },
        {
          "name": "get_include_patterns",
          "docstring": "Get file patterns to include.",
          "line_range": [
            84,
            89
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_config.get_include_patterns",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_config",
            "llmstruct.ARCHIVE.cli_config.get_include_patterns"
          ],
          "uid_type": "function"
        },
        {
          "name": "get_exclude_patterns",
          "docstring": "Get file patterns to exclude.",
          "line_range": [
            91,
            96
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_config.get_exclude_patterns",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_config",
            "llmstruct.ARCHIVE.cli_config.get_exclude_patterns"
          ],
          "uid_type": "function"
        },
        {
          "name": "get_max_file_size",
          "docstring": "Get maximum file size for processing (in bytes).",
          "line_range": [
            98,
            100
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_config.get_max_file_size",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_config",
            "llmstruct.ARCHIVE.cli_config.get_max_file_size"
          ],
          "uid_type": "function"
        },
        {
          "name": "get_auto_update_config",
          "docstring": "Get auto-update configuration.",
          "line_range": [
            102,
            104
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_config.get_auto_update_config",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_config",
            "llmstruct.ARCHIVE.cli_config.get_auto_update_config"
          ],
          "uid_type": "function"
        },
        {
          "name": "is_auto_update_enabled",
          "docstring": "Check if auto-update is enabled.",
          "line_range": [
            106,
            108
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_config.is_auto_update_enabled",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_config",
            "llmstruct.ARCHIVE.cli_config.is_auto_update_enabled"
          ],
          "uid_type": "function"
        },
        {
          "name": "get_struct_file_path",
          "docstring": "Get path to struct.json file.",
          "line_range": [
            110,
            112
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_config.get_struct_file_path",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_config",
            "llmstruct.ARCHIVE.cli_config.get_struct_file_path"
          ],
          "uid_type": "function"
        },
        {
          "name": "get_context_file_path",
          "docstring": "Get path to context file.",
          "line_range": [
            114,
            116
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_config.get_context_file_path",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_config",
            "llmstruct.ARCHIVE.cli_config.get_context_file_path"
          ],
          "uid_type": "function"
        },
        {
          "name": "save_config",
          "docstring": "Save current configuration to file.",
          "line_range": [
            118,
            124
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_config.save_config",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_config",
            "llmstruct.ARCHIVE.cli_config.save_config"
          ],
          "uid_type": "function"
        },
        {
          "name": "update_config",
          "docstring": "Update configuration value.",
          "line_range": [
            126,
            131
          ],
          "parameters": [
            "self",
            "section",
            "key",
            "value"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_config.update_config",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_config",
            "llmstruct.ARCHIVE.cli_config.update_config"
          ],
          "uid_type": "function"
        },
        {
          "name": "reload_config",
          "docstring": "Reload configuration from file.",
          "line_range": [
            133,
            135
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_config.reload_config",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_config",
            "llmstruct.ARCHIVE.cli_config.reload_config"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [
        {
          "name": "CLIConfig",
          "docstring": "Manages CLI configuration from llmstruct.toml and other sources.",
          "line_range": [
            17,
            135
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize configuration manager.",
              "line_range": [
                20,
                24
              ],
              "parameters": [
                "self",
                "root_dir"
              ],
              "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig.__init__",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config.CLIConfig",
                "llmstruct.ARCHIVE.cli_config.CLIConfig.__init__"
              ],
              "uid_type": "method"
            },
            {
              "name": "_load_config",
              "docstring": "Load configuration from llmstruct.toml.",
              "line_range": [
                26,
                34
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig._load_config",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config.CLIConfig",
                "llmstruct.ARCHIVE.cli_config.CLIConfig._load_config"
              ],
              "uid_type": "method"
            },
            {
              "name": "get_cache_config",
              "docstring": "Get cache configuration section.",
              "line_range": [
                36,
                38
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig.get_cache_config",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config.CLIConfig",
                "llmstruct.ARCHIVE.cli_config.CLIConfig.get_cache_config"
              ],
              "uid_type": "method"
            },
            {
              "name": "get_copilot_config",
              "docstring": "Get Copilot configuration section.",
              "line_range": [
                40,
                42
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig.get_copilot_config",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config.CLIConfig",
                "llmstruct.ARCHIVE.cli_config.CLIConfig.get_copilot_config"
              ],
              "uid_type": "method"
            },
            {
              "name": "get_queue_config",
              "docstring": "Get queue configuration section.",
              "line_range": [
                44,
                46
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig.get_queue_config",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config.CLIConfig",
                "llmstruct.ARCHIVE.cli_config.CLIConfig.get_queue_config"
              ],
              "uid_type": "method"
            },
            {
              "name": "get_context_config",
              "docstring": "Get context configuration section.",
              "line_range": [
                48,
                50
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig.get_context_config",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config.CLIConfig",
                "llmstruct.ARCHIVE.cli_config.CLIConfig.get_context_config"
              ],
              "uid_type": "method"
            },
            {
              "name": "get_gitignore_patterns",
              "docstring": "Load and normalize patterns from .gitignore.",
              "line_range": [
                52,
                66
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig.get_gitignore_patterns",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config.CLIConfig",
                "llmstruct.ARCHIVE.cli_config.CLIConfig.get_gitignore_patterns"
              ],
              "uid_type": "method"
            },
            {
              "name": "get_exclude_dirs",
              "docstring": "Get directories to exclude from scanning.",
              "line_range": [
                68,
                82
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig.get_exclude_dirs",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config.CLIConfig",
                "llmstruct.ARCHIVE.cli_config.CLIConfig.get_exclude_dirs"
              ],
              "uid_type": "method"
            },
            {
              "name": "get_include_patterns",
              "docstring": "Get file patterns to include.",
              "line_range": [
                84,
                89
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig.get_include_patterns",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config.CLIConfig",
                "llmstruct.ARCHIVE.cli_config.CLIConfig.get_include_patterns"
              ],
              "uid_type": "method"
            },
            {
              "name": "get_exclude_patterns",
              "docstring": "Get file patterns to exclude.",
              "line_range": [
                91,
                96
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig.get_exclude_patterns",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config.CLIConfig",
                "llmstruct.ARCHIVE.cli_config.CLIConfig.get_exclude_patterns"
              ],
              "uid_type": "method"
            },
            {
              "name": "get_max_file_size",
              "docstring": "Get maximum file size for processing (in bytes).",
              "line_range": [
                98,
                100
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig.get_max_file_size",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config.CLIConfig",
                "llmstruct.ARCHIVE.cli_config.CLIConfig.get_max_file_size"
              ],
              "uid_type": "method"
            },
            {
              "name": "get_auto_update_config",
              "docstring": "Get auto-update configuration.",
              "line_range": [
                102,
                104
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig.get_auto_update_config",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config.CLIConfig",
                "llmstruct.ARCHIVE.cli_config.CLIConfig.get_auto_update_config"
              ],
              "uid_type": "method"
            },
            {
              "name": "is_auto_update_enabled",
              "docstring": "Check if auto-update is enabled.",
              "line_range": [
                106,
                108
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig.is_auto_update_enabled",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config.CLIConfig",
                "llmstruct.ARCHIVE.cli_config.CLIConfig.is_auto_update_enabled"
              ],
              "uid_type": "method"
            },
            {
              "name": "get_struct_file_path",
              "docstring": "Get path to struct.json file.",
              "line_range": [
                110,
                112
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig.get_struct_file_path",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config.CLIConfig",
                "llmstruct.ARCHIVE.cli_config.CLIConfig.get_struct_file_path"
              ],
              "uid_type": "method"
            },
            {
              "name": "get_context_file_path",
              "docstring": "Get path to context file.",
              "line_range": [
                114,
                116
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig.get_context_file_path",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config.CLIConfig",
                "llmstruct.ARCHIVE.cli_config.CLIConfig.get_context_file_path"
              ],
              "uid_type": "method"
            },
            {
              "name": "save_config",
              "docstring": "Save current configuration to file.",
              "line_range": [
                118,
                124
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig.save_config",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config.CLIConfig",
                "llmstruct.ARCHIVE.cli_config.CLIConfig.save_config"
              ],
              "uid_type": "method"
            },
            {
              "name": "update_config",
              "docstring": "Update configuration value.",
              "line_range": [
                126,
                131
              ],
              "parameters": [
                "self",
                "section",
                "key",
                "value"
              ],
              "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig.update_config",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config.CLIConfig",
                "llmstruct.ARCHIVE.cli_config.CLIConfig.update_config"
              ],
              "uid_type": "method"
            },
            {
              "name": "reload_config",
              "docstring": "Reload configuration from file.",
              "line_range": [
                133,
                135
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig.reload_config",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config.CLIConfig",
                "llmstruct.ARCHIVE.cli_config.CLIConfig.reload_config"
              ],
              "uid_type": "method"
            }
          ],
          "bases": [],
          "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_config",
            "llmstruct.ARCHIVE.cli_config.CLIConfig"
          ],
          "uid_type": "class"
        }
      ],
      "callgraph": {
        "__init__": [
          "self._load_config",
          "Path"
        ],
        "_load_config": [
          "toml.load",
          "logging.error"
        ],
        "get_cache_config": [],
        "get_copilot_config": [],
        "get_queue_config": [],
        "get_context_config": [],
        "get_gitignore_patterns": [
          "line.startswith",
          "Path",
          "logging.error",
          "gitignore_path.exists",
          "line.strip",
          "gitignore_path.open"
        ],
        "get_exclude_dirs": [
          "list",
          "parsing_config.get",
          "cli_config.get",
          "set"
        ],
        "get_include_patterns": [
          "parsing_config.get",
          "cli_config.get"
        ],
        "get_exclude_patterns": [
          "parsing_config.get",
          "cli_config.get"
        ],
        "get_max_file_size": [],
        "get_auto_update_config": [],
        "is_auto_update_enabled": [
          "self.get_auto_update_config"
        ],
        "get_struct_file_path": [],
        "get_context_file_path": [],
        "save_config": [
          "logging.error",
          "toml.dump"
        ],
        "update_config": [
          "self.save_config"
        ],
        "reload_config": [
          "self._load_config"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "logging",
        "pathlib",
        "toml",
        "typing"
      ],
      "hash": "4e3a5903ff3fcd932118bf5521902da18bc72c67f93835354f70576d1413de49",
      "uid": "llmstruct.ARCHIVE.cli_config",
      "uid_components": [
        "llmstruct",
        "llmstruct.ARCHIVE",
        "llmstruct.ARCHIVE.cli_config"
      ],
      "uid_type": "module",
      "artifact_id": "51bc580f-9cb1-8311-ba52-fcea74bd1748",
      "metrics": {
        "cyclomatic_complexity": 20,
        "lines_of_code": 180,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 8,
        "test_coverage": 0.0,
        "maintainability_index": 0
      },
      "markdown_anchor": {
        "id": "llmstruct-archive-cli_config",
        "title": "Module: llmstruct.ARCHIVE.cli_config",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.ARCHIVE.cli_config](#llmstruct-archive-cli_config)",
        "html_anchor": "<a id=\"llmstruct-archive-cli_config\"></a>"
      }
    },
    {
      "module_id": "llmstruct.ARCHIVE.cli_commands",
      "path": "llmstruct/ARCHIVE/cli_commands.py",
      "category": "core",
      "module_doc": "CLI command processing and handlers.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize command processor.",
          "line_range": [
            33,
            72
          ],
          "parameters": [
            "self",
            "root_dir",
            "config",
            "utils"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_commands.__init__",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_commands",
            "llmstruct.ARCHIVE.cli_commands.__init__"
          ],
          "uid_type": "function"
        },
        {
          "name": "set_cache",
          "docstring": "Set cache instance.",
          "line_range": [
            74,
            76
          ],
          "parameters": [
            "self",
            "cache"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_commands.set_cache",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_commands",
            "llmstruct.ARCHIVE.cli_commands.set_cache"
          ],
          "uid_type": "function"
        },
        {
          "name": "set_copilot",
          "docstring": "Set Copilot manager instance.",
          "line_range": [
            78,
            80
          ],
          "parameters": [
            "self",
            "copilot_manager"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_commands.set_copilot",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_commands",
            "llmstruct.ARCHIVE.cli_commands.set_copilot"
          ],
          "uid_type": "function"
        },
        {
          "name": "process_command",
          "docstring": "Process a command starting with /.",
          "line_range": [
            82,
            98
          ],
          "parameters": [
            "self",
            "command_line"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_commands.process_command",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_commands",
            "llmstruct.ARCHIVE.cli_commands.process_command"
          ],
          "uid_type": "function"
        },
        {
          "name": "process_prompt",
          "docstring": "Process a regular user prompt (not a command).",
          "line_range": [
            100,
            152
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_commands.process_prompt",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_commands",
            "llmstruct.ARCHIVE.cli_commands.process_prompt"
          ],
          "uid_type": "function"
        },
        {
          "name": "cmd_help",
          "docstring": "Show help information.",
          "line_range": [
            154,
            217
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_commands.cmd_help",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_commands",
            "llmstruct.ARCHIVE.cli_commands.cmd_help"
          ],
          "uid_type": "function"
        },
        {
          "name": "cmd_workspace",
          "docstring": "Handle workspace state and permissions management.",
          "line_range": [
            219,
            334
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_commands.cmd_workspace",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_commands",
            "llmstruct.ARCHIVE.cli_commands.cmd_workspace"
          ],
          "uid_type": "function"
        },
        {
          "name": "cmd_mode",
          "docstring": "Handle context mode operations with workspace integration.",
          "line_range": [
            336,
            437
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_commands.cmd_mode",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_commands",
            "llmstruct.ARCHIVE.cli_commands.cmd_mode"
          ],
          "uid_type": "function"
        },
        {
          "name": "cmd_view",
          "docstring": "View file or directory contents.",
          "line_range": [
            439,
            478
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_commands.cmd_view",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_commands",
            "llmstruct.ARCHIVE.cli_commands.cmd_view"
          ],
          "uid_type": "function"
        },
        {
          "name": "cmd_write",
          "docstring": "Write content to a file.",
          "line_range": [
            480,
            505
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_commands.cmd_write",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_commands",
            "llmstruct.ARCHIVE.cli_commands.cmd_write"
          ],
          "uid_type": "function"
        },
        {
          "name": "cmd_queue",
          "docstring": "Handle queue operations.",
          "line_range": [
            507,
            549
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_commands.cmd_queue",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_commands",
            "llmstruct.ARCHIVE.cli_commands.cmd_queue"
          ],
          "uid_type": "function"
        },
        {
          "name": "cmd_cache",
          "docstring": "Handle cache operations.",
          "line_range": [
            551,
            590
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_commands.cmd_cache",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_commands",
            "llmstruct.ARCHIVE.cli_commands.cmd_cache"
          ],
          "uid_type": "function"
        },
        {
          "name": "cmd_copilot",
          "docstring": "Handle Copilot operations.",
          "line_range": [
            592,
            626
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_commands.cmd_copilot",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_commands",
            "llmstruct.ARCHIVE.cli_commands.cmd_copilot"
          ],
          "uid_type": "function"
        },
        {
          "name": "cmd_config",
          "docstring": "Handle configuration operations.",
          "line_range": [
            628,
            660
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_commands.cmd_config",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_commands",
            "llmstruct.ARCHIVE.cli_commands.cmd_config"
          ],
          "uid_type": "function"
        },
        {
          "name": "cmd_status",
          "docstring": "Show system status.",
          "line_range": [
            662,
            676
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_commands.cmd_status",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_commands",
            "llmstruct.ARCHIVE.cli_commands.cmd_status"
          ],
          "uid_type": "function"
        },
        {
          "name": "cmd_backup",
          "docstring": "Create backup of a file.",
          "line_range": [
            678,
            693
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_commands.cmd_backup",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_commands",
            "llmstruct.ARCHIVE.cli_commands.cmd_backup"
          ],
          "uid_type": "function"
        },
        {
          "name": "cmd_parse",
          "docstring": "Parse project structure.",
          "line_range": [
            695,
            715
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_commands.cmd_parse",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_commands",
            "llmstruct.ARCHIVE.cli_commands.cmd_parse"
          ],
          "uid_type": "function"
        },
        {
          "name": "cmd_audit",
          "docstring": "Handle audit operations.",
          "line_range": [
            717,
            743
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_commands.cmd_audit",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_commands",
            "llmstruct.ARCHIVE.cli_commands.cmd_audit"
          ],
          "uid_type": "function"
        },
        {
          "name": "handle_auto_update",
          "docstring": "Handle auto-update operations.",
          "line_range": [
            745,
            765
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_commands.handle_auto_update",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_commands",
            "llmstruct.ARCHIVE.cli_commands.handle_auto_update"
          ],
          "uid_type": "function"
        },
        {
          "name": "handle_struct_status",
          "docstring": "Handle struct status operations.",
          "line_range": [
            767,
            791
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_commands.handle_struct_status",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_commands",
            "llmstruct.ARCHIVE.cli_commands.handle_struct_status"
          ],
          "uid_type": "function"
        },
        {
          "name": "cmd_context",
          "docstring": "Handle context operations.",
          "line_range": [
            793,
            849
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_commands.cmd_context",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_commands",
            "llmstruct.ARCHIVE.cli_commands.cmd_context"
          ],
          "uid_type": "function"
        },
        {
          "name": "cmd_session",
          "docstring": "Handle session operations.",
          "line_range": [
            851,
            902
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.ARCHIVE.cli_commands.cmd_session",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_commands",
            "llmstruct.ARCHIVE.cli_commands.cmd_session"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [
        {
          "name": "CommandProcessor",
          "docstring": "Processes CLI commands and user prompts.",
          "line_range": [
            30,
            902
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize command processor.",
              "line_range": [
                33,
                72
              ],
              "parameters": [
                "self",
                "root_dir",
                "config",
                "utils"
              ],
              "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.__init__",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor.__init__"
              ],
              "uid_type": "method"
            },
            {
              "name": "set_cache",
              "docstring": "Set cache instance.",
              "line_range": [
                74,
                76
              ],
              "parameters": [
                "self",
                "cache"
              ],
              "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.set_cache",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor.set_cache"
              ],
              "uid_type": "method"
            },
            {
              "name": "set_copilot",
              "docstring": "Set Copilot manager instance.",
              "line_range": [
                78,
                80
              ],
              "parameters": [
                "self",
                "copilot_manager"
              ],
              "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.set_copilot",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor.set_copilot"
              ],
              "uid_type": "method"
            },
            {
              "name": "process_command",
              "docstring": "Process a command starting with /.",
              "line_range": [
                82,
                98
              ],
              "parameters": [
                "self",
                "command_line"
              ],
              "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.process_command",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor.process_command"
              ],
              "uid_type": "method"
            },
            {
              "name": "process_prompt",
              "docstring": "Process a regular user prompt (not a command).",
              "line_range": [
                100,
                152
              ],
              "parameters": [
                "self",
                "prompt"
              ],
              "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.process_prompt",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor.process_prompt"
              ],
              "uid_type": "method"
            },
            {
              "name": "cmd_help",
              "docstring": "Show help information.",
              "line_range": [
                154,
                217
              ],
              "parameters": [
                "self",
                "args"
              ],
              "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_help",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_help"
              ],
              "uid_type": "method"
            },
            {
              "name": "cmd_workspace",
              "docstring": "Handle workspace state and permissions management.",
              "line_range": [
                219,
                334
              ],
              "parameters": [
                "self",
                "args"
              ],
              "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_workspace",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_workspace"
              ],
              "uid_type": "method"
            },
            {
              "name": "cmd_mode",
              "docstring": "Handle context mode operations with workspace integration.",
              "line_range": [
                336,
                437
              ],
              "parameters": [
                "self",
                "args"
              ],
              "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_mode",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_mode"
              ],
              "uid_type": "method"
            },
            {
              "name": "cmd_view",
              "docstring": "View file or directory contents.",
              "line_range": [
                439,
                478
              ],
              "parameters": [
                "self",
                "args"
              ],
              "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_view",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_view"
              ],
              "uid_type": "method"
            },
            {
              "name": "cmd_write",
              "docstring": "Write content to a file.",
              "line_range": [
                480,
                505
              ],
              "parameters": [
                "self",
                "args"
              ],
              "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_write",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_write"
              ],
              "uid_type": "method"
            },
            {
              "name": "cmd_queue",
              "docstring": "Handle queue operations.",
              "line_range": [
                507,
                549
              ],
              "parameters": [
                "self",
                "args"
              ],
              "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_queue",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_queue"
              ],
              "uid_type": "method"
            },
            {
              "name": "cmd_cache",
              "docstring": "Handle cache operations.",
              "line_range": [
                551,
                590
              ],
              "parameters": [
                "self",
                "args"
              ],
              "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_cache",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_cache"
              ],
              "uid_type": "method"
            },
            {
              "name": "cmd_copilot",
              "docstring": "Handle Copilot operations.",
              "line_range": [
                592,
                626
              ],
              "parameters": [
                "self",
                "args"
              ],
              "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_copilot",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_copilot"
              ],
              "uid_type": "method"
            },
            {
              "name": "cmd_config",
              "docstring": "Handle configuration operations.",
              "line_range": [
                628,
                660
              ],
              "parameters": [
                "self",
                "args"
              ],
              "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_config",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_config"
              ],
              "uid_type": "method"
            },
            {
              "name": "cmd_status",
              "docstring": "Show system status.",
              "line_range": [
                662,
                676
              ],
              "parameters": [
                "self",
                "args"
              ],
              "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_status",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_status"
              ],
              "uid_type": "method"
            },
            {
              "name": "cmd_backup",
              "docstring": "Create backup of a file.",
              "line_range": [
                678,
                693
              ],
              "parameters": [
                "self",
                "args"
              ],
              "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_backup",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_backup"
              ],
              "uid_type": "method"
            },
            {
              "name": "cmd_parse",
              "docstring": "Parse project structure.",
              "line_range": [
                695,
                715
              ],
              "parameters": [
                "self",
                "args"
              ],
              "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_parse",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_parse"
              ],
              "uid_type": "method"
            },
            {
              "name": "cmd_audit",
              "docstring": "Handle audit operations.",
              "line_range": [
                717,
                743
              ],
              "parameters": [
                "self",
                "args"
              ],
              "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_audit",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_audit"
              ],
              "uid_type": "method"
            },
            {
              "name": "handle_auto_update",
              "docstring": "Handle auto-update operations.",
              "line_range": [
                745,
                765
              ],
              "parameters": [
                "self",
                "args"
              ],
              "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.handle_auto_update",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor.handle_auto_update"
              ],
              "uid_type": "method"
            },
            {
              "name": "handle_struct_status",
              "docstring": "Handle struct status operations.",
              "line_range": [
                767,
                791
              ],
              "parameters": [
                "self",
                "args"
              ],
              "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.handle_struct_status",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor.handle_struct_status"
              ],
              "uid_type": "method"
            },
            {
              "name": "cmd_context",
              "docstring": "Handle context operations.",
              "line_range": [
                793,
                849
              ],
              "parameters": [
                "self",
                "args"
              ],
              "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_context",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_context"
              ],
              "uid_type": "method"
            },
            {
              "name": "cmd_session",
              "docstring": "Handle session operations.",
              "line_range": [
                851,
                902
              ],
              "parameters": [
                "self",
                "args"
              ],
              "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_session",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_session"
              ],
              "uid_type": "method"
            }
          ],
          "bases": [],
          "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_commands",
            "llmstruct.ARCHIVE.cli_commands.CommandProcessor"
          ],
          "uid_type": "class"
        }
      ],
      "callgraph": {
        "__init__": [
          "print",
          "WorkspaceStateManager"
        ],
        "set_cache": [],
        "set_copilot": [],
        "process_command": [
          "len",
          "print",
          "logging.error",
          "command_line.split",
          "command_line.strip"
        ],
        "process_prompt": [
          "context_data.get",
          "logging.warning",
          "len",
          "context_info.get",
          "print",
          "prompt.strip",
          "logging.error",
          "CopilotEvent",
          "logging.info",
          "get_optimized_context"
        ],
        "cmd_help": [
          "print"
        ],
        "cmd_workspace": [
          "state.get",
          "len",
          "action_args.split",
          "print",
          "args.strip",
          "boundaries.get",
          "logging.error",
          "int",
          "entry.get",
          "override.get",
          "result.get",
          "permissions.get"
        ],
        "cmd_mode": [
          "permissions.get",
          "len",
          "context_data.get",
          "args.upper",
          "print",
          "args.strip",
          "re.findall",
          "result.get",
          "args.lower",
          "metrics.get",
          "get_optimized_context"
        ],
        "cmd_view": [
          "print",
          "args.strip",
          "os.listdir",
          "sorted"
        ],
        "cmd_write": [
          "len",
          "args.split",
          "print",
          "content.startswith",
          "content.endswith"
        ],
        "cmd_queue": [
          "cmd.get",
          "os.remove",
          "len",
          "print",
          "args.strip",
          "open",
          "queue_data.get",
          "json.load",
          "enumerate"
        ],
        "cmd_cache": [
          "len",
          "print",
          "args.strip",
          "os.listdir",
          "stats.get"
        ],
        "cmd_copilot": [
          "print",
          "args.strip",
          "open",
          "json.dumps",
          "json.load"
        ],
        "cmd_config": [
          "json.dumps",
          "print",
          "args.strip"
        ],
        "cmd_status": [
          "print"
        ],
        "cmd_backup": [
          "print",
          "args.strip"
        ],
        "cmd_parse": [
          "print",
          "generate_json"
        ],
        "cmd_audit": [
          "print",
          "args.strip"
        ],
        "handle_auto_update": [
          "print",
          "generate_json"
        ],
        "handle_struct_status": [
          "datetime.fromtimestamp",
          "len",
          "os.stat",
          "print",
          "open",
          "json.load",
          "struct_data.get"
        ],
        "cmd_context": [
          "context_data.get",
          "len",
          "print",
          "args.strip",
          "metrics.get",
          "get_optimized_context"
        ],
        "cmd_session": [
          "state.get",
          "len",
          "print",
          "args.strip",
          "datetime.now"
        ]
      },
      "dependencies": [
        "Any",
        "CLIConfig",
        "CLIUtils",
        "CopilotContextManager",
        "CopilotEvent",
        "Dict",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "WorkspaceStateManager",
        "cli_config",
        "cli_utils",
        "copilot",
        "create_context_orchestrator",
        "datetime",
        "generate_json",
        "get_optimized_context",
        "get_optimized_context_for_scenario",
        "initialize_copilot",
        "json",
        "llmstruct.cache",
        "llmstruct.context_orchestrator",
        "llmstruct.copilot",
        "llmstruct.generators.json_generator",
        "logging",
        "os",
        "pathlib",
        "re",
        "subprocess",
        "sys",
        "trigger_copilot_event",
        "typing",
        "workspace"
      ],
      "hash": "dd0d9e75fb410d85bfe10f3e554b2fa45c45847ccb317cd54107e4ac6ce33bec",
      "uid": "llmstruct.ARCHIVE.cli_commands",
      "uid_components": [
        "llmstruct",
        "llmstruct.ARCHIVE",
        "llmstruct.ARCHIVE.cli_commands"
      ],
      "uid_type": "module",
      "artifact_id": "f979850f-f5e1-f09f-c3f4-b432640bef6f",
      "metrics": {
        "cyclomatic_complexity": 24,
        "lines_of_code": 220,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 34,
        "test_coverage": 0.0,
        "maintainability_index": 0
      },
      "markdown_anchor": {
        "id": "llmstruct-archive-cli_commands",
        "title": "Module: llmstruct.ARCHIVE.cli_commands",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.ARCHIVE.cli_commands](#llmstruct-archive-cli_commands)",
        "html_anchor": "<a id=\"llmstruct-archive-cli_commands\"></a>"
      }
    },
    {
      "module_id": "llmstruct.api.__init__",
      "path": "llmstruct/api/__init__.py",
      "category": "cli",
      "module_doc": "LLMStruct FastAPI Module\n\nProvides HTTP REST API access to LLMStruct CLI functionality.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "a9ca65f873c3361ae7a8000072fa4f5b926851fe59f7ae8cecec41df9ba72707",
      "uid": "llmstruct.api.__init__",
      "uid_components": [
        "llmstruct",
        "llmstruct.api",
        "llmstruct.api.__init__"
      ],
      "uid_type": "module",
      "artifact_id": "58118614-cbf0-0d1d-3c64-ea3b9612e27e",
      "metrics": {
        "cyclomatic_complexity": 0,
        "lines_of_code": 0,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 0,
        "test_coverage": 0.0,
        "maintainability_index": 100
      },
      "markdown_anchor": {
        "id": "llmstruct-api-__init__",
        "title": "Module: llmstruct.api.__init__",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.api.__init__](#llmstruct-api-__init__)",
        "html_anchor": "<a id=\"llmstruct-api-__init__\"></a>"
      }
    },
    {
      "module_id": "llmstruct.api.config",
      "path": "llmstruct/api/config.py",
      "category": "core",
      "module_doc": "Configuration management for LLMStruct FastAPI",
      "functions": [],
      "classes": [
        {
          "name": "Settings",
          "docstring": "Application settings with environment variable support",
          "line_range": [
            12,
            43
          ],
          "methods": [],
          "bases": [
            "BaseSettings"
          ],
          "uid": "llmstruct.api.config.Settings",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.config",
            "llmstruct.api.config.Settings"
          ],
          "uid_type": "class"
        }
      ],
      "callgraph": {},
      "dependencies": [
        "BaseSettings",
        "List",
        "pydantic",
        "pydantic_settings",
        "typing"
      ],
      "hash": "714131daa5c1b3f6d461173939ed6f29e670e6ace0067bac322bd30ca3341f48",
      "uid": "llmstruct.api.config",
      "uid_components": [
        "llmstruct",
        "llmstruct.api",
        "llmstruct.api.config"
      ],
      "uid_type": "module",
      "artifact_id": "50e13f7c-a4d1-103b-d28c-897977ddb9b6",
      "metrics": {
        "cyclomatic_complexity": 2,
        "lines_of_code": 0,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 5,
        "test_coverage": 0.0,
        "maintainability_index": 90
      },
      "markdown_anchor": {
        "id": "llmstruct-api-config",
        "title": "Module: llmstruct.api.config",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.api.config](#llmstruct-api-config)",
        "html_anchor": "<a id=\"llmstruct-api-config\"></a>"
      }
    },
    {
      "module_id": "llmstruct.api.app",
      "path": "llmstruct/api/app.py",
      "category": "core",
      "module_doc": "Main FastAPI application for LLMStruct",
      "functions": [
        {
          "name": "root",
          "docstring": "Root endpoint with API information",
          "line_range": [
            78,
            86
          ],
          "parameters": [],
          "decorators": [
            "app.get('/', tags=['root'])"
          ],
          "uid": "llmstruct.api.app.root",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.app",
            "llmstruct.api.app.root"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [],
      "callgraph": {
        "root": [
          "app.get"
        ]
      },
      "dependencies": [
        "CORSMiddleware",
        "Depends",
        "FastAPI",
        "GZipMiddleware",
        "api_key_middleware",
        "chat",
        "config",
        "continue_adapter",
        "fastapi",
        "fastapi.middleware.cors",
        "fastapi.middleware.gzip",
        "logging",
        "middleware.auth",
        "middleware.logging",
        "request_logging_middleware",
        "routes",
        "settings",
        "system",
        "uvicorn"
      ],
      "hash": "ce8bc5451d35e263884b85be7e9c7bb6a332b5c3eae63322911e57a1d0eb44c1",
      "uid": "llmstruct.api.app",
      "uid_components": [
        "llmstruct",
        "llmstruct.api",
        "llmstruct.api.app"
      ],
      "uid_type": "module",
      "artifact_id": "f424d86b-912b-c580-9011-dd5395980137",
      "metrics": {
        "cyclomatic_complexity": 1,
        "lines_of_code": 10,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 19,
        "test_coverage": 0.0,
        "maintainability_index": 95
      },
      "markdown_anchor": {
        "id": "llmstruct-api-app",
        "title": "Module: llmstruct.api.app",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.api.app](#llmstruct-api-app)",
        "html_anchor": "<a id=\"llmstruct-api-app\"></a>"
      }
    },
    {
      "module_id": "llmstruct.core.summary_system",
      "path": "llmstruct/core/summary_system.py",
      "category": "core",
      "module_doc": "Smart Summary System for LLMStruct v2.1\n\nProvides intelligent summary generation with fallback hierarchy:\n1. Docstring extraction\n2. LLM-generated summaries with caching\n3. Default fallbacks\n\nUses professional tools:\n- radon: Code complexity metrics\n- pydantic: Data validation and models\n- openai/anthropic: LLM integration",
      "functions": [
        {
          "name": "create_summary_system",
          "docstring": "Create Smart Summary System with optional LLM configuration.\n\nArgs:\n    llm_config: Optional LLM provider configuration\n    \nReturns:\n    Configured SmartSummarySystem instance",
          "line_range": [
            452,
            462
          ],
          "parameters": [
            "llm_config"
          ],
          "decorators": [],
          "uid": "llmstruct.core.summary_system.create_summary_system",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.summary_system",
            "llmstruct.core.summary_system.create_summary_system"
          ],
          "uid_type": "function"
        },
        {
          "name": "enhance_entity_with_smart_summary",
          "docstring": "Enhance entity with smart summary and radon metrics.\n\nArgs:\n    entity: Code entity to enhance\n    summary_system: SmartSummarySystem instance\n    \nReturns:\n    Enhanced entity with smart summary and professional metrics",
          "line_range": [
            465,
            490
          ],
          "parameters": [
            "entity",
            "summary_system"
          ],
          "decorators": [],
          "uid": "llmstruct.core.summary_system.enhance_entity_with_smart_summary",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.summary_system",
            "llmstruct.core.summary_system.enhance_entity_with_smart_summary"
          ],
          "uid_type": "function"
        },
        {
          "name": "__init__",
          "docstring": "Initialize Smart Summary System.\n\nArgs:\n    llm_config: LLM provider configuration\n    cache_dir: Directory for caching LLM responses",
          "line_range": [
            84,
            104
          ],
          "parameters": [
            "self",
            "llm_config",
            "cache_dir"
          ],
          "decorators": [],
          "uid": "llmstruct.core.summary_system.__init__",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.summary_system",
            "llmstruct.core.summary_system.__init__"
          ],
          "uid_type": "function"
        },
        {
          "name": "_setup_llm_client",
          "docstring": "Setup LLM client based on provider.",
          "line_range": [
            106,
            120
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.core.summary_system._setup_llm_client",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.summary_system",
            "llmstruct.core.summary_system._setup_llm_client"
          ],
          "uid_type": "function"
        },
        {
          "name": "calculate_radon_metrics",
          "docstring": "Calculate code metrics using Radon.\n\nArgs:\n    code: Source code content\n    file_path: File path for caching\n    \nReturns:\n    RadonMetrics with professional complexity analysis",
          "line_range": [
            122,
            175
          ],
          "parameters": [
            "self",
            "code",
            "file_path"
          ],
          "decorators": [],
          "uid": "llmstruct.core.summary_system.calculate_radon_metrics",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.summary_system",
            "llmstruct.core.summary_system.calculate_radon_metrics"
          ],
          "uid_type": "function"
        },
        {
          "name": "extract_docstring_summary",
          "docstring": "Extract summary from docstring.\n\nArgs:\n    entity: Code entity (function, class, module)\n    \nReturns:\n    Extracted summary or None",
          "line_range": [
            177,
            199
          ],
          "parameters": [
            "self",
            "entity"
          ],
          "decorators": [],
          "uid": "llmstruct.core.summary_system.extract_docstring_summary",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.summary_system",
            "llmstruct.core.summary_system.extract_docstring_summary"
          ],
          "uid_type": "function"
        },
        {
          "name": "generate_llm_summary",
          "docstring": "Generate summary using LLM.\n\nArgs:\n    entity: Code entity to summarize\n    context: Additional context (module, project info)\n    \nReturns:\n    LLM-generated summary or None",
          "line_range": [
            201,
            261
          ],
          "parameters": [
            "self",
            "entity",
            "context"
          ],
          "decorators": [],
          "uid": "llmstruct.core.summary_system.generate_llm_summary",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.summary_system",
            "llmstruct.core.summary_system.generate_llm_summary"
          ],
          "uid_type": "function"
        },
        {
          "name": "_create_summary_prompt",
          "docstring": "Create prompt for LLM summary generation.",
          "line_range": [
            263,
            289
          ],
          "parameters": [
            "self",
            "entity",
            "context"
          ],
          "decorators": [],
          "uid": "llmstruct.core.summary_system._create_summary_prompt",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.summary_system",
            "llmstruct.core.summary_system._create_summary_prompt"
          ],
          "uid_type": "function"
        },
        {
          "name": "_load_cached_summary",
          "docstring": "Load cached LLM summary.",
          "line_range": [
            291,
            311
          ],
          "parameters": [
            "self",
            "cache_key"
          ],
          "decorators": [],
          "uid": "llmstruct.core.summary_system._load_cached_summary",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.summary_system",
            "llmstruct.core.summary_system._load_cached_summary"
          ],
          "uid_type": "function"
        },
        {
          "name": "_save_cached_summary",
          "docstring": "Save LLM summary to cache.",
          "line_range": [
            313,
            324
          ],
          "parameters": [
            "self",
            "cache_key",
            "summary"
          ],
          "decorators": [],
          "uid": "llmstruct.core.summary_system._save_cached_summary",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.summary_system",
            "llmstruct.core.summary_system._save_cached_summary"
          ],
          "uid_type": "function"
        },
        {
          "name": "generate_smart_summary",
          "docstring": "Generate smart summary with fallback hierarchy.\n\nArgs:\n    entity: Code entity to summarize\n    context: Additional context\n    \nReturns:\n    CodeSummary with intelligent summary and metadata",
          "line_range": [
            326,
            386
          ],
          "parameters": [
            "self",
            "entity",
            "context"
          ],
          "decorators": [],
          "uid": "llmstruct.core.summary_system.generate_smart_summary",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.summary_system",
            "llmstruct.core.summary_system.generate_smart_summary"
          ],
          "uid_type": "function"
        },
        {
          "name": "_generate_fallback_summary",
          "docstring": "Generate fallback summary using heuristics.",
          "line_range": [
            388,
            415
          ],
          "parameters": [
            "self",
            "entity"
          ],
          "decorators": [],
          "uid": "llmstruct.core.summary_system._generate_fallback_summary",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.summary_system",
            "llmstruct.core.summary_system._generate_fallback_summary"
          ],
          "uid_type": "function"
        },
        {
          "name": "_generate_tags",
          "docstring": "Generate categorization tags.",
          "line_range": [
            417,
            448
          ],
          "parameters": [
            "self",
            "entity",
            "summary"
          ],
          "decorators": [],
          "uid": "llmstruct.core.summary_system._generate_tags",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.summary_system",
            "llmstruct.core.summary_system._generate_tags"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [
        {
          "name": "SummarySource",
          "docstring": "Pydantic model for summary source tracking.",
          "line_range": [
            35,
            44
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ],
          "uid": "llmstruct.core.summary_system.SummarySource",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.summary_system",
            "llmstruct.core.summary_system.SummarySource"
          ],
          "uid_type": "class"
        },
        {
          "name": "CodeSummary",
          "docstring": "Pydantic model for code entity summary.",
          "line_range": [
            47,
            54
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ],
          "uid": "llmstruct.core.summary_system.CodeSummary",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.summary_system",
            "llmstruct.core.summary_system.CodeSummary"
          ],
          "uid_type": "class"
        },
        {
          "name": "RadonMetrics",
          "docstring": "Pydantic model for Radon-based code metrics.",
          "line_range": [
            57,
            67
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ],
          "uid": "llmstruct.core.summary_system.RadonMetrics",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.summary_system",
            "llmstruct.core.summary_system.RadonMetrics"
          ],
          "uid_type": "class"
        },
        {
          "name": "LLMProvider",
          "docstring": "Pydantic model for LLM provider configuration.",
          "line_range": [
            70,
            78
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ],
          "uid": "llmstruct.core.summary_system.LLMProvider",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.summary_system",
            "llmstruct.core.summary_system.LLMProvider"
          ],
          "uid_type": "class"
        },
        {
          "name": "SmartSummarySystem",
          "docstring": "Smart Summary System with professional tools integration.",
          "line_range": [
            81,
            448
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize Smart Summary System.\n\nArgs:\n    llm_config: LLM provider configuration\n    cache_dir: Directory for caching LLM responses",
              "line_range": [
                84,
                104
              ],
              "parameters": [
                "self",
                "llm_config",
                "cache_dir"
              ],
              "uid": "llmstruct.core.summary_system.SmartSummarySystem.__init__",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.summary_system",
                "llmstruct.core.summary_system.SmartSummarySystem",
                "llmstruct.core.summary_system.SmartSummarySystem.__init__"
              ],
              "uid_type": "method"
            },
            {
              "name": "_setup_llm_client",
              "docstring": "Setup LLM client based on provider.",
              "line_range": [
                106,
                120
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.core.summary_system.SmartSummarySystem._setup_llm_client",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.summary_system",
                "llmstruct.core.summary_system.SmartSummarySystem",
                "llmstruct.core.summary_system.SmartSummarySystem._setup_llm_client"
              ],
              "uid_type": "method"
            },
            {
              "name": "calculate_radon_metrics",
              "docstring": "Calculate code metrics using Radon.\n\nArgs:\n    code: Source code content\n    file_path: File path for caching\n    \nReturns:\n    RadonMetrics with professional complexity analysis",
              "line_range": [
                122,
                175
              ],
              "parameters": [
                "self",
                "code",
                "file_path"
              ],
              "uid": "llmstruct.core.summary_system.SmartSummarySystem.calculate_radon_metrics",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.summary_system",
                "llmstruct.core.summary_system.SmartSummarySystem",
                "llmstruct.core.summary_system.SmartSummarySystem.calculate_radon_metrics"
              ],
              "uid_type": "method"
            },
            {
              "name": "extract_docstring_summary",
              "docstring": "Extract summary from docstring.\n\nArgs:\n    entity: Code entity (function, class, module)\n    \nReturns:\n    Extracted summary or None",
              "line_range": [
                177,
                199
              ],
              "parameters": [
                "self",
                "entity"
              ],
              "uid": "llmstruct.core.summary_system.SmartSummarySystem.extract_docstring_summary",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.summary_system",
                "llmstruct.core.summary_system.SmartSummarySystem",
                "llmstruct.core.summary_system.SmartSummarySystem.extract_docstring_summary"
              ],
              "uid_type": "method"
            },
            {
              "name": "generate_llm_summary",
              "docstring": "Generate summary using LLM.\n\nArgs:\n    entity: Code entity to summarize\n    context: Additional context (module, project info)\n    \nReturns:\n    LLM-generated summary or None",
              "line_range": [
                201,
                261
              ],
              "parameters": [
                "self",
                "entity",
                "context"
              ],
              "uid": "llmstruct.core.summary_system.SmartSummarySystem.generate_llm_summary",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.summary_system",
                "llmstruct.core.summary_system.SmartSummarySystem",
                "llmstruct.core.summary_system.SmartSummarySystem.generate_llm_summary"
              ],
              "uid_type": "method"
            },
            {
              "name": "_create_summary_prompt",
              "docstring": "Create prompt for LLM summary generation.",
              "line_range": [
                263,
                289
              ],
              "parameters": [
                "self",
                "entity",
                "context"
              ],
              "uid": "llmstruct.core.summary_system.SmartSummarySystem._create_summary_prompt",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.summary_system",
                "llmstruct.core.summary_system.SmartSummarySystem",
                "llmstruct.core.summary_system.SmartSummarySystem._create_summary_prompt"
              ],
              "uid_type": "method"
            },
            {
              "name": "_load_cached_summary",
              "docstring": "Load cached LLM summary.",
              "line_range": [
                291,
                311
              ],
              "parameters": [
                "self",
                "cache_key"
              ],
              "uid": "llmstruct.core.summary_system.SmartSummarySystem._load_cached_summary",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.summary_system",
                "llmstruct.core.summary_system.SmartSummarySystem",
                "llmstruct.core.summary_system.SmartSummarySystem._load_cached_summary"
              ],
              "uid_type": "method"
            },
            {
              "name": "_save_cached_summary",
              "docstring": "Save LLM summary to cache.",
              "line_range": [
                313,
                324
              ],
              "parameters": [
                "self",
                "cache_key",
                "summary"
              ],
              "uid": "llmstruct.core.summary_system.SmartSummarySystem._save_cached_summary",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.summary_system",
                "llmstruct.core.summary_system.SmartSummarySystem",
                "llmstruct.core.summary_system.SmartSummarySystem._save_cached_summary"
              ],
              "uid_type": "method"
            },
            {
              "name": "generate_smart_summary",
              "docstring": "Generate smart summary with fallback hierarchy.\n\nArgs:\n    entity: Code entity to summarize\n    context: Additional context\n    \nReturns:\n    CodeSummary with intelligent summary and metadata",
              "line_range": [
                326,
                386
              ],
              "parameters": [
                "self",
                "entity",
                "context"
              ],
              "uid": "llmstruct.core.summary_system.SmartSummarySystem.generate_smart_summary",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.summary_system",
                "llmstruct.core.summary_system.SmartSummarySystem",
                "llmstruct.core.summary_system.SmartSummarySystem.generate_smart_summary"
              ],
              "uid_type": "method"
            },
            {
              "name": "_generate_fallback_summary",
              "docstring": "Generate fallback summary using heuristics.",
              "line_range": [
                388,
                415
              ],
              "parameters": [
                "self",
                "entity"
              ],
              "uid": "llmstruct.core.summary_system.SmartSummarySystem._generate_fallback_summary",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.summary_system",
                "llmstruct.core.summary_system.SmartSummarySystem",
                "llmstruct.core.summary_system.SmartSummarySystem._generate_fallback_summary"
              ],
              "uid_type": "method"
            },
            {
              "name": "_generate_tags",
              "docstring": "Generate categorization tags.",
              "line_range": [
                417,
                448
              ],
              "parameters": [
                "self",
                "entity",
                "summary"
              ],
              "uid": "llmstruct.core.summary_system.SmartSummarySystem._generate_tags",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.summary_system",
                "llmstruct.core.summary_system.SmartSummarySystem",
                "llmstruct.core.summary_system.SmartSummarySystem._generate_tags"
              ],
              "uid_type": "method"
            }
          ],
          "bases": [],
          "uid": "llmstruct.core.summary_system.SmartSummarySystem",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.summary_system",
            "llmstruct.core.summary_system.SmartSummarySystem"
          ],
          "uid_type": "class"
        }
      ],
      "callgraph": {
        "__init__": [
          "LLMProvider",
          "self._setup_llm_client",
          "Path"
        ],
        "_setup_llm_client": [
          "openai.OpenAI",
          "os.getenv",
          "anthropic.Anthropic"
        ],
        "calculate_radon_metrics": [
          "cc_visit",
          "hasattr",
          "h_visit",
          "len",
          "code.split",
          "min",
          "max",
          "mi_visit",
          "hashlib.md5",
          "RadonMetrics",
          "sum",
          "line.strip"
        ],
        "extract_docstring_summary": [
          "line.strip",
          "cleaned.startswith",
          "docstring.strip",
          "entity.get"
        ],
        "generate_llm_summary": [
          "self._create_summary_prompt",
          "print",
          "self._load_cached_summary",
          "json.dumps",
          "hashlib.md5",
          "entity.get",
          "self._save_cached_summary"
        ],
        "_create_summary_prompt": [
          "entity.get"
        ],
        "_load_cached_summary": [
          "timedelta",
          "open",
          "datetime.utcnow",
          "json.load",
          "cache_file.unlink",
          "cache_file.exists",
          "datetime.fromisoformat"
        ],
        "_save_cached_summary": [
          "json.dump",
          "open",
          "datetime.utcnow"
        ],
        "generate_smart_summary": [
          "loop.close",
          "self._generate_fallback_summary",
          "asyncio.new_event_loop",
          "SummarySource",
          "self.generate_llm_summary",
          "asyncio.set_event_loop",
          "json.dumps",
          "self.extract_docstring_summary",
          "loop.run_until_complete",
          "hashlib.md5",
          "self._generate_tags",
          "CodeSummary"
        ],
        "_generate_fallback_summary": [
          "entity_name.split",
          "entity_type.title",
          "entity_name.startswith",
          "entity.get",
          "entity_name.replace"
        ],
        "_generate_tags": [
          "tags.append",
          "summary.lower",
          "list",
          "entity.get",
          "any",
          "set"
        ],
        "create_summary_system": [
          "SmartSummarySystem"
        ],
        "enhance_entity_with_smart_summary": [
          "summary_system.calculate_radon_metrics",
          "radon_metrics.model_dump",
          "summary_system.generate_smart_summary",
          "entity.get",
          "entity.copy",
          "smart_summary.model_dump"
        ]
      },
      "dependencies": [
        "Any",
        "BaseModel",
        "ConfigDict",
        "Dict",
        "Field",
        "List",
        "Optional",
        "Path",
        "UIDType",
        "Union",
        "anthropic",
        "asdict",
        "asyncio",
        "cc_visit",
        "dataclass",
        "dataclasses",
        "datetime",
        "generate_uid",
        "h_visit",
        "hashlib",
        "json",
        "mi_visit",
        "openai",
        "os",
        "pathlib",
        "pydantic",
        "radon.complexity",
        "radon.metrics",
        "timedelta",
        "typing",
        "uid_generator"
      ],
      "hash": "006afd5a946ea85e973cf1820edede05dc0bcde26f3e29646234ee6293b4fcdc",
      "uid": "llmstruct.core.summary_system",
      "uid_components": [
        "llmstruct",
        "llmstruct.core",
        "llmstruct.core.summary_system"
      ],
      "uid_type": "module",
      "artifact_id": "b37dc2f4-d28c-f82c-a876-b9d582340c34",
      "metrics": {
        "cyclomatic_complexity": 23,
        "lines_of_code": 130,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 31,
        "test_coverage": 0.0,
        "maintainability_index": 0
      },
      "markdown_anchor": {
        "id": "llmstruct-core-summary_system",
        "title": "Module: llmstruct.core.summary_system",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.core.summary_system](#llmstruct-core-summary_system)",
        "html_anchor": "<a id=\"llmstruct-core-summary_system\"></a>"
      }
    },
    {
      "module_id": "llmstruct.core.uid_generator",
      "path": "llmstruct/core/uid_generator.py",
      "category": "core",
      "module_doc": "UID Generator for LLMStruct v2.1 - Advanced UID System\n\nProvides stable, FQNAME-based UIDs for modules, classes, functions, and methods.\nReplaces artifact_id with consistent, human-readable identifiers.\n\nExamples:\n    - Module: llmstruct.generators.json_generator\n    - Class: llmstruct.generators.json_generator.JsonGenerator\n    - Function: llmstruct.generators.json_generator.generate_json\n    - Method: llmstruct.generators.json_generator.JsonGenerator.build_toc",
      "functions": [
        {
          "name": "normalize_path_to_module_id",
          "docstring": "Convert file path to module ID format.\n\nArgs:\n    file_path: Path to the file (e.g., \"src/llmstruct/generators/json_generator.py\")\n    root_dir: Root directory path\n    \nReturns:\n    Module ID (e.g., \"llmstruct.generators.json_generator\")",
          "line_range": [
            31,
            60
          ],
          "parameters": [
            "file_path",
            "root_dir"
          ],
          "decorators": [],
          "uid": "llmstruct.core.uid_generator.normalize_path_to_module_id",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.uid_generator",
            "llmstruct.core.uid_generator.normalize_path_to_module_id"
          ],
          "uid_type": "function"
        },
        {
          "name": "generate_uid",
          "docstring": "Generate stable UID based on FQNAME pattern.\n\nArgs:\n    uid_type: Type of the UID (module, class, function, method)\n    module_id: Module identifier (e.g., \"llmstruct.generators.json_generator\")\n    name: Name of the entity (function, class, method name)\n    class_name: Class name for methods/properties\n    parent_uid: Parent UID for nested structures\n    \nReturns:\n    Stable UID string\n    \nExamples:\n    generate_uid(UIDType.MODULE, \"llmstruct.generators.json_generator\", \"\")\n    # -> \"llmstruct.generators.json_generator\"\n    \n    generate_uid(UIDType.FUNCTION, \"llmstruct.generators.json_generator\", \"generate_json\")\n    # -> \"llmstruct.generators.json_generator.generate_json\"\n    \n    generate_uid(UIDType.METHOD, \"llmstruct.generators.json_generator\", \"build_toc\", \"JsonGenerator\")\n    # -> \"llmstruct.generators.json_generator.JsonGenerator.build_toc\"",
          "line_range": [
            63,
            112
          ],
          "parameters": [
            "uid_type",
            "module_id",
            "name",
            "class_name",
            "parent_uid"
          ],
          "decorators": [],
          "uid": "llmstruct.core.uid_generator.generate_uid",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.uid_generator",
            "llmstruct.core.uid_generator.generate_uid"
          ],
          "uid_type": "function"
        },
        {
          "name": "generate_uid_components",
          "docstring": "Generate UID components for UI navigation.\n\nArgs:\n    uid: Full UID string\n    \nReturns:\n    List of UID components for hierarchical navigation\n    \nExample:\n    generate_uid_components(\"llmstruct.generators.json_generator.JsonGenerator.build_toc\")\n    # -> [\n    #     \"llmstruct\",\n    #     \"llmstruct.generators\", \n    #     \"llmstruct.generators.json_generator\",\n    #     \"llmstruct.generators.json_generator.JsonGenerator\",\n    #     \"llmstruct.generators.json_generator.JsonGenerator.build_toc\"\n    # ]",
          "line_range": [
            115,
            142
          ],
          "parameters": [
            "uid"
          ],
          "decorators": [],
          "uid": "llmstruct.core.uid_generator.generate_uid_components",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.uid_generator",
            "llmstruct.core.uid_generator.generate_uid_components"
          ],
          "uid_type": "function"
        },
        {
          "name": "create_stable_uid",
          "docstring": "Create stable UID with components and metadata.\n\nArgs:\n    entity_type: Type of entity (module, class, function, method)\n    module_path: Path to module file  \n    root_dir: Root directory\n    entity_name: Name of the entity\n    class_name: Class name for methods\n    **kwargs: Additional metadata\n    \nReturns:\n    Dictionary with uid, uid_components, and metadata",
          "line_range": [
            145,
            198
          ],
          "parameters": [
            "entity_type",
            "module_path",
            "root_dir",
            "entity_name",
            "class_name"
          ],
          "decorators": [],
          "uid": "llmstruct.core.uid_generator.create_stable_uid",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.uid_generator",
            "llmstruct.core.uid_generator.create_stable_uid"
          ],
          "uid_type": "function"
        },
        {
          "name": "create_legacy_artifact_id",
          "docstring": "Create legacy artifact_id from UID for backward compatibility.\n\nArgs:\n    uid: The UID string\n    \nReturns:\n    UUID-style string based on UID hash",
          "line_range": [
            201,
            215
          ],
          "parameters": [
            "uid"
          ],
          "decorators": [],
          "uid": "llmstruct.core.uid_generator.create_legacy_artifact_id",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.uid_generator",
            "llmstruct.core.uid_generator.create_legacy_artifact_id"
          ],
          "uid_type": "function"
        },
        {
          "name": "migrate_artifact_id_to_uid",
          "docstring": "Migrate existing artifact_id fields to UID system.\n\nArgs:\n    data: Existing JSON data with artifact_id fields\n    root_dir: Root directory for path normalization\n    \nReturns:\n    Updated data with UID fields",
          "line_range": [
            219,
            285
          ],
          "parameters": [
            "data",
            "root_dir"
          ],
          "decorators": [],
          "uid": "llmstruct.core.uid_generator.migrate_artifact_id_to_uid",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.uid_generator",
            "llmstruct.core.uid_generator.migrate_artifact_id_to_uid"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [
        {
          "name": "UIDType",
          "docstring": "Types of UIDs that can be generated.",
          "line_range": [
            20,
            28
          ],
          "methods": [],
          "bases": [
            "Enum"
          ],
          "uid": "llmstruct.core.uid_generator.UIDType",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.uid_generator",
            "llmstruct.core.uid_generator.UIDType"
          ],
          "uid_type": "class"
        }
      ],
      "callgraph": {
        "normalize_path_to_module_id": [
          "path.endswith",
          "module_id.startswith",
          "path.replace",
          "file_path.replace",
          "module_id.endswith"
        ],
        "generate_uid": [],
        "generate_uid_components": [
          "components.append",
          "range",
          "uid.split",
          "len"
        ],
        "create_stable_uid": [
          "normalize_path_to_module_id",
          "generate_uid_components",
          "generate_uid",
          "uid_type_map.get"
        ],
        "create_legacy_artifact_id": [
          "hashlib.md5",
          "uid.encode"
        ],
        "migrate_artifact_id_to_uid": [
          "data.get",
          "migrate_artifact_id_to_uid",
          "isinstance",
          "generate_uid_components",
          "generate_uid",
          "create_legacy_artifact_id",
          "data.items"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Union",
        "enum",
        "hashlib",
        "re",
        "typing"
      ],
      "hash": "a8e7d6b1147ce471c300cc7681ce9cc01d2a702b9cd1c66b727e2740a15044f1",
      "uid": "llmstruct.core.uid_generator",
      "uid_components": [
        "llmstruct",
        "llmstruct.core",
        "llmstruct.core.uid_generator"
      ],
      "uid_type": "module",
      "artifact_id": "6d8e5cde-12d2-3f16-11af-c0d1eeae625d",
      "metrics": {
        "cyclomatic_complexity": 8,
        "lines_of_code": 60,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 10,
        "test_coverage": 0.0,
        "maintainability_index": 60
      },
      "markdown_anchor": {
        "id": "llmstruct-core-uid_generator",
        "title": "Module: llmstruct.core.uid_generator",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.core.uid_generator](#llmstruct-core-uid_generator)",
        "html_anchor": "<a id=\"llmstruct-core-uid_generator\"></a>"
      }
    },
    {
      "module_id": "llmstruct.core.__init__",
      "path": "llmstruct/core/__init__.py",
      "category": "cli",
      "module_doc": "Core LLMStruct v2.1 components for advanced processing.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "CodeMetrics",
        "CodeSummary",
        "HierarchicalJSON",
        "LLMProvider",
        "MarkdownAnchor",
        "RadonMetrics",
        "SchemaValidationSystem",
        "SmartSummarySystem",
        "SummarySource",
        "UIDType",
        "ValidationLevel",
        "ValidationResult",
        "create_schema_validator",
        "create_stable_uid",
        "create_summary_system",
        "enhance_entity_with_smart_summary",
        "enhance_json_structure",
        "generate_uid",
        "generate_uid_components",
        "json_structure",
        "schema_validation",
        "summary_system",
        "uid_generator",
        "validate_llmstruct_file",
        "validate_llmstruct_json"
      ],
      "hash": "ff2a1df4311c0eec28b850763e40017a7ccec12b8776180097883db0f888fc24",
      "uid": "llmstruct.core.__init__",
      "uid_components": [
        "llmstruct",
        "llmstruct.core",
        "llmstruct.core.__init__"
      ],
      "uid_type": "module",
      "artifact_id": "f2bc0ecd-f40b-e986-3511-57176dee1b78",
      "metrics": {
        "cyclomatic_complexity": 0,
        "lines_of_code": 0,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 25,
        "test_coverage": 0.0,
        "maintainability_index": 100
      },
      "markdown_anchor": {
        "id": "llmstruct-core-__init__",
        "title": "Module: llmstruct.core.__init__",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.core.__init__](#llmstruct-core-__init__)",
        "html_anchor": "<a id=\"llmstruct-core-__init__\"></a>"
      }
    },
    {
      "module_id": "llmstruct.core.schema_validation",
      "path": "llmstruct/core/schema_validation.py",
      "category": "core",
      "module_doc": "Schema Validation System for LLMStruct v2.1\n\nComprehensive validation system using professional tools:\n- jsonschema: JSON Schema validation (industry standard)\n- cerberus: Flexible validation rules\n- marshmallow: Serialization/deserialization with validation\n- pydantic: Type-safe models with validation\n\nProvides multi-layer validation:\n1. Structure validation (JSON Schema)\n2. Content validation (Cerberus rules)\n3. Type validation (Pydantic models)\n4. Custom business logic validation",
      "functions": [
        {
          "name": "create_schema_validator",
          "docstring": "Create Schema Validation System.\n\nArgs:\n    schema_dir: Directory for validation schemas\n    \nReturns:\n    Configured SchemaValidationSystem instance",
          "line_range": [
            932,
            942
          ],
          "parameters": [
            "schema_dir"
          ],
          "decorators": [],
          "uid": "llmstruct.core.schema_validation.create_schema_validator",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.schema_validation",
            "llmstruct.core.schema_validation.create_schema_validator"
          ],
          "uid_type": "function"
        },
        {
          "name": "validate_llmstruct_json",
          "docstring": "Quick validation of LLMStruct JSON data.\n\nArgs:\n    data: JSON data to validate\n    level: Validation level\n    \nReturns:\n    ValidationResult",
          "line_range": [
            945,
            957
          ],
          "parameters": [
            "data",
            "level"
          ],
          "decorators": [],
          "uid": "llmstruct.core.schema_validation.validate_llmstruct_json",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.schema_validation",
            "llmstruct.core.schema_validation.validate_llmstruct_json"
          ],
          "uid_type": "function"
        },
        {
          "name": "validate_llmstruct_file",
          "docstring": "Quick validation of LLMStruct JSON file.\n\nArgs:\n    file_path: Path to JSON file\n    level: Validation level\n    \nReturns:\n    ValidationResult",
          "line_range": [
            960,
            972
          ],
          "parameters": [
            "file_path",
            "level"
          ],
          "decorators": [],
          "uid": "llmstruct.core.schema_validation.validate_llmstruct_file",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.schema_validation",
            "llmstruct.core.schema_validation.validate_llmstruct_file"
          ],
          "uid_type": "function"
        },
        {
          "name": "__init__",
          "docstring": "Initialize Schema Validation System.\n\nArgs:\n    schema_dir: Directory containing validation schemas",
          "line_range": [
            73,
            92
          ],
          "parameters": [
            "self",
            "schema_dir"
          ],
          "decorators": [],
          "uid": "llmstruct.core.schema_validation.__init__",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.schema_validation",
            "llmstruct.core.schema_validation.__init__"
          ],
          "uid_type": "function"
        },
        {
          "name": "_load_json_schemas",
          "docstring": "Load JSON Schema definitions.",
          "line_range": [
            94,
            269
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.core.schema_validation._load_json_schemas",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.schema_validation",
            "llmstruct.core.schema_validation._load_json_schemas"
          ],
          "uid_type": "function"
        },
        {
          "name": "_load_cerberus_schemas",
          "docstring": "Load Cerberus validation rules.",
          "line_range": [
            271,
            344
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.core.schema_validation._load_cerberus_schemas",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.schema_validation",
            "llmstruct.core.schema_validation._load_cerberus_schemas"
          ],
          "uid_type": "function"
        },
        {
          "name": "_create_marshmallow_schema",
          "docstring": "Create Marshmallow schema for serialization validation.",
          "line_range": [
            346,
            378
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.core.schema_validation._create_marshmallow_schema",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.schema_validation",
            "llmstruct.core.schema_validation._create_marshmallow_schema"
          ],
          "uid_type": "function"
        },
        {
          "name": "_define_validation_levels",
          "docstring": "Define validation levels with increasing strictness.",
          "line_range": [
            380,
            415
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.core.schema_validation._define_validation_levels",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.schema_validation",
            "llmstruct.core.schema_validation._define_validation_levels"
          ],
          "uid_type": "function"
        },
        {
          "name": "validate_json_schema",
          "docstring": "Validate data against JSON Schema.\n\nArgs:\n    data: Data to validate\n    schema_name: Schema to use for validation\n    \nReturns:\n    Tuple of (is_valid, errors)",
          "line_range": [
            417,
            459
          ],
          "parameters": [
            "self",
            "data",
            "schema_name"
          ],
          "decorators": [],
          "uid": "llmstruct.core.schema_validation.validate_json_schema",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.schema_validation",
            "llmstruct.core.schema_validation.validate_json_schema"
          ],
          "uid_type": "function"
        },
        {
          "name": "validate_content_rules",
          "docstring": "Validate data using simple content rules (Cerberus alternative).\n\nArgs:\n    data: Data to validate\n    \nReturns:\n    Tuple of (is_valid, errors)",
          "line_range": [
            461,
            547
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": [],
          "uid": "llmstruct.core.schema_validation.validate_content_rules",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.schema_validation",
            "llmstruct.core.schema_validation.validate_content_rules"
          ],
          "uid_type": "function"
        },
        {
          "name": "validate_marshmallow_schema",
          "docstring": "Validate data using Marshmallow schema.\n\nArgs:\n    data: Data to validate\n    \nReturns:\n    Tuple of (is_valid, errors)",
          "line_range": [
            549,
            580
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": [],
          "uid": "llmstruct.core.schema_validation.validate_marshmallow_schema",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.schema_validation",
            "llmstruct.core.schema_validation.validate_marshmallow_schema"
          ],
          "uid_type": "function"
        },
        {
          "name": "validate_uid_consistency",
          "docstring": "Validate UID consistency across the structure.\n\nArgs:\n    data: Data to validate\n    \nReturns:\n    Tuple of (is_valid, errors)",
          "line_range": [
            582,
            679
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": [],
          "uid": "llmstruct.core.schema_validation.validate_uid_consistency",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.schema_validation",
            "llmstruct.core.schema_validation.validate_uid_consistency"
          ],
          "uid_type": "function"
        },
        {
          "name": "validate_naming_conventions",
          "docstring": "Validate naming conventions.\n\nArgs:\n    data: Data to validate\n    \nReturns:\n    Tuple of (is_valid, errors)",
          "line_range": [
            681,
            726
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": [],
          "uid": "llmstruct.core.schema_validation.validate_naming_conventions",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.schema_validation",
            "llmstruct.core.schema_validation.validate_naming_conventions"
          ],
          "uid_type": "function"
        },
        {
          "name": "validate_quality_checks",
          "docstring": "Perform quality checks on the data.\n\nArgs:\n    data: Data to validate\n    \nReturns:\n    Tuple of (is_valid, errors)",
          "line_range": [
            728,
            777
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": [],
          "uid": "llmstruct.core.schema_validation.validate_quality_checks",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.schema_validation",
            "llmstruct.core.schema_validation.validate_quality_checks"
          ],
          "uid_type": "function"
        },
        {
          "name": "calculate_validation_score",
          "docstring": "Calculate validation score based on errors and warnings.\n\nArgs:\n    errors: List of validation errors\n    warnings: List of validation warnings\n    total_entities: Total number of entities validated\n    \nReturns:\n    Validation score (0-100)",
          "line_range": [
            779,
            804
          ],
          "parameters": [
            "self",
            "errors",
            "warnings",
            "total_entities"
          ],
          "decorators": [],
          "uid": "llmstruct.core.schema_validation.calculate_validation_score",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.schema_validation",
            "llmstruct.core.schema_validation.calculate_validation_score"
          ],
          "uid_type": "function"
        },
        {
          "name": "validate",
          "docstring": "Comprehensive validation of LLMStruct data.\n\nArgs:\n    data: Data to validate\n    level: Validation level (basic, standard, strict, enterprise)\n    \nReturns:\n    ValidationResult with comprehensive validation information",
          "line_range": [
            806,
            888
          ],
          "parameters": [
            "self",
            "data",
            "level"
          ],
          "decorators": [],
          "uid": "llmstruct.core.schema_validation.validate",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.schema_validation",
            "llmstruct.core.schema_validation.validate"
          ],
          "uid_type": "function"
        },
        {
          "name": "validate_file",
          "docstring": "Validate JSON file.\n\nArgs:\n    file_path: Path to JSON file\n    level: Validation level\n    \nReturns:\n    ValidationResult",
          "line_range": [
            890,
            928
          ],
          "parameters": [
            "self",
            "file_path",
            "level"
          ],
          "decorators": [],
          "uid": "llmstruct.core.schema_validation.validate_file",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.schema_validation",
            "llmstruct.core.schema_validation.validate_file"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [
        {
          "name": "ValidationResult",
          "docstring": "Pydantic model for validation results.",
          "line_range": [
            37,
            48
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ],
          "uid": "llmstruct.core.schema_validation.ValidationResult",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.schema_validation",
            "llmstruct.core.schema_validation.ValidationResult"
          ],
          "uid_type": "class"
        },
        {
          "name": "ValidationLevel",
          "docstring": "Pydantic model for validation level configuration.",
          "line_range": [
            51,
            59
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ],
          "uid": "llmstruct.core.schema_validation.ValidationLevel",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.schema_validation",
            "llmstruct.core.schema_validation.ValidationLevel"
          ],
          "uid_type": "class"
        },
        {
          "name": "SchemaValidationSystem",
          "docstring": "Comprehensive Schema Validation System using professional tools.\n\nValidation Layers:\n1. JSON Schema - Structure validation\n2. Cerberus - Content validation  \n3. Pydantic - Type validation\n4. Custom - Business logic validation",
          "line_range": [
            62,
            928
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize Schema Validation System.\n\nArgs:\n    schema_dir: Directory containing validation schemas",
              "line_range": [
                73,
                92
              ],
              "parameters": [
                "self",
                "schema_dir"
              ],
              "uid": "llmstruct.core.schema_validation.SchemaValidationSystem.__init__",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.schema_validation",
                "llmstruct.core.schema_validation.SchemaValidationSystem",
                "llmstruct.core.schema_validation.SchemaValidationSystem.__init__"
              ],
              "uid_type": "method"
            },
            {
              "name": "_load_json_schemas",
              "docstring": "Load JSON Schema definitions.",
              "line_range": [
                94,
                269
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.core.schema_validation.SchemaValidationSystem._load_json_schemas",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.schema_validation",
                "llmstruct.core.schema_validation.SchemaValidationSystem",
                "llmstruct.core.schema_validation.SchemaValidationSystem._load_json_schemas"
              ],
              "uid_type": "method"
            },
            {
              "name": "_load_cerberus_schemas",
              "docstring": "Load Cerberus validation rules.",
              "line_range": [
                271,
                344
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.core.schema_validation.SchemaValidationSystem._load_cerberus_schemas",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.schema_validation",
                "llmstruct.core.schema_validation.SchemaValidationSystem",
                "llmstruct.core.schema_validation.SchemaValidationSystem._load_cerberus_schemas"
              ],
              "uid_type": "method"
            },
            {
              "name": "_create_marshmallow_schema",
              "docstring": "Create Marshmallow schema for serialization validation.",
              "line_range": [
                346,
                378
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.core.schema_validation.SchemaValidationSystem._create_marshmallow_schema",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.schema_validation",
                "llmstruct.core.schema_validation.SchemaValidationSystem",
                "llmstruct.core.schema_validation.SchemaValidationSystem._create_marshmallow_schema"
              ],
              "uid_type": "method"
            },
            {
              "name": "_define_validation_levels",
              "docstring": "Define validation levels with increasing strictness.",
              "line_range": [
                380,
                415
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.core.schema_validation.SchemaValidationSystem._define_validation_levels",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.schema_validation",
                "llmstruct.core.schema_validation.SchemaValidationSystem",
                "llmstruct.core.schema_validation.SchemaValidationSystem._define_validation_levels"
              ],
              "uid_type": "method"
            },
            {
              "name": "validate_json_schema",
              "docstring": "Validate data against JSON Schema.\n\nArgs:\n    data: Data to validate\n    schema_name: Schema to use for validation\n    \nReturns:\n    Tuple of (is_valid, errors)",
              "line_range": [
                417,
                459
              ],
              "parameters": [
                "self",
                "data",
                "schema_name"
              ],
              "uid": "llmstruct.core.schema_validation.SchemaValidationSystem.validate_json_schema",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.schema_validation",
                "llmstruct.core.schema_validation.SchemaValidationSystem",
                "llmstruct.core.schema_validation.SchemaValidationSystem.validate_json_schema"
              ],
              "uid_type": "method"
            },
            {
              "name": "validate_content_rules",
              "docstring": "Validate data using simple content rules (Cerberus alternative).\n\nArgs:\n    data: Data to validate\n    \nReturns:\n    Tuple of (is_valid, errors)",
              "line_range": [
                461,
                547
              ],
              "parameters": [
                "self",
                "data"
              ],
              "uid": "llmstruct.core.schema_validation.SchemaValidationSystem.validate_content_rules",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.schema_validation",
                "llmstruct.core.schema_validation.SchemaValidationSystem",
                "llmstruct.core.schema_validation.SchemaValidationSystem.validate_content_rules"
              ],
              "uid_type": "method"
            },
            {
              "name": "validate_marshmallow_schema",
              "docstring": "Validate data using Marshmallow schema.\n\nArgs:\n    data: Data to validate\n    \nReturns:\n    Tuple of (is_valid, errors)",
              "line_range": [
                549,
                580
              ],
              "parameters": [
                "self",
                "data"
              ],
              "uid": "llmstruct.core.schema_validation.SchemaValidationSystem.validate_marshmallow_schema",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.schema_validation",
                "llmstruct.core.schema_validation.SchemaValidationSystem",
                "llmstruct.core.schema_validation.SchemaValidationSystem.validate_marshmallow_schema"
              ],
              "uid_type": "method"
            },
            {
              "name": "validate_uid_consistency",
              "docstring": "Validate UID consistency across the structure.\n\nArgs:\n    data: Data to validate\n    \nReturns:\n    Tuple of (is_valid, errors)",
              "line_range": [
                582,
                679
              ],
              "parameters": [
                "self",
                "data"
              ],
              "uid": "llmstruct.core.schema_validation.SchemaValidationSystem.validate_uid_consistency",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.schema_validation",
                "llmstruct.core.schema_validation.SchemaValidationSystem",
                "llmstruct.core.schema_validation.SchemaValidationSystem.validate_uid_consistency"
              ],
              "uid_type": "method"
            },
            {
              "name": "validate_naming_conventions",
              "docstring": "Validate naming conventions.\n\nArgs:\n    data: Data to validate\n    \nReturns:\n    Tuple of (is_valid, errors)",
              "line_range": [
                681,
                726
              ],
              "parameters": [
                "self",
                "data"
              ],
              "uid": "llmstruct.core.schema_validation.SchemaValidationSystem.validate_naming_conventions",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.schema_validation",
                "llmstruct.core.schema_validation.SchemaValidationSystem",
                "llmstruct.core.schema_validation.SchemaValidationSystem.validate_naming_conventions"
              ],
              "uid_type": "method"
            },
            {
              "name": "validate_quality_checks",
              "docstring": "Perform quality checks on the data.\n\nArgs:\n    data: Data to validate\n    \nReturns:\n    Tuple of (is_valid, errors)",
              "line_range": [
                728,
                777
              ],
              "parameters": [
                "self",
                "data"
              ],
              "uid": "llmstruct.core.schema_validation.SchemaValidationSystem.validate_quality_checks",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.schema_validation",
                "llmstruct.core.schema_validation.SchemaValidationSystem",
                "llmstruct.core.schema_validation.SchemaValidationSystem.validate_quality_checks"
              ],
              "uid_type": "method"
            },
            {
              "name": "calculate_validation_score",
              "docstring": "Calculate validation score based on errors and warnings.\n\nArgs:\n    errors: List of validation errors\n    warnings: List of validation warnings\n    total_entities: Total number of entities validated\n    \nReturns:\n    Validation score (0-100)",
              "line_range": [
                779,
                804
              ],
              "parameters": [
                "self",
                "errors",
                "warnings",
                "total_entities"
              ],
              "uid": "llmstruct.core.schema_validation.SchemaValidationSystem.calculate_validation_score",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.schema_validation",
                "llmstruct.core.schema_validation.SchemaValidationSystem",
                "llmstruct.core.schema_validation.SchemaValidationSystem.calculate_validation_score"
              ],
              "uid_type": "method"
            },
            {
              "name": "validate",
              "docstring": "Comprehensive validation of LLMStruct data.\n\nArgs:\n    data: Data to validate\n    level: Validation level (basic, standard, strict, enterprise)\n    \nReturns:\n    ValidationResult with comprehensive validation information",
              "line_range": [
                806,
                888
              ],
              "parameters": [
                "self",
                "data",
                "level"
              ],
              "uid": "llmstruct.core.schema_validation.SchemaValidationSystem.validate",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.schema_validation",
                "llmstruct.core.schema_validation.SchemaValidationSystem",
                "llmstruct.core.schema_validation.SchemaValidationSystem.validate"
              ],
              "uid_type": "method"
            },
            {
              "name": "validate_file",
              "docstring": "Validate JSON file.\n\nArgs:\n    file_path: Path to JSON file\n    level: Validation level\n    \nReturns:\n    ValidationResult",
              "line_range": [
                890,
                928
              ],
              "parameters": [
                "self",
                "file_path",
                "level"
              ],
              "uid": "llmstruct.core.schema_validation.SchemaValidationSystem.validate_file",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.schema_validation",
                "llmstruct.core.schema_validation.SchemaValidationSystem",
                "llmstruct.core.schema_validation.SchemaValidationSystem.validate_file"
              ],
              "uid_type": "method"
            }
          ],
          "bases": [],
          "uid": "llmstruct.core.schema_validation.SchemaValidationSystem",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.schema_validation",
            "llmstruct.core.schema_validation.SchemaValidationSystem"
          ],
          "uid_type": "class"
        },
        {
          "name": "MetadataSchema",
          "docstring": "",
          "line_range": [
            349,
            357
          ],
          "methods": [],
          "bases": [
            "Schema"
          ],
          "uid": "llmstruct.core.schema_validation.MetadataSchema",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.schema_validation",
            "llmstruct.core.schema_validation.MetadataSchema"
          ],
          "uid_type": "class"
        },
        {
          "name": "ModuleSchema",
          "docstring": "",
          "line_range": [
            359,
            368
          ],
          "methods": [],
          "bases": [
            "Schema"
          ],
          "uid": "llmstruct.core.schema_validation.ModuleSchema",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.schema_validation",
            "llmstruct.core.schema_validation.ModuleSchema"
          ],
          "uid_type": "class"
        },
        {
          "name": "LLMStructSchema",
          "docstring": "",
          "line_range": [
            370,
            376
          ],
          "methods": [],
          "bases": [
            "Schema"
          ],
          "uid": "llmstruct.core.schema_validation.LLMStructSchema",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.schema_validation",
            "llmstruct.core.schema_validation.LLMStructSchema"
          ],
          "uid_type": "class"
        },
        {
          "name": "Meta",
          "docstring": "",
          "line_range": [
            350,
            351
          ],
          "methods": [],
          "bases": [],
          "uid": "llmstruct.core.schema_validation.Meta",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.schema_validation",
            "llmstruct.core.schema_validation.Meta"
          ],
          "uid_type": "class"
        },
        {
          "name": "Meta",
          "docstring": "",
          "line_range": [
            360,
            361
          ],
          "methods": [],
          "bases": [],
          "uid": "llmstruct.core.schema_validation.Meta",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.schema_validation",
            "llmstruct.core.schema_validation.Meta"
          ],
          "uid_type": "class"
        },
        {
          "name": "Meta",
          "docstring": "",
          "line_range": [
            371,
            372
          ],
          "methods": [],
          "bases": [],
          "uid": "llmstruct.core.schema_validation.Meta",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.schema_validation",
            "llmstruct.core.schema_validation.Meta"
          ],
          "uid_type": "class"
        }
      ],
      "callgraph": {
        "__init__": [
          "self._load_cerberus_schemas",
          "Path",
          "Validator",
          "self._define_validation_levels",
          "self._load_json_schemas",
          "self._create_marshmallow_schema"
        ],
        "_load_json_schemas": [],
        "_load_cerberus_schemas": [],
        "_create_marshmallow_schema": [
          "fields.Dict",
          "fields.List",
          "fields.Nested",
          "LLMStructSchema",
          "fields.Str"
        ],
        "_define_validation_levels": [
          "ValidationLevel"
        ],
        "validate_json_schema": [
          "errors.append",
          "list",
          "str",
          "validate"
        ],
        "validate_content_rules": [
          "len",
          "path.endswith",
          "module.get",
          "errors.append",
          "enumerate",
          "str",
          "module_id.replace",
          "metadata.get",
          "func.get"
        ],
        "validate_marshmallow_schema": [
          "errors.append",
          "str"
        ],
        "validate_uid_consistency": [
          "all_uids.add",
          "method.get",
          "data.get",
          "len",
          "toc_item.get",
          "func.get",
          "module.get",
          "errors.append",
          "enumerate",
          "cls.get",
          "set"
        ],
        "validate_naming_conventions": [
          "re.compile",
          "pascal_case_pattern.match",
          "data.get",
          "warnings.append",
          "module.get",
          "snake_case_pattern.match",
          "cls.get",
          "enumerate",
          "func.get"
        ],
        "validate_quality_checks": [
          "data.get",
          "len",
          "warnings.append",
          "radon_metrics.get",
          "module.get",
          "enumerate",
          "func.get"
        ],
        "calculate_validation_score": [
          "max",
          "len",
          "min"
        ],
        "validate": [
          "self.validate_content_rules",
          "data.get",
          "len",
          "self.validate_uid_consistency",
          "ValidationResult",
          "self.validate_naming_conventions",
          "all_errors.extend",
          "module.get",
          "self.calculate_validation_score",
          "self.validate_quality_checks",
          "cls.get",
          "ValueError",
          "all_warnings.extend",
          "all_warnings.append",
          "self.validate_json_schema",
          "self.validate_marshmallow_schema"
        ],
        "validate_file": [
          "ValidationResult",
          "open",
          "json.load",
          "str",
          "self.validate"
        ],
        "create_schema_validator": [
          "SchemaValidationSystem"
        ],
        "validate_llmstruct_json": [
          "create_schema_validator",
          "validator.validate"
        ],
        "validate_llmstruct_file": [
          "validator.validate_file",
          "create_schema_validator"
        ]
      },
      "dependencies": [
        "Any",
        "BaseModel",
        "ConfigDict",
        "Dict",
        "Draft7Validator",
        "Field",
        "List",
        "Optional",
        "Path",
        "Schema",
        "Tuple",
        "UIDType",
        "Union",
        "ValidationError",
        "Validator",
        "cerberus",
        "dataclass",
        "dataclasses",
        "datetime",
        "fields",
        "json",
        "jsonschema",
        "marshmallow",
        "os",
        "pathlib",
        "pydantic",
        "re",
        "typing",
        "uid_generator",
        "validate"
      ],
      "hash": "28dfdcf22d39c9d75c1df60851773a9dcbbd3e303b4bf50334ee22a742c9eca4",
      "uid": "llmstruct.core.schema_validation",
      "uid_components": [
        "llmstruct",
        "llmstruct.core",
        "llmstruct.core.schema_validation"
      ],
      "uid_type": "module",
      "artifact_id": "a9d8df8b-26d6-d16e-7061-c978efdc9607",
      "metrics": {
        "cyclomatic_complexity": 35,
        "lines_of_code": 170,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 30,
        "test_coverage": 0.0,
        "maintainability_index": 0
      },
      "markdown_anchor": {
        "id": "llmstruct-core-schema_validation",
        "title": "Module: llmstruct.core.schema_validation",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.core.schema_validation](#llmstruct-core-schema_validation)",
        "html_anchor": "<a id=\"llmstruct-core-schema_validation\"></a>"
      }
    },
    {
      "module_id": "llmstruct.core.json_structure",
      "path": "llmstruct/core/json_structure.py",
      "category": "core",
      "module_doc": "Enhanced JSON Structure for LLMStruct v2.1\n\nProvides hierarchical JSON organization, built-in metrics, and markdown anchors.\nOptimizes JSON structure for LLM consumption and human readability.",
      "functions": [
        {
          "name": "enhance_json_structure",
          "docstring": "Convenience function to enhance JSON structure.\n\nArgs:\n    json_data: Original JSON from generators\n    \nReturns:\n    Enhanced JSON with v2.1 features",
          "line_range": [
            207,
            218
          ],
          "parameters": [
            "json_data"
          ],
          "decorators": [],
          "uid": "llmstruct.core.json_structure.enhance_json_structure",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.json_structure",
            "llmstruct.core.json_structure.enhance_json_structure"
          ],
          "uid_type": "function"
        },
        {
          "name": "to_dict",
          "docstring": "Convert to dictionary for JSON serialization.",
          "line_range": [
            26,
            28
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.core.json_structure.to_dict",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.json_structure",
            "llmstruct.core.json_structure.to_dict"
          ],
          "uid_type": "function"
        },
        {
          "name": "to_markdown_link",
          "docstring": "Generate markdown link.",
          "line_range": [
            39,
            41
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.core.json_structure.to_markdown_link",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.json_structure",
            "llmstruct.core.json_structure.to_markdown_link"
          ],
          "uid_type": "function"
        },
        {
          "name": "to_anchor_tag",
          "docstring": "Generate HTML anchor tag.",
          "line_range": [
            43,
            45
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.core.json_structure.to_anchor_tag",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.json_structure",
            "llmstruct.core.json_structure.to_anchor_tag"
          ],
          "uid_type": "function"
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            51,
            54
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.core.json_structure.__init__",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.json_structure",
            "llmstruct.core.json_structure.__init__"
          ],
          "uid_type": "function"
        },
        {
          "name": "generate_enhanced_json",
          "docstring": "Generate enhanced JSON with hierarchical structure and metrics.\n\nArgs:\n    base_json: Original JSON structure from generators\n    \nReturns:\n    Enhanced JSON with hierarchy, metrics, and anchors",
          "line_range": [
            56,
            104
          ],
          "parameters": [
            "self",
            "base_json"
          ],
          "decorators": [],
          "uid": "llmstruct.core.json_structure.generate_enhanced_json",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.json_structure",
            "llmstruct.core.json_structure.generate_enhanced_json"
          ],
          "uid_type": "function"
        },
        {
          "name": "organize_modules_hierarchically",
          "docstring": "Organize modules in hierarchical structure for better navigation.",
          "line_range": [
            106,
            124
          ],
          "parameters": [
            "self",
            "modules"
          ],
          "decorators": [],
          "uid": "llmstruct.core.json_structure.organize_modules_hierarchically",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.json_structure",
            "llmstruct.core.json_structure.organize_modules_hierarchically"
          ],
          "uid_type": "function"
        },
        {
          "name": "_enhance_module",
          "docstring": "Enhance module with metrics and anchors.",
          "line_range": [
            126,
            138
          ],
          "parameters": [
            "self",
            "module"
          ],
          "decorators": [],
          "uid": "llmstruct.core.json_structure._enhance_module",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.json_structure",
            "llmstruct.core.json_structure._enhance_module"
          ],
          "uid_type": "function"
        },
        {
          "name": "_calculate_module_metrics",
          "docstring": "Calculate built-in metrics for module.",
          "line_range": [
            140,
            154
          ],
          "parameters": [
            "self",
            "module"
          ],
          "decorators": [],
          "uid": "llmstruct.core.json_structure._calculate_module_metrics",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.json_structure",
            "llmstruct.core.json_structure._calculate_module_metrics"
          ],
          "uid_type": "function"
        },
        {
          "name": "_generate_markdown_anchor",
          "docstring": "Generate markdown anchor for entity.",
          "line_range": [
            156,
            187
          ],
          "parameters": [
            "self",
            "uid",
            "entity_type",
            "name"
          ],
          "decorators": [],
          "uid": "llmstruct.core.json_structure._generate_markdown_anchor",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.json_structure",
            "llmstruct.core.json_structure._generate_markdown_anchor"
          ],
          "uid_type": "function"
        },
        {
          "name": "_calculate_global_metrics",
          "docstring": "Calculate global project metrics.",
          "line_range": [
            189,
            203
          ],
          "parameters": [
            "self",
            "json_data"
          ],
          "decorators": [],
          "uid": "llmstruct.core.json_structure._calculate_global_metrics",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.json_structure",
            "llmstruct.core.json_structure._calculate_global_metrics"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [
        {
          "name": "CodeMetrics",
          "docstring": "Built-in metrics for code entities.",
          "line_range": [
            16,
            28
          ],
          "methods": [
            {
              "name": "to_dict",
              "docstring": "Convert to dictionary for JSON serialization.",
              "line_range": [
                26,
                28
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.core.json_structure.CodeMetrics.to_dict",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.json_structure",
                "llmstruct.core.json_structure.CodeMetrics",
                "llmstruct.core.json_structure.CodeMetrics.to_dict"
              ],
              "uid_type": "method"
            }
          ],
          "bases": [],
          "uid": "llmstruct.core.json_structure.CodeMetrics",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.json_structure",
            "llmstruct.core.json_structure.CodeMetrics"
          ],
          "uid_type": "class"
        },
        {
          "name": "MarkdownAnchor",
          "docstring": "Markdown anchor for documentation generation.",
          "line_range": [
            32,
            45
          ],
          "methods": [
            {
              "name": "to_markdown_link",
              "docstring": "Generate markdown link.",
              "line_range": [
                39,
                41
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.core.json_structure.MarkdownAnchor.to_markdown_link",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.json_structure",
                "llmstruct.core.json_structure.MarkdownAnchor",
                "llmstruct.core.json_structure.MarkdownAnchor.to_markdown_link"
              ],
              "uid_type": "method"
            },
            {
              "name": "to_anchor_tag",
              "docstring": "Generate HTML anchor tag.",
              "line_range": [
                43,
                45
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.core.json_structure.MarkdownAnchor.to_anchor_tag",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.json_structure",
                "llmstruct.core.json_structure.MarkdownAnchor",
                "llmstruct.core.json_structure.MarkdownAnchor.to_anchor_tag"
              ],
              "uid_type": "method"
            }
          ],
          "bases": [],
          "uid": "llmstruct.core.json_structure.MarkdownAnchor",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.json_structure",
            "llmstruct.core.json_structure.MarkdownAnchor"
          ],
          "uid_type": "class"
        },
        {
          "name": "HierarchicalJSON",
          "docstring": "Enhanced JSON structure with hierarchy and metrics.",
          "line_range": [
            48,
            203
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                51,
                54
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.core.json_structure.HierarchicalJSON.__init__",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.json_structure",
                "llmstruct.core.json_structure.HierarchicalJSON",
                "llmstruct.core.json_structure.HierarchicalJSON.__init__"
              ],
              "uid_type": "method"
            },
            {
              "name": "generate_enhanced_json",
              "docstring": "Generate enhanced JSON with hierarchical structure and metrics.\n\nArgs:\n    base_json: Original JSON structure from generators\n    \nReturns:\n    Enhanced JSON with hierarchy, metrics, and anchors",
              "line_range": [
                56,
                104
              ],
              "parameters": [
                "self",
                "base_json"
              ],
              "uid": "llmstruct.core.json_structure.HierarchicalJSON.generate_enhanced_json",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.json_structure",
                "llmstruct.core.json_structure.HierarchicalJSON",
                "llmstruct.core.json_structure.HierarchicalJSON.generate_enhanced_json"
              ],
              "uid_type": "method"
            },
            {
              "name": "organize_modules_hierarchically",
              "docstring": "Organize modules in hierarchical structure for better navigation.",
              "line_range": [
                106,
                124
              ],
              "parameters": [
                "self",
                "modules"
              ],
              "uid": "llmstruct.core.json_structure.HierarchicalJSON.organize_modules_hierarchically",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.json_structure",
                "llmstruct.core.json_structure.HierarchicalJSON",
                "llmstruct.core.json_structure.HierarchicalJSON.organize_modules_hierarchically"
              ],
              "uid_type": "method"
            },
            {
              "name": "_enhance_module",
              "docstring": "Enhance module with metrics and anchors.",
              "line_range": [
                126,
                138
              ],
              "parameters": [
                "self",
                "module"
              ],
              "uid": "llmstruct.core.json_structure.HierarchicalJSON._enhance_module",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.json_structure",
                "llmstruct.core.json_structure.HierarchicalJSON",
                "llmstruct.core.json_structure.HierarchicalJSON._enhance_module"
              ],
              "uid_type": "method"
            },
            {
              "name": "_calculate_module_metrics",
              "docstring": "Calculate built-in metrics for module.",
              "line_range": [
                140,
                154
              ],
              "parameters": [
                "self",
                "module"
              ],
              "uid": "llmstruct.core.json_structure.HierarchicalJSON._calculate_module_metrics",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.json_structure",
                "llmstruct.core.json_structure.HierarchicalJSON",
                "llmstruct.core.json_structure.HierarchicalJSON._calculate_module_metrics"
              ],
              "uid_type": "method"
            },
            {
              "name": "_generate_markdown_anchor",
              "docstring": "Generate markdown anchor for entity.",
              "line_range": [
                156,
                187
              ],
              "parameters": [
                "self",
                "uid",
                "entity_type",
                "name"
              ],
              "uid": "llmstruct.core.json_structure.HierarchicalJSON._generate_markdown_anchor",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.json_structure",
                "llmstruct.core.json_structure.HierarchicalJSON",
                "llmstruct.core.json_structure.HierarchicalJSON._generate_markdown_anchor"
              ],
              "uid_type": "method"
            },
            {
              "name": "_calculate_global_metrics",
              "docstring": "Calculate global project metrics.",
              "line_range": [
                189,
                203
              ],
              "parameters": [
                "self",
                "json_data"
              ],
              "uid": "llmstruct.core.json_structure.HierarchicalJSON._calculate_global_metrics",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.json_structure",
                "llmstruct.core.json_structure.HierarchicalJSON",
                "llmstruct.core.json_structure.HierarchicalJSON._calculate_global_metrics"
              ],
              "uid_type": "method"
            }
          ],
          "bases": [],
          "uid": "llmstruct.core.json_structure.HierarchicalJSON",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.json_structure",
            "llmstruct.core.json_structure.HierarchicalJSON"
          ],
          "uid_type": "class"
        }
      ],
      "callgraph": {
        "to_dict": [
          "asdict"
        ],
        "to_markdown_link": [],
        "to_anchor_tag": [],
        "__init__": [
          "defaultdict"
        ],
        "generate_enhanced_json": [
          "self._generate_markdown_anchor",
          "self.organize_modules_hierarchically",
          "self._enhance_module",
          "base_json.copy",
          "self._calculate_global_metrics",
          "item.get"
        ],
        "organize_modules_hierarchically": [
          "len",
          "defaultdict",
          "self._enhance_module",
          "module.get",
          "dict",
          "module_id.split"
        ],
        "_enhance_module": [
          "self._generate_markdown_anchor",
          "module.get",
          "self._calculate_module_metrics",
          "module.copy"
        ],
        "_calculate_module_metrics": [
          "len",
          "max",
          "module.get",
          "CodeMetrics",
          "sum",
          "func.get"
        ],
        "_generate_markdown_anchor": [
          "anchor.to_anchor_tag",
          "anchor.to_markdown_link",
          "uid.lower",
          "MarkdownAnchor"
        ],
        "_calculate_global_metrics": [
          "len",
          "max",
          "sum",
          "m.get",
          "json_data.get",
          "round"
        ],
        "enhance_json_structure": [
          "HierarchicalJSON",
          "enhancer.generate_enhanced_json"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Set",
        "Tuple",
        "asdict",
        "collections",
        "dataclass",
        "dataclasses",
        "defaultdict",
        "json",
        "math",
        "typing"
      ],
      "hash": "cfd9ae3d6e46fef871a21099dc6b4dafc3eb8f1c0ba8dd731e5b37ecb4ab0302",
      "uid": "llmstruct.core.json_structure",
      "uid_components": [
        "llmstruct",
        "llmstruct.core",
        "llmstruct.core.json_structure"
      ],
      "uid_type": "module",
      "artifact_id": "623377b6-8fd5-a474-b685-4679c89ec3ef",
      "metrics": {
        "cyclomatic_complexity": 17,
        "lines_of_code": 110,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 14,
        "test_coverage": 0.0,
        "maintainability_index": 15
      },
      "markdown_anchor": {
        "id": "llmstruct-core-json_structure",
        "title": "Module: llmstruct.core.json_structure",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.core.json_structure](#llmstruct-core-json_structure)",
        "html_anchor": "<a id=\"llmstruct-core-json_structure\"></a>"
      }
    },
    {
      "module_id": "llmstruct.validators.__init__",
      "path": "llmstruct/validators/__init__.py",
      "category": "cli",
      "module_doc": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "json_validator",
        "validate_struct_json"
      ],
      "hash": "f0ee4f577643fd8bc74b46fd7debd96cc15683b5a7ad0018bb0788523f4b8d34",
      "uid": "llmstruct.validators.__init__",
      "uid_components": [
        "llmstruct",
        "llmstruct.validators",
        "llmstruct.validators.__init__"
      ],
      "uid_type": "module",
      "artifact_id": "72756c0b-d7ec-c7e6-ce76-7f0970a597c0",
      "metrics": {
        "cyclomatic_complexity": 0,
        "lines_of_code": 0,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 2,
        "test_coverage": 0.0,
        "maintainability_index": 100
      },
      "markdown_anchor": {
        "id": "llmstruct-validators-__init__",
        "title": "Module: llmstruct.validators.__init__",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.validators.__init__](#llmstruct-validators-__init__)",
        "html_anchor": "<a id=\"llmstruct-validators-__init__\"></a>"
      }
    },
    {
      "module_id": "llmstruct.validators.json_validator",
      "path": "llmstruct/validators/json_validator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_struct_json",
          "docstring": "Validate a single JSON file against a schema.",
          "line_range": [
            12,
            40
          ],
          "parameters": [
            "json_path",
            "schema_path"
          ],
          "decorators": [],
          "uid": "llmstruct.validators.json_validator.validate_struct_json",
          "uid_components": [
            "llmstruct",
            "llmstruct.validators",
            "llmstruct.validators.json_validator",
            "llmstruct.validators.json_validator.validate_struct_json"
          ],
          "uid_type": "function"
        },
        {
          "name": "validate_directory",
          "docstring": "Validate all JSON files in a directory against a schema.",
          "line_range": [
            43,
            61
          ],
          "parameters": [
            "directory",
            "schema_path",
            "include_patterns",
            "exclude_patterns"
          ],
          "decorators": [],
          "uid": "llmstruct.validators.json_validator.validate_directory",
          "uid_components": [
            "llmstruct",
            "llmstruct.validators",
            "llmstruct.validators.json_validator",
            "llmstruct.validators.json_validator.validate_directory"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_struct_json": [
          "open",
          "Path",
          "schema_file.exists",
          "logging.error",
          "json_file.exists",
          "json.load",
          "validate",
          "str",
          "logging.info"
        ],
        "validate_directory": [
          "validate_struct_json",
          "Path",
          "str",
          "any",
          "json_file.match"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "ValidationError",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "sys",
        "typing",
        "validate"
      ],
      "hash": "cc5c6b4f74409f89459ec86a9d59d83cd92c691e95ab4e670e6b8ac8c979a232",
      "uid": "llmstruct.validators.json_validator",
      "uid_components": [
        "llmstruct",
        "llmstruct.validators",
        "llmstruct.validators.json_validator"
      ],
      "uid_type": "module",
      "artifact_id": "1ad2ca4d-0eea-8eb1-e56e-783bab7d7a66",
      "metrics": {
        "cyclomatic_complexity": 2,
        "lines_of_code": 20,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 11,
        "test_coverage": 0.0,
        "maintainability_index": 90
      },
      "markdown_anchor": {
        "id": "llmstruct-validators-json_validator",
        "title": "Module: llmstruct.validators.json_validator",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.validators.json_validator](#llmstruct-validators-json_validator)",
        "html_anchor": "<a id=\"llmstruct-validators-json_validator\"></a>"
      }
    },
    {
      "module_id": "llmstruct.parsers.universal_converter",
      "path": "llmstruct/parsers/universal_converter.py",
      "category": "core",
      "module_doc": "Universal Code Converter - Orchestrates all language parsers\nConverts any codebase to llmstruct JSON format",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface for universal converter",
          "line_range": [
            375,
            428
          ],
          "parameters": [],
          "decorators": [],
          "uid": "llmstruct.parsers.universal_converter.main",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.universal_converter",
            "llmstruct.parsers.universal_converter.main"
          ],
          "uid_type": "function"
        },
        {
          "name": "__post_init__",
          "docstring": "",
          "line_range": [
            55,
            62
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.universal_converter.__post_init__",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.universal_converter",
            "llmstruct.parsers.universal_converter.__post_init__"
          ],
          "uid_type": "function"
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            79,
            82
          ],
          "parameters": [
            "self",
            "config"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.universal_converter.__init__",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.universal_converter",
            "llmstruct.parsers.universal_converter.__init__"
          ],
          "uid_type": "function"
        },
        {
          "name": "detect_language",
          "docstring": "Detect programming language from file extension",
          "line_range": [
            84,
            92
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.universal_converter.detect_language",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.universal_converter",
            "llmstruct.parsers.universal_converter.detect_language"
          ],
          "uid_type": "function"
        },
        {
          "name": "detect_project_languages",
          "docstring": "Detect all languages in project and count files",
          "line_range": [
            94,
            109
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.universal_converter.detect_project_languages",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.universal_converter",
            "llmstruct.parsers.universal_converter.detect_project_languages"
          ],
          "uid_type": "function"
        },
        {
          "name": "get_project_files",
          "docstring": "Get all relevant files for conversion",
          "line_range": [
            111,
            138
          ],
          "parameters": [
            "self",
            "project_path",
            "language"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.universal_converter.get_project_files",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.universal_converter",
            "llmstruct.parsers.universal_converter.get_project_files"
          ],
          "uid_type": "function"
        },
        {
          "name": "convert_python_project",
          "docstring": "Convert Python project to llmstruct format",
          "line_range": [
            140,
            171
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.universal_converter.convert_python_project",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.universal_converter",
            "llmstruct.parsers.universal_converter.convert_python_project"
          ],
          "uid_type": "function"
        },
        {
          "name": "convert_go_project",
          "docstring": "Convert Go project to llmstruct format",
          "line_range": [
            173,
            190
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.universal_converter.convert_go_project",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.universal_converter",
            "llmstruct.parsers.universal_converter.convert_go_project"
          ],
          "uid_type": "function"
        },
        {
          "name": "convert_javascript_project",
          "docstring": "Convert JavaScript project to llmstruct format",
          "line_range": [
            192,
            223
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.universal_converter.convert_javascript_project",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.universal_converter",
            "llmstruct.parsers.universal_converter.convert_javascript_project"
          ],
          "uid_type": "function"
        },
        {
          "name": "convert_project",
          "docstring": "Convert any project to llmstruct format",
          "line_range": [
            225,
            250
          ],
          "parameters": [
            "self",
            "project_path",
            "language"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.universal_converter.convert_project",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.universal_converter",
            "llmstruct.parsers.universal_converter.convert_project"
          ],
          "uid_type": "function"
        },
        {
          "name": "convert_multi_language_project",
          "docstring": "Convert multi-language project with separate sections per language",
          "line_range": [
            252,
            282
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.universal_converter.convert_multi_language_project",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.universal_converter",
            "llmstruct.parsers.universal_converter.convert_multi_language_project"
          ],
          "uid_type": "function"
        },
        {
          "name": "_build_project_structure",
          "docstring": "Build standard llmstruct project structure",
          "line_range": [
            284,
            312
          ],
          "parameters": [
            "self",
            "language",
            "project_path",
            "modules",
            "toc"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.universal_converter._build_project_structure",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.universal_converter",
            "llmstruct.parsers.universal_converter._build_project_structure"
          ],
          "uid_type": "function"
        },
        {
          "name": "_build_empty_project_structure",
          "docstring": "Build empty structure when conversion fails",
          "line_range": [
            314,
            329
          ],
          "parameters": [
            "self",
            "language",
            "project_path",
            "error"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.universal_converter._build_empty_project_structure",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.universal_converter",
            "llmstruct.parsers.universal_converter._build_empty_project_structure"
          ],
          "uid_type": "function"
        },
        {
          "name": "_merge_language_results",
          "docstring": "Merge multiple language results into unified structure",
          "line_range": [
            331,
            372
          ],
          "parameters": [
            "self",
            "project_path",
            "language_results"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.universal_converter._merge_language_results",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.universal_converter",
            "llmstruct.parsers.universal_converter._merge_language_results"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [
        {
          "name": "Language",
          "docstring": "",
          "line_range": [
            33,
            42
          ],
          "methods": [],
          "bases": [
            "Enum"
          ],
          "uid": "llmstruct.parsers.universal_converter.Language",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.universal_converter",
            "llmstruct.parsers.universal_converter.Language"
          ],
          "uid_type": "class"
        },
        {
          "name": "ConverterConfig",
          "docstring": "Configuration for universal converter",
          "line_range": [
            46,
            62
          ],
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "",
              "line_range": [
                55,
                62
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.parsers.universal_converter.ConverterConfig.__post_init__",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.universal_converter",
                "llmstruct.parsers.universal_converter.ConverterConfig",
                "llmstruct.parsers.universal_converter.ConverterConfig.__post_init__"
              ],
              "uid_type": "method"
            }
          ],
          "bases": [],
          "uid": "llmstruct.parsers.universal_converter.ConverterConfig",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.universal_converter",
            "llmstruct.parsers.universal_converter.ConverterConfig"
          ],
          "uid_type": "class"
        },
        {
          "name": "UniversalConverter",
          "docstring": "Universal code converter for any programming language",
          "line_range": [
            65,
            372
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                79,
                82
              ],
              "parameters": [
                "self",
                "config"
              ],
              "uid": "llmstruct.parsers.universal_converter.UniversalConverter.__init__",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.universal_converter",
                "llmstruct.parsers.universal_converter.UniversalConverter",
                "llmstruct.parsers.universal_converter.UniversalConverter.__init__"
              ],
              "uid_type": "method"
            },
            {
              "name": "detect_language",
              "docstring": "Detect programming language from file extension",
              "line_range": [
                84,
                92
              ],
              "parameters": [
                "self",
                "file_path"
              ],
              "uid": "llmstruct.parsers.universal_converter.UniversalConverter.detect_language",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.universal_converter",
                "llmstruct.parsers.universal_converter.UniversalConverter",
                "llmstruct.parsers.universal_converter.UniversalConverter.detect_language"
              ],
              "uid_type": "method"
            },
            {
              "name": "detect_project_languages",
              "docstring": "Detect all languages in project and count files",
              "line_range": [
                94,
                109
              ],
              "parameters": [
                "self",
                "project_path"
              ],
              "uid": "llmstruct.parsers.universal_converter.UniversalConverter.detect_project_languages",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.universal_converter",
                "llmstruct.parsers.universal_converter.UniversalConverter",
                "llmstruct.parsers.universal_converter.UniversalConverter.detect_project_languages"
              ],
              "uid_type": "method"
            },
            {
              "name": "get_project_files",
              "docstring": "Get all relevant files for conversion",
              "line_range": [
                111,
                138
              ],
              "parameters": [
                "self",
                "project_path",
                "language"
              ],
              "uid": "llmstruct.parsers.universal_converter.UniversalConverter.get_project_files",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.universal_converter",
                "llmstruct.parsers.universal_converter.UniversalConverter",
                "llmstruct.parsers.universal_converter.UniversalConverter.get_project_files"
              ],
              "uid_type": "method"
            },
            {
              "name": "convert_python_project",
              "docstring": "Convert Python project to llmstruct format",
              "line_range": [
                140,
                171
              ],
              "parameters": [
                "self",
                "project_path"
              ],
              "uid": "llmstruct.parsers.universal_converter.UniversalConverter.convert_python_project",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.universal_converter",
                "llmstruct.parsers.universal_converter.UniversalConverter",
                "llmstruct.parsers.universal_converter.UniversalConverter.convert_python_project"
              ],
              "uid_type": "method"
            },
            {
              "name": "convert_go_project",
              "docstring": "Convert Go project to llmstruct format",
              "line_range": [
                173,
                190
              ],
              "parameters": [
                "self",
                "project_path"
              ],
              "uid": "llmstruct.parsers.universal_converter.UniversalConverter.convert_go_project",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.universal_converter",
                "llmstruct.parsers.universal_converter.UniversalConverter",
                "llmstruct.parsers.universal_converter.UniversalConverter.convert_go_project"
              ],
              "uid_type": "method"
            },
            {
              "name": "convert_javascript_project",
              "docstring": "Convert JavaScript project to llmstruct format",
              "line_range": [
                192,
                223
              ],
              "parameters": [
                "self",
                "project_path"
              ],
              "uid": "llmstruct.parsers.universal_converter.UniversalConverter.convert_javascript_project",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.universal_converter",
                "llmstruct.parsers.universal_converter.UniversalConverter",
                "llmstruct.parsers.universal_converter.UniversalConverter.convert_javascript_project"
              ],
              "uid_type": "method"
            },
            {
              "name": "convert_project",
              "docstring": "Convert any project to llmstruct format",
              "line_range": [
                225,
                250
              ],
              "parameters": [
                "self",
                "project_path",
                "language"
              ],
              "uid": "llmstruct.parsers.universal_converter.UniversalConverter.convert_project",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.universal_converter",
                "llmstruct.parsers.universal_converter.UniversalConverter",
                "llmstruct.parsers.universal_converter.UniversalConverter.convert_project"
              ],
              "uid_type": "method"
            },
            {
              "name": "convert_multi_language_project",
              "docstring": "Convert multi-language project with separate sections per language",
              "line_range": [
                252,
                282
              ],
              "parameters": [
                "self",
                "project_path"
              ],
              "uid": "llmstruct.parsers.universal_converter.UniversalConverter.convert_multi_language_project",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.universal_converter",
                "llmstruct.parsers.universal_converter.UniversalConverter",
                "llmstruct.parsers.universal_converter.UniversalConverter.convert_multi_language_project"
              ],
              "uid_type": "method"
            },
            {
              "name": "_build_project_structure",
              "docstring": "Build standard llmstruct project structure",
              "line_range": [
                284,
                312
              ],
              "parameters": [
                "self",
                "language",
                "project_path",
                "modules",
                "toc"
              ],
              "uid": "llmstruct.parsers.universal_converter.UniversalConverter._build_project_structure",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.universal_converter",
                "llmstruct.parsers.universal_converter.UniversalConverter",
                "llmstruct.parsers.universal_converter.UniversalConverter._build_project_structure"
              ],
              "uid_type": "method"
            },
            {
              "name": "_build_empty_project_structure",
              "docstring": "Build empty structure when conversion fails",
              "line_range": [
                314,
                329
              ],
              "parameters": [
                "self",
                "language",
                "project_path",
                "error"
              ],
              "uid": "llmstruct.parsers.universal_converter.UniversalConverter._build_empty_project_structure",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.universal_converter",
                "llmstruct.parsers.universal_converter.UniversalConverter",
                "llmstruct.parsers.universal_converter.UniversalConverter._build_empty_project_structure"
              ],
              "uid_type": "method"
            },
            {
              "name": "_merge_language_results",
              "docstring": "Merge multiple language results into unified structure",
              "line_range": [
                331,
                372
              ],
              "parameters": [
                "self",
                "project_path",
                "language_results"
              ],
              "uid": "llmstruct.parsers.universal_converter.UniversalConverter._merge_language_results",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.universal_converter",
                "llmstruct.parsers.universal_converter.UniversalConverter",
                "llmstruct.parsers.universal_converter.UniversalConverter._merge_language_results"
              ],
              "uid_type": "method"
            }
          ],
          "bases": [],
          "uid": "llmstruct.parsers.universal_converter.UniversalConverter",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.universal_converter",
            "llmstruct.parsers.universal_converter.UniversalConverter"
          ],
          "uid_type": "class"
        }
      ],
      "callgraph": {
        "__post_init__": [],
        "__init__": [
          "JavaScriptParser",
          "GoAnalyzer",
          "ConverterConfig"
        ],
        "detect_language": [
          "Path"
        ],
        "detect_project_languages": [
          "languages.get",
          "any",
          "self.detect_language",
          "os.walk"
        ],
        "get_project_files": [
          "files.append",
          "any",
          "self.detect_language",
          "os.walk"
        ],
        "convert_python_project": [
          "modules.append",
          "len",
          "analyze_python",
          "toc.append",
          "module_data.get",
          "logger.warning",
          "self._build_project_structure",
          "logger.info",
          "self.get_project_files"
        ],
        "convert_go_project": [
          "convert_to_llmstruct_format",
          "logger.info",
          "logger.error",
          "self._build_empty_project_structure",
          "str"
        ],
        "convert_javascript_project": [
          "modules.append",
          "len",
          "toc.append",
          "module_data.get",
          "logger.warning",
          "self._build_project_structure",
          "logger.info",
          "self.get_project_files"
        ],
        "convert_project": [
          "self.convert_python_project",
          "max",
          "ValueError",
          "logger.info",
          "NotImplementedError",
          "self.convert_go_project",
          "languages.keys",
          "self.detect_project_languages",
          "self.convert_javascript_project"
        ],
        "convert_multi_language_project": [
          "self._merge_language_results",
          "self.convert_python_project",
          "logger.warning",
          "ValueError",
          "logger.info",
          "logger.error",
          "self.convert_go_project",
          "languages.keys",
          "self.detect_project_languages",
          "self.convert_javascript_project"
        ],
        "_build_project_structure": [
          "language.title",
          "len",
          "m.get",
          "sum"
        ],
        "_build_empty_project_structure": [],
        "_merge_language_results": [
          "all_modules.append",
          "language_results.keys",
          "all_toc.append",
          "stats.get",
          "list",
          "language_results.items",
          "result.get"
        ],
        "main": [
          "converter.convert_multi_language_project",
          "argparse.ArgumentParser",
          "parser.add_argument",
          "exit",
          "print",
          "open",
          "ConverterConfig",
          "parser.parse_args",
          "UniversalConverter",
          "json.dumps",
          "converter.convert_project",
          "stats.get",
          "logger.error",
          "Language",
          "result.get",
          "f.write",
          "traceback.print_exc"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "GoAnalyzer",
        "JavaScriptParser",
        "List",
        "Optional",
        "Path",
        "Union",
        "analyze_module",
        "argparse",
        "convert_to_llmstruct_format",
        "dataclass",
        "dataclasses",
        "enum",
        "go_analyzer",
        "javascript_parser",
        "json",
        "logging",
        "os",
        "pathlib",
        "python_parser",
        "sys",
        "traceback",
        "typing"
      ],
      "hash": "e696f22d510dfa07afbd538e69c6d7ac3c8dd4e742905cfe256be1005e0c2b95",
      "uid": "llmstruct.parsers.universal_converter",
      "uid_components": [
        "llmstruct",
        "llmstruct.parsers",
        "llmstruct.parsers.universal_converter"
      ],
      "uid_type": "module",
      "artifact_id": "5cd02ca6-96a7-eb31-2641-504ec44f21da",
      "metrics": {
        "cyclomatic_complexity": 20,
        "lines_of_code": 140,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 25,
        "test_coverage": 0.0,
        "maintainability_index": 0
      },
      "markdown_anchor": {
        "id": "llmstruct-parsers-universal_converter",
        "title": "Module: llmstruct.parsers.universal_converter",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.parsers.universal_converter](#llmstruct-parsers-universal_converter)",
        "html_anchor": "<a id=\"llmstruct-parsers-universal_converter\"></a>"
      }
    },
    {
      "module_id": "llmstruct.parsers.python_parser",
      "path": "llmstruct/parsers/python_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "infer_category",
          "docstring": "Infer module category based on its path.",
          "line_range": [
            13,
            20
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.python_parser.infer_category",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.python_parser",
            "llmstruct.parsers.python_parser.infer_category"
          ],
          "uid_type": "function"
        },
        {
          "name": "compute_file_hash",
          "docstring": "Compute SHA-256 hash of file content.",
          "line_range": [
            72,
            79
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.python_parser.compute_file_hash",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.python_parser",
            "llmstruct.parsers.python_parser.compute_file_hash"
          ],
          "uid_type": "function"
        },
        {
          "name": "analyze_module",
          "docstring": "Analyze Python module and return structured data.",
          "line_range": [
            82,
            154
          ],
          "parameters": [
            "file_path",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.python_parser.analyze_module",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.python_parser",
            "llmstruct.parsers.python_parser.analyze_module"
          ],
          "uid_type": "function"
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            26,
            29
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.python_parser.__init__",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.python_parser",
            "llmstruct.parsers.python_parser.__init__"
          ],
          "uid_type": "function"
        },
        {
          "name": "visit_Import",
          "docstring": "Capture import statements.",
          "line_range": [
            31,
            35
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.python_parser.visit_Import",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.python_parser",
            "llmstruct.parsers.python_parser.visit_Import"
          ],
          "uid_type": "function"
        },
        {
          "name": "visit_ImportFrom",
          "docstring": "Capture from-import statements.",
          "line_range": [
            37,
            43
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.python_parser.visit_ImportFrom",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.python_parser",
            "llmstruct.parsers.python_parser.visit_ImportFrom"
          ],
          "uid_type": "function"
        },
        {
          "name": "visit_FunctionDef",
          "docstring": "Track function definitions and their calls.",
          "line_range": [
            45,
            50
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.python_parser.visit_FunctionDef",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.python_parser",
            "llmstruct.parsers.python_parser.visit_FunctionDef"
          ],
          "uid_type": "function"
        },
        {
          "name": "visit_AsyncFunctionDef",
          "docstring": "Track async function definitions and their calls.",
          "line_range": [
            52,
            57
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.python_parser.visit_AsyncFunctionDef",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.python_parser",
            "llmstruct.parsers.python_parser.visit_AsyncFunctionDef"
          ],
          "uid_type": "function"
        },
        {
          "name": "visit_Call",
          "docstring": "Capture function calls.",
          "line_range": [
            59,
            69
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.python_parser.visit_Call",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.python_parser",
            "llmstruct.parsers.python_parser.visit_Call"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "AST visitor to collect function calls and dependencies.",
          "line_range": [
            23,
            69
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                26,
                29
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.parsers.python_parser.CallVisitor.__init__",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.python_parser",
                "llmstruct.parsers.python_parser.CallVisitor",
                "llmstruct.parsers.python_parser.CallVisitor.__init__"
              ],
              "uid_type": "method"
            },
            {
              "name": "visit_Import",
              "docstring": "Capture import statements.",
              "line_range": [
                31,
                35
              ],
              "parameters": [
                "self",
                "node"
              ],
              "uid": "llmstruct.parsers.python_parser.CallVisitor.visit_Import",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.python_parser",
                "llmstruct.parsers.python_parser.CallVisitor",
                "llmstruct.parsers.python_parser.CallVisitor.visit_Import"
              ],
              "uid_type": "method"
            },
            {
              "name": "visit_ImportFrom",
              "docstring": "Capture from-import statements.",
              "line_range": [
                37,
                43
              ],
              "parameters": [
                "self",
                "node"
              ],
              "uid": "llmstruct.parsers.python_parser.CallVisitor.visit_ImportFrom",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.python_parser",
                "llmstruct.parsers.python_parser.CallVisitor",
                "llmstruct.parsers.python_parser.CallVisitor.visit_ImportFrom"
              ],
              "uid_type": "method"
            },
            {
              "name": "visit_FunctionDef",
              "docstring": "Track function definitions and their calls.",
              "line_range": [
                45,
                50
              ],
              "parameters": [
                "self",
                "node"
              ],
              "uid": "llmstruct.parsers.python_parser.CallVisitor.visit_FunctionDef",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.python_parser",
                "llmstruct.parsers.python_parser.CallVisitor",
                "llmstruct.parsers.python_parser.CallVisitor.visit_FunctionDef"
              ],
              "uid_type": "method"
            },
            {
              "name": "visit_AsyncFunctionDef",
              "docstring": "Track async function definitions and their calls.",
              "line_range": [
                52,
                57
              ],
              "parameters": [
                "self",
                "node"
              ],
              "uid": "llmstruct.parsers.python_parser.CallVisitor.visit_AsyncFunctionDef",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.python_parser",
                "llmstruct.parsers.python_parser.CallVisitor",
                "llmstruct.parsers.python_parser.CallVisitor.visit_AsyncFunctionDef"
              ],
              "uid_type": "method"
            },
            {
              "name": "visit_Call",
              "docstring": "Capture function calls.",
              "line_range": [
                59,
                69
              ],
              "parameters": [
                "self",
                "node"
              ],
              "uid": "llmstruct.parsers.python_parser.CallVisitor.visit_Call",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.python_parser",
                "llmstruct.parsers.python_parser.CallVisitor",
                "llmstruct.parsers.python_parser.CallVisitor.visit_Call"
              ],
              "uid_type": "method"
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ],
          "uid": "llmstruct.parsers.python_parser.CallVisitor",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.python_parser",
            "llmstruct.parsers.python_parser.CallVisitor"
          ],
          "uid_type": "class"
        }
      ],
      "callgraph": {
        "infer_category": [
          "Path"
        ],
        "__init__": [
          "set"
        ],
        "visit_Import": [
          "self.generic_visit"
        ],
        "visit_ImportFrom": [
          "self.generic_visit"
        ],
        "visit_FunctionDef": [
          "self.generic_visit",
          "set"
        ],
        "visit_AsyncFunctionDef": [
          "self.generic_visit",
          "set"
        ],
        "visit_Call": [
          "isinstance",
          "self.generic_visit"
        ],
        "compute_file_hash": [
          "logging.error",
          "hashlib.sha256",
          "open",
          "f.read"
        ],
        "analyze_module": [
          "infer_category",
          "classes.append",
          "ast.walk",
          "ast.unparse",
          "functions.append",
          "ast.get_docstring",
          "isinstance",
          "open",
          "compute_file_hash",
          "ast.parse",
          "Path",
          "logging.error",
          "list",
          "f.read",
          "sorted",
          "CallVisitor",
          "str",
          "visitor.visit"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "Set",
        "ast",
        "hashlib",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": "555ac7004c99ba854fc4fc4688b583331229077e51dfa999d7aae2cd9f7c21dd",
      "uid": "llmstruct.parsers.python_parser",
      "uid_components": [
        "llmstruct",
        "llmstruct.parsers",
        "llmstruct.parsers.python_parser"
      ],
      "uid_type": "module",
      "artifact_id": "e154ed01-afcb-6bdd-a6fe-19e3c12ab017",
      "metrics": {
        "cyclomatic_complexity": 11,
        "lines_of_code": 90,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 11,
        "test_coverage": 0.0,
        "maintainability_index": 45
      },
      "markdown_anchor": {
        "id": "llmstruct-parsers-python_parser",
        "title": "Module: llmstruct.parsers.python_parser",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.parsers.python_parser](#llmstruct-parsers-python_parser)",
        "html_anchor": "<a id=\"llmstruct-parsers-python_parser\"></a>"
      }
    },
    {
      "module_id": "llmstruct.parsers.go_analyzer",
      "path": "llmstruct/parsers/go_analyzer.py",
      "category": "core",
      "module_doc": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 Go \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043b\u044f Docker \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b: go/packages, go/analysis",
      "functions": [
        {
          "name": "convert_to_llmstruct_format",
          "docstring": "\u041a\u043e\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 llmstruct",
          "line_range": [
            203,
            337
          ],
          "parameters": [
            "analysis",
            "include_ranges",
            "goals"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.go_analyzer.convert_to_llmstruct_format",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.go_analyzer",
            "llmstruct.parsers.go_analyzer.convert_to_llmstruct_format"
          ],
          "uid_type": "function"
        },
        {
          "name": "_compute_file_hash",
          "docstring": "\u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 SHA-256 \u0445\u044d\u0448 \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            339,
            345
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.go_analyzer._compute_file_hash",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.go_analyzer",
            "llmstruct.parsers.go_analyzer._compute_file_hash"
          ],
          "uid_type": "function"
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            347,
            402
          ],
          "parameters": [],
          "decorators": [],
          "uid": "llmstruct.parsers.go_analyzer.main",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.go_analyzer",
            "llmstruct.parsers.go_analyzer.main"
          ],
          "uid_type": "function"
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            24,
            26
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.go_analyzer.__init__",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.go_analyzer",
            "llmstruct.parsers.go_analyzer.__init__"
          ],
          "uid_type": "function"
        },
        {
          "name": "_setup_analyzer",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0441\u0440\u0435\u0434\u0443 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430",
          "line_range": [
            28,
            66
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.go_analyzer._setup_analyzer",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.go_analyzer",
            "llmstruct.parsers.go_analyzer._setup_analyzer"
          ],
          "uid_type": "function"
        },
        {
          "name": "_cleanup",
          "docstring": "\u041e\u0447\u0438\u0449\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b",
          "line_range": [
            68,
            72
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.go_analyzer._cleanup",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.go_analyzer",
            "llmstruct.parsers.go_analyzer._cleanup"
          ],
          "uid_type": "function"
        },
        {
          "name": "analyze_project",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 Go \u043f\u0440\u043e\u0435\u043a\u0442",
          "line_range": [
            74,
            125
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.go_analyzer.analyze_project",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.go_analyzer",
            "llmstruct.parsers.go_analyzer.analyze_project"
          ],
          "uid_type": "function"
        },
        {
          "name": "_fallback_analysis",
          "docstring": "Fallback \u0430\u043d\u0430\u043b\u0438\u0437 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0444\u0430\u0439\u043b\u043e\u0432",
          "line_range": [
            127,
            201
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.go_analyzer._fallback_analysis",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.go_analyzer",
            "llmstruct.parsers.go_analyzer._fallback_analysis"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [
        {
          "name": "GoAnalyzer",
          "docstring": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 Go \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432",
          "line_range": [
            21,
            201
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                24,
                26
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.parsers.go_analyzer.GoAnalyzer.__init__",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.go_analyzer",
                "llmstruct.parsers.go_analyzer.GoAnalyzer",
                "llmstruct.parsers.go_analyzer.GoAnalyzer.__init__"
              ],
              "uid_type": "method"
            },
            {
              "name": "_setup_analyzer",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0441\u0440\u0435\u0434\u0443 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430",
              "line_range": [
                28,
                66
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.parsers.go_analyzer.GoAnalyzer._setup_analyzer",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.go_analyzer",
                "llmstruct.parsers.go_analyzer.GoAnalyzer",
                "llmstruct.parsers.go_analyzer.GoAnalyzer._setup_analyzer"
              ],
              "uid_type": "method"
            },
            {
              "name": "_cleanup",
              "docstring": "\u041e\u0447\u0438\u0449\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b",
              "line_range": [
                68,
                72
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.parsers.go_analyzer.GoAnalyzer._cleanup",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.go_analyzer",
                "llmstruct.parsers.go_analyzer.GoAnalyzer",
                "llmstruct.parsers.go_analyzer.GoAnalyzer._cleanup"
              ],
              "uid_type": "method"
            },
            {
              "name": "analyze_project",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 Go \u043f\u0440\u043e\u0435\u043a\u0442",
              "line_range": [
                74,
                125
              ],
              "parameters": [
                "self",
                "project_path"
              ],
              "uid": "llmstruct.parsers.go_analyzer.GoAnalyzer.analyze_project",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.go_analyzer",
                "llmstruct.parsers.go_analyzer.GoAnalyzer",
                "llmstruct.parsers.go_analyzer.GoAnalyzer.analyze_project"
              ],
              "uid_type": "method"
            },
            {
              "name": "_fallback_analysis",
              "docstring": "Fallback \u0430\u043d\u0430\u043b\u0438\u0437 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0444\u0430\u0439\u043b\u043e\u0432",
              "line_range": [
                127,
                201
              ],
              "parameters": [
                "self",
                "project_path"
              ],
              "uid": "llmstruct.parsers.go_analyzer.GoAnalyzer._fallback_analysis",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.go_analyzer",
                "llmstruct.parsers.go_analyzer.GoAnalyzer",
                "llmstruct.parsers.go_analyzer.GoAnalyzer._fallback_analysis"
              ],
              "uid_type": "method"
            }
          ],
          "bases": [],
          "uid": "llmstruct.parsers.go_analyzer.GoAnalyzer",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.go_analyzer",
            "llmstruct.parsers.go_analyzer.GoAnalyzer"
          ],
          "uid_type": "class"
        }
      ],
      "callgraph": {
        "__init__": [],
        "_setup_analyzer": [
          "tempfile.mkdtemp",
          "logging.warning",
          "subprocess.run",
          "Path",
          "analyzer_file.write_text",
          "analyzer_source.read_text",
          "str"
        ],
        "_cleanup": [
          "shutil.rmtree",
          "Path"
        ],
        "analyze_project": [
          "self._cleanup",
          "logging.warning",
          "json.loads",
          "subprocess.run",
          "self._setup_analyzer",
          "logging.error",
          "self._fallback_analysis",
          "logging.info"
        ],
        "_fallback_analysis": [
          "len",
          "logging.warning",
          "file_path.read_text",
          "line.startswith",
          "content.split",
          "Path",
          "packages.add",
          "list",
          "go_mod_path.read_text",
          "file_path.relative_to",
          "str",
          "line.strip",
          "sorted",
          "logging.info",
          "go_mod_path.exists",
          "line.split",
          "set"
        ],
        "convert_to_llmstruct_format": [
          "classes.append",
          "modules.append",
          "len",
          "path.endswith",
          "functions.append",
          "struct.get",
          "toc.append",
          "iface.get",
          "module.get",
          "file_data.get",
          "analysis.get",
          "_compute_file_hash",
          "path.replace",
          "uuid.uuid4",
          "sum",
          "fn.get",
          "str"
        ],
        "_compute_file_hash": [
          "hashlib.sha256",
          "open",
          "f.read"
        ],
        "main": [
          "convert_to_llmstruct_format",
          "argparse.ArgumentParser",
          "len",
          "parser.add_argument",
          "print",
          "analyzer.analyze_project",
          "open",
          "Path",
          "parser.parse_args",
          "json.dumps",
          "stats.get",
          "result.get",
          "f.write",
          "GoAnalyzer",
          "traceback.print_exc",
          "sys.exit"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "hashlib",
        "json",
        "logging",
        "os",
        "pathlib",
        "shutil",
        "subprocess",
        "sys",
        "tempfile",
        "traceback",
        "typing",
        "uuid"
      ],
      "hash": "621e1d82791d814534c044dc8ba1d1c79b1852a614255e313f5ff697c934f210",
      "uid": "llmstruct.parsers.go_analyzer",
      "uid_components": [
        "llmstruct",
        "llmstruct.parsers",
        "llmstruct.parsers.go_analyzer"
      ],
      "uid_type": "module",
      "artifact_id": "4ed8ba53-8cab-f400-2cf5-ed5385ab3af6",
      "metrics": {
        "cyclomatic_complexity": 10,
        "lines_of_code": 80,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 19,
        "test_coverage": 0.0,
        "maintainability_index": 50
      },
      "markdown_anchor": {
        "id": "llmstruct-parsers-go_analyzer",
        "title": "Module: llmstruct.parsers.go_analyzer",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.parsers.go_analyzer](#llmstruct-parsers-go_analyzer)",
        "html_anchor": "<a id=\"llmstruct-parsers-go_analyzer\"></a>"
      }
    },
    {
      "module_id": "llmstruct.parsers.__init__",
      "path": "llmstruct/parsers/__init__.py",
      "category": "cli",
      "module_doc": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "JavaScriptParser",
        "javascript_parser"
      ],
      "hash": "2f1fce5cf3e867869608b18a8ab1197f8a32add4fd35d4de75f891a9dad04b63",
      "uid": "llmstruct.parsers.__init__",
      "uid_components": [
        "llmstruct",
        "llmstruct.parsers",
        "llmstruct.parsers.__init__"
      ],
      "uid_type": "module",
      "artifact_id": "fe58e61b-3cf5-7a69-e34f-f349a3cae247",
      "metrics": {
        "cyclomatic_complexity": 0,
        "lines_of_code": 0,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 2,
        "test_coverage": 0.0,
        "maintainability_index": 100
      },
      "markdown_anchor": {
        "id": "llmstruct-parsers-__init__",
        "title": "Module: llmstruct.parsers.__init__",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.parsers.__init__](#llmstruct-parsers-__init__)",
        "html_anchor": "<a id=\"llmstruct-parsers-__init__\"></a>"
      }
    },
    {
      "module_id": "llmstruct.parsers.javascript_parser",
      "path": "llmstruct/parsers/javascript_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            9,
            13
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.javascript_parser.__init__",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.javascript_parser",
            "llmstruct.parsers.javascript_parser.__init__"
          ],
          "uid_type": "function"
        },
        {
          "name": "file_hash",
          "docstring": "",
          "line_range": [
            15,
            20
          ],
          "parameters": [
            "self",
            "filepath"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.javascript_parser.file_hash",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.javascript_parser",
            "llmstruct.parsers.javascript_parser.file_hash"
          ],
          "uid_type": "function"
        },
        {
          "name": "compute_file_metadata",
          "docstring": "",
          "line_range": [
            22,
            41
          ],
          "parameters": [
            "self",
            "filepath",
            "include_hashes"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.javascript_parser.compute_file_metadata",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.javascript_parser",
            "llmstruct.parsers.javascript_parser.compute_file_metadata"
          ],
          "uid_type": "function"
        },
        {
          "name": "parse_module",
          "docstring": "",
          "line_range": [
            43,
            124
          ],
          "parameters": [
            "self",
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.javascript_parser.parse_module",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.javascript_parser",
            "llmstruct.parsers.javascript_parser.parse_module"
          ],
          "uid_type": "function"
        },
        {
          "name": "extract_signature",
          "docstring": "",
          "line_range": [
            78,
            80
          ],
          "parameters": [
            "node"
          ],
          "decorators": [],
          "uid": "llmstruct.parsers.javascript_parser.extract_signature",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.javascript_parser",
            "llmstruct.parsers.javascript_parser.extract_signature"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [
        {
          "name": "JavaScriptParser",
          "docstring": "",
          "line_range": [
            8,
            124
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                9,
                13
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.parsers.javascript_parser.JavaScriptParser.__init__",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.javascript_parser",
                "llmstruct.parsers.javascript_parser.JavaScriptParser",
                "llmstruct.parsers.javascript_parser.JavaScriptParser.__init__"
              ],
              "uid_type": "method"
            },
            {
              "name": "file_hash",
              "docstring": "",
              "line_range": [
                15,
                20
              ],
              "parameters": [
                "self",
                "filepath"
              ],
              "uid": "llmstruct.parsers.javascript_parser.JavaScriptParser.file_hash",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.javascript_parser",
                "llmstruct.parsers.javascript_parser.JavaScriptParser",
                "llmstruct.parsers.javascript_parser.JavaScriptParser.file_hash"
              ],
              "uid_type": "method"
            },
            {
              "name": "compute_file_metadata",
              "docstring": "",
              "line_range": [
                22,
                41
              ],
              "parameters": [
                "self",
                "filepath",
                "include_hashes"
              ],
              "uid": "llmstruct.parsers.javascript_parser.JavaScriptParser.compute_file_metadata",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.javascript_parser",
                "llmstruct.parsers.javascript_parser.JavaScriptParser",
                "llmstruct.parsers.javascript_parser.JavaScriptParser.compute_file_metadata"
              ],
              "uid_type": "method"
            },
            {
              "name": "parse_module",
              "docstring": "",
              "line_range": [
                43,
                124
              ],
              "parameters": [
                "self",
                "filepath",
                "root_dir",
                "include_ranges",
                "include_hashes"
              ],
              "uid": "llmstruct.parsers.javascript_parser.JavaScriptParser.parse_module",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.javascript_parser",
                "llmstruct.parsers.javascript_parser.JavaScriptParser",
                "llmstruct.parsers.javascript_parser.JavaScriptParser.parse_module"
              ],
              "uid_type": "method"
            }
          ],
          "bases": [],
          "uid": "llmstruct.parsers.javascript_parser.JavaScriptParser",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.javascript_parser",
            "llmstruct.parsers.javascript_parser.JavaScriptParser"
          ],
          "uid_type": "class"
        }
      ],
      "callgraph": {
        "__init__": [
          "set"
        ],
        "file_hash": [
          "hashlib.sha256",
          "open",
          "f.read"
        ],
        "compute_file_metadata": [
          "sum",
          "open",
          "self.file_hash",
          "os.stat"
        ],
        "parse_module": [
          "open",
          "self.compute_file_metadata",
          "f.read",
          "str",
          "esprima.parseModule"
        ],
        "extract_signature": [
          "hasattr"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "datetime",
        "esprima",
        "hashlib",
        "os",
        "typing"
      ],
      "hash": "d2af10a2c30b638a634dd0317c81a179888dee011e0b7a0f62166dce468373c4",
      "uid": "llmstruct.parsers.javascript_parser",
      "uid_components": [
        "llmstruct",
        "llmstruct.parsers",
        "llmstruct.parsers.javascript_parser"
      ],
      "uid_type": "module",
      "artifact_id": "9c2b1ba0-989a-33c7-dce1-184d5e0b4061",
      "metrics": {
        "cyclomatic_complexity": 7,
        "lines_of_code": 50,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 7,
        "test_coverage": 0.0,
        "maintainability_index": 65
      },
      "markdown_anchor": {
        "id": "llmstruct-parsers-javascript_parser",
        "title": "Module: llmstruct.parsers.javascript_parser",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.parsers.javascript_parser](#llmstruct-parsers-javascript_parser)",
        "html_anchor": "<a id=\"llmstruct-parsers-javascript_parser\"></a>"
      }
    },
    {
      "module_id": "llmstruct.generators.go_json_generator",
      "path": "llmstruct/generators/go_json_generator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_go_folder_structure",
          "docstring": "Capture directory and file structure for Go projects with artifact_id, respecting .gitignore and patterns.",
          "line_range": [
            23,
            98
          ],
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": [],
          "uid": "llmstruct.generators.go_json_generator.get_go_folder_structure",
          "uid_components": [
            "llmstruct",
            "llmstruct.generators",
            "llmstruct.generators.go_json_generator",
            "llmstruct.generators.go_json_generator.get_go_folder_structure"
          ],
          "uid_type": "function"
        },
        {
          "name": "build_go_toc_and_modules",
          "docstring": "Build TOC and modules for Go projects with artifact_id and robust filtering.",
          "line_range": [
            101,
            196
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "exclude_dirs"
          ],
          "decorators": [],
          "uid": "llmstruct.generators.go_json_generator.build_go_toc_and_modules",
          "uid_components": [
            "llmstruct",
            "llmstruct.generators",
            "llmstruct.generators.go_json_generator",
            "llmstruct.generators.go_json_generator.build_go_toc_and_modules"
          ],
          "uid_type": "function"
        },
        {
          "name": "extract_go_mod_info",
          "docstring": "Extract information from go.mod file.",
          "line_range": [
            199,
            235
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": [],
          "uid": "llmstruct.generators.go_json_generator.extract_go_mod_info",
          "uid_components": [
            "llmstruct",
            "llmstruct.generators",
            "llmstruct.generators.go_json_generator",
            "llmstruct.generators.go_json_generator.extract_go_mod_info"
          ],
          "uid_type": "function"
        },
        {
          "name": "generate_go_json",
          "docstring": "Generate JSON structure for Go project with artifact_id, summary, and tags.",
          "line_range": [
            238,
            312
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals",
            "exclude_dirs"
          ],
          "decorators": [],
          "uid": "llmstruct.generators.go_json_generator.generate_go_json",
          "uid_components": [
            "llmstruct",
            "llmstruct.generators",
            "llmstruct.generators.go_json_generator",
            "llmstruct.generators.go_json_generator.generate_go_json"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [],
      "callgraph": {
        "get_go_folder_structure": [
          "file_path.match",
          "p.rstrip",
          "p.endswith",
          "Path",
          "generate_uid_components",
          "any",
          "uuid.uuid4",
          "file_path.relative_to",
          "sorted",
          "structure.append",
          "str",
          "create_legacy_artifact_id",
          "os.walk",
          "set"
        ],
        "build_go_toc_and_modules": [
          "p.rstrip",
          "f.match",
          "create_legacy_artifact_id",
          "modules.append",
          "len",
          "p.endswith",
          "toc.append",
          "isinstance",
          "module.get",
          "Path",
          "generate_uid_components",
          "cls.get",
          "generate_uid",
          "str",
          "analyze_module",
          "any",
          "set"
        ],
        "extract_go_mod_info": [
          "dependencies.append",
          "len",
          "line.strip",
          "open",
          "line.startswith",
          "Path",
          "logging.error",
          "f.read",
          "content.strip",
          "go_mod_path.exists",
          "line.split"
        ],
        "generate_go_json": [
          "len",
          "sum",
          "Path",
          "uuid.uuid4",
          "list",
          "extract_go_mod_info",
          "go_mod_info.get",
          "m.get",
          "build_go_toc_and_modules",
          "str",
          "get_go_folder_structure",
          "set"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "UIDType",
        "analyze_module",
        "core.uid_generator",
        "create_legacy_artifact_id",
        "create_stable_uid",
        "datetime",
        "generate_uid",
        "generate_uid_components",
        "logging",
        "normalize_path_to_module_id",
        "os",
        "parsers.go_parser",
        "pathlib",
        "typing",
        "uuid"
      ],
      "hash": "13de8a605ec15b9075869807c23c8d59758fd95328430a65e092b46ff8be12cc",
      "uid": "llmstruct.generators.go_json_generator",
      "uid_components": [
        "llmstruct",
        "llmstruct.generators",
        "llmstruct.generators.go_json_generator"
      ],
      "uid_type": "module",
      "artifact_id": "4b928e1a-5447-f3d5-dd1e-eda346bc6a17",
      "metrics": {
        "cyclomatic_complexity": 4,
        "lines_of_code": 40,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 20,
        "test_coverage": 0.0,
        "maintainability_index": 80
      },
      "markdown_anchor": {
        "id": "llmstruct-generators-go_json_generator",
        "title": "Module: llmstruct.generators.go_json_generator",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.generators.go_json_generator](#llmstruct-generators-go_json_generator)",
        "html_anchor": "<a id=\"llmstruct-generators-go_json_generator\"></a>"
      }
    },
    {
      "module_id": "llmstruct.generators.__init__",
      "path": "llmstruct/generators/__init__.py",
      "category": "cli",
      "module_doc": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "generate_json",
        "get_folder_structure",
        "json_generator"
      ],
      "hash": "ee336aa4dd2e26f0ae099e6930cf75501f919728c44b8554e3419af3cf5a1b5a",
      "uid": "llmstruct.generators.__init__",
      "uid_components": [
        "llmstruct",
        "llmstruct.generators",
        "llmstruct.generators.__init__"
      ],
      "uid_type": "module",
      "artifact_id": "a0a37899-310c-683a-f0c1-aee876224953",
      "metrics": {
        "cyclomatic_complexity": 0,
        "lines_of_code": 0,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 3,
        "test_coverage": 0.0,
        "maintainability_index": 100
      },
      "markdown_anchor": {
        "id": "llmstruct-generators-__init__",
        "title": "Module: llmstruct.generators.__init__",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.generators.__init__](#llmstruct-generators-__init__)",
        "html_anchor": "<a id=\"llmstruct-generators-__init__\"></a>"
      }
    },
    {
      "module_id": "llmstruct.generators.json_generator",
      "path": "llmstruct/generators/json_generator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_folder_structure",
          "docstring": "Capture directory and file structure with artifact_id, respecting .gitignore and patterns.",
          "line_range": [
            25,
            108
          ],
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": [],
          "uid": "llmstruct.generators.json_generator.get_folder_structure",
          "uid_components": [
            "llmstruct",
            "llmstruct.generators",
            "llmstruct.generators.json_generator",
            "llmstruct.generators.json_generator.get_folder_structure"
          ],
          "uid_type": "function"
        },
        {
          "name": "build_toc_and_modules",
          "docstring": "Build TOC and modules with artifact_id and robust filtering. \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 include_dirs.",
          "line_range": [
            111,
            220
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "exclude_dirs",
            "include_dirs"
          ],
          "decorators": [],
          "uid": "llmstruct.generators.json_generator.build_toc_and_modules",
          "uid_components": [
            "llmstruct",
            "llmstruct.generators",
            "llmstruct.generators.json_generator",
            "llmstruct.generators.json_generator.build_toc_and_modules"
          ],
          "uid_type": "function"
        },
        {
          "name": "generate_json",
          "docstring": "Generate JSON structure for project with artifact_id, summary, and tags. \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 include_dirs.",
          "line_range": [
            223,
            336
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals",
            "exclude_dirs",
            "include_dirs",
            "enable_smart_summaries",
            "llm_config"
          ],
          "decorators": [],
          "uid": "llmstruct.generators.json_generator.generate_json",
          "uid_components": [
            "llmstruct",
            "llmstruct.generators",
            "llmstruct.generators.json_generator",
            "llmstruct.generators.json_generator.generate_json"
          ],
          "uid_type": "function"
        },
        {
          "name": "generate_json_with_output_file",
          "docstring": "",
          "line_range": [
            339,
            364
          ],
          "parameters": [
            "root_dir",
            "output_file",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs",
            "include_ranges",
            "include_hashes",
            "goals"
          ],
          "decorators": [],
          "uid": "llmstruct.generators.json_generator.generate_json_with_output_file",
          "uid_components": [
            "llmstruct",
            "llmstruct.generators",
            "llmstruct.generators.json_generator",
            "llmstruct.generators.json_generator.generate_json_with_output_file"
          ],
          "uid_type": "function"
        },
        {
          "name": "norm_dirname",
          "docstring": "",
          "line_range": [
            133,
            134
          ],
          "parameters": [
            "d"
          ],
          "decorators": [],
          "uid": "llmstruct.generators.json_generator.norm_dirname",
          "uid_components": [
            "llmstruct",
            "llmstruct.generators",
            "llmstruct.generators.json_generator",
            "llmstruct.generators.json_generator.norm_dirname"
          ],
          "uid_type": "function"
        },
        {
          "name": "is_included_dir",
          "docstring": "",
          "line_range": [
            143,
            147
          ],
          "parameters": [
            "f"
          ],
          "decorators": [],
          "uid": "llmstruct.generators.json_generator.is_included_dir",
          "uid_components": [
            "llmstruct",
            "llmstruct.generators",
            "llmstruct.generators.json_generator",
            "llmstruct.generators.json_generator.is_included_dir"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [],
      "callgraph": {
        "get_folder_structure": [
          "file_path.match",
          "p.rstrip",
          "abs_dir_path.relative_to",
          "p.endswith",
          "Path",
          "abs_dir_path.joinpath",
          "generate_uid_components",
          "any",
          "file_path.relative_to",
          "sorted",
          "structure.append",
          "str",
          "abs_dir_path.match",
          "create_legacy_artifact_id",
          "os.walk",
          "set"
        ],
        "build_toc_and_modules": [],
        "norm_dirname": [],
        "is_included_dir": [
          "norm_dirname",
          "any"
        ],
        "generate_json": [
          "get_folder_structure",
          "len",
          "create_summary_system",
          "cls.get",
          "enhance_json_structure",
          "list",
          "module.get",
          "build_toc_and_modules",
          "uuid.uuid4",
          "module.copy",
          "enhanced_methods.append",
          "sum",
          "enhanced_functions.append",
          "enhance_entity_with_smart_summary",
          "enhanced_classes.append",
          "Path",
          "str",
          "enhanced_modules.append",
          "set"
        ],
        "generate_json_with_output_file": [
          "json.dump",
          "open",
          "generate_json"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "UIDType",
        "analyze_module",
        "core.json_structure",
        "core.summary_system",
        "core.uid_generator",
        "create_legacy_artifact_id",
        "create_stable_uid",
        "create_summary_system",
        "datetime",
        "enhance_entity_with_smart_summary",
        "enhance_json_structure",
        "generate_uid",
        "generate_uid_components",
        "json",
        "logging",
        "normalize_path_to_module_id",
        "os",
        "parsers.python_parser",
        "pathlib",
        "typing",
        "uuid"
      ],
      "hash": "b829c51ead41446f6de16856aa522b85b4979af092ddd185197205a94d71bd13",
      "uid": "llmstruct.generators.json_generator",
      "uid_components": [
        "llmstruct",
        "llmstruct.generators",
        "llmstruct.generators.json_generator"
      ],
      "uid_type": "module",
      "artifact_id": "0235ea10-05bd-2ee9-e148-53ea337c3fcc",
      "metrics": {
        "cyclomatic_complexity": 6,
        "lines_of_code": 60,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 26,
        "test_coverage": 0.0,
        "maintainability_index": 70
      },
      "markdown_anchor": {
        "id": "llmstruct-generators-json_generator",
        "title": "Module: llmstruct.generators.json_generator",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.generators.json_generator](#llmstruct-generators-json_generator)",
        "html_anchor": "<a id=\"llmstruct-generators-json_generator\"></a>"
      }
    },
    {
      "module_id": "llmstruct.api.routes.system",
      "path": "llmstruct/api/routes/system.py",
      "category": "core",
      "module_doc": "System routes for LLMStruct FastAPI\n\nHealth checks, metrics, and system information endpoints.",
      "functions": [
        {
          "name": "get_cli_bridge",
          "docstring": "Dependency to get CLI bridge instance",
          "line_range": [
            17,
            19
          ],
          "parameters": [],
          "decorators": [],
          "uid": "llmstruct.api.routes.system.get_cli_bridge",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.routes",
            "llmstruct.api.routes.system",
            "llmstruct.api.routes.system.get_cli_bridge"
          ],
          "uid_type": "function"
        },
        {
          "name": "health_check",
          "docstring": "Health check endpoint\n\nReturns the health status of the API and its dependencies.\nThis endpoint does not require authentication.",
          "line_range": [
            23,
            61
          ],
          "parameters": [
            "cli"
          ],
          "decorators": [
            "router.get('/health', response_model=HealthResponse)"
          ],
          "uid": "llmstruct.api.routes.system.health_check",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.routes",
            "llmstruct.api.routes.system",
            "llmstruct.api.routes.system.health_check"
          ],
          "uid_type": "function"
        },
        {
          "name": "get_system_status",
          "docstring": "Get detailed system status\n\nReturns detailed system information including:\n- API version and configuration\n- CLI status and version\n- Resource usage (if available)",
          "line_range": [
            65,
            97
          ],
          "parameters": [],
          "decorators": [
            "router.get('/status')"
          ],
          "uid": "llmstruct.api.routes.system.get_system_status",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.routes",
            "llmstruct.api.routes.system",
            "llmstruct.api.routes.system.get_system_status"
          ],
          "uid_type": "function"
        },
        {
          "name": "get_version",
          "docstring": "Get API version information\n\nReturns version information for the API and underlying components.",
          "line_range": [
            101,
            123
          ],
          "parameters": [],
          "decorators": [
            "router.get('/version')"
          ],
          "uid": "llmstruct.api.routes.system.get_version",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.routes",
            "llmstruct.api.routes.system",
            "llmstruct.api.routes.system.get_version"
          ],
          "uid_type": "function"
        },
        {
          "name": "ping",
          "docstring": "Simple ping endpoint for basic connectivity testing",
          "line_range": [
            127,
            134
          ],
          "parameters": [],
          "decorators": [
            "router.get('/ping')"
          ],
          "uid": "llmstruct.api.routes.system.ping",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.routes",
            "llmstruct.api.routes.system",
            "llmstruct.api.routes.system.ping"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [],
      "callgraph": {
        "get_cli_bridge": [
          "CLIBridge"
        ],
        "health_check": [
          "datetime.utcnow",
          "Depends",
          "cli_health.get",
          "str",
          "cli.health_check",
          "HealthResponse",
          "router.get"
        ],
        "get_system_status": [
          "HTTPException",
          "datetime.utcnow",
          "CLIBridge",
          "cli_health.get",
          "str",
          "cli.health_check",
          "router.get"
        ],
        "get_version": [
          "HTTPException",
          "datetime.utcnow",
          "CLIBridge",
          "cli_health.get",
          "str",
          "cli.health_check",
          "router.get"
        ],
        "ping": [
          "router.get",
          "datetime.utcnow"
        ]
      },
      "dependencies": [
        "APIRouter",
        "CLIBridge",
        "Depends",
        "HTTPException",
        "HealthResponse",
        "HealthStatus",
        "asyncio",
        "datetime",
        "fastapi",
        "models.responses",
        "services.cli_bridge"
      ],
      "hash": "12d5f16af2648af5535ac4f2428296ca65266db6fe621f2d3e919e49c5cf70eb",
      "uid": "llmstruct.api.routes.system",
      "uid_components": [
        "llmstruct",
        "llmstruct.api",
        "llmstruct.api.routes",
        "llmstruct.api.routes.system"
      ],
      "uid_type": "module",
      "artifact_id": "ceff4b1e-5bc4-a69e-e163-1b4affb70f4e",
      "metrics": {
        "cyclomatic_complexity": 5,
        "lines_of_code": 50,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 11,
        "test_coverage": 0.0,
        "maintainability_index": 75
      },
      "markdown_anchor": {
        "id": "llmstruct-api-routes-system",
        "title": "Module: llmstruct.api.routes.system",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.api.routes.system](#llmstruct-api-routes-system)",
        "html_anchor": "<a id=\"llmstruct-api-routes-system\"></a>"
      }
    },
    {
      "module_id": "llmstruct.api.routes.__init__",
      "path": "llmstruct/api/routes/__init__.py",
      "category": "cli",
      "module_doc": "Routes package for LLMStruct FastAPI\n\nContains all API endpoint routers.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "c55fef17f5bf04d1b099b37498ea82c52295667412e308642a36e6ddaa95e49d",
      "uid": "llmstruct.api.routes.__init__",
      "uid_components": [
        "llmstruct",
        "llmstruct.api",
        "llmstruct.api.routes",
        "llmstruct.api.routes.__init__"
      ],
      "uid_type": "module",
      "artifact_id": "4da05f02-5d2d-a931-25b0-2b373ecd9f62",
      "metrics": {
        "cyclomatic_complexity": 0,
        "lines_of_code": 0,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 0,
        "test_coverage": 0.0,
        "maintainability_index": 100
      },
      "markdown_anchor": {
        "id": "llmstruct-api-routes-__init__",
        "title": "Module: llmstruct.api.routes.__init__",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.api.routes.__init__](#llmstruct-api-routes-__init__)",
        "html_anchor": "<a id=\"llmstruct-api-routes-__init__\"></a>"
      }
    },
    {
      "module_id": "llmstruct.api.routes.chat",
      "path": "llmstruct/api/routes/chat.py",
      "category": "core",
      "module_doc": "Chat Routes\n\nWebSocket-based real-time chat with LLM integration",
      "functions": [
        {
          "name": "websocket_chat",
          "docstring": "WebSocket endpoint for real-time chat",
          "line_range": [
            52,
            131
          ],
          "parameters": [
            "websocket",
            "session_id",
            "api_key"
          ],
          "decorators": [
            "router.websocket('/chat/ws')"
          ],
          "uid": "llmstruct.api.routes.chat.websocket_chat",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.routes",
            "llmstruct.api.routes.chat",
            "llmstruct.api.routes.chat.websocket_chat"
          ],
          "uid_type": "function"
        },
        {
          "name": "list_sessions",
          "docstring": "List active chat sessions",
          "line_range": [
            134,
            137
          ],
          "parameters": [],
          "decorators": [
            "router.get('/chat/sessions', dependencies=[Depends(get_api_key)])"
          ],
          "uid": "llmstruct.api.routes.chat.list_sessions",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.routes",
            "llmstruct.api.routes.chat",
            "llmstruct.api.routes.chat.list_sessions"
          ],
          "uid_type": "function"
        },
        {
          "name": "get_session",
          "docstring": "Get session details and history",
          "line_range": [
            140,
            145
          ],
          "parameters": [
            "session_id"
          ],
          "decorators": [
            "router.get('/chat/sessions/{session_id}', dependencies=[Depends(get_api_key)])"
          ],
          "uid": "llmstruct.api.routes.chat.get_session",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.routes",
            "llmstruct.api.routes.chat",
            "llmstruct.api.routes.chat.get_session"
          ],
          "uid_type": "function"
        },
        {
          "name": "delete_session",
          "docstring": "Delete a chat session",
          "line_range": [
            148,
            153
          ],
          "parameters": [
            "session_id"
          ],
          "decorators": [
            "router.delete('/chat/sessions/{session_id}', dependencies=[Depends(get_api_key)])"
          ],
          "uid": "llmstruct.api.routes.chat.delete_session",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.routes",
            "llmstruct.api.routes.chat",
            "llmstruct.api.routes.chat.delete_session"
          ],
          "uid_type": "function"
        },
        {
          "name": "send_message",
          "docstring": "Send a message via HTTP (alternative to WebSocket)",
          "line_range": [
            156,
            179
          ],
          "parameters": [
            "message"
          ],
          "decorators": [
            "router.post('/chat/message', dependencies=[Depends(get_api_key)])"
          ],
          "uid": "llmstruct.api.routes.chat.send_message",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.routes",
            "llmstruct.api.routes.chat",
            "llmstruct.api.routes.chat.send_message"
          ],
          "uid_type": "function"
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            32,
            33
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.api.routes.chat.__init__",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.routes",
            "llmstruct.api.routes.chat",
            "llmstruct.api.routes.chat.__init__"
          ],
          "uid_type": "function"
        },
        {
          "name": "connect",
          "docstring": "",
          "line_range": [
            35,
            38
          ],
          "parameters": [
            "self",
            "websocket",
            "session_id"
          ],
          "decorators": [],
          "uid": "llmstruct.api.routes.chat.connect",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.routes",
            "llmstruct.api.routes.chat",
            "llmstruct.api.routes.chat.connect"
          ],
          "uid_type": "function"
        },
        {
          "name": "disconnect",
          "docstring": "",
          "line_range": [
            40,
            43
          ],
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": [],
          "uid": "llmstruct.api.routes.chat.disconnect",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.routes",
            "llmstruct.api.routes.chat",
            "llmstruct.api.routes.chat.disconnect"
          ],
          "uid_type": "function"
        },
        {
          "name": "send_message",
          "docstring": "",
          "line_range": [
            45,
            47
          ],
          "parameters": [
            "self",
            "session_id",
            "message"
          ],
          "decorators": [],
          "uid": "llmstruct.api.routes.chat.send_message",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.routes",
            "llmstruct.api.routes.chat",
            "llmstruct.api.routes.chat.send_message"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [
        {
          "name": "ConnectionManager",
          "docstring": "Manages WebSocket connections",
          "line_range": [
            29,
            47
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                32,
                33
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.api.routes.chat.ConnectionManager.__init__",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.routes",
                "llmstruct.api.routes.chat",
                "llmstruct.api.routes.chat.ConnectionManager",
                "llmstruct.api.routes.chat.ConnectionManager.__init__"
              ],
              "uid_type": "method"
            },
            {
              "name": "connect",
              "docstring": "",
              "line_range": [
                35,
                38
              ],
              "parameters": [
                "self",
                "websocket",
                "session_id"
              ],
              "uid": "llmstruct.api.routes.chat.ConnectionManager.connect",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.routes",
                "llmstruct.api.routes.chat",
                "llmstruct.api.routes.chat.ConnectionManager",
                "llmstruct.api.routes.chat.ConnectionManager.connect"
              ],
              "uid_type": "method"
            },
            {
              "name": "disconnect",
              "docstring": "",
              "line_range": [
                40,
                43
              ],
              "parameters": [
                "self",
                "session_id"
              ],
              "uid": "llmstruct.api.routes.chat.ConnectionManager.disconnect",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.routes",
                "llmstruct.api.routes.chat",
                "llmstruct.api.routes.chat.ConnectionManager",
                "llmstruct.api.routes.chat.ConnectionManager.disconnect"
              ],
              "uid_type": "method"
            },
            {
              "name": "send_message",
              "docstring": "",
              "line_range": [
                45,
                47
              ],
              "parameters": [
                "self",
                "session_id",
                "message"
              ],
              "uid": "llmstruct.api.routes.chat.ConnectionManager.send_message",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.routes",
                "llmstruct.api.routes.chat",
                "llmstruct.api.routes.chat.ConnectionManager",
                "llmstruct.api.routes.chat.ConnectionManager.send_message"
              ],
              "uid_type": "method"
            }
          ],
          "bases": [],
          "uid": "llmstruct.api.routes.chat.ConnectionManager",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.routes",
            "llmstruct.api.routes.chat",
            "llmstruct.api.routes.chat.ConnectionManager"
          ],
          "uid_type": "class"
        }
      ],
      "callgraph": {
        "__init__": [],
        "connect": [
          "websocket.accept",
          "logger.info"
        ],
        "disconnect": [
          "logger.info"
        ],
        "send_message": [
          "ChatResponse",
          "HTTPException",
          "session_manager.add_message",
          "Depends",
          "logger.error",
          "router.post",
          "str",
          "llm_service.process_message"
        ],
        "websocket_chat": [
          "manager.send_message",
          "json.loads",
          "websocket.close",
          "manager.disconnect",
          "session_manager.get_or_create_session",
          "session_manager.add_message",
          "uuid.uuid4",
          "datetime.now",
          "logger.info",
          "websocket.receive_text",
          "logger.error",
          "manager.connect",
          "str",
          "router.websocket",
          "llm_service.process_message",
          "message_data.get"
        ],
        "list_sessions": [
          "Depends",
          "session_manager.list_sessions",
          "router.get"
        ],
        "get_session": [
          "Depends",
          "session_manager.get_session",
          "HTTPException",
          "router.get"
        ],
        "delete_session": [
          "HTTPException",
          "Depends",
          "router.delete",
          "session_manager.delete_session"
        ]
      },
      "dependencies": [
        "APIRouter",
        "Any",
        "ChatMessage",
        "ChatResponse",
        "ChatSessionManager",
        "Depends",
        "Dict",
        "HTTPBearer",
        "HTTPException",
        "LLMService",
        "Optional",
        "WebSocket",
        "WebSocketDisconnect",
        "asyncio",
        "datetime",
        "fastapi",
        "fastapi.security",
        "get_api_key",
        "json",
        "logging",
        "middleware.auth",
        "models.requests",
        "models.responses",
        "services.chat_session",
        "services.llm_service",
        "typing",
        "uuid"
      ],
      "hash": "59b0748bcb0b7a09f0c062ff814d3af7c5f8741d6aea2514170fffeed3366e63",
      "uid": "llmstruct.api.routes.chat",
      "uid_components": [
        "llmstruct",
        "llmstruct.api",
        "llmstruct.api.routes",
        "llmstruct.api.routes.chat"
      ],
      "uid_type": "module",
      "artifact_id": "9e24ecd3-be69-cf18-ff2e-8c147931bad0",
      "metrics": {
        "cyclomatic_complexity": 11,
        "lines_of_code": 90,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 27,
        "test_coverage": 0.0,
        "maintainability_index": 45
      },
      "markdown_anchor": {
        "id": "llmstruct-api-routes-chat",
        "title": "Module: llmstruct.api.routes.chat",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.api.routes.chat](#llmstruct-api-routes-chat)",
        "html_anchor": "<a id=\"llmstruct-api-routes-chat\"></a>"
      }
    },
    {
      "module_id": "llmstruct.api.routes.continue_adapter",
      "path": "llmstruct/api/routes/continue_adapter.py",
      "category": "core",
      "module_doc": "Continue API Adapter\n\nTranslates Continue extension requests to LLMStruct chat API format",
      "functions": [
        {
          "name": "continue_chat_completion",
          "docstring": "Continue-compatible chat completion endpoint\nTranslates Continue requests to our LLMStruct format",
          "line_range": [
            59,
            129
          ],
          "parameters": [
            "request",
            "api_key"
          ],
          "decorators": [
            "router.post('/v1/chat/completions')"
          ],
          "uid": "llmstruct.api.routes.continue_adapter.continue_chat_completion",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.routes",
            "llmstruct.api.routes.continue_adapter",
            "llmstruct.api.routes.continue_adapter.continue_chat_completion"
          ],
          "uid_type": "function"
        },
        {
          "name": "continue_models",
          "docstring": "List available models for Continue",
          "line_range": [
            132,
            158
          ],
          "parameters": [
            "api_key"
          ],
          "decorators": [
            "router.get('/v1/models')"
          ],
          "uid": "llmstruct.api.routes.continue_adapter.continue_models",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.routes",
            "llmstruct.api.routes.continue_adapter",
            "llmstruct.api.routes.continue_adapter.continue_models"
          ],
          "uid_type": "function"
        },
        {
          "name": "continue_embeddings",
          "docstring": "Embeddings endpoint for Continue (placeholder)",
          "line_range": [
            161,
            193
          ],
          "parameters": [
            "request",
            "api_key"
          ],
          "decorators": [
            "router.post('/v1/embeddings')"
          ],
          "uid": "llmstruct.api.routes.continue_adapter.continue_embeddings",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.routes",
            "llmstruct.api.routes.continue_adapter",
            "llmstruct.api.routes.continue_adapter.continue_embeddings"
          ],
          "uid_type": "function"
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            25,
            35
          ],
          "parameters": [
            "self",
            "messages",
            "model",
            "temperature",
            "max_tokens",
            "stream"
          ],
          "decorators": [],
          "uid": "llmstruct.api.routes.continue_adapter.__init__",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.routes",
            "llmstruct.api.routes.continue_adapter",
            "llmstruct.api.routes.continue_adapter.__init__"
          ],
          "uid_type": "function"
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            39,
            56
          ],
          "parameters": [
            "self",
            "content",
            "model"
          ],
          "decorators": [],
          "uid": "llmstruct.api.routes.continue_adapter.__init__",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.routes",
            "llmstruct.api.routes.continue_adapter",
            "llmstruct.api.routes.continue_adapter.__init__"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [
        {
          "name": "ContinueRequest",
          "docstring": "Continue API request format",
          "line_range": [
            23,
            35
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                25,
                35
              ],
              "parameters": [
                "self",
                "messages",
                "model",
                "temperature",
                "max_tokens",
                "stream"
              ],
              "uid": "llmstruct.api.routes.continue_adapter.ContinueRequest.__init__",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.routes",
                "llmstruct.api.routes.continue_adapter",
                "llmstruct.api.routes.continue_adapter.ContinueRequest",
                "llmstruct.api.routes.continue_adapter.ContinueRequest.__init__"
              ],
              "uid_type": "method"
            }
          ],
          "bases": [],
          "uid": "llmstruct.api.routes.continue_adapter.ContinueRequest",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.routes",
            "llmstruct.api.routes.continue_adapter",
            "llmstruct.api.routes.continue_adapter.ContinueRequest"
          ],
          "uid_type": "class"
        },
        {
          "name": "ContinueResponse",
          "docstring": "Continue API response format (OpenAI-compatible)",
          "line_range": [
            37,
            56
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                39,
                56
              ],
              "parameters": [
                "self",
                "content",
                "model"
              ],
              "uid": "llmstruct.api.routes.continue_adapter.ContinueResponse.__init__",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.routes",
                "llmstruct.api.routes.continue_adapter",
                "llmstruct.api.routes.continue_adapter.ContinueResponse",
                "llmstruct.api.routes.continue_adapter.ContinueResponse.__init__"
              ],
              "uid_type": "method"
            }
          ],
          "bases": [],
          "uid": "llmstruct.api.routes.continue_adapter.ContinueResponse",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.routes",
            "llmstruct.api.routes.continue_adapter",
            "llmstruct.api.routes.continue_adapter.ContinueResponse"
          ],
          "uid_type": "class"
        }
      ],
      "callgraph": {
        "__init__": [
          "datetime.now",
          "int",
          "len",
          "content.split"
        ],
        "continue_chat_completion": [
          "request_data.get",
          "len",
          "msg.get",
          "HTTPException",
          "reversed",
          "ContinueResponse",
          "Depends",
          "datetime.now",
          "logger.info",
          "logger.error",
          "router.post",
          "str",
          "llm_service.process_message",
          "request.json"
        ],
        "continue_models": [
          "Depends",
          "datetime.now",
          "int",
          "router.get"
        ],
        "continue_embeddings": [
          "request_data.get",
          "len",
          "HTTPException",
          "Depends",
          "input_text.split",
          "logger.error",
          "router.post",
          "str",
          "request.json"
        ]
      },
      "dependencies": [
        "APIRouter",
        "Any",
        "ChatMessage",
        "ChatResponse",
        "Depends",
        "Dict",
        "HTTPException",
        "LLMService",
        "List",
        "Optional",
        "Request",
        "datetime",
        "fastapi",
        "get_api_key",
        "logging",
        "middleware.auth",
        "models.requests",
        "models.responses",
        "services.llm_service",
        "typing"
      ],
      "hash": "98b3a53aab4b11fc41c646ed118d313f39f0f4a02aa39cde44fe28a4f89706f2",
      "uid": "llmstruct.api.routes.continue_adapter",
      "uid_components": [
        "llmstruct",
        "llmstruct.api",
        "llmstruct.api.routes",
        "llmstruct.api.routes.continue_adapter"
      ],
      "uid_type": "module",
      "artifact_id": "4f096db2-0ea3-43ce-d7fd-33aa0b597eab",
      "metrics": {
        "cyclomatic_complexity": 9,
        "lines_of_code": 50,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 20,
        "test_coverage": 0.0,
        "maintainability_index": 55
      },
      "markdown_anchor": {
        "id": "llmstruct-api-routes-continue_adapter",
        "title": "Module: llmstruct.api.routes.continue_adapter",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.api.routes.continue_adapter](#llmstruct-api-routes-continue_adapter)",
        "html_anchor": "<a id=\"llmstruct-api-routes-continue_adapter\"></a>"
      }
    },
    {
      "module_id": "llmstruct.api.middleware.__init__",
      "path": "llmstruct/api/middleware/__init__.py",
      "category": "cli",
      "module_doc": "Middleware package for LLMStruct FastAPI\n\nContains authentication, logging, and other middleware.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "2675b95488b2d45c21c244b8c633aa8a1cbbc2af4d2a4094c07426c9fed917ce",
      "uid": "llmstruct.api.middleware.__init__",
      "uid_components": [
        "llmstruct",
        "llmstruct.api",
        "llmstruct.api.middleware",
        "llmstruct.api.middleware.__init__"
      ],
      "uid_type": "module",
      "artifact_id": "e16616e9-15ef-2908-e15f-72b28ecacc3d",
      "metrics": {
        "cyclomatic_complexity": 0,
        "lines_of_code": 0,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 0,
        "test_coverage": 0.0,
        "maintainability_index": 100
      },
      "markdown_anchor": {
        "id": "llmstruct-api-middleware-__init__",
        "title": "Module: llmstruct.api.middleware.__init__",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.api.middleware.__init__](#llmstruct-api-middleware-__init__)",
        "html_anchor": "<a id=\"llmstruct-api-middleware-__init__\"></a>"
      }
    },
    {
      "module_id": "llmstruct.api.middleware.logging",
      "path": "llmstruct/api/middleware/logging.py",
      "category": "core",
      "module_doc": "Logging middleware for LLMStruct FastAPI",
      "functions": [
        {
          "name": "request_logging_middleware",
          "docstring": "Request and response logging middleware",
          "line_range": [
            14,
            72
          ],
          "parameters": [
            "request",
            "call_next"
          ],
          "decorators": [],
          "uid": "llmstruct.api.middleware.logging.request_logging_middleware",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.middleware",
            "llmstruct.api.middleware.logging",
            "llmstruct.api.middleware.logging.request_logging_middleware"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [],
      "callgraph": {
        "request_logging_middleware": [
          "getattr",
          "time.time",
          "uuid.uuid4",
          "logger.info",
          "logger.error",
          "str",
          "call_next"
        ]
      },
      "dependencies": [
        "Callable",
        "Request",
        "fastapi",
        "logging",
        "time",
        "typing",
        "uuid"
      ],
      "hash": "ad05f6fcbc2b6f2eb916437708888f9bdbd21efbb0a3b1c83cf36463bce9fcea",
      "uid": "llmstruct.api.middleware.logging",
      "uid_components": [
        "llmstruct",
        "llmstruct.api",
        "llmstruct.api.middleware",
        "llmstruct.api.middleware.logging"
      ],
      "uid_type": "module",
      "artifact_id": "28a396ce-d889-fa5c-51af-d1e18d8327fc",
      "metrics": {
        "cyclomatic_complexity": 1,
        "lines_of_code": 10,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 7,
        "test_coverage": 0.0,
        "maintainability_index": 95
      },
      "markdown_anchor": {
        "id": "llmstruct-api-middleware-logging",
        "title": "Module: llmstruct.api.middleware.logging",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.api.middleware.logging](#llmstruct-api-middleware-logging)",
        "html_anchor": "<a id=\"llmstruct-api-middleware-logging\"></a>"
      }
    },
    {
      "module_id": "llmstruct.api.services.llm_service",
      "path": "llmstruct/api/services/llm_service.py",
      "category": "core",
      "module_doc": "LLM Service\n\nIntegrates with existing LLM models and context orchestration",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            24,
            28
          ],
          "parameters": [
            "self",
            "content",
            "context_info",
            "token_usage"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.llm_service.__init__",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.llm_service",
            "llmstruct.api.services.llm_service.__init__"
          ],
          "uid_type": "function"
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            33,
            36
          ],
          "parameters": [
            "self",
            "api_key"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.llm_service.__init__",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.llm_service",
            "llmstruct.api.services.llm_service.__init__"
          ],
          "uid_type": "function"
        },
        {
          "name": "chat_completion",
          "docstring": "Send chat completion request to Anthropic",
          "line_range": [
            38,
            77
          ],
          "parameters": [
            "self",
            "messages",
            "temperature"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.llm_service.chat_completion",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.llm_service",
            "llmstruct.api.services.llm_service.chat_completion"
          ],
          "uid_type": "function"
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            82,
            85
          ],
          "parameters": [
            "self",
            "api_key"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.llm_service.__init__",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.llm_service",
            "llmstruct.api.services.llm_service.__init__"
          ],
          "uid_type": "function"
        },
        {
          "name": "chat_completion",
          "docstring": "Send chat completion request to Grok",
          "line_range": [
            87,
            113
          ],
          "parameters": [
            "self",
            "messages",
            "temperature"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.llm_service.chat_completion",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.llm_service",
            "llmstruct.api.services.llm_service.chat_completion"
          ],
          "uid_type": "function"
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            118,
            124
          ],
          "parameters": [
            "self",
            "base_path"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.llm_service.__init__",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.llm_service",
            "llmstruct.api.services.llm_service.__init__"
          ],
          "uid_type": "function"
        },
        {
          "name": "_initialize_components",
          "docstring": "Initialize context orchestrator and copilot manager",
          "line_range": [
            126,
            140
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.llm_service._initialize_components",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.llm_service",
            "llmstruct.api.services.llm_service._initialize_components"
          ],
          "uid_type": "function"
        },
        {
          "name": "process_message",
          "docstring": "Process a user message and return AI response",
          "line_range": [
            143,
            168
          ],
          "parameters": [
            "self",
            "message",
            "session_id",
            "context_mode"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.llm_service.process_message",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.llm_service",
            "llmstruct.api.services.llm_service.process_message"
          ],
          "uid_type": "function"
        },
        {
          "name": "_try_llm_providers",
          "docstring": "Try LLM providers in order and return response",
          "line_range": [
            170,
            195
          ],
          "parameters": [
            "self",
            "message",
            "context_info"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.llm_service._try_llm_providers",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.llm_service",
            "llmstruct.api.services.llm_service._try_llm_providers"
          ],
          "uid_type": "function"
        },
        {
          "name": "_get_context",
          "docstring": "Get relevant context for the message",
          "line_range": [
            197,
            229
          ],
          "parameters": [
            "self",
            "message",
            "context_mode"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.llm_service._get_context",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.llm_service",
            "llmstruct.api.services.llm_service._get_context"
          ],
          "uid_type": "function"
        },
        {
          "name": "_get_full_context",
          "docstring": "Get full project context",
          "line_range": [
            231,
            243
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.llm_service._get_full_context",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.llm_service",
            "llmstruct.api.services.llm_service._get_full_context"
          ],
          "uid_type": "function"
        },
        {
          "name": "_get_focused_context",
          "docstring": "Get focused context based on message content",
          "line_range": [
            245,
            260
          ],
          "parameters": [
            "self",
            "message"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.llm_service._get_focused_context",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.llm_service",
            "llmstruct.api.services.llm_service._get_focused_context"
          ],
          "uid_type": "function"
        },
        {
          "name": "_get_minimal_context",
          "docstring": "Get minimal context - basic project info",
          "line_range": [
            262,
            267
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.llm_service._get_minimal_context",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.llm_service",
            "llmstruct.api.services.llm_service._get_minimal_context"
          ],
          "uid_type": "function"
        },
        {
          "name": "_generate_grok_response",
          "docstring": "Generate response using Grok API",
          "line_range": [
            269,
            287
          ],
          "parameters": [
            "self",
            "message",
            "context_info"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.llm_service._generate_grok_response",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.llm_service",
            "llmstruct.api.services.llm_service._generate_grok_response"
          ],
          "uid_type": "function"
        },
        {
          "name": "_generate_anthropic_response",
          "docstring": "Generate response using Anthropic API",
          "line_range": [
            289,
            307
          ],
          "parameters": [
            "self",
            "message",
            "context_info"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.llm_service._generate_anthropic_response",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.llm_service",
            "llmstruct.api.services.llm_service._generate_anthropic_response"
          ],
          "uid_type": "function"
        },
        {
          "name": "_build_system_prompt",
          "docstring": "Build system prompt with project context",
          "line_range": [
            309,
            344
          ],
          "parameters": [
            "self",
            "context_info"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.llm_service._build_system_prompt",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.llm_service",
            "llmstruct.api.services.llm_service._build_system_prompt"
          ],
          "uid_type": "function"
        },
        {
          "name": "_generate_mock_response",
          "docstring": "Generate a mock AI response (placeholder for real LLM)",
          "line_range": [
            346,
            380
          ],
          "parameters": [
            "self",
            "message",
            "context_info"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.llm_service._generate_mock_response",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.llm_service",
            "llmstruct.api.services.llm_service._generate_mock_response"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [
        {
          "name": "LLMResponse",
          "docstring": "Response from LLM processing",
          "line_range": [
            21,
            28
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                24,
                28
              ],
              "parameters": [
                "self",
                "content",
                "context_info",
                "token_usage"
              ],
              "uid": "llmstruct.api.services.llm_service.LLMResponse.__init__",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service.LLMResponse",
                "llmstruct.api.services.llm_service.LLMResponse.__init__"
              ],
              "uid_type": "method"
            }
          ],
          "bases": [],
          "uid": "llmstruct.api.services.llm_service.LLMResponse",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.llm_service",
            "llmstruct.api.services.llm_service.LLMResponse"
          ],
          "uid_type": "class"
        },
        {
          "name": "AnthropicClient",
          "docstring": "Client for Anthropic Claude API",
          "line_range": [
            30,
            77
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                33,
                36
              ],
              "parameters": [
                "self",
                "api_key"
              ],
              "uid": "llmstruct.api.services.llm_service.AnthropicClient.__init__",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service.AnthropicClient",
                "llmstruct.api.services.llm_service.AnthropicClient.__init__"
              ],
              "uid_type": "method"
            },
            {
              "name": "chat_completion",
              "docstring": "Send chat completion request to Anthropic",
              "line_range": [
                38,
                77
              ],
              "parameters": [
                "self",
                "messages",
                "temperature"
              ],
              "uid": "llmstruct.api.services.llm_service.AnthropicClient.chat_completion",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service.AnthropicClient",
                "llmstruct.api.services.llm_service.AnthropicClient.chat_completion"
              ],
              "uid_type": "method"
            }
          ],
          "bases": [],
          "uid": "llmstruct.api.services.llm_service.AnthropicClient",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.llm_service",
            "llmstruct.api.services.llm_service.AnthropicClient"
          ],
          "uid_type": "class"
        },
        {
          "name": "GrokClient",
          "docstring": "Client for Grok API integration",
          "line_range": [
            79,
            113
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                82,
                85
              ],
              "parameters": [
                "self",
                "api_key"
              ],
              "uid": "llmstruct.api.services.llm_service.GrokClient.__init__",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service.GrokClient",
                "llmstruct.api.services.llm_service.GrokClient.__init__"
              ],
              "uid_type": "method"
            },
            {
              "name": "chat_completion",
              "docstring": "Send chat completion request to Grok",
              "line_range": [
                87,
                113
              ],
              "parameters": [
                "self",
                "messages",
                "temperature"
              ],
              "uid": "llmstruct.api.services.llm_service.GrokClient.chat_completion",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service.GrokClient",
                "llmstruct.api.services.llm_service.GrokClient.chat_completion"
              ],
              "uid_type": "method"
            }
          ],
          "bases": [],
          "uid": "llmstruct.api.services.llm_service.GrokClient",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.llm_service",
            "llmstruct.api.services.llm_service.GrokClient"
          ],
          "uid_type": "class"
        },
        {
          "name": "LLMService",
          "docstring": "Service for LLM processing with context integration",
          "line_range": [
            115,
            380
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                118,
                124
              ],
              "parameters": [
                "self",
                "base_path"
              ],
              "uid": "llmstruct.api.services.llm_service.LLMService.__init__",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service.LLMService",
                "llmstruct.api.services.llm_service.LLMService.__init__"
              ],
              "uid_type": "method"
            },
            {
              "name": "_initialize_components",
              "docstring": "Initialize context orchestrator and copilot manager",
              "line_range": [
                126,
                140
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.api.services.llm_service.LLMService._initialize_components",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service.LLMService",
                "llmstruct.api.services.llm_service.LLMService._initialize_components"
              ],
              "uid_type": "method"
            },
            {
              "name": "process_message",
              "docstring": "Process a user message and return AI response",
              "line_range": [
                143,
                168
              ],
              "parameters": [
                "self",
                "message",
                "session_id",
                "context_mode"
              ],
              "uid": "llmstruct.api.services.llm_service.LLMService.process_message",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service.LLMService",
                "llmstruct.api.services.llm_service.LLMService.process_message"
              ],
              "uid_type": "method"
            },
            {
              "name": "_try_llm_providers",
              "docstring": "Try LLM providers in order and return response",
              "line_range": [
                170,
                195
              ],
              "parameters": [
                "self",
                "message",
                "context_info"
              ],
              "uid": "llmstruct.api.services.llm_service.LLMService._try_llm_providers",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service.LLMService",
                "llmstruct.api.services.llm_service.LLMService._try_llm_providers"
              ],
              "uid_type": "method"
            },
            {
              "name": "_get_context",
              "docstring": "Get relevant context for the message",
              "line_range": [
                197,
                229
              ],
              "parameters": [
                "self",
                "message",
                "context_mode"
              ],
              "uid": "llmstruct.api.services.llm_service.LLMService._get_context",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service.LLMService",
                "llmstruct.api.services.llm_service.LLMService._get_context"
              ],
              "uid_type": "method"
            },
            {
              "name": "_get_full_context",
              "docstring": "Get full project context",
              "line_range": [
                231,
                243
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.api.services.llm_service.LLMService._get_full_context",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service.LLMService",
                "llmstruct.api.services.llm_service.LLMService._get_full_context"
              ],
              "uid_type": "method"
            },
            {
              "name": "_get_focused_context",
              "docstring": "Get focused context based on message content",
              "line_range": [
                245,
                260
              ],
              "parameters": [
                "self",
                "message"
              ],
              "uid": "llmstruct.api.services.llm_service.LLMService._get_focused_context",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service.LLMService",
                "llmstruct.api.services.llm_service.LLMService._get_focused_context"
              ],
              "uid_type": "method"
            },
            {
              "name": "_get_minimal_context",
              "docstring": "Get minimal context - basic project info",
              "line_range": [
                262,
                267
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.api.services.llm_service.LLMService._get_minimal_context",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service.LLMService",
                "llmstruct.api.services.llm_service.LLMService._get_minimal_context"
              ],
              "uid_type": "method"
            },
            {
              "name": "_generate_grok_response",
              "docstring": "Generate response using Grok API",
              "line_range": [
                269,
                287
              ],
              "parameters": [
                "self",
                "message",
                "context_info"
              ],
              "uid": "llmstruct.api.services.llm_service.LLMService._generate_grok_response",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service.LLMService",
                "llmstruct.api.services.llm_service.LLMService._generate_grok_response"
              ],
              "uid_type": "method"
            },
            {
              "name": "_generate_anthropic_response",
              "docstring": "Generate response using Anthropic API",
              "line_range": [
                289,
                307
              ],
              "parameters": [
                "self",
                "message",
                "context_info"
              ],
              "uid": "llmstruct.api.services.llm_service.LLMService._generate_anthropic_response",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service.LLMService",
                "llmstruct.api.services.llm_service.LLMService._generate_anthropic_response"
              ],
              "uid_type": "method"
            },
            {
              "name": "_build_system_prompt",
              "docstring": "Build system prompt with project context",
              "line_range": [
                309,
                344
              ],
              "parameters": [
                "self",
                "context_info"
              ],
              "uid": "llmstruct.api.services.llm_service.LLMService._build_system_prompt",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service.LLMService",
                "llmstruct.api.services.llm_service.LLMService._build_system_prompt"
              ],
              "uid_type": "method"
            },
            {
              "name": "_generate_mock_response",
              "docstring": "Generate a mock AI response (placeholder for real LLM)",
              "line_range": [
                346,
                380
              ],
              "parameters": [
                "self",
                "message",
                "context_info"
              ],
              "uid": "llmstruct.api.services.llm_service.LLMService._generate_mock_response",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service.LLMService",
                "llmstruct.api.services.llm_service.LLMService._generate_mock_response"
              ],
              "uid_type": "method"
            }
          ],
          "bases": [],
          "uid": "llmstruct.api.services.llm_service.LLMService",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.llm_service",
            "llmstruct.api.services.llm_service.LLMService"
          ],
          "uid_type": "class"
        }
      ],
      "callgraph": {
        "__init__": [
          "self._initialize_components",
          "GrokClient",
          "AnthropicClient",
          "Path.cwd"
        ],
        "chat_completion": [
          "httpx.AsyncClient",
          "response.json",
          "client.post",
          "response.raise_for_status",
          "ValueError"
        ],
        "_initialize_components": [
          "CopilotContextManager",
          "logger.info",
          "logger.error",
          "SmartContextOrchestrator",
          "str"
        ],
        "process_message": [
          "self._try_llm_providers",
          "LLMResponse",
          "logger.error",
          "str",
          "self._get_context"
        ],
        "_try_llm_providers": [
          "len",
          "logger.warning",
          "logger.info",
          "self._generate_mock_response",
          "self._generate_anthropic_response",
          "self._generate_grok_response"
        ],
        "_get_context": [
          "self._get_full_context",
          "self._get_minimal_context",
          "logger.error",
          "self._get_focused_context",
          "str",
          "context_info.update"
        ],
        "_get_full_context": [
          "len",
          "struct_file.exists",
          "open",
          "json.load",
          "list",
          "struct_data.get"
        ],
        "_get_focused_context": [
          "any",
          "message.lower"
        ],
        "_get_minimal_context": [
          "str",
          "datetime.now"
        ],
        "_generate_grok_response": [
          "ValueError",
          "self._build_system_prompt",
          "len"
        ],
        "_generate_anthropic_response": [
          "ValueError",
          "self._build_system_prompt",
          "len"
        ],
        "_build_system_prompt": [
          "context_info.get"
        ],
        "_generate_mock_response": [
          "context_info.get",
          "len",
          "message.lower"
        ]
      },
      "dependencies": [
        "Any",
        "CopilotContextManager",
        "Dict",
        "List",
        "Optional",
        "Path",
        "SmartContextOrchestrator",
        "asyncio",
        "context_orchestrator",
        "copilot",
        "datetime",
        "httpx",
        "json",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": "a1d741ba8e78df4c0ac307472301c495c4ea017423b103d7472bc5ae6250ab6f",
      "uid": "llmstruct.api.services.llm_service",
      "uid_components": [
        "llmstruct",
        "llmstruct.api",
        "llmstruct.api.services",
        "llmstruct.api.services.llm_service"
      ],
      "uid_type": "module",
      "artifact_id": "d409c9b3-c874-f2fe-0bc0-b1023dc6c80f",
      "metrics": {
        "cyclomatic_complexity": 25,
        "lines_of_code": 170,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 17,
        "test_coverage": 0.0,
        "maintainability_index": 0
      },
      "markdown_anchor": {
        "id": "llmstruct-api-services-llm_service",
        "title": "Module: llmstruct.api.services.llm_service",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.api.services.llm_service](#llmstruct-api-services-llm_service)",
        "html_anchor": "<a id=\"llmstruct-api-services-llm_service\"></a>"
      }
    },
    {
      "module_id": "llmstruct.api.services.__init__",
      "path": "llmstruct/api/services/__init__.py",
      "category": "cli",
      "module_doc": "Services package for LLMStruct FastAPI\n\nContains business logic and integration services.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "44b6e1c9b0237a6636ef094dffd5589c9565f840159c5dd657c930c8838d323d",
      "uid": "llmstruct.api.services.__init__",
      "uid_components": [
        "llmstruct",
        "llmstruct.api",
        "llmstruct.api.services",
        "llmstruct.api.services.__init__"
      ],
      "uid_type": "module",
      "artifact_id": "9ecbfe8b-427e-572f-cf56-4d55b18667f9",
      "metrics": {
        "cyclomatic_complexity": 0,
        "lines_of_code": 0,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 0,
        "test_coverage": 0.0,
        "maintainability_index": 100
      },
      "markdown_anchor": {
        "id": "llmstruct-api-services-__init__",
        "title": "Module: llmstruct.api.services.__init__",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.api.services.__init__](#llmstruct-api-services-__init__)",
        "html_anchor": "<a id=\"llmstruct-api-services-__init__\"></a>"
      }
    },
    {
      "module_id": "llmstruct.api.services.cli_bridge",
      "path": "llmstruct/api/services/cli_bridge.py",
      "category": "core",
      "module_doc": "CLI Bridge Service\n\nProvides async integration between FastAPI and existing LLMStruct CLI functionality.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            29,
            33
          ],
          "parameters": [
            "self",
            "base_path"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.cli_bridge.__init__",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.cli_bridge",
            "llmstruct.api.services.cli_bridge.__init__"
          ],
          "uid_type": "function"
        },
        {
          "name": "_get_python_command",
          "docstring": "Determine the best Python command to use",
          "line_range": [
            35,
            40
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.cli_bridge._get_python_command",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.cli_bridge",
            "llmstruct.api.services.cli_bridge._get_python_command"
          ],
          "uid_type": "function"
        },
        {
          "name": "scan_project",
          "docstring": "Execute project scan via CLI",
          "line_range": [
            42,
            87
          ],
          "parameters": [
            "self",
            "options"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.cli_bridge.scan_project",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.cli_bridge",
            "llmstruct.api.services.cli_bridge.scan_project"
          ],
          "uid_type": "function"
        },
        {
          "name": "get_context",
          "docstring": "Get project context in specified mode",
          "line_range": [
            89,
            98
          ],
          "parameters": [
            "self",
            "mode",
            "include_files"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.cli_bridge.get_context",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.cli_bridge",
            "llmstruct.api.services.cli_bridge.get_context"
          ],
          "uid_type": "function"
        },
        {
          "name": "get_project_info",
          "docstring": "Get basic project information",
          "line_range": [
            100,
            104
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.cli_bridge.get_project_info",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.cli_bridge",
            "llmstruct.api.services.cli_bridge.get_project_info"
          ],
          "uid_type": "function"
        },
        {
          "name": "validate_json",
          "docstring": "Validate JSON structure",
          "line_range": [
            106,
            110
          ],
          "parameters": [
            "self",
            "json_path"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.cli_bridge.validate_json",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.cli_bridge",
            "llmstruct.api.services.cli_bridge.validate_json"
          ],
          "uid_type": "function"
        },
        {
          "name": "health_check",
          "docstring": "Check CLI health and availability",
          "line_range": [
            112,
            128
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.cli_bridge.health_check",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.cli_bridge",
            "llmstruct.api.services.cli_bridge.health_check"
          ],
          "uid_type": "function"
        },
        {
          "name": "_run_command",
          "docstring": "Run CLI command asynchronously",
          "line_range": [
            130,
            161
          ],
          "parameters": [
            "self",
            "cmd",
            "timeout"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.cli_bridge._run_command",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.cli_bridge",
            "llmstruct.api.services.cli_bridge._run_command"
          ],
          "uid_type": "function"
        },
        {
          "name": "_parse_cli_output",
          "docstring": "Parse CLI JSON output",
          "line_range": [
            163,
            176
          ],
          "parameters": [
            "self",
            "output"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.cli_bridge._parse_cli_output",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.cli_bridge",
            "llmstruct.api.services.cli_bridge._parse_cli_output"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [
        {
          "name": "CLIBridgeError",
          "docstring": "CLI Bridge specific errors",
          "line_range": [
            21,
            23
          ],
          "methods": [],
          "bases": [
            "Exception"
          ],
          "uid": "llmstruct.api.services.cli_bridge.CLIBridgeError",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.cli_bridge",
            "llmstruct.api.services.cli_bridge.CLIBridgeError"
          ],
          "uid_type": "class"
        },
        {
          "name": "CLIBridge",
          "docstring": "Bridge between FastAPI and existing CLI functionality",
          "line_range": [
            26,
            176
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                29,
                33
              ],
              "parameters": [
                "self",
                "base_path"
              ],
              "uid": "llmstruct.api.services.cli_bridge.CLIBridge.__init__",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.cli_bridge",
                "llmstruct.api.services.cli_bridge.CLIBridge",
                "llmstruct.api.services.cli_bridge.CLIBridge.__init__"
              ],
              "uid_type": "method"
            },
            {
              "name": "_get_python_command",
              "docstring": "Determine the best Python command to use",
              "line_range": [
                35,
                40
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.api.services.cli_bridge.CLIBridge._get_python_command",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.cli_bridge",
                "llmstruct.api.services.cli_bridge.CLIBridge",
                "llmstruct.api.services.cli_bridge.CLIBridge._get_python_command"
              ],
              "uid_type": "method"
            },
            {
              "name": "scan_project",
              "docstring": "Execute project scan via CLI",
              "line_range": [
                42,
                87
              ],
              "parameters": [
                "self",
                "options"
              ],
              "uid": "llmstruct.api.services.cli_bridge.CLIBridge.scan_project",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.cli_bridge",
                "llmstruct.api.services.cli_bridge.CLIBridge",
                "llmstruct.api.services.cli_bridge.CLIBridge.scan_project"
              ],
              "uid_type": "method"
            },
            {
              "name": "get_context",
              "docstring": "Get project context in specified mode",
              "line_range": [
                89,
                98
              ],
              "parameters": [
                "self",
                "mode",
                "include_files"
              ],
              "uid": "llmstruct.api.services.cli_bridge.CLIBridge.get_context",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.cli_bridge",
                "llmstruct.api.services.cli_bridge.CLIBridge",
                "llmstruct.api.services.cli_bridge.CLIBridge.get_context"
              ],
              "uid_type": "method"
            },
            {
              "name": "get_project_info",
              "docstring": "Get basic project information",
              "line_range": [
                100,
                104
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.api.services.cli_bridge.CLIBridge.get_project_info",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.cli_bridge",
                "llmstruct.api.services.cli_bridge.CLIBridge",
                "llmstruct.api.services.cli_bridge.CLIBridge.get_project_info"
              ],
              "uid_type": "method"
            },
            {
              "name": "validate_json",
              "docstring": "Validate JSON structure",
              "line_range": [
                106,
                110
              ],
              "parameters": [
                "self",
                "json_path"
              ],
              "uid": "llmstruct.api.services.cli_bridge.CLIBridge.validate_json",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.cli_bridge",
                "llmstruct.api.services.cli_bridge.CLIBridge",
                "llmstruct.api.services.cli_bridge.CLIBridge.validate_json"
              ],
              "uid_type": "method"
            },
            {
              "name": "health_check",
              "docstring": "Check CLI health and availability",
              "line_range": [
                112,
                128
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.api.services.cli_bridge.CLIBridge.health_check",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.cli_bridge",
                "llmstruct.api.services.cli_bridge.CLIBridge",
                "llmstruct.api.services.cli_bridge.CLIBridge.health_check"
              ],
              "uid_type": "method"
            },
            {
              "name": "_run_command",
              "docstring": "Run CLI command asynchronously",
              "line_range": [
                130,
                161
              ],
              "parameters": [
                "self",
                "cmd",
                "timeout"
              ],
              "uid": "llmstruct.api.services.cli_bridge.CLIBridge._run_command",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.cli_bridge",
                "llmstruct.api.services.cli_bridge.CLIBridge",
                "llmstruct.api.services.cli_bridge.CLIBridge._run_command"
              ],
              "uid_type": "method"
            },
            {
              "name": "_parse_cli_output",
              "docstring": "Parse CLI JSON output",
              "line_range": [
                163,
                176
              ],
              "parameters": [
                "self",
                "output"
              ],
              "uid": "llmstruct.api.services.cli_bridge.CLIBridge._parse_cli_output",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.cli_bridge",
                "llmstruct.api.services.cli_bridge.CLIBridge",
                "llmstruct.api.services.cli_bridge.CLIBridge._parse_cli_output"
              ],
              "uid_type": "method"
            }
          ],
          "bases": [],
          "uid": "llmstruct.api.services.cli_bridge.CLIBridge",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.cli_bridge",
            "llmstruct.api.services.cli_bridge.CLIBridge"
          ],
          "uid_type": "class"
        }
      ],
      "callgraph": {
        "__init__": [
          "self._get_python_command",
          "Path.cwd"
        ],
        "_get_python_command": [
          "str",
          "venv_python.exists"
        ],
        "scan_project": [
          "self._parse_cli_output",
          "self._run_command",
          "open",
          "os.unlink",
          "options.get",
          "cmd.append",
          "tempfile.mkstemp",
          "json.load",
          "logger.error",
          "os.close",
          "cmd.extend"
        ],
        "get_context": [
          "cmd.extend",
          "self._parse_cli_output",
          "self._run_command"
        ],
        "get_project_info": [
          "self._parse_cli_output",
          "self._run_command"
        ],
        "validate_json": [
          "self._parse_cli_output",
          "self._run_command"
        ],
        "health_check": [
          "str",
          "self._run_command"
        ],
        "_run_command": [
          "asyncio.create_subprocess_exec",
          "logger.info",
          "logger.error",
          "CLIBridgeError",
          "stderr.decode",
          "str",
          "asyncio.wait_for",
          "process.communicate",
          "stdout.decode"
        ],
        "_parse_cli_output": [
          "json.loads",
          "output.strip"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "asyncio",
        "config",
        "json",
        "logging",
        "os",
        "pathlib",
        "settings",
        "subprocess",
        "tempfile",
        "typing"
      ],
      "hash": "ae6642d6b4982964e62cfd89d281408fbc17bf8540df9d761aa7c540a33cd9d0",
      "uid": "llmstruct.api.services.cli_bridge",
      "uid_components": [
        "llmstruct",
        "llmstruct.api",
        "llmstruct.api.services",
        "llmstruct.api.services.cli_bridge"
      ],
      "uid_type": "module",
      "artifact_id": "d4a8f3aa-320f-8e55-b346-1ebb8cd53825",
      "metrics": {
        "cyclomatic_complexity": 13,
        "lines_of_code": 90,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 15,
        "test_coverage": 0.0,
        "maintainability_index": 35
      },
      "markdown_anchor": {
        "id": "llmstruct-api-services-cli_bridge",
        "title": "Module: llmstruct.api.services.cli_bridge",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.api.services.cli_bridge](#llmstruct-api-services-cli_bridge)",
        "html_anchor": "<a id=\"llmstruct-api-services-cli_bridge\"></a>"
      }
    },
    {
      "module_id": "llmstruct.api.services.chat_session",
      "path": "llmstruct/api/services/chat_session.py",
      "category": "core",
      "module_doc": "Chat Session Manager\n\nManages persistent chat sessions and conversation history",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            19,
            24
          ],
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.chat_session.__init__",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.chat_session",
            "llmstruct.api.services.chat_session.__init__"
          ],
          "uid_type": "function"
        },
        {
          "name": "add_message",
          "docstring": "Add a message to the session",
          "line_range": [
            26,
            36
          ],
          "parameters": [
            "self",
            "role",
            "content",
            "metadata"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.chat_session.add_message",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.chat_session",
            "llmstruct.api.services.chat_session.add_message"
          ],
          "uid_type": "function"
        },
        {
          "name": "get_messages",
          "docstring": "Get messages from session, optionally limited",
          "line_range": [
            38,
            42
          ],
          "parameters": [
            "self",
            "limit"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.chat_session.get_messages",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.chat_session",
            "llmstruct.api.services.chat_session.get_messages"
          ],
          "uid_type": "function"
        },
        {
          "name": "get_context_string",
          "docstring": "Get recent messages as context string",
          "line_range": [
            44,
            54
          ],
          "parameters": [
            "self",
            "limit"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.chat_session.get_context_string",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.chat_session",
            "llmstruct.api.services.chat_session.get_context_string"
          ],
          "uid_type": "function"
        },
        {
          "name": "to_dict",
          "docstring": "Convert session to dictionary",
          "line_range": [
            56,
            65
          ],
          "parameters": [
            "self"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.chat_session.to_dict",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.chat_session",
            "llmstruct.api.services.chat_session.to_dict"
          ],
          "uid_type": "function"
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            70,
            73
          ],
          "parameters": [
            "self",
            "storage_path"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.chat_session.__init__",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.chat_session",
            "llmstruct.api.services.chat_session.__init__"
          ],
          "uid_type": "function"
        },
        {
          "name": "get_or_create_session",
          "docstring": "Get existing session or create new one",
          "line_range": [
            75,
            87
          ],
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.chat_session.get_or_create_session",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.chat_session",
            "llmstruct.api.services.chat_session.get_or_create_session"
          ],
          "uid_type": "function"
        },
        {
          "name": "get_session",
          "docstring": "Get session by ID",
          "line_range": [
            89,
            101
          ],
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.chat_session.get_session",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.chat_session",
            "llmstruct.api.services.chat_session.get_session"
          ],
          "uid_type": "function"
        },
        {
          "name": "add_message",
          "docstring": "Add message to session",
          "line_range": [
            103,
            109
          ],
          "parameters": [
            "self",
            "session_id",
            "role",
            "content",
            "metadata"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.chat_session.add_message",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.chat_session",
            "llmstruct.api.services.chat_session.add_message"
          ],
          "uid_type": "function"
        },
        {
          "name": "list_sessions",
          "docstring": "List all sessions with summary info",
          "line_range": [
            111,
            138
          ],
          "parameters": [
            "self",
            "limit"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.chat_session.list_sessions",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.chat_session",
            "llmstruct.api.services.chat_session.list_sessions"
          ],
          "uid_type": "function"
        },
        {
          "name": "delete_session",
          "docstring": "Delete a session",
          "line_range": [
            140,
            152
          ],
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.chat_session.delete_session",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.chat_session",
            "llmstruct.api.services.chat_session.delete_session"
          ],
          "uid_type": "function"
        },
        {
          "name": "_load_session",
          "docstring": "Load session from storage",
          "line_range": [
            154,
            167
          ],
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.chat_session._load_session",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.chat_session",
            "llmstruct.api.services.chat_session._load_session"
          ],
          "uid_type": "function"
        },
        {
          "name": "_save_session",
          "docstring": "Save session to storage",
          "line_range": [
            169,
            178
          ],
          "parameters": [
            "self",
            "session"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.chat_session._save_session",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.chat_session",
            "llmstruct.api.services.chat_session._save_session"
          ],
          "uid_type": "function"
        },
        {
          "name": "cleanup_old_sessions",
          "docstring": "Clean up sessions older than specified days",
          "line_range": [
            180,
            183
          ],
          "parameters": [
            "self",
            "days"
          ],
          "decorators": [],
          "uid": "llmstruct.api.services.chat_session.cleanup_old_sessions",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.chat_session",
            "llmstruct.api.services.chat_session.cleanup_old_sessions"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [
        {
          "name": "ChatSession",
          "docstring": "Represents a chat session with history",
          "line_range": [
            16,
            65
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                19,
                24
              ],
              "parameters": [
                "self",
                "session_id"
              ],
              "uid": "llmstruct.api.services.chat_session.ChatSession.__init__",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.chat_session",
                "llmstruct.api.services.chat_session.ChatSession",
                "llmstruct.api.services.chat_session.ChatSession.__init__"
              ],
              "uid_type": "method"
            },
            {
              "name": "add_message",
              "docstring": "Add a message to the session",
              "line_range": [
                26,
                36
              ],
              "parameters": [
                "self",
                "role",
                "content",
                "metadata"
              ],
              "uid": "llmstruct.api.services.chat_session.ChatSession.add_message",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.chat_session",
                "llmstruct.api.services.chat_session.ChatSession",
                "llmstruct.api.services.chat_session.ChatSession.add_message"
              ],
              "uid_type": "method"
            },
            {
              "name": "get_messages",
              "docstring": "Get messages from session, optionally limited",
              "line_range": [
                38,
                42
              ],
              "parameters": [
                "self",
                "limit"
              ],
              "uid": "llmstruct.api.services.chat_session.ChatSession.get_messages",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.chat_session",
                "llmstruct.api.services.chat_session.ChatSession",
                "llmstruct.api.services.chat_session.ChatSession.get_messages"
              ],
              "uid_type": "method"
            },
            {
              "name": "get_context_string",
              "docstring": "Get recent messages as context string",
              "line_range": [
                44,
                54
              ],
              "parameters": [
                "self",
                "limit"
              ],
              "uid": "llmstruct.api.services.chat_session.ChatSession.get_context_string",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.chat_session",
                "llmstruct.api.services.chat_session.ChatSession",
                "llmstruct.api.services.chat_session.ChatSession.get_context_string"
              ],
              "uid_type": "method"
            },
            {
              "name": "to_dict",
              "docstring": "Convert session to dictionary",
              "line_range": [
                56,
                65
              ],
              "parameters": [
                "self"
              ],
              "uid": "llmstruct.api.services.chat_session.ChatSession.to_dict",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.chat_session",
                "llmstruct.api.services.chat_session.ChatSession",
                "llmstruct.api.services.chat_session.ChatSession.to_dict"
              ],
              "uid_type": "method"
            }
          ],
          "bases": [],
          "uid": "llmstruct.api.services.chat_session.ChatSession",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.chat_session",
            "llmstruct.api.services.chat_session.ChatSession"
          ],
          "uid_type": "class"
        },
        {
          "name": "ChatSessionManager",
          "docstring": "Manages multiple chat sessions",
          "line_range": [
            67,
            183
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                70,
                73
              ],
              "parameters": [
                "self",
                "storage_path"
              ],
              "uid": "llmstruct.api.services.chat_session.ChatSessionManager.__init__",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.chat_session",
                "llmstruct.api.services.chat_session.ChatSessionManager",
                "llmstruct.api.services.chat_session.ChatSessionManager.__init__"
              ],
              "uid_type": "method"
            },
            {
              "name": "get_or_create_session",
              "docstring": "Get existing session or create new one",
              "line_range": [
                75,
                87
              ],
              "parameters": [
                "self",
                "session_id"
              ],
              "uid": "llmstruct.api.services.chat_session.ChatSessionManager.get_or_create_session",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.chat_session",
                "llmstruct.api.services.chat_session.ChatSessionManager",
                "llmstruct.api.services.chat_session.ChatSessionManager.get_or_create_session"
              ],
              "uid_type": "method"
            },
            {
              "name": "get_session",
              "docstring": "Get session by ID",
              "line_range": [
                89,
                101
              ],
              "parameters": [
                "self",
                "session_id"
              ],
              "uid": "llmstruct.api.services.chat_session.ChatSessionManager.get_session",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.chat_session",
                "llmstruct.api.services.chat_session.ChatSessionManager",
                "llmstruct.api.services.chat_session.ChatSessionManager.get_session"
              ],
              "uid_type": "method"
            },
            {
              "name": "add_message",
              "docstring": "Add message to session",
              "line_range": [
                103,
                109
              ],
              "parameters": [
                "self",
                "session_id",
                "role",
                "content",
                "metadata"
              ],
              "uid": "llmstruct.api.services.chat_session.ChatSessionManager.add_message",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.chat_session",
                "llmstruct.api.services.chat_session.ChatSessionManager",
                "llmstruct.api.services.chat_session.ChatSessionManager.add_message"
              ],
              "uid_type": "method"
            },
            {
              "name": "list_sessions",
              "docstring": "List all sessions with summary info",
              "line_range": [
                111,
                138
              ],
              "parameters": [
                "self",
                "limit"
              ],
              "uid": "llmstruct.api.services.chat_session.ChatSessionManager.list_sessions",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.chat_session",
                "llmstruct.api.services.chat_session.ChatSessionManager",
                "llmstruct.api.services.chat_session.ChatSessionManager.list_sessions"
              ],
              "uid_type": "method"
            },
            {
              "name": "delete_session",
              "docstring": "Delete a session",
              "line_range": [
                140,
                152
              ],
              "parameters": [
                "self",
                "session_id"
              ],
              "uid": "llmstruct.api.services.chat_session.ChatSessionManager.delete_session",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.chat_session",
                "llmstruct.api.services.chat_session.ChatSessionManager",
                "llmstruct.api.services.chat_session.ChatSessionManager.delete_session"
              ],
              "uid_type": "method"
            },
            {
              "name": "_load_session",
              "docstring": "Load session from storage",
              "line_range": [
                154,
                167
              ],
              "parameters": [
                "self",
                "session_id"
              ],
              "uid": "llmstruct.api.services.chat_session.ChatSessionManager._load_session",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.chat_session",
                "llmstruct.api.services.chat_session.ChatSessionManager",
                "llmstruct.api.services.chat_session.ChatSessionManager._load_session"
              ],
              "uid_type": "method"
            },
            {
              "name": "_save_session",
              "docstring": "Save session to storage",
              "line_range": [
                169,
                178
              ],
              "parameters": [
                "self",
                "session"
              ],
              "uid": "llmstruct.api.services.chat_session.ChatSessionManager._save_session",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.chat_session",
                "llmstruct.api.services.chat_session.ChatSessionManager",
                "llmstruct.api.services.chat_session.ChatSessionManager._save_session"
              ],
              "uid_type": "method"
            },
            {
              "name": "cleanup_old_sessions",
              "docstring": "Clean up sessions older than specified days",
              "line_range": [
                180,
                183
              ],
              "parameters": [
                "self",
                "days"
              ],
              "uid": "llmstruct.api.services.chat_session.ChatSessionManager.cleanup_old_sessions",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.chat_session",
                "llmstruct.api.services.chat_session.ChatSessionManager",
                "llmstruct.api.services.chat_session.ChatSessionManager.cleanup_old_sessions"
              ],
              "uid_type": "method"
            }
          ],
          "bases": [],
          "uid": "llmstruct.api.services.chat_session.ChatSessionManager",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.chat_session",
            "llmstruct.api.services.chat_session.ChatSessionManager"
          ],
          "uid_type": "class"
        }
      ],
      "callgraph": {
        "__init__": [
          "Path.cwd"
        ],
        "add_message": [
          "session.add_message",
          "self._save_session",
          "self.get_or_create_session"
        ],
        "get_messages": [],
        "get_context_string": [
          "context_parts.append",
          "self.get_messages"
        ],
        "to_dict": [
          "len"
        ],
        "get_or_create_session": [
          "self._load_session",
          "session_file.exists",
          "ChatSession"
        ],
        "get_session": [
          "self._load_session",
          "session_file.exists"
        ],
        "list_sessions": [
          "sessions.append",
          "len",
          "sessions.sort",
          "self._load_session",
          "logger.error"
        ],
        "delete_session": [
          "session_file.exists",
          "session_file.unlink"
        ],
        "_load_session": [
          "json.load",
          "open",
          "data.get",
          "ChatSession"
        ],
        "_save_session": [
          "json.dump",
          "open",
          "logger.error",
          "session.to_dict"
        ],
        "cleanup_old_sessions": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "asyncio",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": "278a79380fa447dfedc355ffa26c5274625aba212f8c8febc0be832a4342f6aa",
      "uid": "llmstruct.api.services.chat_session",
      "uid_components": [
        "llmstruct",
        "llmstruct.api",
        "llmstruct.api.services",
        "llmstruct.api.services.chat_session"
      ],
      "uid_type": "module",
      "artifact_id": "feb86bd7-e3dd-9be2-cd5e-796d1a272666",
      "metrics": {
        "cyclomatic_complexity": 18,
        "lines_of_code": 140,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 11,
        "test_coverage": 0.0,
        "maintainability_index": 10
      },
      "markdown_anchor": {
        "id": "llmstruct-api-services-chat_session",
        "title": "Module: llmstruct.api.services.chat_session",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.api.services.chat_session](#llmstruct-api-services-chat_session)",
        "html_anchor": "<a id=\"llmstruct-api-services-chat_session\"></a>"
      }
    },
    {
      "module_id": "llmstruct.api.models.requests",
      "path": "llmstruct/api/models/requests.py",
      "category": "core",
      "module_doc": "Request models for LLMStruct FastAPI",
      "functions": [],
      "classes": [
        {
          "name": "ContextMode",
          "docstring": "",
          "line_range": [
            10,
            14
          ],
          "methods": [],
          "bases": [
            "str",
            "Enum"
          ],
          "uid": "llmstruct.api.models.requests.ContextMode",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.requests",
            "llmstruct.api.models.requests.ContextMode"
          ],
          "uid_type": "class"
        },
        {
          "name": "Priority",
          "docstring": "",
          "line_range": [
            17,
            21
          ],
          "methods": [],
          "bases": [
            "str",
            "Enum"
          ],
          "uid": "llmstruct.api.models.requests.Priority",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.requests",
            "llmstruct.api.models.requests.Priority"
          ],
          "uid_type": "class"
        },
        {
          "name": "ScanRequest",
          "docstring": "Request model for project scanning",
          "line_range": [
            24,
            38
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ],
          "uid": "llmstruct.api.models.requests.ScanRequest",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.requests",
            "llmstruct.api.models.requests.ScanRequest"
          ],
          "uid_type": "class"
        },
        {
          "name": "ContextRequest",
          "docstring": "Request model for context generation",
          "line_range": [
            41,
            54
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ],
          "uid": "llmstruct.api.models.requests.ContextRequest",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.requests",
            "llmstruct.api.models.requests.ContextRequest"
          ],
          "uid_type": "class"
        },
        {
          "name": "TaskCreateRequest",
          "docstring": "Request model for creating tasks",
          "line_range": [
            57,
            74
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ],
          "uid": "llmstruct.api.models.requests.TaskCreateRequest",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.requests",
            "llmstruct.api.models.requests.TaskCreateRequest"
          ],
          "uid_type": "class"
        },
        {
          "name": "TaskUpdateRequest",
          "docstring": "Request model for updating tasks",
          "line_range": [
            77,
            92
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ],
          "uid": "llmstruct.api.models.requests.TaskUpdateRequest",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.requests",
            "llmstruct.api.models.requests.TaskUpdateRequest"
          ],
          "uid_type": "class"
        },
        {
          "name": "QueryRequest",
          "docstring": "Request model for LLM queries",
          "line_range": [
            95,
            110
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ],
          "uid": "llmstruct.api.models.requests.QueryRequest",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.requests",
            "llmstruct.api.models.requests.QueryRequest"
          ],
          "uid_type": "class"
        },
        {
          "name": "ValidationRequest",
          "docstring": "Request model for JSON validation",
          "line_range": [
            113,
            124
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ],
          "uid": "llmstruct.api.models.requests.ValidationRequest",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.requests",
            "llmstruct.api.models.requests.ValidationRequest"
          ],
          "uid_type": "class"
        },
        {
          "name": "ChatMessage",
          "docstring": "Chat message request",
          "line_range": [
            127,
            132
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ],
          "uid": "llmstruct.api.models.requests.ChatMessage",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.requests",
            "llmstruct.api.models.requests.ChatMessage"
          ],
          "uid_type": "class"
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": [
            31,
            38
          ],
          "methods": [],
          "bases": [],
          "uid": "llmstruct.api.models.requests.Config",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.requests",
            "llmstruct.api.models.requests.Config"
          ],
          "uid_type": "class"
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": [
            47,
            54
          ],
          "methods": [],
          "bases": [],
          "uid": "llmstruct.api.models.requests.Config",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.requests",
            "llmstruct.api.models.requests.Config"
          ],
          "uid_type": "class"
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": [
            65,
            74
          ],
          "methods": [],
          "bases": [],
          "uid": "llmstruct.api.models.requests.Config",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.requests",
            "llmstruct.api.models.requests.Config"
          ],
          "uid_type": "class"
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": [
            86,
            92
          ],
          "methods": [],
          "bases": [],
          "uid": "llmstruct.api.models.requests.Config",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.requests",
            "llmstruct.api.models.requests.Config"
          ],
          "uid_type": "class"
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": [
            102,
            110
          ],
          "methods": [],
          "bases": [],
          "uid": "llmstruct.api.models.requests.Config",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.requests",
            "llmstruct.api.models.requests.Config"
          ],
          "uid_type": "class"
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": [
            118,
            124
          ],
          "methods": [],
          "bases": [],
          "uid": "llmstruct.api.models.requests.Config",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.requests",
            "llmstruct.api.models.requests.Config"
          ],
          "uid_type": "class"
        }
      ],
      "callgraph": {},
      "dependencies": [
        "Any",
        "BaseModel",
        "Dict",
        "Enum",
        "Field",
        "List",
        "Optional",
        "enum",
        "pydantic",
        "typing"
      ],
      "hash": "dc0eeffef63529c5124c852cad0692908215fa4c7ebe8a6305ca8d701741d758",
      "uid": "llmstruct.api.models.requests",
      "uid_components": [
        "llmstruct",
        "llmstruct.api",
        "llmstruct.api.models",
        "llmstruct.api.models.requests"
      ],
      "uid_type": "module",
      "artifact_id": "5f768b49-a75c-d409-face-950f4bc8c81f",
      "metrics": {
        "cyclomatic_complexity": 30,
        "lines_of_code": 0,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 10,
        "test_coverage": 0.0,
        "maintainability_index": 0
      },
      "markdown_anchor": {
        "id": "llmstruct-api-models-requests",
        "title": "Module: llmstruct.api.models.requests",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.api.models.requests](#llmstruct-api-models-requests)",
        "html_anchor": "<a id=\"llmstruct-api-models-requests\"></a>"
      }
    },
    {
      "module_id": "llmstruct.api.models.responses",
      "path": "llmstruct/api/models/responses.py",
      "category": "core",
      "module_doc": "Response models for LLMStruct FastAPI",
      "functions": [],
      "classes": [
        {
          "name": "TaskStatus",
          "docstring": "",
          "line_range": [
            11,
            15
          ],
          "methods": [],
          "bases": [
            "str",
            "Enum"
          ],
          "uid": "llmstruct.api.models.responses.TaskStatus",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.responses",
            "llmstruct.api.models.responses.TaskStatus"
          ],
          "uid_type": "class"
        },
        {
          "name": "HealthStatus",
          "docstring": "",
          "line_range": [
            18,
            21
          ],
          "methods": [],
          "bases": [
            "str",
            "Enum"
          ],
          "uid": "llmstruct.api.models.responses.HealthStatus",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.responses",
            "llmstruct.api.models.responses.HealthStatus"
          ],
          "uid_type": "class"
        },
        {
          "name": "ProjectInfo",
          "docstring": "Response model for project information",
          "line_range": [
            24,
            49
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ],
          "uid": "llmstruct.api.models.responses.ProjectInfo",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.responses",
            "llmstruct.api.models.responses.ProjectInfo"
          ],
          "uid_type": "class"
        },
        {
          "name": "ScanResponse",
          "docstring": "Response model for project scan results",
          "line_range": [
            52,
            77
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ],
          "uid": "llmstruct.api.models.responses.ScanResponse",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.responses",
            "llmstruct.api.models.responses.ScanResponse"
          ],
          "uid_type": "class"
        },
        {
          "name": "ContextResponse",
          "docstring": "Response model for context generation",
          "line_range": [
            80,
            100
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ],
          "uid": "llmstruct.api.models.responses.ContextResponse",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.responses",
            "llmstruct.api.models.responses.ContextResponse"
          ],
          "uid_type": "class"
        },
        {
          "name": "TaskResponse",
          "docstring": "Response model for task operations",
          "line_range": [
            103,
            128
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ],
          "uid": "llmstruct.api.models.responses.TaskResponse",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.responses",
            "llmstruct.api.models.responses.TaskResponse"
          ],
          "uid_type": "class"
        },
        {
          "name": "QueryResponse",
          "docstring": "Response model for LLM queries",
          "line_range": [
            131,
            155
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ],
          "uid": "llmstruct.api.models.responses.QueryResponse",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.responses",
            "llmstruct.api.models.responses.QueryResponse"
          ],
          "uid_type": "class"
        },
        {
          "name": "ValidationResponse",
          "docstring": "Response model for JSON validation",
          "line_range": [
            158,
            175
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ],
          "uid": "llmstruct.api.models.responses.ValidationResponse",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.responses",
            "llmstruct.api.models.responses.ValidationResponse"
          ],
          "uid_type": "class"
        },
        {
          "name": "HealthResponse",
          "docstring": "Response model for health checks",
          "line_range": [
            178,
            199
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ],
          "uid": "llmstruct.api.models.responses.HealthResponse",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.responses",
            "llmstruct.api.models.responses.HealthResponse"
          ],
          "uid_type": "class"
        },
        {
          "name": "ErrorResponse",
          "docstring": "Response model for API errors",
          "line_range": [
            202,
            217
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ],
          "uid": "llmstruct.api.models.responses.ErrorResponse",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.responses",
            "llmstruct.api.models.responses.ErrorResponse"
          ],
          "uid_type": "class"
        },
        {
          "name": "ChatResponse",
          "docstring": "Chat response",
          "line_range": [
            220,
            226
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ],
          "uid": "llmstruct.api.models.responses.ChatResponse",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.responses",
            "llmstruct.api.models.responses.ChatResponse"
          ],
          "uid_type": "class"
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": [
            36,
            49
          ],
          "methods": [],
          "bases": [],
          "uid": "llmstruct.api.models.responses.Config",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.responses",
            "llmstruct.api.models.responses.Config"
          ],
          "uid_type": "class"
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": [
            62,
            77
          ],
          "methods": [],
          "bases": [],
          "uid": "llmstruct.api.models.responses.Config",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.responses",
            "llmstruct.api.models.responses.Config"
          ],
          "uid_type": "class"
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": [
            88,
            100
          ],
          "methods": [],
          "bases": [],
          "uid": "llmstruct.api.models.responses.Config",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.responses",
            "llmstruct.api.models.responses.Config"
          ],
          "uid_type": "class"
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": [
            115,
            128
          ],
          "methods": [],
          "bases": [],
          "uid": "llmstruct.api.models.responses.Config",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.responses",
            "llmstruct.api.models.responses.Config"
          ],
          "uid_type": "class"
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": [
            139,
            155
          ],
          "methods": [],
          "bases": [],
          "uid": "llmstruct.api.models.responses.Config",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.responses",
            "llmstruct.api.models.responses.Config"
          ],
          "uid_type": "class"
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": [
            166,
            175
          ],
          "methods": [],
          "bases": [],
          "uid": "llmstruct.api.models.responses.Config",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.responses",
            "llmstruct.api.models.responses.Config"
          ],
          "uid_type": "class"
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": [
            186,
            199
          ],
          "methods": [],
          "bases": [],
          "uid": "llmstruct.api.models.responses.Config",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.responses",
            "llmstruct.api.models.responses.Config"
          ],
          "uid_type": "class"
        },
        {
          "name": "Config",
          "docstring": "",
          "line_range": [
            209,
            217
          ],
          "methods": [],
          "bases": [],
          "uid": "llmstruct.api.models.responses.Config",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.responses",
            "llmstruct.api.models.responses.Config"
          ],
          "uid_type": "class"
        }
      ],
      "callgraph": {},
      "dependencies": [
        "Any",
        "BaseModel",
        "Dict",
        "Enum",
        "Field",
        "List",
        "Optional",
        "datetime",
        "enum",
        "pydantic",
        "typing"
      ],
      "hash": "078fd90649a418e1a54b3ca016ffe75935a83f57d232ec351be8be93a8462dae",
      "uid": "llmstruct.api.models.responses",
      "uid_components": [
        "llmstruct",
        "llmstruct.api",
        "llmstruct.api.models",
        "llmstruct.api.models.responses"
      ],
      "uid_type": "module",
      "artifact_id": "20bb04d4-65d2-d00b-d970-246c2cff6cab",
      "metrics": {
        "cyclomatic_complexity": 38,
        "lines_of_code": 0,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 11,
        "test_coverage": 0.0,
        "maintainability_index": 0
      },
      "markdown_anchor": {
        "id": "llmstruct-api-models-responses",
        "title": "Module: llmstruct.api.models.responses",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.api.models.responses](#llmstruct-api-models-responses)",
        "html_anchor": "<a id=\"llmstruct-api-models-responses\"></a>"
      }
    },
    {
      "module_id": "llmstruct.api.models.__init__",
      "path": "llmstruct/api/models/__init__.py",
      "category": "cli",
      "module_doc": "Pydantic models for LLMStruct FastAPI\n\nDefines request and response models for API endpoints.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "b8e418fc588027c39078efbe602bc30126d34375ab863658b820247d69432b02",
      "uid": "llmstruct.api.models.__init__",
      "uid_components": [
        "llmstruct",
        "llmstruct.api",
        "llmstruct.api.models",
        "llmstruct.api.models.__init__"
      ],
      "uid_type": "module",
      "artifact_id": "c09b00ac-ff59-af9e-7cf0-6f60231a2c01",
      "metrics": {
        "cyclomatic_complexity": 0,
        "lines_of_code": 0,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 0,
        "test_coverage": 0.0,
        "maintainability_index": 100
      },
      "markdown_anchor": {
        "id": "llmstruct-api-models-__init__",
        "title": "Module: llmstruct.api.models.__init__",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.api.models.__init__](#llmstruct-api-models-__init__)",
        "html_anchor": "<a id=\"llmstruct-api-models-__init__\"></a>"
      }
    },
    {
      "module_id": "llmstruct.modules.commands.metrics",
      "path": "llmstruct/modules/commands/metrics.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "metrics_status",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 \u043c\u0435\u0442\u0440\u0438\u043a",
          "line_range": [
            1,
            20
          ],
          "parameters": [],
          "decorators": [],
          "uid": "llmstruct.modules.commands.metrics.metrics_status",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.commands",
            "llmstruct.modules.commands.metrics",
            "llmstruct.modules.commands.metrics.metrics_status"
          ],
          "uid_type": "function"
        },
        {
          "name": "metrics_summary",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u0443\u044e \u0441\u0432\u043e\u0434\u043a\u0443 \u043c\u0435\u0442\u0440\u0438\u043a",
          "line_range": [
            22,
            66
          ],
          "parameters": [],
          "decorators": [],
          "uid": "llmstruct.modules.commands.metrics.metrics_summary",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.commands",
            "llmstruct.modules.commands.metrics",
            "llmstruct.modules.commands.metrics.metrics_summary"
          ],
          "uid_type": "function"
        },
        {
          "name": "metrics_analytics",
          "docstring": "\u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435",
          "line_range": [
            68,
            104
          ],
          "parameters": [
            "output_file",
            "format"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.commands.metrics.metrics_analytics",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.commands",
            "llmstruct.modules.commands.metrics",
            "llmstruct.modules.commands.metrics.metrics_analytics"
          ],
          "uid_type": "function"
        },
        {
          "name": "metrics_report",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u0441\u0435\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u0439 \u043e\u0442\u0447\u0435\u0442",
          "line_range": [
            106,
            134
          ],
          "parameters": [
            "sessions",
            "output_file"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.commands.metrics.metrics_report",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.commands",
            "llmstruct.modules.commands.metrics",
            "llmstruct.modules.commands.metrics.metrics_report"
          ],
          "uid_type": "function"
        },
        {
          "name": "metrics_track",
          "docstring": "\u0420\u0443\u0447\u043d\u043e\u0435 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u0439",
          "line_range": [
            136,
            145
          ],
          "parameters": [
            "event_type",
            "details"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.commands.metrics.metrics_track",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.commands",
            "llmstruct.modules.commands.metrics",
            "llmstruct.modules.commands.metrics.metrics_track"
          ],
          "uid_type": "function"
        },
        {
          "name": "metrics_tokens",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u0443\u044e \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u0442\u043e\u043a\u0435\u043d\u043e\u0432",
          "line_range": [
            147,
            185
          ],
          "parameters": [],
          "decorators": [],
          "uid": "llmstruct.modules.commands.metrics.metrics_tokens",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.commands",
            "llmstruct.modules.commands.metrics",
            "llmstruct.modules.commands.metrics.metrics_tokens"
          ],
          "uid_type": "function"
        },
        {
          "name": "cmd_metrics",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0430\u043c\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            187,
            205
          ],
          "parameters": [
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.commands.metrics.cmd_metrics",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.commands",
            "llmstruct.modules.commands.metrics",
            "llmstruct.modules.commands.metrics.cmd_metrics"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [],
      "callgraph": {
        "metrics_status": [
          "tracker.get_session_summary",
          "print",
          "get_metrics_tracker"
        ],
        "metrics_summary": [
          "tracker.get_session_summary",
          "print",
          "get_metrics_tracker",
          "max"
        ],
        "metrics_analytics": [
          "csv.writer",
          "tracker.get_session_summary",
          "print",
          "open",
          "get_metrics_tracker",
          "enumerate",
          "json.dump",
          "json.dumps",
          "writer.writerow",
          "time.strftime",
          "tracker.get_analytics_data"
        ],
        "metrics_report": [
          "analytics.get",
          "len",
          "min",
          "print",
          "f.write",
          "open",
          "get_metrics_tracker",
          "sum",
          "time.strftime",
          "tracker.get_analytics_data"
        ],
        "metrics_track": [
          "print",
          "track_workflow_event"
        ],
        "metrics_tokens": [
          "print",
          "summary.get",
          "get_metrics_tracker",
          "interaction.get",
          "enumerate",
          "get_token_summary"
        ],
        "cmd_metrics": [
          "metrics_tokens",
          "metrics_track",
          "metrics_summary",
          "metrics_analytics",
          "print",
          "metrics_status",
          "metrics_report"
        ]
      },
      "dependencies": [
        "csv",
        "get_metrics_tracker",
        "get_token_summary",
        "json",
        "llmstruct.metrics_tracker",
        "time",
        "track_workflow_event"
      ],
      "hash": "f3cdbecb744fbdb29ca949fe874d201a44bc014625127b14d500e5828dc11e54",
      "uid": "llmstruct.modules.commands.metrics",
      "uid_components": [
        "llmstruct",
        "llmstruct.modules",
        "llmstruct.modules.commands",
        "llmstruct.modules.commands.metrics"
      ],
      "uid_type": "module",
      "artifact_id": "463aa85d-985a-29fe-37e6-4d742d7623e8",
      "metrics": {
        "cyclomatic_complexity": 7,
        "lines_of_code": 70,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 7,
        "test_coverage": 0.0,
        "maintainability_index": 65
      },
      "markdown_anchor": {
        "id": "llmstruct-modules-commands-metrics",
        "title": "Module: llmstruct.modules.commands.metrics",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.modules.commands.metrics](#llmstruct-modules-commands-metrics)",
        "html_anchor": "<a id=\"llmstruct-modules-commands-metrics\"></a>"
      }
    },
    {
      "module_id": "llmstruct.modules.commands.services",
      "path": "llmstruct/modules/commands/services.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "add_api_bot_commands",
          "docstring": "\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f API \u0438 Bot \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438",
          "line_range": [
            10,
            47
          ],
          "parameters": [
            "subparsers"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.commands.services.add_api_bot_commands",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.commands",
            "llmstruct.modules.commands.services",
            "llmstruct.modules.commands.services.add_api_bot_commands"
          ],
          "uid_type": "function"
        },
        {
          "name": "cmd_api_management",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 API \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c",
          "line_range": [
            49,
            111
          ],
          "parameters": [
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.commands.services.cmd_api_management",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.commands",
            "llmstruct.modules.commands.services",
            "llmstruct.modules.commands.services.cmd_api_management"
          ],
          "uid_type": "function"
        },
        {
          "name": "cmd_bot_management",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 Telegram \u0431\u043e\u0442\u0430\u043c\u0438",
          "line_range": [
            113,
            190
          ],
          "parameters": [
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.commands.services.cmd_bot_management",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.commands",
            "llmstruct.modules.commands.services",
            "llmstruct.modules.commands.services.cmd_bot_management"
          ],
          "uid_type": "function"
        },
        {
          "name": "cmd_services",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u043c\u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438 (API + Bots)",
          "line_range": [
            192,
            233
          ],
          "parameters": [
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.commands.services.cmd_services",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.commands",
            "llmstruct.modules.commands.services",
            "llmstruct.modules.commands.services.cmd_services"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [],
      "callgraph": {
        "add_api_bot_commands": [
          "bot_parser.add_subparsers",
          "api_start.add_argument",
          "bot_subparsers.add_parser",
          "api_parser.add_subparsers",
          "bot_start.add_argument",
          "services_subparsers.add_parser",
          "metrics_subparsers.add_parser",
          "api_subparsers.add_parser",
          "subparsers.add_parser",
          "metrics_track.add_argument",
          "metrics_report.add_argument",
          "metrics_parser.add_subparsers",
          "metrics_analytics.add_argument",
          "services_parser.add_subparsers"
        ],
        "cmd_api_management": [
          "requests.get",
          "requests.post",
          "data.get",
          "subprocess.Popen",
          "print",
          "response.json",
          "open",
          "process.terminate",
          "pid_file.unlink",
          "Path",
          "int",
          "f.read",
          "pid_file.exists",
          "str",
          "f.write",
          "venv_path.exists",
          "process.wait",
          "psutil.Process"
        ],
        "cmd_bot_management": [
          "process.is_running",
          "subprocess.Popen",
          "print",
          "open",
          "process.terminate",
          "pid_file.unlink",
          "Path",
          "int",
          "f.read",
          "os.getenv",
          "pid_file.exists",
          "active_bots.append",
          "str",
          "f.write",
          "bot_scripts.get",
          "process.wait",
          "psutil.Process"
        ],
        "cmd_services": [
          "type",
          "cmd_bot_management",
          "print",
          "cmd_api_management",
          "time.sleep"
        ]
      },
      "dependencies": [
        "Path",
        "os",
        "pathlib",
        "psutil",
        "requests",
        "signal",
        "subprocess",
        "time"
      ],
      "hash": "96ca731ade5a7043ea0459124cc364e27740657bccffde74544182d938e57d98",
      "uid": "llmstruct.modules.commands.services",
      "uid_components": [
        "llmstruct",
        "llmstruct.modules",
        "llmstruct.modules.commands",
        "llmstruct.modules.commands.services"
      ],
      "uid_type": "module",
      "artifact_id": "08f0b037-1139-fe8a-fb87-d5bbadac0985",
      "metrics": {
        "cyclomatic_complexity": 4,
        "lines_of_code": 40,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 8,
        "test_coverage": 0.0,
        "maintainability_index": 80
      },
      "markdown_anchor": {
        "id": "llmstruct-modules-commands-services",
        "title": "Module: llmstruct.modules.commands.services",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.modules.commands.services](#llmstruct-modules-commands-services)",
        "html_anchor": "<a id=\"llmstruct-modules-commands-services\"></a>"
      }
    },
    {
      "module_id": "llmstruct.modules.commands.__init__",
      "path": "llmstruct/modules/commands/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "36a9e7f1c95b82ffb99743e0c5c4ce95d83c9a430aac59f84ef3cbfab6145068",
      "uid": "llmstruct.modules.commands.__init__",
      "uid_components": [
        "llmstruct",
        "llmstruct.modules",
        "llmstruct.modules.commands",
        "llmstruct.modules.commands.__init__"
      ],
      "uid_type": "module",
      "artifact_id": "1cf803b0-44b1-c1f9-11ee-4c84fda5d6ef",
      "metrics": {
        "cyclomatic_complexity": 0,
        "lines_of_code": 0,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 0,
        "test_coverage": 0.0,
        "maintainability_index": 100
      },
      "markdown_anchor": {
        "id": "llmstruct-modules-commands-__init__",
        "title": "Module: llmstruct.modules.commands.__init__",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.modules.commands.__init__](#llmstruct-modules-commands-__init__)",
        "html_anchor": "<a id=\"llmstruct-modules-commands-__init__\"></a>"
      }
    },
    {
      "module_id": "llmstruct.modules.commands.queue",
      "path": "llmstruct/modules/commands/queue.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "process_cli_queue_enhanced",
          "docstring": "Enhanced queue processing with workflow support, performance tracking, and safety validation.",
          "line_range": [
            9,
            208
          ],
          "parameters": [
            "root_dir",
            "context_path",
            "args",
            "cache",
            "client"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.commands.queue.process_cli_queue_enhanced",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.commands",
            "llmstruct.modules.commands.queue",
            "llmstruct.modules.commands.queue.process_cli_queue_enhanced"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [],
      "callgraph": {
        "process_cli_queue_enhanced": [
          "workflow.get",
          "get_folder_structure",
          "load_gitignore",
          "len",
          "write_to_file",
          "print",
          "isinstance",
          "open",
          "time.time",
          "attach_to_llm_request",
          "logging.error",
          "json.load",
          "enumerate",
          "options.get",
          "client.query",
          "read_file_content",
          "item.get",
          "logging.info"
        ]
      },
      "dependencies": [
        "attach_to_llm_request",
        "get_folder_structure",
        "json",
        "llmstruct.generators.json_generator",
        "llmstruct.modules.cli.utils",
        "llmstruct.self_run",
        "load_gitignore",
        "logging",
        "os",
        "read_file_content",
        "time",
        "write_to_file"
      ],
      "hash": "93ea2acd1be91706282b474b0d3d20881d6894688201c8b0acd0ee1f7266b285",
      "uid": "llmstruct.modules.commands.queue",
      "uid_components": [
        "llmstruct",
        "llmstruct.modules",
        "llmstruct.modules.commands",
        "llmstruct.modules.commands.queue"
      ],
      "uid_type": "module",
      "artifact_id": "c4762ead-cbe1-3394-00c2-08956eaf56be",
      "metrics": {
        "cyclomatic_complexity": 1,
        "lines_of_code": 10,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 12,
        "test_coverage": 0.0,
        "maintainability_index": 95
      },
      "markdown_anchor": {
        "id": "llmstruct-modules-commands-queue",
        "title": "Module: llmstruct.modules.commands.queue",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.modules.commands.queue](#llmstruct-modules-commands-queue)",
        "html_anchor": "<a id=\"llmstruct-modules-commands-queue\"></a>"
      }
    },
    {
      "module_id": "llmstruct.modules.cli.audit",
      "path": "llmstruct/modules/cli/audit.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "audit",
          "docstring": "Audit project structure and generate reports.",
          "line_range": [
            4,
            17
          ],
          "parameters": [
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.audit.audit",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.audit",
            "llmstruct.modules.cli.audit.audit"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [],
      "callgraph": {
        "audit": [
          "analyze_duplicates",
          "hasattr",
          "print",
          "Path",
          "file_path.exists"
        ]
      },
      "dependencies": [
        "Path",
        "analyze_duplicates",
        "llmstruct.cli",
        "os",
        "pathlib"
      ],
      "hash": "2db7989b347f40218b0105a07e15164e4fa869ecf87fe977e929a36ad7b90179",
      "uid": "llmstruct.modules.cli.audit",
      "uid_components": [
        "llmstruct",
        "llmstruct.modules",
        "llmstruct.modules.cli",
        "llmstruct.modules.cli.audit"
      ],
      "uid_type": "module",
      "artifact_id": "bbb4f90b-4509-4ed8-3c67-e1ee4a7256ac",
      "metrics": {
        "cyclomatic_complexity": 1,
        "lines_of_code": 10,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 5,
        "test_coverage": 0.0,
        "maintainability_index": 95
      },
      "markdown_anchor": {
        "id": "llmstruct-modules-cli-audit",
        "title": "Module: llmstruct.modules.cli.audit",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.modules.cli.audit](#llmstruct-modules-cli-audit)",
        "html_anchor": "<a id=\"llmstruct-modules-cli-audit\"></a>"
      }
    },
    {
      "module_id": "llmstruct.modules.cli.utils",
      "path": "llmstruct/modules/cli/utils.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": [
            6,
            20
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.utils.load_gitignore",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.utils",
            "llmstruct.modules.cli.utils.load_gitignore"
          ],
          "uid_type": "function"
        },
        {
          "name": "load_config",
          "docstring": "Load settings from llmstruct.toml or return empty dict.",
          "line_range": [
            22,
            32
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.utils.load_config",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.utils",
            "llmstruct.modules.cli.utils.load_config"
          ],
          "uid_type": "function"
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": [
            34,
            43
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.utils.read_file_content",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.utils",
            "llmstruct.modules.cli.utils.read_file_content"
          ],
          "uid_type": "function"
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default ./tmp) and return the path.",
          "line_range": [
            45,
            63
          ],
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.utils.write_to_file",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.utils",
            "llmstruct.modules.cli.utils.write_to_file"
          ],
          "uid_type": "function"
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": [
            65,
            72
          ],
          "parameters": [
            "response"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.utils.parse_files_from_response",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.utils",
            "llmstruct.modules.cli.utils.parse_files_from_response"
          ],
          "uid_type": "function"
        },
        {
          "name": "get_cache_config",
          "docstring": "",
          "line_range": [
            74,
            75
          ],
          "parameters": [
            "config"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.utils.get_cache_config",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.utils",
            "llmstruct.modules.cli.utils.get_cache_config"
          ],
          "uid_type": "function"
        },
        {
          "name": "get_copilot_config",
          "docstring": "",
          "line_range": [
            77,
            78
          ],
          "parameters": [
            "config"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.utils.get_copilot_config",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.utils",
            "llmstruct.modules.cli.utils.get_copilot_config"
          ],
          "uid_type": "function"
        },
        {
          "name": "get_queue_config",
          "docstring": "",
          "line_range": [
            80,
            81
          ],
          "parameters": [
            "config"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.utils.get_queue_config",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.utils",
            "llmstruct.modules.cli.utils.get_queue_config"
          ],
          "uid_type": "function"
        },
        {
          "name": "get_context_config",
          "docstring": "",
          "line_range": [
            83,
            84
          ],
          "parameters": [
            "config"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.utils.get_context_config",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.utils",
            "llmstruct.modules.cli.utils.get_context_config"
          ],
          "uid_type": "function"
        },
        {
          "name": "get_exclude_dirs",
          "docstring": "",
          "line_range": [
            86,
            93
          ],
          "parameters": [
            "config"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.utils.get_exclude_dirs",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.utils",
            "llmstruct.modules.cli.utils.get_exclude_dirs"
          ],
          "uid_type": "function"
        },
        {
          "name": "get_include_patterns",
          "docstring": "",
          "line_range": [
            95,
            98
          ],
          "parameters": [
            "config"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.utils.get_include_patterns",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.utils",
            "llmstruct.modules.cli.utils.get_include_patterns"
          ],
          "uid_type": "function"
        },
        {
          "name": "get_exclude_patterns",
          "docstring": "",
          "line_range": [
            100,
            103
          ],
          "parameters": [
            "config"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.utils.get_exclude_patterns",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.utils",
            "llmstruct.modules.cli.utils.get_exclude_patterns"
          ],
          "uid_type": "function"
        },
        {
          "name": "get_max_file_size",
          "docstring": "",
          "line_range": [
            105,
            106
          ],
          "parameters": [
            "config"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.utils.get_max_file_size",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.utils",
            "llmstruct.modules.cli.utils.get_max_file_size"
          ],
          "uid_type": "function"
        },
        {
          "name": "get_struct_file_path",
          "docstring": "",
          "line_range": [
            108,
            109
          ],
          "parameters": [
            "config"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.utils.get_struct_file_path",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.utils",
            "llmstruct.modules.cli.utils.get_struct_file_path"
          ],
          "uid_type": "function"
        },
        {
          "name": "get_context_file_path",
          "docstring": "",
          "line_range": [
            111,
            112
          ],
          "parameters": [
            "config"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.utils.get_context_file_path",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.utils",
            "llmstruct.modules.cli.utils.get_context_file_path"
          ],
          "uid_type": "function"
        },
        {
          "name": "save_config",
          "docstring": "",
          "line_range": [
            114,
            121
          ],
          "parameters": [
            "config",
            "root_dir"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.utils.save_config",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.utils",
            "llmstruct.modules.cli.utils.save_config"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "line.startswith",
          "Path",
          "logging.error",
          "gitignore_path.exists",
          "line.strip",
          "gitignore_path.open"
        ],
        "load_config": [
          "toml.load",
          "config_path.open",
          "Path",
          "logging.error",
          "config_path.exists"
        ],
        "read_file_content": [
          "path.open",
          "Path",
          "logging.error",
          "path.is_file",
          "f.read"
        ],
        "write_to_file": [
          "logging.warning",
          "Path",
          "file_path.exists",
          "re.sub",
          "logging.error",
          "file_path.open",
          "str",
          "f.write",
          "base_path.mkdir",
          "logging.info"
        ],
        "parse_files_from_response": [
          "files.append",
          "filename.strip",
          "re.findall",
          "content.strip"
        ],
        "get_cache_config": [
          "config.get"
        ],
        "get_copilot_config": [
          "config.get"
        ],
        "get_queue_config": [
          "config.get"
        ],
        "get_context_config": [
          "config.get"
        ],
        "get_exclude_dirs": [
          "parsing_config.get",
          "config.get",
          "cli_config.get",
          "list",
          "set"
        ],
        "get_include_patterns": [
          "cli_config.get",
          "parsing_config.get",
          "config.get"
        ],
        "get_exclude_patterns": [
          "cli_config.get",
          "parsing_config.get",
          "config.get"
        ],
        "get_max_file_size": [
          "config.get"
        ],
        "get_struct_file_path": [
          "config.get"
        ],
        "get_context_file_path": [
          "config.get"
        ],
        "save_config": [
          "logging.error",
          "config_path.open",
          "toml.dump",
          "Path"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "logging",
        "pathlib",
        "re",
        "toml",
        "typing"
      ],
      "hash": "3f9f61b289dbdcbe85ccc89e60dd4e6a5a9a2cc31194ab9d0d8fe613fac51924",
      "uid": "llmstruct.modules.cli.utils",
      "uid_components": [
        "llmstruct",
        "llmstruct.modules",
        "llmstruct.modules.cli",
        "llmstruct.modules.cli.utils"
      ],
      "uid_type": "module",
      "artifact_id": "328789c7-10e4-87cc-a020-50e033777aab",
      "metrics": {
        "cyclomatic_complexity": 16,
        "lines_of_code": 160,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 8,
        "test_coverage": 0.0,
        "maintainability_index": 20
      },
      "markdown_anchor": {
        "id": "llmstruct-modules-cli-utils",
        "title": "Module: llmstruct.modules.cli.utils",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.modules.cli.utils](#llmstruct-modules-cli-utils)",
        "html_anchor": "<a id=\"llmstruct-modules-cli-utils\"></a>"
      }
    },
    {
      "module_id": "llmstruct.modules.cli.dogfood",
      "path": "llmstruct/modules/cli/dogfood.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": [
            3,
            5
          ],
          "parameters": [
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.dogfood.dogfood",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.dogfood",
            "llmstruct.modules.cli.dogfood.dogfood"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [],
      "callgraph": {
        "dogfood": [
          "logging.warning"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": "18989e9381a3f9872468dfd93602c7b12cbe7cb740a402dda2711c7c98bb3a98",
      "uid": "llmstruct.modules.cli.dogfood",
      "uid_components": [
        "llmstruct",
        "llmstruct.modules",
        "llmstruct.modules.cli",
        "llmstruct.modules.cli.dogfood"
      ],
      "uid_type": "module",
      "artifact_id": "a5b7abca-754f-ba39-2f95-998c6828fb41",
      "metrics": {
        "cyclomatic_complexity": 1,
        "lines_of_code": 10,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 1,
        "test_coverage": 0.0,
        "maintainability_index": 95
      },
      "markdown_anchor": {
        "id": "llmstruct-modules-cli-dogfood",
        "title": "Module: llmstruct.modules.cli.dogfood",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.modules.cli.dogfood](#llmstruct-modules-cli-dogfood)",
        "html_anchor": "<a id=\"llmstruct-modules-cli-dogfood\"></a>"
      }
    },
    {
      "module_id": "llmstruct.modules.cli.handlers_legacy",
      "path": "llmstruct/modules/cli/handlers_legacy.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "interactive_legacy",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": [
            14,
            149
          ],
          "parameters": [
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.handlers_legacy.interactive_legacy",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.handlers_legacy",
            "llmstruct.modules.cli.handlers_legacy.interactive_legacy"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [],
      "callgraph": {
        "interactive_legacy": [
          "get_folder_structure",
          "load_gitignore",
          "cache.close",
          "user_input.startswith",
          "os.listdir",
          "m.group",
          "sorted",
          "JSONCache",
          "parse",
          "print",
          "re.match",
          "client.query",
          "args_str.strip",
          "read_file_content",
          "input",
          "user_input.lower",
          "logging.warning",
          "json.dumps",
          "write_to_file",
          "Path",
          "attach_to_llm_request",
          "logging.error",
          "LLMClient"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "Path",
        "attach_to_llm_request",
        "get_folder_structure",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.cli",
        "llmstruct.generators.json_generator",
        "llmstruct.modules.cli.utils",
        "llmstruct.self_run",
        "load_gitignore",
        "logging",
        "os",
        "parse",
        "pathlib",
        "re",
        "read_file_content",
        "time",
        "write_to_file"
      ],
      "hash": "3676e871a4d165bc1a661bc3791663f9127c614086610286e69f1ddb1674c68e",
      "uid": "llmstruct.modules.cli.handlers_legacy",
      "uid_components": [
        "llmstruct",
        "llmstruct.modules",
        "llmstruct.modules.cli",
        "llmstruct.modules.cli.handlers_legacy"
      ],
      "uid_type": "module",
      "artifact_id": "29c289c7-9793-1c8e-cf8b-e87a49081fca",
      "metrics": {
        "cyclomatic_complexity": 1,
        "lines_of_code": 10,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 21,
        "test_coverage": 0.0,
        "maintainability_index": 95
      },
      "markdown_anchor": {
        "id": "llmstruct-modules-cli-handlers_legacy",
        "title": "Module: llmstruct.modules.cli.handlers_legacy",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.modules.cli.handlers_legacy](#llmstruct-modules-cli-handlers_legacy)",
        "html_anchor": "<a id=\"llmstruct-modules-cli-handlers_legacy\"></a>"
      }
    },
    {
      "module_id": "llmstruct.modules.cli.analyze_duplicates",
      "path": "llmstruct/modules/cli/analyze_duplicates.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "analyze_duplicates",
          "docstring": "Analyze function duplication using struct.json deep analysis.",
          "line_range": [
            1,
            81
          ],
          "parameters": [
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.analyze_duplicates.analyze_duplicates",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.analyze_duplicates",
            "llmstruct.modules.cli.analyze_duplicates.analyze_duplicates"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [],
      "callgraph": {
        "analyze_duplicates": [
          "r.get",
          "duplicates.items",
          "hasattr",
          "orchestrator.analyze_codebase_for_duplicates",
          "len",
          "rec.get",
          "print",
          "open",
          "getattr",
          "analysis.get",
          "duplication_data.get",
          "json.dumps",
          "enumerate",
          "sorted",
          "json.dump",
          "WorkflowOrchestrator",
          "traceback.print_exc",
          "filtered_duplicates.items"
        ]
      },
      "dependencies": [
        "WorkflowOrchestrator",
        "json",
        "llmstruct.workflow_orchestrator",
        "traceback"
      ],
      "hash": "d9c98a76c4920b3bfe62a812811aa9edf7158fa6d307eecd1235c4a2d93f146c",
      "uid": "llmstruct.modules.cli.analyze_duplicates",
      "uid_components": [
        "llmstruct",
        "llmstruct.modules",
        "llmstruct.modules.cli",
        "llmstruct.modules.cli.analyze_duplicates"
      ],
      "uid_type": "module",
      "artifact_id": "fd9087ce-6a48-0597-b358-d806c3a97e86",
      "metrics": {
        "cyclomatic_complexity": 1,
        "lines_of_code": 10,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 4,
        "test_coverage": 0.0,
        "maintainability_index": 95
      },
      "markdown_anchor": {
        "id": "llmstruct-modules-cli-analyze_duplicates",
        "title": "Module: llmstruct.modules.cli.analyze_duplicates",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.modules.cli.analyze_duplicates](#llmstruct-modules-cli-analyze_duplicates)",
        "html_anchor": "<a id=\"llmstruct-modules-cli-analyze_duplicates\"></a>"
      }
    },
    {
      "module_id": "llmstruct.modules.cli.__init__",
      "path": "llmstruct/modules/cli/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "36a9e7f1c95b82ffb99743e0c5c4ce95d83c9a430aac59f84ef3cbfab6145068",
      "uid": "llmstruct.modules.cli.__init__",
      "uid_components": [
        "llmstruct",
        "llmstruct.modules",
        "llmstruct.modules.cli",
        "llmstruct.modules.cli.__init__"
      ],
      "uid_type": "module",
      "artifact_id": "2c1279c6-0229-ae79-6051-352666fdfafb",
      "metrics": {
        "cyclomatic_complexity": 0,
        "lines_of_code": 0,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 0,
        "test_coverage": 0.0,
        "maintainability_index": 100
      },
      "markdown_anchor": {
        "id": "llmstruct-modules-cli-__init__",
        "title": "Module: llmstruct.modules.cli.__init__",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.modules.cli.__init__](#llmstruct-modules-cli-__init__)",
        "html_anchor": "<a id=\"llmstruct-modules-cli-__init__\"></a>"
      }
    },
    {
      "module_id": "llmstruct.modules.cli.review",
      "path": "llmstruct/modules/cli/review.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": [
            3,
            5
          ],
          "parameters": [
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.review.review",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.review",
            "llmstruct.modules.cli.review.review"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [],
      "callgraph": {
        "review": [
          "logging.warning"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": "1065196bb1074e1f669c0973da53285a04a2ab62d7462e97dfed418488d4a451",
      "uid": "llmstruct.modules.cli.review",
      "uid_components": [
        "llmstruct",
        "llmstruct.modules",
        "llmstruct.modules.cli",
        "llmstruct.modules.cli.review"
      ],
      "uid_type": "module",
      "artifact_id": "da5616e9-ece9-95b1-79c1-1aad6c8387ff",
      "metrics": {
        "cyclomatic_complexity": 1,
        "lines_of_code": 10,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 1,
        "test_coverage": 0.0,
        "maintainability_index": 95
      },
      "markdown_anchor": {
        "id": "llmstruct-modules-cli-review",
        "title": "Module: llmstruct.modules.cli.review",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.modules.cli.review](#llmstruct-modules-cli-review)",
        "html_anchor": "<a id=\"llmstruct-modules-cli-review\"></a>"
      }
    },
    {
      "module_id": "llmstruct.modules.cli.context",
      "path": "llmstruct/modules/cli/context.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": [
            3,
            5
          ],
          "parameters": [
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.context.context",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.context",
            "llmstruct.modules.cli.context.context"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [],
      "callgraph": {
        "context": [
          "logging.warning"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": "2eaa01d2531e7fab1705f319c2b166013a6c19186010ee7b126e5e8396dd4699",
      "uid": "llmstruct.modules.cli.context",
      "uid_components": [
        "llmstruct",
        "llmstruct.modules",
        "llmstruct.modules.cli",
        "llmstruct.modules.cli.context"
      ],
      "uid_type": "module",
      "artifact_id": "1f6c2194-26a3-2ec5-42db-ec7df66ae94a",
      "metrics": {
        "cyclomatic_complexity": 1,
        "lines_of_code": 10,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 1,
        "test_coverage": 0.0,
        "maintainability_index": 95
      },
      "markdown_anchor": {
        "id": "llmstruct-modules-cli-context",
        "title": "Module: llmstruct.modules.cli.context",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.modules.cli.context](#llmstruct-modules-cli-context)",
        "html_anchor": "<a id=\"llmstruct-modules-cli-context\"></a>"
      }
    },
    {
      "module_id": "llmstruct.modules.cli.query",
      "path": "llmstruct/modules/cli/query.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": [
            8,
            64
          ],
          "parameters": [
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.query.query",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.query",
            "llmstruct.modules.cli.query.query"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [],
      "callgraph": {
        "query": [
          "hasattr",
          "client.query_with_context",
          "cache.close",
          "logging.warning",
          "Path",
          "client.query",
          "logging.error",
          "json.dump",
          "LLMClient",
          "JSONCache",
          "create_context_orchestrator",
          "logging.info",
          "orchestrator.get_context_for_scenario"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "Path",
        "create_context_orchestrator",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.context_orchestrator",
        "logging",
        "os",
        "pathlib"
      ],
      "hash": "aebf4b74c71a6845676877cbd60f5530d3afab38fa6ccec41c114e158cb0f614",
      "uid": "llmstruct.modules.cli.query",
      "uid_components": [
        "llmstruct",
        "llmstruct.modules",
        "llmstruct.modules.cli",
        "llmstruct.modules.cli.query"
      ],
      "uid_type": "module",
      "artifact_id": "ecb3fbad-0e9c-08e7-1377-c16c6804cab9",
      "metrics": {
        "cyclomatic_complexity": 1,
        "lines_of_code": 10,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 11,
        "test_coverage": 0.0,
        "maintainability_index": 95
      },
      "markdown_anchor": {
        "id": "llmstruct-modules-cli-query",
        "title": "Module: llmstruct.modules.cli.query",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.modules.cli.query](#llmstruct-modules-cli-query)",
        "html_anchor": "<a id=\"llmstruct-modules-cli-query\"></a>"
      }
    },
    {
      "module_id": "llmstruct.modules.cli.copilot",
      "path": "llmstruct/modules/cli/copilot.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "copilot",
          "docstring": "Copilot integration and context management.",
          "line_range": [
            5,
            113
          ],
          "parameters": [
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.copilot.copilot",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.copilot",
            "llmstruct.modules.cli.copilot.copilot"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [],
      "callgraph": {
        "copilot": [
          "hasattr",
          "open",
          "manager.load_context_layer",
          "manager.validate_change",
          "initialize_copilot",
          "manager.close",
          "print",
          "manager.export_context",
          "getattr",
          "shutil.copy",
          "config_path.exists",
          "enumerate",
          "manager.get_context_status",
          "smart_suggest",
          "manager.refresh_all_contexts",
          "template_path.exists",
          "Path",
          "manager.unload_context_layer",
          "logging.error",
          "layers.split",
          "f.write",
          "logging.info"
        ]
      },
      "dependencies": [
        "Path",
        "initialize_copilot",
        "llmstruct.copilot",
        "logging",
        "pathlib",
        "shutil",
        "smart_suggest"
      ],
      "hash": "7bc44c139d0fb9c7f3ae37544ef763d68cc55e4220c2e89d73d766801541f947",
      "uid": "llmstruct.modules.cli.copilot",
      "uid_components": [
        "llmstruct",
        "llmstruct.modules",
        "llmstruct.modules.cli",
        "llmstruct.modules.cli.copilot"
      ],
      "uid_type": "module",
      "artifact_id": "fd92badd-aa9a-f801-0952-301efabcabf3",
      "metrics": {
        "cyclomatic_complexity": 1,
        "lines_of_code": 10,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 7,
        "test_coverage": 0.0,
        "maintainability_index": 95
      },
      "markdown_anchor": {
        "id": "llmstruct-modules-cli-copilot",
        "title": "Module: llmstruct.modules.cli.copilot",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.modules.cli.copilot](#llmstruct-modules-cli-copilot)",
        "html_anchor": "<a id=\"llmstruct-modules-cli-copilot\"></a>"
      }
    },
    {
      "module_id": "llmstruct.modules.cli.parse",
      "path": "llmstruct/modules/cli/parse.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": [
            9,
            93
          ],
          "parameters": [
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.parse.parse",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.parse",
            "llmstruct.modules.cli.parse.parse"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [],
      "callgraph": {
        "parse": [
          "cache.close",
          "struct_path.open",
          "json.dump",
          "JSONCache",
          "cache.cache_json",
          "struct_data.get",
          "parsing_config.get",
          "config.get",
          "module.get",
          "getattr",
          "mod_dir.mkdir",
          "load_config",
          "logging.warning",
          "ast_path.open",
          "func.get",
          "generate_json",
          "cli_config.get",
          "Path",
          "logging.error",
          "logging.info"
        ]
      },
      "dependencies": [
        "JSONCache",
        "Path",
        "generate_json",
        "json",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.modules.cli.utils",
        "load_config",
        "logging",
        "os",
        "pathlib"
      ],
      "hash": "966276e0c717ac3bf78502224305e23e2ac9b49547bbbf13bb37c83cb85d8b9c",
      "uid": "llmstruct.modules.cli.parse",
      "uid_components": [
        "llmstruct",
        "llmstruct.modules",
        "llmstruct.modules.cli",
        "llmstruct.modules.cli.parse"
      ],
      "uid_type": "module",
      "artifact_id": "99242e67-f039-b360-51d2-e61cd9f73453",
      "metrics": {
        "cyclomatic_complexity": 1,
        "lines_of_code": 10,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 11,
        "test_coverage": 0.0,
        "maintainability_index": 95
      },
      "markdown_anchor": {
        "id": "llmstruct-modules-cli-parse",
        "title": "Module: llmstruct.modules.cli.parse",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.modules.cli.parse](#llmstruct-modules-cli-parse)",
        "html_anchor": "<a id=\"llmstruct-modules-cli-parse\"></a>"
      }
    },
    {
      "module_id": "llmstruct.modules.cli.epic",
      "path": "llmstruct/modules/cli/epic.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "load_json",
          "docstring": "",
          "line_range": [
            5,
            7
          ],
          "parameters": [
            "path"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.epic.load_json",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.epic",
            "llmstruct.modules.cli.epic.load_json"
          ],
          "uid_type": "function"
        },
        {
          "name": "show_links",
          "docstring": "",
          "line_range": [
            9,
            57
          ],
          "parameters": [
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.epic.show_links",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.epic",
            "llmstruct.modules.cli.epic.show_links"
          ],
          "uid_type": "function"
        },
        {
          "name": "add_epic_cli_subparser",
          "docstring": "",
          "line_range": [
            59,
            67
          ],
          "parameters": [
            "subparsers"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.epic.add_epic_cli_subparser",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.epic",
            "llmstruct.modules.cli.epic.add_epic_cli_subparser"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json": [
          "json.load",
          "open"
        ],
        "show_links": [
          "data.get",
          "results.items",
          "print",
          "epic.get",
          "Path",
          "t.upper",
          "json.dumps",
          "epic_path.exists",
          "load_json",
          "status_filter.lower",
          "link_map.items",
          "str",
          "item.get"
        ],
        "add_epic_cli_subparser": [
          "show_links_parser.set_defaults",
          "epic_sub.add_parser",
          "subparsers.add_parser",
          "epic_parser.add_subparsers",
          "show_links_parser.add_argument"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "json",
        "pathlib"
      ],
      "hash": "7a96cb38d4cc07f413b5da974e0eb6c461a8ce1c76f96f808c8a4414a7eb1b30",
      "uid": "llmstruct.modules.cli.epic",
      "uid_components": [
        "llmstruct",
        "llmstruct.modules",
        "llmstruct.modules.cli",
        "llmstruct.modules.cli.epic"
      ],
      "uid_type": "module",
      "artifact_id": "9cfb70b7-5ec4-27ed-a6c3-676bf20e7198",
      "metrics": {
        "cyclomatic_complexity": 3,
        "lines_of_code": 30,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 4,
        "test_coverage": 0.0,
        "maintainability_index": 85
      },
      "markdown_anchor": {
        "id": "llmstruct-modules-cli-epic",
        "title": "Module: llmstruct.modules.cli.epic",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.modules.cli.epic](#llmstruct-modules-cli-epic)",
        "html_anchor": "<a id=\"llmstruct-modules-cli-epic\"></a>"
      }
    },
    {
      "module_id": "llmstruct.modules.cli.handlers",
      "path": "llmstruct/modules/cli/handlers.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with modular structure if available, fallback to legacy.",
          "line_range": [
            14,
            21
          ],
          "parameters": [
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.handlers.interactive",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.handlers",
            "llmstruct.modules.cli.handlers.interactive"
          ],
          "uid_type": "function"
        },
        {
          "name": "interactive_modular",
          "docstring": "Run interactive CLI with modular structure.",
          "line_range": [
            23,
            32
          ],
          "parameters": [
            "args"
          ],
          "decorators": [],
          "uid": "llmstruct.modules.cli.handlers.interactive_modular",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.handlers",
            "llmstruct.modules.cli.handlers.interactive_modular"
          ],
          "uid_type": "function"
        }
      ],
      "classes": [],
      "callgraph": {
        "interactive": [
          "interactive_legacy",
          "interactive_modular",
          "logging.warning"
        ],
        "interactive_modular": [
          "create_cli_core",
          "hasattr",
          "logging.info",
          "cli_core.run_interactive_mode"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "Path",
        "attach_to_llm_request",
        "create_cli_core",
        "get_folder_structure",
        "interactive_legacy",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.cli_core",
        "llmstruct.generators.json_generator",
        "llmstruct.modules.cli.handlers_legacy",
        "llmstruct.modules.cli.utils",
        "llmstruct.self_run",
        "load_gitignore",
        "logging",
        "os",
        "pathlib",
        "re",
        "read_file_content",
        "time",
        "write_to_file"
      ],
      "hash": "51450e4006a43d948e918bd87e43874e584f08c569cdbe9f89aff58c9d6293a2",
      "uid": "llmstruct.modules.cli.handlers",
      "uid_components": [
        "llmstruct",
        "llmstruct.modules",
        "llmstruct.modules.cli",
        "llmstruct.modules.cli.handlers"
      ],
      "uid_type": "module",
      "artifact_id": "b84aefa9-910a-123a-8008-2fac20bfe643",
      "metrics": {
        "cyclomatic_complexity": 2,
        "lines_of_code": 20,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 23,
        "test_coverage": 0.0,
        "maintainability_index": 90
      },
      "markdown_anchor": {
        "id": "llmstruct-modules-cli-handlers",
        "title": "Module: llmstruct.modules.cli.handlers",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: llmstruct.modules.cli.handlers](#llmstruct-modules-cli-handlers)",
        "html_anchor": "<a id=\"llmstruct-modules-cli-handlers\"></a>"
      }
    },
    {
      "module_id": "scripts.team.__init__",
      "path": "scripts/team/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "uid": "scripts.team.__init__",
      "uid_components": [
        "scripts",
        "scripts.team",
        "scripts.team.__init__"
      ],
      "uid_type": "module",
      "artifact_id": "2c2ae172-96a2-2dc7-da90-41914347e1e8",
      "metrics": {
        "cyclomatic_complexity": 0,
        "lines_of_code": 0,
        "call_depth": 0,
        "parameter_count": 0,
        "dependencies_count": 0,
        "test_coverage": 0.0,
        "maintainability_index": 100
      },
      "markdown_anchor": {
        "id": "scripts-team-__init__",
        "title": "Module: scripts.team.__init__",
        "level": 2,
        "type": "module",
        "markdown_link": "[Module: scripts.team.__init__](#scripts-team-__init__)",
        "html_anchor": "<a id=\"scripts-team-__init__\"></a>"
      }
    }
  ],
  "hierarchy": {
    "llmstruct": {
      "modules": [
        {
          "module_id": "llmstruct.json_selector",
          "path": "llmstruct/json_selector.py",
          "category": "core",
          "module_doc": "",
          "functions": [
            {
              "name": "filter_json",
              "docstring": "Filter JSON data by key-value pair and select fields.",
              "line_range": [
                20,
                46
              ],
              "parameters": [
                "data",
                "filter_key",
                "filter_value",
                "fields"
              ],
              "decorators": [],
              "uid": "llmstruct.json_selector.filter_json",
              "uid_components": [
                "llmstruct",
                "llmstruct.json_selector",
                "llmstruct.json_selector.filter_json"
              ],
              "uid_type": "function"
            },
            {
              "name": "select_json",
              "docstring": "Load and filter JSON file, optionally parsing partially.",
              "line_range": [
                49,
                116
              ],
              "parameters": [
                "json_path",
                "filter_key",
                "filter_value",
                "fields",
                "partial"
              ],
              "decorators": [],
              "uid": "llmstruct.json_selector.select_json",
              "uid_components": [
                "llmstruct",
                "llmstruct.json_selector",
                "llmstruct.json_selector.select_json"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [],
          "callgraph": {
            "filter_json": [
              "filtered.append",
              "isinstance",
              "item.get",
              "data.get"
            ],
            "select_json": [
              "f.seek",
              "ijson.parse",
              "prefix.startswith",
              "open",
              "current_item.get",
              "Path",
              "logging.error",
              "json_file.exists",
              "json.load",
              "filter_json",
              "path.append",
              "filtered.append"
            ]
          },
          "dependencies": [
            "Any",
            "Dict",
            "List",
            "Optional",
            "Path",
            "argparse",
            "ijson",
            "json",
            "logging",
            "pathlib",
            "typing"
          ],
          "hash": "cc07b6d2cf42fd059429e43a0f8c985114c984ac92ba4ac6a618a8a7f8c588c2",
          "uid": "llmstruct.json_selector",
          "uid_components": [
            "llmstruct",
            "llmstruct.json_selector"
          ],
          "uid_type": "module",
          "artifact_id": "29ac6c3a-c38d-a4bc-4a9e-0c3f4972b60a",
          "metrics": {
            "cyclomatic_complexity": 2,
            "lines_of_code": 20,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 11,
            "test_coverage": 0.0,
            "maintainability_index": 90
          },
          "markdown_anchor": {
            "id": "llmstruct-json_selector",
            "title": "Module: llmstruct.json_selector",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.json_selector](#llmstruct-json_selector)",
            "html_anchor": "<a id=\"llmstruct-json_selector\"></a>"
          }
        },
        {
          "module_id": "llmstruct.__main__",
          "path": "llmstruct/__main__.py",
          "category": "cli",
          "module_doc": "",
          "functions": [],
          "classes": [],
          "callgraph": {},
          "dependencies": [
            "llmstruct.cli",
            "main"
          ],
          "hash": "de795cd58c2dc4122dd30b382c844a7c67fc36489e443b7d12170fa0e15994dc",
          "uid": "llmstruct.__main__",
          "uid_components": [
            "llmstruct",
            "llmstruct.__main__"
          ],
          "uid_type": "module",
          "artifact_id": "7134d95a-a456-ce18-72a8-d6984a7f122c",
          "metrics": {
            "cyclomatic_complexity": 0,
            "lines_of_code": 0,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 2,
            "test_coverage": 0.0,
            "maintainability_index": 100
          },
          "markdown_anchor": {
            "id": "llmstruct-__main__",
            "title": "Module: llmstruct.__main__",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.__main__](#llmstruct-__main__)",
            "html_anchor": "<a id=\"llmstruct-__main__\"></a>"
          }
        },
        {
          "module_id": "llmstruct.__init__",
          "path": "llmstruct/__init__.py",
          "category": "cli",
          "module_doc": "",
          "functions": [],
          "classes": [],
          "callgraph": {},
          "dependencies": [
            "AISelfAwarenessCLIIntegration",
            "LLMClient",
            "SystemCapabilityDiscovery",
            "ai_cli_integration",
            "ai_self_awareness",
            "llm_client"
          ],
          "hash": "2592d45bae33fe6628051f9ae5eb6dd5f13fee9588b428a512203df62a55a122",
          "uid": "llmstruct.__init__",
          "uid_components": [
            "llmstruct",
            "llmstruct.__init__"
          ],
          "uid_type": "module",
          "artifact_id": "dc463e5e-230a-f3d8-2cf2-0ec4c2d9604f",
          "metrics": {
            "cyclomatic_complexity": 0,
            "lines_of_code": 0,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 6,
            "test_coverage": 0.0,
            "maintainability_index": 100
          },
          "markdown_anchor": {
            "id": "llmstruct-__init__",
            "title": "Module: llmstruct.__init__",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.__init__](#llmstruct-__init__)",
            "html_anchor": "<a id=\"llmstruct-__init__\"></a>"
          }
        },
        {
          "module_id": "llmstruct.cache",
          "path": "llmstruct/cache.py",
          "category": "core",
          "module_doc": "",
          "functions": [
            {
              "name": "__init__",
              "docstring": "Initialize SQLite cache for JSON files.",
              "line_range": [
                21,
                25
              ],
              "parameters": [
                "self",
                "db_path"
              ],
              "decorators": [],
              "uid": "llmstruct.cache.__init__",
              "uid_components": [
                "llmstruct",
                "llmstruct.cache",
                "llmstruct.cache.__init__"
              ],
              "uid_type": "function"
            },
            {
              "name": "create_tables",
              "docstring": "Create tables for metadata and file paths.",
              "line_range": [
                27,
                49
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "llmstruct.cache.create_tables",
              "uid_components": [
                "llmstruct",
                "llmstruct.cache",
                "llmstruct.cache.create_tables"
              ],
              "uid_type": "function"
            },
            {
              "name": "cache_json",
              "docstring": "Cache JSON metadata and store full file path.",
              "line_range": [
                51,
                90
              ],
              "parameters": [
                "self",
                "json_path",
                "artifact_id",
                "summary",
                "tags"
              ],
              "decorators": [],
              "uid": "llmstruct.cache.cache_json",
              "uid_components": [
                "llmstruct",
                "llmstruct.cache",
                "llmstruct.cache.cache_json"
              ],
              "uid_type": "function"
            },
            {
              "name": "get_metadata",
              "docstring": "Retrieve metadata by artifact_id.",
              "line_range": [
                92,
                108
              ],
              "parameters": [
                "self",
                "artifact_id"
              ],
              "decorators": [],
              "uid": "llmstruct.cache.get_metadata",
              "uid_components": [
                "llmstruct",
                "llmstruct.cache",
                "llmstruct.cache.get_metadata"
              ],
              "uid_type": "function"
            },
            {
              "name": "get_full_json",
              "docstring": "Load full JSON by artifact_id.",
              "line_range": [
                110,
                126
              ],
              "parameters": [
                "self",
                "artifact_id"
              ],
              "decorators": [],
              "uid": "llmstruct.cache.get_full_json",
              "uid_components": [
                "llmstruct",
                "llmstruct.cache",
                "llmstruct.cache.get_full_json"
              ],
              "uid_type": "function"
            },
            {
              "name": "close",
              "docstring": "Close database connection.",
              "line_range": [
                128,
                130
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "llmstruct.cache.close",
              "uid_components": [
                "llmstruct",
                "llmstruct.cache",
                "llmstruct.cache.close"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [
            {
              "name": "JSONCache",
              "docstring": "",
              "line_range": [
                20,
                130
              ],
              "methods": [
                {
                  "name": "__init__",
                  "docstring": "Initialize SQLite cache for JSON files.",
                  "line_range": [
                    21,
                    25
                  ],
                  "parameters": [
                    "self",
                    "db_path"
                  ],
                  "uid": "llmstruct.cache.JSONCache.__init__",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.cache",
                    "llmstruct.cache.JSONCache",
                    "llmstruct.cache.JSONCache.__init__"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "create_tables",
                  "docstring": "Create tables for metadata and file paths.",
                  "line_range": [
                    27,
                    49
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "llmstruct.cache.JSONCache.create_tables",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.cache",
                    "llmstruct.cache.JSONCache",
                    "llmstruct.cache.JSONCache.create_tables"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "cache_json",
                  "docstring": "Cache JSON metadata and store full file path.",
                  "line_range": [
                    51,
                    90
                  ],
                  "parameters": [
                    "self",
                    "json_path",
                    "artifact_id",
                    "summary",
                    "tags"
                  ],
                  "uid": "llmstruct.cache.JSONCache.cache_json",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.cache",
                    "llmstruct.cache.JSONCache",
                    "llmstruct.cache.JSONCache.cache_json"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "get_metadata",
                  "docstring": "Retrieve metadata by artifact_id.",
                  "line_range": [
                    92,
                    108
                  ],
                  "parameters": [
                    "self",
                    "artifact_id"
                  ],
                  "uid": "llmstruct.cache.JSONCache.get_metadata",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.cache",
                    "llmstruct.cache.JSONCache",
                    "llmstruct.cache.JSONCache.get_metadata"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "get_full_json",
                  "docstring": "Load full JSON by artifact_id.",
                  "line_range": [
                    110,
                    126
                  ],
                  "parameters": [
                    "self",
                    "artifact_id"
                  ],
                  "uid": "llmstruct.cache.JSONCache.get_full_json",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.cache",
                    "llmstruct.cache.JSONCache",
                    "llmstruct.cache.JSONCache.get_full_json"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "close",
                  "docstring": "Close database connection.",
                  "line_range": [
                    128,
                    130
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "llmstruct.cache.JSONCache.close",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.cache",
                    "llmstruct.cache.JSONCache",
                    "llmstruct.cache.JSONCache.close"
                  ],
                  "uid_type": "method"
                }
              ],
              "bases": [],
              "uid": "llmstruct.cache.JSONCache",
              "uid_components": [
                "llmstruct",
                "llmstruct.cache",
                "llmstruct.cache.JSONCache"
              ],
              "uid_type": "class"
            }
          ],
          "callgraph": {
            "__init__": [
              "self.create_tables",
              "sqlite3.connect"
            ],
            "create_tables": [],
            "cache_json": [
              "hashlib.sha256",
              "open",
              "Path",
              "logging.error",
              "json_file.exists",
              "json.dumps",
              "f.read",
              "content.encode",
              "str",
              "logging.info"
            ],
            "get_metadata": [
              "json.loads",
              "cursor.fetchone"
            ],
            "get_full_json": [
              "json.load",
              "cursor.fetchone",
              "open",
              "logging.error"
            ],
            "close": []
          },
          "dependencies": [
            "Any",
            "Dict",
            "List",
            "Optional",
            "Path",
            "hashlib",
            "json",
            "logging",
            "pathlib",
            "sqlite3",
            "typing"
          ],
          "hash": "10a85d5ffece6af208cff17665640aeca3a1c44397e0b6da50f6a50fa53ae42f",
          "uid": "llmstruct.cache",
          "uid_components": [
            "llmstruct",
            "llmstruct.cache"
          ],
          "uid_type": "module",
          "artifact_id": "a8002cd9-7403-8018-bca3-4860dc286f19",
          "metrics": {
            "cyclomatic_complexity": 8,
            "lines_of_code": 60,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 11,
            "test_coverage": 0.0,
            "maintainability_index": 60
          },
          "markdown_anchor": {
            "id": "llmstruct-cache",
            "title": "Module: llmstruct.cache",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.cache](#llmstruct-cache)",
            "html_anchor": "<a id=\"llmstruct-cache\"></a>"
          }
        },
        {
          "module_id": "llmstruct.self_run",
          "path": "llmstruct/self_run.py",
          "category": "core",
          "module_doc": "",
          "functions": [
            {
              "name": "filter_struct",
              "docstring": "Filter struct.json or init.json based on prompt keywords. Supports dict or list as root.",
              "line_range": [
                22,
                73
              ],
              "parameters": [
                "struct",
                "prompt"
              ],
              "decorators": [],
              "uid": "llmstruct.self_run.filter_struct",
              "uid_components": [
                "llmstruct",
                "llmstruct.self_run",
                "llmstruct.self_run.filter_struct"
              ],
              "uid_type": "function"
            },
            {
              "name": "attach_to_llm_request",
              "docstring": "Attach filtered JSON to LLM prompt, using cache if available.",
              "line_range": [
                76,
                116
              ],
              "parameters": [
                "context_path",
                "prompt",
                "cache"
              ],
              "decorators": [],
              "uid": "llmstruct.self_run.attach_to_llm_request",
              "uid_components": [
                "llmstruct",
                "llmstruct.self_run",
                "llmstruct.self_run.attach_to_llm_request"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [],
          "callgraph": {
            "filter_struct": [
              "struct.get",
              "isinstance",
              "module.get",
              "filter_json",
              "str",
              "item.get",
              "any",
              "prompt.lower"
            ],
            "attach_to_llm_request": [
              "cache.get_metadata",
              "cache.get_full_json",
              "context_file.exists",
              "Path",
              "select_json",
              "logging.error",
              "json.dumps",
              "filter_json",
              "filter_struct",
              "cache.cache_json",
              "logging.info",
              "prompt.lower"
            ]
          },
          "dependencies": [
            "Any",
            "JSONCache",
            "Optional",
            "Path",
            "cache",
            "filter_json",
            "json",
            "json_selector",
            "logging",
            "pathlib",
            "select_json",
            "typing"
          ],
          "hash": "4bab9318950f2b239e5d0e642500367d03d5136749df94b40bfea53b93d54917",
          "uid": "llmstruct.self_run",
          "uid_components": [
            "llmstruct",
            "llmstruct.self_run"
          ],
          "uid_type": "module",
          "artifact_id": "ab11dee2-8884-5709-18b0-b374571186b3",
          "metrics": {
            "cyclomatic_complexity": 2,
            "lines_of_code": 20,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 12,
            "test_coverage": 0.0,
            "maintainability_index": 90
          },
          "markdown_anchor": {
            "id": "llmstruct-self_run",
            "title": "Module: llmstruct.self_run",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.self_run](#llmstruct-self_run)",
            "html_anchor": "<a id=\"llmstruct-self_run\"></a>"
          }
        },
        {
          "module_id": "llmstruct.llm_client",
          "path": "llmstruct/llm_client.py",
          "category": "core",
          "module_doc": "",
          "functions": [
            {
              "name": "__init__",
              "docstring": "Initialize LLMClient with optional Ollama host.",
              "line_range": [
                28,
                36
              ],
              "parameters": [
                "self",
                "ollama_host"
              ],
              "decorators": [],
              "uid": "llmstruct.llm_client.__init__",
              "uid_components": [
                "llmstruct",
                "llmstruct.llm_client",
                "llmstruct.llm_client.__init__"
              ],
              "uid_type": "function"
            },
            {
              "name": "query",
              "docstring": "Query LLMs with prompt, context, and optional model.",
              "line_range": [
                38,
                86
              ],
              "parameters": [
                "self",
                "prompt",
                "context_path",
                "mode",
                "model",
                "artifact_ids"
              ],
              "decorators": [],
              "uid": "llmstruct.llm_client.query",
              "uid_components": [
                "llmstruct",
                "llmstruct.llm_client",
                "llmstruct.llm_client.query"
              ],
              "uid_type": "function"
            },
            {
              "name": "_query_grok",
              "docstring": "Query Grok API.",
              "line_range": [
                88,
                115
              ],
              "parameters": [
                "self",
                "prompt"
              ],
              "decorators": [],
              "uid": "llmstruct.llm_client._query_grok",
              "uid_components": [
                "llmstruct",
                "llmstruct.llm_client",
                "llmstruct.llm_client._query_grok"
              ],
              "uid_type": "function"
            },
            {
              "name": "_query_anthropic",
              "docstring": "Query Anthropic API.",
              "line_range": [
                117,
                141
              ],
              "parameters": [
                "self",
                "prompt"
              ],
              "decorators": [],
              "uid": "llmstruct.llm_client._query_anthropic",
              "uid_components": [
                "llmstruct",
                "llmstruct.llm_client",
                "llmstruct.llm_client._query_anthropic"
              ],
              "uid_type": "function"
            },
            {
              "name": "_query_ollama",
              "docstring": "Query Ollama API with specified model.",
              "line_range": [
                143,
                156
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ],
              "decorators": [],
              "uid": "llmstruct.llm_client._query_ollama",
              "uid_components": [
                "llmstruct",
                "llmstruct.llm_client",
                "llmstruct.llm_client._query_ollama"
              ],
              "uid_type": "function"
            },
            {
              "name": "_query_hybrid",
              "docstring": "Query multiple LLMs and combine results.",
              "line_range": [
                158,
                172
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ],
              "decorators": [],
              "uid": "llmstruct.llm_client._query_hybrid",
              "uid_components": [
                "llmstruct",
                "llmstruct.llm_client",
                "llmstruct.llm_client._query_hybrid"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [
            {
              "name": "LLMClient",
              "docstring": "",
              "line_range": [
                27,
                172
              ],
              "methods": [
                {
                  "name": "__init__",
                  "docstring": "Initialize LLMClient with optional Ollama host.",
                  "line_range": [
                    28,
                    36
                  ],
                  "parameters": [
                    "self",
                    "ollama_host"
                  ],
                  "uid": "llmstruct.llm_client.LLMClient.__init__",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.llm_client",
                    "llmstruct.llm_client.LLMClient",
                    "llmstruct.llm_client.LLMClient.__init__"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "query",
                  "docstring": "Query LLMs with prompt, context, and optional model.",
                  "line_range": [
                    38,
                    86
                  ],
                  "parameters": [
                    "self",
                    "prompt",
                    "context_path",
                    "mode",
                    "model",
                    "artifact_ids"
                  ],
                  "uid": "llmstruct.llm_client.LLMClient.query",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.llm_client",
                    "llmstruct.llm_client.LLMClient",
                    "llmstruct.llm_client.LLMClient.query"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_query_grok",
                  "docstring": "Query Grok API.",
                  "line_range": [
                    88,
                    115
                  ],
                  "parameters": [
                    "self",
                    "prompt"
                  ],
                  "uid": "llmstruct.llm_client.LLMClient._query_grok",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.llm_client",
                    "llmstruct.llm_client.LLMClient",
                    "llmstruct.llm_client.LLMClient._query_grok"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_query_anthropic",
                  "docstring": "Query Anthropic API.",
                  "line_range": [
                    117,
                    141
                  ],
                  "parameters": [
                    "self",
                    "prompt"
                  ],
                  "uid": "llmstruct.llm_client.LLMClient._query_anthropic",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.llm_client",
                    "llmstruct.llm_client.LLMClient",
                    "llmstruct.llm_client.LLMClient._query_anthropic"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_query_ollama",
                  "docstring": "Query Ollama API with specified model.",
                  "line_range": [
                    143,
                    156
                  ],
                  "parameters": [
                    "self",
                    "prompt",
                    "model"
                  ],
                  "uid": "llmstruct.llm_client.LLMClient._query_ollama",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.llm_client",
                    "llmstruct.llm_client.LLMClient",
                    "llmstruct.llm_client.LLMClient._query_ollama"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_query_hybrid",
                  "docstring": "Query multiple LLMs and combine results.",
                  "line_range": [
                    158,
                    172
                  ],
                  "parameters": [
                    "self",
                    "prompt",
                    "model"
                  ],
                  "uid": "llmstruct.llm_client.LLMClient._query_hybrid",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.llm_client",
                    "llmstruct.llm_client.LLMClient",
                    "llmstruct.llm_client.LLMClient._query_hybrid"
                  ],
                  "uid_type": "method"
                }
              ],
              "bases": [],
              "uid": "llmstruct.llm_client.LLMClient",
              "uid_components": [
                "llmstruct",
                "llmstruct.llm_client",
                "llmstruct.llm_client.LLMClient"
              ],
              "uid_type": "class"
            }
          ],
          "callgraph": {
            "__init__": [
              "int",
              "logging.info",
              "os.getenv"
            ],
            "query": [
              "range",
              "logging.warning",
              "self._query_anthropic",
              "self._query_grok",
              "self._query_ollama",
              "Path",
              "self._query_hybrid",
              "logging.error",
              "json.load",
              "json.dumps",
              "asyncio.sleep",
              "logging.info"
            ],
            "_query_grok": [
              "response.json",
              "aiohttp.ClientSession",
              "session.post",
              "logging.error",
              "result.get",
              "logging.info"
            ],
            "_query_anthropic": [
              "response.json",
              "aiohttp.ClientSession",
              "session.post",
              "logging.error",
              "result.get",
              "logging.info"
            ],
            "_query_ollama": [
              "response.json",
              "aiohttp.ClientSession",
              "session.post",
              "logging.error",
              "result.get",
              "logging.info",
              "logging.debug"
            ],
            "_query_hybrid": [
              "len",
              "self._query_anthropic",
              "self._query_grok",
              "isinstance",
              "self._query_ollama",
              "asyncio.gather",
              "logging.info"
            ]
          },
          "dependencies": [
            "List",
            "Optional",
            "Path",
            "aiohttp",
            "asyncio",
            "dotenv",
            "json",
            "load_dotenv",
            "logging",
            "os",
            "pathlib",
            "typing"
          ],
          "hash": "c477d5e96f165fa96546ff8e2673db785cee146f6fffd0f424d21072431133ba",
          "uid": "llmstruct.llm_client",
          "uid_components": [
            "llmstruct",
            "llmstruct.llm_client"
          ],
          "uid_type": "module",
          "artifact_id": "2f939f0c-01ba-fe57-b74b-500aaab38e55",
          "metrics": {
            "cyclomatic_complexity": 8,
            "lines_of_code": 60,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 12,
            "test_coverage": 0.0,
            "maintainability_index": 60
          },
          "markdown_anchor": {
            "id": "llmstruct-llm_client",
            "title": "Module: llmstruct.llm_client",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.llm_client](#llmstruct-llm_client)",
            "html_anchor": "<a id=\"llmstruct-llm_client\"></a>"
          }
        },
        {
          "module_id": "llmstruct.cli",
          "path": "llmstruct/cli.py",
          "category": "core",
          "module_doc": "LLMStruct CLI - Main entry point for the command-line interface.",
          "functions": [
            {
              "name": "main",
              "docstring": "Command-line interface for LLMstruct.",
              "line_range": [
                55,
                318
              ],
              "parameters": [],
              "decorators": [],
              "uid": "llmstruct.cli.main",
              "uid_components": [
                "llmstruct",
                "llmstruct.cli",
                "llmstruct.cli.main"
              ],
              "uid_type": "function"
            },
            {
              "name": "normalize_patterns",
              "docstring": "",
              "line_range": [
                281,
                292
              ],
              "parameters": [
                "arglist"
              ],
              "decorators": [],
              "uid": "llmstruct.cli.normalize_patterns",
              "uid_components": [
                "llmstruct",
                "llmstruct.cli",
                "llmstruct.cli.normalize_patterns"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [],
          "callgraph": {
            "main": [
              "epic.add_epic_cli_subparser",
              "parser.add_subparsers",
              "argparse.ArgumentParser",
              "audit_parser.add_argument",
              "review_parser.add_argument",
              "duplicates_parser.add_argument",
              "query_parser.add_argument",
              "parser.parse_args",
              "dogfood_parser.add_argument",
              "subparsers.add_parser",
              "copilot_parser.add_argument",
              "parse_parser.add_argument",
              "context_parser.add_argument"
            ],
            "normalize_patterns": [
              "result.extend",
              "p.strip",
              "result.append",
              "item.split",
              "item.strip"
            ]
          },
          "dependencies": [
            "JSONCache",
            "LLMClient",
            "List",
            "Optional",
            "Path",
            "analyze_duplicates",
            "argparse",
            "asyncio",
            "attach_to_llm_request",
            "audit",
            "cli_core",
            "context",
            "copilot",
            "create_cli_core",
            "dogfood",
            "epic",
            "generate_json",
            "get_folder_structure",
            "initialize_copilot",
            "interactive",
            "interactive_legacy",
            "interactive_modular",
            "json",
            "llmstruct",
            "llmstruct.cache",
            "llmstruct.generators.json_generator",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.analyze_duplicates",
            "llmstruct.modules.cli.audit",
            "llmstruct.modules.cli.context",
            "llmstruct.modules.cli.copilot",
            "llmstruct.modules.cli.dogfood",
            "llmstruct.modules.cli.handlers",
            "llmstruct.modules.cli.parse",
            "llmstruct.modules.cli.query",
            "llmstruct.modules.cli.review",
            "llmstruct.modules.cli.utils",
            "llmstruct.modules.commands.queue",
            "llmstruct.self_run",
            "load_config",
            "load_gitignore",
            "logging",
            "os",
            "parse",
            "parse_files_from_response",
            "pathlib",
            "process_cli_queue_enhanced",
            "query",
            "re",
            "read_file_content",
            "review",
            "shutil",
            "sys",
            "time",
            "toml",
            "typing",
            "write_to_file"
          ],
          "hash": "0f1504317e34987adbd393567aa9bdaf5c356d1d6b9caa26781ccdb83ca3d0a3",
          "uid": "llmstruct.cli",
          "uid_components": [
            "llmstruct",
            "llmstruct.cli"
          ],
          "uid_type": "module",
          "artifact_id": "83dd4586-28f0-5a6c-cdec-c5c5d628f474",
          "metrics": {
            "cyclomatic_complexity": 2,
            "lines_of_code": 20,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 57,
            "test_coverage": 0.0,
            "maintainability_index": 90
          },
          "markdown_anchor": {
            "id": "llmstruct-cli",
            "title": "Module: llmstruct.cli",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.cli](#llmstruct-cli)",
            "html_anchor": "<a id=\"llmstruct-cli\"></a>"
          }
        }
      ],
      "templates": [
        {
          "module_id": "llmstruct.templates.__init__",
          "path": "llmstruct/templates/__init__.py",
          "category": "cli",
          "module_doc": "Templates for LLM prompts used in LLMStruct integration.",
          "functions": [],
          "classes": [],
          "callgraph": {},
          "dependencies": [],
          "hash": "2421ea45b39e72f090ee252149c45385f679971e48ca50f0883e313c3db9fa6d",
          "uid": "llmstruct.templates.__init__",
          "uid_components": [
            "llmstruct",
            "llmstruct.templates",
            "llmstruct.templates.__init__"
          ],
          "uid_type": "module",
          "artifact_id": "5a0bec58-9b06-cbd7-f3b6-a3ce75f15c26",
          "metrics": {
            "cyclomatic_complexity": 0,
            "lines_of_code": 0,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 0,
            "test_coverage": 0.0,
            "maintainability_index": 100
          },
          "markdown_anchor": {
            "id": "llmstruct-templates-__init__",
            "title": "Module: llmstruct.templates.__init__",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.templates.__init__](#llmstruct-templates-__init__)",
            "html_anchor": "<a id=\"llmstruct-templates-__init__\"></a>"
          }
        }
      ],
      "ARCHIVE": [
        {
          "module_id": "llmstruct.ARCHIVE.cli_argument_parser",
          "path": "llmstruct/ARCHIVE/cli_argument_parser.py",
          "category": "core",
          "module_doc": "CLI argument parsing for LLMStruct.",
          "functions": [
            {
              "name": "create_argument_parser",
              "docstring": "Create and configure the main argument parser.",
              "line_range": [
                14,
                113
              ],
              "parameters": [],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_argument_parser.create_argument_parser",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_argument_parser",
                "llmstruct.ARCHIVE.cli_argument_parser.create_argument_parser"
              ],
              "uid_type": "function"
            },
            {
              "name": "add_api_bot_commands",
              "docstring": "Add API and bot management commands to the parser.",
              "line_range": [
                116,
                126
              ],
              "parameters": [
                "subparsers"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_argument_parser.add_api_bot_commands",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_argument_parser",
                "llmstruct.ARCHIVE.cli_argument_parser.add_api_bot_commands"
              ],
              "uid_type": "function"
            },
            {
              "name": "create_full_argument_parser",
              "docstring": "Create the full argument parser with all commands.",
              "line_range": [
                129,
                137
              ],
              "parameters": [],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_argument_parser.create_full_argument_parser",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_argument_parser",
                "llmstruct.ARCHIVE.cli_argument_parser.create_full_argument_parser"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [],
          "callgraph": {
            "create_argument_parser": [
              "parser.add_subparsers",
              "argparse.ArgumentParser",
              "audit_parser.add_argument",
              "review_parser.add_argument",
              "interactive_parser.add_argument",
              "duplicates_parser.add_argument",
              "query_parser.add_argument",
              "dogfood_parser.add_argument",
              "subparsers.add_parser",
              "copilot_parser.add_argument",
              "parse_parser.add_argument",
              "context_parser.add_argument"
            ],
            "add_api_bot_commands": [
              "add_api_commands",
              "add_bot_commands"
            ],
            "create_full_argument_parser": [
              "create_argument_parser",
              "add_api_bot_commands"
            ]
          },
          "dependencies": [
            "Path",
            "add_api_commands",
            "add_bot_commands",
            "api_commands",
            "argparse",
            "bot_commands",
            "pathlib"
          ],
          "hash": "e54ef1274816747eae572b5045a59d35b9d2eb27b4358919ab57d61cef9fb47b",
          "uid": "llmstruct.ARCHIVE.cli_argument_parser",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_argument_parser"
          ],
          "uid_type": "module",
          "artifact_id": "29c72c43-22f1-cf0a-42e4-ab349153c323",
          "metrics": {
            "cyclomatic_complexity": 3,
            "lines_of_code": 30,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 7,
            "test_coverage": 0.0,
            "maintainability_index": 85
          },
          "markdown_anchor": {
            "id": "llmstruct-archive-cli_argument_parser",
            "title": "Module: llmstruct.ARCHIVE.cli_argument_parser",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.ARCHIVE.cli_argument_parser](#llmstruct-archive-cli_argument_parser)",
            "html_anchor": "<a id=\"llmstruct-archive-cli_argument_parser\"></a>"
          }
        },
        {
          "module_id": "llmstruct.ARCHIVE.cli_core",
          "path": "llmstruct/ARCHIVE/cli_core.py",
          "category": "core",
          "module_doc": "Core CLI functionality and main loop.",
          "functions": [
            {
              "name": "create_cli_core",
              "docstring": "Factory function to create CLI core instance.",
              "line_range": [
                110,
                112
              ],
              "parameters": [
                "root_dir"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_core.create_cli_core",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_core",
                "llmstruct.ARCHIVE.cli_core.create_cli_core"
              ],
              "uid_type": "function"
            },
            {
              "name": "__init__",
              "docstring": "Initialize CLI core with root directory.",
              "line_range": [
                28,
                35
              ],
              "parameters": [
                "self",
                "root_dir"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_core.__init__",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_core",
                "llmstruct.ARCHIVE.cli_core.__init__"
              ],
              "uid_type": "function"
            },
            {
              "name": "setup_cache",
              "docstring": "Initialize cache if enabled in config.",
              "line_range": [
                37,
                53
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_core.setup_cache",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_core",
                "llmstruct.ARCHIVE.cli_core.setup_cache"
              ],
              "uid_type": "function"
            },
            {
              "name": "setup_copilot",
              "docstring": "Initialize Copilot integration if enabled.",
              "line_range": [
                55,
                63
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_core.setup_copilot",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_core",
                "llmstruct.ARCHIVE.cli_core.setup_copilot"
              ],
              "uid_type": "function"
            },
            {
              "name": "run_interactive_mode",
              "docstring": "Run the interactive CLI mode.",
              "line_range": [
                65,
                97
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_core.run_interactive_mode",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_core",
                "llmstruct.ARCHIVE.cli_core.run_interactive_mode"
              ],
              "uid_type": "function"
            },
            {
              "name": "cleanup",
              "docstring": "Clean up resources.",
              "line_range": [
                99,
                107
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_core.cleanup",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_core",
                "llmstruct.ARCHIVE.cli_core.cleanup"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [
            {
              "name": "CLICore",
              "docstring": "Core CLI class handling main loop and coordination.",
              "line_range": [
                25,
                107
              ],
              "methods": [
                {
                  "name": "__init__",
                  "docstring": "Initialize CLI core with root directory.",
                  "line_range": [
                    28,
                    35
                  ],
                  "parameters": [
                    "self",
                    "root_dir"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_core.CLICore.__init__",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_core",
                    "llmstruct.ARCHIVE.cli_core.CLICore",
                    "llmstruct.ARCHIVE.cli_core.CLICore.__init__"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "setup_cache",
                  "docstring": "Initialize cache if enabled in config.",
                  "line_range": [
                    37,
                    53
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_core.CLICore.setup_cache",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_core",
                    "llmstruct.ARCHIVE.cli_core.CLICore",
                    "llmstruct.ARCHIVE.cli_core.CLICore.setup_cache"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "setup_copilot",
                  "docstring": "Initialize Copilot integration if enabled.",
                  "line_range": [
                    55,
                    63
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_core.CLICore.setup_copilot",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_core",
                    "llmstruct.ARCHIVE.cli_core.CLICore",
                    "llmstruct.ARCHIVE.cli_core.CLICore.setup_copilot"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "run_interactive_mode",
                  "docstring": "Run the interactive CLI mode.",
                  "line_range": [
                    65,
                    97
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_core.CLICore.run_interactive_mode",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_core",
                    "llmstruct.ARCHIVE.cli_core.CLICore",
                    "llmstruct.ARCHIVE.cli_core.CLICore.run_interactive_mode"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "cleanup",
                  "docstring": "Clean up resources.",
                  "line_range": [
                    99,
                    107
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_core.CLICore.cleanup",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_core",
                    "llmstruct.ARCHIVE.cli_core.CLICore",
                    "llmstruct.ARCHIVE.cli_core.CLICore.cleanup"
                  ],
                  "uid_type": "method"
                }
              ],
              "bases": [],
              "uid": "llmstruct.ARCHIVE.cli_core.CLICore",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_core",
                "llmstruct.ARCHIVE.cli_core.CLICore"
              ],
              "uid_type": "class"
            }
          ],
          "callgraph": {
            "__init__": [
              "CommandProcessor",
              "CLIUtils",
              "CLIConfig"
            ],
            "setup_cache": [
              "logging.warning",
              "Path",
              "str",
              "JSONCache",
              "logging.info",
              "cache_path.mkdir",
              "cache_config.get"
            ],
            "setup_copilot": [
              "initialize_copilot",
              "logging.info",
              "copilot_config.get",
              "logging.warning"
            ],
            "run_interactive_mode": [
              "input",
              "user_input.lower",
              "print",
              "self.setup_copilot",
              "user_input.startswith",
              "self.setup_cache",
              "logging.error",
              "self.cleanup"
            ],
            "cleanup": [
              "logging.info"
            ],
            "create_cli_core": [
              "CLICore"
            ]
          },
          "dependencies": [
            "CLIConfig",
            "CLIUtils",
            "CommandProcessor",
            "CopilotContextManager",
            "JSONCache",
            "Optional",
            "Path",
            "cli_commands",
            "cli_config",
            "cli_utils",
            "copilot",
            "initialize_copilot",
            "llmstruct.cache",
            "logging",
            "pathlib",
            "typing"
          ],
          "hash": "57a534c55c12bacfaf26ed4b4124fe97a3c2559253b5a62346e9c9f0368e5132",
          "uid": "llmstruct.ARCHIVE.cli_core",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_core"
          ],
          "uid_type": "module",
          "artifact_id": "da6895e4-e8b1-8c4c-0b35-dcb62de6a925",
          "metrics": {
            "cyclomatic_complexity": 8,
            "lines_of_code": 60,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 16,
            "test_coverage": 0.0,
            "maintainability_index": 60
          },
          "markdown_anchor": {
            "id": "llmstruct-archive-cli_core",
            "title": "Module: llmstruct.ARCHIVE.cli_core",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.ARCHIVE.cli_core](#llmstruct-archive-cli_core)",
            "html_anchor": "<a id=\"llmstruct-archive-cli_core\"></a>"
          }
        },
        {
          "module_id": "llmstruct.ARCHIVE.cli_utils",
          "path": "llmstruct/ARCHIVE/cli_utils.py",
          "category": "core",
          "module_doc": "CLI utility functions.",
          "functions": [
            {
              "name": "__init__",
              "docstring": "Initialize utils with root directory.",
              "line_range": [
                24,
                26
              ],
              "parameters": [
                "self",
                "root_dir"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_utils.__init__",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_utils",
                "llmstruct.ARCHIVE.cli_utils.__init__"
              ],
              "uid_type": "function"
            },
            {
              "name": "read_file_content",
              "docstring": "Read file content with size limit.",
              "line_range": [
                28,
                50
              ],
              "parameters": [
                "self",
                "file_path",
                "max_size"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_utils.read_file_content",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_utils",
                "llmstruct.ARCHIVE.cli_utils.read_file_content"
              ],
              "uid_type": "function"
            },
            {
              "name": "write_file_content",
              "docstring": "Write content to file.",
              "line_range": [
                52,
                70
              ],
              "parameters": [
                "self",
                "file_path",
                "content"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_utils.write_file_content",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_utils",
                "llmstruct.ARCHIVE.cli_utils.write_file_content"
              ],
              "uid_type": "function"
            },
            {
              "name": "get_directory_structure",
              "docstring": "Get directory structure using folder generator.",
              "line_range": [
                72,
                115
              ],
              "parameters": [
                "self",
                "path",
                "gitignore_patterns",
                "include_patterns",
                "exclude_patterns",
                "exclude_dirs"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_utils.get_directory_structure",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_utils",
                "llmstruct.ARCHIVE.cli_utils.get_directory_structure"
              ],
              "uid_type": "function"
            },
            {
              "name": "validate_json",
              "docstring": "Validate JSON content.",
              "line_range": [
                117,
                123
              ],
              "parameters": [
                "self",
                "content"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_utils.validate_json",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_utils",
                "llmstruct.ARCHIVE.cli_utils.validate_json"
              ],
              "uid_type": "function"
            },
            {
              "name": "format_json",
              "docstring": "Format data as JSON string.",
              "line_range": [
                125,
                131
              ],
              "parameters": [
                "self",
                "data",
                "indent"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_utils.format_json",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_utils",
                "llmstruct.ARCHIVE.cli_utils.format_json"
              ],
              "uid_type": "function"
            },
            {
              "name": "generate_unique_id",
              "docstring": "Generate unique ID for commands, queues, etc.",
              "line_range": [
                133,
                137
              ],
              "parameters": [
                "self",
                "prefix"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_utils.generate_unique_id",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_utils",
                "llmstruct.ARCHIVE.cli_utils.generate_unique_id"
              ],
              "uid_type": "function"
            },
            {
              "name": "safe_path_join",
              "docstring": "Safely join path parts, preventing directory traversal.",
              "line_range": [
                139,
                149
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_utils.safe_path_join",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_utils",
                "llmstruct.ARCHIVE.cli_utils.safe_path_join"
              ],
              "uid_type": "function"
            },
            {
              "name": "file_exists",
              "docstring": "Check if file exists.",
              "line_range": [
                151,
                157
              ],
              "parameters": [
                "self",
                "file_path"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_utils.file_exists",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_utils",
                "llmstruct.ARCHIVE.cli_utils.file_exists"
              ],
              "uid_type": "function"
            },
            {
              "name": "dir_exists",
              "docstring": "Check if directory exists.",
              "line_range": [
                159,
                165
              ],
              "parameters": [
                "self",
                "dir_path"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_utils.dir_exists",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_utils",
                "llmstruct.ARCHIVE.cli_utils.dir_exists"
              ],
              "uid_type": "function"
            },
            {
              "name": "get_file_size",
              "docstring": "Get file size in bytes.",
              "line_range": [
                167,
                173
              ],
              "parameters": [
                "self",
                "file_path"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_utils.get_file_size",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_utils",
                "llmstruct.ARCHIVE.cli_utils.get_file_size"
              ],
              "uid_type": "function"
            },
            {
              "name": "backup_file",
              "docstring": "Create backup of file with timestamp.",
              "line_range": [
                175,
                191
              ],
              "parameters": [
                "self",
                "file_path"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_utils.backup_file",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_utils",
                "llmstruct.ARCHIVE.cli_utils.backup_file"
              ],
              "uid_type": "function"
            },
            {
              "name": "cleanup_old_backups",
              "docstring": "Clean up old backup files, keeping only the most recent ones.",
              "line_range": [
                193,
                222
              ],
              "parameters": [
                "self",
                "file_path",
                "keep_count"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_utils.cleanup_old_backups",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_utils",
                "llmstruct.ARCHIVE.cli_utils.cleanup_old_backups"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [
            {
              "name": "CLIUtils",
              "docstring": "Utility functions for CLI operations.",
              "line_range": [
                21,
                222
              ],
              "methods": [
                {
                  "name": "__init__",
                  "docstring": "Initialize utils with root directory.",
                  "line_range": [
                    24,
                    26
                  ],
                  "parameters": [
                    "self",
                    "root_dir"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_utils.CLIUtils.__init__",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_utils",
                    "llmstruct.ARCHIVE.cli_utils.CLIUtils",
                    "llmstruct.ARCHIVE.cli_utils.CLIUtils.__init__"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "read_file_content",
                  "docstring": "Read file content with size limit.",
                  "line_range": [
                    28,
                    50
                  ],
                  "parameters": [
                    "self",
                    "file_path",
                    "max_size"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_utils.CLIUtils.read_file_content",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_utils",
                    "llmstruct.ARCHIVE.cli_utils.CLIUtils",
                    "llmstruct.ARCHIVE.cli_utils.CLIUtils.read_file_content"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "write_file_content",
                  "docstring": "Write content to file.",
                  "line_range": [
                    52,
                    70
                  ],
                  "parameters": [
                    "self",
                    "file_path",
                    "content"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_utils.CLIUtils.write_file_content",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_utils",
                    "llmstruct.ARCHIVE.cli_utils.CLIUtils",
                    "llmstruct.ARCHIVE.cli_utils.CLIUtils.write_file_content"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "get_directory_structure",
                  "docstring": "Get directory structure using folder generator.",
                  "line_range": [
                    72,
                    115
                  ],
                  "parameters": [
                    "self",
                    "path",
                    "gitignore_patterns",
                    "include_patterns",
                    "exclude_patterns",
                    "exclude_dirs"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_utils.CLIUtils.get_directory_structure",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_utils",
                    "llmstruct.ARCHIVE.cli_utils.CLIUtils",
                    "llmstruct.ARCHIVE.cli_utils.CLIUtils.get_directory_structure"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "validate_json",
                  "docstring": "Validate JSON content.",
                  "line_range": [
                    117,
                    123
                  ],
                  "parameters": [
                    "self",
                    "content"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_utils.CLIUtils.validate_json",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_utils",
                    "llmstruct.ARCHIVE.cli_utils.CLIUtils",
                    "llmstruct.ARCHIVE.cli_utils.CLIUtils.validate_json"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "format_json",
                  "docstring": "Format data as JSON string.",
                  "line_range": [
                    125,
                    131
                  ],
                  "parameters": [
                    "self",
                    "data",
                    "indent"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_utils.CLIUtils.format_json",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_utils",
                    "llmstruct.ARCHIVE.cli_utils.CLIUtils",
                    "llmstruct.ARCHIVE.cli_utils.CLIUtils.format_json"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "generate_unique_id",
                  "docstring": "Generate unique ID for commands, queues, etc.",
                  "line_range": [
                    133,
                    137
                  ],
                  "parameters": [
                    "self",
                    "prefix"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_utils.CLIUtils.generate_unique_id",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_utils",
                    "llmstruct.ARCHIVE.cli_utils.CLIUtils",
                    "llmstruct.ARCHIVE.cli_utils.CLIUtils.generate_unique_id"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "safe_path_join",
                  "docstring": "Safely join path parts, preventing directory traversal.",
                  "line_range": [
                    139,
                    149
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_utils.CLIUtils.safe_path_join",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_utils",
                    "llmstruct.ARCHIVE.cli_utils.CLIUtils",
                    "llmstruct.ARCHIVE.cli_utils.CLIUtils.safe_path_join"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "file_exists",
                  "docstring": "Check if file exists.",
                  "line_range": [
                    151,
                    157
                  ],
                  "parameters": [
                    "self",
                    "file_path"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_utils.CLIUtils.file_exists",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_utils",
                    "llmstruct.ARCHIVE.cli_utils.CLIUtils",
                    "llmstruct.ARCHIVE.cli_utils.CLIUtils.file_exists"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "dir_exists",
                  "docstring": "Check if directory exists.",
                  "line_range": [
                    159,
                    165
                  ],
                  "parameters": [
                    "self",
                    "dir_path"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_utils.CLIUtils.dir_exists",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_utils",
                    "llmstruct.ARCHIVE.cli_utils.CLIUtils",
                    "llmstruct.ARCHIVE.cli_utils.CLIUtils.dir_exists"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "get_file_size",
                  "docstring": "Get file size in bytes.",
                  "line_range": [
                    167,
                    173
                  ],
                  "parameters": [
                    "self",
                    "file_path"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_utils.CLIUtils.get_file_size",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_utils",
                    "llmstruct.ARCHIVE.cli_utils.CLIUtils",
                    "llmstruct.ARCHIVE.cli_utils.CLIUtils.get_file_size"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "backup_file",
                  "docstring": "Create backup of file with timestamp.",
                  "line_range": [
                    175,
                    191
                  ],
                  "parameters": [
                    "self",
                    "file_path"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_utils.CLIUtils.backup_file",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_utils",
                    "llmstruct.ARCHIVE.cli_utils.CLIUtils",
                    "llmstruct.ARCHIVE.cli_utils.CLIUtils.backup_file"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "cleanup_old_backups",
                  "docstring": "Clean up old backup files, keeping only the most recent ones.",
                  "line_range": [
                    193,
                    222
                  ],
                  "parameters": [
                    "self",
                    "file_path",
                    "keep_count"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_utils.CLIUtils.cleanup_old_backups",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_utils",
                    "llmstruct.ARCHIVE.cli_utils.CLIUtils",
                    "llmstruct.ARCHIVE.cli_utils.CLIUtils.cleanup_old_backups"
                  ],
                  "uid_type": "method"
                }
              ],
              "bases": [],
              "uid": "llmstruct.ARCHIVE.cli_utils.CLIUtils",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_utils",
                "llmstruct.ARCHIVE.cli_utils.CLIUtils"
              ],
              "uid_type": "class"
            }
          ],
          "callgraph": {
            "__init__": [],
            "read_file_content": [
              "logging.warning",
              "os.stat",
              "open",
              "logging.error",
              "f.read"
            ],
            "write_file_content": [
              "open",
              "Path",
              "logging.error",
              "f.write",
              "logging.info"
            ],
            "get_directory_structure": [
              "logging.error",
              "get_folder_structure",
              "os.listdir",
              "sorted"
            ],
            "validate_json": [
              "json.loads",
              "str"
            ],
            "format_json": [
              "str",
              "json.dumps",
              "logging.error"
            ],
            "generate_unique_id": [
              "str",
              "uuid.uuid4",
              "int",
              "time.time"
            ],
            "safe_path_join": [
              "ValueError",
              "resolved_path.startswith"
            ],
            "file_exists": [
              "self.safe_path_join"
            ],
            "dir_exists": [
              "self.safe_path_join"
            ],
            "get_file_size": [
              "self.safe_path_join"
            ],
            "backup_file": [
              "self.safe_path_join",
              "open",
              "dst.write",
              "src.read",
              "time.time",
              "logging.error",
              "int"
            ],
            "cleanup_old_backups": [
              "os.remove",
              "self.safe_path_join",
              "logging.warning",
              "os.listdir",
              "logging.info",
              "logging.error",
              "int",
              "filename.split",
              "filename.startswith",
              "backups.sort",
              "backups.append"
            ]
          },
          "dependencies": [
            "Any",
            "Dict",
            "List",
            "Optional",
            "Path",
            "get_folder_structure",
            "json",
            "llmstruct.generators.json_generator",
            "logging",
            "os",
            "pathlib",
            "time",
            "typing",
            "uuid"
          ],
          "hash": "105ac5d21c6d1870ac478aadb62ca79e99a3453df4457642fcda39f575abf367",
          "uid": "llmstruct.ARCHIVE.cli_utils",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_utils"
          ],
          "uid_type": "module",
          "artifact_id": "b1999703-b6c6-e00b-883f-76a844c39baf",
          "metrics": {
            "cyclomatic_complexity": 15,
            "lines_of_code": 130,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 14,
            "test_coverage": 0.0,
            "maintainability_index": 25
          },
          "markdown_anchor": {
            "id": "llmstruct-archive-cli_utils",
            "title": "Module: llmstruct.ARCHIVE.cli_utils",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.ARCHIVE.cli_utils](#llmstruct-archive-cli_utils)",
            "html_anchor": "<a id=\"llmstruct-archive-cli_utils\"></a>"
          }
        },
        {
          "module_id": "llmstruct.ARCHIVE.cli_main_commands",
          "path": "llmstruct/ARCHIVE/cli_main_commands.py",
          "category": "core",
          "module_doc": "Main CLI command handlers for LLMStruct.",
          "functions": [
            {
              "name": "parse",
              "docstring": "Parse codebase and generate struct.json.",
              "line_range": [
                33,
                68
              ],
              "parameters": [
                "args"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_main_commands.parse",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_main_commands",
                "llmstruct.ARCHIVE.cli_main_commands.parse"
              ],
              "uid_type": "function"
            },
            {
              "name": "query",
              "docstring": "Query LLMs with prompt and context.",
              "line_range": [
                71,
                127
              ],
              "parameters": [
                "args"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_main_commands.query",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_main_commands",
                "llmstruct.ARCHIVE.cli_main_commands.query"
              ],
              "uid_type": "function"
            },
            {
              "name": "interactive",
              "docstring": "Run interactive CLI with modular structure if available, fallback to legacy.",
              "line_range": [
                130,
                136
              ],
              "parameters": [
                "args"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_main_commands.interactive",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_main_commands",
                "llmstruct.ARCHIVE.cli_main_commands.interactive"
              ],
              "uid_type": "function"
            },
            {
              "name": "interactive_modular",
              "docstring": "Run interactive CLI with modular structure.",
              "line_range": [
                139,
                146
              ],
              "parameters": [
                "args"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_main_commands.interactive_modular",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_main_commands",
                "llmstruct.ARCHIVE.cli_main_commands.interactive_modular"
              ],
              "uid_type": "function"
            },
            {
              "name": "interactive_legacy",
              "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
              "line_range": [
                149,
                175
              ],
              "parameters": [
                "args"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_main_commands.interactive_legacy",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_main_commands",
                "llmstruct.ARCHIVE.cli_main_commands.interactive_legacy"
              ],
              "uid_type": "function"
            },
            {
              "name": "basic_interactive_processing",
              "docstring": "Basic interactive processing without enhanced features.",
              "line_range": [
                178,
                230
              ],
              "parameters": [
                "args",
                "cache",
                "client"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_main_commands.basic_interactive_processing",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_main_commands",
                "llmstruct.ARCHIVE.cli_main_commands.basic_interactive_processing"
              ],
              "uid_type": "function"
            },
            {
              "name": "context",
              "docstring": "Generate context.json from input JSON.",
              "line_range": [
                233,
                235
              ],
              "parameters": [
                "args"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_main_commands.context",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_main_commands",
                "llmstruct.ARCHIVE.cli_main_commands.context"
              ],
              "uid_type": "function"
            },
            {
              "name": "dogfood",
              "docstring": "Run dogfooding analysis.",
              "line_range": [
                238,
                240
              ],
              "parameters": [
                "args"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_main_commands.dogfood",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_main_commands",
                "llmstruct.ARCHIVE.cli_main_commands.dogfood"
              ],
              "uid_type": "function"
            },
            {
              "name": "review",
              "docstring": "Review codebase with LLM.",
              "line_range": [
                243,
                245
              ],
              "parameters": [
                "args"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_main_commands.review",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_main_commands",
                "llmstruct.ARCHIVE.cli_main_commands.review"
              ],
              "uid_type": "function"
            },
            {
              "name": "copilot",
              "docstring": "Copilot integration and context management.",
              "line_range": [
                248,
                366
              ],
              "parameters": [
                "args"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_main_commands.copilot",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_main_commands",
                "llmstruct.ARCHIVE.cli_main_commands.copilot"
              ],
              "uid_type": "function"
            },
            {
              "name": "audit",
              "docstring": "Audit project structure and generate reports.",
              "line_range": [
                369,
                387
              ],
              "parameters": [
                "args"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_main_commands.audit",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_main_commands",
                "llmstruct.ARCHIVE.cli_main_commands.audit"
              ],
              "uid_type": "function"
            },
            {
              "name": "analyze_duplicates",
              "docstring": "Analyze function duplication using struct.json deep analysis.",
              "line_range": [
                390,
                495
              ],
              "parameters": [
                "args"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_main_commands.analyze_duplicates",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_main_commands",
                "llmstruct.ARCHIVE.cli_main_commands.analyze_duplicates"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [],
          "callgraph": {
            "parse": [
              "load_gitignore",
              "generate_json",
              "cache.close",
              "attach_to_llm_request",
              "logging.error",
              "JSONCache",
              "logging.info"
            ],
            "query": [
              "hasattr",
              "client.query_with_context",
              "cache.close",
              "logging.warning",
              "Path",
              "client.query",
              "logging.error",
              "json.dump",
              "LLMClient",
              "JSONCache",
              "create_context_orchestrator",
              "logging.info",
              "orchestrator.get_context_for_scenario"
            ],
            "interactive": [
              "interactive_legacy",
              "interactive_modular",
              "logging.warning"
            ],
            "interactive_modular": [
              "create_cli_core",
              "logging.error",
              "interactive_legacy",
              "cli_core.run_interactive_mode"
            ],
            "interactive_legacy": [
              "basic_interactive_processing",
              "cache.close",
              "print",
              "Path",
              "logging.error",
              "LLMClient",
              "JSONCache",
              "process_cli_queue_enhanced"
            ],
            "basic_interactive_processing": [
              "input",
              "user_input.lower",
              "print",
              "user_input.startswith",
              "open",
              "client.query",
              "f.read"
            ],
            "context": [
              "logging.warning"
            ],
            "dogfood": [
              "logging.warning"
            ],
            "review": [
              "logging.warning"
            ],
            "copilot": [
              "hasattr",
              "open",
              "manager.load_context_layer",
              "manager.validate_change",
              "initialize_copilot",
              "manager.close",
              "print",
              "manager.export_context",
              "getattr",
              "shutil.copy",
              "config_path.exists",
              "enumerate",
              "manager.get_context_status",
              "smart_suggest",
              "manager.refresh_all_contexts",
              "template_path.exists",
              "Path",
              "manager.unload_context_layer",
              "logging.error",
              "layers.split",
              "f.write",
              "logging.info"
            ],
            "audit": [
              "analyze_duplicates",
              "hasattr",
              "print",
              "Path",
              "file_path.exists"
            ],
            "analyze_duplicates": [
              "f.get",
              "orchestrator.analyze_codebase_for_duplicates",
              "len",
              "print",
              "open",
              "analysis.get",
              "getattr",
              "json.dumps",
              "logging.error",
              "json.dump",
              "WorkflowOrchestrator",
              "func.get"
            ]
          },
          "dependencies": [
            "JSONCache",
            "LLMClient",
            "Optional",
            "Path",
            "WorkflowOrchestrator",
            "argparse",
            "asyncio",
            "attach_to_llm_request",
            "cli",
            "cli_core",
            "context_orchestrator",
            "copilot",
            "create_cli_core",
            "create_context_orchestrator",
            "generate_json",
            "initialize_copilot",
            "json",
            "llmstruct",
            "llmstruct.cache",
            "llmstruct.generators.json_generator",
            "llmstruct.self_run",
            "load_gitignore",
            "logging",
            "os",
            "pathlib",
            "process_cli_queue_enhanced",
            "shutil",
            "smart_suggest",
            "typing",
            "workflow_orchestrator"
          ],
          "hash": "06e7d297542ace93514d731c2af8e0f0daa4c7c3a8fc1e90466f3b5fc5486189",
          "uid": "llmstruct.ARCHIVE.cli_main_commands",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_main_commands"
          ],
          "uid_type": "module",
          "artifact_id": "009a509c-318a-7b41-59a1-da6b0755aa04",
          "metrics": {
            "cyclomatic_complexity": 12,
            "lines_of_code": 120,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 30,
            "test_coverage": 0.0,
            "maintainability_index": 40
          },
          "markdown_anchor": {
            "id": "llmstruct-archive-cli_main_commands",
            "title": "Module: llmstruct.ARCHIVE.cli_main_commands",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.ARCHIVE.cli_main_commands](#llmstruct-archive-cli_main_commands)",
            "html_anchor": "<a id=\"llmstruct-archive-cli_main_commands\"></a>"
          }
        },
        {
          "module_id": "llmstruct.ARCHIVE.cli_config",
          "path": "llmstruct/ARCHIVE/cli_config.py",
          "category": "core",
          "module_doc": "CLI configuration management.",
          "functions": [
            {
              "name": "__init__",
              "docstring": "Initialize configuration manager.",
              "line_range": [
                20,
                24
              ],
              "parameters": [
                "self",
                "root_dir"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_config.__init__",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config.__init__"
              ],
              "uid_type": "function"
            },
            {
              "name": "_load_config",
              "docstring": "Load configuration from llmstruct.toml.",
              "line_range": [
                26,
                34
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_config._load_config",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config._load_config"
              ],
              "uid_type": "function"
            },
            {
              "name": "get_cache_config",
              "docstring": "Get cache configuration section.",
              "line_range": [
                36,
                38
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_config.get_cache_config",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config.get_cache_config"
              ],
              "uid_type": "function"
            },
            {
              "name": "get_copilot_config",
              "docstring": "Get Copilot configuration section.",
              "line_range": [
                40,
                42
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_config.get_copilot_config",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config.get_copilot_config"
              ],
              "uid_type": "function"
            },
            {
              "name": "get_queue_config",
              "docstring": "Get queue configuration section.",
              "line_range": [
                44,
                46
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_config.get_queue_config",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config.get_queue_config"
              ],
              "uid_type": "function"
            },
            {
              "name": "get_context_config",
              "docstring": "Get context configuration section.",
              "line_range": [
                48,
                50
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_config.get_context_config",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config.get_context_config"
              ],
              "uid_type": "function"
            },
            {
              "name": "get_gitignore_patterns",
              "docstring": "Load and normalize patterns from .gitignore.",
              "line_range": [
                52,
                66
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_config.get_gitignore_patterns",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config.get_gitignore_patterns"
              ],
              "uid_type": "function"
            },
            {
              "name": "get_exclude_dirs",
              "docstring": "Get directories to exclude from scanning.",
              "line_range": [
                68,
                82
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_config.get_exclude_dirs",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config.get_exclude_dirs"
              ],
              "uid_type": "function"
            },
            {
              "name": "get_include_patterns",
              "docstring": "Get file patterns to include.",
              "line_range": [
                84,
                89
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_config.get_include_patterns",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config.get_include_patterns"
              ],
              "uid_type": "function"
            },
            {
              "name": "get_exclude_patterns",
              "docstring": "Get file patterns to exclude.",
              "line_range": [
                91,
                96
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_config.get_exclude_patterns",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config.get_exclude_patterns"
              ],
              "uid_type": "function"
            },
            {
              "name": "get_max_file_size",
              "docstring": "Get maximum file size for processing (in bytes).",
              "line_range": [
                98,
                100
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_config.get_max_file_size",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config.get_max_file_size"
              ],
              "uid_type": "function"
            },
            {
              "name": "get_auto_update_config",
              "docstring": "Get auto-update configuration.",
              "line_range": [
                102,
                104
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_config.get_auto_update_config",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config.get_auto_update_config"
              ],
              "uid_type": "function"
            },
            {
              "name": "is_auto_update_enabled",
              "docstring": "Check if auto-update is enabled.",
              "line_range": [
                106,
                108
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_config.is_auto_update_enabled",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config.is_auto_update_enabled"
              ],
              "uid_type": "function"
            },
            {
              "name": "get_struct_file_path",
              "docstring": "Get path to struct.json file.",
              "line_range": [
                110,
                112
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_config.get_struct_file_path",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config.get_struct_file_path"
              ],
              "uid_type": "function"
            },
            {
              "name": "get_context_file_path",
              "docstring": "Get path to context file.",
              "line_range": [
                114,
                116
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_config.get_context_file_path",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config.get_context_file_path"
              ],
              "uid_type": "function"
            },
            {
              "name": "save_config",
              "docstring": "Save current configuration to file.",
              "line_range": [
                118,
                124
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_config.save_config",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config.save_config"
              ],
              "uid_type": "function"
            },
            {
              "name": "update_config",
              "docstring": "Update configuration value.",
              "line_range": [
                126,
                131
              ],
              "parameters": [
                "self",
                "section",
                "key",
                "value"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_config.update_config",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config.update_config"
              ],
              "uid_type": "function"
            },
            {
              "name": "reload_config",
              "docstring": "Reload configuration from file.",
              "line_range": [
                133,
                135
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_config.reload_config",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config.reload_config"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [
            {
              "name": "CLIConfig",
              "docstring": "Manages CLI configuration from llmstruct.toml and other sources.",
              "line_range": [
                17,
                135
              ],
              "methods": [
                {
                  "name": "__init__",
                  "docstring": "Initialize configuration manager.",
                  "line_range": [
                    20,
                    24
                  ],
                  "parameters": [
                    "self",
                    "root_dir"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig.__init__",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_config",
                    "llmstruct.ARCHIVE.cli_config.CLIConfig",
                    "llmstruct.ARCHIVE.cli_config.CLIConfig.__init__"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_load_config",
                  "docstring": "Load configuration from llmstruct.toml.",
                  "line_range": [
                    26,
                    34
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig._load_config",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_config",
                    "llmstruct.ARCHIVE.cli_config.CLIConfig",
                    "llmstruct.ARCHIVE.cli_config.CLIConfig._load_config"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "get_cache_config",
                  "docstring": "Get cache configuration section.",
                  "line_range": [
                    36,
                    38
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig.get_cache_config",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_config",
                    "llmstruct.ARCHIVE.cli_config.CLIConfig",
                    "llmstruct.ARCHIVE.cli_config.CLIConfig.get_cache_config"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "get_copilot_config",
                  "docstring": "Get Copilot configuration section.",
                  "line_range": [
                    40,
                    42
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig.get_copilot_config",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_config",
                    "llmstruct.ARCHIVE.cli_config.CLIConfig",
                    "llmstruct.ARCHIVE.cli_config.CLIConfig.get_copilot_config"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "get_queue_config",
                  "docstring": "Get queue configuration section.",
                  "line_range": [
                    44,
                    46
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig.get_queue_config",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_config",
                    "llmstruct.ARCHIVE.cli_config.CLIConfig",
                    "llmstruct.ARCHIVE.cli_config.CLIConfig.get_queue_config"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "get_context_config",
                  "docstring": "Get context configuration section.",
                  "line_range": [
                    48,
                    50
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig.get_context_config",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_config",
                    "llmstruct.ARCHIVE.cli_config.CLIConfig",
                    "llmstruct.ARCHIVE.cli_config.CLIConfig.get_context_config"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "get_gitignore_patterns",
                  "docstring": "Load and normalize patterns from .gitignore.",
                  "line_range": [
                    52,
                    66
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig.get_gitignore_patterns",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_config",
                    "llmstruct.ARCHIVE.cli_config.CLIConfig",
                    "llmstruct.ARCHIVE.cli_config.CLIConfig.get_gitignore_patterns"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "get_exclude_dirs",
                  "docstring": "Get directories to exclude from scanning.",
                  "line_range": [
                    68,
                    82
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig.get_exclude_dirs",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_config",
                    "llmstruct.ARCHIVE.cli_config.CLIConfig",
                    "llmstruct.ARCHIVE.cli_config.CLIConfig.get_exclude_dirs"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "get_include_patterns",
                  "docstring": "Get file patterns to include.",
                  "line_range": [
                    84,
                    89
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig.get_include_patterns",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_config",
                    "llmstruct.ARCHIVE.cli_config.CLIConfig",
                    "llmstruct.ARCHIVE.cli_config.CLIConfig.get_include_patterns"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "get_exclude_patterns",
                  "docstring": "Get file patterns to exclude.",
                  "line_range": [
                    91,
                    96
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig.get_exclude_patterns",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_config",
                    "llmstruct.ARCHIVE.cli_config.CLIConfig",
                    "llmstruct.ARCHIVE.cli_config.CLIConfig.get_exclude_patterns"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "get_max_file_size",
                  "docstring": "Get maximum file size for processing (in bytes).",
                  "line_range": [
                    98,
                    100
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig.get_max_file_size",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_config",
                    "llmstruct.ARCHIVE.cli_config.CLIConfig",
                    "llmstruct.ARCHIVE.cli_config.CLIConfig.get_max_file_size"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "get_auto_update_config",
                  "docstring": "Get auto-update configuration.",
                  "line_range": [
                    102,
                    104
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig.get_auto_update_config",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_config",
                    "llmstruct.ARCHIVE.cli_config.CLIConfig",
                    "llmstruct.ARCHIVE.cli_config.CLIConfig.get_auto_update_config"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "is_auto_update_enabled",
                  "docstring": "Check if auto-update is enabled.",
                  "line_range": [
                    106,
                    108
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig.is_auto_update_enabled",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_config",
                    "llmstruct.ARCHIVE.cli_config.CLIConfig",
                    "llmstruct.ARCHIVE.cli_config.CLIConfig.is_auto_update_enabled"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "get_struct_file_path",
                  "docstring": "Get path to struct.json file.",
                  "line_range": [
                    110,
                    112
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig.get_struct_file_path",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_config",
                    "llmstruct.ARCHIVE.cli_config.CLIConfig",
                    "llmstruct.ARCHIVE.cli_config.CLIConfig.get_struct_file_path"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "get_context_file_path",
                  "docstring": "Get path to context file.",
                  "line_range": [
                    114,
                    116
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig.get_context_file_path",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_config",
                    "llmstruct.ARCHIVE.cli_config.CLIConfig",
                    "llmstruct.ARCHIVE.cli_config.CLIConfig.get_context_file_path"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "save_config",
                  "docstring": "Save current configuration to file.",
                  "line_range": [
                    118,
                    124
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig.save_config",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_config",
                    "llmstruct.ARCHIVE.cli_config.CLIConfig",
                    "llmstruct.ARCHIVE.cli_config.CLIConfig.save_config"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "update_config",
                  "docstring": "Update configuration value.",
                  "line_range": [
                    126,
                    131
                  ],
                  "parameters": [
                    "self",
                    "section",
                    "key",
                    "value"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig.update_config",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_config",
                    "llmstruct.ARCHIVE.cli_config.CLIConfig",
                    "llmstruct.ARCHIVE.cli_config.CLIConfig.update_config"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "reload_config",
                  "docstring": "Reload configuration from file.",
                  "line_range": [
                    133,
                    135
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig.reload_config",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_config",
                    "llmstruct.ARCHIVE.cli_config.CLIConfig",
                    "llmstruct.ARCHIVE.cli_config.CLIConfig.reload_config"
                  ],
                  "uid_type": "method"
                }
              ],
              "bases": [],
              "uid": "llmstruct.ARCHIVE.cli_config.CLIConfig",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_config",
                "llmstruct.ARCHIVE.cli_config.CLIConfig"
              ],
              "uid_type": "class"
            }
          ],
          "callgraph": {
            "__init__": [
              "self._load_config",
              "Path"
            ],
            "_load_config": [
              "toml.load",
              "logging.error"
            ],
            "get_cache_config": [],
            "get_copilot_config": [],
            "get_queue_config": [],
            "get_context_config": [],
            "get_gitignore_patterns": [
              "line.startswith",
              "Path",
              "logging.error",
              "gitignore_path.exists",
              "line.strip",
              "gitignore_path.open"
            ],
            "get_exclude_dirs": [
              "list",
              "parsing_config.get",
              "cli_config.get",
              "set"
            ],
            "get_include_patterns": [
              "parsing_config.get",
              "cli_config.get"
            ],
            "get_exclude_patterns": [
              "parsing_config.get",
              "cli_config.get"
            ],
            "get_max_file_size": [],
            "get_auto_update_config": [],
            "is_auto_update_enabled": [
              "self.get_auto_update_config"
            ],
            "get_struct_file_path": [],
            "get_context_file_path": [],
            "save_config": [
              "logging.error",
              "toml.dump"
            ],
            "update_config": [
              "self.save_config"
            ],
            "reload_config": [
              "self._load_config"
            ]
          },
          "dependencies": [
            "Any",
            "Dict",
            "List",
            "Path",
            "logging",
            "pathlib",
            "toml",
            "typing"
          ],
          "hash": "4e3a5903ff3fcd932118bf5521902da18bc72c67f93835354f70576d1413de49",
          "uid": "llmstruct.ARCHIVE.cli_config",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_config"
          ],
          "uid_type": "module",
          "artifact_id": "51bc580f-9cb1-8311-ba52-fcea74bd1748",
          "metrics": {
            "cyclomatic_complexity": 20,
            "lines_of_code": 180,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 8,
            "test_coverage": 0.0,
            "maintainability_index": 0
          },
          "markdown_anchor": {
            "id": "llmstruct-archive-cli_config",
            "title": "Module: llmstruct.ARCHIVE.cli_config",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.ARCHIVE.cli_config](#llmstruct-archive-cli_config)",
            "html_anchor": "<a id=\"llmstruct-archive-cli_config\"></a>"
          }
        },
        {
          "module_id": "llmstruct.ARCHIVE.cli_commands",
          "path": "llmstruct/ARCHIVE/cli_commands.py",
          "category": "core",
          "module_doc": "CLI command processing and handlers.",
          "functions": [
            {
              "name": "__init__",
              "docstring": "Initialize command processor.",
              "line_range": [
                33,
                72
              ],
              "parameters": [
                "self",
                "root_dir",
                "config",
                "utils"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_commands.__init__",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.__init__"
              ],
              "uid_type": "function"
            },
            {
              "name": "set_cache",
              "docstring": "Set cache instance.",
              "line_range": [
                74,
                76
              ],
              "parameters": [
                "self",
                "cache"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_commands.set_cache",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.set_cache"
              ],
              "uid_type": "function"
            },
            {
              "name": "set_copilot",
              "docstring": "Set Copilot manager instance.",
              "line_range": [
                78,
                80
              ],
              "parameters": [
                "self",
                "copilot_manager"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_commands.set_copilot",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.set_copilot"
              ],
              "uid_type": "function"
            },
            {
              "name": "process_command",
              "docstring": "Process a command starting with /.",
              "line_range": [
                82,
                98
              ],
              "parameters": [
                "self",
                "command_line"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_commands.process_command",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.process_command"
              ],
              "uid_type": "function"
            },
            {
              "name": "process_prompt",
              "docstring": "Process a regular user prompt (not a command).",
              "line_range": [
                100,
                152
              ],
              "parameters": [
                "self",
                "prompt"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_commands.process_prompt",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.process_prompt"
              ],
              "uid_type": "function"
            },
            {
              "name": "cmd_help",
              "docstring": "Show help information.",
              "line_range": [
                154,
                217
              ],
              "parameters": [
                "self",
                "args"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_commands.cmd_help",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.cmd_help"
              ],
              "uid_type": "function"
            },
            {
              "name": "cmd_workspace",
              "docstring": "Handle workspace state and permissions management.",
              "line_range": [
                219,
                334
              ],
              "parameters": [
                "self",
                "args"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_commands.cmd_workspace",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.cmd_workspace"
              ],
              "uid_type": "function"
            },
            {
              "name": "cmd_mode",
              "docstring": "Handle context mode operations with workspace integration.",
              "line_range": [
                336,
                437
              ],
              "parameters": [
                "self",
                "args"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_commands.cmd_mode",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.cmd_mode"
              ],
              "uid_type": "function"
            },
            {
              "name": "cmd_view",
              "docstring": "View file or directory contents.",
              "line_range": [
                439,
                478
              ],
              "parameters": [
                "self",
                "args"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_commands.cmd_view",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.cmd_view"
              ],
              "uid_type": "function"
            },
            {
              "name": "cmd_write",
              "docstring": "Write content to a file.",
              "line_range": [
                480,
                505
              ],
              "parameters": [
                "self",
                "args"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_commands.cmd_write",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.cmd_write"
              ],
              "uid_type": "function"
            },
            {
              "name": "cmd_queue",
              "docstring": "Handle queue operations.",
              "line_range": [
                507,
                549
              ],
              "parameters": [
                "self",
                "args"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_commands.cmd_queue",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.cmd_queue"
              ],
              "uid_type": "function"
            },
            {
              "name": "cmd_cache",
              "docstring": "Handle cache operations.",
              "line_range": [
                551,
                590
              ],
              "parameters": [
                "self",
                "args"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_commands.cmd_cache",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.cmd_cache"
              ],
              "uid_type": "function"
            },
            {
              "name": "cmd_copilot",
              "docstring": "Handle Copilot operations.",
              "line_range": [
                592,
                626
              ],
              "parameters": [
                "self",
                "args"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_commands.cmd_copilot",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.cmd_copilot"
              ],
              "uid_type": "function"
            },
            {
              "name": "cmd_config",
              "docstring": "Handle configuration operations.",
              "line_range": [
                628,
                660
              ],
              "parameters": [
                "self",
                "args"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_commands.cmd_config",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.cmd_config"
              ],
              "uid_type": "function"
            },
            {
              "name": "cmd_status",
              "docstring": "Show system status.",
              "line_range": [
                662,
                676
              ],
              "parameters": [
                "self",
                "args"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_commands.cmd_status",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.cmd_status"
              ],
              "uid_type": "function"
            },
            {
              "name": "cmd_backup",
              "docstring": "Create backup of a file.",
              "line_range": [
                678,
                693
              ],
              "parameters": [
                "self",
                "args"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_commands.cmd_backup",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.cmd_backup"
              ],
              "uid_type": "function"
            },
            {
              "name": "cmd_parse",
              "docstring": "Parse project structure.",
              "line_range": [
                695,
                715
              ],
              "parameters": [
                "self",
                "args"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_commands.cmd_parse",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.cmd_parse"
              ],
              "uid_type": "function"
            },
            {
              "name": "cmd_audit",
              "docstring": "Handle audit operations.",
              "line_range": [
                717,
                743
              ],
              "parameters": [
                "self",
                "args"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_commands.cmd_audit",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.cmd_audit"
              ],
              "uid_type": "function"
            },
            {
              "name": "handle_auto_update",
              "docstring": "Handle auto-update operations.",
              "line_range": [
                745,
                765
              ],
              "parameters": [
                "self",
                "args"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_commands.handle_auto_update",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.handle_auto_update"
              ],
              "uid_type": "function"
            },
            {
              "name": "handle_struct_status",
              "docstring": "Handle struct status operations.",
              "line_range": [
                767,
                791
              ],
              "parameters": [
                "self",
                "args"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_commands.handle_struct_status",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.handle_struct_status"
              ],
              "uid_type": "function"
            },
            {
              "name": "cmd_context",
              "docstring": "Handle context operations.",
              "line_range": [
                793,
                849
              ],
              "parameters": [
                "self",
                "args"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_commands.cmd_context",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.cmd_context"
              ],
              "uid_type": "function"
            },
            {
              "name": "cmd_session",
              "docstring": "Handle session operations.",
              "line_range": [
                851,
                902
              ],
              "parameters": [
                "self",
                "args"
              ],
              "decorators": [],
              "uid": "llmstruct.ARCHIVE.cli_commands.cmd_session",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.cmd_session"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [
            {
              "name": "CommandProcessor",
              "docstring": "Processes CLI commands and user prompts.",
              "line_range": [
                30,
                902
              ],
              "methods": [
                {
                  "name": "__init__",
                  "docstring": "Initialize command processor.",
                  "line_range": [
                    33,
                    72
                  ],
                  "parameters": [
                    "self",
                    "root_dir",
                    "config",
                    "utils"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.__init__",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_commands",
                    "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                    "llmstruct.ARCHIVE.cli_commands.CommandProcessor.__init__"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "set_cache",
                  "docstring": "Set cache instance.",
                  "line_range": [
                    74,
                    76
                  ],
                  "parameters": [
                    "self",
                    "cache"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.set_cache",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_commands",
                    "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                    "llmstruct.ARCHIVE.cli_commands.CommandProcessor.set_cache"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "set_copilot",
                  "docstring": "Set Copilot manager instance.",
                  "line_range": [
                    78,
                    80
                  ],
                  "parameters": [
                    "self",
                    "copilot_manager"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.set_copilot",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_commands",
                    "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                    "llmstruct.ARCHIVE.cli_commands.CommandProcessor.set_copilot"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "process_command",
                  "docstring": "Process a command starting with /.",
                  "line_range": [
                    82,
                    98
                  ],
                  "parameters": [
                    "self",
                    "command_line"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.process_command",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_commands",
                    "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                    "llmstruct.ARCHIVE.cli_commands.CommandProcessor.process_command"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "process_prompt",
                  "docstring": "Process a regular user prompt (not a command).",
                  "line_range": [
                    100,
                    152
                  ],
                  "parameters": [
                    "self",
                    "prompt"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.process_prompt",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_commands",
                    "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                    "llmstruct.ARCHIVE.cli_commands.CommandProcessor.process_prompt"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "cmd_help",
                  "docstring": "Show help information.",
                  "line_range": [
                    154,
                    217
                  ],
                  "parameters": [
                    "self",
                    "args"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_help",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_commands",
                    "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                    "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_help"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "cmd_workspace",
                  "docstring": "Handle workspace state and permissions management.",
                  "line_range": [
                    219,
                    334
                  ],
                  "parameters": [
                    "self",
                    "args"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_workspace",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_commands",
                    "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                    "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_workspace"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "cmd_mode",
                  "docstring": "Handle context mode operations with workspace integration.",
                  "line_range": [
                    336,
                    437
                  ],
                  "parameters": [
                    "self",
                    "args"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_mode",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_commands",
                    "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                    "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_mode"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "cmd_view",
                  "docstring": "View file or directory contents.",
                  "line_range": [
                    439,
                    478
                  ],
                  "parameters": [
                    "self",
                    "args"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_view",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_commands",
                    "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                    "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_view"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "cmd_write",
                  "docstring": "Write content to a file.",
                  "line_range": [
                    480,
                    505
                  ],
                  "parameters": [
                    "self",
                    "args"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_write",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_commands",
                    "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                    "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_write"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "cmd_queue",
                  "docstring": "Handle queue operations.",
                  "line_range": [
                    507,
                    549
                  ],
                  "parameters": [
                    "self",
                    "args"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_queue",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_commands",
                    "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                    "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_queue"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "cmd_cache",
                  "docstring": "Handle cache operations.",
                  "line_range": [
                    551,
                    590
                  ],
                  "parameters": [
                    "self",
                    "args"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_cache",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_commands",
                    "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                    "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_cache"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "cmd_copilot",
                  "docstring": "Handle Copilot operations.",
                  "line_range": [
                    592,
                    626
                  ],
                  "parameters": [
                    "self",
                    "args"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_copilot",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_commands",
                    "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                    "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_copilot"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "cmd_config",
                  "docstring": "Handle configuration operations.",
                  "line_range": [
                    628,
                    660
                  ],
                  "parameters": [
                    "self",
                    "args"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_config",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_commands",
                    "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                    "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_config"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "cmd_status",
                  "docstring": "Show system status.",
                  "line_range": [
                    662,
                    676
                  ],
                  "parameters": [
                    "self",
                    "args"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_status",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_commands",
                    "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                    "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_status"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "cmd_backup",
                  "docstring": "Create backup of a file.",
                  "line_range": [
                    678,
                    693
                  ],
                  "parameters": [
                    "self",
                    "args"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_backup",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_commands",
                    "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                    "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_backup"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "cmd_parse",
                  "docstring": "Parse project structure.",
                  "line_range": [
                    695,
                    715
                  ],
                  "parameters": [
                    "self",
                    "args"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_parse",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_commands",
                    "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                    "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_parse"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "cmd_audit",
                  "docstring": "Handle audit operations.",
                  "line_range": [
                    717,
                    743
                  ],
                  "parameters": [
                    "self",
                    "args"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_audit",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_commands",
                    "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                    "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_audit"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "handle_auto_update",
                  "docstring": "Handle auto-update operations.",
                  "line_range": [
                    745,
                    765
                  ],
                  "parameters": [
                    "self",
                    "args"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.handle_auto_update",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_commands",
                    "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                    "llmstruct.ARCHIVE.cli_commands.CommandProcessor.handle_auto_update"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "handle_struct_status",
                  "docstring": "Handle struct status operations.",
                  "line_range": [
                    767,
                    791
                  ],
                  "parameters": [
                    "self",
                    "args"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.handle_struct_status",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_commands",
                    "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                    "llmstruct.ARCHIVE.cli_commands.CommandProcessor.handle_struct_status"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "cmd_context",
                  "docstring": "Handle context operations.",
                  "line_range": [
                    793,
                    849
                  ],
                  "parameters": [
                    "self",
                    "args"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_context",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_commands",
                    "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                    "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_context"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "cmd_session",
                  "docstring": "Handle session operations.",
                  "line_range": [
                    851,
                    902
                  ],
                  "parameters": [
                    "self",
                    "args"
                  ],
                  "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_session",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.ARCHIVE",
                    "llmstruct.ARCHIVE.cli_commands",
                    "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
                    "llmstruct.ARCHIVE.cli_commands.CommandProcessor.cmd_session"
                  ],
                  "uid_type": "method"
                }
              ],
              "bases": [],
              "uid": "llmstruct.ARCHIVE.cli_commands.CommandProcessor",
              "uid_components": [
                "llmstruct",
                "llmstruct.ARCHIVE",
                "llmstruct.ARCHIVE.cli_commands",
                "llmstruct.ARCHIVE.cli_commands.CommandProcessor"
              ],
              "uid_type": "class"
            }
          ],
          "callgraph": {
            "__init__": [
              "print",
              "WorkspaceStateManager"
            ],
            "set_cache": [],
            "set_copilot": [],
            "process_command": [
              "len",
              "print",
              "logging.error",
              "command_line.split",
              "command_line.strip"
            ],
            "process_prompt": [
              "context_data.get",
              "logging.warning",
              "len",
              "context_info.get",
              "print",
              "prompt.strip",
              "logging.error",
              "CopilotEvent",
              "logging.info",
              "get_optimized_context"
            ],
            "cmd_help": [
              "print"
            ],
            "cmd_workspace": [
              "state.get",
              "len",
              "action_args.split",
              "print",
              "args.strip",
              "boundaries.get",
              "logging.error",
              "int",
              "entry.get",
              "override.get",
              "result.get",
              "permissions.get"
            ],
            "cmd_mode": [
              "permissions.get",
              "len",
              "context_data.get",
              "args.upper",
              "print",
              "args.strip",
              "re.findall",
              "result.get",
              "args.lower",
              "metrics.get",
              "get_optimized_context"
            ],
            "cmd_view": [
              "print",
              "args.strip",
              "os.listdir",
              "sorted"
            ],
            "cmd_write": [
              "len",
              "args.split",
              "print",
              "content.startswith",
              "content.endswith"
            ],
            "cmd_queue": [
              "cmd.get",
              "os.remove",
              "len",
              "print",
              "args.strip",
              "open",
              "queue_data.get",
              "json.load",
              "enumerate"
            ],
            "cmd_cache": [
              "len",
              "print",
              "args.strip",
              "os.listdir",
              "stats.get"
            ],
            "cmd_copilot": [
              "print",
              "args.strip",
              "open",
              "json.dumps",
              "json.load"
            ],
            "cmd_config": [
              "json.dumps",
              "print",
              "args.strip"
            ],
            "cmd_status": [
              "print"
            ],
            "cmd_backup": [
              "print",
              "args.strip"
            ],
            "cmd_parse": [
              "print",
              "generate_json"
            ],
            "cmd_audit": [
              "print",
              "args.strip"
            ],
            "handle_auto_update": [
              "print",
              "generate_json"
            ],
            "handle_struct_status": [
              "datetime.fromtimestamp",
              "len",
              "os.stat",
              "print",
              "open",
              "json.load",
              "struct_data.get"
            ],
            "cmd_context": [
              "context_data.get",
              "len",
              "print",
              "args.strip",
              "metrics.get",
              "get_optimized_context"
            ],
            "cmd_session": [
              "state.get",
              "len",
              "print",
              "args.strip",
              "datetime.now"
            ]
          },
          "dependencies": [
            "Any",
            "CLIConfig",
            "CLIUtils",
            "CopilotContextManager",
            "CopilotEvent",
            "Dict",
            "JSONCache",
            "List",
            "Optional",
            "Path",
            "WorkspaceStateManager",
            "cli_config",
            "cli_utils",
            "copilot",
            "create_context_orchestrator",
            "datetime",
            "generate_json",
            "get_optimized_context",
            "get_optimized_context_for_scenario",
            "initialize_copilot",
            "json",
            "llmstruct.cache",
            "llmstruct.context_orchestrator",
            "llmstruct.copilot",
            "llmstruct.generators.json_generator",
            "logging",
            "os",
            "pathlib",
            "re",
            "subprocess",
            "sys",
            "trigger_copilot_event",
            "typing",
            "workspace"
          ],
          "hash": "dd0d9e75fb410d85bfe10f3e554b2fa45c45847ccb317cd54107e4ac6ce33bec",
          "uid": "llmstruct.ARCHIVE.cli_commands",
          "uid_components": [
            "llmstruct",
            "llmstruct.ARCHIVE",
            "llmstruct.ARCHIVE.cli_commands"
          ],
          "uid_type": "module",
          "artifact_id": "f979850f-f5e1-f09f-c3f4-b432640bef6f",
          "metrics": {
            "cyclomatic_complexity": 24,
            "lines_of_code": 220,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 34,
            "test_coverage": 0.0,
            "maintainability_index": 0
          },
          "markdown_anchor": {
            "id": "llmstruct-archive-cli_commands",
            "title": "Module: llmstruct.ARCHIVE.cli_commands",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.ARCHIVE.cli_commands](#llmstruct-archive-cli_commands)",
            "html_anchor": "<a id=\"llmstruct-archive-cli_commands\"></a>"
          }
        }
      ],
      "api": [
        {
          "module_id": "llmstruct.api.__init__",
          "path": "llmstruct/api/__init__.py",
          "category": "cli",
          "module_doc": "LLMStruct FastAPI Module\n\nProvides HTTP REST API access to LLMStruct CLI functionality.",
          "functions": [],
          "classes": [],
          "callgraph": {},
          "dependencies": [],
          "hash": "a9ca65f873c3361ae7a8000072fa4f5b926851fe59f7ae8cecec41df9ba72707",
          "uid": "llmstruct.api.__init__",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.__init__"
          ],
          "uid_type": "module",
          "artifact_id": "58118614-cbf0-0d1d-3c64-ea3b9612e27e",
          "metrics": {
            "cyclomatic_complexity": 0,
            "lines_of_code": 0,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 0,
            "test_coverage": 0.0,
            "maintainability_index": 100
          },
          "markdown_anchor": {
            "id": "llmstruct-api-__init__",
            "title": "Module: llmstruct.api.__init__",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.api.__init__](#llmstruct-api-__init__)",
            "html_anchor": "<a id=\"llmstruct-api-__init__\"></a>"
          }
        },
        {
          "module_id": "llmstruct.api.config",
          "path": "llmstruct/api/config.py",
          "category": "core",
          "module_doc": "Configuration management for LLMStruct FastAPI",
          "functions": [],
          "classes": [
            {
              "name": "Settings",
              "docstring": "Application settings with environment variable support",
              "line_range": [
                12,
                43
              ],
              "methods": [],
              "bases": [
                "BaseSettings"
              ],
              "uid": "llmstruct.api.config.Settings",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.config",
                "llmstruct.api.config.Settings"
              ],
              "uid_type": "class"
            }
          ],
          "callgraph": {},
          "dependencies": [
            "BaseSettings",
            "List",
            "pydantic",
            "pydantic_settings",
            "typing"
          ],
          "hash": "714131daa5c1b3f6d461173939ed6f29e670e6ace0067bac322bd30ca3341f48",
          "uid": "llmstruct.api.config",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.config"
          ],
          "uid_type": "module",
          "artifact_id": "50e13f7c-a4d1-103b-d28c-897977ddb9b6",
          "metrics": {
            "cyclomatic_complexity": 2,
            "lines_of_code": 0,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 5,
            "test_coverage": 0.0,
            "maintainability_index": 90
          },
          "markdown_anchor": {
            "id": "llmstruct-api-config",
            "title": "Module: llmstruct.api.config",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.api.config](#llmstruct-api-config)",
            "html_anchor": "<a id=\"llmstruct-api-config\"></a>"
          }
        },
        {
          "module_id": "llmstruct.api.app",
          "path": "llmstruct/api/app.py",
          "category": "core",
          "module_doc": "Main FastAPI application for LLMStruct",
          "functions": [
            {
              "name": "root",
              "docstring": "Root endpoint with API information",
              "line_range": [
                78,
                86
              ],
              "parameters": [],
              "decorators": [
                "app.get('/', tags=['root'])"
              ],
              "uid": "llmstruct.api.app.root",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.app",
                "llmstruct.api.app.root"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [],
          "callgraph": {
            "root": [
              "app.get"
            ]
          },
          "dependencies": [
            "CORSMiddleware",
            "Depends",
            "FastAPI",
            "GZipMiddleware",
            "api_key_middleware",
            "chat",
            "config",
            "continue_adapter",
            "fastapi",
            "fastapi.middleware.cors",
            "fastapi.middleware.gzip",
            "logging",
            "middleware.auth",
            "middleware.logging",
            "request_logging_middleware",
            "routes",
            "settings",
            "system",
            "uvicorn"
          ],
          "hash": "ce8bc5451d35e263884b85be7e9c7bb6a332b5c3eae63322911e57a1d0eb44c1",
          "uid": "llmstruct.api.app",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.app"
          ],
          "uid_type": "module",
          "artifact_id": "f424d86b-912b-c580-9011-dd5395980137",
          "metrics": {
            "cyclomatic_complexity": 1,
            "lines_of_code": 10,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 19,
            "test_coverage": 0.0,
            "maintainability_index": 95
          },
          "markdown_anchor": {
            "id": "llmstruct-api-app",
            "title": "Module: llmstruct.api.app",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.api.app](#llmstruct-api-app)",
            "html_anchor": "<a id=\"llmstruct-api-app\"></a>"
          }
        }
      ],
      "core": [
        {
          "module_id": "llmstruct.core.summary_system",
          "path": "llmstruct/core/summary_system.py",
          "category": "core",
          "module_doc": "Smart Summary System for LLMStruct v2.1\n\nProvides intelligent summary generation with fallback hierarchy:\n1. Docstring extraction\n2. LLM-generated summaries with caching\n3. Default fallbacks\n\nUses professional tools:\n- radon: Code complexity metrics\n- pydantic: Data validation and models\n- openai/anthropic: LLM integration",
          "functions": [
            {
              "name": "create_summary_system",
              "docstring": "Create Smart Summary System with optional LLM configuration.\n\nArgs:\n    llm_config: Optional LLM provider configuration\n    \nReturns:\n    Configured SmartSummarySystem instance",
              "line_range": [
                452,
                462
              ],
              "parameters": [
                "llm_config"
              ],
              "decorators": [],
              "uid": "llmstruct.core.summary_system.create_summary_system",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.summary_system",
                "llmstruct.core.summary_system.create_summary_system"
              ],
              "uid_type": "function"
            },
            {
              "name": "enhance_entity_with_smart_summary",
              "docstring": "Enhance entity with smart summary and radon metrics.\n\nArgs:\n    entity: Code entity to enhance\n    summary_system: SmartSummarySystem instance\n    \nReturns:\n    Enhanced entity with smart summary and professional metrics",
              "line_range": [
                465,
                490
              ],
              "parameters": [
                "entity",
                "summary_system"
              ],
              "decorators": [],
              "uid": "llmstruct.core.summary_system.enhance_entity_with_smart_summary",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.summary_system",
                "llmstruct.core.summary_system.enhance_entity_with_smart_summary"
              ],
              "uid_type": "function"
            },
            {
              "name": "__init__",
              "docstring": "Initialize Smart Summary System.\n\nArgs:\n    llm_config: LLM provider configuration\n    cache_dir: Directory for caching LLM responses",
              "line_range": [
                84,
                104
              ],
              "parameters": [
                "self",
                "llm_config",
                "cache_dir"
              ],
              "decorators": [],
              "uid": "llmstruct.core.summary_system.__init__",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.summary_system",
                "llmstruct.core.summary_system.__init__"
              ],
              "uid_type": "function"
            },
            {
              "name": "_setup_llm_client",
              "docstring": "Setup LLM client based on provider.",
              "line_range": [
                106,
                120
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "llmstruct.core.summary_system._setup_llm_client",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.summary_system",
                "llmstruct.core.summary_system._setup_llm_client"
              ],
              "uid_type": "function"
            },
            {
              "name": "calculate_radon_metrics",
              "docstring": "Calculate code metrics using Radon.\n\nArgs:\n    code: Source code content\n    file_path: File path for caching\n    \nReturns:\n    RadonMetrics with professional complexity analysis",
              "line_range": [
                122,
                175
              ],
              "parameters": [
                "self",
                "code",
                "file_path"
              ],
              "decorators": [],
              "uid": "llmstruct.core.summary_system.calculate_radon_metrics",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.summary_system",
                "llmstruct.core.summary_system.calculate_radon_metrics"
              ],
              "uid_type": "function"
            },
            {
              "name": "extract_docstring_summary",
              "docstring": "Extract summary from docstring.\n\nArgs:\n    entity: Code entity (function, class, module)\n    \nReturns:\n    Extracted summary or None",
              "line_range": [
                177,
                199
              ],
              "parameters": [
                "self",
                "entity"
              ],
              "decorators": [],
              "uid": "llmstruct.core.summary_system.extract_docstring_summary",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.summary_system",
                "llmstruct.core.summary_system.extract_docstring_summary"
              ],
              "uid_type": "function"
            },
            {
              "name": "generate_llm_summary",
              "docstring": "Generate summary using LLM.\n\nArgs:\n    entity: Code entity to summarize\n    context: Additional context (module, project info)\n    \nReturns:\n    LLM-generated summary or None",
              "line_range": [
                201,
                261
              ],
              "parameters": [
                "self",
                "entity",
                "context"
              ],
              "decorators": [],
              "uid": "llmstruct.core.summary_system.generate_llm_summary",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.summary_system",
                "llmstruct.core.summary_system.generate_llm_summary"
              ],
              "uid_type": "function"
            },
            {
              "name": "_create_summary_prompt",
              "docstring": "Create prompt for LLM summary generation.",
              "line_range": [
                263,
                289
              ],
              "parameters": [
                "self",
                "entity",
                "context"
              ],
              "decorators": [],
              "uid": "llmstruct.core.summary_system._create_summary_prompt",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.summary_system",
                "llmstruct.core.summary_system._create_summary_prompt"
              ],
              "uid_type": "function"
            },
            {
              "name": "_load_cached_summary",
              "docstring": "Load cached LLM summary.",
              "line_range": [
                291,
                311
              ],
              "parameters": [
                "self",
                "cache_key"
              ],
              "decorators": [],
              "uid": "llmstruct.core.summary_system._load_cached_summary",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.summary_system",
                "llmstruct.core.summary_system._load_cached_summary"
              ],
              "uid_type": "function"
            },
            {
              "name": "_save_cached_summary",
              "docstring": "Save LLM summary to cache.",
              "line_range": [
                313,
                324
              ],
              "parameters": [
                "self",
                "cache_key",
                "summary"
              ],
              "decorators": [],
              "uid": "llmstruct.core.summary_system._save_cached_summary",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.summary_system",
                "llmstruct.core.summary_system._save_cached_summary"
              ],
              "uid_type": "function"
            },
            {
              "name": "generate_smart_summary",
              "docstring": "Generate smart summary with fallback hierarchy.\n\nArgs:\n    entity: Code entity to summarize\n    context: Additional context\n    \nReturns:\n    CodeSummary with intelligent summary and metadata",
              "line_range": [
                326,
                386
              ],
              "parameters": [
                "self",
                "entity",
                "context"
              ],
              "decorators": [],
              "uid": "llmstruct.core.summary_system.generate_smart_summary",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.summary_system",
                "llmstruct.core.summary_system.generate_smart_summary"
              ],
              "uid_type": "function"
            },
            {
              "name": "_generate_fallback_summary",
              "docstring": "Generate fallback summary using heuristics.",
              "line_range": [
                388,
                415
              ],
              "parameters": [
                "self",
                "entity"
              ],
              "decorators": [],
              "uid": "llmstruct.core.summary_system._generate_fallback_summary",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.summary_system",
                "llmstruct.core.summary_system._generate_fallback_summary"
              ],
              "uid_type": "function"
            },
            {
              "name": "_generate_tags",
              "docstring": "Generate categorization tags.",
              "line_range": [
                417,
                448
              ],
              "parameters": [
                "self",
                "entity",
                "summary"
              ],
              "decorators": [],
              "uid": "llmstruct.core.summary_system._generate_tags",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.summary_system",
                "llmstruct.core.summary_system._generate_tags"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [
            {
              "name": "SummarySource",
              "docstring": "Pydantic model for summary source tracking.",
              "line_range": [
                35,
                44
              ],
              "methods": [],
              "bases": [
                "BaseModel"
              ],
              "uid": "llmstruct.core.summary_system.SummarySource",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.summary_system",
                "llmstruct.core.summary_system.SummarySource"
              ],
              "uid_type": "class"
            },
            {
              "name": "CodeSummary",
              "docstring": "Pydantic model for code entity summary.",
              "line_range": [
                47,
                54
              ],
              "methods": [],
              "bases": [
                "BaseModel"
              ],
              "uid": "llmstruct.core.summary_system.CodeSummary",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.summary_system",
                "llmstruct.core.summary_system.CodeSummary"
              ],
              "uid_type": "class"
            },
            {
              "name": "RadonMetrics",
              "docstring": "Pydantic model for Radon-based code metrics.",
              "line_range": [
                57,
                67
              ],
              "methods": [],
              "bases": [
                "BaseModel"
              ],
              "uid": "llmstruct.core.summary_system.RadonMetrics",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.summary_system",
                "llmstruct.core.summary_system.RadonMetrics"
              ],
              "uid_type": "class"
            },
            {
              "name": "LLMProvider",
              "docstring": "Pydantic model for LLM provider configuration.",
              "line_range": [
                70,
                78
              ],
              "methods": [],
              "bases": [
                "BaseModel"
              ],
              "uid": "llmstruct.core.summary_system.LLMProvider",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.summary_system",
                "llmstruct.core.summary_system.LLMProvider"
              ],
              "uid_type": "class"
            },
            {
              "name": "SmartSummarySystem",
              "docstring": "Smart Summary System with professional tools integration.",
              "line_range": [
                81,
                448
              ],
              "methods": [
                {
                  "name": "__init__",
                  "docstring": "Initialize Smart Summary System.\n\nArgs:\n    llm_config: LLM provider configuration\n    cache_dir: Directory for caching LLM responses",
                  "line_range": [
                    84,
                    104
                  ],
                  "parameters": [
                    "self",
                    "llm_config",
                    "cache_dir"
                  ],
                  "uid": "llmstruct.core.summary_system.SmartSummarySystem.__init__",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.core",
                    "llmstruct.core.summary_system",
                    "llmstruct.core.summary_system.SmartSummarySystem",
                    "llmstruct.core.summary_system.SmartSummarySystem.__init__"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_setup_llm_client",
                  "docstring": "Setup LLM client based on provider.",
                  "line_range": [
                    106,
                    120
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "llmstruct.core.summary_system.SmartSummarySystem._setup_llm_client",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.core",
                    "llmstruct.core.summary_system",
                    "llmstruct.core.summary_system.SmartSummarySystem",
                    "llmstruct.core.summary_system.SmartSummarySystem._setup_llm_client"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "calculate_radon_metrics",
                  "docstring": "Calculate code metrics using Radon.\n\nArgs:\n    code: Source code content\n    file_path: File path for caching\n    \nReturns:\n    RadonMetrics with professional complexity analysis",
                  "line_range": [
                    122,
                    175
                  ],
                  "parameters": [
                    "self",
                    "code",
                    "file_path"
                  ],
                  "uid": "llmstruct.core.summary_system.SmartSummarySystem.calculate_radon_metrics",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.core",
                    "llmstruct.core.summary_system",
                    "llmstruct.core.summary_system.SmartSummarySystem",
                    "llmstruct.core.summary_system.SmartSummarySystem.calculate_radon_metrics"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "extract_docstring_summary",
                  "docstring": "Extract summary from docstring.\n\nArgs:\n    entity: Code entity (function, class, module)\n    \nReturns:\n    Extracted summary or None",
                  "line_range": [
                    177,
                    199
                  ],
                  "parameters": [
                    "self",
                    "entity"
                  ],
                  "uid": "llmstruct.core.summary_system.SmartSummarySystem.extract_docstring_summary",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.core",
                    "llmstruct.core.summary_system",
                    "llmstruct.core.summary_system.SmartSummarySystem",
                    "llmstruct.core.summary_system.SmartSummarySystem.extract_docstring_summary"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "generate_llm_summary",
                  "docstring": "Generate summary using LLM.\n\nArgs:\n    entity: Code entity to summarize\n    context: Additional context (module, project info)\n    \nReturns:\n    LLM-generated summary or None",
                  "line_range": [
                    201,
                    261
                  ],
                  "parameters": [
                    "self",
                    "entity",
                    "context"
                  ],
                  "uid": "llmstruct.core.summary_system.SmartSummarySystem.generate_llm_summary",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.core",
                    "llmstruct.core.summary_system",
                    "llmstruct.core.summary_system.SmartSummarySystem",
                    "llmstruct.core.summary_system.SmartSummarySystem.generate_llm_summary"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_create_summary_prompt",
                  "docstring": "Create prompt for LLM summary generation.",
                  "line_range": [
                    263,
                    289
                  ],
                  "parameters": [
                    "self",
                    "entity",
                    "context"
                  ],
                  "uid": "llmstruct.core.summary_system.SmartSummarySystem._create_summary_prompt",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.core",
                    "llmstruct.core.summary_system",
                    "llmstruct.core.summary_system.SmartSummarySystem",
                    "llmstruct.core.summary_system.SmartSummarySystem._create_summary_prompt"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_load_cached_summary",
                  "docstring": "Load cached LLM summary.",
                  "line_range": [
                    291,
                    311
                  ],
                  "parameters": [
                    "self",
                    "cache_key"
                  ],
                  "uid": "llmstruct.core.summary_system.SmartSummarySystem._load_cached_summary",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.core",
                    "llmstruct.core.summary_system",
                    "llmstruct.core.summary_system.SmartSummarySystem",
                    "llmstruct.core.summary_system.SmartSummarySystem._load_cached_summary"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_save_cached_summary",
                  "docstring": "Save LLM summary to cache.",
                  "line_range": [
                    313,
                    324
                  ],
                  "parameters": [
                    "self",
                    "cache_key",
                    "summary"
                  ],
                  "uid": "llmstruct.core.summary_system.SmartSummarySystem._save_cached_summary",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.core",
                    "llmstruct.core.summary_system",
                    "llmstruct.core.summary_system.SmartSummarySystem",
                    "llmstruct.core.summary_system.SmartSummarySystem._save_cached_summary"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "generate_smart_summary",
                  "docstring": "Generate smart summary with fallback hierarchy.\n\nArgs:\n    entity: Code entity to summarize\n    context: Additional context\n    \nReturns:\n    CodeSummary with intelligent summary and metadata",
                  "line_range": [
                    326,
                    386
                  ],
                  "parameters": [
                    "self",
                    "entity",
                    "context"
                  ],
                  "uid": "llmstruct.core.summary_system.SmartSummarySystem.generate_smart_summary",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.core",
                    "llmstruct.core.summary_system",
                    "llmstruct.core.summary_system.SmartSummarySystem",
                    "llmstruct.core.summary_system.SmartSummarySystem.generate_smart_summary"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_generate_fallback_summary",
                  "docstring": "Generate fallback summary using heuristics.",
                  "line_range": [
                    388,
                    415
                  ],
                  "parameters": [
                    "self",
                    "entity"
                  ],
                  "uid": "llmstruct.core.summary_system.SmartSummarySystem._generate_fallback_summary",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.core",
                    "llmstruct.core.summary_system",
                    "llmstruct.core.summary_system.SmartSummarySystem",
                    "llmstruct.core.summary_system.SmartSummarySystem._generate_fallback_summary"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_generate_tags",
                  "docstring": "Generate categorization tags.",
                  "line_range": [
                    417,
                    448
                  ],
                  "parameters": [
                    "self",
                    "entity",
                    "summary"
                  ],
                  "uid": "llmstruct.core.summary_system.SmartSummarySystem._generate_tags",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.core",
                    "llmstruct.core.summary_system",
                    "llmstruct.core.summary_system.SmartSummarySystem",
                    "llmstruct.core.summary_system.SmartSummarySystem._generate_tags"
                  ],
                  "uid_type": "method"
                }
              ],
              "bases": [],
              "uid": "llmstruct.core.summary_system.SmartSummarySystem",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.summary_system",
                "llmstruct.core.summary_system.SmartSummarySystem"
              ],
              "uid_type": "class"
            }
          ],
          "callgraph": {
            "__init__": [
              "LLMProvider",
              "self._setup_llm_client",
              "Path"
            ],
            "_setup_llm_client": [
              "openai.OpenAI",
              "os.getenv",
              "anthropic.Anthropic"
            ],
            "calculate_radon_metrics": [
              "cc_visit",
              "hasattr",
              "h_visit",
              "len",
              "code.split",
              "min",
              "max",
              "mi_visit",
              "hashlib.md5",
              "RadonMetrics",
              "sum",
              "line.strip"
            ],
            "extract_docstring_summary": [
              "line.strip",
              "cleaned.startswith",
              "docstring.strip",
              "entity.get"
            ],
            "generate_llm_summary": [
              "self._create_summary_prompt",
              "print",
              "self._load_cached_summary",
              "json.dumps",
              "hashlib.md5",
              "entity.get",
              "self._save_cached_summary"
            ],
            "_create_summary_prompt": [
              "entity.get"
            ],
            "_load_cached_summary": [
              "timedelta",
              "open",
              "datetime.utcnow",
              "json.load",
              "cache_file.unlink",
              "cache_file.exists",
              "datetime.fromisoformat"
            ],
            "_save_cached_summary": [
              "json.dump",
              "open",
              "datetime.utcnow"
            ],
            "generate_smart_summary": [
              "loop.close",
              "self._generate_fallback_summary",
              "asyncio.new_event_loop",
              "SummarySource",
              "self.generate_llm_summary",
              "asyncio.set_event_loop",
              "json.dumps",
              "self.extract_docstring_summary",
              "loop.run_until_complete",
              "hashlib.md5",
              "self._generate_tags",
              "CodeSummary"
            ],
            "_generate_fallback_summary": [
              "entity_name.split",
              "entity_type.title",
              "entity_name.startswith",
              "entity.get",
              "entity_name.replace"
            ],
            "_generate_tags": [
              "tags.append",
              "summary.lower",
              "list",
              "entity.get",
              "any",
              "set"
            ],
            "create_summary_system": [
              "SmartSummarySystem"
            ],
            "enhance_entity_with_smart_summary": [
              "summary_system.calculate_radon_metrics",
              "radon_metrics.model_dump",
              "summary_system.generate_smart_summary",
              "entity.get",
              "entity.copy",
              "smart_summary.model_dump"
            ]
          },
          "dependencies": [
            "Any",
            "BaseModel",
            "ConfigDict",
            "Dict",
            "Field",
            "List",
            "Optional",
            "Path",
            "UIDType",
            "Union",
            "anthropic",
            "asdict",
            "asyncio",
            "cc_visit",
            "dataclass",
            "dataclasses",
            "datetime",
            "generate_uid",
            "h_visit",
            "hashlib",
            "json",
            "mi_visit",
            "openai",
            "os",
            "pathlib",
            "pydantic",
            "radon.complexity",
            "radon.metrics",
            "timedelta",
            "typing",
            "uid_generator"
          ],
          "hash": "006afd5a946ea85e973cf1820edede05dc0bcde26f3e29646234ee6293b4fcdc",
          "uid": "llmstruct.core.summary_system",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.summary_system"
          ],
          "uid_type": "module",
          "artifact_id": "b37dc2f4-d28c-f82c-a876-b9d582340c34",
          "metrics": {
            "cyclomatic_complexity": 23,
            "lines_of_code": 130,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 31,
            "test_coverage": 0.0,
            "maintainability_index": 0
          },
          "markdown_anchor": {
            "id": "llmstruct-core-summary_system",
            "title": "Module: llmstruct.core.summary_system",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.core.summary_system](#llmstruct-core-summary_system)",
            "html_anchor": "<a id=\"llmstruct-core-summary_system\"></a>"
          }
        },
        {
          "module_id": "llmstruct.core.uid_generator",
          "path": "llmstruct/core/uid_generator.py",
          "category": "core",
          "module_doc": "UID Generator for LLMStruct v2.1 - Advanced UID System\n\nProvides stable, FQNAME-based UIDs for modules, classes, functions, and methods.\nReplaces artifact_id with consistent, human-readable identifiers.\n\nExamples:\n    - Module: llmstruct.generators.json_generator\n    - Class: llmstruct.generators.json_generator.JsonGenerator\n    - Function: llmstruct.generators.json_generator.generate_json\n    - Method: llmstruct.generators.json_generator.JsonGenerator.build_toc",
          "functions": [
            {
              "name": "normalize_path_to_module_id",
              "docstring": "Convert file path to module ID format.\n\nArgs:\n    file_path: Path to the file (e.g., \"src/llmstruct/generators/json_generator.py\")\n    root_dir: Root directory path\n    \nReturns:\n    Module ID (e.g., \"llmstruct.generators.json_generator\")",
              "line_range": [
                31,
                60
              ],
              "parameters": [
                "file_path",
                "root_dir"
              ],
              "decorators": [],
              "uid": "llmstruct.core.uid_generator.normalize_path_to_module_id",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.uid_generator",
                "llmstruct.core.uid_generator.normalize_path_to_module_id"
              ],
              "uid_type": "function"
            },
            {
              "name": "generate_uid",
              "docstring": "Generate stable UID based on FQNAME pattern.\n\nArgs:\n    uid_type: Type of the UID (module, class, function, method)\n    module_id: Module identifier (e.g., \"llmstruct.generators.json_generator\")\n    name: Name of the entity (function, class, method name)\n    class_name: Class name for methods/properties\n    parent_uid: Parent UID for nested structures\n    \nReturns:\n    Stable UID string\n    \nExamples:\n    generate_uid(UIDType.MODULE, \"llmstruct.generators.json_generator\", \"\")\n    # -> \"llmstruct.generators.json_generator\"\n    \n    generate_uid(UIDType.FUNCTION, \"llmstruct.generators.json_generator\", \"generate_json\")\n    # -> \"llmstruct.generators.json_generator.generate_json\"\n    \n    generate_uid(UIDType.METHOD, \"llmstruct.generators.json_generator\", \"build_toc\", \"JsonGenerator\")\n    # -> \"llmstruct.generators.json_generator.JsonGenerator.build_toc\"",
              "line_range": [
                63,
                112
              ],
              "parameters": [
                "uid_type",
                "module_id",
                "name",
                "class_name",
                "parent_uid"
              ],
              "decorators": [],
              "uid": "llmstruct.core.uid_generator.generate_uid",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.uid_generator",
                "llmstruct.core.uid_generator.generate_uid"
              ],
              "uid_type": "function"
            },
            {
              "name": "generate_uid_components",
              "docstring": "Generate UID components for UI navigation.\n\nArgs:\n    uid: Full UID string\n    \nReturns:\n    List of UID components for hierarchical navigation\n    \nExample:\n    generate_uid_components(\"llmstruct.generators.json_generator.JsonGenerator.build_toc\")\n    # -> [\n    #     \"llmstruct\",\n    #     \"llmstruct.generators\", \n    #     \"llmstruct.generators.json_generator\",\n    #     \"llmstruct.generators.json_generator.JsonGenerator\",\n    #     \"llmstruct.generators.json_generator.JsonGenerator.build_toc\"\n    # ]",
              "line_range": [
                115,
                142
              ],
              "parameters": [
                "uid"
              ],
              "decorators": [],
              "uid": "llmstruct.core.uid_generator.generate_uid_components",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.uid_generator",
                "llmstruct.core.uid_generator.generate_uid_components"
              ],
              "uid_type": "function"
            },
            {
              "name": "create_stable_uid",
              "docstring": "Create stable UID with components and metadata.\n\nArgs:\n    entity_type: Type of entity (module, class, function, method)\n    module_path: Path to module file  \n    root_dir: Root directory\n    entity_name: Name of the entity\n    class_name: Class name for methods\n    **kwargs: Additional metadata\n    \nReturns:\n    Dictionary with uid, uid_components, and metadata",
              "line_range": [
                145,
                198
              ],
              "parameters": [
                "entity_type",
                "module_path",
                "root_dir",
                "entity_name",
                "class_name"
              ],
              "decorators": [],
              "uid": "llmstruct.core.uid_generator.create_stable_uid",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.uid_generator",
                "llmstruct.core.uid_generator.create_stable_uid"
              ],
              "uid_type": "function"
            },
            {
              "name": "create_legacy_artifact_id",
              "docstring": "Create legacy artifact_id from UID for backward compatibility.\n\nArgs:\n    uid: The UID string\n    \nReturns:\n    UUID-style string based on UID hash",
              "line_range": [
                201,
                215
              ],
              "parameters": [
                "uid"
              ],
              "decorators": [],
              "uid": "llmstruct.core.uid_generator.create_legacy_artifact_id",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.uid_generator",
                "llmstruct.core.uid_generator.create_legacy_artifact_id"
              ],
              "uid_type": "function"
            },
            {
              "name": "migrate_artifact_id_to_uid",
              "docstring": "Migrate existing artifact_id fields to UID system.\n\nArgs:\n    data: Existing JSON data with artifact_id fields\n    root_dir: Root directory for path normalization\n    \nReturns:\n    Updated data with UID fields",
              "line_range": [
                219,
                285
              ],
              "parameters": [
                "data",
                "root_dir"
              ],
              "decorators": [],
              "uid": "llmstruct.core.uid_generator.migrate_artifact_id_to_uid",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.uid_generator",
                "llmstruct.core.uid_generator.migrate_artifact_id_to_uid"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [
            {
              "name": "UIDType",
              "docstring": "Types of UIDs that can be generated.",
              "line_range": [
                20,
                28
              ],
              "methods": [],
              "bases": [
                "Enum"
              ],
              "uid": "llmstruct.core.uid_generator.UIDType",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.uid_generator",
                "llmstruct.core.uid_generator.UIDType"
              ],
              "uid_type": "class"
            }
          ],
          "callgraph": {
            "normalize_path_to_module_id": [
              "path.endswith",
              "module_id.startswith",
              "path.replace",
              "file_path.replace",
              "module_id.endswith"
            ],
            "generate_uid": [],
            "generate_uid_components": [
              "components.append",
              "range",
              "uid.split",
              "len"
            ],
            "create_stable_uid": [
              "normalize_path_to_module_id",
              "generate_uid_components",
              "generate_uid",
              "uid_type_map.get"
            ],
            "create_legacy_artifact_id": [
              "hashlib.md5",
              "uid.encode"
            ],
            "migrate_artifact_id_to_uid": [
              "data.get",
              "migrate_artifact_id_to_uid",
              "isinstance",
              "generate_uid_components",
              "generate_uid",
              "create_legacy_artifact_id",
              "data.items"
            ]
          },
          "dependencies": [
            "Any",
            "Dict",
            "Enum",
            "List",
            "Optional",
            "Union",
            "enum",
            "hashlib",
            "re",
            "typing"
          ],
          "hash": "a8e7d6b1147ce471c300cc7681ce9cc01d2a702b9cd1c66b727e2740a15044f1",
          "uid": "llmstruct.core.uid_generator",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.uid_generator"
          ],
          "uid_type": "module",
          "artifact_id": "6d8e5cde-12d2-3f16-11af-c0d1eeae625d",
          "metrics": {
            "cyclomatic_complexity": 8,
            "lines_of_code": 60,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 10,
            "test_coverage": 0.0,
            "maintainability_index": 60
          },
          "markdown_anchor": {
            "id": "llmstruct-core-uid_generator",
            "title": "Module: llmstruct.core.uid_generator",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.core.uid_generator](#llmstruct-core-uid_generator)",
            "html_anchor": "<a id=\"llmstruct-core-uid_generator\"></a>"
          }
        },
        {
          "module_id": "llmstruct.core.__init__",
          "path": "llmstruct/core/__init__.py",
          "category": "cli",
          "module_doc": "Core LLMStruct v2.1 components for advanced processing.",
          "functions": [],
          "classes": [],
          "callgraph": {},
          "dependencies": [
            "CodeMetrics",
            "CodeSummary",
            "HierarchicalJSON",
            "LLMProvider",
            "MarkdownAnchor",
            "RadonMetrics",
            "SchemaValidationSystem",
            "SmartSummarySystem",
            "SummarySource",
            "UIDType",
            "ValidationLevel",
            "ValidationResult",
            "create_schema_validator",
            "create_stable_uid",
            "create_summary_system",
            "enhance_entity_with_smart_summary",
            "enhance_json_structure",
            "generate_uid",
            "generate_uid_components",
            "json_structure",
            "schema_validation",
            "summary_system",
            "uid_generator",
            "validate_llmstruct_file",
            "validate_llmstruct_json"
          ],
          "hash": "ff2a1df4311c0eec28b850763e40017a7ccec12b8776180097883db0f888fc24",
          "uid": "llmstruct.core.__init__",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.__init__"
          ],
          "uid_type": "module",
          "artifact_id": "f2bc0ecd-f40b-e986-3511-57176dee1b78",
          "metrics": {
            "cyclomatic_complexity": 0,
            "lines_of_code": 0,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 25,
            "test_coverage": 0.0,
            "maintainability_index": 100
          },
          "markdown_anchor": {
            "id": "llmstruct-core-__init__",
            "title": "Module: llmstruct.core.__init__",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.core.__init__](#llmstruct-core-__init__)",
            "html_anchor": "<a id=\"llmstruct-core-__init__\"></a>"
          }
        },
        {
          "module_id": "llmstruct.core.schema_validation",
          "path": "llmstruct/core/schema_validation.py",
          "category": "core",
          "module_doc": "Schema Validation System for LLMStruct v2.1\n\nComprehensive validation system using professional tools:\n- jsonschema: JSON Schema validation (industry standard)\n- cerberus: Flexible validation rules\n- marshmallow: Serialization/deserialization with validation\n- pydantic: Type-safe models with validation\n\nProvides multi-layer validation:\n1. Structure validation (JSON Schema)\n2. Content validation (Cerberus rules)\n3. Type validation (Pydantic models)\n4. Custom business logic validation",
          "functions": [
            {
              "name": "create_schema_validator",
              "docstring": "Create Schema Validation System.\n\nArgs:\n    schema_dir: Directory for validation schemas\n    \nReturns:\n    Configured SchemaValidationSystem instance",
              "line_range": [
                932,
                942
              ],
              "parameters": [
                "schema_dir"
              ],
              "decorators": [],
              "uid": "llmstruct.core.schema_validation.create_schema_validator",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.schema_validation",
                "llmstruct.core.schema_validation.create_schema_validator"
              ],
              "uid_type": "function"
            },
            {
              "name": "validate_llmstruct_json",
              "docstring": "Quick validation of LLMStruct JSON data.\n\nArgs:\n    data: JSON data to validate\n    level: Validation level\n    \nReturns:\n    ValidationResult",
              "line_range": [
                945,
                957
              ],
              "parameters": [
                "data",
                "level"
              ],
              "decorators": [],
              "uid": "llmstruct.core.schema_validation.validate_llmstruct_json",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.schema_validation",
                "llmstruct.core.schema_validation.validate_llmstruct_json"
              ],
              "uid_type": "function"
            },
            {
              "name": "validate_llmstruct_file",
              "docstring": "Quick validation of LLMStruct JSON file.\n\nArgs:\n    file_path: Path to JSON file\n    level: Validation level\n    \nReturns:\n    ValidationResult",
              "line_range": [
                960,
                972
              ],
              "parameters": [
                "file_path",
                "level"
              ],
              "decorators": [],
              "uid": "llmstruct.core.schema_validation.validate_llmstruct_file",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.schema_validation",
                "llmstruct.core.schema_validation.validate_llmstruct_file"
              ],
              "uid_type": "function"
            },
            {
              "name": "__init__",
              "docstring": "Initialize Schema Validation System.\n\nArgs:\n    schema_dir: Directory containing validation schemas",
              "line_range": [
                73,
                92
              ],
              "parameters": [
                "self",
                "schema_dir"
              ],
              "decorators": [],
              "uid": "llmstruct.core.schema_validation.__init__",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.schema_validation",
                "llmstruct.core.schema_validation.__init__"
              ],
              "uid_type": "function"
            },
            {
              "name": "_load_json_schemas",
              "docstring": "Load JSON Schema definitions.",
              "line_range": [
                94,
                269
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "llmstruct.core.schema_validation._load_json_schemas",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.schema_validation",
                "llmstruct.core.schema_validation._load_json_schemas"
              ],
              "uid_type": "function"
            },
            {
              "name": "_load_cerberus_schemas",
              "docstring": "Load Cerberus validation rules.",
              "line_range": [
                271,
                344
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "llmstruct.core.schema_validation._load_cerberus_schemas",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.schema_validation",
                "llmstruct.core.schema_validation._load_cerberus_schemas"
              ],
              "uid_type": "function"
            },
            {
              "name": "_create_marshmallow_schema",
              "docstring": "Create Marshmallow schema for serialization validation.",
              "line_range": [
                346,
                378
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "llmstruct.core.schema_validation._create_marshmallow_schema",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.schema_validation",
                "llmstruct.core.schema_validation._create_marshmallow_schema"
              ],
              "uid_type": "function"
            },
            {
              "name": "_define_validation_levels",
              "docstring": "Define validation levels with increasing strictness.",
              "line_range": [
                380,
                415
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "llmstruct.core.schema_validation._define_validation_levels",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.schema_validation",
                "llmstruct.core.schema_validation._define_validation_levels"
              ],
              "uid_type": "function"
            },
            {
              "name": "validate_json_schema",
              "docstring": "Validate data against JSON Schema.\n\nArgs:\n    data: Data to validate\n    schema_name: Schema to use for validation\n    \nReturns:\n    Tuple of (is_valid, errors)",
              "line_range": [
                417,
                459
              ],
              "parameters": [
                "self",
                "data",
                "schema_name"
              ],
              "decorators": [],
              "uid": "llmstruct.core.schema_validation.validate_json_schema",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.schema_validation",
                "llmstruct.core.schema_validation.validate_json_schema"
              ],
              "uid_type": "function"
            },
            {
              "name": "validate_content_rules",
              "docstring": "Validate data using simple content rules (Cerberus alternative).\n\nArgs:\n    data: Data to validate\n    \nReturns:\n    Tuple of (is_valid, errors)",
              "line_range": [
                461,
                547
              ],
              "parameters": [
                "self",
                "data"
              ],
              "decorators": [],
              "uid": "llmstruct.core.schema_validation.validate_content_rules",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.schema_validation",
                "llmstruct.core.schema_validation.validate_content_rules"
              ],
              "uid_type": "function"
            },
            {
              "name": "validate_marshmallow_schema",
              "docstring": "Validate data using Marshmallow schema.\n\nArgs:\n    data: Data to validate\n    \nReturns:\n    Tuple of (is_valid, errors)",
              "line_range": [
                549,
                580
              ],
              "parameters": [
                "self",
                "data"
              ],
              "decorators": [],
              "uid": "llmstruct.core.schema_validation.validate_marshmallow_schema",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.schema_validation",
                "llmstruct.core.schema_validation.validate_marshmallow_schema"
              ],
              "uid_type": "function"
            },
            {
              "name": "validate_uid_consistency",
              "docstring": "Validate UID consistency across the structure.\n\nArgs:\n    data: Data to validate\n    \nReturns:\n    Tuple of (is_valid, errors)",
              "line_range": [
                582,
                679
              ],
              "parameters": [
                "self",
                "data"
              ],
              "decorators": [],
              "uid": "llmstruct.core.schema_validation.validate_uid_consistency",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.schema_validation",
                "llmstruct.core.schema_validation.validate_uid_consistency"
              ],
              "uid_type": "function"
            },
            {
              "name": "validate_naming_conventions",
              "docstring": "Validate naming conventions.\n\nArgs:\n    data: Data to validate\n    \nReturns:\n    Tuple of (is_valid, errors)",
              "line_range": [
                681,
                726
              ],
              "parameters": [
                "self",
                "data"
              ],
              "decorators": [],
              "uid": "llmstruct.core.schema_validation.validate_naming_conventions",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.schema_validation",
                "llmstruct.core.schema_validation.validate_naming_conventions"
              ],
              "uid_type": "function"
            },
            {
              "name": "validate_quality_checks",
              "docstring": "Perform quality checks on the data.\n\nArgs:\n    data: Data to validate\n    \nReturns:\n    Tuple of (is_valid, errors)",
              "line_range": [
                728,
                777
              ],
              "parameters": [
                "self",
                "data"
              ],
              "decorators": [],
              "uid": "llmstruct.core.schema_validation.validate_quality_checks",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.schema_validation",
                "llmstruct.core.schema_validation.validate_quality_checks"
              ],
              "uid_type": "function"
            },
            {
              "name": "calculate_validation_score",
              "docstring": "Calculate validation score based on errors and warnings.\n\nArgs:\n    errors: List of validation errors\n    warnings: List of validation warnings\n    total_entities: Total number of entities validated\n    \nReturns:\n    Validation score (0-100)",
              "line_range": [
                779,
                804
              ],
              "parameters": [
                "self",
                "errors",
                "warnings",
                "total_entities"
              ],
              "decorators": [],
              "uid": "llmstruct.core.schema_validation.calculate_validation_score",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.schema_validation",
                "llmstruct.core.schema_validation.calculate_validation_score"
              ],
              "uid_type": "function"
            },
            {
              "name": "validate",
              "docstring": "Comprehensive validation of LLMStruct data.\n\nArgs:\n    data: Data to validate\n    level: Validation level (basic, standard, strict, enterprise)\n    \nReturns:\n    ValidationResult with comprehensive validation information",
              "line_range": [
                806,
                888
              ],
              "parameters": [
                "self",
                "data",
                "level"
              ],
              "decorators": [],
              "uid": "llmstruct.core.schema_validation.validate",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.schema_validation",
                "llmstruct.core.schema_validation.validate"
              ],
              "uid_type": "function"
            },
            {
              "name": "validate_file",
              "docstring": "Validate JSON file.\n\nArgs:\n    file_path: Path to JSON file\n    level: Validation level\n    \nReturns:\n    ValidationResult",
              "line_range": [
                890,
                928
              ],
              "parameters": [
                "self",
                "file_path",
                "level"
              ],
              "decorators": [],
              "uid": "llmstruct.core.schema_validation.validate_file",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.schema_validation",
                "llmstruct.core.schema_validation.validate_file"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [
            {
              "name": "ValidationResult",
              "docstring": "Pydantic model for validation results.",
              "line_range": [
                37,
                48
              ],
              "methods": [],
              "bases": [
                "BaseModel"
              ],
              "uid": "llmstruct.core.schema_validation.ValidationResult",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.schema_validation",
                "llmstruct.core.schema_validation.ValidationResult"
              ],
              "uid_type": "class"
            },
            {
              "name": "ValidationLevel",
              "docstring": "Pydantic model for validation level configuration.",
              "line_range": [
                51,
                59
              ],
              "methods": [],
              "bases": [
                "BaseModel"
              ],
              "uid": "llmstruct.core.schema_validation.ValidationLevel",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.schema_validation",
                "llmstruct.core.schema_validation.ValidationLevel"
              ],
              "uid_type": "class"
            },
            {
              "name": "SchemaValidationSystem",
              "docstring": "Comprehensive Schema Validation System using professional tools.\n\nValidation Layers:\n1. JSON Schema - Structure validation\n2. Cerberus - Content validation  \n3. Pydantic - Type validation\n4. Custom - Business logic validation",
              "line_range": [
                62,
                928
              ],
              "methods": [
                {
                  "name": "__init__",
                  "docstring": "Initialize Schema Validation System.\n\nArgs:\n    schema_dir: Directory containing validation schemas",
                  "line_range": [
                    73,
                    92
                  ],
                  "parameters": [
                    "self",
                    "schema_dir"
                  ],
                  "uid": "llmstruct.core.schema_validation.SchemaValidationSystem.__init__",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.core",
                    "llmstruct.core.schema_validation",
                    "llmstruct.core.schema_validation.SchemaValidationSystem",
                    "llmstruct.core.schema_validation.SchemaValidationSystem.__init__"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_load_json_schemas",
                  "docstring": "Load JSON Schema definitions.",
                  "line_range": [
                    94,
                    269
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "llmstruct.core.schema_validation.SchemaValidationSystem._load_json_schemas",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.core",
                    "llmstruct.core.schema_validation",
                    "llmstruct.core.schema_validation.SchemaValidationSystem",
                    "llmstruct.core.schema_validation.SchemaValidationSystem._load_json_schemas"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_load_cerberus_schemas",
                  "docstring": "Load Cerberus validation rules.",
                  "line_range": [
                    271,
                    344
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "llmstruct.core.schema_validation.SchemaValidationSystem._load_cerberus_schemas",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.core",
                    "llmstruct.core.schema_validation",
                    "llmstruct.core.schema_validation.SchemaValidationSystem",
                    "llmstruct.core.schema_validation.SchemaValidationSystem._load_cerberus_schemas"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_create_marshmallow_schema",
                  "docstring": "Create Marshmallow schema for serialization validation.",
                  "line_range": [
                    346,
                    378
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "llmstruct.core.schema_validation.SchemaValidationSystem._create_marshmallow_schema",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.core",
                    "llmstruct.core.schema_validation",
                    "llmstruct.core.schema_validation.SchemaValidationSystem",
                    "llmstruct.core.schema_validation.SchemaValidationSystem._create_marshmallow_schema"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_define_validation_levels",
                  "docstring": "Define validation levels with increasing strictness.",
                  "line_range": [
                    380,
                    415
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "llmstruct.core.schema_validation.SchemaValidationSystem._define_validation_levels",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.core",
                    "llmstruct.core.schema_validation",
                    "llmstruct.core.schema_validation.SchemaValidationSystem",
                    "llmstruct.core.schema_validation.SchemaValidationSystem._define_validation_levels"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "validate_json_schema",
                  "docstring": "Validate data against JSON Schema.\n\nArgs:\n    data: Data to validate\n    schema_name: Schema to use for validation\n    \nReturns:\n    Tuple of (is_valid, errors)",
                  "line_range": [
                    417,
                    459
                  ],
                  "parameters": [
                    "self",
                    "data",
                    "schema_name"
                  ],
                  "uid": "llmstruct.core.schema_validation.SchemaValidationSystem.validate_json_schema",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.core",
                    "llmstruct.core.schema_validation",
                    "llmstruct.core.schema_validation.SchemaValidationSystem",
                    "llmstruct.core.schema_validation.SchemaValidationSystem.validate_json_schema"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "validate_content_rules",
                  "docstring": "Validate data using simple content rules (Cerberus alternative).\n\nArgs:\n    data: Data to validate\n    \nReturns:\n    Tuple of (is_valid, errors)",
                  "line_range": [
                    461,
                    547
                  ],
                  "parameters": [
                    "self",
                    "data"
                  ],
                  "uid": "llmstruct.core.schema_validation.SchemaValidationSystem.validate_content_rules",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.core",
                    "llmstruct.core.schema_validation",
                    "llmstruct.core.schema_validation.SchemaValidationSystem",
                    "llmstruct.core.schema_validation.SchemaValidationSystem.validate_content_rules"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "validate_marshmallow_schema",
                  "docstring": "Validate data using Marshmallow schema.\n\nArgs:\n    data: Data to validate\n    \nReturns:\n    Tuple of (is_valid, errors)",
                  "line_range": [
                    549,
                    580
                  ],
                  "parameters": [
                    "self",
                    "data"
                  ],
                  "uid": "llmstruct.core.schema_validation.SchemaValidationSystem.validate_marshmallow_schema",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.core",
                    "llmstruct.core.schema_validation",
                    "llmstruct.core.schema_validation.SchemaValidationSystem",
                    "llmstruct.core.schema_validation.SchemaValidationSystem.validate_marshmallow_schema"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "validate_uid_consistency",
                  "docstring": "Validate UID consistency across the structure.\n\nArgs:\n    data: Data to validate\n    \nReturns:\n    Tuple of (is_valid, errors)",
                  "line_range": [
                    582,
                    679
                  ],
                  "parameters": [
                    "self",
                    "data"
                  ],
                  "uid": "llmstruct.core.schema_validation.SchemaValidationSystem.validate_uid_consistency",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.core",
                    "llmstruct.core.schema_validation",
                    "llmstruct.core.schema_validation.SchemaValidationSystem",
                    "llmstruct.core.schema_validation.SchemaValidationSystem.validate_uid_consistency"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "validate_naming_conventions",
                  "docstring": "Validate naming conventions.\n\nArgs:\n    data: Data to validate\n    \nReturns:\n    Tuple of (is_valid, errors)",
                  "line_range": [
                    681,
                    726
                  ],
                  "parameters": [
                    "self",
                    "data"
                  ],
                  "uid": "llmstruct.core.schema_validation.SchemaValidationSystem.validate_naming_conventions",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.core",
                    "llmstruct.core.schema_validation",
                    "llmstruct.core.schema_validation.SchemaValidationSystem",
                    "llmstruct.core.schema_validation.SchemaValidationSystem.validate_naming_conventions"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "validate_quality_checks",
                  "docstring": "Perform quality checks on the data.\n\nArgs:\n    data: Data to validate\n    \nReturns:\n    Tuple of (is_valid, errors)",
                  "line_range": [
                    728,
                    777
                  ],
                  "parameters": [
                    "self",
                    "data"
                  ],
                  "uid": "llmstruct.core.schema_validation.SchemaValidationSystem.validate_quality_checks",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.core",
                    "llmstruct.core.schema_validation",
                    "llmstruct.core.schema_validation.SchemaValidationSystem",
                    "llmstruct.core.schema_validation.SchemaValidationSystem.validate_quality_checks"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "calculate_validation_score",
                  "docstring": "Calculate validation score based on errors and warnings.\n\nArgs:\n    errors: List of validation errors\n    warnings: List of validation warnings\n    total_entities: Total number of entities validated\n    \nReturns:\n    Validation score (0-100)",
                  "line_range": [
                    779,
                    804
                  ],
                  "parameters": [
                    "self",
                    "errors",
                    "warnings",
                    "total_entities"
                  ],
                  "uid": "llmstruct.core.schema_validation.SchemaValidationSystem.calculate_validation_score",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.core",
                    "llmstruct.core.schema_validation",
                    "llmstruct.core.schema_validation.SchemaValidationSystem",
                    "llmstruct.core.schema_validation.SchemaValidationSystem.calculate_validation_score"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "validate",
                  "docstring": "Comprehensive validation of LLMStruct data.\n\nArgs:\n    data: Data to validate\n    level: Validation level (basic, standard, strict, enterprise)\n    \nReturns:\n    ValidationResult with comprehensive validation information",
                  "line_range": [
                    806,
                    888
                  ],
                  "parameters": [
                    "self",
                    "data",
                    "level"
                  ],
                  "uid": "llmstruct.core.schema_validation.SchemaValidationSystem.validate",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.core",
                    "llmstruct.core.schema_validation",
                    "llmstruct.core.schema_validation.SchemaValidationSystem",
                    "llmstruct.core.schema_validation.SchemaValidationSystem.validate"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "validate_file",
                  "docstring": "Validate JSON file.\n\nArgs:\n    file_path: Path to JSON file\n    level: Validation level\n    \nReturns:\n    ValidationResult",
                  "line_range": [
                    890,
                    928
                  ],
                  "parameters": [
                    "self",
                    "file_path",
                    "level"
                  ],
                  "uid": "llmstruct.core.schema_validation.SchemaValidationSystem.validate_file",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.core",
                    "llmstruct.core.schema_validation",
                    "llmstruct.core.schema_validation.SchemaValidationSystem",
                    "llmstruct.core.schema_validation.SchemaValidationSystem.validate_file"
                  ],
                  "uid_type": "method"
                }
              ],
              "bases": [],
              "uid": "llmstruct.core.schema_validation.SchemaValidationSystem",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.schema_validation",
                "llmstruct.core.schema_validation.SchemaValidationSystem"
              ],
              "uid_type": "class"
            },
            {
              "name": "MetadataSchema",
              "docstring": "",
              "line_range": [
                349,
                357
              ],
              "methods": [],
              "bases": [
                "Schema"
              ],
              "uid": "llmstruct.core.schema_validation.MetadataSchema",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.schema_validation",
                "llmstruct.core.schema_validation.MetadataSchema"
              ],
              "uid_type": "class"
            },
            {
              "name": "ModuleSchema",
              "docstring": "",
              "line_range": [
                359,
                368
              ],
              "methods": [],
              "bases": [
                "Schema"
              ],
              "uid": "llmstruct.core.schema_validation.ModuleSchema",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.schema_validation",
                "llmstruct.core.schema_validation.ModuleSchema"
              ],
              "uid_type": "class"
            },
            {
              "name": "LLMStructSchema",
              "docstring": "",
              "line_range": [
                370,
                376
              ],
              "methods": [],
              "bases": [
                "Schema"
              ],
              "uid": "llmstruct.core.schema_validation.LLMStructSchema",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.schema_validation",
                "llmstruct.core.schema_validation.LLMStructSchema"
              ],
              "uid_type": "class"
            },
            {
              "name": "Meta",
              "docstring": "",
              "line_range": [
                350,
                351
              ],
              "methods": [],
              "bases": [],
              "uid": "llmstruct.core.schema_validation.Meta",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.schema_validation",
                "llmstruct.core.schema_validation.Meta"
              ],
              "uid_type": "class"
            },
            {
              "name": "Meta",
              "docstring": "",
              "line_range": [
                360,
                361
              ],
              "methods": [],
              "bases": [],
              "uid": "llmstruct.core.schema_validation.Meta",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.schema_validation",
                "llmstruct.core.schema_validation.Meta"
              ],
              "uid_type": "class"
            },
            {
              "name": "Meta",
              "docstring": "",
              "line_range": [
                371,
                372
              ],
              "methods": [],
              "bases": [],
              "uid": "llmstruct.core.schema_validation.Meta",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.schema_validation",
                "llmstruct.core.schema_validation.Meta"
              ],
              "uid_type": "class"
            }
          ],
          "callgraph": {
            "__init__": [
              "self._load_cerberus_schemas",
              "Path",
              "Validator",
              "self._define_validation_levels",
              "self._load_json_schemas",
              "self._create_marshmallow_schema"
            ],
            "_load_json_schemas": [],
            "_load_cerberus_schemas": [],
            "_create_marshmallow_schema": [
              "fields.Dict",
              "fields.List",
              "fields.Nested",
              "LLMStructSchema",
              "fields.Str"
            ],
            "_define_validation_levels": [
              "ValidationLevel"
            ],
            "validate_json_schema": [
              "errors.append",
              "list",
              "str",
              "validate"
            ],
            "validate_content_rules": [
              "len",
              "path.endswith",
              "module.get",
              "errors.append",
              "enumerate",
              "str",
              "module_id.replace",
              "metadata.get",
              "func.get"
            ],
            "validate_marshmallow_schema": [
              "errors.append",
              "str"
            ],
            "validate_uid_consistency": [
              "all_uids.add",
              "method.get",
              "data.get",
              "len",
              "toc_item.get",
              "func.get",
              "module.get",
              "errors.append",
              "enumerate",
              "cls.get",
              "set"
            ],
            "validate_naming_conventions": [
              "re.compile",
              "pascal_case_pattern.match",
              "data.get",
              "warnings.append",
              "module.get",
              "snake_case_pattern.match",
              "cls.get",
              "enumerate",
              "func.get"
            ],
            "validate_quality_checks": [
              "data.get",
              "len",
              "warnings.append",
              "radon_metrics.get",
              "module.get",
              "enumerate",
              "func.get"
            ],
            "calculate_validation_score": [
              "max",
              "len",
              "min"
            ],
            "validate": [
              "self.validate_content_rules",
              "data.get",
              "len",
              "self.validate_uid_consistency",
              "ValidationResult",
              "self.validate_naming_conventions",
              "all_errors.extend",
              "module.get",
              "self.calculate_validation_score",
              "self.validate_quality_checks",
              "cls.get",
              "ValueError",
              "all_warnings.extend",
              "all_warnings.append",
              "self.validate_json_schema",
              "self.validate_marshmallow_schema"
            ],
            "validate_file": [
              "ValidationResult",
              "open",
              "json.load",
              "str",
              "self.validate"
            ],
            "create_schema_validator": [
              "SchemaValidationSystem"
            ],
            "validate_llmstruct_json": [
              "create_schema_validator",
              "validator.validate"
            ],
            "validate_llmstruct_file": [
              "validator.validate_file",
              "create_schema_validator"
            ]
          },
          "dependencies": [
            "Any",
            "BaseModel",
            "ConfigDict",
            "Dict",
            "Draft7Validator",
            "Field",
            "List",
            "Optional",
            "Path",
            "Schema",
            "Tuple",
            "UIDType",
            "Union",
            "ValidationError",
            "Validator",
            "cerberus",
            "dataclass",
            "dataclasses",
            "datetime",
            "fields",
            "json",
            "jsonschema",
            "marshmallow",
            "os",
            "pathlib",
            "pydantic",
            "re",
            "typing",
            "uid_generator",
            "validate"
          ],
          "hash": "28dfdcf22d39c9d75c1df60851773a9dcbbd3e303b4bf50334ee22a742c9eca4",
          "uid": "llmstruct.core.schema_validation",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.schema_validation"
          ],
          "uid_type": "module",
          "artifact_id": "a9d8df8b-26d6-d16e-7061-c978efdc9607",
          "metrics": {
            "cyclomatic_complexity": 35,
            "lines_of_code": 170,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 30,
            "test_coverage": 0.0,
            "maintainability_index": 0
          },
          "markdown_anchor": {
            "id": "llmstruct-core-schema_validation",
            "title": "Module: llmstruct.core.schema_validation",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.core.schema_validation](#llmstruct-core-schema_validation)",
            "html_anchor": "<a id=\"llmstruct-core-schema_validation\"></a>"
          }
        },
        {
          "module_id": "llmstruct.core.json_structure",
          "path": "llmstruct/core/json_structure.py",
          "category": "core",
          "module_doc": "Enhanced JSON Structure for LLMStruct v2.1\n\nProvides hierarchical JSON organization, built-in metrics, and markdown anchors.\nOptimizes JSON structure for LLM consumption and human readability.",
          "functions": [
            {
              "name": "enhance_json_structure",
              "docstring": "Convenience function to enhance JSON structure.\n\nArgs:\n    json_data: Original JSON from generators\n    \nReturns:\n    Enhanced JSON with v2.1 features",
              "line_range": [
                207,
                218
              ],
              "parameters": [
                "json_data"
              ],
              "decorators": [],
              "uid": "llmstruct.core.json_structure.enhance_json_structure",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.json_structure",
                "llmstruct.core.json_structure.enhance_json_structure"
              ],
              "uid_type": "function"
            },
            {
              "name": "to_dict",
              "docstring": "Convert to dictionary for JSON serialization.",
              "line_range": [
                26,
                28
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "llmstruct.core.json_structure.to_dict",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.json_structure",
                "llmstruct.core.json_structure.to_dict"
              ],
              "uid_type": "function"
            },
            {
              "name": "to_markdown_link",
              "docstring": "Generate markdown link.",
              "line_range": [
                39,
                41
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "llmstruct.core.json_structure.to_markdown_link",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.json_structure",
                "llmstruct.core.json_structure.to_markdown_link"
              ],
              "uid_type": "function"
            },
            {
              "name": "to_anchor_tag",
              "docstring": "Generate HTML anchor tag.",
              "line_range": [
                43,
                45
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "llmstruct.core.json_structure.to_anchor_tag",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.json_structure",
                "llmstruct.core.json_structure.to_anchor_tag"
              ],
              "uid_type": "function"
            },
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                51,
                54
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "llmstruct.core.json_structure.__init__",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.json_structure",
                "llmstruct.core.json_structure.__init__"
              ],
              "uid_type": "function"
            },
            {
              "name": "generate_enhanced_json",
              "docstring": "Generate enhanced JSON with hierarchical structure and metrics.\n\nArgs:\n    base_json: Original JSON structure from generators\n    \nReturns:\n    Enhanced JSON with hierarchy, metrics, and anchors",
              "line_range": [
                56,
                104
              ],
              "parameters": [
                "self",
                "base_json"
              ],
              "decorators": [],
              "uid": "llmstruct.core.json_structure.generate_enhanced_json",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.json_structure",
                "llmstruct.core.json_structure.generate_enhanced_json"
              ],
              "uid_type": "function"
            },
            {
              "name": "organize_modules_hierarchically",
              "docstring": "Organize modules in hierarchical structure for better navigation.",
              "line_range": [
                106,
                124
              ],
              "parameters": [
                "self",
                "modules"
              ],
              "decorators": [],
              "uid": "llmstruct.core.json_structure.organize_modules_hierarchically",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.json_structure",
                "llmstruct.core.json_structure.organize_modules_hierarchically"
              ],
              "uid_type": "function"
            },
            {
              "name": "_enhance_module",
              "docstring": "Enhance module with metrics and anchors.",
              "line_range": [
                126,
                138
              ],
              "parameters": [
                "self",
                "module"
              ],
              "decorators": [],
              "uid": "llmstruct.core.json_structure._enhance_module",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.json_structure",
                "llmstruct.core.json_structure._enhance_module"
              ],
              "uid_type": "function"
            },
            {
              "name": "_calculate_module_metrics",
              "docstring": "Calculate built-in metrics for module.",
              "line_range": [
                140,
                154
              ],
              "parameters": [
                "self",
                "module"
              ],
              "decorators": [],
              "uid": "llmstruct.core.json_structure._calculate_module_metrics",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.json_structure",
                "llmstruct.core.json_structure._calculate_module_metrics"
              ],
              "uid_type": "function"
            },
            {
              "name": "_generate_markdown_anchor",
              "docstring": "Generate markdown anchor for entity.",
              "line_range": [
                156,
                187
              ],
              "parameters": [
                "self",
                "uid",
                "entity_type",
                "name"
              ],
              "decorators": [],
              "uid": "llmstruct.core.json_structure._generate_markdown_anchor",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.json_structure",
                "llmstruct.core.json_structure._generate_markdown_anchor"
              ],
              "uid_type": "function"
            },
            {
              "name": "_calculate_global_metrics",
              "docstring": "Calculate global project metrics.",
              "line_range": [
                189,
                203
              ],
              "parameters": [
                "self",
                "json_data"
              ],
              "decorators": [],
              "uid": "llmstruct.core.json_structure._calculate_global_metrics",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.json_structure",
                "llmstruct.core.json_structure._calculate_global_metrics"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [
            {
              "name": "CodeMetrics",
              "docstring": "Built-in metrics for code entities.",
              "line_range": [
                16,
                28
              ],
              "methods": [
                {
                  "name": "to_dict",
                  "docstring": "Convert to dictionary for JSON serialization.",
                  "line_range": [
                    26,
                    28
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "llmstruct.core.json_structure.CodeMetrics.to_dict",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.core",
                    "llmstruct.core.json_structure",
                    "llmstruct.core.json_structure.CodeMetrics",
                    "llmstruct.core.json_structure.CodeMetrics.to_dict"
                  ],
                  "uid_type": "method"
                }
              ],
              "bases": [],
              "uid": "llmstruct.core.json_structure.CodeMetrics",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.json_structure",
                "llmstruct.core.json_structure.CodeMetrics"
              ],
              "uid_type": "class"
            },
            {
              "name": "MarkdownAnchor",
              "docstring": "Markdown anchor for documentation generation.",
              "line_range": [
                32,
                45
              ],
              "methods": [
                {
                  "name": "to_markdown_link",
                  "docstring": "Generate markdown link.",
                  "line_range": [
                    39,
                    41
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "llmstruct.core.json_structure.MarkdownAnchor.to_markdown_link",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.core",
                    "llmstruct.core.json_structure",
                    "llmstruct.core.json_structure.MarkdownAnchor",
                    "llmstruct.core.json_structure.MarkdownAnchor.to_markdown_link"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "to_anchor_tag",
                  "docstring": "Generate HTML anchor tag.",
                  "line_range": [
                    43,
                    45
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "llmstruct.core.json_structure.MarkdownAnchor.to_anchor_tag",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.core",
                    "llmstruct.core.json_structure",
                    "llmstruct.core.json_structure.MarkdownAnchor",
                    "llmstruct.core.json_structure.MarkdownAnchor.to_anchor_tag"
                  ],
                  "uid_type": "method"
                }
              ],
              "bases": [],
              "uid": "llmstruct.core.json_structure.MarkdownAnchor",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.json_structure",
                "llmstruct.core.json_structure.MarkdownAnchor"
              ],
              "uid_type": "class"
            },
            {
              "name": "HierarchicalJSON",
              "docstring": "Enhanced JSON structure with hierarchy and metrics.",
              "line_range": [
                48,
                203
              ],
              "methods": [
                {
                  "name": "__init__",
                  "docstring": "",
                  "line_range": [
                    51,
                    54
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "llmstruct.core.json_structure.HierarchicalJSON.__init__",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.core",
                    "llmstruct.core.json_structure",
                    "llmstruct.core.json_structure.HierarchicalJSON",
                    "llmstruct.core.json_structure.HierarchicalJSON.__init__"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "generate_enhanced_json",
                  "docstring": "Generate enhanced JSON with hierarchical structure and metrics.\n\nArgs:\n    base_json: Original JSON structure from generators\n    \nReturns:\n    Enhanced JSON with hierarchy, metrics, and anchors",
                  "line_range": [
                    56,
                    104
                  ],
                  "parameters": [
                    "self",
                    "base_json"
                  ],
                  "uid": "llmstruct.core.json_structure.HierarchicalJSON.generate_enhanced_json",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.core",
                    "llmstruct.core.json_structure",
                    "llmstruct.core.json_structure.HierarchicalJSON",
                    "llmstruct.core.json_structure.HierarchicalJSON.generate_enhanced_json"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "organize_modules_hierarchically",
                  "docstring": "Organize modules in hierarchical structure for better navigation.",
                  "line_range": [
                    106,
                    124
                  ],
                  "parameters": [
                    "self",
                    "modules"
                  ],
                  "uid": "llmstruct.core.json_structure.HierarchicalJSON.organize_modules_hierarchically",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.core",
                    "llmstruct.core.json_structure",
                    "llmstruct.core.json_structure.HierarchicalJSON",
                    "llmstruct.core.json_structure.HierarchicalJSON.organize_modules_hierarchically"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_enhance_module",
                  "docstring": "Enhance module with metrics and anchors.",
                  "line_range": [
                    126,
                    138
                  ],
                  "parameters": [
                    "self",
                    "module"
                  ],
                  "uid": "llmstruct.core.json_structure.HierarchicalJSON._enhance_module",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.core",
                    "llmstruct.core.json_structure",
                    "llmstruct.core.json_structure.HierarchicalJSON",
                    "llmstruct.core.json_structure.HierarchicalJSON._enhance_module"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_calculate_module_metrics",
                  "docstring": "Calculate built-in metrics for module.",
                  "line_range": [
                    140,
                    154
                  ],
                  "parameters": [
                    "self",
                    "module"
                  ],
                  "uid": "llmstruct.core.json_structure.HierarchicalJSON._calculate_module_metrics",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.core",
                    "llmstruct.core.json_structure",
                    "llmstruct.core.json_structure.HierarchicalJSON",
                    "llmstruct.core.json_structure.HierarchicalJSON._calculate_module_metrics"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_generate_markdown_anchor",
                  "docstring": "Generate markdown anchor for entity.",
                  "line_range": [
                    156,
                    187
                  ],
                  "parameters": [
                    "self",
                    "uid",
                    "entity_type",
                    "name"
                  ],
                  "uid": "llmstruct.core.json_structure.HierarchicalJSON._generate_markdown_anchor",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.core",
                    "llmstruct.core.json_structure",
                    "llmstruct.core.json_structure.HierarchicalJSON",
                    "llmstruct.core.json_structure.HierarchicalJSON._generate_markdown_anchor"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_calculate_global_metrics",
                  "docstring": "Calculate global project metrics.",
                  "line_range": [
                    189,
                    203
                  ],
                  "parameters": [
                    "self",
                    "json_data"
                  ],
                  "uid": "llmstruct.core.json_structure.HierarchicalJSON._calculate_global_metrics",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.core",
                    "llmstruct.core.json_structure",
                    "llmstruct.core.json_structure.HierarchicalJSON",
                    "llmstruct.core.json_structure.HierarchicalJSON._calculate_global_metrics"
                  ],
                  "uid_type": "method"
                }
              ],
              "bases": [],
              "uid": "llmstruct.core.json_structure.HierarchicalJSON",
              "uid_components": [
                "llmstruct",
                "llmstruct.core",
                "llmstruct.core.json_structure",
                "llmstruct.core.json_structure.HierarchicalJSON"
              ],
              "uid_type": "class"
            }
          ],
          "callgraph": {
            "to_dict": [
              "asdict"
            ],
            "to_markdown_link": [],
            "to_anchor_tag": [],
            "__init__": [
              "defaultdict"
            ],
            "generate_enhanced_json": [
              "self._generate_markdown_anchor",
              "self.organize_modules_hierarchically",
              "self._enhance_module",
              "base_json.copy",
              "self._calculate_global_metrics",
              "item.get"
            ],
            "organize_modules_hierarchically": [
              "len",
              "defaultdict",
              "self._enhance_module",
              "module.get",
              "dict",
              "module_id.split"
            ],
            "_enhance_module": [
              "self._generate_markdown_anchor",
              "module.get",
              "self._calculate_module_metrics",
              "module.copy"
            ],
            "_calculate_module_metrics": [
              "len",
              "max",
              "module.get",
              "CodeMetrics",
              "sum",
              "func.get"
            ],
            "_generate_markdown_anchor": [
              "anchor.to_anchor_tag",
              "anchor.to_markdown_link",
              "uid.lower",
              "MarkdownAnchor"
            ],
            "_calculate_global_metrics": [
              "len",
              "max",
              "sum",
              "m.get",
              "json_data.get",
              "round"
            ],
            "enhance_json_structure": [
              "HierarchicalJSON",
              "enhancer.generate_enhanced_json"
            ]
          },
          "dependencies": [
            "Any",
            "Dict",
            "List",
            "Optional",
            "Set",
            "Tuple",
            "asdict",
            "collections",
            "dataclass",
            "dataclasses",
            "defaultdict",
            "json",
            "math",
            "typing"
          ],
          "hash": "cfd9ae3d6e46fef871a21099dc6b4dafc3eb8f1c0ba8dd731e5b37ecb4ab0302",
          "uid": "llmstruct.core.json_structure",
          "uid_components": [
            "llmstruct",
            "llmstruct.core",
            "llmstruct.core.json_structure"
          ],
          "uid_type": "module",
          "artifact_id": "623377b6-8fd5-a474-b685-4679c89ec3ef",
          "metrics": {
            "cyclomatic_complexity": 17,
            "lines_of_code": 110,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 14,
            "test_coverage": 0.0,
            "maintainability_index": 15
          },
          "markdown_anchor": {
            "id": "llmstruct-core-json_structure",
            "title": "Module: llmstruct.core.json_structure",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.core.json_structure](#llmstruct-core-json_structure)",
            "html_anchor": "<a id=\"llmstruct-core-json_structure\"></a>"
          }
        }
      ],
      "validators": [
        {
          "module_id": "llmstruct.validators.__init__",
          "path": "llmstruct/validators/__init__.py",
          "category": "cli",
          "module_doc": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
          "functions": [],
          "classes": [],
          "callgraph": {},
          "dependencies": [
            "json_validator",
            "validate_struct_json"
          ],
          "hash": "f0ee4f577643fd8bc74b46fd7debd96cc15683b5a7ad0018bb0788523f4b8d34",
          "uid": "llmstruct.validators.__init__",
          "uid_components": [
            "llmstruct",
            "llmstruct.validators",
            "llmstruct.validators.__init__"
          ],
          "uid_type": "module",
          "artifact_id": "72756c0b-d7ec-c7e6-ce76-7f0970a597c0",
          "metrics": {
            "cyclomatic_complexity": 0,
            "lines_of_code": 0,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 2,
            "test_coverage": 0.0,
            "maintainability_index": 100
          },
          "markdown_anchor": {
            "id": "llmstruct-validators-__init__",
            "title": "Module: llmstruct.validators.__init__",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.validators.__init__](#llmstruct-validators-__init__)",
            "html_anchor": "<a id=\"llmstruct-validators-__init__\"></a>"
          }
        },
        {
          "module_id": "llmstruct.validators.json_validator",
          "path": "llmstruct/validators/json_validator.py",
          "category": "core",
          "module_doc": "",
          "functions": [
            {
              "name": "validate_struct_json",
              "docstring": "Validate a single JSON file against a schema.",
              "line_range": [
                12,
                40
              ],
              "parameters": [
                "json_path",
                "schema_path"
              ],
              "decorators": [],
              "uid": "llmstruct.validators.json_validator.validate_struct_json",
              "uid_components": [
                "llmstruct",
                "llmstruct.validators",
                "llmstruct.validators.json_validator",
                "llmstruct.validators.json_validator.validate_struct_json"
              ],
              "uid_type": "function"
            },
            {
              "name": "validate_directory",
              "docstring": "Validate all JSON files in a directory against a schema.",
              "line_range": [
                43,
                61
              ],
              "parameters": [
                "directory",
                "schema_path",
                "include_patterns",
                "exclude_patterns"
              ],
              "decorators": [],
              "uid": "llmstruct.validators.json_validator.validate_directory",
              "uid_components": [
                "llmstruct",
                "llmstruct.validators",
                "llmstruct.validators.json_validator",
                "llmstruct.validators.json_validator.validate_directory"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [],
          "callgraph": {
            "validate_struct_json": [
              "open",
              "Path",
              "schema_file.exists",
              "logging.error",
              "json_file.exists",
              "json.load",
              "validate",
              "str",
              "logging.info"
            ],
            "validate_directory": [
              "validate_struct_json",
              "Path",
              "str",
              "any",
              "json_file.match"
            ]
          },
          "dependencies": [
            "List",
            "Optional",
            "Path",
            "ValidationError",
            "json",
            "jsonschema",
            "logging",
            "pathlib",
            "sys",
            "typing",
            "validate"
          ],
          "hash": "cc5c6b4f74409f89459ec86a9d59d83cd92c691e95ab4e670e6b8ac8c979a232",
          "uid": "llmstruct.validators.json_validator",
          "uid_components": [
            "llmstruct",
            "llmstruct.validators",
            "llmstruct.validators.json_validator"
          ],
          "uid_type": "module",
          "artifact_id": "1ad2ca4d-0eea-8eb1-e56e-783bab7d7a66",
          "metrics": {
            "cyclomatic_complexity": 2,
            "lines_of_code": 20,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 11,
            "test_coverage": 0.0,
            "maintainability_index": 90
          },
          "markdown_anchor": {
            "id": "llmstruct-validators-json_validator",
            "title": "Module: llmstruct.validators.json_validator",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.validators.json_validator](#llmstruct-validators-json_validator)",
            "html_anchor": "<a id=\"llmstruct-validators-json_validator\"></a>"
          }
        }
      ],
      "parsers": [
        {
          "module_id": "llmstruct.parsers.universal_converter",
          "path": "llmstruct/parsers/universal_converter.py",
          "category": "core",
          "module_doc": "Universal Code Converter - Orchestrates all language parsers\nConverts any codebase to llmstruct JSON format",
          "functions": [
            {
              "name": "main",
              "docstring": "CLI interface for universal converter",
              "line_range": [
                375,
                428
              ],
              "parameters": [],
              "decorators": [],
              "uid": "llmstruct.parsers.universal_converter.main",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.universal_converter",
                "llmstruct.parsers.universal_converter.main"
              ],
              "uid_type": "function"
            },
            {
              "name": "__post_init__",
              "docstring": "",
              "line_range": [
                55,
                62
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "llmstruct.parsers.universal_converter.__post_init__",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.universal_converter",
                "llmstruct.parsers.universal_converter.__post_init__"
              ],
              "uid_type": "function"
            },
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                79,
                82
              ],
              "parameters": [
                "self",
                "config"
              ],
              "decorators": [],
              "uid": "llmstruct.parsers.universal_converter.__init__",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.universal_converter",
                "llmstruct.parsers.universal_converter.__init__"
              ],
              "uid_type": "function"
            },
            {
              "name": "detect_language",
              "docstring": "Detect programming language from file extension",
              "line_range": [
                84,
                92
              ],
              "parameters": [
                "self",
                "file_path"
              ],
              "decorators": [],
              "uid": "llmstruct.parsers.universal_converter.detect_language",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.universal_converter",
                "llmstruct.parsers.universal_converter.detect_language"
              ],
              "uid_type": "function"
            },
            {
              "name": "detect_project_languages",
              "docstring": "Detect all languages in project and count files",
              "line_range": [
                94,
                109
              ],
              "parameters": [
                "self",
                "project_path"
              ],
              "decorators": [],
              "uid": "llmstruct.parsers.universal_converter.detect_project_languages",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.universal_converter",
                "llmstruct.parsers.universal_converter.detect_project_languages"
              ],
              "uid_type": "function"
            },
            {
              "name": "get_project_files",
              "docstring": "Get all relevant files for conversion",
              "line_range": [
                111,
                138
              ],
              "parameters": [
                "self",
                "project_path",
                "language"
              ],
              "decorators": [],
              "uid": "llmstruct.parsers.universal_converter.get_project_files",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.universal_converter",
                "llmstruct.parsers.universal_converter.get_project_files"
              ],
              "uid_type": "function"
            },
            {
              "name": "convert_python_project",
              "docstring": "Convert Python project to llmstruct format",
              "line_range": [
                140,
                171
              ],
              "parameters": [
                "self",
                "project_path"
              ],
              "decorators": [],
              "uid": "llmstruct.parsers.universal_converter.convert_python_project",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.universal_converter",
                "llmstruct.parsers.universal_converter.convert_python_project"
              ],
              "uid_type": "function"
            },
            {
              "name": "convert_go_project",
              "docstring": "Convert Go project to llmstruct format",
              "line_range": [
                173,
                190
              ],
              "parameters": [
                "self",
                "project_path"
              ],
              "decorators": [],
              "uid": "llmstruct.parsers.universal_converter.convert_go_project",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.universal_converter",
                "llmstruct.parsers.universal_converter.convert_go_project"
              ],
              "uid_type": "function"
            },
            {
              "name": "convert_javascript_project",
              "docstring": "Convert JavaScript project to llmstruct format",
              "line_range": [
                192,
                223
              ],
              "parameters": [
                "self",
                "project_path"
              ],
              "decorators": [],
              "uid": "llmstruct.parsers.universal_converter.convert_javascript_project",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.universal_converter",
                "llmstruct.parsers.universal_converter.convert_javascript_project"
              ],
              "uid_type": "function"
            },
            {
              "name": "convert_project",
              "docstring": "Convert any project to llmstruct format",
              "line_range": [
                225,
                250
              ],
              "parameters": [
                "self",
                "project_path",
                "language"
              ],
              "decorators": [],
              "uid": "llmstruct.parsers.universal_converter.convert_project",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.universal_converter",
                "llmstruct.parsers.universal_converter.convert_project"
              ],
              "uid_type": "function"
            },
            {
              "name": "convert_multi_language_project",
              "docstring": "Convert multi-language project with separate sections per language",
              "line_range": [
                252,
                282
              ],
              "parameters": [
                "self",
                "project_path"
              ],
              "decorators": [],
              "uid": "llmstruct.parsers.universal_converter.convert_multi_language_project",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.universal_converter",
                "llmstruct.parsers.universal_converter.convert_multi_language_project"
              ],
              "uid_type": "function"
            },
            {
              "name": "_build_project_structure",
              "docstring": "Build standard llmstruct project structure",
              "line_range": [
                284,
                312
              ],
              "parameters": [
                "self",
                "language",
                "project_path",
                "modules",
                "toc"
              ],
              "decorators": [],
              "uid": "llmstruct.parsers.universal_converter._build_project_structure",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.universal_converter",
                "llmstruct.parsers.universal_converter._build_project_structure"
              ],
              "uid_type": "function"
            },
            {
              "name": "_build_empty_project_structure",
              "docstring": "Build empty structure when conversion fails",
              "line_range": [
                314,
                329
              ],
              "parameters": [
                "self",
                "language",
                "project_path",
                "error"
              ],
              "decorators": [],
              "uid": "llmstruct.parsers.universal_converter._build_empty_project_structure",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.universal_converter",
                "llmstruct.parsers.universal_converter._build_empty_project_structure"
              ],
              "uid_type": "function"
            },
            {
              "name": "_merge_language_results",
              "docstring": "Merge multiple language results into unified structure",
              "line_range": [
                331,
                372
              ],
              "parameters": [
                "self",
                "project_path",
                "language_results"
              ],
              "decorators": [],
              "uid": "llmstruct.parsers.universal_converter._merge_language_results",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.universal_converter",
                "llmstruct.parsers.universal_converter._merge_language_results"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [
            {
              "name": "Language",
              "docstring": "",
              "line_range": [
                33,
                42
              ],
              "methods": [],
              "bases": [
                "Enum"
              ],
              "uid": "llmstruct.parsers.universal_converter.Language",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.universal_converter",
                "llmstruct.parsers.universal_converter.Language"
              ],
              "uid_type": "class"
            },
            {
              "name": "ConverterConfig",
              "docstring": "Configuration for universal converter",
              "line_range": [
                46,
                62
              ],
              "methods": [
                {
                  "name": "__post_init__",
                  "docstring": "",
                  "line_range": [
                    55,
                    62
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "llmstruct.parsers.universal_converter.ConverterConfig.__post_init__",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.parsers",
                    "llmstruct.parsers.universal_converter",
                    "llmstruct.parsers.universal_converter.ConverterConfig",
                    "llmstruct.parsers.universal_converter.ConverterConfig.__post_init__"
                  ],
                  "uid_type": "method"
                }
              ],
              "bases": [],
              "uid": "llmstruct.parsers.universal_converter.ConverterConfig",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.universal_converter",
                "llmstruct.parsers.universal_converter.ConverterConfig"
              ],
              "uid_type": "class"
            },
            {
              "name": "UniversalConverter",
              "docstring": "Universal code converter for any programming language",
              "line_range": [
                65,
                372
              ],
              "methods": [
                {
                  "name": "__init__",
                  "docstring": "",
                  "line_range": [
                    79,
                    82
                  ],
                  "parameters": [
                    "self",
                    "config"
                  ],
                  "uid": "llmstruct.parsers.universal_converter.UniversalConverter.__init__",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.parsers",
                    "llmstruct.parsers.universal_converter",
                    "llmstruct.parsers.universal_converter.UniversalConverter",
                    "llmstruct.parsers.universal_converter.UniversalConverter.__init__"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "detect_language",
                  "docstring": "Detect programming language from file extension",
                  "line_range": [
                    84,
                    92
                  ],
                  "parameters": [
                    "self",
                    "file_path"
                  ],
                  "uid": "llmstruct.parsers.universal_converter.UniversalConverter.detect_language",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.parsers",
                    "llmstruct.parsers.universal_converter",
                    "llmstruct.parsers.universal_converter.UniversalConverter",
                    "llmstruct.parsers.universal_converter.UniversalConverter.detect_language"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "detect_project_languages",
                  "docstring": "Detect all languages in project and count files",
                  "line_range": [
                    94,
                    109
                  ],
                  "parameters": [
                    "self",
                    "project_path"
                  ],
                  "uid": "llmstruct.parsers.universal_converter.UniversalConverter.detect_project_languages",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.parsers",
                    "llmstruct.parsers.universal_converter",
                    "llmstruct.parsers.universal_converter.UniversalConverter",
                    "llmstruct.parsers.universal_converter.UniversalConverter.detect_project_languages"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "get_project_files",
                  "docstring": "Get all relevant files for conversion",
                  "line_range": [
                    111,
                    138
                  ],
                  "parameters": [
                    "self",
                    "project_path",
                    "language"
                  ],
                  "uid": "llmstruct.parsers.universal_converter.UniversalConverter.get_project_files",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.parsers",
                    "llmstruct.parsers.universal_converter",
                    "llmstruct.parsers.universal_converter.UniversalConverter",
                    "llmstruct.parsers.universal_converter.UniversalConverter.get_project_files"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "convert_python_project",
                  "docstring": "Convert Python project to llmstruct format",
                  "line_range": [
                    140,
                    171
                  ],
                  "parameters": [
                    "self",
                    "project_path"
                  ],
                  "uid": "llmstruct.parsers.universal_converter.UniversalConverter.convert_python_project",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.parsers",
                    "llmstruct.parsers.universal_converter",
                    "llmstruct.parsers.universal_converter.UniversalConverter",
                    "llmstruct.parsers.universal_converter.UniversalConverter.convert_python_project"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "convert_go_project",
                  "docstring": "Convert Go project to llmstruct format",
                  "line_range": [
                    173,
                    190
                  ],
                  "parameters": [
                    "self",
                    "project_path"
                  ],
                  "uid": "llmstruct.parsers.universal_converter.UniversalConverter.convert_go_project",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.parsers",
                    "llmstruct.parsers.universal_converter",
                    "llmstruct.parsers.universal_converter.UniversalConverter",
                    "llmstruct.parsers.universal_converter.UniversalConverter.convert_go_project"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "convert_javascript_project",
                  "docstring": "Convert JavaScript project to llmstruct format",
                  "line_range": [
                    192,
                    223
                  ],
                  "parameters": [
                    "self",
                    "project_path"
                  ],
                  "uid": "llmstruct.parsers.universal_converter.UniversalConverter.convert_javascript_project",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.parsers",
                    "llmstruct.parsers.universal_converter",
                    "llmstruct.parsers.universal_converter.UniversalConverter",
                    "llmstruct.parsers.universal_converter.UniversalConverter.convert_javascript_project"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "convert_project",
                  "docstring": "Convert any project to llmstruct format",
                  "line_range": [
                    225,
                    250
                  ],
                  "parameters": [
                    "self",
                    "project_path",
                    "language"
                  ],
                  "uid": "llmstruct.parsers.universal_converter.UniversalConverter.convert_project",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.parsers",
                    "llmstruct.parsers.universal_converter",
                    "llmstruct.parsers.universal_converter.UniversalConverter",
                    "llmstruct.parsers.universal_converter.UniversalConverter.convert_project"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "convert_multi_language_project",
                  "docstring": "Convert multi-language project with separate sections per language",
                  "line_range": [
                    252,
                    282
                  ],
                  "parameters": [
                    "self",
                    "project_path"
                  ],
                  "uid": "llmstruct.parsers.universal_converter.UniversalConverter.convert_multi_language_project",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.parsers",
                    "llmstruct.parsers.universal_converter",
                    "llmstruct.parsers.universal_converter.UniversalConverter",
                    "llmstruct.parsers.universal_converter.UniversalConverter.convert_multi_language_project"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_build_project_structure",
                  "docstring": "Build standard llmstruct project structure",
                  "line_range": [
                    284,
                    312
                  ],
                  "parameters": [
                    "self",
                    "language",
                    "project_path",
                    "modules",
                    "toc"
                  ],
                  "uid": "llmstruct.parsers.universal_converter.UniversalConverter._build_project_structure",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.parsers",
                    "llmstruct.parsers.universal_converter",
                    "llmstruct.parsers.universal_converter.UniversalConverter",
                    "llmstruct.parsers.universal_converter.UniversalConverter._build_project_structure"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_build_empty_project_structure",
                  "docstring": "Build empty structure when conversion fails",
                  "line_range": [
                    314,
                    329
                  ],
                  "parameters": [
                    "self",
                    "language",
                    "project_path",
                    "error"
                  ],
                  "uid": "llmstruct.parsers.universal_converter.UniversalConverter._build_empty_project_structure",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.parsers",
                    "llmstruct.parsers.universal_converter",
                    "llmstruct.parsers.universal_converter.UniversalConverter",
                    "llmstruct.parsers.universal_converter.UniversalConverter._build_empty_project_structure"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_merge_language_results",
                  "docstring": "Merge multiple language results into unified structure",
                  "line_range": [
                    331,
                    372
                  ],
                  "parameters": [
                    "self",
                    "project_path",
                    "language_results"
                  ],
                  "uid": "llmstruct.parsers.universal_converter.UniversalConverter._merge_language_results",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.parsers",
                    "llmstruct.parsers.universal_converter",
                    "llmstruct.parsers.universal_converter.UniversalConverter",
                    "llmstruct.parsers.universal_converter.UniversalConverter._merge_language_results"
                  ],
                  "uid_type": "method"
                }
              ],
              "bases": [],
              "uid": "llmstruct.parsers.universal_converter.UniversalConverter",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.universal_converter",
                "llmstruct.parsers.universal_converter.UniversalConverter"
              ],
              "uid_type": "class"
            }
          ],
          "callgraph": {
            "__post_init__": [],
            "__init__": [
              "JavaScriptParser",
              "GoAnalyzer",
              "ConverterConfig"
            ],
            "detect_language": [
              "Path"
            ],
            "detect_project_languages": [
              "languages.get",
              "any",
              "self.detect_language",
              "os.walk"
            ],
            "get_project_files": [
              "files.append",
              "any",
              "self.detect_language",
              "os.walk"
            ],
            "convert_python_project": [
              "modules.append",
              "len",
              "analyze_python",
              "toc.append",
              "module_data.get",
              "logger.warning",
              "self._build_project_structure",
              "logger.info",
              "self.get_project_files"
            ],
            "convert_go_project": [
              "convert_to_llmstruct_format",
              "logger.info",
              "logger.error",
              "self._build_empty_project_structure",
              "str"
            ],
            "convert_javascript_project": [
              "modules.append",
              "len",
              "toc.append",
              "module_data.get",
              "logger.warning",
              "self._build_project_structure",
              "logger.info",
              "self.get_project_files"
            ],
            "convert_project": [
              "self.convert_python_project",
              "max",
              "ValueError",
              "logger.info",
              "NotImplementedError",
              "self.convert_go_project",
              "languages.keys",
              "self.detect_project_languages",
              "self.convert_javascript_project"
            ],
            "convert_multi_language_project": [
              "self._merge_language_results",
              "self.convert_python_project",
              "logger.warning",
              "ValueError",
              "logger.info",
              "logger.error",
              "self.convert_go_project",
              "languages.keys",
              "self.detect_project_languages",
              "self.convert_javascript_project"
            ],
            "_build_project_structure": [
              "language.title",
              "len",
              "m.get",
              "sum"
            ],
            "_build_empty_project_structure": [],
            "_merge_language_results": [
              "all_modules.append",
              "language_results.keys",
              "all_toc.append",
              "stats.get",
              "list",
              "language_results.items",
              "result.get"
            ],
            "main": [
              "converter.convert_multi_language_project",
              "argparse.ArgumentParser",
              "parser.add_argument",
              "exit",
              "print",
              "open",
              "ConverterConfig",
              "parser.parse_args",
              "UniversalConverter",
              "json.dumps",
              "converter.convert_project",
              "stats.get",
              "logger.error",
              "Language",
              "result.get",
              "f.write",
              "traceback.print_exc"
            ]
          },
          "dependencies": [
            "Any",
            "Dict",
            "Enum",
            "GoAnalyzer",
            "JavaScriptParser",
            "List",
            "Optional",
            "Path",
            "Union",
            "analyze_module",
            "argparse",
            "convert_to_llmstruct_format",
            "dataclass",
            "dataclasses",
            "enum",
            "go_analyzer",
            "javascript_parser",
            "json",
            "logging",
            "os",
            "pathlib",
            "python_parser",
            "sys",
            "traceback",
            "typing"
          ],
          "hash": "e696f22d510dfa07afbd538e69c6d7ac3c8dd4e742905cfe256be1005e0c2b95",
          "uid": "llmstruct.parsers.universal_converter",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.universal_converter"
          ],
          "uid_type": "module",
          "artifact_id": "5cd02ca6-96a7-eb31-2641-504ec44f21da",
          "metrics": {
            "cyclomatic_complexity": 20,
            "lines_of_code": 140,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 25,
            "test_coverage": 0.0,
            "maintainability_index": 0
          },
          "markdown_anchor": {
            "id": "llmstruct-parsers-universal_converter",
            "title": "Module: llmstruct.parsers.universal_converter",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.parsers.universal_converter](#llmstruct-parsers-universal_converter)",
            "html_anchor": "<a id=\"llmstruct-parsers-universal_converter\"></a>"
          }
        },
        {
          "module_id": "llmstruct.parsers.python_parser",
          "path": "llmstruct/parsers/python_parser.py",
          "category": "core",
          "module_doc": "",
          "functions": [
            {
              "name": "infer_category",
              "docstring": "Infer module category based on its path.",
              "line_range": [
                13,
                20
              ],
              "parameters": [
                "file_path"
              ],
              "decorators": [],
              "uid": "llmstruct.parsers.python_parser.infer_category",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.python_parser",
                "llmstruct.parsers.python_parser.infer_category"
              ],
              "uid_type": "function"
            },
            {
              "name": "compute_file_hash",
              "docstring": "Compute SHA-256 hash of file content.",
              "line_range": [
                72,
                79
              ],
              "parameters": [
                "file_path"
              ],
              "decorators": [],
              "uid": "llmstruct.parsers.python_parser.compute_file_hash",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.python_parser",
                "llmstruct.parsers.python_parser.compute_file_hash"
              ],
              "uid_type": "function"
            },
            {
              "name": "analyze_module",
              "docstring": "Analyze Python module and return structured data.",
              "line_range": [
                82,
                154
              ],
              "parameters": [
                "file_path",
                "root_dir",
                "include_ranges",
                "include_hashes"
              ],
              "decorators": [],
              "uid": "llmstruct.parsers.python_parser.analyze_module",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.python_parser",
                "llmstruct.parsers.python_parser.analyze_module"
              ],
              "uid_type": "function"
            },
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                26,
                29
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "llmstruct.parsers.python_parser.__init__",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.python_parser",
                "llmstruct.parsers.python_parser.__init__"
              ],
              "uid_type": "function"
            },
            {
              "name": "visit_Import",
              "docstring": "Capture import statements.",
              "line_range": [
                31,
                35
              ],
              "parameters": [
                "self",
                "node"
              ],
              "decorators": [],
              "uid": "llmstruct.parsers.python_parser.visit_Import",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.python_parser",
                "llmstruct.parsers.python_parser.visit_Import"
              ],
              "uid_type": "function"
            },
            {
              "name": "visit_ImportFrom",
              "docstring": "Capture from-import statements.",
              "line_range": [
                37,
                43
              ],
              "parameters": [
                "self",
                "node"
              ],
              "decorators": [],
              "uid": "llmstruct.parsers.python_parser.visit_ImportFrom",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.python_parser",
                "llmstruct.parsers.python_parser.visit_ImportFrom"
              ],
              "uid_type": "function"
            },
            {
              "name": "visit_FunctionDef",
              "docstring": "Track function definitions and their calls.",
              "line_range": [
                45,
                50
              ],
              "parameters": [
                "self",
                "node"
              ],
              "decorators": [],
              "uid": "llmstruct.parsers.python_parser.visit_FunctionDef",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.python_parser",
                "llmstruct.parsers.python_parser.visit_FunctionDef"
              ],
              "uid_type": "function"
            },
            {
              "name": "visit_AsyncFunctionDef",
              "docstring": "Track async function definitions and their calls.",
              "line_range": [
                52,
                57
              ],
              "parameters": [
                "self",
                "node"
              ],
              "decorators": [],
              "uid": "llmstruct.parsers.python_parser.visit_AsyncFunctionDef",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.python_parser",
                "llmstruct.parsers.python_parser.visit_AsyncFunctionDef"
              ],
              "uid_type": "function"
            },
            {
              "name": "visit_Call",
              "docstring": "Capture function calls.",
              "line_range": [
                59,
                69
              ],
              "parameters": [
                "self",
                "node"
              ],
              "decorators": [],
              "uid": "llmstruct.parsers.python_parser.visit_Call",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.python_parser",
                "llmstruct.parsers.python_parser.visit_Call"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [
            {
              "name": "CallVisitor",
              "docstring": "AST visitor to collect function calls and dependencies.",
              "line_range": [
                23,
                69
              ],
              "methods": [
                {
                  "name": "__init__",
                  "docstring": "",
                  "line_range": [
                    26,
                    29
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "llmstruct.parsers.python_parser.CallVisitor.__init__",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.parsers",
                    "llmstruct.parsers.python_parser",
                    "llmstruct.parsers.python_parser.CallVisitor",
                    "llmstruct.parsers.python_parser.CallVisitor.__init__"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "visit_Import",
                  "docstring": "Capture import statements.",
                  "line_range": [
                    31,
                    35
                  ],
                  "parameters": [
                    "self",
                    "node"
                  ],
                  "uid": "llmstruct.parsers.python_parser.CallVisitor.visit_Import",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.parsers",
                    "llmstruct.parsers.python_parser",
                    "llmstruct.parsers.python_parser.CallVisitor",
                    "llmstruct.parsers.python_parser.CallVisitor.visit_Import"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "visit_ImportFrom",
                  "docstring": "Capture from-import statements.",
                  "line_range": [
                    37,
                    43
                  ],
                  "parameters": [
                    "self",
                    "node"
                  ],
                  "uid": "llmstruct.parsers.python_parser.CallVisitor.visit_ImportFrom",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.parsers",
                    "llmstruct.parsers.python_parser",
                    "llmstruct.parsers.python_parser.CallVisitor",
                    "llmstruct.parsers.python_parser.CallVisitor.visit_ImportFrom"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "visit_FunctionDef",
                  "docstring": "Track function definitions and their calls.",
                  "line_range": [
                    45,
                    50
                  ],
                  "parameters": [
                    "self",
                    "node"
                  ],
                  "uid": "llmstruct.parsers.python_parser.CallVisitor.visit_FunctionDef",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.parsers",
                    "llmstruct.parsers.python_parser",
                    "llmstruct.parsers.python_parser.CallVisitor",
                    "llmstruct.parsers.python_parser.CallVisitor.visit_FunctionDef"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "visit_AsyncFunctionDef",
                  "docstring": "Track async function definitions and their calls.",
                  "line_range": [
                    52,
                    57
                  ],
                  "parameters": [
                    "self",
                    "node"
                  ],
                  "uid": "llmstruct.parsers.python_parser.CallVisitor.visit_AsyncFunctionDef",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.parsers",
                    "llmstruct.parsers.python_parser",
                    "llmstruct.parsers.python_parser.CallVisitor",
                    "llmstruct.parsers.python_parser.CallVisitor.visit_AsyncFunctionDef"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "visit_Call",
                  "docstring": "Capture function calls.",
                  "line_range": [
                    59,
                    69
                  ],
                  "parameters": [
                    "self",
                    "node"
                  ],
                  "uid": "llmstruct.parsers.python_parser.CallVisitor.visit_Call",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.parsers",
                    "llmstruct.parsers.python_parser",
                    "llmstruct.parsers.python_parser.CallVisitor",
                    "llmstruct.parsers.python_parser.CallVisitor.visit_Call"
                  ],
                  "uid_type": "method"
                }
              ],
              "bases": [
                "ast.NodeVisitor"
              ],
              "uid": "llmstruct.parsers.python_parser.CallVisitor",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.python_parser",
                "llmstruct.parsers.python_parser.CallVisitor"
              ],
              "uid_type": "class"
            }
          ],
          "callgraph": {
            "infer_category": [
              "Path"
            ],
            "__init__": [
              "set"
            ],
            "visit_Import": [
              "self.generic_visit"
            ],
            "visit_ImportFrom": [
              "self.generic_visit"
            ],
            "visit_FunctionDef": [
              "self.generic_visit",
              "set"
            ],
            "visit_AsyncFunctionDef": [
              "self.generic_visit",
              "set"
            ],
            "visit_Call": [
              "isinstance",
              "self.generic_visit"
            ],
            "compute_file_hash": [
              "logging.error",
              "hashlib.sha256",
              "open",
              "f.read"
            ],
            "analyze_module": [
              "infer_category",
              "classes.append",
              "ast.walk",
              "ast.unparse",
              "functions.append",
              "ast.get_docstring",
              "isinstance",
              "open",
              "compute_file_hash",
              "ast.parse",
              "Path",
              "logging.error",
              "list",
              "f.read",
              "sorted",
              "CallVisitor",
              "str",
              "visitor.visit"
            ]
          },
          "dependencies": [
            "Any",
            "Dict",
            "Optional",
            "Path",
            "Set",
            "ast",
            "hashlib",
            "logging",
            "os",
            "pathlib",
            "typing"
          ],
          "hash": "555ac7004c99ba854fc4fc4688b583331229077e51dfa999d7aae2cd9f7c21dd",
          "uid": "llmstruct.parsers.python_parser",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.python_parser"
          ],
          "uid_type": "module",
          "artifact_id": "e154ed01-afcb-6bdd-a6fe-19e3c12ab017",
          "metrics": {
            "cyclomatic_complexity": 11,
            "lines_of_code": 90,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 11,
            "test_coverage": 0.0,
            "maintainability_index": 45
          },
          "markdown_anchor": {
            "id": "llmstruct-parsers-python_parser",
            "title": "Module: llmstruct.parsers.python_parser",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.parsers.python_parser](#llmstruct-parsers-python_parser)",
            "html_anchor": "<a id=\"llmstruct-parsers-python_parser\"></a>"
          }
        },
        {
          "module_id": "llmstruct.parsers.go_analyzer",
          "path": "llmstruct/parsers/go_analyzer.py",
          "category": "core",
          "module_doc": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 Go \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043b\u044f Docker \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b: go/packages, go/analysis",
          "functions": [
            {
              "name": "convert_to_llmstruct_format",
              "docstring": "\u041a\u043e\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 llmstruct",
              "line_range": [
                203,
                337
              ],
              "parameters": [
                "analysis",
                "include_ranges",
                "goals"
              ],
              "decorators": [],
              "uid": "llmstruct.parsers.go_analyzer.convert_to_llmstruct_format",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.go_analyzer",
                "llmstruct.parsers.go_analyzer.convert_to_llmstruct_format"
              ],
              "uid_type": "function"
            },
            {
              "name": "_compute_file_hash",
              "docstring": "\u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 SHA-256 \u0445\u044d\u0448 \u0444\u0430\u0439\u043b\u0430",
              "line_range": [
                339,
                345
              ],
              "parameters": [
                "file_path"
              ],
              "decorators": [],
              "uid": "llmstruct.parsers.go_analyzer._compute_file_hash",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.go_analyzer",
                "llmstruct.parsers.go_analyzer._compute_file_hash"
              ],
              "uid_type": "function"
            },
            {
              "name": "main",
              "docstring": "",
              "line_range": [
                347,
                402
              ],
              "parameters": [],
              "decorators": [],
              "uid": "llmstruct.parsers.go_analyzer.main",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.go_analyzer",
                "llmstruct.parsers.go_analyzer.main"
              ],
              "uid_type": "function"
            },
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                24,
                26
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "llmstruct.parsers.go_analyzer.__init__",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.go_analyzer",
                "llmstruct.parsers.go_analyzer.__init__"
              ],
              "uid_type": "function"
            },
            {
              "name": "_setup_analyzer",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0441\u0440\u0435\u0434\u0443 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430",
              "line_range": [
                28,
                66
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "llmstruct.parsers.go_analyzer._setup_analyzer",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.go_analyzer",
                "llmstruct.parsers.go_analyzer._setup_analyzer"
              ],
              "uid_type": "function"
            },
            {
              "name": "_cleanup",
              "docstring": "\u041e\u0447\u0438\u0449\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b",
              "line_range": [
                68,
                72
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "llmstruct.parsers.go_analyzer._cleanup",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.go_analyzer",
                "llmstruct.parsers.go_analyzer._cleanup"
              ],
              "uid_type": "function"
            },
            {
              "name": "analyze_project",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 Go \u043f\u0440\u043e\u0435\u043a\u0442",
              "line_range": [
                74,
                125
              ],
              "parameters": [
                "self",
                "project_path"
              ],
              "decorators": [],
              "uid": "llmstruct.parsers.go_analyzer.analyze_project",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.go_analyzer",
                "llmstruct.parsers.go_analyzer.analyze_project"
              ],
              "uid_type": "function"
            },
            {
              "name": "_fallback_analysis",
              "docstring": "Fallback \u0430\u043d\u0430\u043b\u0438\u0437 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0444\u0430\u0439\u043b\u043e\u0432",
              "line_range": [
                127,
                201
              ],
              "parameters": [
                "self",
                "project_path"
              ],
              "decorators": [],
              "uid": "llmstruct.parsers.go_analyzer._fallback_analysis",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.go_analyzer",
                "llmstruct.parsers.go_analyzer._fallback_analysis"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [
            {
              "name": "GoAnalyzer",
              "docstring": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 Go \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432",
              "line_range": [
                21,
                201
              ],
              "methods": [
                {
                  "name": "__init__",
                  "docstring": "",
                  "line_range": [
                    24,
                    26
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "llmstruct.parsers.go_analyzer.GoAnalyzer.__init__",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.parsers",
                    "llmstruct.parsers.go_analyzer",
                    "llmstruct.parsers.go_analyzer.GoAnalyzer",
                    "llmstruct.parsers.go_analyzer.GoAnalyzer.__init__"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_setup_analyzer",
                  "docstring": "\u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0441\u0440\u0435\u0434\u0443 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430",
                  "line_range": [
                    28,
                    66
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "llmstruct.parsers.go_analyzer.GoAnalyzer._setup_analyzer",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.parsers",
                    "llmstruct.parsers.go_analyzer",
                    "llmstruct.parsers.go_analyzer.GoAnalyzer",
                    "llmstruct.parsers.go_analyzer.GoAnalyzer._setup_analyzer"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_cleanup",
                  "docstring": "\u041e\u0447\u0438\u0449\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b",
                  "line_range": [
                    68,
                    72
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "llmstruct.parsers.go_analyzer.GoAnalyzer._cleanup",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.parsers",
                    "llmstruct.parsers.go_analyzer",
                    "llmstruct.parsers.go_analyzer.GoAnalyzer",
                    "llmstruct.parsers.go_analyzer.GoAnalyzer._cleanup"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "analyze_project",
                  "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 Go \u043f\u0440\u043e\u0435\u043a\u0442",
                  "line_range": [
                    74,
                    125
                  ],
                  "parameters": [
                    "self",
                    "project_path"
                  ],
                  "uid": "llmstruct.parsers.go_analyzer.GoAnalyzer.analyze_project",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.parsers",
                    "llmstruct.parsers.go_analyzer",
                    "llmstruct.parsers.go_analyzer.GoAnalyzer",
                    "llmstruct.parsers.go_analyzer.GoAnalyzer.analyze_project"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_fallback_analysis",
                  "docstring": "Fallback \u0430\u043d\u0430\u043b\u0438\u0437 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0444\u0430\u0439\u043b\u043e\u0432",
                  "line_range": [
                    127,
                    201
                  ],
                  "parameters": [
                    "self",
                    "project_path"
                  ],
                  "uid": "llmstruct.parsers.go_analyzer.GoAnalyzer._fallback_analysis",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.parsers",
                    "llmstruct.parsers.go_analyzer",
                    "llmstruct.parsers.go_analyzer.GoAnalyzer",
                    "llmstruct.parsers.go_analyzer.GoAnalyzer._fallback_analysis"
                  ],
                  "uid_type": "method"
                }
              ],
              "bases": [],
              "uid": "llmstruct.parsers.go_analyzer.GoAnalyzer",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.go_analyzer",
                "llmstruct.parsers.go_analyzer.GoAnalyzer"
              ],
              "uid_type": "class"
            }
          ],
          "callgraph": {
            "__init__": [],
            "_setup_analyzer": [
              "tempfile.mkdtemp",
              "logging.warning",
              "subprocess.run",
              "Path",
              "analyzer_file.write_text",
              "analyzer_source.read_text",
              "str"
            ],
            "_cleanup": [
              "shutil.rmtree",
              "Path"
            ],
            "analyze_project": [
              "self._cleanup",
              "logging.warning",
              "json.loads",
              "subprocess.run",
              "self._setup_analyzer",
              "logging.error",
              "self._fallback_analysis",
              "logging.info"
            ],
            "_fallback_analysis": [
              "len",
              "logging.warning",
              "file_path.read_text",
              "line.startswith",
              "content.split",
              "Path",
              "packages.add",
              "list",
              "go_mod_path.read_text",
              "file_path.relative_to",
              "str",
              "line.strip",
              "sorted",
              "logging.info",
              "go_mod_path.exists",
              "line.split",
              "set"
            ],
            "convert_to_llmstruct_format": [
              "classes.append",
              "modules.append",
              "len",
              "path.endswith",
              "functions.append",
              "struct.get",
              "toc.append",
              "iface.get",
              "module.get",
              "file_data.get",
              "analysis.get",
              "_compute_file_hash",
              "path.replace",
              "uuid.uuid4",
              "sum",
              "fn.get",
              "str"
            ],
            "_compute_file_hash": [
              "hashlib.sha256",
              "open",
              "f.read"
            ],
            "main": [
              "convert_to_llmstruct_format",
              "argparse.ArgumentParser",
              "len",
              "parser.add_argument",
              "print",
              "analyzer.analyze_project",
              "open",
              "Path",
              "parser.parse_args",
              "json.dumps",
              "stats.get",
              "result.get",
              "f.write",
              "GoAnalyzer",
              "traceback.print_exc",
              "sys.exit"
            ]
          },
          "dependencies": [
            "Any",
            "Dict",
            "List",
            "Optional",
            "Path",
            "argparse",
            "datetime",
            "hashlib",
            "json",
            "logging",
            "os",
            "pathlib",
            "shutil",
            "subprocess",
            "sys",
            "tempfile",
            "traceback",
            "typing",
            "uuid"
          ],
          "hash": "621e1d82791d814534c044dc8ba1d1c79b1852a614255e313f5ff697c934f210",
          "uid": "llmstruct.parsers.go_analyzer",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.go_analyzer"
          ],
          "uid_type": "module",
          "artifact_id": "4ed8ba53-8cab-f400-2cf5-ed5385ab3af6",
          "metrics": {
            "cyclomatic_complexity": 10,
            "lines_of_code": 80,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 19,
            "test_coverage": 0.0,
            "maintainability_index": 50
          },
          "markdown_anchor": {
            "id": "llmstruct-parsers-go_analyzer",
            "title": "Module: llmstruct.parsers.go_analyzer",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.parsers.go_analyzer](#llmstruct-parsers-go_analyzer)",
            "html_anchor": "<a id=\"llmstruct-parsers-go_analyzer\"></a>"
          }
        },
        {
          "module_id": "llmstruct.parsers.__init__",
          "path": "llmstruct/parsers/__init__.py",
          "category": "cli",
          "module_doc": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
          "functions": [],
          "classes": [],
          "callgraph": {},
          "dependencies": [
            "JavaScriptParser",
            "javascript_parser"
          ],
          "hash": "2f1fce5cf3e867869608b18a8ab1197f8a32add4fd35d4de75f891a9dad04b63",
          "uid": "llmstruct.parsers.__init__",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.__init__"
          ],
          "uid_type": "module",
          "artifact_id": "fe58e61b-3cf5-7a69-e34f-f349a3cae247",
          "metrics": {
            "cyclomatic_complexity": 0,
            "lines_of_code": 0,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 2,
            "test_coverage": 0.0,
            "maintainability_index": 100
          },
          "markdown_anchor": {
            "id": "llmstruct-parsers-__init__",
            "title": "Module: llmstruct.parsers.__init__",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.parsers.__init__](#llmstruct-parsers-__init__)",
            "html_anchor": "<a id=\"llmstruct-parsers-__init__\"></a>"
          }
        },
        {
          "module_id": "llmstruct.parsers.javascript_parser",
          "path": "llmstruct/parsers/javascript_parser.py",
          "category": "core",
          "module_doc": "",
          "functions": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                9,
                13
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "llmstruct.parsers.javascript_parser.__init__",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.javascript_parser",
                "llmstruct.parsers.javascript_parser.__init__"
              ],
              "uid_type": "function"
            },
            {
              "name": "file_hash",
              "docstring": "",
              "line_range": [
                15,
                20
              ],
              "parameters": [
                "self",
                "filepath"
              ],
              "decorators": [],
              "uid": "llmstruct.parsers.javascript_parser.file_hash",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.javascript_parser",
                "llmstruct.parsers.javascript_parser.file_hash"
              ],
              "uid_type": "function"
            },
            {
              "name": "compute_file_metadata",
              "docstring": "",
              "line_range": [
                22,
                41
              ],
              "parameters": [
                "self",
                "filepath",
                "include_hashes"
              ],
              "decorators": [],
              "uid": "llmstruct.parsers.javascript_parser.compute_file_metadata",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.javascript_parser",
                "llmstruct.parsers.javascript_parser.compute_file_metadata"
              ],
              "uid_type": "function"
            },
            {
              "name": "parse_module",
              "docstring": "",
              "line_range": [
                43,
                124
              ],
              "parameters": [
                "self",
                "filepath",
                "root_dir",
                "include_ranges",
                "include_hashes"
              ],
              "decorators": [],
              "uid": "llmstruct.parsers.javascript_parser.parse_module",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.javascript_parser",
                "llmstruct.parsers.javascript_parser.parse_module"
              ],
              "uid_type": "function"
            },
            {
              "name": "extract_signature",
              "docstring": "",
              "line_range": [
                78,
                80
              ],
              "parameters": [
                "node"
              ],
              "decorators": [],
              "uid": "llmstruct.parsers.javascript_parser.extract_signature",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.javascript_parser",
                "llmstruct.parsers.javascript_parser.extract_signature"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [
            {
              "name": "JavaScriptParser",
              "docstring": "",
              "line_range": [
                8,
                124
              ],
              "methods": [
                {
                  "name": "__init__",
                  "docstring": "",
                  "line_range": [
                    9,
                    13
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "llmstruct.parsers.javascript_parser.JavaScriptParser.__init__",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.parsers",
                    "llmstruct.parsers.javascript_parser",
                    "llmstruct.parsers.javascript_parser.JavaScriptParser",
                    "llmstruct.parsers.javascript_parser.JavaScriptParser.__init__"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "file_hash",
                  "docstring": "",
                  "line_range": [
                    15,
                    20
                  ],
                  "parameters": [
                    "self",
                    "filepath"
                  ],
                  "uid": "llmstruct.parsers.javascript_parser.JavaScriptParser.file_hash",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.parsers",
                    "llmstruct.parsers.javascript_parser",
                    "llmstruct.parsers.javascript_parser.JavaScriptParser",
                    "llmstruct.parsers.javascript_parser.JavaScriptParser.file_hash"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "compute_file_metadata",
                  "docstring": "",
                  "line_range": [
                    22,
                    41
                  ],
                  "parameters": [
                    "self",
                    "filepath",
                    "include_hashes"
                  ],
                  "uid": "llmstruct.parsers.javascript_parser.JavaScriptParser.compute_file_metadata",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.parsers",
                    "llmstruct.parsers.javascript_parser",
                    "llmstruct.parsers.javascript_parser.JavaScriptParser",
                    "llmstruct.parsers.javascript_parser.JavaScriptParser.compute_file_metadata"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "parse_module",
                  "docstring": "",
                  "line_range": [
                    43,
                    124
                  ],
                  "parameters": [
                    "self",
                    "filepath",
                    "root_dir",
                    "include_ranges",
                    "include_hashes"
                  ],
                  "uid": "llmstruct.parsers.javascript_parser.JavaScriptParser.parse_module",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.parsers",
                    "llmstruct.parsers.javascript_parser",
                    "llmstruct.parsers.javascript_parser.JavaScriptParser",
                    "llmstruct.parsers.javascript_parser.JavaScriptParser.parse_module"
                  ],
                  "uid_type": "method"
                }
              ],
              "bases": [],
              "uid": "llmstruct.parsers.javascript_parser.JavaScriptParser",
              "uid_components": [
                "llmstruct",
                "llmstruct.parsers",
                "llmstruct.parsers.javascript_parser",
                "llmstruct.parsers.javascript_parser.JavaScriptParser"
              ],
              "uid_type": "class"
            }
          ],
          "callgraph": {
            "__init__": [
              "set"
            ],
            "file_hash": [
              "hashlib.sha256",
              "open",
              "f.read"
            ],
            "compute_file_metadata": [
              "sum",
              "open",
              "self.file_hash",
              "os.stat"
            ],
            "parse_module": [
              "open",
              "self.compute_file_metadata",
              "f.read",
              "str",
              "esprima.parseModule"
            ],
            "extract_signature": [
              "hasattr"
            ]
          },
          "dependencies": [
            "Any",
            "Dict",
            "datetime",
            "esprima",
            "hashlib",
            "os",
            "typing"
          ],
          "hash": "d2af10a2c30b638a634dd0317c81a179888dee011e0b7a0f62166dce468373c4",
          "uid": "llmstruct.parsers.javascript_parser",
          "uid_components": [
            "llmstruct",
            "llmstruct.parsers",
            "llmstruct.parsers.javascript_parser"
          ],
          "uid_type": "module",
          "artifact_id": "9c2b1ba0-989a-33c7-dce1-184d5e0b4061",
          "metrics": {
            "cyclomatic_complexity": 7,
            "lines_of_code": 50,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 7,
            "test_coverage": 0.0,
            "maintainability_index": 65
          },
          "markdown_anchor": {
            "id": "llmstruct-parsers-javascript_parser",
            "title": "Module: llmstruct.parsers.javascript_parser",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.parsers.javascript_parser](#llmstruct-parsers-javascript_parser)",
            "html_anchor": "<a id=\"llmstruct-parsers-javascript_parser\"></a>"
          }
        }
      ],
      "generators": [
        {
          "module_id": "llmstruct.generators.go_json_generator",
          "path": "llmstruct/generators/go_json_generator.py",
          "category": "core",
          "module_doc": "",
          "functions": [
            {
              "name": "get_go_folder_structure",
              "docstring": "Capture directory and file structure for Go projects with artifact_id, respecting .gitignore and patterns.",
              "line_range": [
                23,
                98
              ],
              "parameters": [
                "root_dir",
                "gitignore_patterns",
                "include_patterns",
                "exclude_patterns",
                "exclude_dirs"
              ],
              "decorators": [],
              "uid": "llmstruct.generators.go_json_generator.get_go_folder_structure",
              "uid_components": [
                "llmstruct",
                "llmstruct.generators",
                "llmstruct.generators.go_json_generator",
                "llmstruct.generators.go_json_generator.get_go_folder_structure"
              ],
              "uid_type": "function"
            },
            {
              "name": "build_go_toc_and_modules",
              "docstring": "Build TOC and modules for Go projects with artifact_id and robust filtering.",
              "line_range": [
                101,
                196
              ],
              "parameters": [
                "root_dir",
                "include_patterns",
                "exclude_patterns",
                "gitignore_patterns",
                "include_ranges",
                "include_hashes",
                "exclude_dirs"
              ],
              "decorators": [],
              "uid": "llmstruct.generators.go_json_generator.build_go_toc_and_modules",
              "uid_components": [
                "llmstruct",
                "llmstruct.generators",
                "llmstruct.generators.go_json_generator",
                "llmstruct.generators.go_json_generator.build_go_toc_and_modules"
              ],
              "uid_type": "function"
            },
            {
              "name": "extract_go_mod_info",
              "docstring": "Extract information from go.mod file.",
              "line_range": [
                199,
                235
              ],
              "parameters": [
                "root_dir"
              ],
              "decorators": [],
              "uid": "llmstruct.generators.go_json_generator.extract_go_mod_info",
              "uid_components": [
                "llmstruct",
                "llmstruct.generators",
                "llmstruct.generators.go_json_generator",
                "llmstruct.generators.go_json_generator.extract_go_mod_info"
              ],
              "uid_type": "function"
            },
            {
              "name": "generate_go_json",
              "docstring": "Generate JSON structure for Go project with artifact_id, summary, and tags.",
              "line_range": [
                238,
                312
              ],
              "parameters": [
                "root_dir",
                "include_patterns",
                "exclude_patterns",
                "gitignore_patterns",
                "include_ranges",
                "include_hashes",
                "goals",
                "exclude_dirs"
              ],
              "decorators": [],
              "uid": "llmstruct.generators.go_json_generator.generate_go_json",
              "uid_components": [
                "llmstruct",
                "llmstruct.generators",
                "llmstruct.generators.go_json_generator",
                "llmstruct.generators.go_json_generator.generate_go_json"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [],
          "callgraph": {
            "get_go_folder_structure": [
              "file_path.match",
              "p.rstrip",
              "p.endswith",
              "Path",
              "generate_uid_components",
              "any",
              "uuid.uuid4",
              "file_path.relative_to",
              "sorted",
              "structure.append",
              "str",
              "create_legacy_artifact_id",
              "os.walk",
              "set"
            ],
            "build_go_toc_and_modules": [
              "p.rstrip",
              "f.match",
              "create_legacy_artifact_id",
              "modules.append",
              "len",
              "p.endswith",
              "toc.append",
              "isinstance",
              "module.get",
              "Path",
              "generate_uid_components",
              "cls.get",
              "generate_uid",
              "str",
              "analyze_module",
              "any",
              "set"
            ],
            "extract_go_mod_info": [
              "dependencies.append",
              "len",
              "line.strip",
              "open",
              "line.startswith",
              "Path",
              "logging.error",
              "f.read",
              "content.strip",
              "go_mod_path.exists",
              "line.split"
            ],
            "generate_go_json": [
              "len",
              "sum",
              "Path",
              "uuid.uuid4",
              "list",
              "extract_go_mod_info",
              "go_mod_info.get",
              "m.get",
              "build_go_toc_and_modules",
              "str",
              "get_go_folder_structure",
              "set"
            ]
          },
          "dependencies": [
            "Any",
            "Dict",
            "List",
            "Optional",
            "Path",
            "UIDType",
            "analyze_module",
            "core.uid_generator",
            "create_legacy_artifact_id",
            "create_stable_uid",
            "datetime",
            "generate_uid",
            "generate_uid_components",
            "logging",
            "normalize_path_to_module_id",
            "os",
            "parsers.go_parser",
            "pathlib",
            "typing",
            "uuid"
          ],
          "hash": "13de8a605ec15b9075869807c23c8d59758fd95328430a65e092b46ff8be12cc",
          "uid": "llmstruct.generators.go_json_generator",
          "uid_components": [
            "llmstruct",
            "llmstruct.generators",
            "llmstruct.generators.go_json_generator"
          ],
          "uid_type": "module",
          "artifact_id": "4b928e1a-5447-f3d5-dd1e-eda346bc6a17",
          "metrics": {
            "cyclomatic_complexity": 4,
            "lines_of_code": 40,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 20,
            "test_coverage": 0.0,
            "maintainability_index": 80
          },
          "markdown_anchor": {
            "id": "llmstruct-generators-go_json_generator",
            "title": "Module: llmstruct.generators.go_json_generator",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.generators.go_json_generator](#llmstruct-generators-go_json_generator)",
            "html_anchor": "<a id=\"llmstruct-generators-go_json_generator\"></a>"
          }
        },
        {
          "module_id": "llmstruct.generators.__init__",
          "path": "llmstruct/generators/__init__.py",
          "category": "cli",
          "module_doc": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
          "functions": [],
          "classes": [],
          "callgraph": {},
          "dependencies": [
            "generate_json",
            "get_folder_structure",
            "json_generator"
          ],
          "hash": "ee336aa4dd2e26f0ae099e6930cf75501f919728c44b8554e3419af3cf5a1b5a",
          "uid": "llmstruct.generators.__init__",
          "uid_components": [
            "llmstruct",
            "llmstruct.generators",
            "llmstruct.generators.__init__"
          ],
          "uid_type": "module",
          "artifact_id": "a0a37899-310c-683a-f0c1-aee876224953",
          "metrics": {
            "cyclomatic_complexity": 0,
            "lines_of_code": 0,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 3,
            "test_coverage": 0.0,
            "maintainability_index": 100
          },
          "markdown_anchor": {
            "id": "llmstruct-generators-__init__",
            "title": "Module: llmstruct.generators.__init__",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.generators.__init__](#llmstruct-generators-__init__)",
            "html_anchor": "<a id=\"llmstruct-generators-__init__\"></a>"
          }
        },
        {
          "module_id": "llmstruct.generators.json_generator",
          "path": "llmstruct/generators/json_generator.py",
          "category": "core",
          "module_doc": "",
          "functions": [
            {
              "name": "get_folder_structure",
              "docstring": "Capture directory and file structure with artifact_id, respecting .gitignore and patterns.",
              "line_range": [
                25,
                108
              ],
              "parameters": [
                "root_dir",
                "gitignore_patterns",
                "include_patterns",
                "exclude_patterns",
                "exclude_dirs"
              ],
              "decorators": [],
              "uid": "llmstruct.generators.json_generator.get_folder_structure",
              "uid_components": [
                "llmstruct",
                "llmstruct.generators",
                "llmstruct.generators.json_generator",
                "llmstruct.generators.json_generator.get_folder_structure"
              ],
              "uid_type": "function"
            },
            {
              "name": "build_toc_and_modules",
              "docstring": "Build TOC and modules with artifact_id and robust filtering. \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 include_dirs.",
              "line_range": [
                111,
                220
              ],
              "parameters": [
                "root_dir",
                "include_patterns",
                "exclude_patterns",
                "gitignore_patterns",
                "include_ranges",
                "include_hashes",
                "exclude_dirs",
                "include_dirs"
              ],
              "decorators": [],
              "uid": "llmstruct.generators.json_generator.build_toc_and_modules",
              "uid_components": [
                "llmstruct",
                "llmstruct.generators",
                "llmstruct.generators.json_generator",
                "llmstruct.generators.json_generator.build_toc_and_modules"
              ],
              "uid_type": "function"
            },
            {
              "name": "generate_json",
              "docstring": "Generate JSON structure for project with artifact_id, summary, and tags. \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 include_dirs.",
              "line_range": [
                223,
                336
              ],
              "parameters": [
                "root_dir",
                "include_patterns",
                "exclude_patterns",
                "gitignore_patterns",
                "include_ranges",
                "include_hashes",
                "goals",
                "exclude_dirs",
                "include_dirs",
                "enable_smart_summaries",
                "llm_config"
              ],
              "decorators": [],
              "uid": "llmstruct.generators.json_generator.generate_json",
              "uid_components": [
                "llmstruct",
                "llmstruct.generators",
                "llmstruct.generators.json_generator",
                "llmstruct.generators.json_generator.generate_json"
              ],
              "uid_type": "function"
            },
            {
              "name": "generate_json_with_output_file",
              "docstring": "",
              "line_range": [
                339,
                364
              ],
              "parameters": [
                "root_dir",
                "output_file",
                "gitignore_patterns",
                "include_patterns",
                "exclude_patterns",
                "exclude_dirs",
                "include_ranges",
                "include_hashes",
                "goals"
              ],
              "decorators": [],
              "uid": "llmstruct.generators.json_generator.generate_json_with_output_file",
              "uid_components": [
                "llmstruct",
                "llmstruct.generators",
                "llmstruct.generators.json_generator",
                "llmstruct.generators.json_generator.generate_json_with_output_file"
              ],
              "uid_type": "function"
            },
            {
              "name": "norm_dirname",
              "docstring": "",
              "line_range": [
                133,
                134
              ],
              "parameters": [
                "d"
              ],
              "decorators": [],
              "uid": "llmstruct.generators.json_generator.norm_dirname",
              "uid_components": [
                "llmstruct",
                "llmstruct.generators",
                "llmstruct.generators.json_generator",
                "llmstruct.generators.json_generator.norm_dirname"
              ],
              "uid_type": "function"
            },
            {
              "name": "is_included_dir",
              "docstring": "",
              "line_range": [
                143,
                147
              ],
              "parameters": [
                "f"
              ],
              "decorators": [],
              "uid": "llmstruct.generators.json_generator.is_included_dir",
              "uid_components": [
                "llmstruct",
                "llmstruct.generators",
                "llmstruct.generators.json_generator",
                "llmstruct.generators.json_generator.is_included_dir"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [],
          "callgraph": {
            "get_folder_structure": [
              "file_path.match",
              "p.rstrip",
              "abs_dir_path.relative_to",
              "p.endswith",
              "Path",
              "abs_dir_path.joinpath",
              "generate_uid_components",
              "any",
              "file_path.relative_to",
              "sorted",
              "structure.append",
              "str",
              "abs_dir_path.match",
              "create_legacy_artifact_id",
              "os.walk",
              "set"
            ],
            "build_toc_and_modules": [],
            "norm_dirname": [],
            "is_included_dir": [
              "norm_dirname",
              "any"
            ],
            "generate_json": [
              "get_folder_structure",
              "len",
              "create_summary_system",
              "cls.get",
              "enhance_json_structure",
              "list",
              "module.get",
              "build_toc_and_modules",
              "uuid.uuid4",
              "module.copy",
              "enhanced_methods.append",
              "sum",
              "enhanced_functions.append",
              "enhance_entity_with_smart_summary",
              "enhanced_classes.append",
              "Path",
              "str",
              "enhanced_modules.append",
              "set"
            ],
            "generate_json_with_output_file": [
              "json.dump",
              "open",
              "generate_json"
            ]
          },
          "dependencies": [
            "Any",
            "Dict",
            "List",
            "Optional",
            "Path",
            "UIDType",
            "analyze_module",
            "core.json_structure",
            "core.summary_system",
            "core.uid_generator",
            "create_legacy_artifact_id",
            "create_stable_uid",
            "create_summary_system",
            "datetime",
            "enhance_entity_with_smart_summary",
            "enhance_json_structure",
            "generate_uid",
            "generate_uid_components",
            "json",
            "logging",
            "normalize_path_to_module_id",
            "os",
            "parsers.python_parser",
            "pathlib",
            "typing",
            "uuid"
          ],
          "hash": "b829c51ead41446f6de16856aa522b85b4979af092ddd185197205a94d71bd13",
          "uid": "llmstruct.generators.json_generator",
          "uid_components": [
            "llmstruct",
            "llmstruct.generators",
            "llmstruct.generators.json_generator"
          ],
          "uid_type": "module",
          "artifact_id": "0235ea10-05bd-2ee9-e148-53ea337c3fcc",
          "metrics": {
            "cyclomatic_complexity": 6,
            "lines_of_code": 60,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 26,
            "test_coverage": 0.0,
            "maintainability_index": 70
          },
          "markdown_anchor": {
            "id": "llmstruct-generators-json_generator",
            "title": "Module: llmstruct.generators.json_generator",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.generators.json_generator](#llmstruct-generators-json_generator)",
            "html_anchor": "<a id=\"llmstruct-generators-json_generator\"></a>"
          }
        }
      ],
      "api.routes": [
        {
          "module_id": "llmstruct.api.routes.system",
          "path": "llmstruct/api/routes/system.py",
          "category": "core",
          "module_doc": "System routes for LLMStruct FastAPI\n\nHealth checks, metrics, and system information endpoints.",
          "functions": [
            {
              "name": "get_cli_bridge",
              "docstring": "Dependency to get CLI bridge instance",
              "line_range": [
                17,
                19
              ],
              "parameters": [],
              "decorators": [],
              "uid": "llmstruct.api.routes.system.get_cli_bridge",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.routes",
                "llmstruct.api.routes.system",
                "llmstruct.api.routes.system.get_cli_bridge"
              ],
              "uid_type": "function"
            },
            {
              "name": "health_check",
              "docstring": "Health check endpoint\n\nReturns the health status of the API and its dependencies.\nThis endpoint does not require authentication.",
              "line_range": [
                23,
                61
              ],
              "parameters": [
                "cli"
              ],
              "decorators": [
                "router.get('/health', response_model=HealthResponse)"
              ],
              "uid": "llmstruct.api.routes.system.health_check",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.routes",
                "llmstruct.api.routes.system",
                "llmstruct.api.routes.system.health_check"
              ],
              "uid_type": "function"
            },
            {
              "name": "get_system_status",
              "docstring": "Get detailed system status\n\nReturns detailed system information including:\n- API version and configuration\n- CLI status and version\n- Resource usage (if available)",
              "line_range": [
                65,
                97
              ],
              "parameters": [],
              "decorators": [
                "router.get('/status')"
              ],
              "uid": "llmstruct.api.routes.system.get_system_status",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.routes",
                "llmstruct.api.routes.system",
                "llmstruct.api.routes.system.get_system_status"
              ],
              "uid_type": "function"
            },
            {
              "name": "get_version",
              "docstring": "Get API version information\n\nReturns version information for the API and underlying components.",
              "line_range": [
                101,
                123
              ],
              "parameters": [],
              "decorators": [
                "router.get('/version')"
              ],
              "uid": "llmstruct.api.routes.system.get_version",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.routes",
                "llmstruct.api.routes.system",
                "llmstruct.api.routes.system.get_version"
              ],
              "uid_type": "function"
            },
            {
              "name": "ping",
              "docstring": "Simple ping endpoint for basic connectivity testing",
              "line_range": [
                127,
                134
              ],
              "parameters": [],
              "decorators": [
                "router.get('/ping')"
              ],
              "uid": "llmstruct.api.routes.system.ping",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.routes",
                "llmstruct.api.routes.system",
                "llmstruct.api.routes.system.ping"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [],
          "callgraph": {
            "get_cli_bridge": [
              "CLIBridge"
            ],
            "health_check": [
              "datetime.utcnow",
              "Depends",
              "cli_health.get",
              "str",
              "cli.health_check",
              "HealthResponse",
              "router.get"
            ],
            "get_system_status": [
              "HTTPException",
              "datetime.utcnow",
              "CLIBridge",
              "cli_health.get",
              "str",
              "cli.health_check",
              "router.get"
            ],
            "get_version": [
              "HTTPException",
              "datetime.utcnow",
              "CLIBridge",
              "cli_health.get",
              "str",
              "cli.health_check",
              "router.get"
            ],
            "ping": [
              "router.get",
              "datetime.utcnow"
            ]
          },
          "dependencies": [
            "APIRouter",
            "CLIBridge",
            "Depends",
            "HTTPException",
            "HealthResponse",
            "HealthStatus",
            "asyncio",
            "datetime",
            "fastapi",
            "models.responses",
            "services.cli_bridge"
          ],
          "hash": "12d5f16af2648af5535ac4f2428296ca65266db6fe621f2d3e919e49c5cf70eb",
          "uid": "llmstruct.api.routes.system",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.routes",
            "llmstruct.api.routes.system"
          ],
          "uid_type": "module",
          "artifact_id": "ceff4b1e-5bc4-a69e-e163-1b4affb70f4e",
          "metrics": {
            "cyclomatic_complexity": 5,
            "lines_of_code": 50,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 11,
            "test_coverage": 0.0,
            "maintainability_index": 75
          },
          "markdown_anchor": {
            "id": "llmstruct-api-routes-system",
            "title": "Module: llmstruct.api.routes.system",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.api.routes.system](#llmstruct-api-routes-system)",
            "html_anchor": "<a id=\"llmstruct-api-routes-system\"></a>"
          }
        },
        {
          "module_id": "llmstruct.api.routes.__init__",
          "path": "llmstruct/api/routes/__init__.py",
          "category": "cli",
          "module_doc": "Routes package for LLMStruct FastAPI\n\nContains all API endpoint routers.",
          "functions": [],
          "classes": [],
          "callgraph": {},
          "dependencies": [],
          "hash": "c55fef17f5bf04d1b099b37498ea82c52295667412e308642a36e6ddaa95e49d",
          "uid": "llmstruct.api.routes.__init__",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.routes",
            "llmstruct.api.routes.__init__"
          ],
          "uid_type": "module",
          "artifact_id": "4da05f02-5d2d-a931-25b0-2b373ecd9f62",
          "metrics": {
            "cyclomatic_complexity": 0,
            "lines_of_code": 0,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 0,
            "test_coverage": 0.0,
            "maintainability_index": 100
          },
          "markdown_anchor": {
            "id": "llmstruct-api-routes-__init__",
            "title": "Module: llmstruct.api.routes.__init__",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.api.routes.__init__](#llmstruct-api-routes-__init__)",
            "html_anchor": "<a id=\"llmstruct-api-routes-__init__\"></a>"
          }
        },
        {
          "module_id": "llmstruct.api.routes.chat",
          "path": "llmstruct/api/routes/chat.py",
          "category": "core",
          "module_doc": "Chat Routes\n\nWebSocket-based real-time chat with LLM integration",
          "functions": [
            {
              "name": "websocket_chat",
              "docstring": "WebSocket endpoint for real-time chat",
              "line_range": [
                52,
                131
              ],
              "parameters": [
                "websocket",
                "session_id",
                "api_key"
              ],
              "decorators": [
                "router.websocket('/chat/ws')"
              ],
              "uid": "llmstruct.api.routes.chat.websocket_chat",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.routes",
                "llmstruct.api.routes.chat",
                "llmstruct.api.routes.chat.websocket_chat"
              ],
              "uid_type": "function"
            },
            {
              "name": "list_sessions",
              "docstring": "List active chat sessions",
              "line_range": [
                134,
                137
              ],
              "parameters": [],
              "decorators": [
                "router.get('/chat/sessions', dependencies=[Depends(get_api_key)])"
              ],
              "uid": "llmstruct.api.routes.chat.list_sessions",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.routes",
                "llmstruct.api.routes.chat",
                "llmstruct.api.routes.chat.list_sessions"
              ],
              "uid_type": "function"
            },
            {
              "name": "get_session",
              "docstring": "Get session details and history",
              "line_range": [
                140,
                145
              ],
              "parameters": [
                "session_id"
              ],
              "decorators": [
                "router.get('/chat/sessions/{session_id}', dependencies=[Depends(get_api_key)])"
              ],
              "uid": "llmstruct.api.routes.chat.get_session",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.routes",
                "llmstruct.api.routes.chat",
                "llmstruct.api.routes.chat.get_session"
              ],
              "uid_type": "function"
            },
            {
              "name": "delete_session",
              "docstring": "Delete a chat session",
              "line_range": [
                148,
                153
              ],
              "parameters": [
                "session_id"
              ],
              "decorators": [
                "router.delete('/chat/sessions/{session_id}', dependencies=[Depends(get_api_key)])"
              ],
              "uid": "llmstruct.api.routes.chat.delete_session",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.routes",
                "llmstruct.api.routes.chat",
                "llmstruct.api.routes.chat.delete_session"
              ],
              "uid_type": "function"
            },
            {
              "name": "send_message",
              "docstring": "Send a message via HTTP (alternative to WebSocket)",
              "line_range": [
                156,
                179
              ],
              "parameters": [
                "message"
              ],
              "decorators": [
                "router.post('/chat/message', dependencies=[Depends(get_api_key)])"
              ],
              "uid": "llmstruct.api.routes.chat.send_message",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.routes",
                "llmstruct.api.routes.chat",
                "llmstruct.api.routes.chat.send_message"
              ],
              "uid_type": "function"
            },
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                32,
                33
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "llmstruct.api.routes.chat.__init__",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.routes",
                "llmstruct.api.routes.chat",
                "llmstruct.api.routes.chat.__init__"
              ],
              "uid_type": "function"
            },
            {
              "name": "connect",
              "docstring": "",
              "line_range": [
                35,
                38
              ],
              "parameters": [
                "self",
                "websocket",
                "session_id"
              ],
              "decorators": [],
              "uid": "llmstruct.api.routes.chat.connect",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.routes",
                "llmstruct.api.routes.chat",
                "llmstruct.api.routes.chat.connect"
              ],
              "uid_type": "function"
            },
            {
              "name": "disconnect",
              "docstring": "",
              "line_range": [
                40,
                43
              ],
              "parameters": [
                "self",
                "session_id"
              ],
              "decorators": [],
              "uid": "llmstruct.api.routes.chat.disconnect",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.routes",
                "llmstruct.api.routes.chat",
                "llmstruct.api.routes.chat.disconnect"
              ],
              "uid_type": "function"
            },
            {
              "name": "send_message",
              "docstring": "",
              "line_range": [
                45,
                47
              ],
              "parameters": [
                "self",
                "session_id",
                "message"
              ],
              "decorators": [],
              "uid": "llmstruct.api.routes.chat.send_message",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.routes",
                "llmstruct.api.routes.chat",
                "llmstruct.api.routes.chat.send_message"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [
            {
              "name": "ConnectionManager",
              "docstring": "Manages WebSocket connections",
              "line_range": [
                29,
                47
              ],
              "methods": [
                {
                  "name": "__init__",
                  "docstring": "",
                  "line_range": [
                    32,
                    33
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "llmstruct.api.routes.chat.ConnectionManager.__init__",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.api",
                    "llmstruct.api.routes",
                    "llmstruct.api.routes.chat",
                    "llmstruct.api.routes.chat.ConnectionManager",
                    "llmstruct.api.routes.chat.ConnectionManager.__init__"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "connect",
                  "docstring": "",
                  "line_range": [
                    35,
                    38
                  ],
                  "parameters": [
                    "self",
                    "websocket",
                    "session_id"
                  ],
                  "uid": "llmstruct.api.routes.chat.ConnectionManager.connect",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.api",
                    "llmstruct.api.routes",
                    "llmstruct.api.routes.chat",
                    "llmstruct.api.routes.chat.ConnectionManager",
                    "llmstruct.api.routes.chat.ConnectionManager.connect"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "disconnect",
                  "docstring": "",
                  "line_range": [
                    40,
                    43
                  ],
                  "parameters": [
                    "self",
                    "session_id"
                  ],
                  "uid": "llmstruct.api.routes.chat.ConnectionManager.disconnect",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.api",
                    "llmstruct.api.routes",
                    "llmstruct.api.routes.chat",
                    "llmstruct.api.routes.chat.ConnectionManager",
                    "llmstruct.api.routes.chat.ConnectionManager.disconnect"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "send_message",
                  "docstring": "",
                  "line_range": [
                    45,
                    47
                  ],
                  "parameters": [
                    "self",
                    "session_id",
                    "message"
                  ],
                  "uid": "llmstruct.api.routes.chat.ConnectionManager.send_message",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.api",
                    "llmstruct.api.routes",
                    "llmstruct.api.routes.chat",
                    "llmstruct.api.routes.chat.ConnectionManager",
                    "llmstruct.api.routes.chat.ConnectionManager.send_message"
                  ],
                  "uid_type": "method"
                }
              ],
              "bases": [],
              "uid": "llmstruct.api.routes.chat.ConnectionManager",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.routes",
                "llmstruct.api.routes.chat",
                "llmstruct.api.routes.chat.ConnectionManager"
              ],
              "uid_type": "class"
            }
          ],
          "callgraph": {
            "__init__": [],
            "connect": [
              "websocket.accept",
              "logger.info"
            ],
            "disconnect": [
              "logger.info"
            ],
            "send_message": [
              "ChatResponse",
              "HTTPException",
              "session_manager.add_message",
              "Depends",
              "logger.error",
              "router.post",
              "str",
              "llm_service.process_message"
            ],
            "websocket_chat": [
              "manager.send_message",
              "json.loads",
              "websocket.close",
              "manager.disconnect",
              "session_manager.get_or_create_session",
              "session_manager.add_message",
              "uuid.uuid4",
              "datetime.now",
              "logger.info",
              "websocket.receive_text",
              "logger.error",
              "manager.connect",
              "str",
              "router.websocket",
              "llm_service.process_message",
              "message_data.get"
            ],
            "list_sessions": [
              "Depends",
              "session_manager.list_sessions",
              "router.get"
            ],
            "get_session": [
              "Depends",
              "session_manager.get_session",
              "HTTPException",
              "router.get"
            ],
            "delete_session": [
              "HTTPException",
              "Depends",
              "router.delete",
              "session_manager.delete_session"
            ]
          },
          "dependencies": [
            "APIRouter",
            "Any",
            "ChatMessage",
            "ChatResponse",
            "ChatSessionManager",
            "Depends",
            "Dict",
            "HTTPBearer",
            "HTTPException",
            "LLMService",
            "Optional",
            "WebSocket",
            "WebSocketDisconnect",
            "asyncio",
            "datetime",
            "fastapi",
            "fastapi.security",
            "get_api_key",
            "json",
            "logging",
            "middleware.auth",
            "models.requests",
            "models.responses",
            "services.chat_session",
            "services.llm_service",
            "typing",
            "uuid"
          ],
          "hash": "59b0748bcb0b7a09f0c062ff814d3af7c5f8741d6aea2514170fffeed3366e63",
          "uid": "llmstruct.api.routes.chat",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.routes",
            "llmstruct.api.routes.chat"
          ],
          "uid_type": "module",
          "artifact_id": "9e24ecd3-be69-cf18-ff2e-8c147931bad0",
          "metrics": {
            "cyclomatic_complexity": 11,
            "lines_of_code": 90,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 27,
            "test_coverage": 0.0,
            "maintainability_index": 45
          },
          "markdown_anchor": {
            "id": "llmstruct-api-routes-chat",
            "title": "Module: llmstruct.api.routes.chat",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.api.routes.chat](#llmstruct-api-routes-chat)",
            "html_anchor": "<a id=\"llmstruct-api-routes-chat\"></a>"
          }
        },
        {
          "module_id": "llmstruct.api.routes.continue_adapter",
          "path": "llmstruct/api/routes/continue_adapter.py",
          "category": "core",
          "module_doc": "Continue API Adapter\n\nTranslates Continue extension requests to LLMStruct chat API format",
          "functions": [
            {
              "name": "continue_chat_completion",
              "docstring": "Continue-compatible chat completion endpoint\nTranslates Continue requests to our LLMStruct format",
              "line_range": [
                59,
                129
              ],
              "parameters": [
                "request",
                "api_key"
              ],
              "decorators": [
                "router.post('/v1/chat/completions')"
              ],
              "uid": "llmstruct.api.routes.continue_adapter.continue_chat_completion",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.routes",
                "llmstruct.api.routes.continue_adapter",
                "llmstruct.api.routes.continue_adapter.continue_chat_completion"
              ],
              "uid_type": "function"
            },
            {
              "name": "continue_models",
              "docstring": "List available models for Continue",
              "line_range": [
                132,
                158
              ],
              "parameters": [
                "api_key"
              ],
              "decorators": [
                "router.get('/v1/models')"
              ],
              "uid": "llmstruct.api.routes.continue_adapter.continue_models",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.routes",
                "llmstruct.api.routes.continue_adapter",
                "llmstruct.api.routes.continue_adapter.continue_models"
              ],
              "uid_type": "function"
            },
            {
              "name": "continue_embeddings",
              "docstring": "Embeddings endpoint for Continue (placeholder)",
              "line_range": [
                161,
                193
              ],
              "parameters": [
                "request",
                "api_key"
              ],
              "decorators": [
                "router.post('/v1/embeddings')"
              ],
              "uid": "llmstruct.api.routes.continue_adapter.continue_embeddings",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.routes",
                "llmstruct.api.routes.continue_adapter",
                "llmstruct.api.routes.continue_adapter.continue_embeddings"
              ],
              "uid_type": "function"
            },
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                25,
                35
              ],
              "parameters": [
                "self",
                "messages",
                "model",
                "temperature",
                "max_tokens",
                "stream"
              ],
              "decorators": [],
              "uid": "llmstruct.api.routes.continue_adapter.__init__",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.routes",
                "llmstruct.api.routes.continue_adapter",
                "llmstruct.api.routes.continue_adapter.__init__"
              ],
              "uid_type": "function"
            },
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                39,
                56
              ],
              "parameters": [
                "self",
                "content",
                "model"
              ],
              "decorators": [],
              "uid": "llmstruct.api.routes.continue_adapter.__init__",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.routes",
                "llmstruct.api.routes.continue_adapter",
                "llmstruct.api.routes.continue_adapter.__init__"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [
            {
              "name": "ContinueRequest",
              "docstring": "Continue API request format",
              "line_range": [
                23,
                35
              ],
              "methods": [
                {
                  "name": "__init__",
                  "docstring": "",
                  "line_range": [
                    25,
                    35
                  ],
                  "parameters": [
                    "self",
                    "messages",
                    "model",
                    "temperature",
                    "max_tokens",
                    "stream"
                  ],
                  "uid": "llmstruct.api.routes.continue_adapter.ContinueRequest.__init__",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.api",
                    "llmstruct.api.routes",
                    "llmstruct.api.routes.continue_adapter",
                    "llmstruct.api.routes.continue_adapter.ContinueRequest",
                    "llmstruct.api.routes.continue_adapter.ContinueRequest.__init__"
                  ],
                  "uid_type": "method"
                }
              ],
              "bases": [],
              "uid": "llmstruct.api.routes.continue_adapter.ContinueRequest",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.routes",
                "llmstruct.api.routes.continue_adapter",
                "llmstruct.api.routes.continue_adapter.ContinueRequest"
              ],
              "uid_type": "class"
            },
            {
              "name": "ContinueResponse",
              "docstring": "Continue API response format (OpenAI-compatible)",
              "line_range": [
                37,
                56
              ],
              "methods": [
                {
                  "name": "__init__",
                  "docstring": "",
                  "line_range": [
                    39,
                    56
                  ],
                  "parameters": [
                    "self",
                    "content",
                    "model"
                  ],
                  "uid": "llmstruct.api.routes.continue_adapter.ContinueResponse.__init__",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.api",
                    "llmstruct.api.routes",
                    "llmstruct.api.routes.continue_adapter",
                    "llmstruct.api.routes.continue_adapter.ContinueResponse",
                    "llmstruct.api.routes.continue_adapter.ContinueResponse.__init__"
                  ],
                  "uid_type": "method"
                }
              ],
              "bases": [],
              "uid": "llmstruct.api.routes.continue_adapter.ContinueResponse",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.routes",
                "llmstruct.api.routes.continue_adapter",
                "llmstruct.api.routes.continue_adapter.ContinueResponse"
              ],
              "uid_type": "class"
            }
          ],
          "callgraph": {
            "__init__": [
              "datetime.now",
              "int",
              "len",
              "content.split"
            ],
            "continue_chat_completion": [
              "request_data.get",
              "len",
              "msg.get",
              "HTTPException",
              "reversed",
              "ContinueResponse",
              "Depends",
              "datetime.now",
              "logger.info",
              "logger.error",
              "router.post",
              "str",
              "llm_service.process_message",
              "request.json"
            ],
            "continue_models": [
              "Depends",
              "datetime.now",
              "int",
              "router.get"
            ],
            "continue_embeddings": [
              "request_data.get",
              "len",
              "HTTPException",
              "Depends",
              "input_text.split",
              "logger.error",
              "router.post",
              "str",
              "request.json"
            ]
          },
          "dependencies": [
            "APIRouter",
            "Any",
            "ChatMessage",
            "ChatResponse",
            "Depends",
            "Dict",
            "HTTPException",
            "LLMService",
            "List",
            "Optional",
            "Request",
            "datetime",
            "fastapi",
            "get_api_key",
            "logging",
            "middleware.auth",
            "models.requests",
            "models.responses",
            "services.llm_service",
            "typing"
          ],
          "hash": "98b3a53aab4b11fc41c646ed118d313f39f0f4a02aa39cde44fe28a4f89706f2",
          "uid": "llmstruct.api.routes.continue_adapter",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.routes",
            "llmstruct.api.routes.continue_adapter"
          ],
          "uid_type": "module",
          "artifact_id": "4f096db2-0ea3-43ce-d7fd-33aa0b597eab",
          "metrics": {
            "cyclomatic_complexity": 9,
            "lines_of_code": 50,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 20,
            "test_coverage": 0.0,
            "maintainability_index": 55
          },
          "markdown_anchor": {
            "id": "llmstruct-api-routes-continue_adapter",
            "title": "Module: llmstruct.api.routes.continue_adapter",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.api.routes.continue_adapter](#llmstruct-api-routes-continue_adapter)",
            "html_anchor": "<a id=\"llmstruct-api-routes-continue_adapter\"></a>"
          }
        }
      ],
      "api.middleware": [
        {
          "module_id": "llmstruct.api.middleware.__init__",
          "path": "llmstruct/api/middleware/__init__.py",
          "category": "cli",
          "module_doc": "Middleware package for LLMStruct FastAPI\n\nContains authentication, logging, and other middleware.",
          "functions": [],
          "classes": [],
          "callgraph": {},
          "dependencies": [],
          "hash": "2675b95488b2d45c21c244b8c633aa8a1cbbc2af4d2a4094c07426c9fed917ce",
          "uid": "llmstruct.api.middleware.__init__",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.middleware",
            "llmstruct.api.middleware.__init__"
          ],
          "uid_type": "module",
          "artifact_id": "e16616e9-15ef-2908-e15f-72b28ecacc3d",
          "metrics": {
            "cyclomatic_complexity": 0,
            "lines_of_code": 0,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 0,
            "test_coverage": 0.0,
            "maintainability_index": 100
          },
          "markdown_anchor": {
            "id": "llmstruct-api-middleware-__init__",
            "title": "Module: llmstruct.api.middleware.__init__",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.api.middleware.__init__](#llmstruct-api-middleware-__init__)",
            "html_anchor": "<a id=\"llmstruct-api-middleware-__init__\"></a>"
          }
        },
        {
          "module_id": "llmstruct.api.middleware.logging",
          "path": "llmstruct/api/middleware/logging.py",
          "category": "core",
          "module_doc": "Logging middleware for LLMStruct FastAPI",
          "functions": [
            {
              "name": "request_logging_middleware",
              "docstring": "Request and response logging middleware",
              "line_range": [
                14,
                72
              ],
              "parameters": [
                "request",
                "call_next"
              ],
              "decorators": [],
              "uid": "llmstruct.api.middleware.logging.request_logging_middleware",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.middleware",
                "llmstruct.api.middleware.logging",
                "llmstruct.api.middleware.logging.request_logging_middleware"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [],
          "callgraph": {
            "request_logging_middleware": [
              "getattr",
              "time.time",
              "uuid.uuid4",
              "logger.info",
              "logger.error",
              "str",
              "call_next"
            ]
          },
          "dependencies": [
            "Callable",
            "Request",
            "fastapi",
            "logging",
            "time",
            "typing",
            "uuid"
          ],
          "hash": "ad05f6fcbc2b6f2eb916437708888f9bdbd21efbb0a3b1c83cf36463bce9fcea",
          "uid": "llmstruct.api.middleware.logging",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.middleware",
            "llmstruct.api.middleware.logging"
          ],
          "uid_type": "module",
          "artifact_id": "28a396ce-d889-fa5c-51af-d1e18d8327fc",
          "metrics": {
            "cyclomatic_complexity": 1,
            "lines_of_code": 10,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 7,
            "test_coverage": 0.0,
            "maintainability_index": 95
          },
          "markdown_anchor": {
            "id": "llmstruct-api-middleware-logging",
            "title": "Module: llmstruct.api.middleware.logging",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.api.middleware.logging](#llmstruct-api-middleware-logging)",
            "html_anchor": "<a id=\"llmstruct-api-middleware-logging\"></a>"
          }
        }
      ],
      "api.services": [
        {
          "module_id": "llmstruct.api.services.llm_service",
          "path": "llmstruct/api/services/llm_service.py",
          "category": "core",
          "module_doc": "LLM Service\n\nIntegrates with existing LLM models and context orchestration",
          "functions": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                24,
                28
              ],
              "parameters": [
                "self",
                "content",
                "context_info",
                "token_usage"
              ],
              "decorators": [],
              "uid": "llmstruct.api.services.llm_service.__init__",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service.__init__"
              ],
              "uid_type": "function"
            },
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                33,
                36
              ],
              "parameters": [
                "self",
                "api_key"
              ],
              "decorators": [],
              "uid": "llmstruct.api.services.llm_service.__init__",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service.__init__"
              ],
              "uid_type": "function"
            },
            {
              "name": "chat_completion",
              "docstring": "Send chat completion request to Anthropic",
              "line_range": [
                38,
                77
              ],
              "parameters": [
                "self",
                "messages",
                "temperature"
              ],
              "decorators": [],
              "uid": "llmstruct.api.services.llm_service.chat_completion",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service.chat_completion"
              ],
              "uid_type": "function"
            },
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                82,
                85
              ],
              "parameters": [
                "self",
                "api_key"
              ],
              "decorators": [],
              "uid": "llmstruct.api.services.llm_service.__init__",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service.__init__"
              ],
              "uid_type": "function"
            },
            {
              "name": "chat_completion",
              "docstring": "Send chat completion request to Grok",
              "line_range": [
                87,
                113
              ],
              "parameters": [
                "self",
                "messages",
                "temperature"
              ],
              "decorators": [],
              "uid": "llmstruct.api.services.llm_service.chat_completion",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service.chat_completion"
              ],
              "uid_type": "function"
            },
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                118,
                124
              ],
              "parameters": [
                "self",
                "base_path"
              ],
              "decorators": [],
              "uid": "llmstruct.api.services.llm_service.__init__",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service.__init__"
              ],
              "uid_type": "function"
            },
            {
              "name": "_initialize_components",
              "docstring": "Initialize context orchestrator and copilot manager",
              "line_range": [
                126,
                140
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "llmstruct.api.services.llm_service._initialize_components",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service._initialize_components"
              ],
              "uid_type": "function"
            },
            {
              "name": "process_message",
              "docstring": "Process a user message and return AI response",
              "line_range": [
                143,
                168
              ],
              "parameters": [
                "self",
                "message",
                "session_id",
                "context_mode"
              ],
              "decorators": [],
              "uid": "llmstruct.api.services.llm_service.process_message",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service.process_message"
              ],
              "uid_type": "function"
            },
            {
              "name": "_try_llm_providers",
              "docstring": "Try LLM providers in order and return response",
              "line_range": [
                170,
                195
              ],
              "parameters": [
                "self",
                "message",
                "context_info"
              ],
              "decorators": [],
              "uid": "llmstruct.api.services.llm_service._try_llm_providers",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service._try_llm_providers"
              ],
              "uid_type": "function"
            },
            {
              "name": "_get_context",
              "docstring": "Get relevant context for the message",
              "line_range": [
                197,
                229
              ],
              "parameters": [
                "self",
                "message",
                "context_mode"
              ],
              "decorators": [],
              "uid": "llmstruct.api.services.llm_service._get_context",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service._get_context"
              ],
              "uid_type": "function"
            },
            {
              "name": "_get_full_context",
              "docstring": "Get full project context",
              "line_range": [
                231,
                243
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "llmstruct.api.services.llm_service._get_full_context",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service._get_full_context"
              ],
              "uid_type": "function"
            },
            {
              "name": "_get_focused_context",
              "docstring": "Get focused context based on message content",
              "line_range": [
                245,
                260
              ],
              "parameters": [
                "self",
                "message"
              ],
              "decorators": [],
              "uid": "llmstruct.api.services.llm_service._get_focused_context",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service._get_focused_context"
              ],
              "uid_type": "function"
            },
            {
              "name": "_get_minimal_context",
              "docstring": "Get minimal context - basic project info",
              "line_range": [
                262,
                267
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "llmstruct.api.services.llm_service._get_minimal_context",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service._get_minimal_context"
              ],
              "uid_type": "function"
            },
            {
              "name": "_generate_grok_response",
              "docstring": "Generate response using Grok API",
              "line_range": [
                269,
                287
              ],
              "parameters": [
                "self",
                "message",
                "context_info"
              ],
              "decorators": [],
              "uid": "llmstruct.api.services.llm_service._generate_grok_response",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service._generate_grok_response"
              ],
              "uid_type": "function"
            },
            {
              "name": "_generate_anthropic_response",
              "docstring": "Generate response using Anthropic API",
              "line_range": [
                289,
                307
              ],
              "parameters": [
                "self",
                "message",
                "context_info"
              ],
              "decorators": [],
              "uid": "llmstruct.api.services.llm_service._generate_anthropic_response",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service._generate_anthropic_response"
              ],
              "uid_type": "function"
            },
            {
              "name": "_build_system_prompt",
              "docstring": "Build system prompt with project context",
              "line_range": [
                309,
                344
              ],
              "parameters": [
                "self",
                "context_info"
              ],
              "decorators": [],
              "uid": "llmstruct.api.services.llm_service._build_system_prompt",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service._build_system_prompt"
              ],
              "uid_type": "function"
            },
            {
              "name": "_generate_mock_response",
              "docstring": "Generate a mock AI response (placeholder for real LLM)",
              "line_range": [
                346,
                380
              ],
              "parameters": [
                "self",
                "message",
                "context_info"
              ],
              "decorators": [],
              "uid": "llmstruct.api.services.llm_service._generate_mock_response",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service._generate_mock_response"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [
            {
              "name": "LLMResponse",
              "docstring": "Response from LLM processing",
              "line_range": [
                21,
                28
              ],
              "methods": [
                {
                  "name": "__init__",
                  "docstring": "",
                  "line_range": [
                    24,
                    28
                  ],
                  "parameters": [
                    "self",
                    "content",
                    "context_info",
                    "token_usage"
                  ],
                  "uid": "llmstruct.api.services.llm_service.LLMResponse.__init__",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.api",
                    "llmstruct.api.services",
                    "llmstruct.api.services.llm_service",
                    "llmstruct.api.services.llm_service.LLMResponse",
                    "llmstruct.api.services.llm_service.LLMResponse.__init__"
                  ],
                  "uid_type": "method"
                }
              ],
              "bases": [],
              "uid": "llmstruct.api.services.llm_service.LLMResponse",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service.LLMResponse"
              ],
              "uid_type": "class"
            },
            {
              "name": "AnthropicClient",
              "docstring": "Client for Anthropic Claude API",
              "line_range": [
                30,
                77
              ],
              "methods": [
                {
                  "name": "__init__",
                  "docstring": "",
                  "line_range": [
                    33,
                    36
                  ],
                  "parameters": [
                    "self",
                    "api_key"
                  ],
                  "uid": "llmstruct.api.services.llm_service.AnthropicClient.__init__",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.api",
                    "llmstruct.api.services",
                    "llmstruct.api.services.llm_service",
                    "llmstruct.api.services.llm_service.AnthropicClient",
                    "llmstruct.api.services.llm_service.AnthropicClient.__init__"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "chat_completion",
                  "docstring": "Send chat completion request to Anthropic",
                  "line_range": [
                    38,
                    77
                  ],
                  "parameters": [
                    "self",
                    "messages",
                    "temperature"
                  ],
                  "uid": "llmstruct.api.services.llm_service.AnthropicClient.chat_completion",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.api",
                    "llmstruct.api.services",
                    "llmstruct.api.services.llm_service",
                    "llmstruct.api.services.llm_service.AnthropicClient",
                    "llmstruct.api.services.llm_service.AnthropicClient.chat_completion"
                  ],
                  "uid_type": "method"
                }
              ],
              "bases": [],
              "uid": "llmstruct.api.services.llm_service.AnthropicClient",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service.AnthropicClient"
              ],
              "uid_type": "class"
            },
            {
              "name": "GrokClient",
              "docstring": "Client for Grok API integration",
              "line_range": [
                79,
                113
              ],
              "methods": [
                {
                  "name": "__init__",
                  "docstring": "",
                  "line_range": [
                    82,
                    85
                  ],
                  "parameters": [
                    "self",
                    "api_key"
                  ],
                  "uid": "llmstruct.api.services.llm_service.GrokClient.__init__",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.api",
                    "llmstruct.api.services",
                    "llmstruct.api.services.llm_service",
                    "llmstruct.api.services.llm_service.GrokClient",
                    "llmstruct.api.services.llm_service.GrokClient.__init__"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "chat_completion",
                  "docstring": "Send chat completion request to Grok",
                  "line_range": [
                    87,
                    113
                  ],
                  "parameters": [
                    "self",
                    "messages",
                    "temperature"
                  ],
                  "uid": "llmstruct.api.services.llm_service.GrokClient.chat_completion",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.api",
                    "llmstruct.api.services",
                    "llmstruct.api.services.llm_service",
                    "llmstruct.api.services.llm_service.GrokClient",
                    "llmstruct.api.services.llm_service.GrokClient.chat_completion"
                  ],
                  "uid_type": "method"
                }
              ],
              "bases": [],
              "uid": "llmstruct.api.services.llm_service.GrokClient",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service.GrokClient"
              ],
              "uid_type": "class"
            },
            {
              "name": "LLMService",
              "docstring": "Service for LLM processing with context integration",
              "line_range": [
                115,
                380
              ],
              "methods": [
                {
                  "name": "__init__",
                  "docstring": "",
                  "line_range": [
                    118,
                    124
                  ],
                  "parameters": [
                    "self",
                    "base_path"
                  ],
                  "uid": "llmstruct.api.services.llm_service.LLMService.__init__",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.api",
                    "llmstruct.api.services",
                    "llmstruct.api.services.llm_service",
                    "llmstruct.api.services.llm_service.LLMService",
                    "llmstruct.api.services.llm_service.LLMService.__init__"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_initialize_components",
                  "docstring": "Initialize context orchestrator and copilot manager",
                  "line_range": [
                    126,
                    140
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "llmstruct.api.services.llm_service.LLMService._initialize_components",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.api",
                    "llmstruct.api.services",
                    "llmstruct.api.services.llm_service",
                    "llmstruct.api.services.llm_service.LLMService",
                    "llmstruct.api.services.llm_service.LLMService._initialize_components"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "process_message",
                  "docstring": "Process a user message and return AI response",
                  "line_range": [
                    143,
                    168
                  ],
                  "parameters": [
                    "self",
                    "message",
                    "session_id",
                    "context_mode"
                  ],
                  "uid": "llmstruct.api.services.llm_service.LLMService.process_message",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.api",
                    "llmstruct.api.services",
                    "llmstruct.api.services.llm_service",
                    "llmstruct.api.services.llm_service.LLMService",
                    "llmstruct.api.services.llm_service.LLMService.process_message"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_try_llm_providers",
                  "docstring": "Try LLM providers in order and return response",
                  "line_range": [
                    170,
                    195
                  ],
                  "parameters": [
                    "self",
                    "message",
                    "context_info"
                  ],
                  "uid": "llmstruct.api.services.llm_service.LLMService._try_llm_providers",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.api",
                    "llmstruct.api.services",
                    "llmstruct.api.services.llm_service",
                    "llmstruct.api.services.llm_service.LLMService",
                    "llmstruct.api.services.llm_service.LLMService._try_llm_providers"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_get_context",
                  "docstring": "Get relevant context for the message",
                  "line_range": [
                    197,
                    229
                  ],
                  "parameters": [
                    "self",
                    "message",
                    "context_mode"
                  ],
                  "uid": "llmstruct.api.services.llm_service.LLMService._get_context",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.api",
                    "llmstruct.api.services",
                    "llmstruct.api.services.llm_service",
                    "llmstruct.api.services.llm_service.LLMService",
                    "llmstruct.api.services.llm_service.LLMService._get_context"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_get_full_context",
                  "docstring": "Get full project context",
                  "line_range": [
                    231,
                    243
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "llmstruct.api.services.llm_service.LLMService._get_full_context",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.api",
                    "llmstruct.api.services",
                    "llmstruct.api.services.llm_service",
                    "llmstruct.api.services.llm_service.LLMService",
                    "llmstruct.api.services.llm_service.LLMService._get_full_context"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_get_focused_context",
                  "docstring": "Get focused context based on message content",
                  "line_range": [
                    245,
                    260
                  ],
                  "parameters": [
                    "self",
                    "message"
                  ],
                  "uid": "llmstruct.api.services.llm_service.LLMService._get_focused_context",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.api",
                    "llmstruct.api.services",
                    "llmstruct.api.services.llm_service",
                    "llmstruct.api.services.llm_service.LLMService",
                    "llmstruct.api.services.llm_service.LLMService._get_focused_context"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_get_minimal_context",
                  "docstring": "Get minimal context - basic project info",
                  "line_range": [
                    262,
                    267
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "llmstruct.api.services.llm_service.LLMService._get_minimal_context",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.api",
                    "llmstruct.api.services",
                    "llmstruct.api.services.llm_service",
                    "llmstruct.api.services.llm_service.LLMService",
                    "llmstruct.api.services.llm_service.LLMService._get_minimal_context"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_generate_grok_response",
                  "docstring": "Generate response using Grok API",
                  "line_range": [
                    269,
                    287
                  ],
                  "parameters": [
                    "self",
                    "message",
                    "context_info"
                  ],
                  "uid": "llmstruct.api.services.llm_service.LLMService._generate_grok_response",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.api",
                    "llmstruct.api.services",
                    "llmstruct.api.services.llm_service",
                    "llmstruct.api.services.llm_service.LLMService",
                    "llmstruct.api.services.llm_service.LLMService._generate_grok_response"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_generate_anthropic_response",
                  "docstring": "Generate response using Anthropic API",
                  "line_range": [
                    289,
                    307
                  ],
                  "parameters": [
                    "self",
                    "message",
                    "context_info"
                  ],
                  "uid": "llmstruct.api.services.llm_service.LLMService._generate_anthropic_response",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.api",
                    "llmstruct.api.services",
                    "llmstruct.api.services.llm_service",
                    "llmstruct.api.services.llm_service.LLMService",
                    "llmstruct.api.services.llm_service.LLMService._generate_anthropic_response"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_build_system_prompt",
                  "docstring": "Build system prompt with project context",
                  "line_range": [
                    309,
                    344
                  ],
                  "parameters": [
                    "self",
                    "context_info"
                  ],
                  "uid": "llmstruct.api.services.llm_service.LLMService._build_system_prompt",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.api",
                    "llmstruct.api.services",
                    "llmstruct.api.services.llm_service",
                    "llmstruct.api.services.llm_service.LLMService",
                    "llmstruct.api.services.llm_service.LLMService._build_system_prompt"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_generate_mock_response",
                  "docstring": "Generate a mock AI response (placeholder for real LLM)",
                  "line_range": [
                    346,
                    380
                  ],
                  "parameters": [
                    "self",
                    "message",
                    "context_info"
                  ],
                  "uid": "llmstruct.api.services.llm_service.LLMService._generate_mock_response",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.api",
                    "llmstruct.api.services",
                    "llmstruct.api.services.llm_service",
                    "llmstruct.api.services.llm_service.LLMService",
                    "llmstruct.api.services.llm_service.LLMService._generate_mock_response"
                  ],
                  "uid_type": "method"
                }
              ],
              "bases": [],
              "uid": "llmstruct.api.services.llm_service.LLMService",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.llm_service",
                "llmstruct.api.services.llm_service.LLMService"
              ],
              "uid_type": "class"
            }
          ],
          "callgraph": {
            "__init__": [
              "self._initialize_components",
              "GrokClient",
              "AnthropicClient",
              "Path.cwd"
            ],
            "chat_completion": [
              "httpx.AsyncClient",
              "response.json",
              "client.post",
              "response.raise_for_status",
              "ValueError"
            ],
            "_initialize_components": [
              "CopilotContextManager",
              "logger.info",
              "logger.error",
              "SmartContextOrchestrator",
              "str"
            ],
            "process_message": [
              "self._try_llm_providers",
              "LLMResponse",
              "logger.error",
              "str",
              "self._get_context"
            ],
            "_try_llm_providers": [
              "len",
              "logger.warning",
              "logger.info",
              "self._generate_mock_response",
              "self._generate_anthropic_response",
              "self._generate_grok_response"
            ],
            "_get_context": [
              "self._get_full_context",
              "self._get_minimal_context",
              "logger.error",
              "self._get_focused_context",
              "str",
              "context_info.update"
            ],
            "_get_full_context": [
              "len",
              "struct_file.exists",
              "open",
              "json.load",
              "list",
              "struct_data.get"
            ],
            "_get_focused_context": [
              "any",
              "message.lower"
            ],
            "_get_minimal_context": [
              "str",
              "datetime.now"
            ],
            "_generate_grok_response": [
              "ValueError",
              "self._build_system_prompt",
              "len"
            ],
            "_generate_anthropic_response": [
              "ValueError",
              "self._build_system_prompt",
              "len"
            ],
            "_build_system_prompt": [
              "context_info.get"
            ],
            "_generate_mock_response": [
              "context_info.get",
              "len",
              "message.lower"
            ]
          },
          "dependencies": [
            "Any",
            "CopilotContextManager",
            "Dict",
            "List",
            "Optional",
            "Path",
            "SmartContextOrchestrator",
            "asyncio",
            "context_orchestrator",
            "copilot",
            "datetime",
            "httpx",
            "json",
            "logging",
            "os",
            "pathlib",
            "typing"
          ],
          "hash": "a1d741ba8e78df4c0ac307472301c495c4ea017423b103d7472bc5ae6250ab6f",
          "uid": "llmstruct.api.services.llm_service",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.llm_service"
          ],
          "uid_type": "module",
          "artifact_id": "d409c9b3-c874-f2fe-0bc0-b1023dc6c80f",
          "metrics": {
            "cyclomatic_complexity": 25,
            "lines_of_code": 170,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 17,
            "test_coverage": 0.0,
            "maintainability_index": 0
          },
          "markdown_anchor": {
            "id": "llmstruct-api-services-llm_service",
            "title": "Module: llmstruct.api.services.llm_service",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.api.services.llm_service](#llmstruct-api-services-llm_service)",
            "html_anchor": "<a id=\"llmstruct-api-services-llm_service\"></a>"
          }
        },
        {
          "module_id": "llmstruct.api.services.__init__",
          "path": "llmstruct/api/services/__init__.py",
          "category": "cli",
          "module_doc": "Services package for LLMStruct FastAPI\n\nContains business logic and integration services.",
          "functions": [],
          "classes": [],
          "callgraph": {},
          "dependencies": [],
          "hash": "44b6e1c9b0237a6636ef094dffd5589c9565f840159c5dd657c930c8838d323d",
          "uid": "llmstruct.api.services.__init__",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.__init__"
          ],
          "uid_type": "module",
          "artifact_id": "9ecbfe8b-427e-572f-cf56-4d55b18667f9",
          "metrics": {
            "cyclomatic_complexity": 0,
            "lines_of_code": 0,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 0,
            "test_coverage": 0.0,
            "maintainability_index": 100
          },
          "markdown_anchor": {
            "id": "llmstruct-api-services-__init__",
            "title": "Module: llmstruct.api.services.__init__",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.api.services.__init__](#llmstruct-api-services-__init__)",
            "html_anchor": "<a id=\"llmstruct-api-services-__init__\"></a>"
          }
        },
        {
          "module_id": "llmstruct.api.services.cli_bridge",
          "path": "llmstruct/api/services/cli_bridge.py",
          "category": "core",
          "module_doc": "CLI Bridge Service\n\nProvides async integration between FastAPI and existing LLMStruct CLI functionality.",
          "functions": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                29,
                33
              ],
              "parameters": [
                "self",
                "base_path"
              ],
              "decorators": [],
              "uid": "llmstruct.api.services.cli_bridge.__init__",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.cli_bridge",
                "llmstruct.api.services.cli_bridge.__init__"
              ],
              "uid_type": "function"
            },
            {
              "name": "_get_python_command",
              "docstring": "Determine the best Python command to use",
              "line_range": [
                35,
                40
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "llmstruct.api.services.cli_bridge._get_python_command",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.cli_bridge",
                "llmstruct.api.services.cli_bridge._get_python_command"
              ],
              "uid_type": "function"
            },
            {
              "name": "scan_project",
              "docstring": "Execute project scan via CLI",
              "line_range": [
                42,
                87
              ],
              "parameters": [
                "self",
                "options"
              ],
              "decorators": [],
              "uid": "llmstruct.api.services.cli_bridge.scan_project",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.cli_bridge",
                "llmstruct.api.services.cli_bridge.scan_project"
              ],
              "uid_type": "function"
            },
            {
              "name": "get_context",
              "docstring": "Get project context in specified mode",
              "line_range": [
                89,
                98
              ],
              "parameters": [
                "self",
                "mode",
                "include_files"
              ],
              "decorators": [],
              "uid": "llmstruct.api.services.cli_bridge.get_context",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.cli_bridge",
                "llmstruct.api.services.cli_bridge.get_context"
              ],
              "uid_type": "function"
            },
            {
              "name": "get_project_info",
              "docstring": "Get basic project information",
              "line_range": [
                100,
                104
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "llmstruct.api.services.cli_bridge.get_project_info",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.cli_bridge",
                "llmstruct.api.services.cli_bridge.get_project_info"
              ],
              "uid_type": "function"
            },
            {
              "name": "validate_json",
              "docstring": "Validate JSON structure",
              "line_range": [
                106,
                110
              ],
              "parameters": [
                "self",
                "json_path"
              ],
              "decorators": [],
              "uid": "llmstruct.api.services.cli_bridge.validate_json",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.cli_bridge",
                "llmstruct.api.services.cli_bridge.validate_json"
              ],
              "uid_type": "function"
            },
            {
              "name": "health_check",
              "docstring": "Check CLI health and availability",
              "line_range": [
                112,
                128
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "llmstruct.api.services.cli_bridge.health_check",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.cli_bridge",
                "llmstruct.api.services.cli_bridge.health_check"
              ],
              "uid_type": "function"
            },
            {
              "name": "_run_command",
              "docstring": "Run CLI command asynchronously",
              "line_range": [
                130,
                161
              ],
              "parameters": [
                "self",
                "cmd",
                "timeout"
              ],
              "decorators": [],
              "uid": "llmstruct.api.services.cli_bridge._run_command",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.cli_bridge",
                "llmstruct.api.services.cli_bridge._run_command"
              ],
              "uid_type": "function"
            },
            {
              "name": "_parse_cli_output",
              "docstring": "Parse CLI JSON output",
              "line_range": [
                163,
                176
              ],
              "parameters": [
                "self",
                "output"
              ],
              "decorators": [],
              "uid": "llmstruct.api.services.cli_bridge._parse_cli_output",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.cli_bridge",
                "llmstruct.api.services.cli_bridge._parse_cli_output"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [
            {
              "name": "CLIBridgeError",
              "docstring": "CLI Bridge specific errors",
              "line_range": [
                21,
                23
              ],
              "methods": [],
              "bases": [
                "Exception"
              ],
              "uid": "llmstruct.api.services.cli_bridge.CLIBridgeError",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.cli_bridge",
                "llmstruct.api.services.cli_bridge.CLIBridgeError"
              ],
              "uid_type": "class"
            },
            {
              "name": "CLIBridge",
              "docstring": "Bridge between FastAPI and existing CLI functionality",
              "line_range": [
                26,
                176
              ],
              "methods": [
                {
                  "name": "__init__",
                  "docstring": "",
                  "line_range": [
                    29,
                    33
                  ],
                  "parameters": [
                    "self",
                    "base_path"
                  ],
                  "uid": "llmstruct.api.services.cli_bridge.CLIBridge.__init__",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.api",
                    "llmstruct.api.services",
                    "llmstruct.api.services.cli_bridge",
                    "llmstruct.api.services.cli_bridge.CLIBridge",
                    "llmstruct.api.services.cli_bridge.CLIBridge.__init__"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_get_python_command",
                  "docstring": "Determine the best Python command to use",
                  "line_range": [
                    35,
                    40
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "llmstruct.api.services.cli_bridge.CLIBridge._get_python_command",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.api",
                    "llmstruct.api.services",
                    "llmstruct.api.services.cli_bridge",
                    "llmstruct.api.services.cli_bridge.CLIBridge",
                    "llmstruct.api.services.cli_bridge.CLIBridge._get_python_command"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "scan_project",
                  "docstring": "Execute project scan via CLI",
                  "line_range": [
                    42,
                    87
                  ],
                  "parameters": [
                    "self",
                    "options"
                  ],
                  "uid": "llmstruct.api.services.cli_bridge.CLIBridge.scan_project",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.api",
                    "llmstruct.api.services",
                    "llmstruct.api.services.cli_bridge",
                    "llmstruct.api.services.cli_bridge.CLIBridge",
                    "llmstruct.api.services.cli_bridge.CLIBridge.scan_project"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "get_context",
                  "docstring": "Get project context in specified mode",
                  "line_range": [
                    89,
                    98
                  ],
                  "parameters": [
                    "self",
                    "mode",
                    "include_files"
                  ],
                  "uid": "llmstruct.api.services.cli_bridge.CLIBridge.get_context",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.api",
                    "llmstruct.api.services",
                    "llmstruct.api.services.cli_bridge",
                    "llmstruct.api.services.cli_bridge.CLIBridge",
                    "llmstruct.api.services.cli_bridge.CLIBridge.get_context"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "get_project_info",
                  "docstring": "Get basic project information",
                  "line_range": [
                    100,
                    104
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "llmstruct.api.services.cli_bridge.CLIBridge.get_project_info",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.api",
                    "llmstruct.api.services",
                    "llmstruct.api.services.cli_bridge",
                    "llmstruct.api.services.cli_bridge.CLIBridge",
                    "llmstruct.api.services.cli_bridge.CLIBridge.get_project_info"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "validate_json",
                  "docstring": "Validate JSON structure",
                  "line_range": [
                    106,
                    110
                  ],
                  "parameters": [
                    "self",
                    "json_path"
                  ],
                  "uid": "llmstruct.api.services.cli_bridge.CLIBridge.validate_json",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.api",
                    "llmstruct.api.services",
                    "llmstruct.api.services.cli_bridge",
                    "llmstruct.api.services.cli_bridge.CLIBridge",
                    "llmstruct.api.services.cli_bridge.CLIBridge.validate_json"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "health_check",
                  "docstring": "Check CLI health and availability",
                  "line_range": [
                    112,
                    128
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "llmstruct.api.services.cli_bridge.CLIBridge.health_check",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.api",
                    "llmstruct.api.services",
                    "llmstruct.api.services.cli_bridge",
                    "llmstruct.api.services.cli_bridge.CLIBridge",
                    "llmstruct.api.services.cli_bridge.CLIBridge.health_check"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_run_command",
                  "docstring": "Run CLI command asynchronously",
                  "line_range": [
                    130,
                    161
                  ],
                  "parameters": [
                    "self",
                    "cmd",
                    "timeout"
                  ],
                  "uid": "llmstruct.api.services.cli_bridge.CLIBridge._run_command",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.api",
                    "llmstruct.api.services",
                    "llmstruct.api.services.cli_bridge",
                    "llmstruct.api.services.cli_bridge.CLIBridge",
                    "llmstruct.api.services.cli_bridge.CLIBridge._run_command"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_parse_cli_output",
                  "docstring": "Parse CLI JSON output",
                  "line_range": [
                    163,
                    176
                  ],
                  "parameters": [
                    "self",
                    "output"
                  ],
                  "uid": "llmstruct.api.services.cli_bridge.CLIBridge._parse_cli_output",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.api",
                    "llmstruct.api.services",
                    "llmstruct.api.services.cli_bridge",
                    "llmstruct.api.services.cli_bridge.CLIBridge",
                    "llmstruct.api.services.cli_bridge.CLIBridge._parse_cli_output"
                  ],
                  "uid_type": "method"
                }
              ],
              "bases": [],
              "uid": "llmstruct.api.services.cli_bridge.CLIBridge",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.cli_bridge",
                "llmstruct.api.services.cli_bridge.CLIBridge"
              ],
              "uid_type": "class"
            }
          ],
          "callgraph": {
            "__init__": [
              "self._get_python_command",
              "Path.cwd"
            ],
            "_get_python_command": [
              "str",
              "venv_python.exists"
            ],
            "scan_project": [
              "self._parse_cli_output",
              "self._run_command",
              "open",
              "os.unlink",
              "options.get",
              "cmd.append",
              "tempfile.mkstemp",
              "json.load",
              "logger.error",
              "os.close",
              "cmd.extend"
            ],
            "get_context": [
              "cmd.extend",
              "self._parse_cli_output",
              "self._run_command"
            ],
            "get_project_info": [
              "self._parse_cli_output",
              "self._run_command"
            ],
            "validate_json": [
              "self._parse_cli_output",
              "self._run_command"
            ],
            "health_check": [
              "str",
              "self._run_command"
            ],
            "_run_command": [
              "asyncio.create_subprocess_exec",
              "logger.info",
              "logger.error",
              "CLIBridgeError",
              "stderr.decode",
              "str",
              "asyncio.wait_for",
              "process.communicate",
              "stdout.decode"
            ],
            "_parse_cli_output": [
              "json.loads",
              "output.strip"
            ]
          },
          "dependencies": [
            "Any",
            "Dict",
            "List",
            "Optional",
            "Path",
            "asyncio",
            "config",
            "json",
            "logging",
            "os",
            "pathlib",
            "settings",
            "subprocess",
            "tempfile",
            "typing"
          ],
          "hash": "ae6642d6b4982964e62cfd89d281408fbc17bf8540df9d761aa7c540a33cd9d0",
          "uid": "llmstruct.api.services.cli_bridge",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.cli_bridge"
          ],
          "uid_type": "module",
          "artifact_id": "d4a8f3aa-320f-8e55-b346-1ebb8cd53825",
          "metrics": {
            "cyclomatic_complexity": 13,
            "lines_of_code": 90,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 15,
            "test_coverage": 0.0,
            "maintainability_index": 35
          },
          "markdown_anchor": {
            "id": "llmstruct-api-services-cli_bridge",
            "title": "Module: llmstruct.api.services.cli_bridge",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.api.services.cli_bridge](#llmstruct-api-services-cli_bridge)",
            "html_anchor": "<a id=\"llmstruct-api-services-cli_bridge\"></a>"
          }
        },
        {
          "module_id": "llmstruct.api.services.chat_session",
          "path": "llmstruct/api/services/chat_session.py",
          "category": "core",
          "module_doc": "Chat Session Manager\n\nManages persistent chat sessions and conversation history",
          "functions": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                19,
                24
              ],
              "parameters": [
                "self",
                "session_id"
              ],
              "decorators": [],
              "uid": "llmstruct.api.services.chat_session.__init__",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.chat_session",
                "llmstruct.api.services.chat_session.__init__"
              ],
              "uid_type": "function"
            },
            {
              "name": "add_message",
              "docstring": "Add a message to the session",
              "line_range": [
                26,
                36
              ],
              "parameters": [
                "self",
                "role",
                "content",
                "metadata"
              ],
              "decorators": [],
              "uid": "llmstruct.api.services.chat_session.add_message",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.chat_session",
                "llmstruct.api.services.chat_session.add_message"
              ],
              "uid_type": "function"
            },
            {
              "name": "get_messages",
              "docstring": "Get messages from session, optionally limited",
              "line_range": [
                38,
                42
              ],
              "parameters": [
                "self",
                "limit"
              ],
              "decorators": [],
              "uid": "llmstruct.api.services.chat_session.get_messages",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.chat_session",
                "llmstruct.api.services.chat_session.get_messages"
              ],
              "uid_type": "function"
            },
            {
              "name": "get_context_string",
              "docstring": "Get recent messages as context string",
              "line_range": [
                44,
                54
              ],
              "parameters": [
                "self",
                "limit"
              ],
              "decorators": [],
              "uid": "llmstruct.api.services.chat_session.get_context_string",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.chat_session",
                "llmstruct.api.services.chat_session.get_context_string"
              ],
              "uid_type": "function"
            },
            {
              "name": "to_dict",
              "docstring": "Convert session to dictionary",
              "line_range": [
                56,
                65
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "llmstruct.api.services.chat_session.to_dict",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.chat_session",
                "llmstruct.api.services.chat_session.to_dict"
              ],
              "uid_type": "function"
            },
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                70,
                73
              ],
              "parameters": [
                "self",
                "storage_path"
              ],
              "decorators": [],
              "uid": "llmstruct.api.services.chat_session.__init__",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.chat_session",
                "llmstruct.api.services.chat_session.__init__"
              ],
              "uid_type": "function"
            },
            {
              "name": "get_or_create_session",
              "docstring": "Get existing session or create new one",
              "line_range": [
                75,
                87
              ],
              "parameters": [
                "self",
                "session_id"
              ],
              "decorators": [],
              "uid": "llmstruct.api.services.chat_session.get_or_create_session",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.chat_session",
                "llmstruct.api.services.chat_session.get_or_create_session"
              ],
              "uid_type": "function"
            },
            {
              "name": "get_session",
              "docstring": "Get session by ID",
              "line_range": [
                89,
                101
              ],
              "parameters": [
                "self",
                "session_id"
              ],
              "decorators": [],
              "uid": "llmstruct.api.services.chat_session.get_session",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.chat_session",
                "llmstruct.api.services.chat_session.get_session"
              ],
              "uid_type": "function"
            },
            {
              "name": "add_message",
              "docstring": "Add message to session",
              "line_range": [
                103,
                109
              ],
              "parameters": [
                "self",
                "session_id",
                "role",
                "content",
                "metadata"
              ],
              "decorators": [],
              "uid": "llmstruct.api.services.chat_session.add_message",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.chat_session",
                "llmstruct.api.services.chat_session.add_message"
              ],
              "uid_type": "function"
            },
            {
              "name": "list_sessions",
              "docstring": "List all sessions with summary info",
              "line_range": [
                111,
                138
              ],
              "parameters": [
                "self",
                "limit"
              ],
              "decorators": [],
              "uid": "llmstruct.api.services.chat_session.list_sessions",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.chat_session",
                "llmstruct.api.services.chat_session.list_sessions"
              ],
              "uid_type": "function"
            },
            {
              "name": "delete_session",
              "docstring": "Delete a session",
              "line_range": [
                140,
                152
              ],
              "parameters": [
                "self",
                "session_id"
              ],
              "decorators": [],
              "uid": "llmstruct.api.services.chat_session.delete_session",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.chat_session",
                "llmstruct.api.services.chat_session.delete_session"
              ],
              "uid_type": "function"
            },
            {
              "name": "_load_session",
              "docstring": "Load session from storage",
              "line_range": [
                154,
                167
              ],
              "parameters": [
                "self",
                "session_id"
              ],
              "decorators": [],
              "uid": "llmstruct.api.services.chat_session._load_session",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.chat_session",
                "llmstruct.api.services.chat_session._load_session"
              ],
              "uid_type": "function"
            },
            {
              "name": "_save_session",
              "docstring": "Save session to storage",
              "line_range": [
                169,
                178
              ],
              "parameters": [
                "self",
                "session"
              ],
              "decorators": [],
              "uid": "llmstruct.api.services.chat_session._save_session",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.chat_session",
                "llmstruct.api.services.chat_session._save_session"
              ],
              "uid_type": "function"
            },
            {
              "name": "cleanup_old_sessions",
              "docstring": "Clean up sessions older than specified days",
              "line_range": [
                180,
                183
              ],
              "parameters": [
                "self",
                "days"
              ],
              "decorators": [],
              "uid": "llmstruct.api.services.chat_session.cleanup_old_sessions",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.chat_session",
                "llmstruct.api.services.chat_session.cleanup_old_sessions"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [
            {
              "name": "ChatSession",
              "docstring": "Represents a chat session with history",
              "line_range": [
                16,
                65
              ],
              "methods": [
                {
                  "name": "__init__",
                  "docstring": "",
                  "line_range": [
                    19,
                    24
                  ],
                  "parameters": [
                    "self",
                    "session_id"
                  ],
                  "uid": "llmstruct.api.services.chat_session.ChatSession.__init__",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.api",
                    "llmstruct.api.services",
                    "llmstruct.api.services.chat_session",
                    "llmstruct.api.services.chat_session.ChatSession",
                    "llmstruct.api.services.chat_session.ChatSession.__init__"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "add_message",
                  "docstring": "Add a message to the session",
                  "line_range": [
                    26,
                    36
                  ],
                  "parameters": [
                    "self",
                    "role",
                    "content",
                    "metadata"
                  ],
                  "uid": "llmstruct.api.services.chat_session.ChatSession.add_message",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.api",
                    "llmstruct.api.services",
                    "llmstruct.api.services.chat_session",
                    "llmstruct.api.services.chat_session.ChatSession",
                    "llmstruct.api.services.chat_session.ChatSession.add_message"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "get_messages",
                  "docstring": "Get messages from session, optionally limited",
                  "line_range": [
                    38,
                    42
                  ],
                  "parameters": [
                    "self",
                    "limit"
                  ],
                  "uid": "llmstruct.api.services.chat_session.ChatSession.get_messages",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.api",
                    "llmstruct.api.services",
                    "llmstruct.api.services.chat_session",
                    "llmstruct.api.services.chat_session.ChatSession",
                    "llmstruct.api.services.chat_session.ChatSession.get_messages"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "get_context_string",
                  "docstring": "Get recent messages as context string",
                  "line_range": [
                    44,
                    54
                  ],
                  "parameters": [
                    "self",
                    "limit"
                  ],
                  "uid": "llmstruct.api.services.chat_session.ChatSession.get_context_string",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.api",
                    "llmstruct.api.services",
                    "llmstruct.api.services.chat_session",
                    "llmstruct.api.services.chat_session.ChatSession",
                    "llmstruct.api.services.chat_session.ChatSession.get_context_string"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "to_dict",
                  "docstring": "Convert session to dictionary",
                  "line_range": [
                    56,
                    65
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "llmstruct.api.services.chat_session.ChatSession.to_dict",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.api",
                    "llmstruct.api.services",
                    "llmstruct.api.services.chat_session",
                    "llmstruct.api.services.chat_session.ChatSession",
                    "llmstruct.api.services.chat_session.ChatSession.to_dict"
                  ],
                  "uid_type": "method"
                }
              ],
              "bases": [],
              "uid": "llmstruct.api.services.chat_session.ChatSession",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.chat_session",
                "llmstruct.api.services.chat_session.ChatSession"
              ],
              "uid_type": "class"
            },
            {
              "name": "ChatSessionManager",
              "docstring": "Manages multiple chat sessions",
              "line_range": [
                67,
                183
              ],
              "methods": [
                {
                  "name": "__init__",
                  "docstring": "",
                  "line_range": [
                    70,
                    73
                  ],
                  "parameters": [
                    "self",
                    "storage_path"
                  ],
                  "uid": "llmstruct.api.services.chat_session.ChatSessionManager.__init__",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.api",
                    "llmstruct.api.services",
                    "llmstruct.api.services.chat_session",
                    "llmstruct.api.services.chat_session.ChatSessionManager",
                    "llmstruct.api.services.chat_session.ChatSessionManager.__init__"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "get_or_create_session",
                  "docstring": "Get existing session or create new one",
                  "line_range": [
                    75,
                    87
                  ],
                  "parameters": [
                    "self",
                    "session_id"
                  ],
                  "uid": "llmstruct.api.services.chat_session.ChatSessionManager.get_or_create_session",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.api",
                    "llmstruct.api.services",
                    "llmstruct.api.services.chat_session",
                    "llmstruct.api.services.chat_session.ChatSessionManager",
                    "llmstruct.api.services.chat_session.ChatSessionManager.get_or_create_session"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "get_session",
                  "docstring": "Get session by ID",
                  "line_range": [
                    89,
                    101
                  ],
                  "parameters": [
                    "self",
                    "session_id"
                  ],
                  "uid": "llmstruct.api.services.chat_session.ChatSessionManager.get_session",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.api",
                    "llmstruct.api.services",
                    "llmstruct.api.services.chat_session",
                    "llmstruct.api.services.chat_session.ChatSessionManager",
                    "llmstruct.api.services.chat_session.ChatSessionManager.get_session"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "add_message",
                  "docstring": "Add message to session",
                  "line_range": [
                    103,
                    109
                  ],
                  "parameters": [
                    "self",
                    "session_id",
                    "role",
                    "content",
                    "metadata"
                  ],
                  "uid": "llmstruct.api.services.chat_session.ChatSessionManager.add_message",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.api",
                    "llmstruct.api.services",
                    "llmstruct.api.services.chat_session",
                    "llmstruct.api.services.chat_session.ChatSessionManager",
                    "llmstruct.api.services.chat_session.ChatSessionManager.add_message"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "list_sessions",
                  "docstring": "List all sessions with summary info",
                  "line_range": [
                    111,
                    138
                  ],
                  "parameters": [
                    "self",
                    "limit"
                  ],
                  "uid": "llmstruct.api.services.chat_session.ChatSessionManager.list_sessions",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.api",
                    "llmstruct.api.services",
                    "llmstruct.api.services.chat_session",
                    "llmstruct.api.services.chat_session.ChatSessionManager",
                    "llmstruct.api.services.chat_session.ChatSessionManager.list_sessions"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "delete_session",
                  "docstring": "Delete a session",
                  "line_range": [
                    140,
                    152
                  ],
                  "parameters": [
                    "self",
                    "session_id"
                  ],
                  "uid": "llmstruct.api.services.chat_session.ChatSessionManager.delete_session",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.api",
                    "llmstruct.api.services",
                    "llmstruct.api.services.chat_session",
                    "llmstruct.api.services.chat_session.ChatSessionManager",
                    "llmstruct.api.services.chat_session.ChatSessionManager.delete_session"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_load_session",
                  "docstring": "Load session from storage",
                  "line_range": [
                    154,
                    167
                  ],
                  "parameters": [
                    "self",
                    "session_id"
                  ],
                  "uid": "llmstruct.api.services.chat_session.ChatSessionManager._load_session",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.api",
                    "llmstruct.api.services",
                    "llmstruct.api.services.chat_session",
                    "llmstruct.api.services.chat_session.ChatSessionManager",
                    "llmstruct.api.services.chat_session.ChatSessionManager._load_session"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_save_session",
                  "docstring": "Save session to storage",
                  "line_range": [
                    169,
                    178
                  ],
                  "parameters": [
                    "self",
                    "session"
                  ],
                  "uid": "llmstruct.api.services.chat_session.ChatSessionManager._save_session",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.api",
                    "llmstruct.api.services",
                    "llmstruct.api.services.chat_session",
                    "llmstruct.api.services.chat_session.ChatSessionManager",
                    "llmstruct.api.services.chat_session.ChatSessionManager._save_session"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "cleanup_old_sessions",
                  "docstring": "Clean up sessions older than specified days",
                  "line_range": [
                    180,
                    183
                  ],
                  "parameters": [
                    "self",
                    "days"
                  ],
                  "uid": "llmstruct.api.services.chat_session.ChatSessionManager.cleanup_old_sessions",
                  "uid_components": [
                    "llmstruct",
                    "llmstruct.api",
                    "llmstruct.api.services",
                    "llmstruct.api.services.chat_session",
                    "llmstruct.api.services.chat_session.ChatSessionManager",
                    "llmstruct.api.services.chat_session.ChatSessionManager.cleanup_old_sessions"
                  ],
                  "uid_type": "method"
                }
              ],
              "bases": [],
              "uid": "llmstruct.api.services.chat_session.ChatSessionManager",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.services",
                "llmstruct.api.services.chat_session",
                "llmstruct.api.services.chat_session.ChatSessionManager"
              ],
              "uid_type": "class"
            }
          ],
          "callgraph": {
            "__init__": [
              "Path.cwd"
            ],
            "add_message": [
              "session.add_message",
              "self._save_session",
              "self.get_or_create_session"
            ],
            "get_messages": [],
            "get_context_string": [
              "context_parts.append",
              "self.get_messages"
            ],
            "to_dict": [
              "len"
            ],
            "get_or_create_session": [
              "self._load_session",
              "session_file.exists",
              "ChatSession"
            ],
            "get_session": [
              "self._load_session",
              "session_file.exists"
            ],
            "list_sessions": [
              "sessions.append",
              "len",
              "sessions.sort",
              "self._load_session",
              "logger.error"
            ],
            "delete_session": [
              "session_file.exists",
              "session_file.unlink"
            ],
            "_load_session": [
              "json.load",
              "open",
              "data.get",
              "ChatSession"
            ],
            "_save_session": [
              "json.dump",
              "open",
              "logger.error",
              "session.to_dict"
            ],
            "cleanup_old_sessions": []
          },
          "dependencies": [
            "Any",
            "Dict",
            "List",
            "Optional",
            "Path",
            "asyncio",
            "datetime",
            "json",
            "logging",
            "pathlib",
            "typing"
          ],
          "hash": "278a79380fa447dfedc355ffa26c5274625aba212f8c8febc0be832a4342f6aa",
          "uid": "llmstruct.api.services.chat_session",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.services",
            "llmstruct.api.services.chat_session"
          ],
          "uid_type": "module",
          "artifact_id": "feb86bd7-e3dd-9be2-cd5e-796d1a272666",
          "metrics": {
            "cyclomatic_complexity": 18,
            "lines_of_code": 140,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 11,
            "test_coverage": 0.0,
            "maintainability_index": 10
          },
          "markdown_anchor": {
            "id": "llmstruct-api-services-chat_session",
            "title": "Module: llmstruct.api.services.chat_session",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.api.services.chat_session](#llmstruct-api-services-chat_session)",
            "html_anchor": "<a id=\"llmstruct-api-services-chat_session\"></a>"
          }
        }
      ],
      "api.models": [
        {
          "module_id": "llmstruct.api.models.requests",
          "path": "llmstruct/api/models/requests.py",
          "category": "core",
          "module_doc": "Request models for LLMStruct FastAPI",
          "functions": [],
          "classes": [
            {
              "name": "ContextMode",
              "docstring": "",
              "line_range": [
                10,
                14
              ],
              "methods": [],
              "bases": [
                "str",
                "Enum"
              ],
              "uid": "llmstruct.api.models.requests.ContextMode",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.models",
                "llmstruct.api.models.requests",
                "llmstruct.api.models.requests.ContextMode"
              ],
              "uid_type": "class"
            },
            {
              "name": "Priority",
              "docstring": "",
              "line_range": [
                17,
                21
              ],
              "methods": [],
              "bases": [
                "str",
                "Enum"
              ],
              "uid": "llmstruct.api.models.requests.Priority",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.models",
                "llmstruct.api.models.requests",
                "llmstruct.api.models.requests.Priority"
              ],
              "uid_type": "class"
            },
            {
              "name": "ScanRequest",
              "docstring": "Request model for project scanning",
              "line_range": [
                24,
                38
              ],
              "methods": [],
              "bases": [
                "BaseModel"
              ],
              "uid": "llmstruct.api.models.requests.ScanRequest",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.models",
                "llmstruct.api.models.requests",
                "llmstruct.api.models.requests.ScanRequest"
              ],
              "uid_type": "class"
            },
            {
              "name": "ContextRequest",
              "docstring": "Request model for context generation",
              "line_range": [
                41,
                54
              ],
              "methods": [],
              "bases": [
                "BaseModel"
              ],
              "uid": "llmstruct.api.models.requests.ContextRequest",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.models",
                "llmstruct.api.models.requests",
                "llmstruct.api.models.requests.ContextRequest"
              ],
              "uid_type": "class"
            },
            {
              "name": "TaskCreateRequest",
              "docstring": "Request model for creating tasks",
              "line_range": [
                57,
                74
              ],
              "methods": [],
              "bases": [
                "BaseModel"
              ],
              "uid": "llmstruct.api.models.requests.TaskCreateRequest",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.models",
                "llmstruct.api.models.requests",
                "llmstruct.api.models.requests.TaskCreateRequest"
              ],
              "uid_type": "class"
            },
            {
              "name": "TaskUpdateRequest",
              "docstring": "Request model for updating tasks",
              "line_range": [
                77,
                92
              ],
              "methods": [],
              "bases": [
                "BaseModel"
              ],
              "uid": "llmstruct.api.models.requests.TaskUpdateRequest",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.models",
                "llmstruct.api.models.requests",
                "llmstruct.api.models.requests.TaskUpdateRequest"
              ],
              "uid_type": "class"
            },
            {
              "name": "QueryRequest",
              "docstring": "Request model for LLM queries",
              "line_range": [
                95,
                110
              ],
              "methods": [],
              "bases": [
                "BaseModel"
              ],
              "uid": "llmstruct.api.models.requests.QueryRequest",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.models",
                "llmstruct.api.models.requests",
                "llmstruct.api.models.requests.QueryRequest"
              ],
              "uid_type": "class"
            },
            {
              "name": "ValidationRequest",
              "docstring": "Request model for JSON validation",
              "line_range": [
                113,
                124
              ],
              "methods": [],
              "bases": [
                "BaseModel"
              ],
              "uid": "llmstruct.api.models.requests.ValidationRequest",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.models",
                "llmstruct.api.models.requests",
                "llmstruct.api.models.requests.ValidationRequest"
              ],
              "uid_type": "class"
            },
            {
              "name": "ChatMessage",
              "docstring": "Chat message request",
              "line_range": [
                127,
                132
              ],
              "methods": [],
              "bases": [
                "BaseModel"
              ],
              "uid": "llmstruct.api.models.requests.ChatMessage",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.models",
                "llmstruct.api.models.requests",
                "llmstruct.api.models.requests.ChatMessage"
              ],
              "uid_type": "class"
            },
            {
              "name": "Config",
              "docstring": "",
              "line_range": [
                31,
                38
              ],
              "methods": [],
              "bases": [],
              "uid": "llmstruct.api.models.requests.Config",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.models",
                "llmstruct.api.models.requests",
                "llmstruct.api.models.requests.Config"
              ],
              "uid_type": "class"
            },
            {
              "name": "Config",
              "docstring": "",
              "line_range": [
                47,
                54
              ],
              "methods": [],
              "bases": [],
              "uid": "llmstruct.api.models.requests.Config",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.models",
                "llmstruct.api.models.requests",
                "llmstruct.api.models.requests.Config"
              ],
              "uid_type": "class"
            },
            {
              "name": "Config",
              "docstring": "",
              "line_range": [
                65,
                74
              ],
              "methods": [],
              "bases": [],
              "uid": "llmstruct.api.models.requests.Config",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.models",
                "llmstruct.api.models.requests",
                "llmstruct.api.models.requests.Config"
              ],
              "uid_type": "class"
            },
            {
              "name": "Config",
              "docstring": "",
              "line_range": [
                86,
                92
              ],
              "methods": [],
              "bases": [],
              "uid": "llmstruct.api.models.requests.Config",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.models",
                "llmstruct.api.models.requests",
                "llmstruct.api.models.requests.Config"
              ],
              "uid_type": "class"
            },
            {
              "name": "Config",
              "docstring": "",
              "line_range": [
                102,
                110
              ],
              "methods": [],
              "bases": [],
              "uid": "llmstruct.api.models.requests.Config",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.models",
                "llmstruct.api.models.requests",
                "llmstruct.api.models.requests.Config"
              ],
              "uid_type": "class"
            },
            {
              "name": "Config",
              "docstring": "",
              "line_range": [
                118,
                124
              ],
              "methods": [],
              "bases": [],
              "uid": "llmstruct.api.models.requests.Config",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.models",
                "llmstruct.api.models.requests",
                "llmstruct.api.models.requests.Config"
              ],
              "uid_type": "class"
            }
          ],
          "callgraph": {},
          "dependencies": [
            "Any",
            "BaseModel",
            "Dict",
            "Enum",
            "Field",
            "List",
            "Optional",
            "enum",
            "pydantic",
            "typing"
          ],
          "hash": "dc0eeffef63529c5124c852cad0692908215fa4c7ebe8a6305ca8d701741d758",
          "uid": "llmstruct.api.models.requests",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.requests"
          ],
          "uid_type": "module",
          "artifact_id": "5f768b49-a75c-d409-face-950f4bc8c81f",
          "metrics": {
            "cyclomatic_complexity": 30,
            "lines_of_code": 0,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 10,
            "test_coverage": 0.0,
            "maintainability_index": 0
          },
          "markdown_anchor": {
            "id": "llmstruct-api-models-requests",
            "title": "Module: llmstruct.api.models.requests",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.api.models.requests](#llmstruct-api-models-requests)",
            "html_anchor": "<a id=\"llmstruct-api-models-requests\"></a>"
          }
        },
        {
          "module_id": "llmstruct.api.models.responses",
          "path": "llmstruct/api/models/responses.py",
          "category": "core",
          "module_doc": "Response models for LLMStruct FastAPI",
          "functions": [],
          "classes": [
            {
              "name": "TaskStatus",
              "docstring": "",
              "line_range": [
                11,
                15
              ],
              "methods": [],
              "bases": [
                "str",
                "Enum"
              ],
              "uid": "llmstruct.api.models.responses.TaskStatus",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.models",
                "llmstruct.api.models.responses",
                "llmstruct.api.models.responses.TaskStatus"
              ],
              "uid_type": "class"
            },
            {
              "name": "HealthStatus",
              "docstring": "",
              "line_range": [
                18,
                21
              ],
              "methods": [],
              "bases": [
                "str",
                "Enum"
              ],
              "uid": "llmstruct.api.models.responses.HealthStatus",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.models",
                "llmstruct.api.models.responses",
                "llmstruct.api.models.responses.HealthStatus"
              ],
              "uid_type": "class"
            },
            {
              "name": "ProjectInfo",
              "docstring": "Response model for project information",
              "line_range": [
                24,
                49
              ],
              "methods": [],
              "bases": [
                "BaseModel"
              ],
              "uid": "llmstruct.api.models.responses.ProjectInfo",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.models",
                "llmstruct.api.models.responses",
                "llmstruct.api.models.responses.ProjectInfo"
              ],
              "uid_type": "class"
            },
            {
              "name": "ScanResponse",
              "docstring": "Response model for project scan results",
              "line_range": [
                52,
                77
              ],
              "methods": [],
              "bases": [
                "BaseModel"
              ],
              "uid": "llmstruct.api.models.responses.ScanResponse",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.models",
                "llmstruct.api.models.responses",
                "llmstruct.api.models.responses.ScanResponse"
              ],
              "uid_type": "class"
            },
            {
              "name": "ContextResponse",
              "docstring": "Response model for context generation",
              "line_range": [
                80,
                100
              ],
              "methods": [],
              "bases": [
                "BaseModel"
              ],
              "uid": "llmstruct.api.models.responses.ContextResponse",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.models",
                "llmstruct.api.models.responses",
                "llmstruct.api.models.responses.ContextResponse"
              ],
              "uid_type": "class"
            },
            {
              "name": "TaskResponse",
              "docstring": "Response model for task operations",
              "line_range": [
                103,
                128
              ],
              "methods": [],
              "bases": [
                "BaseModel"
              ],
              "uid": "llmstruct.api.models.responses.TaskResponse",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.models",
                "llmstruct.api.models.responses",
                "llmstruct.api.models.responses.TaskResponse"
              ],
              "uid_type": "class"
            },
            {
              "name": "QueryResponse",
              "docstring": "Response model for LLM queries",
              "line_range": [
                131,
                155
              ],
              "methods": [],
              "bases": [
                "BaseModel"
              ],
              "uid": "llmstruct.api.models.responses.QueryResponse",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.models",
                "llmstruct.api.models.responses",
                "llmstruct.api.models.responses.QueryResponse"
              ],
              "uid_type": "class"
            },
            {
              "name": "ValidationResponse",
              "docstring": "Response model for JSON validation",
              "line_range": [
                158,
                175
              ],
              "methods": [],
              "bases": [
                "BaseModel"
              ],
              "uid": "llmstruct.api.models.responses.ValidationResponse",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.models",
                "llmstruct.api.models.responses",
                "llmstruct.api.models.responses.ValidationResponse"
              ],
              "uid_type": "class"
            },
            {
              "name": "HealthResponse",
              "docstring": "Response model for health checks",
              "line_range": [
                178,
                199
              ],
              "methods": [],
              "bases": [
                "BaseModel"
              ],
              "uid": "llmstruct.api.models.responses.HealthResponse",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.models",
                "llmstruct.api.models.responses",
                "llmstruct.api.models.responses.HealthResponse"
              ],
              "uid_type": "class"
            },
            {
              "name": "ErrorResponse",
              "docstring": "Response model for API errors",
              "line_range": [
                202,
                217
              ],
              "methods": [],
              "bases": [
                "BaseModel"
              ],
              "uid": "llmstruct.api.models.responses.ErrorResponse",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.models",
                "llmstruct.api.models.responses",
                "llmstruct.api.models.responses.ErrorResponse"
              ],
              "uid_type": "class"
            },
            {
              "name": "ChatResponse",
              "docstring": "Chat response",
              "line_range": [
                220,
                226
              ],
              "methods": [],
              "bases": [
                "BaseModel"
              ],
              "uid": "llmstruct.api.models.responses.ChatResponse",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.models",
                "llmstruct.api.models.responses",
                "llmstruct.api.models.responses.ChatResponse"
              ],
              "uid_type": "class"
            },
            {
              "name": "Config",
              "docstring": "",
              "line_range": [
                36,
                49
              ],
              "methods": [],
              "bases": [],
              "uid": "llmstruct.api.models.responses.Config",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.models",
                "llmstruct.api.models.responses",
                "llmstruct.api.models.responses.Config"
              ],
              "uid_type": "class"
            },
            {
              "name": "Config",
              "docstring": "",
              "line_range": [
                62,
                77
              ],
              "methods": [],
              "bases": [],
              "uid": "llmstruct.api.models.responses.Config",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.models",
                "llmstruct.api.models.responses",
                "llmstruct.api.models.responses.Config"
              ],
              "uid_type": "class"
            },
            {
              "name": "Config",
              "docstring": "",
              "line_range": [
                88,
                100
              ],
              "methods": [],
              "bases": [],
              "uid": "llmstruct.api.models.responses.Config",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.models",
                "llmstruct.api.models.responses",
                "llmstruct.api.models.responses.Config"
              ],
              "uid_type": "class"
            },
            {
              "name": "Config",
              "docstring": "",
              "line_range": [
                115,
                128
              ],
              "methods": [],
              "bases": [],
              "uid": "llmstruct.api.models.responses.Config",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.models",
                "llmstruct.api.models.responses",
                "llmstruct.api.models.responses.Config"
              ],
              "uid_type": "class"
            },
            {
              "name": "Config",
              "docstring": "",
              "line_range": [
                139,
                155
              ],
              "methods": [],
              "bases": [],
              "uid": "llmstruct.api.models.responses.Config",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.models",
                "llmstruct.api.models.responses",
                "llmstruct.api.models.responses.Config"
              ],
              "uid_type": "class"
            },
            {
              "name": "Config",
              "docstring": "",
              "line_range": [
                166,
                175
              ],
              "methods": [],
              "bases": [],
              "uid": "llmstruct.api.models.responses.Config",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.models",
                "llmstruct.api.models.responses",
                "llmstruct.api.models.responses.Config"
              ],
              "uid_type": "class"
            },
            {
              "name": "Config",
              "docstring": "",
              "line_range": [
                186,
                199
              ],
              "methods": [],
              "bases": [],
              "uid": "llmstruct.api.models.responses.Config",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.models",
                "llmstruct.api.models.responses",
                "llmstruct.api.models.responses.Config"
              ],
              "uid_type": "class"
            },
            {
              "name": "Config",
              "docstring": "",
              "line_range": [
                209,
                217
              ],
              "methods": [],
              "bases": [],
              "uid": "llmstruct.api.models.responses.Config",
              "uid_components": [
                "llmstruct",
                "llmstruct.api",
                "llmstruct.api.models",
                "llmstruct.api.models.responses",
                "llmstruct.api.models.responses.Config"
              ],
              "uid_type": "class"
            }
          ],
          "callgraph": {},
          "dependencies": [
            "Any",
            "BaseModel",
            "Dict",
            "Enum",
            "Field",
            "List",
            "Optional",
            "datetime",
            "enum",
            "pydantic",
            "typing"
          ],
          "hash": "078fd90649a418e1a54b3ca016ffe75935a83f57d232ec351be8be93a8462dae",
          "uid": "llmstruct.api.models.responses",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.responses"
          ],
          "uid_type": "module",
          "artifact_id": "20bb04d4-65d2-d00b-d970-246c2cff6cab",
          "metrics": {
            "cyclomatic_complexity": 38,
            "lines_of_code": 0,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 11,
            "test_coverage": 0.0,
            "maintainability_index": 0
          },
          "markdown_anchor": {
            "id": "llmstruct-api-models-responses",
            "title": "Module: llmstruct.api.models.responses",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.api.models.responses](#llmstruct-api-models-responses)",
            "html_anchor": "<a id=\"llmstruct-api-models-responses\"></a>"
          }
        },
        {
          "module_id": "llmstruct.api.models.__init__",
          "path": "llmstruct/api/models/__init__.py",
          "category": "cli",
          "module_doc": "Pydantic models for LLMStruct FastAPI\n\nDefines request and response models for API endpoints.",
          "functions": [],
          "classes": [],
          "callgraph": {},
          "dependencies": [],
          "hash": "b8e418fc588027c39078efbe602bc30126d34375ab863658b820247d69432b02",
          "uid": "llmstruct.api.models.__init__",
          "uid_components": [
            "llmstruct",
            "llmstruct.api",
            "llmstruct.api.models",
            "llmstruct.api.models.__init__"
          ],
          "uid_type": "module",
          "artifact_id": "c09b00ac-ff59-af9e-7cf0-6f60231a2c01",
          "metrics": {
            "cyclomatic_complexity": 0,
            "lines_of_code": 0,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 0,
            "test_coverage": 0.0,
            "maintainability_index": 100
          },
          "markdown_anchor": {
            "id": "llmstruct-api-models-__init__",
            "title": "Module: llmstruct.api.models.__init__",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.api.models.__init__](#llmstruct-api-models-__init__)",
            "html_anchor": "<a id=\"llmstruct-api-models-__init__\"></a>"
          }
        }
      ],
      "modules.commands": [
        {
          "module_id": "llmstruct.modules.commands.metrics",
          "path": "llmstruct/modules/commands/metrics.py",
          "category": "core",
          "module_doc": "",
          "functions": [
            {
              "name": "metrics_status",
              "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 \u043c\u0435\u0442\u0440\u0438\u043a",
              "line_range": [
                1,
                20
              ],
              "parameters": [],
              "decorators": [],
              "uid": "llmstruct.modules.commands.metrics.metrics_status",
              "uid_components": [
                "llmstruct",
                "llmstruct.modules",
                "llmstruct.modules.commands",
                "llmstruct.modules.commands.metrics",
                "llmstruct.modules.commands.metrics.metrics_status"
              ],
              "uid_type": "function"
            },
            {
              "name": "metrics_summary",
              "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u0443\u044e \u0441\u0432\u043e\u0434\u043a\u0443 \u043c\u0435\u0442\u0440\u0438\u043a",
              "line_range": [
                22,
                66
              ],
              "parameters": [],
              "decorators": [],
              "uid": "llmstruct.modules.commands.metrics.metrics_summary",
              "uid_components": [
                "llmstruct",
                "llmstruct.modules",
                "llmstruct.modules.commands",
                "llmstruct.modules.commands.metrics",
                "llmstruct.modules.commands.metrics.metrics_summary"
              ],
              "uid_type": "function"
            },
            {
              "name": "metrics_analytics",
              "docstring": "\u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435",
              "line_range": [
                68,
                104
              ],
              "parameters": [
                "output_file",
                "format"
              ],
              "decorators": [],
              "uid": "llmstruct.modules.commands.metrics.metrics_analytics",
              "uid_components": [
                "llmstruct",
                "llmstruct.modules",
                "llmstruct.modules.commands",
                "llmstruct.modules.commands.metrics",
                "llmstruct.modules.commands.metrics.metrics_analytics"
              ],
              "uid_type": "function"
            },
            {
              "name": "metrics_report",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u0441\u0435\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u0439 \u043e\u0442\u0447\u0435\u0442",
              "line_range": [
                106,
                134
              ],
              "parameters": [
                "sessions",
                "output_file"
              ],
              "decorators": [],
              "uid": "llmstruct.modules.commands.metrics.metrics_report",
              "uid_components": [
                "llmstruct",
                "llmstruct.modules",
                "llmstruct.modules.commands",
                "llmstruct.modules.commands.metrics",
                "llmstruct.modules.commands.metrics.metrics_report"
              ],
              "uid_type": "function"
            },
            {
              "name": "metrics_track",
              "docstring": "\u0420\u0443\u0447\u043d\u043e\u0435 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u0439",
              "line_range": [
                136,
                145
              ],
              "parameters": [
                "event_type",
                "details"
              ],
              "decorators": [],
              "uid": "llmstruct.modules.commands.metrics.metrics_track",
              "uid_components": [
                "llmstruct",
                "llmstruct.modules",
                "llmstruct.modules.commands",
                "llmstruct.modules.commands.metrics",
                "llmstruct.modules.commands.metrics.metrics_track"
              ],
              "uid_type": "function"
            },
            {
              "name": "metrics_tokens",
              "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u0443\u044e \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u0442\u043e\u043a\u0435\u043d\u043e\u0432",
              "line_range": [
                147,
                185
              ],
              "parameters": [],
              "decorators": [],
              "uid": "llmstruct.modules.commands.metrics.metrics_tokens",
              "uid_components": [
                "llmstruct",
                "llmstruct.modules",
                "llmstruct.modules.commands",
                "llmstruct.modules.commands.metrics",
                "llmstruct.modules.commands.metrics.metrics_tokens"
              ],
              "uid_type": "function"
            },
            {
              "name": "cmd_metrics",
              "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0430\u043c\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
              "line_range": [
                187,
                205
              ],
              "parameters": [
                "args"
              ],
              "decorators": [],
              "uid": "llmstruct.modules.commands.metrics.cmd_metrics",
              "uid_components": [
                "llmstruct",
                "llmstruct.modules",
                "llmstruct.modules.commands",
                "llmstruct.modules.commands.metrics",
                "llmstruct.modules.commands.metrics.cmd_metrics"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [],
          "callgraph": {
            "metrics_status": [
              "tracker.get_session_summary",
              "print",
              "get_metrics_tracker"
            ],
            "metrics_summary": [
              "tracker.get_session_summary",
              "print",
              "get_metrics_tracker",
              "max"
            ],
            "metrics_analytics": [
              "csv.writer",
              "tracker.get_session_summary",
              "print",
              "open",
              "get_metrics_tracker",
              "enumerate",
              "json.dump",
              "json.dumps",
              "writer.writerow",
              "time.strftime",
              "tracker.get_analytics_data"
            ],
            "metrics_report": [
              "analytics.get",
              "len",
              "min",
              "print",
              "f.write",
              "open",
              "get_metrics_tracker",
              "sum",
              "time.strftime",
              "tracker.get_analytics_data"
            ],
            "metrics_track": [
              "print",
              "track_workflow_event"
            ],
            "metrics_tokens": [
              "print",
              "summary.get",
              "get_metrics_tracker",
              "interaction.get",
              "enumerate",
              "get_token_summary"
            ],
            "cmd_metrics": [
              "metrics_tokens",
              "metrics_track",
              "metrics_summary",
              "metrics_analytics",
              "print",
              "metrics_status",
              "metrics_report"
            ]
          },
          "dependencies": [
            "csv",
            "get_metrics_tracker",
            "get_token_summary",
            "json",
            "llmstruct.metrics_tracker",
            "time",
            "track_workflow_event"
          ],
          "hash": "f3cdbecb744fbdb29ca949fe874d201a44bc014625127b14d500e5828dc11e54",
          "uid": "llmstruct.modules.commands.metrics",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.commands",
            "llmstruct.modules.commands.metrics"
          ],
          "uid_type": "module",
          "artifact_id": "463aa85d-985a-29fe-37e6-4d742d7623e8",
          "metrics": {
            "cyclomatic_complexity": 7,
            "lines_of_code": 70,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 7,
            "test_coverage": 0.0,
            "maintainability_index": 65
          },
          "markdown_anchor": {
            "id": "llmstruct-modules-commands-metrics",
            "title": "Module: llmstruct.modules.commands.metrics",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.modules.commands.metrics](#llmstruct-modules-commands-metrics)",
            "html_anchor": "<a id=\"llmstruct-modules-commands-metrics\"></a>"
          }
        },
        {
          "module_id": "llmstruct.modules.commands.services",
          "path": "llmstruct/modules/commands/services.py",
          "category": "core",
          "module_doc": "",
          "functions": [
            {
              "name": "add_api_bot_commands",
              "docstring": "\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f API \u0438 Bot \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438",
              "line_range": [
                10,
                47
              ],
              "parameters": [
                "subparsers"
              ],
              "decorators": [],
              "uid": "llmstruct.modules.commands.services.add_api_bot_commands",
              "uid_components": [
                "llmstruct",
                "llmstruct.modules",
                "llmstruct.modules.commands",
                "llmstruct.modules.commands.services",
                "llmstruct.modules.commands.services.add_api_bot_commands"
              ],
              "uid_type": "function"
            },
            {
              "name": "cmd_api_management",
              "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 API \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c",
              "line_range": [
                49,
                111
              ],
              "parameters": [
                "args"
              ],
              "decorators": [],
              "uid": "llmstruct.modules.commands.services.cmd_api_management",
              "uid_components": [
                "llmstruct",
                "llmstruct.modules",
                "llmstruct.modules.commands",
                "llmstruct.modules.commands.services",
                "llmstruct.modules.commands.services.cmd_api_management"
              ],
              "uid_type": "function"
            },
            {
              "name": "cmd_bot_management",
              "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 Telegram \u0431\u043e\u0442\u0430\u043c\u0438",
              "line_range": [
                113,
                190
              ],
              "parameters": [
                "args"
              ],
              "decorators": [],
              "uid": "llmstruct.modules.commands.services.cmd_bot_management",
              "uid_components": [
                "llmstruct",
                "llmstruct.modules",
                "llmstruct.modules.commands",
                "llmstruct.modules.commands.services",
                "llmstruct.modules.commands.services.cmd_bot_management"
              ],
              "uid_type": "function"
            },
            {
              "name": "cmd_services",
              "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u043c\u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438 (API + Bots)",
              "line_range": [
                192,
                233
              ],
              "parameters": [
                "args"
              ],
              "decorators": [],
              "uid": "llmstruct.modules.commands.services.cmd_services",
              "uid_components": [
                "llmstruct",
                "llmstruct.modules",
                "llmstruct.modules.commands",
                "llmstruct.modules.commands.services",
                "llmstruct.modules.commands.services.cmd_services"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [],
          "callgraph": {
            "add_api_bot_commands": [
              "bot_parser.add_subparsers",
              "api_start.add_argument",
              "bot_subparsers.add_parser",
              "api_parser.add_subparsers",
              "bot_start.add_argument",
              "services_subparsers.add_parser",
              "metrics_subparsers.add_parser",
              "api_subparsers.add_parser",
              "subparsers.add_parser",
              "metrics_track.add_argument",
              "metrics_report.add_argument",
              "metrics_parser.add_subparsers",
              "metrics_analytics.add_argument",
              "services_parser.add_subparsers"
            ],
            "cmd_api_management": [
              "requests.get",
              "requests.post",
              "data.get",
              "subprocess.Popen",
              "print",
              "response.json",
              "open",
              "process.terminate",
              "pid_file.unlink",
              "Path",
              "int",
              "f.read",
              "pid_file.exists",
              "str",
              "f.write",
              "venv_path.exists",
              "process.wait",
              "psutil.Process"
            ],
            "cmd_bot_management": [
              "process.is_running",
              "subprocess.Popen",
              "print",
              "open",
              "process.terminate",
              "pid_file.unlink",
              "Path",
              "int",
              "f.read",
              "os.getenv",
              "pid_file.exists",
              "active_bots.append",
              "str",
              "f.write",
              "bot_scripts.get",
              "process.wait",
              "psutil.Process"
            ],
            "cmd_services": [
              "type",
              "cmd_bot_management",
              "print",
              "cmd_api_management",
              "time.sleep"
            ]
          },
          "dependencies": [
            "Path",
            "os",
            "pathlib",
            "psutil",
            "requests",
            "signal",
            "subprocess",
            "time"
          ],
          "hash": "96ca731ade5a7043ea0459124cc364e27740657bccffde74544182d938e57d98",
          "uid": "llmstruct.modules.commands.services",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.commands",
            "llmstruct.modules.commands.services"
          ],
          "uid_type": "module",
          "artifact_id": "08f0b037-1139-fe8a-fb87-d5bbadac0985",
          "metrics": {
            "cyclomatic_complexity": 4,
            "lines_of_code": 40,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 8,
            "test_coverage": 0.0,
            "maintainability_index": 80
          },
          "markdown_anchor": {
            "id": "llmstruct-modules-commands-services",
            "title": "Module: llmstruct.modules.commands.services",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.modules.commands.services](#llmstruct-modules-commands-services)",
            "html_anchor": "<a id=\"llmstruct-modules-commands-services\"></a>"
          }
        },
        {
          "module_id": "llmstruct.modules.commands.__init__",
          "path": "llmstruct/modules/commands/__init__.py",
          "category": "cli",
          "module_doc": "",
          "functions": [],
          "classes": [],
          "callgraph": {},
          "dependencies": [],
          "hash": "36a9e7f1c95b82ffb99743e0c5c4ce95d83c9a430aac59f84ef3cbfab6145068",
          "uid": "llmstruct.modules.commands.__init__",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.commands",
            "llmstruct.modules.commands.__init__"
          ],
          "uid_type": "module",
          "artifact_id": "1cf803b0-44b1-c1f9-11ee-4c84fda5d6ef",
          "metrics": {
            "cyclomatic_complexity": 0,
            "lines_of_code": 0,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 0,
            "test_coverage": 0.0,
            "maintainability_index": 100
          },
          "markdown_anchor": {
            "id": "llmstruct-modules-commands-__init__",
            "title": "Module: llmstruct.modules.commands.__init__",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.modules.commands.__init__](#llmstruct-modules-commands-__init__)",
            "html_anchor": "<a id=\"llmstruct-modules-commands-__init__\"></a>"
          }
        },
        {
          "module_id": "llmstruct.modules.commands.queue",
          "path": "llmstruct/modules/commands/queue.py",
          "category": "core",
          "module_doc": "",
          "functions": [
            {
              "name": "process_cli_queue_enhanced",
              "docstring": "Enhanced queue processing with workflow support, performance tracking, and safety validation.",
              "line_range": [
                9,
                208
              ],
              "parameters": [
                "root_dir",
                "context_path",
                "args",
                "cache",
                "client"
              ],
              "decorators": [],
              "uid": "llmstruct.modules.commands.queue.process_cli_queue_enhanced",
              "uid_components": [
                "llmstruct",
                "llmstruct.modules",
                "llmstruct.modules.commands",
                "llmstruct.modules.commands.queue",
                "llmstruct.modules.commands.queue.process_cli_queue_enhanced"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [],
          "callgraph": {
            "process_cli_queue_enhanced": [
              "workflow.get",
              "get_folder_structure",
              "load_gitignore",
              "len",
              "write_to_file",
              "print",
              "isinstance",
              "open",
              "time.time",
              "attach_to_llm_request",
              "logging.error",
              "json.load",
              "enumerate",
              "options.get",
              "client.query",
              "read_file_content",
              "item.get",
              "logging.info"
            ]
          },
          "dependencies": [
            "attach_to_llm_request",
            "get_folder_structure",
            "json",
            "llmstruct.generators.json_generator",
            "llmstruct.modules.cli.utils",
            "llmstruct.self_run",
            "load_gitignore",
            "logging",
            "os",
            "read_file_content",
            "time",
            "write_to_file"
          ],
          "hash": "93ea2acd1be91706282b474b0d3d20881d6894688201c8b0acd0ee1f7266b285",
          "uid": "llmstruct.modules.commands.queue",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.commands",
            "llmstruct.modules.commands.queue"
          ],
          "uid_type": "module",
          "artifact_id": "c4762ead-cbe1-3394-00c2-08956eaf56be",
          "metrics": {
            "cyclomatic_complexity": 1,
            "lines_of_code": 10,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 12,
            "test_coverage": 0.0,
            "maintainability_index": 95
          },
          "markdown_anchor": {
            "id": "llmstruct-modules-commands-queue",
            "title": "Module: llmstruct.modules.commands.queue",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.modules.commands.queue](#llmstruct-modules-commands-queue)",
            "html_anchor": "<a id=\"llmstruct-modules-commands-queue\"></a>"
          }
        }
      ],
      "modules.cli": [
        {
          "module_id": "llmstruct.modules.cli.audit",
          "path": "llmstruct/modules/cli/audit.py",
          "category": "cli",
          "module_doc": "",
          "functions": [
            {
              "name": "audit",
              "docstring": "Audit project structure and generate reports.",
              "line_range": [
                4,
                17
              ],
              "parameters": [
                "args"
              ],
              "decorators": [],
              "uid": "llmstruct.modules.cli.audit.audit",
              "uid_components": [
                "llmstruct",
                "llmstruct.modules",
                "llmstruct.modules.cli",
                "llmstruct.modules.cli.audit",
                "llmstruct.modules.cli.audit.audit"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [],
          "callgraph": {
            "audit": [
              "analyze_duplicates",
              "hasattr",
              "print",
              "Path",
              "file_path.exists"
            ]
          },
          "dependencies": [
            "Path",
            "analyze_duplicates",
            "llmstruct.cli",
            "os",
            "pathlib"
          ],
          "hash": "2db7989b347f40218b0105a07e15164e4fa869ecf87fe977e929a36ad7b90179",
          "uid": "llmstruct.modules.cli.audit",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.audit"
          ],
          "uid_type": "module",
          "artifact_id": "bbb4f90b-4509-4ed8-3c67-e1ee4a7256ac",
          "metrics": {
            "cyclomatic_complexity": 1,
            "lines_of_code": 10,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 5,
            "test_coverage": 0.0,
            "maintainability_index": 95
          },
          "markdown_anchor": {
            "id": "llmstruct-modules-cli-audit",
            "title": "Module: llmstruct.modules.cli.audit",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.modules.cli.audit](#llmstruct-modules-cli-audit)",
            "html_anchor": "<a id=\"llmstruct-modules-cli-audit\"></a>"
          }
        },
        {
          "module_id": "llmstruct.modules.cli.utils",
          "path": "llmstruct/modules/cli/utils.py",
          "category": "cli",
          "module_doc": "",
          "functions": [
            {
              "name": "load_gitignore",
              "docstring": "Load and normalize patterns from .gitignore.",
              "line_range": [
                6,
                20
              ],
              "parameters": [
                "root_dir"
              ],
              "decorators": [],
              "uid": "llmstruct.modules.cli.utils.load_gitignore",
              "uid_components": [
                "llmstruct",
                "llmstruct.modules",
                "llmstruct.modules.cli",
                "llmstruct.modules.cli.utils",
                "llmstruct.modules.cli.utils.load_gitignore"
              ],
              "uid_type": "function"
            },
            {
              "name": "load_config",
              "docstring": "Load settings from llmstruct.toml or return empty dict.",
              "line_range": [
                22,
                32
              ],
              "parameters": [
                "root_dir"
              ],
              "decorators": [],
              "uid": "llmstruct.modules.cli.utils.load_config",
              "uid_components": [
                "llmstruct",
                "llmstruct.modules",
                "llmstruct.modules.cli",
                "llmstruct.modules.cli.utils",
                "llmstruct.modules.cli.utils.load_config"
              ],
              "uid_type": "function"
            },
            {
              "name": "read_file_content",
              "docstring": "Read content of a file if it exists and is a text file.",
              "line_range": [
                34,
                43
              ],
              "parameters": [
                "file_path"
              ],
              "decorators": [],
              "uid": "llmstruct.modules.cli.utils.read_file_content",
              "uid_components": [
                "llmstruct",
                "llmstruct.modules",
                "llmstruct.modules.cli",
                "llmstruct.modules.cli.utils",
                "llmstruct.modules.cli.utils.read_file_content"
              ],
              "uid_type": "function"
            },
            {
              "name": "write_to_file",
              "docstring": "Write content to a file in base_dir (default ./tmp) and return the path.",
              "line_range": [
                45,
                63
              ],
              "parameters": [
                "content",
                "filename",
                "base_dir"
              ],
              "decorators": [],
              "uid": "llmstruct.modules.cli.utils.write_to_file",
              "uid_components": [
                "llmstruct",
                "llmstruct.modules",
                "llmstruct.modules.cli",
                "llmstruct.modules.cli.utils",
                "llmstruct.modules.cli.utils.write_to_file"
              ],
              "uid_type": "function"
            },
            {
              "name": "parse_files_from_response",
              "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
              "line_range": [
                65,
                72
              ],
              "parameters": [
                "response"
              ],
              "decorators": [],
              "uid": "llmstruct.modules.cli.utils.parse_files_from_response",
              "uid_components": [
                "llmstruct",
                "llmstruct.modules",
                "llmstruct.modules.cli",
                "llmstruct.modules.cli.utils",
                "llmstruct.modules.cli.utils.parse_files_from_response"
              ],
              "uid_type": "function"
            },
            {
              "name": "get_cache_config",
              "docstring": "",
              "line_range": [
                74,
                75
              ],
              "parameters": [
                "config"
              ],
              "decorators": [],
              "uid": "llmstruct.modules.cli.utils.get_cache_config",
              "uid_components": [
                "llmstruct",
                "llmstruct.modules",
                "llmstruct.modules.cli",
                "llmstruct.modules.cli.utils",
                "llmstruct.modules.cli.utils.get_cache_config"
              ],
              "uid_type": "function"
            },
            {
              "name": "get_copilot_config",
              "docstring": "",
              "line_range": [
                77,
                78
              ],
              "parameters": [
                "config"
              ],
              "decorators": [],
              "uid": "llmstruct.modules.cli.utils.get_copilot_config",
              "uid_components": [
                "llmstruct",
                "llmstruct.modules",
                "llmstruct.modules.cli",
                "llmstruct.modules.cli.utils",
                "llmstruct.modules.cli.utils.get_copilot_config"
              ],
              "uid_type": "function"
            },
            {
              "name": "get_queue_config",
              "docstring": "",
              "line_range": [
                80,
                81
              ],
              "parameters": [
                "config"
              ],
              "decorators": [],
              "uid": "llmstruct.modules.cli.utils.get_queue_config",
              "uid_components": [
                "llmstruct",
                "llmstruct.modules",
                "llmstruct.modules.cli",
                "llmstruct.modules.cli.utils",
                "llmstruct.modules.cli.utils.get_queue_config"
              ],
              "uid_type": "function"
            },
            {
              "name": "get_context_config",
              "docstring": "",
              "line_range": [
                83,
                84
              ],
              "parameters": [
                "config"
              ],
              "decorators": [],
              "uid": "llmstruct.modules.cli.utils.get_context_config",
              "uid_components": [
                "llmstruct",
                "llmstruct.modules",
                "llmstruct.modules.cli",
                "llmstruct.modules.cli.utils",
                "llmstruct.modules.cli.utils.get_context_config"
              ],
              "uid_type": "function"
            },
            {
              "name": "get_exclude_dirs",
              "docstring": "",
              "line_range": [
                86,
                93
              ],
              "parameters": [
                "config"
              ],
              "decorators": [],
              "uid": "llmstruct.modules.cli.utils.get_exclude_dirs",
              "uid_components": [
                "llmstruct",
                "llmstruct.modules",
                "llmstruct.modules.cli",
                "llmstruct.modules.cli.utils",
                "llmstruct.modules.cli.utils.get_exclude_dirs"
              ],
              "uid_type": "function"
            },
            {
              "name": "get_include_patterns",
              "docstring": "",
              "line_range": [
                95,
                98
              ],
              "parameters": [
                "config"
              ],
              "decorators": [],
              "uid": "llmstruct.modules.cli.utils.get_include_patterns",
              "uid_components": [
                "llmstruct",
                "llmstruct.modules",
                "llmstruct.modules.cli",
                "llmstruct.modules.cli.utils",
                "llmstruct.modules.cli.utils.get_include_patterns"
              ],
              "uid_type": "function"
            },
            {
              "name": "get_exclude_patterns",
              "docstring": "",
              "line_range": [
                100,
                103
              ],
              "parameters": [
                "config"
              ],
              "decorators": [],
              "uid": "llmstruct.modules.cli.utils.get_exclude_patterns",
              "uid_components": [
                "llmstruct",
                "llmstruct.modules",
                "llmstruct.modules.cli",
                "llmstruct.modules.cli.utils",
                "llmstruct.modules.cli.utils.get_exclude_patterns"
              ],
              "uid_type": "function"
            },
            {
              "name": "get_max_file_size",
              "docstring": "",
              "line_range": [
                105,
                106
              ],
              "parameters": [
                "config"
              ],
              "decorators": [],
              "uid": "llmstruct.modules.cli.utils.get_max_file_size",
              "uid_components": [
                "llmstruct",
                "llmstruct.modules",
                "llmstruct.modules.cli",
                "llmstruct.modules.cli.utils",
                "llmstruct.modules.cli.utils.get_max_file_size"
              ],
              "uid_type": "function"
            },
            {
              "name": "get_struct_file_path",
              "docstring": "",
              "line_range": [
                108,
                109
              ],
              "parameters": [
                "config"
              ],
              "decorators": [],
              "uid": "llmstruct.modules.cli.utils.get_struct_file_path",
              "uid_components": [
                "llmstruct",
                "llmstruct.modules",
                "llmstruct.modules.cli",
                "llmstruct.modules.cli.utils",
                "llmstruct.modules.cli.utils.get_struct_file_path"
              ],
              "uid_type": "function"
            },
            {
              "name": "get_context_file_path",
              "docstring": "",
              "line_range": [
                111,
                112
              ],
              "parameters": [
                "config"
              ],
              "decorators": [],
              "uid": "llmstruct.modules.cli.utils.get_context_file_path",
              "uid_components": [
                "llmstruct",
                "llmstruct.modules",
                "llmstruct.modules.cli",
                "llmstruct.modules.cli.utils",
                "llmstruct.modules.cli.utils.get_context_file_path"
              ],
              "uid_type": "function"
            },
            {
              "name": "save_config",
              "docstring": "",
              "line_range": [
                114,
                121
              ],
              "parameters": [
                "config",
                "root_dir"
              ],
              "decorators": [],
              "uid": "llmstruct.modules.cli.utils.save_config",
              "uid_components": [
                "llmstruct",
                "llmstruct.modules",
                "llmstruct.modules.cli",
                "llmstruct.modules.cli.utils",
                "llmstruct.modules.cli.utils.save_config"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [],
          "callgraph": {
            "load_gitignore": [
              "line.startswith",
              "Path",
              "logging.error",
              "gitignore_path.exists",
              "line.strip",
              "gitignore_path.open"
            ],
            "load_config": [
              "toml.load",
              "config_path.open",
              "Path",
              "logging.error",
              "config_path.exists"
            ],
            "read_file_content": [
              "path.open",
              "Path",
              "logging.error",
              "path.is_file",
              "f.read"
            ],
            "write_to_file": [
              "logging.warning",
              "Path",
              "file_path.exists",
              "re.sub",
              "logging.error",
              "file_path.open",
              "str",
              "f.write",
              "base_path.mkdir",
              "logging.info"
            ],
            "parse_files_from_response": [
              "files.append",
              "filename.strip",
              "re.findall",
              "content.strip"
            ],
            "get_cache_config": [
              "config.get"
            ],
            "get_copilot_config": [
              "config.get"
            ],
            "get_queue_config": [
              "config.get"
            ],
            "get_context_config": [
              "config.get"
            ],
            "get_exclude_dirs": [
              "parsing_config.get",
              "config.get",
              "cli_config.get",
              "list",
              "set"
            ],
            "get_include_patterns": [
              "cli_config.get",
              "parsing_config.get",
              "config.get"
            ],
            "get_exclude_patterns": [
              "cli_config.get",
              "parsing_config.get",
              "config.get"
            ],
            "get_max_file_size": [
              "config.get"
            ],
            "get_struct_file_path": [
              "config.get"
            ],
            "get_context_file_path": [
              "config.get"
            ],
            "save_config": [
              "logging.error",
              "config_path.open",
              "toml.dump",
              "Path"
            ]
          },
          "dependencies": [
            "List",
            "Optional",
            "Path",
            "logging",
            "pathlib",
            "re",
            "toml",
            "typing"
          ],
          "hash": "3f9f61b289dbdcbe85ccc89e60dd4e6a5a9a2cc31194ab9d0d8fe613fac51924",
          "uid": "llmstruct.modules.cli.utils",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.utils"
          ],
          "uid_type": "module",
          "artifact_id": "328789c7-10e4-87cc-a020-50e033777aab",
          "metrics": {
            "cyclomatic_complexity": 16,
            "lines_of_code": 160,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 8,
            "test_coverage": 0.0,
            "maintainability_index": 20
          },
          "markdown_anchor": {
            "id": "llmstruct-modules-cli-utils",
            "title": "Module: llmstruct.modules.cli.utils",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.modules.cli.utils](#llmstruct-modules-cli-utils)",
            "html_anchor": "<a id=\"llmstruct-modules-cli-utils\"></a>"
          }
        },
        {
          "module_id": "llmstruct.modules.cli.dogfood",
          "path": "llmstruct/modules/cli/dogfood.py",
          "category": "cli",
          "module_doc": "",
          "functions": [
            {
              "name": "dogfood",
              "docstring": "Run dogfooding analysis.",
              "line_range": [
                3,
                5
              ],
              "parameters": [
                "args"
              ],
              "decorators": [],
              "uid": "llmstruct.modules.cli.dogfood.dogfood",
              "uid_components": [
                "llmstruct",
                "llmstruct.modules",
                "llmstruct.modules.cli",
                "llmstruct.modules.cli.dogfood",
                "llmstruct.modules.cli.dogfood.dogfood"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [],
          "callgraph": {
            "dogfood": [
              "logging.warning"
            ]
          },
          "dependencies": [
            "logging"
          ],
          "hash": "18989e9381a3f9872468dfd93602c7b12cbe7cb740a402dda2711c7c98bb3a98",
          "uid": "llmstruct.modules.cli.dogfood",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.dogfood"
          ],
          "uid_type": "module",
          "artifact_id": "a5b7abca-754f-ba39-2f95-998c6828fb41",
          "metrics": {
            "cyclomatic_complexity": 1,
            "lines_of_code": 10,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 1,
            "test_coverage": 0.0,
            "maintainability_index": 95
          },
          "markdown_anchor": {
            "id": "llmstruct-modules-cli-dogfood",
            "title": "Module: llmstruct.modules.cli.dogfood",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.modules.cli.dogfood](#llmstruct-modules-cli-dogfood)",
            "html_anchor": "<a id=\"llmstruct-modules-cli-dogfood\"></a>"
          }
        },
        {
          "module_id": "llmstruct.modules.cli.handlers_legacy",
          "path": "llmstruct/modules/cli/handlers_legacy.py",
          "category": "cli",
          "module_doc": "",
          "functions": [
            {
              "name": "interactive_legacy",
              "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
              "line_range": [
                14,
                149
              ],
              "parameters": [
                "args"
              ],
              "decorators": [],
              "uid": "llmstruct.modules.cli.handlers_legacy.interactive_legacy",
              "uid_components": [
                "llmstruct",
                "llmstruct.modules",
                "llmstruct.modules.cli",
                "llmstruct.modules.cli.handlers_legacy",
                "llmstruct.modules.cli.handlers_legacy.interactive_legacy"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [],
          "callgraph": {
            "interactive_legacy": [
              "get_folder_structure",
              "load_gitignore",
              "cache.close",
              "user_input.startswith",
              "os.listdir",
              "m.group",
              "sorted",
              "JSONCache",
              "parse",
              "print",
              "re.match",
              "client.query",
              "args_str.strip",
              "read_file_content",
              "input",
              "user_input.lower",
              "logging.warning",
              "json.dumps",
              "write_to_file",
              "Path",
              "attach_to_llm_request",
              "logging.error",
              "LLMClient"
            ]
          },
          "dependencies": [
            "JSONCache",
            "LLMClient",
            "Path",
            "attach_to_llm_request",
            "get_folder_structure",
            "json",
            "llmstruct",
            "llmstruct.cache",
            "llmstruct.cli",
            "llmstruct.generators.json_generator",
            "llmstruct.modules.cli.utils",
            "llmstruct.self_run",
            "load_gitignore",
            "logging",
            "os",
            "parse",
            "pathlib",
            "re",
            "read_file_content",
            "time",
            "write_to_file"
          ],
          "hash": "3676e871a4d165bc1a661bc3791663f9127c614086610286e69f1ddb1674c68e",
          "uid": "llmstruct.modules.cli.handlers_legacy",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.handlers_legacy"
          ],
          "uid_type": "module",
          "artifact_id": "29c289c7-9793-1c8e-cf8b-e87a49081fca",
          "metrics": {
            "cyclomatic_complexity": 1,
            "lines_of_code": 10,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 21,
            "test_coverage": 0.0,
            "maintainability_index": 95
          },
          "markdown_anchor": {
            "id": "llmstruct-modules-cli-handlers_legacy",
            "title": "Module: llmstruct.modules.cli.handlers_legacy",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.modules.cli.handlers_legacy](#llmstruct-modules-cli-handlers_legacy)",
            "html_anchor": "<a id=\"llmstruct-modules-cli-handlers_legacy\"></a>"
          }
        },
        {
          "module_id": "llmstruct.modules.cli.analyze_duplicates",
          "path": "llmstruct/modules/cli/analyze_duplicates.py",
          "category": "cli",
          "module_doc": "",
          "functions": [
            {
              "name": "analyze_duplicates",
              "docstring": "Analyze function duplication using struct.json deep analysis.",
              "line_range": [
                1,
                81
              ],
              "parameters": [
                "args"
              ],
              "decorators": [],
              "uid": "llmstruct.modules.cli.analyze_duplicates.analyze_duplicates",
              "uid_components": [
                "llmstruct",
                "llmstruct.modules",
                "llmstruct.modules.cli",
                "llmstruct.modules.cli.analyze_duplicates",
                "llmstruct.modules.cli.analyze_duplicates.analyze_duplicates"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [],
          "callgraph": {
            "analyze_duplicates": [
              "r.get",
              "duplicates.items",
              "hasattr",
              "orchestrator.analyze_codebase_for_duplicates",
              "len",
              "rec.get",
              "print",
              "open",
              "getattr",
              "analysis.get",
              "duplication_data.get",
              "json.dumps",
              "enumerate",
              "sorted",
              "json.dump",
              "WorkflowOrchestrator",
              "traceback.print_exc",
              "filtered_duplicates.items"
            ]
          },
          "dependencies": [
            "WorkflowOrchestrator",
            "json",
            "llmstruct.workflow_orchestrator",
            "traceback"
          ],
          "hash": "d9c98a76c4920b3bfe62a812811aa9edf7158fa6d307eecd1235c4a2d93f146c",
          "uid": "llmstruct.modules.cli.analyze_duplicates",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.analyze_duplicates"
          ],
          "uid_type": "module",
          "artifact_id": "fd9087ce-6a48-0597-b358-d806c3a97e86",
          "metrics": {
            "cyclomatic_complexity": 1,
            "lines_of_code": 10,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 4,
            "test_coverage": 0.0,
            "maintainability_index": 95
          },
          "markdown_anchor": {
            "id": "llmstruct-modules-cli-analyze_duplicates",
            "title": "Module: llmstruct.modules.cli.analyze_duplicates",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.modules.cli.analyze_duplicates](#llmstruct-modules-cli-analyze_duplicates)",
            "html_anchor": "<a id=\"llmstruct-modules-cli-analyze_duplicates\"></a>"
          }
        },
        {
          "module_id": "llmstruct.modules.cli.__init__",
          "path": "llmstruct/modules/cli/__init__.py",
          "category": "cli",
          "module_doc": "",
          "functions": [],
          "classes": [],
          "callgraph": {},
          "dependencies": [],
          "hash": "36a9e7f1c95b82ffb99743e0c5c4ce95d83c9a430aac59f84ef3cbfab6145068",
          "uid": "llmstruct.modules.cli.__init__",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.__init__"
          ],
          "uid_type": "module",
          "artifact_id": "2c1279c6-0229-ae79-6051-352666fdfafb",
          "metrics": {
            "cyclomatic_complexity": 0,
            "lines_of_code": 0,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 0,
            "test_coverage": 0.0,
            "maintainability_index": 100
          },
          "markdown_anchor": {
            "id": "llmstruct-modules-cli-__init__",
            "title": "Module: llmstruct.modules.cli.__init__",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.modules.cli.__init__](#llmstruct-modules-cli-__init__)",
            "html_anchor": "<a id=\"llmstruct-modules-cli-__init__\"></a>"
          }
        },
        {
          "module_id": "llmstruct.modules.cli.review",
          "path": "llmstruct/modules/cli/review.py",
          "category": "cli",
          "module_doc": "",
          "functions": [
            {
              "name": "review",
              "docstring": "Review codebase with LLM.",
              "line_range": [
                3,
                5
              ],
              "parameters": [
                "args"
              ],
              "decorators": [],
              "uid": "llmstruct.modules.cli.review.review",
              "uid_components": [
                "llmstruct",
                "llmstruct.modules",
                "llmstruct.modules.cli",
                "llmstruct.modules.cli.review",
                "llmstruct.modules.cli.review.review"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [],
          "callgraph": {
            "review": [
              "logging.warning"
            ]
          },
          "dependencies": [
            "logging"
          ],
          "hash": "1065196bb1074e1f669c0973da53285a04a2ab62d7462e97dfed418488d4a451",
          "uid": "llmstruct.modules.cli.review",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.review"
          ],
          "uid_type": "module",
          "artifact_id": "da5616e9-ece9-95b1-79c1-1aad6c8387ff",
          "metrics": {
            "cyclomatic_complexity": 1,
            "lines_of_code": 10,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 1,
            "test_coverage": 0.0,
            "maintainability_index": 95
          },
          "markdown_anchor": {
            "id": "llmstruct-modules-cli-review",
            "title": "Module: llmstruct.modules.cli.review",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.modules.cli.review](#llmstruct-modules-cli-review)",
            "html_anchor": "<a id=\"llmstruct-modules-cli-review\"></a>"
          }
        },
        {
          "module_id": "llmstruct.modules.cli.context",
          "path": "llmstruct/modules/cli/context.py",
          "category": "cli",
          "module_doc": "",
          "functions": [
            {
              "name": "context",
              "docstring": "Generate context.json from input JSON.",
              "line_range": [
                3,
                5
              ],
              "parameters": [
                "args"
              ],
              "decorators": [],
              "uid": "llmstruct.modules.cli.context.context",
              "uid_components": [
                "llmstruct",
                "llmstruct.modules",
                "llmstruct.modules.cli",
                "llmstruct.modules.cli.context",
                "llmstruct.modules.cli.context.context"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [],
          "callgraph": {
            "context": [
              "logging.warning"
            ]
          },
          "dependencies": [
            "logging"
          ],
          "hash": "2eaa01d2531e7fab1705f319c2b166013a6c19186010ee7b126e5e8396dd4699",
          "uid": "llmstruct.modules.cli.context",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.context"
          ],
          "uid_type": "module",
          "artifact_id": "1f6c2194-26a3-2ec5-42db-ec7df66ae94a",
          "metrics": {
            "cyclomatic_complexity": 1,
            "lines_of_code": 10,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 1,
            "test_coverage": 0.0,
            "maintainability_index": 95
          },
          "markdown_anchor": {
            "id": "llmstruct-modules-cli-context",
            "title": "Module: llmstruct.modules.cli.context",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.modules.cli.context](#llmstruct-modules-cli-context)",
            "html_anchor": "<a id=\"llmstruct-modules-cli-context\"></a>"
          }
        },
        {
          "module_id": "llmstruct.modules.cli.query",
          "path": "llmstruct/modules/cli/query.py",
          "category": "cli",
          "module_doc": "",
          "functions": [
            {
              "name": "query",
              "docstring": "Query LLMs with prompt and context.",
              "line_range": [
                8,
                64
              ],
              "parameters": [
                "args"
              ],
              "decorators": [],
              "uid": "llmstruct.modules.cli.query.query",
              "uid_components": [
                "llmstruct",
                "llmstruct.modules",
                "llmstruct.modules.cli",
                "llmstruct.modules.cli.query",
                "llmstruct.modules.cli.query.query"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [],
          "callgraph": {
            "query": [
              "hasattr",
              "client.query_with_context",
              "cache.close",
              "logging.warning",
              "Path",
              "client.query",
              "logging.error",
              "json.dump",
              "LLMClient",
              "JSONCache",
              "create_context_orchestrator",
              "logging.info",
              "orchestrator.get_context_for_scenario"
            ]
          },
          "dependencies": [
            "JSONCache",
            "LLMClient",
            "Path",
            "create_context_orchestrator",
            "json",
            "llmstruct",
            "llmstruct.cache",
            "llmstruct.context_orchestrator",
            "logging",
            "os",
            "pathlib"
          ],
          "hash": "aebf4b74c71a6845676877cbd60f5530d3afab38fa6ccec41c114e158cb0f614",
          "uid": "llmstruct.modules.cli.query",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.query"
          ],
          "uid_type": "module",
          "artifact_id": "ecb3fbad-0e9c-08e7-1377-c16c6804cab9",
          "metrics": {
            "cyclomatic_complexity": 1,
            "lines_of_code": 10,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 11,
            "test_coverage": 0.0,
            "maintainability_index": 95
          },
          "markdown_anchor": {
            "id": "llmstruct-modules-cli-query",
            "title": "Module: llmstruct.modules.cli.query",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.modules.cli.query](#llmstruct-modules-cli-query)",
            "html_anchor": "<a id=\"llmstruct-modules-cli-query\"></a>"
          }
        },
        {
          "module_id": "llmstruct.modules.cli.copilot",
          "path": "llmstruct/modules/cli/copilot.py",
          "category": "cli",
          "module_doc": "",
          "functions": [
            {
              "name": "copilot",
              "docstring": "Copilot integration and context management.",
              "line_range": [
                5,
                113
              ],
              "parameters": [
                "args"
              ],
              "decorators": [],
              "uid": "llmstruct.modules.cli.copilot.copilot",
              "uid_components": [
                "llmstruct",
                "llmstruct.modules",
                "llmstruct.modules.cli",
                "llmstruct.modules.cli.copilot",
                "llmstruct.modules.cli.copilot.copilot"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [],
          "callgraph": {
            "copilot": [
              "hasattr",
              "open",
              "manager.load_context_layer",
              "manager.validate_change",
              "initialize_copilot",
              "manager.close",
              "print",
              "manager.export_context",
              "getattr",
              "shutil.copy",
              "config_path.exists",
              "enumerate",
              "manager.get_context_status",
              "smart_suggest",
              "manager.refresh_all_contexts",
              "template_path.exists",
              "Path",
              "manager.unload_context_layer",
              "logging.error",
              "layers.split",
              "f.write",
              "logging.info"
            ]
          },
          "dependencies": [
            "Path",
            "initialize_copilot",
            "llmstruct.copilot",
            "logging",
            "pathlib",
            "shutil",
            "smart_suggest"
          ],
          "hash": "7bc44c139d0fb9c7f3ae37544ef763d68cc55e4220c2e89d73d766801541f947",
          "uid": "llmstruct.modules.cli.copilot",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.copilot"
          ],
          "uid_type": "module",
          "artifact_id": "fd92badd-aa9a-f801-0952-301efabcabf3",
          "metrics": {
            "cyclomatic_complexity": 1,
            "lines_of_code": 10,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 7,
            "test_coverage": 0.0,
            "maintainability_index": 95
          },
          "markdown_anchor": {
            "id": "llmstruct-modules-cli-copilot",
            "title": "Module: llmstruct.modules.cli.copilot",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.modules.cli.copilot](#llmstruct-modules-cli-copilot)",
            "html_anchor": "<a id=\"llmstruct-modules-cli-copilot\"></a>"
          }
        },
        {
          "module_id": "llmstruct.modules.cli.parse",
          "path": "llmstruct/modules/cli/parse.py",
          "category": "cli",
          "module_doc": "",
          "functions": [
            {
              "name": "parse",
              "docstring": "Parse codebase and generate struct.json.",
              "line_range": [
                9,
                93
              ],
              "parameters": [
                "args"
              ],
              "decorators": [],
              "uid": "llmstruct.modules.cli.parse.parse",
              "uid_components": [
                "llmstruct",
                "llmstruct.modules",
                "llmstruct.modules.cli",
                "llmstruct.modules.cli.parse",
                "llmstruct.modules.cli.parse.parse"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [],
          "callgraph": {
            "parse": [
              "cache.close",
              "struct_path.open",
              "json.dump",
              "JSONCache",
              "cache.cache_json",
              "struct_data.get",
              "parsing_config.get",
              "config.get",
              "module.get",
              "getattr",
              "mod_dir.mkdir",
              "load_config",
              "logging.warning",
              "ast_path.open",
              "func.get",
              "generate_json",
              "cli_config.get",
              "Path",
              "logging.error",
              "logging.info"
            ]
          },
          "dependencies": [
            "JSONCache",
            "Path",
            "generate_json",
            "json",
            "llmstruct.cache",
            "llmstruct.generators.json_generator",
            "llmstruct.modules.cli.utils",
            "load_config",
            "logging",
            "os",
            "pathlib"
          ],
          "hash": "966276e0c717ac3bf78502224305e23e2ac9b49547bbbf13bb37c83cb85d8b9c",
          "uid": "llmstruct.modules.cli.parse",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.parse"
          ],
          "uid_type": "module",
          "artifact_id": "99242e67-f039-b360-51d2-e61cd9f73453",
          "metrics": {
            "cyclomatic_complexity": 1,
            "lines_of_code": 10,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 11,
            "test_coverage": 0.0,
            "maintainability_index": 95
          },
          "markdown_anchor": {
            "id": "llmstruct-modules-cli-parse",
            "title": "Module: llmstruct.modules.cli.parse",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.modules.cli.parse](#llmstruct-modules-cli-parse)",
            "html_anchor": "<a id=\"llmstruct-modules-cli-parse\"></a>"
          }
        },
        {
          "module_id": "llmstruct.modules.cli.epic",
          "path": "llmstruct/modules/cli/epic.py",
          "category": "cli",
          "module_doc": "",
          "functions": [
            {
              "name": "load_json",
              "docstring": "",
              "line_range": [
                5,
                7
              ],
              "parameters": [
                "path"
              ],
              "decorators": [],
              "uid": "llmstruct.modules.cli.epic.load_json",
              "uid_components": [
                "llmstruct",
                "llmstruct.modules",
                "llmstruct.modules.cli",
                "llmstruct.modules.cli.epic",
                "llmstruct.modules.cli.epic.load_json"
              ],
              "uid_type": "function"
            },
            {
              "name": "show_links",
              "docstring": "",
              "line_range": [
                9,
                57
              ],
              "parameters": [
                "args"
              ],
              "decorators": [],
              "uid": "llmstruct.modules.cli.epic.show_links",
              "uid_components": [
                "llmstruct",
                "llmstruct.modules",
                "llmstruct.modules.cli",
                "llmstruct.modules.cli.epic",
                "llmstruct.modules.cli.epic.show_links"
              ],
              "uid_type": "function"
            },
            {
              "name": "add_epic_cli_subparser",
              "docstring": "",
              "line_range": [
                59,
                67
              ],
              "parameters": [
                "subparsers"
              ],
              "decorators": [],
              "uid": "llmstruct.modules.cli.epic.add_epic_cli_subparser",
              "uid_components": [
                "llmstruct",
                "llmstruct.modules",
                "llmstruct.modules.cli",
                "llmstruct.modules.cli.epic",
                "llmstruct.modules.cli.epic.add_epic_cli_subparser"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [],
          "callgraph": {
            "load_json": [
              "json.load",
              "open"
            ],
            "show_links": [
              "data.get",
              "results.items",
              "print",
              "epic.get",
              "Path",
              "t.upper",
              "json.dumps",
              "epic_path.exists",
              "load_json",
              "status_filter.lower",
              "link_map.items",
              "str",
              "item.get"
            ],
            "add_epic_cli_subparser": [
              "show_links_parser.set_defaults",
              "epic_sub.add_parser",
              "subparsers.add_parser",
              "epic_parser.add_subparsers",
              "show_links_parser.add_argument"
            ]
          },
          "dependencies": [
            "Path",
            "argparse",
            "json",
            "pathlib"
          ],
          "hash": "7a96cb38d4cc07f413b5da974e0eb6c461a8ce1c76f96f808c8a4414a7eb1b30",
          "uid": "llmstruct.modules.cli.epic",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.epic"
          ],
          "uid_type": "module",
          "artifact_id": "9cfb70b7-5ec4-27ed-a6c3-676bf20e7198",
          "metrics": {
            "cyclomatic_complexity": 3,
            "lines_of_code": 30,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 4,
            "test_coverage": 0.0,
            "maintainability_index": 85
          },
          "markdown_anchor": {
            "id": "llmstruct-modules-cli-epic",
            "title": "Module: llmstruct.modules.cli.epic",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.modules.cli.epic](#llmstruct-modules-cli-epic)",
            "html_anchor": "<a id=\"llmstruct-modules-cli-epic\"></a>"
          }
        },
        {
          "module_id": "llmstruct.modules.cli.handlers",
          "path": "llmstruct/modules/cli/handlers.py",
          "category": "cli",
          "module_doc": "",
          "functions": [
            {
              "name": "interactive",
              "docstring": "Run interactive CLI with modular structure if available, fallback to legacy.",
              "line_range": [
                14,
                21
              ],
              "parameters": [
                "args"
              ],
              "decorators": [],
              "uid": "llmstruct.modules.cli.handlers.interactive",
              "uid_components": [
                "llmstruct",
                "llmstruct.modules",
                "llmstruct.modules.cli",
                "llmstruct.modules.cli.handlers",
                "llmstruct.modules.cli.handlers.interactive"
              ],
              "uid_type": "function"
            },
            {
              "name": "interactive_modular",
              "docstring": "Run interactive CLI with modular structure.",
              "line_range": [
                23,
                32
              ],
              "parameters": [
                "args"
              ],
              "decorators": [],
              "uid": "llmstruct.modules.cli.handlers.interactive_modular",
              "uid_components": [
                "llmstruct",
                "llmstruct.modules",
                "llmstruct.modules.cli",
                "llmstruct.modules.cli.handlers",
                "llmstruct.modules.cli.handlers.interactive_modular"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [],
          "callgraph": {
            "interactive": [
              "interactive_legacy",
              "interactive_modular",
              "logging.warning"
            ],
            "interactive_modular": [
              "create_cli_core",
              "hasattr",
              "logging.info",
              "cli_core.run_interactive_mode"
            ]
          },
          "dependencies": [
            "JSONCache",
            "LLMClient",
            "Path",
            "attach_to_llm_request",
            "create_cli_core",
            "get_folder_structure",
            "interactive_legacy",
            "json",
            "llmstruct",
            "llmstruct.cache",
            "llmstruct.cli_core",
            "llmstruct.generators.json_generator",
            "llmstruct.modules.cli.handlers_legacy",
            "llmstruct.modules.cli.utils",
            "llmstruct.self_run",
            "load_gitignore",
            "logging",
            "os",
            "pathlib",
            "re",
            "read_file_content",
            "time",
            "write_to_file"
          ],
          "hash": "51450e4006a43d948e918bd87e43874e584f08c569cdbe9f89aff58c9d6293a2",
          "uid": "llmstruct.modules.cli.handlers",
          "uid_components": [
            "llmstruct",
            "llmstruct.modules",
            "llmstruct.modules.cli",
            "llmstruct.modules.cli.handlers"
          ],
          "uid_type": "module",
          "artifact_id": "b84aefa9-910a-123a-8008-2fac20bfe643",
          "metrics": {
            "cyclomatic_complexity": 2,
            "lines_of_code": 20,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 23,
            "test_coverage": 0.0,
            "maintainability_index": 90
          },
          "markdown_anchor": {
            "id": "llmstruct-modules-cli-handlers",
            "title": "Module: llmstruct.modules.cli.handlers",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: llmstruct.modules.cli.handlers](#llmstruct-modules-cli-handlers)",
            "html_anchor": "<a id=\"llmstruct-modules-cli-handlers\"></a>"
          }
        }
      ]
    },
    "scripts": {
      "modules": [
        {
          "module_id": "scripts.auto_update_struct",
          "path": "scripts/auto_update_struct.py",
          "category": "core",
          "module_doc": "Automatic struct.json update script\nThis script automatically parses the project and updates struct.json\nwithout requiring LLM intervention.",
          "functions": [
            {
              "name": "detect_project_changes",
              "docstring": "Detect if project files have changed since last struct.json generation.\nUses git status to check for modifications.",
              "line_range": [
                44,
                81
              ],
              "parameters": [
                "root_dir",
                "struct_path"
              ],
              "decorators": [],
              "uid": "scripts.auto_update_struct.detect_project_changes",
              "uid_components": [
                "scripts",
                "scripts.auto_update_struct",
                "scripts.auto_update_struct.detect_project_changes"
              ],
              "uid_type": "function"
            },
            {
              "name": "backup_struct_json",
              "docstring": "Create a backup of existing struct.json.",
              "line_range": [
                84,
                97
              ],
              "parameters": [
                "struct_path"
              ],
              "decorators": [],
              "uid": "scripts.auto_update_struct.backup_struct_json",
              "uid_components": [
                "scripts",
                "scripts.auto_update_struct",
                "scripts.auto_update_struct.backup_struct_json"
              ],
              "uid_type": "function"
            },
            {
              "name": "validate_struct_json",
              "docstring": "Validate generated struct.json for basic structure.",
              "line_range": [
                100,
                128
              ],
              "parameters": [
                "struct_path"
              ],
              "decorators": [],
              "uid": "scripts.auto_update_struct.validate_struct_json",
              "uid_components": [
                "scripts",
                "scripts.auto_update_struct",
                "scripts.auto_update_struct.validate_struct_json"
              ],
              "uid_type": "function"
            },
            {
              "name": "update_struct_json",
              "docstring": "Main function to update struct.json automatically.\n\nArgs:\n    root_dir: Project root directory (default: current directory)\n    struct_path: Path to struct.json (default: ./struct.json)\n    force: Force regeneration even if no changes detected\n    config_override: Override default configuration\n\nReturns:\n    bool: True if update was successful",
              "line_range": [
                131,
                225
              ],
              "parameters": [
                "root_dir",
                "struct_path",
                "force",
                "config_override"
              ],
              "decorators": [],
              "uid": "scripts.auto_update_struct.update_struct_json",
              "uid_components": [
                "scripts",
                "scripts.auto_update_struct",
                "scripts.auto_update_struct.update_struct_json"
              ],
              "uid_type": "function"
            },
            {
              "name": "main",
              "docstring": "Command-line interface for auto-update script.",
              "line_range": [
                228,
                286
              ],
              "parameters": [],
              "decorators": [],
              "uid": "scripts.auto_update_struct.main",
              "uid_components": [
                "scripts",
                "scripts.auto_update_struct",
                "scripts.auto_update_struct.main"
              ],
              "uid_type": "function"
            },
            {
              "name": "load_config",
              "docstring": "",
              "line_range": [
                24,
                25
              ],
              "parameters": [],
              "decorators": [],
              "uid": "scripts.auto_update_struct.load_config",
              "uid_components": [
                "scripts",
                "scripts.auto_update_struct",
                "scripts.auto_update_struct.load_config"
              ],
              "uid_type": "function"
            },
            {
              "name": "load_gitignore",
              "docstring": "",
              "line_range": [
                26,
                27
              ],
              "parameters": [],
              "decorators": [],
              "uid": "scripts.auto_update_struct.load_gitignore",
              "uid_components": [
                "scripts",
                "scripts.auto_update_struct",
                "scripts.auto_update_struct.load_gitignore"
              ],
              "uid_type": "function"
            },
            {
              "name": "generate_json",
              "docstring": "",
              "line_range": [
                28,
                29
              ],
              "parameters": [],
              "decorators": [],
              "uid": "scripts.auto_update_struct.generate_json",
              "uid_components": [
                "scripts",
                "scripts.auto_update_struct",
                "scripts.auto_update_struct.generate_json"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [],
          "callgraph": {
            "load_config": [],
            "load_gitignore": [],
            "generate_json": [
              "ImportError"
            ],
            "detect_project_changes": [
              "subprocess.run",
              "logger.warning",
              "file_path.stat",
              "Path",
              "logger.info"
            ],
            "backup_struct_json": [
              "subprocess.run",
              "Path",
              "datetime.now",
              "logger.info",
              "logger.error"
            ],
            "validate_struct_json": [
              "json.load",
              "open",
              "logger.info",
              "logger.error"
            ],
            "update_struct_json": [
              "config.update",
              "load_gitignore",
              "detect_project_changes",
              "backup_struct_json",
              "config.get",
              "generate_json",
              "subprocess.run",
              "validate_struct_json",
              "os.getcwd",
              "open",
              "cli_config.get",
              "logger.info",
              "logger.error",
              "json.dump",
              "load_config"
            ],
            "main": [
              "detect_project_changes",
              "argparse.ArgumentParser",
              "parser.add_argument",
              "print",
              "os.getcwd",
              "update_struct_json",
              "parser.parse_args",
              "logging.getLogger",
              "sys.exit"
            ]
          },
          "dependencies": [
            "Any",
            "Dict",
            "Optional",
            "Path",
            "argparse",
            "datetime",
            "generate_json",
            "json",
            "llmstruct.cli",
            "llmstruct.generators.json_generator",
            "load_config",
            "load_gitignore",
            "logging",
            "os",
            "pathlib",
            "subprocess",
            "sys",
            "typing"
          ],
          "hash": "505bdb6b282e7e9befc6df4165834fa7481335c96bbb88b04501996e15e173c2",
          "uid": "scripts.auto_update_struct",
          "uid_components": [
            "scripts",
            "scripts.auto_update_struct"
          ],
          "uid_type": "module",
          "artifact_id": "3761c72a-e8a5-6f08-fa7a-caa30b339d36",
          "metrics": {
            "cyclomatic_complexity": 8,
            "lines_of_code": 80,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 18,
            "test_coverage": 0.0,
            "maintainability_index": 60
          },
          "markdown_anchor": {
            "id": "scripts-auto_update_struct",
            "title": "Module: scripts.auto_update_struct",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: scripts.auto_update_struct](#scripts-auto_update_struct)",
            "html_anchor": "<a id=\"scripts-auto_update_struct\"></a>"
          }
        },
        {
          "module_id": "scripts.validate_schemas",
          "path": "scripts/validate_schemas.py",
          "category": "core",
          "module_doc": "",
          "functions": [],
          "classes": [],
          "callgraph": {},
          "dependencies": [],
          "hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
          "uid": "scripts.validate_schemas",
          "uid_components": [
            "scripts",
            "scripts.validate_schemas"
          ],
          "uid_type": "module",
          "artifact_id": "e08c221d-3a74-597c-2b1b-e459cfe1f71e",
          "metrics": {
            "cyclomatic_complexity": 0,
            "lines_of_code": 0,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 0,
            "test_coverage": 0.0,
            "maintainability_index": 100
          },
          "markdown_anchor": {
            "id": "scripts-validate_schemas",
            "title": "Module: scripts.validate_schemas",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: scripts.validate_schemas](#scripts-validate_schemas)",
            "html_anchor": "<a id=\"scripts-validate_schemas\"></a>"
          }
        },
        {
          "module_id": "scripts.github_sync_manager",
          "path": "scripts/github_sync_manager.py",
          "category": "core",
          "module_doc": "GitHub Sync Manager - \u0418\u0434\u0435\u043c\u043f\u043e\u0442\u0435\u043d\u0442\u043d\u0430\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f processing results \u0441 GitHub\nSupports: Issues, Epics (Projects), Discussions\nSafety: dry-run mode, logging, collision detection",
          "functions": [
            {
              "name": "main",
              "docstring": "CLI interface",
              "line_range": [
                375,
                408
              ],
              "parameters": [],
              "decorators": [],
              "uid": "scripts.github_sync_manager.main",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager",
                "scripts.github_sync_manager.main"
              ],
              "uid_type": "function"
            },
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                17,
                48
              ],
              "parameters": [
                "self",
                "repo_owner",
                "repo_name",
                "dry_run"
              ],
              "decorators": [],
              "uid": "scripts.github_sync_manager.__init__",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager",
                "scripts.github_sync_manager.__init__"
              ],
              "uid_type": "function"
            },
            {
              "name": "load_sync_log",
              "docstring": "Load previous sync results for idempotency",
              "line_range": [
                50,
                60
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "scripts.github_sync_manager.load_sync_log",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager",
                "scripts.github_sync_manager.load_sync_log"
              ],
              "uid_type": "function"
            },
            {
              "name": "save_sync_log",
              "docstring": "Save sync log for future idempotency",
              "line_range": [
                62,
                65
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "scripts.github_sync_manager.save_sync_log",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager",
                "scripts.github_sync_manager.save_sync_log"
              ],
              "uid_type": "function"
            },
            {
              "name": "api_request",
              "docstring": "Safe GitHub API request with rate limiting",
              "line_range": [
                67,
                94
              ],
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ],
              "decorators": [],
              "uid": "scripts.github_sync_manager.api_request",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager",
                "scripts.github_sync_manager.api_request"
              ],
              "uid_type": "function"
            },
            {
              "name": "get_existing_issues",
              "docstring": "Get existing GitHub issues for collision detection",
              "line_range": [
                96,
                112
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "scripts.github_sync_manager.get_existing_issues",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager",
                "scripts.github_sync_manager.get_existing_issues"
              ],
              "uid_type": "function"
            },
            {
              "name": "get_existing_discussions",
              "docstring": "Get existing GitHub discussions",
              "line_range": [
                114,
                118
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "scripts.github_sync_manager.get_existing_discussions",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager",
                "scripts.github_sync_manager.get_existing_discussions"
              ],
              "uid_type": "function"
            },
            {
              "name": "item_already_synced",
              "docstring": "Check if item was already synced (idempotency)",
              "line_range": [
                120,
                125
              ],
              "parameters": [
                "self",
                "item",
                "category"
              ],
              "decorators": [],
              "uid": "scripts.github_sync_manager.item_already_synced",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager",
                "scripts.github_sync_manager.item_already_synced"
              ],
              "uid_type": "function"
            },
            {
              "name": "find_existing_by_title",
              "docstring": "Find existing GitHub item by title similarity",
              "line_range": [
                127,
                143
              ],
              "parameters": [
                "self",
                "title",
                "existing_items"
              ],
              "decorators": [],
              "uid": "scripts.github_sync_manager.find_existing_by_title",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager",
                "scripts.github_sync_manager.find_existing_by_title"
              ],
              "uid_type": "function"
            },
            {
              "name": "create_github_issue",
              "docstring": "Create GitHub issue from processed item",
              "line_range": [
                145,
                182
              ],
              "parameters": [
                "self",
                "item"
              ],
              "decorators": [],
              "uid": "scripts.github_sync_manager.create_github_issue",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager",
                "scripts.github_sync_manager.create_github_issue"
              ],
              "uid_type": "function"
            },
            {
              "name": "create_github_discussion",
              "docstring": "Create GitHub discussion from processed item",
              "line_range": [
                184,
                194
              ],
              "parameters": [
                "self",
                "item"
              ],
              "decorators": [],
              "uid": "scripts.github_sync_manager.create_github_discussion",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager",
                "scripts.github_sync_manager.create_github_discussion"
              ],
              "uid_type": "function"
            },
            {
              "name": "create_github_epic",
              "docstring": "Create GitHub epic (as Project or enhanced Issue)",
              "line_range": [
                196,
                214
              ],
              "parameters": [
                "self",
                "item"
              ],
              "decorators": [],
              "uid": "scripts.github_sync_manager.create_github_epic",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager",
                "scripts.github_sync_manager.create_github_epic"
              ],
              "uid_type": "function"
            },
            {
              "name": "sync_category",
              "docstring": "Sync specific category with GitHub",
              "line_range": [
                216,
                290
              ],
              "parameters": [
                "self",
                "category",
                "filename"
              ],
              "decorators": [],
              "uid": "scripts.github_sync_manager.sync_category",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager",
                "scripts.github_sync_manager.sync_category"
              ],
              "uid_type": "function"
            },
            {
              "name": "validate_before_sync",
              "docstring": "Pre-sync validation checks",
              "line_range": [
                292,
                322
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "scripts.github_sync_manager.validate_before_sync",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager",
                "scripts.github_sync_manager.validate_before_sync"
              ],
              "uid_type": "function"
            },
            {
              "name": "run_sync",
              "docstring": "Main sync execution",
              "line_range": [
                324,
                373
              ],
              "parameters": [
                "self",
                "categories"
              ],
              "decorators": [],
              "uid": "scripts.github_sync_manager.run_sync",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager",
                "scripts.github_sync_manager.run_sync"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [
            {
              "name": "GitHubSyncManager",
              "docstring": "",
              "line_range": [
                16,
                373
              ],
              "methods": [
                {
                  "name": "__init__",
                  "docstring": "",
                  "line_range": [
                    17,
                    48
                  ],
                  "parameters": [
                    "self",
                    "repo_owner",
                    "repo_name",
                    "dry_run"
                  ],
                  "uid": "scripts.github_sync_manager.GitHubSyncManager.__init__",
                  "uid_components": [
                    "scripts",
                    "scripts.github_sync_manager",
                    "scripts.github_sync_manager.GitHubSyncManager",
                    "scripts.github_sync_manager.GitHubSyncManager.__init__"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "load_sync_log",
                  "docstring": "Load previous sync results for idempotency",
                  "line_range": [
                    50,
                    60
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "scripts.github_sync_manager.GitHubSyncManager.load_sync_log",
                  "uid_components": [
                    "scripts",
                    "scripts.github_sync_manager",
                    "scripts.github_sync_manager.GitHubSyncManager",
                    "scripts.github_sync_manager.GitHubSyncManager.load_sync_log"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "save_sync_log",
                  "docstring": "Save sync log for future idempotency",
                  "line_range": [
                    62,
                    65
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "scripts.github_sync_manager.GitHubSyncManager.save_sync_log",
                  "uid_components": [
                    "scripts",
                    "scripts.github_sync_manager",
                    "scripts.github_sync_manager.GitHubSyncManager",
                    "scripts.github_sync_manager.GitHubSyncManager.save_sync_log"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "api_request",
                  "docstring": "Safe GitHub API request with rate limiting",
                  "line_range": [
                    67,
                    94
                  ],
                  "parameters": [
                    "self",
                    "method",
                    "endpoint",
                    "data"
                  ],
                  "uid": "scripts.github_sync_manager.GitHubSyncManager.api_request",
                  "uid_components": [
                    "scripts",
                    "scripts.github_sync_manager",
                    "scripts.github_sync_manager.GitHubSyncManager",
                    "scripts.github_sync_manager.GitHubSyncManager.api_request"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "get_existing_issues",
                  "docstring": "Get existing GitHub issues for collision detection",
                  "line_range": [
                    96,
                    112
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "scripts.github_sync_manager.GitHubSyncManager.get_existing_issues",
                  "uid_components": [
                    "scripts",
                    "scripts.github_sync_manager",
                    "scripts.github_sync_manager.GitHubSyncManager",
                    "scripts.github_sync_manager.GitHubSyncManager.get_existing_issues"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "get_existing_discussions",
                  "docstring": "Get existing GitHub discussions",
                  "line_range": [
                    114,
                    118
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "scripts.github_sync_manager.GitHubSyncManager.get_existing_discussions",
                  "uid_components": [
                    "scripts",
                    "scripts.github_sync_manager",
                    "scripts.github_sync_manager.GitHubSyncManager",
                    "scripts.github_sync_manager.GitHubSyncManager.get_existing_discussions"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "item_already_synced",
                  "docstring": "Check if item was already synced (idempotency)",
                  "line_range": [
                    120,
                    125
                  ],
                  "parameters": [
                    "self",
                    "item",
                    "category"
                  ],
                  "uid": "scripts.github_sync_manager.GitHubSyncManager.item_already_synced",
                  "uid_components": [
                    "scripts",
                    "scripts.github_sync_manager",
                    "scripts.github_sync_manager.GitHubSyncManager",
                    "scripts.github_sync_manager.GitHubSyncManager.item_already_synced"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "find_existing_by_title",
                  "docstring": "Find existing GitHub item by title similarity",
                  "line_range": [
                    127,
                    143
                  ],
                  "parameters": [
                    "self",
                    "title",
                    "existing_items"
                  ],
                  "uid": "scripts.github_sync_manager.GitHubSyncManager.find_existing_by_title",
                  "uid_components": [
                    "scripts",
                    "scripts.github_sync_manager",
                    "scripts.github_sync_manager.GitHubSyncManager",
                    "scripts.github_sync_manager.GitHubSyncManager.find_existing_by_title"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "create_github_issue",
                  "docstring": "Create GitHub issue from processed item",
                  "line_range": [
                    145,
                    182
                  ],
                  "parameters": [
                    "self",
                    "item"
                  ],
                  "uid": "scripts.github_sync_manager.GitHubSyncManager.create_github_issue",
                  "uid_components": [
                    "scripts",
                    "scripts.github_sync_manager",
                    "scripts.github_sync_manager.GitHubSyncManager",
                    "scripts.github_sync_manager.GitHubSyncManager.create_github_issue"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "create_github_discussion",
                  "docstring": "Create GitHub discussion from processed item",
                  "line_range": [
                    184,
                    194
                  ],
                  "parameters": [
                    "self",
                    "item"
                  ],
                  "uid": "scripts.github_sync_manager.GitHubSyncManager.create_github_discussion",
                  "uid_components": [
                    "scripts",
                    "scripts.github_sync_manager",
                    "scripts.github_sync_manager.GitHubSyncManager",
                    "scripts.github_sync_manager.GitHubSyncManager.create_github_discussion"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "create_github_epic",
                  "docstring": "Create GitHub epic (as Project or enhanced Issue)",
                  "line_range": [
                    196,
                    214
                  ],
                  "parameters": [
                    "self",
                    "item"
                  ],
                  "uid": "scripts.github_sync_manager.GitHubSyncManager.create_github_epic",
                  "uid_components": [
                    "scripts",
                    "scripts.github_sync_manager",
                    "scripts.github_sync_manager.GitHubSyncManager",
                    "scripts.github_sync_manager.GitHubSyncManager.create_github_epic"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "sync_category",
                  "docstring": "Sync specific category with GitHub",
                  "line_range": [
                    216,
                    290
                  ],
                  "parameters": [
                    "self",
                    "category",
                    "filename"
                  ],
                  "uid": "scripts.github_sync_manager.GitHubSyncManager.sync_category",
                  "uid_components": [
                    "scripts",
                    "scripts.github_sync_manager",
                    "scripts.github_sync_manager.GitHubSyncManager",
                    "scripts.github_sync_manager.GitHubSyncManager.sync_category"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "validate_before_sync",
                  "docstring": "Pre-sync validation checks",
                  "line_range": [
                    292,
                    322
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "scripts.github_sync_manager.GitHubSyncManager.validate_before_sync",
                  "uid_components": [
                    "scripts",
                    "scripts.github_sync_manager",
                    "scripts.github_sync_manager.GitHubSyncManager",
                    "scripts.github_sync_manager.GitHubSyncManager.validate_before_sync"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "run_sync",
                  "docstring": "Main sync execution",
                  "line_range": [
                    324,
                    373
                  ],
                  "parameters": [
                    "self",
                    "categories"
                  ],
                  "uid": "scripts.github_sync_manager.GitHubSyncManager.run_sync",
                  "uid_components": [
                    "scripts",
                    "scripts.github_sync_manager",
                    "scripts.github_sync_manager.GitHubSyncManager",
                    "scripts.github_sync_manager.GitHubSyncManager.run_sync"
                  ],
                  "uid_type": "method"
                }
              ],
              "bases": [],
              "uid": "scripts.github_sync_manager.GitHubSyncManager",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager",
                "scripts.github_sync_manager.GitHubSyncManager"
              ],
              "uid_type": "class"
            }
          ],
          "callgraph": {
            "__init__": [
              "print",
              "self.load_sync_log",
              "os.getenv",
              "Path"
            ],
            "load_sync_log": [
              "json.load",
              "open"
            ],
            "save_sync_log": [
              "json.dump",
              "open"
            ],
            "api_request": [
              "requests.get",
              "requests.post",
              "requests.patch",
              "print",
              "response.json",
              "int",
              "ValueError",
              "response.raise_for_status",
              "method.upper",
              "time.sleep"
            ],
            "get_existing_issues": [
              "self.api_request",
              "issues.extend",
              "len"
            ],
            "get_existing_discussions": [],
            "item_already_synced": [
              "item.get"
            ],
            "find_existing_by_title": [
              "title.lower",
              "item.get",
              "len"
            ],
            "create_github_issue": [
              "labels.append",
              "print",
              "self.api_request",
              "item.get",
              "processing_meta.get"
            ],
            "create_github_discussion": [
              "print",
              "item.get"
            ],
            "create_github_epic": [
              "print",
              "item.get",
              "self.api_request"
            ],
            "sync_category": [
              "self.create_github_epic",
              "self.find_existing_by_title",
              "data.get",
              "existing.get",
              "print",
              "open",
              "result.get",
              "self.get_existing_discussions",
              "file_path.exists",
              "json.load",
              "self.create_github_discussion",
              "self.item_already_synced",
              "datetime.now",
              "self.get_existing_issues",
              "self.create_github_issue",
              "item.get"
            ],
            "validate_before_sync": [
              "repo_info.get",
              "print",
              "core_limit.get",
              "rate_limit.get",
              "user_info.get",
              "self.api_request"
            ],
            "run_sync": [
              "r.get",
              "self.validate_before_sync",
              "self.save_sync_log",
              "results.values",
              "print",
              "sum",
              "datetime.now",
              "self.sync_category"
            ],
            "main": [
              "argparse.ArgumentParser",
              "len",
              "parser.add_argument",
              "print",
              "result.get",
              "parser.parse_args",
              "manager.run_sync",
              "GitHubSyncManager"
            ]
          },
          "dependencies": [
            "Any",
            "Dict",
            "List",
            "Optional",
            "Path",
            "argparse",
            "datetime",
            "json",
            "os",
            "pathlib",
            "requests",
            "time",
            "typing"
          ],
          "hash": "1ee49d0d031a76692ccc03ff995d0a75d198818dcf2c1f625d6e9aee0828a7c9",
          "uid": "scripts.github_sync_manager",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager"
          ],
          "uid_type": "module",
          "artifact_id": "b435845e-165d-2218-9067-816eb10b2142",
          "metrics": {
            "cyclomatic_complexity": 17,
            "lines_of_code": 150,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 13,
            "test_coverage": 0.0,
            "maintainability_index": 15
          },
          "markdown_anchor": {
            "id": "scripts-github_sync_manager",
            "title": "Module: scripts.github_sync_manager",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: scripts.github_sync_manager](#scripts-github_sync_manager)",
            "html_anchor": "<a id=\"scripts-github_sync_manager\"></a>"
          }
        },
        {
          "module_id": "scripts.fix_github_script",
          "path": "scripts/fix_github_script.py",
          "category": "core",
          "module_doc": "Quick fix for GitHub issues creation script\n\u0418\u0441\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u043e\u0439 JSON \u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445",
          "functions": [
            {
              "name": "fix_json_loading",
              "docstring": "\u0418\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0443 JSON \u0434\u0430\u043d\u043d\u044b\u0445",
              "line_range": [
                11,
                42
              ],
              "parameters": [],
              "decorators": [],
              "uid": "scripts.fix_github_script.fix_json_loading",
              "uid_components": [
                "scripts",
                "scripts.fix_github_script",
                "scripts.fix_github_script.fix_json_loading"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [],
          "callgraph": {
            "fix_json_loading": [
              "f.write",
              "print",
              "open",
              "Path",
              "f.read",
              "content.replace"
            ]
          },
          "dependencies": [
            "Path",
            "json",
            "os",
            "pathlib"
          ],
          "hash": "749ea82f6bcdc68da77827b691267646be1c85f5b2c20e39d085d768c9e64d87",
          "uid": "scripts.fix_github_script",
          "uid_components": [
            "scripts",
            "scripts.fix_github_script"
          ],
          "uid_type": "module",
          "artifact_id": "00d09d4f-6a0b-3446-fae4-fab7d1876da8",
          "metrics": {
            "cyclomatic_complexity": 1,
            "lines_of_code": 10,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 4,
            "test_coverage": 0.0,
            "maintainability_index": 95
          },
          "markdown_anchor": {
            "id": "scripts-fix_github_script",
            "title": "Module: scripts.fix_github_script",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: scripts.fix_github_script](#scripts-fix_github_script)",
            "html_anchor": "<a id=\"scripts-fix_github_script\"></a>"
          }
        },
        {
          "module_id": "scripts.create_github_issues",
          "path": "scripts/create_github_issues.py",
          "category": "core",
          "module_doc": "GitHub Issues Creator for AI-Dogfooding Project\n\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 GitHub issues \u0438\u0437 \u043d\u0430\u0448\u0438\u0445 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0437\u0430\u0434\u0430\u0447",
          "functions": [
            {
              "name": "load_env_file",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430",
              "line_range": [
                16,
                28
              ],
              "parameters": [],
              "decorators": [],
              "uid": "scripts.create_github_issues.load_env_file",
              "uid_components": [
                "scripts",
                "scripts.create_github_issues",
                "scripts.create_github_issues.load_env_file"
              ],
              "uid_type": "function"
            },
            {
              "name": "load_epics_data",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438\u0437 JSON",
              "line_range": [
                205,
                213
              ],
              "parameters": [],
              "decorators": [],
              "uid": "scripts.create_github_issues.load_epics_data",
              "uid_components": [
                "scripts",
                "scripts.create_github_issues",
                "scripts.create_github_issues.load_epics_data"
              ],
              "uid_type": "function"
            },
            {
              "name": "main",
              "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f issues",
              "line_range": [
                215,
                252
              ],
              "parameters": [],
              "decorators": [],
              "uid": "scripts.create_github_issues.main",
              "uid_components": [
                "scripts",
                "scripts.create_github_issues",
                "scripts.create_github_issues.main"
              ],
              "uid_type": "function"
            },
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                34,
                43
              ],
              "parameters": [
                "self",
                "repo_owner",
                "repo_name",
                "token",
                "use_cli"
              ],
              "decorators": [],
              "uid": "scripts.create_github_issues.__init__",
              "uid_components": [
                "scripts",
                "scripts.create_github_issues",
                "scripts.create_github_issues.__init__"
              ],
              "uid_type": "function"
            },
            {
              "name": "create_epic_issue",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u044d\u043f\u0438\u043a\u0430",
              "line_range": [
                45,
                83
              ],
              "parameters": [
                "self",
                "epic_data"
              ],
              "decorators": [],
              "uid": "scripts.create_github_issues.create_epic_issue",
              "uid_components": [
                "scripts",
                "scripts.create_github_issues",
                "scripts.create_github_issues.create_epic_issue"
              ],
              "uid_type": "function"
            },
            {
              "name": "create_task_issue",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
              "line_range": [
                85,
                128
              ],
              "parameters": [
                "self",
                "task_data",
                "epic_number"
              ],
              "decorators": [],
              "uid": "scripts.create_github_issues.create_task_issue",
              "uid_components": [
                "scripts",
                "scripts.create_github_issues",
                "scripts.create_github_issues.create_task_issue"
              ],
              "uid_type": "function"
            },
            {
              "name": "_create_issue_via_api",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub API",
              "line_range": [
                130,
                150
              ],
              "parameters": [
                "self",
                "title",
                "body",
                "labels"
              ],
              "decorators": [],
              "uid": "scripts.create_github_issues._create_issue_via_api",
              "uid_components": [
                "scripts",
                "scripts.create_github_issues",
                "scripts.create_github_issues._create_issue_via_api"
              ],
              "uid_type": "function"
            },
            {
              "name": "_create_issue_via_cli",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub CLI",
              "line_range": [
                152,
                186
              ],
              "parameters": [
                "self",
                "title",
                "body",
                "labels"
              ],
              "decorators": [],
              "uid": "scripts.create_github_issues._create_issue_via_cli",
              "uid_components": [
                "scripts",
                "scripts.create_github_issues",
                "scripts.create_github_issues._create_issue_via_cli"
              ],
              "uid_type": "function"
            },
            {
              "name": "_format_criteria",
              "docstring": "",
              "line_range": [
                188,
                189
              ],
              "parameters": [
                "self",
                "criteria"
              ],
              "decorators": [],
              "uid": "scripts.create_github_issues._format_criteria",
              "uid_components": [
                "scripts",
                "scripts.create_github_issues",
                "scripts.create_github_issues._format_criteria"
              ],
              "uid_type": "function"
            },
            {
              "name": "_format_tasks",
              "docstring": "",
              "line_range": [
                191,
                200
              ],
              "parameters": [
                "self",
                "tasks"
              ],
              "decorators": [],
              "uid": "scripts.create_github_issues._format_tasks",
              "uid_components": [
                "scripts",
                "scripts.create_github_issues",
                "scripts.create_github_issues._format_tasks"
              ],
              "uid_type": "function"
            },
            {
              "name": "_format_metrics",
              "docstring": "",
              "line_range": [
                202,
                203
              ],
              "parameters": [
                "self",
                "metrics"
              ],
              "decorators": [],
              "uid": "scripts.create_github_issues._format_metrics",
              "uid_components": [
                "scripts",
                "scripts.create_github_issues",
                "scripts.create_github_issues._format_metrics"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [
            {
              "name": "GitHubIssuesCreator",
              "docstring": "",
              "line_range": [
                33,
                203
              ],
              "methods": [
                {
                  "name": "__init__",
                  "docstring": "",
                  "line_range": [
                    34,
                    43
                  ],
                  "parameters": [
                    "self",
                    "repo_owner",
                    "repo_name",
                    "token",
                    "use_cli"
                  ],
                  "uid": "scripts.create_github_issues.GitHubIssuesCreator.__init__",
                  "uid_components": [
                    "scripts",
                    "scripts.create_github_issues",
                    "scripts.create_github_issues.GitHubIssuesCreator",
                    "scripts.create_github_issues.GitHubIssuesCreator.__init__"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "create_epic_issue",
                  "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u044d\u043f\u0438\u043a\u0430",
                  "line_range": [
                    45,
                    83
                  ],
                  "parameters": [
                    "self",
                    "epic_data"
                  ],
                  "uid": "scripts.create_github_issues.GitHubIssuesCreator.create_epic_issue",
                  "uid_components": [
                    "scripts",
                    "scripts.create_github_issues",
                    "scripts.create_github_issues.GitHubIssuesCreator",
                    "scripts.create_github_issues.GitHubIssuesCreator.create_epic_issue"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "create_task_issue",
                  "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
                  "line_range": [
                    85,
                    128
                  ],
                  "parameters": [
                    "self",
                    "task_data",
                    "epic_number"
                  ],
                  "uid": "scripts.create_github_issues.GitHubIssuesCreator.create_task_issue",
                  "uid_components": [
                    "scripts",
                    "scripts.create_github_issues",
                    "scripts.create_github_issues.GitHubIssuesCreator",
                    "scripts.create_github_issues.GitHubIssuesCreator.create_task_issue"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_create_issue_via_api",
                  "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub API",
                  "line_range": [
                    130,
                    150
                  ],
                  "parameters": [
                    "self",
                    "title",
                    "body",
                    "labels"
                  ],
                  "uid": "scripts.create_github_issues.GitHubIssuesCreator._create_issue_via_api",
                  "uid_components": [
                    "scripts",
                    "scripts.create_github_issues",
                    "scripts.create_github_issues.GitHubIssuesCreator",
                    "scripts.create_github_issues.GitHubIssuesCreator._create_issue_via_api"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_create_issue_via_cli",
                  "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub CLI",
                  "line_range": [
                    152,
                    186
                  ],
                  "parameters": [
                    "self",
                    "title",
                    "body",
                    "labels"
                  ],
                  "uid": "scripts.create_github_issues.GitHubIssuesCreator._create_issue_via_cli",
                  "uid_components": [
                    "scripts",
                    "scripts.create_github_issues",
                    "scripts.create_github_issues.GitHubIssuesCreator",
                    "scripts.create_github_issues.GitHubIssuesCreator._create_issue_via_cli"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_format_criteria",
                  "docstring": "",
                  "line_range": [
                    188,
                    189
                  ],
                  "parameters": [
                    "self",
                    "criteria"
                  ],
                  "uid": "scripts.create_github_issues.GitHubIssuesCreator._format_criteria",
                  "uid_components": [
                    "scripts",
                    "scripts.create_github_issues",
                    "scripts.create_github_issues.GitHubIssuesCreator",
                    "scripts.create_github_issues.GitHubIssuesCreator._format_criteria"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_format_tasks",
                  "docstring": "",
                  "line_range": [
                    191,
                    200
                  ],
                  "parameters": [
                    "self",
                    "tasks"
                  ],
                  "uid": "scripts.create_github_issues.GitHubIssuesCreator._format_tasks",
                  "uid_components": [
                    "scripts",
                    "scripts.create_github_issues",
                    "scripts.create_github_issues.GitHubIssuesCreator",
                    "scripts.create_github_issues.GitHubIssuesCreator._format_tasks"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_format_metrics",
                  "docstring": "",
                  "line_range": [
                    202,
                    203
                  ],
                  "parameters": [
                    "self",
                    "metrics"
                  ],
                  "uid": "scripts.create_github_issues.GitHubIssuesCreator._format_metrics",
                  "uid_components": [
                    "scripts",
                    "scripts.create_github_issues",
                    "scripts.create_github_issues.GitHubIssuesCreator",
                    "scripts.create_github_issues.GitHubIssuesCreator._format_metrics"
                  ],
                  "uid_type": "method"
                }
              ],
              "bases": [],
              "uid": "scripts.create_github_issues.GitHubIssuesCreator",
              "uid_components": [
                "scripts",
                "scripts.create_github_issues",
                "scripts.create_github_issues.GitHubIssuesCreator"
              ],
              "uid_type": "class"
            }
          ],
          "callgraph": {
            "load_env_file": [
              "print",
              "open",
              "line.startswith",
              "Path",
              "value.strip",
              "line.strip",
              "key.strip",
              "env_file.exists",
              "line.split"
            ],
            "__init__": [],
            "create_epic_issue": [
              "self._format_criteria",
              "self._format_metrics",
              "self._create_issue_via_api",
              "self._create_issue_via_cli",
              "epic_data.get",
              "self._format_tasks"
            ],
            "create_task_issue": [
              "self._create_issue_via_api",
              "self._format_criteria",
              "self._create_issue_via_cli",
              "task_data.get"
            ],
            "_create_issue_via_api": [
              "print",
              "response.json",
              "requests.post"
            ],
            "_create_issue_via_cli": [
              "subprocess.run",
              "print",
              "open",
              "os.unlink",
              "int",
              "os.getpid",
              "f.write",
              "issue_url.split"
            ],
            "_format_criteria": [],
            "_format_tasks": [],
            "_format_metrics": [
              "metrics.items"
            ],
            "load_epics_data": [
              "print",
              "open",
              "epics_file.exists",
              "Path",
              "json.load"
            ],
            "main": [
              "GitHubIssuesCreator",
              "len",
              "print",
              "load_epics_data",
              "creator.create_task_issue",
              "os.getenv",
              "epic_data.get",
              "creator.create_epic_issue",
              "epics_data.get"
            ]
          },
          "dependencies": [
            "Any",
            "Dict",
            "List",
            "Path",
            "json",
            "os",
            "pathlib",
            "requests",
            "subprocess",
            "sys",
            "typing"
          ],
          "hash": "49ba6a19e2c3aa696879c666036ca56bf5678032d3a8a1004c9c1849b87104b7",
          "uid": "scripts.create_github_issues",
          "uid_components": [
            "scripts",
            "scripts.create_github_issues"
          ],
          "uid_type": "module",
          "artifact_id": "1e8efa86-5fb7-9e0a-464e-1c216c16eb54",
          "metrics": {
            "cyclomatic_complexity": 13,
            "lines_of_code": 110,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 11,
            "test_coverage": 0.0,
            "maintainability_index": 35
          },
          "markdown_anchor": {
            "id": "scripts-create_github_issues",
            "title": "Module: scripts.create_github_issues",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: scripts.create_github_issues](#scripts-create_github_issues)",
            "html_anchor": "<a id=\"scripts-create_github_issues\"></a>"
          }
        },
        {
          "module_id": "scripts.collector",
          "path": "scripts/collector.py",
          "category": "core",
          "module_doc": "",
          "functions": [
            {
              "name": "apply_filters",
              "docstring": "",
              "line_range": [
                13,
                29
              ],
              "parameters": [
                "files",
                "filters"
              ],
              "decorators": [],
              "uid": "scripts.collector.apply_filters",
              "uid_components": [
                "scripts",
                "scripts.collector",
                "scripts.collector.apply_filters"
              ],
              "uid_type": "function"
            },
            {
              "name": "collect_files",
              "docstring": "",
              "line_range": [
                32,
                38
              ],
              "parameters": [
                "root_dir",
                "filters"
              ],
              "decorators": [],
              "uid": "scripts.collector.collect_files",
              "uid_components": [
                "scripts",
                "scripts.collector",
                "scripts.collector.collect_files"
              ],
              "uid_type": "function"
            },
            {
              "name": "generate_struct",
              "docstring": "",
              "line_range": [
                41,
                88
              ],
              "parameters": [
                "root_dir",
                "output"
              ],
              "decorators": [],
              "uid": "scripts.collector.generate_struct",
              "uid_components": [
                "scripts",
                "scripts.collector",
                "scripts.collector.generate_struct"
              ],
              "uid_type": "function"
            },
            {
              "name": "main",
              "docstring": "",
              "line_range": [
                91,
                92
              ],
              "parameters": [],
              "decorators": [],
              "uid": "scripts.collector.main",
              "uid_components": [
                "scripts",
                "scripts.collector",
                "scripts.collector.main"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [],
          "callgraph": {
            "apply_filters": [
              "fnmatch.fnmatch",
              "filtered.append",
              "pattern.startswith"
            ],
            "collect_files": [
              "apply_filters",
              "files.append",
              "root_dir.rglob",
              "path.relative_to",
              "path.is_file",
              "str"
            ],
            "generate_struct": [
              "collect_files",
              "len",
              "existing.get",
              "Path",
              "json.load",
              "uuid.uuid4",
              "json.dump",
              "logger.info",
              "str",
              "output_path.exists",
              "output_path.open"
            ],
            "main": [
              "generate_struct"
            ]
          },
          "dependencies": [
            "Path",
            "fnmatch",
            "json",
            "logging",
            "pathlib",
            "uuid"
          ],
          "hash": "251462380e2e135880f652ce7d9e6a1483d18a1202c336f76ac3f43536505049",
          "uid": "scripts.collector",
          "uid_components": [
            "scripts",
            "scripts.collector"
          ],
          "uid_type": "module",
          "artifact_id": "996bfc6f-6c75-05e8-0194-b447db870574",
          "metrics": {
            "cyclomatic_complexity": 4,
            "lines_of_code": 40,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 6,
            "test_coverage": 0.0,
            "maintainability_index": 80
          },
          "markdown_anchor": {
            "id": "scripts-collector",
            "title": "Module: scripts.collector",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: scripts.collector](#scripts-collector)",
            "html_anchor": "<a id=\"scripts-collector\"></a>"
          }
        },
        {
          "module_id": "scripts.validate_refs",
          "path": "scripts/validate_refs.py",
          "category": "core",
          "module_doc": "",
          "functions": [
            {
              "name": "validate_references",
              "docstring": "",
              "line_range": [
                11,
                43
              ],
              "parameters": [],
              "decorators": [],
              "uid": "scripts.validate_refs.validate_references",
              "uid_components": [
                "scripts",
                "scripts.validate_refs",
                "scripts.validate_refs.validate_references"
              ],
              "uid_type": "function"
            },
            {
              "name": "main",
              "docstring": "",
              "line_range": [
                46,
                47
              ],
              "parameters": [],
              "decorators": [],
              "uid": "scripts.validate_refs.main",
              "uid_components": [
                "scripts",
                "scripts.validate_refs",
                "scripts.validate_refs.main"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [],
          "callgraph": {
            "validate_references": [
              "target_file.exists",
              "broken_links.append",
              "source_file.exists",
              "logger.warning",
              "Path",
              "json.load",
              "enumerate",
              "logger.info",
              "logger.error",
              "json.dump",
              "idea.get"
            ],
            "main": [
              "validate_references"
            ]
          },
          "dependencies": [
            "Path",
            "json",
            "logging",
            "pathlib"
          ],
          "hash": "6c57e53f4e4e0afdb8e8c78f1e6d38f284721f6729a7197ff483ed29f5363607",
          "uid": "scripts.validate_refs",
          "uid_components": [
            "scripts",
            "scripts.validate_refs"
          ],
          "uid_type": "module",
          "artifact_id": "b539279d-2fef-2683-43b6-6df8b2fa8e52",
          "metrics": {
            "cyclomatic_complexity": 2,
            "lines_of_code": 20,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 4,
            "test_coverage": 0.0,
            "maintainability_index": 90
          },
          "markdown_anchor": {
            "id": "scripts-validate_refs",
            "title": "Module: scripts.validate_refs",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: scripts.validate_refs](#scripts-validate_refs)",
            "html_anchor": "<a id=\"scripts-validate_refs\"></a>"
          }
        },
        {
          "module_id": "scripts.epic_roadmap_manager",
          "path": "scripts/epic_roadmap_manager.py",
          "category": "core",
          "module_doc": "Epic Roadmap Manager - \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430\u043c\u0438 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0441\u0435\u0441\u0441\u0438\u0439\n\n\u0424\u0443\u043d\u043a\u0446\u0438\u0438:\n- \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 roadmap \u0438 \u043f\u043b\u0430\u043d\u043e\u0432\n- \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u0441\u0435\u0441\u0441\u0438\u0439\n- \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u0441 GitHub epics\n- \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u043e\u0432",
          "functions": [
            {
              "name": "main",
              "docstring": "",
              "line_range": [
                259,
                291
              ],
              "parameters": [],
              "decorators": [],
              "uid": "scripts.epic_roadmap_manager.main",
              "uid_components": [
                "scripts",
                "scripts.epic_roadmap_manager",
                "scripts.epic_roadmap_manager.main"
              ],
              "uid_type": "function"
            },
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                19,
                22
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "scripts.epic_roadmap_manager.__init__",
              "uid_components": [
                "scripts",
                "scripts.epic_roadmap_manager",
                "scripts.epic_roadmap_manager.__init__"
              ],
              "uid_type": "function"
            },
            {
              "name": "load_roadmap",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c roadmap \u0438\u0437 \u0444\u0430\u0439\u043b\u0430",
              "line_range": [
                24,
                31
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "scripts.epic_roadmap_manager.load_roadmap",
              "uid_components": [
                "scripts",
                "scripts.epic_roadmap_manager",
                "scripts.epic_roadmap_manager.load_roadmap"
              ],
              "uid_type": "function"
            },
            {
              "name": "save_roadmap",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c roadmap \u0432 \u0444\u0430\u0439\u043b",
              "line_range": [
                33,
                40
              ],
              "parameters": [
                "self",
                "roadmap"
              ],
              "decorators": [],
              "uid": "scripts.epic_roadmap_manager.save_roadmap",
              "uid_components": [
                "scripts",
                "scripts.epic_roadmap_manager",
                "scripts.epic_roadmap_manager.save_roadmap"
              ],
              "uid_type": "function"
            },
            {
              "name": "show_overview",
              "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043e\u0431\u0437\u043e\u0440 roadmap",
              "line_range": [
                42,
                80
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "scripts.epic_roadmap_manager.show_overview",
              "uid_components": [
                "scripts",
                "scripts.epic_roadmap_manager",
                "scripts.epic_roadmap_manager.show_overview"
              ],
              "uid_type": "function"
            },
            {
              "name": "show_epic_details",
              "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u044d\u043f\u0438\u043a\u0430",
              "line_range": [
                82,
                125
              ],
              "parameters": [
                "self",
                "epic_id"
              ],
              "decorators": [],
              "uid": "scripts.epic_roadmap_manager.show_epic_details",
              "uid_components": [
                "scripts",
                "scripts.epic_roadmap_manager",
                "scripts.epic_roadmap_manager.show_epic_details"
              ],
              "uid_type": "function"
            },
            {
              "name": "start_session",
              "docstring": "\u041d\u0430\u0447\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043d\u0430\u0434 \u0441\u0435\u0441\u0441\u0438\u0435\u0439",
              "line_range": [
                127,
                189
              ],
              "parameters": [
                "self",
                "epic_id",
                "session_id"
              ],
              "decorators": [],
              "uid": "scripts.epic_roadmap_manager.start_session",
              "uid_components": [
                "scripts",
                "scripts.epic_roadmap_manager",
                "scripts.epic_roadmap_manager.start_session"
              ],
              "uid_type": "function"
            },
            {
              "name": "complete_session",
              "docstring": "\u0417\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e",
              "line_range": [
                191,
                257
              ],
              "parameters": [
                "self",
                "session_id"
              ],
              "decorators": [],
              "uid": "scripts.epic_roadmap_manager.complete_session",
              "uid_components": [
                "scripts",
                "scripts.epic_roadmap_manager",
                "scripts.epic_roadmap_manager.complete_session"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [
            {
              "name": "EpicRoadmapManager",
              "docstring": "",
              "line_range": [
                18,
                257
              ],
              "methods": [
                {
                  "name": "__init__",
                  "docstring": "",
                  "line_range": [
                    19,
                    22
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "scripts.epic_roadmap_manager.EpicRoadmapManager.__init__",
                  "uid_components": [
                    "scripts",
                    "scripts.epic_roadmap_manager",
                    "scripts.epic_roadmap_manager.EpicRoadmapManager",
                    "scripts.epic_roadmap_manager.EpicRoadmapManager.__init__"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "load_roadmap",
                  "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c roadmap \u0438\u0437 \u0444\u0430\u0439\u043b\u0430",
                  "line_range": [
                    24,
                    31
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "scripts.epic_roadmap_manager.EpicRoadmapManager.load_roadmap",
                  "uid_components": [
                    "scripts",
                    "scripts.epic_roadmap_manager",
                    "scripts.epic_roadmap_manager.EpicRoadmapManager",
                    "scripts.epic_roadmap_manager.EpicRoadmapManager.load_roadmap"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "save_roadmap",
                  "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c roadmap \u0432 \u0444\u0430\u0439\u043b",
                  "line_range": [
                    33,
                    40
                  ],
                  "parameters": [
                    "self",
                    "roadmap"
                  ],
                  "uid": "scripts.epic_roadmap_manager.EpicRoadmapManager.save_roadmap",
                  "uid_components": [
                    "scripts",
                    "scripts.epic_roadmap_manager",
                    "scripts.epic_roadmap_manager.EpicRoadmapManager",
                    "scripts.epic_roadmap_manager.EpicRoadmapManager.save_roadmap"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "show_overview",
                  "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043e\u0431\u0437\u043e\u0440 roadmap",
                  "line_range": [
                    42,
                    80
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "scripts.epic_roadmap_manager.EpicRoadmapManager.show_overview",
                  "uid_components": [
                    "scripts",
                    "scripts.epic_roadmap_manager",
                    "scripts.epic_roadmap_manager.EpicRoadmapManager",
                    "scripts.epic_roadmap_manager.EpicRoadmapManager.show_overview"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "show_epic_details",
                  "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u044d\u043f\u0438\u043a\u0430",
                  "line_range": [
                    82,
                    125
                  ],
                  "parameters": [
                    "self",
                    "epic_id"
                  ],
                  "uid": "scripts.epic_roadmap_manager.EpicRoadmapManager.show_epic_details",
                  "uid_components": [
                    "scripts",
                    "scripts.epic_roadmap_manager",
                    "scripts.epic_roadmap_manager.EpicRoadmapManager",
                    "scripts.epic_roadmap_manager.EpicRoadmapManager.show_epic_details"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "start_session",
                  "docstring": "\u041d\u0430\u0447\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043d\u0430\u0434 \u0441\u0435\u0441\u0441\u0438\u0435\u0439",
                  "line_range": [
                    127,
                    189
                  ],
                  "parameters": [
                    "self",
                    "epic_id",
                    "session_id"
                  ],
                  "uid": "scripts.epic_roadmap_manager.EpicRoadmapManager.start_session",
                  "uid_components": [
                    "scripts",
                    "scripts.epic_roadmap_manager",
                    "scripts.epic_roadmap_manager.EpicRoadmapManager",
                    "scripts.epic_roadmap_manager.EpicRoadmapManager.start_session"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "complete_session",
                  "docstring": "\u0417\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e",
                  "line_range": [
                    191,
                    257
                  ],
                  "parameters": [
                    "self",
                    "session_id"
                  ],
                  "uid": "scripts.epic_roadmap_manager.EpicRoadmapManager.complete_session",
                  "uid_components": [
                    "scripts",
                    "scripts.epic_roadmap_manager",
                    "scripts.epic_roadmap_manager.EpicRoadmapManager",
                    "scripts.epic_roadmap_manager.EpicRoadmapManager.complete_session"
                  ],
                  "uid_type": "method"
                }
              ],
              "bases": [],
              "uid": "scripts.epic_roadmap_manager.EpicRoadmapManager",
              "uid_components": [
                "scripts",
                "scripts.epic_roadmap_manager",
                "scripts.epic_roadmap_manager.EpicRoadmapManager"
              ],
              "uid_type": "class"
            }
          ],
          "callgraph": {
            "__init__": [],
            "load_roadmap": [
              "print",
              "json.load",
              "open"
            ],
            "save_roadmap": [
              "json.dump",
              "datetime.now",
              "open",
              "print"
            ],
            "show_overview": [
              "print",
              "epic.get",
              "roadmap.get",
              "stats.get",
              "epics.items",
              "self.load_roadmap"
            ],
            "show_epic_details": [
              "len",
              "print",
              "epic.get",
              "roadmap.get",
              "epic_data.get",
              "session.get",
              "self.load_roadmap"
            ],
            "start_session": [
              "self.save_roadmap",
              "print",
              "os.makedirs",
              "epic.get",
              "open",
              "roadmap.get",
              "datetime.now",
              "epic_data.get",
              "json.dump",
              "sess.get",
              "session.get",
              "self.load_roadmap"
            ],
            "complete_session": [
              "self.save_roadmap",
              "os.remove",
              "current_session.get",
              "sessions_log.append",
              "print",
              "os.makedirs",
              "open",
              "epic.get",
              "all",
              "roadmap.get",
              "json.load",
              "datetime.now",
              "json.dump",
              "sess.get",
              "session.get",
              "self.load_roadmap"
            ],
            "main": [
              "argparse.ArgumentParser",
              "parser.add_argument",
              "print",
              "manager.complete_session",
              "EpicRoadmapManager",
              "parser.parse_args",
              "manager.show_epic_details",
              "manager.start_session",
              "manager.show_overview"
            ]
          },
          "dependencies": [
            "Path",
            "argparse",
            "datetime",
            "json",
            "os",
            "pathlib"
          ],
          "hash": "5125fc24bf131dbbbda814a26f75ecff0e8d6cebde166de88b637ee22ac7251e",
          "uid": "scripts.epic_roadmap_manager",
          "uid_components": [
            "scripts",
            "scripts.epic_roadmap_manager"
          ],
          "uid_type": "module",
          "artifact_id": "dec553d3-c70d-2bbd-b702-a43e5b5bd24a",
          "metrics": {
            "cyclomatic_complexity": 10,
            "lines_of_code": 80,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 6,
            "test_coverage": 0.0,
            "maintainability_index": 50
          },
          "markdown_anchor": {
            "id": "scripts-epic_roadmap_manager",
            "title": "Module: scripts.epic_roadmap_manager",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: scripts.epic_roadmap_manager](#scripts-epic_roadmap_manager)",
            "html_anchor": "<a id=\"scripts-epic_roadmap_manager\"></a>"
          }
        },
        {
          "module_id": "scripts.process_926_items",
          "path": "scripts/process_926_items.py",
          "category": "core",
          "module_doc": "926 Items Processing Script - Updated Implementation\nProcesses items according to GitHub roadmap + personal management vision\nImplements all decisions from 926_items_processing_execution_plan.md",
          "functions": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                16,
                51
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "scripts.process_926_items.__init__",
              "uid_components": [
                "scripts",
                "scripts.process_926_items",
                "scripts.process_926_items.__init__"
              ],
              "uid_type": "function"
            },
            {
              "name": "load_comprehensive_index",
              "docstring": "Load the 926 items from comprehensive index",
              "line_range": [
                53,
                111
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "scripts.process_926_items.load_comprehensive_index",
              "uid_components": [
                "scripts",
                "scripts.process_926_items",
                "scripts.process_926_items.load_comprehensive_index"
              ],
              "uid_type": "function"
            },
            {
              "name": "calculate_confidence_score",
              "docstring": "Calculate confidence score for categorization decision",
              "line_range": [
                113,
                146
              ],
              "parameters": [
                "self",
                "item",
                "category"
              ],
              "decorators": [],
              "uid": "scripts.process_926_items.calculate_confidence_score",
              "uid_components": [
                "scripts",
                "scripts.process_926_items",
                "scripts.process_926_items.calculate_confidence_score"
              ],
              "uid_type": "function"
            },
            {
              "name": "check_t_pot_related",
              "docstring": "Enhanced T-Pot detection",
              "line_range": [
                148,
                155
              ],
              "parameters": [
                "self",
                "item"
              ],
              "decorators": [],
              "uid": "scripts.process_926_items.check_t_pot_related",
              "uid_components": [
                "scripts",
                "scripts.process_926_items",
                "scripts.process_926_items.check_t_pot_related"
              ],
              "uid_type": "function"
            },
            {
              "name": "check_team_implementable",
              "docstring": "Check if team can implement without architecture review",
              "line_range": [
                157,
                176
              ],
              "parameters": [
                "self",
                "item"
              ],
              "decorators": [],
              "uid": "scripts.process_926_items.check_team_implementable",
              "uid_components": [
                "scripts",
                "scripts.process_926_items",
                "scripts.process_926_items.check_team_implementable"
              ],
              "uid_type": "function"
            },
            {
              "name": "check_personal_vs_team_vs_business",
              "docstring": "Classify as personal/team/business",
              "line_range": [
                178,
                214
              ],
              "parameters": [
                "self",
                "item"
              ],
              "decorators": [],
              "uid": "scripts.process_926_items.check_personal_vs_team_vs_business",
              "uid_components": [
                "scripts",
                "scripts.process_926_items",
                "scripts.process_926_items.check_personal_vs_team_vs_business"
              ],
              "uid_type": "function"
            },
            {
              "name": "identify_epic_candidates",
              "docstring": "Identify items that should be grouped into epics",
              "line_range": [
                216,
                233
              ],
              "parameters": [
                "self",
                "items"
              ],
              "decorators": [],
              "uid": "scripts.process_926_items.identify_epic_candidates",
              "uid_components": [
                "scripts",
                "scripts.process_926_items",
                "scripts.process_926_items.identify_epic_candidates"
              ],
              "uid_type": "function"
            },
            {
              "name": "extract_epic_name",
              "docstring": "Extract epic name from item",
              "line_range": [
                235,
                241
              ],
              "parameters": [
                "self",
                "item"
              ],
              "decorators": [],
              "uid": "scripts.process_926_items.extract_epic_name",
              "uid_components": [
                "scripts",
                "scripts.process_926_items",
                "scripts.process_926_items.extract_epic_name"
              ],
              "uid_type": "function"
            },
            {
              "name": "categorize_item",
              "docstring": "Main categorization logic with confidence scoring",
              "line_range": [
                243,
                278
              ],
              "parameters": [
                "self",
                "item"
              ],
              "decorators": [],
              "uid": "scripts.process_926_items.categorize_item",
              "uid_components": [
                "scripts",
                "scripts.process_926_items",
                "scripts.process_926_items.categorize_item"
              ],
              "uid_type": "function"
            },
            {
              "name": "find_duplicates",
              "docstring": "Enhanced duplicate detection with T-Pot special handling",
              "line_range": [
                280,
                319
              ],
              "parameters": [
                "self",
                "items"
              ],
              "decorators": [],
              "uid": "scripts.process_926_items.find_duplicates",
              "uid_components": [
                "scripts",
                "scripts.process_926_items",
                "scripts.process_926_items.find_duplicates"
              ],
              "uid_type": "function"
            },
            {
              "name": "calculate_similarity",
              "docstring": "Enhanced similarity calculation",
              "line_range": [
                321,
                342
              ],
              "parameters": [
                "self",
                "title1",
                "title2"
              ],
              "decorators": [],
              "uid": "scripts.process_926_items.calculate_similarity",
              "uid_components": [
                "scripts",
                "scripts.process_926_items",
                "scripts.process_926_items.calculate_similarity"
              ],
              "uid_type": "function"
            },
            {
              "name": "suggest_merge_strategy",
              "docstring": "Enhanced merge strategy with T-Pot consideration",
              "line_range": [
                344,
                359
              ],
              "parameters": [
                "self",
                "item1",
                "item2"
              ],
              "decorators": [],
              "uid": "scripts.process_926_items.suggest_merge_strategy",
              "uid_components": [
                "scripts",
                "scripts.process_926_items",
                "scripts.process_926_items.suggest_merge_strategy"
              ],
              "uid_type": "function"
            },
            {
              "name": "process_items",
              "docstring": "Main processing workflow implementing execution plan",
              "line_range": [
                361,
                468
              ],
              "parameters": [
                "self",
                "items"
              ],
              "decorators": [],
              "uid": "scripts.process_926_items.process_items",
              "uid_components": [
                "scripts",
                "scripts.process_926_items",
                "scripts.process_926_items.process_items"
              ],
              "uid_type": "function"
            },
            {
              "name": "save_results",
              "docstring": "Save categorized results with enhanced metadata",
              "line_range": [
                470,
                546
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "scripts.process_926_items.save_results",
              "uid_components": [
                "scripts",
                "scripts.process_926_items",
                "scripts.process_926_items.save_results"
              ],
              "uid_type": "function"
            },
            {
              "name": "get_category_description",
              "docstring": "Category descriptions per execution plan",
              "line_range": [
                548,
                562
              ],
              "parameters": [
                "self",
                "category"
              ],
              "decorators": [],
              "uid": "scripts.process_926_items.get_category_description",
              "uid_components": [
                "scripts",
                "scripts.process_926_items",
                "scripts.process_926_items.get_category_description"
              ],
              "uid_type": "function"
            },
            {
              "name": "run",
              "docstring": "Main execution workflow per execution plan",
              "line_range": [
                564,
                606
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "scripts.process_926_items.run",
              "uid_components": [
                "scripts",
                "scripts.process_926_items",
                "scripts.process_926_items.run"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [
            {
              "name": "TaskProcessor926",
              "docstring": "",
              "line_range": [
                15,
                606
              ],
              "methods": [
                {
                  "name": "__init__",
                  "docstring": "",
                  "line_range": [
                    16,
                    51
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "scripts.process_926_items.TaskProcessor926.__init__",
                  "uid_components": [
                    "scripts",
                    "scripts.process_926_items",
                    "scripts.process_926_items.TaskProcessor926",
                    "scripts.process_926_items.TaskProcessor926.__init__"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "load_comprehensive_index",
                  "docstring": "Load the 926 items from comprehensive index",
                  "line_range": [
                    53,
                    111
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "scripts.process_926_items.TaskProcessor926.load_comprehensive_index",
                  "uid_components": [
                    "scripts",
                    "scripts.process_926_items",
                    "scripts.process_926_items.TaskProcessor926",
                    "scripts.process_926_items.TaskProcessor926.load_comprehensive_index"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "calculate_confidence_score",
                  "docstring": "Calculate confidence score for categorization decision",
                  "line_range": [
                    113,
                    146
                  ],
                  "parameters": [
                    "self",
                    "item",
                    "category"
                  ],
                  "uid": "scripts.process_926_items.TaskProcessor926.calculate_confidence_score",
                  "uid_components": [
                    "scripts",
                    "scripts.process_926_items",
                    "scripts.process_926_items.TaskProcessor926",
                    "scripts.process_926_items.TaskProcessor926.calculate_confidence_score"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "check_t_pot_related",
                  "docstring": "Enhanced T-Pot detection",
                  "line_range": [
                    148,
                    155
                  ],
                  "parameters": [
                    "self",
                    "item"
                  ],
                  "uid": "scripts.process_926_items.TaskProcessor926.check_t_pot_related",
                  "uid_components": [
                    "scripts",
                    "scripts.process_926_items",
                    "scripts.process_926_items.TaskProcessor926",
                    "scripts.process_926_items.TaskProcessor926.check_t_pot_related"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "check_team_implementable",
                  "docstring": "Check if team can implement without architecture review",
                  "line_range": [
                    157,
                    176
                  ],
                  "parameters": [
                    "self",
                    "item"
                  ],
                  "uid": "scripts.process_926_items.TaskProcessor926.check_team_implementable",
                  "uid_components": [
                    "scripts",
                    "scripts.process_926_items",
                    "scripts.process_926_items.TaskProcessor926",
                    "scripts.process_926_items.TaskProcessor926.check_team_implementable"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "check_personal_vs_team_vs_business",
                  "docstring": "Classify as personal/team/business",
                  "line_range": [
                    178,
                    214
                  ],
                  "parameters": [
                    "self",
                    "item"
                  ],
                  "uid": "scripts.process_926_items.TaskProcessor926.check_personal_vs_team_vs_business",
                  "uid_components": [
                    "scripts",
                    "scripts.process_926_items",
                    "scripts.process_926_items.TaskProcessor926",
                    "scripts.process_926_items.TaskProcessor926.check_personal_vs_team_vs_business"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "identify_epic_candidates",
                  "docstring": "Identify items that should be grouped into epics",
                  "line_range": [
                    216,
                    233
                  ],
                  "parameters": [
                    "self",
                    "items"
                  ],
                  "uid": "scripts.process_926_items.TaskProcessor926.identify_epic_candidates",
                  "uid_components": [
                    "scripts",
                    "scripts.process_926_items",
                    "scripts.process_926_items.TaskProcessor926",
                    "scripts.process_926_items.TaskProcessor926.identify_epic_candidates"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "extract_epic_name",
                  "docstring": "Extract epic name from item",
                  "line_range": [
                    235,
                    241
                  ],
                  "parameters": [
                    "self",
                    "item"
                  ],
                  "uid": "scripts.process_926_items.TaskProcessor926.extract_epic_name",
                  "uid_components": [
                    "scripts",
                    "scripts.process_926_items",
                    "scripts.process_926_items.TaskProcessor926",
                    "scripts.process_926_items.TaskProcessor926.extract_epic_name"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "categorize_item",
                  "docstring": "Main categorization logic with confidence scoring",
                  "line_range": [
                    243,
                    278
                  ],
                  "parameters": [
                    "self",
                    "item"
                  ],
                  "uid": "scripts.process_926_items.TaskProcessor926.categorize_item",
                  "uid_components": [
                    "scripts",
                    "scripts.process_926_items",
                    "scripts.process_926_items.TaskProcessor926",
                    "scripts.process_926_items.TaskProcessor926.categorize_item"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "find_duplicates",
                  "docstring": "Enhanced duplicate detection with T-Pot special handling",
                  "line_range": [
                    280,
                    319
                  ],
                  "parameters": [
                    "self",
                    "items"
                  ],
                  "uid": "scripts.process_926_items.TaskProcessor926.find_duplicates",
                  "uid_components": [
                    "scripts",
                    "scripts.process_926_items",
                    "scripts.process_926_items.TaskProcessor926",
                    "scripts.process_926_items.TaskProcessor926.find_duplicates"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "calculate_similarity",
                  "docstring": "Enhanced similarity calculation",
                  "line_range": [
                    321,
                    342
                  ],
                  "parameters": [
                    "self",
                    "title1",
                    "title2"
                  ],
                  "uid": "scripts.process_926_items.TaskProcessor926.calculate_similarity",
                  "uid_components": [
                    "scripts",
                    "scripts.process_926_items",
                    "scripts.process_926_items.TaskProcessor926",
                    "scripts.process_926_items.TaskProcessor926.calculate_similarity"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "suggest_merge_strategy",
                  "docstring": "Enhanced merge strategy with T-Pot consideration",
                  "line_range": [
                    344,
                    359
                  ],
                  "parameters": [
                    "self",
                    "item1",
                    "item2"
                  ],
                  "uid": "scripts.process_926_items.TaskProcessor926.suggest_merge_strategy",
                  "uid_components": [
                    "scripts",
                    "scripts.process_926_items",
                    "scripts.process_926_items.TaskProcessor926",
                    "scripts.process_926_items.TaskProcessor926.suggest_merge_strategy"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "process_items",
                  "docstring": "Main processing workflow implementing execution plan",
                  "line_range": [
                    361,
                    468
                  ],
                  "parameters": [
                    "self",
                    "items"
                  ],
                  "uid": "scripts.process_926_items.TaskProcessor926.process_items",
                  "uid_components": [
                    "scripts",
                    "scripts.process_926_items",
                    "scripts.process_926_items.TaskProcessor926",
                    "scripts.process_926_items.TaskProcessor926.process_items"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "save_results",
                  "docstring": "Save categorized results with enhanced metadata",
                  "line_range": [
                    470,
                    546
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "scripts.process_926_items.TaskProcessor926.save_results",
                  "uid_components": [
                    "scripts",
                    "scripts.process_926_items",
                    "scripts.process_926_items.TaskProcessor926",
                    "scripts.process_926_items.TaskProcessor926.save_results"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "get_category_description",
                  "docstring": "Category descriptions per execution plan",
                  "line_range": [
                    548,
                    562
                  ],
                  "parameters": [
                    "self",
                    "category"
                  ],
                  "uid": "scripts.process_926_items.TaskProcessor926.get_category_description",
                  "uid_components": [
                    "scripts",
                    "scripts.process_926_items",
                    "scripts.process_926_items.TaskProcessor926",
                    "scripts.process_926_items.TaskProcessor926.get_category_description"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "run",
                  "docstring": "Main execution workflow per execution plan",
                  "line_range": [
                    564,
                    606
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "scripts.process_926_items.TaskProcessor926.run",
                  "uid_components": [
                    "scripts",
                    "scripts.process_926_items",
                    "scripts.process_926_items.TaskProcessor926",
                    "scripts.process_926_items.TaskProcessor926.run"
                  ],
                  "uid_type": "method"
                }
              ],
              "bases": [],
              "uid": "scripts.process_926_items.TaskProcessor926",
              "uid_components": [
                "scripts",
                "scripts.process_926_items",
                "scripts.process_926_items.TaskProcessor926"
              ],
              "uid_type": "class"
            }
          ],
          "callgraph": {
            "__init__": [
              "datetime.now",
              "Path"
            ],
            "load_comprehensive_index": [
              "value.items",
              "len",
              "hash",
              "print",
              "isinstance",
              "open",
              "item_content.lower",
              "json.load",
              "index_path.exists",
              "seen_items.add",
              "unique_items.append",
              "str",
              "items.append",
              "item.get",
              "data.items",
              "any",
              "items.extend",
              "set"
            ],
            "calculate_confidence_score": [
              "min",
              "self.check_t_pot_related",
              "sum",
              "str",
              "item.get"
            ],
            "check_t_pot_related": [
              "str",
              "any"
            ],
            "check_team_implementable": [
              "str",
              "sum"
            ],
            "check_personal_vs_team_vs_business": [
              "str",
              "item.get",
              "max",
              "sum"
            ],
            "identify_epic_candidates": [
              "len",
              "self.extract_epic_name",
              "epic_groups.items",
              "str",
              "item.get",
              "any"
            ],
            "extract_epic_name": [
              "item.get",
              "title.split"
            ],
            "categorize_item": [
              "self.calculate_confidence_score",
              "self.check_team_implementable",
              "self.check_personal_vs_team_vs_business",
              "self.check_t_pot_related",
              "str",
              "any"
            ],
            "find_duplicates": [
              "duplicates.append",
              "self.suggest_merge_strategy",
              "self.calculate_similarity",
              "self.check_t_pot_related",
              "item.get",
              "seen_items.items"
            ],
            "calculate_similarity": [
              "len",
              "min",
              "title2.split",
              "title1.split",
              "words1.intersection",
              "words1.union",
              "set"
            ],
            "suggest_merge_strategy": [
              "item1.get",
              "item2.get",
              "len",
              "self.check_t_pot_related",
              "str"
            ],
            "process_items": [
              "self.categorize_item",
              "len",
              "low_confidence_items.append",
              "print",
              "self.extract_epic_name",
              "self.check_team_implementable",
              "processed_item.copy",
              "datetime.now",
              "str",
              "duplicate_item_ids.add",
              "self.check_t_pot_related",
              "self.find_duplicates",
              "category.startswith",
              "id",
              "any",
              "set"
            ],
            "save_results": [
              "len",
              "print",
              "open",
              "datetime.now",
              "sum",
              "self.get_category_description",
              "json.dump",
              "item.get"
            ],
            "get_category_description": [
              "descriptions.get"
            ],
            "run": [
              "self.save_results",
              "print",
              "self.process_items",
              "self.load_comprehensive_index"
            ]
          },
          "dependencies": [
            "Any",
            "Dict",
            "List",
            "Path",
            "Tuple",
            "datetime",
            "json",
            "os",
            "pathlib",
            "re",
            "typing"
          ],
          "hash": "75943c116813d77b47300deeaeadb26b7ccd4a37912497bdb82871198feedcf5",
          "uid": "scripts.process_926_items",
          "uid_components": [
            "scripts",
            "scripts.process_926_items"
          ],
          "uid_type": "module",
          "artifact_id": "e640a8aa-7f4d-2248-f2d9-103fa9ea1e6b",
          "metrics": {
            "cyclomatic_complexity": 18,
            "lines_of_code": 160,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 11,
            "test_coverage": 0.0,
            "maintainability_index": 10
          },
          "markdown_anchor": {
            "id": "scripts-process_926_items",
            "title": "Module: scripts.process_926_items",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: scripts.process_926_items](#scripts-process_926_items)",
            "html_anchor": "<a id=\"scripts-process_926_items\"></a>"
          }
        },
        {
          "module_id": "scripts.session_cli",
          "path": "scripts/session_cli.py",
          "category": "core",
          "module_doc": "Session Management CLI\nAutomates session tracking, worklog updates, and session switching for llmstruct.\nPart of the comprehensive session management system.",
          "functions": [
            {
              "name": "get_current_branch",
              "docstring": "Get current git branch.",
              "line_range": [
                24,
                31
              ],
              "parameters": [],
              "decorators": [],
              "uid": "scripts.session_cli.get_current_branch",
              "uid_components": [
                "scripts",
                "scripts.session_cli",
                "scripts.session_cli.get_current_branch"
              ],
              "uid_type": "function"
            },
            {
              "name": "load_json_file",
              "docstring": "Load JSON file with error handling.",
              "line_range": [
                33,
                40
              ],
              "parameters": [
                "file_path"
              ],
              "decorators": [],
              "uid": "scripts.session_cli.load_json_file",
              "uid_components": [
                "scripts",
                "scripts.session_cli",
                "scripts.session_cli.load_json_file"
              ],
              "uid_type": "function"
            },
            {
              "name": "save_json_file",
              "docstring": "Save JSON file with error handling.",
              "line_range": [
                42,
                51
              ],
              "parameters": [
                "file_path",
                "data"
              ],
              "decorators": [],
              "uid": "scripts.session_cli.save_json_file",
              "uid_components": [
                "scripts",
                "scripts.session_cli",
                "scripts.session_cli.save_json_file"
              ],
              "uid_type": "function"
            },
            {
              "name": "get_current_timestamp",
              "docstring": "Get current timestamp in ISO format.",
              "line_range": [
                53,
                55
              ],
              "parameters": [],
              "decorators": [],
              "uid": "scripts.session_cli.get_current_timestamp",
              "uid_components": [
                "scripts",
                "scripts.session_cli",
                "scripts.session_cli.get_current_timestamp"
              ],
              "uid_type": "function"
            },
            {
              "name": "log_event",
              "docstring": "Log an event to worklog.json.",
              "line_range": [
                57,
                88
              ],
              "parameters": [
                "event_message",
                "author"
              ],
              "decorators": [],
              "uid": "scripts.session_cli.log_event",
              "uid_components": [
                "scripts",
                "scripts.session_cli",
                "scripts.session_cli.log_event"
              ],
              "uid_type": "function"
            },
            {
              "name": "switch_session",
              "docstring": "Switch to a different session or create new one.",
              "line_range": [
                90,
                141
              ],
              "parameters": [
                "session_id"
              ],
              "decorators": [],
              "uid": "scripts.session_cli.switch_session",
              "uid_components": [
                "scripts",
                "scripts.session_cli",
                "scripts.session_cli.switch_session"
              ],
              "uid_type": "function"
            },
            {
              "name": "list_sessions",
              "docstring": "List all available sessions.",
              "line_range": [
                143,
                166
              ],
              "parameters": [],
              "decorators": [],
              "uid": "scripts.session_cli.list_sessions",
              "uid_components": [
                "scripts",
                "scripts.session_cli",
                "scripts.session_cli.list_sessions"
              ],
              "uid_type": "function"
            },
            {
              "name": "show_current_session",
              "docstring": "Show current session details.",
              "line_range": [
                168,
                183
              ],
              "parameters": [],
              "decorators": [],
              "uid": "scripts.session_cli.show_current_session",
              "uid_components": [
                "scripts",
                "scripts.session_cli",
                "scripts.session_cli.show_current_session"
              ],
              "uid_type": "function"
            },
            {
              "name": "show_worklog",
              "docstring": "Show recent worklog entries.",
              "line_range": [
                185,
                203
              ],
              "parameters": [
                "limit"
              ],
              "decorators": [],
              "uid": "scripts.session_cli.show_worklog",
              "uid_components": [
                "scripts",
                "scripts.session_cli",
                "scripts.session_cli.show_worklog"
              ],
              "uid_type": "function"
            },
            {
              "name": "main",
              "docstring": "Main CLI interface.",
              "line_range": [
                205,
                244
              ],
              "parameters": [],
              "decorators": [],
              "uid": "scripts.session_cli.main",
              "uid_components": [
                "scripts",
                "scripts.session_cli",
                "scripts.session_cli.main"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [
            {
              "name": "Colors",
              "docstring": "",
              "line_range": [
                16,
                22
              ],
              "methods": [],
              "bases": [],
              "uid": "scripts.session_cli.Colors",
              "uid_components": [
                "scripts",
                "scripts.session_cli",
                "scripts.session_cli.Colors"
              ],
              "uid_type": "class"
            }
          ],
          "callgraph": {
            "get_current_branch": [
              "subprocess.run"
            ],
            "load_json_file": [
              "json.load",
              "open",
              "print"
            ],
            "save_json_file": [
              "os.makedirs",
              "json.dump",
              "open",
              "print"
            ],
            "get_current_timestamp": [
              "datetime.now"
            ],
            "log_event": [
              "load_json_file",
              "current_session.get",
              "get_current_branch",
              "get_current_timestamp",
              "print",
              "save_json_file"
            ],
            "switch_session": [
              "load_json_file",
              "get_current_branch",
              "get_current_timestamp",
              "print",
              "save_json_file",
              "log_event"
            ],
            "list_sessions": [
              "print",
              "load_json_file",
              "current_session.get"
            ],
            "show_current_session": [
              "print",
              "load_json_file",
              "current_session.get"
            ],
            "show_worklog": [
              "print",
              "load_json_file",
              "len",
              "reversed"
            ],
            "main": [
              "switch_session",
              "len",
              "print",
              "show_current_session",
              "list_sessions",
              "int",
              "show_worklog",
              "log_event"
            ]
          },
          "dependencies": [
            "Path",
            "datetime",
            "json",
            "os",
            "pathlib",
            "subprocess",
            "sys"
          ],
          "hash": "23aca9a658e60715b7fa3e4a009c3de7baebdd1eca3acae17d87938ae622cc41",
          "uid": "scripts.session_cli",
          "uid_components": [
            "scripts",
            "scripts.session_cli"
          ],
          "uid_type": "module",
          "artifact_id": "53361e7e-713f-da83-9c65-be933b6c6ba5",
          "metrics": {
            "cyclomatic_complexity": 12,
            "lines_of_code": 100,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 7,
            "test_coverage": 0.0,
            "maintainability_index": 40
          },
          "markdown_anchor": {
            "id": "scripts-session_cli",
            "title": "Module: scripts.session_cli",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: scripts.session_cli](#scripts-session_cli)",
            "html_anchor": "<a id=\"scripts-session_cli\"></a>"
          }
        },
        {
          "module_id": "scripts.validate_epics",
          "path": "scripts/validate_epics.py",
          "category": "core",
          "module_doc": "Epic Data Validator\n\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0445 \u044d\u043f\u0438\u043a\u043e\u0432 \u043f\u0435\u0440\u0435\u0434 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435\u043c GitHub issues",
          "functions": [
            {
              "name": "validate_epic_structure",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u044d\u043f\u0438\u043a\u0430",
              "line_range": [
                12,
                35
              ],
              "parameters": [
                "epic"
              ],
              "decorators": [],
              "uid": "scripts.validate_epics.validate_epic_structure",
              "uid_components": [
                "scripts",
                "scripts.validate_epics",
                "scripts.validate_epics.validate_epic_structure"
              ],
              "uid_type": "function"
            },
            {
              "name": "validate_task_structure",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0437\u0430\u0434\u0430\u0447\u0438",
              "line_range": [
                37,
                53
              ],
              "parameters": [
                "task",
                "epic_id"
              ],
              "decorators": [],
              "uid": "scripts.validate_epics.validate_task_structure",
              "uid_components": [
                "scripts",
                "scripts.validate_epics",
                "scripts.validate_epics.validate_task_structure"
              ],
              "uid_type": "function"
            },
            {
              "name": "validate_priorities",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043e\u0432",
              "line_range": [
                55,
                68
              ],
              "parameters": [
                "data"
              ],
              "decorators": [],
              "uid": "scripts.validate_epics.validate_priorities",
              "uid_components": [
                "scripts",
                "scripts.validate_epics",
                "scripts.validate_epics.validate_priorities"
              ],
              "uid_type": "function"
            },
            {
              "name": "validate_task_ids",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c ID \u0437\u0430\u0434\u0430\u0447",
              "line_range": [
                70,
                82
              ],
              "parameters": [
                "data"
              ],
              "decorators": [],
              "uid": "scripts.validate_epics.validate_task_ids",
              "uid_components": [
                "scripts",
                "scripts.validate_epics",
                "scripts.validate_epics.validate_task_ids"
              ],
              "uid_type": "function"
            },
            {
              "name": "main",
              "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438",
              "line_range": [
                84,
                131
              ],
              "parameters": [],
              "decorators": [],
              "uid": "scripts.validate_epics.main",
              "uid_components": [
                "scripts",
                "scripts.validate_epics",
                "scripts.validate_epics.main"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [],
          "callgraph": {
            "validate_epic_structure": [
              "errors.append",
              "isinstance"
            ],
            "validate_task_structure": [
              "errors.append",
              "isinstance",
              "task.get"
            ],
            "validate_priorities": [
              "errors.append",
              "epic.get",
              "data.get",
              "task.get"
            ],
            "validate_task_ids": [
              "data.get",
              "epic.get",
              "task.get",
              "errors.append",
              "seen_ids.add",
              "set"
            ],
            "main": [
              "e.get",
              "len",
              "validate_epic_structure",
              "print",
              "isinstance",
              "open",
              "all_errors.extend",
              "epics_file.exists",
              "epic.get",
              "Path",
              "validate_task_structure",
              "json.load",
              "validate_priorities",
              "validate_task_ids",
              "sum",
              "all_errors.append",
              "sys.exit"
            ]
          },
          "dependencies": [
            "Any",
            "Dict",
            "List",
            "Path",
            "json",
            "pathlib",
            "sys",
            "typing"
          ],
          "hash": "43fb177eab31592c2b7c17c990f728cb1401eeba26a2e3191857ca218208a3df",
          "uid": "scripts.validate_epics",
          "uid_components": [
            "scripts",
            "scripts.validate_epics"
          ],
          "uid_type": "module",
          "artifact_id": "921b7ee9-8f4e-93e6-b17d-b8da7f76c5a6",
          "metrics": {
            "cyclomatic_complexity": 5,
            "lines_of_code": 50,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 8,
            "test_coverage": 0.0,
            "maintainability_index": 75
          },
          "markdown_anchor": {
            "id": "scripts-validate_epics",
            "title": "Module: scripts.validate_epics",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: scripts.validate_epics](#scripts-validate_epics)",
            "html_anchor": "<a id=\"scripts-validate_epics\"></a>"
          }
        },
        {
          "module_id": "scripts.export_to_github_projects",
          "path": "scripts/export_to_github_projects.py",
          "category": "core",
          "module_doc": "Export script for GitHub Projects integration\nConverts official tasks.json and ideas.json to GitHub Project cards",
          "functions": [
            {
              "name": "main",
              "docstring": "",
              "line_range": [
                183,
                266
              ],
              "parameters": [],
              "decorators": [],
              "uid": "scripts.export_to_github_projects.main",
              "uid_components": [
                "scripts",
                "scripts.export_to_github_projects",
                "scripts.export_to_github_projects.main"
              ],
              "uid_type": "function"
            },
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                23,
                26
              ],
              "parameters": [
                "self",
                "config_path",
                "dry_run"
              ],
              "decorators": [],
              "uid": "scripts.export_to_github_projects.__init__",
              "uid_components": [
                "scripts",
                "scripts.export_to_github_projects",
                "scripts.export_to_github_projects.__init__"
              ],
              "uid_type": "function"
            },
            {
              "name": "check_github_cli",
              "docstring": "Check if GitHub CLI is installed and authenticated",
              "line_range": [
                28,
                36
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "scripts.export_to_github_projects.check_github_cli",
              "uid_components": [
                "scripts",
                "scripts.export_to_github_projects",
                "scripts.export_to_github_projects.check_github_cli"
              ],
              "uid_type": "function"
            },
            {
              "name": "list_projects",
              "docstring": "List available GitHub Projects (via gh-projects extension)",
              "line_range": [
                38,
                55
              ],
              "parameters": [
                "self",
                "owner",
                "repo"
              ],
              "decorators": [],
              "uid": "scripts.export_to_github_projects.list_projects",
              "uid_components": [
                "scripts",
                "scripts.export_to_github_projects",
                "scripts.export_to_github_projects.list_projects"
              ],
              "uid_type": "function"
            },
            {
              "name": "create_project_item",
              "docstring": "Create a new item in GitHub Project (via gh-projects extension)\nTODO: \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 GraphQL API \u0438\u043b\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c",
              "line_range": [
                57,
                82
              ],
              "parameters": [
                "self",
                "project_number",
                "title",
                "body",
                "owner",
                "repo"
              ],
              "decorators": [],
              "uid": "scripts.export_to_github_projects.create_project_item",
              "uid_components": [
                "scripts",
                "scripts.export_to_github_projects",
                "scripts.export_to_github_projects.create_project_item"
              ],
              "uid_type": "function"
            },
            {
              "name": "export_tasks_to_project",
              "docstring": "Export tasks to GitHub Project",
              "line_range": [
                84,
                123
              ],
              "parameters": [
                "self",
                "tasks",
                "project_number",
                "owner",
                "repo"
              ],
              "decorators": [],
              "uid": "scripts.export_to_github_projects.export_tasks_to_project",
              "uid_components": [
                "scripts",
                "scripts.export_to_github_projects",
                "scripts.export_to_github_projects.export_tasks_to_project"
              ],
              "uid_type": "function"
            },
            {
              "name": "export_ideas_to_project",
              "docstring": "Export ideas to GitHub Project",
              "line_range": [
                125,
                164
              ],
              "parameters": [
                "self",
                "ideas",
                "project_number",
                "owner",
                "repo"
              ],
              "decorators": [],
              "uid": "scripts.export_to_github_projects.export_ideas_to_project",
              "uid_components": [
                "scripts",
                "scripts.export_to_github_projects",
                "scripts.export_to_github_projects.export_ideas_to_project"
              ],
              "uid_type": "function"
            },
            {
              "name": "filter_data",
              "docstring": "Filter data by status and priority",
              "line_range": [
                166,
                180
              ],
              "parameters": [
                "self",
                "data",
                "status_filter",
                "priority_filter"
              ],
              "decorators": [],
              "uid": "scripts.export_to_github_projects.filter_data",
              "uid_components": [
                "scripts",
                "scripts.export_to_github_projects",
                "scripts.export_to_github_projects.filter_data"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [
            {
              "name": "GitHubProjectsExportScript",
              "docstring": "Extended exporter with command-line interface and GitHub CLI integration",
              "line_range": [
                20,
                180
              ],
              "methods": [
                {
                  "name": "__init__",
                  "docstring": "",
                  "line_range": [
                    23,
                    26
                  ],
                  "parameters": [
                    "self",
                    "config_path",
                    "dry_run"
                  ],
                  "uid": "scripts.export_to_github_projects.GitHubProjectsExportScript.__init__",
                  "uid_components": [
                    "scripts",
                    "scripts.export_to_github_projects",
                    "scripts.export_to_github_projects.GitHubProjectsExportScript",
                    "scripts.export_to_github_projects.GitHubProjectsExportScript.__init__"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "check_github_cli",
                  "docstring": "Check if GitHub CLI is installed and authenticated",
                  "line_range": [
                    28,
                    36
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "scripts.export_to_github_projects.GitHubProjectsExportScript.check_github_cli",
                  "uid_components": [
                    "scripts",
                    "scripts.export_to_github_projects",
                    "scripts.export_to_github_projects.GitHubProjectsExportScript",
                    "scripts.export_to_github_projects.GitHubProjectsExportScript.check_github_cli"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "list_projects",
                  "docstring": "List available GitHub Projects (via gh-projects extension)",
                  "line_range": [
                    38,
                    55
                  ],
                  "parameters": [
                    "self",
                    "owner",
                    "repo"
                  ],
                  "uid": "scripts.export_to_github_projects.GitHubProjectsExportScript.list_projects",
                  "uid_components": [
                    "scripts",
                    "scripts.export_to_github_projects",
                    "scripts.export_to_github_projects.GitHubProjectsExportScript",
                    "scripts.export_to_github_projects.GitHubProjectsExportScript.list_projects"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "create_project_item",
                  "docstring": "Create a new item in GitHub Project (via gh-projects extension)\nTODO: \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 GraphQL API \u0438\u043b\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c",
                  "line_range": [
                    57,
                    82
                  ],
                  "parameters": [
                    "self",
                    "project_number",
                    "title",
                    "body",
                    "owner",
                    "repo"
                  ],
                  "uid": "scripts.export_to_github_projects.GitHubProjectsExportScript.create_project_item",
                  "uid_components": [
                    "scripts",
                    "scripts.export_to_github_projects",
                    "scripts.export_to_github_projects.GitHubProjectsExportScript",
                    "scripts.export_to_github_projects.GitHubProjectsExportScript.create_project_item"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "export_tasks_to_project",
                  "docstring": "Export tasks to GitHub Project",
                  "line_range": [
                    84,
                    123
                  ],
                  "parameters": [
                    "self",
                    "tasks",
                    "project_number",
                    "owner",
                    "repo"
                  ],
                  "uid": "scripts.export_to_github_projects.GitHubProjectsExportScript.export_tasks_to_project",
                  "uid_components": [
                    "scripts",
                    "scripts.export_to_github_projects",
                    "scripts.export_to_github_projects.GitHubProjectsExportScript",
                    "scripts.export_to_github_projects.GitHubProjectsExportScript.export_tasks_to_project"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "export_ideas_to_project",
                  "docstring": "Export ideas to GitHub Project",
                  "line_range": [
                    125,
                    164
                  ],
                  "parameters": [
                    "self",
                    "ideas",
                    "project_number",
                    "owner",
                    "repo"
                  ],
                  "uid": "scripts.export_to_github_projects.GitHubProjectsExportScript.export_ideas_to_project",
                  "uid_components": [
                    "scripts",
                    "scripts.export_to_github_projects",
                    "scripts.export_to_github_projects.GitHubProjectsExportScript",
                    "scripts.export_to_github_projects.GitHubProjectsExportScript.export_ideas_to_project"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "filter_data",
                  "docstring": "Filter data by status and priority",
                  "line_range": [
                    166,
                    180
                  ],
                  "parameters": [
                    "self",
                    "data",
                    "status_filter",
                    "priority_filter"
                  ],
                  "uid": "scripts.export_to_github_projects.GitHubProjectsExportScript.filter_data",
                  "uid_components": [
                    "scripts",
                    "scripts.export_to_github_projects",
                    "scripts.export_to_github_projects.GitHubProjectsExportScript",
                    "scripts.export_to_github_projects.GitHubProjectsExportScript.filter_data"
                  ],
                  "uid_type": "method"
                }
              ],
              "bases": [
                "GitHubProjectsExporter"
              ],
              "uid": "scripts.export_to_github_projects.GitHubProjectsExportScript",
              "uid_components": [
                "scripts",
                "scripts.export_to_github_projects",
                "scripts.export_to_github_projects.GitHubProjectsExportScript"
              ],
              "uid_type": "class"
            }
          ],
          "callgraph": {
            "__init__": [
              "super"
            ],
            "check_github_cli": [
              "print",
              "self._run_gh_command"
            ],
            "list_projects": [
              "json.loads",
              "print",
              "isinstance",
              "self._run_gh_command"
            ],
            "create_project_item": [
              "str",
              "print",
              "self._run_gh_command",
              "output.strip"
            ],
            "export_tasks_to_project": [
              "len",
              "print",
              "task.get",
              "self.create_project_item",
              "self.format_task_for_github"
            ],
            "export_ideas_to_project": [
              "len",
              "print",
              "self.format_idea_for_github",
              "self.create_project_item",
              "idea.get"
            ],
            "filter_data": [
              "item.get"
            ],
            "main": [
              "exporter.check_github_cli",
              "argparse.ArgumentParser",
              "parser.add_argument",
              "print",
              "exporter.load_official_data",
              "exporter._save_mapping",
              "parser.parse_args",
              "exporter.export_tasks_to_project",
              "GitHubProjectsExportScript",
              "exporter.filter_data",
              "exporter.export_ideas_to_project",
              "sys.exit"
            ]
          },
          "dependencies": [
            "Any",
            "Dict",
            "GitHubProjectsExporter",
            "List",
            "Optional",
            "Path",
            "Tuple",
            "argparse",
            "datetime",
            "json",
            "llmstruct.gh_view",
            "pathlib",
            "subprocess",
            "sys",
            "typing"
          ],
          "hash": "b6b4f700d8fed14e918455d59e88d15bc3259556aad468ee3c3ea4816d710f2a",
          "uid": "scripts.export_to_github_projects",
          "uid_components": [
            "scripts",
            "scripts.export_to_github_projects"
          ],
          "uid_type": "module",
          "artifact_id": "7e970950-eb71-e9ac-4bdd-4ef4f550cf0e",
          "metrics": {
            "cyclomatic_complexity": 10,
            "lines_of_code": 80,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 15,
            "test_coverage": 0.0,
            "maintainability_index": 50
          },
          "markdown_anchor": {
            "id": "scripts-export_to_github_projects",
            "title": "Module: scripts.export_to_github_projects",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: scripts.export_to_github_projects](#scripts-export_to_github_projects)",
            "html_anchor": "<a id=\"scripts-export_to_github_projects\"></a>"
          }
        },
        {
          "module_id": "scripts.validate_json",
          "path": "scripts/validate_json.py",
          "category": "core",
          "module_doc": "JSON Validation Script\nValidates JSON files against their respective schemas.",
          "functions": [
            {
              "name": "load_json",
              "docstring": "Load JSON file with error handling.",
              "line_range": [
                13,
                23
              ],
              "parameters": [
                "file_path"
              ],
              "decorators": [],
              "uid": "scripts.validate_json.load_json",
              "uid_components": [
                "scripts",
                "scripts.validate_json",
                "scripts.validate_json.load_json"
              ],
              "uid_type": "function"
            },
            {
              "name": "validate_json",
              "docstring": "Validate a JSON file against a schema.",
              "line_range": [
                26,
                49
              ],
              "parameters": [
                "file_path",
                "schema_path"
              ],
              "decorators": [],
              "uid": "scripts.validate_json.validate_json",
              "uid_components": [
                "scripts",
                "scripts.validate_json",
                "scripts.validate_json.validate_json"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [],
          "callgraph": {
            "load_json": [
              "json.load",
              "open",
              "print"
            ],
            "validate_json": [
              "Draft7Validator",
              "validator.validate",
              "print",
              "Path",
              "load_json",
              "str"
            ]
          },
          "dependencies": [
            "Draft7Validator",
            "Path",
            "ValidationError",
            "json",
            "jsonschema",
            "pathlib",
            "sys",
            "validate"
          ],
          "hash": "0d360b788079e8804f864e0cef5eb33006fb4dbae00eaaea95ef0d692e79640d",
          "uid": "scripts.validate_json",
          "uid_components": [
            "scripts",
            "scripts.validate_json"
          ],
          "uid_type": "module",
          "artifact_id": "67cc7277-2213-b604-eec5-96bfd9260be1",
          "metrics": {
            "cyclomatic_complexity": 2,
            "lines_of_code": 20,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 8,
            "test_coverage": 0.0,
            "maintainability_index": 90
          },
          "markdown_anchor": {
            "id": "scripts-validate_json",
            "title": "Module: scripts.validate_json",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: scripts.validate_json](#scripts-validate_json)",
            "html_anchor": "<a id=\"scripts-validate_json\"></a>"
          }
        },
        {
          "module_id": "scripts.create_comprehensive_index",
          "path": "scripts/create_comprehensive_index.py",
          "category": "core",
          "module_doc": "Comprehensive Project Index Creator\nScans ALL project directories for tasks, ideas, sessions, and concepts.\nProvides complete visibility into project state and unaccounted innovations.",
          "functions": [
            {
              "name": "main",
              "docstring": "Main execution function.",
              "line_range": [
                714,
                735
              ],
              "parameters": [],
              "decorators": [],
              "uid": "scripts.create_comprehensive_index.main",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.main"
              ],
              "uid_type": "function"
            },
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                45,
                58
              ],
              "parameters": [
                "self",
                "project_root"
              ],
              "decorators": [],
              "uid": "scripts.create_comprehensive_index.__init__",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.__init__"
              ],
              "uid_type": "function"
            },
            {
              "name": "_init_patterns",
              "docstring": "Initialize comprehensive extraction patterns.",
              "line_range": [
                60,
                92
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "scripts.create_comprehensive_index._init_patterns",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index._init_patterns"
              ],
              "uid_type": "function"
            },
            {
              "name": "scan_all_directories",
              "docstring": "Scan all configured directories comprehensively.",
              "line_range": [
                94,
                111
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "scripts.create_comprehensive_index.scan_all_directories",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.scan_all_directories"
              ],
              "uid_type": "function"
            },
            {
              "name": "_scan_directory",
              "docstring": "Scan a specific directory according to its configuration.",
              "line_range": [
                113,
                127
              ],
              "parameters": [
                "self",
                "directory",
                "config"
              ],
              "decorators": [],
              "uid": "scripts.create_comprehensive_index._scan_directory",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index._scan_directory"
              ],
              "uid_type": "function"
            },
            {
              "name": "_scan_root_files",
              "docstring": "Scan root-level files.",
              "line_range": [
                129,
                133
              ],
              "parameters": [
                "self",
                "config"
              ],
              "decorators": [],
              "uid": "scripts.create_comprehensive_index._scan_root_files",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index._scan_root_files"
              ],
              "uid_type": "function"
            },
            {
              "name": "_should_scan_file",
              "docstring": "Check if file should be scanned based on extension.",
              "line_range": [
                135,
                137
              ],
              "parameters": [
                "self",
                "file_path",
                "allowed_types"
              ],
              "decorators": [],
              "uid": "scripts.create_comprehensive_index._should_scan_file",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index._should_scan_file"
              ],
              "uid_type": "function"
            },
            {
              "name": "_scan_file",
              "docstring": "Scan individual file for project items.",
              "line_range": [
                139,
                152
              ],
              "parameters": [
                "self",
                "file_path",
                "source_dir",
                "priority"
              ],
              "decorators": [],
              "uid": "scripts.create_comprehensive_index._scan_file",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index._scan_file"
              ],
              "uid_type": "function"
            },
            {
              "name": "_extract_from_text",
              "docstring": "Extract items from text/markdown files.",
              "line_range": [
                154,
                206
              ],
              "parameters": [
                "self",
                "file_path",
                "content",
                "source_dir",
                "priority"
              ],
              "decorators": [],
              "uid": "scripts.create_comprehensive_index._extract_from_text",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index._extract_from_text"
              ],
              "uid_type": "function"
            },
            {
              "name": "_extract_from_json",
              "docstring": "Extract items from JSON files.",
              "line_range": [
                208,
                225
              ],
              "parameters": [
                "self",
                "file_path",
                "content",
                "source_dir",
                "priority"
              ],
              "decorators": [],
              "uid": "scripts.create_comprehensive_index._extract_from_json",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index._extract_from_json"
              ],
              "uid_type": "function"
            },
            {
              "name": "_create_item_from_match",
              "docstring": "Create ProjectItem from regex match.",
              "line_range": [
                227,
                249
              ],
              "parameters": [
                "self",
                "match",
                "content",
                "file_path",
                "item_type",
                "source_dir",
                "priority"
              ],
              "decorators": [],
              "uid": "scripts.create_comprehensive_index._create_item_from_match",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index._create_item_from_match"
              ],
              "uid_type": "function"
            },
            {
              "name": "_create_checkbox_item",
              "docstring": "Create ProjectItem from checkbox match.",
              "line_range": [
                251,
                274
              ],
              "parameters": [
                "self",
                "match",
                "content",
                "file_path",
                "item_type",
                "source_dir",
                "priority"
              ],
              "decorators": [],
              "uid": "scripts.create_comprehensive_index._create_checkbox_item",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index._create_checkbox_item"
              ],
              "uid_type": "function"
            },
            {
              "name": "_create_simple_item",
              "docstring": "Create simple ProjectItem.",
              "line_range": [
                276,
                297
              ],
              "parameters": [
                "self",
                "title",
                "content",
                "file_path",
                "item_type",
                "source_dir",
                "priority",
                "position"
              ],
              "decorators": [],
              "uid": "scripts.create_comprehensive_index._create_simple_item",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index._create_simple_item"
              ],
              "uid_type": "function"
            },
            {
              "name": "_detect_status",
              "docstring": "Detect item status from surrounding content.",
              "line_range": [
                299,
                308
              ],
              "parameters": [
                "self",
                "content",
                "position"
              ],
              "decorators": [],
              "uid": "scripts.create_comprehensive_index._detect_status",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index._detect_status"
              ],
              "uid_type": "function"
            },
            {
              "name": "_detect_priority",
              "docstring": "Detect item priority from surrounding content.",
              "line_range": [
                310,
                319
              ],
              "parameters": [
                "self",
                "content",
                "position",
                "default"
              ],
              "decorators": [],
              "uid": "scripts.create_comprehensive_index._detect_priority",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index._detect_priority"
              ],
              "uid_type": "function"
            },
            {
              "name": "_assess_strategic_value",
              "docstring": "Assess strategic value of item.",
              "line_range": [
                321,
                330
              ],
              "parameters": [
                "self",
                "title",
                "content"
              ],
              "decorators": [],
              "uid": "scripts.create_comprehensive_index._assess_strategic_value",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index._assess_strategic_value"
              ],
              "uid_type": "function"
            },
            {
              "name": "_extract_context",
              "docstring": "Extract context around position.",
              "line_range": [
                332,
                336
              ],
              "parameters": [
                "self",
                "content",
                "position",
                "length"
              ],
              "decorators": [],
              "uid": "scripts.create_comprehensive_index._extract_context",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index._extract_context"
              ],
              "uid_type": "function"
            },
            {
              "name": "_detect_category",
              "docstring": "Detect item category.",
              "line_range": [
                338,
                351
              ],
              "parameters": [
                "self",
                "title",
                "content"
              ],
              "decorators": [],
              "uid": "scripts.create_comprehensive_index._detect_category",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index._detect_category"
              ],
              "uid_type": "function"
            },
            {
              "name": "_estimate_effort",
              "docstring": "Estimate effort required.",
              "line_range": [
                353,
                362
              ],
              "parameters": [
                "self",
                "title",
                "content"
              ],
              "decorators": [],
              "uid": "scripts.create_comprehensive_index._estimate_effort",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index._estimate_effort"
              ],
              "uid_type": "function"
            },
            {
              "name": "_extract_tags",
              "docstring": "Extract relevant tags.",
              "line_range": [
                364,
                378
              ],
              "parameters": [
                "self",
                "title",
                "content",
                "source_dir"
              ],
              "decorators": [],
              "uid": "scripts.create_comprehensive_index._extract_tags",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index._extract_tags"
              ],
              "uid_type": "function"
            },
            {
              "name": "_is_noise_checkbox",
              "docstring": "Check if checkbox is noise (navigation, etc).",
              "line_range": [
                380,
                384
              ],
              "parameters": [
                "self",
                "text"
              ],
              "decorators": [],
              "uid": "scripts.create_comprehensive_index._is_noise_checkbox",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index._is_noise_checkbox"
              ],
              "uid_type": "function"
            },
            {
              "name": "_parse_json_files",
              "docstring": "Parse structured JSON files for existing data.",
              "line_range": [
                386,
                402
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "scripts.create_comprehensive_index._parse_json_files",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index._parse_json_files"
              ],
              "uid_type": "function"
            },
            {
              "name": "_process_structured_json",
              "docstring": "Process structured JSON data.",
              "line_range": [
                404,
                419
              ],
              "parameters": [
                "self",
                "data",
                "file_path"
              ],
              "decorators": [],
              "uid": "scripts.create_comprehensive_index._process_structured_json",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index._process_structured_json"
              ],
              "uid_type": "function"
            },
            {
              "name": "_add_json_item",
              "docstring": "Add item from JSON structure.",
              "line_range": [
                421,
                441
              ],
              "parameters": [
                "self",
                "item",
                "file_path",
                "item_type"
              ],
              "decorators": [],
              "uid": "scripts.create_comprehensive_index._add_json_item",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index._add_json_item"
              ],
              "uid_type": "function"
            },
            {
              "name": "_assess_json_strategic_value",
              "docstring": "Assess strategic value from JSON item.",
              "line_range": [
                443,
                450
              ],
              "parameters": [
                "self",
                "item"
              ],
              "decorators": [],
              "uid": "scripts.create_comprehensive_index._assess_json_strategic_value",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index._assess_json_strategic_value"
              ],
              "uid_type": "function"
            },
            {
              "name": "_extract_innovation_concepts",
              "docstring": "Extract innovation concepts from content.",
              "line_range": [
                452,
                482
              ],
              "parameters": [
                "self",
                "file_path",
                "content",
                "source_dir",
                "priority"
              ],
              "decorators": [],
              "uid": "scripts.create_comprehensive_index._extract_innovation_concepts",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index._extract_innovation_concepts"
              ],
              "uid_type": "function"
            },
            {
              "name": "_enhance_items",
              "docstring": "Post-process items to enhance metadata and find relationships.",
              "line_range": [
                484,
                501
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "scripts.create_comprehensive_index._enhance_items",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index._enhance_items"
              ],
              "uid_type": "function"
            },
            {
              "name": "_find_related_items",
              "docstring": "Find related items based on content similarity.",
              "line_range": [
                503,
                517
              ],
              "parameters": [
                "self",
                "item",
                "id_map",
                "title_map"
              ],
              "decorators": [],
              "uid": "scripts.create_comprehensive_index._find_related_items",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index._find_related_items"
              ],
              "uid_type": "function"
            },
            {
              "name": "generate_comprehensive_report",
              "docstring": "Generate comprehensive analysis report.",
              "line_range": [
                519,
                561
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "scripts.create_comprehensive_index.generate_comprehensive_report",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.generate_comprehensive_report"
              ],
              "uid_type": "function"
            },
            {
              "name": "save_comprehensive_index",
              "docstring": "Save comprehensive index and reports.",
              "line_range": [
                563,
                582
              ],
              "parameters": [
                "self",
                "output_dir"
              ],
              "decorators": [],
              "uid": "scripts.create_comprehensive_index.save_comprehensive_index",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.save_comprehensive_index"
              ],
              "uid_type": "function"
            },
            {
              "name": "_generate_analysis_report",
              "docstring": "Generate human-readable analysis report.",
              "line_range": [
                584,
                658
              ],
              "parameters": [
                "self",
                "report"
              ],
              "decorators": [],
              "uid": "scripts.create_comprehensive_index._generate_analysis_report",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index._generate_analysis_report"
              ],
              "uid_type": "function"
            },
            {
              "name": "_format_dict",
              "docstring": "Format dictionary for markdown display.",
              "line_range": [
                660,
                662
              ],
              "parameters": [
                "self",
                "d"
              ],
              "decorators": [],
              "uid": "scripts.create_comprehensive_index._format_dict",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index._format_dict"
              ],
              "uid_type": "function"
            },
            {
              "name": "_format_items_list",
              "docstring": "Format items list for markdown display.",
              "line_range": [
                664,
                677
              ],
              "parameters": [
                "self",
                "items"
              ],
              "decorators": [],
              "uid": "scripts.create_comprehensive_index._format_items_list",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index._format_items_list"
              ],
              "uid_type": "function"
            },
            {
              "name": "_extract_json_tasks",
              "docstring": "Extract tasks from JSON tasks array.",
              "line_range": [
                679,
                684
              ],
              "parameters": [
                "self",
                "tasks_data",
                "file_path",
                "source_dir",
                "priority"
              ],
              "decorators": [],
              "uid": "scripts.create_comprehensive_index._extract_json_tasks",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index._extract_json_tasks"
              ],
              "uid_type": "function"
            },
            {
              "name": "_extract_json_ideas",
              "docstring": "Extract ideas from JSON ideas array.",
              "line_range": [
                686,
                691
              ],
              "parameters": [
                "self",
                "ideas_data",
                "file_path",
                "source_dir",
                "priority"
              ],
              "decorators": [],
              "uid": "scripts.create_comprehensive_index._extract_json_ideas",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index._extract_json_ideas"
              ],
              "uid_type": "function"
            },
            {
              "name": "_extract_json_sessions",
              "docstring": "Extract sessions from JSON sessions array.",
              "line_range": [
                693,
                698
              ],
              "parameters": [
                "self",
                "sessions_data",
                "file_path",
                "source_dir",
                "priority"
              ],
              "decorators": [],
              "uid": "scripts.create_comprehensive_index._extract_json_sessions",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index._extract_json_sessions"
              ],
              "uid_type": "function"
            },
            {
              "name": "_extract_json_array",
              "docstring": "Extract items from JSON array.",
              "line_range": [
                700,
                711
              ],
              "parameters": [
                "self",
                "array_data",
                "file_path",
                "source_dir",
                "priority"
              ],
              "decorators": [],
              "uid": "scripts.create_comprehensive_index._extract_json_array",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index._extract_json_array"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [
            {
              "name": "ProjectItem",
              "docstring": "Unified representation of any project item (task, idea, session, concept).",
              "line_range": [
                22,
                39
              ],
              "methods": [],
              "bases": [],
              "uid": "scripts.create_comprehensive_index.ProjectItem",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ProjectItem"
              ],
              "uid_type": "class"
            },
            {
              "name": "ComprehensiveIndexer",
              "docstring": "Comprehensive indexer for all project content.",
              "line_range": [
                42,
                711
              ],
              "methods": [
                {
                  "name": "__init__",
                  "docstring": "",
                  "line_range": [
                    45,
                    58
                  ],
                  "parameters": [
                    "self",
                    "project_root"
                  ],
                  "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer.__init__",
                  "uid_components": [
                    "scripts",
                    "scripts.create_comprehensive_index",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer.__init__"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_init_patterns",
                  "docstring": "Initialize comprehensive extraction patterns.",
                  "line_range": [
                    60,
                    92
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._init_patterns",
                  "uid_components": [
                    "scripts",
                    "scripts.create_comprehensive_index",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer._init_patterns"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "scan_all_directories",
                  "docstring": "Scan all configured directories comprehensively.",
                  "line_range": [
                    94,
                    111
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer.scan_all_directories",
                  "uid_components": [
                    "scripts",
                    "scripts.create_comprehensive_index",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer.scan_all_directories"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_scan_directory",
                  "docstring": "Scan a specific directory according to its configuration.",
                  "line_range": [
                    113,
                    127
                  ],
                  "parameters": [
                    "self",
                    "directory",
                    "config"
                  ],
                  "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._scan_directory",
                  "uid_components": [
                    "scripts",
                    "scripts.create_comprehensive_index",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer._scan_directory"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_scan_root_files",
                  "docstring": "Scan root-level files.",
                  "line_range": [
                    129,
                    133
                  ],
                  "parameters": [
                    "self",
                    "config"
                  ],
                  "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._scan_root_files",
                  "uid_components": [
                    "scripts",
                    "scripts.create_comprehensive_index",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer._scan_root_files"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_should_scan_file",
                  "docstring": "Check if file should be scanned based on extension.",
                  "line_range": [
                    135,
                    137
                  ],
                  "parameters": [
                    "self",
                    "file_path",
                    "allowed_types"
                  ],
                  "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._should_scan_file",
                  "uid_components": [
                    "scripts",
                    "scripts.create_comprehensive_index",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer._should_scan_file"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_scan_file",
                  "docstring": "Scan individual file for project items.",
                  "line_range": [
                    139,
                    152
                  ],
                  "parameters": [
                    "self",
                    "file_path",
                    "source_dir",
                    "priority"
                  ],
                  "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._scan_file",
                  "uid_components": [
                    "scripts",
                    "scripts.create_comprehensive_index",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer._scan_file"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_extract_from_text",
                  "docstring": "Extract items from text/markdown files.",
                  "line_range": [
                    154,
                    206
                  ],
                  "parameters": [
                    "self",
                    "file_path",
                    "content",
                    "source_dir",
                    "priority"
                  ],
                  "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._extract_from_text",
                  "uid_components": [
                    "scripts",
                    "scripts.create_comprehensive_index",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer._extract_from_text"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_extract_from_json",
                  "docstring": "Extract items from JSON files.",
                  "line_range": [
                    208,
                    225
                  ],
                  "parameters": [
                    "self",
                    "file_path",
                    "content",
                    "source_dir",
                    "priority"
                  ],
                  "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._extract_from_json",
                  "uid_components": [
                    "scripts",
                    "scripts.create_comprehensive_index",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer._extract_from_json"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_create_item_from_match",
                  "docstring": "Create ProjectItem from regex match.",
                  "line_range": [
                    227,
                    249
                  ],
                  "parameters": [
                    "self",
                    "match",
                    "content",
                    "file_path",
                    "item_type",
                    "source_dir",
                    "priority"
                  ],
                  "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._create_item_from_match",
                  "uid_components": [
                    "scripts",
                    "scripts.create_comprehensive_index",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer._create_item_from_match"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_create_checkbox_item",
                  "docstring": "Create ProjectItem from checkbox match.",
                  "line_range": [
                    251,
                    274
                  ],
                  "parameters": [
                    "self",
                    "match",
                    "content",
                    "file_path",
                    "item_type",
                    "source_dir",
                    "priority"
                  ],
                  "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._create_checkbox_item",
                  "uid_components": [
                    "scripts",
                    "scripts.create_comprehensive_index",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer._create_checkbox_item"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_create_simple_item",
                  "docstring": "Create simple ProjectItem.",
                  "line_range": [
                    276,
                    297
                  ],
                  "parameters": [
                    "self",
                    "title",
                    "content",
                    "file_path",
                    "item_type",
                    "source_dir",
                    "priority",
                    "position"
                  ],
                  "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._create_simple_item",
                  "uid_components": [
                    "scripts",
                    "scripts.create_comprehensive_index",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer._create_simple_item"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_detect_status",
                  "docstring": "Detect item status from surrounding content.",
                  "line_range": [
                    299,
                    308
                  ],
                  "parameters": [
                    "self",
                    "content",
                    "position"
                  ],
                  "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._detect_status",
                  "uid_components": [
                    "scripts",
                    "scripts.create_comprehensive_index",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer._detect_status"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_detect_priority",
                  "docstring": "Detect item priority from surrounding content.",
                  "line_range": [
                    310,
                    319
                  ],
                  "parameters": [
                    "self",
                    "content",
                    "position",
                    "default"
                  ],
                  "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._detect_priority",
                  "uid_components": [
                    "scripts",
                    "scripts.create_comprehensive_index",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer._detect_priority"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_assess_strategic_value",
                  "docstring": "Assess strategic value of item.",
                  "line_range": [
                    321,
                    330
                  ],
                  "parameters": [
                    "self",
                    "title",
                    "content"
                  ],
                  "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._assess_strategic_value",
                  "uid_components": [
                    "scripts",
                    "scripts.create_comprehensive_index",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer._assess_strategic_value"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_extract_context",
                  "docstring": "Extract context around position.",
                  "line_range": [
                    332,
                    336
                  ],
                  "parameters": [
                    "self",
                    "content",
                    "position",
                    "length"
                  ],
                  "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._extract_context",
                  "uid_components": [
                    "scripts",
                    "scripts.create_comprehensive_index",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer._extract_context"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_detect_category",
                  "docstring": "Detect item category.",
                  "line_range": [
                    338,
                    351
                  ],
                  "parameters": [
                    "self",
                    "title",
                    "content"
                  ],
                  "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._detect_category",
                  "uid_components": [
                    "scripts",
                    "scripts.create_comprehensive_index",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer._detect_category"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_estimate_effort",
                  "docstring": "Estimate effort required.",
                  "line_range": [
                    353,
                    362
                  ],
                  "parameters": [
                    "self",
                    "title",
                    "content"
                  ],
                  "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._estimate_effort",
                  "uid_components": [
                    "scripts",
                    "scripts.create_comprehensive_index",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer._estimate_effort"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_extract_tags",
                  "docstring": "Extract relevant tags.",
                  "line_range": [
                    364,
                    378
                  ],
                  "parameters": [
                    "self",
                    "title",
                    "content",
                    "source_dir"
                  ],
                  "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._extract_tags",
                  "uid_components": [
                    "scripts",
                    "scripts.create_comprehensive_index",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer._extract_tags"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_is_noise_checkbox",
                  "docstring": "Check if checkbox is noise (navigation, etc).",
                  "line_range": [
                    380,
                    384
                  ],
                  "parameters": [
                    "self",
                    "text"
                  ],
                  "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._is_noise_checkbox",
                  "uid_components": [
                    "scripts",
                    "scripts.create_comprehensive_index",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer._is_noise_checkbox"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_parse_json_files",
                  "docstring": "Parse structured JSON files for existing data.",
                  "line_range": [
                    386,
                    402
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._parse_json_files",
                  "uid_components": [
                    "scripts",
                    "scripts.create_comprehensive_index",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer._parse_json_files"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_process_structured_json",
                  "docstring": "Process structured JSON data.",
                  "line_range": [
                    404,
                    419
                  ],
                  "parameters": [
                    "self",
                    "data",
                    "file_path"
                  ],
                  "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._process_structured_json",
                  "uid_components": [
                    "scripts",
                    "scripts.create_comprehensive_index",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer._process_structured_json"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_add_json_item",
                  "docstring": "Add item from JSON structure.",
                  "line_range": [
                    421,
                    441
                  ],
                  "parameters": [
                    "self",
                    "item",
                    "file_path",
                    "item_type"
                  ],
                  "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._add_json_item",
                  "uid_components": [
                    "scripts",
                    "scripts.create_comprehensive_index",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer._add_json_item"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_assess_json_strategic_value",
                  "docstring": "Assess strategic value from JSON item.",
                  "line_range": [
                    443,
                    450
                  ],
                  "parameters": [
                    "self",
                    "item"
                  ],
                  "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._assess_json_strategic_value",
                  "uid_components": [
                    "scripts",
                    "scripts.create_comprehensive_index",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer._assess_json_strategic_value"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_extract_innovation_concepts",
                  "docstring": "Extract innovation concepts from content.",
                  "line_range": [
                    452,
                    482
                  ],
                  "parameters": [
                    "self",
                    "file_path",
                    "content",
                    "source_dir",
                    "priority"
                  ],
                  "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._extract_innovation_concepts",
                  "uid_components": [
                    "scripts",
                    "scripts.create_comprehensive_index",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer._extract_innovation_concepts"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_enhance_items",
                  "docstring": "Post-process items to enhance metadata and find relationships.",
                  "line_range": [
                    484,
                    501
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._enhance_items",
                  "uid_components": [
                    "scripts",
                    "scripts.create_comprehensive_index",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer._enhance_items"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_find_related_items",
                  "docstring": "Find related items based on content similarity.",
                  "line_range": [
                    503,
                    517
                  ],
                  "parameters": [
                    "self",
                    "item",
                    "id_map",
                    "title_map"
                  ],
                  "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._find_related_items",
                  "uid_components": [
                    "scripts",
                    "scripts.create_comprehensive_index",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer._find_related_items"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "generate_comprehensive_report",
                  "docstring": "Generate comprehensive analysis report.",
                  "line_range": [
                    519,
                    561
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer.generate_comprehensive_report",
                  "uid_components": [
                    "scripts",
                    "scripts.create_comprehensive_index",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer.generate_comprehensive_report"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "save_comprehensive_index",
                  "docstring": "Save comprehensive index and reports.",
                  "line_range": [
                    563,
                    582
                  ],
                  "parameters": [
                    "self",
                    "output_dir"
                  ],
                  "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer.save_comprehensive_index",
                  "uid_components": [
                    "scripts",
                    "scripts.create_comprehensive_index",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer.save_comprehensive_index"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_generate_analysis_report",
                  "docstring": "Generate human-readable analysis report.",
                  "line_range": [
                    584,
                    658
                  ],
                  "parameters": [
                    "self",
                    "report"
                  ],
                  "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._generate_analysis_report",
                  "uid_components": [
                    "scripts",
                    "scripts.create_comprehensive_index",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer._generate_analysis_report"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_format_dict",
                  "docstring": "Format dictionary for markdown display.",
                  "line_range": [
                    660,
                    662
                  ],
                  "parameters": [
                    "self",
                    "d"
                  ],
                  "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._format_dict",
                  "uid_components": [
                    "scripts",
                    "scripts.create_comprehensive_index",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer._format_dict"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_format_items_list",
                  "docstring": "Format items list for markdown display.",
                  "line_range": [
                    664,
                    677
                  ],
                  "parameters": [
                    "self",
                    "items"
                  ],
                  "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._format_items_list",
                  "uid_components": [
                    "scripts",
                    "scripts.create_comprehensive_index",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer._format_items_list"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_extract_json_tasks",
                  "docstring": "Extract tasks from JSON tasks array.",
                  "line_range": [
                    679,
                    684
                  ],
                  "parameters": [
                    "self",
                    "tasks_data",
                    "file_path",
                    "source_dir",
                    "priority"
                  ],
                  "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._extract_json_tasks",
                  "uid_components": [
                    "scripts",
                    "scripts.create_comprehensive_index",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer._extract_json_tasks"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_extract_json_ideas",
                  "docstring": "Extract ideas from JSON ideas array.",
                  "line_range": [
                    686,
                    691
                  ],
                  "parameters": [
                    "self",
                    "ideas_data",
                    "file_path",
                    "source_dir",
                    "priority"
                  ],
                  "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._extract_json_ideas",
                  "uid_components": [
                    "scripts",
                    "scripts.create_comprehensive_index",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer._extract_json_ideas"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_extract_json_sessions",
                  "docstring": "Extract sessions from JSON sessions array.",
                  "line_range": [
                    693,
                    698
                  ],
                  "parameters": [
                    "self",
                    "sessions_data",
                    "file_path",
                    "source_dir",
                    "priority"
                  ],
                  "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._extract_json_sessions",
                  "uid_components": [
                    "scripts",
                    "scripts.create_comprehensive_index",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer._extract_json_sessions"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_extract_json_array",
                  "docstring": "Extract items from JSON array.",
                  "line_range": [
                    700,
                    711
                  ],
                  "parameters": [
                    "self",
                    "array_data",
                    "file_path",
                    "source_dir",
                    "priority"
                  ],
                  "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer._extract_json_array",
                  "uid_components": [
                    "scripts",
                    "scripts.create_comprehensive_index",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer",
                    "scripts.create_comprehensive_index.ComprehensiveIndexer._extract_json_array"
                  ],
                  "uid_type": "method"
                }
              ],
              "bases": [],
              "uid": "scripts.create_comprehensive_index.ComprehensiveIndexer",
              "uid_components": [
                "scripts",
                "scripts.create_comprehensive_index",
                "scripts.create_comprehensive_index.ComprehensiveIndexer"
              ],
              "uid_type": "class"
            }
          ],
          "callgraph": {
            "__init__": [
              "self._init_patterns",
              "Path"
            ],
            "_init_patterns": [
              "re.compile"
            ],
            "scan_all_directories": [
              "self._enhance_items",
              "len",
              "self._parse_json_files",
              "self._scan_directory",
              "logger.info",
              "self._scan_root_files"
            ],
            "_scan_directory": [
              "dir_path.glob",
              "self._should_scan_file",
              "logger.warning",
              "file_path.is_file",
              "logger.info",
              "dir_path.exists",
              "self._scan_file"
            ],
            "_scan_root_files": [
              "self._should_scan_file",
              "file_path.is_file",
              "self._scan_file"
            ],
            "_should_scan_file": [],
            "_scan_file": [
              "open",
              "self._extract_from_text",
              "f.read",
              "logger.error",
              "self._extract_from_json"
            ],
            "_extract_from_text": [
              "self._create_item_from_match",
              "self._extract_innovation_concepts",
              "self._create_simple_item",
              "self._is_noise_checkbox",
              "match.start",
              "self._create_checkbox_item",
              "match.group"
            ],
            "_extract_from_json": [
              "self._extract_json_ideas",
              "self._extract_json_array",
              "json.loads",
              "self._extract_json_sessions",
              "isinstance",
              "logger.warning",
              "self._extract_json_tasks"
            ],
            "_create_item_from_match": [
              "title.strip",
              "self._extract_context",
              "self._extract_tags",
              "self._estimate_effort",
              "datetime.now",
              "self._detect_priority",
              "ProjectItem",
              "self._assess_strategic_value",
              "self._detect_category",
              "str",
              "match.start",
              "self._detect_status",
              "match.group"
            ],
            "_create_checkbox_item": [
              "self._extract_context",
              "self._extract_tags",
              "self._estimate_effort",
              "datetime.now",
              "self._detect_priority",
              "ProjectItem",
              "self._assess_strategic_value",
              "self._detect_category",
              "str",
              "match.start",
              "match.group"
            ],
            "_create_simple_item": [
              "title.strip",
              "self._extract_context",
              "datetime.now",
              "ProjectItem",
              "str"
            ],
            "_detect_status": [
              "max"
            ],
            "_detect_priority": [
              "max"
            ],
            "_assess_strategic_value": [],
            "_extract_context": [
              "max",
              "len",
              "min"
            ],
            "_detect_category": [
              "title.lower",
              "any"
            ],
            "_estimate_effort": [
              "any"
            ],
            "_extract_tags": [
              "source_dir.replace",
              "tags.append",
              "title.lower"
            ],
            "_is_noise_checkbox": [
              "text.strip",
              "text.lower",
              "any",
              "len"
            ],
            "_parse_json_files": [
              "open",
              "self._process_structured_json",
              "file_path.exists",
              "json.load",
              "logger.error"
            ],
            "_process_structured_json": [
              "isinstance",
              "self._add_json_item"
            ],
            "_add_json_item": [
              "self._assess_json_strategic_value",
              "len",
              "datetime.now",
              "ProjectItem",
              "str",
              "item.get"
            ],
            "_assess_json_strategic_value": [
              "item.get"
            ],
            "_extract_innovation_concepts": [
              "len",
              "self._extract_context",
              "innovation_lines.append",
              "content.split",
              "content.find",
              "enumerate",
              "source_dir.replace",
              "datetime.now",
              "ProjectItem",
              "str",
              "line.strip"
            ],
            "_enhance_items": [
              "re.sub",
              "logger.info",
              "self._find_related_items"
            ],
            "_find_related_items": [
              "re.findall",
              "related.append",
              "ref_type.upper"
            ],
            "generate_comprehensive_report": [
              "by_type.get",
              "by_strategic_value.get",
              "by_status.get",
              "len",
              "datetime.now",
              "by_priority.get",
              "by_source.get",
              "asdict"
            ],
            "save_comprehensive_index": [
              "self.generate_comprehensive_report",
              "len",
              "os.makedirs",
              "f.write",
              "open",
              "logger.info",
              "json.dump",
              "self._generate_analysis_report"
            ],
            "_generate_analysis_report": [
              "self._format_items_list",
              "self._format_dict",
              "len"
            ],
            "_format_dict": [
              "d.items",
              "sorted"
            ],
            "_format_items_list": [
              "result.append"
            ],
            "_extract_json_tasks": [
              "isinstance",
              "self._add_json_item"
            ],
            "_extract_json_ideas": [
              "isinstance",
              "self._add_json_item"
            ],
            "_extract_json_sessions": [
              "isinstance",
              "self._add_json_item"
            ],
            "_extract_json_array": [
              "str",
              "isinstance",
              "self._add_json_item"
            ],
            "main": [
              "by_strategic.get",
              "len",
              "print",
              "ComprehensiveIndexer",
              "indexer.scan_all_directories",
              "logger.info",
              "indexer.save_comprehensive_index"
            ]
          },
          "dependencies": [
            "Dict",
            "List",
            "Optional",
            "Path",
            "Set",
            "asdict",
            "dataclass",
            "dataclasses",
            "datetime",
            "json",
            "logging",
            "os",
            "pathlib",
            "re",
            "typing"
          ],
          "hash": "3de71f291650a50e7e3c04fc660a7c31d909a1f929d375ec5324f909c0a81c97",
          "uid": "scripts.create_comprehensive_index",
          "uid_components": [
            "scripts",
            "scripts.create_comprehensive_index"
          ],
          "uid_type": "module",
          "artifact_id": "748e1e33-3da6-4585-49bf-22aec3e3021e",
          "metrics": {
            "cyclomatic_complexity": 41,
            "lines_of_code": 370,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 15,
            "test_coverage": 0.0,
            "maintainability_index": 0
          },
          "markdown_anchor": {
            "id": "scripts-create_comprehensive_index",
            "title": "Module: scripts.create_comprehensive_index",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: scripts.create_comprehensive_index](#scripts-create_comprehensive_index)",
            "html_anchor": "<a id=\"scripts-create_comprehensive_index\"></a>"
          }
        },
        {
          "module_id": "scripts.github_sync_manager_enhanced",
          "path": "scripts/github_sync_manager_enhanced.py",
          "category": "core",
          "module_doc": "Enhanced GitHub Sync Manager - \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u043b\u0443\u0447\u0448\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0438\u0437 full_project_rollout\n\u0418\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u0443\u0435\u0442: processing results + GitHub API + token management + CLI fallback",
          "functions": [
            {
              "name": "print_info",
              "docstring": "",
              "line_range": [
                25,
                26
              ],
              "parameters": [
                "msg"
              ],
              "decorators": [],
              "uid": "scripts.github_sync_manager_enhanced.print_info",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.print_info"
              ],
              "uid_type": "function"
            },
            {
              "name": "print_success",
              "docstring": "",
              "line_range": [
                28,
                29
              ],
              "parameters": [
                "msg"
              ],
              "decorators": [],
              "uid": "scripts.github_sync_manager_enhanced.print_success",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.print_success"
              ],
              "uid_type": "function"
            },
            {
              "name": "print_warning",
              "docstring": "",
              "line_range": [
                31,
                32
              ],
              "parameters": [
                "msg"
              ],
              "decorators": [],
              "uid": "scripts.github_sync_manager_enhanced.print_warning",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.print_warning"
              ],
              "uid_type": "function"
            },
            {
              "name": "print_error",
              "docstring": "",
              "line_range": [
                34,
                35
              ],
              "parameters": [
                "msg"
              ],
              "decorators": [],
              "uid": "scripts.github_sync_manager_enhanced.print_error",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.print_error"
              ],
              "uid_type": "function"
            },
            {
              "name": "print_step",
              "docstring": "",
              "line_range": [
                37,
                38
              ],
              "parameters": [
                "step",
                "total",
                "msg"
              ],
              "decorators": [],
              "uid": "scripts.github_sync_manager_enhanced.print_step",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.print_step"
              ],
              "uid_type": "function"
            },
            {
              "name": "main",
              "docstring": "Enhanced CLI interface",
              "line_range": [
                620,
                655
              ],
              "parameters": [],
              "decorators": [],
              "uid": "scripts.github_sync_manager_enhanced.main",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.main"
              ],
              "uid_type": "function"
            },
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                43,
                44
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "scripts.github_sync_manager_enhanced.__init__",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.__init__"
              ],
              "uid_type": "function"
            },
            {
              "name": "load_env_file",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430",
              "line_range": [
                46,
                57
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "scripts.github_sync_manager_enhanced.load_env_file",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.load_env_file"
              ],
              "uid_type": "function"
            },
            {
              "name": "test_github_token",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0442\u043e\u043a\u0435\u043d\u0430",
              "line_range": [
                59,
                73
              ],
              "parameters": [
                "self",
                "token"
              ],
              "decorators": [],
              "uid": "scripts.github_sync_manager_enhanced.test_github_token",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.test_github_token"
              ],
              "uid_type": "function"
            },
            {
              "name": "check_gh_cli",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 GitHub CLI",
              "line_range": [
                75,
                82
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "scripts.github_sync_manager_enhanced.check_gh_cli",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.check_gh_cli"
              ],
              "uid_type": "function"
            },
            {
              "name": "get_token_from_gh_cli",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 \u0438\u0437 GitHub CLI",
              "line_range": [
                84,
                93
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "scripts.github_sync_manager_enhanced.get_token_from_gh_cli",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.get_token_from_gh_cli"
              ],
              "uid_type": "function"
            },
            {
              "name": "get_github_token",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c GitHub \u0442\u043e\u043a\u0435\u043d \u0441 multiple fallbacks\n\nReturns:\n    (token, method) \u0433\u0434\u0435 method = 'env' | 'cli' | 'none'",
              "line_range": [
                95,
                117
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "scripts.github_sync_manager_enhanced.get_github_token",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.get_github_token"
              ],
              "uid_type": "function"
            },
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                122,
                164
              ],
              "parameters": [
                "self",
                "repo_owner",
                "repo_name",
                "dry_run"
              ],
              "decorators": [],
              "uid": "scripts.github_sync_manager_enhanced.__init__",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.__init__"
              ],
              "uid_type": "function"
            },
            {
              "name": "detect_repo_from_git",
              "docstring": "\u0410\u0432\u0442\u043e\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 owner/repo \u0438\u0437 git remote",
              "line_range": [
                166,
                198
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "scripts.github_sync_manager_enhanced.detect_repo_from_git",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.detect_repo_from_git"
              ],
              "uid_type": "function"
            },
            {
              "name": "load_sync_log",
              "docstring": "Load previous sync results",
              "line_range": [
                200,
                211
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "scripts.github_sync_manager_enhanced.load_sync_log",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.load_sync_log"
              ],
              "uid_type": "function"
            },
            {
              "name": "save_sync_log",
              "docstring": "Save sync log",
              "line_range": [
                213,
                216
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "scripts.github_sync_manager_enhanced.save_sync_log",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.save_sync_log"
              ],
              "uid_type": "function"
            },
            {
              "name": "api_request",
              "docstring": "Enhanced API request with CLI fallback",
              "line_range": [
                218,
                231
              ],
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ],
              "decorators": [],
              "uid": "scripts.github_sync_manager_enhanced.api_request",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.api_request"
              ],
              "uid_type": "function"
            },
            {
              "name": "_api_request_direct",
              "docstring": "Direct API request",
              "line_range": [
                233,
                261
              ],
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ],
              "decorators": [],
              "uid": "scripts.github_sync_manager_enhanced._api_request_direct",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced._api_request_direct"
              ],
              "uid_type": "function"
            },
            {
              "name": "_api_request_via_cli",
              "docstring": "API request via GitHub CLI",
              "line_range": [
                263,
                293
              ],
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ],
              "decorators": [],
              "uid": "scripts.github_sync_manager_enhanced._api_request_via_cli",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced._api_request_via_cli"
              ],
              "uid_type": "function"
            },
            {
              "name": "create_github_issue_enhanced",
              "docstring": "Enhanced issue creation (\u0438\u0437 create_github_issues.py)",
              "line_range": [
                295,
                359
              ],
              "parameters": [
                "self",
                "item"
              ],
              "decorators": [],
              "uid": "scripts.github_sync_manager_enhanced.create_github_issue_enhanced",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.create_github_issue_enhanced"
              ],
              "uid_type": "function"
            },
            {
              "name": "_format_acceptance_criteria",
              "docstring": "Format acceptance criteria from item metadata",
              "line_range": [
                361,
                380
              ],
              "parameters": [
                "self",
                "item"
              ],
              "decorators": [],
              "uid": "scripts.github_sync_manager_enhanced._format_acceptance_criteria",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced._format_acceptance_criteria"
              ],
              "uid_type": "function"
            },
            {
              "name": "_format_implementation_notes",
              "docstring": "Format implementation notes",
              "line_range": [
                382,
                397
              ],
              "parameters": [
                "self",
                "item"
              ],
              "decorators": [],
              "uid": "scripts.github_sync_manager_enhanced._format_implementation_notes",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced._format_implementation_notes"
              ],
              "uid_type": "function"
            },
            {
              "name": "validate_before_sync",
              "docstring": "Enhanced validation",
              "line_range": [
                399,
                434
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "scripts.github_sync_manager_enhanced.validate_before_sync",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.validate_before_sync"
              ],
              "uid_type": "function"
            },
            {
              "name": "run_enhanced_sync",
              "docstring": "Enhanced sync with full project rollout integration",
              "line_range": [
                436,
                494
              ],
              "parameters": [
                "self",
                "categories"
              ],
              "decorators": [],
              "uid": "scripts.github_sync_manager_enhanced.run_enhanced_sync",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.run_enhanced_sync"
              ],
              "uid_type": "function"
            },
            {
              "name": "sync_category_enhanced",
              "docstring": "Enhanced category sync",
              "line_range": [
                496,
                554
              ],
              "parameters": [
                "self",
                "category"
              ],
              "decorators": [],
              "uid": "scripts.github_sync_manager_enhanced.sync_category_enhanced",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.sync_category_enhanced"
              ],
              "uid_type": "function"
            },
            {
              "name": "item_already_synced",
              "docstring": "Check if item was already synced",
              "line_range": [
                556,
                560
              ],
              "parameters": [
                "self",
                "item",
                "category"
              ],
              "decorators": [],
              "uid": "scripts.github_sync_manager_enhanced.item_already_synced",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.item_already_synced"
              ],
              "uid_type": "function"
            },
            {
              "name": "create_github_epic_enhanced",
              "docstring": "Enhanced epic creation",
              "line_range": [
                562,
                607
              ],
              "parameters": [
                "self",
                "item"
              ],
              "decorators": [],
              "uid": "scripts.github_sync_manager_enhanced.create_github_epic_enhanced",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.create_github_epic_enhanced"
              ],
              "uid_type": "function"
            },
            {
              "name": "create_github_discussion_enhanced",
              "docstring": "Enhanced discussion creation (placeholder - requires GraphQL)",
              "line_range": [
                609,
                618
              ],
              "parameters": [
                "self",
                "item"
              ],
              "decorators": [],
              "uid": "scripts.github_sync_manager_enhanced.create_github_discussion_enhanced",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.create_github_discussion_enhanced"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [
            {
              "name": "Colors",
              "docstring": "",
              "line_range": [
                18,
                23
              ],
              "methods": [],
              "bases": [],
              "uid": "scripts.github_sync_manager_enhanced.Colors",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.Colors"
              ],
              "uid_type": "class"
            },
            {
              "name": "GitHubTokenManager",
              "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 GitHub \u0442\u043e\u043a\u0435\u043d\u0430\u043c\u0438 (\u0438\u0437 setup_github_token.sh)",
              "line_range": [
                40,
                117
              ],
              "methods": [
                {
                  "name": "__init__",
                  "docstring": "",
                  "line_range": [
                    43,
                    44
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "scripts.github_sync_manager_enhanced.GitHubTokenManager.__init__",
                  "uid_components": [
                    "scripts",
                    "scripts.github_sync_manager_enhanced",
                    "scripts.github_sync_manager_enhanced.GitHubTokenManager",
                    "scripts.github_sync_manager_enhanced.GitHubTokenManager.__init__"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "load_env_file",
                  "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430",
                  "line_range": [
                    46,
                    57
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "scripts.github_sync_manager_enhanced.GitHubTokenManager.load_env_file",
                  "uid_components": [
                    "scripts",
                    "scripts.github_sync_manager_enhanced",
                    "scripts.github_sync_manager_enhanced.GitHubTokenManager",
                    "scripts.github_sync_manager_enhanced.GitHubTokenManager.load_env_file"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "test_github_token",
                  "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0442\u043e\u043a\u0435\u043d\u0430",
                  "line_range": [
                    59,
                    73
                  ],
                  "parameters": [
                    "self",
                    "token"
                  ],
                  "uid": "scripts.github_sync_manager_enhanced.GitHubTokenManager.test_github_token",
                  "uid_components": [
                    "scripts",
                    "scripts.github_sync_manager_enhanced",
                    "scripts.github_sync_manager_enhanced.GitHubTokenManager",
                    "scripts.github_sync_manager_enhanced.GitHubTokenManager.test_github_token"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "check_gh_cli",
                  "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 GitHub CLI",
                  "line_range": [
                    75,
                    82
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "scripts.github_sync_manager_enhanced.GitHubTokenManager.check_gh_cli",
                  "uid_components": [
                    "scripts",
                    "scripts.github_sync_manager_enhanced",
                    "scripts.github_sync_manager_enhanced.GitHubTokenManager",
                    "scripts.github_sync_manager_enhanced.GitHubTokenManager.check_gh_cli"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "get_token_from_gh_cli",
                  "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 \u0438\u0437 GitHub CLI",
                  "line_range": [
                    84,
                    93
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "scripts.github_sync_manager_enhanced.GitHubTokenManager.get_token_from_gh_cli",
                  "uid_components": [
                    "scripts",
                    "scripts.github_sync_manager_enhanced",
                    "scripts.github_sync_manager_enhanced.GitHubTokenManager",
                    "scripts.github_sync_manager_enhanced.GitHubTokenManager.get_token_from_gh_cli"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "get_github_token",
                  "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c GitHub \u0442\u043e\u043a\u0435\u043d \u0441 multiple fallbacks\n\nReturns:\n    (token, method) \u0433\u0434\u0435 method = 'env' | 'cli' | 'none'",
                  "line_range": [
                    95,
                    117
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "scripts.github_sync_manager_enhanced.GitHubTokenManager.get_github_token",
                  "uid_components": [
                    "scripts",
                    "scripts.github_sync_manager_enhanced",
                    "scripts.github_sync_manager_enhanced.GitHubTokenManager",
                    "scripts.github_sync_manager_enhanced.GitHubTokenManager.get_github_token"
                  ],
                  "uid_type": "method"
                }
              ],
              "bases": [],
              "uid": "scripts.github_sync_manager_enhanced.GitHubTokenManager",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.GitHubTokenManager"
              ],
              "uid_type": "class"
            },
            {
              "name": "EnhancedGitHubSyncManager",
              "docstring": "\u0423\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u044b\u0439 GitHub Sync Manager \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 \u0432\u0441\u0435\u0445 \u043b\u0443\u0447\u0448\u0438\u0445 \u043f\u0440\u0430\u043a\u0442\u0438\u043a",
              "line_range": [
                119,
                618
              ],
              "methods": [
                {
                  "name": "__init__",
                  "docstring": "",
                  "line_range": [
                    122,
                    164
                  ],
                  "parameters": [
                    "self",
                    "repo_owner",
                    "repo_name",
                    "dry_run"
                  ],
                  "uid": "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.__init__",
                  "uid_components": [
                    "scripts",
                    "scripts.github_sync_manager_enhanced",
                    "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager",
                    "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.__init__"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "detect_repo_from_git",
                  "docstring": "\u0410\u0432\u0442\u043e\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 owner/repo \u0438\u0437 git remote",
                  "line_range": [
                    166,
                    198
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.detect_repo_from_git",
                  "uid_components": [
                    "scripts",
                    "scripts.github_sync_manager_enhanced",
                    "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager",
                    "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.detect_repo_from_git"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "load_sync_log",
                  "docstring": "Load previous sync results",
                  "line_range": [
                    200,
                    211
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.load_sync_log",
                  "uid_components": [
                    "scripts",
                    "scripts.github_sync_manager_enhanced",
                    "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager",
                    "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.load_sync_log"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "save_sync_log",
                  "docstring": "Save sync log",
                  "line_range": [
                    213,
                    216
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.save_sync_log",
                  "uid_components": [
                    "scripts",
                    "scripts.github_sync_manager_enhanced",
                    "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager",
                    "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.save_sync_log"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "api_request",
                  "docstring": "Enhanced API request with CLI fallback",
                  "line_range": [
                    218,
                    231
                  ],
                  "parameters": [
                    "self",
                    "method",
                    "endpoint",
                    "data"
                  ],
                  "uid": "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.api_request",
                  "uid_components": [
                    "scripts",
                    "scripts.github_sync_manager_enhanced",
                    "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager",
                    "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.api_request"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_api_request_direct",
                  "docstring": "Direct API request",
                  "line_range": [
                    233,
                    261
                  ],
                  "parameters": [
                    "self",
                    "method",
                    "endpoint",
                    "data"
                  ],
                  "uid": "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager._api_request_direct",
                  "uid_components": [
                    "scripts",
                    "scripts.github_sync_manager_enhanced",
                    "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager",
                    "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager._api_request_direct"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_api_request_via_cli",
                  "docstring": "API request via GitHub CLI",
                  "line_range": [
                    263,
                    293
                  ],
                  "parameters": [
                    "self",
                    "method",
                    "endpoint",
                    "data"
                  ],
                  "uid": "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager._api_request_via_cli",
                  "uid_components": [
                    "scripts",
                    "scripts.github_sync_manager_enhanced",
                    "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager",
                    "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager._api_request_via_cli"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "create_github_issue_enhanced",
                  "docstring": "Enhanced issue creation (\u0438\u0437 create_github_issues.py)",
                  "line_range": [
                    295,
                    359
                  ],
                  "parameters": [
                    "self",
                    "item"
                  ],
                  "uid": "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.create_github_issue_enhanced",
                  "uid_components": [
                    "scripts",
                    "scripts.github_sync_manager_enhanced",
                    "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager",
                    "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.create_github_issue_enhanced"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_format_acceptance_criteria",
                  "docstring": "Format acceptance criteria from item metadata",
                  "line_range": [
                    361,
                    380
                  ],
                  "parameters": [
                    "self",
                    "item"
                  ],
                  "uid": "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager._format_acceptance_criteria",
                  "uid_components": [
                    "scripts",
                    "scripts.github_sync_manager_enhanced",
                    "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager",
                    "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager._format_acceptance_criteria"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_format_implementation_notes",
                  "docstring": "Format implementation notes",
                  "line_range": [
                    382,
                    397
                  ],
                  "parameters": [
                    "self",
                    "item"
                  ],
                  "uid": "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager._format_implementation_notes",
                  "uid_components": [
                    "scripts",
                    "scripts.github_sync_manager_enhanced",
                    "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager",
                    "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager._format_implementation_notes"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "validate_before_sync",
                  "docstring": "Enhanced validation",
                  "line_range": [
                    399,
                    434
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.validate_before_sync",
                  "uid_components": [
                    "scripts",
                    "scripts.github_sync_manager_enhanced",
                    "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager",
                    "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.validate_before_sync"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "run_enhanced_sync",
                  "docstring": "Enhanced sync with full project rollout integration",
                  "line_range": [
                    436,
                    494
                  ],
                  "parameters": [
                    "self",
                    "categories"
                  ],
                  "uid": "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.run_enhanced_sync",
                  "uid_components": [
                    "scripts",
                    "scripts.github_sync_manager_enhanced",
                    "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager",
                    "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.run_enhanced_sync"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "sync_category_enhanced",
                  "docstring": "Enhanced category sync",
                  "line_range": [
                    496,
                    554
                  ],
                  "parameters": [
                    "self",
                    "category"
                  ],
                  "uid": "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.sync_category_enhanced",
                  "uid_components": [
                    "scripts",
                    "scripts.github_sync_manager_enhanced",
                    "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager",
                    "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.sync_category_enhanced"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "item_already_synced",
                  "docstring": "Check if item was already synced",
                  "line_range": [
                    556,
                    560
                  ],
                  "parameters": [
                    "self",
                    "item",
                    "category"
                  ],
                  "uid": "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.item_already_synced",
                  "uid_components": [
                    "scripts",
                    "scripts.github_sync_manager_enhanced",
                    "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager",
                    "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.item_already_synced"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "create_github_epic_enhanced",
                  "docstring": "Enhanced epic creation",
                  "line_range": [
                    562,
                    607
                  ],
                  "parameters": [
                    "self",
                    "item"
                  ],
                  "uid": "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.create_github_epic_enhanced",
                  "uid_components": [
                    "scripts",
                    "scripts.github_sync_manager_enhanced",
                    "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager",
                    "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.create_github_epic_enhanced"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "create_github_discussion_enhanced",
                  "docstring": "Enhanced discussion creation (placeholder - requires GraphQL)",
                  "line_range": [
                    609,
                    618
                  ],
                  "parameters": [
                    "self",
                    "item"
                  ],
                  "uid": "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.create_github_discussion_enhanced",
                  "uid_components": [
                    "scripts",
                    "scripts.github_sync_manager_enhanced",
                    "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager",
                    "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager.create_github_discussion_enhanced"
                  ],
                  "uid_type": "method"
                }
              ],
              "bases": [],
              "uid": "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager",
              "uid_components": [
                "scripts",
                "scripts.github_sync_manager_enhanced",
                "scripts.github_sync_manager_enhanced.EnhancedGitHubSyncManager"
              ],
              "uid_type": "class"
            }
          ],
          "callgraph": {
            "print_info": [
              "print"
            ],
            "print_success": [
              "print"
            ],
            "print_warning": [
              "print"
            ],
            "print_error": [
              "print"
            ],
            "print_step": [
              "print"
            ],
            "__init__": [
              "self.load_sync_log",
              "GitHubTokenManager",
              "Path",
              "print_info",
              "self.detect_repo_from_git"
            ],
            "load_env_file": [
              "open",
              "line.startswith",
              "Path",
              "value.strip",
              "line.strip",
              "key.strip",
              "env_file.exists",
              "line.split"
            ],
            "test_github_token": [
              "requests.get",
              "response.json"
            ],
            "check_gh_cli": [
              "subprocess.run"
            ],
            "get_token_from_gh_cli": [
              "subprocess.run"
            ],
            "get_github_token": [
              "self.test_github_token",
              "print_warning",
              "self.get_token_from_gh_cli",
              "os.getenv",
              "self.check_gh_cli"
            ],
            "detect_repo_from_git": [
              "url.endswith",
              "len",
              "subprocess.run",
              "url.replace",
              "url.startswith",
              "url.split",
              "print_info",
              "print_warning",
              "path.split"
            ],
            "load_sync_log": [
              "json.load",
              "open"
            ],
            "save_sync_log": [
              "json.dump",
              "open"
            ],
            "api_request": [
              "self._api_request_via_cli",
              "time.sleep",
              "print_error",
              "self._api_request_direct"
            ],
            "_api_request_direct": [
              "requests.get",
              "requests.post",
              "requests.patch",
              "response.json",
              "print_warning",
              "int",
              "ValueError",
              "response.raise_for_status",
              "print_error",
              "method.upper"
            ],
            "_api_request_via_cli": [
              "json.loads",
              "subprocess.run",
              "cmd.extend",
              "print_warning",
              "json.dumps",
              "print_error",
              "method.upper"
            ],
            "create_github_issue_enhanced": [
              "self._format_implementation_notes",
              "print_success",
              "labels.append",
              "self._format_acceptance_criteria",
              "print_info",
              "self.api_request",
              "item.get",
              "processing_meta.get"
            ],
            "_format_acceptance_criteria": [
              "criteria.extend",
              "criteria.append",
              "item.get"
            ],
            "_format_implementation_notes": [
              "item.get",
              "processing_meta.get",
              "notes.append"
            ],
            "validate_before_sync": [
              "repo_info.get",
              "print_success",
              "file_path.exists",
              "self.api_request",
              "user_info.get",
              "print_error",
              "print_step"
            ],
            "run_enhanced_sync": [
              "self.validate_before_sync",
              "print_success",
              "self.save_sync_log",
              "print",
              "print_info",
              "enumerate",
              "self.sync_category_enhanced",
              "datetime.now",
              "result.get",
              "print_step"
            ],
            "sync_category_enhanced": [
              "data.get",
              "open",
              "result.get",
              "file_path.exists",
              "json.load",
              "print_info",
              "self.item_already_synced",
              "self.create_github_issue_enhanced",
              "self.create_github_discussion_enhanced",
              "print_warning",
              "self.create_github_epic_enhanced",
              "print_error",
              "datetime.now",
              "item.get"
            ],
            "item_already_synced": [
              "item.get"
            ],
            "create_github_epic_enhanced": [
              "print_info",
              "self.api_request",
              "item.get",
              "print_success"
            ],
            "create_github_discussion_enhanced": [
              "print_info",
              "item.get",
              "print_warning"
            ],
            "main": [
              "argparse.ArgumentParser",
              "len",
              "parser.add_argument",
              "print_success",
              "result.get",
              "parser.parse_args",
              "EnhancedGitHubSyncManager",
              "print_error",
              "manager.run_enhanced_sync"
            ]
          },
          "dependencies": [
            "Any",
            "Dict",
            "List",
            "Optional",
            "Path",
            "argparse",
            "datetime",
            "json",
            "os",
            "pathlib",
            "requests",
            "subprocess",
            "sys",
            "time",
            "typing"
          ],
          "hash": "dee5ab49d5c48115c3b9b6df054a1160c44fb7addfa035958aa7db8619301d96",
          "uid": "scripts.github_sync_manager_enhanced",
          "uid_components": [
            "scripts",
            "scripts.github_sync_manager_enhanced"
          ],
          "uid_type": "module",
          "artifact_id": "676f670c-d4c4-a6a8-8ea5-b74ed18a5e27",
          "metrics": {
            "cyclomatic_complexity": 34,
            "lines_of_code": 280,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 15,
            "test_coverage": 0.0,
            "maintainability_index": 0
          },
          "markdown_anchor": {
            "id": "scripts-github_sync_manager_enhanced",
            "title": "Module: scripts.github_sync_manager_enhanced",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: scripts.github_sync_manager_enhanced](#scripts-github_sync_manager_enhanced)",
            "html_anchor": "<a id=\"scripts-github_sync_manager_enhanced\"></a>"
          }
        },
        {
          "module_id": "scripts.deploy_embedded_files",
          "path": "scripts/deploy_embedded_files.py",
          "category": "core",
          "module_doc": "",
          "functions": [
            {
              "name": "validate_json",
              "docstring": "",
              "line_range": [
                931,
                941
              ],
              "parameters": [
                "data",
                "schema",
                "base_path"
              ],
              "decorators": [],
              "uid": "scripts.deploy_embedded_files.validate_json",
              "uid_components": [
                "scripts",
                "scripts.deploy_embedded_files",
                "scripts.deploy_embedded_files.validate_json"
              ],
              "uid_type": "function"
            },
            {
              "name": "backup_files",
              "docstring": "",
              "line_range": [
                944,
                950
              ],
              "parameters": [
                "target_dir",
                "backup_root"
              ],
              "decorators": [],
              "uid": "scripts.deploy_embedded_files.backup_files",
              "uid_components": [
                "scripts",
                "scripts.deploy_embedded_files",
                "scripts.deploy_embedded_files.backup_files"
              ],
              "uid_type": "function"
            },
            {
              "name": "deploy_embedded_files",
              "docstring": "",
              "line_range": [
                953,
                1007
              ],
              "parameters": [],
              "decorators": [],
              "uid": "scripts.deploy_embedded_files.deploy_embedded_files",
              "uid_components": [
                "scripts",
                "scripts.deploy_embedded_files",
                "scripts.deploy_embedded_files.deploy_embedded_files"
              ],
              "uid_type": "function"
            },
            {
              "name": "main",
              "docstring": "",
              "line_range": [
                1010,
                1011
              ],
              "parameters": [],
              "decorators": [],
              "uid": "scripts.deploy_embedded_files.main",
              "uid_components": [
                "scripts",
                "scripts.deploy_embedded_files",
                "scripts.deploy_embedded_files.main"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [],
          "callgraph": {
            "validate_json": [
              "logger.warning",
              "logger.error",
              "RefResolver",
              "validate"
            ],
            "backup_files": [
              "datetime.now",
              "logger.info",
              "shutil.copytree",
              "target_dir.exists"
            ],
            "deploy_embedded_files": [
              "target_path.open",
              "target_path.exists",
              "EMBEDDED_FILES.get",
              "f.write",
              "logger.warning",
              "Path",
              "backup_files",
              "logger.info",
              "validate_json",
              "logger.error",
              "json.dump",
              "Path.cwd"
            ],
            "main": [
              "deploy_embedded_files"
            ]
          },
          "dependencies": [
            "Path",
            "RefResolver",
            "ValidationError",
            "datetime",
            "json",
            "jsonschema",
            "logging",
            "pathlib",
            "shutil",
            "validate"
          ],
          "hash": "965c984b688301f0d0c65fc65cc8c95a878218aec94afab5dca3b3c7f65cea19",
          "uid": "scripts.deploy_embedded_files",
          "uid_components": [
            "scripts",
            "scripts.deploy_embedded_files"
          ],
          "uid_type": "module",
          "artifact_id": "88839b6d-384b-584e-dc17-97a527e38fab",
          "metrics": {
            "cyclomatic_complexity": 4,
            "lines_of_code": 40,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 10,
            "test_coverage": 0.0,
            "maintainability_index": 80
          },
          "markdown_anchor": {
            "id": "scripts-deploy_embedded_files",
            "title": "Module: scripts.deploy_embedded_files",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: scripts.deploy_embedded_files](#scripts-deploy_embedded_files)",
            "html_anchor": "<a id=\"scripts-deploy_embedded_files\"></a>"
          }
        },
        {
          "module_id": "scripts.fix_hardcoded_usernames",
          "path": "scripts/fix_hardcoded_usernames.py",
          "category": "core",
          "module_doc": "Fix Hardcoded Usernames Script\nAutomatically detects and replaces hardcoded usernames with dynamic values from .env or git config.",
          "functions": [
            {
              "name": "main",
              "docstring": "Main execution function.",
              "line_range": [
                234,
                288
              ],
              "parameters": [],
              "decorators": [],
              "uid": "scripts.fix_hardcoded_usernames.main",
              "uid_components": [
                "scripts",
                "scripts.fix_hardcoded_usernames",
                "scripts.fix_hardcoded_usernames.main"
              ],
              "uid_type": "function"
            },
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                22,
                24
              ],
              "parameters": [
                "self",
                "project_root"
              ],
              "decorators": [],
              "uid": "scripts.fix_hardcoded_usernames.__init__",
              "uid_components": [
                "scripts",
                "scripts.fix_hardcoded_usernames",
                "scripts.fix_hardcoded_usernames.__init__"
              ],
              "uid_type": "function"
            },
            {
              "name": "_detect_user_info",
              "docstring": "Detect user info from .env, git config, or environment.",
              "line_range": [
                26,
                62
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "scripts.fix_hardcoded_usernames._detect_user_info",
              "uid_components": [
                "scripts",
                "scripts.fix_hardcoded_usernames",
                "scripts.fix_hardcoded_usernames._detect_user_info"
              ],
              "uid_type": "function"
            },
            {
              "name": "_load_from_env",
              "docstring": "Load user info from .env file.",
              "line_range": [
                64,
                86
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "scripts.fix_hardcoded_usernames._load_from_env",
              "uid_components": [
                "scripts",
                "scripts.fix_hardcoded_usernames",
                "scripts.fix_hardcoded_usernames._load_from_env"
              ],
              "uid_type": "function"
            },
            {
              "name": "_load_from_git",
              "docstring": "Load user info from git config.",
              "line_range": [
                88,
                120
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "scripts.fix_hardcoded_usernames._load_from_git",
              "uid_components": [
                "scripts",
                "scripts.fix_hardcoded_usernames",
                "scripts.fix_hardcoded_usernames._load_from_git"
              ],
              "uid_type": "function"
            },
            {
              "name": "_load_from_environment",
              "docstring": "Load user info from environment variables.",
              "line_range": [
                122,
                128
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "scripts.fix_hardcoded_usernames._load_from_environment",
              "uid_components": [
                "scripts",
                "scripts.fix_hardcoded_usernames",
                "scripts.fix_hardcoded_usernames._load_from_environment"
              ],
              "uid_type": "function"
            },
            {
              "name": "get_user_info",
              "docstring": "Get detected user information.",
              "line_range": [
                130,
                132
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "scripts.fix_hardcoded_usernames.get_user_info",
              "uid_components": [
                "scripts",
                "scripts.fix_hardcoded_usernames",
                "scripts.fix_hardcoded_usernames.get_user_info"
              ],
              "uid_type": "function"
            },
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                138,
                148
              ],
              "parameters": [
                "self",
                "project_root"
              ],
              "decorators": [],
              "uid": "scripts.fix_hardcoded_usernames.__init__",
              "uid_components": [
                "scripts",
                "scripts.fix_hardcoded_usernames",
                "scripts.fix_hardcoded_usernames.__init__"
              ],
              "uid_type": "function"
            },
            {
              "name": "scan_files",
              "docstring": "Scan for files containing hardcoded usernames.",
              "line_range": [
                150,
                172
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "scripts.fix_hardcoded_usernames.scan_files",
              "uid_components": [
                "scripts",
                "scripts.fix_hardcoded_usernames",
                "scripts.fix_hardcoded_usernames.scan_files"
              ],
              "uid_type": "function"
            },
            {
              "name": "fix_file",
              "docstring": "Fix hardcoded usernames in a single file.",
              "line_range": [
                174,
                200
              ],
              "parameters": [
                "self",
                "file_path",
                "dry_run"
              ],
              "decorators": [],
              "uid": "scripts.fix_hardcoded_usernames.fix_file",
              "uid_components": [
                "scripts",
                "scripts.fix_hardcoded_usernames",
                "scripts.fix_hardcoded_usernames.fix_file"
              ],
              "uid_type": "function"
            },
            {
              "name": "fix_all_files",
              "docstring": "Fix hardcoded usernames in all project files.",
              "line_range": [
                202,
                214
              ],
              "parameters": [
                "self",
                "dry_run"
              ],
              "decorators": [],
              "uid": "scripts.fix_hardcoded_usernames.fix_all_files",
              "uid_components": [
                "scripts",
                "scripts.fix_hardcoded_usernames",
                "scripts.fix_hardcoded_usernames.fix_all_files"
              ],
              "uid_type": "function"
            },
            {
              "name": "generate_env_template",
              "docstring": "Generate .env template with required variables.",
              "line_range": [
                216,
                231
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "scripts.fix_hardcoded_usernames.generate_env_template",
              "uid_components": [
                "scripts",
                "scripts.fix_hardcoded_usernames",
                "scripts.fix_hardcoded_usernames.generate_env_template"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [
            {
              "name": "UserInfoDetector",
              "docstring": "Detect user information from various sources.",
              "line_range": [
                19,
                132
              ],
              "methods": [
                {
                  "name": "__init__",
                  "docstring": "",
                  "line_range": [
                    22,
                    24
                  ],
                  "parameters": [
                    "self",
                    "project_root"
                  ],
                  "uid": "scripts.fix_hardcoded_usernames.UserInfoDetector.__init__",
                  "uid_components": [
                    "scripts",
                    "scripts.fix_hardcoded_usernames",
                    "scripts.fix_hardcoded_usernames.UserInfoDetector",
                    "scripts.fix_hardcoded_usernames.UserInfoDetector.__init__"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_detect_user_info",
                  "docstring": "Detect user info from .env, git config, or environment.",
                  "line_range": [
                    26,
                    62
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "scripts.fix_hardcoded_usernames.UserInfoDetector._detect_user_info",
                  "uid_components": [
                    "scripts",
                    "scripts.fix_hardcoded_usernames",
                    "scripts.fix_hardcoded_usernames.UserInfoDetector",
                    "scripts.fix_hardcoded_usernames.UserInfoDetector._detect_user_info"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_load_from_env",
                  "docstring": "Load user info from .env file.",
                  "line_range": [
                    64,
                    86
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "scripts.fix_hardcoded_usernames.UserInfoDetector._load_from_env",
                  "uid_components": [
                    "scripts",
                    "scripts.fix_hardcoded_usernames",
                    "scripts.fix_hardcoded_usernames.UserInfoDetector",
                    "scripts.fix_hardcoded_usernames.UserInfoDetector._load_from_env"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_load_from_git",
                  "docstring": "Load user info from git config.",
                  "line_range": [
                    88,
                    120
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "scripts.fix_hardcoded_usernames.UserInfoDetector._load_from_git",
                  "uid_components": [
                    "scripts",
                    "scripts.fix_hardcoded_usernames",
                    "scripts.fix_hardcoded_usernames.UserInfoDetector",
                    "scripts.fix_hardcoded_usernames.UserInfoDetector._load_from_git"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_load_from_environment",
                  "docstring": "Load user info from environment variables.",
                  "line_range": [
                    122,
                    128
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "scripts.fix_hardcoded_usernames.UserInfoDetector._load_from_environment",
                  "uid_components": [
                    "scripts",
                    "scripts.fix_hardcoded_usernames",
                    "scripts.fix_hardcoded_usernames.UserInfoDetector",
                    "scripts.fix_hardcoded_usernames.UserInfoDetector._load_from_environment"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "get_user_info",
                  "docstring": "Get detected user information.",
                  "line_range": [
                    130,
                    132
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "scripts.fix_hardcoded_usernames.UserInfoDetector.get_user_info",
                  "uid_components": [
                    "scripts",
                    "scripts.fix_hardcoded_usernames",
                    "scripts.fix_hardcoded_usernames.UserInfoDetector",
                    "scripts.fix_hardcoded_usernames.UserInfoDetector.get_user_info"
                  ],
                  "uid_type": "method"
                }
              ],
              "bases": [],
              "uid": "scripts.fix_hardcoded_usernames.UserInfoDetector",
              "uid_components": [
                "scripts",
                "scripts.fix_hardcoded_usernames",
                "scripts.fix_hardcoded_usernames.UserInfoDetector"
              ],
              "uid_type": "class"
            },
            {
              "name": "HardcodeFixer",
              "docstring": "Fix hardcoded usernames in project files.",
              "line_range": [
                135,
                231
              ],
              "methods": [
                {
                  "name": "__init__",
                  "docstring": "",
                  "line_range": [
                    138,
                    148
                  ],
                  "parameters": [
                    "self",
                    "project_root"
                  ],
                  "uid": "scripts.fix_hardcoded_usernames.HardcodeFixer.__init__",
                  "uid_components": [
                    "scripts",
                    "scripts.fix_hardcoded_usernames",
                    "scripts.fix_hardcoded_usernames.HardcodeFixer",
                    "scripts.fix_hardcoded_usernames.HardcodeFixer.__init__"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "scan_files",
                  "docstring": "Scan for files containing hardcoded usernames.",
                  "line_range": [
                    150,
                    172
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "scripts.fix_hardcoded_usernames.HardcodeFixer.scan_files",
                  "uid_components": [
                    "scripts",
                    "scripts.fix_hardcoded_usernames",
                    "scripts.fix_hardcoded_usernames.HardcodeFixer",
                    "scripts.fix_hardcoded_usernames.HardcodeFixer.scan_files"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "fix_file",
                  "docstring": "Fix hardcoded usernames in a single file.",
                  "line_range": [
                    174,
                    200
                  ],
                  "parameters": [
                    "self",
                    "file_path",
                    "dry_run"
                  ],
                  "uid": "scripts.fix_hardcoded_usernames.HardcodeFixer.fix_file",
                  "uid_components": [
                    "scripts",
                    "scripts.fix_hardcoded_usernames",
                    "scripts.fix_hardcoded_usernames.HardcodeFixer",
                    "scripts.fix_hardcoded_usernames.HardcodeFixer.fix_file"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "fix_all_files",
                  "docstring": "Fix hardcoded usernames in all project files.",
                  "line_range": [
                    202,
                    214
                  ],
                  "parameters": [
                    "self",
                    "dry_run"
                  ],
                  "uid": "scripts.fix_hardcoded_usernames.HardcodeFixer.fix_all_files",
                  "uid_components": [
                    "scripts",
                    "scripts.fix_hardcoded_usernames",
                    "scripts.fix_hardcoded_usernames.HardcodeFixer",
                    "scripts.fix_hardcoded_usernames.HardcodeFixer.fix_all_files"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "generate_env_template",
                  "docstring": "Generate .env template with required variables.",
                  "line_range": [
                    216,
                    231
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "scripts.fix_hardcoded_usernames.HardcodeFixer.generate_env_template",
                  "uid_components": [
                    "scripts",
                    "scripts.fix_hardcoded_usernames",
                    "scripts.fix_hardcoded_usernames.HardcodeFixer",
                    "scripts.fix_hardcoded_usernames.HardcodeFixer.generate_env_template"
                  ],
                  "uid_type": "method"
                }
              ],
              "bases": [],
              "uid": "scripts.fix_hardcoded_usernames.HardcodeFixer",
              "uid_components": [
                "scripts",
                "scripts.fix_hardcoded_usernames",
                "scripts.fix_hardcoded_usernames.HardcodeFixer"
              ],
              "uid_type": "class"
            }
          ],
          "callgraph": {
            "__init__": [
              "UserInfoDetector",
              "Path"
            ],
            "_detect_user_info": [
              "self._load_from_git",
              "user_info.update",
              "env_vars.items",
              "self._load_from_environment",
              "logger.info",
              "self._load_from_env",
              "env_info.items",
              "user_info.get"
            ],
            "_load_from_env": [
              "open",
              "line.startswith",
              "value.strip",
              "logger.error",
              "line.strip",
              "key.strip",
              "env_file.exists",
              "line.split",
              "env_vars.get"
            ],
            "_load_from_git": [
              "subprocess.run",
              "logger.error",
              "re.search",
              "match.group"
            ],
            "_load_from_environment": [],
            "get_user_info": [],
            "scan_files": [
              "open",
              "logger.warning",
              "content.count",
              "f.read",
              "str",
              "files_with_hardcode.append",
              "any"
            ],
            "fix_file": [
              "f.write",
              "open",
              "content.count",
              "f.read",
              "logger.info",
              "logger.error",
              "content.replace"
            ],
            "fix_all_files": [
              "len",
              "logger.info",
              "str",
              "self.scan_files",
              "self.fix_file"
            ],
            "generate_env_template": [],
            "main": [
              "fixer.fix_all_files",
              "results.items",
              "argparse.ArgumentParser",
              "len",
              "parser.add_argument",
              "fixer.generate_env_template",
              "print",
              "open",
              "HardcodeFixer",
              "Path",
              "parser.parse_args",
              "logger.info",
              "fixer.scan_files",
              "replacements.items",
              "f.write"
            ]
          },
          "dependencies": [
            "Dict",
            "List",
            "Optional",
            "Path",
            "Tuple",
            "argparse",
            "json",
            "logging",
            "os",
            "pathlib",
            "re",
            "subprocess",
            "typing"
          ],
          "hash": "04fdd50dde3b144c4c93f598ab0748be398c1287e006924d5a573d5b520395a3",
          "uid": "scripts.fix_hardcoded_usernames",
          "uid_components": [
            "scripts",
            "scripts.fix_hardcoded_usernames"
          ],
          "uid_type": "module",
          "artifact_id": "9b8f8595-817b-ba48-6d78-80c7370b6498",
          "metrics": {
            "cyclomatic_complexity": 16,
            "lines_of_code": 120,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 13,
            "test_coverage": 0.0,
            "maintainability_index": 20
          },
          "markdown_anchor": {
            "id": "scripts-fix_hardcoded_usernames",
            "title": "Module: scripts.fix_hardcoded_usernames",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: scripts.fix_hardcoded_usernames](#scripts-fix_hardcoded_usernames)",
            "html_anchor": "<a id=\"scripts-fix_hardcoded_usernames\"></a>"
          }
        },
        {
          "module_id": "scripts.create_tasks_index",
          "path": "scripts/create_tasks_index.py",
          "category": "core",
          "module_doc": "Tasks Index Creator\nScans all documentation files and creates comprehensive index of tasks, EPICs, TODOs, and other actionable items.",
          "functions": [
            {
              "name": "main",
              "docstring": "Main execution function.",
              "line_range": [
                469,
                515
              ],
              "parameters": [],
              "decorators": [],
              "uid": "scripts.create_tasks_index.main",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index.main"
              ],
              "uid_type": "function"
            },
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                42,
                44
              ],
              "parameters": [
                "self",
                "project_root"
              ],
              "decorators": [],
              "uid": "scripts.create_tasks_index.__init__",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index.__init__"
              ],
              "uid_type": "function"
            },
            {
              "name": "_init_patterns",
              "docstring": "Initialize regex patterns for task extraction.",
              "line_range": [
                46,
                73
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "scripts.create_tasks_index._init_patterns",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index._init_patterns"
              ],
              "uid_type": "function"
            },
            {
              "name": "extract_from_markdown",
              "docstring": "Extract tasks from markdown file.",
              "line_range": [
                75,
                107
              ],
              "parameters": [
                "self",
                "file_path"
              ],
              "decorators": [],
              "uid": "scripts.create_tasks_index.extract_from_markdown",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index.extract_from_markdown"
              ],
              "uid_type": "function"
            },
            {
              "name": "_extract_status",
              "docstring": "Extract document status.",
              "line_range": [
                109,
                120
              ],
              "parameters": [
                "self",
                "content"
              ],
              "decorators": [],
              "uid": "scripts.create_tasks_index._extract_status",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index._extract_status"
              ],
              "uid_type": "function"
            },
            {
              "name": "_extract_priority",
              "docstring": "Extract document priority.",
              "line_range": [
                122,
                135
              ],
              "parameters": [
                "self",
                "content"
              ],
              "decorators": [],
              "uid": "scripts.create_tasks_index._extract_priority",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index._extract_priority"
              ],
              "uid_type": "function"
            },
            {
              "name": "_extract_date",
              "docstring": "Extract document date.",
              "line_range": [
                137,
                142
              ],
              "parameters": [
                "self",
                "content"
              ],
              "decorators": [],
              "uid": "scripts.create_tasks_index._extract_date",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index._extract_date"
              ],
              "uid_type": "function"
            },
            {
              "name": "_extract_epics",
              "docstring": "Extract EPIC items.",
              "line_range": [
                144,
                168
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ],
              "decorators": [],
              "uid": "scripts.create_tasks_index._extract_epics",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index._extract_epics"
              ],
              "uid_type": "function"
            },
            {
              "name": "_extract_tasks",
              "docstring": "Extract explicit task items.",
              "line_range": [
                170,
                194
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ],
              "decorators": [],
              "uid": "scripts.create_tasks_index._extract_tasks",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index._extract_tasks"
              ],
              "uid_type": "function"
            },
            {
              "name": "_extract_todos",
              "docstring": "Extract TODO items.",
              "line_range": [
                196,
                219
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ],
              "decorators": [],
              "uid": "scripts.create_tasks_index._extract_todos",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index._extract_todos"
              ],
              "uid_type": "function"
            },
            {
              "name": "_extract_phases",
              "docstring": "Extract phase/step items.",
              "line_range": [
                221,
                245
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ],
              "decorators": [],
              "uid": "scripts.create_tasks_index._extract_phases",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index._extract_phases"
              ],
              "uid_type": "function"
            },
            {
              "name": "_extract_checkboxes",
              "docstring": "Extract checkbox items as tasks.",
              "line_range": [
                247,
                275
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ],
              "decorators": [],
              "uid": "scripts.create_tasks_index._extract_checkboxes",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index._extract_checkboxes"
              ],
              "uid_type": "function"
            },
            {
              "name": "_extract_context",
              "docstring": "Extract surrounding context for a match.",
              "line_range": [
                277,
                286
              ],
              "parameters": [
                "self",
                "content",
                "start",
                "end",
                "context_lines"
              ],
              "decorators": [],
              "uid": "scripts.create_tasks_index._extract_context",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index._extract_context"
              ],
              "uid_type": "function"
            },
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                292,
                294
              ],
              "parameters": [
                "self",
                "project_root"
              ],
              "decorators": [],
              "uid": "scripts.create_tasks_index.__init__",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index.__init__"
              ],
              "uid_type": "function"
            },
            {
              "name": "scan_documentation",
              "docstring": "Scan all documentation files for tasks.",
              "line_range": [
                296,
                314
              ],
              "parameters": [
                "self"
              ],
              "decorators": [],
              "uid": "scripts.create_tasks_index.scan_documentation",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index.scan_documentation"
              ],
              "uid_type": "function"
            },
            {
              "name": "generate_index",
              "docstring": "Generate comprehensive task index.",
              "line_range": [
                316,
                367
              ],
              "parameters": [
                "self",
                "tasks"
              ],
              "decorators": [],
              "uid": "scripts.create_tasks_index.generate_index",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index.generate_index"
              ],
              "uid_type": "function"
            },
            {
              "name": "generate_summary_report",
              "docstring": "Generate human-readable summary report.",
              "line_range": [
                369,
                446
              ],
              "parameters": [
                "self",
                "index"
              ],
              "decorators": [],
              "uid": "scripts.create_tasks_index.generate_summary_report",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index.generate_summary_report"
              ],
              "uid_type": "function"
            },
            {
              "name": "save_index",
              "docstring": "Save index and summary to files.",
              "line_range": [
                448,
                466
              ],
              "parameters": [
                "self",
                "index",
                "summary",
                "output_dir"
              ],
              "decorators": [],
              "uid": "scripts.create_tasks_index.save_index",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index.save_index"
              ],
              "uid_type": "function"
            }
          ],
          "classes": [
            {
              "name": "Task",
              "docstring": "Represents a single task or actionable item.",
              "line_range": [
                21,
                36
              ],
              "methods": [],
              "bases": [],
              "uid": "scripts.create_tasks_index.Task",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index.Task"
              ],
              "uid_type": "class"
            },
            {
              "name": "TaskExtractor",
              "docstring": "Extract tasks from various document formats.",
              "line_range": [
                39,
                286
              ],
              "methods": [
                {
                  "name": "__init__",
                  "docstring": "",
                  "line_range": [
                    42,
                    44
                  ],
                  "parameters": [
                    "self",
                    "project_root"
                  ],
                  "uid": "scripts.create_tasks_index.TaskExtractor.__init__",
                  "uid_components": [
                    "scripts",
                    "scripts.create_tasks_index",
                    "scripts.create_tasks_index.TaskExtractor",
                    "scripts.create_tasks_index.TaskExtractor.__init__"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_init_patterns",
                  "docstring": "Initialize regex patterns for task extraction.",
                  "line_range": [
                    46,
                    73
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "scripts.create_tasks_index.TaskExtractor._init_patterns",
                  "uid_components": [
                    "scripts",
                    "scripts.create_tasks_index",
                    "scripts.create_tasks_index.TaskExtractor",
                    "scripts.create_tasks_index.TaskExtractor._init_patterns"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "extract_from_markdown",
                  "docstring": "Extract tasks from markdown file.",
                  "line_range": [
                    75,
                    107
                  ],
                  "parameters": [
                    "self",
                    "file_path"
                  ],
                  "uid": "scripts.create_tasks_index.TaskExtractor.extract_from_markdown",
                  "uid_components": [
                    "scripts",
                    "scripts.create_tasks_index",
                    "scripts.create_tasks_index.TaskExtractor",
                    "scripts.create_tasks_index.TaskExtractor.extract_from_markdown"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_extract_status",
                  "docstring": "Extract document status.",
                  "line_range": [
                    109,
                    120
                  ],
                  "parameters": [
                    "self",
                    "content"
                  ],
                  "uid": "scripts.create_tasks_index.TaskExtractor._extract_status",
                  "uid_components": [
                    "scripts",
                    "scripts.create_tasks_index",
                    "scripts.create_tasks_index.TaskExtractor",
                    "scripts.create_tasks_index.TaskExtractor._extract_status"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_extract_priority",
                  "docstring": "Extract document priority.",
                  "line_range": [
                    122,
                    135
                  ],
                  "parameters": [
                    "self",
                    "content"
                  ],
                  "uid": "scripts.create_tasks_index.TaskExtractor._extract_priority",
                  "uid_components": [
                    "scripts",
                    "scripts.create_tasks_index",
                    "scripts.create_tasks_index.TaskExtractor",
                    "scripts.create_tasks_index.TaskExtractor._extract_priority"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_extract_date",
                  "docstring": "Extract document date.",
                  "line_range": [
                    137,
                    142
                  ],
                  "parameters": [
                    "self",
                    "content"
                  ],
                  "uid": "scripts.create_tasks_index.TaskExtractor._extract_date",
                  "uid_components": [
                    "scripts",
                    "scripts.create_tasks_index",
                    "scripts.create_tasks_index.TaskExtractor",
                    "scripts.create_tasks_index.TaskExtractor._extract_date"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_extract_epics",
                  "docstring": "Extract EPIC items.",
                  "line_range": [
                    144,
                    168
                  ],
                  "parameters": [
                    "self",
                    "content",
                    "file_path",
                    "doc_status",
                    "doc_priority",
                    "doc_date"
                  ],
                  "uid": "scripts.create_tasks_index.TaskExtractor._extract_epics",
                  "uid_components": [
                    "scripts",
                    "scripts.create_tasks_index",
                    "scripts.create_tasks_index.TaskExtractor",
                    "scripts.create_tasks_index.TaskExtractor._extract_epics"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_extract_tasks",
                  "docstring": "Extract explicit task items.",
                  "line_range": [
                    170,
                    194
                  ],
                  "parameters": [
                    "self",
                    "content",
                    "file_path",
                    "doc_status",
                    "doc_priority",
                    "doc_date"
                  ],
                  "uid": "scripts.create_tasks_index.TaskExtractor._extract_tasks",
                  "uid_components": [
                    "scripts",
                    "scripts.create_tasks_index",
                    "scripts.create_tasks_index.TaskExtractor",
                    "scripts.create_tasks_index.TaskExtractor._extract_tasks"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_extract_todos",
                  "docstring": "Extract TODO items.",
                  "line_range": [
                    196,
                    219
                  ],
                  "parameters": [
                    "self",
                    "content",
                    "file_path",
                    "doc_status",
                    "doc_priority",
                    "doc_date"
                  ],
                  "uid": "scripts.create_tasks_index.TaskExtractor._extract_todos",
                  "uid_components": [
                    "scripts",
                    "scripts.create_tasks_index",
                    "scripts.create_tasks_index.TaskExtractor",
                    "scripts.create_tasks_index.TaskExtractor._extract_todos"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_extract_phases",
                  "docstring": "Extract phase/step items.",
                  "line_range": [
                    221,
                    245
                  ],
                  "parameters": [
                    "self",
                    "content",
                    "file_path",
                    "doc_status",
                    "doc_priority",
                    "doc_date"
                  ],
                  "uid": "scripts.create_tasks_index.TaskExtractor._extract_phases",
                  "uid_components": [
                    "scripts",
                    "scripts.create_tasks_index",
                    "scripts.create_tasks_index.TaskExtractor",
                    "scripts.create_tasks_index.TaskExtractor._extract_phases"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_extract_checkboxes",
                  "docstring": "Extract checkbox items as tasks.",
                  "line_range": [
                    247,
                    275
                  ],
                  "parameters": [
                    "self",
                    "content",
                    "file_path",
                    "doc_status",
                    "doc_priority",
                    "doc_date"
                  ],
                  "uid": "scripts.create_tasks_index.TaskExtractor._extract_checkboxes",
                  "uid_components": [
                    "scripts",
                    "scripts.create_tasks_index",
                    "scripts.create_tasks_index.TaskExtractor",
                    "scripts.create_tasks_index.TaskExtractor._extract_checkboxes"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "_extract_context",
                  "docstring": "Extract surrounding context for a match.",
                  "line_range": [
                    277,
                    286
                  ],
                  "parameters": [
                    "self",
                    "content",
                    "start",
                    "end",
                    "context_lines"
                  ],
                  "uid": "scripts.create_tasks_index.TaskExtractor._extract_context",
                  "uid_components": [
                    "scripts",
                    "scripts.create_tasks_index",
                    "scripts.create_tasks_index.TaskExtractor",
                    "scripts.create_tasks_index.TaskExtractor._extract_context"
                  ],
                  "uid_type": "method"
                }
              ],
              "bases": [],
              "uid": "scripts.create_tasks_index.TaskExtractor",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index.TaskExtractor"
              ],
              "uid_type": "class"
            },
            {
              "name": "TaskIndexGenerator",
              "docstring": "Generate comprehensive task index.",
              "line_range": [
                289,
                466
              ],
              "methods": [
                {
                  "name": "__init__",
                  "docstring": "",
                  "line_range": [
                    292,
                    294
                  ],
                  "parameters": [
                    "self",
                    "project_root"
                  ],
                  "uid": "scripts.create_tasks_index.TaskIndexGenerator.__init__",
                  "uid_components": [
                    "scripts",
                    "scripts.create_tasks_index",
                    "scripts.create_tasks_index.TaskIndexGenerator",
                    "scripts.create_tasks_index.TaskIndexGenerator.__init__"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "scan_documentation",
                  "docstring": "Scan all documentation files for tasks.",
                  "line_range": [
                    296,
                    314
                  ],
                  "parameters": [
                    "self"
                  ],
                  "uid": "scripts.create_tasks_index.TaskIndexGenerator.scan_documentation",
                  "uid_components": [
                    "scripts",
                    "scripts.create_tasks_index",
                    "scripts.create_tasks_index.TaskIndexGenerator",
                    "scripts.create_tasks_index.TaskIndexGenerator.scan_documentation"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "generate_index",
                  "docstring": "Generate comprehensive task index.",
                  "line_range": [
                    316,
                    367
                  ],
                  "parameters": [
                    "self",
                    "tasks"
                  ],
                  "uid": "scripts.create_tasks_index.TaskIndexGenerator.generate_index",
                  "uid_components": [
                    "scripts",
                    "scripts.create_tasks_index",
                    "scripts.create_tasks_index.TaskIndexGenerator",
                    "scripts.create_tasks_index.TaskIndexGenerator.generate_index"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "generate_summary_report",
                  "docstring": "Generate human-readable summary report.",
                  "line_range": [
                    369,
                    446
                  ],
                  "parameters": [
                    "self",
                    "index"
                  ],
                  "uid": "scripts.create_tasks_index.TaskIndexGenerator.generate_summary_report",
                  "uid_components": [
                    "scripts",
                    "scripts.create_tasks_index",
                    "scripts.create_tasks_index.TaskIndexGenerator",
                    "scripts.create_tasks_index.TaskIndexGenerator.generate_summary_report"
                  ],
                  "uid_type": "method"
                },
                {
                  "name": "save_index",
                  "docstring": "Save index and summary to files.",
                  "line_range": [
                    448,
                    466
                  ],
                  "parameters": [
                    "self",
                    "index",
                    "summary",
                    "output_dir"
                  ],
                  "uid": "scripts.create_tasks_index.TaskIndexGenerator.save_index",
                  "uid_components": [
                    "scripts",
                    "scripts.create_tasks_index",
                    "scripts.create_tasks_index.TaskIndexGenerator",
                    "scripts.create_tasks_index.TaskIndexGenerator.save_index"
                  ],
                  "uid_type": "method"
                }
              ],
              "bases": [],
              "uid": "scripts.create_tasks_index.TaskIndexGenerator",
              "uid_components": [
                "scripts",
                "scripts.create_tasks_index",
                "scripts.create_tasks_index.TaskIndexGenerator"
              ],
              "uid_type": "class"
            }
          ],
          "callgraph": {
            "__init__": [
              "TaskExtractor",
              "Path"
            ],
            "_init_patterns": [
              "re.compile"
            ],
            "extract_from_markdown": [
              "self._extract_date",
              "self._extract_priority",
              "self._extract_status",
              "open",
              "self._extract_phases",
              "self._extract_todos",
              "f.read",
              "logger.error",
              "self._extract_checkboxes",
              "self._extract_tasks",
              "tasks.extend",
              "self._extract_epics"
            ],
            "_extract_status": [
              "match.group"
            ],
            "_extract_priority": [
              "match.group"
            ],
            "_extract_date": [
              "datetime.now",
              "match.group"
            ],
            "_extract_epics": [
              "self._extract_context",
              "tasks.append",
              "Task",
              "str",
              "match.start",
              "match.end",
              "match.group"
            ],
            "_extract_tasks": [
              "self._extract_context",
              "tasks.append",
              "Task",
              "str",
              "match.start",
              "match.end",
              "match.group"
            ],
            "_extract_todos": [
              "tasks.append",
              "Task",
              "str",
              "match.start",
              "match.group"
            ],
            "_extract_phases": [
              "self._extract_context",
              "tasks.append",
              "Task",
              "str",
              "match.start",
              "match.end",
              "match.group"
            ],
            "_extract_checkboxes": [
              "any",
              "tasks.append",
              "Task",
              "str",
              "match.start",
              "task_title.upper",
              "match.group"
            ],
            "_extract_context": [
              "len",
              "max",
              "context.strip",
              "content.split",
              "min"
            ],
            "scan_documentation": [
              "all_tasks.extend",
              "docs_dir.exists",
              "docs_dir.glob",
              "logger.info"
            ],
            "generate_index": [
              "len",
              "by_priority.items",
              "datetime.now",
              "by_status.items",
              "by_file.items",
              "asdict",
              "by_category.items"
            ],
            "generate_summary_report": [
              "file_categories.items",
              "len",
              "category.upper",
              "status.upper",
              "priority.upper",
              "Path",
              "sorted"
            ],
            "save_index": [
              "output_path.mkdir",
              "f.write",
              "open",
              "Path",
              "logger.info",
              "json.dump"
            ],
            "main": [
              "TaskIndexGenerator",
              "by_status.get",
              "argparse.ArgumentParser",
              "len",
              "parser.add_argument",
              "by_category.items",
              "print",
              "generator.save_index",
              "by_category.get",
              "generator.scan_documentation",
              "parser.parse_args",
              "generator.generate_summary_report",
              "logger.info",
              "by_status.items",
              "sorted",
              "generator.generate_index"
            ]
          },
          "dependencies": [
            "Dict",
            "List",
            "Optional",
            "Path",
            "Tuple",
            "argparse",
            "asdict",
            "dataclass",
            "dataclasses",
            "datetime",
            "json",
            "logging",
            "os",
            "pathlib",
            "re",
            "typing"
          ],
          "hash": "8dc454229e01725267e1ece8a1363faf1501013df5f34f371865de1d1d386035",
          "uid": "scripts.create_tasks_index",
          "uid_components": [
            "scripts",
            "scripts.create_tasks_index"
          ],
          "uid_type": "module",
          "artifact_id": "483f20d6-e58e-e1a6-0ef8-fe7c456c9b30",
          "metrics": {
            "cyclomatic_complexity": 24,
            "lines_of_code": 180,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 16,
            "test_coverage": 0.0,
            "maintainability_index": 0
          },
          "markdown_anchor": {
            "id": "scripts-create_tasks_index",
            "title": "Module: scripts.create_tasks_index",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: scripts.create_tasks_index](#scripts-create_tasks_index)",
            "html_anchor": "<a id=\"scripts-create_tasks_index\"></a>"
          }
        }
      ],
      "team": [
        {
          "module_id": "scripts.team.__init__",
          "path": "scripts/team/__init__.py",
          "category": "cli",
          "module_doc": "",
          "functions": [],
          "classes": [],
          "callgraph": {},
          "dependencies": [],
          "hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
          "uid": "scripts.team.__init__",
          "uid_components": [
            "scripts",
            "scripts.team",
            "scripts.team.__init__"
          ],
          "uid_type": "module",
          "artifact_id": "2c2ae172-96a2-2dc7-da90-41914347e1e8",
          "metrics": {
            "cyclomatic_complexity": 0,
            "lines_of_code": 0,
            "call_depth": 0,
            "parameter_count": 0,
            "dependencies_count": 0,
            "test_coverage": 0.0,
            "maintainability_index": 100
          },
          "markdown_anchor": {
            "id": "scripts-team-__init__",
            "title": "Module: scripts.team.__init__",
            "level": 2,
            "type": "module",
            "markdown_link": "[Module: scripts.team.__init__](#scripts-team-__init__)",
            "html_anchor": "<a id=\"scripts-team-__init__\"></a>"
          }
        }
      ]
    }
  },
  "global_metrics": {
    "total_modules": 81,
    "total_functions": 479,
    "total_classes": 92,
    "total_complexity": 663,
    "average_complexity": 8.19
  }
}