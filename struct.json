{
  "metadata": {
    "project_name": "llmstruct",
    "description": "Utility for generating structured JSON for codebases",
    "version": "2025-05-31T16:25:34.474494Z",
    "authors": [
      {
        "name": "Mikhail Stepanov",
        "github": "kpblcaoo",
        "email": "kpblcaoo@gmail.com"
      }
    ],
    "instructions": [
      "Follow best practices, warn if instructions conflict with them",
      "Preserve functionality, ensure idempotency",
      "Use attached struct.json for context and navigation",
      "Request missing modules or functions if needed",
      "Regenerate JSON for significant changes, track via Git and artifacts",
      "Use internal comments for descriptions, append brief summary"
    ],
    "goals": {
      "goals": [
        "Create universal JSON format for codebase structure (modules, functions, classes, calls, metadata)",
        "Ensure extensibility for new languages and entity types",
        "Develop modular, plugin-based parsers for new languages",
        "Maintain an open, RFC-style documented format",
        "Integrate with LLMs by generating and attaching JSON structure to queries"
      ]
    },
    "stats": {
      "modules_count": 130,
      "functions_count": 1311,
      "classes_count": 140,
      "call_edges_count": 3636
    },
    "artifact_id": "ddbf6d6d-936b-4988-8733-63ca9386c1b2",
    "summary": "Structured JSON for llmstruct codebase",
    "tags": [
      "codebase",
      "automation"
    ],
    "folder_structure": [
      {
        "path": ".",
        "type": "directory",
        "artifact_id": "b413c07d-e4d7-46d7-b66a-2bb53d5b8322",
        "metadata": {}
      },
      {
        "path": ".ORCHESTRATOR_PLAN",
        "type": "directory",
        "artifact_id": "47b7d430-eb67-4624-b02a-58ab0ff85bc0",
        "metadata": {}
      },
      {
        "path": ".ORCHESTRATOR_PLAN/MASTER_ORCHESTRATOR_PLAN.md",
        "type": "file",
        "artifact_id": "3d3db59f-94cd-430a-8c93-b6438140ebb8",
        "metadata": {}
      },
      {
        "path": ".ORCHESTRATOR_PLAN/consultations",
        "type": "directory",
        "artifact_id": "d7bb1651-a4c9-49ec-95d5-f5d453314b23",
        "metadata": {}
      },
      {
        "path": ".ORCHESTRATOR_PLAN/context",
        "type": "directory",
        "artifact_id": "84d8c318-7335-421e-a399-40ac2fdc232b",
        "metadata": {}
      },
      {
        "path": ".ORCHESTRATOR_PLAN/context/project_context.json",
        "type": "file",
        "artifact_id": "992935d8-78af-489d-ae9b-ee0f72974278",
        "metadata": {}
      },
      {
        "path": ".ORCHESTRATOR_PLAN/phases",
        "type": "directory",
        "artifact_id": "50309ed3-4ac8-4cfb-9eb6-65c359d7276b",
        "metadata": {}
      },
      {
        "path": ".ORCHESTRATOR_PLAN/prompts",
        "type": "directory",
        "artifact_id": "98edc0aa-1cee-4e9c-a055-1871a5392218",
        "metadata": {}
      },
      {
        "path": ".ORCHESTRATOR_PLAN/prompts/orchestrator_prompts.json",
        "type": "file",
        "artifact_id": "6d356616-d454-451f-9088-b724276cf1dc",
        "metadata": {}
      },
      {
        "path": ".PHOENIX",
        "type": "directory",
        "artifact_id": "41cd5101-1735-48cb-a7da-831be845a962",
        "metadata": {}
      },
      {
        "path": ".PHOENIX/archive",
        "type": "directory",
        "artifact_id": "9e5b2b88-51aa-4019-9e02-b2882bb68b0b",
        "metadata": {}
      },
      {
        "path": ".PHOENIX/consolidated",
        "type": "directory",
        "artifact_id": "93572309-f99e-420e-9484-c614ab072683",
        "metadata": {}
      },
      {
        "path": ".PHOENIX/docs",
        "type": "directory",
        "artifact_id": "48ce4bcd-b3ae-47af-adad-2ff9a6adc1ba",
        "metadata": {}
      },
      {
        "path": ".PHOENIX/duplicates_report.json",
        "type": "file",
        "artifact_id": "95515bcb-056f-480f-a6c6-0e440c69cfe2",
        "metadata": {}
      },
      {
        "path": ".PHOENIX/duplicates_sample.json",
        "type": "file",
        "artifact_id": "c2bcf5fb-0cbe-44d2-8cec-6c863a840d2a",
        "metadata": {}
      },
      {
        "path": ".PHOENIX/executable_phoenix_plan.py",
        "type": "file",
        "artifact_id": "6d4dc705-7cfc-45c0-af1a-75747441b05c",
        "metadata": {}
      },
      {
        "path": ".PHOENIX/orchestrator_plan",
        "type": "directory",
        "artifact_id": "5c364883-6ceb-4b04-a0ca-9e7c516ebfe8",
        "metadata": {}
      },
      {
        "path": ".PHOENIX/orchestrator_plan/artifacts",
        "type": "directory",
        "artifact_id": "9bcabfab-9536-40bc-b11d-0ab0079b873b",
        "metadata": {}
      },
      {
        "path": ".PHOENIX/orchestrator_plan/consultations",
        "type": "directory",
        "artifact_id": "dca30162-ad75-47cf-95a7-0ca49f8b6735",
        "metadata": {}
      },
      {
        "path": ".PHOENIX/orchestrator_plan/prompts",
        "type": "directory",
        "artifact_id": "d291e4b4-8502-4136-b434-487e5c0950bf",
        "metadata": {}
      },
      {
        "path": ".PHOENIX/phase0_log.md",
        "type": "file",
        "artifact_id": "5e84ced4-0910-4344-b39f-d7f55e7d167d",
        "metadata": {}
      },
      {
        "path": ".PHOENIX/schemas",
        "type": "directory",
        "artifact_id": "40a5b64a-0c31-4763-bf99-9eb6840549d7",
        "metadata": {}
      },
      {
        "path": ".RESTRUCTURIZATION_PLAN",
        "type": "directory",
        "artifact_id": "5c49d106-3694-44ff-bfcc-ff662a8f1955",
        "metadata": {}
      },
      {
        "path": ".RESTRUCTURIZATION_PLAN/DRAFTS",
        "type": "directory",
        "artifact_id": "0c42490e-b4fe-4fb5-9fe2-217e4116e406",
        "metadata": {}
      },
      {
        "path": ".RESTRUCTURIZATION_PLAN/DRAFTS/FINAL_ARCHITECTURE_STRATEGY_ANALYSIS.md",
        "type": "file",
        "artifact_id": "a4d34775-f49f-4ff9-939a-0200e8dd1b60",
        "metadata": {}
      },
      {
        "path": ".RESTRUCTURIZATION_PLAN/DRAFTS/GROK_ANALYSIS_READABLE.md",
        "type": "file",
        "artifact_id": "ac5937e6-5720-4b8d-a2b6-18fbfe616b33",
        "metadata": {}
      },
      {
        "path": ".RESTRUCTURIZATION_PLAN/DRAFTS/PHOENIX_EXECUTION_MASTERPLAN.md",
        "type": "file",
        "artifact_id": "94c85cff-146e-4d2e-900d-3b6294a99c55",
        "metadata": {}
      },
      {
        "path": ".RESTRUCTURIZATION_PLAN/DRAFTS/PHOENIX_EXECUTIVE_SUMMARY.md",
        "type": "file",
        "artifact_id": "575e0050-8fe2-43e4-b255-020fd64400ac",
        "metadata": {}
      },
      {
        "path": ".RESTRUCTURIZATION_PLAN/DRAFTS/PHOENIX_PROMPTS_LIBRARY.md",
        "type": "file",
        "artifact_id": "fe327933-a2cd-4912-9a6c-bcca11c18506",
        "metadata": {}
      },
      {
        "path": ".RESTRUCTURIZATION_PLAN/DRAFTS/UPDATED_STRATEGY_WITH_CACHING_ANALYSIS.md",
        "type": "file",
        "artifact_id": "a3a72632-56dc-4768-a578-0b78372216e5",
        "metadata": {}
      },
      {
        "path": ".RESTRUCTURIZATION_PLAN/DRAFTS/opus_API_AVAILABILITY_CHECK.md",
        "type": "file",
        "artifact_id": "d4cfc012-d388-4e5c-ac18-02305d7c37e3",
        "metadata": {}
      },
      {
        "path": ".RESTRUCTURIZATION_PLAN/DRAFTS/opus_COMPARISON_SUMMARY.md",
        "type": "file",
        "artifact_id": "95ec6b66-b95a-485b-b3dc-b8baa499881c",
        "metadata": {}
      },
      {
        "path": ".RESTRUCTURIZATION_PLAN/DRAFTS/opus_FINAL_BRIEFING.md",
        "type": "file",
        "artifact_id": "8d1d30c6-198c-4de9-afed-f0bc3f252666",
        "metadata": {}
      },
      {
        "path": ".RESTRUCTURIZATION_PLAN/DRAFTS/opus_PHOENIX_EXECUTION_CHEATSHEET.md",
        "type": "file",
        "artifact_id": "dd9e24f8-3106-41b8-a166-5e396144b057",
        "metadata": {}
      },
      {
        "path": ".RESTRUCTURIZATION_PLAN/DRAFTS/opus_PHOENIX_FINAL_EXECUTABLE_PLAN.md",
        "type": "file",
        "artifact_id": "c97b831a-5e8f-48a8-93b0-fe9ec488b686",
        "metadata": {}
      },
      {
        "path": ".RESTRUCTURIZATION_PLAN/DRAFTS/opus_PHOENIX_OPTIMAL_PLAN.md",
        "type": "file",
        "artifact_id": "4fe751da-9d41-4f93-8330-0b9dbbb60ba6",
        "metadata": {}
      },
      {
        "path": ".RESTRUCTURIZATION_PLAN/DRAFTS/opus_PHOENIX_READY_TO_GO.md",
        "type": "file",
        "artifact_id": "8182f1a3-e4f5-4efe-b43b-7fb44296217a",
        "metadata": {}
      },
      {
        "path": ".RESTRUCTURIZATION_PLAN/DRAFTS/opus_PROMPT_FOR_GPT41.md",
        "type": "file",
        "artifact_id": "0ba8f9b3-6538-42dc-8f74-dae25e506942",
        "metadata": {}
      },
      {
        "path": ".RESTRUCTURIZATION_PLAN/PHOENIX_EXECUTION_PLAN.md",
        "type": "file",
        "artifact_id": "61e579ec-9ac9-4a68-91af-3214d3be34ca",
        "metadata": {}
      },
      {
        "path": ".RESTRUCTURIZATION_PLAN/PHOENIX_PROMPT_LIBRARY.md",
        "type": "file",
        "artifact_id": "8248566c-4619-4b2c-8095-8c002c9ad667",
        "metadata": {}
      },
      {
        "path": ".RESTRUCTURIZATION_PLAN/expert_analysis_response.md",
        "type": "file",
        "artifact_id": "6554bec9-9087-4f57-ba38-fb4c3aa21d4e",
        "metadata": {}
      },
      {
        "path": ".continue",
        "type": "directory",
        "artifact_id": "ff8e1f14-c938-43af-abf7-14352468ac43",
        "metadata": {}
      },
      {
        "path": ".continue/config.json",
        "type": "file",
        "artifact_id": "f18b21ed-330f-421b-91c1-39b4e1eff7fb",
        "metadata": {}
      },
      {
        "path": ".github",
        "type": "directory",
        "artifact_id": "530ea394-3268-450b-8d55-f7a98f8cda37",
        "metadata": {}
      },
      {
        "path": ".github/ISSUE_TEMPLATE",
        "type": "directory",
        "artifact_id": "3dfd55f1-85be-434a-a522-a0c9e2b15a78",
        "metadata": {}
      },
      {
        "path": ".github/ISSUE_TEMPLATE/epic_template.md",
        "type": "file",
        "artifact_id": "e83eb15b-3c65-444c-a091-22e0ed900bce",
        "metadata": {}
      },
      {
        "path": ".github/ISSUE_TEMPLATE/task_template.md",
        "type": "file",
        "artifact_id": "d6b137ea-2577-40e9-bf36-2e146829ac6c",
        "metadata": {}
      },
      {
        "path": ".github/workflows",
        "type": "directory",
        "artifact_id": "feae883a-17e6-4c42-90e4-a2ebbb2d4ea7",
        "metadata": {}
      },
      {
        "path": ".llmstruct_cache",
        "type": "directory",
        "artifact_id": "1a8132a1-6e40-43c0-9576-00ff67c23bbb",
        "metadata": {}
      },
      {
        "path": ".llmstruct_cache/class_index.json",
        "type": "file",
        "artifact_id": "a4b03943-cdca-4e50-be8c-e8c1b4723b43",
        "metadata": {}
      },
      {
        "path": ".llmstruct_cache/function_index.json",
        "type": "file",
        "artifact_id": "20352c03-4406-49fd-9394-235721c22153",
        "metadata": {}
      },
      {
        "path": ".llmstruct_cache/metadata.json",
        "type": "file",
        "artifact_id": "90242c9f-883f-4232-97da-a12f4db8780a",
        "metadata": {}
      },
      {
        "path": ".llmstruct_cache/module_index.json",
        "type": "file",
        "artifact_id": "84e4a8d5-fadd-482d-a701-25a868b7613a",
        "metadata": {}
      },
      {
        "path": ".llmstruct_cache/search_cache.json",
        "type": "file",
        "artifact_id": "65189dec-35de-402a-a709-928493e6e61c",
        "metadata": {}
      },
      {
        "path": ".metrics",
        "type": "directory",
        "artifact_id": "dd5b2dd4-e1f8-4678-8a36-5a135102d396",
        "metadata": {}
      },
      {
        "path": ".metrics/aggregate_metrics.json",
        "type": "file",
        "artifact_id": "6d051b6e-2d30-44d4-949f-bd5ec075b79a",
        "metadata": {}
      },
      {
        "path": "CHANGELOG.md",
        "type": "file",
        "artifact_id": "3bb3922b-b4f7-486c-8831-1c494d7b98bd",
        "metadata": {}
      },
      {
        "path": "QUICK_START.md",
        "type": "file",
        "artifact_id": "2f5ad695-9246-4f52-a257-c4ef54c1d37b",
        "metadata": {}
      },
      {
        "path": "README.md",
        "type": "file",
        "artifact_id": "c3abbc9b-d731-4227-acd0-8b3730fbb6ed",
        "metadata": {}
      },
      {
        "path": "UNKNOWN.egg-info",
        "type": "directory",
        "artifact_id": "2ad1365c-921c-41eb-9747-9b160206cd40",
        "metadata": {}
      },
      {
        "path": "auto_init_ai_system.py",
        "type": "file",
        "artifact_id": "f32560fa-ace5-4498-afef-eab7d453add0",
        "metadata": {}
      },
      {
        "path": "collector.py",
        "type": "file",
        "artifact_id": "31c25ecb-d5aa-4f54-b5cc-f750c1ce0c5c",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration",
        "type": "directory",
        "artifact_id": "2ffb2c8e-956c-4b09-ac89-86f0d9600fc2",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/INSTALL.md",
        "type": "file",
        "artifact_id": "86f5c4e6-0764-4d26-93f2-7c001f4280a2",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/PACKAGE_OVERVIEW.md",
        "type": "file",
        "artifact_id": "0c7e24e5-611f-46ad-8b39-845be63dc948",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/README.md",
        "type": "file",
        "artifact_id": "fa5ff692-59a5-4131-888c-c02f8886c952",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/docs",
        "type": "directory",
        "artifact_id": "83c635f7-ef51-490e-8ef0-60796e399a34",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/docs/CURSOR_AI_EXAMPLES.md",
        "type": "file",
        "artifact_id": "86d2a8ea-16a0-47b9-81b5-aa0f049f1598",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/docs/SESSION_INTEGRATION_REPORT.md",
        "type": "file",
        "artifact_id": "398b4a79-8929-490d-9c63-3804f33ba021",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/docs/SESSION_MANAGEMENT_GUIDE.md",
        "type": "file",
        "artifact_id": "85f45f25-974f-4e0e-8c63-095637a0aa1f",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/docs/WORKFLOW_CURSOR_INTEGRATION_REPORT.md",
        "type": "file",
        "artifact_id": "86cd6d1e-0313-417b-b713-8959730532b8",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/files",
        "type": "directory",
        "artifact_id": "5c2e151a-5498-4dcd-8a70-23ccefc7353e",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/files/auto_init_ai_system.py",
        "type": "file",
        "artifact_id": "c766a8f8-3c59-4418-a3aa-be4b14c8341b",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/scripts",
        "type": "directory",
        "artifact_id": "e69ca019-dabb-4d4a-a1f8-2065e2314144",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/scripts/install_ai_integration.py",
        "type": "file",
        "artifact_id": "0e80197e-bc5e-4e10-af0e-aa668891ca31",
        "metadata": {}
      },
      {
        "path": "data",
        "type": "directory",
        "artifact_id": "28f25e4b-bb5a-41cd-bf7d-2e14b7342342",
        "metadata": {}
      },
      {
        "path": "data/ai_diagnostics_report.json",
        "type": "file",
        "artifact_id": "13c87083-5abd-4c81-9110-bd2908b7e4b9",
        "metadata": {}
      },
      {
        "path": "data/ai_integration_config.json",
        "type": "file",
        "artifact_id": "afe1ce2b-85d0-4bbd-ae59-cfb6af6a5037",
        "metadata": {}
      },
      {
        "path": "data/ai_self_awareness",
        "type": "directory",
        "artifact_id": "010c8683-1db6-4e35-aa20-f664f1bab625",
        "metadata": {}
      },
      {
        "path": "data/ai_self_awareness/ai_behavior_analysis.json",
        "type": "file",
        "artifact_id": "b43c8a02-30ea-4f01-9cc7-7268d9c8fd20",
        "metadata": {}
      },
      {
        "path": "data/ai_self_awareness/ai_usage_events.json",
        "type": "file",
        "artifact_id": "4b37d17d-9b22-465c-89b1-e47f3ed88edf",
        "metadata": {}
      },
      {
        "path": "data/ai_self_awareness/capability_cache.json",
        "type": "file",
        "artifact_id": "f7e1fa06-003e-4d6b-932a-0fe99c863f16",
        "metadata": {}
      },
      {
        "path": "data/ai_self_awareness/search_cache.json",
        "type": "file",
        "artifact_id": "0fea085d-81d6-46a0-ae51-0a9e4fadaaf7",
        "metadata": {}
      },
      {
        "path": "data/artifacts_index.json",
        "type": "file",
        "artifact_id": "cea4dd5e-43d3-4199-ac76-daf8e50ea17a",
        "metadata": {}
      },
      {
        "path": "data/chat_sessions",
        "type": "directory",
        "artifact_id": "9180d6f7-de97-44a4-bf80-c2ef1482bf8f",
        "metadata": {}
      },
      {
        "path": "data/chat_sessions/telegram-bot-session.json",
        "type": "file",
        "artifact_id": "1f5966ec-ce75-455f-8e9b-fb9bec8190d5",
        "metadata": {}
      },
      {
        "path": "data/chat_sessions/test-session.json",
        "type": "file",
        "artifact_id": "aba2eba0-fa14-4610-837a-96598637769b",
        "metadata": {}
      },
      {
        "path": "data/chat_sessions/tg_-4938821563_306157325.json",
        "type": "file",
        "artifact_id": "1f929bef-2d14-4a3f-adc8-ade063f55111",
        "metadata": {}
      },
      {
        "path": "data/cli.json",
        "type": "file",
        "artifact_id": "46a19490-13ea-4d33-b856-22e7414ae84c",
        "metadata": {}
      },
      {
        "path": "data/cli_enhanced.json",
        "type": "file",
        "artifact_id": "d5d1d4d9-a415-45a2-bbbb-25399924a5c2",
        "metadata": {}
      },
      {
        "path": "data/cli_queue.json",
        "type": "file",
        "artifact_id": "f31321c0-c749-4857-abe7-0ff362996d06",
        "metadata": {}
      },
      {
        "path": "data/cli_queue_enhanced.json",
        "type": "file",
        "artifact_id": "a242f1e0-ac1e-486e-965f-82a0595c289b",
        "metadata": {}
      },
      {
        "path": "data/conflicts.json",
        "type": "file",
        "artifact_id": "ab483347-f3b7-4a36-be1a-41bafa8ddc79",
        "metadata": {}
      },
      {
        "path": "data/context_orchestration.json",
        "type": "file",
        "artifact_id": "466f2483-2e1c-4a63-84b4-8c752d619bd1",
        "metadata": {}
      },
      {
        "path": "data/copilot",
        "type": "directory",
        "artifact_id": "7df98296-8401-4b9b-af8f-27be2f364a17",
        "metadata": {}
      },
      {
        "path": "data/copilot/ai_constraints.json",
        "type": "file",
        "artifact_id": "bb552bfa-88ce-457c-a0af-f0b450788576",
        "metadata": {}
      },
      {
        "path": "data/copilot/processing_queue.json",
        "type": "file",
        "artifact_id": "34ed8a44-6950-4d87-a137-7515c28a63c9",
        "metadata": {}
      },
      {
        "path": "data/copilot/warnings.json",
        "type": "file",
        "artifact_id": "747d0b04-54a4-4766-9db5-27617a039bc1",
        "metadata": {}
      },
      {
        "path": "data/copilot_init.json",
        "type": "file",
        "artifact_id": "de94d474-c785-40f6-9bb0-32136b7097ae",
        "metadata": {}
      },
      {
        "path": "data/cursor",
        "type": "directory",
        "artifact_id": "1c371f7c-6947-411c-9b5c-3fc66318a4f5",
        "metadata": {}
      },
      {
        "path": "data/cursor/cursor_context_config.json",
        "type": "file",
        "artifact_id": "f866acc2-3f6f-4dfd-a674-c6842e838a88",
        "metadata": {}
      },
      {
        "path": "data/cursor/cursor_personal_bridge.json",
        "type": "file",
        "artifact_id": "e3aa561f-5e47-47d8-82a4-1d6748e3c6a3",
        "metadata": {}
      },
      {
        "path": "data/cursor/cursor_session_memory.json",
        "type": "file",
        "artifact_id": "8cc36235-0db6-4056-8f83-3a563db56c39",
        "metadata": {}
      },
      {
        "path": "data/developer_onboarding.json",
        "type": "file",
        "artifact_id": "4101ded3-2294-44fc-92b3-9e0c8ac0c6c5",
        "metadata": {}
      },
      {
        "path": "data/docs.json",
        "type": "file",
        "artifact_id": "3193a876-28c5-49c4-b461-546d4a618f1f",
        "metadata": {}
      },
      {
        "path": "data/gh_mapping.json",
        "type": "file",
        "artifact_id": "83721035-ac22-4a70-bb9b-9bf230dbfc4e",
        "metadata": {}
      },
      {
        "path": "data/ideas.json",
        "type": "file",
        "artifact_id": "0f1362f6-4eb3-480c-9188-ab20691533dc",
        "metadata": {}
      },
      {
        "path": "data/ideas_cache.json",
        "type": "file",
        "artifact_id": "bf5b1f36-a373-40dc-b169-a2a50b3c4ed6",
        "metadata": {}
      },
      {
        "path": "data/init.json",
        "type": "file",
        "artifact_id": "1924100c-74af-47e1-bf57-d925b2115b51",
        "metadata": {}
      },
      {
        "path": "data/init_enhanced.json",
        "type": "file",
        "artifact_id": "ab2c5e01-92d4-48d8-b10d-8d1e3bd25e3c",
        "metadata": {}
      },
      {
        "path": "data/init_enhanced_ai.json",
        "type": "file",
        "artifact_id": "9d873501-6218-4256-97ad-fe8c3238d17e",
        "metadata": {}
      },
      {
        "path": "data/insights.json",
        "type": "file",
        "artifact_id": "4783965a-d0d5-4427-97a1-990f85989371",
        "metadata": {}
      },
      {
        "path": "data/metrics.json",
        "type": "file",
        "artifact_id": "97e4ed00-3708-4e4a-a579-940be3af03f8",
        "metadata": {}
      },
      {
        "path": "data/ollama_api_chat",
        "type": "directory",
        "artifact_id": "42a06c85-13d6-46a6-9b17-51f7b25b0631",
        "metadata": {}
      },
      {
        "path": "data/ollama_chat",
        "type": "directory",
        "artifact_id": "1a4390b8-40e1-4e56-bc05-2fac99bce86f",
        "metadata": {}
      },
      {
        "path": "data/prs.json",
        "type": "file",
        "artifact_id": "2c243a58-62fd-48c2-a019-229e58608fea",
        "metadata": {}
      },
      {
        "path": "data/references.json",
        "type": "file",
        "artifact_id": "571bc4ed-517d-4528-8a31-7b2a7ccd0f26",
        "metadata": {}
      },
      {
        "path": "data/sessions",
        "type": "directory",
        "artifact_id": "00d80329-b396-4e13-9938-0202bf96f1eb",
        "metadata": {}
      },
      {
        "path": "data/sessions/README.md",
        "type": "file",
        "artifact_id": "bb350b31-8a08-45b0-beba-3086579c8cc7",
        "metadata": {}
      },
      {
        "path": "data/sessions/ai_sessions.json",
        "type": "file",
        "artifact_id": "70955f05-8441-449a-b757-ef9d080d81f2",
        "metadata": {}
      },
      {
        "path": "data/sessions/current_session.json",
        "type": "file",
        "artifact_id": "3e7a7697-5961-4941-a495-d7698c72ab01",
        "metadata": {}
      },
      {
        "path": "data/sessions/epic_tg_bot_enhancement.json",
        "type": "file",
        "artifact_id": "08823bd3-9573-4092-aa57-f0b51154d16d",
        "metadata": {}
      },
      {
        "path": "data/sessions/epics_roadmap.json",
        "type": "file",
        "artifact_id": "1d4ac50e-6bc5-4100-9106-9cdfd1b2a69f",
        "metadata": {}
      },
      {
        "path": "data/sessions/worklog.json",
        "type": "file",
        "artifact_id": "922f56e5-0778-4981-8568-5b319c3f39d1",
        "metadata": {}
      },
      {
        "path": "data/tasks.json",
        "type": "file",
        "artifact_id": "e20381d8-042c-4730-b61c-aade19ce1768",
        "metadata": {}
      },
      {
        "path": "data/telegram",
        "type": "directory",
        "artifact_id": "1265c729-731c-4ea2-ba48-e91aeaaf7498",
        "metadata": {}
      },
      {
        "path": "data/telegram/bot_responses.json",
        "type": "file",
        "artifact_id": "23644e0d-ef2f-4088-aea7-ac660c64a04b",
        "metadata": {}
      },
      {
        "path": "data/telegram/cursor_commands.json",
        "type": "file",
        "artifact_id": "d67d5f05-3163-4a24-8f81-ff7b24430fa6",
        "metadata": {}
      },
      {
        "path": "data/telegram/master_status.json",
        "type": "file",
        "artifact_id": "5f753fb3-cf9e-4bf8-b2aa-3affe77e3959",
        "metadata": {}
      },
      {
        "path": "data/telegram/user_messages.json",
        "type": "file",
        "artifact_id": "98998f3a-b9bb-44ee-aac6-8a94de9c15b5",
        "metadata": {}
      },
      {
        "path": "data/user_memory.json",
        "type": "file",
        "artifact_id": "a28d29c0-4dbe-438c-a6d0-1515ffa27b2c",
        "metadata": {}
      },
      {
        "path": "data/vision.json",
        "type": "file",
        "artifact_id": "b71f0bf5-9098-4db9-950f-ef7bee5fafa2",
        "metadata": {}
      },
      {
        "path": "data/weights.json",
        "type": "file",
        "artifact_id": "17401fb1-452a-40a5-b5d2-5e688c70abdd",
        "metadata": {}
      },
      {
        "path": "data/workflow_events.json",
        "type": "file",
        "artifact_id": "8a57c5e2-0c84-41f9-8e0b-f5ee43f4c7f2",
        "metadata": {}
      },
      {
        "path": "data/workspace",
        "type": "directory",
        "artifact_id": "ce02616a-4425-4ca8-af81-d91d6ea7306f",
        "metadata": {}
      },
      {
        "path": "data/workspace/git_workflow_config.json",
        "type": "file",
        "artifact_id": "c3d1c47c-b435-4609-b3bb-497fec2ccb2e",
        "metadata": {}
      },
      {
        "path": "data/workspace/workspace_state.json",
        "type": "file",
        "artifact_id": "fad3daa1-7b0b-456e-ac27-a73366391d03",
        "metadata": {}
      },
      {
        "path": "docker",
        "type": "directory",
        "artifact_id": "8d271b38-0553-4c02-8b54-533151717630",
        "metadata": {}
      },
      {
        "path": "docker/parser_go",
        "type": "directory",
        "artifact_id": "8d8b6e00-cc53-4bcd-8b47-8016f38e71f5",
        "metadata": {}
      },
      {
        "path": "docs",
        "type": "directory",
        "artifact_id": "58ac759e-818e-4eb7-9024-ed251c8fef29",
        "metadata": {}
      },
      {
        "path": "docs/AI_DOGFOODING_FINAL_PLAN.md",
        "type": "file",
        "artifact_id": "a82d96dd-04d1-45d8-9c98-c53a9aea06c7",
        "metadata": {}
      },
      {
        "path": "docs/AI_DOGFOODING_IMPLEMENTATION_PLAN.md",
        "type": "file",
        "artifact_id": "23db0ef2-12df-407a-855b-a92e6d19cdcc",
        "metadata": {}
      },
      {
        "path": "docs/AI_DOGFOODING_PLANNING_MEMO.md",
        "type": "file",
        "artifact_id": "1296a69b-6047-4004-98dd-77f61aec560f",
        "metadata": {}
      },
      {
        "path": "docs/AI_INTEGRATION_REALITY_CHECK.md",
        "type": "file",
        "artifact_id": "ee7e2d40-c2d1-4d9c-8212-0ab2caf74052",
        "metadata": {}
      },
      {
        "path": "docs/AI_SESSION_MOBILE_CONTROL.md",
        "type": "file",
        "artifact_id": "00abf4fd-d875-4a7a-836e-52eb1cc2872c",
        "metadata": {}
      },
      {
        "path": "docs/COMPREHENSIVE_ANALYSIS.md",
        "type": "file",
        "artifact_id": "a07a4a8f-542e-401b-8c6a-a7d0ec6ad13e",
        "metadata": {}
      },
      {
        "path": "docs/COMPREHENSIVE_INDEX.json",
        "type": "file",
        "artifact_id": "49d243b4-8232-4e6c-9a7e-5c4f515253e2",
        "metadata": {}
      },
      {
        "path": "docs/CONTEXT_TAGS_SYSTEM.md",
        "type": "file",
        "artifact_id": "b42c4570-68ef-4a5b-9296-f4dff86529e1",
        "metadata": {}
      },
      {
        "path": "docs/CONTINUE_INTEGRATION.md",
        "type": "file",
        "artifact_id": "ee7133ff-5b21-44a2-b755-cb4cef2b057e",
        "metadata": {}
      },
      {
        "path": "docs/CONTRIBUTING.md",
        "type": "file",
        "artifact_id": "1d66aa77-cb9b-4876-8dfc-ea131807a335",
        "metadata": {}
      },
      {
        "path": "docs/COPILOT_INTEGRATION_CLARIFICATION_QUESTIONS.md",
        "type": "file",
        "artifact_id": "d40be655-8035-4c02-b153-a91c729ee072",
        "metadata": {}
      },
      {
        "path": "docs/COPILOT_INTEGRATION_RESEARCH_NOTES.md",
        "type": "file",
        "artifact_id": "b88d0ca1-01bc-4c24-895e-d73377a84d27",
        "metadata": {}
      },
      {
        "path": "docs/CURSOR_AI_INTEGRATION.md",
        "type": "file",
        "artifact_id": "1eac5fb4-1b59-4316-9820-839a5e13780b",
        "metadata": {}
      },
      {
        "path": "docs/CURSOR_ECOSYSTEM_TECHNICAL_ASSESSMENT.md",
        "type": "file",
        "artifact_id": "480b183a-2c68-428e-9c5e-7f38bb73ceb0",
        "metadata": {}
      },
      {
        "path": "docs/GITHUB_ROLLOUT_STRATEGY.md",
        "type": "file",
        "artifact_id": "2ac29b9d-b0b7-4152-a3a9-314c4d9b3966",
        "metadata": {}
      },
      {
        "path": "docs/GITHUB_TOKEN_SETUP.md",
        "type": "file",
        "artifact_id": "3260327b-bf4f-4766-af56-774e085fc74f",
        "metadata": {}
      },
      {
        "path": "docs/HIDDEN_GEMS_ANALYSIS.md",
        "type": "file",
        "artifact_id": "09030764-0033-4dd3-b599-a692a7e7e769",
        "metadata": {}
      },
      {
        "path": "docs/INTEGRATION_AND_WORKFLOW_CLARIFICATIONS.md",
        "type": "file",
        "artifact_id": "5fb666c6-df9d-4622-a23e-4092f0a99ada",
        "metadata": {}
      },
      {
        "path": "docs/JSON_OPTIMIZATION_CLARIFICATIONS.md",
        "type": "file",
        "artifact_id": "351de527-7add-413a-bb6c-23f187f8f239",
        "metadata": {}
      },
      {
        "path": "docs/JSON_OPTIMIZATION_FINAL_PLAN.md",
        "type": "file",
        "artifact_id": "0e19982f-2ed9-4f34-a5fc-d6e6f3ff9ede",
        "metadata": {}
      },
      {
        "path": "docs/JSON_SYSTEM_OPTIMIZATION_RESEARCH.md",
        "type": "file",
        "artifact_id": "fae81997-7e9d-481b-8e79-86055a37269f",
        "metadata": {}
      },
      {
        "path": "docs/LLM_instructions_api.md",
        "type": "file",
        "artifact_id": "45eb0c52-af8c-4666-a8c9-3b7a7ddf6f9b",
        "metadata": {}
      },
      {
        "path": "docs/MISSING_INNOVATIONS_SUMMARY.md",
        "type": "file",
        "artifact_id": "61b262b6-9561-4939-846c-7b229cef492b",
        "metadata": {}
      },
      {
        "path": "docs/PRIORITY_DASHBOARD.md",
        "type": "file",
        "artifact_id": "0dee43c9-7439-40af-b566-3c2a7facd97b",
        "metadata": {}
      },
      {
        "path": "docs/QUICK_START_GUIDE.md",
        "type": "file",
        "artifact_id": "0c5c0387-3b68-482f-9fc9-4f73d45ad990",
        "metadata": {}
      },
      {
        "path": "docs/SECURITY.md",
        "type": "file",
        "artifact_id": "eebfe702-921d-4220-b8db-2466bd25d516",
        "metadata": {}
      },
      {
        "path": "docs/STRATEGIC_ROADMAP_2025.md",
        "type": "file",
        "artifact_id": "26de6742-7e63-45dc-afc3-6187ac074104",
        "metadata": {}
      },
      {
        "path": "docs/TASKS_AND_IDEAS_REASSESSMENT.md",
        "type": "file",
        "artifact_id": "70c40401-1d93-42fc-9341-77d814642dcb",
        "metadata": {}
      },
      {
        "path": "docs/TASKS_INDEX.json",
        "type": "file",
        "artifact_id": "d5d55017-2ab2-40fe-a358-96e5a1381abd",
        "metadata": {}
      },
      {
        "path": "docs/TASKS_SUMMARY.md",
        "type": "file",
        "artifact_id": "5e1c9dfa-ad68-4677-9086-580e08577ddc",
        "metadata": {}
      },
      {
        "path": "docs/TASK_IDEA_CONSOLIDATION_WORK_NOTE.md",
        "type": "file",
        "artifact_id": "8b589e65-bf2e-408b-9b12-6dfe9f69d5e1",
        "metadata": {}
      },
      {
        "path": "docs/TASK_MANAGEMENT_SYSTEM.md",
        "type": "file",
        "artifact_id": "503dd537-cfd1-4393-8794-42343144dfc4",
        "metadata": {}
      },
      {
        "path": "docs/TPOT_DEPLOYMENT_WORK_PLAN.md",
        "type": "file",
        "artifact_id": "ac0c440f-b223-4102-94ff-aeda639c01db",
        "metadata": {}
      },
      {
        "path": "docs/WORKFLOW_METRICS_INTEGRATION.md",
        "type": "file",
        "artifact_id": "180d48ea-0cd9-4466-9e13-839e82069ab2",
        "metadata": {}
      },
      {
        "path": "docs/ai",
        "type": "directory",
        "artifact_id": "d9d8c9f7-f31a-4f5f-9329-f510a376f907",
        "metadata": {}
      },
      {
        "path": "docs/ai-constraints-implementation-report.md",
        "type": "file",
        "artifact_id": "b3362de7-530b-474a-b035-2d0869ab7843",
        "metadata": {}
      },
      {
        "path": "docs/ai-session-monitor",
        "type": "directory",
        "artifact_id": "9a81bed5-a23f-4de7-aa5b-077b474cc3b6",
        "metadata": {}
      },
      {
        "path": "docs/ai-session-monitor/README.md",
        "type": "file",
        "artifact_id": "876c1e94-56bd-4710-a68d-fd57e327ef8b",
        "metadata": {}
      },
      {
        "path": "docs/ai/README.md",
        "type": "file",
        "artifact_id": "3f147b59-d6fe-4380-b5a7-246055d2d203",
        "metadata": {}
      },
      {
        "path": "docs/ai/system_overview.md",
        "type": "file",
        "artifact_id": "b3e0bb2c-26d0-4cf2-8768-1f660f94fce9",
        "metadata": {}
      },
      {
        "path": "docs/ai/workflow_guide.md",
        "type": "file",
        "artifact_id": "5525aa5a-6782-48e1-8202-e782e7e43c8d",
        "metadata": {}
      },
      {
        "path": "docs/best_practices.md",
        "type": "file",
        "artifact_id": "ac5caba0-b456-405c-9c5d-71ee4d7502d8",
        "metadata": {}
      },
      {
        "path": "docs/cache.py",
        "type": "file",
        "artifact_id": "bff920bb-464f-4ad0-ad15-6abae8e0f71c",
        "metadata": {}
      },
      {
        "path": "docs/cli.py",
        "type": "file",
        "artifact_id": "718c50a3-3ab6-41e1-bf39-532b84c48f63",
        "metadata": {}
      },
      {
        "path": "docs/cli_modular_architecture.md",
        "type": "file",
        "artifact_id": "9c290ada-ece9-433a-8d09-8a0432e6e0f3",
        "metadata": {}
      },
      {
        "path": "docs/context_orchestration_architecture.md",
        "type": "file",
        "artifact_id": "4e873cbe-6871-4ca6-8bde-1bf7f027cfdc",
        "metadata": {}
      },
      {
        "path": "docs/copilot_integration.md",
        "type": "file",
        "artifact_id": "d98a265f-f805-4429-93ec-78c931a6b899",
        "metadata": {}
      },
      {
        "path": "docs/examples",
        "type": "directory",
        "artifact_id": "83358d21-7dd9-48c0-9734-b6a7e029cb8f",
        "metadata": {}
      },
      {
        "path": "docs/examples/struct.json",
        "type": "file",
        "artifact_id": "62f3bc3f-7a09-43fc-8c63-36b9514d2b09",
        "metadata": {}
      },
      {
        "path": "docs/gh_view.md",
        "type": "file",
        "artifact_id": "5acc8810-7247-4155-99e5-c3ff42eff1ac",
        "metadata": {}
      },
      {
        "path": "docs/github_projects_export.md",
        "type": "file",
        "artifact_id": "f8ccb294-45d1-40dc-b167-617754a333e5",
        "metadata": {}
      },
      {
        "path": "docs/ideas_community.md",
        "type": "file",
        "artifact_id": "3e06e0cf-2c43-43ec-95e1-433c642006e7",
        "metadata": {}
      },
      {
        "path": "docs/ideas_strategy.md",
        "type": "file",
        "artifact_id": "924f01a7-54d9-423e-9f13-7cab84fb3759",
        "metadata": {}
      },
      {
        "path": "docs/ideas_technical.md",
        "type": "file",
        "artifact_id": "8953f8b5-d1dc-49d9-9a98-dfae93f6cd6f",
        "metadata": {}
      },
      {
        "path": "docs/incremental_indexing_plan.md",
        "type": "file",
        "artifact_id": "7a86890e-633c-4de3-9563-77d757cc00a6",
        "metadata": {}
      },
      {
        "path": "docs/integration.md",
        "type": "file",
        "artifact_id": "ec3fc46d-ae25-491f-8767-3943602fc384",
        "metadata": {}
      },
      {
        "path": "docs/interactions_diagram.ru.md",
        "type": "file",
        "artifact_id": "f1852970-d1e2-49be-aaba-b539ab4aeb7c",
        "metadata": {}
      },
      {
        "path": "docs/internal",
        "type": "directory",
        "artifact_id": "6222e3de-1f37-446e-adfc-107b8b93120b",
        "metadata": {}
      },
      {
        "path": "docs/internal/collaborative-decision-workflow.md",
        "type": "file",
        "artifact_id": "eecbdc66-5fb2-4d60-b2f8-b7a72aa50228",
        "metadata": {}
      },
      {
        "path": "docs/internal/elastic-workflow-concept.md",
        "type": "file",
        "artifact_id": "1500a973-ee54-4ecb-9b35-8c611f66bb5d",
        "metadata": {}
      },
      {
        "path": "docs/internal/mamay-scenario-onboarding-design.md",
        "type": "file",
        "artifact_id": "edee588b-7cef-4b3b-a945-2f139d9bd6d0",
        "metadata": {}
      },
      {
        "path": "docs/internal/notes",
        "type": "directory",
        "artifact_id": "f307c600-3c65-490a-86d1-ddfa1b8037db",
        "metadata": {}
      },
      {
        "path": "docs/internal/notes/session_integration.md",
        "type": "file",
        "artifact_id": "c7a4499b-26b3-4b1e-8782-89607ebe2b18",
        "metadata": {}
      },
      {
        "path": "docs/internal/project-status-summary.md",
        "type": "file",
        "artifact_id": "3b1261ef-958e-443f-a9ea-71317446ae08",
        "metadata": {}
      },
      {
        "path": "docs/internal/roadmap.md",
        "type": "file",
        "artifact_id": "dce08fbe-88cd-4122-bf9e-2fff6bb8d80b",
        "metadata": {}
      },
      {
        "path": "docs/internal/ru",
        "type": "directory",
        "artifact_id": "0b5ecbdd-bd81-4fba-b185-03fef7446ae4",
        "metadata": {}
      },
      {
        "path": "docs/internal/ru/roadmap.md",
        "type": "file",
        "artifact_id": "f05bf831-6d46-468c-842a-9b20bcaa8c6c",
        "metadata": {}
      },
      {
        "path": "docs/internal/ru/ses-003_critical_analysis.md",
        "type": "file",
        "artifact_id": "2388bc21-868e-4b3f-8e29-67ffce07abb7",
        "metadata": {}
      },
      {
        "path": "docs/internal/ru/setup.md",
        "type": "file",
        "artifact_id": "34661c51-2353-46f5-bc9b-96a87d17e656",
        "metadata": {}
      },
      {
        "path": "docs/internal/ru/team.md",
        "type": "file",
        "artifact_id": "54285013-71b2-4ca0-8a59-964af8ae8875",
        "metadata": {}
      },
      {
        "path": "docs/internal/ses-004-implementation-decisions.md",
        "type": "file",
        "artifact_id": "8c05e84e-32fc-4ad3-9263-9424ffde562a",
        "metadata": {}
      },
      {
        "path": "docs/internal/setup.md",
        "type": "file",
        "artifact_id": "8ff39468-faf3-4a27-9df5-6cb5d36017c9",
        "metadata": {}
      },
      {
        "path": "docs/internal/team.md",
        "type": "file",
        "artifact_id": "4323244b-d337-4b1c-99e5-4ee4ee888e21",
        "metadata": {}
      },
      {
        "path": "docs/internal/workspace-mode-design-clarifications.md",
        "type": "file",
        "artifact_id": "91898b8b-b23d-4fd4-9511-eadc49925c42",
        "metadata": {}
      },
      {
        "path": "docs/internal/workspace-state-mode-system-design.md",
        "type": "file",
        "artifact_id": "05af11a4-0ff6-449f-b933-7ba5d6862a9b",
        "metadata": {}
      },
      {
        "path": "docs/json_selector.py",
        "type": "file",
        "artifact_id": "39f2feec-0526-4ce5-a05f-4ad6ada84366",
        "metadata": {}
      },
      {
        "path": "docs/llmstruct_config.md",
        "type": "file",
        "artifact_id": "ef1e0546-c4b7-4b0d-b312-f84f43a2bee3",
        "metadata": {}
      },
      {
        "path": "docs/llmstruct_decision_checklist.md",
        "type": "file",
        "artifact_id": "d73cd9ce-e399-4377-8c00-1966ddf53f88",
        "metadata": {}
      },
      {
        "path": "docs/llmstruct_format.md",
        "type": "file",
        "artifact_id": "d3c46f20-819c-4b45-969d-dec1aa551975",
        "metadata": {}
      },
      {
        "path": "docs/management",
        "type": "directory",
        "artifact_id": "43bfabef-86f2-44f5-a8bd-a4809ab7d3da",
        "metadata": {}
      },
      {
        "path": "docs/management/README.md",
        "type": "file",
        "artifact_id": "7bdcbedf-b7d3-44b9-8ad2-6a9967eb17e9",
        "metadata": {}
      },
      {
        "path": "docs/manifesto.md",
        "type": "file",
        "artifact_id": "6d7ac7e0-6478-4982-b5a7-8acb22dc4073",
        "metadata": {}
      },
      {
        "path": "docs/onboarding.md",
        "type": "file",
        "artifact_id": "dbff70de-41d7-4af7-88ea-d86dc4c69d1c",
        "metadata": {}
      },
      {
        "path": "docs/project_structure.md",
        "type": "file",
        "artifact_id": "3ebc5c31-53d1-4b24-8353-81a6edb72a1e",
        "metadata": {}
      },
      {
        "path": "docs/ru",
        "type": "directory",
        "artifact_id": "78f226e1-8e33-4f54-8b59-ed28edd10fa0",
        "metadata": {}
      },
      {
        "path": "docs/ru/CONTRIBUTING.md",
        "type": "file",
        "artifact_id": "493ea06e-a114-472d-8d6e-1746b64d8616",
        "metadata": {}
      },
      {
        "path": "docs/ru/README.md",
        "type": "file",
        "artifact_id": "66cb1100-5394-44aa-938d-ec073a93eae7",
        "metadata": {}
      },
      {
        "path": "docs/ru/best_practices.md",
        "type": "file",
        "artifact_id": "c542fffe-d09c-4cda-83fb-e27896463d11",
        "metadata": {}
      },
      {
        "path": "docs/ru/examples",
        "type": "directory",
        "artifact_id": "6bac5c6a-e016-4ad8-8fdc-ed793295e179",
        "metadata": {}
      },
      {
        "path": "docs/ru/examples/struct.json",
        "type": "file",
        "artifact_id": "bfb546c3-ac42-407d-add1-905fc987dd5c",
        "metadata": {}
      },
      {
        "path": "docs/ru/ideas_community.md",
        "type": "file",
        "artifact_id": "de0f1440-132c-4755-b328-15e97911b5c4",
        "metadata": {}
      },
      {
        "path": "docs/ru/ideas_strategy.md",
        "type": "file",
        "artifact_id": "3ea8a6f8-031f-4859-bdc7-eb053811f4c5",
        "metadata": {}
      },
      {
        "path": "docs/ru/ideas_technical.md",
        "type": "file",
        "artifact_id": "f4a7e836-f4dc-4ce3-afd6-c675a4a865e1",
        "metadata": {}
      },
      {
        "path": "docs/ru/integration.md",
        "type": "file",
        "artifact_id": "7eecf2cc-bfe3-4ebf-b723-8ead1a7f0ae2",
        "metadata": {}
      },
      {
        "path": "docs/ru/interactions_diagram.ru.md",
        "type": "file",
        "artifact_id": "eea59345-60da-46aa-9672-92c9d3444124",
        "metadata": {}
      },
      {
        "path": "docs/ru/llmstruct_config.md",
        "type": "file",
        "artifact_id": "df4b8aef-ff4e-4be7-b3e3-3db7c576a8ff",
        "metadata": {}
      },
      {
        "path": "docs/ru/llmstruct_format.md",
        "type": "file",
        "artifact_id": "4a9a60d9-bc21-4fc6-9309-f69e89e4ba25",
        "metadata": {}
      },
      {
        "path": "docs/ru/manifesto.md",
        "type": "file",
        "artifact_id": "b39926dc-961c-4017-8a34-aa0d7ac8be09",
        "metadata": {}
      },
      {
        "path": "docs/ru/onboarding.md",
        "type": "file",
        "artifact_id": "7a44c67b-3651-42ae-afa5-39a31841a572",
        "metadata": {}
      },
      {
        "path": "docs/ru/project_structure.md",
        "type": "file",
        "artifact_id": "d14fbb5d-0273-4713-9655-2844eb269d33",
        "metadata": {}
      },
      {
        "path": "docs/self_run.py",
        "type": "file",
        "artifact_id": "c7081289-7c3c-46ec-9616-b37cd9522421",
        "metadata": {}
      },
      {
        "path": "docs/struct_security.md",
        "type": "file",
        "artifact_id": "e8777c49-09bb-4f0d-a31d-afa18c3cf795",
        "metadata": {}
      },
      {
        "path": "epics",
        "type": "directory",
        "artifact_id": "a19976a3-d771-40b2-9c7f-a62d44b0d878",
        "metadata": {}
      },
      {
        "path": "epics/EPIC-1-AI-BRANCH-SAFETY-SYSTEM.md",
        "type": "file",
        "artifact_id": "807c1ba1-7b96-4b3a-8af6-d33e11849f46",
        "metadata": {}
      },
      {
        "path": "epics/EPIC-2-AI-SESSION-MANAGEMENT.md",
        "type": "file",
        "artifact_id": "b77df11f-9c1f-410b-bb45-4ac2dac3ce56",
        "metadata": {}
      },
      {
        "path": "epics/EPIC-3-ENHANCED-DOGFOOD-COMMAND.md",
        "type": "file",
        "artifact_id": "1ecc8ca9-3fcc-4860-8ec0-472066ae2331",
        "metadata": {}
      },
      {
        "path": "epics/EPIC-4-RISK-BASED-DEVELOPMENT-WORKFLOW.md",
        "type": "file",
        "artifact_id": "88030099-afd8-4210-83c8-f7c0c4d80467",
        "metadata": {}
      },
      {
        "path": "epics/README.md",
        "type": "file",
        "artifact_id": "df1b5185-42e4-49da-9fc8-6fbb6777c9aa",
        "metadata": {}
      },
      {
        "path": "epics/epics_data.json",
        "type": "file",
        "artifact_id": "cb0da061-fe41-4c4a-bb8b-1d908f3aed5b",
        "metadata": {}
      },
      {
        "path": "examples",
        "type": "directory",
        "artifact_id": "3d3e3891-b557-4faa-ae81-12140660d6bd",
        "metadata": {}
      },
      {
        "path": "examples/python_project_main.py",
        "type": "file",
        "artifact_id": "6ace4553-a1ad-4c17-99ab-13659252b5cd",
        "metadata": {}
      },
      {
        "path": "examples/python_project_utils.py",
        "type": "file",
        "artifact_id": "0e12db16-9cd1-4b5a-aa2f-281fdc294237",
        "metadata": {}
      },
      {
        "path": "examples/telegram_bot",
        "type": "directory",
        "artifact_id": "ec0d9054-14b7-4fc5-9d52-f0f3052ebd1a",
        "metadata": {}
      },
      {
        "path": "install_ai_integration.py",
        "type": "file",
        "artifact_id": "079b64ad-b485-4153-8791-7d6437de8389",
        "metadata": {}
      },
      {
        "path": "integrations",
        "type": "directory",
        "artifact_id": "3135089d-bc99-4b6a-af88-c7226ca19ea1",
        "metadata": {}
      },
      {
        "path": "integrations/continue",
        "type": "directory",
        "artifact_id": "b0a9278c-e9a6-49b8-b2f0-ac03e8bb1f5f",
        "metadata": {}
      },
      {
        "path": "integrations/continue/README.md",
        "type": "file",
        "artifact_id": "aa984f38-115b-43f9-a880-175403d3219d",
        "metadata": {}
      },
      {
        "path": "integrations/telegram_bot",
        "type": "directory",
        "artifact_id": "cf188913-e403-4db0-bdfd-c4b2cc8f2691",
        "metadata": {}
      },
      {
        "path": "integrations/telegram_bot/mp002_progress_bot.py",
        "type": "file",
        "artifact_id": "8c4e5c8e-33e0-4e77-ac11-9ff1693d2a76",
        "metadata": {}
      },
      {
        "path": "run_ai_diagnostics.py",
        "type": "file",
        "artifact_id": "021d28e3-a917-4eb8-be2a-f70b5841932d",
        "metadata": {}
      },
      {
        "path": "schema",
        "type": "directory",
        "artifact_id": "1a3bfa5a-fd76-40c8-a78c-2925464fe72d",
        "metadata": {}
      },
      {
        "path": "schema/artifacts_simplified.json",
        "type": "file",
        "artifact_id": "7a880d8b-5c0c-4f4b-8e4a-8cdd933b9e36",
        "metadata": {}
      },
      {
        "path": "schema/cli_queue.json",
        "type": "file",
        "artifact_id": "e6c53322-3df4-471d-bd5d-745e8672f1e2",
        "metadata": {}
      },
      {
        "path": "schema/cli_simplified.json",
        "type": "file",
        "artifact_id": "e7e75077-f281-4d80-8a12-c625b127e906",
        "metadata": {}
      },
      {
        "path": "schema/common",
        "type": "directory",
        "artifact_id": "7a33f45c-ba0c-4652-bd42-c03e12d99b56",
        "metadata": {}
      },
      {
        "path": "schema/common/definitions.json",
        "type": "file",
        "artifact_id": "241a9785-d0f2-4b54-a8c5-f920acc5b180",
        "metadata": {}
      },
      {
        "path": "schema/core.json",
        "type": "file",
        "artifact_id": "c8f0b12d-2752-4c6a-9c3b-b2a2cc430165",
        "metadata": {}
      },
      {
        "path": "schema/core_simplified.json",
        "type": "file",
        "artifact_id": "43a6f525-7a8f-4fbf-ac04-e7b4d973b868",
        "metadata": {}
      },
      {
        "path": "schema/insights_simplified.json",
        "type": "file",
        "artifact_id": "3a0c0e2b-49cc-4115-9e09-331e94a64713",
        "metadata": {}
      },
      {
        "path": "schema/llmstruct_schema.json",
        "type": "file",
        "artifact_id": "31c42c1d-d905-4d27-8483-2b970b16f682",
        "metadata": {}
      },
      {
        "path": "schema/llmstruct_schema_simplified.json",
        "type": "file",
        "artifact_id": "979ed89a-c2b7-4058-a310-f0861ebc12bb",
        "metadata": {}
      },
      {
        "path": "schema/plugins",
        "type": "directory",
        "artifact_id": "794a59da-6c44-426d-9e37-28cd758b0f3f",
        "metadata": {}
      },
      {
        "path": "schema/plugins/artifacts.json",
        "type": "file",
        "artifact_id": "bcbad1c5-9d56-4d57-981d-3cc20078f821",
        "metadata": {}
      },
      {
        "path": "schema/plugins/cli.json",
        "type": "file",
        "artifact_id": "9054af05-20d0-4895-9506-538abc1b6aaa",
        "metadata": {}
      },
      {
        "path": "schema/plugins/data_sorter.json",
        "type": "file",
        "artifact_id": "27b2a23f-93f7-48ff-8c56-a0a641ab2f17",
        "metadata": {}
      },
      {
        "path": "schema/plugins/insights.json",
        "type": "file",
        "artifact_id": "4df54428-1cb1-4b8a-8b1c-bd59563540d8",
        "metadata": {}
      },
      {
        "path": "src",
        "type": "directory",
        "artifact_id": "ae7455fc-06c3-47a4-a725-9170e7967064",
        "metadata": {}
      },
      {
        "path": "src/llmstruct",
        "type": "directory",
        "artifact_id": "53dae66c-d9ed-4561-bcda-19f511ddfb40",
        "metadata": {}
      },
      {
        "path": "src/llmstruct.egg-info",
        "type": "directory",
        "artifact_id": "a9af61eb-98f4-4de4-b4f5-c8cde4b68feb",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/__init__.py",
        "type": "file",
        "artifact_id": "18d62bf7-1adf-4d83-977d-3598906047dc",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/__main__.py",
        "type": "file",
        "artifact_id": "d4bb3f77-369e-458e-9587-c9f1c97f9c44",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/ai_cli_integration.py",
        "type": "file",
        "artifact_id": "96a4d1ba-3944-4a44-a148-498bfef145cc",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/ai_self_awareness.py",
        "type": "file",
        "artifact_id": "a55cde78-b17f-4b75-8781-290ab7704487",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/ai_self_monitor.py",
        "type": "file",
        "artifact_id": "73ef17a8-04f4-4374-88a4-51fef4d9e58a",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/ai_workflow_middleware.py",
        "type": "file",
        "artifact_id": "336c9508-1d46-4c39-aed5-e8d5234f2cb7",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/api",
        "type": "directory",
        "artifact_id": "9a0ba119-279e-4740-b124-b8618e32fc77",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/api/app.py",
        "type": "file",
        "artifact_id": "4436e6b4-17e6-400b-9924-b168fe290da3",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/api/middleware",
        "type": "directory",
        "artifact_id": "09f3c3db-e583-4bac-a920-e371361fb895",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/api/models",
        "type": "directory",
        "artifact_id": "c2aded75-5c1d-429b-bf16-42152440e7e4",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/api/routes",
        "type": "directory",
        "artifact_id": "b73a836d-17f0-4dac-808c-bbeeac101293",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/api/routes/continue_adapter.py",
        "type": "file",
        "artifact_id": "f5858c8c-41e0-4837-89cc-cb1518e2c5ff",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/api/services",
        "type": "directory",
        "artifact_id": "1a94a53b-aece-4908-852b-885ac460b69d",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/api/services/llm_service.py",
        "type": "file",
        "artifact_id": "e4305f39-0129-41fa-b48d-09d4766875e2",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cache.py",
        "type": "file",
        "artifact_id": "3ea1ce4e-22b0-480c-9766-8abfa3837ecc",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli.py",
        "type": "file",
        "artifact_id": "b2030c17-3602-4dd7-9eb6-8a30cf7c3260",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli_commands.py",
        "type": "file",
        "artifact_id": "1bc3a587-a68d-45d6-80fa-0c769f9fa995",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli_config.py",
        "type": "file",
        "artifact_id": "12c7e749-1039-44fa-b74f-b2095dbacd8e",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli_core.py",
        "type": "file",
        "artifact_id": "88006cf6-42a2-41f5-8f9d-a92c973cf581",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli_utils.py",
        "type": "file",
        "artifact_id": "aa4a4263-7936-4170-a16c-ee88ccf0536a",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/context_orchestrator.py",
        "type": "file",
        "artifact_id": "50be1acc-7888-440d-b8cd-c99e35e2b2ba",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/copilot.py",
        "type": "file",
        "artifact_id": "b23e7d68-b5e4-4b20-8f73-640904dd7a84",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cursor_ai_bridge.py",
        "type": "file",
        "artifact_id": "93399ec3-15d3-417a-8afa-8fff9a7f8168",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cursor_integration.py",
        "type": "file",
        "artifact_id": "031a965a-97e8-486e-b3ca-d00140842ce1",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators",
        "type": "directory",
        "artifact_id": "74a1eabc-8719-46c9-833d-e7668c1a90b2",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators/__init__.py",
        "type": "file",
        "artifact_id": "0811eff4-b06d-46be-9109-cd9ebdb16548",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators/go_json_generator.py",
        "type": "file",
        "artifact_id": "0e7f9825-17e5-4240-ad20-e82f63ec0013",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators/json_generator.py",
        "type": "file",
        "artifact_id": "3cf2b3a4-e3e4-4a38-b20b-4cb1b866e7d7",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/gh_view.py",
        "type": "file",
        "artifact_id": "85d967ab-2ec3-43b6-ba76-cf2dad9790e0",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/grok.py",
        "type": "file",
        "artifact_id": "97a1ebbd-1440-4a32-a901-7002697197a0",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/json_selector.py",
        "type": "file",
        "artifact_id": "02782051-c72a-4a67-9425-d9a13a40037a",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/llm_client.py",
        "type": "file",
        "artifact_id": "499071a6-eaef-4aed-93fa-fe24b3284949",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/metrics_tracker.py",
        "type": "file",
        "artifact_id": "f700cabb-45cd-4063-95e2-717f1d557957",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers",
        "type": "directory",
        "artifact_id": "fb8f9fe2-89bb-4dc6-911a-dc2e3c4f0057",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/__init__.py",
        "type": "file",
        "artifact_id": "36d1f88d-61fa-4058-aedf-2be0c4f125fd",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/go_analyzer.py",
        "type": "file",
        "artifact_id": "1b316a77-6b21-4ef5-8ccc-76ce19610eb1",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/javascript_parser.py",
        "type": "file",
        "artifact_id": "cddac0d0-f5a8-4baa-bbc5-51e71eb64b6e",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/python_parser.py",
        "type": "file",
        "artifact_id": "2db390e4-7da4-4150-8756-930c8662c597",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/universal_converter.py",
        "type": "file",
        "artifact_id": "940647da-658c-469c-ad21-218d9cc89975",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/self_run.py",
        "type": "file",
        "artifact_id": "40390f63-bd46-4585-893c-c79537fe7f3a",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/templates",
        "type": "directory",
        "artifact_id": "68d10b14-6b40-487b-a0c8-32955a917986",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/templates/__init__.py",
        "type": "file",
        "artifact_id": "3a8d70af-e4b0-4cf7-a9fd-24fe2cd9ef50",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/transpiler.py",
        "type": "file",
        "artifact_id": "8d80e19c-ede8-4fb7-9975-faabcd19fb28",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/validators",
        "type": "directory",
        "artifact_id": "51f3a0bb-3744-4f99-9f48-3367e10bd52c",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/validators/__init__.py",
        "type": "file",
        "artifact_id": "1324df2c-dba2-4f46-a0ec-0650849ba5b6",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/validators/json_validator.py",
        "type": "file",
        "artifact_id": "f52bea02-42af-48fc-a484-526a6fa427f4",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/workflow_orchestrator.py",
        "type": "file",
        "artifact_id": "daae6a04-d003-4cef-aa01-dcabe231342f",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/workspace.py",
        "type": "file",
        "artifact_id": "08535d7d-6ca3-4963-9671-620a833fbdb2",
        "metadata": {}
      },
      {
        "path": "src/scripts",
        "type": "directory",
        "artifact_id": "8e9caeec-c359-44ef-b5c4-a867725ecc15",
        "metadata": {}
      },
      {
        "path": "src/scripts/auto_update_struct.py",
        "type": "file",
        "artifact_id": "ff011e40-aeac-4cf0-908e-b5cf43b84e5d",
        "metadata": {}
      },
      {
        "path": "src/scripts/collector.py",
        "type": "file",
        "artifact_id": "a2f9ad6f-11ae-43ef-8754-3a35ba89e9bd",
        "metadata": {}
      },
      {
        "path": "src/scripts/create_comprehensive_index.py",
        "type": "file",
        "artifact_id": "46f9df47-4925-40d4-808f-97478e8f5e27",
        "metadata": {}
      },
      {
        "path": "src/scripts/create_github_issues.py",
        "type": "file",
        "artifact_id": "1ac6f6ea-f8f9-4680-8bc6-bdc567e4ec56",
        "metadata": {}
      },
      {
        "path": "src/scripts/create_tasks_index.py",
        "type": "file",
        "artifact_id": "b0ed7bbe-545c-402f-b47b-c6e0014c5fc4",
        "metadata": {}
      },
      {
        "path": "src/scripts/deploy_embedded_files.py",
        "type": "file",
        "artifact_id": "01237749-a303-4f18-9ddf-a792ee9e175f",
        "metadata": {}
      },
      {
        "path": "src/scripts/epic_roadmap_manager.py",
        "type": "file",
        "artifact_id": "3296acd0-1abc-48c6-b72e-90073dca11f3",
        "metadata": {}
      },
      {
        "path": "src/scripts/export_to_github_projects.py",
        "type": "file",
        "artifact_id": "144e7236-14ca-4d13-8576-09c3d9a9ebc5",
        "metadata": {}
      },
      {
        "path": "src/scripts/fix_github_script.py",
        "type": "file",
        "artifact_id": "e25d9c77-ba78-4263-ab13-e4ab7b0bb5f9",
        "metadata": {}
      },
      {
        "path": "src/scripts/fix_hardcoded_usernames.py",
        "type": "file",
        "artifact_id": "4bb70f4d-f258-40c7-9ec9-bcbfb547bf11",
        "metadata": {}
      },
      {
        "path": "src/scripts/github_sync_manager.py",
        "type": "file",
        "artifact_id": "200979e0-1c7d-4032-8dd8-466b90325ec3",
        "metadata": {}
      },
      {
        "path": "src/scripts/github_sync_manager_enhanced.py",
        "type": "file",
        "artifact_id": "5e9680db-9ecc-4d6d-81c0-f058d1d7fea1",
        "metadata": {}
      },
      {
        "path": "src/scripts/old",
        "type": "directory",
        "artifact_id": "a02fb5d1-68db-49f6-8206-28c5ae9ea306",
        "metadata": {}
      },
      {
        "path": "src/scripts/process_926_items.py",
        "type": "file",
        "artifact_id": "e1175623-668d-4871-9cdb-10afb0536f75",
        "metadata": {}
      },
      {
        "path": "src/scripts/session_cli.py",
        "type": "file",
        "artifact_id": "9b2e5295-67cb-47c2-99a8-dd92a0966125",
        "metadata": {}
      },
      {
        "path": "src/scripts/team",
        "type": "directory",
        "artifact_id": "c2c80011-b802-4536-b4fe-06d25011d5e3",
        "metadata": {}
      },
      {
        "path": "src/scripts/team/__init__.py",
        "type": "file",
        "artifact_id": "4da3efff-a817-4302-b8bc-e37b7e79073b",
        "metadata": {}
      },
      {
        "path": "src/scripts/validate_epics.py",
        "type": "file",
        "artifact_id": "57d6594f-9e85-4e83-9bc0-54bfc2abe622",
        "metadata": {}
      },
      {
        "path": "src/scripts/validate_json.py",
        "type": "file",
        "artifact_id": "7e4d61fa-513a-4be7-8d4d-826a960b1d0f",
        "metadata": {}
      },
      {
        "path": "src/scripts/validate_refs.py",
        "type": "file",
        "artifact_id": "e911ccfc-1fd0-41fa-8287-3597234c6446",
        "metadata": {}
      },
      {
        "path": "src/scripts/validate_schemas.py",
        "type": "file",
        "artifact_id": "2525788c-a6c3-4533-83f2-62e7dd031c28",
        "metadata": {}
      },
      {
        "path": "start_development.py",
        "type": "file",
        "artifact_id": "4399b90d-ec71-4f77-bc97-33676f6cbe04",
        "metadata": {}
      },
      {
        "path": "struct.json",
        "type": "file",
        "artifact_id": "3bca1c54-3f75-42ac-bcae-f90fd20af3b5",
        "metadata": {}
      },
      {
        "path": "struct_cache_manager.py",
        "type": "file",
        "artifact_id": "2f28793c-50bf-4938-b85d-ab1bba9e5cb0",
        "metadata": {}
      },
      {
        "path": "temp",
        "type": "directory",
        "artifact_id": "fe33e9f7-7cb7-4f50-8c20-83af34730e51",
        "metadata": {}
      },
      {
        "path": "temp/discussion_notes.md",
        "type": "file",
        "artifact_id": "484857e0-b6ce-4f69-95ce-1d857c860652",
        "metadata": {}
      },
      {
        "path": "temp/pause_recovery.md",
        "type": "file",
        "artifact_id": "b069b8c2-e392-400e-a1b6-c3c189ffced7",
        "metadata": {}
      },
      {
        "path": "temp/restore_ai_context.md",
        "type": "file",
        "artifact_id": "01917b5b-7497-4f86-8440-9392855248e4",
        "metadata": {}
      },
      {
        "path": "temp/update-singbox",
        "type": "directory",
        "artifact_id": "67101043-8a81-4fbe-903b-898e685df245",
        "metadata": {}
      },
      {
        "path": "tests",
        "type": "directory",
        "artifact_id": "22780169-7a57-4975-962c-0535e0b000b7",
        "metadata": {}
      },
      {
        "path": "tests/__init__.py",
        "type": "file",
        "artifact_id": "00f22021-aa3e-4585-906c-660bda715714",
        "metadata": {}
      },
      {
        "path": "validate_schemas.py",
        "type": "file",
        "artifact_id": "92cc8035-993d-4d7b-b412-f554f3342107",
        "metadata": {}
      },
      {
        "path": "validate_sessions.py",
        "type": "file",
        "artifact_id": "a280df73-0523-4cb7-8070-2109c0cb2268",
        "metadata": {}
      },
      {
        "path": "verify_llm_response.py",
        "type": "file",
        "artifact_id": "4dd96e23-edae-48ab-9804-f7ebc90b861f",
        "metadata": {}
      },
      {
        "path": "workspace_state.json",
        "type": "file",
        "artifact_id": "6dffe7d7-035a-40e6-ad6e-0b73cd552db9",
        "metadata": {}
      }
    ]
  },
  "toc": [
    {
      "module_id": "validate_sessions",
      "path": "validate_sessions.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "Session Schema Validation Script for llmstruct",
      "artifact_id": "fd8e216a-9f09-4961-9054-d19137fd41e0"
    },
    {
      "module_id": "auto_init_ai_system",
      "path": "auto_init_ai_system.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "\ud83d\ude80 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043f\u0440\u0438 \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0432 Cursor",
      "artifact_id": "b921e9bd-1362-4b3e-a888-e7eace3b063e"
    },
    {
      "module_id": "validate_schemas",
      "path": "validate_schemas.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "JSON Schema Validation Script for llmstruct",
      "artifact_id": "439dd56c-e5a6-4bb5-b983-8f55081edcba"
    },
    {
      "module_id": "install_ai_integration",
      "path": "install_ai_integration.py",
      "category": "core",
      "functions": 5,
      "classes": 0,
      "summary": "\ud83d\ude80 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f Cursor",
      "artifact_id": "e78f1966-82de-48b8-b823-e6c64cccae3c"
    },
    {
      "module_id": "run_ai_diagnostics",
      "path": "run_ai_diagnostics.py",
      "category": "core",
      "functions": 19,
      "classes": 0,
      "summary": "Comprehensive AI Self-Awareness Diagnostics Runner",
      "artifact_id": "80ffc9b3-3ea2-42ae-b189-5357440873ee"
    },
    {
      "module_id": "start_development",
      "path": "start_development.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "LLMStruct Development Startup Script",
      "artifact_id": "7755f8f2-f6e5-45a8-b50a-65e40207e152"
    },
    {
      "module_id": "verify_llm_response",
      "path": "verify_llm_response.py",
      "category": "core",
      "functions": 6,
      "classes": 0,
      "summary": "",
      "artifact_id": "0a9cc1bb-a157-4927-9603-14d6fb12cda7"
    },
    {
      "module_id": "struct_cache_manager",
      "path": "struct_cache_manager.py",
      "category": "core",
      "functions": 12,
      "classes": 1,
      "summary": "\ud83d\ude80 Smart struct.json Cache Manager for [code] Mode",
      "artifact_id": "8582d855-3967-4a8e-9e64-c11920db4a8d"
    },
    {
      "module_id": "collector",
      "path": "collector.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "c06d28bd-b068-4ddd-909e-5ac07b6ff9c9"
    },
    {
      "module_id": ".ARCHIVE.parse_ollama_models",
      "path": ".ARCHIVE/parse_ollama_models.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "\u041f\u0430\u0440\u0441\u0435\u0440 \u0441\u043f\u0438\u0441\u043a\u0430 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 Ollama \u0434\u043b\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430",
      "artifact_id": "58b66bc1-e235-4d34-a422-ca8e7e3ef19d"
    },
    {
      "module_id": ".ARCHIVE.parse_ollama_full",
      "path": ".ARCHIVE/parse_ollama_full.py",
      "category": "core",
      "functions": 5,
      "classes": 0,
      "summary": "Full Ollama List Parser + Context Merger for Grok Consultation",
      "artifact_id": "7b1db3e1-a6b4-4f8d-99c0-05b05dbdc45f"
    },
    {
      "module_id": ".ARCHIVE.force_ai_integration",
      "path": ".ARCHIVE/force_ai_integration.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "Force AI Integration Script",
      "artifact_id": "b923e2ec-c27d-4b99-a3ef-4be3308790f4"
    },
    {
      "module_id": ".ARCHIVE.final_system_check",
      "path": ".ARCHIVE/final_system_check.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Final System Status Check - LLMStruct Modular CLI Integration",
      "artifact_id": "dc8ced84-6ebf-400e-a0f2-8ace731a3749"
    },
    {
      "module_id": ".ARCHIVE.telegram_bot_final",
      "path": ".ARCHIVE/telegram_bot_final.py",
      "category": "core",
      "functions": 16,
      "classes": 1,
      "summary": "\ud83c\udfaf \u0424\u0418\u041d\u0410\u041b\u042c\u041d\u0410\u042f \u0432\u0435\u0440\u0441\u0438\u044f Telegram \u0431\u043e\u0442\u0430 \u0434\u043b\u044f LLMStruct",
      "artifact_id": "d1e59366-55c8-434c-8175-2e2ccb2e838d"
    },
    {
      "module_id": ".ARCHIVE.parse_ollama_for_grok",
      "path": ".ARCHIVE/parse_ollama_for_grok.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "ebd0ac94-d9a0-499d-9640-8585f6462bfa"
    },
    {
      "module_id": ".ARCHIVE.final_system_validation",
      "path": ".ARCHIVE/final_system_validation.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Final system validation script for LLMStruct Modular CLI Integration",
      "artifact_id": "5765f153-719a-4d35-92f1-7fb2d6d0eb14"
    },
    {
      "module_id": ".ARCHIVE.debug_terminal",
      "path": ".ARCHIVE/debug_terminal.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "Debug Terminal Script - Fallback for when terminal output is not visible",
      "artifact_id": "e3c49a90-75c5-4591-bb1e-6e8dcb5d814f"
    },
    {
      "module_id": ".ARCHIVE.telegram_bot_enhanced",
      "path": ".ARCHIVE/telegram_bot_enhanced.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "7084e39d-5506-4272-810b-ecca878886b7"
    },
    {
      "module_id": ".ARCHIVE.parse_ollama_minimal",
      "path": ".ARCHIVE/parse_ollama_minimal.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "Minimal Ollama Parser - Clean JSON without extra analytics",
      "artifact_id": "50ac4958-f3d7-4f58-9c34-44af0ed766ad"
    },
    {
      "module_id": ".ARCHIVE.chat_bot_final",
      "path": ".ARCHIVE/chat_bot_final.py",
      "category": "core",
      "functions": 18,
      "classes": 1,
      "summary": "LLMStruct Chat Bot Final - \u041f\u043e\u043b\u043d\u0430\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 FastAPI",
      "artifact_id": "8fe4d876-7a2f-4ba1-a8c4-958b36ae16ee"
    },
    {
      "module_id": ".ARCHIVE.monitor_system",
      "path": ".ARCHIVE/monitor_system.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "System Monitor - Continuous logging for debugging terminal issues",
      "artifact_id": "619cc17c-b9a1-4db4-96aa-497eb86e9ab4"
    },
    {
      "module_id": ".ARCHIVE.ollama_full_parser",
      "path": ".ARCHIVE/ollama_full_parser.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "2c25fa6a-0516-444c-a34d-68b46b46f4f0"
    },
    {
      "module_id": ".ARCHIVE.telegram_bot_test",
      "path": ".ARCHIVE/telegram_bot_test.py",
      "category": "core",
      "functions": 15,
      "classes": 1,
      "summary": "\ud83e\uddea \u0422\u0435\u0441\u0442\u043e\u0432\u044b\u0439 Telegram \u0431\u043e\u0442 \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0441 FastAPI",
      "artifact_id": "3be4ed87-0fc2-4ca3-a5e3-ef74bdcaa4d1"
    },
    {
      "module_id": ".ARCHIVE.parse_ollama_fixed",
      "path": ".ARCHIVE/parse_ollama_fixed.py",
      "category": "core",
      "functions": 6,
      "classes": 0,
      "summary": "Fixed Ollama List Parser + Context Merger for Grok Consultation",
      "artifact_id": "285a0c52-8f99-4063-b7ae-6d513899ff2c"
    },
    {
      "module_id": ".ARCHIVE.board_cli",
      "path": ".ARCHIVE/board_cli.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "CLI Kanban Board for llmstruct tasks and ideas",
      "artifact_id": "95429658-8829-4088-abfb-6a287dd241d7"
    },
    {
      "module_id": ".ARCHIVE.parse_ollama_improved",
      "path": ".ARCHIVE/parse_ollama_improved.py",
      "category": "core",
      "functions": 5,
      "classes": 0,
      "summary": "Improved Ollama List Parser + Context Merger for Grok Consultation",
      "artifact_id": "1adc9ec1-d246-4372-9683-25a60d24e88c"
    },
    {
      "module_id": ".ARCHIVE.bot_api_server",
      "path": ".ARCHIVE/bot_api_server.py",
      "category": "core",
      "functions": 19,
      "classes": 3,
      "summary": "\ud83e\udd16 Enhanced Bot API Server",
      "artifact_id": "d14f87bd-7548-4c6b-827b-82dd52dc20a8"
    },
    {
      "module_id": ".ARCHIVE.bot_file_operations",
      "path": ".ARCHIVE/bot_file_operations.py",
      "category": "core",
      "functions": 14,
      "classes": 1,
      "summary": "\ud83d\udcc1 Bot File Operations Module",
      "artifact_id": "5df3e7d6-aac6-43a4-8999-fde8c09ae7b7"
    },
    {
      "module_id": ".ARCHIVE.chat_bot_working",
      "path": ".ARCHIVE/chat_bot_working.py",
      "category": "core",
      "functions": 18,
      "classes": 1,
      "summary": "\ud83d\ude80 ENHANCED Telegram Bot \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 FastAPI",
      "artifact_id": "99375f62-0c32-4d4a-b1be-18c38e8d919a"
    },
    {
      "module_id": ".ARCHIVE.chat_bot",
      "path": ".ARCHIVE/chat_bot.py",
      "category": "core",
      "functions": 17,
      "classes": 1,
      "summary": "LLMStruct Chat Bot - \u0423\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u0434\u043b\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 Cursor + Ollama",
      "artifact_id": "53f3fc68-ed31-494c-9526-81e3e6b2f7db"
    },
    {
      "module_id": ".ARCHIVE.fastapi_ollama_server_working",
      "path": ".ARCHIVE/fastapi_ollama_server_working.py",
      "category": "core",
      "functions": 16,
      "classes": 4,
      "summary": "\ud83d\ude80 \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u043d\u044b\u0439 FastAPI \u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f LLMStruct",
      "artifact_id": "d35c544b-88af-4b42-a670-2f5ca47b6b7b"
    },
    {
      "module_id": ".ARCHIVE.temp_boss_missing.scripts.business_planning",
      "path": ".ARCHIVE/temp_boss_missing/scripts/business_planning.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "Business Planning Module",
      "artifact_id": "56a2e3f2-9b9d-4400-b974-c7b9bec0873e"
    },
    {
      "module_id": ".ARCHIVE.temp_boss_missing.scripts.team_management",
      "path": ".ARCHIVE/temp_boss_missing/scripts/team_management.py",
      "category": "core",
      "functions": 13,
      "classes": 1,
      "summary": "Team Management Module",
      "artifact_id": "ae14b721-e7b5-4bbe-a089-9d9f6688d12d"
    },
    {
      "module_id": ".ARCHIVE.temp_boss_missing.scripts.boss_cli",
      "path": ".ARCHIVE/temp_boss_missing/scripts/boss_cli.py",
      "category": "core",
      "functions": 25,
      "classes": 1,
      "summary": "Boss CLI - \u041f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 CLI \u0434\u043b\u044f \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f",
      "artifact_id": "a3592233-ef12-4bdb-884e-8854f42a1ff9"
    },
    {
      "module_id": ".ARCHIVE.temp_boss_missing.scripts.__init__",
      "path": ".ARCHIVE/temp_boss_missing/scripts/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "7db6942d-5557-4441-a097-cae2151a9cd8"
    },
    {
      "module_id": ".ARCHIVE.temp_personal_analysis.personal.boss.scripts.business_planning",
      "path": ".ARCHIVE/temp_personal_analysis/personal/boss/scripts/business_planning.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "Business Planning Module",
      "artifact_id": "7d72d263-f20e-4513-b4a7-b29e0f432a2a"
    },
    {
      "module_id": ".ARCHIVE.temp_personal_analysis.personal.boss.scripts.team_management",
      "path": ".ARCHIVE/temp_personal_analysis/personal/boss/scripts/team_management.py",
      "category": "core",
      "functions": 13,
      "classes": 1,
      "summary": "Team Management Module",
      "artifact_id": "1ed0c680-bee6-4a20-83a2-f2a0bbb8f16e"
    },
    {
      "module_id": ".ARCHIVE.temp_personal_analysis.personal.boss.scripts.boss_cli",
      "path": ".ARCHIVE/temp_personal_analysis/personal/boss/scripts/boss_cli.py",
      "category": "core",
      "functions": 25,
      "classes": 1,
      "summary": "Boss CLI - \u041f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 CLI \u0434\u043b\u044f \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f",
      "artifact_id": "8830b089-4cf7-4d6e-a3ff-5ae7d7145409"
    },
    {
      "module_id": ".ARCHIVE.temp_personal_analysis.personal.boss.scripts.__init__",
      "path": ".ARCHIVE/temp_personal_analysis/personal/boss/scripts/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "3c616cf1-7c3f-42ac-b7c6-96a0ca95a236"
    },
    {
      "module_id": ".ARCHIVE..personal.boss.scripts.boss_cli",
      "path": ".ARCHIVE/.personal/boss/scripts/boss_cli.py",
      "category": "core",
      "functions": 29,
      "classes": 1,
      "summary": "Boss CLI - \u041f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 CLI \u0434\u043b\u044f \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f",
      "artifact_id": "f8528b05-9e8c-4869-8781-82a8a6b464d1"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.send_cursor_response",
      "path": ".ARCHIVE/archive/telegram_experiments/send_cursor_response.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "d611065b-eb4d-450e-9b9c-38d0ffcb447e"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.cursor_telegram_reader_enhanced",
      "path": ".ARCHIVE/archive/telegram_experiments/cursor_telegram_reader_enhanced.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "Enhanced Cursor Telegram Reader",
      "artifact_id": "a0753132-1a50-42b4-8295-61f0a7269be1"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.api_memory_endpoints",
      "path": ".ARCHIVE/archive/telegram_experiments/api_memory_endpoints.py",
      "category": "core",
      "functions": 9,
      "classes": 3,
      "summary": "API Endpoints \u0434\u043b\u044f \u043f\u0430\u043c\u044f\u0442\u0438 Telegram \u0431\u043e\u0442\u0430",
      "artifact_id": "388695ae-4c6e-4e13-b004-1a1512d5cc7c"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.fastapi_ollama_server",
      "path": ".ARCHIVE/archive/telegram_experiments/fastapi_ollama_server.py",
      "category": "core",
      "functions": 14,
      "classes": 4,
      "summary": "\ud83d\ude80 \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u043d\u044b\u0439 FastAPI \u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f LLMStruct",
      "artifact_id": "82879782-8c1b-4525-a5bd-f7a62d333825"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.dummy_work_executor",
      "path": ".ARCHIVE/archive/telegram_experiments/dummy_work_executor.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "Dummy Work Executor - \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0432\u0443\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0435\u0439 \u0441\u0432\u044f\u0437\u0438 \u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c \u0447\u0435\u0440\u0435\u0437 Telegram",
      "artifact_id": "58abaa3e-393a-4ee7-afb6-0cca64e9a14a"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.cursor_telegram_reader",
      "path": ".ARCHIVE/archive/telegram_experiments/cursor_telegram_reader.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "Cursor Telegram Reader - \u0427\u0438\u0442\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0438\u0437 Telegram \u0431\u043e\u0442\u0430 \u0434\u043b\u044f Cursor",
      "artifact_id": "d29353a6-ee41-4a24-9718-097112d216ae"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.cursor_bot_messenger",
      "path": ".ARCHIVE/archive/telegram_experiments/cursor_bot_messenger.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "Cursor Bot Messenger - \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0447\u0435\u0440\u0435\u0437 Telegram",
      "artifact_id": "43929e98-3e65-4ca9-99c9-bfd7bae5ab3d"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.send_test_message",
      "path": ".ARCHIVE/archive/telegram_experiments/send_test_message.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "Test message sender to Telegram",
      "artifact_id": "1b3cb28e-c93b-4676-a178-55aa82da24dd"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.cursor_integration",
      "path": ".ARCHIVE/archive/telegram_experiments/cursor_integration.py",
      "category": "core",
      "functions": 13,
      "classes": 1,
      "summary": "\ud83c\udfaf Cursor Integration for Telegram Master Controller",
      "artifact_id": "4bbfba51-8617-4505-b4cb-aeea3b1aadaf"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.cursor_simple_integration",
      "path": ".ARCHIVE/archive/telegram_experiments/cursor_simple_integration.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "\u041f\u0440\u043e\u0441\u0442\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 Cursor \u0441 Telegram \u0431\u043e\u0442\u043e\u043c",
      "artifact_id": "90defff8-8e35-4283-97f9-3db563150159"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.start_simple_telegram",
      "path": ".ARCHIVE/archive/telegram_experiments/start_simple_telegram.py",
      "category": "core",
      "functions": 6,
      "classes": 0,
      "summary": "\u0421\u043a\u0440\u0438\u043f\u0442 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f Cursor \u2194 Telegram",
      "artifact_id": "68ace648-efb2-4efb-9015-576b55d9d215"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.chat_bot_fastapi_enhanced",
      "path": ".ARCHIVE/archive/telegram_experiments/chat_bot_fastapi_enhanced.py",
      "category": "core",
      "functions": 18,
      "classes": 1,
      "summary": "\ud83d\ude80 ENHANCED Telegram Bot \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 FastAPI",
      "artifact_id": "116e36da-5264-4b6e-8f65-e94bfd6c0fef"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.chat_bot_enhanced",
      "path": ".ARCHIVE/archive/telegram_bots/chat_bot_enhanced.py",
      "category": "core",
      "functions": 16,
      "classes": 1,
      "summary": "Enhanced LLMStruct Telegram Bot",
      "artifact_id": "c07858a6-6da3-42d8-a739-c4090c191e8f"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.cursor_telegram_bridge",
      "path": ".ARCHIVE/archive/telegram_bots/cursor_telegram_bridge.py",
      "category": "core",
      "functions": 7,
      "classes": 1,
      "summary": "Cursor \u2194 Telegram Bridge",
      "artifact_id": "841d6143-2d73-487b-a9d0-51dc6b44cd92"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.start_ollama_bot",
      "path": ".ARCHIVE/archive/telegram_bots/start_ollama_bot.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "Quick launcher for Ollama Chat Bot",
      "artifact_id": "a1db581b-cf75-41ff-bd55-81f4ce163fa1"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.ollama_chat_bot",
      "path": ".ARCHIVE/archive/telegram_bots/ollama_chat_bot.py",
      "category": "core",
      "functions": 23,
      "classes": 6,
      "summary": "LLMStruct Ollama Chat Bot",
      "artifact_id": "8e341981-8b4e-4090-a779-b08a86350af1"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.demo_bot_features",
      "path": ".ARCHIVE/archive/telegram_bots/demo_bot_features.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 Ollama Chat Bot",
      "artifact_id": "20120ea2-a5f8-4eec-a18e-11f4f04a89a9"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.cursor_reporter",
      "path": ".ARCHIVE/archive/telegram_bots/cursor_reporter.py",
      "category": "core",
      "functions": 11,
      "classes": 1,
      "summary": "Cursor Task Reporter",
      "artifact_id": "fab82627-554e-4381-87ff-88bc26b41163"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.ollama_api_bot",
      "path": ".ARCHIVE/archive/telegram_bots/ollama_api_bot.py",
      "category": "core",
      "functions": 28,
      "classes": 7,
      "summary": "Ollama Chat Bot \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0439 FastAPI API \u0432\u043c\u0435\u0441\u0442\u043e CLI",
      "artifact_id": "900969aa-6857-48d5-88c8-7796ab942c4a"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.start_api_bot",
      "path": ".ARCHIVE/archive/telegram_bots/start_api_bot.py",
      "category": "core",
      "functions": 6,
      "classes": 0,
      "summary": "\u041b\u0430\u0443\u043d\u0447\u0435\u0440 \u0434\u043b\u044f Ollama API Bot \u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430\u043c\u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u0438 API",
      "artifact_id": "5dbcf7f9-ef6d-4530-be2a-6b253a337783"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.telegram_cursor_master",
      "path": ".ARCHIVE/archive/telegram_bots/telegram_cursor_master.py",
      "category": "core",
      "functions": 17,
      "classes": 1,
      "summary": "\ud83c\udfaf LLMStruct Telegram Master Controller",
      "artifact_id": "981629bd-054c-4a3c-a77b-6b9dec40d300"
    },
    {
      "module_id": "src.scripts.session_cli",
      "path": "src/scripts/session_cli.py",
      "category": "core",
      "functions": 10,
      "classes": 1,
      "summary": "Session Management CLI",
      "artifact_id": "7986d6db-1215-48d6-8e8c-01726d37a6a0"
    },
    {
      "module_id": "src.scripts.auto_update_struct",
      "path": "src/scripts/auto_update_struct.py",
      "category": "core",
      "functions": 8,
      "classes": 0,
      "summary": "Automatic struct.json update script",
      "artifact_id": "549cea2a-3582-46fd-b348-76efc849b41a"
    },
    {
      "module_id": "src.scripts.fix_hardcoded_usernames",
      "path": "src/scripts/fix_hardcoded_usernames.py",
      "category": "core",
      "functions": 12,
      "classes": 2,
      "summary": "Fix Hardcoded Usernames Script",
      "artifact_id": "abfc3a85-4229-4325-b907-432ec39415eb"
    },
    {
      "module_id": "src.scripts.create_github_issues",
      "path": "src/scripts/create_github_issues.py",
      "category": "core",
      "functions": 11,
      "classes": 1,
      "summary": "GitHub Issues Creator for AI-Dogfooding Project",
      "artifact_id": "ecdf0d8e-b84d-40a0-b340-9fed979ad2da"
    },
    {
      "module_id": "src.scripts.export_to_github_projects",
      "path": "src/scripts/export_to_github_projects.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "Export script for GitHub Projects integration",
      "artifact_id": "73a97038-7954-436c-9438-a6716021de63"
    },
    {
      "module_id": "src.scripts.validate_schemas",
      "path": "src/scripts/validate_schemas.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "98df217e-67ed-425c-a156-6994c665301b"
    },
    {
      "module_id": "src.scripts.process_926_items",
      "path": "src/scripts/process_926_items.py",
      "category": "core",
      "functions": 16,
      "classes": 1,
      "summary": "926 Items Processing Script - Updated Implementation",
      "artifact_id": "e7401d44-3c3c-472b-9d6c-cd7bdbc19212"
    },
    {
      "module_id": "src.scripts.fix_github_script",
      "path": "src/scripts/fix_github_script.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Quick fix for GitHub issues creation script",
      "artifact_id": "7ee27442-3144-4345-b1c7-35c2fef0e76c"
    },
    {
      "module_id": "src.scripts.github_sync_manager",
      "path": "src/scripts/github_sync_manager.py",
      "category": "core",
      "functions": 15,
      "classes": 1,
      "summary": "GitHub Sync Manager - \u0418\u0434\u0435\u043c\u043f\u043e\u0442\u0435\u043d\u0442\u043d\u0430\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f processing results \u0441 GitHub",
      "artifact_id": "aa586b45-a3ec-403f-8083-93fcdda72b08"
    },
    {
      "module_id": "src.scripts.create_comprehensive_index",
      "path": "src/scripts/create_comprehensive_index.py",
      "category": "core",
      "functions": 37,
      "classes": 2,
      "summary": "Comprehensive Project Index Creator",
      "artifact_id": "20ed4aed-80b7-4459-a88b-3f79c1bd0128"
    },
    {
      "module_id": "src.scripts.validate_json",
      "path": "src/scripts/validate_json.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "JSON Validation Script",
      "artifact_id": "088da3ae-8d3b-419e-af15-eac4ee83d331"
    },
    {
      "module_id": "src.scripts.validate_refs",
      "path": "src/scripts/validate_refs.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "6da2ecad-9ebd-41e2-b171-af1f533ac9f2"
    },
    {
      "module_id": "src.scripts.create_tasks_index",
      "path": "src/scripts/create_tasks_index.py",
      "category": "core",
      "functions": 18,
      "classes": 3,
      "summary": "Tasks Index Creator",
      "artifact_id": "7b209704-fde9-46bb-9f19-cc2f3af83f6c"
    },
    {
      "module_id": "src.scripts.github_sync_manager_enhanced",
      "path": "src/scripts/github_sync_manager_enhanced.py",
      "category": "core",
      "functions": 28,
      "classes": 3,
      "summary": "Enhanced GitHub Sync Manager - \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u043b\u0443\u0447\u0448\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0438\u0437 full_project_rollout",
      "artifact_id": "211e7953-04ee-423b-93bd-b1df17575816"
    },
    {
      "module_id": "src.scripts.collector",
      "path": "src/scripts/collector.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "a2480ccf-0bdf-439d-b059-1e0e9fd22d01"
    },
    {
      "module_id": "src.scripts.validate_epics",
      "path": "src/scripts/validate_epics.py",
      "category": "core",
      "functions": 5,
      "classes": 0,
      "summary": "Epic Data Validator",
      "artifact_id": "f0fc5d8d-ee17-42fa-8f84-f47bfd2252e3"
    },
    {
      "module_id": "src.scripts.epic_roadmap_manager",
      "path": "src/scripts/epic_roadmap_manager.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "Epic Roadmap Manager - \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430\u043c\u0438 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0441\u0435\u0441\u0441\u0438\u0439",
      "artifact_id": "99fbae1c-4f79-4a16-bc4b-2b6507bd2aa3"
    },
    {
      "module_id": "src.scripts.deploy_embedded_files",
      "path": "src/scripts/deploy_embedded_files.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "7765a055-bf6d-4012-9df8-78ee940b3e9a"
    },
    {
      "module_id": "src.scripts.team.__init__",
      "path": "src/scripts/team/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "21cbcb59-cbc1-492e-a519-4f4d672312e5"
    },
    {
      "module_id": "src.llmstruct.cli_core",
      "path": "src/llmstruct/cli_core.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "Core CLI functionality and main loop.",
      "artifact_id": "23a33b2e-642c-4d17-aaa5-ec170c78d2ed"
    },
    {
      "module_id": "src.llmstruct.workspace",
      "path": "src/llmstruct/workspace.py",
      "category": "core",
      "functions": 20,
      "classes": 1,
      "summary": "Workspace State & Mode Management System",
      "artifact_id": "e6f0e1b8-334b-4c3c-9628-b53befd7650f"
    },
    {
      "module_id": "src.llmstruct.cache",
      "path": "src/llmstruct/cache.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "36784161-432c-4bf6-afae-1edfe4ce4b00"
    },
    {
      "module_id": "src.llmstruct.json_selector",
      "path": "src/llmstruct/json_selector.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "3392141d-3b00-4a9d-9541-6f6e82f8618a"
    },
    {
      "module_id": "src.llmstruct.workflow_orchestrator",
      "path": "src/llmstruct/workflow_orchestrator.py",
      "category": "core",
      "functions": 27,
      "classes": 5,
      "summary": "AI Workflow Orchestrator - Integration Layer for Existing llmstruct Architecture",
      "artifact_id": "04c0b0fe-b772-4732-af21-d556e3f16c2f"
    },
    {
      "module_id": "src.llmstruct.gh_view",
      "path": "src/llmstruct/gh_view.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "GitHub visualization/graph feature (gh-view-v1)",
      "artifact_id": "2ae554b6-af22-4299-a44d-41522791f90b"
    },
    {
      "module_id": "src.llmstruct.self_run",
      "path": "src/llmstruct/self_run.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "f6580a7a-d237-468a-a5a6-78d2780681a2"
    },
    {
      "module_id": "src.llmstruct.copilot",
      "path": "src/llmstruct/copilot.py",
      "category": "core",
      "functions": 26,
      "classes": 5,
      "summary": "LLMStruct Copilot Integration Module",
      "artifact_id": "c5bf658a-3eb4-4ff3-b8f5-43cbec958eca"
    },
    {
      "module_id": "src.llmstruct.ai_workflow_middleware",
      "path": "src/llmstruct/ai_workflow_middleware.py",
      "category": "core",
      "functions": 22,
      "classes": 4,
      "summary": "AI Workflow Middleware - Forces AI Integration with LLMStruct",
      "artifact_id": "ad4dbde8-cdd4-49f3-8f3e-eeadbce3bc26"
    },
    {
      "module_id": "src.llmstruct.ai_cli_integration",
      "path": "src/llmstruct/ai_cli_integration.py",
      "category": "core",
      "functions": 14,
      "classes": 1,
      "summary": "AI Self-Awareness CLI Integration Module",
      "artifact_id": "e3e771a6-ef91-4ad8-a876-b57fa03ddafc"
    },
    {
      "module_id": "src.llmstruct.cli_config",
      "path": "src/llmstruct/cli_config.py",
      "category": "core",
      "functions": 18,
      "classes": 1,
      "summary": "CLI configuration management.",
      "artifact_id": "f51eea64-fa04-437d-b151-fd8e4cb8383e"
    },
    {
      "module_id": "src.llmstruct.cursor_integration",
      "path": "src/llmstruct/cursor_integration.py",
      "category": "core",
      "functions": 22,
      "classes": 6,
      "summary": "Cursor IDE Integration Module",
      "artifact_id": "934ee31e-945e-4800-b62f-d630f83cf94d"
    },
    {
      "module_id": "src.llmstruct.grok",
      "path": "src/llmstruct/grok.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "",
      "artifact_id": "e255e93c-f9cc-4aaa-ab28-5fd8cdeef4cf"
    },
    {
      "module_id": "src.llmstruct.transpiler",
      "path": "src/llmstruct/transpiler.py",
      "category": "core",
      "functions": 10,
      "classes": 3,
      "summary": "AI-Powered Universal Transpiler",
      "artifact_id": "5b10b756-f076-4b63-b6a4-5940eee54062"
    },
    {
      "module_id": "src.llmstruct.llm_client",
      "path": "src/llmstruct/llm_client.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "895644ff-f62d-44fc-900a-417aa71b957a"
    },
    {
      "module_id": "src.llmstruct.__main__",
      "path": "src/llmstruct/__main__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "aa92d697-a474-4b82-86a4-e533b4866cfe"
    },
    {
      "module_id": "src.llmstruct.metrics_tracker",
      "path": "src/llmstruct/metrics_tracker.py",
      "category": "core",
      "functions": 29,
      "classes": 4,
      "summary": "LLMStruct Metrics Tracker - \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043c\u0435\u0442\u0440\u0438\u043a \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
      "artifact_id": "468b2cc1-78d0-43c3-ab74-8c0963cbbbdb"
    },
    {
      "module_id": "src.llmstruct.cli",
      "path": "src/llmstruct/cli.py",
      "category": "core",
      "functions": 29,
      "classes": 0,
      "summary": "LLMStruct CLI - Main entry point for the command-line interface.",
      "artifact_id": "e9bf0391-65fb-4fc5-a953-f53521418640"
    },
    {
      "module_id": "src.llmstruct.context_orchestrator",
      "path": "src/llmstruct/context_orchestrator.py",
      "category": "core",
      "functions": 20,
      "classes": 5,
      "summary": "Smart Context Orchestration for LLMStruct",
      "artifact_id": "f2121872-10a2-441e-b972-0fd53ae60aef"
    },
    {
      "module_id": "src.llmstruct.ai_self_monitor",
      "path": "src/llmstruct/ai_self_monitor.py",
      "category": "core",
      "functions": 16,
      "classes": 4,
      "summary": "AI Self-Monitoring System",
      "artifact_id": "847da14a-6757-4da1-87f4-f57ba4a403f0"
    },
    {
      "module_id": "src.llmstruct.cursor_ai_bridge",
      "path": "src/llmstruct/cursor_ai_bridge.py",
      "category": "core",
      "functions": 21,
      "classes": 1,
      "summary": "Cursor AI Bridge - API Layer for AI Assistant Integration",
      "artifact_id": "35eaedb6-3202-413f-961d-d5d41e3bd651"
    },
    {
      "module_id": "src.llmstruct.ai_self_awareness",
      "path": "src/llmstruct/ai_self_awareness.py",
      "category": "core",
      "functions": 47,
      "classes": 8,
      "summary": "AI Self-Awareness Enhancement Module",
      "artifact_id": "ab902f07-36b3-440a-98b3-8f05ddb565a8"
    },
    {
      "module_id": "src.llmstruct.cli_utils",
      "path": "src/llmstruct/cli_utils.py",
      "category": "core",
      "functions": 13,
      "classes": 1,
      "summary": "CLI utility functions.",
      "artifact_id": "e320e6d4-cc08-4aa2-aa2a-b62de266147b"
    },
    {
      "module_id": "src.llmstruct.cli_commands",
      "path": "src/llmstruct/cli_commands.py",
      "category": "core",
      "functions": 22,
      "classes": 1,
      "summary": "CLI command processing and handlers.",
      "artifact_id": "5ef070f6-2742-4caf-8f12-2796f8bdfd2d"
    },
    {
      "module_id": "src.llmstruct.__init__",
      "path": "src/llmstruct/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "9d8a730d-7162-456a-9c23-4cd20125c60f"
    },
    {
      "module_id": "src.llmstruct.templates.__init__",
      "path": "src/llmstruct/templates/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Templates for LLM prompts used in LLMStruct integration.",
      "artifact_id": "28bb1250-66a2-4a79-912a-e6318e15cf06"
    },
    {
      "module_id": "src.llmstruct.api.app",
      "path": "src/llmstruct/api/app.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Main FastAPI application for LLMStruct",
      "artifact_id": "4a357a3e-c635-40fd-add2-ea51bc81d757"
    },
    {
      "module_id": "src.llmstruct.api.routes.continue_adapter",
      "path": "src/llmstruct/api/routes/continue_adapter.py",
      "category": "core",
      "functions": 5,
      "classes": 2,
      "summary": "Continue API Adapter",
      "artifact_id": "f253e120-5d58-47c8-87d7-62c9111de137"
    },
    {
      "module_id": "src.llmstruct.api.services.llm_service",
      "path": "src/llmstruct/api/services/llm_service.py",
      "category": "core",
      "functions": 17,
      "classes": 4,
      "summary": "LLM Service",
      "artifact_id": "12a49c73-b687-4069-936e-e6e2ff2926d3"
    },
    {
      "module_id": "src.llmstruct.generators.json_generator",
      "path": "src/llmstruct/generators/json_generator.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "f064ee57-9141-4028-91ff-3e300c99ae32"
    },
    {
      "module_id": "src.llmstruct.generators.go_json_generator",
      "path": "src/llmstruct/generators/go_json_generator.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "f597eda9-a066-4ab4-806c-69b53c077ed2"
    },
    {
      "module_id": "src.llmstruct.generators.__init__",
      "path": "src/llmstruct/generators/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "artifact_id": "7f140e78-cec2-4ef6-b6f5-c285d57f57ca"
    },
    {
      "module_id": "src.llmstruct.validators.json_validator",
      "path": "src/llmstruct/validators/json_validator.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "89f249ca-ca0c-409d-aa4f-9b40ad6ffc31"
    },
    {
      "module_id": "src.llmstruct.validators.__init__",
      "path": "src/llmstruct/validators/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "artifact_id": "d7ecf891-0283-4356-91d7-796dcb6c6100"
    },
    {
      "module_id": "src.llmstruct.parsers.universal_converter",
      "path": "src/llmstruct/parsers/universal_converter.py",
      "category": "core",
      "functions": 14,
      "classes": 3,
      "summary": "Universal Code Converter - Orchestrates all language parsers",
      "artifact_id": "5d0f83dc-4e59-4ffc-bcac-a62d78546243"
    },
    {
      "module_id": "src.llmstruct.parsers.go_analyzer",
      "path": "src/llmstruct/parsers/go_analyzer.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 Go \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043b\u044f Docker \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430",
      "artifact_id": "ca7b46d2-30b0-4187-9d2e-18e7723326a4"
    },
    {
      "module_id": "src.llmstruct.parsers.javascript_parser",
      "path": "src/llmstruct/parsers/javascript_parser.py",
      "category": "core",
      "functions": 5,
      "classes": 1,
      "summary": "",
      "artifact_id": "caee931d-7ddc-43a7-b874-9be0095040a3"
    },
    {
      "module_id": "src.llmstruct.parsers.python_parser",
      "path": "src/llmstruct/parsers/python_parser.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "",
      "artifact_id": "1d819b2e-ef98-46a5-b8ff-74cc3b62e22e"
    },
    {
      "module_id": "src.llmstruct.parsers.__init__",
      "path": "src/llmstruct/parsers/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "artifact_id": "767ffd5e-36f1-494e-86b3-a9a8fba3eac3"
    },
    {
      "module_id": "examples.python_project_utils",
      "path": "examples/python_project_utils.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "Utility functions for the sample project.",
      "artifact_id": "45520a0d-0eb6-43c2-bca6-dfd36525cc18"
    },
    {
      "module_id": "examples.python_project_main",
      "path": "examples/python_project_main.py",
      "category": "core",
      "functions": 2,
      "classes": 1,
      "summary": "Main module for the sample project.",
      "artifact_id": "3617223c-ae2b-4039-93e4-442781cb1b7a"
    },
    {
      "module_id": "integrations.telegram_bot.mp002_progress_bot",
      "path": "integrations/telegram_bot/mp002_progress_bot.py",
      "category": "core",
      "functions": 16,
      "classes": 1,
      "summary": "MP-002A Progress Bot - Telegram \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f Smart Wrapper \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438",
      "artifact_id": "d66a2499-5945-4d3c-b76d-9ef590df7abe"
    },
    {
      "module_id": "docs.cache",
      "path": "docs/cache.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "0d1a7d25-34ec-42a2-a3d6-71894a09d552"
    },
    {
      "module_id": "docs.json_selector",
      "path": "docs/json_selector.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "fedc8d3c-732d-490f-bcf9-8c38a43a43bf"
    },
    {
      "module_id": "docs.self_run",
      "path": "docs/self_run.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "88313d98-18d0-4659-a345-6fda175e0b46"
    },
    {
      "module_id": "docs.cli",
      "path": "docs/cli.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "",
      "artifact_id": "2dd144ef-cedd-48e6-a536-e84d60c6b6e3"
    },
    {
      "module_id": "tests.__init__",
      "path": "tests/__init__.py",
      "category": "test",
      "functions": 0,
      "classes": 0,
      "summary": "Test suite for LLMStruct, covering parsers, generators, validators, and integration.",
      "artifact_id": "fc313dae-397a-4c44-9a37-d099c2376baa"
    },
    {
      "module_id": ".PHOENIX.executable_phoenix_plan",
      "path": ".PHOENIX/executable_phoenix_plan.py",
      "category": "core",
      "functions": 17,
      "classes": 1,
      "summary": "PHOENIX: \u0418\u0441\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u044b\u0439 \u043f\u043b\u0430\u043d \u0440\u0435\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0437\u0430\u0446\u0438\u0438",
      "artifact_id": "1b82eec0-2180-4955-a220-1ba047129ebe"
    },
    {
      "module_id": "cursor_workflow_integration.scripts.install_ai_integration",
      "path": "cursor_workflow_integration/scripts/install_ai_integration.py",
      "category": "core",
      "functions": 5,
      "classes": 0,
      "summary": "\ud83d\ude80 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f Cursor",
      "artifact_id": "90263f27-8031-42e5-9b76-8c0307117bce"
    },
    {
      "module_id": "cursor_workflow_integration.files.auto_init_ai_system",
      "path": "cursor_workflow_integration/files/auto_init_ai_system.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "\ud83d\ude80 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043f\u0440\u0438 \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0432 Cursor",
      "artifact_id": "3a36016d-333a-4f68-9a9a-ad7266047ac0"
    }
  ],
  "modules": [
    {
      "module_id": "validate_sessions",
      "path": "validate_sessions.py",
      "category": "core",
      "module_doc": "Session Schema Validation Script for llmstruct\nValidates session management JSON files against their schemas.\nFocused validation for session system only.",
      "functions": [
        {
          "name": "load_json",
          "docstring": "Load JSON file with error handling.",
          "line_range": [
            21,
            31
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_json_against_schema",
          "docstring": "Validate JSON data against schema.",
          "line_range": [
            33,
            52
          ],
          "parameters": [
            "json_data",
            "schema_data",
            "file_name"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            54,
            124
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": [
            13,
            19
          ],
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {
        "load_json": [
          "print",
          "json.load",
          "open"
        ],
        "validate_json_against_schema": [
          "print",
          "list",
          "Draft7Validator",
          "len",
          "validator.iter_errors",
          "str"
        ],
        "main": [
          "print",
          "load_json",
          "errors.append",
          "validate_json_against_schema"
        ]
      },
      "dependencies": [
        "Draft7Validator",
        "ValidationError",
        "json",
        "jsonschema",
        "sys",
        "validate"
      ],
      "hash": "924ffd47c5971a755cb58e7ad0b4714fd00f3e4541c6e8a39375e8a3c977fe77",
      "artifact_id": "fd8e216a-9f09-4961-9054-d19137fd41e0"
    },
    {
      "module_id": "auto_init_ai_system",
      "path": "auto_init_ai_system.py",
      "category": "core",
      "module_doc": "\ud83d\ude80 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043f\u0440\u0438 \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0432 Cursor\n\u042d\u0442\u043e\u0442 \u0444\u0430\u0439\u043b \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0441\u0430\u043c\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0430 AI \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439\nENHANCED: \u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 workflow \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439, \u0441\u0435\u0441\u0441\u0438\u044f\u043c\u0438 \u0438 context tags",
      "functions": [
        {
          "name": "auto_initialize_ai_system",
          "docstring": "\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043f\u0440\u0438 \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            27,
            91
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "get_current_workflow_context",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 workflow \u0441\u0435\u0441\u0441\u0438\u0438 \u0438 workspace mode",
          "line_range": [
            93,
            129
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "get_workflow_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 workflow \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 \u043c\u0435\u0442\u0440\u0438\u043a",
          "line_range": [
            131,
            215
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "switch_workspace_mode",
          "docstring": "\u041f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u0442\u044c workspace mode (\u0434\u043b\u044f CLI integration)",
          "line_range": [
            217,
            233
          ],
          "parameters": [
            "mode_string"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            235,
            245
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "search_ai_capabilities",
          "docstring": "\u041f\u043e\u0438\u0441\u043a \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 AI \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0433\u043e struct.json \u0438 \u043c\u0435\u0442\u0440\u0438\u043a",
          "line_range": [
            247,
            314
          ],
          "parameters": [
            "query"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_context",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0434\u043b\u044f AI \u0432 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435",
          "line_range": [
            316,
            347
          ],
          "parameters": [
            "mode"
          ],
          "decorators": []
        },
        {
          "name": "get_epic_sessions_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 \u0432\u0441\u0435\u0445 \u044d\u043f\u0438\u043a-\u0441\u0435\u0441\u0441\u0438\u0439",
          "line_range": [
            349,
            398
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "create_epic_session",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e \u0434\u043b\u044f \u044d\u043f\u0438\u043a\u0430",
          "line_range": [
            400,
            421
          ],
          "parameters": [
            "epic_id",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "switch_to_session",
          "docstring": "\u041f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0434\u0440\u0443\u0433\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e",
          "line_range": [
            423,
            441
          ],
          "parameters": [
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "get_available_sessions",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u0441\u0435\u0441\u0441\u0438\u0439",
          "line_range": [
            443,
            504
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "session_management_commands",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043c\u0430\u043d\u0434 \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u0435\u0441\u0441\u0438\u044f\u043c\u0438",
          "line_range": [
            506,
            532
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "auto_initialize_ai_system": [
          "print",
          "AI_CAPABILITIES.discover_all_capabilities",
          "Path",
          "src_path.exists",
          "len",
          "logger.info",
          "logger.error",
          "get_current_workflow_context",
          "SystemCapabilityDiscovery",
          "str",
          "f.exists"
        ],
        "get_current_workflow_context": [
          "Path",
          "session.get",
          "workspace.get",
          "logger.warning",
          "logger.info",
          "workspace_file.exists",
          "open",
          "roadmap.get",
          "json.load",
          "session_file.exists",
          "epic_data.get",
          "roadmap_file.exists"
        ],
        "get_workflow_status": [
          "workspace_manager._get_git_branch",
          "WorkspaceStateManager",
          "time.time",
          "len",
          "json.load",
          "get_metrics_tracker",
          "workspace_manager.get_mode_description",
          "track_workflow_event",
          "struct_status.upper",
          "workspace_manager.get_epic_summaries",
          "session_info.get",
          "struct_file.exists",
          "Path",
          "workspace_manager.get_session_info",
          "metrics_tracker.get_session_summary",
          "open",
          "roadmap.get",
          "str",
          "e.get",
          "workspace_manager.get_current_mode",
          "roadmap_file.exists"
        ],
        "switch_workspace_mode": [
          "Path",
          "WorkspaceStateManager",
          "logger.info",
          "logger.error",
          "get_current_workflow_context",
          "ws.set_mode",
          "str"
        ],
        "get_ai_status": [
          "AI_CAPABILITIES.get_enhanced_capabilities_summary",
          "get_workflow_status",
          "AI_STATUS.get",
          "auto_initialize_ai_system"
        ],
        "search_ai_capabilities": [
          "time.time",
          "Path",
          "struct_data.get",
          "func.get",
          "results.append",
          "cls.get",
          "len",
          "track_workflow_event",
          "track_task_complete",
          "open",
          "enumerate",
          "track_task_start",
          "int",
          "file_info.get",
          "str",
          "query.lower",
          "json.load",
          "struct_file.exists"
        ],
        "get_ai_context": [
          "AI_CAPABILITIES.discover_all_capabilities",
          "len",
          "logger.error",
          "get_current_workflow_context",
          "json.dumps",
          "auto_initialize_ai_system"
        ],
        "get_epic_sessions_status": [
          "Path",
          "session.get",
          "open",
          "sessions_file.exists",
          "logger.error",
          "roadmap.get",
          "status_lines.append",
          "json.load",
          "epic_data.get",
          "roadmap_file.exists"
        ],
        "create_epic_session": [
          "Path",
          "logger.info",
          "logger.error",
          "epic_id.split",
          "os.system"
        ],
        "switch_to_session": [
          "Path",
          "logger.info",
          "logger.error",
          "get_current_workflow_context",
          "os.system"
        ],
        "get_available_sessions": [
          "Path",
          "session.get",
          "current_session_file.exists",
          "sessions_list.append",
          "sessions_data.get",
          "open",
          "sessions_file.exists",
          "logger.error",
          "current_data.get",
          "roadmap.get",
          "json.load",
          "epic_data.get",
          "roadmap_file.exists"
        ],
        "session_management_commands": []
      },
      "dependencies": [
        "Path",
        "SystemCapabilityDiscovery",
        "WorkspaceStateManager",
        "datetime",
        "get_metrics_tracker",
        "json",
        "llmstruct.ai_self_awareness",
        "llmstruct.workspace",
        "logging",
        "os",
        "pathlib",
        "src.llmstruct.metrics_tracker",
        "src.llmstruct.workspace",
        "sys",
        "time",
        "track_task_complete",
        "track_task_start",
        "track_workflow_event"
      ],
      "hash": "5b04d80ef4634c469acbad197d73ba92e3ddc281916e84c6dac9e2b30ff05439",
      "artifact_id": "b921e9bd-1362-4b3e-a888-e7eace3b063e"
    },
    {
      "module_id": "validate_schemas",
      "path": "validate_schemas.py",
      "category": "core",
      "module_doc": "JSON Schema Validation Script for llmstruct\nValidates all enhanced JSON files against their appropriate schemas.\nPart of TSK-130 implementation.",
      "functions": [
        {
          "name": "load_json",
          "docstring": "Load JSON file with error handling.",
          "line_range": [
            24,
            34
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_json_against_schema",
          "docstring": "Validate JSON data against schema.",
          "line_range": [
            37,
            53
          ],
          "parameters": [
            "json_data",
            "schema_data",
            "file_name"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            56,
            193
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": [
            15,
            21
          ],
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {
        "load_json": [
          "print",
          "json.load",
          "open"
        ],
        "validate_json_against_schema": [
          "print",
          "validate",
          "str"
        ],
        "main": [
          "print",
          "load_json",
          "errors.append",
          "validate_json_against_schema"
        ]
      },
      "dependencies": [
        "Draft7Validator",
        "ValidationError",
        "json",
        "jsonschema",
        "sys",
        "validate"
      ],
      "hash": "08ec72522f6c50cd1624a0680fe9edc8006176193c73e0c0b2b83cae8461719a",
      "artifact_id": "439dd56c-e5a6-4bb5-b983-8f55081edcba"
    },
    {
      "module_id": "install_ai_integration",
      "path": "install_ai_integration.py",
      "category": "core",
      "module_doc": "\ud83d\ude80 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f Cursor\n\u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0441\u0430\u043c\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0430 AI \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0432 \u043b\u044e\u0431\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442",
      "functions": [
        {
          "name": "install_ai_integration",
          "docstring": "\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044e \u0432 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442",
          "line_range": [
            12,
            58
          ],
          "parameters": [
            "target_project"
          ],
          "decorators": []
        },
        {
          "name": "adapt_cursorrules",
          "docstring": "\u0410\u0434\u0430\u043f\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c .cursorrules \u043f\u043e\u0434 \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442",
          "line_range": [
            60,
            99
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "adapt_auto_init",
          "docstring": "\u0410\u0434\u0430\u043f\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c auto_init_ai_system.py \u043f\u043e\u0434 \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442",
          "line_range": [
            101,
            123
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "create_simplified_auto_init",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0443\u043f\u0440\u043e\u0449\u0435\u043d\u043d\u0443\u044e \u0432\u0435\u0440\u0441\u0438\u044e auto_init \u0434\u043b\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432 \u0431\u0435\u0437 llmstruct",
          "line_range": [
            125,
            189
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438",
          "line_range": [
            191,
            207
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "install_ai_integration": [
          "print",
          "Path",
          "adapt_cursorrules",
          "vscode_dir.mkdir",
          "adapt_auto_init",
          "source_path.exists",
          "shutil.copy2",
          "target_root.exists"
        ],
        "adapt_cursorrules": [
          "print",
          "cursorrules_path.write_text",
          "content.replace",
          "list",
          "len",
          "cursorrules_path.exists",
          "cursorrules_path.read_text",
          "project_root.rglob"
        ],
        "adapt_auto_init": [
          "print",
          "content.replace",
          "auto_init_path.write_text",
          "auto_init_path.exists",
          "create_simplified_auto_init",
          "auto_init_path.read_text"
        ],
        "create_simplified_auto_init": [],
        "main": [
          "print",
          "len",
          "install_ai_integration"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "os",
        "pathlib",
        "shutil",
        "sys"
      ],
      "hash": "353707fbf511631d58cc0ba0a5e0e01c4d4d1ecc8ddae9d60d759ba6dd524f56",
      "artifact_id": "e78f1966-82de-48b8-b823-e6c64cccae3c"
    },
    {
      "module_id": "run_ai_diagnostics",
      "path": "run_ai_diagnostics.py",
      "category": "core",
      "module_doc": "Comprehensive AI Self-Awareness Diagnostics Runner\nEnhanced with Cursor integration testing, multi-AI orchestration validation,\npersonal planning bridge testing, and real-time performance metrics.",
      "functions": [
        {
          "name": "print_section",
          "docstring": "Print a formatted section header.",
          "line_range": [
            20,
            23
          ],
          "parameters": [
            "title",
            "emoji"
          ],
          "decorators": []
        },
        {
          "name": "print_subsection",
          "docstring": "Print a formatted subsection header.",
          "line_range": [
            25,
            28
          ],
          "parameters": [
            "title",
            "emoji"
          ],
          "decorators": []
        },
        {
          "name": "test_basic_ai_awareness",
          "docstring": "Test basic AI self-awareness capabilities.",
          "line_range": [
            30,
            51
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_cursor_integration",
          "docstring": "Test Cursor IDE integration capabilities.",
          "line_range": [
            53,
            124
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_real_time_metrics",
          "docstring": "Test real-time metrics calculation.",
          "line_range": [
            126,
            146
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_personal_planning_bridge",
          "docstring": "Test personal planning bridge functionality.",
          "line_range": [
            148,
            196
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_session_management",
          "docstring": "Test session management capabilities.",
          "line_range": [
            198,
            233
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_configuration_loading",
          "docstring": "Test configuration file loading.",
          "line_range": [
            235,
            255
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run_performance_benchmark",
          "docstring": "Run performance benchmarks for AI operations.",
          "line_range": [
            257,
            287
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "generate_diagnostic_report",
          "docstring": "Generate a comprehensive diagnostic report.",
          "line_range": [
            289,
            333
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "continuous_monitoring_mode",
          "docstring": "Run continuous monitoring of AI system health.",
          "line_range": [
            335,
            382
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_specific_component",
          "docstring": "Test a specific AI component in detail.",
          "line_range": [
            384,
            423
          ],
          "parameters": [
            "component_name"
          ],
          "decorators": []
        },
        {
          "name": "test_cli_commands",
          "docstring": "Test CLI command processing capabilities.",
          "line_range": [
            425,
            447
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_context_scenarios",
          "docstring": "Test context orchestrator scenarios.",
          "line_range": [
            449,
            466
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_copilot_features",
          "docstring": "Test copilot manager features.",
          "line_range": [
            468,
            485
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run_integration_health_check",
          "docstring": "Run comprehensive integration health check.",
          "line_range": [
            487,
            524
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "generate_optimization_suggestions",
          "docstring": "Generate automated optimization suggestions based on diagnostics.",
          "line_range": [
            526,
            597
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run_stress_test",
          "docstring": "Run stress test on AI system.",
          "line_range": [
            599,
            651
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Run comprehensive AI diagnostics.",
          "line_range": [
            653,
            738
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "print_section": [
          "print",
          "len"
        ],
        "print_subsection": [
          "print",
          "len"
        ],
        "test_basic_ai_awareness": [
          "print",
          "discovery.get_comprehensive_ai_status",
          "discovery.get_enhanced_capabilities_summary",
          "len",
          "print_section",
          "SystemCapabilityDiscovery",
          "discovery.discover_all_capabilities"
        ],
        "test_cursor_integration": [
          "print",
          "cursor_integration.get_comprehensive_cursor_response",
          "context_data.get",
          "len",
          "response.get",
          "print_subsection",
          "create_cursor_integration",
          "print_section",
          "delegation.get"
        ],
        "test_real_time_metrics": [
          "print",
          "discovery._calculate_real_cache_hit_rate",
          "print_section",
          "SystemCapabilityDiscovery",
          "discovery._get_real_system_load",
          "discovery.get_cursor_status_report"
        ],
        "test_personal_planning_bridge": [
          "print",
          "PersonalPlanningCursorBridge",
          "bridge.get_priority_guidance",
          "len",
          "enumerate",
          "print_section",
          "guidance.get",
          "top_feature.get",
          "bridge.get_goal_aligned_suggestions"
        ],
        "test_session_management": [
          "print",
          "CursorSessionManager",
          "session_manager.save_session_context",
          "print_section",
          "session_manager.start_session"
        ],
        "test_configuration_loading": [
          "print",
          "Path",
          "len",
          "open",
          "print_section",
          "config_path.exists",
          "json.load"
        ],
        "run_performance_benchmark": [
          "print",
          "time.time",
          "create_cursor_integration",
          "print_section",
          "SystemCapabilityDiscovery",
          "discovery.discover_all_capabilities"
        ],
        "generate_diagnostic_report": [
          "print",
          "Path",
          "len",
          "open",
          "json.dump",
          "print_section",
          "time.strftime",
          "SystemCapabilityDiscovery",
          "discovery.discover_all_capabilities"
        ],
        "continuous_monitoring_mode": [
          "print",
          "time.sleep",
          "discovery._calculate_real_cache_hit_rate",
          "len",
          "print_section",
          "SystemCapabilityDiscovery",
          "time.strftime",
          "discovery._get_real_system_load",
          "discovery.discover_all_capabilities"
        ],
        "test_specific_component": [
          "print",
          "component_name.upper",
          "test_context_scenarios",
          "list",
          "test_cli_commands",
          "len",
          "enumerate",
          "print_section",
          "SystemCapabilityDiscovery",
          "test_copilot_features",
          "discovery.discover_all_capabilities"
        ],
        "test_cli_commands": [
          "print",
          "CLIConfig",
          "CommandProcessor",
          "CLIUtils"
        ],
        "test_context_scenarios": [
          "print",
          "create_context_orchestrator"
        ],
        "test_copilot_features": [
          "feature.replace",
          "hasattr",
          "print",
          "initialize_copilot"
        ],
        "run_integration_health_check": [
          "print",
          "cursor_integration.get_comprehensive_cursor_response",
          "response.get",
          "create_cursor_integration",
          "print_section"
        ],
        "generate_optimization_suggestions": [
          "print",
          "len",
          "enumerate",
          "print_section",
          "SystemCapabilityDiscovery",
          "suggestions.append",
          "discovery.discover_all_capabilities"
        ],
        "run_stress_test": [
          "print",
          "time.time",
          "context_data.get",
          "range",
          "create_cursor_integration",
          "enumerate",
          "print_section",
          "SystemCapabilityDiscovery",
          "delegation.get",
          "discovery.discover_all_capabilities"
        ],
        "main": [
          "print",
          "time.time",
          "run_integration_health_check",
          "run_stress_test",
          "continuous_monitoring_mode",
          "len",
          "print_section",
          "test_specific_component",
          "test_func",
          "generate_optimization_suggestions"
        ]
      },
      "dependencies": [
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "CursorSessionManager",
        "Path",
        "PersonalPlanningCursorBridge",
        "SystemCapabilityDiscovery",
        "create_context_orchestrator",
        "create_cursor_integration",
        "initialize_copilot",
        "json",
        "llmstruct.ai_self_awareness",
        "llmstruct.cli_commands",
        "llmstruct.cli_config",
        "llmstruct.cli_utils",
        "llmstruct.context_orchestrator",
        "llmstruct.copilot",
        "llmstruct.cursor_integration",
        "os",
        "pathlib",
        "sys",
        "time"
      ],
      "hash": "59644d1ec404ce42fe6b754b03781cfe0649dc8d2c57a88c3f1b654e78f01fd2",
      "artifact_id": "80ffc9b3-3ea2-42ae-b189-5357440873ee"
    },
    {
      "module_id": "start_development",
      "path": "start_development.py",
      "category": "core",
      "module_doc": "LLMStruct Development Startup Script\nConvenient one-command startup for daily development workflow.\nEnhanced with AI Workflow Middleware and Self-Monitoring for seamless llmstruct integration.",
      "functions": [
        {
          "name": "print_header",
          "docstring": "Print startup header.",
          "line_range": [
            17,
            21
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "initialize_ai_integration_layer",
          "docstring": "Initialize AI integration layer - this is the NEW seamless integration",
          "line_range": [
            23,
            73
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "check_environment",
          "docstring": "Check if development environment is properly set up.",
          "line_range": [
            75,
            110
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "initialize_workflow_orchestrator",
          "docstring": "Initialize and test WorkflowOrchestrator integration.",
          "line_range": [
            112,
            156
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "initialize_cursor_ai_bridge",
          "docstring": "Initialize and test CursorAIBridge integration.",
          "line_range": [
            158,
            198
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "sync_architecture_components",
          "docstring": "Sync with existing llmstruct architecture components and AI integration.",
          "line_range": [
            200,
            240
          ],
          "parameters": [
            "orchestrator",
            "ai_integration"
          ],
          "decorators": []
        },
        {
          "name": "run_system_health_check",
          "docstring": "Run comprehensive system health check.",
          "line_range": [
            242,
            263
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "get_optimization_suggestions",
          "docstring": "Get AI optimization suggestions with WorkflowOrchestrator integration.",
          "line_range": [
            265,
            320
          ],
          "parameters": [
            "orchestrator"
          ],
          "decorators": []
        },
        {
          "name": "check_git_status",
          "docstring": "Check git repository status.",
          "line_range": [
            322,
            368
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_current_context",
          "docstring": "Show current project context and priorities.",
          "line_range": [
            370,
            411
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_useful_commands",
          "docstring": "Show useful commands for development.",
          "line_range": [
            413,
            472
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Main startup routine with AI Workflow Middleware and WorkflowOrchestrator integration.",
          "line_range": [
            474,
            593
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "print_header": [
          "print"
        ],
        "initialize_ai_integration_layer": [
          "print",
          "Path",
          "record_ai_usage",
          "initialize_ai_monitor",
          "str",
          "middleware.process_ai_request",
          "initialize_ai_middleware"
        ],
        "check_environment": [
          "print",
          "Path",
          "hasattr",
          "missing_files.append"
        ],
        "initialize_workflow_orchestrator": [
          "print",
          "dup_analysis.get",
          "context.get",
          "system_caps.get",
          "len",
          "copilot_status.get",
          "orchestrator.get_current_context",
          "struct_analysis.get",
          "WorkflowOrchestrator",
          "stats.get"
        ],
        "initialize_cursor_ai_bridge": [
          "print",
          "bridge.ai_analyze_task",
          "context.get",
          "bridge.ai_get_context",
          "len",
          "ai_rec.get",
          "task_analysis.get",
          "CursorAIBridge",
          "project_state.get"
        ],
        "sync_architecture_components": [
          "print",
          "middleware.get_middleware_stats",
          "ai_integration.get",
          "sync_results.items",
          "orchestrator.sync_with_existing_architecture"
        ],
        "run_system_health_check": [
          "print",
          "subprocess.run"
        ],
        "get_optimization_suggestions": [
          "print",
          "r.get",
          "line.strip",
          "orchestrator.analyze_codebase_for_duplicates",
          "enumerate",
          "subprocess.run",
          "suggestions.append",
          "duplication_analysis.get"
        ],
        "check_git_status": [
          "print",
          "len",
          "changes.split",
          "subprocess.run"
        ],
        "show_current_context": [
          "print",
          "Path",
          "bridge_file.exists",
          "init_file.exists",
          "init_data.get",
          "bridge_data.get",
          "open",
          "enumerate",
          "vision.get",
          "json.load",
          "business_obj.get"
        ],
        "show_useful_commands": [
          "print"
        ],
        "main": [
          "print",
          "print_header",
          "middleware.get_middleware_stats",
          "initialize_ai_integration_layer",
          "check_environment",
          "ai_integration.get",
          "show_useful_commands",
          "initialize_workflow_orchestrator",
          "run_system_health_check",
          "get_optimization_suggestions",
          "show_current_context",
          "sync_architecture_components",
          "initialize_cursor_ai_bridge",
          "check_git_status",
          "monitor.analyze_behavior_trends"
        ]
      },
      "dependencies": [
        "AIWorkflowMode",
        "CursorAIBridge",
        "Path",
        "WorkflowOrchestrator",
        "initialize_ai_middleware",
        "initialize_ai_monitor",
        "json",
        "llmstruct.ai_self_monitor",
        "llmstruct.ai_workflow_middleware",
        "llmstruct.cursor_ai_bridge",
        "llmstruct.workflow_orchestrator",
        "os",
        "pathlib",
        "record_ai_usage",
        "subprocess",
        "sys"
      ],
      "hash": "da3d9e91130a06f318e0844e82c02d253937154ac42bec34a1da2230c1e4329a",
      "artifact_id": "7755f8f2-f6e5-45a8-b50a-65e40207e152"
    },
    {
      "module_id": "verify_llm_response",
      "path": "verify_llm_response.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_json_file",
          "docstring": "Load a JSON file and return its contents.",
          "line_range": [
            15,
            25
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "verify_response_with_struct",
          "docstring": "Verify llm_response.json against struct.json.",
          "line_range": [
            28,
            71
          ],
          "parameters": [
            "response_text",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "verify_response_without_struct",
          "docstring": "Verify llm_response.json based on LLMstruct principles.",
          "line_range": [
            74,
            108
          ],
          "parameters": [
            "response_text"
          ],
          "decorators": []
        },
        {
          "name": "generate_metrics",
          "docstring": "Generate metrics for the response per EXT-004.",
          "line_range": [
            111,
            141
          ],
          "parameters": [
            "response_data",
            "server_log"
          ],
          "decorators": []
        },
        {
          "name": "update_tasks_json",
          "docstring": "Append a new task to tasks.json.",
          "line_range": [
            144,
            151
          ],
          "parameters": [
            "tasks_file",
            "new_task"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            154,
            225
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json_file": [
          "logging.error",
          "json.load",
          "open"
        ],
        "verify_response_with_struct": [
          "struct_data.get",
          "expected_files.issubset",
          "logging.error",
          "expected_extensions.issubset",
          "re.findall",
          "set",
          "logging.info",
          "e.startswith",
          "expected_goals.issubset"
        ],
        "verify_response_without_struct": [
          "principle.lower",
          "expected_files.issubset",
          "logging.error",
          "expected_extensions.issubset",
          "re.findall",
          "set",
          "response_text.lower",
          "logging.info",
          "expected_goals.issubset"
        ],
        "generate_metrics": [
          "response_text.split",
          "datetime.utcnow",
          "len",
          "re.findall",
          "server_log.get"
        ],
        "update_tasks_json": [
          "load_json_file",
          "tasks.get",
          "open",
          "json.dump",
          "logging.info"
        ],
        "main": [
          "logging.info",
          "verify_response_without_struct",
          "verify_response_with_struct",
          "load_json_file",
          "argparse.ArgumentParser",
          "open",
          "json.dump",
          "generate_metrics",
          "parser.parse_args",
          "parser.add_argument",
          "update_tasks_json"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "argparse",
        "datetime",
        "json",
        "logging",
        "os",
        "re",
        "typing"
      ],
      "hash": "cc9835ed655495604e354911c11b62791d839a9336d76f7df5fa987ba674c57a",
      "artifact_id": "0a9cc1bb-a157-4927-9603-14d6fb12cda7"
    },
    {
      "module_id": "struct_cache_manager",
      "path": "struct_cache_manager.py",
      "category": "core",
      "module_doc": "\ud83d\ude80 Smart struct.json Cache Manager for [code] Mode\n\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u0431\u044b\u0441\u0442\u0440\u043e\u0433\u043e \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
      "functions": [
        {
          "name": "test_cache_performance",
          "docstring": "\u0422\u0435\u0441\u0442 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u0435\u0448\u0430",
          "line_range": [
            321,
            355
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            17,
            29
          ],
          "parameters": [
            "self",
            "struct_file"
          ],
          "decorators": []
        },
        {
          "name": "get_file_hash",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0445\u0435\u0448 \u0444\u0430\u0439\u043b\u0430 struct.json \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439",
          "line_range": [
            31,
            38
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "is_cache_valid",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0441\u0442\u044c \u043a\u0435\u0448\u0430",
          "line_range": [
            40,
            54
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "build_cache",
          "docstring": "\u0421\u0442\u0440\u043e\u0438\u0442 \u043f\u043e\u043b\u043d\u044b\u0439 \u043a\u0435\u0448 \u0438\u0437 struct.json",
          "line_range": [
            56,
            150
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "search_modules",
          "docstring": "\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u043c\u043e\u0434\u0443\u043b\u0435\u0439",
          "line_range": [
            152,
            177
          ],
          "parameters": [
            "self",
            "query"
          ],
          "decorators": []
        },
        {
          "name": "search_functions",
          "docstring": "\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u0444\u0443\u043d\u043a\u0446\u0438\u0439",
          "line_range": [
            179,
            205
          ],
          "parameters": [
            "self",
            "query"
          ],
          "decorators": []
        },
        {
          "name": "search_classes",
          "docstring": "\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u043a\u043b\u0430\u0441\u0441\u043e\u0432",
          "line_range": [
            207,
            233
          ],
          "parameters": [
            "self",
            "query"
          ],
          "decorators": []
        },
        {
          "name": "get_module_details",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0434\u0435\u0442\u0430\u043b\u0438 \u043c\u043e\u0434\u0443\u043b\u044f",
          "line_range": [
            235,
            248
          ],
          "parameters": [
            "self",
            "module_name"
          ],
          "decorators": []
        },
        {
          "name": "get_cache_stats",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u043a\u0435\u0448\u0430",
          "line_range": [
            250,
            265
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "invalidate_cache",
          "docstring": "\u0418\u043d\u0432\u0430\u043b\u0438\u0434\u0438\u0440\u0443\u0435\u0442 \u043a\u0435\u0448",
          "line_range": [
            267,
            281
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "smart_search",
          "docstring": "\u0423\u043c\u043d\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u0432\u0441\u0435\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u043c \u0441 \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432",
          "line_range": [
            283,
            319
          ],
          "parameters": [
            "self",
            "query",
            "search_type"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "StructCacheManager",
          "docstring": "\u0423\u043c\u043d\u044b\u0439 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u043a\u0435\u0448\u0430 \u0434\u043b\u044f struct.json \u0432 \u0440\u0435\u0436\u0438\u043c\u0435 [code]",
          "line_range": [
            14,
            319
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                17,
                29
              ],
              "parameters": [
                "self",
                "struct_file"
              ]
            },
            {
              "name": "get_file_hash",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0445\u0435\u0448 \u0444\u0430\u0439\u043b\u0430 struct.json \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439",
              "line_range": [
                31,
                38
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "is_cache_valid",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0441\u0442\u044c \u043a\u0435\u0448\u0430",
              "line_range": [
                40,
                54
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "build_cache",
              "docstring": "\u0421\u0442\u0440\u043e\u0438\u0442 \u043f\u043e\u043b\u043d\u044b\u0439 \u043a\u0435\u0448 \u0438\u0437 struct.json",
              "line_range": [
                56,
                150
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "search_modules",
              "docstring": "\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u043c\u043e\u0434\u0443\u043b\u0435\u0439",
              "line_range": [
                152,
                177
              ],
              "parameters": [
                "self",
                "query"
              ]
            },
            {
              "name": "search_functions",
              "docstring": "\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u0444\u0443\u043d\u043a\u0446\u0438\u0439",
              "line_range": [
                179,
                205
              ],
              "parameters": [
                "self",
                "query"
              ]
            },
            {
              "name": "search_classes",
              "docstring": "\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u043a\u043b\u0430\u0441\u0441\u043e\u0432",
              "line_range": [
                207,
                233
              ],
              "parameters": [
                "self",
                "query"
              ]
            },
            {
              "name": "get_module_details",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0434\u0435\u0442\u0430\u043b\u0438 \u043c\u043e\u0434\u0443\u043b\u044f",
              "line_range": [
                235,
                248
              ],
              "parameters": [
                "self",
                "module_name"
              ]
            },
            {
              "name": "get_cache_stats",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u043a\u0435\u0448\u0430",
              "line_range": [
                250,
                265
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "invalidate_cache",
              "docstring": "\u0418\u043d\u0432\u0430\u043b\u0438\u0434\u0438\u0440\u0443\u0435\u0442 \u043a\u0435\u0448",
              "line_range": [
                267,
                281
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "smart_search",
              "docstring": "\u0423\u043c\u043d\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u0432\u0441\u0435\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u043c \u0441 \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432",
              "line_range": [
                283,
                319
              ],
              "parameters": [
                "self",
                "query",
                "search_type"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "print",
          "Path"
        ],
        "get_file_hash": [
          "f.read",
          "hashlib.md5",
          "open"
        ],
        "is_cache_valid": [
          "metadata.get",
          "self.get_file_hash",
          "json.load",
          "open"
        ],
        "build_cache": [
          "print",
          "time.time",
          "module.get",
          "c.get",
          "func.get",
          "self.get_file_hash",
          "datetime.now",
          "cls.get",
          "len",
          "open",
          "json.dump",
          "f.get",
          "data.get",
          "m.get",
          "json.load"
        ],
        "search_modules": [
          "print",
          "self.is_cache_valid",
          "modules.items",
          "results.append",
          "len",
          "open",
          "name.lower",
          "self.build_cache",
          "query.lower",
          "json.load"
        ],
        "search_functions": [
          "print",
          "self.is_cache_valid",
          "functions.items",
          "results.append",
          "open",
          "name.lower",
          "sorted",
          "self.build_cache",
          "query.lower",
          "json.load"
        ],
        "search_classes": [
          "print",
          "self.is_cache_valid",
          "classes.items",
          "results.append",
          "len",
          "open",
          "name.lower",
          "sorted",
          "self.build_cache",
          "query.lower",
          "json.load"
        ],
        "get_module_details": [
          "print",
          "self.is_cache_valid",
          "modules.get",
          "open",
          "self.build_cache",
          "json.load"
        ],
        "get_cache_stats": [
          "self.is_cache_valid",
          "json.load",
          "str",
          "open"
        ],
        "invalidate_cache": [
          "cache_file.exists",
          "print",
          "cache_file.unlink"
        ],
        "smart_search": [
          "print",
          "self.search_classes",
          "open",
          "json.dump",
          "self.search_functions",
          "self.search_modules",
          "query.lower",
          "json.load"
        ],
        "test_cache_performance": [
          "print",
          "time.time",
          "len",
          "cache_manager.smart_search",
          "cache_manager.get_cache_stats",
          "cache_manager.build_cache",
          "sum",
          "stats.get",
          "StructCacheManager"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "datetime",
        "hashlib",
        "json",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": "7b91b778b13dd7493a731e896d9a2a03b7b2ee7afc8c711d1d5c0f7009818a2c",
      "artifact_id": "8582d855-3967-4a8e-9e64-c11920db4a8d"
    },
    {
      "module_id": "collector",
      "path": "collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "",
          "line_range": [
            13,
            17
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "is_text_file",
          "docstring": "Check if file is likely a text file based on extension.",
          "line_range": [
            20,
            31
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "collect_project",
          "docstring": "",
          "line_range": [
            34,
            66
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "Path",
          "gitignore_path.exists",
          "gitignore_parser.parse_gitignore"
        ],
        "is_text_file": [],
        "collect_project": [
          "load_gitignore",
          "Path",
          "is_text_file",
          "gitignore",
          "logger.warning",
          "logger.info",
          "len",
          "open",
          "logger.error",
          "file_path.is_file",
          "json.dump",
          "doc_files.items",
          "str",
          "f.read",
          "any",
          "root_dir.rglob"
        ]
      },
      "dependencies": [
        "Path",
        "gitignore_parser",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": "f6d7fb537d2ae878884758c22a853439c915eae11cf2f19fd92224e5adda61cd",
      "artifact_id": "c06d28bd-b068-4ddd-909e-5ac07b6ff9c9"
    },
    {
      "module_id": ".ARCHIVE.parse_ollama_models",
      "path": ".ARCHIVE/parse_ollama_models.py",
      "category": "core",
      "module_doc": "\u041f\u0430\u0440\u0441\u0435\u0440 \u0441\u043f\u0438\u0441\u043a\u0430 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 Ollama \u0434\u043b\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430",
      "functions": [
        {
          "name": "parse_ollama_models",
          "docstring": "\u041f\u0430\u0440\u0441\u0438\u0442 \u0444\u0430\u0439\u043b \u0441\u043e \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u043c\u043e\u0434\u0435\u043b\u0435\u0439 Ollama \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435",
          "line_range": [
            8,
            44
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "parse_model_block",
          "docstring": "\u041f\u0430\u0440\u0441\u0438\u0442 \u0431\u043b\u043e\u043a \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043c\u043e\u0434\u0435\u043b\u0438",
          "line_range": [
            46,
            105
          ],
          "parameters": [
            "name",
            "block"
          ],
          "decorators": []
        },
        {
          "name": "categorize_models",
          "docstring": "\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044f\u043c \u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044e",
          "line_range": [
            107,
            156
          ],
          "parameters": [
            "models"
          ],
          "decorators": []
        },
        {
          "name": "analyze_for_rtx3060ti",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441 \u0442\u043e\u0447\u043a\u0438 \u0437\u0440\u0435\u043d\u0438\u044f \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u0438 \u0441 RTX 3060 Ti (8GB VRAM)",
          "line_range": [
            158,
            179
          ],
          "parameters": [
            "models"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "parse_ollama_models": [
          "current_block.append",
          "re.match",
          "line.strip",
          "len",
          "open",
          "models.append",
          "f.read",
          "content.split",
          "parse_model_block"
        ],
        "parse_model_block": [
          "re.match",
          "len",
          "sizes.append",
          "enumerate",
          "prev_line.isdigit",
          "int",
          "line.isdigit",
          "prev_line.replace",
          "capabilities.append"
        ],
        "categorize_models": [
          "any"
        ],
        "analyze_for_rtx3060ti": [
          "max",
          "compatible_models.append",
          "float",
          "sorted",
          "size.endswith"
        ]
      },
      "dependencies": [
        "json",
        "re"
      ],
      "hash": "d887cbb20f84fb0d98764d68c354f11fedb75e7ab9acf728b4e9af8932a21d1d",
      "artifact_id": "58b66bc1-e235-4d34-a422-ca8e7e3ef19d"
    },
    {
      "module_id": ".ARCHIVE.parse_ollama_full",
      "path": ".ARCHIVE/parse_ollama_full.py",
      "category": "core",
      "module_doc": "Full Ollama List Parser + Context Merger for Grok Consultation\nParses ollama_list.txt (2103 lines) and merges with existing context",
      "functions": [
        {
          "name": "parse_ollama_list",
          "docstring": "Parse ollama_list.txt and return structured data",
          "line_range": [
            11,
            92
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "convert_md_to_json",
          "docstring": "Convert markdown content to structured JSON",
          "line_range": [
            94,
            124
          ],
          "parameters": [
            "md_content"
          ],
          "decorators": []
        },
        {
          "name": "create_flattened_models_structure",
          "docstring": "Create a flattened structure that's more LLM-friendly",
          "line_range": [
            126,
            222
          ],
          "parameters": [
            "models"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            224,
            301
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "parse_pulls",
          "docstring": "",
          "line_range": [
            150,
            157
          ],
          "parameters": [
            "pulls_str"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "parse_ollama_list": [
          "f.readlines",
          "c.isdigit",
          "len",
          "open",
          "line.endswith",
          "current_model.get",
          "models.append",
          "line.isdigit",
          "any"
        ],
        "convert_md_to_json": [
          "line.strip",
          "md_content.split",
          "current_content.append",
          "line.startswith"
        ],
        "create_flattened_models_structure": [
          "len"
        ],
        "parse_pulls": [
          "pulls_str.endswith",
          "float"
        ],
        "main": [
          "print",
          "parse_ollama_list",
          "convert_md_to_json",
          "create_flattened_models_structure",
          "len",
          "open",
          "json.dump",
          "enumerate",
          "f.read"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "pathlib",
        "re"
      ],
      "hash": "f1b88858e917161a9ca7e5a409a9beef07f7be910dd08c0dc6b28cb8840aa3a5",
      "artifact_id": "7b1db3e1-a6b4-4f8d-99c0-05b05dbdc45f"
    },
    {
      "module_id": ".ARCHIVE.force_ai_integration",
      "path": ".ARCHIVE/force_ai_integration.py",
      "category": "core",
      "module_doc": "Force AI Integration Script\nInitializes middleware and monitoring to ensure AI uses llmstruct system.",
      "functions": [
        {
          "name": "force_ai_integration",
          "docstring": "Force AI to use llmstruct system.",
          "line_range": [
            18,
            106
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "check_integration_status",
          "docstring": "Check current AI integration status.",
          "line_range": [
            109,
            138
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "force_ai_integration": [
          "print",
          "Path",
          "record_ai_usage",
          "monitor.get_real_time_guidance",
          "config_file.exists",
          "open",
          "json.dump",
          "initialize_ai_monitor",
          "str",
          "middleware.process_ai_request",
          "initialize_ai_middleware"
        ],
        "check_integration_status": [
          "print",
          "get_ai_monitor",
          "middleware.get_middleware_stats",
          "get_ai_middleware",
          "monitor.analyze_behavior_trends"
        ]
      },
      "dependencies": [
        "AIWorkflowMode",
        "Path",
        "get_ai_middleware",
        "get_ai_monitor",
        "initialize_ai_middleware",
        "initialize_ai_monitor",
        "json",
        "llmstruct.ai_self_monitor",
        "llmstruct.ai_workflow_middleware",
        "pathlib",
        "record_ai_usage",
        "sys"
      ],
      "hash": "783d4261c3f3167843c642d5e2b59e077bddb415dacdbe64a6911560dddf6312",
      "artifact_id": "b923e2ec-c27d-4b99-a3ef-4be3308790f4"
    },
    {
      "module_id": ".ARCHIVE.final_system_check",
      "path": ".ARCHIVE/final_system_check.py",
      "category": "core",
      "module_doc": "Final System Status Check - LLMStruct Modular CLI Integration\nComprehensive validation of all completed components",
      "functions": [
        {
          "name": "check_system_status",
          "docstring": "Comprehensive system status check",
          "line_range": [
            12,
            155
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "check_system_status": [
          "print",
          "len",
          "i.get",
          "open",
          "data.get",
          "json.load",
          "t.get"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "os",
        "pathlib",
        "sys"
      ],
      "hash": "16e3482f7da9388c53726063af559a9e48ad8e5a6c5c49e064129c0e5cf68aa7",
      "artifact_id": "dc8ced84-6ebf-400e-a0f2-8ace731a3749"
    },
    {
      "module_id": ".ARCHIVE.telegram_bot_final",
      "path": ".ARCHIVE/telegram_bot_final.py",
      "category": "core",
      "module_doc": "\ud83c\udfaf \u0424\u0418\u041d\u0410\u041b\u042c\u041d\u0410\u042f \u0432\u0435\u0440\u0441\u0438\u044f Telegram \u0431\u043e\u0442\u0430 \u0434\u043b\u044f LLMStruct\n- \u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 FastAPI \u2705\n- \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 SSL \u043e\u0448\u0438\u0431\u043e\u043a \u2705  \n- \u0410\u0432\u0442\u043e\u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u2705\n- \u041f\u043e\u043b\u043d\u043e\u0435 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u2705",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": [
            292,
            325
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            42,
            53
          ],
          "parameters": [
            "self",
            "token",
            "api_base_url"
          ],
          "decorators": []
        },
        {
          "name": "get_session",
          "docstring": "",
          "line_range": [
            55,
            59
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "api_call",
          "docstring": "\u0423\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u044b\u0439 \u0432\u044b\u0437\u043e\u0432 API \u0441 \u043f\u043e\u0432\u0442\u043e\u0440\u0430\u043c\u0438",
          "line_range": [
            61,
            92
          ],
          "parameters": [
            "self",
            "endpoint",
            "method",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "save_user_message",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            94,
            106
          ],
          "parameters": [
            "self",
            "user_id",
            "username",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "get_user_history",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            108,
            116
          ],
          "parameters": [
            "self",
            "user_id",
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "chat_with_ollama",
          "docstring": "\u0427\u0430\u0442 \u0441 Ollama",
          "line_range": [
            118,
            133
          ],
          "parameters": [
            "self",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "get_system_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            135,
            137
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "setup_handlers",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432",
          "line_range": [
            139,
            150
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "start_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
          "line_range": [
            152,
            176
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "status_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /status",
          "line_range": [
            178,
            200
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "memory_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /memory",
          "line_range": [
            202,
            222
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "help_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /help",
          "line_range": [
            224,
            243
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
          "line_range": [
            245,
            272
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "error_handler",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u043e\u0448\u0438\u0431\u043e\u043a",
          "line_range": [
            274,
            284
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "cleanup",
          "docstring": "\u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432",
          "line_range": [
            286,
            290
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "FinalLLMStructBot",
          "docstring": "",
          "line_range": [
            41,
            290
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                42,
                53
              ],
              "parameters": [
                "self",
                "token",
                "api_base_url"
              ]
            },
            {
              "name": "get_session",
              "docstring": "",
              "line_range": [
                55,
                59
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "api_call",
              "docstring": "\u0423\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u044b\u0439 \u0432\u044b\u0437\u043e\u0432 API \u0441 \u043f\u043e\u0432\u0442\u043e\u0440\u0430\u043c\u0438",
              "line_range": [
                61,
                92
              ],
              "parameters": [
                "self",
                "endpoint",
                "method",
                "data"
              ]
            },
            {
              "name": "save_user_message",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
              "line_range": [
                94,
                106
              ],
              "parameters": [
                "self",
                "user_id",
                "username",
                "message"
              ]
            },
            {
              "name": "get_user_history",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
              "line_range": [
                108,
                116
              ],
              "parameters": [
                "self",
                "user_id",
                "limit"
              ]
            },
            {
              "name": "chat_with_ollama",
              "docstring": "\u0427\u0430\u0442 \u0441 Ollama",
              "line_range": [
                118,
                133
              ],
              "parameters": [
                "self",
                "message"
              ]
            },
            {
              "name": "get_system_status",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
              "line_range": [
                135,
                137
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "setup_handlers",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432",
              "line_range": [
                139,
                150
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "start_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
              "line_range": [
                152,
                176
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "status_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /status",
              "line_range": [
                178,
                200
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "memory_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /memory",
              "line_range": [
                202,
                222
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "help_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /help",
              "line_range": [
                224,
                243
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
              "line_range": [
                245,
                272
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "error_handler",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u043e\u0448\u0438\u0431\u043e\u043a",
              "line_range": [
                274,
                284
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "cleanup",
              "docstring": "\u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432",
              "line_range": [
                286,
                290
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.setup_handlers",
          "logger.info",
          "Application.builder"
        ],
        "get_session": [
          "aiohttp.ClientSession",
          "aiohttp.ClientTimeout"
        ],
        "api_call": [
          "self.get_session",
          "session.get",
          "logger.warning",
          "range",
          "logger.debug",
          "logger.error",
          "response.json",
          "asyncio.sleep",
          "session.post"
        ],
        "save_user_message": [
          "datetime.now",
          "logger.info",
          "self.api_call"
        ],
        "get_user_history": [
          "logger.info",
          "result.get",
          "self.api_call",
          "len"
        ],
        "chat_with_ollama": [
          "logger.info",
          "result.get",
          "self.api_call",
          "logger.error"
        ],
        "get_system_status": [
          "self.api_call"
        ],
        "setup_handlers": [
          "MessageHandler",
          "logger.info",
          "CommandHandler"
        ],
        "start_command": [
          "logger.info",
          "self.save_user_message",
          "logger.error"
        ],
        "status_command": [
          "status.get",
          "logger.info",
          "logger.error",
          "self.save_user_message",
          "self.get_system_status"
        ],
        "memory_command": [
          "msg.get",
          "logger.info",
          "logger.error",
          "enumerate",
          "self.save_user_message",
          "self.get_user_history"
        ],
        "help_command": [
          "logger.info",
          "logger.error"
        ],
        "handle_message": [
          "logger.info",
          "logger.error",
          "self.save_user_message",
          "thinking_msg.edit_text",
          "self.chat_with_ollama"
        ],
        "error_handler": [
          "isinstance",
          "logger.info",
          "asyncio.sleep",
          "logger.error"
        ],
        "cleanup": [
          "logger.info"
        ],
        "main": [
          "print",
          "os.getenv",
          "logger.info",
          "FinalLLMStructBot",
          "logger.error",
          "BotCommand"
        ]
      },
      "dependencies": [
        "Application",
        "BotCommand",
        "CommandHandler",
        "ContextTypes",
        "MessageHandler",
        "NetworkError",
        "Path",
        "RetryAfter",
        "TimedOut",
        "Update",
        "aiohttp",
        "asyncio",
        "datetime",
        "filters",
        "json",
        "logging",
        "os",
        "pathlib",
        "telegram",
        "telegram.error",
        "telegram.ext",
        "time"
      ],
      "hash": "e810248a290ab9a6f39f85c727e0a5f10df52fe688af8f0f0177e5552eaaff4e",
      "artifact_id": "d1e59366-55c8-434c-8175-2e2ccb2e838d"
    },
    {
      "module_id": ".ARCHIVE.parse_ollama_for_grok",
      "path": ".ARCHIVE/parse_ollama_for_grok.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "36a9e7f1c95b82ffb99743e0c5c4ce95d83c9a430aac59f84ef3cbfab6145068",
      "artifact_id": "ebd0ac94-d9a0-499d-9640-8585f6462bfa"
    },
    {
      "module_id": ".ARCHIVE.final_system_validation",
      "path": ".ARCHIVE/final_system_validation.py",
      "category": "core",
      "module_doc": "Final system validation script for LLMStruct Modular CLI Integration",
      "functions": [
        {
          "name": "main",
          "docstring": "Run comprehensive system validation",
          "line_range": [
            13,
            238
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "main": [
          "print",
          "getattr",
          "__import__",
          "create_cli_core",
          "len",
          "status.upper",
          "open",
          "next",
          "task.get",
          "subprocess.run",
          "json.load"
        ]
      },
      "dependencies": [
        "Path",
        "create_cli_core",
        "json",
        "llmstruct.cli_core",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "time"
      ],
      "hash": "c3b078025b32ac31fe272f4904b6574157bf71caa271e8788941900ed828fac8",
      "artifact_id": "5765f153-719a-4d35-92f1-7fb2d6d0eb14"
    },
    {
      "module_id": ".ARCHIVE.debug_terminal",
      "path": ".ARCHIVE/debug_terminal.py",
      "category": "core",
      "module_doc": "Debug Terminal Script - Fallback for when terminal output is not visible\nSaves all output to files for manual inspection",
      "functions": [
        {
          "name": "run_with_output_capture",
          "docstring": "Run command and capture output to both console and file.",
          "line_range": [
            13,
            78
          ],
          "parameters": [
            "command",
            "description"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Run common diagnostic commands with output capture.",
          "line_range": [
            80,
            110
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "run_with_output_capture": [
          "print",
          "f.write",
          "len",
          "open",
          "subprocess.run"
        ],
        "main": [
          "print",
          "results.append",
          "run_with_output_capture"
        ]
      },
      "dependencies": [
        "Path",
        "datetime",
        "os",
        "pathlib",
        "subprocess",
        "sys"
      ],
      "hash": "e9551d20a760ee9b69bf1c62d1d4941c17440f6814b49505b86500c4e48acc4c",
      "artifact_id": "e3c49a90-75c5-4591-bb1e-6e8dcb5d814f"
    },
    {
      "module_id": ".ARCHIVE.telegram_bot_enhanced",
      "path": ".ARCHIVE/telegram_bot_enhanced.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "36a9e7f1c95b82ffb99743e0c5c4ce95d83c9a430aac59f84ef3cbfab6145068",
      "artifact_id": "7084e39d-5506-4272-810b-ecca878886b7"
    },
    {
      "module_id": ".ARCHIVE.parse_ollama_minimal",
      "path": ".ARCHIVE/parse_ollama_minimal.py",
      "category": "core",
      "module_doc": "Minimal Ollama Parser - Clean JSON without extra analytics\nJust structure original data properly, remove irrelevant entries",
      "functions": [
        {
          "name": "parse_ollama_minimal",
          "docstring": "Minimal parser - just clean structure",
          "line_range": [
            10,
            90
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "create_compact_json",
          "docstring": "Create compact JSON structure",
          "line_range": [
            92,
            137
          ],
          "parameters": [
            "models",
            "md_content"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            139,
            177
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "parse_ollama_minimal": [
          "f.readlines",
          "line.strip",
          "c.isdigit",
          "len",
          "open",
          "line.endswith",
          "models.append",
          "line.isdigit",
          "any"
        ],
        "create_compact_json": [
          "line.strip",
          "len",
          "line.startswith",
          "md_content.split",
          "current_content.append"
        ],
        "main": [
          "print",
          "create_compact_json",
          "f.readlines",
          "len",
          "open",
          "enumerate",
          "parse_ollama_minimal",
          "json.dump",
          "f.read"
        ]
      },
      "dependencies": [
        "json",
        "os",
        "re"
      ],
      "hash": "2b44754be3841072d67c9765926470c0702eceb3e0003afa4a3bc77e185ebb1a",
      "artifact_id": "50ac4958-f3d7-4f58-9c34-44af0ed766ad"
    },
    {
      "module_id": ".ARCHIVE.chat_bot_final",
      "path": ".ARCHIVE/chat_bot_final.py",
      "category": "core",
      "module_doc": "LLMStruct Chat Bot Final - \u041f\u043e\u043b\u043d\u0430\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 FastAPI\n\u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u043f\u0440\u043e\u0431\u043b\u0435\u043c: API \u0432\u043c\u0435\u0441\u0442\u043e CLI, \u0431\u0435\u0437 Markdown parse_mode, \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u043f\u0430\u043c\u044f\u0442\u044c",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            31,
            47
          ],
          "parameters": [
            "self",
            "token"
          ],
          "decorators": []
        },
        {
          "name": "get_http_session",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 HTTP \u0441\u0435\u0441\u0441\u0438\u0438 \u0434\u043b\u044f API \u0432\u044b\u0437\u043e\u0432\u043e\u0432",
          "line_range": [
            49,
            53
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "api_call",
          "docstring": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f API \u0432\u044b\u0437\u043e\u0432\u043e\u0432",
          "line_range": [
            55,
            69
          ],
          "parameters": [
            "self",
            "endpoint",
            "method",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "save_user_memory",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 API",
          "line_range": [
            71,
            78
          ],
          "parameters": [
            "self",
            "user_id",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "get_user_history",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 API",
          "line_range": [
            80,
            83
          ],
          "parameters": [
            "self",
            "user_id",
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "chat_with_ollama",
          "docstring": "\u041e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441 Ollama \u0447\u0435\u0440\u0435\u0437 API",
          "line_range": [
            85,
            100
          ],
          "parameters": [
            "self",
            "message",
            "user_id"
          ],
          "decorators": []
        },
        {
          "name": "get_system_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0447\u0435\u0440\u0435\u0437 API",
          "line_range": [
            102,
            104
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_available_models",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0447\u0435\u0440\u0435\u0437 API",
          "line_range": [
            106,
            109
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "log_user_message",
          "docstring": "\u041b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            111,
            124
          ],
          "parameters": [
            "self",
            "user_info",
            "message",
            "chat_id"
          ],
          "decorators": []
        },
        {
          "name": "setup_handlers",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434",
          "line_range": [
            126,
            133
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "start_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
          "line_range": [
            135,
            162
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "help_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /help",
          "line_range": [
            164,
            186
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "status_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /status",
          "line_range": [
            188,
            205
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "memory_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /memory",
          "line_range": [
            207,
            221
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "models_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /models",
          "line_range": [
            223,
            234
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
          "line_range": [
            236,
            255
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "cleanup",
          "docstring": "\u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432",
          "line_range": [
            257,
            260
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "signal_handler",
          "docstring": "",
          "line_range": [
            266,
            268
          ],
          "parameters": [
            "sig",
            "frame"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "FinalLLMStructBot",
          "docstring": "\u0424\u0438\u043d\u0430\u043b\u044c\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u0431\u043e\u0442\u0430 \u0441 \u043f\u043e\u043b\u043d\u043e\u0439 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 FastAPI",
          "line_range": [
            28,
            260
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                31,
                47
              ],
              "parameters": [
                "self",
                "token"
              ]
            },
            {
              "name": "get_http_session",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 HTTP \u0441\u0435\u0441\u0441\u0438\u0438 \u0434\u043b\u044f API \u0432\u044b\u0437\u043e\u0432\u043e\u0432",
              "line_range": [
                49,
                53
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "api_call",
              "docstring": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f API \u0432\u044b\u0437\u043e\u0432\u043e\u0432",
              "line_range": [
                55,
                69
              ],
              "parameters": [
                "self",
                "endpoint",
                "method",
                "data"
              ]
            },
            {
              "name": "save_user_memory",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 API",
              "line_range": [
                71,
                78
              ],
              "parameters": [
                "self",
                "user_id",
                "message"
              ]
            },
            {
              "name": "get_user_history",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 API",
              "line_range": [
                80,
                83
              ],
              "parameters": [
                "self",
                "user_id",
                "limit"
              ]
            },
            {
              "name": "chat_with_ollama",
              "docstring": "\u041e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441 Ollama \u0447\u0435\u0440\u0435\u0437 API",
              "line_range": [
                85,
                100
              ],
              "parameters": [
                "self",
                "message",
                "user_id"
              ]
            },
            {
              "name": "get_system_status",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0447\u0435\u0440\u0435\u0437 API",
              "line_range": [
                102,
                104
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_available_models",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0447\u0435\u0440\u0435\u0437 API",
              "line_range": [
                106,
                109
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "log_user_message",
              "docstring": "\u041b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
              "line_range": [
                111,
                124
              ],
              "parameters": [
                "self",
                "user_info",
                "message",
                "chat_id"
              ]
            },
            {
              "name": "setup_handlers",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434",
              "line_range": [
                126,
                133
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "start_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
              "line_range": [
                135,
                162
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "help_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /help",
              "line_range": [
                164,
                186
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "status_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /status",
              "line_range": [
                188,
                205
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "memory_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /memory",
              "line_range": [
                207,
                221
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "models_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /models",
              "line_range": [
                223,
                234
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
              "line_range": [
                236,
                255
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "cleanup",
              "docstring": "\u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432",
              "line_range": [
                257,
                260
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.setup_handlers",
          "Path",
          "logger.info",
          "Application.builder"
        ],
        "get_http_session": [
          "aiohttp.ClientSession"
        ],
        "api_call": [
          "self.get_http_session",
          "session.get",
          "logger.error",
          "response.json",
          "str",
          "session.post"
        ],
        "save_user_memory": [
          "datetime.now",
          "self.api_call"
        ],
        "get_user_history": [
          "result.get",
          "self.api_call"
        ],
        "chat_with_ollama": [
          "h.get",
          "result.get",
          "self.api_call",
          "self.get_user_history"
        ],
        "get_system_status": [
          "self.api_call"
        ],
        "get_available_models": [
          "result.get",
          "self.api_call"
        ],
        "log_user_message": [
          "user_info.get",
          "datetime.now",
          "f.write",
          "open"
        ],
        "setup_handlers": [
          "MessageHandler",
          "CommandHandler"
        ],
        "start_command": [
          "self.log_user_message"
        ],
        "help_command": [],
        "status_command": [
          "status.get",
          "self.get_system_status"
        ],
        "memory_command": [
          "enumerate",
          "str",
          "self.get_user_history",
          "msg.get"
        ],
        "models_command": [
          "self.get_available_models"
        ],
        "handle_message": [
          "self.chat_with_ollama",
          "self.log_user_message",
          "self.save_user_memory",
          "str"
        ],
        "cleanup": [],
        "signal_handler": [
          "sys.exit",
          "logger.info"
        ]
      },
      "dependencies": [
        "Any",
        "Application",
        "BotCommand",
        "CommandHandler",
        "ContextTypes",
        "Dict",
        "MessageHandler",
        "Optional",
        "Path",
        "Update",
        "aiohttp",
        "asyncio",
        "datetime",
        "filters",
        "json",
        "logging",
        "os",
        "pathlib",
        "signal",
        "sys",
        "telegram",
        "telegram.ext",
        "time",
        "typing"
      ],
      "hash": "6c57dd8338cb8983aba0a9c9fefaf71bd754fb4fa434dadd83afe687a4e9456f",
      "artifact_id": "8fe4d876-7a2f-4ba1-a8c4-958b36ae16ee"
    },
    {
      "module_id": ".ARCHIVE.monitor_system",
      "path": ".ARCHIVE/monitor_system.py",
      "category": "core",
      "module_doc": "System Monitor - Continuous logging for debugging terminal issues\nRuns in background and logs system status to files",
      "functions": [
        {
          "name": "log_system_status",
          "docstring": "Log current system status to file.",
          "line_range": [
            15,
            60
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Run continuous monitoring.",
          "line_range": [
            62,
            86
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "log_system_status": [
          "wo.get_current_context",
          "timestamp.strftime",
          "Path",
          "context.get",
          "f.write",
          "len",
          "open",
          "json.dumps",
          "timestamp.isoformat",
          "str",
          "WorkflowOrchestrator"
        ],
        "main": [
          "print",
          "log_system_status",
          "time.sleep",
          "len"
        ]
      },
      "dependencies": [
        "Path",
        "WorkflowOrchestrator",
        "datetime",
        "json",
        "llmstruct.workflow_orchestrator",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "time"
      ],
      "hash": "f35beeb4d7f6ff371d989ccb2058b27b1ae53801e295661f046650bcf801f397",
      "artifact_id": "619cc17c-b9a1-4db4-96aa-497eb86e9ab4"
    },
    {
      "module_id": ".ARCHIVE.ollama_full_parser",
      "path": ".ARCHIVE/ollama_full_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "36a9e7f1c95b82ffb99743e0c5c4ce95d83c9a430aac59f84ef3cbfab6145068",
      "artifact_id": "2c25fa6a-0516-444c-a34d-68b46b46f4f0"
    },
    {
      "module_id": ".ARCHIVE.telegram_bot_test",
      "path": ".ARCHIVE/telegram_bot_test.py",
      "category": "core",
      "module_doc": "\ud83e\uddea \u0422\u0435\u0441\u0442\u043e\u0432\u044b\u0439 Telegram \u0431\u043e\u0442 \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0441 FastAPI\n\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u0434\u043b\u044f \u0444\u043e\u0440\u0433\u0440\u0430\u0443\u043d\u0434 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": [
            238,
            266
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            34,
            43
          ],
          "parameters": [
            "self",
            "token",
            "api_base_url"
          ],
          "decorators": []
        },
        {
          "name": "get_session",
          "docstring": "",
          "line_range": [
            45,
            48
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "api_call",
          "docstring": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u0432\u044b\u0437\u043e\u0432 API",
          "line_range": [
            50,
            74
          ],
          "parameters": [
            "self",
            "endpoint",
            "method",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "save_user_message",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            76,
            90
          ],
          "parameters": [
            "self",
            "user_id",
            "username",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "get_user_history",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            92,
            102
          ],
          "parameters": [
            "self",
            "user_id",
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "chat_with_ollama",
          "docstring": "\u0427\u0430\u0442 \u0441 Ollama",
          "line_range": [
            104,
            119
          ],
          "parameters": [
            "self",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "get_system_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            121,
            123
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "setup_handlers",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432",
          "line_range": [
            125,
            133
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "start_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
          "line_range": [
            135,
            153
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "status_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /status",
          "line_range": [
            155,
            174
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "memory_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /memory",
          "line_range": [
            176,
            193
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "chat_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /chat",
          "line_range": [
            195,
            216
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
          "line_range": [
            218,
            230
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "cleanup",
          "docstring": "\u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432",
          "line_range": [
            232,
            236
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TelegramBotTest",
          "docstring": "",
          "line_range": [
            33,
            236
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                34,
                43
              ],
              "parameters": [
                "self",
                "token",
                "api_base_url"
              ]
            },
            {
              "name": "get_session",
              "docstring": "",
              "line_range": [
                45,
                48
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "api_call",
              "docstring": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u0432\u044b\u0437\u043e\u0432 API",
              "line_range": [
                50,
                74
              ],
              "parameters": [
                "self",
                "endpoint",
                "method",
                "data"
              ]
            },
            {
              "name": "save_user_message",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
              "line_range": [
                76,
                90
              ],
              "parameters": [
                "self",
                "user_id",
                "username",
                "message"
              ]
            },
            {
              "name": "get_user_history",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
              "line_range": [
                92,
                102
              ],
              "parameters": [
                "self",
                "user_id",
                "limit"
              ]
            },
            {
              "name": "chat_with_ollama",
              "docstring": "\u0427\u0430\u0442 \u0441 Ollama",
              "line_range": [
                104,
                119
              ],
              "parameters": [
                "self",
                "message"
              ]
            },
            {
              "name": "get_system_status",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
              "line_range": [
                121,
                123
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "setup_handlers",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432",
              "line_range": [
                125,
                133
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "start_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
              "line_range": [
                135,
                153
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "status_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /status",
              "line_range": [
                155,
                174
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "memory_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /memory",
              "line_range": [
                176,
                193
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "chat_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /chat",
              "line_range": [
                195,
                216
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
              "line_range": [
                218,
                230
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "cleanup",
              "docstring": "\u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432",
              "line_range": [
                232,
                236
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.setup_handlers",
          "logger.info",
          "Application.builder"
        ],
        "get_session": [
          "aiohttp.ClientSession"
        ],
        "api_call": [
          "self.get_session",
          "session.get",
          "logger.error",
          "response.json",
          "str",
          "session.post"
        ],
        "save_user_message": [
          "datetime.now",
          "logger.info",
          "logger.error",
          "result.get",
          "self.api_call"
        ],
        "get_user_history": [
          "logger.info",
          "len",
          "logger.error",
          "result.get",
          "self.api_call"
        ],
        "chat_with_ollama": [
          "logger.info",
          "result.get",
          "self.api_call",
          "logger.error"
        ],
        "get_system_status": [
          "self.api_call"
        ],
        "setup_handlers": [
          "MessageHandler",
          "logger.info",
          "CommandHandler"
        ],
        "start_command": [
          "logger.info",
          "self.save_user_message"
        ],
        "status_command": [
          "status.get",
          "logger.info",
          "self.save_user_message",
          "self.get_system_status"
        ],
        "memory_command": [
          "msg.get",
          "logger.info",
          "self.save_user_message",
          "self.get_user_history"
        ],
        "chat_command": [
          "logger.info",
          "len",
          "self.save_user_message",
          "self.chat_with_ollama"
        ],
        "handle_message": [
          "logger.info",
          "self.save_user_message",
          "self.chat_with_ollama"
        ],
        "cleanup": [
          "logger.info"
        ],
        "main": [
          "print",
          "os.getenv",
          "logger.info",
          "TelegramBotTest",
          "logger.error",
          "BotCommand"
        ]
      },
      "dependencies": [
        "Application",
        "BotCommand",
        "CommandHandler",
        "ContextTypes",
        "MessageHandler",
        "Update",
        "aiohttp",
        "asyncio",
        "datetime",
        "filters",
        "json",
        "logging",
        "os",
        "telegram",
        "telegram.ext",
        "time"
      ],
      "hash": "d95f9584966ae1b2c5837726ce98a00f421555353321e9ac9eb252e5c47df6bd",
      "artifact_id": "3be4ed87-0fc2-4ca3-a5e3-ef74bdcaa4d1"
    },
    {
      "module_id": ".ARCHIVE.parse_ollama_fixed",
      "path": ".ARCHIVE/parse_ollama_fixed.py",
      "category": "core",
      "module_doc": "Fixed Ollama List Parser + Context Merger for Grok Consultation\nCorrectly parses the specific structure of ollama_list.txt",
      "functions": [
        {
          "name": "parse_ollama_list_fixed",
          "docstring": "Parse ollama_list.txt with correct understanding of structure",
          "line_range": [
            11,
            101
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "create_smart_categorization",
          "docstring": "Create intelligent categorization with RTX 3060 Ti focus",
          "line_range": [
            103,
            279
          ],
          "parameters": [
            "models"
          ],
          "decorators": []
        },
        {
          "name": "convert_md_to_json",
          "docstring": "Convert markdown content to structured JSON",
          "line_range": [
            281,
            306
          ],
          "parameters": [
            "md_content"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            308,
            412
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "parse_pulls_number",
          "docstring": "Convert pulls string to number for sorting",
          "line_range": [
            156,
            167
          ],
          "parameters": [
            "pulls_str"
          ],
          "decorators": []
        },
        {
          "name": "get_max_size_gb",
          "docstring": "Get maximum model size in GB",
          "line_range": [
            169,
            182
          ],
          "parameters": [
            "sizes"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "parse_ollama_list_fixed": [
          "block.strip",
          "line.strip",
          "c.isdigit",
          "len",
          "open",
          "re.split",
          "line.endswith",
          "block.split",
          "models.append",
          "f.read",
          "line.isdigit",
          "any"
        ],
        "create_smart_categorization": [
          "len"
        ],
        "parse_pulls_number": [
          "pulls_str.endswith",
          "float"
        ],
        "get_max_size_gb": [
          "size.endswith",
          "max",
          "float"
        ],
        "convert_md_to_json": [
          "line.strip",
          "md_content.split",
          "current_content.append",
          "line.startswith"
        ],
        "main": [
          "print",
          "convert_md_to_json",
          "create_smart_categorization",
          "len",
          "open",
          "enumerate",
          "json.dump",
          "parse_ollama_list_fixed",
          "f.read"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "pathlib",
        "re"
      ],
      "hash": "2078e4524aedb77e274f6bb1a08e913db3d26e9c48ab77573de40212c15bed42",
      "artifact_id": "285a0c52-8f99-4063-b7ae-6d513899ff2c"
    },
    {
      "module_id": ".ARCHIVE.board_cli",
      "path": ".ARCHIVE/board_cli.py",
      "category": "core",
      "module_doc": "CLI Kanban Board for llmstruct tasks and ideas\n- Reads data/tasks.json and data/ideas.json\n- Shows board in terminal: columns by status, rows by priority\n- Supports filtering, sorting, and shows links between tasks/ideas",
      "functions": [
        {
          "name": "load_json",
          "docstring": "",
          "line_range": [
            26,
            28
          ],
          "parameters": [
            "path"
          ],
          "decorators": []
        },
        {
          "name": "group_by_status_and_priority",
          "docstring": "",
          "line_range": [
            30,
            36
          ],
          "parameters": [
            "items",
            "kind"
          ],
          "decorators": []
        },
        {
          "name": "render_board",
          "docstring": "",
          "line_range": [
            38,
            64
          ],
          "parameters": [
            "board",
            "kind"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            66,
            74
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json": [
          "json.load",
          "open"
        ],
        "group_by_status_and_priority": [
          "item.get",
          "defaultdict"
        ],
        "render_board": [
          "links.append",
          "table.add_column",
          "item.get",
          "kind.capitalize",
          "table.add_row",
          "Panel",
          "Table",
          "links.extend",
          "console.print"
        ],
        "main": [
          "tasks_data.get",
          "ideas_data.get",
          "console.rule",
          "render_board",
          "load_json",
          "group_by_status_and_priority"
        ]
      },
      "dependencies": [
        "Console",
        "Panel",
        "Path",
        "Table",
        "box",
        "collections",
        "defaultdict",
        "json",
        "os",
        "pathlib",
        "rich",
        "rich.console",
        "rich.panel",
        "rich.table"
      ],
      "hash": "3e733003df9f2e0946abd47f3fb0fa1ff5afb323c8aede68daeb854019e1b81f",
      "artifact_id": "95429658-8829-4088-abfb-6a287dd241d7"
    },
    {
      "module_id": ".ARCHIVE.parse_ollama_improved",
      "path": ".ARCHIVE/parse_ollama_improved.py",
      "category": "core",
      "module_doc": "Improved Ollama List Parser + Context Merger for Grok Consultation\nBetter parsing algorithm for ollama_list.txt structure",
      "functions": [
        {
          "name": "parse_ollama_list_improved",
          "docstring": "Parse ollama_list.txt with improved algorithm",
          "line_range": [
            11,
            95
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "create_better_flattened_structure",
          "docstring": "Create an improved flattened structure for LLM consumption",
          "line_range": [
            97,
            245
          ],
          "parameters": [
            "models"
          ],
          "decorators": []
        },
        {
          "name": "convert_md_to_json",
          "docstring": "Convert markdown content to structured JSON",
          "line_range": [
            247,
            276
          ],
          "parameters": [
            "md_content"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            278,
            373
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "parse_pulls",
          "docstring": "",
          "line_range": [
            146,
            156
          ],
          "parameters": [
            "pulls_str"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "parse_ollama_list_improved": [
          "any",
          "block.strip",
          "line.strip",
          "model_name.lower",
          "c.isdigit",
          "len",
          "open",
          "model_name.isdigit",
          "line.endswith",
          "block.split",
          "models.append",
          "f.read",
          "line.isdigit",
          "content.split"
        ],
        "create_better_flattened_structure": [
          "len"
        ],
        "parse_pulls": [
          "pulls_str.endswith",
          "float"
        ],
        "convert_md_to_json": [
          "line.strip",
          "md_content.split",
          "current_content.append",
          "line.startswith"
        ],
        "main": [
          "print",
          "convert_md_to_json",
          "len",
          "open",
          "json.dump",
          "parse_ollama_list_improved",
          "f.read",
          "create_better_flattened_structure"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "pathlib",
        "re"
      ],
      "hash": "74b6c063bb907a75ecd951f2b755bd1540be0971b411d2209d89f40501a86524",
      "artifact_id": "1adc9ec1-d246-4372-9683-25a60d24e88c"
    },
    {
      "module_id": ".ARCHIVE.bot_api_server",
      "path": ".ARCHIVE/bot_api_server.py",
      "category": "core",
      "module_doc": "\ud83e\udd16 Enhanced Bot API Server\nFastAPI \u0441\u0435\u0440\u0432\u0435\u0440 \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 \u0444\u0430\u0439\u043b\u043e\u0432\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0431\u043e\u0442\u0430",
      "functions": [
        {
          "name": "get_file_ops",
          "docstring": "Lazy loading \u0444\u0430\u0439\u043b\u043e\u0432\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439",
          "line_range": [
            62,
            67
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "get_cache_manager",
          "docstring": "Lazy loading \u043a\u0435\u0448 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430",
          "line_range": [
            69,
            74
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "root",
          "docstring": "\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 API",
          "line_range": [
            94,
            112
          ],
          "parameters": [],
          "decorators": [
            "app.get('/', summary='Bot API Information')"
          ]
        },
        {
          "name": "health_check",
          "docstring": "Health check",
          "line_range": [
            115,
            126
          ],
          "parameters": [],
          "decorators": [
            "app.get('/health')"
          ]
        },
        {
          "name": "list_files",
          "docstring": "\u0421\u043f\u0438\u0441\u043e\u043a \u0444\u0430\u0439\u043b\u043e\u0432 \u0432 \u0440\u0430\u0431\u043e\u0447\u0435\u0439 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438",
          "line_range": [
            131,
            147
          ],
          "parameters": [
            "path"
          ],
          "decorators": [
            "app.get('/api/v1/files/list')"
          ]
        },
        {
          "name": "read_file",
          "docstring": "\u0427\u0442\u0435\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            150,
            166
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": [
            "app.get('/api/v1/files/read')"
          ]
        },
        {
          "name": "write_file",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            169,
            185
          ],
          "parameters": [
            "request"
          ],
          "decorators": [
            "app.post('/api/v1/files/write')"
          ]
        },
        {
          "name": "edit_file",
          "docstring": "\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            188,
            204
          ],
          "parameters": [
            "request"
          ],
          "decorators": [
            "app.post('/api/v1/files/edit')"
          ]
        },
        {
          "name": "create_directory",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438",
          "line_range": [
            207,
            220
          ],
          "parameters": [
            "dir_path"
          ],
          "decorators": [
            "app.post('/api/v1/files/mkdir')"
          ]
        },
        {
          "name": "delete_file",
          "docstring": "\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430 \u0438\u043b\u0438 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438",
          "line_range": [
            223,
            236
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": [
            "app.delete('/api/v1/files/delete')"
          ]
        },
        {
          "name": "search_struct",
          "docstring": "\u041f\u043e\u0438\u0441\u043a \u0432 struct.json \u0441 \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c",
          "line_range": [
            241,
            257
          ],
          "parameters": [
            "query",
            "search_type"
          ],
          "decorators": [
            "app.get('/api/v1/struct/search')"
          ]
        },
        {
          "name": "get_struct_stats",
          "docstring": "\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 struct.json \u043a\u0435\u0448\u0430",
          "line_range": [
            260,
            270
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/struct/stats')"
          ]
        },
        {
          "name": "invalidate_struct_cache",
          "docstring": "\u0418\u043d\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u043a\u0435\u0448\u0430 struct.json",
          "line_range": [
            273,
            283
          ],
          "parameters": [],
          "decorators": [
            "app.post('/api/v1/struct/invalidate')"
          ]
        },
        {
          "name": "rebuild_struct_cache",
          "docstring": "\u041f\u0435\u0440\u0435\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043a\u0435\u0448\u0430 struct.json",
          "line_range": [
            286,
            305
          ],
          "parameters": [],
          "decorators": [
            "app.post('/api/v1/struct/rebuild')"
          ]
        },
        {
          "name": "get_workspace_status",
          "docstring": "\u0421\u0442\u0430\u0442\u0443\u0441 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0430",
          "line_range": [
            310,
            320
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/workspace/status')"
          ]
        },
        {
          "name": "send_message_to_claude",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f Claude \u0447\u0435\u0440\u0435\u0437 API (\u0441\u0438\u043c\u0443\u043b\u044f\u0446\u0438\u044f)",
          "line_range": [
            325,
            338
          ],
          "parameters": [
            "message"
          ],
          "decorators": [
            "app.post('/api/v1/claude/message')"
          ]
        },
        {
          "name": "run_full_test",
          "docstring": "\u041f\u043e\u043b\u043d\u044b\u0439 \u0442\u0435\u0441\u0442 \u0432\u0441\u0435\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0431\u043e\u0442\u0430",
          "line_range": [
            343,
            380
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/test/full')"
          ]
        },
        {
          "name": "startup_event",
          "docstring": "\u0421\u043e\u0431\u044b\u0442\u0438\u044f \u043f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435",
          "line_range": [
            385,
            392
          ],
          "parameters": [],
          "decorators": [
            "app.on_event('startup')"
          ]
        },
        {
          "name": "shutdown_event",
          "docstring": "\u0421\u043e\u0431\u044b\u0442\u0438\u044f \u043f\u0440\u0438 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435",
          "line_range": [
            395,
            400
          ],
          "parameters": [],
          "decorators": [
            "app.on_event('shutdown')"
          ]
        }
      ],
      "classes": [
        {
          "name": "FileWriteRequest",
          "docstring": "",
          "line_range": [
            77,
            80
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "FileEditRequest",
          "docstring": "",
          "line_range": [
            82,
            84
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "ChatMessage",
          "docstring": "",
          "line_range": [
            86,
            89
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        }
      ],
      "callgraph": {
        "get_file_ops": [
          "BotFileOperations"
        ],
        "get_cache_manager": [
          "StructCacheManager"
        ],
        "root": [
          "app.get"
        ],
        "health_check": [
          "datetime.now",
          "track_workflow_event",
          "app.get"
        ],
        "list_files": [
          "HTTPException",
          "track_workflow_event",
          "app.get",
          "ops.list_files",
          "Query",
          "get_file_ops"
        ],
        "read_file": [
          "HTTPException",
          "track_workflow_event",
          "app.get",
          "ops.read_file",
          "Query",
          "get_file_ops"
        ],
        "write_file": [
          "ops.write_file",
          "HTTPException",
          "app.post",
          "track_workflow_event",
          "get_file_ops"
        ],
        "edit_file": [
          "HTTPException",
          "track_workflow_event",
          "app.post",
          "ops.edit_file",
          "get_file_ops"
        ],
        "create_directory": [
          "ops.create_directory",
          "HTTPException",
          "track_workflow_event",
          "app.post",
          "Query",
          "get_file_ops"
        ],
        "delete_file": [
          "HTTPException",
          "track_workflow_event",
          "ops.delete_file",
          "Query",
          "get_file_ops",
          "app.delete"
        ],
        "search_struct": [
          "HTTPException",
          "track_workflow_event",
          "app.get",
          "ops.search_struct",
          "Query",
          "get_file_ops"
        ],
        "get_struct_stats": [
          "get_cache_manager",
          "HTTPException",
          "track_workflow_event",
          "app.get",
          "cache.get_cache_stats"
        ],
        "invalidate_struct_cache": [
          "cache.invalidate_cache",
          "get_cache_manager",
          "datetime.now",
          "HTTPException",
          "track_workflow_event",
          "app.post"
        ],
        "rebuild_struct_cache": [
          "get_cache_manager",
          "datetime.now",
          "HTTPException",
          "track_workflow_event",
          "app.post",
          "cache.build_cache",
          "cache.get_cache_stats"
        ],
        "get_workspace_status": [
          "ops.get_workspace_status",
          "HTTPException",
          "track_workflow_event",
          "app.get",
          "get_file_ops"
        ],
        "send_message_to_claude": [
          "time.time",
          "datetime.now",
          "app.post",
          "track_workflow_event",
          "int"
        ],
        "run_full_test": [
          "get_cache_manager",
          "ops.write_file",
          "datetime.now",
          "len",
          "track_workflow_event",
          "cache.smart_search",
          "app.get",
          "ops.read_file",
          "search_result.get",
          "get_file_ops",
          "cache.get_cache_stats"
        ],
        "startup_event": [
          "print",
          "app.on_event",
          "track_workflow_event"
        ],
        "shutdown_event": [
          "print",
          "app.on_event",
          "track_workflow_event"
        ]
      },
      "dependencies": [
        "Any",
        "BaseModel",
        "BotFileOperations",
        "CORSMiddleware",
        "Dict",
        "FastAPI",
        "HTTPException",
        "List",
        "Optional",
        "Path",
        "Query",
        "StructCacheManager",
        "aiohttp",
        "bot_file_operations",
        "datetime",
        "fastapi",
        "fastapi.middleware.cors",
        "get_metrics_tracker",
        "json",
        "pathlib",
        "pydantic",
        "src.llmstruct.metrics_tracker",
        "struct_cache_manager",
        "time",
        "track_task_complete",
        "track_task_start",
        "track_workflow_event",
        "typing",
        "uvicorn"
      ],
      "hash": "0902d793f35586cea7f29d847313dee3bfe7d21658877818a9ce029c25b8d583",
      "artifact_id": "d14f87bd-7548-4c6b-827b-82dd52dc20a8"
    },
    {
      "module_id": ".ARCHIVE.bot_file_operations",
      "path": ".ARCHIVE/bot_file_operations.py",
      "category": "core",
      "module_doc": "\ud83d\udcc1 Bot File Operations Module\n\u041c\u043e\u0434\u0443\u043b\u044c \u0444\u0430\u0439\u043b\u043e\u0432\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0434\u043b\u044f Telegram \u0431\u043e\u0442\u0430 \u0432 \u0440\u0435\u0436\u0438\u043c\u0435 [code]",
      "functions": [
        {
          "name": "test_file_operations",
          "docstring": "\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u043e\u0432\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439",
          "line_range": [
            354,
            384
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Args:\n    work_dir: \u0420\u0430\u0431\u043e\u0447\u0430\u044f \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f (\u0434\u043b\u044f \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c /tmp)\n    simulate_root: \u0421\u0438\u043c\u0443\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043a\u0430\u043a \u0432 \u043a\u043e\u0440\u043d\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            19,
            37
          ],
          "parameters": [
            "self",
            "work_dir",
            "simulate_root"
          ],
          "decorators": []
        },
        {
          "name": "setup_simulated_environment",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u0441\u0438\u043c\u0443\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0443\u044e \u0441\u0440\u0435\u0434\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0432 /tmp",
          "line_range": [
            39,
            57
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "list_files",
          "docstring": "\u0421\u043f\u0438\u0441\u043e\u043a \u0444\u0430\u0439\u043b\u043e\u0432 \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438",
          "line_range": [
            59,
            83
          ],
          "parameters": [
            "self",
            "path"
          ],
          "decorators": []
        },
        {
          "name": "read_file",
          "docstring": "\u0427\u0438\u0442\u0430\u0435\u0442 \u0444\u0430\u0439\u043b",
          "line_range": [
            85,
            114
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_file",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0444\u0430\u0439\u043b",
          "line_range": [
            116,
            143
          ],
          "parameters": [
            "self",
            "file_path",
            "content",
            "mode"
          ],
          "decorators": []
        },
        {
          "name": "edit_file",
          "docstring": "\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u0443\u0435\u0442 \u0444\u0430\u0439\u043b (\u0437\u0430\u043c\u0435\u043d\u0430, \u0432\u0441\u0442\u0430\u0432\u043a\u0430, \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a)",
          "line_range": [
            145,
            235
          ],
          "parameters": [
            "self",
            "file_path",
            "operation"
          ],
          "decorators": []
        },
        {
          "name": "create_directory",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044e",
          "line_range": [
            237,
            250
          ],
          "parameters": [
            "self",
            "dir_path"
          ],
          "decorators": []
        },
        {
          "name": "delete_file",
          "docstring": "\u0423\u0434\u0430\u043b\u044f\u0435\u0442 \u0444\u0430\u0439\u043b",
          "line_range": [
            252,
            270
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "copy_file",
          "docstring": "\u041a\u043e\u043f\u0438\u0440\u0443\u0435\u0442 \u0444\u0430\u0439\u043b",
          "line_range": [
            272,
            294
          ],
          "parameters": [
            "self",
            "src_path",
            "dst_path"
          ],
          "decorators": []
        },
        {
          "name": "search_struct",
          "docstring": "\u041f\u043e\u0438\u0441\u043a \u0432 struct.json \u0447\u0435\u0440\u0435\u0437 \u043a\u0435\u0448",
          "line_range": [
            296,
            309
          ],
          "parameters": [
            "self",
            "query",
            "search_type"
          ],
          "decorators": []
        },
        {
          "name": "get_struct_stats",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 struct.json \u043a\u0435\u0448\u0430",
          "line_range": [
            311,
            317
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "invalidate_struct_cache",
          "docstring": "\u0418\u043d\u0432\u0430\u043b\u0438\u0434\u0438\u0440\u0443\u0435\u0442 \u043a\u0435\u0448 struct.json",
          "line_range": [
            319,
            325
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_workspace_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0443\u0441 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0430",
          "line_range": [
            327,
            352
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "BotFileOperations",
          "docstring": "\u0424\u0430\u0439\u043b\u043e\u0432\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f Telegram \u0431\u043e\u0442\u0430",
          "line_range": [
            16,
            352
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Args:\n    work_dir: \u0420\u0430\u0431\u043e\u0447\u0430\u044f \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f (\u0434\u043b\u044f \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c /tmp)\n    simulate_root: \u0421\u0438\u043c\u0443\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043a\u0430\u043a \u0432 \u043a\u043e\u0440\u043d\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
              "line_range": [
                19,
                37
              ],
              "parameters": [
                "self",
                "work_dir",
                "simulate_root"
              ]
            },
            {
              "name": "setup_simulated_environment",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u0441\u0438\u043c\u0443\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0443\u044e \u0441\u0440\u0435\u0434\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0432 /tmp",
              "line_range": [
                39,
                57
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "list_files",
              "docstring": "\u0421\u043f\u0438\u0441\u043e\u043a \u0444\u0430\u0439\u043b\u043e\u0432 \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438",
              "line_range": [
                59,
                83
              ],
              "parameters": [
                "self",
                "path"
              ]
            },
            {
              "name": "read_file",
              "docstring": "\u0427\u0438\u0442\u0430\u0435\u0442 \u0444\u0430\u0439\u043b",
              "line_range": [
                85,
                114
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "write_file",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0444\u0430\u0439\u043b",
              "line_range": [
                116,
                143
              ],
              "parameters": [
                "self",
                "file_path",
                "content",
                "mode"
              ]
            },
            {
              "name": "edit_file",
              "docstring": "\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u0443\u0435\u0442 \u0444\u0430\u0439\u043b (\u0437\u0430\u043c\u0435\u043d\u0430, \u0432\u0441\u0442\u0430\u0432\u043a\u0430, \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a)",
              "line_range": [
                145,
                235
              ],
              "parameters": [
                "self",
                "file_path",
                "operation"
              ]
            },
            {
              "name": "create_directory",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044e",
              "line_range": [
                237,
                250
              ],
              "parameters": [
                "self",
                "dir_path"
              ]
            },
            {
              "name": "delete_file",
              "docstring": "\u0423\u0434\u0430\u043b\u044f\u0435\u0442 \u0444\u0430\u0439\u043b",
              "line_range": [
                252,
                270
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "copy_file",
              "docstring": "\u041a\u043e\u043f\u0438\u0440\u0443\u0435\u0442 \u0444\u0430\u0439\u043b",
              "line_range": [
                272,
                294
              ],
              "parameters": [
                "self",
                "src_path",
                "dst_path"
              ]
            },
            {
              "name": "search_struct",
              "docstring": "\u041f\u043e\u0438\u0441\u043a \u0432 struct.json \u0447\u0435\u0440\u0435\u0437 \u043a\u0435\u0448",
              "line_range": [
                296,
                309
              ],
              "parameters": [
                "self",
                "query",
                "search_type"
              ]
            },
            {
              "name": "get_struct_stats",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 struct.json \u043a\u0435\u0448\u0430",
              "line_range": [
                311,
                317
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "invalidate_struct_cache",
              "docstring": "\u0418\u043d\u0432\u0430\u043b\u0438\u0434\u0438\u0440\u0443\u0435\u0442 \u043a\u0435\u0448 struct.json",
              "line_range": [
                319,
                325
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_workspace_status",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0443\u0441 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0430",
              "line_range": [
                327,
                352
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "print",
          "self.setup_simulated_environment",
          "Path",
          "StructCacheManager"
        ],
        "setup_simulated_environment": [
          "print"
        ],
        "list_files": [
          "items.append",
          "datetime.fromtimestamp",
          "item.is_file",
          "target_path.iterdir",
          "item.is_dir",
          "sorted",
          "str",
          "target_path.exists",
          "item.stat"
        ],
        "read_file": [
          "content.splitlines",
          "target_file.is_file",
          "target_file.read_text",
          "target_file.stat",
          "len",
          "target_file.exists"
        ],
        "write_file": [
          "content.splitlines",
          "f.write",
          "target_file.stat",
          "len",
          "open",
          "target_file.write_text"
        ],
        "edit_file": [
          "new_content.splitlines",
          "target_file.read_text",
          "lines.insert",
          "lines.append",
          "content.replace",
          "len",
          "content.count",
          "target_file.exists",
          "target_file.write_text",
          "operation.get"
        ],
        "create_directory": [
          "target_dir.mkdir"
        ],
        "delete_file": [
          "shutil.rmtree",
          "target_path.is_file",
          "target_path.is_dir",
          "target_path.unlink",
          "target_path.exists"
        ],
        "copy_file": [
          "dst_file.stat",
          "shutil.copy2",
          "src_file.exists"
        ],
        "search_struct": [
          "sum",
          "len"
        ],
        "get_struct_stats": [],
        "invalidate_struct_cache": [],
        "get_workspace_status": [
          "item.stat",
          "str",
          "item.is_dir",
          "item.is_file"
        ],
        "test_file_operations": [
          "print",
          "ops.get_workspace_status",
          "ops.write_file",
          "BotFileOperations",
          "ops.read_file",
          "ops.search_struct",
          "ops.edit_file",
          "result.get"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "StructCacheManager",
        "datetime",
        "json",
        "os",
        "pathlib",
        "shutil",
        "struct_cache_manager",
        "typing"
      ],
      "hash": "8167cf609524d1c1a336e7ba9c59a9b080f699d47ae9230e9f7938c41d055c4a",
      "artifact_id": "5df3e7d6-aac6-43a4-8999-fde8c09ae7b7"
    },
    {
      "module_id": ".ARCHIVE.chat_bot_working",
      "path": ".ARCHIVE/chat_bot_working.py",
      "category": "core",
      "module_doc": "\ud83d\ude80 ENHANCED Telegram Bot \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 FastAPI\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0432\u0430\u0448 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 FastAPI \u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f:\n- \u041a\u0435\u0448\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0447\u0435\u0440\u0435\u0437 WebSocket\n- \u041f\u0430\u043c\u044f\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0447\u0435\u0440\u0435\u0437 API endpoints\n- \u041c\u0435\u0442\u0440\u0438\u043a \u0447\u0435\u0440\u0435\u0437 API\n\n\u0411\u043e\u043b\u044c\u0448\u0435 \u043d\u0438\u043a\u0430\u043a\u0438\u0445 CLI \u0432\u044b\u0437\u043e\u0432\u043e\u0432 - \u0432\u0441\u0435 \u0447\u0435\u0440\u0435\u0437 API!",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": [
            342,
            378
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            35,
            43
          ],
          "parameters": [
            "self",
            "telegram_token",
            "fastapi_base_url"
          ],
          "decorators": []
        },
        {
          "name": "setup_session",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f aiohttp \u0441\u0435\u0441\u0441\u0438\u0438",
          "line_range": [
            45,
            48
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "close_session",
          "docstring": "\u0417\u0430\u043a\u0440\u044b\u0442\u0438\u0435 aiohttp \u0441\u0435\u0441\u0441\u0438\u0438",
          "line_range": [
            50,
            53
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "health_check_api",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 FastAPI \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
          "line_range": [
            55,
            69
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_user_message_via_api",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 FastAPI",
          "line_range": [
            71,
            102
          ],
          "parameters": [
            "self",
            "user_id",
            "username",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "get_user_history_via_api",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 FastAPI",
          "line_range": [
            104,
            122
          ],
          "parameters": [
            "self",
            "user_id",
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "chat_with_ollama_via_api",
          "docstring": "\u0427\u0430\u0442 \u0441 Ollama \u0447\u0435\u0440\u0435\u0437 FastAPI endpoint",
          "line_range": [
            124,
            150
          ],
          "parameters": [
            "self",
            "message",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "get_system_metrics_via_api",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0447\u0435\u0440\u0435\u0437 FastAPI",
          "line_range": [
            152,
            162
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "setup_handlers",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434",
          "line_range": [
            164,
            172
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "start_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
          "line_range": [
            174,
            198
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "memory_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /memory - \u0442\u0435\u0441\u0442 \u043f\u0430\u043c\u044f\u0442\u0438",
          "line_range": [
            200,
            207
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "history_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /history - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0438\u0441\u0442\u043e\u0440\u0438\u044e",
          "line_range": [
            209,
            228
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "health_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /health - \u0441\u0442\u0430\u0442\u0443\u0441 FastAPI",
          "line_range": [
            230,
            237
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "metrics_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /metrics - \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            239,
            269
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "ollama_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /ollama - \u0447\u0430\u0442 \u0441 Ollama",
          "line_range": [
            271,
            289
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
          "line_range": [
            291,
            321
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0431\u043e\u0442\u0430",
          "line_range": [
            323,
            340
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "FastAPIIntegratedBot",
          "docstring": "Telegram \u0431\u043e\u0442 \u0441 \u043f\u043e\u043b\u043d\u043e\u0439 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 FastAPI",
          "line_range": [
            32,
            340
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                35,
                43
              ],
              "parameters": [
                "self",
                "telegram_token",
                "fastapi_base_url"
              ]
            },
            {
              "name": "setup_session",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f aiohttp \u0441\u0435\u0441\u0441\u0438\u0438",
              "line_range": [
                45,
                48
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "close_session",
              "docstring": "\u0417\u0430\u043a\u0440\u044b\u0442\u0438\u0435 aiohttp \u0441\u0435\u0441\u0441\u0438\u0438",
              "line_range": [
                50,
                53
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "health_check_api",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 FastAPI \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
              "line_range": [
                55,
                69
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_user_message_via_api",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 FastAPI",
              "line_range": [
                71,
                102
              ],
              "parameters": [
                "self",
                "user_id",
                "username",
                "message"
              ]
            },
            {
              "name": "get_user_history_via_api",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 FastAPI",
              "line_range": [
                104,
                122
              ],
              "parameters": [
                "self",
                "user_id",
                "limit"
              ]
            },
            {
              "name": "chat_with_ollama_via_api",
              "docstring": "\u0427\u0430\u0442 \u0441 Ollama \u0447\u0435\u0440\u0435\u0437 FastAPI endpoint",
              "line_range": [
                124,
                150
              ],
              "parameters": [
                "self",
                "message",
                "context"
              ]
            },
            {
              "name": "get_system_metrics_via_api",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0447\u0435\u0440\u0435\u0437 FastAPI",
              "line_range": [
                152,
                162
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "setup_handlers",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434",
              "line_range": [
                164,
                172
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "start_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
              "line_range": [
                174,
                198
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "memory_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /memory - \u0442\u0435\u0441\u0442 \u043f\u0430\u043c\u044f\u0442\u0438",
              "line_range": [
                200,
                207
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "history_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /history - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0438\u0441\u0442\u043e\u0440\u0438\u044e",
              "line_range": [
                209,
                228
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "health_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /health - \u0441\u0442\u0430\u0442\u0443\u0441 FastAPI",
              "line_range": [
                230,
                237
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "metrics_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /metrics - \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
              "line_range": [
                239,
                269
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "ollama_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /ollama - \u0447\u0430\u0442 \u0441 Ollama",
              "line_range": [
                271,
                289
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
              "line_range": [
                291,
                321
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "run",
              "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0431\u043e\u0442\u0430",
              "line_range": [
                323,
                340
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.setup_handlers",
          "Application.builder"
        ],
        "setup_session": [
          "aiohttp.ClientSession"
        ],
        "close_session": [],
        "health_check_api": [
          "logger.info",
          "logger.error",
          "self.setup_session",
          "resp.json",
          "data.get"
        ],
        "save_user_message_via_api": [
          "logger.warning",
          "datetime.now",
          "logger.info",
          "logger.error",
          "self.setup_session"
        ],
        "get_user_history_via_api": [
          "logger.warning",
          "logger.info",
          "len",
          "logger.error",
          "self.setup_session",
          "resp.json",
          "data.get"
        ],
        "chat_with_ollama_via_api": [
          "logger.info",
          "logger.error",
          "self.setup_session",
          "resp.json",
          "str",
          "data.get"
        ],
        "get_system_metrics_via_api": [
          "self.setup_session",
          "resp.json",
          "str"
        ],
        "setup_handlers": [
          "MessageHandler",
          "CommandHandler"
        ],
        "start_command": [
          "self.save_user_message_via_api"
        ],
        "memory_command": [
          "self.save_user_message_via_api"
        ],
        "history_command": [
          "msg.get",
          "int",
          "self.get_user_history_via_api",
          "len"
        ],
        "health_command": [
          "self.health_check_api"
        ],
        "metrics_command": [
          "metrics.get",
          "features.get",
          "struct_json.get",
          "system.get",
          "self.get_system_metrics_via_api"
        ],
        "ollama_command": [
          "status_msg.edit_text",
          "self.save_user_message_via_api",
          "self.chat_with_ollama_via_api"
        ],
        "handle_message": [
          "msg.get",
          "self.get_user_history_via_api",
          "message_text.startswith",
          "message_text.replace",
          "self.save_user_message_via_api",
          "enumerate",
          "message_text.lower",
          "self.chat_with_ollama_via_api"
        ],
        "run": [
          "logger.warning",
          "self.health_check_api",
          "self.close_session",
          "logger.info",
          "logger.error"
        ],
        "main": [
          "print",
          "loop.run_until_complete",
          "traceback.print_exc",
          "loop.close",
          "asyncio.get_event_loop",
          "os.getenv",
          "asyncio.new_event_loop",
          "exit",
          "bot.run",
          "asyncio.set_event_loop",
          "FastAPIIntegratedBot"
        ]
      },
      "dependencies": [
        "Application",
        "CommandHandler",
        "ContextTypes",
        "MessageHandler",
        "Update",
        "aiohttp",
        "asyncio",
        "datetime",
        "filters",
        "json",
        "logging",
        "os",
        "telegram",
        "telegram.ext",
        "timedelta",
        "traceback",
        "websockets"
      ],
      "hash": "2d784c31ffb3b457a948a478c57ba5239a84da269ff97e7a31d3771fe3f87e00",
      "artifact_id": "99375f62-0c32-4d4a-b1be-18c38e8d919a"
    },
    {
      "module_id": ".ARCHIVE.chat_bot",
      "path": ".ARCHIVE/chat_bot.py",
      "category": "core",
      "module_doc": "LLMStruct Chat Bot - \u0423\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u0434\u043b\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 Cursor + Ollama",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": [
            756,
            767
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            41,
            59
          ],
          "parameters": [
            "self",
            "token"
          ],
          "decorators": []
        },
        {
          "name": "load_ollama_config",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e Ollama \u0438\u0437 llmstruct.toml",
          "line_range": [
            61,
            91
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "query_ollama",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441 \u043a Ollama \u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043e\u0442\u0432\u0435\u0442",
          "line_range": [
            93,
            138
          ],
          "parameters": [
            "self",
            "message",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "log_user_message",
          "docstring": "\u041b\u043e\u0433\u0438\u0440\u0443\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0447\u0438\u0442\u0430\u0435\u043c\u044b\u0439 \u0444\u0430\u0439\u043b \u0434\u043b\u044f Cursor",
          "line_range": [
            140,
            158
          ],
          "parameters": [
            "self",
            "user_info",
            "message",
            "message_type",
            "chat_id"
          ],
          "decorators": []
        },
        {
          "name": "setup_handlers",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434",
          "line_range": [
            160,
            171
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "start_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
          "line_range": [
            173,
            220
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "cursor_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /cursor - \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0438 \u0441 Cursor",
          "line_range": [
            222,
            259
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "logs_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /logs - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f",
          "line_range": [
            261,
            300
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "help_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /help",
          "line_range": [
            302,
            341
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "status_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /status",
          "line_range": [
            343,
            424
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "metrics_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /metrics",
          "line_range": [
            426,
            486
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "dev_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /dev - \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432",
          "line_range": [
            488,
            533
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "ollama_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /ollama - \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0432\u044f\u0437\u0438 \u0441 Ollama",
          "line_range": [
            535,
            608
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "model_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /model - \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438 Ollama",
          "line_range": [
            610,
            625
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "\u0423\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0441 Ollama + \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435",
          "line_range": [
            627,
            714
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "run_sync",
          "docstring": "\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0437\u0430\u043f\u0443\u0441\u043a \u0431\u043e\u0442\u0430",
          "line_range": [
            716,
            754
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMStructChatBot",
          "docstring": "\u0423\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u044b\u0439 \u0447\u0430\u0442-\u0431\u043e\u0442 \u0434\u043b\u044f LLMStruct \u0441 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0434\u043b\u044f Cursor + Ollama",
          "line_range": [
            38,
            754
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                41,
                59
              ],
              "parameters": [
                "self",
                "token"
              ]
            },
            {
              "name": "load_ollama_config",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e Ollama \u0438\u0437 llmstruct.toml",
              "line_range": [
                61,
                91
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "query_ollama",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441 \u043a Ollama \u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043e\u0442\u0432\u0435\u0442",
              "line_range": [
                93,
                138
              ],
              "parameters": [
                "self",
                "message",
                "context"
              ]
            },
            {
              "name": "log_user_message",
              "docstring": "\u041b\u043e\u0433\u0438\u0440\u0443\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0447\u0438\u0442\u0430\u0435\u043c\u044b\u0439 \u0444\u0430\u0439\u043b \u0434\u043b\u044f Cursor",
              "line_range": [
                140,
                158
              ],
              "parameters": [
                "self",
                "user_info",
                "message",
                "message_type",
                "chat_id"
              ]
            },
            {
              "name": "setup_handlers",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434",
              "line_range": [
                160,
                171
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "start_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
              "line_range": [
                173,
                220
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "cursor_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /cursor - \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0438 \u0441 Cursor",
              "line_range": [
                222,
                259
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "logs_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /logs - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f",
              "line_range": [
                261,
                300
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "help_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /help",
              "line_range": [
                302,
                341
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "status_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /status",
              "line_range": [
                343,
                424
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "metrics_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /metrics",
              "line_range": [
                426,
                486
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "dev_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /dev - \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432",
              "line_range": [
                488,
                533
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "ollama_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /ollama - \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0432\u044f\u0437\u0438 \u0441 Ollama",
              "line_range": [
                535,
                608
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "model_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /model - \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438 Ollama",
              "line_range": [
                610,
                625
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "\u0423\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0441 Ollama + \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435",
              "line_range": [
                627,
                714
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "run_sync",
              "docstring": "\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0437\u0430\u043f\u0443\u0441\u043a \u0431\u043e\u0442\u0430",
              "line_range": [
                716,
                754
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self.setup_handlers",
          "track_workflow_event",
          "Application.builder",
          "self.load_ollama_config"
        ],
        "load_ollama_config": [
          "Path",
          "logger.warning",
          "logger.info",
          "logger.error",
          "toml.load",
          "config_path.exists",
          "config.get"
        ],
        "query_ollama": [
          "message.split",
          "len",
          "logger.error",
          "response.json",
          "aiohttp.ClientSession",
          "tracker.track_token_usage",
          "str",
          "error_msg.lower",
          "session.post",
          "ollama_response.split",
          "result.get",
          "response.text",
          "get_metrics_tracker"
        ],
        "log_user_message": [
          "user_info.get",
          "datetime.now",
          "f.write",
          "open",
          "message.lower",
          "any"
        ],
        "setup_handlers": [
          "MessageHandler",
          "CommandHandler"
        ],
        "start_command": [
          "self.log_user_message",
          "len",
          "track_workflow_event",
          "enumerate",
          "chr"
        ],
        "cursor_command": [
          "self.log_user_message",
          "track_workflow_event"
        ],
        "logs_command": [
          "self.log_user_message",
          "len",
          "track_workflow_event",
          "open",
          "line.startswith",
          "next",
          "message_line.replace",
          "f.read",
          "content.split",
          "entry.strip"
        ],
        "help_command": [
          "self.log_user_message",
          "track_workflow_event"
        ],
        "status_command": [
          "time.time",
          "self.log_user_message",
          "Path",
          "f.readlines",
          "get_metrics_tracker",
          "datetime.now",
          "requests.get",
          "len",
          "track_workflow_event",
          "struct_file.stat",
          "open",
          "track_task_complete",
          "tracker.get_session_summary",
          "track_task_start",
          "int",
          "str",
          "struct_file.exists"
        ],
        "metrics_command": [
          "tracker.get_session_summary",
          "self.log_user_message",
          "track_workflow_event",
          "get_metrics_tracker"
        ],
        "dev_command": [
          "self.log_user_message",
          "track_workflow_event"
        ],
        "ollama_command": [
          "self.log_user_message",
          "session.get",
          "len",
          "track_workflow_event",
          "self.query_ollama",
          "test_response.startswith",
          "response.json",
          "aiohttp.ClientSession",
          "str",
          "data.get",
          "m.get"
        ],
        "model_command": [
          "enumerate",
          "self.log_user_message",
          "track_workflow_event"
        ],
        "handle_message": [
          "message_text.isdigit",
          "logger.error",
          "track_task_start",
          "time.time",
          "f.write",
          "len",
          "track_token_usage",
          "track_task_complete",
          "int",
          "message_text.lower",
          "any",
          "self.log_user_message",
          "message_text.split",
          "track_workflow_event",
          "self.query_ollama",
          "Path",
          "datetime.now",
          "open",
          "str",
          "response.split"
        ],
        "run_sync": [
          "loop.run_until_complete",
          "asyncio.new_event_loop",
          "logger.info",
          "track_workflow_event",
          "logger.error",
          "tracker.save_session",
          "asyncio.set_event_loop",
          "str",
          "BotCommand",
          "get_metrics_tracker"
        ],
        "main": [
          "print",
          "LLMStructChatBot",
          "os.getenv",
          "bot.run_sync"
        ]
      },
      "dependencies": [
        "Application",
        "BotCommand",
        "CommandHandler",
        "ContextTypes",
        "MessageHandler",
        "Optional",
        "Path",
        "Update",
        "aiohttp",
        "asyncio",
        "datetime",
        "filters",
        "get_metrics_tracker",
        "json",
        "logging",
        "os",
        "pathlib",
        "requests",
        "src.llmstruct.metrics_tracker",
        "sys",
        "telegram",
        "telegram.ext",
        "time",
        "toml",
        "track_task_complete",
        "track_task_start",
        "track_token_usage",
        "track_workflow_event",
        "typing"
      ],
      "hash": "de2e0aa2f387f61157728680ec3a70011de8240bbe4273703f0849bfb43102c2",
      "artifact_id": "53f3fc68-ed31-494c-9526-81e3e6b2f7db"
    },
    {
      "module_id": ".ARCHIVE.fastapi_ollama_server_working",
      "path": ".ARCHIVE/fastapi_ollama_server_working.py",
      "category": "core",
      "module_doc": "\ud83d\ude80 \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u043d\u044b\u0439 FastAPI \u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f LLMStruct\n- Ollama \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f\n- \u041f\u0430\u043c\u044f\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \n- \u041c\u0435\u0442\u0440\u0438\u043a\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b\n- \u0412\u0441\u0435 \u0432 \u043e\u0434\u043d\u043e\u043c \u0444\u0430\u0439\u043b\u0435 \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0442\u044b",
      "functions": [
        {
          "name": "load_user_memory",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043f\u0430\u043c\u044f\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439",
          "line_range": [
            56,
            64
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "save_user_memory",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043f\u0430\u043c\u044f\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439",
          "line_range": [
            66,
            72
          ],
          "parameters": [
            "memory"
          ],
          "decorators": []
        },
        {
          "name": "load_ollama_config",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 Ollama",
          "line_range": [
            74,
            82
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "root",
          "docstring": "\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 API",
          "line_range": [
            114,
            131
          ],
          "parameters": [],
          "decorators": [
            "app.get('/', summary='API Information')"
          ]
        },
        {
          "name": "health_check",
          "docstring": "Health check \u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u043e\u0439 Ollama",
          "line_range": [
            134,
            155
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/system/health', response_model=HealthResponse)"
          ]
        },
        {
          "name": "system_status",
          "docstring": "\u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            158,
            246
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/system/status')"
          ]
        },
        {
          "name": "chat_with_ollama",
          "docstring": "\u0427\u0430\u0442 \u0441 Ollama",
          "line_range": [
            251,
            319
          ],
          "parameters": [
            "request"
          ],
          "decorators": [
            "app.post('/api/v1/chat/ollama')"
          ]
        },
        {
          "name": "get_ollama_models",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 Ollama",
          "line_range": [
            322,
            350
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/ollama/models')"
          ]
        },
        {
          "name": "save_user_message",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            355,
            389
          ],
          "parameters": [
            "message"
          ],
          "decorators": [
            "app.post('/api/v1/memory/save')"
          ]
        },
        {
          "name": "get_user_history",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            392,
            415
          ],
          "parameters": [
            "user_id",
            "limit"
          ],
          "decorators": [
            "app.get('/api/v1/memory/history/{user_id}')"
          ]
        },
        {
          "name": "memory_stats",
          "docstring": "\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u043f\u0430\u043c\u044f\u0442\u0438",
          "line_range": [
            418,
            450
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/memory/stats')"
          ]
        },
        {
          "name": "clear_user_memory",
          "docstring": "\u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u043f\u0430\u043c\u044f\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            453,
            476
          ],
          "parameters": [
            "user_id"
          ],
          "decorators": [
            "app.delete('/api/v1/memory/clear/{user_id}')"
          ]
        },
        {
          "name": "read_project_file",
          "docstring": "\u0427\u0442\u0435\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u043e\u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            481,
            566
          ],
          "parameters": [
            "path",
            "lines",
            "start_line"
          ],
          "decorators": [
            "app.get('/api/v1/files/read')"
          ]
        },
        {
          "name": "list_available_files",
          "docstring": "\u0421\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f \u0444\u0430\u0439\u043b\u043e\u0432",
          "line_range": [
            569,
            600
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/files/list')"
          ]
        },
        {
          "name": "startup_event",
          "docstring": "\u0421\u043e\u0431\u044b\u0442\u0438\u044f \u043f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435",
          "line_range": [
            605,
            612
          ],
          "parameters": [],
          "decorators": [
            "app.on_event('startup')"
          ]
        },
        {
          "name": "shutdown_event",
          "docstring": "\u0421\u043e\u0431\u044b\u0442\u0438\u044f \u043f\u0440\u0438 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435",
          "line_range": [
            615,
            623
          ],
          "parameters": [],
          "decorators": [
            "app.on_event('shutdown')"
          ]
        }
      ],
      "classes": [
        {
          "name": "UserMessage",
          "docstring": "",
          "line_range": [
            85,
            90
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "OllamaRequest",
          "docstring": "",
          "line_range": [
            92,
            97
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "ChatMessage",
          "docstring": "",
          "line_range": [
            99,
            102
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "HealthResponse",
          "docstring": "",
          "line_range": [
            104,
            109
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        }
      ],
      "callgraph": {
        "load_user_memory": [
          "USER_MEMORY_FILE.exists",
          "json.load",
          "print",
          "open"
        ],
        "save_user_memory": [
          "json.dump",
          "print",
          "open"
        ],
        "load_ollama_config": [
          "toml.load",
          "open"
        ],
        "root": [
          "app.get"
        ],
        "health_check": [
          "session.get",
          "aiohttp.ClientTimeout",
          "track_workflow_event",
          "HealthResponse",
          "app.get",
          "aiohttp.ClientSession",
          "time.strftime",
          "load_ollama_config"
        ],
        "system_status": [
          "time.ctime",
          "HTTPException",
          "app.get",
          "USER_MEMORY_FILE.exists",
          "track_task_start",
          "resp.json",
          "memory.values",
          "time.time",
          "len",
          "track_task_complete",
          "int",
          "aiohttp.ClientTimeout",
          "track_workflow_event",
          "tracker.get_session_summary",
          "struct_file.exists",
          "Path",
          "session.get",
          "load_user_memory",
          "struct_file.stat",
          "aiohttp.ClientSession",
          "time.strftime",
          "load_ollama_config",
          "str",
          "data.get",
          "sum",
          "get_metrics_tracker"
        ],
        "chat_with_ollama": [
          "response_text.split",
          "HTTPException",
          "track_task_start",
          "resp.json",
          "time.time",
          "len",
          "track_task_complete",
          "int",
          "tracker.track_token_usage",
          "aiohttp.ClientTimeout",
          "track_workflow_event",
          "app.post",
          "session.post",
          "resp.text",
          "aiohttp.ClientSession",
          "time.strftime",
          "load_ollama_config",
          "str",
          "data.get",
          "get_metrics_tracker"
        ],
        "get_ollama_models": [
          "model.get",
          "session.get",
          "aiohttp.ClientTimeout",
          "len",
          "HTTPException",
          "app.get",
          "aiohttp.ClientSession",
          "resp.json",
          "load_ollama_config",
          "str",
          "data.get",
          "models.append"
        ],
        "save_user_message": [
          "save_user_memory",
          "load_user_memory",
          "len",
          "track_workflow_event",
          "HTTPException",
          "app.post",
          "time.strftime",
          "str"
        ],
        "get_user_history": [
          "load_user_memory",
          "len",
          "track_workflow_event",
          "memory.get",
          "HTTPException",
          "app.get",
          "str",
          "Query"
        ],
        "memory_stats": [
          "memory.values",
          "user_stats.append",
          "time.ctime",
          "load_user_memory",
          "len",
          "HTTPException",
          "app.get",
          "USER_MEMORY_FILE.exists",
          "user_stats.sort",
          "memory.items",
          "int",
          "USER_MEMORY_FILE.stat",
          "last_message.get",
          "str",
          "sum"
        ],
        "clear_user_memory": [
          "save_user_memory",
          "load_user_memory",
          "len",
          "memory.get",
          "track_workflow_event",
          "HTTPException",
          "time.strftime",
          "str",
          "app.delete"
        ],
        "read_project_file": [
          "f.readlines",
          "time.ctime",
          "HTTPException",
          "min",
          "app.get",
          "track_task_start",
          "content.split",
          "Query",
          "time.time",
          "len",
          "track_task_complete",
          "int",
          "f.read",
          "track_workflow_event",
          "Path",
          "open",
          "time.strftime",
          "str",
          "file_path.exists",
          "file_path.stat"
        ],
        "list_available_files": [
          "files_info.append",
          "Path",
          "time.ctime",
          "len",
          "track_workflow_event",
          "app.get",
          "time.strftime",
          "file_path.exists",
          "file_path.stat"
        ],
        "startup_event": [
          "print",
          "app.on_event",
          "track_workflow_event",
          "get_metrics_tracker"
        ],
        "shutdown_event": [
          "print",
          "track_workflow_event",
          "tracker.save_session",
          "app.on_event",
          "get_metrics_tracker"
        ]
      },
      "dependencies": [
        "Any",
        "BaseModel",
        "CORSMiddleware",
        "Dict",
        "FastAPI",
        "HTTPException",
        "List",
        "Optional",
        "Path",
        "Query",
        "aiohttp",
        "asyncio",
        "datetime",
        "fastapi",
        "fastapi.middleware.cors",
        "get_metrics_tracker",
        "json",
        "pathlib",
        "pydantic",
        "src.llmstruct.metrics_tracker",
        "time",
        "timedelta",
        "toml",
        "track_task_complete",
        "track_task_start",
        "track_workflow_event",
        "typing",
        "uvicorn"
      ],
      "hash": "2340c3fe3a7772df749948190c8749db1a1926e48072d4289523cb73b10f465f",
      "artifact_id": "d35c544b-88af-4b42-a670-2f5ca47b6b7b"
    },
    {
      "module_id": ".ARCHIVE.temp_boss_missing.scripts.business_planning",
      "path": ".ARCHIVE/temp_boss_missing/scripts/business_planning.py",
      "category": "core",
      "module_doc": "Business Planning Module\n\u041c\u043e\u0434\u0443\u043b\u044c \u0434\u043b\u044f \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430.\n\u0414\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044e \u043f\u0440\u043e\u0435\u043a\u0442\u0430.",
      "functions": [
        {
          "name": "create_business_planning_manager",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.",
          "line_range": [
            216,
            218
          ],
          "parameters": [
            "data_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.",
          "line_range": [
            20,
            27
          ],
          "parameters": [
            "self",
            "boss_data_dir"
          ],
          "decorators": []
        },
        {
          "name": "create_business_roadmap",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u0430.",
          "line_range": [
            29,
            55
          ],
          "parameters": [
            "self",
            "roadmap_data"
          ],
          "decorators": []
        },
        {
          "name": "create_financial_plan",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u043e\u0433\u043e \u043f\u043b\u0430\u043d\u0430.",
          "line_range": [
            57,
            82
          ],
          "parameters": [
            "self",
            "plan_data"
          ],
          "decorators": []
        },
        {
          "name": "record_strategic_decision",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f.",
          "line_range": [
            84,
            116
          ],
          "parameters": [
            "self",
            "decision_data"
          ],
          "decorators": []
        },
        {
          "name": "analyze_business_metrics",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.",
          "line_range": [
            118,
            154
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_business_summary",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e.",
          "line_range": [
            156,
            193
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_data",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 JSON \u0444\u0430\u0439\u043b\u0430.",
          "line_range": [
            195,
            204
          ],
          "parameters": [
            "self",
            "file_path",
            "default"
          ],
          "decorators": []
        },
        {
          "name": "_save_data",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JSON \u0444\u0430\u0439\u043b.",
          "line_range": [
            206,
            213
          ],
          "parameters": [
            "self",
            "file_path",
            "data"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "BusinessPlanningManager",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0438 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u043e\u0439 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0435\u0439.",
          "line_range": [
            17,
            213
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.",
              "line_range": [
                20,
                27
              ],
              "parameters": [
                "self",
                "boss_data_dir"
              ]
            },
            {
              "name": "create_business_roadmap",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u0430.",
              "line_range": [
                29,
                55
              ],
              "parameters": [
                "self",
                "roadmap_data"
              ]
            },
            {
              "name": "create_financial_plan",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u043e\u0433\u043e \u043f\u043b\u0430\u043d\u0430.",
              "line_range": [
                57,
                82
              ],
              "parameters": [
                "self",
                "plan_data"
              ]
            },
            {
              "name": "record_strategic_decision",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f.",
              "line_range": [
                84,
                116
              ],
              "parameters": [
                "self",
                "decision_data"
              ]
            },
            {
              "name": "analyze_business_metrics",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.",
              "line_range": [
                118,
                154
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_business_summary",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e.",
              "line_range": [
                156,
                193
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_data",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 JSON \u0444\u0430\u0439\u043b\u0430.",
              "line_range": [
                195,
                204
              ],
              "parameters": [
                "self",
                "file_path",
                "default"
              ]
            },
            {
              "name": "_save_data",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JSON \u0444\u0430\u0439\u043b.",
              "line_range": [
                206,
                213
              ],
              "parameters": [
                "self",
                "file_path",
                "data"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path"
        ],
        "create_business_roadmap": [
          "datetime.now",
          "logger.info",
          "self._save_data",
          "logger.error"
        ],
        "create_financial_plan": [
          "datetime.now",
          "logger.info",
          "self._save_data",
          "logger.error"
        ],
        "record_strategic_decision": [
          "decision_data.get",
          "self._save_data",
          "datetime.now",
          "logger.info",
          "logger.error",
          "self._load_data",
          "isinstance",
          "decisions.append"
        ],
        "analyze_business_metrics": [
          "datetime.now",
          "len",
          "logger.error",
          "self._load_data",
          "isinstance"
        ],
        "get_business_summary": [
          "datetime.now",
          "bool",
          "len",
          "logger.error",
          "self._load_data",
          "roadmap.get",
          "financial.get",
          "isinstance"
        ],
        "_load_data": [
          "file_path.open",
          "file_path.exists",
          "json.load",
          "logger.error"
        ],
        "_save_data": [
          "file_path.open",
          "json.dump",
          "logger.error"
        ],
        "create_business_planning_manager": [
          "BusinessPlanningManager"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "sys",
        "timedelta",
        "typing"
      ],
      "hash": "0e53b669d4dfd9dc8ded438d877dde9176406ff0392f4b0129041ec3e70ed538",
      "artifact_id": "56a2e3f2-9b9d-4400-b974-c7b9bec0873e"
    },
    {
      "module_id": ".ARCHIVE.temp_boss_missing.scripts.team_management",
      "path": ".ARCHIVE/temp_boss_missing/scripts/team_management.py",
      "category": "core",
      "module_doc": "Team Management Module\n\u041c\u043e\u0434\u0443\u043b\u044c \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439, \u043e\u0446\u0435\u043d\u043a\u0438 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432 \u0438 HR-\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432.\n\u0414\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044e \u043f\u0440\u043e\u0435\u043a\u0442\u0430.",
      "functions": [
        {
          "name": "create_team_management_system",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
          "line_range": [
            291,
            293
          ],
          "parameters": [
            "data_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
          "line_range": [
            20,
            27
          ],
          "parameters": [
            "self",
            "boss_data_dir"
          ],
          "decorators": []
        },
        {
          "name": "create_team_strategy",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
          "line_range": [
            29,
            54
          ],
          "parameters": [
            "self",
            "strategy_data"
          ],
          "decorators": []
        },
        {
          "name": "record_team_evaluation",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u0447\u043b\u0435\u043d\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            56,
            88
          ],
          "parameters": [
            "self",
            "evaluation_data"
          ],
          "decorators": []
        },
        {
          "name": "create_hiring_plan",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430 \u043d\u0430\u0439\u043c\u0430.",
          "line_range": [
            90,
            115
          ],
          "parameters": [
            "self",
            "plan_data"
          ],
          "decorators": []
        },
        {
          "name": "analyze_team_performance",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            117,
            156
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_team_summary",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
          "line_range": [
            158,
            195
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "generate_team_report",
          "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043e\u0442\u0447\u0451\u0442\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
          "line_range": [
            197,
            226
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_summarize_strategy",
          "docstring": "\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u0438\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438.",
          "line_range": [
            228,
            238
          ],
          "parameters": [
            "self",
            "strategy"
          ],
          "decorators": []
        },
        {
          "name": "_summarize_evaluations",
          "docstring": "\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u0438\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043e\u0446\u0435\u043d\u043e\u043a.",
          "line_range": [
            240,
            250
          ],
          "parameters": [
            "self",
            "evaluations"
          ],
          "decorators": []
        },
        {
          "name": "_generate_recommendations",
          "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0439.",
          "line_range": [
            252,
            268
          ],
          "parameters": [
            "self",
            "strategy",
            "evaluations"
          ],
          "decorators": []
        },
        {
          "name": "_load_data",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 JSON \u0444\u0430\u0439\u043b\u0430.",
          "line_range": [
            270,
            279
          ],
          "parameters": [
            "self",
            "file_path",
            "default"
          ],
          "decorators": []
        },
        {
          "name": "_save_data",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JSON \u0444\u0430\u0439\u043b.",
          "line_range": [
            281,
            288
          ],
          "parameters": [
            "self",
            "file_path",
            "data"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TeamManagementSystem",
          "docstring": "\u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439 \u0438 HR-\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438.",
          "line_range": [
            17,
            288
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
              "line_range": [
                20,
                27
              ],
              "parameters": [
                "self",
                "boss_data_dir"
              ]
            },
            {
              "name": "create_team_strategy",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
              "line_range": [
                29,
                54
              ],
              "parameters": [
                "self",
                "strategy_data"
              ]
            },
            {
              "name": "record_team_evaluation",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u0447\u043b\u0435\u043d\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                56,
                88
              ],
              "parameters": [
                "self",
                "evaluation_data"
              ]
            },
            {
              "name": "create_hiring_plan",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430 \u043d\u0430\u0439\u043c\u0430.",
              "line_range": [
                90,
                115
              ],
              "parameters": [
                "self",
                "plan_data"
              ]
            },
            {
              "name": "analyze_team_performance",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                117,
                156
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_team_summary",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
              "line_range": [
                158,
                195
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "generate_team_report",
              "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043e\u0442\u0447\u0451\u0442\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
              "line_range": [
                197,
                226
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_summarize_strategy",
              "docstring": "\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u0438\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438.",
              "line_range": [
                228,
                238
              ],
              "parameters": [
                "self",
                "strategy"
              ]
            },
            {
              "name": "_summarize_evaluations",
              "docstring": "\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u0438\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043e\u0446\u0435\u043d\u043e\u043a.",
              "line_range": [
                240,
                250
              ],
              "parameters": [
                "self",
                "evaluations"
              ]
            },
            {
              "name": "_generate_recommendations",
              "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0439.",
              "line_range": [
                252,
                268
              ],
              "parameters": [
                "self",
                "strategy",
                "evaluations"
              ]
            },
            {
              "name": "_load_data",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 JSON \u0444\u0430\u0439\u043b\u0430.",
              "line_range": [
                270,
                279
              ],
              "parameters": [
                "self",
                "file_path",
                "default"
              ]
            },
            {
              "name": "_save_data",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JSON \u0444\u0430\u0439\u043b.",
              "line_range": [
                281,
                288
              ],
              "parameters": [
                "self",
                "file_path",
                "data"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path"
        ],
        "create_team_strategy": [
          "datetime.now",
          "logger.info",
          "self._save_data",
          "logger.error"
        ],
        "record_team_evaluation": [
          "self._save_data",
          "datetime.now",
          "logger.info",
          "logger.error",
          "evaluations.append",
          "self._load_data",
          "isinstance"
        ],
        "create_hiring_plan": [
          "datetime.now",
          "logger.info",
          "self._save_data",
          "logger.error"
        ],
        "analyze_team_performance": [
          "datetime.now",
          "bool",
          "len",
          "logger.error",
          "self._load_data",
          "isinstance"
        ],
        "get_team_summary": [
          "strategy.get",
          "datetime.now",
          "bool",
          "len",
          "hiring_plans.get",
          "logger.error",
          "self._load_data",
          "isinstance"
        ],
        "generate_team_report": [
          "self._summarize_evaluations",
          "datetime.now",
          "self._summarize_strategy",
          "logger.error",
          "self._load_data",
          "self._generate_recommendations"
        ],
        "_summarize_strategy": [
          "strategy.get"
        ],
        "_summarize_evaluations": [
          "isinstance",
          "len"
        ],
        "_generate_recommendations": [
          "recommendations.append",
          "len"
        ],
        "_load_data": [
          "file_path.open",
          "file_path.exists",
          "json.load",
          "logger.error"
        ],
        "_save_data": [
          "file_path.open",
          "json.dump",
          "logger.error"
        ],
        "create_team_management_system": [
          "TeamManagementSystem"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "sys",
        "timedelta",
        "typing"
      ],
      "hash": "3201ea679ec44992fb13752a988c8f8985987a0e3cbeb998e72dbe472221a67e",
      "artifact_id": "ae14b721-e7b5-4bbe-a089-9d9f6688d12d"
    },
    {
      "module_id": ".ARCHIVE.temp_boss_missing.scripts.boss_cli",
      "path": ".ARCHIVE/temp_boss_missing/scripts/boss_cli.py",
      "category": "core",
      "module_doc": "Boss CLI - \u041f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 CLI \u0434\u043b\u044f \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f\n\u0412\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432\u0441\u0435 \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 + \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u043e\u0434\u0443\u043b\u0438",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f.",
          "line_range": [
            490,
            503
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f Boss CLI.",
          "line_range": [
            42,
            101
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "run_interactive",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0440\u0435\u0436\u0438\u043c\u0430 Boss CLI.",
          "line_range": [
            103,
            126
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "process_command",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            128,
            147
          ],
          "parameters": [
            "self",
            "command_line"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_status",
          "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0441\u0442\u0430\u0442\u0443\u0441.",
          "line_range": [
            150,
            157
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_audit",
          "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0430\u0443\u0434\u0438\u0442.",
          "line_range": [
            159,
            166
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_context",
          "docstring": "AI \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435.",
          "line_range": [
            168,
            175
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_queue",
          "docstring": "AI \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433.",
          "line_range": [
            177,
            184
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_summary",
          "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 summary.",
          "line_range": [
            186,
            193
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_business_roadmap",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u043e\u043c.",
          "line_range": [
            196,
            221
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_financial_plan",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u044b\u043c \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c.",
          "line_range": [
            223,
            256
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_strategic_decision",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439.",
          "line_range": [
            258,
            273
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_business_analysis",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.",
          "line_range": [
            275,
            282
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_business_summary",
          "docstring": "\u0421\u0432\u043e\u0434\u043a\u0430 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441\u0443.",
          "line_range": [
            284,
            291
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_strategy",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            294,
            308
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_evaluation",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            310,
            326
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_hiring_plan",
          "docstring": "\u041f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430\u0439\u043c\u0430.",
          "line_range": [
            328,
            346
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_analysis",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            348,
            355
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_report",
          "docstring": "\u041e\u0442\u0447\u0451\u0442 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
          "line_range": [
            357,
            364
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_technical",
          "docstring": "\u0422\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b (\u043f\u043e\u043b\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f).",
          "line_range": [
            367,
            379
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_context_full",
          "docstring": "\u041d\u0435\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0443.",
          "line_range": [
            381,
            384
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_workspace_override",
          "docstring": "Emergency workspace overrides.",
          "line_range": [
            387,
            396
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_capabilities",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b.",
          "line_range": [
            399,
            422
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_boss_status",
          "docstring": "\u041e\u0431\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 Boss CLI.",
          "line_range": [
            424,
            440
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_help",
          "docstring": "\u0421\u043f\u0440\u0430\u0432\u043a\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c Boss CLI.",
          "line_range": [
            442,
            487
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "BossCLI",
          "docstring": "Boss CLI - \u043f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f.\n\u0412\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432\u0441\u0435 \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 + \u0431\u0438\u0437\u043d\u0435\u0441-\u0444\u0443\u043d\u043a\u0446\u0438\u0438.",
          "line_range": [
            36,
            487
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f Boss CLI.",
              "line_range": [
                42,
                101
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "run_interactive",
              "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0440\u0435\u0436\u0438\u043c\u0430 Boss CLI.",
              "line_range": [
                103,
                126
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "process_command",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                128,
                147
              ],
              "parameters": [
                "self",
                "command_line"
              ]
            },
            {
              "name": "cmd_ai_status",
              "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0441\u0442\u0430\u0442\u0443\u0441.",
              "line_range": [
                150,
                157
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_audit",
              "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0430\u0443\u0434\u0438\u0442.",
              "line_range": [
                159,
                166
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_context",
              "docstring": "AI \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435.",
              "line_range": [
                168,
                175
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_queue",
              "docstring": "AI \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433.",
              "line_range": [
                177,
                184
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_summary",
              "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 summary.",
              "line_range": [
                186,
                193
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_business_roadmap",
              "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u043e\u043c.",
              "line_range": [
                196,
                221
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_financial_plan",
              "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u044b\u043c \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c.",
              "line_range": [
                223,
                256
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_strategic_decision",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439.",
              "line_range": [
                258,
                273
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_business_analysis",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.",
              "line_range": [
                275,
                282
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_business_summary",
              "docstring": "\u0421\u0432\u043e\u0434\u043a\u0430 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441\u0443.",
              "line_range": [
                284,
                291
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_strategy",
              "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                294,
                308
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_evaluation",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                310,
                326
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_hiring_plan",
              "docstring": "\u041f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430\u0439\u043c\u0430.",
              "line_range": [
                328,
                346
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_analysis",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                348,
                355
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_report",
              "docstring": "\u041e\u0442\u0447\u0451\u0442 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
              "line_range": [
                357,
                364
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_technical",
              "docstring": "\u0422\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b (\u043f\u043e\u043b\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f).",
              "line_range": [
                367,
                379
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_context_full",
              "docstring": "\u041d\u0435\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0443.",
              "line_range": [
                381,
                384
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_workspace_override",
              "docstring": "Emergency workspace overrides.",
              "line_range": [
                387,
                396
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_capabilities",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b.",
              "line_range": [
                399,
                422
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_boss_status",
              "docstring": "\u041e\u0431\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 Boss CLI.",
              "line_range": [
                424,
                440
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_help",
              "docstring": "\u0421\u043f\u0440\u0430\u0432\u043a\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c Boss CLI.",
              "line_range": [
                442,
                487
              ],
              "parameters": [
                "self",
                "args"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "TeamManagementSystem",
          "CLIUtils",
          "BusinessPlanningManager",
          "CLIConfig",
          "str",
          "AISelfAwarenessCLIIntegration",
          "CommandProcessor"
        ],
        "run_interactive": [
          "print",
          "user_input.lower",
          "self.process_command",
          "input"
        ],
        "process_command": [
          "command_line.split",
          "print",
          "cmd.startswith",
          "len"
        ],
        "cmd_ai_status": [
          "print",
          "json.dumps"
        ],
        "cmd_ai_audit": [
          "print",
          "json.dumps"
        ],
        "cmd_ai_context": [
          "print",
          "json.dumps"
        ],
        "cmd_ai_queue": [
          "print",
          "json.dumps"
        ],
        "cmd_ai_summary": [
          "print",
          "json.dumps"
        ],
        "cmd_business_roadmap": [
          "print",
          "json.dumps"
        ],
        "cmd_financial_plan": [
          "print",
          "json.dumps"
        ],
        "cmd_strategic_decision": [
          "print",
          "json.dumps"
        ],
        "cmd_business_analysis": [
          "print",
          "json.dumps"
        ],
        "cmd_business_summary": [
          "print",
          "json.dumps"
        ],
        "cmd_team_strategy": [
          "print",
          "json.dumps"
        ],
        "cmd_team_evaluation": [
          "print",
          "json.dumps"
        ],
        "cmd_hiring_plan": [
          "print",
          "json.dumps"
        ],
        "cmd_team_analysis": [
          "print",
          "json.dumps"
        ],
        "cmd_team_report": [
          "print",
          "json.dumps"
        ],
        "cmd_technical": [
          "print"
        ],
        "cmd_context_full": [
          "print"
        ],
        "cmd_workspace_override": [
          "print"
        ],
        "cmd_capabilities": [
          "print",
          "json.dumps",
          "bool"
        ],
        "cmd_boss_status": [
          "print",
          "json.dumps"
        ],
        "cmd_help": [
          "print"
        ],
        "main": [
          "BossCLI",
          "argparse.ArgumentParser",
          "parser.parse_args",
          "boss_cli.process_command",
          "parser.add_argument",
          "boss_cli.run_interactive"
        ]
      },
      "dependencies": [
        "AISelfAwarenessCLIIntegration",
        "Any",
        "BusinessPlanningManager",
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "Dict",
        "Optional",
        "Path",
        "TeamManagementSystem",
        "argparse",
        "business_planning",
        "json",
        "llmstruct.ai_cli_integration",
        "llmstruct.cli_commands",
        "llmstruct.cli_config",
        "llmstruct.cli_utils",
        "os",
        "pathlib",
        "sys",
        "team_management",
        "typing"
      ],
      "hash": "fcd9f04d7641d774f0e698d44db67cf7172430d3a3cf4aa2b4cbf3350362b94d",
      "artifact_id": "a3592233-ef12-4bdb-884e-8854f42a1ff9"
    },
    {
      "module_id": ".ARCHIVE.temp_boss_missing.scripts.__init__",
      "path": ".ARCHIVE/temp_boss_missing/scripts/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "artifact_id": "7db6942d-5557-4441-a097-cae2151a9cd8"
    },
    {
      "module_id": ".ARCHIVE.temp_personal_analysis.personal.boss.scripts.business_planning",
      "path": ".ARCHIVE/temp_personal_analysis/personal/boss/scripts/business_planning.py",
      "category": "core",
      "module_doc": "Business Planning Module\n\u041c\u043e\u0434\u0443\u043b\u044c \u0434\u043b\u044f \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430.\n\u0414\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044e \u043f\u0440\u043e\u0435\u043a\u0442\u0430.",
      "functions": [
        {
          "name": "create_business_planning_manager",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.",
          "line_range": [
            216,
            218
          ],
          "parameters": [
            "data_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.",
          "line_range": [
            20,
            27
          ],
          "parameters": [
            "self",
            "boss_data_dir"
          ],
          "decorators": []
        },
        {
          "name": "create_business_roadmap",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u0430.",
          "line_range": [
            29,
            55
          ],
          "parameters": [
            "self",
            "roadmap_data"
          ],
          "decorators": []
        },
        {
          "name": "create_financial_plan",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u043e\u0433\u043e \u043f\u043b\u0430\u043d\u0430.",
          "line_range": [
            57,
            82
          ],
          "parameters": [
            "self",
            "plan_data"
          ],
          "decorators": []
        },
        {
          "name": "record_strategic_decision",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f.",
          "line_range": [
            84,
            116
          ],
          "parameters": [
            "self",
            "decision_data"
          ],
          "decorators": []
        },
        {
          "name": "analyze_business_metrics",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.",
          "line_range": [
            118,
            154
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_business_summary",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e.",
          "line_range": [
            156,
            193
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_data",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 JSON \u0444\u0430\u0439\u043b\u0430.",
          "line_range": [
            195,
            204
          ],
          "parameters": [
            "self",
            "file_path",
            "default"
          ],
          "decorators": []
        },
        {
          "name": "_save_data",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JSON \u0444\u0430\u0439\u043b.",
          "line_range": [
            206,
            213
          ],
          "parameters": [
            "self",
            "file_path",
            "data"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "BusinessPlanningManager",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0438 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u043e\u0439 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0435\u0439.",
          "line_range": [
            17,
            213
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.",
              "line_range": [
                20,
                27
              ],
              "parameters": [
                "self",
                "boss_data_dir"
              ]
            },
            {
              "name": "create_business_roadmap",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u0430.",
              "line_range": [
                29,
                55
              ],
              "parameters": [
                "self",
                "roadmap_data"
              ]
            },
            {
              "name": "create_financial_plan",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u043e\u0433\u043e \u043f\u043b\u0430\u043d\u0430.",
              "line_range": [
                57,
                82
              ],
              "parameters": [
                "self",
                "plan_data"
              ]
            },
            {
              "name": "record_strategic_decision",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f.",
              "line_range": [
                84,
                116
              ],
              "parameters": [
                "self",
                "decision_data"
              ]
            },
            {
              "name": "analyze_business_metrics",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.",
              "line_range": [
                118,
                154
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_business_summary",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e.",
              "line_range": [
                156,
                193
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_data",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 JSON \u0444\u0430\u0439\u043b\u0430.",
              "line_range": [
                195,
                204
              ],
              "parameters": [
                "self",
                "file_path",
                "default"
              ]
            },
            {
              "name": "_save_data",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JSON \u0444\u0430\u0439\u043b.",
              "line_range": [
                206,
                213
              ],
              "parameters": [
                "self",
                "file_path",
                "data"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path"
        ],
        "create_business_roadmap": [
          "datetime.now",
          "logger.info",
          "self._save_data",
          "logger.error"
        ],
        "create_financial_plan": [
          "datetime.now",
          "logger.info",
          "self._save_data",
          "logger.error"
        ],
        "record_strategic_decision": [
          "decision_data.get",
          "self._save_data",
          "datetime.now",
          "logger.info",
          "logger.error",
          "self._load_data",
          "isinstance",
          "decisions.append"
        ],
        "analyze_business_metrics": [
          "datetime.now",
          "len",
          "logger.error",
          "self._load_data",
          "isinstance"
        ],
        "get_business_summary": [
          "datetime.now",
          "bool",
          "len",
          "logger.error",
          "self._load_data",
          "roadmap.get",
          "financial.get",
          "isinstance"
        ],
        "_load_data": [
          "file_path.open",
          "file_path.exists",
          "json.load",
          "logger.error"
        ],
        "_save_data": [
          "file_path.open",
          "json.dump",
          "logger.error"
        ],
        "create_business_planning_manager": [
          "BusinessPlanningManager"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "sys",
        "timedelta",
        "typing"
      ],
      "hash": "0e53b669d4dfd9dc8ded438d877dde9176406ff0392f4b0129041ec3e70ed538",
      "artifact_id": "7d72d263-f20e-4513-b4a7-b29e0f432a2a"
    },
    {
      "module_id": ".ARCHIVE.temp_personal_analysis.personal.boss.scripts.team_management",
      "path": ".ARCHIVE/temp_personal_analysis/personal/boss/scripts/team_management.py",
      "category": "core",
      "module_doc": "Team Management Module\n\u041c\u043e\u0434\u0443\u043b\u044c \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439, \u043e\u0446\u0435\u043d\u043a\u0438 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432 \u0438 HR-\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432.\n\u0414\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044e \u043f\u0440\u043e\u0435\u043a\u0442\u0430.",
      "functions": [
        {
          "name": "create_team_management_system",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
          "line_range": [
            291,
            293
          ],
          "parameters": [
            "data_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
          "line_range": [
            20,
            27
          ],
          "parameters": [
            "self",
            "boss_data_dir"
          ],
          "decorators": []
        },
        {
          "name": "create_team_strategy",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
          "line_range": [
            29,
            54
          ],
          "parameters": [
            "self",
            "strategy_data"
          ],
          "decorators": []
        },
        {
          "name": "record_team_evaluation",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u0447\u043b\u0435\u043d\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            56,
            88
          ],
          "parameters": [
            "self",
            "evaluation_data"
          ],
          "decorators": []
        },
        {
          "name": "create_hiring_plan",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430 \u043d\u0430\u0439\u043c\u0430.",
          "line_range": [
            90,
            115
          ],
          "parameters": [
            "self",
            "plan_data"
          ],
          "decorators": []
        },
        {
          "name": "analyze_team_performance",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            117,
            156
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_team_summary",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
          "line_range": [
            158,
            195
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "generate_team_report",
          "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043e\u0442\u0447\u0451\u0442\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
          "line_range": [
            197,
            226
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_summarize_strategy",
          "docstring": "\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u0438\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438.",
          "line_range": [
            228,
            238
          ],
          "parameters": [
            "self",
            "strategy"
          ],
          "decorators": []
        },
        {
          "name": "_summarize_evaluations",
          "docstring": "\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u0438\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043e\u0446\u0435\u043d\u043e\u043a.",
          "line_range": [
            240,
            250
          ],
          "parameters": [
            "self",
            "evaluations"
          ],
          "decorators": []
        },
        {
          "name": "_generate_recommendations",
          "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0439.",
          "line_range": [
            252,
            268
          ],
          "parameters": [
            "self",
            "strategy",
            "evaluations"
          ],
          "decorators": []
        },
        {
          "name": "_load_data",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 JSON \u0444\u0430\u0439\u043b\u0430.",
          "line_range": [
            270,
            279
          ],
          "parameters": [
            "self",
            "file_path",
            "default"
          ],
          "decorators": []
        },
        {
          "name": "_save_data",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JSON \u0444\u0430\u0439\u043b.",
          "line_range": [
            281,
            288
          ],
          "parameters": [
            "self",
            "file_path",
            "data"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TeamManagementSystem",
          "docstring": "\u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439 \u0438 HR-\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438.",
          "line_range": [
            17,
            288
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
              "line_range": [
                20,
                27
              ],
              "parameters": [
                "self",
                "boss_data_dir"
              ]
            },
            {
              "name": "create_team_strategy",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
              "line_range": [
                29,
                54
              ],
              "parameters": [
                "self",
                "strategy_data"
              ]
            },
            {
              "name": "record_team_evaluation",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u0447\u043b\u0435\u043d\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                56,
                88
              ],
              "parameters": [
                "self",
                "evaluation_data"
              ]
            },
            {
              "name": "create_hiring_plan",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430 \u043d\u0430\u0439\u043c\u0430.",
              "line_range": [
                90,
                115
              ],
              "parameters": [
                "self",
                "plan_data"
              ]
            },
            {
              "name": "analyze_team_performance",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                117,
                156
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_team_summary",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
              "line_range": [
                158,
                195
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "generate_team_report",
              "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043e\u0442\u0447\u0451\u0442\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
              "line_range": [
                197,
                226
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_summarize_strategy",
              "docstring": "\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u0438\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438.",
              "line_range": [
                228,
                238
              ],
              "parameters": [
                "self",
                "strategy"
              ]
            },
            {
              "name": "_summarize_evaluations",
              "docstring": "\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u0438\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043e\u0446\u0435\u043d\u043e\u043a.",
              "line_range": [
                240,
                250
              ],
              "parameters": [
                "self",
                "evaluations"
              ]
            },
            {
              "name": "_generate_recommendations",
              "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0439.",
              "line_range": [
                252,
                268
              ],
              "parameters": [
                "self",
                "strategy",
                "evaluations"
              ]
            },
            {
              "name": "_load_data",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 JSON \u0444\u0430\u0439\u043b\u0430.",
              "line_range": [
                270,
                279
              ],
              "parameters": [
                "self",
                "file_path",
                "default"
              ]
            },
            {
              "name": "_save_data",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JSON \u0444\u0430\u0439\u043b.",
              "line_range": [
                281,
                288
              ],
              "parameters": [
                "self",
                "file_path",
                "data"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path"
        ],
        "create_team_strategy": [
          "datetime.now",
          "logger.info",
          "self._save_data",
          "logger.error"
        ],
        "record_team_evaluation": [
          "self._save_data",
          "datetime.now",
          "logger.info",
          "logger.error",
          "evaluations.append",
          "self._load_data",
          "isinstance"
        ],
        "create_hiring_plan": [
          "datetime.now",
          "logger.info",
          "self._save_data",
          "logger.error"
        ],
        "analyze_team_performance": [
          "datetime.now",
          "bool",
          "len",
          "logger.error",
          "self._load_data",
          "isinstance"
        ],
        "get_team_summary": [
          "strategy.get",
          "datetime.now",
          "bool",
          "len",
          "hiring_plans.get",
          "logger.error",
          "self._load_data",
          "isinstance"
        ],
        "generate_team_report": [
          "self._summarize_evaluations",
          "datetime.now",
          "self._summarize_strategy",
          "logger.error",
          "self._load_data",
          "self._generate_recommendations"
        ],
        "_summarize_strategy": [
          "strategy.get"
        ],
        "_summarize_evaluations": [
          "isinstance",
          "len"
        ],
        "_generate_recommendations": [
          "recommendations.append",
          "len"
        ],
        "_load_data": [
          "file_path.open",
          "file_path.exists",
          "json.load",
          "logger.error"
        ],
        "_save_data": [
          "file_path.open",
          "json.dump",
          "logger.error"
        ],
        "create_team_management_system": [
          "TeamManagementSystem"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "sys",
        "timedelta",
        "typing"
      ],
      "hash": "3201ea679ec44992fb13752a988c8f8985987a0e3cbeb998e72dbe472221a67e",
      "artifact_id": "1ed0c680-bee6-4a20-83a2-f2a0bbb8f16e"
    },
    {
      "module_id": ".ARCHIVE.temp_personal_analysis.personal.boss.scripts.boss_cli",
      "path": ".ARCHIVE/temp_personal_analysis/personal/boss/scripts/boss_cli.py",
      "category": "core",
      "module_doc": "Boss CLI - \u041f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 CLI \u0434\u043b\u044f \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f\n\u0412\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432\u0441\u0435 \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 + \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u043e\u0434\u0443\u043b\u0438",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f.",
          "line_range": [
            490,
            503
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f Boss CLI.",
          "line_range": [
            42,
            101
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "run_interactive",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0440\u0435\u0436\u0438\u043c\u0430 Boss CLI.",
          "line_range": [
            103,
            126
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "process_command",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            128,
            147
          ],
          "parameters": [
            "self",
            "command_line"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_status",
          "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0441\u0442\u0430\u0442\u0443\u0441.",
          "line_range": [
            150,
            157
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_audit",
          "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0430\u0443\u0434\u0438\u0442.",
          "line_range": [
            159,
            166
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_context",
          "docstring": "AI \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435.",
          "line_range": [
            168,
            175
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_queue",
          "docstring": "AI \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433.",
          "line_range": [
            177,
            184
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_summary",
          "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 summary.",
          "line_range": [
            186,
            193
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_business_roadmap",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u043e\u043c.",
          "line_range": [
            196,
            221
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_financial_plan",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u044b\u043c \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c.",
          "line_range": [
            223,
            256
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_strategic_decision",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439.",
          "line_range": [
            258,
            273
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_business_analysis",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.",
          "line_range": [
            275,
            282
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_business_summary",
          "docstring": "\u0421\u0432\u043e\u0434\u043a\u0430 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441\u0443.",
          "line_range": [
            284,
            291
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_strategy",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            294,
            308
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_evaluation",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            310,
            326
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_hiring_plan",
          "docstring": "\u041f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430\u0439\u043c\u0430.",
          "line_range": [
            328,
            346
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_analysis",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            348,
            355
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_report",
          "docstring": "\u041e\u0442\u0447\u0451\u0442 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
          "line_range": [
            357,
            364
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_technical",
          "docstring": "\u0422\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b (\u043f\u043e\u043b\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f).",
          "line_range": [
            367,
            379
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_context_full",
          "docstring": "\u041d\u0435\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0443.",
          "line_range": [
            381,
            384
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_workspace_override",
          "docstring": "Emergency workspace overrides.",
          "line_range": [
            387,
            396
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_capabilities",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b.",
          "line_range": [
            399,
            422
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_boss_status",
          "docstring": "\u041e\u0431\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 Boss CLI.",
          "line_range": [
            424,
            440
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_help",
          "docstring": "\u0421\u043f\u0440\u0430\u0432\u043a\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c Boss CLI.",
          "line_range": [
            442,
            487
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "BossCLI",
          "docstring": "Boss CLI - \u043f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f.\n\u0412\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432\u0441\u0435 \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 + \u0431\u0438\u0437\u043d\u0435\u0441-\u0444\u0443\u043d\u043a\u0446\u0438\u0438.",
          "line_range": [
            36,
            487
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f Boss CLI.",
              "line_range": [
                42,
                101
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "run_interactive",
              "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0440\u0435\u0436\u0438\u043c\u0430 Boss CLI.",
              "line_range": [
                103,
                126
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "process_command",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                128,
                147
              ],
              "parameters": [
                "self",
                "command_line"
              ]
            },
            {
              "name": "cmd_ai_status",
              "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0441\u0442\u0430\u0442\u0443\u0441.",
              "line_range": [
                150,
                157
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_audit",
              "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0430\u0443\u0434\u0438\u0442.",
              "line_range": [
                159,
                166
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_context",
              "docstring": "AI \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435.",
              "line_range": [
                168,
                175
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_queue",
              "docstring": "AI \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433.",
              "line_range": [
                177,
                184
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_summary",
              "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 summary.",
              "line_range": [
                186,
                193
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_business_roadmap",
              "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u043e\u043c.",
              "line_range": [
                196,
                221
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_financial_plan",
              "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u044b\u043c \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c.",
              "line_range": [
                223,
                256
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_strategic_decision",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439.",
              "line_range": [
                258,
                273
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_business_analysis",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.",
              "line_range": [
                275,
                282
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_business_summary",
              "docstring": "\u0421\u0432\u043e\u0434\u043a\u0430 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441\u0443.",
              "line_range": [
                284,
                291
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_strategy",
              "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                294,
                308
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_evaluation",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                310,
                326
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_hiring_plan",
              "docstring": "\u041f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430\u0439\u043c\u0430.",
              "line_range": [
                328,
                346
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_analysis",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                348,
                355
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_report",
              "docstring": "\u041e\u0442\u0447\u0451\u0442 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
              "line_range": [
                357,
                364
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_technical",
              "docstring": "\u0422\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b (\u043f\u043e\u043b\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f).",
              "line_range": [
                367,
                379
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_context_full",
              "docstring": "\u041d\u0435\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0443.",
              "line_range": [
                381,
                384
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_workspace_override",
              "docstring": "Emergency workspace overrides.",
              "line_range": [
                387,
                396
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_capabilities",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b.",
              "line_range": [
                399,
                422
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_boss_status",
              "docstring": "\u041e\u0431\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 Boss CLI.",
              "line_range": [
                424,
                440
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_help",
              "docstring": "\u0421\u043f\u0440\u0430\u0432\u043a\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c Boss CLI.",
              "line_range": [
                442,
                487
              ],
              "parameters": [
                "self",
                "args"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "TeamManagementSystem",
          "CLIUtils",
          "BusinessPlanningManager",
          "CLIConfig",
          "str",
          "AISelfAwarenessCLIIntegration",
          "CommandProcessor"
        ],
        "run_interactive": [
          "print",
          "user_input.lower",
          "self.process_command",
          "input"
        ],
        "process_command": [
          "command_line.split",
          "print",
          "cmd.startswith",
          "len"
        ],
        "cmd_ai_status": [
          "print",
          "json.dumps"
        ],
        "cmd_ai_audit": [
          "print",
          "json.dumps"
        ],
        "cmd_ai_context": [
          "print",
          "json.dumps"
        ],
        "cmd_ai_queue": [
          "print",
          "json.dumps"
        ],
        "cmd_ai_summary": [
          "print",
          "json.dumps"
        ],
        "cmd_business_roadmap": [
          "print",
          "json.dumps"
        ],
        "cmd_financial_plan": [
          "print",
          "json.dumps"
        ],
        "cmd_strategic_decision": [
          "print",
          "json.dumps"
        ],
        "cmd_business_analysis": [
          "print",
          "json.dumps"
        ],
        "cmd_business_summary": [
          "print",
          "json.dumps"
        ],
        "cmd_team_strategy": [
          "print",
          "json.dumps"
        ],
        "cmd_team_evaluation": [
          "print",
          "json.dumps"
        ],
        "cmd_hiring_plan": [
          "print",
          "json.dumps"
        ],
        "cmd_team_analysis": [
          "print",
          "json.dumps"
        ],
        "cmd_team_report": [
          "print",
          "json.dumps"
        ],
        "cmd_technical": [
          "print"
        ],
        "cmd_context_full": [
          "print"
        ],
        "cmd_workspace_override": [
          "print"
        ],
        "cmd_capabilities": [
          "print",
          "json.dumps",
          "bool"
        ],
        "cmd_boss_status": [
          "print",
          "json.dumps"
        ],
        "cmd_help": [
          "print"
        ],
        "main": [
          "BossCLI",
          "argparse.ArgumentParser",
          "parser.parse_args",
          "boss_cli.process_command",
          "parser.add_argument",
          "boss_cli.run_interactive"
        ]
      },
      "dependencies": [
        "AISelfAwarenessCLIIntegration",
        "Any",
        "BusinessPlanningManager",
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "Dict",
        "Optional",
        "Path",
        "TeamManagementSystem",
        "argparse",
        "business_planning",
        "json",
        "llmstruct.ai_cli_integration",
        "llmstruct.cli_commands",
        "llmstruct.cli_config",
        "llmstruct.cli_utils",
        "os",
        "pathlib",
        "sys",
        "team_management",
        "typing"
      ],
      "hash": "fcd9f04d7641d774f0e698d44db67cf7172430d3a3cf4aa2b4cbf3350362b94d",
      "artifact_id": "8830b089-4cf7-4d6e-a3ff-5ae7d7145409"
    },
    {
      "module_id": ".ARCHIVE.temp_personal_analysis.personal.boss.scripts.__init__",
      "path": ".ARCHIVE/temp_personal_analysis/personal/boss/scripts/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "artifact_id": "3c616cf1-7c3f-42ac-b7c6-96a0ca95a236"
    },
    {
      "module_id": ".ARCHIVE..personal.boss.scripts.boss_cli",
      "path": ".ARCHIVE/.personal/boss/scripts/boss_cli.py",
      "category": "core",
      "module_doc": "Boss CLI - \u041f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 CLI \u0434\u043b\u044f \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f\n\u0414\u043e\u0441\u0442\u0443\u043f \u043a\u043e \u0432\u0441\u0435\u043c \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0430, \u0432\u043a\u043b\u044e\u0447\u0430\u044f business planning \u0438 team management.",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f.",
          "line_range": [
            493,
            506
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f Boss CLI.",
          "line_range": [
            47,
            95
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "run_interactive",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0440\u0435\u0436\u0438\u043c\u0430 Boss CLI.",
          "line_range": [
            97,
            119
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "process_command",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            121,
            141
          ],
          "parameters": [
            "self",
            "command_line"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_status",
          "docstring": "\u0421\u0442\u0430\u0442\u0443\u0441 AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b.",
          "line_range": [
            144,
            151
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_audit",
          "docstring": "\u0410\u0443\u0434\u0438\u0442 AI \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439.",
          "line_range": [
            153,
            160
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_context",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 AI \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043e\u043c.",
          "line_range": [
            162,
            170
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_queue",
          "docstring": "\u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 AI \u043e\u0447\u0435\u0440\u0435\u0434\u0438.",
          "line_range": [
            172,
            179
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_summary",
          "docstring": "\u0421\u0432\u043e\u0434\u043a\u0430 AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438.",
          "line_range": [
            181,
            188
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_business_roadmap",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u043e\u043c.",
          "line_range": [
            191,
            210
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_financial_plan",
          "docstring": "\u0424\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u043e\u0435 \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435.",
          "line_range": [
            212,
            226
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_strategic_decision",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439.",
          "line_range": [
            228,
            242
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_business_analysis",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.",
          "line_range": [
            244,
            251
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_business_summary",
          "docstring": "\u0421\u0432\u043e\u0434\u043a\u0430 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441\u0443.",
          "line_range": [
            253,
            260
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_strategy",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            263,
            277
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_evaluation",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            279,
            295
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_hiring_plan",
          "docstring": "\u041f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430\u0439\u043c\u0430.",
          "line_range": [
            297,
            315
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_analysis",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            317,
            324
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_report",
          "docstring": "\u041e\u0442\u0447\u0451\u0442 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
          "line_range": [
            326,
            333
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_technical",
          "docstring": "\u0422\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b (\u043f\u043e\u043b\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f).",
          "line_range": [
            336,
            348
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_context_full",
          "docstring": "\u041d\u0435\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0443.",
          "line_range": [
            350,
            353
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_workspace_override",
          "docstring": "Emergency workspace overrides.",
          "line_range": [
            356,
            365
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_capabilities",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b.",
          "line_range": [
            368,
            391
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_boss_status",
          "docstring": "\u041e\u0431\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 Boss CLI.",
          "line_range": [
            393,
            409
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_help",
          "docstring": "\u0421\u043f\u0440\u0430\u0432\u043a\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c Boss CLI.",
          "line_range": [
            411,
            456
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "_init_ai_integration",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438.",
          "line_range": [
            458,
            464
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_init_command_processor",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u0430 \u043a\u043e\u043c\u0430\u043d\u0434.",
          "line_range": [
            466,
            472
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_init_business_manager",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430.",
          "line_range": [
            474,
            481
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_init_team_manager",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            483,
            490
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "BossCLI",
          "docstring": "Boss CLI - \u043f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f.\n\u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f \u043a\u043e \u0432\u0441\u0435\u043c \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0430.",
          "line_range": [
            41,
            490
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f Boss CLI.",
              "line_range": [
                47,
                95
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "run_interactive",
              "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0440\u0435\u0436\u0438\u043c\u0430 Boss CLI.",
              "line_range": [
                97,
                119
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "process_command",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                121,
                141
              ],
              "parameters": [
                "self",
                "command_line"
              ]
            },
            {
              "name": "cmd_ai_status",
              "docstring": "\u0421\u0442\u0430\u0442\u0443\u0441 AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b.",
              "line_range": [
                144,
                151
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_audit",
              "docstring": "\u0410\u0443\u0434\u0438\u0442 AI \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439.",
              "line_range": [
                153,
                160
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_context",
              "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 AI \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043e\u043c.",
              "line_range": [
                162,
                170
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_queue",
              "docstring": "\u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 AI \u043e\u0447\u0435\u0440\u0435\u0434\u0438.",
              "line_range": [
                172,
                179
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_summary",
              "docstring": "\u0421\u0432\u043e\u0434\u043a\u0430 AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438.",
              "line_range": [
                181,
                188
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_business_roadmap",
              "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u043e\u043c.",
              "line_range": [
                191,
                210
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_financial_plan",
              "docstring": "\u0424\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u043e\u0435 \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435.",
              "line_range": [
                212,
                226
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_strategic_decision",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439.",
              "line_range": [
                228,
                242
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_business_analysis",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.",
              "line_range": [
                244,
                251
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_business_summary",
              "docstring": "\u0421\u0432\u043e\u0434\u043a\u0430 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441\u0443.",
              "line_range": [
                253,
                260
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_strategy",
              "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                263,
                277
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_evaluation",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                279,
                295
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_hiring_plan",
              "docstring": "\u041f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430\u0439\u043c\u0430.",
              "line_range": [
                297,
                315
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_analysis",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                317,
                324
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_report",
              "docstring": "\u041e\u0442\u0447\u0451\u0442 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
              "line_range": [
                326,
                333
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_technical",
              "docstring": "\u0422\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b (\u043f\u043e\u043b\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f).",
              "line_range": [
                336,
                348
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_context_full",
              "docstring": "\u041d\u0435\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0443.",
              "line_range": [
                350,
                353
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_workspace_override",
              "docstring": "Emergency workspace overrides.",
              "line_range": [
                356,
                365
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_capabilities",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b.",
              "line_range": [
                368,
                391
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_boss_status",
              "docstring": "\u041e\u0431\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 Boss CLI.",
              "line_range": [
                393,
                409
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_help",
              "docstring": "\u0421\u043f\u0440\u0430\u0432\u043a\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c Boss CLI.",
              "line_range": [
                411,
                456
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "_init_ai_integration",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438.",
              "line_range": [
                458,
                464
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_init_command_processor",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u0430 \u043a\u043e\u043c\u0430\u043d\u0434.",
              "line_range": [
                466,
                472
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_init_business_manager",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430.",
              "line_range": [
                474,
                481
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_init_team_manager",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                483,
                490
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._init_command_processor",
          "Path",
          "self._init_business_manager",
          "self._init_ai_integration",
          "str",
          "self._init_team_manager"
        ],
        "run_interactive": [
          "print",
          "user_input.lower",
          "self.process_command",
          "input"
        ],
        "process_command": [
          "command_line.split",
          "cmd.startswith",
          "print"
        ],
        "cmd_ai_status": [
          "print",
          "json.dumps"
        ],
        "cmd_ai_audit": [
          "print",
          "json.dumps"
        ],
        "cmd_ai_context": [
          "print",
          "json.dumps"
        ],
        "cmd_ai_queue": [
          "print",
          "json.dumps"
        ],
        "cmd_ai_summary": [
          "print",
          "json.dumps"
        ],
        "cmd_business_roadmap": [
          "print",
          "json.dumps"
        ],
        "cmd_financial_plan": [
          "print",
          "json.dumps"
        ],
        "cmd_strategic_decision": [
          "print",
          "json.dumps"
        ],
        "cmd_business_analysis": [
          "print",
          "json.dumps"
        ],
        "cmd_business_summary": [
          "print",
          "json.dumps"
        ],
        "cmd_team_strategy": [
          "print",
          "json.dumps"
        ],
        "cmd_team_evaluation": [
          "print",
          "json.dumps"
        ],
        "cmd_hiring_plan": [
          "print",
          "json.dumps"
        ],
        "cmd_team_analysis": [
          "print",
          "json.dumps"
        ],
        "cmd_team_report": [
          "print",
          "json.dumps"
        ],
        "cmd_technical": [
          "print"
        ],
        "cmd_context_full": [
          "print"
        ],
        "cmd_workspace_override": [
          "print"
        ],
        "cmd_capabilities": [
          "print",
          "json.dumps",
          "bool"
        ],
        "cmd_boss_status": [
          "print",
          "json.dumps"
        ],
        "cmd_help": [
          "print"
        ],
        "_init_ai_integration": [],
        "_init_command_processor": [],
        "_init_business_manager": [
          "BusinessPlanningManager",
          "logger.error"
        ],
        "_init_team_manager": [
          "TeamManagementSystem",
          "logger.error"
        ],
        "main": [
          "BossCLI",
          "argparse.ArgumentParser",
          "parser.parse_args",
          "boss_cli.process_command",
          "parser.add_argument",
          "boss_cli.run_interactive"
        ]
      },
      "dependencies": [
        "BusinessPlanningManager",
        "Path",
        "TeamManagementSystem",
        "argparse",
        "business_planning",
        "json",
        "logging",
        "pathlib",
        "sys",
        "team_management"
      ],
      "hash": "b898b48371f4e427d5a4ecdee44a51c7a948becbddcf9bf1a2baedb49a0c1dda",
      "artifact_id": "f8528b05-9e8c-4869-8781-82a8a6b464d1"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.send_cursor_response",
      "path": ".ARCHIVE/archive/telegram_experiments/send_cursor_response.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            5,
            32
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "main": [
          "print",
          "send_to_user"
        ]
      },
      "dependencies": [
        "asyncio",
        "cursor_bot_messenger",
        "send_to_user"
      ],
      "hash": "f7304a71ae1706f82f92d6d18358f89797a3e6eb23fa0510921109c5d121d48e",
      "artifact_id": "d611065b-eb4d-450e-9b9c-38d0ffcb447e"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.cursor_telegram_reader_enhanced",
      "path": ".ARCHIVE/archive/telegram_experiments/cursor_telegram_reader_enhanced.py",
      "category": "core",
      "module_doc": "Enhanced Cursor Telegram Reader\n\u0427\u0438\u0442\u0430\u0435\u0442 cursor \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0441 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u043e\u0439 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u043e\u0439 reply context",
      "functions": [
        {
          "name": "handle_cursor_command",
          "docstring": "Example handler for cursor commands",
          "line_range": [
            181,
            203
          ],
          "parameters": [
            "command_data"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Main entry point",
          "line_range": [
            205,
            222
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            16,
            20
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "read_cursor_commands",
          "docstring": "\u0427\u0438\u0442\u0430\u0435\u0442 \u043d\u043e\u0432\u044b\u0435 cursor \u043a\u043e\u043c\u0430\u043d\u0434\u044b",
          "line_range": [
            22,
            44
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_parse_cursor_command",
          "docstring": "Parse single cursor command entry",
          "line_range": [
            46,
            84
          ],
          "parameters": [
            "self",
            "entry"
          ],
          "decorators": []
        },
        {
          "name": "get_recent_user_messages",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0434\u043b\u044f \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430",
          "line_range": [
            86,
            108
          ],
          "parameters": [
            "self",
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "_parse_user_message",
          "docstring": "Parse user message entry",
          "line_range": [
            110,
            158
          ],
          "parameters": [
            "self",
            "entry"
          ],
          "decorators": []
        },
        {
          "name": "poll_for_commands",
          "docstring": "Polling \u0434\u043b\u044f \u043d\u043e\u0432\u044b\u0445 \u043a\u043e\u043c\u0430\u043d\u0434",
          "line_range": [
            160,
            179
          ],
          "parameters": [
            "self",
            "callback_func",
            "poll_interval"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "EnhancedCursorTelegramReader",
          "docstring": "Enhanced reader \u0434\u043b\u044f cursor \u043a\u043e\u043c\u0430\u043d\u0434 \u0438\u0437 Telegram \u043b\u043e\u0433\u043e\u0432",
          "line_range": [
            13,
            179
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                16,
                20
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "read_cursor_commands",
              "docstring": "\u0427\u0438\u0442\u0430\u0435\u0442 \u043d\u043e\u0432\u044b\u0435 cursor \u043a\u043e\u043c\u0430\u043d\u0434\u044b",
              "line_range": [
                22,
                44
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_parse_cursor_command",
              "docstring": "Parse single cursor command entry",
              "line_range": [
                46,
                84
              ],
              "parameters": [
                "self",
                "entry"
              ]
            },
            {
              "name": "get_recent_user_messages",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0434\u043b\u044f \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430",
              "line_range": [
                86,
                108
              ],
              "parameters": [
                "self",
                "limit"
              ]
            },
            {
              "name": "_parse_user_message",
              "docstring": "Parse user message entry",
              "line_range": [
                110,
                158
              ],
              "parameters": [
                "self",
                "entry"
              ]
            },
            {
              "name": "poll_for_commands",
              "docstring": "Polling \u0434\u043b\u044f \u043d\u043e\u0432\u044b\u0445 \u043a\u043e\u043c\u0430\u043d\u0434",
              "line_range": [
                160,
                179
              ],
              "parameters": [
                "self",
                "callback_func",
                "poll_interval"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "set"
        ],
        "read_cursor_commands": [
          "print",
          "self._parse_cursor_command",
          "open",
          "commands.append",
          "f.read",
          "content.split",
          "entry.strip"
        ],
        "_parse_cursor_command": [
          "print",
          "datetime.strptime",
          "datetime.now",
          "line.strip",
          "timestamp_line.split",
          "len",
          "line.startswith",
          "int",
          "timestamp.isoformat",
          "entry.strip",
          "timestamp.timestamp"
        ],
        "get_recent_user_messages": [
          "print",
          "open",
          "self._parse_user_message",
          "f.read",
          "content.split",
          "messages.append",
          "entry.strip"
        ],
        "_parse_user_message": [
          "print",
          "datetime.strptime",
          "datetime.now",
          "line.strip",
          "len",
          "timestamp_line.replace",
          "line.startswith",
          "int",
          "timestamp.isoformat",
          "entry.strip"
        ],
        "poll_for_commands": [
          "print",
          "callback_func",
          "time.sleep",
          "self.read_cursor_commands"
        ],
        "handle_cursor_command": [
          "print"
        ],
        "main": [
          "print",
          "reader.get_recent_user_messages",
          "reader.poll_for_commands",
          "EnhancedCursorTelegramReader"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "datetime",
        "json",
        "os",
        "time",
        "typing"
      ],
      "hash": "3130f8a9ff7e3f368fe44b3cfe7f6ac96520e590f4d17ebcf4e40c4579322eac",
      "artifact_id": "a0753132-1a50-42b4-8295-61f0a7269be1"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.api_memory_endpoints",
      "path": ".ARCHIVE/archive/telegram_experiments/api_memory_endpoints.py",
      "category": "core",
      "module_doc": "API Endpoints \u0434\u043b\u044f \u043f\u0430\u043c\u044f\u0442\u0438 Telegram \u0431\u043e\u0442\u0430\n\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 FastAPI \u0434\u043b\u044f \u043a\u0435\u0448\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439",
      "functions": [
        {
          "name": "load_user_memory",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043f\u0430\u043c\u044f\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            44,
            52
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "save_user_memory",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043f\u0430\u043c\u044f\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0432 \u0444\u0430\u0439\u043b",
          "line_range": [
            54,
            60
          ],
          "parameters": [
            "memory"
          ],
          "decorators": []
        },
        {
          "name": "add_memory_endpoints",
          "docstring": "\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 endpoints \u043f\u0430\u043c\u044f\u0442\u0438 \u043a FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044e",
          "line_range": [
            62,
            273
          ],
          "parameters": [
            "app"
          ],
          "decorators": []
        },
        {
          "name": "save_user_message",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            66,
            97
          ],
          "parameters": [
            "message"
          ],
          "decorators": [
            "app.post('/api/v1/memory/save')"
          ]
        },
        {
          "name": "get_user_history",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            100,
            122
          ],
          "parameters": [
            "user_id",
            "limit"
          ],
          "decorators": [
            "app.get('/api/v1/memory/history/{user_id}')"
          ]
        },
        {
          "name": "search_user_memory",
          "docstring": "\u041f\u043e\u0438\u0441\u043a \u0432 \u043f\u0430\u043c\u044f\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            125,
            152
          ],
          "parameters": [
            "query"
          ],
          "decorators": [
            "app.post('/api/v1/memory/search')"
          ]
        },
        {
          "name": "chat_with_ollama",
          "docstring": "\u0427\u0430\u0442 \u0441 Ollama \u0447\u0435\u0440\u0435\u0437 API",
          "line_range": [
            155,
            215
          ],
          "parameters": [
            "request"
          ],
          "decorators": [
            "app.post('/api/v1/chat/ollama')"
          ]
        },
        {
          "name": "clear_user_memory",
          "docstring": "\u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u043f\u0430\u043c\u044f\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            218,
            238
          ],
          "parameters": [
            "user_id"
          ],
          "decorators": [
            "app.delete('/api/v1/memory/clear/{user_id}')"
          ]
        },
        {
          "name": "memory_stats",
          "docstring": "\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u043f\u0430\u043c\u044f\u0442\u0438",
          "line_range": [
            241,
            273
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/memory/stats')"
          ]
        }
      ],
      "classes": [
        {
          "name": "UserMessage",
          "docstring": "",
          "line_range": [
            21,
            26
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "MemoryQuery",
          "docstring": "",
          "line_range": [
            28,
            31
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "OllamaRequest",
          "docstring": "",
          "line_range": [
            33,
            38
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        }
      ],
      "callgraph": {
        "load_user_memory": [
          "USER_MEMORY_FILE.exists",
          "json.load",
          "print",
          "open"
        ],
        "save_user_memory": [
          "json.dump",
          "print",
          "open"
        ],
        "add_memory_endpoints": [],
        "save_user_message": [
          "save_user_memory",
          "load_user_memory",
          "len",
          "HTTPException",
          "app.post",
          "time.strftime",
          "str"
        ],
        "get_user_history": [
          "load_user_memory",
          "len",
          "memory.get",
          "HTTPException",
          "app.get",
          "str",
          "Query"
        ],
        "search_user_memory": [
          "msg.get",
          "load_user_memory",
          "len",
          "memory.get",
          "HTTPException",
          "app.post",
          "str",
          "found_messages.append"
        ],
        "chat_with_ollama": [
          "response_text.split",
          "aiohttp.ClientTimeout",
          "len",
          "HTTPException",
          "app.post",
          "open",
          "aiohttp.ClientSession",
          "toml.load",
          "resp.json",
          "time.strftime",
          "str",
          "data.get",
          "session.post",
          "resp.text"
        ],
        "clear_user_memory": [
          "save_user_memory",
          "load_user_memory",
          "len",
          "memory.get",
          "HTTPException",
          "time.strftime",
          "str",
          "app.delete"
        ],
        "memory_stats": [
          "memory.values",
          "user_stats.append",
          "time.ctime",
          "load_user_memory",
          "len",
          "HTTPException",
          "app.get",
          "USER_MEMORY_FILE.exists",
          "user_stats.sort",
          "memory.items",
          "int",
          "USER_MEMORY_FILE.stat",
          "last_message.get",
          "str",
          "sum"
        ]
      },
      "dependencies": [
        "Any",
        "BaseModel",
        "Dict",
        "FastAPI",
        "HTTPException",
        "List",
        "Optional",
        "Path",
        "Query",
        "aiohttp",
        "asyncio",
        "datetime",
        "fastapi",
        "json",
        "pathlib",
        "pydantic",
        "time",
        "timedelta",
        "toml",
        "typing"
      ],
      "hash": "8845c222e6fe8ddcf65e6ea50258abd5fa590607d6331369e3cadcf46f0fdcae",
      "artifact_id": "388695ae-4c6e-4e13-b004-1a1512d5cc7c"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.fastapi_ollama_server",
      "path": ".ARCHIVE/archive/telegram_experiments/fastapi_ollama_server.py",
      "category": "core",
      "module_doc": "\ud83d\ude80 \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u043d\u044b\u0439 FastAPI \u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f LLMStruct\n- Ollama \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f\n- \u041f\u0430\u043c\u044f\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \n- \u041c\u0435\u0442\u0440\u0438\u043a\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b\n- \u0412\u0441\u0435 \u0432 \u043e\u0434\u043d\u043e\u043c \u0444\u0430\u0439\u043b\u0435 \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0442\u044b",
      "functions": [
        {
          "name": "load_user_memory",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043f\u0430\u043c\u044f\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439",
          "line_range": [
            56,
            64
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "save_user_memory",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043f\u0430\u043c\u044f\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439",
          "line_range": [
            66,
            72
          ],
          "parameters": [
            "memory"
          ],
          "decorators": []
        },
        {
          "name": "load_ollama_config",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 Ollama",
          "line_range": [
            74,
            82
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "root",
          "docstring": "\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 API",
          "line_range": [
            114,
            131
          ],
          "parameters": [],
          "decorators": [
            "app.get('/', summary='API Information')"
          ]
        },
        {
          "name": "health_check",
          "docstring": "Health check \u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u043e\u0439 Ollama",
          "line_range": [
            134,
            155
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/system/health', response_model=HealthResponse)"
          ]
        },
        {
          "name": "system_status",
          "docstring": "\u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            158,
            246
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/system/status')"
          ]
        },
        {
          "name": "chat_with_ollama",
          "docstring": "\u0427\u0430\u0442 \u0441 Ollama",
          "line_range": [
            251,
            319
          ],
          "parameters": [
            "request"
          ],
          "decorators": [
            "app.post('/api/v1/chat/ollama')"
          ]
        },
        {
          "name": "get_ollama_models",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 Ollama",
          "line_range": [
            322,
            350
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/ollama/models')"
          ]
        },
        {
          "name": "save_user_message",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            355,
            389
          ],
          "parameters": [
            "message"
          ],
          "decorators": [
            "app.post('/api/v1/memory/save')"
          ]
        },
        {
          "name": "get_user_history",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            392,
            415
          ],
          "parameters": [
            "user_id",
            "limit"
          ],
          "decorators": [
            "app.get('/api/v1/memory/history/{user_id}')"
          ]
        },
        {
          "name": "memory_stats",
          "docstring": "\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u043f\u0430\u043c\u044f\u0442\u0438",
          "line_range": [
            418,
            450
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/memory/stats')"
          ]
        },
        {
          "name": "clear_user_memory",
          "docstring": "\u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u043f\u0430\u043c\u044f\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            453,
            476
          ],
          "parameters": [
            "user_id"
          ],
          "decorators": [
            "app.delete('/api/v1/memory/clear/{user_id}')"
          ]
        },
        {
          "name": "startup_event",
          "docstring": "\u0421\u043e\u0431\u044b\u0442\u0438\u044f \u043f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435",
          "line_range": [
            481,
            488
          ],
          "parameters": [],
          "decorators": [
            "app.on_event('startup')"
          ]
        },
        {
          "name": "shutdown_event",
          "docstring": "\u0421\u043e\u0431\u044b\u0442\u0438\u044f \u043f\u0440\u0438 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435",
          "line_range": [
            491,
            499
          ],
          "parameters": [],
          "decorators": [
            "app.on_event('shutdown')"
          ]
        }
      ],
      "classes": [
        {
          "name": "UserMessage",
          "docstring": "",
          "line_range": [
            85,
            90
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "OllamaRequest",
          "docstring": "",
          "line_range": [
            92,
            97
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "ChatMessage",
          "docstring": "",
          "line_range": [
            99,
            102
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "HealthResponse",
          "docstring": "",
          "line_range": [
            104,
            109
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        }
      ],
      "callgraph": {
        "load_user_memory": [
          "USER_MEMORY_FILE.exists",
          "json.load",
          "print",
          "open"
        ],
        "save_user_memory": [
          "json.dump",
          "print",
          "open"
        ],
        "load_ollama_config": [
          "toml.load",
          "open"
        ],
        "root": [
          "app.get"
        ],
        "health_check": [
          "session.get",
          "aiohttp.ClientTimeout",
          "track_workflow_event",
          "HealthResponse",
          "app.get",
          "aiohttp.ClientSession",
          "time.strftime",
          "load_ollama_config"
        ],
        "system_status": [
          "time.ctime",
          "HTTPException",
          "app.get",
          "USER_MEMORY_FILE.exists",
          "track_task_start",
          "resp.json",
          "memory.values",
          "time.time",
          "len",
          "track_task_complete",
          "int",
          "aiohttp.ClientTimeout",
          "track_workflow_event",
          "tracker.get_session_summary",
          "struct_file.exists",
          "Path",
          "session.get",
          "load_user_memory",
          "struct_file.stat",
          "aiohttp.ClientSession",
          "time.strftime",
          "load_ollama_config",
          "str",
          "data.get",
          "sum",
          "get_metrics_tracker"
        ],
        "chat_with_ollama": [
          "response_text.split",
          "HTTPException",
          "track_task_start",
          "resp.json",
          "time.time",
          "len",
          "track_task_complete",
          "int",
          "tracker.track_token_usage",
          "aiohttp.ClientTimeout",
          "track_workflow_event",
          "app.post",
          "session.post",
          "resp.text",
          "aiohttp.ClientSession",
          "time.strftime",
          "load_ollama_config",
          "str",
          "data.get",
          "get_metrics_tracker"
        ],
        "get_ollama_models": [
          "model.get",
          "session.get",
          "aiohttp.ClientTimeout",
          "len",
          "HTTPException",
          "app.get",
          "aiohttp.ClientSession",
          "resp.json",
          "load_ollama_config",
          "str",
          "data.get",
          "models.append"
        ],
        "save_user_message": [
          "save_user_memory",
          "load_user_memory",
          "len",
          "track_workflow_event",
          "HTTPException",
          "app.post",
          "time.strftime",
          "str"
        ],
        "get_user_history": [
          "load_user_memory",
          "len",
          "track_workflow_event",
          "memory.get",
          "HTTPException",
          "app.get",
          "str",
          "Query"
        ],
        "memory_stats": [
          "memory.values",
          "user_stats.append",
          "time.ctime",
          "load_user_memory",
          "len",
          "HTTPException",
          "app.get",
          "USER_MEMORY_FILE.exists",
          "user_stats.sort",
          "memory.items",
          "int",
          "USER_MEMORY_FILE.stat",
          "last_message.get",
          "str",
          "sum"
        ],
        "clear_user_memory": [
          "save_user_memory",
          "load_user_memory",
          "len",
          "memory.get",
          "track_workflow_event",
          "HTTPException",
          "time.strftime",
          "str",
          "app.delete"
        ],
        "startup_event": [
          "print",
          "app.on_event",
          "track_workflow_event",
          "get_metrics_tracker"
        ],
        "shutdown_event": [
          "print",
          "track_workflow_event",
          "tracker.save_session",
          "app.on_event",
          "get_metrics_tracker"
        ]
      },
      "dependencies": [
        "Any",
        "BaseModel",
        "CORSMiddleware",
        "Dict",
        "FastAPI",
        "HTTPException",
        "List",
        "Optional",
        "Path",
        "Query",
        "aiohttp",
        "asyncio",
        "datetime",
        "fastapi",
        "fastapi.middleware.cors",
        "get_metrics_tracker",
        "json",
        "pathlib",
        "pydantic",
        "src.llmstruct.metrics_tracker",
        "time",
        "timedelta",
        "toml",
        "track_task_complete",
        "track_task_start",
        "track_workflow_event",
        "typing",
        "uvicorn"
      ],
      "hash": "0de4df6f94a5943ec8c34ae76e8adbafad3f9ed52851fc8453df3e1640e5e8fd",
      "artifact_id": "82879782-8c1b-4525-a5bd-f7a62d333825"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.dummy_work_executor",
      "path": ".ARCHIVE/archive/telegram_experiments/dummy_work_executor.py",
      "category": "core",
      "module_doc": "Dummy Work Executor - \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0432\u0443\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0435\u0439 \u0441\u0432\u044f\u0437\u0438 \u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c \u0447\u0435\u0440\u0435\u0437 Telegram",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": [
            340,
            350
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            31,
            43
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "send_message",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0447\u0435\u0440\u0435\u0437 Telegram",
          "line_range": [
            45,
            61
          ],
          "parameters": [
            "self",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "check_user_response",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043e\u0442\u0432\u0435\u0442\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438\u0437 \u043b\u043e\u0433\u043e\u0432",
          "line_range": [
            63,
            102
          ],
          "parameters": [
            "self",
            "expected_keywords"
          ],
          "decorators": []
        },
        {
          "name": "wait_for_user_input",
          "docstring": "\u041e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u043e\u0442\u0432\u0435\u0442\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441 \u0442\u0430\u0439\u043c\u0430\u0443\u0442\u043e\u043c",
          "line_range": [
            104,
            118
          ],
          "parameters": [
            "self",
            "timeout",
            "expected_keywords"
          ],
          "decorators": []
        },
        {
          "name": "dummy_phase_1",
          "docstring": "Dummy Phase 1: \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0432\u044f\u0437\u0438",
          "line_range": [
            120,
            173
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "dummy_phase_2",
          "docstring": "Dummy Phase 2: \u0413\u043e\u0442\u043e\u0432\u043d\u043e\u0441\u0442\u044c \u043a \u043c\u0430\u0441\u0442\u0435\u0440-\u043f\u043b\u0430\u043d\u0443",
          "line_range": [
            175,
            296
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "execute_dummy_work",
          "docstring": "\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u043d\u043e\u0433\u043e \u0446\u0438\u043a\u043b\u0430 dummy work",
          "line_range": [
            298,
            338
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "DummyWorkExecutor",
          "docstring": "\u0418\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c dummy work \u0441 \u0434\u0432\u0443\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0435\u0439 \u0441\u0432\u044f\u0437\u044c\u044e",
          "line_range": [
            28,
            338
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                31,
                43
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "send_message",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0447\u0435\u0440\u0435\u0437 Telegram",
              "line_range": [
                45,
                61
              ],
              "parameters": [
                "self",
                "message"
              ]
            },
            {
              "name": "check_user_response",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043e\u0442\u0432\u0435\u0442\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438\u0437 \u043b\u043e\u0433\u043e\u0432",
              "line_range": [
                63,
                102
              ],
              "parameters": [
                "self",
                "expected_keywords"
              ]
            },
            {
              "name": "wait_for_user_input",
              "docstring": "\u041e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u043e\u0442\u0432\u0435\u0442\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441 \u0442\u0430\u0439\u043c\u0430\u0443\u0442\u043e\u043c",
              "line_range": [
                104,
                118
              ],
              "parameters": [
                "self",
                "timeout",
                "expected_keywords"
              ]
            },
            {
              "name": "dummy_phase_1",
              "docstring": "Dummy Phase 1: \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0432\u044f\u0437\u0438",
              "line_range": [
                120,
                173
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "dummy_phase_2",
              "docstring": "Dummy Phase 2: \u0413\u043e\u0442\u043e\u0432\u043d\u043e\u0441\u0442\u044c \u043a \u043c\u0430\u0441\u0442\u0435\u0440-\u043f\u043b\u0430\u043d\u0443",
              "line_range": [
                175,
                296
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "execute_dummy_work",
              "docstring": "\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u043d\u043e\u0433\u043e \u0446\u0438\u043a\u043b\u0430 dummy work",
              "line_range": [
                298,
                338
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "time.time",
          "Bot",
          "os.getenv",
          "track_workflow_event",
          "int"
        ],
        "send_message": [
          "print"
        ],
        "check_user_response": [
          "print",
          "Path",
          "keyword.lower",
          "len",
          "content.split",
          "open",
          "next",
          "line.startswith",
          "message_line.replace",
          "message.lower",
          "last_entry.strip",
          "f.read",
          "messages_log.exists"
        ],
        "wait_for_user_input": [
          "print",
          "time.time",
          "self.check_user_response",
          "asyncio.sleep"
        ],
        "dummy_phase_1": [
          "print",
          "self.send_message",
          "track_task_complete",
          "track_task_start",
          "self.wait_for_user_input"
        ],
        "dummy_phase_2": [
          "print",
          "user_message.lower",
          "self.send_message",
          "track_task_complete",
          "track_workflow_event",
          "track_task_start",
          "self.wait_for_user_input",
          "any"
        ],
        "execute_dummy_work": [
          "print",
          "self.dummy_phase_2",
          "datetime.now",
          "self.send_message",
          "track_workflow_event",
          "asyncio.sleep",
          "str",
          "self.dummy_phase_1"
        ],
        "main": [
          "print",
          "executor.execute_dummy_work",
          "DummyWorkExecutor"
        ]
      },
      "dependencies": [
        "Bot",
        "Path",
        "asyncio",
        "datetime",
        "os",
        "pathlib",
        "src.llmstruct.metrics_tracker",
        "sys",
        "telegram",
        "time",
        "track_task_complete",
        "track_task_start",
        "track_workflow_event"
      ],
      "hash": "5f3a0d807d22d6aab2912e4e2c101455d342b71abba31eb61702c1da90f2c027",
      "artifact_id": "58abaa3e-393a-4ee7-afb6-0cca64e9a14a"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.cursor_telegram_reader",
      "path": ".ARCHIVE/archive/telegram_experiments/cursor_telegram_reader.py",
      "category": "core",
      "module_doc": "Cursor Telegram Reader - \u0427\u0438\u0442\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0438\u0437 Telegram \u0431\u043e\u0442\u0430 \u0434\u043b\u044f Cursor",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": [
            153,
            202
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            16,
            20
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_latest_messages",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f",
          "line_range": [
            22,
            56
          ],
          "parameters": [
            "self",
            "count"
          ],
          "decorators": []
        },
        {
          "name": "get_cursor_commands",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0434\u043b\u044f Cursor \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0447\u0430\u0441\u044b",
          "line_range": [
            58,
            91
          ],
          "parameters": [
            "self",
            "hours"
          ],
          "decorators": []
        },
        {
          "name": "watch_new_messages",
          "docstring": "\u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 \u043d\u043e\u0432\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u043c \u0432\u0440\u0435\u043c\u0435\u043d\u0438",
          "line_range": [
            93,
            127
          ],
          "parameters": [
            "self",
            "callback"
          ],
          "decorators": []
        },
        {
          "name": "print_status",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f",
          "line_range": [
            129,
            151
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TelegramLogReader",
          "docstring": "\u0427\u0438\u0442\u0430\u0442\u0435\u043b\u044c \u043b\u043e\u0433\u043e\u0432 Telegram \u0434\u043b\u044f Cursor",
          "line_range": [
            13,
            151
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                16,
                20
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "get_latest_messages",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f",
              "line_range": [
                22,
                56
              ],
              "parameters": [
                "self",
                "count"
              ]
            },
            {
              "name": "get_cursor_commands",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0434\u043b\u044f Cursor \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0447\u0430\u0441\u044b",
              "line_range": [
                58,
                91
              ],
              "parameters": [
                "self",
                "hours"
              ]
            },
            {
              "name": "watch_new_messages",
              "docstring": "\u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 \u043d\u043e\u0432\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u043c \u0432\u0440\u0435\u043c\u0435\u043d\u0438",
              "line_range": [
                93,
                127
              ],
              "parameters": [
                "self",
                "callback"
              ]
            },
            {
              "name": "print_status",
              "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f",
              "line_range": [
                129,
                151
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path"
        ],
        "get_latest_messages": [
          "print",
          "type_line.replace",
          "len",
          "open",
          "user_line.replace",
          "message_line.replace",
          "f.read",
          "content.split",
          "messages.append",
          "entry.strip"
        ],
        "get_cursor_commands": [
          "print",
          "datetime.strptime",
          "f.readlines",
          "line.split",
          "datetime.now",
          "len",
          "open",
          "commands.append",
          "timedelta"
        ],
        "watch_new_messages": [
          "print",
          "new_content.strip",
          "time.sleep",
          "f.seek",
          "callback",
          "open",
          "f.read"
        ],
        "print_status": [
          "print",
          "datetime.fromtimestamp"
        ],
        "main": [
          "print",
          "reader.watch_new_messages",
          "len",
          "reader.get_latest_messages",
          "reader.print_status",
          "int",
          "TelegramLogReader",
          "reader.get_cursor_commands"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "datetime",
        "json",
        "os",
        "pathlib",
        "sys",
        "time",
        "timedelta",
        "typing"
      ],
      "hash": "6fad77e0967406843e9c5aac98799827d2714a6aa2f4af06736305bf2393ebc0",
      "artifact_id": "d29353a6-ee41-4a24-9718-097112d216ae"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.cursor_bot_messenger",
      "path": ".ARCHIVE/archive/telegram_experiments/cursor_bot_messenger.py",
      "category": "core",
      "module_doc": "Cursor Bot Messenger - \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0447\u0435\u0440\u0435\u0437 Telegram",
      "functions": [
        {
          "name": "send_to_user",
          "docstring": "\u0423\u0434\u043e\u0431\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f",
          "line_range": [
            113,
            116
          ],
          "parameters": [
            "message"
          ],
          "decorators": []
        },
        {
          "name": "wait_for_response",
          "docstring": "\u0423\u0434\u043e\u0431\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u043e\u0442\u0432\u0435\u0442\u0430",
          "line_range": [
            118,
            121
          ],
          "parameters": [
            "timeout_minutes"
          ],
          "decorators": []
        },
        {
          "name": "interactive_communication",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0432\u043e\u043f\u0440\u043e\u0441 \u0438 \u0434\u043e\u0436\u0434\u0430\u0442\u044c\u0441\u044f \u043e\u0442\u0432\u0435\u0442\u0430",
          "line_range": [
            123,
            134
          ],
          "parameters": [
            "question",
            "timeout_minutes"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            22,
            30
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_user_chat_id",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 chat_id \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438\u0437 \u043b\u043e\u0433\u043e\u0432",
          "line_range": [
            32,
            50
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "send_message",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e",
          "line_range": [
            52,
            71
          ],
          "parameters": [
            "self",
            "message",
            "parse_mode"
          ],
          "decorators": []
        },
        {
          "name": "wait_for_user_response",
          "docstring": "\u041e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u043e\u0442\u0432\u0435\u0442\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            73,
            111
          ],
          "parameters": [
            "self",
            "timeout_minutes"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            145,
            146
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CursorBotMessenger",
          "docstring": "\u041a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0438\u0437 Cursor \u0432 Telegram",
          "line_range": [
            19,
            111
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                22,
                30
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_user_chat_id",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 chat_id \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438\u0437 \u043b\u043e\u0433\u043e\u0432",
              "line_range": [
                32,
                50
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "send_message",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e",
              "line_range": [
                52,
                71
              ],
              "parameters": [
                "self",
                "message",
                "parse_mode"
              ]
            },
            {
              "name": "wait_for_user_response",
              "docstring": "\u041e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u043e\u0442\u0432\u0435\u0442\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
              "line_range": [
                73,
                111
              ],
              "parameters": [
                "self",
                "timeout_minutes"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "os.getenv",
          "Bot",
          "ValueError"
        ],
        "get_user_chat_id": [
          "print",
          "line.split",
          "content.split",
          "reversed",
          "open",
          "int",
          "f.read",
          "messages_log.exists"
        ],
        "send_message": [
          "self.get_user_chat_id",
          "print"
        ],
        "wait_for_user_response": [
          "print",
          "datetime.fromisoformat",
          "time.time",
          "datetime.now",
          "len",
          "open",
          "content.split",
          "reversed",
          "asyncio.sleep",
          "f.read",
          "messages_log.exists",
          "entry.strip"
        ],
        "send_to_user": [
          "CursorBotMessenger",
          "messenger.send_message"
        ],
        "wait_for_response": [
          "CursorBotMessenger",
          "messenger.wait_for_user_response"
        ],
        "interactive_communication": [
          "CursorBotMessenger",
          "messenger.wait_for_user_response",
          "messenger.send_message"
        ],
        "main": [
          "send_to_user"
        ]
      },
      "dependencies": [
        "Bot",
        "Path",
        "asyncio",
        "datetime",
        "logging",
        "os",
        "pathlib",
        "sys",
        "telegram",
        "time"
      ],
      "hash": "c38d60d27eb284c83273e4b1c49d36e7eebed1fb35c451ce0e4f5ebf972378a0",
      "artifact_id": "43929e98-3e65-4ca9-99c9-bfd7bae5ab3d"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.send_test_message",
      "path": ".ARCHIVE/archive/telegram_experiments/send_test_message.py",
      "category": "core",
      "module_doc": "Test message sender to Telegram\n\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0438 \u0436\u0434\u0435\u0442 \u043e\u0442\u0432\u0435\u0442\u0430 \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
      "functions": [
        {
          "name": "send_test_message",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 Telegram",
          "line_range": [
            13,
            57
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "wait_for_user_response",
          "docstring": "\u0416\u0434\u0435\u0442 \u043e\u0442\u0432\u0435\u0442\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 \u043b\u043e\u0433\u043e\u0432",
          "line_range": [
            59,
            101
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f",
          "line_range": [
            103,
            120
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "send_test_message": [
          "print",
          "client.post",
          "datetime.now",
          "os.getenv",
          "httpx.AsyncClient"
        ],
        "wait_for_user_response": [
          "print",
          "f.readlines",
          "line.split",
          "datetime.now",
          "timestamp_str.replace",
          "open",
          "reversed",
          "start_time.strftime",
          "asyncio.sleep",
          "datetime.fromisoformat",
          "log_time.strftime"
        ],
        "main": [
          "print",
          "send_test_message",
          "wait_for_user_response"
        ]
      },
      "dependencies": [
        "asyncio",
        "datetime",
        "httpx",
        "os",
        "sys"
      ],
      "hash": "f986d594294d6445b32d45739edfd631ff5cccb397400f256628cef4ca106fe9",
      "artifact_id": "1b3cb28e-c93b-4676-a178-55aa82da24dd"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.cursor_integration",
      "path": ".ARCHIVE/archive/telegram_experiments/cursor_integration.py",
      "category": "core",
      "module_doc": "\ud83c\udfaf Cursor Integration for Telegram Master Controller\n\u041f\u0440\u043e\u0441\u0442\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 Cursor \u0441 Telegram \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u043e\u043c",
      "functions": [
        {
          "name": "check_telegram_commands",
          "docstring": "\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043a\u043e\u043c\u0430\u043d\u0434",
          "line_range": [
            142,
            144
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "send_telegram_message",
          "docstring": "\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
          "line_range": [
            146,
            148
          ],
          "parameters": [
            "message",
            "msg_type"
          ],
          "decorators": []
        },
        {
          "name": "update_telegram_status",
          "docstring": "\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u0442\u0430\u0442\u0443\u0441\u0430",
          "line_range": [
            150,
            152
          ],
          "parameters": [
            "message",
            "status"
          ],
          "decorators": []
        },
        {
          "name": "send_progress",
          "docstring": "\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430",
          "line_range": [
            154,
            156
          ],
          "parameters": [
            "step",
            "details",
            "progress"
          ],
          "decorators": []
        },
        {
          "name": "send_completion",
          "docstring": "\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f \u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0438",
          "line_range": [
            158,
            160
          ],
          "parameters": [
            "summary",
            "success"
          ],
          "decorators": []
        },
        {
          "name": "ask_confirmation",
          "docstring": "\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f",
          "line_range": [
            162,
            164
          ],
          "parameters": [
            "question",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            16,
            25
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "check_for_commands",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            27,
            48
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "send_response",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043e\u0442\u0432\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0432 Telegram",
          "line_range": [
            50,
            78
          ],
          "parameters": [
            "self",
            "message",
            "response_type"
          ],
          "decorators": []
        },
        {
          "name": "update_status",
          "docstring": "\u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f",
          "line_range": [
            80,
            96
          ],
          "parameters": [
            "self",
            "message",
            "status"
          ],
          "decorators": []
        },
        {
          "name": "send_progress_update",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430",
          "line_range": [
            98,
            109
          ],
          "parameters": [
            "self",
            "step",
            "details",
            "progress"
          ],
          "decorators": []
        },
        {
          "name": "send_completion",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0438",
          "line_range": [
            111,
            124
          ],
          "parameters": [
            "self",
            "summary",
            "success"
          ],
          "decorators": []
        },
        {
          "name": "ask_for_confirmation",
          "docstring": "\u0417\u0430\u043f\u0440\u043e\u0441\u0438\u0442\u044c \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            126,
            137
          ],
          "parameters": [
            "self",
            "question",
            "context"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CursorTelegramIntegration",
          "docstring": "\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f Cursor \u0441 Telegram Master Controller",
          "line_range": [
            13,
            137
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                16,
                25
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "check_for_commands",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
              "line_range": [
                27,
                48
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "send_response",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043e\u0442\u0432\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0432 Telegram",
              "line_range": [
                50,
                78
              ],
              "parameters": [
                "self",
                "message",
                "response_type"
              ]
            },
            {
              "name": "update_status",
              "docstring": "\u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f",
              "line_range": [
                80,
                96
              ],
              "parameters": [
                "self",
                "message",
                "status"
              ]
            },
            {
              "name": "send_progress_update",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430",
              "line_range": [
                98,
                109
              ],
              "parameters": [
                "self",
                "step",
                "details",
                "progress"
              ]
            },
            {
              "name": "send_completion",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0438",
              "line_range": [
                111,
                124
              ],
              "parameters": [
                "self",
                "summary",
                "success"
              ]
            },
            {
              "name": "ask_for_confirmation",
              "docstring": "\u0417\u0430\u043f\u0440\u043e\u0441\u0438\u0442\u044c \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
              "line_range": [
                126,
                137
              ],
              "parameters": [
                "self",
                "question",
                "context"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "set"
        ],
        "check_for_commands": [
          "print",
          "new_commands.append",
          "open",
          "cmd.get",
          "json.load"
        ],
        "send_response": [
          "print",
          "time.time",
          "datetime.now",
          "len",
          "open",
          "json.dump",
          "int",
          "responses.append",
          "json.load"
        ],
        "update_status": [
          "json.dump",
          "datetime.now",
          "print",
          "open"
        ],
        "send_progress_update": [
          "self.update_status",
          "self.send_response"
        ],
        "send_completion": [
          "_integration.send_completion"
        ],
        "ask_for_confirmation": [
          "self.update_status",
          "self.send_response"
        ],
        "check_telegram_commands": [
          "_integration.check_for_commands"
        ],
        "send_telegram_message": [
          "_integration.send_response"
        ],
        "update_telegram_status": [
          "_integration.update_status"
        ],
        "send_progress": [
          "_integration.send_progress_update"
        ],
        "ask_confirmation": [
          "_integration.ask_for_confirmation"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "datetime",
        "json",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": "8c0000eee8273805612870ec1d550ce63cde46c733f92265c27736195141dbf5",
      "artifact_id": "4bbfba51-8617-4505-b4cb-aeea3b1aadaf"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.cursor_simple_integration",
      "path": ".ARCHIVE/archive/telegram_experiments/cursor_simple_integration.py",
      "category": "core",
      "module_doc": "\u041f\u0440\u043e\u0441\u0442\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 Cursor \u0441 Telegram \u0431\u043e\u0442\u043e\u043c\n\u0411\u0430\u0437\u043e\u0432\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0447\u0435\u0440\u0435\u0437 JSON \u0444\u0430\u0439\u043b\u044b \u0431\u0435\u0437 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439",
      "functions": [
        {
          "name": "ensure_data_dir",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u044b\u0445",
          "line_range": [
            20,
            27
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "get_user_messages",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n\nArgs:\n    limit: \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e 10)\n\nReturns:\n    \u0421\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            29,
            50
          ],
          "parameters": [
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "send_to_telegram",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 Telegram \u0447\u0435\u0440\u0435\u0437 \u0431\u043e\u0442\u0430\n\nArgs:\n    text: \u0422\u0435\u043a\u0441\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\n    message_type: \u0422\u0438\u043f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f (response, notification, etc.)\n\nReturns:\n    True \u0435\u0441\u043b\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043e \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c",
          "line_range": [
            52,
            94
          ],
          "parameters": [
            "text",
            "message_type"
          ],
          "decorators": []
        },
        {
          "name": "check_new_messages",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u043e\u0432\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438\n\nArgs:\n    last_check_timestamp: ISO timestamp \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438\n\nReturns:\n    \u0421\u043f\u0438\u0441\u043e\u043a \u043d\u043e\u0432\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
          "line_range": [
            96,
            126
          ],
          "parameters": [
            "last_check_timestamp"
          ],
          "decorators": []
        },
        {
          "name": "get_last_message",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n\nReturns:\n    \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0438\u043b\u0438 None",
          "line_range": [
            128,
            136
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_conversation_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u0430\n\nReturns:\n    \u0421\u0442\u0430\u0442\u0443\u0441 \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u0430 \u0441 \u043c\u0435\u0442\u0440\u0438\u043a\u0430\u043c\u0438",
          "line_range": [
            138,
            178
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "start_conversation_monitor",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430 \u043d\u043e\u0432\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439\n\nArgs:\n    callback_func: \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043d\u043e\u0432\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439\n    check_interval: \u0418\u043d\u0442\u0435\u0440\u0432\u0430\u043b \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445",
          "line_range": [
            180,
            214
          ],
          "parameters": [
            "callback_func",
            "check_interval"
          ],
          "decorators": []
        },
        {
          "name": "quick_reply",
          "docstring": "\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u043e\u0442\u0432\u0435\u0442 \u0432 Telegram",
          "line_range": [
            218,
            220
          ],
          "parameters": [
            "text"
          ],
          "decorators": []
        },
        {
          "name": "quick_status",
          "docstring": "\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            222,
            224
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "quick_notification",
          "docstring": "\u0411\u044b\u0441\u0442\u0440\u043e\u0435 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435",
          "line_range": [
            226,
            228
          ],
          "parameters": [
            "text"
          ],
          "decorators": []
        },
        {
          "name": "list_recent_messages",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f",
          "line_range": [
            230,
            243
          ],
          "parameters": [
            "count"
          ],
          "decorators": []
        },
        {
          "name": "test_integration",
          "docstring": "\u0422\u0435\u0441\u0442 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438",
          "line_range": [
            245,
            264
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "ensure_data_dir": [
          "file.write_text",
          "file.exists",
          "DATA_DIR.mkdir"
        ],
        "get_user_messages": [
          "print",
          "open",
          "json.load",
          "ensure_data_dir"
        ],
        "send_to_telegram": [
          "print",
          "time.time",
          "datetime.now",
          "len",
          "open",
          "commands.append",
          "json.dump",
          "int",
          "json.load",
          "ensure_data_dir"
        ],
        "check_new_messages": [
          "msg.get",
          "print",
          "open",
          "new_messages.append",
          "json.load",
          "ensure_data_dir"
        ],
        "get_last_message": [
          "get_user_messages"
        ],
        "show_conversation_status": [
          "print",
          "BOT_RESPONSES_FILE.exists",
          "Path",
          "datetime.now",
          "len",
          "open",
          "CURSOR_COMMANDS_FILE.exists",
          "str",
          "cmd.get",
          "USER_MESSAGES_FILE.exists",
          "json.load",
          "ensure_data_dir"
        ],
        "start_conversation_monitor": [
          "print",
          "msg.get",
          "callback_func",
          "max",
          "time.sleep",
          "datetime.now",
          "len",
          "check_new_messages",
          "ensure_data_dir"
        ],
        "quick_reply": [
          "send_to_telegram"
        ],
        "quick_status": [
          "datetime.now",
          "send_to_telegram"
        ],
        "quick_notification": [
          "send_to_telegram"
        ],
        "list_recent_messages": [
          "print",
          "msg.get",
          "get_user_messages",
          "len",
          "enumerate"
        ],
        "test_integration": [
          "print",
          "show_conversation_status",
          "send_to_telegram",
          "ensure_data_dir"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "datetime",
        "json",
        "os",
        "pathlib",
        "sys",
        "time",
        "typing"
      ],
      "hash": "04446a3f8cb898655dcd653ae04fbf701a21b54bc8c0daad23b0426ede9f9d77",
      "artifact_id": "90defff8-8e35-4283-97f9-3db563150159"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.start_simple_telegram",
      "path": ".ARCHIVE/archive/telegram_experiments/start_simple_telegram.py",
      "category": "core",
      "module_doc": "\u0421\u043a\u0440\u0438\u043f\u0442 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f Cursor \u2194 Telegram\n\u041f\u0440\u043e\u0441\u0442\u043e\u0435 \u0438 \u043d\u0430\u0434\u0435\u0436\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0431\u0435\u0437 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439",
      "functions": [
        {
          "name": "check_token",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u0430",
          "line_range": [
            14,
            23
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "check_dependencies",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439",
          "line_range": [
            25,
            34
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "start_bot",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0431\u043e\u0442\u0430",
          "line_range": [
            36,
            76
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_integration",
          "docstring": "\u0422\u0435\u0441\u0442 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438",
          "line_range": [
            78,
            87
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_status",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            89,
            112
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": [
            114,
            144
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "check_token": [
          "print",
          "os.getenv"
        ],
        "check_dependencies": [
          "print"
        ],
        "start_bot": [
          "print",
          "Path.cwd",
          "process.kill",
          "subprocess.Popen",
          "check_token",
          "check_dependencies",
          "process.wait",
          "process.terminate"
        ],
        "test_integration": [
          "print",
          "test_integration"
        ],
        "show_status": [
          "print",
          "status.get",
          "msg.get",
          "list_recent_messages",
          "show_conversation_status"
        ],
        "main": [
          "print",
          "show_status",
          "len",
          "start_bot",
          "test_integration"
        ]
      },
      "dependencies": [
        "Path",
        "cursor_simple_integration",
        "list_recent_messages",
        "os",
        "pathlib",
        "requests",
        "show_conversation_status",
        "signal",
        "subprocess",
        "sys",
        "test_integration",
        "time"
      ],
      "hash": "590b0d779db52156323cbffa5ca21910130bc09ba6314bdf37b5f43d19641c08",
      "artifact_id": "68ace648-efb2-4efb-9015-576b55d9d215"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.chat_bot_fastapi_enhanced",
      "path": ".ARCHIVE/archive/telegram_experiments/chat_bot_fastapi_enhanced.py",
      "category": "core",
      "module_doc": "\ud83d\ude80 ENHANCED Telegram Bot \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 FastAPI\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0432\u0430\u0448 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 FastAPI \u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f:\n- \u041a\u0435\u0448\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0447\u0435\u0440\u0435\u0437 WebSocket\n- \u041f\u0430\u043c\u044f\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0447\u0435\u0440\u0435\u0437 API endpoints\n- \u041c\u0435\u0442\u0440\u0438\u043a \u0447\u0435\u0440\u0435\u0437 API\n\n\u0411\u043e\u043b\u044c\u0448\u0435 \u043d\u0438\u043a\u0430\u043a\u0438\u0445 CLI \u0432\u044b\u0437\u043e\u0432\u043e\u0432 - \u0432\u0441\u0435 \u0447\u0435\u0440\u0435\u0437 API!",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": [
            342,
            378
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            35,
            43
          ],
          "parameters": [
            "self",
            "telegram_token",
            "fastapi_base_url"
          ],
          "decorators": []
        },
        {
          "name": "setup_session",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f aiohttp \u0441\u0435\u0441\u0441\u0438\u0438",
          "line_range": [
            45,
            48
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "close_session",
          "docstring": "\u0417\u0430\u043a\u0440\u044b\u0442\u0438\u0435 aiohttp \u0441\u0435\u0441\u0441\u0438\u0438",
          "line_range": [
            50,
            53
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "health_check_api",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 FastAPI \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
          "line_range": [
            55,
            69
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_user_message_via_api",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 FastAPI",
          "line_range": [
            71,
            102
          ],
          "parameters": [
            "self",
            "user_id",
            "username",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "get_user_history_via_api",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 FastAPI",
          "line_range": [
            104,
            122
          ],
          "parameters": [
            "self",
            "user_id",
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "chat_with_ollama_via_api",
          "docstring": "\u0427\u0430\u0442 \u0441 Ollama \u0447\u0435\u0440\u0435\u0437 FastAPI endpoint",
          "line_range": [
            124,
            150
          ],
          "parameters": [
            "self",
            "message",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "get_system_metrics_via_api",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0447\u0435\u0440\u0435\u0437 FastAPI",
          "line_range": [
            152,
            162
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "setup_handlers",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434",
          "line_range": [
            164,
            172
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "start_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
          "line_range": [
            174,
            198
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "memory_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /memory - \u0442\u0435\u0441\u0442 \u043f\u0430\u043c\u044f\u0442\u0438",
          "line_range": [
            200,
            207
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "history_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /history - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0438\u0441\u0442\u043e\u0440\u0438\u044e",
          "line_range": [
            209,
            228
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "health_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /health - \u0441\u0442\u0430\u0442\u0443\u0441 FastAPI",
          "line_range": [
            230,
            237
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "metrics_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /metrics - \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            239,
            269
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "ollama_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /ollama - \u0447\u0430\u0442 \u0441 Ollama",
          "line_range": [
            271,
            289
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
          "line_range": [
            291,
            321
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0431\u043e\u0442\u0430",
          "line_range": [
            323,
            340
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "FastAPIIntegratedBot",
          "docstring": "Telegram \u0431\u043e\u0442 \u0441 \u043f\u043e\u043b\u043d\u043e\u0439 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 FastAPI",
          "line_range": [
            32,
            340
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                35,
                43
              ],
              "parameters": [
                "self",
                "telegram_token",
                "fastapi_base_url"
              ]
            },
            {
              "name": "setup_session",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f aiohttp \u0441\u0435\u0441\u0441\u0438\u0438",
              "line_range": [
                45,
                48
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "close_session",
              "docstring": "\u0417\u0430\u043a\u0440\u044b\u0442\u0438\u0435 aiohttp \u0441\u0435\u0441\u0441\u0438\u0438",
              "line_range": [
                50,
                53
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "health_check_api",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 FastAPI \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
              "line_range": [
                55,
                69
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_user_message_via_api",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 FastAPI",
              "line_range": [
                71,
                102
              ],
              "parameters": [
                "self",
                "user_id",
                "username",
                "message"
              ]
            },
            {
              "name": "get_user_history_via_api",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 FastAPI",
              "line_range": [
                104,
                122
              ],
              "parameters": [
                "self",
                "user_id",
                "limit"
              ]
            },
            {
              "name": "chat_with_ollama_via_api",
              "docstring": "\u0427\u0430\u0442 \u0441 Ollama \u0447\u0435\u0440\u0435\u0437 FastAPI endpoint",
              "line_range": [
                124,
                150
              ],
              "parameters": [
                "self",
                "message",
                "context"
              ]
            },
            {
              "name": "get_system_metrics_via_api",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0447\u0435\u0440\u0435\u0437 FastAPI",
              "line_range": [
                152,
                162
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "setup_handlers",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434",
              "line_range": [
                164,
                172
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "start_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
              "line_range": [
                174,
                198
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "memory_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /memory - \u0442\u0435\u0441\u0442 \u043f\u0430\u043c\u044f\u0442\u0438",
              "line_range": [
                200,
                207
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "history_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /history - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0438\u0441\u0442\u043e\u0440\u0438\u044e",
              "line_range": [
                209,
                228
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "health_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /health - \u0441\u0442\u0430\u0442\u0443\u0441 FastAPI",
              "line_range": [
                230,
                237
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "metrics_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /metrics - \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
              "line_range": [
                239,
                269
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "ollama_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /ollama - \u0447\u0430\u0442 \u0441 Ollama",
              "line_range": [
                271,
                289
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
              "line_range": [
                291,
                321
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "run",
              "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0431\u043e\u0442\u0430",
              "line_range": [
                323,
                340
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.setup_handlers",
          "Application.builder"
        ],
        "setup_session": [
          "aiohttp.ClientSession"
        ],
        "close_session": [],
        "health_check_api": [
          "logger.info",
          "logger.error",
          "self.setup_session",
          "resp.json",
          "data.get"
        ],
        "save_user_message_via_api": [
          "logger.warning",
          "datetime.now",
          "logger.info",
          "logger.error",
          "self.setup_session"
        ],
        "get_user_history_via_api": [
          "logger.warning",
          "logger.info",
          "len",
          "logger.error",
          "self.setup_session",
          "resp.json",
          "data.get"
        ],
        "chat_with_ollama_via_api": [
          "logger.info",
          "logger.error",
          "self.setup_session",
          "resp.json",
          "str",
          "data.get"
        ],
        "get_system_metrics_via_api": [
          "self.setup_session",
          "resp.json",
          "str"
        ],
        "setup_handlers": [
          "MessageHandler",
          "CommandHandler"
        ],
        "start_command": [
          "self.save_user_message_via_api"
        ],
        "memory_command": [
          "self.save_user_message_via_api"
        ],
        "history_command": [
          "msg.get",
          "int",
          "self.get_user_history_via_api",
          "len"
        ],
        "health_command": [
          "self.health_check_api"
        ],
        "metrics_command": [
          "metrics.get",
          "features.get",
          "struct_json.get",
          "system.get",
          "self.get_system_metrics_via_api"
        ],
        "ollama_command": [
          "status_msg.edit_text",
          "self.save_user_message_via_api",
          "self.chat_with_ollama_via_api"
        ],
        "handle_message": [
          "msg.get",
          "self.get_user_history_via_api",
          "message_text.startswith",
          "message_text.replace",
          "self.save_user_message_via_api",
          "enumerate",
          "message_text.lower",
          "self.chat_with_ollama_via_api"
        ],
        "run": [
          "logger.warning",
          "self.health_check_api",
          "self.close_session",
          "logger.info",
          "logger.error"
        ],
        "main": [
          "print",
          "loop.run_until_complete",
          "traceback.print_exc",
          "loop.close",
          "asyncio.get_event_loop",
          "os.getenv",
          "asyncio.new_event_loop",
          "exit",
          "bot.run",
          "asyncio.set_event_loop",
          "FastAPIIntegratedBot"
        ]
      },
      "dependencies": [
        "Application",
        "CommandHandler",
        "ContextTypes",
        "MessageHandler",
        "Update",
        "aiohttp",
        "asyncio",
        "datetime",
        "filters",
        "json",
        "logging",
        "os",
        "telegram",
        "telegram.ext",
        "timedelta",
        "traceback",
        "websockets"
      ],
      "hash": "2d784c31ffb3b457a948a478c57ba5239a84da269ff97e7a31d3771fe3f87e00",
      "artifact_id": "116e36da-5264-4b6e-8f65-e94bfd6c0fef"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.chat_bot_enhanced",
      "path": ".ARCHIVE/archive/telegram_bots/chat_bot_enhanced.py",
      "category": "core",
      "module_doc": "Enhanced LLMStruct Telegram Bot\n- Smart reply detection (reply_to_message support)\n- LLM chain: Ollama \u2192 Grok \u2192 Anthropic\n- Cursor command forwarding to Cursor AI\n- Concise responses by default",
      "functions": [
        {
          "name": "main",
          "docstring": "Main entry point",
          "line_range": [
            439,
            459
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            37,
            68
          ],
          "parameters": [
            "self",
            "token"
          ],
          "decorators": []
        },
        {
          "name": "log_user_message",
          "docstring": "Log user message with reply context",
          "line_range": [
            70,
            83
          ],
          "parameters": [
            "self",
            "user_info",
            "message",
            "message_type",
            "chat_id",
            "reply_to_message"
          ],
          "decorators": []
        },
        {
          "name": "log_cursor_command",
          "docstring": "Log cursor command for processing",
          "line_range": [
            85,
            95
          ],
          "parameters": [
            "self",
            "message",
            "user_info",
            "reply_context"
          ],
          "decorators": []
        },
        {
          "name": "ollama_chat",
          "docstring": "Try Ollama first",
          "line_range": [
            97,
            114
          ],
          "parameters": [
            "self",
            "message",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "grok_chat",
          "docstring": "Fallback to Grok",
          "line_range": [
            116,
            143
          ],
          "parameters": [
            "self",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "anthropic_chat",
          "docstring": "Final fallback to Anthropic",
          "line_range": [
            145,
            173
          ],
          "parameters": [
            "self",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "llm_chain_response",
          "docstring": "LLM chain: Ollama \u2192 Grok \u2192 Anthropic",
          "line_range": [
            175,
            194
          ],
          "parameters": [
            "self",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "setup_handlers",
          "docstring": "Setup bot handlers",
          "line_range": [
            196,
            208
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "start_command",
          "docstring": "Start command handler",
          "line_range": [
            210,
            236
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "help_command",
          "docstring": "Help command",
          "line_range": [
            238,
            260
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "status_command",
          "docstring": "Status command",
          "line_range": [
            262,
            287
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "Handle all text messages with smart routing",
          "line_range": [
            289,
            368
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "run_sync",
          "docstring": "Run bot synchronously with timeout",
          "line_range": [
            370,
            437
          ],
          "parameters": [
            "self",
            "timeout_minutes"
          ],
          "decorators": []
        },
        {
          "name": "signal_handler",
          "docstring": "",
          "line_range": [
            374,
            377
          ],
          "parameters": [
            "signum",
            "frame"
          ],
          "decorators": []
        },
        {
          "name": "run_with_timeout",
          "docstring": "",
          "line_range": [
            396,
            413
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "EnhancedLLMStructChatBot",
          "docstring": "Enhanced Telegram bot with LLM chain and smart reply detection",
          "line_range": [
            34,
            437
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                37,
                68
              ],
              "parameters": [
                "self",
                "token"
              ]
            },
            {
              "name": "log_user_message",
              "docstring": "Log user message with reply context",
              "line_range": [
                70,
                83
              ],
              "parameters": [
                "self",
                "user_info",
                "message",
                "message_type",
                "chat_id",
                "reply_to_message"
              ]
            },
            {
              "name": "log_cursor_command",
              "docstring": "Log cursor command for processing",
              "line_range": [
                85,
                95
              ],
              "parameters": [
                "self",
                "message",
                "user_info",
                "reply_context"
              ]
            },
            {
              "name": "ollama_chat",
              "docstring": "Try Ollama first",
              "line_range": [
                97,
                114
              ],
              "parameters": [
                "self",
                "message",
                "model"
              ]
            },
            {
              "name": "grok_chat",
              "docstring": "Fallback to Grok",
              "line_range": [
                116,
                143
              ],
              "parameters": [
                "self",
                "message"
              ]
            },
            {
              "name": "anthropic_chat",
              "docstring": "Final fallback to Anthropic",
              "line_range": [
                145,
                173
              ],
              "parameters": [
                "self",
                "message"
              ]
            },
            {
              "name": "llm_chain_response",
              "docstring": "LLM chain: Ollama \u2192 Grok \u2192 Anthropic",
              "line_range": [
                175,
                194
              ],
              "parameters": [
                "self",
                "message"
              ]
            },
            {
              "name": "setup_handlers",
              "docstring": "Setup bot handlers",
              "line_range": [
                196,
                208
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "start_command",
              "docstring": "Start command handler",
              "line_range": [
                210,
                236
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "help_command",
              "docstring": "Help command",
              "line_range": [
                238,
                260
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "status_command",
              "docstring": "Status command",
              "line_range": [
                262,
                287
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "Handle all text messages with smart routing",
              "line_range": [
                289,
                368
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "run_sync",
              "docstring": "Run bot synchronously with timeout",
              "line_range": [
                370,
                437
              ],
              "parameters": [
                "self",
                "timeout_minutes"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Bot",
          "os.getenv",
          "logging.getLogger",
          "track_workflow_event",
          "os.makedirs",
          "logging.basicConfig",
          "get_metrics_tracker"
        ],
        "log_user_message": [
          "user_info.get",
          "datetime.now",
          "f.write",
          "reply_to_message.get",
          "open"
        ],
        "log_cursor_command": [
          "user_info.get",
          "datetime.now",
          "f.write",
          "open"
        ],
        "ollama_chat": [
          "httpx.AsyncClient",
          "client.post",
          "response.json",
          "result.get"
        ],
        "grok_chat": [
          "httpx.AsyncClient",
          "client.post",
          "response.json"
        ],
        "anthropic_chat": [
          "httpx.AsyncClient",
          "client.post",
          "response.json"
        ],
        "llm_chain_response": [
          "self.grok_chat",
          "self.anthropic_chat",
          "self.ollama_chat"
        ],
        "setup_handlers": [
          "MessageHandler",
          "Application.builder",
          "CommandHandler"
        ],
        "start_command": [],
        "help_command": [],
        "status_command": [
          "status_parts.append",
          "len",
          "httpx.AsyncClient",
          "response.json",
          "client.get"
        ],
        "handle_message": [
          "user.to_dict",
          "time.time",
          "self.log_user_message",
          "self.log_cursor_command",
          "self.llm_chain_response",
          "reply_to_message.get",
          "text.lower",
          "track_workflow_event",
          "len",
          "message.reply_text",
          "track_token_usage",
          "track_task_complete",
          "track_task_start",
          "int",
          "cursor_message.split",
          "text.split",
          "response.split"
        ],
        "run_sync": [],
        "signal_handler": [],
        "run_with_timeout": [
          "time.time",
          "application.stop",
          "application.shutdown",
          "application.start",
          "asyncio.sleep",
          "application.initialize"
        ],
        "main": [
          "print",
          "argparse.ArgumentParser",
          "bot.run_sync",
          "os.getenv",
          "parser.parse_args",
          "EnhancedLLMStructChatBot",
          "parser.add_argument"
        ]
      },
      "dependencies": [
        "Any",
        "Application",
        "Bot",
        "CommandHandler",
        "ContextTypes",
        "Dict",
        "MessageHandler",
        "Optional",
        "Update",
        "argparse",
        "asyncio",
        "datetime",
        "filters",
        "get_metrics_tracker",
        "httpx",
        "json",
        "logging",
        "os",
        "signal",
        "src.llmstruct.metrics_tracker",
        "sys",
        "telegram",
        "telegram.ext",
        "time",
        "traceback",
        "track_task_complete",
        "track_task_start",
        "track_token_usage",
        "track_workflow_event",
        "typing"
      ],
      "hash": "3a872dfe3e25b24fba9d787e81f5f2d31c5cebc7150b068194cc33cf49f3b9c4",
      "artifact_id": "c07858a6-6da3-42d8-a739-c4090c191e8f"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.cursor_telegram_bridge",
      "path": ".ARCHIVE/archive/telegram_bots/cursor_telegram_bridge.py",
      "category": "core",
      "module_doc": "Cursor \u2194 Telegram Bridge\n\u0427\u0438\u0442\u0430\u0435\u0442 cursor \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0442\u0432\u0435\u0442\u044b \u043e\u0431\u0440\u0430\u0442\u043d\u043e \u0432 Telegram",
      "functions": [
        {
          "name": "main",
          "docstring": "Main entry point",
          "line_range": [
            218,
            226
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            24,
            36
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "send_telegram_message",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 Telegram",
          "line_range": [
            38,
            62
          ],
          "parameters": [
            "self",
            "text",
            "parse_mode"
          ],
          "decorators": []
        },
        {
          "name": "process_cursor_command",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c cursor \u043a\u043e\u043c\u0430\u043d\u0434\u0443",
          "line_range": [
            64,
            85
          ],
          "parameters": [
            "self",
            "command_data"
          ],
          "decorators": []
        },
        {
          "name": "simulate_cursor_processing",
          "docstring": "\u0421\u0438\u043c\u0443\u043b\u044f\u0446\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043a\u043e\u043c\u0430\u043d\u0434s Cursor AI",
          "line_range": [
            87,
            175
          ],
          "parameters": [
            "self",
            "command",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "handle_cursor_command",
          "docstring": "Handle cursor command (sync wrapper)",
          "line_range": [
            177,
            188
          ],
          "parameters": [
            "self",
            "command_data"
          ],
          "decorators": []
        },
        {
          "name": "start_bridge",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c bridge",
          "line_range": [
            190,
            216
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CursorTelegramBridge",
          "docstring": "Bridge \u043c\u0435\u0436\u0434\u0443 cursor \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c\u0438 \u0438 Telegram \u043e\u0442\u0432\u0435\u0442\u0430\u043c\u0438",
          "line_range": [
            21,
            216
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                24,
                36
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "send_telegram_message",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 Telegram",
              "line_range": [
                38,
                62
              ],
              "parameters": [
                "self",
                "text",
                "parse_mode"
              ]
            },
            {
              "name": "process_cursor_command",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c cursor \u043a\u043e\u043c\u0430\u043d\u0434\u0443",
              "line_range": [
                64,
                85
              ],
              "parameters": [
                "self",
                "command_data"
              ]
            },
            {
              "name": "simulate_cursor_processing",
              "docstring": "\u0421\u0438\u043c\u0443\u043b\u044f\u0446\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043a\u043e\u043c\u0430\u043d\u0434s Cursor AI",
              "line_range": [
                87,
                175
              ],
              "parameters": [
                "self",
                "command",
                "context"
              ]
            },
            {
              "name": "handle_cursor_command",
              "docstring": "Handle cursor command (sync wrapper)",
              "line_range": [
                177,
                188
              ],
              "parameters": [
                "self",
                "command_data"
              ]
            },
            {
              "name": "start_bridge",
              "docstring": "\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c bridge",
              "line_range": [
                190,
                216
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "os.getenv",
          "EnhancedCursorTelegramReader"
        ],
        "send_telegram_message": [
          "print",
          "client.post",
          "httpx.AsyncClient"
        ],
        "process_cursor_command": [
          "print",
          "self.send_telegram_message",
          "self.simulate_cursor_processing",
          "command_data.get",
          "result.get"
        ],
        "simulate_cursor_processing": [
          "any",
          "command.lower",
          "len",
          "asyncio.sleep"
        ],
        "handle_cursor_command": [
          "print",
          "asyncio.run",
          "self.process_cursor_command"
        ],
        "start_bridge": [
          "print",
          "asyncio.run",
          "self.send_telegram_message"
        ],
        "main": [
          "print",
          "CursorTelegramBridge",
          "os.getenv",
          "bridge.start_bridge"
        ]
      },
      "dependencies": [
        "Dict",
        "EnhancedCursorTelegramReader",
        "Optional",
        "asyncio",
        "cursor_telegram_reader_enhanced",
        "datetime",
        "httpx",
        "json",
        "os",
        "sys",
        "time",
        "typing"
      ],
      "hash": "a1a7b9b8ecce3edc8152f4314ccdc915078ba6990892366c6072abd40a1695a0",
      "artifact_id": "841d6143-2d73-487b-a9d0-51dc6b44cd92"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.start_ollama_bot",
      "path": ".ARCHIVE/archive/telegram_bots/start_ollama_bot.py",
      "category": "core",
      "module_doc": "Quick launcher for Ollama Chat Bot",
      "functions": [
        {
          "name": "check_dependencies",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438",
          "line_range": [
            11,
            25
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "check_services",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u044c \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432",
          "line_range": [
            27,
            65
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": [
            67,
            118
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "check_ollama",
          "docstring": "",
          "line_range": [
            36,
            51
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "check_dependencies": [
          "print",
          "__import__"
        ],
        "check_services": [
          "print"
        ],
        "check_ollama": [
          "print",
          "len",
          "httpx.AsyncClient",
          "response.json",
          "client.get"
        ],
        "main": [
          "print",
          "Path",
          "check_services",
          "Path.cwd",
          "os.getenv",
          "check_dependencies",
          "subprocess.run"
        ]
      },
      "dependencies": [
        "Path",
        "asyncio",
        "httpx",
        "os",
        "pathlib",
        "subprocess",
        "sys"
      ],
      "hash": "a762f7c21608f31a941b77c0dfe6cd6c78ecc92fd0c7272da9b2dc5d39b41ded",
      "artifact_id": "a1db581b-cf75-41ff-bd55-81f4ce163fa1"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.ollama_chat_bot",
      "path": ".ARCHIVE/archive/telegram_bots/ollama_chat_bot.py",
      "category": "core",
      "module_doc": "LLMStruct Ollama Chat Bot\n\u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0439 \u0431\u043e\u0442 \u0441 \u041e\u043b\u043b\u0430\u043c\u043e\u0439, fallback \u043d\u0430 \u0413\u0440\u043e\u043a/\u0410\u043d\u0442\u0440\u043e\u043f\u0438\u043a, \u043f\u0430\u043c\u044f\u0442\u044c\u044e \u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u043e\u043c \u043a \u0444\u0430\u0439\u043b\u0430\u043c",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0422\u043e\u0447\u043a\u0430 \u0432\u0445\u043e\u0434\u0430",
          "line_range": [
            646,
            668
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            53,
            57
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "chat_with_ollama",
          "docstring": "\u041e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441 Ollama",
          "line_range": [
            59,
            83
          ],
          "parameters": [
            "self",
            "messages",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "chat_with_grok",
          "docstring": "Fallback \u043d\u0430 Grok",
          "line_range": [
            85,
            110
          ],
          "parameters": [
            "self",
            "messages"
          ],
          "decorators": []
        },
        {
          "name": "chat_with_anthropic",
          "docstring": "Fallback \u043d\u0430 Anthropic",
          "line_range": [
            112,
            153
          ],
          "parameters": [
            "self",
            "messages"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            158,
            159
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "read_file",
          "docstring": "\u0427\u0438\u0442\u0430\u0435\u0442 \u0444\u0430\u0439\u043b \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e",
          "line_range": [
            161,
            189
          ],
          "parameters": [
            "self",
            "file_path",
            "max_lines"
          ],
          "decorators": []
        },
        {
          "name": "list_directory",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438",
          "line_range": [
            191,
            223
          ],
          "parameters": [
            "self",
            "dir_path"
          ],
          "decorators": []
        },
        {
          "name": "run_cli_command",
          "docstring": "\u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 CLI \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            225,
            269
          ],
          "parameters": [
            "self",
            "command"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            274,
            284
          ],
          "parameters": [
            "self",
            "storage_dir"
          ],
          "decorators": []
        },
        {
          "name": "_load_data",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0444\u0430\u0439\u043b\u043e\u0432",
          "line_range": [
            286,
            315
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_data",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435",
          "line_range": [
            317,
            341
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_or_create_session",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0438\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0441\u0435\u0441\u0441\u0438\u044e",
          "line_range": [
            343,
            360
          ],
          "parameters": [
            "self",
            "chat_id",
            "user_id",
            "user_name"
          ],
          "decorators": []
        },
        {
          "name": "add_message",
          "docstring": "\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 \u0441\u0435\u0441\u0441\u0438\u044e",
          "line_range": [
            362,
            380
          ],
          "parameters": [
            "self",
            "session",
            "role",
            "content",
            "model_used"
          ],
          "decorators": []
        },
        {
          "name": "get_conversation_context",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u0430 \u0434\u043b\u044f LLM",
          "line_range": [
            382,
            394
          ],
          "parameters": [
            "self",
            "session",
            "max_messages"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            399,
            408
          ],
          "parameters": [
            "self",
            "bot_token"
          ],
          "decorators": []
        },
        {
          "name": "send_message",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 Telegram",
          "line_range": [
            410,
            420
          ],
          "parameters": [
            "self",
            "chat_id",
            "text",
            "parse_mode"
          ],
          "decorators": []
        },
        {
          "name": "_send_single_message",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0434\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435",
          "line_range": [
            422,
            438
          ],
          "parameters": [
            "self",
            "chat_id",
            "text",
            "parse_mode"
          ],
          "decorators": []
        },
        {
          "name": "get_updates",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u0442 Telegram",
          "line_range": [
            440,
            455
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "send_task_report",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0442\u0447\u0435\u0442 \u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0447\u0430\u0442 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430",
          "line_range": [
            457,
            472
          ],
          "parameters": [
            "self",
            "task_description",
            "status",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "chat_with_ai",
          "docstring": "\u041e\u0431\u0449\u0430\u0435\u0442\u0441\u044f \u0441 AI (Ollama + fallback)",
          "line_range": [
            474,
            506
          ],
          "parameters": [
            "self",
            "session",
            "user_message"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435",
          "line_range": [
            508,
            621
          ],
          "parameters": [
            "self",
            "update"
          ],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0446\u0438\u043a\u043b \u0431\u043e\u0442\u0430",
          "line_range": [
            623,
            644
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ChatMessage",
          "docstring": "",
          "line_range": [
            31,
            36
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ChatSession",
          "docstring": "",
          "line_range": [
            39,
            48
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ModelManager",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 LLM \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430\u043c\u0438",
          "line_range": [
            50,
            153
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                53,
                57
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "chat_with_ollama",
              "docstring": "\u041e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441 Ollama",
              "line_range": [
                59,
                83
              ],
              "parameters": [
                "self",
                "messages",
                "model"
              ]
            },
            {
              "name": "chat_with_grok",
              "docstring": "Fallback \u043d\u0430 Grok",
              "line_range": [
                85,
                110
              ],
              "parameters": [
                "self",
                "messages"
              ]
            },
            {
              "name": "chat_with_anthropic",
              "docstring": "Fallback \u043d\u0430 Anthropic",
              "line_range": [
                112,
                153
              ],
              "parameters": [
                "self",
                "messages"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "FileManager",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u043e\u043c \u043a \u0444\u0430\u0439\u043b\u0430\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0447\u0435\u0440\u0435\u0437 CLI",
          "line_range": [
            155,
            269
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                158,
                159
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "read_file",
              "docstring": "\u0427\u0438\u0442\u0430\u0435\u0442 \u0444\u0430\u0439\u043b \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e",
              "line_range": [
                161,
                189
              ],
              "parameters": [
                "self",
                "file_path",
                "max_lines"
              ]
            },
            {
              "name": "list_directory",
              "docstring": "\u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438",
              "line_range": [
                191,
                223
              ],
              "parameters": [
                "self",
                "dir_path"
              ]
            },
            {
              "name": "run_cli_command",
              "docstring": "\u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 CLI \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
              "line_range": [
                225,
                269
              ],
              "parameters": [
                "self",
                "command"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "MemoryManager",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u0430\u043c\u044f\u0442\u044c\u044e \u0438 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043e\u043c \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u043e\u0432",
          "line_range": [
            271,
            394
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                274,
                284
              ],
              "parameters": [
                "self",
                "storage_dir"
              ]
            },
            {
              "name": "_load_data",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0444\u0430\u0439\u043b\u043e\u0432",
              "line_range": [
                286,
                315
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_data",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435",
              "line_range": [
                317,
                341
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_or_create_session",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0438\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0441\u0435\u0441\u0441\u0438\u044e",
              "line_range": [
                343,
                360
              ],
              "parameters": [
                "self",
                "chat_id",
                "user_id",
                "user_name"
              ]
            },
            {
              "name": "add_message",
              "docstring": "\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 \u0441\u0435\u0441\u0441\u0438\u044e",
              "line_range": [
                362,
                380
              ],
              "parameters": [
                "self",
                "session",
                "role",
                "content",
                "model_used"
              ]
            },
            {
              "name": "get_conversation_context",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u0430 \u0434\u043b\u044f LLM",
              "line_range": [
                382,
                394
              ],
              "parameters": [
                "self",
                "session",
                "max_messages"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "OllamaChatBot",
          "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043a\u043b\u0430\u0441\u0441 Telegram \u0431\u043e\u0442\u0430",
          "line_range": [
            396,
            644
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                399,
                408
              ],
              "parameters": [
                "self",
                "bot_token"
              ]
            },
            {
              "name": "send_message",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 Telegram",
              "line_range": [
                410,
                420
              ],
              "parameters": [
                "self",
                "chat_id",
                "text",
                "parse_mode"
              ]
            },
            {
              "name": "_send_single_message",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0434\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435",
              "line_range": [
                422,
                438
              ],
              "parameters": [
                "self",
                "chat_id",
                "text",
                "parse_mode"
              ]
            },
            {
              "name": "get_updates",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u0442 Telegram",
              "line_range": [
                440,
                455
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "send_task_report",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0442\u0447\u0435\u0442 \u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0447\u0430\u0442 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430",
              "line_range": [
                457,
                472
              ],
              "parameters": [
                "self",
                "task_description",
                "status",
                "details"
              ]
            },
            {
              "name": "chat_with_ai",
              "docstring": "\u041e\u0431\u0449\u0430\u0435\u0442\u0441\u044f \u0441 AI (Ollama + fallback)",
              "line_range": [
                474,
                506
              ],
              "parameters": [
                "self",
                "session",
                "user_message"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435",
              "line_range": [
                508,
                621
              ],
              "parameters": [
                "self",
                "update"
              ]
            },
            {
              "name": "run",
              "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0446\u0438\u043a\u043b \u0431\u043e\u0442\u0430",
              "line_range": [
                623,
                644
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "MemoryManager",
          "FileManager",
          "ModelManager",
          "logger.info"
        ],
        "chat_with_ollama": [
          "client.post",
          "logger.error",
          "httpx.AsyncClient",
          "response.json",
          "result.get"
        ],
        "chat_with_grok": [
          "httpx.AsyncClient",
          "client.post",
          "response.json",
          "logger.error"
        ],
        "chat_with_anthropic": [
          "client.post",
          "logger.error",
          "httpx.AsyncClient",
          "response.json",
          "user_messages.append"
        ],
        "read_file": [
          "f.readlines",
          "full_path.exists",
          "len",
          "full_path.is_dir",
          "open",
          "str"
        ],
        "list_directory": [
          "items.append",
          "item.stat",
          "full_path.exists",
          "len",
          "full_path.is_dir",
          "item.is_dir",
          "sorted",
          "str",
          "full_path.iterdir"
        ],
        "run_cli_command": [
          "safe_commands.keys",
          "len",
          "command.split",
          "str",
          "subprocess.run"
        ],
        "_load_data": [
          "ChatSession",
          "logger.info",
          "len",
          "session_data.get",
          "ChatMessage",
          "open",
          "logger.error",
          "json.load",
          "data.values"
        ],
        "_save_data": [
          "json.dump",
          "asdict",
          "logger.error",
          "open"
        ],
        "get_or_create_session": [
          "ChatSession",
          "datetime.now"
        ],
        "add_message": [
          "datetime.now",
          "len",
          "self._save_data",
          "ChatMessage"
        ],
        "get_conversation_context": [
          "context.append"
        ],
        "send_message": [
          "range",
          "enumerate",
          "len",
          "self._send_single_message"
        ],
        "_send_single_message": [
          "httpx.AsyncClient",
          "client.post",
          "response.json",
          "logger.error"
        ],
        "get_updates": [
          "httpx.AsyncClient",
          "response.json",
          "client.get",
          "logger.error"
        ],
        "send_task_report": [
          "datetime.now",
          "logger.info",
          "self.send_message"
        ],
        "chat_with_ai": [
          "logger.info",
          "context.append"
        ],
        "handle_message": [
          "logger.info",
          "self.send_message",
          "len",
          "text.startswith",
          "self.chat_with_ai",
          "message.get",
          "update.get"
        ],
        "run": [
          "self.get_updates",
          "logger.info",
          "logger.error",
          "asyncio.sleep",
          "updates.get",
          "self.handle_message"
        ],
        "main": [
          "print",
          "Path",
          "os.getenv",
          "bot.run",
          "bot.send_task_report",
          "OllamaChatBot"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "asdict",
        "asyncio",
        "dataclass",
        "dataclasses",
        "datetime",
        "httpx",
        "json",
        "logging",
        "os",
        "pathlib",
        "subprocess",
        "time",
        "typing"
      ],
      "hash": "42302cb149d3c31991da69d0ea97038a1ce7fe06d9bacff7cca7aef1e7bcfa6a",
      "artifact_id": "8e341981-8b4e-4090-a779-b08a86350af1"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.demo_bot_features",
      "path": ".ARCHIVE/archive/telegram_bots/demo_bot_features.py",
      "category": "core",
      "module_doc": "\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 Ollama Chat Bot",
      "functions": [
        {
          "name": "demo_task_reporting",
          "docstring": "\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043e\u0442\u0447\u0435\u0442\u043e\u0432",
          "line_range": [
            9,
            57
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_bot_commands",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043a\u043e\u043c\u0430\u043d\u0434 \u0431\u043e\u0442\u0430",
          "line_range": [
            59,
            78
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_architecture",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0443 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            80,
            106
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u0438",
          "line_range": [
            108,
            125
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "demo_task_reporting": [
          "print",
          "time.sleep",
          "report_completed",
          "report_progress",
          "report_started"
        ],
        "show_bot_commands": [
          "print"
        ],
        "show_architecture": [
          "print"
        ],
        "main": [
          "print",
          "show_architecture",
          "show_bot_commands",
          "demo_task_reporting"
        ]
      },
      "dependencies": [
        "cursor_reporter",
        "report_completed",
        "report_progress",
        "report_started",
        "time"
      ],
      "hash": "53b0987c15df1a4f08525ac0fecf8b8b96bf481b527f1fdd92d05cc3ba890425",
      "artifact_id": "20120ea2-a5f8-4eec-a18e-11f4f04a89a9"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.cursor_reporter",
      "path": ".ARCHIVE/archive/telegram_bots/cursor_reporter.py",
      "category": "core",
      "module_doc": "Cursor Task Reporter\n\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u043e\u0442\u0447\u0435\u0442\u043e\u0432 \u043e \u0437\u0430\u0434\u0430\u0447\u0430\u0445 \u0432 Telegram",
      "functions": [
        {
          "name": "report_task_started",
          "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e \u043d\u0430\u0447\u0430\u043b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            93,
            96
          ],
          "parameters": [
            "task",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "report_task_progress",
          "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0435 \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            98,
            101
          ],
          "parameters": [
            "task",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "report_task_completed",
          "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            103,
            106
          ],
          "parameters": [
            "task",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "report_task_failed",
          "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e\u0431 \u043e\u0448\u0438\u0431\u043a\u0435 \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            108,
            111
          ],
          "parameters": [
            "task",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "report_started",
          "docstring": "\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f - \u043e\u0442\u0447\u0435\u0442 \u043e \u043d\u0430\u0447\u0430\u043b\u0435",
          "line_range": [
            114,
            116
          ],
          "parameters": [
            "task",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "report_progress",
          "docstring": "\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f - \u043e\u0442\u0447\u0435\u0442 \u043e \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0435",
          "line_range": [
            118,
            120
          ],
          "parameters": [
            "task",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "report_completed",
          "docstring": "\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f - \u043e\u0442\u0447\u0435\u0442 \u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0438",
          "line_range": [
            122,
            124
          ],
          "parameters": [
            "task",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "report_failed",
          "docstring": "\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f - \u043e\u0442\u0447\u0435\u0442 \u043e\u0431 \u043e\u0448\u0438\u0431\u043a\u0435",
          "line_range": [
            126,
            128
          ],
          "parameters": [
            "task",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            16,
            21
          ],
          "parameters": [
            "self",
            "bot_token",
            "chat_id"
          ],
          "decorators": []
        },
        {
          "name": "send_report",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0442\u0447\u0435\u0442 \u043e \u0437\u0430\u0434\u0430\u0447\u0435",
          "line_range": [
            23,
            90
          ],
          "parameters": [
            "self",
            "task",
            "status",
            "details",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "escape_markdown",
          "docstring": "\u042d\u043a\u0440\u0430\u043d\u0438\u0440\u0443\u0435\u0442 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b Markdown",
          "line_range": [
            48,
            53
          ],
          "parameters": [
            "text"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CursorReporter",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0442\u0447\u0435\u0442\u044b \u043e \u0437\u0430\u0434\u0430\u0447\u0430\u0445 \u0432 Telegram",
          "line_range": [
            13,
            90
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                16,
                21
              ],
              "parameters": [
                "self",
                "bot_token",
                "chat_id"
              ]
            },
            {
              "name": "send_report",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0442\u0447\u0435\u0442 \u043e \u0437\u0430\u0434\u0430\u0447\u0435",
              "line_range": [
                23,
                90
              ],
              "parameters": [
                "self",
                "task",
                "status",
                "details",
                "priority"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "os.getenv",
          "ValueError"
        ],
        "send_report": [
          "priority.lower",
          "priority_emojis.get",
          "status.lower",
          "status_emojis.get"
        ],
        "escape_markdown": [
          "text.replace"
        ],
        "report_task_started": [
          "CursorReporter",
          "reporter.send_report"
        ],
        "report_task_progress": [
          "CursorReporter",
          "reporter.send_report"
        ],
        "report_task_completed": [
          "CursorReporter",
          "reporter.send_report"
        ],
        "report_task_failed": [
          "CursorReporter",
          "reporter.send_report"
        ],
        "report_started": [
          "asyncio.run",
          "report_task_started"
        ],
        "report_progress": [
          "asyncio.run",
          "report_task_progress"
        ],
        "report_completed": [
          "asyncio.run",
          "report_task_completed"
        ],
        "report_failed": [
          "asyncio.run",
          "report_task_failed"
        ]
      },
      "dependencies": [
        "Optional",
        "asyncio",
        "datetime",
        "httpx",
        "os",
        "typing"
      ],
      "hash": "ef9ad35864b57cc864efdf8f30042d658fcae926742fb02b0fdb0316176c5aa9",
      "artifact_id": "fab82627-554e-4381-87ff-88bc26b41163"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.ollama_api_bot",
      "path": ".ARCHIVE/archive/telegram_bots/ollama_api_bot.py",
      "category": "core",
      "module_doc": "Ollama Chat Bot \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0439 FastAPI API \u0432\u043c\u0435\u0441\u0442\u043e CLI\n\u0411\u043e\u043b\u0435\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0439 API \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043e\u0439",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": [
            468,
            487
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            50,
            52
          ],
          "parameters": [
            "self",
            "api_base_url"
          ],
          "decorators": []
        },
        {
          "name": "__aenter__",
          "docstring": "",
          "line_range": [
            54,
            56
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__aexit__",
          "docstring": "",
          "line_range": [
            58,
            60
          ],
          "parameters": [
            "self",
            "exc_type",
            "exc_val",
            "exc_tb"
          ],
          "decorators": []
        },
        {
          "name": "health_check",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0437\u0434\u043e\u0440\u043e\u0432\u044c\u044f API",
          "line_range": [
            62,
            65
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "system_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            67,
            70
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "chat_message",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 \u0447\u0430\u0442 \u0447\u0435\u0440\u0435\u0437 API",
          "line_range": [
            72,
            80
          ],
          "parameters": [
            "self",
            "message",
            "context_mode",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "execute_cli_command",
          "docstring": "\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 CLI \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0447\u0435\u0440\u0435\u0437 API",
          "line_range": [
            82,
            89
          ],
          "parameters": [
            "self",
            "command",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "get_metrics",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a",
          "line_range": [
            91,
            94
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            99,
            101
          ],
          "parameters": [
            "self",
            "api_client"
          ],
          "decorators": []
        },
        {
          "name": "chat_with_ollama",
          "docstring": "\u041e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441 Ollama \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u044f\u043c\u043e\u0439 API",
          "line_range": [
            103,
            121
          ],
          "parameters": [
            "self",
            "messages",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "chat_with_api_fallback",
          "docstring": "Fallback \u0447\u0435\u0440\u0435\u0437 FastAPI \u0447\u0430\u0442",
          "line_range": [
            123,
            130
          ],
          "parameters": [
            "self",
            "message",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            135,
            137
          ],
          "parameters": [
            "self",
            "api_client"
          ],
          "decorators": []
        },
        {
          "name": "read_file",
          "docstring": "\u0427\u0442\u0435\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430 \u0447\u0435\u0440\u0435\u0437 API \u043a\u043e\u043c\u0430\u043d\u0434\u044b",
          "line_range": [
            139,
            147
          ],
          "parameters": [
            "self",
            "file_path",
            "max_lines"
          ],
          "decorators": []
        },
        {
          "name": "get_system_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            149,
            162
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            167,
            175
          ],
          "parameters": [
            "self",
            "storage_dir",
            "api_client"
          ],
          "decorators": []
        },
        {
          "name": "_load_data",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0441\u0435\u0441\u0441\u0438\u0439 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            177,
            189
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_data",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0435\u0441\u0441\u0438\u0439 \u0432 \u0444\u0430\u0439\u043b",
          "line_range": [
            191,
            208
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_or_create_session",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0435\u0441\u0441\u0438\u0438",
          "line_range": [
            210,
            227
          ],
          "parameters": [
            "self",
            "chat_id",
            "user_id",
            "user_name"
          ],
          "decorators": []
        },
        {
          "name": "add_message",
          "docstring": "\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 \u0441\u0435\u0441\u0441\u0438\u044e",
          "line_range": [
            229,
            246
          ],
          "parameters": [
            "self",
            "session",
            "role",
            "content",
            "model_used"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            251,
            264
          ],
          "parameters": [
            "self",
            "bot_token",
            "api_base_url"
          ],
          "decorators": []
        },
        {
          "name": "_signal_handler",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0441\u0438\u0433\u043d\u0430\u043b\u043e\u0432 \u0434\u043b\u044f graceful shutdown",
          "line_range": [
            266,
            269
          ],
          "parameters": [
            "self",
            "signum",
            "frame"
          ],
          "decorators": []
        },
        {
          "name": "send_message",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 Telegram",
          "line_range": [
            271,
            284
          ],
          "parameters": [
            "self",
            "chat_id",
            "text",
            "parse_mode"
          ],
          "decorators": []
        },
        {
          "name": "get_updates",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439 \u043e\u0442 Telegram",
          "line_range": [
            286,
            295
          ],
          "parameters": [
            "self",
            "offset"
          ],
          "decorators": []
        },
        {
          "name": "chat_with_ai",
          "docstring": "\u041e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441 AI \u0447\u0435\u0440\u0435\u0437 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 API",
          "line_range": [
            297,
            321
          ],
          "parameters": [
            "self",
            "session",
            "user_message"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f",
          "line_range": [
            323,
            361
          ],
          "parameters": [
            "self",
            "update"
          ],
          "decorators": []
        },
        {
          "name": "handle_command",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434 \u0431\u043e\u0442\u0430",
          "line_range": [
            363,
            431
          ],
          "parameters": [
            "self",
            "chat_id",
            "command",
            "session"
          ],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0431\u043e\u0442\u0430",
          "line_range": [
            433,
            466
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ChatMessage",
          "docstring": "",
          "line_range": [
            28,
            33
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ChatSession",
          "docstring": "",
          "line_range": [
            36,
            45
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "APIClient",
          "docstring": "\u041a\u043b\u0438\u0435\u043d\u0442 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 FastAPI \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c",
          "line_range": [
            47,
            94
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                50,
                52
              ],
              "parameters": [
                "self",
                "api_base_url"
              ]
            },
            {
              "name": "__aenter__",
              "docstring": "",
              "line_range": [
                54,
                56
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "__aexit__",
              "docstring": "",
              "line_range": [
                58,
                60
              ],
              "parameters": [
                "self",
                "exc_type",
                "exc_val",
                "exc_tb"
              ]
            },
            {
              "name": "health_check",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0437\u0434\u043e\u0440\u043e\u0432\u044c\u044f API",
              "line_range": [
                62,
                65
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "system_status",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
              "line_range": [
                67,
                70
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "chat_message",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 \u0447\u0430\u0442 \u0447\u0435\u0440\u0435\u0437 API",
              "line_range": [
                72,
                80
              ],
              "parameters": [
                "self",
                "message",
                "context_mode",
                "session_id"
              ]
            },
            {
              "name": "execute_cli_command",
              "docstring": "\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 CLI \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0447\u0435\u0440\u0435\u0437 API",
              "line_range": [
                82,
                89
              ],
              "parameters": [
                "self",
                "command",
                "args"
              ]
            },
            {
              "name": "get_metrics",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a",
              "line_range": [
                91,
                94
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "ModelManager",
          "docstring": "\u041c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 LLM \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0441 API \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439",
          "line_range": [
            96,
            130
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                99,
                101
              ],
              "parameters": [
                "self",
                "api_client"
              ]
            },
            {
              "name": "chat_with_ollama",
              "docstring": "\u041e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441 Ollama \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u044f\u043c\u043e\u0439 API",
              "line_range": [
                103,
                121
              ],
              "parameters": [
                "self",
                "messages",
                "model"
              ]
            },
            {
              "name": "chat_with_api_fallback",
              "docstring": "Fallback \u0447\u0435\u0440\u0435\u0437 FastAPI \u0447\u0430\u0442",
              "line_range": [
                123,
                130
              ],
              "parameters": [
                "self",
                "message",
                "session_id"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "FileManager",
          "docstring": "\u041c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u0444\u0430\u0439\u043b\u043e\u0432 \u0447\u0435\u0440\u0435\u0437 API",
          "line_range": [
            132,
            162
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                135,
                137
              ],
              "parameters": [
                "self",
                "api_client"
              ]
            },
            {
              "name": "read_file",
              "docstring": "\u0427\u0442\u0435\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430 \u0447\u0435\u0440\u0435\u0437 API \u043a\u043e\u043c\u0430\u043d\u0434\u044b",
              "line_range": [
                139,
                147
              ],
              "parameters": [
                "self",
                "file_path",
                "max_lines"
              ]
            },
            {
              "name": "get_system_status",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
              "line_range": [
                149,
                162
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "MemoryManager",
          "docstring": "\u041c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u043f\u0430\u043c\u044f\u0442\u0438 \u0441 API \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439",
          "line_range": [
            164,
            246
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                167,
                175
              ],
              "parameters": [
                "self",
                "storage_dir",
                "api_client"
              ]
            },
            {
              "name": "_load_data",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0441\u0435\u0441\u0441\u0438\u0439 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430",
              "line_range": [
                177,
                189
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_data",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0435\u0441\u0441\u0438\u0439 \u0432 \u0444\u0430\u0439\u043b",
              "line_range": [
                191,
                208
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_or_create_session",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0435\u0441\u0441\u0438\u0438",
              "line_range": [
                210,
                227
              ],
              "parameters": [
                "self",
                "chat_id",
                "user_id",
                "user_name"
              ]
            },
            {
              "name": "add_message",
              "docstring": "\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 \u0441\u0435\u0441\u0441\u0438\u044e",
              "line_range": [
                229,
                246
              ],
              "parameters": [
                "self",
                "session",
                "role",
                "content",
                "model_used"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "OllamaAPIBot",
          "docstring": "Telegram \u0431\u043e\u0442 \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 FastAPI",
          "line_range": [
            248,
            466
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                251,
                264
              ],
              "parameters": [
                "self",
                "bot_token",
                "api_base_url"
              ]
            },
            {
              "name": "_signal_handler",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0441\u0438\u0433\u043d\u0430\u043b\u043e\u0432 \u0434\u043b\u044f graceful shutdown",
              "line_range": [
                266,
                269
              ],
              "parameters": [
                "self",
                "signum",
                "frame"
              ]
            },
            {
              "name": "send_message",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 Telegram",
              "line_range": [
                271,
                284
              ],
              "parameters": [
                "self",
                "chat_id",
                "text",
                "parse_mode"
              ]
            },
            {
              "name": "get_updates",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439 \u043e\u0442 Telegram",
              "line_range": [
                286,
                295
              ],
              "parameters": [
                "self",
                "offset"
              ]
            },
            {
              "name": "chat_with_ai",
              "docstring": "\u041e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441 AI \u0447\u0435\u0440\u0435\u0437 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 API",
              "line_range": [
                297,
                321
              ],
              "parameters": [
                "self",
                "session",
                "user_message"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f",
              "line_range": [
                323,
                361
              ],
              "parameters": [
                "self",
                "update"
              ]
            },
            {
              "name": "handle_command",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434 \u0431\u043e\u0442\u0430",
              "line_range": [
                363,
                431
              ],
              "parameters": [
                "self",
                "chat_id",
                "command",
                "session"
              ]
            },
            {
              "name": "run",
              "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0431\u043e\u0442\u0430",
              "line_range": [
                433,
                466
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "MemoryManager",
          "logging.getLogger",
          "signal.signal"
        ],
        "__aenter__": [
          "aiohttp.ClientSession"
        ],
        "__aexit__": [],
        "health_check": [
          "response.json"
        ],
        "system_status": [
          "response.json"
        ],
        "chat_message": [
          "response.json"
        ],
        "execute_cli_command": [
          "response.json"
        ],
        "get_metrics": [
          "response.json"
        ],
        "chat_with_ollama": [
          "response.json",
          "session.post",
          "aiohttp.ClientSession",
          "logging.error"
        ],
        "chat_with_api_fallback": [
          "logging.error",
          "result.get"
        ],
        "read_file": [
          "result.get"
        ],
        "get_system_status": [],
        "_load_data": [
          "ChatSession",
          "logging.error",
          "ChatMessage",
          "open",
          "data.get",
          "json.load"
        ],
        "_save_data": [
          "datetime.now",
          "sessions_data.append",
          "logging.error",
          "open",
          "json.dump",
          "asdict"
        ],
        "get_or_create_session": [
          "ChatSession",
          "datetime.now"
        ],
        "add_message": [
          "self._save_data",
          "datetime.now",
          "len",
          "ChatMessage",
          "content.split"
        ],
        "_signal_handler": [],
        "send_message": [
          "response.json",
          "session.post",
          "aiohttp.ClientSession"
        ],
        "get_updates": [
          "response.json",
          "aiohttp.ClientSession",
          "session.get"
        ],
        "chat_with_ai": [
          "model_manager.chat_with_ollama",
          "model_manager.chat_with_api_fallback",
          "messages.append",
          "ModelManager"
        ],
        "handle_message": [
          "locals",
          "self.handle_command",
          "self.send_message",
          "text.startswith",
          "self.chat_with_ai",
          "message.get",
          "update.get"
        ],
        "handle_command": [
          "file_manager.get_system_status",
          "FileManager",
          "len",
          "self.send_message"
        ],
        "run": [
          "self.get_updates",
          "APIClient",
          "asyncio.sleep",
          "updates.get",
          "self.handle_message"
        ],
        "main": [
          "print",
          "logging.error",
          "os.getenv",
          "bot.run",
          "OllamaAPIBot",
          "logging.info"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "aiohttp",
        "asdict",
        "asyncio",
        "dataclass",
        "dataclasses",
        "datetime",
        "json",
        "logging",
        "os",
        "signal",
        "typing"
      ],
      "hash": "c740c60f6d54aecbb4bbb98c2425d10bd0e0d71243e9aaf61f1d42d7ad1fa2cf",
      "artifact_id": "900969aa-6857-48d5-88c8-7796ab942c4a"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.start_api_bot",
      "path": ".ARCHIVE/archive/telegram_bots/start_api_bot.py",
      "category": "core",
      "module_doc": "\u041b\u0430\u0443\u043d\u0447\u0435\u0440 \u0434\u043b\u044f Ollama API Bot \u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430\u043c\u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u0438 API",
      "functions": [
        {
          "name": "check_environment",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f",
          "line_range": [
            13,
            30
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "check_api_server",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 FastAPI \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
          "line_range": [
            32,
            53
          ],
          "parameters": [
            "api_url"
          ],
          "decorators": []
        },
        {
          "name": "check_ollama",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 Ollama",
          "line_range": [
            55,
            77
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "check_dependencies",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 Python \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439",
          "line_range": [
            79,
            99
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "start_api_server",
          "docstring": "\u041f\u043e\u043f\u044b\u0442\u043a\u0430 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 API \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
          "line_range": [
            101,
            125
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": [
            127,
            183
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "check_environment": [
          "print",
          "os.getenv"
        ],
        "check_api_server": [
          "print",
          "response.json",
          "aiohttp.ClientSession",
          "session.get"
        ],
        "check_ollama": [
          "print",
          "session.get",
          "len",
          "response.json",
          "aiohttp.ClientSession",
          "data.get"
        ],
        "check_dependencies": [
          "print",
          "missing.append",
          "__import__"
        ],
        "start_api_server": [
          "print",
          "Path",
          "time.sleep",
          "subprocess.Popen"
        ],
        "main": [
          "print",
          "check_ollama",
          "Path",
          "check_environment",
          "os.getenv",
          "start_api_server",
          "check_dependencies",
          "asyncio.sleep",
          "bot_main",
          "check_api_server"
        ]
      },
      "dependencies": [
        "Path",
        "aiohttp",
        "asyncio",
        "main",
        "ollama_api_bot",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "time"
      ],
      "hash": "df6b630a8928e2a7fdf29f72f0da03557f143452ca30845ca491cf59009cc22e",
      "artifact_id": "5dbcf7f9-ef6d-4530-be2a-6b253a337783"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.telegram_cursor_master",
      "path": ".ARCHIVE/archive/telegram_bots/telegram_cursor_master.py",
      "category": "core",
      "module_doc": "\ud83c\udfaf LLMStruct Telegram Master Controller\n\u0415\u0434\u0438\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0434\u043b\u044f seamless \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043c\u0430\u0441\u0442\u0435\u0440-\u043f\u043b\u0430\u043d\u043e\u043c \u0447\u0435\u0440\u0435\u0437 Telegram\n\n\u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430:\n- \u041e\u0434\u0438\u043d \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0439 Telegram Bot  \n- File-based communication \u0441 Cursor\n- Clear command protocols\n- Real-time status updates",
      "functions": [
        {
          "name": "main",
          "docstring": "Main function",
          "line_range": [
            355,
            395
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            40,
            60
          ],
          "parameters": [
            "self",
            "token"
          ],
          "decorators": []
        },
        {
          "name": "setup_handlers",
          "docstring": "Setup command and message handlers",
          "line_range": [
            62,
            75
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cmd_start",
          "docstring": "Start command",
          "line_range": [
            77,
            96
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "cmd_status",
          "docstring": "Status command",
          "line_range": [
            98,
            119
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "cmd_master",
          "docstring": "Master plan command",
          "line_range": [
            121,
            149
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "cmd_stop",
          "docstring": "Stop command",
          "line_range": [
            151,
            171
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "cmd_help",
          "docstring": "Help command",
          "line_range": [
            173,
            196
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "Handle regular messages",
          "line_range": [
            198,
            229
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "write_command",
          "docstring": "Write command to file for Cursor",
          "line_range": [
            231,
            251
          ],
          "parameters": [
            "self",
            "command"
          ],
          "decorators": []
        },
        {
          "name": "read_status",
          "docstring": "Read current status",
          "line_range": [
            253,
            262
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "update_status",
          "docstring": "Update status file",
          "line_range": [
            264,
            279
          ],
          "parameters": [
            "self",
            "message",
            "status"
          ],
          "decorators": []
        },
        {
          "name": "start_response_watcher",
          "docstring": "Start watching for responses from Cursor",
          "line_range": [
            281,
            298
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "process_responses",
          "docstring": "Process responses from Cursor",
          "line_range": [
            300,
            316
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "send_response",
          "docstring": "Send response to Telegram",
          "line_range": [
            318,
            332
          ],
          "parameters": [
            "self",
            "response"
          ],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "Run the master controller",
          "line_range": [
            334,
            353
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_in_thread",
          "docstring": "",
          "line_range": [
            372,
            376
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TelegramCursorMaster",
          "docstring": "\u041c\u0430\u0441\u0442\u0435\u0440-\u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440 \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0447\u0435\u0440\u0435\u0437 Telegram",
          "line_range": [
            37,
            353
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                40,
                60
              ],
              "parameters": [
                "self",
                "token"
              ]
            },
            {
              "name": "setup_handlers",
              "docstring": "Setup command and message handlers",
              "line_range": [
                62,
                75
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cmd_start",
              "docstring": "Start command",
              "line_range": [
                77,
                96
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "cmd_status",
              "docstring": "Status command",
              "line_range": [
                98,
                119
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "cmd_master",
              "docstring": "Master plan command",
              "line_range": [
                121,
                149
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "cmd_stop",
              "docstring": "Stop command",
              "line_range": [
                151,
                171
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "cmd_help",
              "docstring": "Help command",
              "line_range": [
                173,
                196
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "Handle regular messages",
              "line_range": [
                198,
                229
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "write_command",
              "docstring": "Write command to file for Cursor",
              "line_range": [
                231,
                251
              ],
              "parameters": [
                "self",
                "command"
              ]
            },
            {
              "name": "read_status",
              "docstring": "Read current status",
              "line_range": [
                253,
                262
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "update_status",
              "docstring": "Update status file",
              "line_range": [
                264,
                279
              ],
              "parameters": [
                "self",
                "message",
                "status"
              ]
            },
            {
              "name": "start_response_watcher",
              "docstring": "Start watching for responses from Cursor",
              "line_range": [
                281,
                298
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "process_responses",
              "docstring": "Process responses from Cursor",
              "line_range": [
                300,
                316
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "send_response",
              "docstring": "Send response to Telegram",
              "line_range": [
                318,
                332
              ],
              "parameters": [
                "self",
                "response"
              ]
            },
            {
              "name": "run",
              "docstring": "Run the master controller",
              "line_range": [
                334,
                353
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "Bot",
          "self.setup_handlers",
          "logger.info",
          "Application.builder",
          "self.update_status"
        ],
        "setup_handlers": [
          "MessageHandler",
          "CommandHandler"
        ],
        "cmd_start": [
          "logger.info"
        ],
        "cmd_status": [
          "status.get",
          "self.read_status",
          "logger.info"
        ],
        "cmd_master": [
          "self.write_command",
          "time.time",
          "datetime.now",
          "logger.info",
          "int",
          "self.update_status"
        ],
        "cmd_stop": [
          "self.write_command",
          "time.time",
          "datetime.now",
          "logger.info",
          "int",
          "self.update_status"
        ],
        "cmd_help": [],
        "handle_message": [
          "self.write_command",
          "time.time",
          "datetime.now",
          "logger.info",
          "int"
        ],
        "write_command": [
          "len",
          "logger.info",
          "commands.append",
          "json.dump",
          "open",
          "logger.error",
          "json.load"
        ],
        "read_status": [
          "json.load",
          "logger.error",
          "open"
        ],
        "update_status": [
          "datetime.now",
          "logger.info",
          "logger.error",
          "json.dump",
          "open"
        ],
        "start_response_watcher": [
          "self.process_responses",
          "logger.info",
          "asyncio.sleep",
          "logger.error"
        ],
        "process_responses": [
          "self.send_response",
          "response.get",
          "open",
          "json.dump",
          "logger.error",
          "json.load"
        ],
        "send_response": [
          "logger.info",
          "response.get",
          "logger.error"
        ],
        "run": [
          "asyncio.create_task",
          "logger.info",
          "self.start_response_watcher"
        ],
        "main": [
          "asyncio.get_event_loop",
          "os.getenv",
          "TelegramCursorMaster",
          "logger.error",
          "loop.is_running"
        ],
        "run_in_thread": [
          "new_loop.run_until_complete",
          "new_loop.close",
          "asyncio.new_event_loop",
          "asyncio.set_event_loop",
          "master.run"
        ]
      },
      "dependencies": [
        "Application",
        "Bot",
        "CommandHandler",
        "ContextTypes",
        "Dict",
        "List",
        "MessageHandler",
        "Optional",
        "Path",
        "Update",
        "asyncio",
        "datetime",
        "filters",
        "httpx",
        "json",
        "logging",
        "os",
        "pathlib",
        "sys",
        "telegram",
        "telegram.ext",
        "threading",
        "time",
        "typing"
      ],
      "hash": "d77278f204a5ffdc481c040e428169183e9b4024596bb0b756e31121597a44a0",
      "artifact_id": "981629bd-054c-4a3c-a77b-6b9dec40d300"
    },
    {
      "module_id": "src.scripts.session_cli",
      "path": "src/scripts/session_cli.py",
      "category": "core",
      "module_doc": "Session Management CLI\nAutomates session tracking, worklog updates, and session switching for llmstruct.\nPart of the comprehensive session management system.",
      "functions": [
        {
          "name": "get_current_branch",
          "docstring": "Get current git branch.",
          "line_range": [
            24,
            31
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_json_file",
          "docstring": "Load JSON file with error handling.",
          "line_range": [
            33,
            40
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "save_json_file",
          "docstring": "Save JSON file with error handling.",
          "line_range": [
            42,
            51
          ],
          "parameters": [
            "file_path",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "get_current_timestamp",
          "docstring": "Get current timestamp in ISO format.",
          "line_range": [
            53,
            55
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "log_event",
          "docstring": "Log an event to worklog.json.",
          "line_range": [
            57,
            88
          ],
          "parameters": [
            "event_message",
            "author"
          ],
          "decorators": []
        },
        {
          "name": "switch_session",
          "docstring": "Switch to a different session or create new one.",
          "line_range": [
            90,
            141
          ],
          "parameters": [
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "list_sessions",
          "docstring": "List all available sessions.",
          "line_range": [
            143,
            166
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_current_session",
          "docstring": "Show current session details.",
          "line_range": [
            168,
            183
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_worklog",
          "docstring": "Show recent worklog entries.",
          "line_range": [
            185,
            203
          ],
          "parameters": [
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Main CLI interface.",
          "line_range": [
            205,
            244
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": [
            16,
            22
          ],
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {
        "get_current_branch": [
          "subprocess.run"
        ],
        "load_json_file": [
          "print",
          "json.load",
          "open"
        ],
        "save_json_file": [
          "json.dump",
          "os.makedirs",
          "print",
          "open"
        ],
        "get_current_timestamp": [
          "datetime.now"
        ],
        "log_event": [
          "print",
          "current_session.get",
          "load_json_file",
          "save_json_file",
          "get_current_branch",
          "get_current_timestamp"
        ],
        "switch_session": [
          "print",
          "load_json_file",
          "save_json_file",
          "get_current_branch",
          "log_event",
          "get_current_timestamp"
        ],
        "list_sessions": [
          "print",
          "current_session.get",
          "load_json_file"
        ],
        "show_current_session": [
          "print",
          "current_session.get",
          "load_json_file"
        ],
        "show_worklog": [
          "print",
          "len",
          "reversed",
          "load_json_file"
        ],
        "main": [
          "print",
          "switch_session",
          "len",
          "log_event",
          "int",
          "show_current_session",
          "list_sessions",
          "show_worklog"
        ]
      },
      "dependencies": [
        "Path",
        "datetime",
        "json",
        "os",
        "pathlib",
        "subprocess",
        "sys"
      ],
      "hash": "23aca9a658e60715b7fa3e4a009c3de7baebdd1eca3acae17d87938ae622cc41",
      "artifact_id": "7986d6db-1215-48d6-8e8c-01726d37a6a0"
    },
    {
      "module_id": "src.scripts.auto_update_struct",
      "path": "src/scripts/auto_update_struct.py",
      "category": "core",
      "module_doc": "Automatic struct.json update script\nThis script automatically parses the project and updates struct.json\nwithout requiring LLM intervention.",
      "functions": [
        {
          "name": "detect_project_changes",
          "docstring": "Detect if project files have changed since last struct.json generation.\nUses git status to check for modifications.",
          "line_range": [
            44,
            81
          ],
          "parameters": [
            "root_dir",
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_struct_json",
          "docstring": "Create a backup of existing struct.json.",
          "line_range": [
            84,
            97
          ],
          "parameters": [
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_struct_json",
          "docstring": "Validate generated struct.json for basic structure.",
          "line_range": [
            100,
            128
          ],
          "parameters": [
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "update_struct_json",
          "docstring": "Main function to update struct.json automatically.\n\nArgs:\n    root_dir: Project root directory (default: current directory)\n    struct_path: Path to struct.json (default: ./struct.json)\n    force: Force regeneration even if no changes detected\n    config_override: Override default configuration\n\nReturns:\n    bool: True if update was successful",
          "line_range": [
            131,
            225
          ],
          "parameters": [
            "root_dir",
            "struct_path",
            "force",
            "config_override"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for auto-update script.",
          "line_range": [
            228,
            286
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "",
          "line_range": [
            24,
            25
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_gitignore",
          "docstring": "",
          "line_range": [
            26,
            27
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "",
          "line_range": [
            28,
            29
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_config": [],
        "load_gitignore": [],
        "generate_json": [
          "ImportError"
        ],
        "detect_project_changes": [
          "Path",
          "logger.warning",
          "logger.info",
          "subprocess.run",
          "file_path.stat"
        ],
        "backup_struct_json": [
          "Path",
          "datetime.now",
          "logger.info",
          "logger.error",
          "subprocess.run"
        ],
        "validate_struct_json": [
          "logger.info",
          "json.load",
          "logger.error",
          "open"
        ],
        "update_struct_json": [
          "load_gitignore",
          "os.getcwd",
          "config.update",
          "logger.info",
          "generate_json",
          "open",
          "json.dump",
          "validate_struct_json",
          "logger.error",
          "load_config",
          "detect_project_changes",
          "cli_config.get",
          "subprocess.run",
          "config.get",
          "backup_struct_json"
        ],
        "main": [
          "print",
          "os.getcwd",
          "update_struct_json",
          "argparse.ArgumentParser",
          "logging.getLogger",
          "sys.exit",
          "parser.parse_args",
          "detect_project_changes",
          "parser.add_argument"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "generate_json",
        "json",
        "llmstruct.cli",
        "llmstruct.generators.json_generator",
        "load_config",
        "load_gitignore",
        "logging",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": "505bdb6b282e7e9befc6df4165834fa7481335c96bbb88b04501996e15e173c2",
      "artifact_id": "549cea2a-3582-46fd-b348-76efc849b41a"
    },
    {
      "module_id": "src.scripts.fix_hardcoded_usernames",
      "path": "src/scripts/fix_hardcoded_usernames.py",
      "category": "core",
      "module_doc": "Fix Hardcoded Usernames Script\nAutomatically detects and replaces hardcoded usernames with dynamic values from .env or git config.",
      "functions": [
        {
          "name": "main",
          "docstring": "Main execution function.",
          "line_range": [
            234,
            288
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            22,
            24
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_detect_user_info",
          "docstring": "Detect user info from .env, git config, or environment.",
          "line_range": [
            26,
            62
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_from_env",
          "docstring": "Load user info from .env file.",
          "line_range": [
            64,
            86
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_from_git",
          "docstring": "Load user info from git config.",
          "line_range": [
            88,
            120
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_from_environment",
          "docstring": "Load user info from environment variables.",
          "line_range": [
            122,
            128
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_user_info",
          "docstring": "Get detected user information.",
          "line_range": [
            130,
            132
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            138,
            148
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "scan_files",
          "docstring": "Scan for files containing hardcoded usernames.",
          "line_range": [
            150,
            172
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "fix_file",
          "docstring": "Fix hardcoded usernames in a single file.",
          "line_range": [
            174,
            200
          ],
          "parameters": [
            "self",
            "file_path",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "fix_all_files",
          "docstring": "Fix hardcoded usernames in all project files.",
          "line_range": [
            202,
            214
          ],
          "parameters": [
            "self",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "generate_env_template",
          "docstring": "Generate .env template with required variables.",
          "line_range": [
            216,
            231
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "UserInfoDetector",
          "docstring": "Detect user information from various sources.",
          "line_range": [
            19,
            132
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                22,
                24
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_detect_user_info",
              "docstring": "Detect user info from .env, git config, or environment.",
              "line_range": [
                26,
                62
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_from_env",
              "docstring": "Load user info from .env file.",
              "line_range": [
                64,
                86
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_from_git",
              "docstring": "Load user info from git config.",
              "line_range": [
                88,
                120
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_from_environment",
              "docstring": "Load user info from environment variables.",
              "line_range": [
                122,
                128
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_user_info",
              "docstring": "Get detected user information.",
              "line_range": [
                130,
                132
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "HardcodeFixer",
          "docstring": "Fix hardcoded usernames in project files.",
          "line_range": [
            135,
            231
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                138,
                148
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "scan_files",
              "docstring": "Scan for files containing hardcoded usernames.",
              "line_range": [
                150,
                172
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "fix_file",
              "docstring": "Fix hardcoded usernames in a single file.",
              "line_range": [
                174,
                200
              ],
              "parameters": [
                "self",
                "file_path",
                "dry_run"
              ]
            },
            {
              "name": "fix_all_files",
              "docstring": "Fix hardcoded usernames in all project files.",
              "line_range": [
                202,
                214
              ],
              "parameters": [
                "self",
                "dry_run"
              ]
            },
            {
              "name": "generate_env_template",
              "docstring": "Generate .env template with required variables.",
              "line_range": [
                216,
                231
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "UserInfoDetector"
        ],
        "_detect_user_info": [
          "user_info.get",
          "user_info.update",
          "self._load_from_env",
          "logger.info",
          "self._load_from_git",
          "self._load_from_environment",
          "env_vars.items",
          "env_info.items"
        ],
        "_load_from_env": [
          "value.strip",
          "line.split",
          "line.strip",
          "line.startswith",
          "open",
          "env_vars.get",
          "env_file.exists",
          "logger.error",
          "key.strip"
        ],
        "_load_from_git": [
          "re.search",
          "match.group",
          "subprocess.run",
          "logger.error"
        ],
        "_load_from_environment": [],
        "get_user_info": [],
        "scan_files": [
          "logger.warning",
          "content.count",
          "open",
          "str",
          "f.read",
          "any",
          "files_with_hardcode.append"
        ],
        "fix_file": [
          "content.replace",
          "f.write",
          "logger.info",
          "content.count",
          "open",
          "logger.error",
          "f.read"
        ],
        "fix_all_files": [
          "logger.info",
          "len",
          "self.fix_file",
          "str",
          "self.scan_files"
        ],
        "generate_env_template": [],
        "main": [
          "HardcodeFixer",
          "print",
          "Path",
          "fixer.generate_env_template",
          "results.items",
          "argparse.ArgumentParser",
          "replacements.items",
          "fixer.fix_all_files",
          "f.write",
          "logger.info",
          "len",
          "open",
          "parser.parse_args",
          "fixer.scan_files",
          "parser.add_argument"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "argparse",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "subprocess",
        "typing"
      ],
      "hash": "04fdd50dde3b144c4c93f598ab0748be398c1287e006924d5a573d5b520395a3",
      "artifact_id": "abfc3a85-4229-4325-b907-432ec39415eb"
    },
    {
      "module_id": "src.scripts.create_github_issues",
      "path": "src/scripts/create_github_issues.py",
      "category": "core",
      "module_doc": "GitHub Issues Creator for AI-Dogfooding Project\n\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 GitHub issues \u0438\u0437 \u043d\u0430\u0448\u0438\u0445 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0437\u0430\u0434\u0430\u0447",
      "functions": [
        {
          "name": "load_env_file",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            16,
            28
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_epics_data",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438\u0437 JSON",
          "line_range": [
            205,
            213
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f issues",
          "line_range": [
            215,
            252
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            34,
            43
          ],
          "parameters": [
            "self",
            "repo_owner",
            "repo_name",
            "token",
            "use_cli"
          ],
          "decorators": []
        },
        {
          "name": "create_epic_issue",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u044d\u043f\u0438\u043a\u0430",
          "line_range": [
            45,
            83
          ],
          "parameters": [
            "self",
            "epic_data"
          ],
          "decorators": []
        },
        {
          "name": "create_task_issue",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            85,
            128
          ],
          "parameters": [
            "self",
            "task_data",
            "epic_number"
          ],
          "decorators": []
        },
        {
          "name": "_create_issue_via_api",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub API",
          "line_range": [
            130,
            150
          ],
          "parameters": [
            "self",
            "title",
            "body",
            "labels"
          ],
          "decorators": []
        },
        {
          "name": "_create_issue_via_cli",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub CLI",
          "line_range": [
            152,
            186
          ],
          "parameters": [
            "self",
            "title",
            "body",
            "labels"
          ],
          "decorators": []
        },
        {
          "name": "_format_criteria",
          "docstring": "",
          "line_range": [
            188,
            189
          ],
          "parameters": [
            "self",
            "criteria"
          ],
          "decorators": []
        },
        {
          "name": "_format_tasks",
          "docstring": "",
          "line_range": [
            191,
            200
          ],
          "parameters": [
            "self",
            "tasks"
          ],
          "decorators": []
        },
        {
          "name": "_format_metrics",
          "docstring": "",
          "line_range": [
            202,
            203
          ],
          "parameters": [
            "self",
            "metrics"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubIssuesCreator",
          "docstring": "",
          "line_range": [
            33,
            203
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                34,
                43
              ],
              "parameters": [
                "self",
                "repo_owner",
                "repo_name",
                "token",
                "use_cli"
              ]
            },
            {
              "name": "create_epic_issue",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u044d\u043f\u0438\u043a\u0430",
              "line_range": [
                45,
                83
              ],
              "parameters": [
                "self",
                "epic_data"
              ]
            },
            {
              "name": "create_task_issue",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
              "line_range": [
                85,
                128
              ],
              "parameters": [
                "self",
                "task_data",
                "epic_number"
              ]
            },
            {
              "name": "_create_issue_via_api",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub API",
              "line_range": [
                130,
                150
              ],
              "parameters": [
                "self",
                "title",
                "body",
                "labels"
              ]
            },
            {
              "name": "_create_issue_via_cli",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub CLI",
              "line_range": [
                152,
                186
              ],
              "parameters": [
                "self",
                "title",
                "body",
                "labels"
              ]
            },
            {
              "name": "_format_criteria",
              "docstring": "",
              "line_range": [
                188,
                189
              ],
              "parameters": [
                "self",
                "criteria"
              ]
            },
            {
              "name": "_format_tasks",
              "docstring": "",
              "line_range": [
                191,
                200
              ],
              "parameters": [
                "self",
                "tasks"
              ]
            },
            {
              "name": "_format_metrics",
              "docstring": "",
              "line_range": [
                202,
                203
              ],
              "parameters": [
                "self",
                "metrics"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "load_env_file": [
          "value.strip",
          "print",
          "Path",
          "line.split",
          "line.strip",
          "line.startswith",
          "open",
          "env_file.exists",
          "key.strip"
        ],
        "__init__": [],
        "create_epic_issue": [
          "self._format_tasks",
          "self._format_metrics",
          "self._create_issue_via_cli",
          "self._format_criteria",
          "self._create_issue_via_api",
          "epic_data.get"
        ],
        "create_task_issue": [
          "self._create_issue_via_api",
          "self._create_issue_via_cli",
          "self._format_criteria",
          "task_data.get"
        ],
        "_create_issue_via_api": [
          "response.json",
          "print",
          "requests.post"
        ],
        "_create_issue_via_cli": [
          "print",
          "f.write",
          "issue_url.split",
          "open",
          "int",
          "subprocess.run",
          "os.getpid",
          "os.unlink"
        ],
        "_format_criteria": [],
        "_format_tasks": [],
        "_format_metrics": [
          "metrics.items"
        ],
        "load_epics_data": [
          "print",
          "Path",
          "epics_file.exists",
          "open",
          "json.load"
        ],
        "main": [
          "print",
          "load_epics_data",
          "creator.create_epic_issue",
          "creator.create_task_issue",
          "os.getenv",
          "GitHubIssuesCreator",
          "len",
          "epics_data.get",
          "epic_data.get"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "json",
        "os",
        "pathlib",
        "requests",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": "49ba6a19e2c3aa696879c666036ca56bf5678032d3a8a1004c9c1849b87104b7",
      "artifact_id": "ecdf0d8e-b84d-40a0-b340-9fed979ad2da"
    },
    {
      "module_id": "src.scripts.export_to_github_projects",
      "path": "src/scripts/export_to_github_projects.py",
      "category": "core",
      "module_doc": "Export script for GitHub Projects integration\nConverts official tasks.json and ideas.json to GitHub Project cards",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            183,
            266
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            23,
            26
          ],
          "parameters": [
            "self",
            "config_path",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "check_github_cli",
          "docstring": "Check if GitHub CLI is installed and authenticated",
          "line_range": [
            28,
            36
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "list_projects",
          "docstring": "List available GitHub Projects (via gh-projects extension)",
          "line_range": [
            38,
            55
          ],
          "parameters": [
            "self",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "create_project_item",
          "docstring": "Create a new item in GitHub Project (via gh-projects extension)\nTODO: \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 GraphQL API \u0438\u043b\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c",
          "line_range": [
            57,
            82
          ],
          "parameters": [
            "self",
            "project_number",
            "title",
            "body",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "export_tasks_to_project",
          "docstring": "Export tasks to GitHub Project",
          "line_range": [
            84,
            123
          ],
          "parameters": [
            "self",
            "tasks",
            "project_number",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "export_ideas_to_project",
          "docstring": "Export ideas to GitHub Project",
          "line_range": [
            125,
            164
          ],
          "parameters": [
            "self",
            "ideas",
            "project_number",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "filter_data",
          "docstring": "Filter data by status and priority",
          "line_range": [
            166,
            180
          ],
          "parameters": [
            "self",
            "data",
            "status_filter",
            "priority_filter"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubProjectsExportScript",
          "docstring": "Extended exporter with command-line interface and GitHub CLI integration",
          "line_range": [
            20,
            180
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                23,
                26
              ],
              "parameters": [
                "self",
                "config_path",
                "dry_run"
              ]
            },
            {
              "name": "check_github_cli",
              "docstring": "Check if GitHub CLI is installed and authenticated",
              "line_range": [
                28,
                36
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "list_projects",
              "docstring": "List available GitHub Projects (via gh-projects extension)",
              "line_range": [
                38,
                55
              ],
              "parameters": [
                "self",
                "owner",
                "repo"
              ]
            },
            {
              "name": "create_project_item",
              "docstring": "Create a new item in GitHub Project (via gh-projects extension)\nTODO: \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 GraphQL API \u0438\u043b\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c",
              "line_range": [
                57,
                82
              ],
              "parameters": [
                "self",
                "project_number",
                "title",
                "body",
                "owner",
                "repo"
              ]
            },
            {
              "name": "export_tasks_to_project",
              "docstring": "Export tasks to GitHub Project",
              "line_range": [
                84,
                123
              ],
              "parameters": [
                "self",
                "tasks",
                "project_number",
                "owner",
                "repo"
              ]
            },
            {
              "name": "export_ideas_to_project",
              "docstring": "Export ideas to GitHub Project",
              "line_range": [
                125,
                164
              ],
              "parameters": [
                "self",
                "ideas",
                "project_number",
                "owner",
                "repo"
              ]
            },
            {
              "name": "filter_data",
              "docstring": "Filter data by status and priority",
              "line_range": [
                166,
                180
              ],
              "parameters": [
                "self",
                "data",
                "status_filter",
                "priority_filter"
              ]
            }
          ],
          "bases": [
            "GitHubProjectsExporter"
          ]
        }
      ],
      "callgraph": {
        "__init__": [
          "super"
        ],
        "check_github_cli": [
          "print",
          "self._run_gh_command"
        ],
        "list_projects": [
          "print",
          "self._run_gh_command",
          "json.loads",
          "isinstance"
        ],
        "create_project_item": [
          "print",
          "self._run_gh_command",
          "output.strip",
          "str"
        ],
        "export_tasks_to_project": [
          "print",
          "self.create_project_item",
          "len",
          "self.format_task_for_github",
          "task.get"
        ],
        "export_ideas_to_project": [
          "print",
          "self.create_project_item",
          "len",
          "self.format_idea_for_github",
          "idea.get"
        ],
        "filter_data": [
          "item.get"
        ],
        "main": [
          "print",
          "argparse.ArgumentParser",
          "exporter.filter_data",
          "GitHubProjectsExportScript",
          "exporter.load_official_data",
          "exporter._save_mapping",
          "exporter.check_github_cli",
          "sys.exit",
          "parser.parse_args",
          "exporter.export_ideas_to_project",
          "parser.add_argument",
          "exporter.export_tasks_to_project"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "GitHubProjectsExporter",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "argparse",
        "datetime",
        "json",
        "llmstruct.gh_view",
        "pathlib",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": "b6b4f700d8fed14e918455d59e88d15bc3259556aad468ee3c3ea4816d710f2a",
      "artifact_id": "73a97038-7954-436c-9438-a6716021de63"
    },
    {
      "module_id": "src.scripts.validate_schemas",
      "path": "src/scripts/validate_schemas.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "artifact_id": "98df217e-67ed-425c-a156-6994c665301b"
    },
    {
      "module_id": "src.scripts.process_926_items",
      "path": "src/scripts/process_926_items.py",
      "category": "core",
      "module_doc": "926 Items Processing Script - Updated Implementation\nProcesses items according to GitHub roadmap + personal management vision\nImplements all decisions from 926_items_processing_execution_plan.md",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            16,
            51
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_comprehensive_index",
          "docstring": "Load the 926 items from comprehensive index",
          "line_range": [
            53,
            111
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "calculate_confidence_score",
          "docstring": "Calculate confidence score for categorization decision",
          "line_range": [
            113,
            146
          ],
          "parameters": [
            "self",
            "item",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "check_t_pot_related",
          "docstring": "Enhanced T-Pot detection",
          "line_range": [
            148,
            155
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "check_team_implementable",
          "docstring": "Check if team can implement without architecture review",
          "line_range": [
            157,
            176
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "check_personal_vs_team_vs_business",
          "docstring": "Classify as personal/team/business",
          "line_range": [
            178,
            214
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "identify_epic_candidates",
          "docstring": "Identify items that should be grouped into epics",
          "line_range": [
            216,
            233
          ],
          "parameters": [
            "self",
            "items"
          ],
          "decorators": []
        },
        {
          "name": "extract_epic_name",
          "docstring": "Extract epic name from item",
          "line_range": [
            235,
            241
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "categorize_item",
          "docstring": "Main categorization logic with confidence scoring",
          "line_range": [
            243,
            278
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "find_duplicates",
          "docstring": "Enhanced duplicate detection with T-Pot special handling",
          "line_range": [
            280,
            319
          ],
          "parameters": [
            "self",
            "items"
          ],
          "decorators": []
        },
        {
          "name": "calculate_similarity",
          "docstring": "Enhanced similarity calculation",
          "line_range": [
            321,
            342
          ],
          "parameters": [
            "self",
            "title1",
            "title2"
          ],
          "decorators": []
        },
        {
          "name": "suggest_merge_strategy",
          "docstring": "Enhanced merge strategy with T-Pot consideration",
          "line_range": [
            344,
            359
          ],
          "parameters": [
            "self",
            "item1",
            "item2"
          ],
          "decorators": []
        },
        {
          "name": "process_items",
          "docstring": "Main processing workflow implementing execution plan",
          "line_range": [
            361,
            468
          ],
          "parameters": [
            "self",
            "items"
          ],
          "decorators": []
        },
        {
          "name": "save_results",
          "docstring": "Save categorized results with enhanced metadata",
          "line_range": [
            470,
            546
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_category_description",
          "docstring": "Category descriptions per execution plan",
          "line_range": [
            548,
            562
          ],
          "parameters": [
            "self",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "Main execution workflow per execution plan",
          "line_range": [
            564,
            606
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TaskProcessor926",
          "docstring": "",
          "line_range": [
            15,
            606
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                16,
                51
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_comprehensive_index",
              "docstring": "Load the 926 items from comprehensive index",
              "line_range": [
                53,
                111
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "calculate_confidence_score",
              "docstring": "Calculate confidence score for categorization decision",
              "line_range": [
                113,
                146
              ],
              "parameters": [
                "self",
                "item",
                "category"
              ]
            },
            {
              "name": "check_t_pot_related",
              "docstring": "Enhanced T-Pot detection",
              "line_range": [
                148,
                155
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "check_team_implementable",
              "docstring": "Check if team can implement without architecture review",
              "line_range": [
                157,
                176
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "check_personal_vs_team_vs_business",
              "docstring": "Classify as personal/team/business",
              "line_range": [
                178,
                214
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "identify_epic_candidates",
              "docstring": "Identify items that should be grouped into epics",
              "line_range": [
                216,
                233
              ],
              "parameters": [
                "self",
                "items"
              ]
            },
            {
              "name": "extract_epic_name",
              "docstring": "Extract epic name from item",
              "line_range": [
                235,
                241
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "categorize_item",
              "docstring": "Main categorization logic with confidence scoring",
              "line_range": [
                243,
                278
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "find_duplicates",
              "docstring": "Enhanced duplicate detection with T-Pot special handling",
              "line_range": [
                280,
                319
              ],
              "parameters": [
                "self",
                "items"
              ]
            },
            {
              "name": "calculate_similarity",
              "docstring": "Enhanced similarity calculation",
              "line_range": [
                321,
                342
              ],
              "parameters": [
                "self",
                "title1",
                "title2"
              ]
            },
            {
              "name": "suggest_merge_strategy",
              "docstring": "Enhanced merge strategy with T-Pot consideration",
              "line_range": [
                344,
                359
              ],
              "parameters": [
                "self",
                "item1",
                "item2"
              ]
            },
            {
              "name": "process_items",
              "docstring": "Main processing workflow implementing execution plan",
              "line_range": [
                361,
                468
              ],
              "parameters": [
                "self",
                "items"
              ]
            },
            {
              "name": "save_results",
              "docstring": "Save categorized results with enhanced metadata",
              "line_range": [
                470,
                546
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_category_description",
              "docstring": "Category descriptions per execution plan",
              "line_range": [
                548,
                562
              ],
              "parameters": [
                "self",
                "category"
              ]
            },
            {
              "name": "run",
              "docstring": "Main execution workflow per execution plan",
              "line_range": [
                564,
                606
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "datetime.now",
          "Path"
        ],
        "load_comprehensive_index": [
          "print",
          "items.append",
          "hash",
          "items.extend",
          "seen_items.add",
          "unique_items.append",
          "item.get",
          "len",
          "open",
          "data.items",
          "set",
          "value.items",
          "isinstance",
          "index_path.exists",
          "str",
          "any",
          "json.load",
          "item_content.lower"
        ],
        "calculate_confidence_score": [
          "item.get",
          "self.check_t_pot_related",
          "min",
          "str",
          "sum"
        ],
        "check_t_pot_related": [
          "any",
          "str"
        ],
        "check_team_implementable": [
          "sum",
          "str"
        ],
        "check_personal_vs_team_vs_business": [
          "max",
          "item.get",
          "sum",
          "str"
        ],
        "identify_epic_candidates": [
          "item.get",
          "self.extract_epic_name",
          "len",
          "epic_groups.items",
          "str",
          "any"
        ],
        "extract_epic_name": [
          "item.get",
          "title.split"
        ],
        "categorize_item": [
          "self.check_personal_vs_team_vs_business",
          "self.check_t_pot_related",
          "self.calculate_confidence_score",
          "str",
          "self.check_team_implementable",
          "any"
        ],
        "find_duplicates": [
          "self.calculate_similarity",
          "item.get",
          "seen_items.items",
          "duplicates.append",
          "self.check_t_pot_related",
          "self.suggest_merge_strategy"
        ],
        "calculate_similarity": [
          "words1.union",
          "words1.intersection",
          "title2.split",
          "len",
          "min",
          "set",
          "title1.split"
        ],
        "suggest_merge_strategy": [
          "item1.get",
          "item2.get",
          "len",
          "self.check_t_pot_related",
          "str"
        ],
        "process_items": [
          "print",
          "self.find_duplicates",
          "processed_item.copy",
          "duplicate_item_ids.add",
          "datetime.now",
          "category.startswith",
          "len",
          "self.check_t_pot_related",
          "self.extract_epic_name",
          "low_confidence_items.append",
          "set",
          "str",
          "self.check_team_implementable",
          "self.categorize_item",
          "any",
          "id"
        ],
        "save_results": [
          "print",
          "datetime.now",
          "item.get",
          "len",
          "open",
          "json.dump",
          "self.get_category_description",
          "sum"
        ],
        "get_category_description": [
          "descriptions.get"
        ],
        "run": [
          "print",
          "self.load_comprehensive_index",
          "self.save_results",
          "self.process_items"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "Tuple",
        "datetime",
        "json",
        "os",
        "pathlib",
        "re",
        "typing"
      ],
      "hash": "75943c116813d77b47300deeaeadb26b7ccd4a37912497bdb82871198feedcf5",
      "artifact_id": "e7401d44-3c3c-472b-9d6c-cd7bdbc19212"
    },
    {
      "module_id": "src.scripts.fix_github_script",
      "path": "src/scripts/fix_github_script.py",
      "category": "core",
      "module_doc": "Quick fix for GitHub issues creation script\n\u0418\u0441\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u043e\u0439 JSON \u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445",
      "functions": [
        {
          "name": "fix_json_loading",
          "docstring": "\u0418\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0443 JSON \u0434\u0430\u043d\u043d\u044b\u0445",
          "line_range": [
            11,
            42
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "fix_json_loading": [
          "print",
          "Path",
          "content.replace",
          "f.write",
          "open",
          "f.read"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "os",
        "pathlib"
      ],
      "hash": "749ea82f6bcdc68da77827b691267646be1c85f5b2c20e39d085d768c9e64d87",
      "artifact_id": "7ee27442-3144-4345-b1c7-35c2fef0e76c"
    },
    {
      "module_id": "src.scripts.github_sync_manager",
      "path": "src/scripts/github_sync_manager.py",
      "category": "core",
      "module_doc": "GitHub Sync Manager - \u0418\u0434\u0435\u043c\u043f\u043e\u0442\u0435\u043d\u0442\u043d\u0430\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f processing results \u0441 GitHub\nSupports: Issues, Epics (Projects), Discussions\nSafety: dry-run mode, logging, collision detection",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface",
          "line_range": [
            375,
            408
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            17,
            48
          ],
          "parameters": [
            "self",
            "repo_owner",
            "repo_name",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "load_sync_log",
          "docstring": "Load previous sync results for idempotency",
          "line_range": [
            50,
            60
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_sync_log",
          "docstring": "Save sync log for future idempotency",
          "line_range": [
            62,
            65
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "api_request",
          "docstring": "Safe GitHub API request with rate limiting",
          "line_range": [
            67,
            94
          ],
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "get_existing_issues",
          "docstring": "Get existing GitHub issues for collision detection",
          "line_range": [
            96,
            112
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_existing_discussions",
          "docstring": "Get existing GitHub discussions",
          "line_range": [
            114,
            118
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "item_already_synced",
          "docstring": "Check if item was already synced (idempotency)",
          "line_range": [
            120,
            125
          ],
          "parameters": [
            "self",
            "item",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "find_existing_by_title",
          "docstring": "Find existing GitHub item by title similarity",
          "line_range": [
            127,
            143
          ],
          "parameters": [
            "self",
            "title",
            "existing_items"
          ],
          "decorators": []
        },
        {
          "name": "create_github_issue",
          "docstring": "Create GitHub issue from processed item",
          "line_range": [
            145,
            182
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "create_github_discussion",
          "docstring": "Create GitHub discussion from processed item",
          "line_range": [
            184,
            194
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "create_github_epic",
          "docstring": "Create GitHub epic (as Project or enhanced Issue)",
          "line_range": [
            196,
            214
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "sync_category",
          "docstring": "Sync specific category with GitHub",
          "line_range": [
            216,
            290
          ],
          "parameters": [
            "self",
            "category",
            "filename"
          ],
          "decorators": []
        },
        {
          "name": "validate_before_sync",
          "docstring": "Pre-sync validation checks",
          "line_range": [
            292,
            322
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_sync",
          "docstring": "Main sync execution",
          "line_range": [
            324,
            373
          ],
          "parameters": [
            "self",
            "categories"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubSyncManager",
          "docstring": "",
          "line_range": [
            16,
            373
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                17,
                48
              ],
              "parameters": [
                "self",
                "repo_owner",
                "repo_name",
                "dry_run"
              ]
            },
            {
              "name": "load_sync_log",
              "docstring": "Load previous sync results for idempotency",
              "line_range": [
                50,
                60
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_sync_log",
              "docstring": "Save sync log for future idempotency",
              "line_range": [
                62,
                65
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "api_request",
              "docstring": "Safe GitHub API request with rate limiting",
              "line_range": [
                67,
                94
              ],
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ]
            },
            {
              "name": "get_existing_issues",
              "docstring": "Get existing GitHub issues for collision detection",
              "line_range": [
                96,
                112
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_existing_discussions",
              "docstring": "Get existing GitHub discussions",
              "line_range": [
                114,
                118
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "item_already_synced",
              "docstring": "Check if item was already synced (idempotency)",
              "line_range": [
                120,
                125
              ],
              "parameters": [
                "self",
                "item",
                "category"
              ]
            },
            {
              "name": "find_existing_by_title",
              "docstring": "Find existing GitHub item by title similarity",
              "line_range": [
                127,
                143
              ],
              "parameters": [
                "self",
                "title",
                "existing_items"
              ]
            },
            {
              "name": "create_github_issue",
              "docstring": "Create GitHub issue from processed item",
              "line_range": [
                145,
                182
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "create_github_discussion",
              "docstring": "Create GitHub discussion from processed item",
              "line_range": [
                184,
                194
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "create_github_epic",
              "docstring": "Create GitHub epic (as Project or enhanced Issue)",
              "line_range": [
                196,
                214
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "sync_category",
              "docstring": "Sync specific category with GitHub",
              "line_range": [
                216,
                290
              ],
              "parameters": [
                "self",
                "category",
                "filename"
              ]
            },
            {
              "name": "validate_before_sync",
              "docstring": "Pre-sync validation checks",
              "line_range": [
                292,
                322
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run_sync",
              "docstring": "Main sync execution",
              "line_range": [
                324,
                373
              ],
              "parameters": [
                "self",
                "categories"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "print",
          "self.load_sync_log",
          "Path",
          "os.getenv"
        ],
        "load_sync_log": [
          "json.load",
          "open"
        ],
        "save_sync_log": [
          "json.dump",
          "open"
        ],
        "api_request": [
          "time.sleep",
          "print",
          "requests.post",
          "response.raise_for_status",
          "requests.get",
          "response.json",
          "int",
          "method.upper",
          "ValueError",
          "requests.patch"
        ],
        "get_existing_issues": [
          "len",
          "self.api_request",
          "issues.extend"
        ],
        "get_existing_discussions": [],
        "item_already_synced": [
          "item.get"
        ],
        "find_existing_by_title": [
          "item.get",
          "title.lower",
          "len"
        ],
        "create_github_issue": [
          "print",
          "labels.append",
          "self.api_request",
          "item.get",
          "processing_meta.get"
        ],
        "create_github_discussion": [
          "print",
          "item.get"
        ],
        "create_github_epic": [
          "print",
          "item.get",
          "self.api_request"
        ],
        "sync_category": [
          "print",
          "self.create_github_epic",
          "self.create_github_discussion",
          "existing.get",
          "self.get_existing_issues",
          "item.get",
          "self.get_existing_discussions",
          "datetime.now",
          "open",
          "self.item_already_synced",
          "self.find_existing_by_title",
          "data.get",
          "self.create_github_issue",
          "file_path.exists",
          "json.load",
          "result.get"
        ],
        "validate_before_sync": [
          "print",
          "user_info.get",
          "self.api_request",
          "repo_info.get",
          "rate_limit.get",
          "core_limit.get"
        ],
        "run_sync": [
          "print",
          "r.get",
          "results.values",
          "datetime.now",
          "self.save_sync_log",
          "sum",
          "self.sync_category",
          "self.validate_before_sync"
        ],
        "main": [
          "print",
          "GitHubSyncManager",
          "argparse.ArgumentParser",
          "manager.run_sync",
          "len",
          "parser.parse_args",
          "parser.add_argument",
          "result.get"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "json",
        "os",
        "pathlib",
        "requests",
        "time",
        "typing"
      ],
      "hash": "1ee49d0d031a76692ccc03ff995d0a75d198818dcf2c1f625d6e9aee0828a7c9",
      "artifact_id": "aa586b45-a3ec-403f-8083-93fcdda72b08"
    },
    {
      "module_id": "src.scripts.create_comprehensive_index",
      "path": "src/scripts/create_comprehensive_index.py",
      "category": "core",
      "module_doc": "Comprehensive Project Index Creator\nScans ALL project directories for tasks, ideas, sessions, and concepts.\nProvides complete visibility into project state and unaccounted innovations.",
      "functions": [
        {
          "name": "main",
          "docstring": "Main execution function.",
          "line_range": [
            714,
            735
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            45,
            58
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_init_patterns",
          "docstring": "Initialize comprehensive extraction patterns.",
          "line_range": [
            60,
            92
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "scan_all_directories",
          "docstring": "Scan all configured directories comprehensively.",
          "line_range": [
            94,
            111
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_scan_directory",
          "docstring": "Scan a specific directory according to its configuration.",
          "line_range": [
            113,
            127
          ],
          "parameters": [
            "self",
            "directory",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "_scan_root_files",
          "docstring": "Scan root-level files.",
          "line_range": [
            129,
            133
          ],
          "parameters": [
            "self",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "_should_scan_file",
          "docstring": "Check if file should be scanned based on extension.",
          "line_range": [
            135,
            137
          ],
          "parameters": [
            "self",
            "file_path",
            "allowed_types"
          ],
          "decorators": []
        },
        {
          "name": "_scan_file",
          "docstring": "Scan individual file for project items.",
          "line_range": [
            139,
            152
          ],
          "parameters": [
            "self",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_from_text",
          "docstring": "Extract items from text/markdown files.",
          "line_range": [
            154,
            206
          ],
          "parameters": [
            "self",
            "file_path",
            "content",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_from_json",
          "docstring": "Extract items from JSON files.",
          "line_range": [
            208,
            225
          ],
          "parameters": [
            "self",
            "file_path",
            "content",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_create_item_from_match",
          "docstring": "Create ProjectItem from regex match.",
          "line_range": [
            227,
            249
          ],
          "parameters": [
            "self",
            "match",
            "content",
            "file_path",
            "item_type",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_create_checkbox_item",
          "docstring": "Create ProjectItem from checkbox match.",
          "line_range": [
            251,
            274
          ],
          "parameters": [
            "self",
            "match",
            "content",
            "file_path",
            "item_type",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_create_simple_item",
          "docstring": "Create simple ProjectItem.",
          "line_range": [
            276,
            297
          ],
          "parameters": [
            "self",
            "title",
            "content",
            "file_path",
            "item_type",
            "source_dir",
            "priority",
            "position"
          ],
          "decorators": []
        },
        {
          "name": "_detect_status",
          "docstring": "Detect item status from surrounding content.",
          "line_range": [
            299,
            308
          ],
          "parameters": [
            "self",
            "content",
            "position"
          ],
          "decorators": []
        },
        {
          "name": "_detect_priority",
          "docstring": "Detect item priority from surrounding content.",
          "line_range": [
            310,
            319
          ],
          "parameters": [
            "self",
            "content",
            "position",
            "default"
          ],
          "decorators": []
        },
        {
          "name": "_assess_strategic_value",
          "docstring": "Assess strategic value of item.",
          "line_range": [
            321,
            330
          ],
          "parameters": [
            "self",
            "title",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_context",
          "docstring": "Extract context around position.",
          "line_range": [
            332,
            336
          ],
          "parameters": [
            "self",
            "content",
            "position",
            "length"
          ],
          "decorators": []
        },
        {
          "name": "_detect_category",
          "docstring": "Detect item category.",
          "line_range": [
            338,
            351
          ],
          "parameters": [
            "self",
            "title",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_estimate_effort",
          "docstring": "Estimate effort required.",
          "line_range": [
            353,
            362
          ],
          "parameters": [
            "self",
            "title",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_tags",
          "docstring": "Extract relevant tags.",
          "line_range": [
            364,
            378
          ],
          "parameters": [
            "self",
            "title",
            "content",
            "source_dir"
          ],
          "decorators": []
        },
        {
          "name": "_is_noise_checkbox",
          "docstring": "Check if checkbox is noise (navigation, etc).",
          "line_range": [
            380,
            384
          ],
          "parameters": [
            "self",
            "text"
          ],
          "decorators": []
        },
        {
          "name": "_parse_json_files",
          "docstring": "Parse structured JSON files for existing data.",
          "line_range": [
            386,
            402
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_process_structured_json",
          "docstring": "Process structured JSON data.",
          "line_range": [
            404,
            419
          ],
          "parameters": [
            "self",
            "data",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_add_json_item",
          "docstring": "Add item from JSON structure.",
          "line_range": [
            421,
            441
          ],
          "parameters": [
            "self",
            "item",
            "file_path",
            "item_type"
          ],
          "decorators": []
        },
        {
          "name": "_assess_json_strategic_value",
          "docstring": "Assess strategic value from JSON item.",
          "line_range": [
            443,
            450
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "_extract_innovation_concepts",
          "docstring": "Extract innovation concepts from content.",
          "line_range": [
            452,
            482
          ],
          "parameters": [
            "self",
            "file_path",
            "content",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_enhance_items",
          "docstring": "Post-process items to enhance metadata and find relationships.",
          "line_range": [
            484,
            501
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_find_related_items",
          "docstring": "Find related items based on content similarity.",
          "line_range": [
            503,
            517
          ],
          "parameters": [
            "self",
            "item",
            "id_map",
            "title_map"
          ],
          "decorators": []
        },
        {
          "name": "generate_comprehensive_report",
          "docstring": "Generate comprehensive analysis report.",
          "line_range": [
            519,
            561
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_comprehensive_index",
          "docstring": "Save comprehensive index and reports.",
          "line_range": [
            563,
            582
          ],
          "parameters": [
            "self",
            "output_dir"
          ],
          "decorators": []
        },
        {
          "name": "_generate_analysis_report",
          "docstring": "Generate human-readable analysis report.",
          "line_range": [
            584,
            658
          ],
          "parameters": [
            "self",
            "report"
          ],
          "decorators": []
        },
        {
          "name": "_format_dict",
          "docstring": "Format dictionary for markdown display.",
          "line_range": [
            660,
            662
          ],
          "parameters": [
            "self",
            "d"
          ],
          "decorators": []
        },
        {
          "name": "_format_items_list",
          "docstring": "Format items list for markdown display.",
          "line_range": [
            664,
            677
          ],
          "parameters": [
            "self",
            "items"
          ],
          "decorators": []
        },
        {
          "name": "_extract_json_tasks",
          "docstring": "Extract tasks from JSON tasks array.",
          "line_range": [
            679,
            684
          ],
          "parameters": [
            "self",
            "tasks_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_json_ideas",
          "docstring": "Extract ideas from JSON ideas array.",
          "line_range": [
            686,
            691
          ],
          "parameters": [
            "self",
            "ideas_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_json_sessions",
          "docstring": "Extract sessions from JSON sessions array.",
          "line_range": [
            693,
            698
          ],
          "parameters": [
            "self",
            "sessions_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_json_array",
          "docstring": "Extract items from JSON array.",
          "line_range": [
            700,
            711
          ],
          "parameters": [
            "self",
            "array_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ProjectItem",
          "docstring": "Unified representation of any project item (task, idea, session, concept).",
          "line_range": [
            22,
            39
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ComprehensiveIndexer",
          "docstring": "Comprehensive indexer for all project content.",
          "line_range": [
            42,
            711
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                45,
                58
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_init_patterns",
              "docstring": "Initialize comprehensive extraction patterns.",
              "line_range": [
                60,
                92
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "scan_all_directories",
              "docstring": "Scan all configured directories comprehensively.",
              "line_range": [
                94,
                111
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_scan_directory",
              "docstring": "Scan a specific directory according to its configuration.",
              "line_range": [
                113,
                127
              ],
              "parameters": [
                "self",
                "directory",
                "config"
              ]
            },
            {
              "name": "_scan_root_files",
              "docstring": "Scan root-level files.",
              "line_range": [
                129,
                133
              ],
              "parameters": [
                "self",
                "config"
              ]
            },
            {
              "name": "_should_scan_file",
              "docstring": "Check if file should be scanned based on extension.",
              "line_range": [
                135,
                137
              ],
              "parameters": [
                "self",
                "file_path",
                "allowed_types"
              ]
            },
            {
              "name": "_scan_file",
              "docstring": "Scan individual file for project items.",
              "line_range": [
                139,
                152
              ],
              "parameters": [
                "self",
                "file_path",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_from_text",
              "docstring": "Extract items from text/markdown files.",
              "line_range": [
                154,
                206
              ],
              "parameters": [
                "self",
                "file_path",
                "content",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_from_json",
              "docstring": "Extract items from JSON files.",
              "line_range": [
                208,
                225
              ],
              "parameters": [
                "self",
                "file_path",
                "content",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_create_item_from_match",
              "docstring": "Create ProjectItem from regex match.",
              "line_range": [
                227,
                249
              ],
              "parameters": [
                "self",
                "match",
                "content",
                "file_path",
                "item_type",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_create_checkbox_item",
              "docstring": "Create ProjectItem from checkbox match.",
              "line_range": [
                251,
                274
              ],
              "parameters": [
                "self",
                "match",
                "content",
                "file_path",
                "item_type",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_create_simple_item",
              "docstring": "Create simple ProjectItem.",
              "line_range": [
                276,
                297
              ],
              "parameters": [
                "self",
                "title",
                "content",
                "file_path",
                "item_type",
                "source_dir",
                "priority",
                "position"
              ]
            },
            {
              "name": "_detect_status",
              "docstring": "Detect item status from surrounding content.",
              "line_range": [
                299,
                308
              ],
              "parameters": [
                "self",
                "content",
                "position"
              ]
            },
            {
              "name": "_detect_priority",
              "docstring": "Detect item priority from surrounding content.",
              "line_range": [
                310,
                319
              ],
              "parameters": [
                "self",
                "content",
                "position",
                "default"
              ]
            },
            {
              "name": "_assess_strategic_value",
              "docstring": "Assess strategic value of item.",
              "line_range": [
                321,
                330
              ],
              "parameters": [
                "self",
                "title",
                "content"
              ]
            },
            {
              "name": "_extract_context",
              "docstring": "Extract context around position.",
              "line_range": [
                332,
                336
              ],
              "parameters": [
                "self",
                "content",
                "position",
                "length"
              ]
            },
            {
              "name": "_detect_category",
              "docstring": "Detect item category.",
              "line_range": [
                338,
                351
              ],
              "parameters": [
                "self",
                "title",
                "content"
              ]
            },
            {
              "name": "_estimate_effort",
              "docstring": "Estimate effort required.",
              "line_range": [
                353,
                362
              ],
              "parameters": [
                "self",
                "title",
                "content"
              ]
            },
            {
              "name": "_extract_tags",
              "docstring": "Extract relevant tags.",
              "line_range": [
                364,
                378
              ],
              "parameters": [
                "self",
                "title",
                "content",
                "source_dir"
              ]
            },
            {
              "name": "_is_noise_checkbox",
              "docstring": "Check if checkbox is noise (navigation, etc).",
              "line_range": [
                380,
                384
              ],
              "parameters": [
                "self",
                "text"
              ]
            },
            {
              "name": "_parse_json_files",
              "docstring": "Parse structured JSON files for existing data.",
              "line_range": [
                386,
                402
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_process_structured_json",
              "docstring": "Process structured JSON data.",
              "line_range": [
                404,
                419
              ],
              "parameters": [
                "self",
                "data",
                "file_path"
              ]
            },
            {
              "name": "_add_json_item",
              "docstring": "Add item from JSON structure.",
              "line_range": [
                421,
                441
              ],
              "parameters": [
                "self",
                "item",
                "file_path",
                "item_type"
              ]
            },
            {
              "name": "_assess_json_strategic_value",
              "docstring": "Assess strategic value from JSON item.",
              "line_range": [
                443,
                450
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "_extract_innovation_concepts",
              "docstring": "Extract innovation concepts from content.",
              "line_range": [
                452,
                482
              ],
              "parameters": [
                "self",
                "file_path",
                "content",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_enhance_items",
              "docstring": "Post-process items to enhance metadata and find relationships.",
              "line_range": [
                484,
                501
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_find_related_items",
              "docstring": "Find related items based on content similarity.",
              "line_range": [
                503,
                517
              ],
              "parameters": [
                "self",
                "item",
                "id_map",
                "title_map"
              ]
            },
            {
              "name": "generate_comprehensive_report",
              "docstring": "Generate comprehensive analysis report.",
              "line_range": [
                519,
                561
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_comprehensive_index",
              "docstring": "Save comprehensive index and reports.",
              "line_range": [
                563,
                582
              ],
              "parameters": [
                "self",
                "output_dir"
              ]
            },
            {
              "name": "_generate_analysis_report",
              "docstring": "Generate human-readable analysis report.",
              "line_range": [
                584,
                658
              ],
              "parameters": [
                "self",
                "report"
              ]
            },
            {
              "name": "_format_dict",
              "docstring": "Format dictionary for markdown display.",
              "line_range": [
                660,
                662
              ],
              "parameters": [
                "self",
                "d"
              ]
            },
            {
              "name": "_format_items_list",
              "docstring": "Format items list for markdown display.",
              "line_range": [
                664,
                677
              ],
              "parameters": [
                "self",
                "items"
              ]
            },
            {
              "name": "_extract_json_tasks",
              "docstring": "Extract tasks from JSON tasks array.",
              "line_range": [
                679,
                684
              ],
              "parameters": [
                "self",
                "tasks_data",
                "file_path",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_json_ideas",
              "docstring": "Extract ideas from JSON ideas array.",
              "line_range": [
                686,
                691
              ],
              "parameters": [
                "self",
                "ideas_data",
                "file_path",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_json_sessions",
              "docstring": "Extract sessions from JSON sessions array.",
              "line_range": [
                693,
                698
              ],
              "parameters": [
                "self",
                "sessions_data",
                "file_path",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_json_array",
              "docstring": "Extract items from JSON array.",
              "line_range": [
                700,
                711
              ],
              "parameters": [
                "self",
                "array_data",
                "file_path",
                "source_dir",
                "priority"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._init_patterns",
          "Path"
        ],
        "_init_patterns": [
          "re.compile"
        ],
        "scan_all_directories": [
          "self._scan_directory",
          "self._scan_root_files",
          "logger.info",
          "len",
          "self._enhance_items",
          "self._parse_json_files"
        ],
        "_scan_directory": [
          "logger.warning",
          "dir_path.exists",
          "logger.info",
          "self._scan_file",
          "file_path.is_file",
          "dir_path.glob",
          "self._should_scan_file"
        ],
        "_scan_root_files": [
          "self._scan_file",
          "file_path.is_file",
          "self._should_scan_file"
        ],
        "_should_scan_file": [],
        "_scan_file": [
          "self._extract_from_json",
          "logger.error",
          "open",
          "f.read",
          "self._extract_from_text"
        ],
        "_extract_from_text": [
          "self._create_item_from_match",
          "self._is_noise_checkbox",
          "match.start",
          "self._extract_innovation_concepts",
          "self._create_checkbox_item",
          "self._create_simple_item",
          "match.group"
        ],
        "_extract_from_json": [
          "self._extract_json_array",
          "logger.warning",
          "self._extract_json_tasks",
          "self._extract_json_ideas",
          "isinstance",
          "json.loads",
          "self._extract_json_sessions"
        ],
        "_create_item_from_match": [
          "title.strip",
          "self._extract_tags",
          "match.start",
          "self._detect_category",
          "self._estimate_effort",
          "datetime.now",
          "self._extract_context",
          "self._detect_status",
          "self._assess_strategic_value",
          "ProjectItem",
          "str",
          "self._detect_priority",
          "match.group"
        ],
        "_create_checkbox_item": [
          "self._extract_tags",
          "match.start",
          "self._detect_category",
          "self._estimate_effort",
          "datetime.now",
          "self._extract_context",
          "self._assess_strategic_value",
          "ProjectItem",
          "str",
          "self._detect_priority",
          "match.group"
        ],
        "_create_simple_item": [
          "title.strip",
          "datetime.now",
          "self._extract_context",
          "str",
          "ProjectItem"
        ],
        "_detect_status": [
          "max"
        ],
        "_detect_priority": [
          "max"
        ],
        "_assess_strategic_value": [],
        "_extract_context": [
          "max",
          "len",
          "min"
        ],
        "_detect_category": [
          "any",
          "title.lower"
        ],
        "_estimate_effort": [
          "any"
        ],
        "_extract_tags": [
          "source_dir.replace",
          "tags.append",
          "title.lower"
        ],
        "_is_noise_checkbox": [
          "text.strip",
          "any",
          "text.lower",
          "len"
        ],
        "_parse_json_files": [
          "logger.error",
          "open",
          "self._process_structured_json",
          "file_path.exists",
          "json.load"
        ],
        "_process_structured_json": [
          "isinstance",
          "self._add_json_item"
        ],
        "_add_json_item": [
          "item.get",
          "datetime.now",
          "len",
          "self._assess_json_strategic_value",
          "str",
          "ProjectItem"
        ],
        "_assess_json_strategic_value": [
          "item.get"
        ],
        "_extract_innovation_concepts": [
          "innovation_lines.append",
          "line.strip",
          "datetime.now",
          "len",
          "self._extract_context",
          "enumerate",
          "content.find",
          "source_dir.replace",
          "ProjectItem",
          "str",
          "content.split"
        ],
        "_enhance_items": [
          "self._find_related_items",
          "logger.info",
          "re.sub"
        ],
        "_find_related_items": [
          "ref_type.upper",
          "re.findall",
          "related.append"
        ],
        "generate_comprehensive_report": [
          "by_strategic_value.get",
          "by_priority.get",
          "datetime.now",
          "len",
          "by_source.get",
          "asdict",
          "by_type.get",
          "by_status.get"
        ],
        "save_comprehensive_index": [
          "f.write",
          "logger.info",
          "len",
          "open",
          "self.generate_comprehensive_report",
          "json.dump",
          "os.makedirs",
          "self._generate_analysis_report"
        ],
        "_generate_analysis_report": [
          "self._format_dict",
          "len",
          "self._format_items_list"
        ],
        "_format_dict": [
          "sorted",
          "d.items"
        ],
        "_format_items_list": [
          "result.append"
        ],
        "_extract_json_tasks": [
          "isinstance",
          "self._add_json_item"
        ],
        "_extract_json_ideas": [
          "isinstance",
          "self._add_json_item"
        ],
        "_extract_json_sessions": [
          "isinstance",
          "self._add_json_item"
        ],
        "_extract_json_array": [
          "isinstance",
          "str",
          "self._add_json_item"
        ],
        "main": [
          "print",
          "logger.info",
          "ComprehensiveIndexer",
          "len",
          "indexer.scan_all_directories",
          "indexer.save_comprehensive_index",
          "by_strategic.get"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "Set",
        "asdict",
        "dataclass",
        "dataclasses",
        "datetime",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "typing"
      ],
      "hash": "3de71f291650a50e7e3c04fc660a7c31d909a1f929d375ec5324f909c0a81c97",
      "artifact_id": "20ed4aed-80b7-4459-a88b-3f79c1bd0128"
    },
    {
      "module_id": "src.scripts.validate_json",
      "path": "src/scripts/validate_json.py",
      "category": "core",
      "module_doc": "JSON Validation Script\nValidates JSON files against their respective schemas.",
      "functions": [
        {
          "name": "load_json",
          "docstring": "Load JSON file with error handling.",
          "line_range": [
            13,
            23
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_json",
          "docstring": "Validate a JSON file against a schema.",
          "line_range": [
            26,
            49
          ],
          "parameters": [
            "file_path",
            "schema_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json": [
          "print",
          "json.load",
          "open"
        ],
        "validate_json": [
          "print",
          "Path",
          "validator.validate",
          "Draft7Validator",
          "str",
          "load_json"
        ]
      },
      "dependencies": [
        "Draft7Validator",
        "Path",
        "ValidationError",
        "json",
        "jsonschema",
        "pathlib",
        "sys",
        "validate"
      ],
      "hash": "0d360b788079e8804f864e0cef5eb33006fb4dbae00eaaea95ef0d692e79640d",
      "artifact_id": "088da3ae-8d3b-419e-af15-eac4ee83d331"
    },
    {
      "module_id": "src.scripts.validate_refs",
      "path": "src/scripts/validate_refs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_references",
          "docstring": "",
          "line_range": [
            11,
            43
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            46,
            47
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_references": [
          "Path",
          "source_file.exists",
          "logger.warning",
          "logger.info",
          "logger.error",
          "enumerate",
          "target_file.exists",
          "json.dump",
          "idea.get",
          "broken_links.append",
          "json.load"
        ],
        "main": [
          "validate_references"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": "6c57e53f4e4e0afdb8e8c78f1e6d38f284721f6729a7197ff483ed29f5363607",
      "artifact_id": "6da2ecad-9ebd-41e2-b171-af1f533ac9f2"
    },
    {
      "module_id": "src.scripts.create_tasks_index",
      "path": "src/scripts/create_tasks_index.py",
      "category": "core",
      "module_doc": "Tasks Index Creator\nScans all documentation files and creates comprehensive index of tasks, EPICs, TODOs, and other actionable items.",
      "functions": [
        {
          "name": "main",
          "docstring": "Main execution function.",
          "line_range": [
            469,
            515
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            42,
            44
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_init_patterns",
          "docstring": "Initialize regex patterns for task extraction.",
          "line_range": [
            46,
            73
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "extract_from_markdown",
          "docstring": "Extract tasks from markdown file.",
          "line_range": [
            75,
            107
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_extract_status",
          "docstring": "Extract document status.",
          "line_range": [
            109,
            120
          ],
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_priority",
          "docstring": "Extract document priority.",
          "line_range": [
            122,
            135
          ],
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_date",
          "docstring": "Extract document date.",
          "line_range": [
            137,
            142
          ],
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_epics",
          "docstring": "Extract EPIC items.",
          "line_range": [
            144,
            168
          ],
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_tasks",
          "docstring": "Extract explicit task items.",
          "line_range": [
            170,
            194
          ],
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_todos",
          "docstring": "Extract TODO items.",
          "line_range": [
            196,
            219
          ],
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_phases",
          "docstring": "Extract phase/step items.",
          "line_range": [
            221,
            245
          ],
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_checkboxes",
          "docstring": "Extract checkbox items as tasks.",
          "line_range": [
            247,
            275
          ],
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_context",
          "docstring": "Extract surrounding context for a match.",
          "line_range": [
            277,
            286
          ],
          "parameters": [
            "self",
            "content",
            "start",
            "end",
            "context_lines"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            292,
            294
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "scan_documentation",
          "docstring": "Scan all documentation files for tasks.",
          "line_range": [
            296,
            314
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "generate_index",
          "docstring": "Generate comprehensive task index.",
          "line_range": [
            316,
            367
          ],
          "parameters": [
            "self",
            "tasks"
          ],
          "decorators": []
        },
        {
          "name": "generate_summary_report",
          "docstring": "Generate human-readable summary report.",
          "line_range": [
            369,
            446
          ],
          "parameters": [
            "self",
            "index"
          ],
          "decorators": []
        },
        {
          "name": "save_index",
          "docstring": "Save index and summary to files.",
          "line_range": [
            448,
            466
          ],
          "parameters": [
            "self",
            "index",
            "summary",
            "output_dir"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Task",
          "docstring": "Represents a single task or actionable item.",
          "line_range": [
            21,
            36
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "TaskExtractor",
          "docstring": "Extract tasks from various document formats.",
          "line_range": [
            39,
            286
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                42,
                44
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_init_patterns",
              "docstring": "Initialize regex patterns for task extraction.",
              "line_range": [
                46,
                73
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "extract_from_markdown",
              "docstring": "Extract tasks from markdown file.",
              "line_range": [
                75,
                107
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_extract_status",
              "docstring": "Extract document status.",
              "line_range": [
                109,
                120
              ],
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "_extract_priority",
              "docstring": "Extract document priority.",
              "line_range": [
                122,
                135
              ],
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "_extract_date",
              "docstring": "Extract document date.",
              "line_range": [
                137,
                142
              ],
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "_extract_epics",
              "docstring": "Extract EPIC items.",
              "line_range": [
                144,
                168
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_tasks",
              "docstring": "Extract explicit task items.",
              "line_range": [
                170,
                194
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_todos",
              "docstring": "Extract TODO items.",
              "line_range": [
                196,
                219
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_phases",
              "docstring": "Extract phase/step items.",
              "line_range": [
                221,
                245
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_checkboxes",
              "docstring": "Extract checkbox items as tasks.",
              "line_range": [
                247,
                275
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_context",
              "docstring": "Extract surrounding context for a match.",
              "line_range": [
                277,
                286
              ],
              "parameters": [
                "self",
                "content",
                "start",
                "end",
                "context_lines"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "TaskIndexGenerator",
          "docstring": "Generate comprehensive task index.",
          "line_range": [
            289,
            466
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                292,
                294
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "scan_documentation",
              "docstring": "Scan all documentation files for tasks.",
              "line_range": [
                296,
                314
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "generate_index",
              "docstring": "Generate comprehensive task index.",
              "line_range": [
                316,
                367
              ],
              "parameters": [
                "self",
                "tasks"
              ]
            },
            {
              "name": "generate_summary_report",
              "docstring": "Generate human-readable summary report.",
              "line_range": [
                369,
                446
              ],
              "parameters": [
                "self",
                "index"
              ]
            },
            {
              "name": "save_index",
              "docstring": "Save index and summary to files.",
              "line_range": [
                448,
                466
              ],
              "parameters": [
                "self",
                "index",
                "summary",
                "output_dir"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "TaskExtractor"
        ],
        "_init_patterns": [
          "re.compile"
        ],
        "extract_from_markdown": [
          "self._extract_tasks",
          "self._extract_checkboxes",
          "self._extract_todos",
          "self._extract_status",
          "self._extract_date",
          "open",
          "logger.error",
          "f.read",
          "self._extract_priority",
          "self._extract_epics",
          "tasks.extend",
          "self._extract_phases"
        ],
        "_extract_status": [
          "match.group"
        ],
        "_extract_priority": [
          "match.group"
        ],
        "_extract_date": [
          "datetime.now",
          "match.group"
        ],
        "_extract_epics": [
          "match.start",
          "tasks.append",
          "self._extract_context",
          "match.group",
          "str",
          "Task",
          "match.end"
        ],
        "_extract_tasks": [
          "match.start",
          "tasks.append",
          "self._extract_context",
          "match.group",
          "str",
          "Task",
          "match.end"
        ],
        "_extract_todos": [
          "match.start",
          "tasks.append",
          "match.group",
          "str",
          "Task"
        ],
        "_extract_phases": [
          "match.start",
          "tasks.append",
          "self._extract_context",
          "match.group",
          "str",
          "Task",
          "match.end"
        ],
        "_extract_checkboxes": [
          "task_title.upper",
          "match.start",
          "tasks.append",
          "match.group",
          "str",
          "any",
          "Task"
        ],
        "_extract_context": [
          "max",
          "len",
          "min",
          "context.strip",
          "content.split"
        ],
        "scan_documentation": [
          "docs_dir.glob",
          "logger.info",
          "docs_dir.exists",
          "all_tasks.extend"
        ],
        "generate_index": [
          "by_priority.items",
          "datetime.now",
          "by_file.items",
          "len",
          "by_category.items",
          "by_status.items",
          "asdict"
        ],
        "generate_summary_report": [
          "Path",
          "status.upper",
          "len",
          "priority.upper",
          "file_categories.items",
          "category.upper",
          "sorted"
        ],
        "save_index": [
          "output_path.mkdir",
          "Path",
          "f.write",
          "logger.info",
          "open",
          "json.dump"
        ],
        "main": [
          "print",
          "argparse.ArgumentParser",
          "generator.scan_documentation",
          "generator.generate_index",
          "logger.info",
          "len",
          "by_category.get",
          "parser.parse_args",
          "generator.save_index",
          "sorted",
          "by_category.items",
          "by_status.items",
          "parser.add_argument",
          "TaskIndexGenerator",
          "by_status.get",
          "generator.generate_summary_report"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "argparse",
        "asdict",
        "dataclass",
        "dataclasses",
        "datetime",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "typing"
      ],
      "hash": "8dc454229e01725267e1ece8a1363faf1501013df5f34f371865de1d1d386035",
      "artifact_id": "7b209704-fde9-46bb-9f19-cc2f3af83f6c"
    },
    {
      "module_id": "src.scripts.github_sync_manager_enhanced",
      "path": "src/scripts/github_sync_manager_enhanced.py",
      "category": "core",
      "module_doc": "Enhanced GitHub Sync Manager - \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u043b\u0443\u0447\u0448\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0438\u0437 full_project_rollout\n\u0418\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u0443\u0435\u0442: processing results + GitHub API + token management + CLI fallback",
      "functions": [
        {
          "name": "print_info",
          "docstring": "",
          "line_range": [
            25,
            26
          ],
          "parameters": [
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "print_success",
          "docstring": "",
          "line_range": [
            28,
            29
          ],
          "parameters": [
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "print_warning",
          "docstring": "",
          "line_range": [
            31,
            32
          ],
          "parameters": [
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "print_error",
          "docstring": "",
          "line_range": [
            34,
            35
          ],
          "parameters": [
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "print_step",
          "docstring": "",
          "line_range": [
            37,
            38
          ],
          "parameters": [
            "step",
            "total",
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Enhanced CLI interface",
          "line_range": [
            620,
            655
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            43,
            44
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_env_file",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            46,
            57
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_github_token",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0442\u043e\u043a\u0435\u043d\u0430",
          "line_range": [
            59,
            73
          ],
          "parameters": [
            "self",
            "token"
          ],
          "decorators": []
        },
        {
          "name": "check_gh_cli",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 GitHub CLI",
          "line_range": [
            75,
            82
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_token_from_gh_cli",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 \u0438\u0437 GitHub CLI",
          "line_range": [
            84,
            93
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_github_token",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c GitHub \u0442\u043e\u043a\u0435\u043d \u0441 multiple fallbacks\n\nReturns:\n    (token, method) \u0433\u0434\u0435 method = 'env' | 'cli' | 'none'",
          "line_range": [
            95,
            117
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            122,
            164
          ],
          "parameters": [
            "self",
            "repo_owner",
            "repo_name",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "detect_repo_from_git",
          "docstring": "\u0410\u0432\u0442\u043e\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 owner/repo \u0438\u0437 git remote",
          "line_range": [
            166,
            198
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_sync_log",
          "docstring": "Load previous sync results",
          "line_range": [
            200,
            211
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_sync_log",
          "docstring": "Save sync log",
          "line_range": [
            213,
            216
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "api_request",
          "docstring": "Enhanced API request with CLI fallback",
          "line_range": [
            218,
            231
          ],
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_api_request_direct",
          "docstring": "Direct API request",
          "line_range": [
            233,
            261
          ],
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_api_request_via_cli",
          "docstring": "API request via GitHub CLI",
          "line_range": [
            263,
            293
          ],
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "create_github_issue_enhanced",
          "docstring": "Enhanced issue creation (\u0438\u0437 create_github_issues.py)",
          "line_range": [
            295,
            359
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "_format_acceptance_criteria",
          "docstring": "Format acceptance criteria from item metadata",
          "line_range": [
            361,
            380
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "_format_implementation_notes",
          "docstring": "Format implementation notes",
          "line_range": [
            382,
            397
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "validate_before_sync",
          "docstring": "Enhanced validation",
          "line_range": [
            399,
            434
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_enhanced_sync",
          "docstring": "Enhanced sync with full project rollout integration",
          "line_range": [
            436,
            494
          ],
          "parameters": [
            "self",
            "categories"
          ],
          "decorators": []
        },
        {
          "name": "sync_category_enhanced",
          "docstring": "Enhanced category sync",
          "line_range": [
            496,
            554
          ],
          "parameters": [
            "self",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "item_already_synced",
          "docstring": "Check if item was already synced",
          "line_range": [
            556,
            560
          ],
          "parameters": [
            "self",
            "item",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "create_github_epic_enhanced",
          "docstring": "Enhanced epic creation",
          "line_range": [
            562,
            607
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "create_github_discussion_enhanced",
          "docstring": "Enhanced discussion creation (placeholder - requires GraphQL)",
          "line_range": [
            609,
            618
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": [
            18,
            23
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "GitHubTokenManager",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 GitHub \u0442\u043e\u043a\u0435\u043d\u0430\u043c\u0438 (\u0438\u0437 setup_github_token.sh)",
          "line_range": [
            40,
            117
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                43,
                44
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_env_file",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430",
              "line_range": [
                46,
                57
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_github_token",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0442\u043e\u043a\u0435\u043d\u0430",
              "line_range": [
                59,
                73
              ],
              "parameters": [
                "self",
                "token"
              ]
            },
            {
              "name": "check_gh_cli",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 GitHub CLI",
              "line_range": [
                75,
                82
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_token_from_gh_cli",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 \u0438\u0437 GitHub CLI",
              "line_range": [
                84,
                93
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_github_token",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c GitHub \u0442\u043e\u043a\u0435\u043d \u0441 multiple fallbacks\n\nReturns:\n    (token, method) \u0433\u0434\u0435 method = 'env' | 'cli' | 'none'",
              "line_range": [
                95,
                117
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "EnhancedGitHubSyncManager",
          "docstring": "\u0423\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u044b\u0439 GitHub Sync Manager \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 \u0432\u0441\u0435\u0445 \u043b\u0443\u0447\u0448\u0438\u0445 \u043f\u0440\u0430\u043a\u0442\u0438\u043a",
          "line_range": [
            119,
            618
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                122,
                164
              ],
              "parameters": [
                "self",
                "repo_owner",
                "repo_name",
                "dry_run"
              ]
            },
            {
              "name": "detect_repo_from_git",
              "docstring": "\u0410\u0432\u0442\u043e\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 owner/repo \u0438\u0437 git remote",
              "line_range": [
                166,
                198
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_sync_log",
              "docstring": "Load previous sync results",
              "line_range": [
                200,
                211
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_sync_log",
              "docstring": "Save sync log",
              "line_range": [
                213,
                216
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "api_request",
              "docstring": "Enhanced API request with CLI fallback",
              "line_range": [
                218,
                231
              ],
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ]
            },
            {
              "name": "_api_request_direct",
              "docstring": "Direct API request",
              "line_range": [
                233,
                261
              ],
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ]
            },
            {
              "name": "_api_request_via_cli",
              "docstring": "API request via GitHub CLI",
              "line_range": [
                263,
                293
              ],
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ]
            },
            {
              "name": "create_github_issue_enhanced",
              "docstring": "Enhanced issue creation (\u0438\u0437 create_github_issues.py)",
              "line_range": [
                295,
                359
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "_format_acceptance_criteria",
              "docstring": "Format acceptance criteria from item metadata",
              "line_range": [
                361,
                380
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "_format_implementation_notes",
              "docstring": "Format implementation notes",
              "line_range": [
                382,
                397
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "validate_before_sync",
              "docstring": "Enhanced validation",
              "line_range": [
                399,
                434
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run_enhanced_sync",
              "docstring": "Enhanced sync with full project rollout integration",
              "line_range": [
                436,
                494
              ],
              "parameters": [
                "self",
                "categories"
              ]
            },
            {
              "name": "sync_category_enhanced",
              "docstring": "Enhanced category sync",
              "line_range": [
                496,
                554
              ],
              "parameters": [
                "self",
                "category"
              ]
            },
            {
              "name": "item_already_synced",
              "docstring": "Check if item was already synced",
              "line_range": [
                556,
                560
              ],
              "parameters": [
                "self",
                "item",
                "category"
              ]
            },
            {
              "name": "create_github_epic_enhanced",
              "docstring": "Enhanced epic creation",
              "line_range": [
                562,
                607
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "create_github_discussion_enhanced",
              "docstring": "Enhanced discussion creation (placeholder - requires GraphQL)",
              "line_range": [
                609,
                618
              ],
              "parameters": [
                "self",
                "item"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "print_info": [
          "print"
        ],
        "print_success": [
          "print"
        ],
        "print_warning": [
          "print"
        ],
        "print_error": [
          "print"
        ],
        "print_step": [
          "print"
        ],
        "__init__": [
          "Path",
          "self.load_sync_log",
          "print_info",
          "self.detect_repo_from_git",
          "GitHubTokenManager"
        ],
        "load_env_file": [
          "value.strip",
          "Path",
          "line.split",
          "line.strip",
          "line.startswith",
          "open",
          "env_file.exists",
          "key.strip"
        ],
        "test_github_token": [
          "response.json",
          "requests.get"
        ],
        "check_gh_cli": [
          "subprocess.run"
        ],
        "get_token_from_gh_cli": [
          "subprocess.run"
        ],
        "get_github_token": [
          "self.test_github_token",
          "os.getenv",
          "self.check_gh_cli",
          "self.get_token_from_gh_cli",
          "print_warning"
        ],
        "detect_repo_from_git": [
          "path.split",
          "url.split",
          "url.replace",
          "len",
          "url.endswith",
          "print_info",
          "subprocess.run",
          "print_warning",
          "url.startswith"
        ],
        "load_sync_log": [
          "json.load",
          "open"
        ],
        "save_sync_log": [
          "json.dump",
          "open"
        ],
        "api_request": [
          "time.sleep",
          "self._api_request_via_cli",
          "print_error",
          "self._api_request_direct"
        ],
        "_api_request_direct": [
          "requests.post",
          "response.raise_for_status",
          "requests.get",
          "response.json",
          "print_error",
          "int",
          "method.upper",
          "ValueError",
          "print_warning",
          "requests.patch"
        ],
        "_api_request_via_cli": [
          "print_error",
          "json.dumps",
          "cmd.extend",
          "method.upper",
          "subprocess.run",
          "json.loads",
          "print_warning"
        ],
        "create_github_issue_enhanced": [
          "labels.append",
          "self.api_request",
          "self._format_implementation_notes",
          "item.get",
          "processing_meta.get",
          "print_success",
          "print_info",
          "self._format_acceptance_criteria"
        ],
        "_format_acceptance_criteria": [
          "criteria.extend",
          "item.get",
          "criteria.append"
        ],
        "_format_implementation_notes": [
          "item.get",
          "notes.append",
          "processing_meta.get"
        ],
        "validate_before_sync": [
          "user_info.get",
          "print_step",
          "self.api_request",
          "print_error",
          "print_success",
          "repo_info.get",
          "file_path.exists"
        ],
        "run_enhanced_sync": [
          "print",
          "print_step",
          "datetime.now",
          "self.sync_category_enhanced",
          "enumerate",
          "print_success",
          "print_info",
          "result.get",
          "self.save_sync_log",
          "self.validate_before_sync"
        ],
        "sync_category_enhanced": [
          "print_warning",
          "self.create_github_issue_enhanced",
          "item.get",
          "self.create_github_epic_enhanced",
          "datetime.now",
          "open",
          "print_error",
          "self.item_already_synced",
          "self.create_github_discussion_enhanced",
          "print_info",
          "data.get",
          "file_path.exists",
          "json.load",
          "result.get"
        ],
        "item_already_synced": [
          "item.get"
        ],
        "create_github_epic_enhanced": [
          "item.get",
          "print_success",
          "self.api_request",
          "print_info"
        ],
        "create_github_discussion_enhanced": [
          "item.get",
          "print_warning",
          "print_info"
        ],
        "main": [
          "argparse.ArgumentParser",
          "EnhancedGitHubSyncManager",
          "len",
          "print_error",
          "parser.parse_args",
          "print_success",
          "manager.run_enhanced_sync",
          "parser.add_argument",
          "result.get"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "json",
        "os",
        "pathlib",
        "requests",
        "subprocess",
        "sys",
        "time",
        "typing"
      ],
      "hash": "dee5ab49d5c48115c3b9b6df054a1160c44fb7addfa035958aa7db8619301d96",
      "artifact_id": "211e7953-04ee-423b-93bd-b1df17575816"
    },
    {
      "module_id": "src.scripts.collector",
      "path": "src/scripts/collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "apply_filters",
          "docstring": "",
          "line_range": [
            13,
            29
          ],
          "parameters": [
            "files",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "collect_files",
          "docstring": "",
          "line_range": [
            32,
            38
          ],
          "parameters": [
            "root_dir",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "generate_struct",
          "docstring": "",
          "line_range": [
            41,
            88
          ],
          "parameters": [
            "root_dir",
            "output"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            91,
            92
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "apply_filters": [
          "fnmatch.fnmatch",
          "filtered.append",
          "pattern.startswith"
        ],
        "collect_files": [
          "path.relative_to",
          "path.is_file",
          "str",
          "files.append",
          "root_dir.rglob",
          "apply_filters"
        ],
        "generate_struct": [
          "Path",
          "output_path.exists",
          "existing.get",
          "uuid.uuid4",
          "len",
          "logger.info",
          "json.dump",
          "output_path.open",
          "str",
          "collect_files",
          "json.load"
        ],
        "main": [
          "generate_struct"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "logging",
        "pathlib",
        "uuid"
      ],
      "hash": "251462380e2e135880f652ce7d9e6a1483d18a1202c336f76ac3f43536505049",
      "artifact_id": "a2480ccf-0bdf-439d-b059-1e0e9fd22d01"
    },
    {
      "module_id": "src.scripts.validate_epics",
      "path": "src/scripts/validate_epics.py",
      "category": "core",
      "module_doc": "Epic Data Validator\n\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0445 \u044d\u043f\u0438\u043a\u043e\u0432 \u043f\u0435\u0440\u0435\u0434 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435\u043c GitHub issues",
      "functions": [
        {
          "name": "validate_epic_structure",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u044d\u043f\u0438\u043a\u0430",
          "line_range": [
            12,
            35
          ],
          "parameters": [
            "epic"
          ],
          "decorators": []
        },
        {
          "name": "validate_task_structure",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            37,
            53
          ],
          "parameters": [
            "task",
            "epic_id"
          ],
          "decorators": []
        },
        {
          "name": "validate_priorities",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043e\u0432",
          "line_range": [
            55,
            68
          ],
          "parameters": [
            "data"
          ],
          "decorators": []
        },
        {
          "name": "validate_task_ids",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c ID \u0437\u0430\u0434\u0430\u0447",
          "line_range": [
            70,
            82
          ],
          "parameters": [
            "data"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438",
          "line_range": [
            84,
            131
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_epic_structure": [
          "errors.append",
          "isinstance"
        ],
        "validate_task_structure": [
          "errors.append",
          "task.get",
          "isinstance"
        ],
        "validate_priorities": [
          "errors.append",
          "task.get",
          "epic.get",
          "data.get"
        ],
        "validate_task_ids": [
          "errors.append",
          "epic.get",
          "task.get",
          "set",
          "data.get",
          "seen_ids.add"
        ],
        "main": [
          "print",
          "validate_task_structure",
          "Path",
          "validate_priorities",
          "validate_epic_structure",
          "epics_file.exists",
          "all_errors.extend",
          "e.get",
          "len",
          "open",
          "sys.exit",
          "epic.get",
          "all_errors.append",
          "isinstance",
          "sum",
          "json.load",
          "validate_task_ids"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "json",
        "pathlib",
        "sys",
        "typing"
      ],
      "hash": "43fb177eab31592c2b7c17c990f728cb1401eeba26a2e3191857ca218208a3df",
      "artifact_id": "f0fc5d8d-ee17-42fa-8f84-f47bfd2252e3"
    },
    {
      "module_id": "src.scripts.epic_roadmap_manager",
      "path": "src/scripts/epic_roadmap_manager.py",
      "category": "core",
      "module_doc": "Epic Roadmap Manager - \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430\u043c\u0438 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0441\u0435\u0441\u0441\u0438\u0439\n\n\u0424\u0443\u043d\u043a\u0446\u0438\u0438:\n- \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 roadmap \u0438 \u043f\u043b\u0430\u043d\u043e\u0432\n- \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u0441\u0435\u0441\u0441\u0438\u0439\n- \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u0441 GitHub epics\n- \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u043e\u0432",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            259,
            291
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            19,
            22
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_roadmap",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c roadmap \u0438\u0437 \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            24,
            31
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_roadmap",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c roadmap \u0432 \u0444\u0430\u0439\u043b",
          "line_range": [
            33,
            40
          ],
          "parameters": [
            "self",
            "roadmap"
          ],
          "decorators": []
        },
        {
          "name": "show_overview",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043e\u0431\u0437\u043e\u0440 roadmap",
          "line_range": [
            42,
            80
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "show_epic_details",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u044d\u043f\u0438\u043a\u0430",
          "line_range": [
            82,
            125
          ],
          "parameters": [
            "self",
            "epic_id"
          ],
          "decorators": []
        },
        {
          "name": "start_session",
          "docstring": "\u041d\u0430\u0447\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043d\u0430\u0434 \u0441\u0435\u0441\u0441\u0438\u0435\u0439",
          "line_range": [
            127,
            189
          ],
          "parameters": [
            "self",
            "epic_id",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "complete_session",
          "docstring": "\u0417\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e",
          "line_range": [
            191,
            257
          ],
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "EpicRoadmapManager",
          "docstring": "",
          "line_range": [
            18,
            257
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                19,
                22
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_roadmap",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c roadmap \u0438\u0437 \u0444\u0430\u0439\u043b\u0430",
              "line_range": [
                24,
                31
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_roadmap",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c roadmap \u0432 \u0444\u0430\u0439\u043b",
              "line_range": [
                33,
                40
              ],
              "parameters": [
                "self",
                "roadmap"
              ]
            },
            {
              "name": "show_overview",
              "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043e\u0431\u0437\u043e\u0440 roadmap",
              "line_range": [
                42,
                80
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "show_epic_details",
              "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u044d\u043f\u0438\u043a\u0430",
              "line_range": [
                82,
                125
              ],
              "parameters": [
                "self",
                "epic_id"
              ]
            },
            {
              "name": "start_session",
              "docstring": "\u041d\u0430\u0447\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043d\u0430\u0434 \u0441\u0435\u0441\u0441\u0438\u0435\u0439",
              "line_range": [
                127,
                189
              ],
              "parameters": [
                "self",
                "epic_id",
                "session_id"
              ]
            },
            {
              "name": "complete_session",
              "docstring": "\u0417\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e",
              "line_range": [
                191,
                257
              ],
              "parameters": [
                "self",
                "session_id"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "load_roadmap": [
          "print",
          "json.load",
          "open"
        ],
        "save_roadmap": [
          "json.dump",
          "datetime.now",
          "print",
          "open"
        ],
        "show_overview": [
          "print",
          "self.load_roadmap",
          "epic.get",
          "roadmap.get",
          "stats.get",
          "epics.items"
        ],
        "show_epic_details": [
          "print",
          "self.load_roadmap",
          "session.get",
          "len",
          "epic.get",
          "roadmap.get",
          "epic_data.get"
        ],
        "start_session": [
          "print",
          "self.save_roadmap",
          "self.load_roadmap",
          "session.get",
          "datetime.now",
          "sess.get",
          "epic.get",
          "open",
          "json.dump",
          "os.makedirs",
          "roadmap.get",
          "epic_data.get"
        ],
        "complete_session": [
          "print",
          "current_session.get",
          "self.save_roadmap",
          "self.load_roadmap",
          "session.get",
          "datetime.now",
          "sessions_log.append",
          "sess.get",
          "open",
          "epic.get",
          "all",
          "json.dump",
          "os.makedirs",
          "os.remove",
          "roadmap.get",
          "json.load"
        ],
        "main": [
          "print",
          "manager.start_session",
          "argparse.ArgumentParser",
          "EpicRoadmapManager",
          "manager.show_overview",
          "parser.parse_args",
          "parser.add_argument",
          "manager.show_epic_details",
          "manager.complete_session"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "datetime",
        "json",
        "os",
        "pathlib"
      ],
      "hash": "5125fc24bf131dbbbda814a26f75ecff0e8d6cebde166de88b637ee22ac7251e",
      "artifact_id": "99fbae1c-4f79-4a16-bc4b-2b6507bd2aa3"
    },
    {
      "module_id": "src.scripts.deploy_embedded_files",
      "path": "src/scripts/deploy_embedded_files.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_json",
          "docstring": "",
          "line_range": [
            931,
            941
          ],
          "parameters": [
            "data",
            "schema",
            "base_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_files",
          "docstring": "",
          "line_range": [
            944,
            950
          ],
          "parameters": [
            "target_dir",
            "backup_root"
          ],
          "decorators": []
        },
        {
          "name": "deploy_embedded_files",
          "docstring": "",
          "line_range": [
            953,
            1007
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            1010,
            1011
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_json": [
          "RefResolver",
          "logger.warning",
          "validate",
          "logger.error"
        ],
        "backup_files": [
          "datetime.now",
          "target_dir.exists",
          "shutil.copytree",
          "logger.info"
        ],
        "deploy_embedded_files": [
          "Path",
          "logger.warning",
          "Path.cwd",
          "f.write",
          "backup_files",
          "logger.info",
          "logger.error",
          "validate_json",
          "json.dump",
          "target_path.exists",
          "EMBEDDED_FILES.get",
          "target_path.open"
        ],
        "main": [
          "deploy_embedded_files"
        ]
      },
      "dependencies": [
        "Path",
        "RefResolver",
        "ValidationError",
        "datetime",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "shutil",
        "validate"
      ],
      "hash": "965c984b688301f0d0c65fc65cc8c95a878218aec94afab5dca3b3c7f65cea19",
      "artifact_id": "7765a055-bf6d-4012-9df8-78ee940b3e9a"
    },
    {
      "module_id": "src.scripts.team.__init__",
      "path": "src/scripts/team/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "artifact_id": "21cbcb59-cbc1-492e-a519-4f4d672312e5"
    },
    {
      "module_id": "src.llmstruct.cli_core",
      "path": "src/llmstruct/cli_core.py",
      "category": "core",
      "module_doc": "Core CLI functionality and main loop.",
      "functions": [
        {
          "name": "create_cli_core",
          "docstring": "Factory function to create CLI core instance.",
          "line_range": [
            110,
            112
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize CLI core with root directory.",
          "line_range": [
            28,
            35
          ],
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "setup_cache",
          "docstring": "Initialize cache if enabled in config.",
          "line_range": [
            37,
            53
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "setup_copilot",
          "docstring": "Initialize Copilot integration if enabled.",
          "line_range": [
            55,
            63
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_interactive_mode",
          "docstring": "Run the interactive CLI mode.",
          "line_range": [
            65,
            97
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cleanup",
          "docstring": "Clean up resources.",
          "line_range": [
            99,
            107
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLICore",
          "docstring": "Core CLI class handling main loop and coordination.",
          "line_range": [
            25,
            107
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize CLI core with root directory.",
              "line_range": [
                28,
                35
              ],
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "setup_cache",
              "docstring": "Initialize cache if enabled in config.",
              "line_range": [
                37,
                53
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "setup_copilot",
              "docstring": "Initialize Copilot integration if enabled.",
              "line_range": [
                55,
                63
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run_interactive_mode",
              "docstring": "Run the interactive CLI mode.",
              "line_range": [
                65,
                97
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cleanup",
              "docstring": "Clean up resources.",
              "line_range": [
                99,
                107
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "CLIConfig",
          "CommandProcessor",
          "CLIUtils"
        ],
        "setup_cache": [
          "JSONCache",
          "Path",
          "cache_config.get",
          "cache_path.mkdir",
          "logging.warning",
          "str",
          "logging.info"
        ],
        "setup_copilot": [
          "logging.info",
          "copilot_config.get",
          "initialize_copilot",
          "logging.warning"
        ],
        "run_interactive_mode": [
          "print",
          "user_input.lower",
          "user_input.startswith",
          "logging.error",
          "input",
          "self.setup_cache",
          "self.setup_copilot",
          "self.cleanup"
        ],
        "cleanup": [
          "logging.info"
        ],
        "create_cli_core": [
          "CLICore"
        ]
      },
      "dependencies": [
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "CopilotContextManager",
        "JSONCache",
        "Optional",
        "Path",
        "cli_commands",
        "cli_config",
        "cli_utils",
        "copilot",
        "initialize_copilot",
        "llmstruct.cache",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": "57a534c55c12bacfaf26ed4b4124fe97a3c2559253b5a62346e9c9f0368e5132",
      "artifact_id": "23a33b2e-642c-4d17-aaa5-ec170c78d2ed"
    },
    {
      "module_id": "src.llmstruct.workspace",
      "path": "src/llmstruct/workspace.py",
      "category": "core",
      "module_doc": "Workspace State & Mode Management System\nEnhanced AI-Human Collaboration with Context Boundaries",
      "functions": [
        {
          "name": "create_workspace_manager",
          "docstring": "Factory function to create workspace manager",
          "line_range": [
            461,
            463
          ],
          "parameters": [
            "workspace_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            28,
            36
          ],
          "parameters": [
            "self",
            "workspace_dir"
          ],
          "decorators": []
        },
        {
          "name": "_load_or_create_state",
          "docstring": "Load existing workspace state or create default",
          "line_range": [
            38,
            75
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_permission_templates",
          "docstring": "Load permission templates for different modes",
          "line_range": [
            77,
            128
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "set_mode",
          "docstring": "Set workspace mode(s) with smart combination logic.\n\nArgs:\n    modes: Single mode string \"[code]\" or list of modes [\"code\", \"debug\"]\n    session_id: Optional session identifier\n    \nReturns:\n    Dict with mode change result and applied permissions",
          "line_range": [
            130,
            176
          ],
          "parameters": [
            "self",
            "modes",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "_parse_modes_from_string",
          "docstring": "Parse modes from string like '[code][debug]' to ['code', 'debug']",
          "line_range": [
            178,
            182
          ],
          "parameters": [
            "self",
            "mode_string"
          ],
          "decorators": []
        },
        {
          "name": "_combine_mode_permissions",
          "docstring": "Smart combination of mode permissions (Decision: C - Smart Combination)",
          "line_range": [
            184,
            216
          ],
          "parameters": [
            "self",
            "modes"
          ],
          "decorators": []
        },
        {
          "name": "_get_mode_combination_name",
          "docstring": "Get descriptive name for mode combination",
          "line_range": [
            218,
            232
          ],
          "parameters": [
            "self",
            "modes"
          ],
          "decorators": []
        },
        {
          "name": "get_current_state",
          "docstring": "Get current workspace state",
          "line_range": [
            234,
            236
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "check_permission",
          "docstring": "Check if operation is permitted under current mode.\n\nArgs:\n    operation: Operation type (e.g., \"write_file\", \"run_command\")\n    target: Optional target (file path, command, etc.)\n    \nReturns:\n    Dict with permission result and reasoning",
          "line_range": [
            238,
            302
          ],
          "parameters": [
            "self",
            "operation",
            "target"
          ],
          "decorators": []
        },
        {
          "name": "_get_required_capability",
          "docstring": "Map operations to required capabilities",
          "line_range": [
            304,
            320
          ],
          "parameters": [
            "self",
            "operation"
          ],
          "decorators": []
        },
        {
          "name": "_is_restricted_target",
          "docstring": "Check if target matches any file restrictions",
          "line_range": [
            322,
            334
          ],
          "parameters": [
            "self",
            "target"
          ],
          "decorators": []
        },
        {
          "name": "set_emergency_override",
          "docstring": "Grant emergency override (Hybrid B+C: Escalation + Time-boxing)\n\nArgs:\n    level: Override level (1=extend permissions, 2=filesystem, 3=system)\n    reason: Reason for override\n    duration_minutes: Override duration",
          "line_range": [
            336,
            365
          ],
          "parameters": [
            "self",
            "level",
            "reason",
            "duration_minutes"
          ],
          "decorators": []
        },
        {
          "name": "_check_emergency_override",
          "docstring": "Check if emergency override is active and not expired",
          "line_range": [
            367,
            381
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_strict_mode",
          "docstring": "Integration with existing strict mode system",
          "line_range": [
            383,
            387
          ],
          "parameters": [
            "self",
            "strict_tags"
          ],
          "decorators": []
        },
        {
          "name": "add_decision_workflow",
          "docstring": "Add decision to workflow tracking (for [decide] mode)",
          "line_range": [
            389,
            396
          ],
          "parameters": [
            "self",
            "decision_id",
            "decision_data"
          ],
          "decorators": []
        },
        {
          "name": "get_workspace_status",
          "docstring": "Get comprehensive workspace status for debugging and display",
          "line_range": [
            398,
            420
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_override_time_remaining",
          "docstring": "Get formatted time remaining for emergency override",
          "line_range": [
            422,
            437
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_state",
          "docstring": "Save current state to file",
          "line_range": [
            439,
            442
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_mode_status",
          "docstring": "Get formatted status string for CLI display",
          "line_range": [
            444,
            458
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "WorkspaceStateManager",
          "docstring": "Core workspace state management with mode-based permissions and context boundaries.\n\nFeatures:\n- Multi-dimensional mode system ([code][debug], [discuss][meta])\n- Hybrid permission system (capabilities + file restrictions)\n- Smart mode combinations with context awareness\n- Emergency override protocols with time-boxing\n- Integration with existing strict mode system",
          "line_range": [
            16,
            458
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                28,
                36
              ],
              "parameters": [
                "self",
                "workspace_dir"
              ]
            },
            {
              "name": "_load_or_create_state",
              "docstring": "Load existing workspace state or create default",
              "line_range": [
                38,
                75
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_permission_templates",
              "docstring": "Load permission templates for different modes",
              "line_range": [
                77,
                128
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "set_mode",
              "docstring": "Set workspace mode(s) with smart combination logic.\n\nArgs:\n    modes: Single mode string \"[code]\" or list of modes [\"code\", \"debug\"]\n    session_id: Optional session identifier\n    \nReturns:\n    Dict with mode change result and applied permissions",
              "line_range": [
                130,
                176
              ],
              "parameters": [
                "self",
                "modes",
                "session_id"
              ]
            },
            {
              "name": "_parse_modes_from_string",
              "docstring": "Parse modes from string like '[code][debug]' to ['code', 'debug']",
              "line_range": [
                178,
                182
              ],
              "parameters": [
                "self",
                "mode_string"
              ]
            },
            {
              "name": "_combine_mode_permissions",
              "docstring": "Smart combination of mode permissions (Decision: C - Smart Combination)",
              "line_range": [
                184,
                216
              ],
              "parameters": [
                "self",
                "modes"
              ]
            },
            {
              "name": "_get_mode_combination_name",
              "docstring": "Get descriptive name for mode combination",
              "line_range": [
                218,
                232
              ],
              "parameters": [
                "self",
                "modes"
              ]
            },
            {
              "name": "get_current_state",
              "docstring": "Get current workspace state",
              "line_range": [
                234,
                236
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "check_permission",
              "docstring": "Check if operation is permitted under current mode.\n\nArgs:\n    operation: Operation type (e.g., \"write_file\", \"run_command\")\n    target: Optional target (file path, command, etc.)\n    \nReturns:\n    Dict with permission result and reasoning",
              "line_range": [
                238,
                302
              ],
              "parameters": [
                "self",
                "operation",
                "target"
              ]
            },
            {
              "name": "_get_required_capability",
              "docstring": "Map operations to required capabilities",
              "line_range": [
                304,
                320
              ],
              "parameters": [
                "self",
                "operation"
              ]
            },
            {
              "name": "_is_restricted_target",
              "docstring": "Check if target matches any file restrictions",
              "line_range": [
                322,
                334
              ],
              "parameters": [
                "self",
                "target"
              ]
            },
            {
              "name": "set_emergency_override",
              "docstring": "Grant emergency override (Hybrid B+C: Escalation + Time-boxing)\n\nArgs:\n    level: Override level (1=extend permissions, 2=filesystem, 3=system)\n    reason: Reason for override\n    duration_minutes: Override duration",
              "line_range": [
                336,
                365
              ],
              "parameters": [
                "self",
                "level",
                "reason",
                "duration_minutes"
              ]
            },
            {
              "name": "_check_emergency_override",
              "docstring": "Check if emergency override is active and not expired",
              "line_range": [
                367,
                381
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_strict_mode",
              "docstring": "Integration with existing strict mode system",
              "line_range": [
                383,
                387
              ],
              "parameters": [
                "self",
                "strict_tags"
              ]
            },
            {
              "name": "add_decision_workflow",
              "docstring": "Add decision to workflow tracking (for [decide] mode)",
              "line_range": [
                389,
                396
              ],
              "parameters": [
                "self",
                "decision_id",
                "decision_data"
              ]
            },
            {
              "name": "get_workspace_status",
              "docstring": "Get comprehensive workspace status for debugging and display",
              "line_range": [
                398,
                420
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_override_time_remaining",
              "docstring": "Get formatted time remaining for emergency override",
              "line_range": [
                422,
                437
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_state",
              "docstring": "Save current state to file",
              "line_range": [
                439,
                442
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_mode_status",
              "docstring": "Get formatted status string for CLI display",
              "line_range": [
                444,
                458
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._load_or_create_state",
          "Path",
          "self._load_permission_templates"
        ],
        "_load_or_create_state": [
          "datetime.now",
          "json.load",
          "self._save_state",
          "open"
        ],
        "_load_permission_templates": [],
        "set_mode": [
          "self._parse_modes_from_string",
          "combined_permissions.get",
          "self._get_mode_combination_name",
          "datetime.now",
          "self._save_state",
          "len",
          "self._combine_mode_permissions",
          "isinstance"
        ],
        "_parse_modes_from_string": [
          "re.findall"
        ],
        "_combine_mode_permissions": [
          "list",
          "logger.info",
          "sorted",
          "set",
          "template.get"
        ],
        "_get_mode_combination_name": [
          "combination_names.get",
          "sorted"
        ],
        "get_current_state": [],
        "check_permission": [
          "self._check_emergency_override",
          "self._is_restricted_target",
          "permissions.get",
          "self._get_required_capability"
        ],
        "_get_required_capability": [
          "capability_map.items",
          "operation.startswith"
        ],
        "_is_restricted_target": [
          "fnmatch.fnmatch",
          "target.startswith",
          "restriction.startswith"
        ],
        "set_emergency_override": [
          "datetime.now",
          "timedelta",
          "self._save_state",
          "expires_at.isoformat"
        ],
        "_check_emergency_override": [
          "datetime.fromisoformat",
          "datetime.now",
          "override.get",
          "self._save_state"
        ],
        "integrate_strict_mode": [
          "datetime.now",
          "self._save_state"
        ],
        "add_decision_workflow": [
          "datetime.now",
          "self._save_state"
        ],
        "get_workspace_status": [
          "self._get_mode_combination_name",
          "override.get",
          "len",
          "self._get_override_time_remaining"
        ],
        "_get_override_time_remaining": [
          "override.get",
          "remaining.total_seconds",
          "datetime.now",
          "int",
          "datetime.fromisoformat"
        ],
        "_save_state": [
          "json.dump",
          "open"
        ],
        "get_mode_status": [
          "self._get_mode_combination_name",
          "override.get"
        ],
        "create_workspace_manager": [
          "WorkspaceStateManager"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "Set",
        "Union",
        "datetime",
        "fnmatch",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "timedelta",
        "timezone",
        "typing"
      ],
      "hash": "781995ee11b41c001f3ce9ac5be89cd99963beb044d8020550f54edb7993eee5",
      "artifact_id": "e6f0e1b8-334b-4c3c-9628-b53befd7650f"
    },
    {
      "module_id": "src.llmstruct.cache",
      "path": "src/llmstruct/cache.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize SQLite cache for JSON files.",
          "line_range": [
            21,
            25
          ],
          "parameters": [
            "self",
            "db_path"
          ],
          "decorators": []
        },
        {
          "name": "create_tables",
          "docstring": "Create tables for metadata and file paths.",
          "line_range": [
            27,
            49
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cache_json",
          "docstring": "Cache JSON metadata and store full file path.",
          "line_range": [
            51,
            90
          ],
          "parameters": [
            "self",
            "json_path",
            "artifact_id",
            "summary",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "get_metadata",
          "docstring": "Retrieve metadata by artifact_id.",
          "line_range": [
            92,
            108
          ],
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "get_full_json",
          "docstring": "Load full JSON by artifact_id.",
          "line_range": [
            110,
            126
          ],
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Close database connection.",
          "line_range": [
            128,
            130
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JSONCache",
          "docstring": "",
          "line_range": [
            20,
            130
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize SQLite cache for JSON files.",
              "line_range": [
                21,
                25
              ],
              "parameters": [
                "self",
                "db_path"
              ]
            },
            {
              "name": "create_tables",
              "docstring": "Create tables for metadata and file paths.",
              "line_range": [
                27,
                49
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cache_json",
              "docstring": "Cache JSON metadata and store full file path.",
              "line_range": [
                51,
                90
              ],
              "parameters": [
                "self",
                "json_path",
                "artifact_id",
                "summary",
                "tags"
              ]
            },
            {
              "name": "get_metadata",
              "docstring": "Retrieve metadata by artifact_id.",
              "line_range": [
                92,
                108
              ],
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "get_full_json",
              "docstring": "Load full JSON by artifact_id.",
              "line_range": [
                110,
                126
              ],
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "close",
              "docstring": "Close database connection.",
              "line_range": [
                128,
                130
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.create_tables",
          "sqlite3.connect"
        ],
        "create_tables": [],
        "cache_json": [
          "logging.info",
          "Path",
          "json_file.exists",
          "logging.error",
          "open",
          "json.dumps",
          "content.encode",
          "str",
          "f.read",
          "hashlib.sha256"
        ],
        "get_metadata": [
          "json.loads",
          "cursor.fetchone"
        ],
        "get_full_json": [
          "logging.error",
          "json.load",
          "cursor.fetchone",
          "open"
        ],
        "close": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "hashlib",
        "json",
        "logging",
        "pathlib",
        "sqlite3",
        "typing"
      ],
      "hash": "d4439792ecb8b18d2fb3eac280ee2e7e338722a019a5fbbceee3128a9985ef09",
      "artifact_id": "36784161-432c-4bf6-afae-1edfe4ce4b00"
    },
    {
      "module_id": "src.llmstruct.json_selector",
      "path": "src/llmstruct/json_selector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_json",
          "docstring": "Filter JSON data by key-value pair and select fields.",
          "line_range": [
            20,
            46
          ],
          "parameters": [
            "data",
            "filter_key",
            "filter_value",
            "fields"
          ],
          "decorators": []
        },
        {
          "name": "select_json",
          "docstring": "Load and filter JSON file, optionally parsing partially.",
          "line_range": [
            49,
            116
          ],
          "parameters": [
            "json_path",
            "filter_key",
            "filter_value",
            "fields",
            "partial"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_json": [
          "isinstance",
          "item.get",
          "filtered.append",
          "data.get"
        ],
        "select_json": [
          "current_item.get",
          "Path",
          "prefix.startswith",
          "json_file.exists",
          "f.seek",
          "logging.error",
          "ijson.parse",
          "open",
          "filtered.append",
          "path.append",
          "json.load",
          "filter_json"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "ijson",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": "8d3216b4eff05bdde8725caedab745c57ef0c2d52cd84b07f7cabc7b15256d2c",
      "artifact_id": "3392141d-3b00-4a9d-9541-6f6e82f8618a"
    },
    {
      "module_id": "src.llmstruct.workflow_orchestrator",
      "path": "src/llmstruct/workflow_orchestrator.py",
      "category": "core",
      "module_doc": "AI Workflow Orchestrator - Integration Layer for Existing llmstruct Architecture\nExtends CopilotContextManager and SmartContextOrchestrator instead of duplicating",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface that integrates with existing llmstruct architecture",
          "line_range": [
            650,
            687
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__post_init__",
          "docstring": "",
          "line_range": [
            62,
            70
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__post_init__",
          "docstring": "",
          "line_range": [
            89,
            101
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            110,
            151
          ],
          "parameters": [
            "self",
            "project_root",
            "debug"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_onboarding_guide",
          "docstring": "Generate comprehensive AI onboarding guide using existing architecture",
          "line_range": [
            153,
            163
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_project_overview_from_struct",
          "docstring": "Get project overview from struct.json analysis",
          "line_range": [
            165,
            183
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_existing_architecture_guide",
          "docstring": "Guide to existing llmstruct architecture",
          "line_range": [
            185,
            207
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_copilot_integration_guide",
          "docstring": "Guide for proper CopilotContextManager usage",
          "line_range": [
            209,
            222
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_context_orchestration_guide",
          "docstring": "Guide for SmartContextOrchestrator usage",
          "line_range": [
            224,
            239
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_struct_analysis_guide",
          "docstring": "Guide for proper struct.json analysis approach",
          "line_range": [
            241,
            259
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_current_context",
          "docstring": "Get comprehensive current context using existing architecture",
          "line_range": [
            261,
            300
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_struct_analysis",
          "docstring": "Analyze struct.json for current codebase state",
          "line_range": [
            302,
            356
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_architecture_from_struct",
          "docstring": "Analyze architecture patterns from struct.json",
          "line_range": [
            358,
            376
          ],
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_function_duplication",
          "docstring": "Analyze function duplication across modules",
          "line_range": [
            378,
            399
          ],
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_complexity_metrics",
          "docstring": "Calculate complexity metrics from struct.json",
          "line_range": [
            401,
            417
          ],
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_complexity_score",
          "docstring": "Calculate overall complexity score",
          "line_range": [
            419,
            432
          ],
          "parameters": [
            "self",
            "stats"
          ],
          "decorators": []
        },
        {
          "name": "_get_orchestrator_state",
          "docstring": "Get SmartContextOrchestrator state",
          "line_range": [
            434,
            445
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "analyze_codebase_for_duplicates",
          "docstring": "Analyze codebase for duplicate functions using struct.json",
          "line_range": [
            447,
            495
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "sync_with_existing_architecture",
          "docstring": "Sync with existing llmstruct architecture instead of duplicating",
          "line_range": [
            497,
            520
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "create_task",
          "docstring": "Create new task (this is new functionality, not duplication)",
          "line_range": [
            526,
            554
          ],
          "parameters": [
            "self",
            "title",
            "description",
            "priority",
            "tags",
            "dependencies"
          ],
          "decorators": []
        },
        {
          "name": "get_active_tasks",
          "docstring": "Get all active tasks",
          "line_range": [
            556,
            564
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_json_safe",
          "docstring": "Safe JSON loading with error handling",
          "line_range": [
            566,
            576
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_save_json_safe",
          "docstring": "Safe JSON saving with error handling",
          "line_range": [
            578,
            587
          ],
          "parameters": [
            "self",
            "file_path",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_get_active_session_context",
          "docstring": "Get current session context",
          "line_range": [
            590,
            594
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_identify_key_components",
          "docstring": "Identify key components from struct analysis",
          "line_range": [
            596,
            607
          ],
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_get_workflow_patterns",
          "docstring": "Define workflow patterns that integrate with existing architecture",
          "line_range": [
            609,
            629
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_available_commands",
          "docstring": "Available commands that work with existing architecture",
          "line_range": [
            631,
            647
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TaskStatus",
          "docstring": "",
          "line_range": [
            29,
            34
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "SessionType",
          "docstring": "",
          "line_range": [
            37,
            42
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "Task",
          "docstring": "Structured task representation",
          "line_range": [
            46,
            70
          ],
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "",
              "line_range": [
                62,
                70
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "Session",
          "docstring": "AI work session with context and goals",
          "line_range": [
            74,
            101
          ],
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "",
              "line_range": [
                89,
                101
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "WorkflowOrchestrator",
          "docstring": "Integration layer that extends existing llmstruct architecture\nUses CopilotContextManager, SmartContextOrchestrator, and struct.json analysis",
          "line_range": [
            104,
            647
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                110,
                151
              ],
              "parameters": [
                "self",
                "project_root",
                "debug"
              ]
            },
            {
              "name": "get_ai_onboarding_guide",
              "docstring": "Generate comprehensive AI onboarding guide using existing architecture",
              "line_range": [
                153,
                163
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_project_overview_from_struct",
              "docstring": "Get project overview from struct.json analysis",
              "line_range": [
                165,
                183
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_existing_architecture_guide",
              "docstring": "Guide to existing llmstruct architecture",
              "line_range": [
                185,
                207
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_copilot_integration_guide",
              "docstring": "Guide for proper CopilotContextManager usage",
              "line_range": [
                209,
                222
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_context_orchestration_guide",
              "docstring": "Guide for SmartContextOrchestrator usage",
              "line_range": [
                224,
                239
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_struct_analysis_guide",
              "docstring": "Guide for proper struct.json analysis approach",
              "line_range": [
                241,
                259
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_current_context",
              "docstring": "Get comprehensive current context using existing architecture",
              "line_range": [
                261,
                300
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_struct_analysis",
              "docstring": "Analyze struct.json for current codebase state",
              "line_range": [
                302,
                356
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_analyze_architecture_from_struct",
              "docstring": "Analyze architecture patterns from struct.json",
              "line_range": [
                358,
                376
              ],
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_analyze_function_duplication",
              "docstring": "Analyze function duplication across modules",
              "line_range": [
                378,
                399
              ],
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_calculate_complexity_metrics",
              "docstring": "Calculate complexity metrics from struct.json",
              "line_range": [
                401,
                417
              ],
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_calculate_complexity_score",
              "docstring": "Calculate overall complexity score",
              "line_range": [
                419,
                432
              ],
              "parameters": [
                "self",
                "stats"
              ]
            },
            {
              "name": "_get_orchestrator_state",
              "docstring": "Get SmartContextOrchestrator state",
              "line_range": [
                434,
                445
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "analyze_codebase_for_duplicates",
              "docstring": "Analyze codebase for duplicate functions using struct.json",
              "line_range": [
                447,
                495
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "sync_with_existing_architecture",
              "docstring": "Sync with existing llmstruct architecture instead of duplicating",
              "line_range": [
                497,
                520
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "create_task",
              "docstring": "Create new task (this is new functionality, not duplication)",
              "line_range": [
                526,
                554
              ],
              "parameters": [
                "self",
                "title",
                "description",
                "priority",
                "tags",
                "dependencies"
              ]
            },
            {
              "name": "get_active_tasks",
              "docstring": "Get all active tasks",
              "line_range": [
                556,
                564
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_json_safe",
              "docstring": "Safe JSON loading with error handling",
              "line_range": [
                566,
                576
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_save_json_safe",
              "docstring": "Safe JSON saving with error handling",
              "line_range": [
                578,
                587
              ],
              "parameters": [
                "self",
                "file_path",
                "data"
              ]
            },
            {
              "name": "_get_active_session_context",
              "docstring": "Get current session context",
              "line_range": [
                590,
                594
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_identify_key_components",
              "docstring": "Identify key components from struct analysis",
              "line_range": [
                596,
                607
              ],
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_get_workflow_patterns",
              "docstring": "Define workflow patterns that integrate with existing architecture",
              "line_range": [
                609,
                629
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_available_commands",
              "docstring": "Available commands that work with existing architecture",
              "line_range": [
                631,
                647
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__post_init__": [],
        "__init__": [
          "print",
          "time.time",
          "Path",
          "UniversalConverter",
          "SmartContextOrchestrator",
          "CopilotContextManager",
          "SystemCapabilityDiscovery",
          "CLIConfig",
          "str"
        ],
        "get_ai_onboarding_guide": [
          "self._get_existing_architecture_guide",
          "self._get_context_orchestration_guide",
          "self._get_workflow_patterns",
          "self._get_available_commands",
          "self._get_copilot_integration_guide",
          "self._get_project_overview_from_struct",
          "self._get_struct_analysis_guide"
        ],
        "_get_project_overview_from_struct": [
          "self._analyze_architecture_from_struct",
          "struct_data.get",
          "struct_path.exists",
          "logger.warning",
          "len",
          "self._identify_key_components",
          "open",
          "json.load"
        ],
        "_get_existing_architecture_guide": [],
        "_get_copilot_integration_guide": [],
        "_get_context_orchestration_guide": [],
        "_get_struct_analysis_guide": [],
        "get_current_context": [
          "print",
          "self.get_active_tasks",
          "time.time",
          "logger.warning",
          "self._get_struct_analysis",
          "self._get_orchestrator_state",
          "self._get_active_session_context",
          "str",
          "isinstance"
        ],
        "_get_struct_analysis": [
          "print",
          "self._analyze_architecture_from_struct",
          "time.time",
          "struct_data.get",
          "struct_path.exists",
          "self._analyze_function_duplication",
          "self._calculate_complexity_metrics",
          "len",
          "open",
          "logger.error",
          "str",
          "json.load"
        ],
        "_analyze_architecture_from_struct": [
          "directories.items",
          "Path",
          "struct_data.get",
          "list",
          "directories.keys",
          "len"
        ],
        "_analyze_function_duplication": [
          "module.get",
          "struct_data.get",
          "len",
          "function_names.items"
        ],
        "_calculate_complexity_metrics": [
          "self._calculate_complexity_score",
          "struct_data.get",
          "m.get",
          "len",
          "round",
          "sum",
          "stats.get"
        ],
        "_calculate_complexity_score": [
          "round",
          "stats.get"
        ],
        "_get_orchestrator_state": [
          "str"
        ],
        "analyze_codebase_for_duplicates": [
          "print",
          "time.time",
          "self._get_struct_analysis",
          "recommendations.append",
          "len",
          "struct_analysis.get",
          "duplication.get"
        ],
        "sync_with_existing_architecture": [
          "json.dump",
          "logger.error",
          "str",
          "open"
        ],
        "create_task": [
          "self._load_json_safe",
          "uuid.uuid4",
          "logger.info",
          "self._save_json_safe",
          "str",
          "asdict",
          "Task"
        ],
        "get_active_tasks": [
          "t.get",
          "self._load_json_safe"
        ],
        "_load_json_safe": [
          "file_path.exists",
          "json.load",
          "logger.error",
          "open"
        ],
        "_save_json_safe": [
          "json.dump",
          "logger.error",
          "open"
        ],
        "_get_active_session_context": [
          "asdict"
        ],
        "_identify_key_components": [
          "key_components.append",
          "module.get",
          "struct_data.get",
          "len"
        ],
        "_get_workflow_patterns": [],
        "_get_available_commands": [],
        "main": [
          "print",
          "results.items",
          "argparse.ArgumentParser",
          "context.get",
          "len",
          "orchestrator.analyze_codebase_for_duplicates",
          "orchestrator.sync_with_existing_architecture",
          "WorkflowOrchestrator",
          "parser.parse_args",
          "json.dumps",
          "orchestrator.get_current_context",
          "parser.add_argument",
          "orchestrator.get_ai_onboarding_guide"
        ]
      },
      "dependencies": [
        "Any",
        "CLIConfig",
        "CopilotContextManager",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "SmartContextOrchestrator",
        "SystemCapabilityDiscovery",
        "Union",
        "UniversalConverter",
        "ai_self_awareness",
        "argparse",
        "asdict",
        "cli_config",
        "context_orchestrator",
        "copilot",
        "dataclass",
        "dataclasses",
        "datetime",
        "enum",
        "json",
        "logging",
        "os",
        "parsers.universal_converter",
        "pathlib",
        "time",
        "typing",
        "uuid"
      ],
      "hash": "6a74a0602bdd6d8fcf4989c77c784c041b3272e9ad7d14d6e42e701c07d17c40",
      "artifact_id": "04c0b0fe-b772-4732-af21-d556e3f16c2f"
    },
    {
      "module_id": "src.llmstruct.gh_view",
      "path": "src/llmstruct/gh_view.py",
      "category": "core",
      "module_doc": "GitHub visualization/graph feature (gh-view-v1)\nExport consolidated tasks/ideas from JSON files to GitHub Project cards",
      "functions": [
        {
          "name": "main",
          "docstring": "Main entry point for GitHub Projects export",
          "line_range": [
            177,
            208
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize exporter with configuration",
          "line_range": [
            19,
            25
          ],
          "parameters": [
            "self",
            "config_path"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load configuration from TOML file",
          "line_range": [
            27,
            35
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_mapping",
          "docstring": "Load existing ID mapping between local and GitHub",
          "line_range": [
            37,
            45
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_mapping",
          "docstring": "Save ID mapping to file",
          "line_range": [
            47,
            53
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_run_gh_command",
          "docstring": "Run GitHub CLI command and return success status and output",
          "line_range": [
            55,
            68
          ],
          "parameters": [
            "self",
            "command"
          ],
          "decorators": []
        },
        {
          "name": "load_official_data",
          "docstring": "Load tasks and ideas from official JSON files",
          "line_range": [
            70,
            98
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "format_task_for_github",
          "docstring": "Format task data for GitHub Project card",
          "line_range": [
            100,
            137
          ],
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "format_idea_for_github",
          "docstring": "Format idea data for GitHub Project card",
          "line_range": [
            139,
            174
          ],
          "parameters": [
            "self",
            "idea"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubProjectsExporter",
          "docstring": "Export tasks and ideas to GitHub Projects as cards",
          "line_range": [
            16,
            174
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize exporter with configuration",
              "line_range": [
                19,
                25
              ],
              "parameters": [
                "self",
                "config_path"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load configuration from TOML file",
              "line_range": [
                27,
                35
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_mapping",
              "docstring": "Load existing ID mapping between local and GitHub",
              "line_range": [
                37,
                45
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_mapping",
              "docstring": "Save ID mapping to file",
              "line_range": [
                47,
                53
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_run_gh_command",
              "docstring": "Run GitHub CLI command and return success status and output",
              "line_range": [
                55,
                68
              ],
              "parameters": [
                "self",
                "command"
              ]
            },
            {
              "name": "load_official_data",
              "docstring": "Load tasks and ideas from official JSON files",
              "line_range": [
                70,
                98
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "format_task_for_github",
              "docstring": "Format task data for GitHub Project card",
              "line_range": [
                100,
                137
              ],
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "format_idea_for_github",
              "docstring": "Format idea data for GitHub Project card",
              "line_range": [
                139,
                174
              ],
              "parameters": [
                "self",
                "idea"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._load_config",
          "Path",
          "self._load_mapping"
        ],
        "_load_config": [
          "print",
          "toml.load",
          "config.get",
          "open"
        ],
        "_load_mapping": [
          "json.load",
          "open"
        ],
        "_save_mapping": [
          "json.dump",
          "print",
          "open"
        ],
        "_run_gh_command": [
          "subprocess.run"
        ],
        "load_official_data": [
          "print",
          "tasks_file.exists",
          "tasks_data.get",
          "ideas_file.exists",
          "ideas_data.get",
          "len",
          "open",
          "json.load"
        ],
        "format_task_for_github": [
          "status_map.get",
          "body_parts.append",
          "task.get"
        ],
        "format_idea_for_github": [
          "status_map.get",
          "body_parts.append",
          "idea.get"
        ],
        "main": [
          "print",
          "GitHubProjectsExporter",
          "exporter.load_official_data",
          "len",
          "sys.exit",
          "exporter.format_idea_for_github",
          "exporter.format_task_for_github"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "datetime",
        "json",
        "pathlib",
        "subprocess",
        "sys",
        "toml",
        "typing"
      ],
      "hash": "42f9d108f2c0b84536bc1f84861fe336c6c5383ee231ea92edf91eabed74b28c",
      "artifact_id": "2ae554b6-af22-4299-a44d-41522791f90b"
    },
    {
      "module_id": "src.llmstruct.self_run",
      "path": "src/llmstruct/self_run.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_struct",
          "docstring": "Filter struct.json or init.json based on prompt keywords. Supports dict or list as root.",
          "line_range": [
            20,
            71
          ],
          "parameters": [
            "struct",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "Attach filtered JSON to LLM prompt, using cache if available.",
          "line_range": [
            74,
            114
          ],
          "parameters": [
            "context_path",
            "prompt",
            "cache"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_struct": [
          "module.get",
          "struct.get",
          "item.get",
          "prompt.lower",
          "str",
          "isinstance",
          "any",
          "filter_json"
        ],
        "attach_to_llm_request": [
          "logging.info",
          "Path",
          "select_json",
          "logging.error",
          "filter_struct",
          "cache.get_full_json",
          "cache.cache_json",
          "json.dumps",
          "prompt.lower",
          "cache.get_metadata",
          "context_file.exists",
          "filter_json"
        ]
      },
      "dependencies": [
        "Any",
        "JSONCache",
        "Optional",
        "Path",
        "cache",
        "filter_json",
        "json",
        "json_selector",
        "logging",
        "pathlib",
        "select_json",
        "typing"
      ],
      "hash": "f9cee229500252c3716ea8ed897cff7cc40e9af1f650b56b75960cf8660cb638",
      "artifact_id": "f6580a7a-d237-468a-a5a6-78d2780681a2"
    },
    {
      "module_id": "src.llmstruct.copilot",
      "path": "src/llmstruct/copilot.py",
      "category": "core",
      "module_doc": "LLMStruct Copilot Integration Module\nProvides context-aware development assistance with hybrid copilot capabilities.",
      "functions": [
        {
          "name": "initialize_copilot",
          "docstring": "Initialize copilot context manager for the project.\n\nArgs:\n    project_root: Project root directory\n\nReturns:\n    Configured CopilotContextManager instance",
          "line_range": [
            649,
            659
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "trigger_copilot_event",
          "docstring": "Trigger a copilot event and get relevant context.\n\nArgs:\n    manager: CopilotContextManager instance\n    event_type: Type of event\n    file_path: Optional file path\n    **kwargs: Additional event metadata\n\nReturns:\n    Dict with event context",
          "line_range": [
            662,
            679
          ],
          "parameters": [
            "manager",
            "event_type",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "smart_suggest",
          "docstring": "Get smart suggestions based on query and context.\n\nArgs:\n    manager: CopilotContextManager instance\n    query: Query string\n    context: Context type (code, workflow, task, etc.)\n\nReturns:\n    List of suggestions",
          "line_range": [
            682,
            702
          ],
          "parameters": [
            "manager",
            "query",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "get_optimized_context_for_scenario",
          "docstring": "Get optimized context for specific scenario - standalone function.\n\nArgs:\n    project_root: Project root directory\n    scenario: Usage scenario (vscode_copilot, cli_direct, etc.)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
          "line_range": [
            705,
            728
          ],
          "parameters": [
            "project_root",
            "scenario",
            "file_path",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize the Copilot Context Manager.\n\nArgs:\n    project_root: Project root directory\n    config_path: Path to copilot_init.json",
          "line_range": [
            68,
            90
          ],
          "parameters": [
            "self",
            "project_root",
            "config_path"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load copilot configuration from JSON file.",
          "line_range": [
            92,
            104
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_initialize_layers",
          "docstring": "Initialize context layers from configuration.",
          "line_range": [
            106,
            116
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_context_layer",
          "docstring": "Load a specific context layer.\n\nArgs:\n    layer_name: Name of the layer to load\n    force: Force reload if already loaded\n\nReturns:\n    bool: True if successful",
          "line_range": [
            118,
            160
          ],
          "parameters": [
            "self",
            "layer_name",
            "force"
          ],
          "decorators": []
        },
        {
          "name": "unload_context_layer",
          "docstring": "Unload a context layer to free memory.\n\nArgs:\n    layer_name: Name of the layer to unload\n\nReturns:\n    bool: True if successful",
          "line_range": [
            162,
            180
          ],
          "parameters": [
            "self",
            "layer_name"
          ],
          "decorators": []
        },
        {
          "name": "get_optimized_context",
          "docstring": "Get optimized context using Smart Context Orchestrator.\n\nArgs:\n    scenario: Usage scenario (vscode_copilot, cli_direct, etc.)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
          "line_range": [
            182,
            225
          ],
          "parameters": [
            "self",
            "scenario",
            "file_path",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "_get_legacy_context",
          "docstring": "Fallback to legacy context loading.",
          "line_range": [
            227,
            235
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_for_vscode",
          "docstring": "Get optimized context specifically for VS Code Copilot integration.\n\nArgs:\n    file_path: Optional file path for focused context\n    \nReturns:\n    Token-optimized context for VS Code",
          "line_range": [
            237,
            251
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "get_context_for_event",
          "docstring": "Get relevant context for a copilot event using Smart Context Orchestrator.\n\nArgs:\n    event: The copilot event\n\nReturns:\n    Dict containing relevant context",
          "line_range": [
            252,
            296
          ],
          "parameters": [
            "self",
            "event"
          ],
          "decorators": []
        },
        {
          "name": "_get_legacy_event_context",
          "docstring": "Legacy event context loading as fallback.",
          "line_range": [
            298,
            350
          ],
          "parameters": [
            "self",
            "event"
          ],
          "decorators": []
        },
        {
          "name": "suggest_completion",
          "docstring": "Generate context-aware code completions.\n\nArgs:\n    current_code: Current code content\n    file_path: Path to the current file\n    cursor_position: Cursor position in the code\n\nReturns:\n    List of completion suggestions",
          "line_range": [
            352,
            397
          ],
          "parameters": [
            "self",
            "current_code",
            "file_path",
            "cursor_position"
          ],
          "decorators": []
        },
        {
          "name": "validate_change",
          "docstring": "Validate a code change against safety rules.\n\nArgs:\n    file_path: Path to the changed file\n    change_type: Type of change (create, edit, delete)\n\nReturns:\n    Dict with validation results",
          "line_range": [
            399,
            445
          ],
          "parameters": [
            "self",
            "file_path",
            "change_type"
          ],
          "decorators": []
        },
        {
          "name": "_matches_scope",
          "docstring": "Check if file matches scope pattern.",
          "line_range": [
            447,
            452
          ],
          "parameters": [
            "self",
            "file_path",
            "scope"
          ],
          "decorators": []
        },
        {
          "name": "_matches_trigger",
          "docstring": "Check if change type matches trigger.",
          "line_range": [
            454,
            463
          ],
          "parameters": [
            "self",
            "change_type",
            "trigger"
          ],
          "decorators": []
        },
        {
          "name": "_validate_json_schema",
          "docstring": "Validate JSON file against schema.",
          "line_range": [
            465,
            480
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_check_circular_dependencies",
          "docstring": "Check for circular dependencies.",
          "line_range": [
            482,
            507
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_validate_task_references",
          "docstring": "Validate task references in tasks.json.",
          "line_range": [
            509,
            536
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "get_workflow_suggestions",
          "docstring": "Get workflow suggestions based on current command context.\n\nArgs:\n    command: Current command or operation\n\nReturns:\n    List of workflow suggestions",
          "line_range": [
            538,
            568
          ],
          "parameters": [
            "self",
            "command"
          ],
          "decorators": []
        },
        {
          "name": "refresh_all_contexts",
          "docstring": "Refresh all loaded context layers.\n\nReturns:\n    bool: True if successful",
          "line_range": [
            570,
            584
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_status",
          "docstring": "Get status of all context layers.\n\nReturns:\n    Dict with context status information",
          "line_range": [
            586,
            607
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "export_context",
          "docstring": "Export context in specified format.\n\nArgs:\n    layers: List of layers to export (None for all loaded)\n    format: Export format (json, yaml, etc.)\n\nReturns:\n    Exported context as string",
          "line_range": [
            609,
            631
          ],
          "parameters": [
            "self",
            "layers",
            "format"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Clean up resources.",
          "line_range": [
            633,
            643
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ContextLayer",
          "docstring": "Context layer priorities for copilot integration.",
          "line_range": [
            22,
            28
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "AttachMode",
          "docstring": "Context attachment modes.",
          "line_range": [
            31,
            37
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextLayerConfig",
          "docstring": "Configuration for a context layer.",
          "line_range": [
            41,
            49
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "CopilotEvent",
          "docstring": "Represents a copilot event for context triggering.",
          "line_range": [
            53,
            59
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "CopilotContextManager",
          "docstring": "Manages context layers and integration with GitHub Copilot.\nProvides intelligent context loading and workflow assistance.",
          "line_range": [
            62,
            643
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize the Copilot Context Manager.\n\nArgs:\n    project_root: Project root directory\n    config_path: Path to copilot_init.json",
              "line_range": [
                68,
                90
              ],
              "parameters": [
                "self",
                "project_root",
                "config_path"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load copilot configuration from JSON file.",
              "line_range": [
                92,
                104
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_initialize_layers",
              "docstring": "Initialize context layers from configuration.",
              "line_range": [
                106,
                116
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_context_layer",
              "docstring": "Load a specific context layer.\n\nArgs:\n    layer_name: Name of the layer to load\n    force: Force reload if already loaded\n\nReturns:\n    bool: True if successful",
              "line_range": [
                118,
                160
              ],
              "parameters": [
                "self",
                "layer_name",
                "force"
              ]
            },
            {
              "name": "unload_context_layer",
              "docstring": "Unload a context layer to free memory.\n\nArgs:\n    layer_name: Name of the layer to unload\n\nReturns:\n    bool: True if successful",
              "line_range": [
                162,
                180
              ],
              "parameters": [
                "self",
                "layer_name"
              ]
            },
            {
              "name": "get_optimized_context",
              "docstring": "Get optimized context using Smart Context Orchestrator.\n\nArgs:\n    scenario: Usage scenario (vscode_copilot, cli_direct, etc.)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
              "line_range": [
                182,
                225
              ],
              "parameters": [
                "self",
                "scenario",
                "file_path",
                "max_tokens"
              ]
            },
            {
              "name": "_get_legacy_context",
              "docstring": "Fallback to legacy context loading.",
              "line_range": [
                227,
                235
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_for_vscode",
              "docstring": "Get optimized context specifically for VS Code Copilot integration.\n\nArgs:\n    file_path: Optional file path for focused context\n    \nReturns:\n    Token-optimized context for VS Code",
              "line_range": [
                237,
                251
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "get_context_for_event",
              "docstring": "Get relevant context for a copilot event using Smart Context Orchestrator.\n\nArgs:\n    event: The copilot event\n\nReturns:\n    Dict containing relevant context",
              "line_range": [
                252,
                296
              ],
              "parameters": [
                "self",
                "event"
              ]
            },
            {
              "name": "_get_legacy_event_context",
              "docstring": "Legacy event context loading as fallback.",
              "line_range": [
                298,
                350
              ],
              "parameters": [
                "self",
                "event"
              ]
            },
            {
              "name": "suggest_completion",
              "docstring": "Generate context-aware code completions.\n\nArgs:\n    current_code: Current code content\n    file_path: Path to the current file\n    cursor_position: Cursor position in the code\n\nReturns:\n    List of completion suggestions",
              "line_range": [
                352,
                397
              ],
              "parameters": [
                "self",
                "current_code",
                "file_path",
                "cursor_position"
              ]
            },
            {
              "name": "validate_change",
              "docstring": "Validate a code change against safety rules.\n\nArgs:\n    file_path: Path to the changed file\n    change_type: Type of change (create, edit, delete)\n\nReturns:\n    Dict with validation results",
              "line_range": [
                399,
                445
              ],
              "parameters": [
                "self",
                "file_path",
                "change_type"
              ]
            },
            {
              "name": "_matches_scope",
              "docstring": "Check if file matches scope pattern.",
              "line_range": [
                447,
                452
              ],
              "parameters": [
                "self",
                "file_path",
                "scope"
              ]
            },
            {
              "name": "_matches_trigger",
              "docstring": "Check if change type matches trigger.",
              "line_range": [
                454,
                463
              ],
              "parameters": [
                "self",
                "change_type",
                "trigger"
              ]
            },
            {
              "name": "_validate_json_schema",
              "docstring": "Validate JSON file against schema.",
              "line_range": [
                465,
                480
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_check_circular_dependencies",
              "docstring": "Check for circular dependencies.",
              "line_range": [
                482,
                507
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_validate_task_references",
              "docstring": "Validate task references in tasks.json.",
              "line_range": [
                509,
                536
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "get_workflow_suggestions",
              "docstring": "Get workflow suggestions based on current command context.\n\nArgs:\n    command: Current command or operation\n\nReturns:\n    List of workflow suggestions",
              "line_range": [
                538,
                568
              ],
              "parameters": [
                "self",
                "command"
              ]
            },
            {
              "name": "refresh_all_contexts",
              "docstring": "Refresh all loaded context layers.\n\nReturns:\n    bool: True if successful",
              "line_range": [
                570,
                584
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_status",
              "docstring": "Get status of all context layers.\n\nReturns:\n    Dict with context status information",
              "line_range": [
                586,
                607
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "export_context",
              "docstring": "Export context in specified format.\n\nArgs:\n    layers: List of layers to export (None for all loaded)\n    format: Export format (json, yaml, etc.)\n\nReturns:\n    Exported context as string",
              "line_range": [
                609,
                631
              ],
              "parameters": [
                "self",
                "layers",
                "format"
              ]
            },
            {
              "name": "close",
              "docstring": "Clean up resources.",
              "line_range": [
                633,
                643
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "JSONCache",
          "self._load_config",
          "os.getcwd",
          "Path",
          "self._initialize_layers",
          "create_context_orchestrator",
          "str"
        ],
        "_load_config": [
          "Path",
          "logger.warning",
          "logger.info",
          "open",
          "logger.error",
          "json.load"
        ],
        "_initialize_layers": [
          "layer_config.get",
          "ContextLayerConfig",
          "layers_config.items"
        ],
        "load_context_layer": [
          "time.time",
          "logger.warning",
          "logger.debug",
          "logger.info",
          "open",
          "logger.error",
          "source_path.exists",
          "json.load"
        ],
        "unload_context_layer": [
          "logger.info"
        ],
        "get_optimized_context": [
          "self._get_legacy_context",
          "scenario_mapping.get",
          "logger.error"
        ],
        "_get_legacy_context": [
          "self.load_context_layer"
        ],
        "get_context_for_vscode": [
          "self.get_optimized_context"
        ],
        "get_context_for_event": [
          "self._get_legacy_event_context",
          "self.get_optimized_context",
          "scenario_mapping.get",
          "logger.error"
        ],
        "_get_legacy_event_context": [
          "workflow_triggers.get",
          "code_triggers.get",
          "triggers.get",
          "open",
          "logger.error",
          "source_path.exists",
          "json.load",
          "self.load_context_layer",
          "file_triggers.get"
        ],
        "suggest_completion": [
          "module.get",
          "Path",
          "func.get",
          "struct_context.get",
          "current_module.get",
          "str",
          "suggestions.append",
          "self.load_context_layer"
        ],
        "validate_change": [
          "self._matches_trigger",
          "safety_features.get",
          "len",
          "self._validate_task_references",
          "self._validate_json_schema",
          "result.get",
          "self._matches_scope",
          "rule.get",
          "self._check_circular_dependencies"
        ],
        "_matches_scope": [
          "fnmatch",
          "Path",
          "str"
        ],
        "_matches_trigger": [
          "trigger_map.get"
        ],
        "_validate_json_schema": [
          "json.load",
          "file_path.endswith",
          "open"
        ],
        "_check_circular_dependencies": [
          "module.get",
          "Path",
          "struct_data.get",
          "len",
          "str",
          "self.load_context_layer"
        ],
        "_validate_task_references": [
          "tasks_data.get",
          "file_path.endswith",
          "open",
          "set",
          "task.get",
          "task_ids.add",
          "json.load"
        ],
        "get_workflow_suggestions": [
          "suggestions.extend",
          "workflows.items",
          "command.lower",
          "workflow.get",
          "suggestions.append",
          "self.load_context_layer"
        ],
        "refresh_all_contexts": [
          "list",
          "logger.info",
          "self.load_context_layer"
        ],
        "get_context_status": [
          "list"
        ],
        "export_context": [
          "list",
          "json.dumps",
          "str"
        ],
        "close": [
          "hasattr",
          "logger.info"
        ],
        "initialize_copilot": [
          "CopilotContextManager"
        ],
        "trigger_copilot_event": [
          "CopilotEvent",
          "manager.get_context_for_event"
        ],
        "smart_suggest": [
          "manager.get_workflow_suggestions"
        ],
        "get_optimized_context_for_scenario": [
          "manager.close",
          "manager.get_optimized_context",
          "initialize_copilot",
          "locals"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "SmartContextOrchestrator",
        "Union",
        "create_context_orchestrator",
        "dataclass",
        "dataclasses",
        "enum",
        "fnmatch",
        "json",
        "llmstruct.cache",
        "llmstruct.context_orchestrator",
        "logging",
        "os",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": "30fd8d33334ad30d2d2784dd2ae9d1fd50ab982076f550ab8d7e9a2258b2c310",
      "artifact_id": "c5bf658a-3eb4-4ff3-b8f5-43cbec958eca"
    },
    {
      "module_id": "src.llmstruct.ai_workflow_middleware",
      "path": "src/llmstruct/ai_workflow_middleware.py",
      "category": "core",
      "module_doc": "AI Workflow Middleware - Forces AI Integration with LLMStruct\nIntercepts all AI requests and ensures they go through our orchestration system.",
      "functions": [
        {
          "name": "initialize_ai_middleware",
          "docstring": "Initialize global AI middleware.",
          "line_range": [
            393,
            397
          ],
          "parameters": [
            "project_root",
            "mode"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_middleware",
          "docstring": "Get current AI middleware instance.",
          "line_range": [
            400,
            402
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "process_ai_query",
          "docstring": "Global function to process AI queries through middleware.",
          "line_range": [
            405,
            410
          ],
          "parameters": [
            "query",
            "ai_handler"
          ],
          "decorators": []
        },
        {
          "name": "ensure_llmstruct_integration",
          "docstring": "Decorator that ensures function uses llmstruct system.",
          "line_range": [
            414,
            431
          ],
          "parameters": [
            "func"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            55,
            74
          ],
          "parameters": [
            "self",
            "project_root",
            "mode"
          ],
          "decorators": []
        },
        {
          "name": "_load_middleware_config",
          "docstring": "Load middleware configuration.",
          "line_range": [
            76,
            101
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "process_ai_request",
          "docstring": "Main middleware entry point - ALL AI requests should go through this.\n\nArgs:\n    raw_query: Raw AI query/request\n    ai_handler: Optional custom AI handler function\n    \nReturns:\n    Processed AI response with llmstruct integration",
          "line_range": [
            103,
            135
          ],
          "parameters": [
            "self",
            "raw_query",
            "ai_handler"
          ],
          "decorators": []
        },
        {
          "name": "_parse_ai_request",
          "docstring": "Parse raw query into structured AI request.",
          "line_range": [
            137,
            160
          ],
          "parameters": [
            "self",
            "raw_query"
          ],
          "decorators": []
        },
        {
          "name": "_should_use_llmstruct",
          "docstring": "Determine if request should use llmstruct system.",
          "line_range": [
            162,
            186
          ],
          "parameters": [
            "self",
            "request"
          ],
          "decorators": []
        },
        {
          "name": "_process_with_llmstruct",
          "docstring": "Process request through full llmstruct system.",
          "line_range": [
            188,
            219
          ],
          "parameters": [
            "self",
            "request",
            "ai_handler"
          ],
          "decorators": []
        },
        {
          "name": "_process_bypass",
          "docstring": "Process request without llmstruct system.",
          "line_range": [
            221,
            236
          ],
          "parameters": [
            "self",
            "request",
            "ai_handler"
          ],
          "decorators": []
        },
        {
          "name": "_optimize_context",
          "docstring": "Optimize context using orchestrator.",
          "line_range": [
            238,
            261
          ],
          "parameters": [
            "self",
            "request"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_ai_delegation",
          "docstring": "Analyze which AI should handle this request.",
          "line_range": [
            263,
            280
          ],
          "parameters": [
            "self",
            "request"
          ],
          "decorators": []
        },
        {
          "name": "_get_enhanced_context",
          "docstring": "Get enhanced context with project awareness.",
          "line_range": [
            282,
            295
          ],
          "parameters": [
            "self",
            "request",
            "context_result"
          ],
          "decorators": []
        },
        {
          "name": "_get_capability_summary",
          "docstring": "Get current system capabilities.",
          "line_range": [
            297,
            310
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_generate_usage_guidance",
          "docstring": "Generate guidance for AI on how to use llmstruct system.",
          "line_range": [
            312,
            331
          ],
          "parameters": [
            "self",
            "request"
          ],
          "decorators": []
        },
        {
          "name": "_map_tags_to_scenario",
          "docstring": "Map context tags to orchestrator scenarios.",
          "line_range": [
            333,
            348
          ],
          "parameters": [
            "self",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "_default_ai_processing",
          "docstring": "Default AI processing when no custom handler provided.",
          "line_range": [
            350,
            365
          ],
          "parameters": [
            "self",
            "request",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "get_middleware_stats",
          "docstring": "Get middleware usage statistics.",
          "line_range": [
            367,
            376
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "force_llmstruct_mode",
          "docstring": "Force all future requests to use llmstruct system.",
          "line_range": [
            378,
            381
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "enable_guidance_mode",
          "docstring": "Enable guided mode with llmstruct suggestions.",
          "line_range": [
            383,
            386
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "wrapper",
          "docstring": "",
          "line_range": [
            416,
            429
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "AIWorkflowMode",
          "docstring": "AI workflow enforcement modes.",
          "line_range": [
            21,
            26
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "AIRequest",
          "docstring": "Standardized AI request structure.",
          "line_range": [
            30,
            36
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "AIResponse",
          "docstring": "Standardized AI response structure.",
          "line_range": [
            40,
            46
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "AIWorkflowMiddleware",
          "docstring": "Middleware that ensures ALL AI interactions go through LLMStruct system.\nThis solves the problem of AI not using its own infrastructure.",
          "line_range": [
            49,
            386
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                55,
                74
              ],
              "parameters": [
                "self",
                "project_root",
                "mode"
              ]
            },
            {
              "name": "_load_middleware_config",
              "docstring": "Load middleware configuration.",
              "line_range": [
                76,
                101
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "process_ai_request",
              "docstring": "Main middleware entry point - ALL AI requests should go through this.\n\nArgs:\n    raw_query: Raw AI query/request\n    ai_handler: Optional custom AI handler function\n    \nReturns:\n    Processed AI response with llmstruct integration",
              "line_range": [
                103,
                135
              ],
              "parameters": [
                "self",
                "raw_query",
                "ai_handler"
              ]
            },
            {
              "name": "_parse_ai_request",
              "docstring": "Parse raw query into structured AI request.",
              "line_range": [
                137,
                160
              ],
              "parameters": [
                "self",
                "raw_query"
              ]
            },
            {
              "name": "_should_use_llmstruct",
              "docstring": "Determine if request should use llmstruct system.",
              "line_range": [
                162,
                186
              ],
              "parameters": [
                "self",
                "request"
              ]
            },
            {
              "name": "_process_with_llmstruct",
              "docstring": "Process request through full llmstruct system.",
              "line_range": [
                188,
                219
              ],
              "parameters": [
                "self",
                "request",
                "ai_handler"
              ]
            },
            {
              "name": "_process_bypass",
              "docstring": "Process request without llmstruct system.",
              "line_range": [
                221,
                236
              ],
              "parameters": [
                "self",
                "request",
                "ai_handler"
              ]
            },
            {
              "name": "_optimize_context",
              "docstring": "Optimize context using orchestrator.",
              "line_range": [
                238,
                261
              ],
              "parameters": [
                "self",
                "request"
              ]
            },
            {
              "name": "_analyze_ai_delegation",
              "docstring": "Analyze which AI should handle this request.",
              "line_range": [
                263,
                280
              ],
              "parameters": [
                "self",
                "request"
              ]
            },
            {
              "name": "_get_enhanced_context",
              "docstring": "Get enhanced context with project awareness.",
              "line_range": [
                282,
                295
              ],
              "parameters": [
                "self",
                "request",
                "context_result"
              ]
            },
            {
              "name": "_get_capability_summary",
              "docstring": "Get current system capabilities.",
              "line_range": [
                297,
                310
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_generate_usage_guidance",
              "docstring": "Generate guidance for AI on how to use llmstruct system.",
              "line_range": [
                312,
                331
              ],
              "parameters": [
                "self",
                "request"
              ]
            },
            {
              "name": "_map_tags_to_scenario",
              "docstring": "Map context tags to orchestrator scenarios.",
              "line_range": [
                333,
                348
              ],
              "parameters": [
                "self",
                "tags"
              ]
            },
            {
              "name": "_default_ai_processing",
              "docstring": "Default AI processing when no custom handler provided.",
              "line_range": [
                350,
                365
              ],
              "parameters": [
                "self",
                "request",
                "context"
              ]
            },
            {
              "name": "get_middleware_stats",
              "docstring": "Get middleware usage statistics.",
              "line_range": [
                367,
                376
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "force_llmstruct_mode",
              "docstring": "Force all future requests to use llmstruct system.",
              "line_range": [
                378,
                381
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "enable_guidance_mode",
              "docstring": "Enable guided mode with llmstruct suggestions.",
              "line_range": [
                383,
                386
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "logger.info",
          "SystemCapabilityDiscovery",
          "create_context_orchestrator",
          "str",
          "CursorAIBridge",
          "self._load_middleware_config"
        ],
        "_load_middleware_config": [
          "config_path.exists",
          "json.load",
          "open"
        ],
        "process_ai_request": [
          "time.time",
          "self._parse_ai_request",
          "self._process_bypass",
          "self._process_with_llmstruct",
          "self._should_use_llmstruct",
          "logger.error",
          "str",
          "AIResponse"
        ],
        "_parse_ai_request": [
          "time.time",
          "AIRequest",
          "re.findall",
          "context_tags.extend",
          "re.sub"
        ],
        "_should_use_llmstruct": [],
        "_process_with_llmstruct": [
          "time.time",
          "ai_handler",
          "self._get_enhanced_context",
          "self._analyze_ai_delegation",
          "self._optimize_context",
          "enhanced_context.get",
          "AIResponse",
          "self._default_ai_processing"
        ],
        "_process_bypass": [
          "AIResponse",
          "ai_handler"
        ],
        "_optimize_context": [
          "context.get",
          "len",
          "logger.error",
          "str",
          "self._map_tags_to_scenario"
        ],
        "_analyze_ai_delegation": [
          "delegation.get",
          "str",
          "logger.error"
        ],
        "_get_enhanced_context": [
          "self._get_capability_summary",
          "self._generate_usage_guidance"
        ],
        "_get_capability_summary": [
          "str"
        ],
        "_generate_usage_guidance": [
          "guidance.append"
        ],
        "_map_tags_to_scenario": [],
        "_default_ai_processing": [],
        "get_middleware_stats": [],
        "force_llmstruct_mode": [
          "logger.info"
        ],
        "enable_guidance_mode": [
          "logger.info"
        ],
        "initialize_ai_middleware": [
          "AIWorkflowMiddleware"
        ],
        "get_ai_middleware": [],
        "process_ai_query": [
          "_middleware_instance.process_ai_request",
          "RuntimeError"
        ],
        "ensure_llmstruct_integration": [],
        "wrapper": [
          "logger.warning",
          "func",
          "get_ai_middleware",
          "str",
          "middleware.process_ai_request",
          "kwargs.get"
        ]
      },
      "dependencies": [
        "Any",
        "Callable",
        "CursorAIBridge",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "SystemCapabilityDiscovery",
        "create_context_orchestrator",
        "dataclass",
        "dataclasses",
        "enum",
        "json",
        "llmstruct.ai_self_awareness",
        "llmstruct.context_orchestrator",
        "llmstruct.cursor_ai_bridge",
        "logging",
        "pathlib",
        "re",
        "time",
        "typing"
      ],
      "hash": "54add1ca5d729600b85063062c19fc6d076fb219792f66c2420719fed3fb6c66",
      "artifact_id": "ad4dbde8-cdd4-49f3-8f3e-eeadbce3bc26"
    },
    {
      "module_id": "src.llmstruct.ai_cli_integration",
      "path": "src/llmstruct/ai_cli_integration.py",
      "category": "core",
      "module_doc": "AI Self-Awareness CLI Integration Module\nIntegrates unused CLI functions into the AI self-awareness system.",
      "functions": [
        {
          "name": "create_ai_cli_integration",
          "docstring": "Factory function to create AI CLI integration instance.",
          "line_range": [
            304,
            306
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_enhanced_cli_summary",
          "docstring": "Get a formatted summary of AI CLI integration capabilities.",
          "line_range": [
            309,
            346
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize CLI integration system.",
          "line_range": [
            21,
            25
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_discover_available_commands",
          "docstring": "Discover which unused CLI commands are available for integration.",
          "line_range": [
            27,
            69
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_ai_status_command",
          "docstring": "Integrate cmd_status for real-time AI system status awareness.",
          "line_range": [
            71,
            100
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_ai_audit_command",
          "docstring": "Integrate cmd_audit for system health analysis awareness.",
          "line_range": [
            102,
            131
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_ai_context_command",
          "docstring": "Integrate cmd_context for context mode awareness.",
          "line_range": [
            133,
            162
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_ai_queue_command",
          "docstring": "Integrate cmd_queue for workflow queue monitoring.",
          "line_range": [
            164,
            193
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_integration_summary",
          "docstring": "Get summary of CLI command integrations for AI awareness.",
          "line_range": [
            195,
            215
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_ai_enhancement_impact",
          "docstring": "Calculate the impact of integrating unused CLI commands on AI capabilities.",
          "line_range": [
            217,
            241
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_create_fallback_status",
          "docstring": "Create fallback status information if cmd_status is not available.",
          "line_range": [
            243,
            256
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_create_fallback_audit",
          "docstring": "Create fallback audit information if cmd_audit is not available.",
          "line_range": [
            258,
            271
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_create_fallback_context",
          "docstring": "Create fallback context information if cmd_context is not available.",
          "line_range": [
            273,
            286
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_create_fallback_queue",
          "docstring": "Create fallback queue information if cmd_queue is not available.",
          "line_range": [
            288,
            301
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "AISelfAwarenessCLIIntegration",
          "docstring": "Integrates unused CLI functions to enhance AI self-awareness capabilities.\nTransforms 21 unused CLI commands into useful AI interaction tools.",
          "line_range": [
            15,
            301
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize CLI integration system.",
              "line_range": [
                21,
                25
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_discover_available_commands",
              "docstring": "Discover which unused CLI commands are available for integration.",
              "line_range": [
                27,
                69
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_ai_status_command",
              "docstring": "Integrate cmd_status for real-time AI system status awareness.",
              "line_range": [
                71,
                100
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_ai_audit_command",
              "docstring": "Integrate cmd_audit for system health analysis awareness.",
              "line_range": [
                102,
                131
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_ai_context_command",
              "docstring": "Integrate cmd_context for context mode awareness.",
              "line_range": [
                133,
                162
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_ai_queue_command",
              "docstring": "Integrate cmd_queue for workflow queue monitoring.",
              "line_range": [
                164,
                193
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_integration_summary",
              "docstring": "Get summary of CLI command integrations for AI awareness.",
              "line_range": [
                195,
                215
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_calculate_ai_enhancement_impact",
              "docstring": "Calculate the impact of integrating unused CLI commands on AI capabilities.",
              "line_range": [
                217,
                241
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_create_fallback_status",
              "docstring": "Create fallback status information if cmd_status is not available.",
              "line_range": [
                243,
                256
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_create_fallback_audit",
              "docstring": "Create fallback audit information if cmd_audit is not available.",
              "line_range": [
                258,
                271
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_create_fallback_context",
              "docstring": "Create fallback context information if cmd_context is not available.",
              "line_range": [
                273,
                286
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_create_fallback_queue",
              "docstring": "Create fallback queue information if cmd_queue is not available.",
              "line_range": [
                288,
                301
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self._discover_available_commands"
        ],
        "_discover_available_commands": [
          "hasattr",
          "unused_command_mapping.items",
          "getattr",
          "logger.error"
        ],
        "integrate_ai_status_command": [
          "cmd_status",
          "self._create_fallback_status",
          "str",
          "logger.error"
        ],
        "integrate_ai_audit_command": [
          "self._create_fallback_audit",
          "cmd_audit",
          "str",
          "logger.error"
        ],
        "integrate_ai_context_command": [
          "self._create_fallback_context",
          "str",
          "cmd_context",
          "logger.error"
        ],
        "integrate_ai_queue_command": [
          "cmd_queue",
          "self._create_fallback_queue",
          "str",
          "logger.error"
        ],
        "get_integration_summary": [
          "info.get",
          "len",
          "self._calculate_ai_enhancement_impact",
          "cmd.get",
          "sum"
        ],
        "_calculate_ai_enhancement_impact": [
          "enhanced_categories.append",
          "info.get",
          "len",
          "any",
          "capability_categories.items"
        ],
        "_create_fallback_status": [
          "str"
        ],
        "_create_fallback_audit": [
          "str"
        ],
        "_create_fallback_context": [],
        "_create_fallback_queue": [],
        "create_ai_cli_integration": [
          "AISelfAwarenessCLIIntegration"
        ],
        "get_ai_enhanced_cli_summary": [
          "integration.get_integration_summary",
          "integration.integrate_ai_context_command",
          "integration.integrate_ai_status_command",
          "integration.integrate_ai_queue_command",
          "integration.integrate_ai_audit_command",
          "create_ai_cli_integration"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "cli_commands",
        "json",
        "llmstruct",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": "31bb5f483e9f2b68b6a50f6763428111abd2eb8026401104bca1d83a1c6efdf6",
      "artifact_id": "e3e771a6-ef91-4ad8-a876-b57fa03ddafc"
    },
    {
      "module_id": "src.llmstruct.cli_config",
      "path": "src/llmstruct/cli_config.py",
      "category": "core",
      "module_doc": "CLI configuration management.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize configuration manager.",
          "line_range": [
            20,
            24
          ],
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load configuration from llmstruct.toml.",
          "line_range": [
            26,
            34
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_cache_config",
          "docstring": "Get cache configuration section.",
          "line_range": [
            36,
            38
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_copilot_config",
          "docstring": "Get Copilot configuration section.",
          "line_range": [
            40,
            42
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_queue_config",
          "docstring": "Get queue configuration section.",
          "line_range": [
            44,
            46
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_config",
          "docstring": "Get context configuration section.",
          "line_range": [
            48,
            50
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_gitignore_patterns",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": [
            52,
            66
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_dirs",
          "docstring": "Get directories to exclude from scanning.",
          "line_range": [
            68,
            82
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_include_patterns",
          "docstring": "Get file patterns to include.",
          "line_range": [
            84,
            89
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_patterns",
          "docstring": "Get file patterns to exclude.",
          "line_range": [
            91,
            96
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_max_file_size",
          "docstring": "Get maximum file size for processing (in bytes).",
          "line_range": [
            98,
            100
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_auto_update_config",
          "docstring": "Get auto-update configuration.",
          "line_range": [
            102,
            104
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "is_auto_update_enabled",
          "docstring": "Check if auto-update is enabled.",
          "line_range": [
            106,
            108
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_struct_file_path",
          "docstring": "Get path to struct.json file.",
          "line_range": [
            110,
            112
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_file_path",
          "docstring": "Get path to context file.",
          "line_range": [
            114,
            116
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_config",
          "docstring": "Save current configuration to file.",
          "line_range": [
            118,
            124
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "update_config",
          "docstring": "Update configuration value.",
          "line_range": [
            126,
            131
          ],
          "parameters": [
            "self",
            "section",
            "key",
            "value"
          ],
          "decorators": []
        },
        {
          "name": "reload_config",
          "docstring": "Reload configuration from file.",
          "line_range": [
            133,
            135
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLIConfig",
          "docstring": "Manages CLI configuration from llmstruct.toml and other sources.",
          "line_range": [
            17,
            135
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize configuration manager.",
              "line_range": [
                20,
                24
              ],
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load configuration from llmstruct.toml.",
              "line_range": [
                26,
                34
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_cache_config",
              "docstring": "Get cache configuration section.",
              "line_range": [
                36,
                38
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_copilot_config",
              "docstring": "Get Copilot configuration section.",
              "line_range": [
                40,
                42
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_queue_config",
              "docstring": "Get queue configuration section.",
              "line_range": [
                44,
                46
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_config",
              "docstring": "Get context configuration section.",
              "line_range": [
                48,
                50
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_gitignore_patterns",
              "docstring": "Load and normalize patterns from .gitignore.",
              "line_range": [
                52,
                66
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_exclude_dirs",
              "docstring": "Get directories to exclude from scanning.",
              "line_range": [
                68,
                82
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_include_patterns",
              "docstring": "Get file patterns to include.",
              "line_range": [
                84,
                89
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_exclude_patterns",
              "docstring": "Get file patterns to exclude.",
              "line_range": [
                91,
                96
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_max_file_size",
              "docstring": "Get maximum file size for processing (in bytes).",
              "line_range": [
                98,
                100
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_auto_update_config",
              "docstring": "Get auto-update configuration.",
              "line_range": [
                102,
                104
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "is_auto_update_enabled",
              "docstring": "Check if auto-update is enabled.",
              "line_range": [
                106,
                108
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_struct_file_path",
              "docstring": "Get path to struct.json file.",
              "line_range": [
                110,
                112
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_file_path",
              "docstring": "Get path to context file.",
              "line_range": [
                114,
                116
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_config",
              "docstring": "Save current configuration to file.",
              "line_range": [
                118,
                124
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "update_config",
              "docstring": "Update configuration value.",
              "line_range": [
                126,
                131
              ],
              "parameters": [
                "self",
                "section",
                "key",
                "value"
              ]
            },
            {
              "name": "reload_config",
              "docstring": "Reload configuration from file.",
              "line_range": [
                133,
                135
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._load_config",
          "Path"
        ],
        "_load_config": [
          "logging.error",
          "toml.load"
        ],
        "get_cache_config": [],
        "get_copilot_config": [],
        "get_queue_config": [],
        "get_context_config": [],
        "get_gitignore_patterns": [
          "Path",
          "gitignore_path.open",
          "line.strip",
          "logging.error",
          "line.startswith",
          "gitignore_path.exists"
        ],
        "get_exclude_dirs": [
          "parsing_config.get",
          "list",
          "cli_config.get",
          "set"
        ],
        "get_include_patterns": [
          "parsing_config.get",
          "cli_config.get"
        ],
        "get_exclude_patterns": [
          "parsing_config.get",
          "cli_config.get"
        ],
        "get_max_file_size": [],
        "get_auto_update_config": [],
        "is_auto_update_enabled": [
          "self.get_auto_update_config"
        ],
        "get_struct_file_path": [],
        "get_context_file_path": [],
        "save_config": [
          "logging.error",
          "toml.dump"
        ],
        "update_config": [
          "self.save_config"
        ],
        "reload_config": [
          "self._load_config"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "logging",
        "pathlib",
        "toml",
        "typing"
      ],
      "hash": "4e3a5903ff3fcd932118bf5521902da18bc72c67f93835354f70576d1413de49",
      "artifact_id": "f51eea64-fa04-437d-b151-fd8e4cb8383e"
    },
    {
      "module_id": "src.llmstruct.cursor_integration",
      "path": "src/llmstruct/cursor_integration.py",
      "category": "core",
      "module_doc": "Cursor IDE Integration Module\nProvides seamless integration between llmstruct AI capabilities and Cursor IDE.",
      "functions": [
        {
          "name": "create_cursor_integration",
          "docstring": "Create a Cursor integration manager for the project.",
          "line_range": [
            435,
            437
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            31,
            35
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_cursor_optimized_context",
          "docstring": "Provide Cursor with perfectly sized context based on query analysis.",
          "line_range": [
            37,
            71
          ],
          "parameters": [
            "self",
            "query_type",
            "file_context"
          ],
          "decorators": []
        },
        {
          "name": "_load_cursor_config",
          "docstring": "Load Cursor-specific configuration.",
          "line_range": [
            73,
            83
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_apply_privacy_filter",
          "docstring": "Apply privacy filtering based on level.",
          "line_range": [
            85,
            101
          ],
          "parameters": [
            "self",
            "context_data",
            "privacy_level"
          ],
          "decorators": []
        },
        {
          "name": "_filter_sensitive_dict",
          "docstring": "Filter sensitive information from dictionary.",
          "line_range": [
            103,
            115
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            121,
            124
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "delegate_to_optimal_ai",
          "docstring": "Route tasks to best AI model based on preferences.",
          "line_range": [
            126,
            160
          ],
          "parameters": [
            "self",
            "task_type",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_delegation_confidence",
          "docstring": "Calculate confidence in AI delegation decision.",
          "line_range": [
            162,
            175
          ],
          "parameters": [
            "self",
            "task_type",
            "selected_ai"
          ],
          "decorators": []
        },
        {
          "name": "_load_cursor_config",
          "docstring": "Load Cursor configuration.",
          "line_range": [
            177,
            187
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            193,
            195
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_goal_aligned_suggestions",
          "docstring": "Provide suggestions aligned with business goals.",
          "line_range": [
            197,
            242
          ],
          "parameters": [
            "self",
            "technical_context"
          ],
          "decorators": []
        },
        {
          "name": "get_priority_guidance",
          "docstring": "Provide priority guidance based on business objectives.",
          "line_range": [
            244,
            270
          ],
          "parameters": [
            "self",
            "feature_options"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_feature_score",
          "docstring": "Calculate priority score for a feature.",
          "line_range": [
            272,
            292
          ],
          "parameters": [
            "self",
            "feature",
            "prioritization"
          ],
          "decorators": []
        },
        {
          "name": "_get_scoring_reasoning",
          "docstring": "Get reasoning for feature scoring.",
          "line_range": [
            294,
            307
          ],
          "parameters": [
            "self",
            "feature",
            "prioritization"
          ],
          "decorators": []
        },
        {
          "name": "_load_personal_bridge",
          "docstring": "Load personal planning bridge data.",
          "line_range": [
            309,
            319
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            325,
            328
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "start_session",
          "docstring": "Start a new Cursor session.",
          "line_range": [
            330,
            349
          ],
          "parameters": [
            "self",
            "session_id",
            "user_preferences"
          ],
          "decorators": []
        },
        {
          "name": "save_session_context",
          "docstring": "Save important context for next session.",
          "line_range": [
            351,
            377
          ],
          "parameters": [
            "self",
            "session_data"
          ],
          "decorators": []
        },
        {
          "name": "_load_session_context",
          "docstring": "Load context from previous sessions.",
          "line_range": [
            379,
            388
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            394,
            400
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_comprehensive_cursor_response",
          "docstring": "Get comprehensive response optimized for Cursor.",
          "line_range": [
            402,
            431
          ],
          "parameters": [
            "self",
            "query",
            "file_context"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CursorSession",
          "docstring": "Represents a Cursor IDE session with context and preferences.",
          "line_range": [
            19,
            25
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "CursorContextManager",
          "docstring": "Manages context optimization specifically for Cursor interactions.",
          "line_range": [
            28,
            115
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                31,
                35
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "get_cursor_optimized_context",
              "docstring": "Provide Cursor with perfectly sized context based on query analysis.",
              "line_range": [
                37,
                71
              ],
              "parameters": [
                "self",
                "query_type",
                "file_context"
              ]
            },
            {
              "name": "_load_cursor_config",
              "docstring": "Load Cursor-specific configuration.",
              "line_range": [
                73,
                83
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_apply_privacy_filter",
              "docstring": "Apply privacy filtering based on level.",
              "line_range": [
                85,
                101
              ],
              "parameters": [
                "self",
                "context_data",
                "privacy_level"
              ]
            },
            {
              "name": "_filter_sensitive_dict",
              "docstring": "Filter sensitive information from dictionary.",
              "line_range": [
                103,
                115
              ],
              "parameters": [
                "self",
                "data"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "CursorMultiAIOrchestrator",
          "docstring": "Coordinates different AI models through Cursor interface.",
          "line_range": [
            118,
            187
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                121,
                124
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "delegate_to_optimal_ai",
              "docstring": "Route tasks to best AI model based on preferences.",
              "line_range": [
                126,
                160
              ],
              "parameters": [
                "self",
                "task_type",
                "context"
              ]
            },
            {
              "name": "_calculate_delegation_confidence",
              "docstring": "Calculate confidence in AI delegation decision.",
              "line_range": [
                162,
                175
              ],
              "parameters": [
                "self",
                "task_type",
                "selected_ai"
              ]
            },
            {
              "name": "_load_cursor_config",
              "docstring": "Load Cursor configuration.",
              "line_range": [
                177,
                187
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "PersonalPlanningCursorBridge",
          "docstring": "Bridge between personal planning and Cursor without exposing sensitive data.",
          "line_range": [
            190,
            319
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                193,
                195
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "get_goal_aligned_suggestions",
              "docstring": "Provide suggestions aligned with business goals.",
              "line_range": [
                197,
                242
              ],
              "parameters": [
                "self",
                "technical_context"
              ]
            },
            {
              "name": "get_priority_guidance",
              "docstring": "Provide priority guidance based on business objectives.",
              "line_range": [
                244,
                270
              ],
              "parameters": [
                "self",
                "feature_options"
              ]
            },
            {
              "name": "_calculate_feature_score",
              "docstring": "Calculate priority score for a feature.",
              "line_range": [
                272,
                292
              ],
              "parameters": [
                "self",
                "feature",
                "prioritization"
              ]
            },
            {
              "name": "_get_scoring_reasoning",
              "docstring": "Get reasoning for feature scoring.",
              "line_range": [
                294,
                307
              ],
              "parameters": [
                "self",
                "feature",
                "prioritization"
              ]
            },
            {
              "name": "_load_personal_bridge",
              "docstring": "Load personal planning bridge data.",
              "line_range": [
                309,
                319
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "CursorSessionManager",
          "docstring": "Maintains context across Cursor sessions for better continuity.",
          "line_range": [
            322,
            388
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                325,
                328
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "start_session",
              "docstring": "Start a new Cursor session.",
              "line_range": [
                330,
                349
              ],
              "parameters": [
                "self",
                "session_id",
                "user_preferences"
              ]
            },
            {
              "name": "save_session_context",
              "docstring": "Save important context for next session.",
              "line_range": [
                351,
                377
              ],
              "parameters": [
                "self",
                "session_data"
              ]
            },
            {
              "name": "_load_session_context",
              "docstring": "Load context from previous sessions.",
              "line_range": [
                379,
                388
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "CursorIntegrationManager",
          "docstring": "Main integration manager that coordinates all Cursor-specific features.",
          "line_range": [
            391,
            431
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                394,
                400
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "get_comprehensive_cursor_response",
              "docstring": "Get comprehensive response optimized for Cursor.",
              "line_range": [
                402,
                431
              ],
              "parameters": [
                "self",
                "query",
                "file_context"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "PersonalPlanningCursorBridge",
          "CursorSessionManager",
          "CursorMultiAIOrchestrator",
          "SystemCapabilityDiscovery",
          "CursorContextManager"
        ],
        "get_cursor_optimized_context": [
          "self._apply_privacy_filter",
          "file_path.exists",
          "open",
          "context_rules.get",
          "logger.error",
          "str",
          "optimal_config.get",
          "json.load"
        ],
        "_load_cursor_config": [
          "Path",
          "logger.error",
          "open",
          "config_path.exists",
          "json.load"
        ],
        "_apply_privacy_filter": [
          "isinstance",
          "context_data.items",
          "self._filter_sensitive_dict"
        ],
        "_filter_sensitive_dict": [
          "self._filter_sensitive_dict",
          "data.items",
          "key.lower",
          "isinstance",
          "any"
        ],
        "delegate_to_optimal_ai": [
          "Path",
          "self._calculate_delegation_confidence",
          "logger.error",
          "delegation_rules.get",
          "str"
        ],
        "_calculate_delegation_confidence": [
          "delegation_rules.get"
        ],
        "get_goal_aligned_suggestions": [
          "suggestions.extend",
          "technical_context.lower",
          "any",
          "logger.error"
        ],
        "get_priority_guidance": [
          "self._get_scoring_reasoning",
          "scored_features.append",
          "logger.error",
          "decision_guidance.get",
          "str",
          "scored_features.sort",
          "self._calculate_feature_score"
        ],
        "_calculate_feature_score": [
          "feature.lower",
          "any",
          "prioritization.get",
          "float"
        ],
        "_get_scoring_reasoning": [
          "feature.lower",
          "any",
          "reasons.append"
        ],
        "_load_personal_bridge": [
          "json.load",
          "logger.error",
          "bridge_path.exists",
          "open"
        ],
        "start_session": [
          "CursorSession",
          "self._load_session_context",
          "previous_context.get",
          "logger.error"
        ],
        "save_session_context": [
          "Path",
          "session_data.get",
          "open",
          "json.dump",
          "logger.error",
          "str"
        ],
        "_load_session_context": [
          "json.load",
          "logger.error",
          "open"
        ],
        "get_comprehensive_cursor_response": [
          "str",
          "logger.error"
        ],
        "create_cursor_integration": [
          "CursorIntegrationManager"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "SystemCapabilityDiscovery",
        "create_context_orchestrator",
        "dataclass",
        "dataclasses",
        "json",
        "llmstruct.ai_self_awareness",
        "llmstruct.context_orchestrator",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": "9dc4a1f079ae81fc45f0e314da75a46b3a6f08b14e47b41542f341da097392d3",
      "artifact_id": "934ee31e-945e-4800-b62f-d630f83cf94d"
    },
    {
      "module_id": "src.llmstruct.grok",
      "path": "src/llmstruct/grok.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "test_grok",
          "docstring": "",
          "line_range": [
            24,
            30
          ],
          "parameters": [
            "api_key",
            "prompt",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            6,
            11
          ],
          "parameters": [
            "self",
            "api_key",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "generate",
          "docstring": "",
          "line_range": [
            13,
            21
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GrokClient",
          "docstring": "",
          "line_range": [
            5,
            21
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                6,
                11
              ],
              "parameters": [
                "self",
                "api_key",
                "proxy"
              ]
            },
            {
              "name": "generate",
              "docstring": "",
              "line_range": [
                13,
                21
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "requests.Session"
        ],
        "generate": [
          "response.raise_for_status",
          "response.json",
          "len",
          "prompt.split"
        ],
        "test_grok": [
          "GrokClient",
          "time.perf_counter",
          "client.generate"
        ]
      },
      "dependencies": [
        "requests",
        "time"
      ],
      "hash": "b6bbedf1c8576d9a3f89f34490ff01f2ff2662991c93033ef3dadb5cd99929d2",
      "artifact_id": "e255e93c-f9cc-4aaa-ab28-5fd8cdeef4cf"
    },
    {
      "module_id": "src.llmstruct.transpiler",
      "path": "src/llmstruct/transpiler.py",
      "category": "core",
      "module_doc": "AI-Powered Universal Transpiler\nConverts entire codebases from one language to another using LLM analysis",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface for AI transpiler",
          "line_range": [
            475,
            527
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            142,
            149
          ],
          "parameters": [
            "self",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "analyze_source_project",
          "docstring": "Analyze source project structure",
          "line_range": [
            151,
            155
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "create_target_project_structure",
          "docstring": "Create target project directory structure",
          "line_range": [
            157,
            221
          ],
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "_generate_structure_info",
          "docstring": "Generate structure information for README",
          "line_range": [
            223,
            253
          ],
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "transpile_module",
          "docstring": "Transpile a single module using AI",
          "line_range": [
            255,
            318
          ],
          "parameters": [
            "self",
            "module",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_format_functions",
          "docstring": "Format functions for prompt",
          "line_range": [
            320,
            333
          ],
          "parameters": [
            "self",
            "functions"
          ],
          "decorators": []
        },
        {
          "name": "_format_classes",
          "docstring": "Format classes for prompt",
          "line_range": [
            335,
            348
          ],
          "parameters": [
            "self",
            "classes"
          ],
          "decorators": []
        },
        {
          "name": "determine_target_path",
          "docstring": "Determine target file path for transpiled module",
          "line_range": [
            350,
            388
          ],
          "parameters": [
            "self",
            "module"
          ],
          "decorators": []
        },
        {
          "name": "transpile_project",
          "docstring": "Transpile entire project",
          "line_range": [
            390,
            472
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TranspilerConfig",
          "docstring": "Configuration for AI transpiler",
          "line_range": [
            24,
            35
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "LanguageTemplates",
          "docstring": "Templates and patterns for different target languages",
          "line_range": [
            38,
            136
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "AITranspiler",
          "docstring": "AI-powered code transpiler",
          "line_range": [
            139,
            472
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                142,
                149
              ],
              "parameters": [
                "self",
                "config"
              ]
            },
            {
              "name": "analyze_source_project",
              "docstring": "Analyze source project structure",
              "line_range": [
                151,
                155
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "create_target_project_structure",
              "docstring": "Create target project directory structure",
              "line_range": [
                157,
                221
              ],
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "_generate_structure_info",
              "docstring": "Generate structure information for README",
              "line_range": [
                223,
                253
              ],
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "transpile_module",
              "docstring": "Transpile a single module using AI",
              "line_range": [
                255,
                318
              ],
              "parameters": [
                "self",
                "module",
                "context"
              ]
            },
            {
              "name": "_format_functions",
              "docstring": "Format functions for prompt",
              "line_range": [
                320,
                333
              ],
              "parameters": [
                "self",
                "functions"
              ]
            },
            {
              "name": "_format_classes",
              "docstring": "Format classes for prompt",
              "line_range": [
                335,
                348
              ],
              "parameters": [
                "self",
                "classes"
              ]
            },
            {
              "name": "determine_target_path",
              "docstring": "Determine target file path for transpiled module",
              "line_range": [
                350,
                388
              ],
              "parameters": [
                "self",
                "module"
              ]
            },
            {
              "name": "transpile_project",
              "docstring": "Transpile entire project",
              "line_range": [
                390,
                472
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "UniversalConverter",
          "LLMClient",
          "ConverterConfig"
        ],
        "analyze_source_project": [
          "logger.info"
        ],
        "create_target_project_structure": [
          "output_path.mkdir",
          "shutil.rmtree",
          "Path",
          "output_path.exists",
          "logger.warning",
          "self._generate_structure_info",
          "src_dir.mkdir"
        ],
        "_generate_structure_info": [
          "module.get",
          "len",
          "analysis.get",
          "categories.items",
          "category.title",
          "stats.get"
        ],
        "transpile_module": [
          "module.get",
          "response.strip",
          "self._format_functions",
          "len",
          "logger.error",
          "ctx_module.get",
          "self._format_classes",
          "str",
          "target_lang.upper",
          "target_lang.lower"
        ],
        "_format_functions": [
          "len",
          "func.get"
        ],
        "_format_classes": [
          "cls.get",
          "len"
        ],
        "determine_target_path": [
          "module.get",
          "Path",
          "module_id.split",
          "len"
        ],
        "transpile_project": [
          "self.analyze_source_project",
          "transpiled_files.append",
          "Path",
          "range",
          "errors.append",
          "report_path.write_text",
          "logger.info",
          "len",
          "self.determine_target_path",
          "logger.error",
          "analysis.get",
          "json.dumps",
          "full_target_path.write_text",
          "str",
          "self.transpile_module",
          "self.create_target_project_structure"
        ],
        "main": [
          "print",
          "AITranspiler",
          "traceback.print_exc",
          "transpiler.transpile_project",
          "argparse.ArgumentParser",
          "len",
          "exit",
          "logger.error",
          "parser.parse_args",
          "TranspilerConfig",
          "Language",
          "parser.add_argument"
        ]
      },
      "dependencies": [
        "Any",
        "ConverterConfig",
        "Dict",
        "Enum",
        "LLMClient",
        "Language",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "UniversalConverter",
        "argparse",
        "dataclass",
        "dataclasses",
        "enum",
        "json",
        "llm_client",
        "logging",
        "os",
        "parsers.universal_converter",
        "pathlib",
        "shutil",
        "traceback",
        "typing"
      ],
      "hash": "5e9ee72b1514522197462f0369930005bfc88b8d4280c814f8e296668b4e7c38",
      "artifact_id": "5b10b756-f076-4b63-b6a4-5940eee54062"
    },
    {
      "module_id": "src.llmstruct.llm_client",
      "path": "src/llmstruct/llm_client.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize LLMClient with optional Ollama host.",
          "line_range": [
            28,
            36
          ],
          "parameters": [
            "self",
            "ollama_host"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt, context, and optional model.",
          "line_range": [
            38,
            86
          ],
          "parameters": [
            "self",
            "prompt",
            "context_path",
            "mode",
            "model",
            "artifact_ids"
          ],
          "decorators": []
        },
        {
          "name": "_query_grok",
          "docstring": "Query Grok API.",
          "line_range": [
            88,
            115
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_anthropic",
          "docstring": "Query Anthropic API.",
          "line_range": [
            117,
            141
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_ollama",
          "docstring": "Query Ollama API with specified model.",
          "line_range": [
            143,
            156
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "_query_hybrid",
          "docstring": "Query multiple LLMs and combine results.",
          "line_range": [
            158,
            172
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMClient",
          "docstring": "",
          "line_range": [
            27,
            172
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize LLMClient with optional Ollama host.",
              "line_range": [
                28,
                36
              ],
              "parameters": [
                "self",
                "ollama_host"
              ]
            },
            {
              "name": "query",
              "docstring": "Query LLMs with prompt, context, and optional model.",
              "line_range": [
                38,
                86
              ],
              "parameters": [
                "self",
                "prompt",
                "context_path",
                "mode",
                "model",
                "artifact_ids"
              ]
            },
            {
              "name": "_query_grok",
              "docstring": "Query Grok API.",
              "line_range": [
                88,
                115
              ],
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_anthropic",
              "docstring": "Query Anthropic API.",
              "line_range": [
                117,
                141
              ],
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_ollama",
              "docstring": "Query Ollama API with specified model.",
              "line_range": [
                143,
                156
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            },
            {
              "name": "_query_hybrid",
              "docstring": "Query multiple LLMs and combine results.",
              "line_range": [
                158,
                172
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "logging.info",
          "os.getenv",
          "int"
        ],
        "query": [
          "Path",
          "logging.warning",
          "range",
          "logging.error",
          "self._query_grok",
          "self._query_ollama",
          "json.dumps",
          "self._query_anthropic",
          "asyncio.sleep",
          "self._query_hybrid",
          "logging.info",
          "json.load"
        ],
        "_query_grok": [
          "logging.error",
          "response.json",
          "aiohttp.ClientSession",
          "logging.info",
          "session.post",
          "result.get"
        ],
        "_query_anthropic": [
          "logging.error",
          "response.json",
          "aiohttp.ClientSession",
          "logging.info",
          "session.post",
          "result.get"
        ],
        "_query_ollama": [
          "logging.error",
          "response.json",
          "aiohttp.ClientSession",
          "logging.debug",
          "logging.info",
          "session.post",
          "result.get"
        ],
        "_query_hybrid": [
          "logging.info",
          "self._query_grok",
          "self._query_ollama",
          "len",
          "asyncio.gather",
          "self._query_anthropic",
          "isinstance"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "aiohttp",
        "asyncio",
        "dotenv",
        "json",
        "load_dotenv",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": "c477d5e96f165fa96546ff8e2673db785cee146f6fffd0f424d21072431133ba",
      "artifact_id": "895644ff-f62d-44fc-900a-417aa71b957a"
    },
    {
      "module_id": "src.llmstruct.__main__",
      "path": "src/llmstruct/__main__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "llmstruct.cli",
        "main"
      ],
      "hash": "de795cd58c2dc4122dd30b382c844a7c67fc36489e443b7d12170fa0e15994dc",
      "artifact_id": "aa92d697-a474-4b82-86a4-e533b4866cfe"
    },
    {
      "module_id": "src.llmstruct.metrics_tracker",
      "path": "src/llmstruct/metrics_tracker.py",
      "category": "core",
      "module_doc": "LLMStruct Metrics Tracker - \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043c\u0435\u0442\u0440\u0438\u043a \u043f\u0440\u043e\u0435\u043a\u0442\u0430\n\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0435\u0442 \u0442\u043e\u043a\u0435\u043d\u044b, performance, \u043e\u0448\u0438\u0431\u043a\u0438, \u043b\u043e\u0436\u043d\u044b\u0435 \u043f\u0443\u0442\u0438 \u043f\u0440\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 master-plans",
      "functions": [
        {
          "name": "get_metrics_tracker",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 MetricsTracker",
          "line_range": [
            364,
            369
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "track_token_usage",
          "docstring": "\u0423\u0434\u043e\u0431\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u043e\u0432",
          "line_range": [
            371,
            373
          ],
          "parameters": [
            "provider",
            "model",
            "input_tokens",
            "output_tokens",
            "cost"
          ],
          "decorators": []
        },
        {
          "name": "track_task_start",
          "docstring": "\u0423\u0434\u043e\u0431\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            375,
            377
          ],
          "parameters": [
            "task_id",
            "task_type"
          ],
          "decorators": []
        },
        {
          "name": "track_task_complete",
          "docstring": "\u0423\u0434\u043e\u0431\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            379,
            381
          ],
          "parameters": [
            "task_id",
            "status",
            "error"
          ],
          "decorators": []
        },
        {
          "name": "track_false_path",
          "docstring": "\u0423\u0434\u043e\u0431\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u043b\u043e\u0436\u043d\u044b\u0445 \u043f\u0443\u0442\u0435\u0439",
          "line_range": [
            383,
            385
          ],
          "parameters": [
            "task_id",
            "description"
          ],
          "decorators": []
        },
        {
          "name": "track_workflow_event",
          "docstring": "\u0423\u0434\u043e\u0431\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f workflow \u0441\u043e\u0431\u044b\u0442\u0438\u0439",
          "line_range": [
            387,
            389
          ],
          "parameters": [
            "event_type",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "track_telegram_interaction",
          "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0447\u0435\u0440\u0435\u0437 Telegram \u0441 \u043f\u043e\u043b\u043d\u044b\u043c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043e\u043c",
          "line_range": [
            391,
            421
          ],
          "parameters": [
            "user_message",
            "bot_response",
            "context_size"
          ],
          "decorators": []
        },
        {
          "name": "track_api_interaction",
          "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 API \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u043f\u043e\u043b\u043d\u044b\u043c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043e\u043c",
          "line_range": [
            423,
            449
          ],
          "parameters": [
            "endpoint",
            "request_tokens",
            "response_tokens",
            "context_tokens"
          ],
          "decorators": []
        },
        {
          "name": "get_token_summary",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0432\u043e\u0434\u043a\u0443 \u043f\u043e \u0442\u043e\u043a\u0435\u043d\u0430\u043c",
          "line_range": [
            451,
            470
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__post_init__",
          "docstring": "",
          "line_range": [
            41,
            43
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__post_init__",
          "docstring": "",
          "line_range": [
            58,
            60
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            65,
            87
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_generate_session_id",
          "docstring": "\u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 ID \u0441\u0435\u0441\u0441\u0438\u0438",
          "line_range": [
            89,
            92
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_current_branch",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0442\u0435\u043a\u0443\u0449\u0443\u044e git \u0432\u0435\u0442\u043a\u0443",
          "line_range": [
            94,
            104
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_commit_hash",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 commit hash",
          "line_range": [
            106,
            116
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_struct_json_hash",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 hash struct.json \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439",
          "line_range": [
            118,
            124
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "track_token_usage",
          "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u043e\u0432",
          "line_range": [
            126,
            142
          ],
          "parameters": [
            "self",
            "provider",
            "model",
            "input_tokens",
            "output_tokens",
            "cost_estimate"
          ],
          "decorators": []
        },
        {
          "name": "start_task",
          "docstring": "\u041d\u0430\u0447\u0430\u043b\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            144,
            155
          ],
          "parameters": [
            "self",
            "task_id",
            "task_type"
          ],
          "decorators": []
        },
        {
          "name": "complete_task",
          "docstring": "\u0417\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            157,
            174
          ],
          "parameters": [
            "self",
            "task_id",
            "status",
            "error_message"
          ],
          "decorators": []
        },
        {
          "name": "track_false_path",
          "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u043b\u043e\u0436\u043d\u044b\u0445 \u043f\u0443\u0442\u0435\u0439",
          "line_range": [
            176,
            185
          ],
          "parameters": [
            "self",
            "task_id",
            "false_path_description"
          ],
          "decorators": []
        },
        {
          "name": "track_rollback",
          "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u043a\u0430\u0442\u043e\u0432",
          "line_range": [
            187,
            193
          ],
          "parameters": [
            "self",
            "task_id"
          ],
          "decorators": []
        },
        {
          "name": "track_retry",
          "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u044b\u0445 \u043f\u043e\u043f\u044b\u0442\u043e\u043a",
          "line_range": [
            195,
            201
          ],
          "parameters": [
            "self",
            "task_id"
          ],
          "decorators": []
        },
        {
          "name": "track_workflow_event",
          "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 workflow \u0441\u043e\u0431\u044b\u0442\u0438\u0439",
          "line_range": [
            203,
            226
          ],
          "parameters": [
            "self",
            "event_type",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "calculate_efficiency_score",
          "docstring": "\u0420\u0430\u0441\u0447\u0435\u0442 \u043e\u0446\u0435\u043d\u043a\u0438 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438",
          "line_range": [
            228,
            253
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_session_summary",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0441\u0435\u0441\u0441\u0438\u0438",
          "line_range": [
            255,
            277
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_session_duration",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0441\u0435\u0441\u0441\u0438\u0438 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445",
          "line_range": [
            279,
            282
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_session",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u0435\u0441\u0441\u0438\u0438",
          "line_range": [
            284,
            292
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_update_aggregate_metrics",
          "docstring": "\u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0430\u0433\u0440\u0435\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043c\u0435\u0442\u0440\u0438\u043a",
          "line_range": [
            294,
            322
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_analytics_data",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432",
          "line_range": [
            324,
            358
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TokenUsage",
          "docstring": "\u041c\u0435\u0442\u0440\u0438\u043a\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u043e\u0432",
          "line_range": [
            17,
            25
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "TaskExecution",
          "docstring": "\u041c\u0435\u0442\u0440\u0438\u043a\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            28,
            43
          ],
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "",
              "line_range": [
                41,
                43
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "WorkflowMetrics",
          "docstring": "\u041c\u0435\u0442\u0440\u0438\u043a\u0438 workflow",
          "line_range": [
            46,
            60
          ],
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "",
              "line_range": [
                58,
                60
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "MetricsTracker",
          "docstring": "\u0426\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u043c\u0435\u0442\u0440\u0438\u043a",
          "line_range": [
            62,
            358
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                65,
                87
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_generate_session_id",
              "docstring": "\u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 ID \u0441\u0435\u0441\u0441\u0438\u0438",
              "line_range": [
                89,
                92
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_current_branch",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0442\u0435\u043a\u0443\u0449\u0443\u044e git \u0432\u0435\u0442\u043a\u0443",
              "line_range": [
                94,
                104
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_commit_hash",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 commit hash",
              "line_range": [
                106,
                116
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_struct_json_hash",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 hash struct.json \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439",
              "line_range": [
                118,
                124
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "track_token_usage",
              "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u043e\u0432",
              "line_range": [
                126,
                142
              ],
              "parameters": [
                "self",
                "provider",
                "model",
                "input_tokens",
                "output_tokens",
                "cost_estimate"
              ]
            },
            {
              "name": "start_task",
              "docstring": "\u041d\u0430\u0447\u0430\u043b\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
              "line_range": [
                144,
                155
              ],
              "parameters": [
                "self",
                "task_id",
                "task_type"
              ]
            },
            {
              "name": "complete_task",
              "docstring": "\u0417\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438",
              "line_range": [
                157,
                174
              ],
              "parameters": [
                "self",
                "task_id",
                "status",
                "error_message"
              ]
            },
            {
              "name": "track_false_path",
              "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u043b\u043e\u0436\u043d\u044b\u0445 \u043f\u0443\u0442\u0435\u0439",
              "line_range": [
                176,
                185
              ],
              "parameters": [
                "self",
                "task_id",
                "false_path_description"
              ]
            },
            {
              "name": "track_rollback",
              "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u043a\u0430\u0442\u043e\u0432",
              "line_range": [
                187,
                193
              ],
              "parameters": [
                "self",
                "task_id"
              ]
            },
            {
              "name": "track_retry",
              "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u044b\u0445 \u043f\u043e\u043f\u044b\u0442\u043e\u043a",
              "line_range": [
                195,
                201
              ],
              "parameters": [
                "self",
                "task_id"
              ]
            },
            {
              "name": "track_workflow_event",
              "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 workflow \u0441\u043e\u0431\u044b\u0442\u0438\u0439",
              "line_range": [
                203,
                226
              ],
              "parameters": [
                "self",
                "event_type",
                "details"
              ]
            },
            {
              "name": "calculate_efficiency_score",
              "docstring": "\u0420\u0430\u0441\u0447\u0435\u0442 \u043e\u0446\u0435\u043d\u043a\u0438 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438",
              "line_range": [
                228,
                253
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_session_summary",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0441\u0435\u0441\u0441\u0438\u0438",
              "line_range": [
                255,
                277
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_session_duration",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0441\u0435\u0441\u0441\u0438\u0438 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445",
              "line_range": [
                279,
                282
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_session",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u0435\u0441\u0441\u0438\u0438",
              "line_range": [
                284,
                292
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_update_aggregate_metrics",
              "docstring": "\u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0430\u0433\u0440\u0435\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043c\u0435\u0442\u0440\u0438\u043a",
              "line_range": [
                294,
                322
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_analytics_data",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432",
              "line_range": [
                324,
                358
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__post_init__": [],
        "__init__": [
          "logging.info",
          "Path",
          "self._generate_session_id",
          "self._get_current_branch",
          "datetime.now",
          "self._get_commit_hash",
          "self._get_struct_json_hash",
          "asdict",
          "WorkflowMetrics"
        ],
        "_generate_session_id": [
          "timestamp.encode",
          "datetime.now",
          "hashlib.md5"
        ],
        "_get_current_branch": [
          "subprocess.run"
        ],
        "_get_commit_hash": [
          "subprocess.run"
        ],
        "_get_struct_json_hash": [
          "f.read",
          "hashlib.md5",
          "struct_file.exists",
          "open"
        ],
        "track_token_usage": [
          "get_metrics_tracker"
        ],
        "start_task": [
          "logging.info",
          "datetime.now",
          "asdict",
          "TaskExecution"
        ],
        "complete_task": [
          "datetime.fromisoformat",
          "datetime.now",
          "logging.info",
          "task_data.get"
        ],
        "track_false_path": [
          "get_metrics_tracker"
        ],
        "track_rollback": [
          "logging.warning"
        ],
        "track_retry": [
          "logging.info"
        ],
        "track_workflow_event": [
          "get_metrics_tracker"
        ],
        "calculate_efficiency_score": [
          "max",
          "len",
          "min",
          "sum",
          "t.get"
        ],
        "get_session_summary": [
          "usage.get",
          "len",
          "self.calculate_efficiency_score",
          "sum",
          "self._get_session_duration",
          "t.get"
        ],
        "_get_session_duration": [
          "datetime.fromisoformat",
          "datetime.now"
        ],
        "save_session": [
          "json.dump",
          "logging.info",
          "self._update_aggregate_metrics",
          "open"
        ],
        "_update_aggregate_metrics": [
          "self.get_session_summary",
          "len",
          "open",
          "json.dump",
          "sum",
          "json.load"
        ],
        "get_analytics_data": [
          "max",
          "json.load",
          "open"
        ],
        "get_metrics_tracker": [
          "MetricsTracker"
        ],
        "track_task_start": [
          "get_metrics_tracker"
        ],
        "track_task_complete": [
          "get_metrics_tracker"
        ],
        "track_telegram_interaction": [
          "datetime.now",
          "logger.info",
          "len",
          "logger.error",
          "get_metrics_tracker"
        ],
        "track_api_interaction": [
          "datetime.now",
          "logger.info",
          "get_metrics_tracker",
          "logger.error"
        ],
        "get_token_summary": [
          "len",
          "get_metrics_tracker",
          "logger.error"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "asdict",
        "dataclass",
        "dataclasses",
        "datetime",
        "hashlib",
        "json",
        "logging",
        "pathlib",
        "subprocess",
        "time",
        "timedelta",
        "typing"
      ],
      "hash": "5d0ec49a3a6386fe9c69de27c593bd32a2237f5847109632f618feebc1ffcee8",
      "artifact_id": "468b2cc1-78d0-43c3-ab74-8c0963cbbbdb"
    },
    {
      "module_id": "src.llmstruct.cli",
      "path": "src/llmstruct/cli.py",
      "category": "core",
      "module_doc": "LLMStruct CLI - Main entry point for the command-line interface.",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": [
            43,
            57
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from llmstruct.toml or return empty dict.",
          "line_range": [
            60,
            69
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": [
            72,
            81
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default ./tmp) and return the path.",
          "line_range": [
            84,
            104
          ],
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": [
            107,
            114
          ],
          "parameters": [
            "response"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with modular structure if available, fallback to legacy.",
          "line_range": [
            117,
            127
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive_modular",
          "docstring": "Run interactive CLI with modular structure.",
          "line_range": [
            130,
            144
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive_legacy",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": [
            147,
            503
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "process_cli_queue_enhanced",
          "docstring": "Enhanced queue processing with workflow support, performance tracking, and safety validation.",
          "line_range": [
            506,
            705
          ],
          "parameters": [
            "root_dir",
            "context_path",
            "args",
            "cache",
            "client"
          ],
          "decorators": []
        },
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": [
            708,
            759
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": [
            762,
            818
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": [
            821,
            823
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": [
            826,
            828
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": [
            831,
            833
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "copilot",
          "docstring": "Copilot integration and context management.",
          "line_range": [
            836,
            954
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "audit",
          "docstring": "Audit project structure and generate reports.",
          "line_range": [
            957,
            975
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "analyze_duplicates",
          "docstring": "Analyze function duplication using struct.json deep analysis.",
          "line_range": [
            978,
            1081
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "add_api_bot_commands",
          "docstring": "\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f API \u0438 Bot \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438",
          "line_range": [
            1084,
            1158
          ],
          "parameters": [
            "subparsers"
          ],
          "decorators": []
        },
        {
          "name": "cmd_api_management",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 API \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c",
          "line_range": [
            1161,
            1243
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_bot_management",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 Telegram \u0431\u043e\u0442\u0430\u043c\u0438",
          "line_range": [
            1246,
            1348
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_services",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u043c\u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438 (API + Bots)",
          "line_range": [
            1351,
            1412
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_metrics",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0430\u043c\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            1415,
            1434
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "metrics_status",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 \u043c\u0435\u0442\u0440\u0438\u043a",
          "line_range": [
            1437,
            1459
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "metrics_summary",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u0443\u044e \u0441\u0432\u043e\u0434\u043a\u0443 \u043c\u0435\u0442\u0440\u0438\u043a",
          "line_range": [
            1462,
            1514
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "metrics_analytics",
          "docstring": "\u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435",
          "line_range": [
            1517,
            1562
          ],
          "parameters": [
            "output_file",
            "format"
          ],
          "decorators": []
        },
        {
          "name": "metrics_report",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u0441\u0435\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u0439 \u043e\u0442\u0447\u0435\u0442",
          "line_range": [
            1565,
            1616
          ],
          "parameters": [
            "sessions",
            "output_file"
          ],
          "decorators": []
        },
        {
          "name": "metrics_track",
          "docstring": "\u0420\u0443\u0447\u043d\u043e\u0435 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u0439",
          "line_range": [
            1619,
            1630
          ],
          "parameters": [
            "event_type",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "metrics_tokens",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u0443\u044e \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u0442\u043e\u043a\u0435\u043d\u043e\u0432",
          "line_range": [
            1633,
            1681
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": [
            1684,
            1921
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "Path",
          "gitignore_path.open",
          "line.strip",
          "logging.error",
          "line.startswith",
          "gitignore_path.exists"
        ],
        "load_config": [
          "Path",
          "logging.error",
          "config_path.open",
          "toml.load",
          "config_path.exists"
        ],
        "read_file_content": [
          "Path",
          "path.is_file",
          "logging.error",
          "path.open",
          "f.read"
        ],
        "write_to_file": [
          "base_path.mkdir",
          "Path",
          "logging.warning",
          "file_path.open",
          "logging.error",
          "f.write",
          "str",
          "logging.info",
          "file_path.exists",
          "re.sub"
        ],
        "parse_files_from_response": [
          "content.strip",
          "re.findall",
          "filename.strip",
          "files.append"
        ],
        "interactive": [
          "logging.warning",
          "interactive_legacy",
          "interactive_modular"
        ],
        "interactive_modular": [
          "logging.info",
          "hasattr",
          "create_cli_core",
          "cli_core.run_interactive_mode"
        ],
        "interactive_legacy": [
          "user_input.lower",
          "LLMClient",
          "struct_data.get",
          "time.ctime",
          "input",
          "os.stat",
          "json.dump",
          "subprocess.run",
          "cache.clear",
          "attach_to_llm_request",
          "client.query",
          "cache.list_keys",
          "time.time",
          "cache.get_stats",
          "get_folder_structure",
          "len",
          "json.dumps",
          "int",
          "sorted",
          "os.listdir",
          "read_file_content",
          "m.group",
          "workflow.get",
          "json.load",
          "parse",
          "JSONCache",
          "logging.warning",
          "cache.close",
          "logging.error",
          "process_cli_queue_enhanced",
          "events_data.append",
          "os.makedirs",
          "write_to_file",
          "isinstance",
          "args_str.strip",
          "print",
          "user_input.startswith",
          "load_gitignore",
          "Path",
          "re.match",
          "open"
        ],
        "process_cli_queue_enhanced": [
          "print",
          "load_gitignore",
          "time.time",
          "options.get",
          "get_folder_structure",
          "logging.error",
          "item.get",
          "len",
          "open",
          "enumerate",
          "write_to_file",
          "workflow.get",
          "read_file_content",
          "isinstance",
          "logging.info",
          "json.load",
          "attach_to_llm_request",
          "client.query"
        ],
        "parse": [
          "logging.info",
          "load_gitignore",
          "JSONCache",
          "Path",
          "logging.warning",
          "cache.close",
          "logging.error",
          "generate_json",
          "json.dump",
          "cache.cache_json",
          "load_config",
          "cli_config.get",
          "config.get",
          "parsing_config.get"
        ],
        "query": [
          "JSONCache",
          "Path",
          "LLMClient",
          "logging.warning",
          "logging.error",
          "client.query_with_context",
          "hasattr",
          "cache.close",
          "json.dump",
          "orchestrator.get_context_for_scenario",
          "create_context_orchestrator",
          "logging.info",
          "client.query"
        ],
        "context": [
          "logging.warning"
        ],
        "dogfood": [
          "logging.warning"
        ],
        "review": [
          "logging.warning"
        ],
        "copilot": [
          "shutil.copy",
          "manager.load_context_layer",
          "manager.export_context",
          "manager.close",
          "f.write",
          "manager.unload_context_layer",
          "manager.validate_change",
          "layers.split",
          "manager.get_context_status",
          "manager.refresh_all_contexts",
          "getattr",
          "logging.error",
          "hasattr",
          "smart_suggest",
          "template_path.exists",
          "config_path.exists",
          "initialize_copilot",
          "print",
          "Path",
          "open",
          "enumerate",
          "logging.info"
        ],
        "audit": [
          "print",
          "Path",
          "analyze_duplicates",
          "hasattr",
          "file_path.exists"
        ],
        "analyze_duplicates": [
          "print",
          "duplication_data.get",
          "traceback.print_exc",
          "r.get",
          "getattr",
          "rec.get",
          "hasattr",
          "len",
          "duplicates.items",
          "orchestrator.analyze_codebase_for_duplicates",
          "filtered_duplicates.items",
          "analysis.get",
          "json.dumps",
          "open",
          "json.dump",
          "sorted",
          "enumerate",
          "WorkflowOrchestrator"
        ],
        "add_api_bot_commands": [
          "api_subparsers.add_parser",
          "bot_parser.add_subparsers",
          "metrics_analytics.add_argument",
          "metrics_track.add_argument",
          "metrics_parser.add_subparsers",
          "api_parser.add_subparsers",
          "api_start.add_argument",
          "bot_start.add_argument",
          "subparsers.add_parser",
          "metrics_subparsers.add_parser",
          "services_parser.add_subparsers",
          "services_subparsers.add_parser",
          "metrics_report.add_argument",
          "bot_subparsers.add_parser"
        ],
        "cmd_api_management": [
          "print",
          "pid_file.unlink",
          "Path",
          "requests.post",
          "f.write",
          "requests.get",
          "subprocess.Popen",
          "open",
          "response.json",
          "pid_file.exists",
          "psutil.Process",
          "int",
          "str",
          "process.wait",
          "f.read",
          "process.terminate",
          "venv_path.exists",
          "data.get"
        ],
        "cmd_bot_management": [
          "print",
          "pid_file.unlink",
          "Path",
          "process.is_running",
          "active_bots.append",
          "f.write",
          "os.getenv",
          "subprocess.Popen",
          "open",
          "bot_scripts.get",
          "pid_file.exists",
          "psutil.Process",
          "int",
          "str",
          "process.wait",
          "f.read",
          "process.terminate"
        ],
        "cmd_services": [
          "cmd_api_management",
          "cmd_bot_management",
          "print",
          "time.sleep",
          "type"
        ],
        "cmd_metrics": [
          "print",
          "metrics_report",
          "metrics_analytics",
          "metrics_track",
          "metrics_summary",
          "metrics_tokens",
          "metrics_status"
        ],
        "metrics_status": [
          "print",
          "tracker.get_session_summary",
          "get_metrics_tracker"
        ],
        "metrics_summary": [
          "print",
          "tracker.get_session_summary",
          "max",
          "get_metrics_tracker"
        ],
        "metrics_analytics": [
          "print",
          "open",
          "csv.writer",
          "tracker.get_session_summary",
          "writer.writerow",
          "tracker.get_analytics_data",
          "time.strftime",
          "enumerate",
          "json.dump",
          "json.dumps",
          "get_metrics_tracker"
        ],
        "metrics_report": [
          "print",
          "f.write",
          "len",
          "min",
          "open",
          "tracker.get_analytics_data",
          "time.strftime",
          "sum",
          "analytics.get",
          "get_metrics_tracker"
        ],
        "metrics_track": [
          "print",
          "track_workflow_event"
        ],
        "metrics_tokens": [
          "print",
          "summary.get",
          "interaction.get",
          "get_token_summary",
          "enumerate",
          "get_metrics_tracker"
        ],
        "main": [
          "argparse.ArgumentParser",
          "subparsers.add_parser",
          "query_parser.add_argument",
          "interactive",
          "review_parser.add_argument",
          "parse_parser.add_argument",
          "cmd_services",
          "dogfood_parser.add_argument",
          "add_api_bot_commands",
          "dogfood",
          "parser.add_subparsers",
          "parser.parse_args",
          "audit",
          "copilot_parser.add_argument",
          "asyncio.run",
          "cmd_metrics",
          "parse",
          "review",
          "context",
          "duplicates_parser.add_argument",
          "copilot",
          "audit_parser.add_argument",
          "analyze_duplicates",
          "interactive_parser.add_argument",
          "query",
          "context_parser.add_argument"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "WorkflowOrchestrator",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "cli_core",
        "context_orchestrator",
        "copilot",
        "create_cli_core",
        "create_context_orchestrator",
        "csv",
        "generate_json",
        "get_folder_structure",
        "get_metrics_tracker",
        "get_token_summary",
        "initialize_copilot",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "logging",
        "metrics_tracker",
        "os",
        "pathlib",
        "psutil",
        "re",
        "requests",
        "shutil",
        "signal",
        "smart_suggest",
        "subprocess",
        "sys",
        "time",
        "toml",
        "traceback",
        "track_workflow_event",
        "typing",
        "workflow_orchestrator"
      ],
      "hash": "dee7899a8f4e25fade39cade1ddd7d1f27e29c6f4b03c0010f9a1f677d6406da",
      "artifact_id": "e9bf0391-65fb-4fc5-a953-f53521418640"
    },
    {
      "module_id": "src.llmstruct.context_orchestrator",
      "path": "src/llmstruct/context_orchestrator.py",
      "category": "core",
      "module_doc": "Smart Context Orchestration for LLMStruct\nOptimizes context loading for different LLM usage scenarios",
      "functions": [
        {
          "name": "create_context_orchestrator",
          "docstring": "Factory function to create context orchestrator.",
          "line_range": [
            506,
            508
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_optimized_context",
          "docstring": "Get optimized context for scenario - convenience function.\n\nArgs:\n    project_root: Project root directory\n    scenario: Usage scenario (cli_direct, vscode_copilot, session_work)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
          "line_range": [
            511,
            543
          ],
          "parameters": [
            "project_root",
            "scenario",
            "file_path",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            57,
            75
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load context orchestration configuration.",
          "line_range": [
            77,
            119
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_for_scenario",
          "docstring": "Get optimized context for specific usage scenario.\n\nArgs:\n    scenario: Usage scenario (cli_direct, vscode_copilot, etc.)\n    file_path: Optional file path for focused context\n    custom_budget: Optional custom token budget\n    \nReturns:\n    Optimized context dictionary",
          "line_range": [
            121,
            161
          ],
          "parameters": [
            "self",
            "scenario",
            "file_path",
            "custom_budget"
          ],
          "decorators": []
        },
        {
          "name": "_get_budget_for_scenario",
          "docstring": "Create budget configuration for scenario.",
          "line_range": [
            163,
            172
          ],
          "parameters": [
            "self",
            "scenario_config"
          ],
          "decorators": []
        },
        {
          "name": "_load_full_context",
          "docstring": "Load complete context without token restrictions.",
          "line_range": [
            174,
            187
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_extract_relationship_summary",
          "docstring": "\u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u043a\u0440\u0430\u0442\u043a\u0438\u0439 \u0433\u0440\u0430\u0444 \u0441\u0432\u044f\u0437\u0435\u0439 \u043c\u0435\u0436\u0434\u0443 \u043c\u043e\u0434\u0443\u043b\u044f\u043c\u0438 \u0438\u0437 struct.json:\n- module_id, path\n- dependencies (\u0442\u043e\u043b\u044c\u043a\u043e \u0438\u043c\u0435\u043d\u0430 \u043c\u043e\u0434\u0443\u043b\u0435\u0439)\n- \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b/\u0444\u0443\u043d\u043a\u0446\u0438\u0438",
          "line_range": [
            189,
            216
          ],
          "parameters": [
            "self",
            "max_modules"
          ],
          "decorators": []
        },
        {
          "name": "_load_focused_context",
          "docstring": "Load focused context optimized for VS Code Copilot.\n- \u0412\u0441\u0435\u0433\u0434\u0430 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 summary \u0438\u0437 init.json (\u0443\u0440\u043e\u0432\u0435\u043d\u044c 1)\n- relationship_context (structural) \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 file_path \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434 \u0438\u043b\u0438 \u044f\u0432\u043d\u043e structural \u0437\u0430\u043f\u0440\u043e\u0441",
          "line_range": [
            218,
            275
          ],
          "parameters": [
            "self",
            "file_path",
            "budget"
          ],
          "decorators": []
        },
        {
          "name": "_load_session_context",
          "docstring": "Load session-specific context.",
          "line_range": [
            277,
            299
          ],
          "parameters": [
            "self",
            "budget"
          ],
          "decorators": []
        },
        {
          "name": "_load_minimal_context",
          "docstring": "Load minimal context for quick operations.",
          "line_range": [
            301,
            319
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_source_with_filtering",
          "docstring": "Load source with optional filtering based on budget.",
          "line_range": [
            321,
            344
          ],
          "parameters": [
            "self",
            "source_name",
            "budget"
          ],
          "decorators": []
        },
        {
          "name": "_get_file_context",
          "docstring": "Get context specific to a file.",
          "line_range": [
            346,
            357
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_extract_essential_parts",
          "docstring": "Extract essential parts of data to fit token budget.",
          "line_range": [
            359,
            381
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_filter_for_current_session",
          "docstring": "Filter data to items relevant to current session.",
          "line_range": [
            383,
            422
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_extract_summary",
          "docstring": "Extract summary information from data.",
          "line_range": [
            424,
            443
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_apply_section_filtering",
          "docstring": "Apply section filtering to exclude specified sections.",
          "line_range": [
            445,
            457
          ],
          "parameters": [
            "self",
            "data",
            "exclude_sections"
          ],
          "decorators": []
        },
        {
          "name": "_update_metrics",
          "docstring": "Update performance metrics.",
          "line_range": [
            459,
            477
          ],
          "parameters": [
            "self",
            "scenario",
            "context",
            "load_time"
          ],
          "decorators": []
        },
        {
          "name": "get_metrics_summary",
          "docstring": "Get summary of context loading metrics.",
          "line_range": [
            479,
            494
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_metrics",
          "docstring": "Save metrics to file for analysis.",
          "line_range": [
            496,
            501
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ContextMode",
          "docstring": "Context loading modes for different scenarios.",
          "line_range": [
            17,
            22
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextLevel",
          "docstring": "Progressive context levels with token budgets.",
          "line_range": [
            25,
            30
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextBudget",
          "docstring": "Token budget configuration for context loading.",
          "line_range": [
            34,
            39
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ContextMetrics",
          "docstring": "Metrics for context loading performance.",
          "line_range": [
            43,
            48
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "SmartContextOrchestrator",
          "docstring": "Orchestrates context loading based on usage scenario and token budget.\nProvides optimized context for different LLM integration patterns.",
          "line_range": [
            51,
            501
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                57,
                75
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load context orchestration configuration.",
              "line_range": [
                77,
                119
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_for_scenario",
              "docstring": "Get optimized context for specific usage scenario.\n\nArgs:\n    scenario: Usage scenario (cli_direct, vscode_copilot, etc.)\n    file_path: Optional file path for focused context\n    custom_budget: Optional custom token budget\n    \nReturns:\n    Optimized context dictionary",
              "line_range": [
                121,
                161
              ],
              "parameters": [
                "self",
                "scenario",
                "file_path",
                "custom_budget"
              ]
            },
            {
              "name": "_get_budget_for_scenario",
              "docstring": "Create budget configuration for scenario.",
              "line_range": [
                163,
                172
              ],
              "parameters": [
                "self",
                "scenario_config"
              ]
            },
            {
              "name": "_load_full_context",
              "docstring": "Load complete context without token restrictions.",
              "line_range": [
                174,
                187
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_extract_relationship_summary",
              "docstring": "\u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u043a\u0440\u0430\u0442\u043a\u0438\u0439 \u0433\u0440\u0430\u0444 \u0441\u0432\u044f\u0437\u0435\u0439 \u043c\u0435\u0436\u0434\u0443 \u043c\u043e\u0434\u0443\u043b\u044f\u043c\u0438 \u0438\u0437 struct.json:\n- module_id, path\n- dependencies (\u0442\u043e\u043b\u044c\u043a\u043e \u0438\u043c\u0435\u043d\u0430 \u043c\u043e\u0434\u0443\u043b\u0435\u0439)\n- \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b/\u0444\u0443\u043d\u043a\u0446\u0438\u0438",
              "line_range": [
                189,
                216
              ],
              "parameters": [
                "self",
                "max_modules"
              ]
            },
            {
              "name": "_load_focused_context",
              "docstring": "Load focused context optimized for VS Code Copilot.\n- \u0412\u0441\u0435\u0433\u0434\u0430 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 summary \u0438\u0437 init.json (\u0443\u0440\u043e\u0432\u0435\u043d\u044c 1)\n- relationship_context (structural) \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 file_path \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434 \u0438\u043b\u0438 \u044f\u0432\u043d\u043e structural \u0437\u0430\u043f\u0440\u043e\u0441",
              "line_range": [
                218,
                275
              ],
              "parameters": [
                "self",
                "file_path",
                "budget"
              ]
            },
            {
              "name": "_load_session_context",
              "docstring": "Load session-specific context.",
              "line_range": [
                277,
                299
              ],
              "parameters": [
                "self",
                "budget"
              ]
            },
            {
              "name": "_load_minimal_context",
              "docstring": "Load minimal context for quick operations.",
              "line_range": [
                301,
                319
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_source_with_filtering",
              "docstring": "Load source with optional filtering based on budget.",
              "line_range": [
                321,
                344
              ],
              "parameters": [
                "self",
                "source_name",
                "budget"
              ]
            },
            {
              "name": "_get_file_context",
              "docstring": "Get context specific to a file.",
              "line_range": [
                346,
                357
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_extract_essential_parts",
              "docstring": "Extract essential parts of data to fit token budget.",
              "line_range": [
                359,
                381
              ],
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_filter_for_current_session",
              "docstring": "Filter data to items relevant to current session.",
              "line_range": [
                383,
                422
              ],
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_extract_summary",
              "docstring": "Extract summary information from data.",
              "line_range": [
                424,
                443
              ],
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_apply_section_filtering",
              "docstring": "Apply section filtering to exclude specified sections.",
              "line_range": [
                445,
                457
              ],
              "parameters": [
                "self",
                "data",
                "exclude_sections"
              ]
            },
            {
              "name": "_update_metrics",
              "docstring": "Update performance metrics.",
              "line_range": [
                459,
                477
              ],
              "parameters": [
                "self",
                "scenario",
                "context",
                "load_time"
              ]
            },
            {
              "name": "get_metrics_summary",
              "docstring": "Get summary of context loading metrics.",
              "line_range": [
                479,
                494
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_metrics",
              "docstring": "Save metrics to file for analysis.",
              "line_range": [
                496,
                501
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._load_config",
          "Path"
        ],
        "_load_config": [
          "config_path.exists",
          "json.load",
          "open"
        ],
        "get_context_for_scenario": [
          "time.time",
          "self._load_minimal_context",
          "ContextMode",
          "self._get_budget_for_scenario",
          "scenario_config.get",
          "self._load_focused_context",
          "self._load_full_context",
          "self._update_metrics",
          "self._load_session_context"
        ],
        "_get_budget_for_scenario": [
          "budget_config.get",
          "ContextBudget",
          "scenario_config.get"
        ],
        "_load_full_context": [
          "json.load",
          "logger.warning",
          "full_path.exists",
          "open"
        ],
        "_extract_relationship_summary": [
          "logger.warning",
          "struct_path.exists",
          "summary.append",
          "struct.get",
          "open",
          "m.get",
          "json.load"
        ],
        "_load_focused_context": [
          "self._extract_summary",
          "session_path.exists",
          "logger.warning",
          "init_path.exists",
          "len",
          "self._get_file_context",
          "file_path.endswith",
          "open",
          "json.dumps",
          "json.load",
          "self._extract_relationship_summary"
        ],
        "_load_session_context": [
          "self._filter_for_current_session",
          "self._load_source_with_filtering"
        ],
        "_load_minimal_context": [
          "self._extract_summary",
          "logger.warning",
          "open",
          "source_path.exists",
          "json.load"
        ],
        "_load_source_with_filtering": [
          "self._apply_section_filtering",
          "logger.warning",
          "open",
          "source_path.exists",
          "json.load"
        ],
        "_get_file_context": [
          "Path"
        ],
        "_extract_essential_parts": [
          "isinstance",
          "task.get"
        ],
        "_filter_for_current_session": [
          "current_session.get",
          "logger.warning",
          "current_session_path.exists",
          "open",
          "data.items",
          "task.get",
          "idea.get",
          "json.load"
        ],
        "_extract_summary": [
          "isinstance",
          "len",
          "t.get"
        ],
        "_apply_section_filtering": [
          "data.items"
        ],
        "_update_metrics": [
          "context.get",
          "len",
          "ContextMetrics"
        ],
        "get_metrics_summary": [
          "sum",
          "len"
        ],
        "save_metrics": [
          "json.dump",
          "self.get_metrics_summary",
          "open"
        ],
        "create_context_orchestrator": [
          "SmartContextOrchestrator"
        ],
        "get_optimized_context": [
          "ContextBudget",
          "create_context_orchestrator",
          "orchestrator.get_context_for_scenario"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "Union",
        "dataclass",
        "dataclasses",
        "enum",
        "json",
        "logging",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": "c17b350c685348e540bb6f3686f2dcb5cf3da1b90c04e0dadb2a298ac2af82b8",
      "artifact_id": "f2121872-10a2-441e-b972-0fd53ae60aef"
    },
    {
      "module_id": "src.llmstruct.ai_self_monitor",
      "path": "src/llmstruct/ai_self_monitor.py",
      "category": "core",
      "module_doc": "AI Self-Monitoring System\nTracks AI usage patterns and ensures proper llmstruct integration.",
      "functions": [
        {
          "name": "initialize_ai_monitor",
          "docstring": "Initialize global AI monitor.",
          "line_range": [
            433,
            437
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_monitor",
          "docstring": "Get current AI monitor instance.",
          "line_range": [
            440,
            442
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "record_ai_usage",
          "docstring": "Global function to record AI usage.",
          "line_range": [
            445,
            456
          ],
          "parameters": [
            "query",
            "tools_used",
            "used_llmstruct",
            "context_tags",
            "metadata"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            60,
            80
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "record_ai_interaction",
          "docstring": "Record an AI interaction for monitoring.",
          "line_range": [
            82,
            121
          ],
          "parameters": [
            "self",
            "query",
            "tools_used",
            "used_llmstruct",
            "context_tags",
            "metadata"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_interaction_patterns",
          "docstring": "Analyze patterns in AI interaction.",
          "line_range": [
            123,
            157
          ],
          "parameters": [
            "self",
            "query",
            "tools_used",
            "used_llmstruct",
            "context_tags"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_effectiveness_score",
          "docstring": "Calculate effectiveness score for interaction.",
          "line_range": [
            159,
            188
          ],
          "parameters": [
            "self",
            "patterns",
            "tools_used",
            "used_llmstruct"
          ],
          "decorators": []
        },
        {
          "name": "_check_immediate_feedback",
          "docstring": "Check if immediate feedback/correction is needed.",
          "line_range": [
            190,
            209
          ],
          "parameters": [
            "self",
            "event"
          ],
          "decorators": []
        },
        {
          "name": "_log_immediate_feedback",
          "docstring": "Log immediate feedback message.",
          "line_range": [
            211,
            214
          ],
          "parameters": [
            "self",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "analyze_behavior_trends",
          "docstring": "Analyze AI behavior trends over specified period.",
          "line_range": [
            216,
            300
          ],
          "parameters": [
            "self",
            "days"
          ],
          "decorators": []
        },
        {
          "name": "_generate_recommendations",
          "docstring": "Generate specific recommendations for improvement.",
          "line_range": [
            302,
            335
          ],
          "parameters": [
            "self",
            "llmstruct_usage",
            "context_awareness",
            "tool_diversity",
            "effectiveness"
          ],
          "decorators": []
        },
        {
          "name": "get_real_time_guidance",
          "docstring": "Get real-time guidance for current query.",
          "line_range": [
            337,
            365
          ],
          "parameters": [
            "self",
            "current_query"
          ],
          "decorators": []
        },
        {
          "name": "_load_events",
          "docstring": "Load events from disk.",
          "line_range": [
            367,
            379
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_events",
          "docstring": "Save events to disk.",
          "line_range": [
            381,
            388
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_analysis",
          "docstring": "Save behavior analysis to disk.",
          "line_range": [
            390,
            397
          ],
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "get_monitoring_report",
          "docstring": "Get comprehensive monitoring report.",
          "line_range": [
            399,
            426
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "AIBehaviorPattern",
          "docstring": "AI behavior patterns to monitor.",
          "line_range": [
            18,
            26
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "AIUsageEvent",
          "docstring": "Single AI usage event.",
          "line_range": [
            30,
            39
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "AIBehaviorAnalysis",
          "docstring": "Analysis of AI behavior patterns.",
          "line_range": [
            43,
            51
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "AISelfMonitor",
          "docstring": "Monitors AI behavior and ensures proper llmstruct integration.\nProvides feedback and corrective guidance.",
          "line_range": [
            54,
            426
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                60,
                80
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "record_ai_interaction",
              "docstring": "Record an AI interaction for monitoring.",
              "line_range": [
                82,
                121
              ],
              "parameters": [
                "self",
                "query",
                "tools_used",
                "used_llmstruct",
                "context_tags",
                "metadata"
              ]
            },
            {
              "name": "_analyze_interaction_patterns",
              "docstring": "Analyze patterns in AI interaction.",
              "line_range": [
                123,
                157
              ],
              "parameters": [
                "self",
                "query",
                "tools_used",
                "used_llmstruct",
                "context_tags"
              ]
            },
            {
              "name": "_calculate_effectiveness_score",
              "docstring": "Calculate effectiveness score for interaction.",
              "line_range": [
                159,
                188
              ],
              "parameters": [
                "self",
                "patterns",
                "tools_used",
                "used_llmstruct"
              ]
            },
            {
              "name": "_check_immediate_feedback",
              "docstring": "Check if immediate feedback/correction is needed.",
              "line_range": [
                190,
                209
              ],
              "parameters": [
                "self",
                "event"
              ]
            },
            {
              "name": "_log_immediate_feedback",
              "docstring": "Log immediate feedback message.",
              "line_range": [
                211,
                214
              ],
              "parameters": [
                "self",
                "message"
              ]
            },
            {
              "name": "analyze_behavior_trends",
              "docstring": "Analyze AI behavior trends over specified period.",
              "line_range": [
                216,
                300
              ],
              "parameters": [
                "self",
                "days"
              ]
            },
            {
              "name": "_generate_recommendations",
              "docstring": "Generate specific recommendations for improvement.",
              "line_range": [
                302,
                335
              ],
              "parameters": [
                "self",
                "llmstruct_usage",
                "context_awareness",
                "tool_diversity",
                "effectiveness"
              ]
            },
            {
              "name": "get_real_time_guidance",
              "docstring": "Get real-time guidance for current query.",
              "line_range": [
                337,
                365
              ],
              "parameters": [
                "self",
                "current_query"
              ]
            },
            {
              "name": "_load_events",
              "docstring": "Load events from disk.",
              "line_range": [
                367,
                379
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_events",
              "docstring": "Save events to disk.",
              "line_range": [
                381,
                388
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_analysis",
              "docstring": "Save behavior analysis to disk.",
              "line_range": [
                390,
                397
              ],
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "get_monitoring_report",
              "docstring": "Get comprehensive monitoring report.",
              "line_range": [
                399,
                426
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "logger.info",
          "Path",
          "self._load_events"
        ],
        "record_ai_interaction": [
          "AIUsageEvent",
          "self._check_immediate_feedback",
          "datetime.now",
          "len",
          "self._analyze_interaction_patterns",
          "self._save_events",
          "self._calculate_effectiveness_score"
        ],
        "_analyze_interaction_patterns": [
          "query.lower",
          "any",
          "patterns.append"
        ],
        "_calculate_effectiveness_score": [
          "len",
          "set",
          "pattern_scores.get",
          "min"
        ],
        "_check_immediate_feedback": [
          "any",
          "self._log_immediate_feedback"
        ],
        "_log_immediate_feedback": [
          "print",
          "logger.warning"
        ],
        "analyze_behavior_trends": [
          "any",
          "improvements.append",
          "self._save_analysis",
          "datetime.now",
          "len",
          "AIBehaviorAnalysis",
          "timedelta",
          "strengths.append",
          "self._generate_recommendations",
          "set",
          "all_tools.update",
          "datetime.fromisoformat",
          "sum"
        ],
        "_generate_recommendations": [
          "recommendations.append",
          "recommendations.extend"
        ],
        "get_real_time_guidance": [
          "current_query.lower",
          "any",
          "guidance.append"
        ],
        "_load_events": [
          "AIUsageEvent",
          "logger.info",
          "len",
          "open",
          "logger.error",
          "json.load"
        ],
        "_save_events": [
          "json.dump",
          "asdict",
          "logger.error",
          "open"
        ],
        "_save_analysis": [
          "json.dump",
          "asdict",
          "logger.error",
          "open"
        ],
        "get_monitoring_report": [
          "chr",
          "self.analyze_behavior_trends",
          "len",
          "datetime.now"
        ],
        "initialize_ai_monitor": [
          "AISelfMonitor"
        ],
        "get_ai_monitor": [],
        "record_ai_usage": [
          "_monitor_instance.record_ai_interaction"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "Set",
        "asdict",
        "dataclass",
        "dataclasses",
        "datetime",
        "enum",
        "json",
        "logging",
        "pathlib",
        "time",
        "timedelta",
        "typing"
      ],
      "hash": "312d43ae77d168866f0ce34f6f89d119d4dc338568049a9611997c4dee8059b4",
      "artifact_id": "847da14a-6757-4da1-87f4-f57ba4a403f0"
    },
    {
      "module_id": "src.llmstruct.cursor_ai_bridge",
      "path": "src/llmstruct/cursor_ai_bridge.py",
      "category": "core",
      "module_doc": "Cursor AI Bridge - API Layer for AI Assistant Integration\nProvides CLI and HTTP endpoints so Cursor AI can use WorkflowOrchestrator",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface for Cursor AI Bridge.",
          "line_range": [
            350,
            401
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            29,
            32
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "ai_get_context",
          "docstring": "Get AI-optimized context for current development state.",
          "line_range": [
            34,
            67
          ],
          "parameters": [
            "self",
            "query_type",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "ai_analyze_task",
          "docstring": "Analyze a task and provide AI-optimized guidance.",
          "line_range": [
            69,
            93
          ],
          "parameters": [
            "self",
            "task_description"
          ],
          "decorators": []
        },
        {
          "name": "ai_create_task",
          "docstring": "Create a task through AI interface.",
          "line_range": [
            95,
            114
          ],
          "parameters": [
            "self",
            "title",
            "description",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "ai_get_onboarding_guide",
          "docstring": "Get comprehensive AI onboarding guide.",
          "line_range": [
            116,
            145
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "ai_check_duplicates",
          "docstring": "Check for code duplicates with AI-friendly output.",
          "line_range": [
            147,
            171
          ],
          "parameters": [
            "self",
            "threshold"
          ],
          "decorators": []
        },
        {
          "name": "ai_suggest",
          "docstring": "Get AI suggestions based on context.",
          "line_range": [
            173,
            199
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_estimate_task_complexity",
          "docstring": "Estimate task complexity based on codebase analysis.",
          "line_range": [
            201,
            215
          ],
          "parameters": [
            "self",
            "task",
            "struct_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_suggest_approach",
          "docstring": "Suggest approach based on task and codebase state.",
          "line_range": [
            217,
            234
          ],
          "parameters": [
            "self",
            "task",
            "struct_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_find_relevant_modules",
          "docstring": "Find modules relevant to the task.",
          "line_range": [
            236,
            248
          ],
          "parameters": [
            "self",
            "task",
            "struct_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_check_potential_duplicates",
          "docstring": "Check if task might create duplicates.",
          "line_range": [
            250,
            253
          ],
          "parameters": [
            "self",
            "task",
            "struct_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_recommend_ai_for_task",
          "docstring": "Recommend which AI to use for the task.",
          "line_range": [
            255,
            264
          ],
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_generate_workflow_steps",
          "docstring": "Generate workflow steps for the task.",
          "line_range": [
            266,
            276
          ],
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_determine_context_requirements",
          "docstring": "Determine what context is needed for the task.",
          "line_range": [
            278,
            290
          ],
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_get_workflow_suggestions",
          "docstring": "Get workflow suggestions based on context.",
          "line_range": [
            292,
            299
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_get_available_ai_commands",
          "docstring": "Get available AI commands.",
          "line_range": [
            301,
            310
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_identify_high_priority_duplicates",
          "docstring": "Identify high-priority duplicates for refactoring.",
          "line_range": [
            312,
            315
          ],
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "_generate_refactoring_suggestions",
          "docstring": "Generate refactoring suggestions.",
          "line_range": [
            317,
            323
          ],
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "_classify_task_type",
          "docstring": "Classify task type for AI delegation.",
          "line_range": [
            325,
            338
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_generate_next_steps",
          "docstring": "Generate next steps based on context.",
          "line_range": [
            340,
            347
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CursorAIBridge",
          "docstring": "Bridge that allows Cursor AI assistant to use WorkflowOrchestrator\nthrough CLI commands and structured JSON responses.",
          "line_range": [
            23,
            347
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                29,
                32
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "ai_get_context",
              "docstring": "Get AI-optimized context for current development state.",
              "line_range": [
                34,
                67
              ],
              "parameters": [
                "self",
                "query_type",
                "file_path"
              ]
            },
            {
              "name": "ai_analyze_task",
              "docstring": "Analyze a task and provide AI-optimized guidance.",
              "line_range": [
                69,
                93
              ],
              "parameters": [
                "self",
                "task_description"
              ]
            },
            {
              "name": "ai_create_task",
              "docstring": "Create a task through AI interface.",
              "line_range": [
                95,
                114
              ],
              "parameters": [
                "self",
                "title",
                "description",
                "priority"
              ]
            },
            {
              "name": "ai_get_onboarding_guide",
              "docstring": "Get comprehensive AI onboarding guide.",
              "line_range": [
                116,
                145
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "ai_check_duplicates",
              "docstring": "Check for code duplicates with AI-friendly output.",
              "line_range": [
                147,
                171
              ],
              "parameters": [
                "self",
                "threshold"
              ]
            },
            {
              "name": "ai_suggest",
              "docstring": "Get AI suggestions based on context.",
              "line_range": [
                173,
                199
              ],
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "_estimate_task_complexity",
              "docstring": "Estimate task complexity based on codebase analysis.",
              "line_range": [
                201,
                215
              ],
              "parameters": [
                "self",
                "task",
                "struct_analysis"
              ]
            },
            {
              "name": "_suggest_approach",
              "docstring": "Suggest approach based on task and codebase state.",
              "line_range": [
                217,
                234
              ],
              "parameters": [
                "self",
                "task",
                "struct_analysis"
              ]
            },
            {
              "name": "_find_relevant_modules",
              "docstring": "Find modules relevant to the task.",
              "line_range": [
                236,
                248
              ],
              "parameters": [
                "self",
                "task",
                "struct_analysis"
              ]
            },
            {
              "name": "_check_potential_duplicates",
              "docstring": "Check if task might create duplicates.",
              "line_range": [
                250,
                253
              ],
              "parameters": [
                "self",
                "task",
                "struct_analysis"
              ]
            },
            {
              "name": "_recommend_ai_for_task",
              "docstring": "Recommend which AI to use for the task.",
              "line_range": [
                255,
                264
              ],
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "_generate_workflow_steps",
              "docstring": "Generate workflow steps for the task.",
              "line_range": [
                266,
                276
              ],
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "_determine_context_requirements",
              "docstring": "Determine what context is needed for the task.",
              "line_range": [
                278,
                290
              ],
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "_get_workflow_suggestions",
              "docstring": "Get workflow suggestions based on context.",
              "line_range": [
                292,
                299
              ],
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "_get_available_ai_commands",
              "docstring": "Get available AI commands.",
              "line_range": [
                301,
                310
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_identify_high_priority_duplicates",
              "docstring": "Identify high-priority duplicates for refactoring.",
              "line_range": [
                312,
                315
              ],
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "_generate_refactoring_suggestions",
              "docstring": "Generate refactoring suggestions.",
              "line_range": [
                317,
                323
              ],
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "_classify_task_type",
              "docstring": "Classify task type for AI delegation.",
              "line_range": [
                325,
                338
              ],
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "_generate_next_steps",
              "docstring": "Generate next steps based on context.",
              "line_range": [
                340,
                347
              ],
              "parameters": [
                "self",
                "context"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "WorkflowOrchestrator",
          "CursorIntegrationManager",
          "Path",
          "str"
        ],
        "ai_get_context": [
          "self._get_available_ai_commands",
          "cursor_context.get",
          "datetime.utcnow",
          "context.get",
          "len",
          "self._get_workflow_suggestions",
          "str"
        ],
        "ai_analyze_task": [
          "self._find_relevant_modules",
          "context.get",
          "self._suggest_approach",
          "self._estimate_task_complexity",
          "str",
          "self._recommend_ai_for_task",
          "self._generate_workflow_steps",
          "self._determine_context_requirements",
          "self._check_potential_duplicates"
        ],
        "ai_create_task": [
          "self.ai_analyze_task",
          "datetime.utcnow",
          "str"
        ],
        "ai_get_onboarding_guide": [
          "str"
        ],
        "ai_check_duplicates": [
          "analysis.get",
          "self._generate_refactoring_suggestions",
          "str",
          "self._identify_high_priority_duplicates"
        ],
        "ai_suggest": [
          "self._generate_next_steps",
          "self._classify_task_type",
          "self._get_workflow_suggestions",
          "str",
          "delegation.get"
        ],
        "_estimate_task_complexity": [
          "task.lower",
          "complexity_keywords.items",
          "any"
        ],
        "_suggest_approach": [
          "approaches.append",
          "task.lower"
        ],
        "_find_relevant_modules": [
          "module.get",
          "any",
          "task.lower",
          "struct_analysis.get",
          "relevant.append"
        ],
        "_check_potential_duplicates": [],
        "_recommend_ai_for_task": [
          "task.lower",
          "any"
        ],
        "_generate_workflow_steps": [],
        "_determine_context_requirements": [
          "task.lower",
          "requirements.append"
        ],
        "_get_workflow_suggestions": [],
        "_get_available_ai_commands": [],
        "_identify_high_priority_duplicates": [],
        "_generate_refactoring_suggestions": [],
        "_classify_task_type": [
          "any",
          "context.lower"
        ],
        "_generate_next_steps": [],
        "main": [
          "bridge.ai_suggest",
          "print",
          "bridge.ai_analyze_task",
          "argparse.ArgumentParser",
          "bridge.ai_onboarding_guide",
          "bridge.ai_get_context",
          "parser.parse_args",
          "json.dumps",
          "bridge.ai_check_duplicates",
          "parser.add_argument",
          "CursorAIBridge",
          "bridge.ai_create_task"
        ]
      },
      "dependencies": [
        "Any",
        "CursorIntegrationManager",
        "Dict",
        "List",
        "Optional",
        "Path",
        "SystemCapabilityDiscovery",
        "WorkflowOrchestrator",
        "ai_self_awareness",
        "argparse",
        "cursor_integration",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "sys",
        "typing",
        "workflow_orchestrator"
      ],
      "hash": "b2a2b9e1cf581e85e4467559c56258f4a0d6a5003c11ca4143773a732cb33468",
      "artifact_id": "35eaedb6-3202-413f-961d-d5d41e3bd651"
    },
    {
      "module_id": "src.llmstruct.ai_self_awareness",
      "path": "src/llmstruct/ai_self_awareness.py",
      "category": "core",
      "module_doc": "AI Self-Awareness Enhancement Module\nProvides comprehensive system introspection and capability discovery for llmstruct AI systems.\nEnhanced with Cursor IDE integration and real-time metrics.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize the capability discovery system with CLI integration.",
          "line_range": [
            101,
            107
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_ensure_directories",
          "docstring": "Ensure required directories exist.",
          "line_range": [
            109,
            111
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "discover_all_capabilities",
          "docstring": "Perform comprehensive capability discovery with unused function integration.\n\nArgs:\n    force_refresh: If True, bypass cache and perform fresh discovery\n    \nReturns:\n    Complete system capabilities overview enhanced with integrated unused functions",
          "line_range": [
            113,
            154
          ],
          "parameters": [
            "self",
            "force_refresh"
          ],
          "decorators": []
        },
        {
          "name": "_get_integration_metrics",
          "docstring": "Get metrics about unused function integration success.",
          "line_range": [
            156,
            163
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_enhanced_capabilities_summary",
          "docstring": "Get enhanced capabilities summary including unused function integration.",
          "line_range": [
            165,
            203
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_comprehensive_ai_status",
          "docstring": "Get comprehensive AI status including unused function integration analysis.\nThis is the primary method for AI self-awareness reporting.",
          "line_range": [
            205,
            246
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_discover_tools",
          "docstring": "Discover and check health of all available tools.",
          "line_range": [
            248,
            260
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_cli_processor",
          "docstring": "Check CLI processor health.",
          "line_range": [
            262,
            297
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_copilot_manager",
          "docstring": "Check Copilot manager health.",
          "line_range": [
            299,
            336
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_context_orchestrator",
          "docstring": "Check context orchestrator health.",
          "line_range": [
            338,
            393
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_cache_system",
          "docstring": "Check cache system health.",
          "line_range": [
            395,
            438
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_struct_parser",
          "docstring": "Check struct.json parser health.",
          "line_range": [
            440,
            484
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_docs_system",
          "docstring": "Check docs.json system health.",
          "line_range": [
            486,
            517
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_discover_context_capabilities",
          "docstring": "Discover available context capabilities.",
          "line_range": [
            519,
            556
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_integration_health",
          "docstring": "Check health of all system integrations.",
          "line_range": [
            558,
            567
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_component_status",
          "docstring": "Check status of a specific component.",
          "line_range": [
            569,
            574
          ],
          "parameters": [
            "self",
            "component_name"
          ],
          "decorators": []
        },
        {
          "name": "_discover_vscode_capabilities",
          "docstring": "Discover VS Code specific capabilities.",
          "line_range": [
            576,
            585
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_cache_hit_rate",
          "docstring": "Calculate cache hit rate using real metrics.",
          "line_range": [
            587,
            589
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_estimate_system_load",
          "docstring": "Estimate current system load using real metrics.",
          "line_range": [
            591,
            593
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_is_cache_valid",
          "docstring": "Check if cached capabilities are still valid.",
          "line_range": [
            595,
            602
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_cached_capabilities",
          "docstring": "Load capabilities from cache.",
          "line_range": [
            604,
            618
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_cache_capabilities",
          "docstring": "Cache capabilities to disk.",
          "line_range": [
            620,
            630
          ],
          "parameters": [
            "self",
            "capabilities"
          ],
          "decorators": []
        },
        {
          "name": "get_capabilities_summary",
          "docstring": "Get a human-readable summary of current capabilities.",
          "line_range": [
            632,
            691
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_project_structure",
          "docstring": "Enhanced project structure analysis integrating multiple unused functions\nfor comprehensive AI self-awareness.",
          "line_range": [
            693,
            739
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_enhanced_directory_structure",
          "docstring": "Integration of unused cli_utils.get_directory_structure() function\nfor enhanced AI project awareness.",
          "line_range": [
            741,
            760
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_unused_capabilities",
          "docstring": "Analyze unused functions to discover hidden AI capabilities.\nThis transforms the 115 unused functions into potential AI enhancements.",
          "line_range": [
            762,
            819
          ],
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_discover_config_capabilities",
          "docstring": "Integration of unused cli_config functions for AI configuration awareness.",
          "line_range": [
            821,
            849
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_discover_context_scenarios",
          "docstring": "Integration of unused context_orchestrator functions for scenario awareness.",
          "line_range": [
            851,
            890
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_is_ai_useful_command",
          "docstring": "Determine if a CLI command function would be useful for AI self-awareness.",
          "line_range": [
            892,
            898
          ],
          "parameters": [
            "self",
            "function_name"
          ],
          "decorators": []
        },
        {
          "name": "_is_ai_useful_config",
          "docstring": "Determine if a config function would be useful for AI configuration awareness.",
          "line_range": [
            900,
            906
          ],
          "parameters": [
            "self",
            "function_name"
          ],
          "decorators": []
        },
        {
          "name": "_is_ai_useful_utility",
          "docstring": "Determine if a utility function would be useful for AI operations.",
          "line_range": [
            908,
            914
          ],
          "parameters": [
            "self",
            "function_name"
          ],
          "decorators": []
        },
        {
          "name": "_prioritize_integrations",
          "docstring": "Prioritize which unused functions should be integrated first.",
          "line_range": [
            916,
            932
          ],
          "parameters": [
            "self",
            "capabilities"
          ],
          "decorators": []
        },
        {
          "name": "_basic_directory_scan",
          "docstring": "Basic directory scan for fallback scenarios.",
          "line_range": [
            934,
            946
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_cursor_status_report",
          "docstring": "Generate Cursor-specific status optimized for IDE integration.",
          "line_range": [
            949,
            967
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "optimize_context_for_cursor",
          "docstring": "Provide perfectly sized context for Cursor interactions.",
          "line_range": [
            969,
            1001
          ],
          "parameters": [
            "self",
            "query_analysis"
          ],
          "decorators": []
        },
        {
          "name": "get_goal_aligned_suggestions",
          "docstring": "Provide suggestions aligned with business goals from personal bridge.",
          "line_range": [
            1003,
            1038
          ],
          "parameters": [
            "self",
            "technical_context"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_real_cache_hit_rate",
          "docstring": "Calculate actual cache performance from JSONCache and system metrics.",
          "line_range": [
            1040,
            1066
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_real_system_load",
          "docstring": "Get actual system performance metrics.",
          "line_range": [
            1068,
            1090
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_cursor_config",
          "docstring": "Load Cursor-specific configuration.",
          "line_range": [
            1092,
            1102
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_personal_bridge",
          "docstring": "Load personal planning bridge data.",
          "line_range": [
            1104,
            1114
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_query_type",
          "docstring": "Analyze query to determine optimal context type.",
          "line_range": [
            1116,
            1144
          ],
          "parameters": [
            "self",
            "query_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_apply_privacy_filter",
          "docstring": "Apply privacy filtering based on level.",
          "line_range": [
            1146,
            1163
          ],
          "parameters": [
            "self",
            "context_data",
            "privacy_level"
          ],
          "decorators": []
        },
        {
          "name": "_filter_sensitive_dict",
          "docstring": "Filter sensitive information from dictionary.",
          "line_range": [
            1165,
            1177
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_get_overall_health_emoji",
          "docstring": "Get emoji representing overall system health.",
          "line_range": [
            1179,
            1202
          ],
          "parameters": [
            "self",
            "capabilities"
          ],
          "decorators": []
        },
        {
          "name": "_get_context_status_emoji",
          "docstring": "Get emoji for context engine status.",
          "line_range": [
            1204,
            1214
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_get_ai_integration_emoji",
          "docstring": "Get emoji for AI integration status.",
          "line_range": [
            1216,
            1224
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_goal_alignment_status",
          "docstring": "Get goal alignment status.",
          "line_range": [
            1226,
            1235
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CapabilityStatus",
          "docstring": "Status of system capabilities.",
          "line_range": [
            22,
            27
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextMode",
          "docstring": "Available context modes.",
          "line_range": [
            30,
            35
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ToolHealth",
          "docstring": "Health status of a specific tool.",
          "line_range": [
            39,
            46
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ContextCapabilities",
          "docstring": "Available context capabilities.",
          "line_range": [
            50,
            57
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "IntegrationHealth",
          "docstring": "Status of system integrations.",
          "line_range": [
            61,
            68
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "VSCodeCapabilities",
          "docstring": "VS Code specific capabilities.",
          "line_range": [
            72,
            79
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "SystemCapabilities",
          "docstring": "Complete system capabilities overview.",
          "line_range": [
            83,
            91
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "SystemCapabilityDiscovery",
          "docstring": "Discovers and monitors system capabilities in real-time.\nProvides AI with comprehensive understanding of available tools and systems.\nEnhanced with unused function integration for maximum AI self-awareness.",
          "line_range": [
            94,
            1235
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize the capability discovery system with CLI integration.",
              "line_range": [
                101,
                107
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_ensure_directories",
              "docstring": "Ensure required directories exist.",
              "line_range": [
                109,
                111
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "discover_all_capabilities",
              "docstring": "Perform comprehensive capability discovery with unused function integration.\n\nArgs:\n    force_refresh: If True, bypass cache and perform fresh discovery\n    \nReturns:\n    Complete system capabilities overview enhanced with integrated unused functions",
              "line_range": [
                113,
                154
              ],
              "parameters": [
                "self",
                "force_refresh"
              ]
            },
            {
              "name": "_get_integration_metrics",
              "docstring": "Get metrics about unused function integration success.",
              "line_range": [
                156,
                163
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_enhanced_capabilities_summary",
              "docstring": "Get enhanced capabilities summary including unused function integration.",
              "line_range": [
                165,
                203
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_comprehensive_ai_status",
              "docstring": "Get comprehensive AI status including unused function integration analysis.\nThis is the primary method for AI self-awareness reporting.",
              "line_range": [
                205,
                246
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_discover_tools",
              "docstring": "Discover and check health of all available tools.",
              "line_range": [
                248,
                260
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_cli_processor",
              "docstring": "Check CLI processor health.",
              "line_range": [
                262,
                297
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_copilot_manager",
              "docstring": "Check Copilot manager health.",
              "line_range": [
                299,
                336
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_context_orchestrator",
              "docstring": "Check context orchestrator health.",
              "line_range": [
                338,
                393
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_cache_system",
              "docstring": "Check cache system health.",
              "line_range": [
                395,
                438
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_struct_parser",
              "docstring": "Check struct.json parser health.",
              "line_range": [
                440,
                484
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_docs_system",
              "docstring": "Check docs.json system health.",
              "line_range": [
                486,
                517
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_discover_context_capabilities",
              "docstring": "Discover available context capabilities.",
              "line_range": [
                519,
                556
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_integration_health",
              "docstring": "Check health of all system integrations.",
              "line_range": [
                558,
                567
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_component_status",
              "docstring": "Check status of a specific component.",
              "line_range": [
                569,
                574
              ],
              "parameters": [
                "self",
                "component_name"
              ]
            },
            {
              "name": "_discover_vscode_capabilities",
              "docstring": "Discover VS Code specific capabilities.",
              "line_range": [
                576,
                585
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_calculate_cache_hit_rate",
              "docstring": "Calculate cache hit rate using real metrics.",
              "line_range": [
                587,
                589
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_estimate_system_load",
              "docstring": "Estimate current system load using real metrics.",
              "line_range": [
                591,
                593
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_is_cache_valid",
              "docstring": "Check if cached capabilities are still valid.",
              "line_range": [
                595,
                602
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_cached_capabilities",
              "docstring": "Load capabilities from cache.",
              "line_range": [
                604,
                618
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_cache_capabilities",
              "docstring": "Cache capabilities to disk.",
              "line_range": [
                620,
                630
              ],
              "parameters": [
                "self",
                "capabilities"
              ]
            },
            {
              "name": "get_capabilities_summary",
              "docstring": "Get a human-readable summary of current capabilities.",
              "line_range": [
                632,
                691
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_analyze_project_structure",
              "docstring": "Enhanced project structure analysis integrating multiple unused functions\nfor comprehensive AI self-awareness.",
              "line_range": [
                693,
                739
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_enhanced_directory_structure",
              "docstring": "Integration of unused cli_utils.get_directory_structure() function\nfor enhanced AI project awareness.",
              "line_range": [
                741,
                760
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_analyze_unused_capabilities",
              "docstring": "Analyze unused functions to discover hidden AI capabilities.\nThis transforms the 115 unused functions into potential AI enhancements.",
              "line_range": [
                762,
                819
              ],
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_discover_config_capabilities",
              "docstring": "Integration of unused cli_config functions for AI configuration awareness.",
              "line_range": [
                821,
                849
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_discover_context_scenarios",
              "docstring": "Integration of unused context_orchestrator functions for scenario awareness.",
              "line_range": [
                851,
                890
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_is_ai_useful_command",
              "docstring": "Determine if a CLI command function would be useful for AI self-awareness.",
              "line_range": [
                892,
                898
              ],
              "parameters": [
                "self",
                "function_name"
              ]
            },
            {
              "name": "_is_ai_useful_config",
              "docstring": "Determine if a config function would be useful for AI configuration awareness.",
              "line_range": [
                900,
                906
              ],
              "parameters": [
                "self",
                "function_name"
              ]
            },
            {
              "name": "_is_ai_useful_utility",
              "docstring": "Determine if a utility function would be useful for AI operations.",
              "line_range": [
                908,
                914
              ],
              "parameters": [
                "self",
                "function_name"
              ]
            },
            {
              "name": "_prioritize_integrations",
              "docstring": "Prioritize which unused functions should be integrated first.",
              "line_range": [
                916,
                932
              ],
              "parameters": [
                "self",
                "capabilities"
              ]
            },
            {
              "name": "_basic_directory_scan",
              "docstring": "Basic directory scan for fallback scenarios.",
              "line_range": [
                934,
                946
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_cursor_status_report",
              "docstring": "Generate Cursor-specific status optimized for IDE integration.",
              "line_range": [
                949,
                967
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "optimize_context_for_cursor",
              "docstring": "Provide perfectly sized context for Cursor interactions.",
              "line_range": [
                969,
                1001
              ],
              "parameters": [
                "self",
                "query_analysis"
              ]
            },
            {
              "name": "get_goal_aligned_suggestions",
              "docstring": "Provide suggestions aligned with business goals from personal bridge.",
              "line_range": [
                1003,
                1038
              ],
              "parameters": [
                "self",
                "technical_context"
              ]
            },
            {
              "name": "_calculate_real_cache_hit_rate",
              "docstring": "Calculate actual cache performance from JSONCache and system metrics.",
              "line_range": [
                1040,
                1066
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_real_system_load",
              "docstring": "Get actual system performance metrics.",
              "line_range": [
                1068,
                1090
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_cursor_config",
              "docstring": "Load Cursor-specific configuration.",
              "line_range": [
                1092,
                1102
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_personal_bridge",
              "docstring": "Load personal planning bridge data.",
              "line_range": [
                1104,
                1114
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_analyze_query_type",
              "docstring": "Analyze query to determine optimal context type.",
              "line_range": [
                1116,
                1144
              ],
              "parameters": [
                "self",
                "query_analysis"
              ]
            },
            {
              "name": "_apply_privacy_filter",
              "docstring": "Apply privacy filtering based on level.",
              "line_range": [
                1146,
                1163
              ],
              "parameters": [
                "self",
                "context_data",
                "privacy_level"
              ]
            },
            {
              "name": "_filter_sensitive_dict",
              "docstring": "Filter sensitive information from dictionary.",
              "line_range": [
                1165,
                1177
              ],
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_get_overall_health_emoji",
              "docstring": "Get emoji representing overall system health.",
              "line_range": [
                1179,
                1202
              ],
              "parameters": [
                "self",
                "capabilities"
              ]
            },
            {
              "name": "_get_context_status_emoji",
              "docstring": "Get emoji for context engine status.",
              "line_range": [
                1204,
                1214
              ],
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "_get_ai_integration_emoji",
              "docstring": "Get emoji for AI integration status.",
              "line_range": [
                1216,
                1224
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_goal_alignment_status",
              "docstring": "Get goal alignment status.",
              "line_range": [
                1226,
                1235
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "create_ai_cli_integration",
          "self._ensure_directories",
          "Path"
        ],
        "_ensure_directories": [],
        "discover_all_capabilities": [
          "time.time",
          "self._load_cached_capabilities",
          "self._check_integration_health",
          "self._discover_tools",
          "self._analyze_project_structure",
          "self._calculate_cache_hit_rate",
          "datetime.now",
          "logger.info",
          "SystemCapabilities",
          "self._discover_vscode_capabilities",
          "self._get_integration_metrics",
          "self._cache_capabilities",
          "self._is_cache_valid",
          "self._discover_context_capabilities",
          "self._estimate_system_load"
        ],
        "_get_integration_metrics": [],
        "get_enhanced_capabilities_summary": [
          "str",
          "hasattr",
          "enhanced_info.append",
          "self.get_capabilities_summary"
        ],
        "get_comprehensive_ai_status": [
          "self.get_enhanced_capabilities_summary",
          "str",
          "get_ai_enhanced_cli_summary"
        ],
        "_discover_tools": [
          "self._check_cli_processor",
          "self._check_cache_system",
          "self._check_copilot_manager",
          "self._check_context_orchestrator",
          "self._check_struct_parser",
          "self._check_docs_system"
        ],
        "_check_cli_processor": [
          "time.time",
          "ToolHealth",
          "CLIUtils",
          "datetime.now",
          "CLIConfig",
          "str",
          "CommandProcessor"
        ],
        "_check_copilot_manager": [
          "time.time",
          "ToolHealth",
          "datetime.now",
          "hasattr",
          "initialize_copilot",
          "str",
          "manager.get_context_status"
        ],
        "_check_context_orchestrator": [
          "get_optimized_context",
          "time.time",
          "logger.warning",
          "ToolHealth",
          "datetime.now",
          "hasattr",
          "create_context_orchestrator",
          "str"
        ],
        "_check_cache_system": [
          "JSONCache",
          "time.time",
          "ToolHealth",
          "cache.close",
          "datetime.now",
          "cache.cache_json",
          "cache.get_full_json",
          "str",
          "struct_file.exists"
        ],
        "_check_struct_parser": [
          "time.time",
          "struct_data.get",
          "missing_keys.append",
          "ToolHealth",
          "datetime.now",
          "open",
          "FileNotFoundError",
          "str",
          "json.load",
          "struct_file.exists"
        ],
        "_check_docs_system": [
          "time.time",
          "ToolHealth",
          "docs_file.exists",
          "datetime.now",
          "open",
          "FileNotFoundError",
          "str",
          "json.load"
        ],
        "_discover_context_capabilities": [
          "list",
          "logger.error",
          "scenario_mappings.keys",
          "create_context_orchestrator",
          "ContextCapabilities",
          "str",
          "config.get",
          "isinstance"
        ],
        "_check_integration_health": [
          "self._check_component_status",
          "IntegrationHealth"
        ],
        "_check_component_status": [
          "hasattr"
        ],
        "_discover_vscode_capabilities": [
          "VSCodeCapabilities"
        ],
        "_calculate_cache_hit_rate": [
          "self._calculate_real_cache_hit_rate"
        ],
        "_estimate_system_load": [
          "self._get_real_system_load"
        ],
        "_is_cache_valid": [
          "time.time"
        ],
        "_load_cached_capabilities": [
          "json.load",
          "logger.error",
          "open"
        ],
        "_cache_capabilities": [
          "json.dump",
          "asdict",
          "logger.error",
          "open"
        ],
        "get_capabilities_summary": [
          "chr",
          "len",
          "self.discover_all_capabilities",
          "str"
        ],
        "_analyze_project_structure": [
          "module.get",
          "struct_data.get",
          "self._discover_context_scenarios",
          "len",
          "open",
          "self._analyze_unused_capabilities",
          "self._discover_config_capabilities",
          "str",
          "sum",
          "json.load",
          "self._get_enhanced_directory_structure",
          "struct_file.exists"
        ],
        "_get_enhanced_directory_structure": [
          "str",
          "self._basic_directory_scan",
          "get_directory_structure"
        ],
        "_analyze_unused_capabilities": [
          "cli_module.get",
          "struct_data.get",
          "f.startswith",
          "self._is_ai_useful_command",
          "utils_module.get",
          "modules.get",
          "self._is_ai_useful_utility",
          "self._prioritize_integrations",
          "len",
          "self._is_ai_useful_config",
          "min",
          "str",
          "config_module.get"
        ],
        "_discover_config_capabilities": [
          "get_queue_config",
          "get_copilot_config",
          "is_auto_update_enabled",
          "str",
          "get_context_config"
        ],
        "_discover_context_scenarios": [
          "get_metrics_summary",
          "str",
          "get_context_for_scenario"
        ],
        "_is_ai_useful_command": [],
        "_is_ai_useful_config": [],
        "_is_ai_useful_utility": [],
        "_prioritize_integrations": [
          "priorities.append"
        ],
        "_basic_directory_scan": [
          "str",
          "item.is_dir",
          "item.is_file",
          "logger.error"
        ],
        "get_cursor_status_report": [
          "self.discover_all_capabilities",
          "self._get_context_status_emoji",
          "self._get_goal_alignment_status",
          "self._get_overall_health_emoji",
          "self._get_ai_integration_emoji",
          "str",
          "self._load_cursor_config"
        ],
        "optimize_context_for_cursor": [
          "self._apply_privacy_filter",
          "self._analyze_query_type",
          "file_path.exists",
          "context_rules.get",
          "open",
          "logger.error",
          "str",
          "cursor_config.get",
          "optimal_config.get",
          "json.load",
          "self._load_cursor_config"
        ],
        "get_goal_aligned_suggestions": [
          "suggestions.extend",
          "self._load_personal_bridge",
          "logger.error",
          "personal_bridge.get",
          "technical_context.lower",
          "any"
        ],
        "_calculate_real_cache_hit_rate": [
          "time.time",
          "list",
          "cache_dir.glob",
          "len",
          "logger.error",
          "cache_dir.exists",
          "cache_file.stat"
        ],
        "_get_real_system_load": [
          "psutil.virtual_memory",
          "psutil.disk_usage",
          "min",
          "logger.error",
          "str",
          "psutil.cpu_percent"
        ],
        "_load_cursor_config": [
          "config_path.exists",
          "logger.error",
          "json.load",
          "open"
        ],
        "_load_personal_bridge": [
          "json.load",
          "logger.error",
          "bridge_path.exists",
          "open"
        ],
        "_analyze_query_type": [
          "any",
          "query_analysis.get"
        ],
        "_apply_privacy_filter": [
          "isinstance",
          "context_data.items",
          "self._filter_sensitive_dict"
        ],
        "_filter_sensitive_dict": [
          "self._filter_sensitive_dict",
          "data.items",
          "key.lower",
          "isinstance",
          "any"
        ],
        "_get_overall_health_emoji": [],
        "_get_context_status_emoji": [
          "len"
        ],
        "_get_ai_integration_emoji": [
          "hasattr"
        ],
        "_get_goal_alignment_status": [
          "self._load_personal_bridge"
        ]
      },
      "dependencies": [
        "Any",
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "CopilotContextManager",
        "Dict",
        "Enum",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "asdict",
        "create_ai_cli_integration",
        "create_context_orchestrator",
        "dataclass",
        "dataclasses",
        "datetime",
        "enum",
        "get_ai_enhanced_cli_summary",
        "get_auto_update_config",
        "get_context_config",
        "get_context_for_scenario",
        "get_copilot_config",
        "get_directory_structure",
        "get_metrics_summary",
        "get_optimized_context",
        "get_queue_config",
        "initialize_copilot",
        "is_auto_update_enabled",
        "json",
        "llmstruct.ai_cli_integration",
        "llmstruct.cache",
        "llmstruct.cli_commands",
        "llmstruct.cli_config",
        "llmstruct.cli_utils",
        "llmstruct.context_orchestrator",
        "llmstruct.copilot",
        "logging",
        "os",
        "pathlib",
        "psutil",
        "time",
        "typing"
      ],
      "hash": "de0fc0c3829c83dfc026c1ecda0c1cc56753e17c115c751b2f45263e5cf6c097",
      "artifact_id": "ab902f07-36b3-440a-98b3-8f05ddb565a8"
    },
    {
      "module_id": "src.llmstruct.cli_utils",
      "path": "src/llmstruct/cli_utils.py",
      "category": "core",
      "module_doc": "CLI utility functions.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize utils with root directory.",
          "line_range": [
            24,
            26
          ],
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read file content with size limit.",
          "line_range": [
            28,
            50
          ],
          "parameters": [
            "self",
            "file_path",
            "max_size"
          ],
          "decorators": []
        },
        {
          "name": "write_file_content",
          "docstring": "Write content to file.",
          "line_range": [
            52,
            70
          ],
          "parameters": [
            "self",
            "file_path",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "get_directory_structure",
          "docstring": "Get directory structure using folder generator.",
          "line_range": [
            72,
            115
          ],
          "parameters": [
            "self",
            "path",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "validate_json",
          "docstring": "Validate JSON content.",
          "line_range": [
            117,
            123
          ],
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "format_json",
          "docstring": "Format data as JSON string.",
          "line_range": [
            125,
            131
          ],
          "parameters": [
            "self",
            "data",
            "indent"
          ],
          "decorators": []
        },
        {
          "name": "generate_unique_id",
          "docstring": "Generate unique ID for commands, queues, etc.",
          "line_range": [
            133,
            137
          ],
          "parameters": [
            "self",
            "prefix"
          ],
          "decorators": []
        },
        {
          "name": "safe_path_join",
          "docstring": "Safely join path parts, preventing directory traversal.",
          "line_range": [
            139,
            149
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "file_exists",
          "docstring": "Check if file exists.",
          "line_range": [
            151,
            157
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "dir_exists",
          "docstring": "Check if directory exists.",
          "line_range": [
            159,
            165
          ],
          "parameters": [
            "self",
            "dir_path"
          ],
          "decorators": []
        },
        {
          "name": "get_file_size",
          "docstring": "Get file size in bytes.",
          "line_range": [
            167,
            173
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_file",
          "docstring": "Create backup of file with timestamp.",
          "line_range": [
            175,
            191
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "cleanup_old_backups",
          "docstring": "Clean up old backup files, keeping only the most recent ones.",
          "line_range": [
            193,
            222
          ],
          "parameters": [
            "self",
            "file_path",
            "keep_count"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLIUtils",
          "docstring": "Utility functions for CLI operations.",
          "line_range": [
            21,
            222
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize utils with root directory.",
              "line_range": [
                24,
                26
              ],
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "read_file_content",
              "docstring": "Read file content with size limit.",
              "line_range": [
                28,
                50
              ],
              "parameters": [
                "self",
                "file_path",
                "max_size"
              ]
            },
            {
              "name": "write_file_content",
              "docstring": "Write content to file.",
              "line_range": [
                52,
                70
              ],
              "parameters": [
                "self",
                "file_path",
                "content"
              ]
            },
            {
              "name": "get_directory_structure",
              "docstring": "Get directory structure using folder generator.",
              "line_range": [
                72,
                115
              ],
              "parameters": [
                "self",
                "path",
                "gitignore_patterns",
                "include_patterns",
                "exclude_patterns",
                "exclude_dirs"
              ]
            },
            {
              "name": "validate_json",
              "docstring": "Validate JSON content.",
              "line_range": [
                117,
                123
              ],
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "format_json",
              "docstring": "Format data as JSON string.",
              "line_range": [
                125,
                131
              ],
              "parameters": [
                "self",
                "data",
                "indent"
              ]
            },
            {
              "name": "generate_unique_id",
              "docstring": "Generate unique ID for commands, queues, etc.",
              "line_range": [
                133,
                137
              ],
              "parameters": [
                "self",
                "prefix"
              ]
            },
            {
              "name": "safe_path_join",
              "docstring": "Safely join path parts, preventing directory traversal.",
              "line_range": [
                139,
                149
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "file_exists",
              "docstring": "Check if file exists.",
              "line_range": [
                151,
                157
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "dir_exists",
              "docstring": "Check if directory exists.",
              "line_range": [
                159,
                165
              ],
              "parameters": [
                "self",
                "dir_path"
              ]
            },
            {
              "name": "get_file_size",
              "docstring": "Get file size in bytes.",
              "line_range": [
                167,
                173
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "backup_file",
              "docstring": "Create backup of file with timestamp.",
              "line_range": [
                175,
                191
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "cleanup_old_backups",
              "docstring": "Clean up old backup files, keeping only the most recent ones.",
              "line_range": [
                193,
                222
              ],
              "parameters": [
                "self",
                "file_path",
                "keep_count"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "read_file_content": [
          "logging.warning",
          "logging.error",
          "open",
          "os.stat",
          "f.read"
        ],
        "write_file_content": [
          "Path",
          "logging.error",
          "f.write",
          "open",
          "logging.info"
        ],
        "get_directory_structure": [
          "logging.error",
          "get_folder_structure",
          "sorted",
          "os.listdir"
        ],
        "validate_json": [
          "json.loads",
          "str"
        ],
        "format_json": [
          "logging.error",
          "json.dumps",
          "str"
        ],
        "generate_unique_id": [
          "time.time",
          "int",
          "uuid.uuid4",
          "str"
        ],
        "safe_path_join": [
          "resolved_path.startswith",
          "ValueError"
        ],
        "file_exists": [
          "self.safe_path_join"
        ],
        "dir_exists": [
          "self.safe_path_join"
        ],
        "get_file_size": [
          "self.safe_path_join"
        ],
        "backup_file": [
          "self.safe_path_join",
          "time.time",
          "src.read",
          "logging.error",
          "open",
          "int",
          "dst.write"
        ],
        "cleanup_old_backups": [
          "self.safe_path_join",
          "filename.split",
          "logging.warning",
          "logging.error",
          "filename.startswith",
          "os.remove",
          "int",
          "backups.sort",
          "os.listdir",
          "backups.append",
          "logging.info"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "get_folder_structure",
        "json",
        "llmstruct.generators.json_generator",
        "logging",
        "os",
        "pathlib",
        "time",
        "typing",
        "uuid"
      ],
      "hash": "105ac5d21c6d1870ac478aadb62ca79e99a3453df4457642fcda39f575abf367",
      "artifact_id": "e320e6d4-cc08-4aa2-aa2a-b62de266147b"
    },
    {
      "module_id": "src.llmstruct.cli_commands",
      "path": "src/llmstruct/cli_commands.py",
      "category": "core",
      "module_doc": "CLI command processing and handlers.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize command processor.",
          "line_range": [
            33,
            72
          ],
          "parameters": [
            "self",
            "root_dir",
            "config",
            "utils"
          ],
          "decorators": []
        },
        {
          "name": "set_cache",
          "docstring": "Set cache instance.",
          "line_range": [
            74,
            76
          ],
          "parameters": [
            "self",
            "cache"
          ],
          "decorators": []
        },
        {
          "name": "set_copilot",
          "docstring": "Set Copilot manager instance.",
          "line_range": [
            78,
            80
          ],
          "parameters": [
            "self",
            "copilot_manager"
          ],
          "decorators": []
        },
        {
          "name": "process_command",
          "docstring": "Process a command starting with /.",
          "line_range": [
            82,
            98
          ],
          "parameters": [
            "self",
            "command_line"
          ],
          "decorators": []
        },
        {
          "name": "process_prompt",
          "docstring": "Process a regular user prompt (not a command).",
          "line_range": [
            100,
            152
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "cmd_help",
          "docstring": "Show help information.",
          "line_range": [
            154,
            217
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_workspace",
          "docstring": "Handle workspace state and permissions management.",
          "line_range": [
            219,
            334
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_mode",
          "docstring": "Handle context mode operations with workspace integration.",
          "line_range": [
            336,
            437
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_view",
          "docstring": "View file or directory contents.",
          "line_range": [
            439,
            478
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_write",
          "docstring": "Write content to a file.",
          "line_range": [
            480,
            505
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_queue",
          "docstring": "Handle queue operations.",
          "line_range": [
            507,
            549
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_cache",
          "docstring": "Handle cache operations.",
          "line_range": [
            551,
            590
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_copilot",
          "docstring": "Handle Copilot operations.",
          "line_range": [
            592,
            626
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_config",
          "docstring": "Handle configuration operations.",
          "line_range": [
            628,
            660
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_status",
          "docstring": "Show system status.",
          "line_range": [
            662,
            676
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_backup",
          "docstring": "Create backup of a file.",
          "line_range": [
            678,
            693
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_parse",
          "docstring": "Parse project structure.",
          "line_range": [
            695,
            715
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_audit",
          "docstring": "Handle audit operations.",
          "line_range": [
            717,
            743
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_auto_update",
          "docstring": "Handle auto-update operations.",
          "line_range": [
            745,
            765
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_struct_status",
          "docstring": "Handle struct status operations.",
          "line_range": [
            767,
            791
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_context",
          "docstring": "Handle context operations.",
          "line_range": [
            793,
            849
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_session",
          "docstring": "Handle session operations.",
          "line_range": [
            851,
            902
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CommandProcessor",
          "docstring": "Processes CLI commands and user prompts.",
          "line_range": [
            30,
            902
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize command processor.",
              "line_range": [
                33,
                72
              ],
              "parameters": [
                "self",
                "root_dir",
                "config",
                "utils"
              ]
            },
            {
              "name": "set_cache",
              "docstring": "Set cache instance.",
              "line_range": [
                74,
                76
              ],
              "parameters": [
                "self",
                "cache"
              ]
            },
            {
              "name": "set_copilot",
              "docstring": "Set Copilot manager instance.",
              "line_range": [
                78,
                80
              ],
              "parameters": [
                "self",
                "copilot_manager"
              ]
            },
            {
              "name": "process_command",
              "docstring": "Process a command starting with /.",
              "line_range": [
                82,
                98
              ],
              "parameters": [
                "self",
                "command_line"
              ]
            },
            {
              "name": "process_prompt",
              "docstring": "Process a regular user prompt (not a command).",
              "line_range": [
                100,
                152
              ],
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "cmd_help",
              "docstring": "Show help information.",
              "line_range": [
                154,
                217
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_workspace",
              "docstring": "Handle workspace state and permissions management.",
              "line_range": [
                219,
                334
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_mode",
              "docstring": "Handle context mode operations with workspace integration.",
              "line_range": [
                336,
                437
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_view",
              "docstring": "View file or directory contents.",
              "line_range": [
                439,
                478
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_write",
              "docstring": "Write content to a file.",
              "line_range": [
                480,
                505
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_queue",
              "docstring": "Handle queue operations.",
              "line_range": [
                507,
                549
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_cache",
              "docstring": "Handle cache operations.",
              "line_range": [
                551,
                590
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_copilot",
              "docstring": "Handle Copilot operations.",
              "line_range": [
                592,
                626
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_config",
              "docstring": "Handle configuration operations.",
              "line_range": [
                628,
                660
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_status",
              "docstring": "Show system status.",
              "line_range": [
                662,
                676
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_backup",
              "docstring": "Create backup of a file.",
              "line_range": [
                678,
                693
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_parse",
              "docstring": "Parse project structure.",
              "line_range": [
                695,
                715
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_audit",
              "docstring": "Handle audit operations.",
              "line_range": [
                717,
                743
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "handle_auto_update",
              "docstring": "Handle auto-update operations.",
              "line_range": [
                745,
                765
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "handle_struct_status",
              "docstring": "Handle struct status operations.",
              "line_range": [
                767,
                791
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_context",
              "docstring": "Handle context operations.",
              "line_range": [
                793,
                849
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_session",
              "docstring": "Handle session operations.",
              "line_range": [
                851,
                902
              ],
              "parameters": [
                "self",
                "args"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "print",
          "WorkspaceStateManager"
        ],
        "set_cache": [],
        "set_copilot": [],
        "process_command": [
          "print",
          "logging.error",
          "command_line.strip",
          "len",
          "command_line.split"
        ],
        "process_prompt": [
          "print",
          "prompt.strip",
          "get_optimized_context",
          "context_data.get",
          "logging.warning",
          "context_info.get",
          "logging.error",
          "len",
          "CopilotEvent",
          "logging.info"
        ],
        "cmd_help": [
          "print"
        ],
        "cmd_workspace": [
          "print",
          "boundaries.get",
          "action_args.split",
          "override.get",
          "args.strip",
          "permissions.get",
          "entry.get",
          "logging.error",
          "len",
          "int",
          "state.get",
          "result.get"
        ],
        "cmd_mode": [
          "print",
          "get_optimized_context",
          "metrics.get",
          "args.strip",
          "permissions.get",
          "context_data.get",
          "len",
          "args.lower",
          "args.upper",
          "re.findall",
          "result.get"
        ],
        "cmd_view": [
          "print",
          "sorted",
          "args.strip",
          "os.listdir"
        ],
        "cmd_write": [
          "print",
          "content.startswith",
          "len",
          "args.split",
          "content.endswith"
        ],
        "cmd_queue": [
          "print",
          "queue_data.get",
          "args.strip",
          "len",
          "open",
          "enumerate",
          "os.remove",
          "cmd.get",
          "json.load"
        ],
        "cmd_cache": [
          "print",
          "args.strip",
          "len",
          "os.listdir",
          "stats.get"
        ],
        "cmd_copilot": [
          "print",
          "args.strip",
          "open",
          "json.dumps",
          "json.load"
        ],
        "cmd_config": [
          "print",
          "json.dumps",
          "args.strip"
        ],
        "cmd_status": [
          "print"
        ],
        "cmd_backup": [
          "print",
          "args.strip"
        ],
        "cmd_parse": [
          "print",
          "generate_json"
        ],
        "cmd_audit": [
          "print",
          "args.strip"
        ],
        "handle_auto_update": [
          "print",
          "generate_json"
        ],
        "handle_struct_status": [
          "print",
          "datetime.fromtimestamp",
          "struct_data.get",
          "len",
          "open",
          "os.stat",
          "json.load"
        ],
        "cmd_context": [
          "print",
          "get_optimized_context",
          "metrics.get",
          "context_data.get",
          "args.strip",
          "len"
        ],
        "cmd_session": [
          "print",
          "args.strip",
          "datetime.now",
          "len",
          "state.get"
        ]
      },
      "dependencies": [
        "Any",
        "CLIConfig",
        "CLIUtils",
        "CopilotContextManager",
        "CopilotEvent",
        "Dict",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "WorkspaceStateManager",
        "cli_config",
        "cli_utils",
        "copilot",
        "create_context_orchestrator",
        "datetime",
        "generate_json",
        "get_optimized_context",
        "get_optimized_context_for_scenario",
        "initialize_copilot",
        "json",
        "llmstruct.cache",
        "llmstruct.context_orchestrator",
        "llmstruct.copilot",
        "llmstruct.generators.json_generator",
        "logging",
        "os",
        "pathlib",
        "re",
        "subprocess",
        "sys",
        "trigger_copilot_event",
        "typing",
        "workspace"
      ],
      "hash": "dd0d9e75fb410d85bfe10f3e554b2fa45c45847ccb317cd54107e4ac6ce33bec",
      "artifact_id": "5ef070f6-2742-4caf-8f12-2796f8bdfd2d"
    },
    {
      "module_id": "src.llmstruct.__init__",
      "path": "src/llmstruct/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "AISelfAwarenessCLIIntegration",
        "LLMClient",
        "SystemCapabilityDiscovery",
        "ai_cli_integration",
        "ai_self_awareness",
        "llm_client"
      ],
      "hash": "2592d45bae33fe6628051f9ae5eb6dd5f13fee9588b428a512203df62a55a122",
      "artifact_id": "9d8a730d-7162-456a-9c23-4cd20125c60f"
    },
    {
      "module_id": "src.llmstruct.templates.__init__",
      "path": "src/llmstruct/templates/__init__.py",
      "category": "cli",
      "module_doc": "Templates for LLM prompts used in LLMStruct integration.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "2421ea45b39e72f090ee252149c45385f679971e48ca50f0883e313c3db9fa6d",
      "artifact_id": "28bb1250-66a2-4a79-912a-e6318e15cf06"
    },
    {
      "module_id": "src.llmstruct.api.app",
      "path": "src/llmstruct/api/app.py",
      "category": "core",
      "module_doc": "Main FastAPI application for LLMStruct",
      "functions": [
        {
          "name": "root",
          "docstring": "Root endpoint with API information",
          "line_range": [
            78,
            86
          ],
          "parameters": [],
          "decorators": [
            "app.get('/', tags=['root'])"
          ]
        }
      ],
      "classes": [],
      "callgraph": {
        "root": [
          "app.get"
        ]
      },
      "dependencies": [
        "CORSMiddleware",
        "Depends",
        "FastAPI",
        "GZipMiddleware",
        "api_key_middleware",
        "chat",
        "config",
        "continue_adapter",
        "fastapi",
        "fastapi.middleware.cors",
        "fastapi.middleware.gzip",
        "logging",
        "middleware.auth",
        "middleware.logging",
        "request_logging_middleware",
        "routes",
        "settings",
        "system",
        "uvicorn"
      ],
      "hash": "ce8bc5451d35e263884b85be7e9c7bb6a332b5c3eae63322911e57a1d0eb44c1",
      "artifact_id": "4a357a3e-c635-40fd-add2-ea51bc81d757"
    },
    {
      "module_id": "src.llmstruct.api.routes.continue_adapter",
      "path": "src/llmstruct/api/routes/continue_adapter.py",
      "category": "core",
      "module_doc": "Continue API Adapter\n\nTranslates Continue extension requests to LLMStruct chat API format",
      "functions": [
        {
          "name": "continue_chat_completion",
          "docstring": "Continue-compatible chat completion endpoint\nTranslates Continue requests to our LLMStruct format",
          "line_range": [
            59,
            129
          ],
          "parameters": [
            "request",
            "api_key"
          ],
          "decorators": [
            "router.post('/v1/chat/completions')"
          ]
        },
        {
          "name": "continue_models",
          "docstring": "List available models for Continue",
          "line_range": [
            132,
            158
          ],
          "parameters": [
            "api_key"
          ],
          "decorators": [
            "router.get('/v1/models')"
          ]
        },
        {
          "name": "continue_embeddings",
          "docstring": "Embeddings endpoint for Continue (placeholder)",
          "line_range": [
            161,
            193
          ],
          "parameters": [
            "request",
            "api_key"
          ],
          "decorators": [
            "router.post('/v1/embeddings')"
          ]
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            25,
            35
          ],
          "parameters": [
            "self",
            "messages",
            "model",
            "temperature",
            "max_tokens",
            "stream"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            39,
            56
          ],
          "parameters": [
            "self",
            "content",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ContinueRequest",
          "docstring": "Continue API request format",
          "line_range": [
            23,
            35
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                25,
                35
              ],
              "parameters": [
                "self",
                "messages",
                "model",
                "temperature",
                "max_tokens",
                "stream"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "ContinueResponse",
          "docstring": "Continue API response format (OpenAI-compatible)",
          "line_range": [
            37,
            56
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                39,
                56
              ],
              "parameters": [
                "self",
                "content",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "datetime.now",
          "content.split",
          "int",
          "len"
        ],
        "continue_chat_completion": [
          "msg.get",
          "request_data.get",
          "router.post",
          "ContinueResponse",
          "datetime.now",
          "len",
          "logger.info",
          "HTTPException",
          "logger.error",
          "reversed",
          "request.json",
          "Depends",
          "llm_service.process_message",
          "str"
        ],
        "continue_models": [
          "datetime.now",
          "int",
          "Depends",
          "router.get"
        ],
        "continue_embeddings": [
          "request_data.get",
          "router.post",
          "input_text.split",
          "len",
          "HTTPException",
          "logger.error",
          "request.json",
          "Depends",
          "str"
        ]
      },
      "dependencies": [
        "APIRouter",
        "Any",
        "ChatMessage",
        "ChatResponse",
        "Depends",
        "Dict",
        "HTTPException",
        "LLMService",
        "List",
        "Optional",
        "Request",
        "datetime",
        "fastapi",
        "get_api_key",
        "logging",
        "middleware.auth",
        "models.requests",
        "models.responses",
        "services.llm_service",
        "typing"
      ],
      "hash": "98b3a53aab4b11fc41c646ed118d313f39f0f4a02aa39cde44fe28a4f89706f2",
      "artifact_id": "f253e120-5d58-47c8-87d7-62c9111de137"
    },
    {
      "module_id": "src.llmstruct.api.services.llm_service",
      "path": "src/llmstruct/api/services/llm_service.py",
      "category": "core",
      "module_doc": "LLM Service\n\nIntegrates with existing LLM models and context orchestration",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            24,
            28
          ],
          "parameters": [
            "self",
            "content",
            "context_info",
            "token_usage"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            33,
            36
          ],
          "parameters": [
            "self",
            "api_key"
          ],
          "decorators": []
        },
        {
          "name": "chat_completion",
          "docstring": "Send chat completion request to Anthropic",
          "line_range": [
            38,
            77
          ],
          "parameters": [
            "self",
            "messages",
            "temperature"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            82,
            85
          ],
          "parameters": [
            "self",
            "api_key"
          ],
          "decorators": []
        },
        {
          "name": "chat_completion",
          "docstring": "Send chat completion request to Grok",
          "line_range": [
            87,
            113
          ],
          "parameters": [
            "self",
            "messages",
            "temperature"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            118,
            124
          ],
          "parameters": [
            "self",
            "base_path"
          ],
          "decorators": []
        },
        {
          "name": "_initialize_components",
          "docstring": "Initialize context orchestrator and copilot manager",
          "line_range": [
            126,
            140
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "process_message",
          "docstring": "Process a user message and return AI response",
          "line_range": [
            143,
            168
          ],
          "parameters": [
            "self",
            "message",
            "session_id",
            "context_mode"
          ],
          "decorators": []
        },
        {
          "name": "_try_llm_providers",
          "docstring": "Try LLM providers in order and return response",
          "line_range": [
            170,
            195
          ],
          "parameters": [
            "self",
            "message",
            "context_info"
          ],
          "decorators": []
        },
        {
          "name": "_get_context",
          "docstring": "Get relevant context for the message",
          "line_range": [
            197,
            229
          ],
          "parameters": [
            "self",
            "message",
            "context_mode"
          ],
          "decorators": []
        },
        {
          "name": "_get_full_context",
          "docstring": "Get full project context",
          "line_range": [
            231,
            243
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_focused_context",
          "docstring": "Get focused context based on message content",
          "line_range": [
            245,
            260
          ],
          "parameters": [
            "self",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "_get_minimal_context",
          "docstring": "Get minimal context - basic project info",
          "line_range": [
            262,
            267
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_generate_grok_response",
          "docstring": "Generate response using Grok API",
          "line_range": [
            269,
            287
          ],
          "parameters": [
            "self",
            "message",
            "context_info"
          ],
          "decorators": []
        },
        {
          "name": "_generate_anthropic_response",
          "docstring": "Generate response using Anthropic API",
          "line_range": [
            289,
            307
          ],
          "parameters": [
            "self",
            "message",
            "context_info"
          ],
          "decorators": []
        },
        {
          "name": "_build_system_prompt",
          "docstring": "Build system prompt with project context",
          "line_range": [
            309,
            344
          ],
          "parameters": [
            "self",
            "context_info"
          ],
          "decorators": []
        },
        {
          "name": "_generate_mock_response",
          "docstring": "Generate a mock AI response (placeholder for real LLM)",
          "line_range": [
            346,
            380
          ],
          "parameters": [
            "self",
            "message",
            "context_info"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMResponse",
          "docstring": "Response from LLM processing",
          "line_range": [
            21,
            28
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                24,
                28
              ],
              "parameters": [
                "self",
                "content",
                "context_info",
                "token_usage"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "AnthropicClient",
          "docstring": "Client for Anthropic Claude API",
          "line_range": [
            30,
            77
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                33,
                36
              ],
              "parameters": [
                "self",
                "api_key"
              ]
            },
            {
              "name": "chat_completion",
              "docstring": "Send chat completion request to Anthropic",
              "line_range": [
                38,
                77
              ],
              "parameters": [
                "self",
                "messages",
                "temperature"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "GrokClient",
          "docstring": "Client for Grok API integration",
          "line_range": [
            79,
            113
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                82,
                85
              ],
              "parameters": [
                "self",
                "api_key"
              ]
            },
            {
              "name": "chat_completion",
              "docstring": "Send chat completion request to Grok",
              "line_range": [
                87,
                113
              ],
              "parameters": [
                "self",
                "messages",
                "temperature"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "LLMService",
          "docstring": "Service for LLM processing with context integration",
          "line_range": [
            115,
            380
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                118,
                124
              ],
              "parameters": [
                "self",
                "base_path"
              ]
            },
            {
              "name": "_initialize_components",
              "docstring": "Initialize context orchestrator and copilot manager",
              "line_range": [
                126,
                140
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "process_message",
              "docstring": "Process a user message and return AI response",
              "line_range": [
                143,
                168
              ],
              "parameters": [
                "self",
                "message",
                "session_id",
                "context_mode"
              ]
            },
            {
              "name": "_try_llm_providers",
              "docstring": "Try LLM providers in order and return response",
              "line_range": [
                170,
                195
              ],
              "parameters": [
                "self",
                "message",
                "context_info"
              ]
            },
            {
              "name": "_get_context",
              "docstring": "Get relevant context for the message",
              "line_range": [
                197,
                229
              ],
              "parameters": [
                "self",
                "message",
                "context_mode"
              ]
            },
            {
              "name": "_get_full_context",
              "docstring": "Get full project context",
              "line_range": [
                231,
                243
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_focused_context",
              "docstring": "Get focused context based on message content",
              "line_range": [
                245,
                260
              ],
              "parameters": [
                "self",
                "message"
              ]
            },
            {
              "name": "_get_minimal_context",
              "docstring": "Get minimal context - basic project info",
              "line_range": [
                262,
                267
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_generate_grok_response",
              "docstring": "Generate response using Grok API",
              "line_range": [
                269,
                287
              ],
              "parameters": [
                "self",
                "message",
                "context_info"
              ]
            },
            {
              "name": "_generate_anthropic_response",
              "docstring": "Generate response using Anthropic API",
              "line_range": [
                289,
                307
              ],
              "parameters": [
                "self",
                "message",
                "context_info"
              ]
            },
            {
              "name": "_build_system_prompt",
              "docstring": "Build system prompt with project context",
              "line_range": [
                309,
                344
              ],
              "parameters": [
                "self",
                "context_info"
              ]
            },
            {
              "name": "_generate_mock_response",
              "docstring": "Generate a mock AI response (placeholder for real LLM)",
              "line_range": [
                346,
                380
              ],
              "parameters": [
                "self",
                "message",
                "context_info"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "AnthropicClient",
          "GrokClient",
          "self._initialize_components",
          "Path.cwd"
        ],
        "chat_completion": [
          "response.raise_for_status",
          "client.post",
          "httpx.AsyncClient",
          "response.json",
          "ValueError"
        ],
        "_initialize_components": [
          "logger.info",
          "logger.error",
          "SmartContextOrchestrator",
          "CopilotContextManager",
          "str"
        ],
        "process_message": [
          "self._try_llm_providers",
          "self._get_context",
          "logger.error",
          "str",
          "LLMResponse"
        ],
        "_try_llm_providers": [
          "logger.warning",
          "logger.info",
          "len",
          "self._generate_mock_response",
          "self._generate_grok_response",
          "self._generate_anthropic_response"
        ],
        "_get_context": [
          "self._get_minimal_context",
          "logger.error",
          "str",
          "context_info.update",
          "self._get_focused_context",
          "self._get_full_context"
        ],
        "_get_full_context": [
          "struct_data.get",
          "list",
          "len",
          "open",
          "json.load",
          "struct_file.exists"
        ],
        "_get_focused_context": [
          "any",
          "message.lower"
        ],
        "_get_minimal_context": [
          "datetime.now",
          "str"
        ],
        "_generate_grok_response": [
          "self._build_system_prompt",
          "len",
          "ValueError"
        ],
        "_generate_anthropic_response": [
          "self._build_system_prompt",
          "len",
          "ValueError"
        ],
        "_build_system_prompt": [
          "context_info.get"
        ],
        "_generate_mock_response": [
          "context_info.get",
          "len",
          "message.lower"
        ]
      },
      "dependencies": [
        "Any",
        "CopilotContextManager",
        "Dict",
        "List",
        "Optional",
        "Path",
        "SmartContextOrchestrator",
        "asyncio",
        "context_orchestrator",
        "copilot",
        "datetime",
        "httpx",
        "json",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": "a1d741ba8e78df4c0ac307472301c495c4ea017423b103d7472bc5ae6250ab6f",
      "artifact_id": "12a49c73-b687-4069-936e-e6e2ff2926d3"
    },
    {
      "module_id": "src.llmstruct.generators.json_generator",
      "path": "src/llmstruct/generators/json_generator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_folder_structure",
          "docstring": "Capture directory and file structure with artifact_id, respecting .gitignore and patterns.",
          "line_range": [
            15,
            88
          ],
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "build_toc_and_modules",
          "docstring": "Build TOC and modules with artifact_id and robust filtering.",
          "line_range": [
            91,
            148
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "Generate JSON structure for project with artifact_id, summary, and tags.",
          "line_range": [
            151,
            218
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals",
            "exclude_dirs"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_folder_structure": [
          "Path",
          "file_path.relative_to",
          "structure.append",
          "uuid.uuid4",
          "file_path.match",
          "os.walk",
          "set",
          "str",
          "p.rstrip",
          "sorted",
          "any",
          "p.endswith"
        ],
        "build_toc_and_modules": [
          "Path",
          "f.match",
          "toc.append",
          "uuid.uuid4",
          "len",
          "set",
          "analyze_module",
          "p.rstrip",
          "str",
          "modules.append",
          "any",
          "p.endswith"
        ],
        "generate_json": [
          "Path",
          "get_folder_structure",
          "build_toc_and_modules",
          "list",
          "uuid.uuid4",
          "len",
          "set",
          "str",
          "sum"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "analyze_module",
        "datetime",
        "logging",
        "os",
        "parsers.python_parser",
        "pathlib",
        "typing",
        "uuid"
      ],
      "hash": "0c25e4343395d66633a587d438296eac1210eac4a11f5a9f167a742396af7554",
      "artifact_id": "f064ee57-9141-4028-91ff-3e300c99ae32"
    },
    {
      "module_id": "src.llmstruct.generators.go_json_generator",
      "path": "src/llmstruct/generators/go_json_generator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_go_folder_structure",
          "docstring": "Capture directory and file structure for Go projects with artifact_id, respecting .gitignore and patterns.",
          "line_range": [
            15,
            85
          ],
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "build_go_toc_and_modules",
          "docstring": "Build TOC and modules for Go projects with artifact_id and robust filtering.",
          "line_range": [
            88,
            143
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "extract_go_mod_info",
          "docstring": "Extract information from go.mod file.",
          "line_range": [
            146,
            182
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "generate_go_json",
          "docstring": "Generate JSON structure for Go project with artifact_id, summary, and tags.",
          "line_range": [
            185,
            259
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals",
            "exclude_dirs"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_go_folder_structure": [
          "Path",
          "file_path.relative_to",
          "structure.append",
          "uuid.uuid4",
          "file_path.match",
          "os.walk",
          "set",
          "str",
          "p.rstrip",
          "sorted",
          "any",
          "p.endswith"
        ],
        "build_go_toc_and_modules": [
          "module.get",
          "Path",
          "f.match",
          "toc.append",
          "uuid.uuid4",
          "len",
          "set",
          "analyze_module",
          "p.rstrip",
          "str",
          "modules.append",
          "any",
          "p.endswith"
        ],
        "extract_go_mod_info": [
          "Path",
          "go_mod_path.exists",
          "content.strip",
          "line.strip",
          "line.split",
          "logging.error",
          "len",
          "open",
          "line.startswith",
          "f.read",
          "dependencies.append"
        ],
        "generate_go_json": [
          "Path",
          "m.get",
          "go_mod_info.get",
          "list",
          "build_go_toc_and_modules",
          "uuid.uuid4",
          "len",
          "get_go_folder_structure",
          "set",
          "extract_go_mod_info",
          "str",
          "sum"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "analyze_module",
        "datetime",
        "logging",
        "os",
        "parsers.go_parser",
        "pathlib",
        "typing",
        "uuid"
      ],
      "hash": "2e11ebd0b1baad6e008b5c7c7dcff832215263638561a7d78670b0cb647d4bf1",
      "artifact_id": "f597eda9-a066-4ab4-806c-69b53c077ed2"
    },
    {
      "module_id": "src.llmstruct.generators.__init__",
      "path": "src/llmstruct/generators/__init__.py",
      "category": "cli",
      "module_doc": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "generate_json",
        "json_generator"
      ],
      "hash": "6510b9d89fa5bff008cf7b1ee6f50343f96b76737b5842a930c06888c5cbba6c",
      "artifact_id": "7f140e78-cec2-4ef6-b6f5-c285d57f57ca"
    },
    {
      "module_id": "src.llmstruct.validators.json_validator",
      "path": "src/llmstruct/validators/json_validator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_struct_json",
          "docstring": "Validate a single JSON file against a schema.",
          "line_range": [
            12,
            40
          ],
          "parameters": [
            "json_path",
            "schema_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_directory",
          "docstring": "Validate all JSON files in a directory against a schema.",
          "line_range": [
            43,
            61
          ],
          "parameters": [
            "directory",
            "schema_path",
            "include_patterns",
            "exclude_patterns"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_struct_json": [
          "Path",
          "json.load",
          "json_file.exists",
          "logging.error",
          "validate",
          "open",
          "str",
          "logging.info",
          "schema_file.exists"
        ],
        "validate_directory": [
          "Path",
          "json_file.match",
          "validate_struct_json",
          "str",
          "any"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "ValidationError",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "sys",
        "typing",
        "validate"
      ],
      "hash": "cc5c6b4f74409f89459ec86a9d59d83cd92c691e95ab4e670e6b8ac8c979a232",
      "artifact_id": "89f249ca-ca0c-409d-aa4f-9b40ad6ffc31"
    },
    {
      "module_id": "src.llmstruct.validators.__init__",
      "path": "src/llmstruct/validators/__init__.py",
      "category": "cli",
      "module_doc": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "json_validator",
        "validate_struct_json"
      ],
      "hash": "f0ee4f577643fd8bc74b46fd7debd96cc15683b5a7ad0018bb0788523f4b8d34",
      "artifact_id": "d7ecf891-0283-4356-91d7-796dcb6c6100"
    },
    {
      "module_id": "src.llmstruct.parsers.universal_converter",
      "path": "src/llmstruct/parsers/universal_converter.py",
      "category": "core",
      "module_doc": "Universal Code Converter - Orchestrates all language parsers\nConverts any codebase to llmstruct JSON format",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface for universal converter",
          "line_range": [
            375,
            428
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__post_init__",
          "docstring": "",
          "line_range": [
            55,
            62
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            79,
            82
          ],
          "parameters": [
            "self",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "detect_language",
          "docstring": "Detect programming language from file extension",
          "line_range": [
            84,
            92
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "detect_project_languages",
          "docstring": "Detect all languages in project and count files",
          "line_range": [
            94,
            109
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "get_project_files",
          "docstring": "Get all relevant files for conversion",
          "line_range": [
            111,
            138
          ],
          "parameters": [
            "self",
            "project_path",
            "language"
          ],
          "decorators": []
        },
        {
          "name": "convert_python_project",
          "docstring": "Convert Python project to llmstruct format",
          "line_range": [
            140,
            171
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "convert_go_project",
          "docstring": "Convert Go project to llmstruct format",
          "line_range": [
            173,
            190
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "convert_javascript_project",
          "docstring": "Convert JavaScript project to llmstruct format",
          "line_range": [
            192,
            223
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "convert_project",
          "docstring": "Convert any project to llmstruct format",
          "line_range": [
            225,
            250
          ],
          "parameters": [
            "self",
            "project_path",
            "language"
          ],
          "decorators": []
        },
        {
          "name": "convert_multi_language_project",
          "docstring": "Convert multi-language project with separate sections per language",
          "line_range": [
            252,
            282
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "_build_project_structure",
          "docstring": "Build standard llmstruct project structure",
          "line_range": [
            284,
            312
          ],
          "parameters": [
            "self",
            "language",
            "project_path",
            "modules",
            "toc"
          ],
          "decorators": []
        },
        {
          "name": "_build_empty_project_structure",
          "docstring": "Build empty structure when conversion fails",
          "line_range": [
            314,
            329
          ],
          "parameters": [
            "self",
            "language",
            "project_path",
            "error"
          ],
          "decorators": []
        },
        {
          "name": "_merge_language_results",
          "docstring": "Merge multiple language results into unified structure",
          "line_range": [
            331,
            372
          ],
          "parameters": [
            "self",
            "project_path",
            "language_results"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Language",
          "docstring": "",
          "line_range": [
            33,
            42
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ConverterConfig",
          "docstring": "Configuration for universal converter",
          "line_range": [
            46,
            62
          ],
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "",
              "line_range": [
                55,
                62
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "UniversalConverter",
          "docstring": "Universal code converter for any programming language",
          "line_range": [
            65,
            372
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                79,
                82
              ],
              "parameters": [
                "self",
                "config"
              ]
            },
            {
              "name": "detect_language",
              "docstring": "Detect programming language from file extension",
              "line_range": [
                84,
                92
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "detect_project_languages",
              "docstring": "Detect all languages in project and count files",
              "line_range": [
                94,
                109
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "get_project_files",
              "docstring": "Get all relevant files for conversion",
              "line_range": [
                111,
                138
              ],
              "parameters": [
                "self",
                "project_path",
                "language"
              ]
            },
            {
              "name": "convert_python_project",
              "docstring": "Convert Python project to llmstruct format",
              "line_range": [
                140,
                171
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "convert_go_project",
              "docstring": "Convert Go project to llmstruct format",
              "line_range": [
                173,
                190
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "convert_javascript_project",
              "docstring": "Convert JavaScript project to llmstruct format",
              "line_range": [
                192,
                223
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "convert_project",
              "docstring": "Convert any project to llmstruct format",
              "line_range": [
                225,
                250
              ],
              "parameters": [
                "self",
                "project_path",
                "language"
              ]
            },
            {
              "name": "convert_multi_language_project",
              "docstring": "Convert multi-language project with separate sections per language",
              "line_range": [
                252,
                282
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "_build_project_structure",
              "docstring": "Build standard llmstruct project structure",
              "line_range": [
                284,
                312
              ],
              "parameters": [
                "self",
                "language",
                "project_path",
                "modules",
                "toc"
              ]
            },
            {
              "name": "_build_empty_project_structure",
              "docstring": "Build empty structure when conversion fails",
              "line_range": [
                314,
                329
              ],
              "parameters": [
                "self",
                "language",
                "project_path",
                "error"
              ]
            },
            {
              "name": "_merge_language_results",
              "docstring": "Merge multiple language results into unified structure",
              "line_range": [
                331,
                372
              ],
              "parameters": [
                "self",
                "project_path",
                "language_results"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__post_init__": [],
        "__init__": [
          "JavaScriptParser",
          "GoAnalyzer",
          "ConverterConfig"
        ],
        "detect_language": [
          "Path"
        ],
        "detect_project_languages": [
          "os.walk",
          "any",
          "self.detect_language",
          "languages.get"
        ],
        "get_project_files": [
          "os.walk",
          "any",
          "self.detect_language",
          "files.append"
        ],
        "convert_python_project": [
          "self._build_project_structure",
          "logger.warning",
          "analyze_python",
          "toc.append",
          "self.get_project_files",
          "logger.info",
          "len",
          "modules.append",
          "module_data.get"
        ],
        "convert_go_project": [
          "self._build_empty_project_structure",
          "logger.info",
          "logger.error",
          "str",
          "convert_to_llmstruct_format"
        ],
        "convert_javascript_project": [
          "self._build_project_structure",
          "logger.warning",
          "toc.append",
          "self.get_project_files",
          "logger.info",
          "len",
          "modules.append",
          "module_data.get"
        ],
        "convert_project": [
          "max",
          "self.convert_python_project",
          "logger.info",
          "self.convert_javascript_project",
          "languages.keys",
          "NotImplementedError",
          "ValueError",
          "self.convert_go_project",
          "self.detect_project_languages"
        ],
        "convert_multi_language_project": [
          "self._merge_language_results",
          "self.convert_python_project",
          "logger.warning",
          "logger.info",
          "self.convert_javascript_project",
          "logger.error",
          "languages.keys",
          "ValueError",
          "self.convert_go_project",
          "self.detect_project_languages"
        ],
        "_build_project_structure": [
          "sum",
          "language.title",
          "len",
          "m.get"
        ],
        "_build_empty_project_structure": [],
        "_merge_language_results": [
          "all_toc.append",
          "list",
          "language_results.items",
          "language_results.keys",
          "all_modules.append",
          "result.get",
          "stats.get"
        ],
        "main": [
          "converter.convert_project",
          "print",
          "traceback.print_exc",
          "argparse.ArgumentParser",
          "converter.convert_multi_language_project",
          "f.write",
          "exit",
          "open",
          "UniversalConverter",
          "logger.error",
          "parser.parse_args",
          "json.dumps",
          "Language",
          "ConverterConfig",
          "parser.add_argument",
          "result.get",
          "stats.get"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "GoAnalyzer",
        "JavaScriptParser",
        "List",
        "Optional",
        "Path",
        "Union",
        "analyze_module",
        "argparse",
        "convert_to_llmstruct_format",
        "dataclass",
        "dataclasses",
        "enum",
        "go_analyzer",
        "javascript_parser",
        "json",
        "logging",
        "os",
        "pathlib",
        "python_parser",
        "sys",
        "traceback",
        "typing"
      ],
      "hash": "e696f22d510dfa07afbd538e69c6d7ac3c8dd4e742905cfe256be1005e0c2b95",
      "artifact_id": "5d0f83dc-4e59-4ffc-bcac-a62d78546243"
    },
    {
      "module_id": "src.llmstruct.parsers.go_analyzer",
      "path": "src/llmstruct/parsers/go_analyzer.py",
      "category": "core",
      "module_doc": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 Go \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043b\u044f Docker \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b: go/packages, go/analysis",
      "functions": [
        {
          "name": "convert_to_llmstruct_format",
          "docstring": "\u041a\u043e\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 llmstruct",
          "line_range": [
            203,
            337
          ],
          "parameters": [
            "analysis",
            "include_ranges",
            "goals"
          ],
          "decorators": []
        },
        {
          "name": "_compute_file_hash",
          "docstring": "\u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 SHA-256 \u0445\u044d\u0448 \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            339,
            345
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            347,
            402
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            24,
            26
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_setup_analyzer",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0441\u0440\u0435\u0434\u0443 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430",
          "line_range": [
            28,
            66
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_cleanup",
          "docstring": "\u041e\u0447\u0438\u0449\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b",
          "line_range": [
            68,
            72
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "analyze_project",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 Go \u043f\u0440\u043e\u0435\u043a\u0442",
          "line_range": [
            74,
            125
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "_fallback_analysis",
          "docstring": "Fallback \u0430\u043d\u0430\u043b\u0438\u0437 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0444\u0430\u0439\u043b\u043e\u0432",
          "line_range": [
            127,
            201
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GoAnalyzer",
          "docstring": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 Go \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432",
          "line_range": [
            21,
            201
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                24,
                26
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_setup_analyzer",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0441\u0440\u0435\u0434\u0443 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430",
              "line_range": [
                28,
                66
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_cleanup",
              "docstring": "\u041e\u0447\u0438\u0449\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b",
              "line_range": [
                68,
                72
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "analyze_project",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 Go \u043f\u0440\u043e\u0435\u043a\u0442",
              "line_range": [
                74,
                125
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "_fallback_analysis",
              "docstring": "Fallback \u0430\u043d\u0430\u043b\u0438\u0437 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0444\u0430\u0439\u043b\u043e\u0432",
              "line_range": [
                127,
                201
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "_setup_analyzer": [
          "tempfile.mkdtemp",
          "Path",
          "logging.warning",
          "analyzer_source.read_text",
          "subprocess.run",
          "str",
          "analyzer_file.write_text"
        ],
        "_cleanup": [
          "shutil.rmtree",
          "Path"
        ],
        "analyze_project": [
          "logging.warning",
          "logging.error",
          "self._fallback_analysis",
          "self._setup_analyzer",
          "subprocess.run",
          "logging.info",
          "json.loads",
          "self._cleanup"
        ],
        "_fallback_analysis": [
          "Path",
          "file_path.relative_to",
          "go_mod_path.exists",
          "logging.warning",
          "line.split",
          "line.strip",
          "list",
          "packages.add",
          "go_mod_path.read_text",
          "len",
          "line.startswith",
          "set",
          "str",
          "sorted",
          "logging.info",
          "content.split",
          "file_path.read_text"
        ],
        "convert_to_llmstruct_format": [
          "path.replace",
          "module.get",
          "sum",
          "struct.get",
          "toc.append",
          "classes.append",
          "uuid.uuid4",
          "len",
          "file_data.get",
          "path.endswith",
          "analysis.get",
          "functions.append",
          "_compute_file_hash",
          "str",
          "modules.append",
          "fn.get",
          "iface.get"
        ],
        "_compute_file_hash": [
          "f.read",
          "hashlib.sha256",
          "open"
        ],
        "main": [
          "print",
          "Path",
          "traceback.print_exc",
          "argparse.ArgumentParser",
          "f.write",
          "len",
          "open",
          "sys.exit",
          "parser.parse_args",
          "json.dumps",
          "analyzer.analyze_project",
          "parser.add_argument",
          "GoAnalyzer",
          "result.get",
          "stats.get",
          "convert_to_llmstruct_format"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "hashlib",
        "json",
        "logging",
        "os",
        "pathlib",
        "shutil",
        "subprocess",
        "sys",
        "tempfile",
        "traceback",
        "typing",
        "uuid"
      ],
      "hash": "621e1d82791d814534c044dc8ba1d1c79b1852a614255e313f5ff697c934f210",
      "artifact_id": "ca7b46d2-30b0-4187-9d2e-18e7723326a4"
    },
    {
      "module_id": "src.llmstruct.parsers.javascript_parser",
      "path": "src/llmstruct/parsers/javascript_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            9,
            13
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "file_hash",
          "docstring": "",
          "line_range": [
            15,
            20
          ],
          "parameters": [
            "self",
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_metadata",
          "docstring": "",
          "line_range": [
            22,
            41
          ],
          "parameters": [
            "self",
            "filepath",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "parse_module",
          "docstring": "",
          "line_range": [
            43,
            124
          ],
          "parameters": [
            "self",
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "extract_signature",
          "docstring": "",
          "line_range": [
            78,
            80
          ],
          "parameters": [
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JavaScriptParser",
          "docstring": "",
          "line_range": [
            8,
            124
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                9,
                13
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "file_hash",
              "docstring": "",
              "line_range": [
                15,
                20
              ],
              "parameters": [
                "self",
                "filepath"
              ]
            },
            {
              "name": "compute_file_metadata",
              "docstring": "",
              "line_range": [
                22,
                41
              ],
              "parameters": [
                "self",
                "filepath",
                "include_hashes"
              ]
            },
            {
              "name": "parse_module",
              "docstring": "",
              "line_range": [
                43,
                124
              ],
              "parameters": [
                "self",
                "filepath",
                "root_dir",
                "include_ranges",
                "include_hashes"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "set"
        ],
        "file_hash": [
          "f.read",
          "hashlib.sha256",
          "open"
        ],
        "compute_file_metadata": [
          "sum",
          "open",
          "self.file_hash",
          "os.stat"
        ],
        "parse_module": [
          "esprima.parseModule",
          "open",
          "self.compute_file_metadata",
          "str",
          "f.read"
        ],
        "extract_signature": [
          "hasattr"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "datetime",
        "esprima",
        "hashlib",
        "os",
        "typing"
      ],
      "hash": "d2af10a2c30b638a634dd0317c81a179888dee011e0b7a0f62166dce468373c4",
      "artifact_id": "caee931d-7ddc-43a7-b874-9be0095040a3"
    },
    {
      "module_id": "src.llmstruct.parsers.python_parser",
      "path": "src/llmstruct/parsers/python_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "infer_category",
          "docstring": "Infer module category based on its path.",
          "line_range": [
            13,
            20
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_hash",
          "docstring": "Compute SHA-256 hash of file content.",
          "line_range": [
            72,
            79
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "analyze_module",
          "docstring": "Analyze Python module and return structured data.",
          "line_range": [
            82,
            154
          ],
          "parameters": [
            "file_path",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            26,
            29
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "visit_Import",
          "docstring": "Capture import statements.",
          "line_range": [
            31,
            35
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_ImportFrom",
          "docstring": "Capture from-import statements.",
          "line_range": [
            37,
            43
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_FunctionDef",
          "docstring": "Track function definitions and their calls.",
          "line_range": [
            45,
            50
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_AsyncFunctionDef",
          "docstring": "Track async function definitions and their calls.",
          "line_range": [
            52,
            57
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_Call",
          "docstring": "Capture function calls.",
          "line_range": [
            59,
            69
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "AST visitor to collect function calls and dependencies.",
          "line_range": [
            23,
            69
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                26,
                29
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "visit_Import",
              "docstring": "Capture import statements.",
              "line_range": [
                31,
                35
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_ImportFrom",
              "docstring": "Capture from-import statements.",
              "line_range": [
                37,
                43
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_FunctionDef",
              "docstring": "Track function definitions and their calls.",
              "line_range": [
                45,
                50
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_AsyncFunctionDef",
              "docstring": "Track async function definitions and their calls.",
              "line_range": [
                52,
                57
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_Call",
              "docstring": "Capture function calls.",
              "line_range": [
                59,
                69
              ],
              "parameters": [
                "self",
                "node"
              ]
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ]
        }
      ],
      "callgraph": {
        "infer_category": [
          "Path"
        ],
        "__init__": [
          "set"
        ],
        "visit_Import": [
          "self.generic_visit"
        ],
        "visit_ImportFrom": [
          "self.generic_visit"
        ],
        "visit_FunctionDef": [
          "set",
          "self.generic_visit"
        ],
        "visit_AsyncFunctionDef": [
          "set",
          "self.generic_visit"
        ],
        "visit_Call": [
          "isinstance",
          "self.generic_visit"
        ],
        "compute_file_hash": [
          "f.read",
          "logging.error",
          "hashlib.sha256",
          "open"
        ],
        "analyze_module": [
          "Path",
          "compute_file_hash",
          "ast.unparse",
          "logging.error",
          "classes.append",
          "infer_category",
          "list",
          "open",
          "ast.walk",
          "ast.parse",
          "ast.get_docstring",
          "functions.append",
          "CallVisitor",
          "str",
          "f.read",
          "visitor.visit",
          "sorted",
          "isinstance"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "Set",
        "ast",
        "hashlib",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": "555ac7004c99ba854fc4fc4688b583331229077e51dfa999d7aae2cd9f7c21dd",
      "artifact_id": "1d819b2e-ef98-46a5-b8ff-74cc3b62e22e"
    },
    {
      "module_id": "src.llmstruct.parsers.__init__",
      "path": "src/llmstruct/parsers/__init__.py",
      "category": "cli",
      "module_doc": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "JavaScriptParser",
        "javascript_parser"
      ],
      "hash": "2f1fce5cf3e867869608b18a8ab1197f8a32add4fd35d4de75f891a9dad04b63",
      "artifact_id": "767ffd5e-36f1-494e-86b3-a9a8fba3eac3"
    },
    {
      "module_id": "examples.python_project_utils",
      "path": "examples/python_project_utils.py",
      "category": "core",
      "module_doc": "Utility functions for the sample project.",
      "functions": [
        {
          "name": "helper",
          "docstring": "Help the main function.",
          "line_range": [
            6,
            8
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "log",
          "docstring": "Log a message.",
          "line_range": [
            11,
            13
          ],
          "parameters": [
            "message"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "helper": [
          "log"
        ],
        "log": [
          "logging.info"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": "70fff4b692f6900035193847d1d43f0c5a32cc21033f9bca1752854d86bad1ed",
      "artifact_id": "45520a0d-0eb6-43c2-bca6-dfd36525cc18"
    },
    {
      "module_id": "examples.python_project_main",
      "path": "examples/python_project_main.py",
      "category": "core",
      "module_doc": "Main module for the sample project.",
      "functions": [
        {
          "name": "main",
          "docstring": "Run the program.",
          "line_range": [
            6,
            9
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "Execute the app.",
          "line_range": [
            15,
            17
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "App",
          "docstring": "Application class.",
          "line_range": [
            12,
            17
          ],
          "methods": [
            {
              "name": "run",
              "docstring": "Execute the app.",
              "line_range": [
                15,
                17
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "main": [
          "print",
          "utils.helper"
        ],
        "run": [
          "utils.log"
        ]
      },
      "dependencies": [
        "utils"
      ],
      "hash": "510144e1a60708ee61e9b3261f619e416139a7d102c2c038af07810087c672b6",
      "artifact_id": "3617223c-ae2b-4039-93e4-442781cb1b7a"
    },
    {
      "module_id": "integrations.telegram_bot.mp002_progress_bot",
      "path": "integrations/telegram_bot/mp002_progress_bot.py",
      "category": "core",
      "module_doc": "MP-002A Progress Bot - Telegram \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f Smart Wrapper \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438\n\u042d\u0442\u0430\u043f\u043d\u0430\u044f \u043e\u0442\u0447\u0435\u0442\u043d\u043e\u0441\u0442\u044c, \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430, \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0435 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435",
      "functions": [
        {
          "name": "start_mp002_bot",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a MP-002A \u0431\u043e\u0442\u0430",
          "line_range": [
            431,
            452
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            23,
            82
          ],
          "parameters": [
            "self",
            "token"
          ],
          "decorators": []
        },
        {
          "name": "init_progress_tracking",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430",
          "line_range": [
            84,
            109
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_progress",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430",
          "line_range": [
            111,
            118
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_progress",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430",
          "line_range": [
            120,
            123
          ],
          "parameters": [
            "self",
            "progress"
          ],
          "decorators": []
        },
        {
          "name": "send_message",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 Telegram",
          "line_range": [
            125,
            139
          ],
          "parameters": [
            "self",
            "chat_id",
            "text",
            "parse_mode"
          ],
          "decorators": []
        },
        {
          "name": "report_phase_start",
          "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e \u043d\u0430\u0447\u0430\u043b\u0435 \u0444\u0430\u0437\u044b",
          "line_range": [
            141,
            172
          ],
          "parameters": [
            "self",
            "chat_id",
            "phase_id"
          ],
          "decorators": []
        },
        {
          "name": "report_task_completion",
          "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            174,
            207
          ],
          "parameters": [
            "self",
            "chat_id",
            "phase_id",
            "task_description",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "request_phase_approval",
          "docstring": "\u0417\u0430\u043f\u0440\u043e\u0441 \u043e\u0434\u043e\u0431\u0440\u0435\u043d\u0438\u044f \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0444\u0430\u0437\u044b",
          "line_range": [
            209,
            232
          ],
          "parameters": [
            "self",
            "chat_id",
            "phase_id"
          ],
          "decorators": []
        },
        {
          "name": "report_issue",
          "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0435",
          "line_range": [
            234,
            264
          ],
          "parameters": [
            "self",
            "chat_id",
            "phase_id",
            "issue_description"
          ],
          "decorators": []
        },
        {
          "name": "get_overall_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u0449\u0435\u0433\u043e \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            266,
            307
          ],
          "parameters": [
            "self",
            "chat_id"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
          "line_range": [
            309,
            326
          ],
          "parameters": [
            "self",
            "update"
          ],
          "decorators": []
        },
        {
          "name": "handle_command",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434",
          "line_range": [
            328,
            349
          ],
          "parameters": [
            "self",
            "chat_id",
            "command"
          ],
          "decorators": []
        },
        {
          "name": "send_welcome",
          "docstring": "\u041f\u0440\u0438\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435",
          "line_range": [
            351,
            367
          ],
          "parameters": [
            "self",
            "chat_id"
          ],
          "decorators": []
        },
        {
          "name": "approve_phase",
          "docstring": "\u041e\u0434\u043e\u0431\u0440\u0435\u043d\u0438\u0435 \u0444\u0430\u0437\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c",
          "line_range": [
            369,
            413
          ],
          "parameters": [
            "self",
            "chat_id",
            "phase_id"
          ],
          "decorators": []
        },
        {
          "name": "handle_feedback",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043a\u0430\u043a feedback",
          "line_range": [
            415,
            427
          ],
          "parameters": [
            "self",
            "chat_id",
            "text"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "MP002ProgressBot",
          "docstring": "Telegram \u0431\u043e\u0442 \u0434\u043b\u044f \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 MP-002A Smart Wrapper",
          "line_range": [
            18,
            427
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                23,
                82
              ],
              "parameters": [
                "self",
                "token"
              ]
            },
            {
              "name": "init_progress_tracking",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430",
              "line_range": [
                84,
                109
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_progress",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430",
              "line_range": [
                111,
                118
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_progress",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430",
              "line_range": [
                120,
                123
              ],
              "parameters": [
                "self",
                "progress"
              ]
            },
            {
              "name": "send_message",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 Telegram",
              "line_range": [
                125,
                139
              ],
              "parameters": [
                "self",
                "chat_id",
                "text",
                "parse_mode"
              ]
            },
            {
              "name": "report_phase_start",
              "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e \u043d\u0430\u0447\u0430\u043b\u0435 \u0444\u0430\u0437\u044b",
              "line_range": [
                141,
                172
              ],
              "parameters": [
                "self",
                "chat_id",
                "phase_id"
              ]
            },
            {
              "name": "report_task_completion",
              "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438",
              "line_range": [
                174,
                207
              ],
              "parameters": [
                "self",
                "chat_id",
                "phase_id",
                "task_description",
                "details"
              ]
            },
            {
              "name": "request_phase_approval",
              "docstring": "\u0417\u0430\u043f\u0440\u043e\u0441 \u043e\u0434\u043e\u0431\u0440\u0435\u043d\u0438\u044f \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0444\u0430\u0437\u044b",
              "line_range": [
                209,
                232
              ],
              "parameters": [
                "self",
                "chat_id",
                "phase_id"
              ]
            },
            {
              "name": "report_issue",
              "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0435",
              "line_range": [
                234,
                264
              ],
              "parameters": [
                "self",
                "chat_id",
                "phase_id",
                "issue_description"
              ]
            },
            {
              "name": "get_overall_status",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u0449\u0435\u0433\u043e \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
              "line_range": [
                266,
                307
              ],
              "parameters": [
                "self",
                "chat_id"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
              "line_range": [
                309,
                326
              ],
              "parameters": [
                "self",
                "update"
              ]
            },
            {
              "name": "handle_command",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434",
              "line_range": [
                328,
                349
              ],
              "parameters": [
                "self",
                "chat_id",
                "command"
              ]
            },
            {
              "name": "send_welcome",
              "docstring": "\u041f\u0440\u0438\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435",
              "line_range": [
                351,
                367
              ],
              "parameters": [
                "self",
                "chat_id"
              ]
            },
            {
              "name": "approve_phase",
              "docstring": "\u041e\u0434\u043e\u0431\u0440\u0435\u043d\u0438\u0435 \u0444\u0430\u0437\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c",
              "line_range": [
                369,
                413
              ],
              "parameters": [
                "self",
                "chat_id",
                "phase_id"
              ]
            },
            {
              "name": "handle_feedback",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043a\u0430\u043a feedback",
              "line_range": [
                415,
                427
              ],
              "parameters": [
                "self",
                "chat_id",
                "text"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self.init_progress_tracking"
        ],
        "init_progress_tracking": [
          "json.dump",
          "datetime.now",
          "open"
        ],
        "load_progress": [
          "self.load_progress",
          "json.load",
          "self.init_progress_tracking",
          "open"
        ],
        "save_progress": [
          "json.dump",
          "open"
        ],
        "send_message": [
          "print",
          "client.post",
          "httpx.AsyncClient",
          "response.json",
          "str"
        ],
        "report_phase_start": [
          "datetime.now",
          "self.send_message",
          "self.save_progress",
          "enumerate",
          "self.load_progress",
          "phase_id.upper"
        ],
        "report_task_completion": [
          "datetime.now",
          "len",
          "self.send_message",
          "self.save_progress",
          "self.load_progress",
          "self.request_phase_approval"
        ],
        "request_phase_approval": [
          "enumerate",
          "phase_id.upper",
          "self.send_message"
        ],
        "report_issue": [
          "datetime.now",
          "self.load_progress",
          "self.send_message",
          "self.save_progress"
        ],
        "get_overall_status": [
          "progress.get",
          "phase_data.get",
          "len",
          "self.send_message",
          "self.load_progress"
        ],
        "handle_message": [
          "text.startswith",
          "self.handle_command",
          "message.get",
          "self.handle_feedback"
        ],
        "handle_command": [
          "self.send_welcome",
          "self.show_help",
          "self.continue_work",
          "len",
          "self.send_message",
          "self.approve_phase",
          "command.split",
          "self.show_phase_details",
          "self.get_overall_status",
          "self.report_user_issues"
        ],
        "send_welcome": [
          "self.send_message"
        ],
        "approve_phase": [
          "self.report_phase_start",
          "datetime.now",
          "list",
          "self.send_message",
          "len",
          "self.save_progress",
          "self.load_progress",
          "phase_id.upper",
          "phases_list.index"
        ],
        "handle_feedback": [
          "progress.get",
          "datetime.now",
          "self.send_message",
          "self.save_progress",
          "self.load_progress"
        ],
        "start_mp002_bot": [
          "print",
          "MP002ProgressBot",
          "os.getenv"
        ]
      },
      "dependencies": [
        "Path",
        "asyncio",
        "datetime",
        "httpx",
        "json",
        "os",
        "pathlib",
        "sys"
      ],
      "hash": "f60e36ab63391ed71af42d2dcb0dade4356aed7e39c70e0db4c31506b25e5c39",
      "artifact_id": "d66a2499-5945-4d3c-b76d-9ef590df7abe"
    },
    {
      "module_id": "docs.cache",
      "path": "docs/cache.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize SQLite cache for JSON files.",
          "line_range": [
            18,
            22
          ],
          "parameters": [
            "self",
            "db_path"
          ],
          "decorators": []
        },
        {
          "name": "create_tables",
          "docstring": "Create tables for metadata and file paths.",
          "line_range": [
            24,
            42
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cache_json",
          "docstring": "Cache JSON metadata and store full file path.",
          "line_range": [
            44,
            64
          ],
          "parameters": [
            "self",
            "json_path",
            "artifact_id",
            "summary",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "get_metadata",
          "docstring": "Retrieve metadata by artifact_id.",
          "line_range": [
            66,
            79
          ],
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "get_full_json",
          "docstring": "Load full JSON by artifact_id.",
          "line_range": [
            81,
            94
          ],
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Close database connection.",
          "line_range": [
            96,
            98
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JSONCache",
          "docstring": "",
          "line_range": [
            17,
            98
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize SQLite cache for JSON files.",
              "line_range": [
                18,
                22
              ],
              "parameters": [
                "self",
                "db_path"
              ]
            },
            {
              "name": "create_tables",
              "docstring": "Create tables for metadata and file paths.",
              "line_range": [
                24,
                42
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cache_json",
              "docstring": "Cache JSON metadata and store full file path.",
              "line_range": [
                44,
                64
              ],
              "parameters": [
                "self",
                "json_path",
                "artifact_id",
                "summary",
                "tags"
              ]
            },
            {
              "name": "get_metadata",
              "docstring": "Retrieve metadata by artifact_id.",
              "line_range": [
                66,
                79
              ],
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "get_full_json",
              "docstring": "Load full JSON by artifact_id.",
              "line_range": [
                81,
                94
              ],
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "close",
              "docstring": "Close database connection.",
              "line_range": [
                96,
                98
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.create_tables",
          "sqlite3.connect"
        ],
        "create_tables": [],
        "cache_json": [
          "logging.info",
          "Path",
          "json_file.exists",
          "logging.error",
          "open",
          "json.dumps",
          "content.encode",
          "str",
          "f.read",
          "hashlib.sha256"
        ],
        "get_metadata": [
          "json.loads",
          "cursor.fetchone"
        ],
        "get_full_json": [
          "logging.error",
          "json.load",
          "cursor.fetchone",
          "open"
        ],
        "close": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "hashlib",
        "json",
        "logging",
        "pathlib",
        "sqlite3",
        "typing"
      ],
      "hash": "0639e2f3c27b70d02596862e63d49bc84c48ca8d0d0c8778b2d42425598acc1e",
      "artifact_id": "0d1a7d25-34ec-42a2-a3d6-71894a09d552"
    },
    {
      "module_id": "docs.json_selector",
      "path": "docs/json_selector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_json",
          "docstring": "Filter JSON data by key-value pair and select fields.",
          "line_range": [
            17,
            29
          ],
          "parameters": [
            "data",
            "filter_key",
            "filter_value",
            "fields"
          ],
          "decorators": []
        },
        {
          "name": "select_json",
          "docstring": "Load and filter JSON file, optionally parsing partially.",
          "line_range": [
            31,
            72
          ],
          "parameters": [
            "json_path",
            "filter_key",
            "filter_value",
            "fields",
            "partial"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_json": [
          "isinstance",
          "item.get",
          "filtered.append",
          "data.get"
        ],
        "select_json": [
          "current_item.get",
          "Path",
          "prefix.startswith",
          "json_file.exists",
          "f.seek",
          "logging.error",
          "ijson.parse",
          "open",
          "filtered.append",
          "path.append",
          "json.load",
          "filter_json"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "ijson",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": "21ea37c015ac1ab1932e3784ab8cbd041de37be59ba72d3ad9432d5d3391523f",
      "artifact_id": "fedc8d3c-732d-490f-bcf9-8c38a43a43bf"
    },
    {
      "module_id": "docs.self_run",
      "path": "docs/self_run.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_struct",
          "docstring": "Filter struct.json or init.json based on prompt keywords.",
          "line_range": [
            17,
            35
          ],
          "parameters": [
            "struct",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "Attach filtered JSON to LLM prompt, using cache if available.",
          "line_range": [
            37,
            74
          ],
          "parameters": [
            "context_path",
            "prompt",
            "cache"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_struct": [
          "module.get",
          "struct.get",
          "prompt.lower",
          "any",
          "filter_json"
        ],
        "attach_to_llm_request": [
          "logging.info",
          "Path",
          "select_json",
          "logging.error",
          "filter_struct",
          "cache.get_full_json",
          "cache.cache_json",
          "json.dumps",
          "prompt.lower",
          "cache.get_metadata",
          "context_file.exists",
          "filter_json"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "JSONCache",
        "List",
        "Path",
        "cache",
        "filter_json",
        "json",
        "json_selector",
        "logging",
        "pathlib",
        "select_json",
        "typing"
      ],
      "hash": "894d0cb3c48c80975d0bd6f3c6920b835e98f4dfe7de68ef5c6e01e1bb300534",
      "artifact_id": "88313d98-18d0-4659-a345-6fda175e0b46"
    },
    {
      "module_id": "docs.cli",
      "path": "docs/cli.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": [
            26,
            36
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from llmstruct.toml or return empty dict.",
          "line_range": [
            38,
            47
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": [
            49,
            58
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default /tmp) and return the path.",
          "line_range": [
            60,
            74
          ],
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": [
            76,
            83
          ],
          "parameters": [
            "response"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": [
            85,
            195
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": [
            197,
            237
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": [
            239,
            260
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": [
            262,
            264
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": [
            266,
            268
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": [
            270,
            272
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": [
            274,
            334
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "Path",
          "gitignore_path.open",
          "line.strip",
          "logging.error",
          "line.startswith",
          "gitignore_path.exists"
        ],
        "load_config": [
          "Path",
          "logging.error",
          "config_path\u30aa\u30fc\u30d7\u30f3",
          "toml.load",
          "config_path.exists"
        ],
        "read_file_content": [
          "Path",
          "path.is_file",
          "logging.error",
          "path.open",
          "f.read"
        ],
        "write_to_file": [
          "base_path.mkdir",
          "Path",
          "logging.warning",
          "file_path.open",
          "logging.error",
          "f.write",
          "str",
          "logging.info",
          "file_path.exists"
        ],
        "parse_files_from_response": [
          "content.strip",
          "re.findall",
          "filename.strip",
          "files.append"
        ],
        "interactive": [
          "user_input.lower",
          "LLMClient",
          "input",
          "attach_to_llm_request",
          "client.query",
          "get_folder_structure",
          "scan_match.group",
          "json.dumps",
          "sorted",
          "os.listdir",
          "read_file_content",
          "re.search",
          "write_match.group",
          "parse",
          "files_to_write.append",
          "JSONCache",
          "logging.warning",
          "cache.close",
          "logging.error",
          "write_to_file",
          "print",
          "load_gitignore",
          "Path",
          "write_dir.startswith",
          "parse_files_from_response"
        ],
        "parse": [
          "JSONCache",
          "load_gitignore",
          "Path",
          "logging.warning",
          "cache.close",
          "logging.error",
          "generate_json",
          "json.dump",
          "cache.cache_json",
          "load_config",
          "config.get",
          "logging.info"
        ],
        "query": [
          "JSONCache",
          "Path",
          "LLMClient",
          "logging.error",
          "cache.close",
          "json.dump",
          "logging.info",
          "client.query"
        ],
        "context": [
          "logging.warning"
        ],
        "dogfood": [
          "logging.warning"
        ],
        "review": [
          "logging.warning"
        ],
        "main": [
          "query_parser.add_argument",
          "interactive",
          "review_parser.add_argument",
          "argparse.ArgumentParser",
          "parse_parser.add_argument",
          "context",
          "interactive_parser.add_argument",
          "dogfood_parser.add_argument",
          "query",
          "dogfood",
          "parser.add_subparsers",
          "parser.parse_args",
          "subparsers.add_parser",
          "context_parser.add_argument",
          "asyncio.run",
          "parse",
          "review"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "generate_json",
        "get_folder_structure",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "logging",
        "os",
        "pathlib",
        "re",
        "toml",
        "typing",
        "uuid"
      ],
      "hash": "26cffb7c31d1f379e0dcc75d668fd872ffe10d408cfb92cc81172aeca774fffc",
      "artifact_id": "2dd144ef-cedd-48e6-a536-e84d60c6b6e3"
    },
    {
      "module_id": "tests.__init__",
      "path": "tests/__init__.py",
      "category": "test",
      "module_doc": "Test suite for LLMStruct, covering parsers, generators, validators, and integration.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": "6c8a89ead1428796572a096daee1e9d2f972387a1556136e12c69e87350564d8",
      "artifact_id": "fc313dae-397a-4c44-9a37-d099c2376baa"
    },
    {
      "module_id": ".PHOENIX.executable_phoenix_plan",
      "path": ".PHOENIX/executable_phoenix_plan.py",
      "category": "core",
      "module_doc": "PHOENIX: \u0418\u0441\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u044b\u0439 \u043f\u043b\u0430\u043d \u0440\u0435\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0437\u0430\u0446\u0438\u0438\n\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u0448\u0430\u0433\u043e\u0432 \u0438\u0437 opus_PHOENIX_FINAL_EXECUTABLE_PLAN.md",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            19,
            23
          ],
          "parameters": [
            "self",
            "workspace_path",
            "ollama_url"
          ],
          "decorators": []
        },
        {
          "name": "setup_workspace",
          "docstring": "\u0424\u0430\u0437\u0430 0: \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0430",
          "line_range": [
            25,
            38
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "analyze_duplicates",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432 \u0441 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u043c\u0438 \u043c\u0435\u0442\u0440\u0438\u043a\u0430\u043c\u0438",
          "line_range": [
            40,
            60
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "query_ollama",
          "docstring": "\u0417\u0430\u043f\u0440\u043e\u0441 \u043a Ollama \u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u043e\u0439 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043e\u0442\u0432\u0435\u0442\u0430",
          "line_range": [
            62,
            92
          ],
          "parameters": [
            "self",
            "message",
            "model",
            "context_file"
          ],
          "decorators": []
        },
        {
          "name": "validate_checkpoint",
          "docstring": "\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f checkpoint \u0441 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u043c\u0438 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u044f\u043c\u0438",
          "line_range": [
            94,
            109
          ],
          "parameters": [
            "self",
            "phase"
          ],
          "decorators": []
        },
        {
          "name": "_validate_phase_0",
          "docstring": "\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0444\u0430\u0437\u044b 0: \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430",
          "line_range": [
            111,
            121
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_validate_phase_1",
          "docstring": "\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0444\u0430\u0437\u044b 1: \u043a\u043e\u043d\u0441\u043e\u043b\u0438\u0434\u0430\u0446\u0438\u044f",
          "line_range": [
            123,
            127
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_validate_phase_2",
          "docstring": "\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0444\u0430\u0437\u044b 2: \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0445\u0435\u043c",
          "line_range": [
            129,
            133
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_validate_phase_3",
          "docstring": "\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0444\u0430\u0437\u044b 3: \u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433",
          "line_range": [
            135,
            143
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_validate_phase_4",
          "docstring": "\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0444\u0430\u0437\u044b 4: \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f",
          "line_range": [
            145,
            148
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "execute_phase",
          "docstring": "\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0444\u0430\u0437\u044b \u043f\u043b\u0430\u043d\u0430",
          "line_range": [
            150,
            173
          ],
          "parameters": [
            "self",
            "phase"
          ],
          "decorators": []
        },
        {
          "name": "_execute_phase_0",
          "docstring": "\u0424\u0430\u0437\u0430 0: \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0438 \u0430\u043d\u0430\u043b\u0438\u0437 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432",
          "line_range": [
            175,
            197
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_execute_phase_1",
          "docstring": "\u0424\u0430\u0437\u0430 1: \u041a\u043e\u043d\u0441\u043e\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0438 \u0430\u0440\u0445\u0438\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435",
          "line_range": [
            199,
            223
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_execute_phase_2",
          "docstring": "\u0424\u0430\u0437\u0430 2: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0445\u0435\u043c \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u044b",
          "line_range": [
            225,
            239
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_execute_phase_3",
          "docstring": "\u0424\u0430\u0437\u0430 3: \u0420\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433 \u0441 LLM-first \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u043c",
          "line_range": [
            241,
            246
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_execute_phase_4",
          "docstring": "\u0424\u0430\u0437\u0430 4: \u0424\u0438\u043d\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f",
          "line_range": [
            248,
            262
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_full_plan",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u043f\u043e\u043b\u043d\u043e\u0433\u043e \u043f\u043b\u0430\u043d\u0430 Phoenix",
          "line_range": [
            264,
            275
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "PhoenixExecutor",
          "docstring": "",
          "line_range": [
            18,
            275
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                19,
                23
              ],
              "parameters": [
                "self",
                "workspace_path",
                "ollama_url"
              ]
            },
            {
              "name": "setup_workspace",
              "docstring": "\u0424\u0430\u0437\u0430 0: \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0430",
              "line_range": [
                25,
                38
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "analyze_duplicates",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432 \u0441 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u043c\u0438 \u043c\u0435\u0442\u0440\u0438\u043a\u0430\u043c\u0438",
              "line_range": [
                40,
                60
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "query_ollama",
              "docstring": "\u0417\u0430\u043f\u0440\u043e\u0441 \u043a Ollama \u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u043e\u0439 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043e\u0442\u0432\u0435\u0442\u0430",
              "line_range": [
                62,
                92
              ],
              "parameters": [
                "self",
                "message",
                "model",
                "context_file"
              ]
            },
            {
              "name": "validate_checkpoint",
              "docstring": "\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f checkpoint \u0441 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u043c\u0438 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u044f\u043c\u0438",
              "line_range": [
                94,
                109
              ],
              "parameters": [
                "self",
                "phase"
              ]
            },
            {
              "name": "_validate_phase_0",
              "docstring": "\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0444\u0430\u0437\u044b 0: \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430",
              "line_range": [
                111,
                121
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_validate_phase_1",
              "docstring": "\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0444\u0430\u0437\u044b 1: \u043a\u043e\u043d\u0441\u043e\u043b\u0438\u0434\u0430\u0446\u0438\u044f",
              "line_range": [
                123,
                127
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_validate_phase_2",
              "docstring": "\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0444\u0430\u0437\u044b 2: \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0445\u0435\u043c",
              "line_range": [
                129,
                133
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_validate_phase_3",
              "docstring": "\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0444\u0430\u0437\u044b 3: \u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433",
              "line_range": [
                135,
                143
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_validate_phase_4",
              "docstring": "\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0444\u0430\u0437\u044b 4: \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f",
              "line_range": [
                145,
                148
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "execute_phase",
              "docstring": "\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0444\u0430\u0437\u044b \u043f\u043b\u0430\u043d\u0430",
              "line_range": [
                150,
                173
              ],
              "parameters": [
                "self",
                "phase"
              ]
            },
            {
              "name": "_execute_phase_0",
              "docstring": "\u0424\u0430\u0437\u0430 0: \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0438 \u0430\u043d\u0430\u043b\u0438\u0437 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432",
              "line_range": [
                175,
                197
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_execute_phase_1",
              "docstring": "\u0424\u0430\u0437\u0430 1: \u041a\u043e\u043d\u0441\u043e\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0438 \u0430\u0440\u0445\u0438\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435",
              "line_range": [
                199,
                223
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_execute_phase_2",
              "docstring": "\u0424\u0430\u0437\u0430 2: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0445\u0435\u043c \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u044b",
              "line_range": [
                225,
                239
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_execute_phase_3",
              "docstring": "\u0424\u0430\u0437\u0430 3: \u0420\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433 \u0441 LLM-first \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u043c",
              "line_range": [
                241,
                246
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_execute_phase_4",
              "docstring": "\u0424\u0430\u0437\u0430 4: \u0424\u0438\u043d\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f",
              "line_range": [
                248,
                262
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run_full_plan",
              "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u043f\u043e\u043b\u043d\u043e\u0433\u043e \u043f\u043b\u0430\u043d\u0430 Phoenix",
              "line_range": [
                264,
                275
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path"
        ],
        "setup_workspace": [
          "logger.info",
          "logger.error"
        ],
        "analyze_duplicates": [
          "logger.info",
          "open",
          "logger.error",
          "str",
          "subprocess.run",
          "json.load",
          "report.get"
        ],
        "query_ollama": [
          "logger.warning",
          "requests.post",
          "len",
          "logger.info",
          "logger.error",
          "response.json",
          "result.get"
        ],
        "validate_checkpoint": [
          "logger.warning",
          "validator",
          "validations.get"
        ],
        "_validate_phase_0": [
          "all",
          "logger.info",
          "checks.values"
        ],
        "_validate_phase_1": [
          "list",
          "archive_dir.exists",
          "len",
          "archive_dir.glob"
        ],
        "_validate_phase_2": [
          "all"
        ],
        "_validate_phase_3": [
          "list",
          "subprocess.run"
        ],
        "_validate_phase_4": [
          "all"
        ],
        "execute_phase": [
          "self.validate_checkpoint",
          "logger.info",
          "logger.error",
          "method",
          "phase_methods.get"
        ],
        "_execute_phase_0": [
          "f.write",
          "self.query_ollama",
          "open",
          "str",
          "self.analyze_duplicates",
          "self.setup_workspace"
        ],
        "_execute_phase_1": [
          "bot.rename",
          "list",
          "len",
          "logger.info",
          "archive_dir.mkdir",
          "str"
        ],
        "_execute_phase_2": [
          "f.write",
          "self.query_ollama",
          "open"
        ],
        "_execute_phase_3": [
          "logger.info"
        ],
        "_execute_phase_4": [
          "f.write",
          "self.query_ollama",
          "open"
        ],
        "run_full_plan": [
          "range",
          "logger.info",
          "self.execute_phase",
          "logger.error"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "json",
        "logging",
        "pathlib",
        "requests",
        "subprocess",
        "typing"
      ],
      "hash": "d5cb2c913c1818714420ea4b75c0f75541dae19b01cfca97d8151e8bd876a53e",
      "artifact_id": "1b82eec0-2180-4955-a220-1ba047129ebe"
    },
    {
      "module_id": "cursor_workflow_integration.scripts.install_ai_integration",
      "path": "cursor_workflow_integration/scripts/install_ai_integration.py",
      "category": "core",
      "module_doc": "\ud83d\ude80 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f Cursor\n\u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0441\u0430\u043c\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0430 AI \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0432 \u043b\u044e\u0431\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442",
      "functions": [
        {
          "name": "install_ai_integration",
          "docstring": "\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044e \u0432 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442",
          "line_range": [
            12,
            58
          ],
          "parameters": [
            "target_project"
          ],
          "decorators": []
        },
        {
          "name": "adapt_cursorrules",
          "docstring": "\u0410\u0434\u0430\u043f\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c .cursorrules \u043f\u043e\u0434 \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442",
          "line_range": [
            60,
            99
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "adapt_auto_init",
          "docstring": "\u0410\u0434\u0430\u043f\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c auto_init_ai_system.py \u043f\u043e\u0434 \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442",
          "line_range": [
            101,
            123
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "create_simplified_auto_init",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0443\u043f\u0440\u043e\u0449\u0435\u043d\u043d\u0443\u044e \u0432\u0435\u0440\u0441\u0438\u044e auto_init \u0434\u043b\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432 \u0431\u0435\u0437 llmstruct",
          "line_range": [
            125,
            189
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438",
          "line_range": [
            191,
            207
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "install_ai_integration": [
          "print",
          "Path",
          "adapt_cursorrules",
          "vscode_dir.mkdir",
          "adapt_auto_init",
          "source_path.exists",
          "shutil.copy2",
          "target_root.exists"
        ],
        "adapt_cursorrules": [
          "print",
          "cursorrules_path.write_text",
          "content.replace",
          "list",
          "len",
          "cursorrules_path.exists",
          "cursorrules_path.read_text",
          "project_root.rglob"
        ],
        "adapt_auto_init": [
          "print",
          "content.replace",
          "auto_init_path.write_text",
          "auto_init_path.exists",
          "create_simplified_auto_init",
          "auto_init_path.read_text"
        ],
        "create_simplified_auto_init": [],
        "main": [
          "print",
          "len",
          "install_ai_integration"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "os",
        "pathlib",
        "shutil",
        "sys"
      ],
      "hash": "353707fbf511631d58cc0ba0a5e0e01c4d4d1ecc8ddae9d60d759ba6dd524f56",
      "artifact_id": "90263f27-8031-42e5-9b76-8c0307117bce"
    },
    {
      "module_id": "cursor_workflow_integration.files.auto_init_ai_system",
      "path": "cursor_workflow_integration/files/auto_init_ai_system.py",
      "category": "core",
      "module_doc": "\ud83d\ude80 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043f\u0440\u0438 \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0432 Cursor\n\u042d\u0442\u043e\u0442 \u0444\u0430\u0439\u043b \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0441\u0430\u043c\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0430 AI \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439\nENHANCED: \u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 workflow \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439, \u0441\u0435\u0441\u0441\u0438\u044f\u043c\u0438 \u0438 context tags",
      "functions": [
        {
          "name": "auto_initialize_ai_system",
          "docstring": "\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043f\u0440\u0438 \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            26,
            90
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "get_current_workflow_context",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 workflow \u0441\u0435\u0441\u0441\u0438\u0438 \u0438 workspace mode",
          "line_range": [
            92,
            128
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "get_workflow_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u043e\u043b\u043d\u044b\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 workflow \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            130,
            178
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "switch_workspace_mode",
          "docstring": "\u041f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u0442\u044c workspace mode (\u0434\u043b\u044f CLI integration)",
          "line_range": [
            180,
            196
          ],
          "parameters": [
            "mode_string"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            198,
            208
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "search_ai_capabilities",
          "docstring": "\u041f\u043e\u0438\u0441\u043a \u0432 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044f\u0445 AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b (Enhanced with caching optimization)",
          "line_range": [
            210,
            271
          ],
          "parameters": [
            "query"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_context",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0434\u043b\u044f AI \u0432 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435",
          "line_range": [
            273,
            304
          ],
          "parameters": [
            "mode"
          ],
          "decorators": []
        },
        {
          "name": "get_epic_sessions_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 \u0432\u0441\u0435\u0445 \u044d\u043f\u0438\u043a-\u0441\u0435\u0441\u0441\u0438\u0439",
          "line_range": [
            306,
            355
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "create_epic_session",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e \u0434\u043b\u044f \u044d\u043f\u0438\u043a\u0430",
          "line_range": [
            357,
            378
          ],
          "parameters": [
            "epic_id",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "switch_to_session",
          "docstring": "\u041f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0434\u0440\u0443\u0433\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e",
          "line_range": [
            380,
            398
          ],
          "parameters": [
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "get_available_sessions",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u0441\u0435\u0441\u0441\u0438\u0439",
          "line_range": [
            400,
            461
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "session_management_commands",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043c\u0430\u043d\u0434 \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u0435\u0441\u0441\u0438\u044f\u043c\u0438",
          "line_range": [
            463,
            489
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "auto_initialize_ai_system": [
          "print",
          "AI_CAPABILITIES.discover_all_capabilities",
          "Path",
          "src_path.exists",
          "len",
          "logger.info",
          "logger.error",
          "get_current_workflow_context",
          "SystemCapabilityDiscovery",
          "str",
          "f.exists"
        ],
        "get_current_workflow_context": [
          "Path",
          "session.get",
          "workspace.get",
          "logger.warning",
          "logger.info",
          "workspace_file.exists",
          "open",
          "roadmap.get",
          "json.load",
          "session_file.exists",
          "epic_data.get",
          "roadmap_file.exists"
        ],
        "get_workflow_status": [
          "Path",
          "context.get",
          "WorkspaceStateManager",
          "len",
          "open",
          "logger.error",
          "get_current_workflow_context",
          "roadmap.get",
          "str",
          "e.get",
          "json.load",
          "auto_initialize_ai_system",
          "roadmap_file.exists"
        ],
        "switch_workspace_mode": [
          "Path",
          "WorkspaceStateManager",
          "logger.info",
          "logger.error",
          "get_current_workflow_context",
          "ws.set_mode",
          "str"
        ],
        "get_ai_status": [
          "AI_CAPABILITIES.get_enhanced_capabilities_summary",
          "get_workflow_status",
          "AI_STATUS.get",
          "auto_initialize_ai_system"
        ],
        "search_ai_capabilities": [
          "cache_file.exists",
          "module.get",
          "Path",
          "func.get",
          "results.append",
          "logger.info",
          "struct_file.stat",
          "query.lower",
          "open",
          "json.dump",
          "len",
          "logger.error",
          "data.get",
          "cache_file.stat",
          "json.load",
          "auto_initialize_ai_system"
        ],
        "get_ai_context": [
          "AI_CAPABILITIES.discover_all_capabilities",
          "len",
          "logger.error",
          "get_current_workflow_context",
          "json.dumps",
          "auto_initialize_ai_system"
        ],
        "get_epic_sessions_status": [
          "Path",
          "session.get",
          "open",
          "sessions_file.exists",
          "logger.error",
          "roadmap.get",
          "status_lines.append",
          "json.load",
          "epic_data.get",
          "roadmap_file.exists"
        ],
        "create_epic_session": [
          "Path",
          "logger.info",
          "logger.error",
          "epic_id.split",
          "os.system"
        ],
        "switch_to_session": [
          "Path",
          "logger.info",
          "logger.error",
          "get_current_workflow_context",
          "os.system"
        ],
        "get_available_sessions": [
          "Path",
          "session.get",
          "current_session_file.exists",
          "sessions_list.append",
          "sessions_data.get",
          "open",
          "sessions_file.exists",
          "logger.error",
          "current_data.get",
          "roadmap.get",
          "json.load",
          "epic_data.get",
          "roadmap_file.exists"
        ],
        "session_management_commands": []
      },
      "dependencies": [
        "Path",
        "SystemCapabilityDiscovery",
        "WorkspaceStateManager",
        "datetime",
        "json",
        "llmstruct.ai_self_awareness",
        "llmstruct.workspace",
        "logging",
        "os",
        "pathlib",
        "sys"
      ],
      "hash": "3fe1ba4c90500c1b690805ce392f78d56304721b2b277c4809f9ba8c061f827a",
      "artifact_id": "3a36016d-333a-4f68-9a9a-ad7266047ac0"
    }
  ]
}