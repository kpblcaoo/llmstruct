{
  "metadata": {
    "project_name": "llmstruct",
    "description": "Utility for generating structured JSON for codebases",
    "version": "2025-06-01T07:24:40.128249Z",
    "authors": [
      {
        "name": "Mikhail Stepanov",
        "github": "kpblcaoo",
        "email": "kpblcaoo@gmail.com"
      }
    ],
    "instructions": [
      "Follow best practices, warn if instructions conflict with them",
      "Preserve functionality, ensure idempotency",
      "Use attached struct.json for context and navigation",
      "Request missing modules or functions if needed",
      "Regenerate JSON for significant changes, track via Git and artifacts",
      "Use internal comments for descriptions, append brief summary"
    ],
    "goals": {
      "goals": [
        "Create universal JSON format for codebase structure (modules, functions, classes, calls, metadata)",
        "Ensure extensibility for new languages and entity types",
        "Develop modular, plugin-based parsers for new languages",
        "Maintain an open, RFC-style documented format",
        "Integrate with LLMs by generating and attaching JSON structure to queries"
      ]
    },
    "stats": {
      "modules_count": 203,
      "functions_count": 1502,
      "classes_count": 154,
      "call_edges_count": 4367
    },
    "artifact_id": "5d0a0c46-ffdc-4644-ab0f-6a4fd36f389d",
    "summary": "Structured JSON for llmstruct codebase",
    "tags": [
      "codebase",
      "automation"
    ],
    "folder_structure": [
      {
        "path": ".",
        "type": "directory",
        "artifact_id": "c5cafa09-5667-4eb7-b207-5f1b59ad96e0",
        "metadata": {}
      },
      {
        "path": "CHANGELOG.md",
        "type": "file",
        "artifact_id": "611ceb6e-44f2-4f0a-8a81-21d8b16216c7",
        "metadata": {}
      },
      {
        "path": "QUICK_START.md",
        "type": "file",
        "artifact_id": "8f1177b4-5ff3-4601-b721-079d0d7557e6",
        "metadata": {}
      },
      {
        "path": "README.md",
        "type": "file",
        "artifact_id": "10917e82-c984-4aec-b163-f614676e63b0",
        "metadata": {}
      },
      {
        "path": "TODO",
        "type": "directory",
        "artifact_id": "a412ac74-8b95-4a18-8db1-655a457365fc",
        "metadata": {}
      },
      {
        "path": "TODO/ast_fallback.md",
        "type": "file",
        "artifact_id": "54b39356-5e95-417b-a48a-b85751293aea",
        "metadata": {}
      },
      {
        "path": "UNKNOWN.egg-info",
        "type": "directory",
        "artifact_id": "6795185b-7ec1-482e-bdfa-a723fbd27b49",
        "metadata": {}
      },
      {
        "path": "auto_init_ai_system.py",
        "type": "file",
        "artifact_id": "510f5c9d-51c2-43b7-8f16-90478e191ec3",
        "metadata": {}
      },
      {
        "path": "collect_json.py",
        "type": "file",
        "artifact_id": "5d9b6666-c4cd-4b58-8204-713508459434",
        "metadata": {}
      },
      {
        "path": "collector.py",
        "type": "file",
        "artifact_id": "b17e3f83-9994-474d-b53e-2b9fcb480ae7",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration",
        "type": "directory",
        "artifact_id": "5a296bd1-4efb-4ad4-8c76-231e86ac808b",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/INSTALL.md",
        "type": "file",
        "artifact_id": "d19fc680-b6d2-4c15-bfed-bb0e5ae4f7fe",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/PACKAGE_OVERVIEW.md",
        "type": "file",
        "artifact_id": "62aee6b5-4c0b-4831-8620-529d5d9e8619",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/README.md",
        "type": "file",
        "artifact_id": "e9ce0364-3d6f-4861-8bd4-82fce06abd92",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/docs",
        "type": "directory",
        "artifact_id": "cf44ecf9-0180-4175-b7b6-509c95bb3f4b",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/docs/CURSOR_AI_EXAMPLES.md",
        "type": "file",
        "artifact_id": "1b1020f1-26b4-496e-addd-036dcc7d341d",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/docs/SESSION_INTEGRATION_REPORT.md",
        "type": "file",
        "artifact_id": "fdc0e664-db1c-4c6e-a146-2adabce7f960",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/docs/SESSION_MANAGEMENT_GUIDE.md",
        "type": "file",
        "artifact_id": "10941433-aeb8-4265-8d29-8150340da87c",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/docs/WORKFLOW_CURSOR_INTEGRATION_REPORT.md",
        "type": "file",
        "artifact_id": "952f85b4-b1b0-4a1b-b734-7ad8a6112ed7",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/files",
        "type": "directory",
        "artifact_id": "18d04ed0-89a3-47f9-b55e-0f36fd257f52",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/files/auto_init_ai_system.py",
        "type": "file",
        "artifact_id": "fe3db8f7-80c9-4aa9-8df6-32596dcf210f",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/scripts",
        "type": "directory",
        "artifact_id": "27cfc75b-c0c2-4103-a806-ccf9e3eb425f",
        "metadata": {}
      },
      {
        "path": "cursor_workflow_integration/scripts/install_ai_integration.py",
        "type": "file",
        "artifact_id": "fce46ea4-e3e5-4460-9401-73db48d19365",
        "metadata": {}
      },
      {
        "path": "data",
        "type": "directory",
        "artifact_id": "cf835693-7ccc-4397-afdd-7e6df369aabf",
        "metadata": {}
      },
      {
        "path": "data/ai_diagnostics_report.json",
        "type": "file",
        "artifact_id": "75a3d972-ac81-435e-b5bf-3b1a63b8da97",
        "metadata": {}
      },
      {
        "path": "data/ai_integration_config.json",
        "type": "file",
        "artifact_id": "03819779-8ce9-4bba-ae86-130a915a846c",
        "metadata": {}
      },
      {
        "path": "data/ai_self_awareness",
        "type": "directory",
        "artifact_id": "6c748240-1acd-4a0b-b015-c30d806fc27b",
        "metadata": {}
      },
      {
        "path": "data/ai_self_awareness/ai_behavior_analysis.json",
        "type": "file",
        "artifact_id": "9df406ae-d074-4023-9ac2-327cc35b8116",
        "metadata": {}
      },
      {
        "path": "data/ai_self_awareness/ai_usage_events.json",
        "type": "file",
        "artifact_id": "3bafd2ee-642f-41b6-a168-20e130d1be06",
        "metadata": {}
      },
      {
        "path": "data/ai_self_awareness/capability_cache.json",
        "type": "file",
        "artifact_id": "93b0c898-4cd2-4456-a375-460fbc220531",
        "metadata": {}
      },
      {
        "path": "data/ai_self_awareness/search_cache.json",
        "type": "file",
        "artifact_id": "a329af8c-e409-46a6-99e0-b506e535dec3",
        "metadata": {}
      },
      {
        "path": "data/artifacts_index.json",
        "type": "file",
        "artifact_id": "3f6650bf-5967-4051-8b6d-7bb69f5612cf",
        "metadata": {}
      },
      {
        "path": "data/chat_sessions",
        "type": "directory",
        "artifact_id": "588cea0f-1088-4fa4-be1f-005684155533",
        "metadata": {}
      },
      {
        "path": "data/chat_sessions/telegram-bot-session.json",
        "type": "file",
        "artifact_id": "b2a801aa-449d-4bc8-bfae-1079045f1cb3",
        "metadata": {}
      },
      {
        "path": "data/chat_sessions/test-session.json",
        "type": "file",
        "artifact_id": "b5ef6077-2738-4345-ae82-2d9dfb967194",
        "metadata": {}
      },
      {
        "path": "data/chat_sessions/tg_-4938821563_306157325.json",
        "type": "file",
        "artifact_id": "11982d4b-f927-4465-926f-f9226c2cf365",
        "metadata": {}
      },
      {
        "path": "data/cli.json",
        "type": "file",
        "artifact_id": "389d5914-f46d-4677-ae01-96269223454a",
        "metadata": {}
      },
      {
        "path": "data/cli_enhanced.json",
        "type": "file",
        "artifact_id": "2a670719-5fd8-4928-ab4c-b83712eec250",
        "metadata": {}
      },
      {
        "path": "data/cli_queue.json",
        "type": "file",
        "artifact_id": "cc2d4c71-2c86-4440-966b-b8b81f548519",
        "metadata": {}
      },
      {
        "path": "data/cli_queue_enhanced.json",
        "type": "file",
        "artifact_id": "92607233-c2f3-4f05-819c-d44d70eb2fac",
        "metadata": {}
      },
      {
        "path": "data/conflicts.json",
        "type": "file",
        "artifact_id": "bfa993bc-0a68-49c4-8966-87c1efb65cf4",
        "metadata": {}
      },
      {
        "path": "data/context_orchestration.json",
        "type": "file",
        "artifact_id": "ff224fce-9576-4b5c-ac74-47ddf033b3ba",
        "metadata": {}
      },
      {
        "path": "data/copilot_init.json",
        "type": "file",
        "artifact_id": "2c4934e6-ee36-4f48-859d-5b4f8de1dbdb",
        "metadata": {}
      },
      {
        "path": "data/cursor",
        "type": "directory",
        "artifact_id": "ca5e32e1-92bb-4126-9153-d49c7525dbf9",
        "metadata": {}
      },
      {
        "path": "data/cursor/cursor_context_config.json",
        "type": "file",
        "artifact_id": "e3260a36-25ed-4e2a-ab00-99749528330c",
        "metadata": {}
      },
      {
        "path": "data/cursor/cursor_personal_bridge.json",
        "type": "file",
        "artifact_id": "a2c9f997-5dd2-4319-ad37-86943225c688",
        "metadata": {}
      },
      {
        "path": "data/cursor/cursor_session_memory.json",
        "type": "file",
        "artifact_id": "160222b4-fa81-45c0-92fe-f47e0f49616e",
        "metadata": {}
      },
      {
        "path": "data/developer_onboarding.json",
        "type": "file",
        "artifact_id": "a7215ec7-479e-444c-915b-6b7d2b1bf66b",
        "metadata": {}
      },
      {
        "path": "data/docs.json",
        "type": "file",
        "artifact_id": "13e5ed30-599f-4264-99e9-5e28cf0eb876",
        "metadata": {}
      },
      {
        "path": "data/gh_mapping.json",
        "type": "file",
        "artifact_id": "18f57693-ff8c-497e-9a91-65bc6737fd12",
        "metadata": {}
      },
      {
        "path": "data/ideas.json",
        "type": "file",
        "artifact_id": "99607f5e-ea04-4852-be76-f5225caed795",
        "metadata": {}
      },
      {
        "path": "data/ideas_cache.json",
        "type": "file",
        "artifact_id": "b35699cc-821e-43c0-a345-23b8431d69a9",
        "metadata": {}
      },
      {
        "path": "data/init.json",
        "type": "file",
        "artifact_id": "1bde718f-de30-47b3-a477-4c25d77b1e60",
        "metadata": {}
      },
      {
        "path": "data/init_enhanced.json",
        "type": "file",
        "artifact_id": "138aa973-83b2-4e98-921a-9ec30db9ab7a",
        "metadata": {}
      },
      {
        "path": "data/init_enhanced_ai.json",
        "type": "file",
        "artifact_id": "a35f24f4-4615-444a-ab96-a6794f8efc2b",
        "metadata": {}
      },
      {
        "path": "data/insights.json",
        "type": "file",
        "artifact_id": "3a9be8db-a220-40a4-baf6-e364c5f2d6d3",
        "metadata": {}
      },
      {
        "path": "data/metrics.json",
        "type": "file",
        "artifact_id": "ddd28569-acf9-45c5-b17c-71ca6355ee9e",
        "metadata": {}
      },
      {
        "path": "data/ollama_api_chat",
        "type": "directory",
        "artifact_id": "98825e58-35fe-4078-bbc6-bcc0b99debf3",
        "metadata": {}
      },
      {
        "path": "data/ollama_chat",
        "type": "directory",
        "artifact_id": "592d77d5-08d5-44f4-bc98-aad9a7efe39e",
        "metadata": {}
      },
      {
        "path": "data/prs.json",
        "type": "file",
        "artifact_id": "845e9b8a-e88e-44ce-88df-d3bbf3d35f57",
        "metadata": {}
      },
      {
        "path": "data/references.json",
        "type": "file",
        "artifact_id": "2d11e620-599e-4583-98dc-70334643ceec",
        "metadata": {}
      },
      {
        "path": "data/sessions",
        "type": "directory",
        "artifact_id": "080c7d2d-8ee0-415c-82f3-227459eb3d5c",
        "metadata": {}
      },
      {
        "path": "data/sessions/README.md",
        "type": "file",
        "artifact_id": "75fbaac7-8297-4006-9c98-3bfc7ba970cd",
        "metadata": {}
      },
      {
        "path": "data/sessions/ai_sessions.json",
        "type": "file",
        "artifact_id": "845f9c31-8e75-47bd-a72f-73bc9ced2c12",
        "metadata": {}
      },
      {
        "path": "data/sessions/current_session.json",
        "type": "file",
        "artifact_id": "2c4c47a0-0630-4e5f-b213-950827d1dcfb",
        "metadata": {}
      },
      {
        "path": "data/sessions/epic_tg_bot_enhancement.json",
        "type": "file",
        "artifact_id": "d9eaa2de-a4bd-46c1-824f-60a68035a4b4",
        "metadata": {}
      },
      {
        "path": "data/sessions/epics_roadmap.json",
        "type": "file",
        "artifact_id": "9861b86b-e9e4-44cb-b893-0a9f7d48a8ac",
        "metadata": {}
      },
      {
        "path": "data/sessions/worklog.json",
        "type": "file",
        "artifact_id": "8ccae2ba-ad1a-4ff9-9b33-23f019ddd344",
        "metadata": {}
      },
      {
        "path": "data/tasks.json",
        "type": "file",
        "artifact_id": "6f29bcfc-e8f1-4a59-9809-b4cadf3f0419",
        "metadata": {}
      },
      {
        "path": "data/telegram",
        "type": "directory",
        "artifact_id": "961fb1dd-fa89-4cd3-a724-02135f78ef2d",
        "metadata": {}
      },
      {
        "path": "data/telegram/bot_responses.json",
        "type": "file",
        "artifact_id": "963a1e8d-f07b-4528-958c-a29d55377aae",
        "metadata": {}
      },
      {
        "path": "data/telegram/cursor_commands.json",
        "type": "file",
        "artifact_id": "915f498a-9b29-41af-baeb-386296c290f5",
        "metadata": {}
      },
      {
        "path": "data/telegram/master_status.json",
        "type": "file",
        "artifact_id": "bf9ec50a-4980-48c8-8bc0-8161c8fad77f",
        "metadata": {}
      },
      {
        "path": "data/telegram/user_messages.json",
        "type": "file",
        "artifact_id": "4fa15896-a8a3-4a3f-be91-8570a16615b8",
        "metadata": {}
      },
      {
        "path": "data/user_memory.json",
        "type": "file",
        "artifact_id": "b2254908-79a0-42b1-85e1-6e4add5892a1",
        "metadata": {}
      },
      {
        "path": "data/vision.json",
        "type": "file",
        "artifact_id": "f4605670-fdbe-46f1-b198-2c0eeea1340f",
        "metadata": {}
      },
      {
        "path": "data/weights.json",
        "type": "file",
        "artifact_id": "c81fab90-1950-4126-b6a4-3c009a840eca",
        "metadata": {}
      },
      {
        "path": "data/workflow_events.json",
        "type": "file",
        "artifact_id": "6303d07a-a58c-4a30-a1a2-8b8093fcc453",
        "metadata": {}
      },
      {
        "path": "data/workspace",
        "type": "directory",
        "artifact_id": "257834e1-90c1-4e3c-99d1-a270a409987f",
        "metadata": {}
      },
      {
        "path": "data/workspace/git_workflow_config.json",
        "type": "file",
        "artifact_id": "b2fa0061-fcbc-4a15-99da-666eec00101d",
        "metadata": {}
      },
      {
        "path": "data/workspace/workspace_state.json",
        "type": "file",
        "artifact_id": "2a918e26-cf6e-42f9-bf6a-49429475c4fb",
        "metadata": {}
      },
      {
        "path": "docker",
        "type": "directory",
        "artifact_id": "8e534952-152f-4f0b-b5f5-0f807b4ac6df",
        "metadata": {}
      },
      {
        "path": "docker/parser_go",
        "type": "directory",
        "artifact_id": "51151820-2b65-4e7c-b5b2-7b89b48edf32",
        "metadata": {}
      },
      {
        "path": "docs",
        "type": "directory",
        "artifact_id": "b3098ec5-b634-4347-a010-f62ec50bb660",
        "metadata": {}
      },
      {
        "path": "docs/AI_DOGFOODING_FINAL_PLAN.md",
        "type": "file",
        "artifact_id": "83c82316-b361-436c-a5ad-c43470f85297",
        "metadata": {}
      },
      {
        "path": "docs/AI_DOGFOODING_IMPLEMENTATION_PLAN.md",
        "type": "file",
        "artifact_id": "643e006a-ec58-4388-8090-38693d0a38f7",
        "metadata": {}
      },
      {
        "path": "docs/AI_DOGFOODING_PLANNING_MEMO.md",
        "type": "file",
        "artifact_id": "b1506a50-8fb4-4500-b265-dc61f71311a1",
        "metadata": {}
      },
      {
        "path": "docs/AI_INTEGRATION_REALITY_CHECK.md",
        "type": "file",
        "artifact_id": "4820f4e3-475e-4602-a2e5-47689ab02645",
        "metadata": {}
      },
      {
        "path": "docs/AI_SESSION_MOBILE_CONTROL.md",
        "type": "file",
        "artifact_id": "731f0668-f10c-4925-94cf-341ad2fefe0c",
        "metadata": {}
      },
      {
        "path": "docs/COMPREHENSIVE_ANALYSIS.md",
        "type": "file",
        "artifact_id": "e9ad0bb0-740e-4529-9080-109814889aa5",
        "metadata": {}
      },
      {
        "path": "docs/COMPREHENSIVE_INDEX.json",
        "type": "file",
        "artifact_id": "90062378-a75f-4e40-9123-8a38e433edb3",
        "metadata": {}
      },
      {
        "path": "docs/CONTEXT_TAGS_SYSTEM.md",
        "type": "file",
        "artifact_id": "c4a72fce-e28d-4e4a-83de-221480d472f2",
        "metadata": {}
      },
      {
        "path": "docs/CONTINUE_INTEGRATION.md",
        "type": "file",
        "artifact_id": "8afac5f2-5406-4e73-91ed-e51ff139f5d8",
        "metadata": {}
      },
      {
        "path": "docs/CONTRIBUTING.md",
        "type": "file",
        "artifact_id": "14303d2a-50d9-484f-b77d-89ad67bf6cef",
        "metadata": {}
      },
      {
        "path": "docs/COPILOT_INTEGRATION_CLARIFICATION_QUESTIONS.md",
        "type": "file",
        "artifact_id": "9b6e39e6-425b-4c31-b4ac-76fb8d66c7d0",
        "metadata": {}
      },
      {
        "path": "docs/COPILOT_INTEGRATION_RESEARCH_NOTES.md",
        "type": "file",
        "artifact_id": "49a081fe-29c0-4495-888b-120ba1401772",
        "metadata": {}
      },
      {
        "path": "docs/CURSOR_AI_INTEGRATION.md",
        "type": "file",
        "artifact_id": "93d7e404-8d8a-43bc-98c2-ebe2a4dfada5",
        "metadata": {}
      },
      {
        "path": "docs/CURSOR_ECOSYSTEM_TECHNICAL_ASSESSMENT.md",
        "type": "file",
        "artifact_id": "c3f3f366-1851-4b8c-a558-a14e311e09ab",
        "metadata": {}
      },
      {
        "path": "docs/GITHUB_ROLLOUT_STRATEGY.md",
        "type": "file",
        "artifact_id": "376bc5fa-c485-4e01-b9a0-300ecfb078ff",
        "metadata": {}
      },
      {
        "path": "docs/GITHUB_TOKEN_SETUP.md",
        "type": "file",
        "artifact_id": "68e2d742-09ab-44bf-93b0-f8cb23c3a835",
        "metadata": {}
      },
      {
        "path": "docs/HIDDEN_GEMS_ANALYSIS.md",
        "type": "file",
        "artifact_id": "bcda9953-bc3e-4e26-8ac5-b334f079f402",
        "metadata": {}
      },
      {
        "path": "docs/INTEGRATION_AND_WORKFLOW_CLARIFICATIONS.md",
        "type": "file",
        "artifact_id": "1ed5ec91-07fa-47f6-bfd1-6c2a2cb6579f",
        "metadata": {}
      },
      {
        "path": "docs/JSON_OPTIMIZATION_CLARIFICATIONS.md",
        "type": "file",
        "artifact_id": "edf6dd77-0757-4083-b04b-b5256126269e",
        "metadata": {}
      },
      {
        "path": "docs/JSON_OPTIMIZATION_FINAL_PLAN.md",
        "type": "file",
        "artifact_id": "eaf5cd89-d2b5-4de0-b71b-c12355356b22",
        "metadata": {}
      },
      {
        "path": "docs/JSON_SYSTEM_OPTIMIZATION_RESEARCH.md",
        "type": "file",
        "artifact_id": "ba4acdf3-5f6d-491b-b4e0-c1b2a0106f90",
        "metadata": {}
      },
      {
        "path": "docs/LLM_instructions_api.md",
        "type": "file",
        "artifact_id": "3ba350e2-eccd-40d4-bfe5-1165a8d62365",
        "metadata": {}
      },
      {
        "path": "docs/MISSING_INNOVATIONS_SUMMARY.md",
        "type": "file",
        "artifact_id": "fde09d90-90de-48da-a5c2-7c0a16fe7509",
        "metadata": {}
      },
      {
        "path": "docs/PRIORITY_DASHBOARD.md",
        "type": "file",
        "artifact_id": "007e3b30-31d6-42da-9298-786ee79eb9aa",
        "metadata": {}
      },
      {
        "path": "docs/QUICK_START_GUIDE.md",
        "type": "file",
        "artifact_id": "745d2984-d99c-47a5-9ccf-5b2e284c5cba",
        "metadata": {}
      },
      {
        "path": "docs/SECURITY.md",
        "type": "file",
        "artifact_id": "30ca7796-0a96-46ca-8837-f81e00bfbb98",
        "metadata": {}
      },
      {
        "path": "docs/STRATEGIC_ROADMAP_2025.md",
        "type": "file",
        "artifact_id": "4c42005b-a3df-4d5c-9f7e-ba513b2c57d2",
        "metadata": {}
      },
      {
        "path": "docs/TASKS_AND_IDEAS_REASSESSMENT.md",
        "type": "file",
        "artifact_id": "e516f02b-a0fe-4a59-9a7e-3698308345e8",
        "metadata": {}
      },
      {
        "path": "docs/TASKS_INDEX.json",
        "type": "file",
        "artifact_id": "f404c6fa-3ba2-4228-bd03-e37e10b6e9bd",
        "metadata": {}
      },
      {
        "path": "docs/TASKS_SUMMARY.md",
        "type": "file",
        "artifact_id": "535a461e-c5fb-4dbf-9681-41290e03e404",
        "metadata": {}
      },
      {
        "path": "docs/TASK_IDEA_CONSOLIDATION_WORK_NOTE.md",
        "type": "file",
        "artifact_id": "fcea8775-1cb2-4b02-9422-ff8bac9564bf",
        "metadata": {}
      },
      {
        "path": "docs/TASK_MANAGEMENT_SYSTEM.md",
        "type": "file",
        "artifact_id": "8a7c7f64-d91f-4069-89ad-92f7401b984c",
        "metadata": {}
      },
      {
        "path": "docs/TPOT_DEPLOYMENT_WORK_PLAN.md",
        "type": "file",
        "artifact_id": "00f7ad65-73ca-455d-bdeb-c584a3b55dba",
        "metadata": {}
      },
      {
        "path": "docs/WORKFLOW_METRICS_INTEGRATION.md",
        "type": "file",
        "artifact_id": "29c26576-fd5b-4367-ad99-b4c601863175",
        "metadata": {}
      },
      {
        "path": "docs/ai",
        "type": "directory",
        "artifact_id": "cf1ed553-2270-4f18-9423-c149b6ce2b7a",
        "metadata": {}
      },
      {
        "path": "docs/ai-constraints-implementation-report.md",
        "type": "file",
        "artifact_id": "9daa57dc-75c1-4b7e-b7c4-ccbbbd73bc2f",
        "metadata": {}
      },
      {
        "path": "docs/ai-session-monitor",
        "type": "directory",
        "artifact_id": "0c51daef-b3b0-40da-963f-8e955caceeee",
        "metadata": {}
      },
      {
        "path": "docs/ai-session-monitor/README.md",
        "type": "file",
        "artifact_id": "fdd37fec-8fd4-4450-acc9-07e177f064f9",
        "metadata": {}
      },
      {
        "path": "docs/ai/README.md",
        "type": "file",
        "artifact_id": "687b8039-61e0-45ea-9913-bb94271a901b",
        "metadata": {}
      },
      {
        "path": "docs/ai/system_overview.md",
        "type": "file",
        "artifact_id": "491606cd-45c5-478c-8bbf-a4d3f06f65c4",
        "metadata": {}
      },
      {
        "path": "docs/ai/workflow_guide.md",
        "type": "file",
        "artifact_id": "69d80fc2-385e-4b19-a63a-d462b8442b50",
        "metadata": {}
      },
      {
        "path": "docs/best_practices.md",
        "type": "file",
        "artifact_id": "f7e21985-5e86-43d2-b88b-432e56f15f8d",
        "metadata": {}
      },
      {
        "path": "docs/cache.py",
        "type": "file",
        "artifact_id": "3ef11adf-1d44-43f2-bbc3-a46da0532c24",
        "metadata": {}
      },
      {
        "path": "docs/cli.md",
        "type": "file",
        "artifact_id": "008b69d9-08c5-44eb-8c98-e8e42fcd7a12",
        "metadata": {}
      },
      {
        "path": "docs/cli.py",
        "type": "file",
        "artifact_id": "14228655-1179-44f1-980f-9c2c028ad765",
        "metadata": {}
      },
      {
        "path": "docs/cli_modular_architecture.md",
        "type": "file",
        "artifact_id": "60ff4325-ce68-4ce9-8de3-71640f617f6d",
        "metadata": {}
      },
      {
        "path": "docs/context_orchestration_architecture.md",
        "type": "file",
        "artifact_id": "3e5bf44d-a1d2-4253-9a6b-3d75b37b0a9a",
        "metadata": {}
      },
      {
        "path": "docs/copilot_integration.md",
        "type": "file",
        "artifact_id": "0f063185-99c1-4192-86d1-10d5ea8bf8a3",
        "metadata": {}
      },
      {
        "path": "docs/examples",
        "type": "directory",
        "artifact_id": "bd28621e-793d-48ce-aa47-55923353cc59",
        "metadata": {}
      },
      {
        "path": "docs/examples/struct.json",
        "type": "file",
        "artifact_id": "c7c9f1e9-1184-4a18-8e28-fe357a7d9253",
        "metadata": {}
      },
      {
        "path": "docs/gh_view.md",
        "type": "file",
        "artifact_id": "1c87d36b-3716-482d-b78c-920f799d4faa",
        "metadata": {}
      },
      {
        "path": "docs/github_projects_export.md",
        "type": "file",
        "artifact_id": "9ab750a4-6aac-45ea-bf32-a486ae3c4ef8",
        "metadata": {}
      },
      {
        "path": "docs/hybrid_log.md",
        "type": "file",
        "artifact_id": "7b0cdcb3-1268-4c9d-8b52-fe7f14dae4fa",
        "metadata": {}
      },
      {
        "path": "docs/ideas_community.md",
        "type": "file",
        "artifact_id": "c63a658e-6ac2-45d1-a89a-55eade05fa26",
        "metadata": {}
      },
      {
        "path": "docs/ideas_strategy.md",
        "type": "file",
        "artifact_id": "dfbf06b9-e5ca-4658-8d7e-76fbbc9d66dc",
        "metadata": {}
      },
      {
        "path": "docs/ideas_technical.md",
        "type": "file",
        "artifact_id": "0a5ed138-9526-4765-a639-5b1caa4d1255",
        "metadata": {}
      },
      {
        "path": "docs/incremental_indexing_plan.md",
        "type": "file",
        "artifact_id": "08936cd7-8fd7-4722-a34c-22f8501d9af6",
        "metadata": {}
      },
      {
        "path": "docs/integration.md",
        "type": "file",
        "artifact_id": "f727ca6e-8db2-4665-a396-d3c78c1ba6f7",
        "metadata": {}
      },
      {
        "path": "docs/interactions_diagram.ru.md",
        "type": "file",
        "artifact_id": "c1404f38-d2e8-474e-a919-c3094af8963a",
        "metadata": {}
      },
      {
        "path": "docs/internal",
        "type": "directory",
        "artifact_id": "f184ddf1-af61-4c18-bd47-230be9e29270",
        "metadata": {}
      },
      {
        "path": "docs/internal/collaborative-decision-workflow.md",
        "type": "file",
        "artifact_id": "fc78c164-2881-4b92-af85-0a0b0584bede",
        "metadata": {}
      },
      {
        "path": "docs/internal/elastic-workflow-concept.md",
        "type": "file",
        "artifact_id": "e7c6b526-4f2e-4cea-8170-fea00d4a9c37",
        "metadata": {}
      },
      {
        "path": "docs/internal/mamay-scenario-onboarding-design.md",
        "type": "file",
        "artifact_id": "5de8deb0-55c0-4418-a872-c9523359ca18",
        "metadata": {}
      },
      {
        "path": "docs/internal/notes",
        "type": "directory",
        "artifact_id": "4b7fc684-f612-4226-81ae-c93ffa621565",
        "metadata": {}
      },
      {
        "path": "docs/internal/notes/session_integration.md",
        "type": "file",
        "artifact_id": "a46722e6-e6c1-456b-a531-5f037de0a997",
        "metadata": {}
      },
      {
        "path": "docs/internal/project-status-summary.md",
        "type": "file",
        "artifact_id": "5651e1ae-4c28-4dc6-8101-f8bc1c69e812",
        "metadata": {}
      },
      {
        "path": "docs/internal/roadmap.md",
        "type": "file",
        "artifact_id": "63b2c3f4-ff79-4441-950d-30993514815a",
        "metadata": {}
      },
      {
        "path": "docs/internal/ru",
        "type": "directory",
        "artifact_id": "83a53a45-efdf-46ca-ac8d-0e1f0f8b2037",
        "metadata": {}
      },
      {
        "path": "docs/internal/ru/roadmap.md",
        "type": "file",
        "artifact_id": "0d800658-752c-46e4-8ccf-fc0bf59daefc",
        "metadata": {}
      },
      {
        "path": "docs/internal/ru/ses-003_critical_analysis.md",
        "type": "file",
        "artifact_id": "9b9cc169-b604-4516-ab26-58c45038b55f",
        "metadata": {}
      },
      {
        "path": "docs/internal/ru/setup.md",
        "type": "file",
        "artifact_id": "c01ed7f9-ffa9-4264-a952-b996b04d40d9",
        "metadata": {}
      },
      {
        "path": "docs/internal/ru/team.md",
        "type": "file",
        "artifact_id": "958bc726-9c6d-4987-a410-9f30c5cc8351",
        "metadata": {}
      },
      {
        "path": "docs/internal/ses-004-implementation-decisions.md",
        "type": "file",
        "artifact_id": "8546d1e2-b6fb-47de-abc6-e19f9a600981",
        "metadata": {}
      },
      {
        "path": "docs/internal/setup.md",
        "type": "file",
        "artifact_id": "8e40ead6-5740-4f27-8f71-b1f3e259c588",
        "metadata": {}
      },
      {
        "path": "docs/internal/team.md",
        "type": "file",
        "artifact_id": "82f5c0ff-1da7-493e-b900-ecc928188d9a",
        "metadata": {}
      },
      {
        "path": "docs/internal/workspace-mode-design-clarifications.md",
        "type": "file",
        "artifact_id": "d8c5e532-41bc-4a53-b1f4-11b2667af8fb",
        "metadata": {}
      },
      {
        "path": "docs/internal/workspace-state-mode-system-design.md",
        "type": "file",
        "artifact_id": "8297c076-3426-481c-a34b-480a9f1fc8ce",
        "metadata": {}
      },
      {
        "path": "docs/json_selector.py",
        "type": "file",
        "artifact_id": "6708f018-3cf8-4490-b001-13f70dedd83e",
        "metadata": {}
      },
      {
        "path": "docs/llmstruct_config.md",
        "type": "file",
        "artifact_id": "b3e0c03a-8193-42b2-a08a-8a7d41e7563f",
        "metadata": {}
      },
      {
        "path": "docs/llmstruct_decision_checklist.md",
        "type": "file",
        "artifact_id": "72fc893d-9ec2-4eac-80b7-ff547a83ded6",
        "metadata": {}
      },
      {
        "path": "docs/llmstruct_format.md",
        "type": "file",
        "artifact_id": "f3d00ef6-8e7a-4aab-81eb-b4da0c940d3e",
        "metadata": {}
      },
      {
        "path": "docs/management",
        "type": "directory",
        "artifact_id": "d46a2c84-3244-47e7-8e55-09117fe6115e",
        "metadata": {}
      },
      {
        "path": "docs/management/README.md",
        "type": "file",
        "artifact_id": "0547ffba-af4b-4305-a7fd-b03057643bfc",
        "metadata": {}
      },
      {
        "path": "docs/manifesto.md",
        "type": "file",
        "artifact_id": "81f4a054-24f6-49cf-be9c-98a767fdb19f",
        "metadata": {}
      },
      {
        "path": "docs/onboarding.md",
        "type": "file",
        "artifact_id": "70862dba-8ba1-46a6-8abf-fe2ac5774a1c",
        "metadata": {}
      },
      {
        "path": "docs/project_structure.md",
        "type": "file",
        "artifact_id": "34cf1563-5248-492b-9200-e88fb4137725",
        "metadata": {}
      },
      {
        "path": "docs/ru",
        "type": "directory",
        "artifact_id": "9518664b-4b33-41da-9f50-29dfc310a643",
        "metadata": {}
      },
      {
        "path": "docs/ru/CONTRIBUTING.md",
        "type": "file",
        "artifact_id": "3506dccd-a91a-4975-a753-d2a3fee0ab76",
        "metadata": {}
      },
      {
        "path": "docs/ru/README.md",
        "type": "file",
        "artifact_id": "c9a82f0c-6dc7-49a8-b3c2-a2357f04a82e",
        "metadata": {}
      },
      {
        "path": "docs/ru/best_practices.md",
        "type": "file",
        "artifact_id": "12ed8960-676e-4255-a6e3-5cc7fa6ca826",
        "metadata": {}
      },
      {
        "path": "docs/ru/examples",
        "type": "directory",
        "artifact_id": "bdd0444e-3ba1-4bba-9830-86e0b3fff261",
        "metadata": {}
      },
      {
        "path": "docs/ru/examples/struct.json",
        "type": "file",
        "artifact_id": "5ae6c8e4-6a8a-4dd8-b1ef-657cc422a8db",
        "metadata": {}
      },
      {
        "path": "docs/ru/ideas_community.md",
        "type": "file",
        "artifact_id": "5af49c65-ac52-4400-8a09-154c0494ee37",
        "metadata": {}
      },
      {
        "path": "docs/ru/ideas_strategy.md",
        "type": "file",
        "artifact_id": "2eab7e34-b80a-43f6-bc99-b235dd90f92d",
        "metadata": {}
      },
      {
        "path": "docs/ru/ideas_technical.md",
        "type": "file",
        "artifact_id": "6f4a86fd-4099-46fb-9f73-f22ddce3db5f",
        "metadata": {}
      },
      {
        "path": "docs/ru/integration.md",
        "type": "file",
        "artifact_id": "68815a80-f300-4d99-9ebc-0f66856295ce",
        "metadata": {}
      },
      {
        "path": "docs/ru/interactions_diagram.ru.md",
        "type": "file",
        "artifact_id": "eae0d257-f628-4989-a9b3-7a356b2c2839",
        "metadata": {}
      },
      {
        "path": "docs/ru/llmstruct_config.md",
        "type": "file",
        "artifact_id": "7bea0554-9d21-46f6-b1e5-241d83de2ea2",
        "metadata": {}
      },
      {
        "path": "docs/ru/llmstruct_format.md",
        "type": "file",
        "artifact_id": "5acbd495-e84b-4ca7-af4f-a9eff4bb18e1",
        "metadata": {}
      },
      {
        "path": "docs/ru/manifesto.md",
        "type": "file",
        "artifact_id": "777e78e2-5b52-47ce-a246-93e686f20a56",
        "metadata": {}
      },
      {
        "path": "docs/ru/onboarding.md",
        "type": "file",
        "artifact_id": "3ff99576-21e1-48f9-824f-f2017719d07c",
        "metadata": {}
      },
      {
        "path": "docs/ru/project_structure.md",
        "type": "file",
        "artifact_id": "475298f1-1be7-408c-9b34-28e87a08132d",
        "metadata": {}
      },
      {
        "path": "docs/self_run.py",
        "type": "file",
        "artifact_id": "87d62da5-c523-425d-b0ae-f11c74c46111",
        "metadata": {}
      },
      {
        "path": "docs/struct_security.md",
        "type": "file",
        "artifact_id": "8b36db4c-1715-4067-8b23-a6015c8b587a",
        "metadata": {}
      },
      {
        "path": "docs/test_self_run.py",
        "type": "file",
        "artifact_id": "f27a3ddd-f498-4d69-b3e8-f899ce9a87d4",
        "metadata": {}
      },
      {
        "path": "epics",
        "type": "directory",
        "artifact_id": "e04e8ca7-2a46-4d45-9549-76c8c7f0e5a0",
        "metadata": {}
      },
      {
        "path": "epics/EPIC-1-AI-BRANCH-SAFETY-SYSTEM.md",
        "type": "file",
        "artifact_id": "4111e6d8-8fa5-4bbe-98cb-3dcb9e91597c",
        "metadata": {}
      },
      {
        "path": "epics/EPIC-2-AI-SESSION-MANAGEMENT.md",
        "type": "file",
        "artifact_id": "a88846b2-d0d9-4187-b350-dc8e820e4f48",
        "metadata": {}
      },
      {
        "path": "epics/EPIC-3-ENHANCED-DOGFOOD-COMMAND.md",
        "type": "file",
        "artifact_id": "ccff8d12-1a33-4a8f-a652-58094ff002ee",
        "metadata": {}
      },
      {
        "path": "epics/EPIC-4-RISK-BASED-DEVELOPMENT-WORKFLOW.md",
        "type": "file",
        "artifact_id": "4a3a8e27-019c-48fc-abed-6d388907280b",
        "metadata": {}
      },
      {
        "path": "epics/README.md",
        "type": "file",
        "artifact_id": "db712070-ea33-45fb-abed-06956bff8c4f",
        "metadata": {}
      },
      {
        "path": "epics/epics_data.json",
        "type": "file",
        "artifact_id": "5715279b-121f-4430-9d7c-6769a3fe0901",
        "metadata": {}
      },
      {
        "path": "examples",
        "type": "directory",
        "artifact_id": "71f29b8b-e33f-4b61-ba78-4bb074947703",
        "metadata": {}
      },
      {
        "path": "examples/python_project_main.py",
        "type": "file",
        "artifact_id": "bf14268a-109b-4e66-9b16-d5f4c271f9a1",
        "metadata": {}
      },
      {
        "path": "examples/python_project_utils.py",
        "type": "file",
        "artifact_id": "a334ad26-3e82-4f15-ba74-542b83859870",
        "metadata": {}
      },
      {
        "path": "examples/telegram_bot",
        "type": "directory",
        "artifact_id": "55a7946f-b548-4c3d-a230-aed83d05d991",
        "metadata": {}
      },
      {
        "path": "examples/telegram_bot/test_bot.py",
        "type": "file",
        "artifact_id": "369040cb-4283-4d56-813d-0fe10e29a16e",
        "metadata": {}
      },
      {
        "path": "grok.py",
        "type": "file",
        "artifact_id": "98d3d7d3-cb84-4634-835e-90dc2c0bb901",
        "metadata": {}
      },
      {
        "path": "install_ai_integration.py",
        "type": "file",
        "artifact_id": "3ae6e83f-9ef7-48d9-85a2-6bee2c0f7d6f",
        "metadata": {}
      },
      {
        "path": "integrations",
        "type": "directory",
        "artifact_id": "7681f57a-4b2e-4e57-89fd-4d1c75cf67ce",
        "metadata": {}
      },
      {
        "path": "integrations/continue",
        "type": "directory",
        "artifact_id": "a60f06ff-99b0-41c2-b0e3-a2db36d09390",
        "metadata": {}
      },
      {
        "path": "integrations/continue/README.md",
        "type": "file",
        "artifact_id": "86d4b7b2-6e41-4616-b8a7-6fd8d851cb5a",
        "metadata": {}
      },
      {
        "path": "integrations/telegram_bot",
        "type": "directory",
        "artifact_id": "bee00a5d-a53f-4eb2-b45d-2969b1c1e3b4",
        "metadata": {}
      },
      {
        "path": "integrations/telegram_bot/mp002_progress_bot.py",
        "type": "file",
        "artifact_id": "8694db03-1269-4e62-bff6-c84e54e54dbf",
        "metadata": {}
      },
      {
        "path": "integrations/telegram_bot/simple_bot.py",
        "type": "file",
        "artifact_id": "2fe1d21a-ce97-4d60-a4b8-cceee21467cb",
        "metadata": {}
      },
      {
        "path": "integrations/telegram_bot/test_bot.py",
        "type": "file",
        "artifact_id": "87ada84f-f1cc-4c0c-90e6-ee84e28d3cf7",
        "metadata": {}
      },
      {
        "path": "quick_ws_test.py",
        "type": "file",
        "artifact_id": "c899f844-8668-4735-ab93-3dd29393162f",
        "metadata": {}
      },
      {
        "path": "run_ai_diagnostics.py",
        "type": "file",
        "artifact_id": "0357b94a-b490-4fa9-8798-409f2f542e7e",
        "metadata": {}
      },
      {
        "path": "schema",
        "type": "directory",
        "artifact_id": "92850499-1f94-48b7-9a07-c696922b6d5e",
        "metadata": {}
      },
      {
        "path": "schema/artifacts_simplified.json",
        "type": "file",
        "artifact_id": "f81c02d0-fc3a-4df7-ba87-c2d7e41ce1cb",
        "metadata": {}
      },
      {
        "path": "schema/cli_queue.json",
        "type": "file",
        "artifact_id": "169dcdd6-9ec1-4d17-b506-c87cd10669f7",
        "metadata": {}
      },
      {
        "path": "schema/cli_simplified.json",
        "type": "file",
        "artifact_id": "973e25cf-7c29-423c-896f-31dd66da5b34",
        "metadata": {}
      },
      {
        "path": "schema/common",
        "type": "directory",
        "artifact_id": "9c8c7518-102c-41c4-a79b-4f8f75f205ca",
        "metadata": {}
      },
      {
        "path": "schema/common/definitions.json",
        "type": "file",
        "artifact_id": "146200c9-555f-423d-a872-8213c95b47b3",
        "metadata": {}
      },
      {
        "path": "schema/core.json",
        "type": "file",
        "artifact_id": "38165c00-da28-4075-8f7e-ea90ba006327",
        "metadata": {}
      },
      {
        "path": "schema/core_simplified.json",
        "type": "file",
        "artifact_id": "61d9edb5-2beb-4a13-b34b-e86d27820684",
        "metadata": {}
      },
      {
        "path": "schema/insights_simplified.json",
        "type": "file",
        "artifact_id": "2f9ae784-0393-428c-bd0d-4dd20bc540ba",
        "metadata": {}
      },
      {
        "path": "schema/llmstruct_schema.json",
        "type": "file",
        "artifact_id": "426f21cc-00df-4ee3-91a0-75b4733f3849",
        "metadata": {}
      },
      {
        "path": "schema/llmstruct_schema_simplified.json",
        "type": "file",
        "artifact_id": "d4774ef3-39d7-4a08-aa27-e67822fd4aeb",
        "metadata": {}
      },
      {
        "path": "schema/plugins",
        "type": "directory",
        "artifact_id": "7de33754-6db3-4c24-997e-8af980f361d0",
        "metadata": {}
      },
      {
        "path": "schema/plugins/artifacts.json",
        "type": "file",
        "artifact_id": "0c17e2cc-8771-4aff-90b1-e79da12fbd3a",
        "metadata": {}
      },
      {
        "path": "schema/plugins/cli.json",
        "type": "file",
        "artifact_id": "43e59be0-be8b-499c-b7c7-8510fd24d5eb",
        "metadata": {}
      },
      {
        "path": "schema/plugins/data_sorter.json",
        "type": "file",
        "artifact_id": "bfb50a1e-c2f3-41f6-9644-b426d6d2ae38",
        "metadata": {}
      },
      {
        "path": "schema/plugins/insights.json",
        "type": "file",
        "artifact_id": "55085ccc-1739-4632-a5ab-1621a4489ae5",
        "metadata": {}
      },
      {
        "path": "src",
        "type": "directory",
        "artifact_id": "5cc7f314-4a8d-40be-b42b-8ea0459fd914",
        "metadata": {}
      },
      {
        "path": "src/llmstruct",
        "type": "directory",
        "artifact_id": "7079cb7a-147d-4fc9-a4a9-311fb4804395",
        "metadata": {}
      },
      {
        "path": "src/llmstruct.egg-info",
        "type": "directory",
        "artifact_id": "c686008f-26e9-4fa8-a94b-5d0670dc8498",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/ARCHIVE",
        "type": "directory",
        "artifact_id": "415ac6e6-3634-4648-b3e0-5c14d0146190",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/ARCHIVE/cli_argument_parser.py",
        "type": "file",
        "artifact_id": "341d61b4-86ed-42eb-aa28-a18aa644c853",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/ARCHIVE/cli_commands.py",
        "type": "file",
        "artifact_id": "a64adccd-d933-4fac-89ae-6513b22bbdd6",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/ARCHIVE/cli_config.py",
        "type": "file",
        "artifact_id": "54a683cb-689d-4b80-92a7-1c3309928fb7",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/ARCHIVE/cli_core.py",
        "type": "file",
        "artifact_id": "e189e60a-86b5-4049-9f34-40012dd064cb",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/ARCHIVE/cli_main_commands.py",
        "type": "file",
        "artifact_id": "135ad3b2-b8fc-4f9a-ae44-158ab89daacf",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/ARCHIVE/cli_utils.py",
        "type": "file",
        "artifact_id": "1703e93e-0d85-4e29-907f-6ea34892285f",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/__init__.py",
        "type": "file",
        "artifact_id": "69acf285-fd36-4be4-a752-bb598ecb7878",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/__main__.py",
        "type": "file",
        "artifact_id": "0f3b8339-0117-49d1-950d-93e559a8f1c3",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/ai_cli_integration.py",
        "type": "file",
        "artifact_id": "a801f775-2ab8-4707-b075-06ee60a89b69",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/ai_self_awareness.py",
        "type": "file",
        "artifact_id": "ca887fe4-df19-4ff9-8f29-b8b3e6f10331",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/ai_self_monitor.py",
        "type": "file",
        "artifact_id": "2b63f7d2-cce4-4658-aedb-ecc1f9681358",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/ai_workflow_middleware.py",
        "type": "file",
        "artifact_id": "3e227cc4-0ec6-4c94-9284-2915067877b5",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cache.py",
        "type": "file",
        "artifact_id": "143ba933-abc5-4ea4-ae7d-0396479a22ee",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli.py",
        "type": "file",
        "artifact_id": "1b3a9f51-0033-445d-b6ae-5949d90adcbd",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/context_orchestrator.py",
        "type": "file",
        "artifact_id": "b6eea577-8591-4526-9b38-dd4c6cc94a8a",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/copilot.py",
        "type": "file",
        "artifact_id": "a6e6b5ee-5cc2-4d69-9310-0d10c1ae905a",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cursor_ai_bridge.py",
        "type": "file",
        "artifact_id": "8e77593a-8b81-428a-bfcf-427eb00868c8",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cursor_integration.py",
        "type": "file",
        "artifact_id": "c7bb9551-d0e3-49c9-b092-d89e6af05d57",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators",
        "type": "directory",
        "artifact_id": "7d13577a-4d00-45ca-944b-1124faef386f",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators/__init__.py",
        "type": "file",
        "artifact_id": "1f415816-79eb-4ba0-82f9-2ab400fcd0de",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators/go_json_generator.py",
        "type": "file",
        "artifact_id": "534f3117-0709-469c-b655-e74d9037f2a2",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators/json_generator.py",
        "type": "file",
        "artifact_id": "1ad810ee-dfa0-4126-a9d3-475efe6260c4",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/gh_view.py",
        "type": "file",
        "artifact_id": "2fa3d2a8-4166-42cc-b414-bdd14ef325ba",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/grok.py",
        "type": "file",
        "artifact_id": "0102e0b1-7d21-428f-9a5d-a58da99d1d5e",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/json_selector.py",
        "type": "file",
        "artifact_id": "13b8dd15-21c1-4243-a0ee-e94deb32a92b",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/llm_client.py",
        "type": "file",
        "artifact_id": "7a065ab7-5413-4861-8bc3-aae858d3f104",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/metrics_tracker.py",
        "type": "file",
        "artifact_id": "67a3e987-7379-449f-8298-245c2ec4b653",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/modules",
        "type": "directory",
        "artifact_id": "68e85919-6344-4948-8eb4-b007168892e3",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/modules/commands",
        "type": "directory",
        "artifact_id": "dfbf621d-cd4e-4bb9-8308-18d55c9e4421",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/modules/commands/__init__.py",
        "type": "file",
        "artifact_id": "30bcbab8-1971-49f1-b8bf-735cb9eeb1cd",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/modules/commands/metrics.py",
        "type": "file",
        "artifact_id": "d9835df0-66f8-4028-a7c7-6fabcc08f46b",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/modules/commands/queue.py",
        "type": "file",
        "artifact_id": "8d3825b1-a34c-40db-ac5d-d98ec2ec4a38",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/modules/commands/services.py",
        "type": "file",
        "artifact_id": "6018dd09-61f2-4509-8603-721e54b62bc3",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers",
        "type": "directory",
        "artifact_id": "36e1e919-5c74-4180-97d7-f5e5b4b10c3c",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/__init__.py",
        "type": "file",
        "artifact_id": "24896668-f9c7-459e-974f-e36e653bed8f",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/go_analyzer.py",
        "type": "file",
        "artifact_id": "1a7e9a2f-bcc7-4847-b763-475753d7291f",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/javascript_parser.py",
        "type": "file",
        "artifact_id": "5887b5b3-3e8f-4908-9788-9abc180c14f2",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/python_parser.py",
        "type": "file",
        "artifact_id": "6401b8e7-26b9-4ded-b565-c1ebd4caa260",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/universal_converter.py",
        "type": "file",
        "artifact_id": "7ed0f4ab-b287-4990-994c-513c5383fc0d",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/self_run.py",
        "type": "file",
        "artifact_id": "fb863e45-ae89-4a1f-9f92-3d22a9dc5083",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/templates",
        "type": "directory",
        "artifact_id": "18b12969-8f02-4f9d-b331-0ec4f45a1eab",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/templates/__init__.py",
        "type": "file",
        "artifact_id": "268b7bd1-9591-4048-a1af-f32b0f0f49af",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/transpiler.py",
        "type": "file",
        "artifact_id": "3f53734d-f431-4ac7-ba56-fd5ee0c1c7cc",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/validators",
        "type": "directory",
        "artifact_id": "17695bdc-6732-4640-8698-0d0fe82075b0",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/validators/__init__.py",
        "type": "file",
        "artifact_id": "1191f1ac-75dd-45f9-a5e2-8d0dd94c8ea8",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/validators/json_validator.py",
        "type": "file",
        "artifact_id": "0c42e405-adfd-4da7-b7d4-b51b78d72cd4",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/workflow_orchestrator.py",
        "type": "file",
        "artifact_id": "54b1f3be-2626-4222-9309-4e078d7e4c07",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/workspace.py",
        "type": "file",
        "artifact_id": "4939a4dc-464c-42fa-b437-01b34403e656",
        "metadata": {}
      },
      {
        "path": "src/scripts",
        "type": "directory",
        "artifact_id": "58b791d1-48a7-4800-ba54-421d75ec6870",
        "metadata": {}
      },
      {
        "path": "src/scripts/auto_update_struct.py",
        "type": "file",
        "artifact_id": "58aa14dc-3d0a-4151-ab70-35662293a16f",
        "metadata": {}
      },
      {
        "path": "src/scripts/collector.py",
        "type": "file",
        "artifact_id": "9682df85-a366-4690-bd29-2ee12da74628",
        "metadata": {}
      },
      {
        "path": "src/scripts/create_comprehensive_index.py",
        "type": "file",
        "artifact_id": "1ec40931-3659-4b74-b24b-f01759dcb099",
        "metadata": {}
      },
      {
        "path": "src/scripts/create_github_issues.py",
        "type": "file",
        "artifact_id": "d589d044-6075-4e9c-b9fa-a4fcf3d08bf3",
        "metadata": {}
      },
      {
        "path": "src/scripts/create_tasks_index.py",
        "type": "file",
        "artifact_id": "2052ef35-cc4e-446b-9ad2-88f9fe2ec3ee",
        "metadata": {}
      },
      {
        "path": "src/scripts/deploy_embedded_files.py",
        "type": "file",
        "artifact_id": "11d4199d-42f8-4420-a69c-f9db52b5044c",
        "metadata": {}
      },
      {
        "path": "src/scripts/epic_roadmap_manager.py",
        "type": "file",
        "artifact_id": "7b220cb8-a730-4d60-bfa1-4a7850f8fbb5",
        "metadata": {}
      },
      {
        "path": "src/scripts/export_to_github_projects.py",
        "type": "file",
        "artifact_id": "79907891-54e7-487b-aed7-600c3bf82c2e",
        "metadata": {}
      },
      {
        "path": "src/scripts/fix_github_script.py",
        "type": "file",
        "artifact_id": "ba456a65-d6b8-4df7-ba4b-1ce026db5ce2",
        "metadata": {}
      },
      {
        "path": "src/scripts/fix_hardcoded_usernames.py",
        "type": "file",
        "artifact_id": "20edb4a2-b385-4ac0-a790-29ad70debe03",
        "metadata": {}
      },
      {
        "path": "src/scripts/github_sync_manager.py",
        "type": "file",
        "artifact_id": "fe086598-fdf1-43d2-88f4-5661c213fa18",
        "metadata": {}
      },
      {
        "path": "src/scripts/github_sync_manager_enhanced.py",
        "type": "file",
        "artifact_id": "36e0f3e0-e497-4ccc-82ee-4b81aafc3cd0",
        "metadata": {}
      },
      {
        "path": "src/scripts/old",
        "type": "directory",
        "artifact_id": "2cb99404-4a03-4497-a211-ead0fd0a2e7d",
        "metadata": {}
      },
      {
        "path": "src/scripts/process_926_items.py",
        "type": "file",
        "artifact_id": "ac23e584-3d67-4b0e-9734-a6dbe97f5a89",
        "metadata": {}
      },
      {
        "path": "src/scripts/session_cli.py",
        "type": "file",
        "artifact_id": "dd9295ea-9703-4ab0-ab51-f3d3ed911b98",
        "metadata": {}
      },
      {
        "path": "src/scripts/team",
        "type": "directory",
        "artifact_id": "cdfa5c40-bc70-4a43-90e6-9fdd4958ddef",
        "metadata": {}
      },
      {
        "path": "src/scripts/team/__init__.py",
        "type": "file",
        "artifact_id": "ca586350-0910-4c39-8467-cd10355777bd",
        "metadata": {}
      },
      {
        "path": "src/scripts/validate_epics.py",
        "type": "file",
        "artifact_id": "e6cddf18-8d2b-49df-bbe2-8c9da5a3395b",
        "metadata": {}
      },
      {
        "path": "src/scripts/validate_json.py",
        "type": "file",
        "artifact_id": "36935ab0-532b-4b94-84a8-6a0df3153430",
        "metadata": {}
      },
      {
        "path": "src/scripts/validate_refs.py",
        "type": "file",
        "artifact_id": "94dfc7ab-ca24-41e7-b53a-294dec6efe53",
        "metadata": {}
      },
      {
        "path": "src/scripts/validate_schemas.py",
        "type": "file",
        "artifact_id": "ecf26462-0a1a-49da-85c9-c40b0ced00c3",
        "metadata": {}
      },
      {
        "path": "start_development.py",
        "type": "file",
        "artifact_id": "9b63b000-7e91-4b64-a1be-9c4a5cb07e9d",
        "metadata": {}
      },
      {
        "path": "struct.json",
        "type": "file",
        "artifact_id": "5fbee2e8-70b1-4d23-9e74-b6f5e5cac559",
        "metadata": {}
      },
      {
        "path": "struct_cache_manager.py",
        "type": "file",
        "artifact_id": "fea1dbfa-56fd-4baa-9114-ed78ce326d8b",
        "metadata": {}
      },
      {
        "path": "temp",
        "type": "directory",
        "artifact_id": "53f6ea87-518c-4af2-8201-ce24dfc16352",
        "metadata": {}
      },
      {
        "path": "temp/discussion_notes.md",
        "type": "file",
        "artifact_id": "39166d6b-2658-4b04-b57b-86e9b20e36ba",
        "metadata": {}
      },
      {
        "path": "temp/pause_recovery.md",
        "type": "file",
        "artifact_id": "ec9e462b-74f9-4c7c-bf47-1e3f157a742f",
        "metadata": {}
      },
      {
        "path": "temp/restore_ai_context.md",
        "type": "file",
        "artifact_id": "660321a3-a925-4a1c-867d-b1c2085fd19b",
        "metadata": {}
      },
      {
        "path": "temp/update-singbox",
        "type": "directory",
        "artifact_id": "bbbd19e9-d3e8-49be-bd05-25b7b9cf709c",
        "metadata": {}
      },
      {
        "path": "tests",
        "type": "directory",
        "artifact_id": "c511f428-d3c3-4622-a0d7-421ef9216687",
        "metadata": {}
      },
      {
        "path": "tests/__init__.py",
        "type": "file",
        "artifact_id": "8f3565d2-8f0b-4ddd-8e1f-0b5be2aad886",
        "metadata": {}
      },
      {
        "path": "tests/test_self_run.py",
        "type": "file",
        "artifact_id": "14b189d8-9a8c-4cc3-9515-a7d11805f7f4",
        "metadata": {}
      },
      {
        "path": "validate_schemas.py",
        "type": "file",
        "artifact_id": "65f4a724-05f1-4b2e-9011-d0b94fb70d21",
        "metadata": {}
      },
      {
        "path": "validate_sessions.py",
        "type": "file",
        "artifact_id": "a8e0af8d-0d9f-45dd-a5b0-b6fc270bc6ef",
        "metadata": {}
      },
      {
        "path": "verify_llm_response.py",
        "type": "file",
        "artifact_id": "afff0ae8-7e0f-4e3f-a023-92f37dbca9e4",
        "metadata": {}
      },
      {
        "path": "workspace_state.json",
        "type": "file",
        "artifact_id": "7e40dadb-190d-4f51-bb61-b1aa61ecf572",
        "metadata": {}
      }
    ]
  },
  "toc": [
    {
      "module_id": "validate_sessions",
      "path": "validate_sessions.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "Session Schema Validation Script for llmstruct",
      "artifact_id": "6594588c-b49a-44a4-b23d-6f4ea927681c"
    },
    {
      "module_id": "auto_init_ai_system",
      "path": "auto_init_ai_system.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "\ud83d\ude80 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043f\u0440\u0438 \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0432 Cursor",
      "artifact_id": "9122ec3d-96a7-43dd-92f1-4c4ee38ff4b5"
    },
    {
      "module_id": "collect_json",
      "path": "collect_json.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "c169beaf-1339-4a4b-a682-819fef46de29"
    },
    {
      "module_id": "validate_schemas",
      "path": "validate_schemas.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "JSON Schema Validation Script for llmstruct",
      "artifact_id": "d981b138-170c-4f77-ae66-716d1ba8c93c"
    },
    {
      "module_id": "install_ai_integration",
      "path": "install_ai_integration.py",
      "category": "core",
      "functions": 5,
      "classes": 0,
      "summary": "\ud83d\ude80 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f Cursor",
      "artifact_id": "d3dc35d3-06f7-4e6e-98b0-63a336278da0"
    },
    {
      "module_id": "run_ai_diagnostics",
      "path": "run_ai_diagnostics.py",
      "category": "core",
      "functions": 19,
      "classes": 0,
      "summary": "Comprehensive AI Self-Awareness Diagnostics Runner",
      "artifact_id": "11c71c31-5300-4dbb-a61d-ca1b478200f7"
    },
    {
      "module_id": "start_development",
      "path": "start_development.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "LLMStruct Development Startup Script",
      "artifact_id": "1f6e69f0-8203-42a3-bd59-15083ec2b1e0"
    },
    {
      "module_id": "quick_ws_test",
      "path": "quick_ws_test.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Quick WebSocket Test Script",
      "artifact_id": "5dba3504-ab29-491f-9bf5-0d69bc1db5f9"
    },
    {
      "module_id": "verify_llm_response",
      "path": "verify_llm_response.py",
      "category": "core",
      "functions": 6,
      "classes": 0,
      "summary": "",
      "artifact_id": "669a891d-89a9-419c-ad13-49f3f4d582f5"
    },
    {
      "module_id": "struct_cache_manager",
      "path": "struct_cache_manager.py",
      "category": "core",
      "functions": 12,
      "classes": 1,
      "summary": "\ud83d\ude80 Smart struct.json Cache Manager for [code] Mode",
      "artifact_id": "cf91a13a-fd55-4d7a-b997-909317b7d1ec"
    },
    {
      "module_id": "grok",
      "path": "grok.py",
      "category": "core",
      "functions": 4,
      "classes": 1,
      "summary": "",
      "artifact_id": "88ace691-cfc7-4471-aa95-38c01dddb947"
    },
    {
      "module_id": "collector",
      "path": "collector.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "9deac07d-1509-492b-950f-f3b3f4965d69"
    },
    {
      "module_id": ".ARCHIVE.parse_ollama_models",
      "path": ".ARCHIVE/parse_ollama_models.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "\u041f\u0430\u0440\u0441\u0435\u0440 \u0441\u043f\u0438\u0441\u043a\u0430 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 Ollama \u0434\u043b\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430",
      "artifact_id": "52e18ff3-7d5c-463f-ae12-91560ffdbcd1"
    },
    {
      "module_id": ".ARCHIVE.test_cli_demo",
      "path": ".ARCHIVE/test_cli_demo.py",
      "category": "test",
      "functions": 1,
      "classes": 0,
      "summary": "Quick CLI test to demonstrate new commands",
      "artifact_id": "499ee701-a1a2-495b-8770-31c7140b5335"
    },
    {
      "module_id": ".ARCHIVE.parse_ollama_full",
      "path": ".ARCHIVE/parse_ollama_full.py",
      "category": "core",
      "functions": 5,
      "classes": 0,
      "summary": "Full Ollama List Parser + Context Merger for Grok Consultation",
      "artifact_id": "88df0b30-9f05-4c86-aeaa-3876d31595f9"
    },
    {
      "module_id": ".ARCHIVE.force_ai_integration",
      "path": ".ARCHIVE/force_ai_integration.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "Force AI Integration Script",
      "artifact_id": "20814c88-76e4-446b-8389-1228aca71137"
    },
    {
      "module_id": ".ARCHIVE.test_modular_cli",
      "path": ".ARCHIVE/test_modular_cli.py",
      "category": "test",
      "functions": 2,
      "classes": 0,
      "summary": "Test script for modular CLI structure",
      "artifact_id": "e33f37fd-35e3-4f3f-b25a-0375c03e841f"
    },
    {
      "module_id": ".ARCHIVE.test_websocket",
      "path": ".ARCHIVE/test_websocket.py",
      "category": "test",
      "functions": 4,
      "classes": 1,
      "summary": "WebSocket Chat Client",
      "artifact_id": "a923ab9a-7ecb-40da-b239-c11719f37103"
    },
    {
      "module_id": ".ARCHIVE.final_system_check",
      "path": ".ARCHIVE/final_system_check.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Final System Status Check - LLMStruct Modular CLI Integration",
      "artifact_id": "7c2ea6d6-fad5-4de3-9656-113f4a6cf28e"
    },
    {
      "module_id": ".ARCHIVE.telegram_bot_final",
      "path": ".ARCHIVE/telegram_bot_final.py",
      "category": "core",
      "functions": 16,
      "classes": 1,
      "summary": "\ud83c\udfaf \u0424\u0418\u041d\u0410\u041b\u042c\u041d\u0410\u042f \u0432\u0435\u0440\u0441\u0438\u044f Telegram \u0431\u043e\u0442\u0430 \u0434\u043b\u044f LLMStruct",
      "artifact_id": "ecc5ee3f-7ac4-439a-bd80-d07d6f1eaacc"
    },
    {
      "module_id": ".ARCHIVE.parse_ollama_for_grok",
      "path": ".ARCHIVE/parse_ollama_for_grok.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "e3161b75-0f18-46cd-9d6d-5721b725288e"
    },
    {
      "module_id": ".ARCHIVE.final_system_validation",
      "path": ".ARCHIVE/final_system_validation.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Final system validation script for LLMStruct Modular CLI Integration",
      "artifact_id": "3014e990-945c-464e-a5ac-c6dc731f8c87"
    },
    {
      "module_id": ".ARCHIVE.test_ai_cli_debug",
      "path": ".ARCHIVE/test_ai_cli_debug.py",
      "category": "test",
      "functions": 2,
      "classes": 0,
      "summary": "Simple test for AI CLI Integration - Debug Version",
      "artifact_id": "a963ef38-0890-4c4a-b8d4-9a06166b8a31"
    },
    {
      "module_id": ".ARCHIVE.test_audit",
      "path": ".ARCHIVE/test_audit.py",
      "category": "test",
      "functions": 1,
      "classes": 0,
      "summary": "Test script for audit functionality.",
      "artifact_id": "f966ec6f-5ad2-4211-a0e8-40c36718c6f0"
    },
    {
      "module_id": ".ARCHIVE.test_bot_functionality",
      "path": ".ARCHIVE/test_bot_functionality.py",
      "category": "test",
      "functions": 10,
      "classes": 1,
      "summary": "\ud83e\uddea Comprehensive Bot Functionality Test",
      "artifact_id": "fbd2dd9c-0af5-4d95-a7bf-5af8ebe377a0"
    },
    {
      "module_id": ".ARCHIVE.debug_terminal",
      "path": ".ARCHIVE/debug_terminal.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "Debug Terminal Script - Fallback for when terminal output is not visible",
      "artifact_id": "bc5ab58b-5510-44ee-b92f-f4544115437c"
    },
    {
      "module_id": ".ARCHIVE.test_export",
      "path": ".ARCHIVE/test_export.py",
      "category": "test",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "5bca5035-18e9-47af-a8e2-0b049cfd79b5"
    },
    {
      "module_id": ".ARCHIVE.telegram_bot_enhanced",
      "path": ".ARCHIVE/telegram_bot_enhanced.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "fd78a8f6-a98c-414b-8cd6-fa796a0d22c2"
    },
    {
      "module_id": ".ARCHIVE.test_api",
      "path": ".ARCHIVE/test_api.py",
      "category": "test",
      "functions": 0,
      "classes": 0,
      "summary": "Test script for LLMStruct FastAPI",
      "artifact_id": "e4fc1b07-3ddd-4b9f-a364-45ebbaa601af"
    },
    {
      "module_id": ".ARCHIVE.parse_ollama_minimal",
      "path": ".ARCHIVE/parse_ollama_minimal.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "Minimal Ollama Parser - Clean JSON without extra analytics",
      "artifact_id": "2da7032d-a328-443f-896d-b196dcd5bde6"
    },
    {
      "module_id": ".ARCHIVE.chat_bot_final",
      "path": ".ARCHIVE/chat_bot_final.py",
      "category": "core",
      "functions": 18,
      "classes": 1,
      "summary": "LLMStruct Chat Bot Final - \u041f\u043e\u043b\u043d\u0430\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 FastAPI",
      "artifact_id": "68fc8707-0009-469c-92a5-7f0a0e4a1ac0"
    },
    {
      "module_id": ".ARCHIVE.monitor_system",
      "path": ".ARCHIVE/monitor_system.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "System Monitor - Continuous logging for debugging terminal issues",
      "artifact_id": "3a1dbf06-f1c8-4d4e-8756-e138140db996"
    },
    {
      "module_id": ".ARCHIVE.ollama_full_parser",
      "path": ".ARCHIVE/ollama_full_parser.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "1550efa7-d14f-4f82-ad77-a2e07a220867"
    },
    {
      "module_id": ".ARCHIVE.test_enhanced_ai_awareness",
      "path": ".ARCHIVE/test_enhanced_ai_awareness.py",
      "category": "test",
      "functions": 1,
      "classes": 0,
      "summary": "Test script for AI Self-Awareness Enhancement with Unused Function Integration",
      "artifact_id": "d8998ca5-3e5f-4f94-80c7-e559a795b0e2"
    },
    {
      "module_id": ".ARCHIVE.telegram_bot_test",
      "path": ".ARCHIVE/telegram_bot_test.py",
      "category": "core",
      "functions": 15,
      "classes": 1,
      "summary": "\ud83e\uddea \u0422\u0435\u0441\u0442\u043e\u0432\u044b\u0439 Telegram \u0431\u043e\u0442 \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0441 FastAPI",
      "artifact_id": "23d54039-61ab-4a3b-96c1-fd27129b415b"
    },
    {
      "module_id": ".ARCHIVE.parse_ollama_fixed",
      "path": ".ARCHIVE/parse_ollama_fixed.py",
      "category": "core",
      "functions": 6,
      "classes": 0,
      "summary": "Fixed Ollama List Parser + Context Merger for Grok Consultation",
      "artifact_id": "ac67330b-2102-4f1d-9a30-4d9c19066ad5"
    },
    {
      "module_id": ".ARCHIVE.board_cli",
      "path": ".ARCHIVE/board_cli.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "CLI Kanban Board for llmstruct tasks and ideas",
      "artifact_id": "aa94edf0-5fae-4ee3-bd9e-99c11242bbba"
    },
    {
      "module_id": ".ARCHIVE.test_cli_integration",
      "path": ".ARCHIVE/test_cli_integration.py",
      "category": "test",
      "functions": 1,
      "classes": 0,
      "summary": "Test script for CLI integration with new commands",
      "artifact_id": "4e0f2f4a-2eab-45e1-b3fd-da80c123528d"
    },
    {
      "module_id": ".ARCHIVE.parse_ollama_improved",
      "path": ".ARCHIVE/parse_ollama_improved.py",
      "category": "core",
      "functions": 5,
      "classes": 0,
      "summary": "Improved Ollama List Parser + Context Merger for Grok Consultation",
      "artifact_id": "385e836c-1b0b-45f4-bb9d-a70ed81078ac"
    },
    {
      "module_id": ".ARCHIVE.test_efficiency",
      "path": ".ARCHIVE/test_efficiency.py",
      "category": "test",
      "functions": 12,
      "classes": 0,
      "summary": "",
      "artifact_id": "886e2375-5801-4d85-8f47-fe8860ab930b"
    },
    {
      "module_id": ".ARCHIVE.bot_api_server",
      "path": ".ARCHIVE/bot_api_server.py",
      "category": "core",
      "functions": 19,
      "classes": 3,
      "summary": "\ud83e\udd16 Enhanced Bot API Server",
      "artifact_id": "bccc4328-492a-4d71-8e78-7be06c2251e7"
    },
    {
      "module_id": ".ARCHIVE.bot_file_operations",
      "path": ".ARCHIVE/bot_file_operations.py",
      "category": "core",
      "functions": 14,
      "classes": 1,
      "summary": "\ud83d\udcc1 Bot File Operations Module",
      "artifact_id": "918beac6-c240-4fd8-b59f-a6243c73b0cb"
    },
    {
      "module_id": ".ARCHIVE.test_file_operations",
      "path": ".ARCHIVE/test_file_operations.py",
      "category": "test",
      "functions": 8,
      "classes": 0,
      "summary": "\u041a\u043e\u043c\u043f\u043b\u0435\u043a\u0441\u043d\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0444\u0430\u0439\u043b\u043e\u0432\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439, \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
      "artifact_id": "c015db6c-8cf2-4b1c-8732-98e8adf464c5"
    },
    {
      "module_id": ".ARCHIVE.chat_bot_working",
      "path": ".ARCHIVE/chat_bot_working.py",
      "category": "core",
      "functions": 18,
      "classes": 1,
      "summary": "\ud83d\ude80 ENHANCED Telegram Bot \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 FastAPI",
      "artifact_id": "1b46372f-6b12-4001-96ce-dded975c9752"
    },
    {
      "module_id": ".ARCHIVE.chat_bot",
      "path": ".ARCHIVE/chat_bot.py",
      "category": "core",
      "functions": 17,
      "classes": 1,
      "summary": "LLMStruct Chat Bot - \u0423\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u0434\u043b\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 Cursor + Ollama",
      "artifact_id": "4311f170-6ca1-45dc-905a-e0fa64b084f2"
    },
    {
      "module_id": ".ARCHIVE.test_api_simple",
      "path": ".ARCHIVE/test_api_simple.py",
      "category": "test",
      "functions": 13,
      "classes": 6,
      "summary": "\u0423\u043f\u0440\u043e\u0449\u0435\u043d\u043d\u044b\u0439 API \u0441\u0435\u0440\u0432\u0435\u0440 LLMStruct \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 development",
      "artifact_id": "7fd6c3d0-7228-4c04-adbe-cb1018c3fa3a"
    },
    {
      "module_id": ".ARCHIVE.fastapi_ollama_server_working",
      "path": ".ARCHIVE/fastapi_ollama_server_working.py",
      "category": "core",
      "functions": 16,
      "classes": 4,
      "summary": "\ud83d\ude80 \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u043d\u044b\u0439 FastAPI \u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f LLMStruct",
      "artifact_id": "e0df871d-24ed-41fb-83a4-ca54c022c9a1"
    },
    {
      "module_id": ".ARCHIVE.test_context_orchestration",
      "path": ".ARCHIVE/test_context_orchestration.py",
      "category": "test",
      "functions": 23,
      "classes": 2,
      "summary": "LLM Context Orchestration Testing Suite",
      "artifact_id": "1462034e-1763-4431-b198-a174fbc5b32d"
    },
    {
      "module_id": ".ARCHIVE.test_cli",
      "path": ".ARCHIVE/test_cli.py",
      "category": "test",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "51ca8203-152d-4560-aa3b-5f33ea4b0b72"
    },
    {
      "module_id": ".ARCHIVE.modules.query.handlers",
      "path": ".ARCHIVE/modules/query/handlers.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "3e0b8739-31c8-4a70-b065-5db4fbb9eec0"
    },
    {
      "module_id": ".ARCHIVE.modules.query.__init__",
      "path": ".ARCHIVE/modules/query/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "d5eccecb-e093-4706-a90a-38aec2041fae"
    },
    {
      "module_id": ".ARCHIVE.modules.bot.handlers",
      "path": ".ARCHIVE/modules/bot/handlers.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "4b351cea-5720-448e-8fd3-cbc1d1d29866"
    },
    {
      "module_id": ".ARCHIVE.modules.bot.__init__",
      "path": ".ARCHIVE/modules/bot/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "2bf6ca76-fd47-4608-a5a8-ee893a2b93fb"
    },
    {
      "module_id": ".ARCHIVE.modules.metrics.handlers",
      "path": ".ARCHIVE/modules/metrics/handlers.py",
      "category": "core",
      "functions": 7,
      "classes": 0,
      "summary": "",
      "artifact_id": "ab9245f3-9591-4933-8ad5-ceeb0efe01a8"
    },
    {
      "module_id": ".ARCHIVE.modules.metrics.__init__",
      "path": ".ARCHIVE/modules/metrics/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "dacb5df1-74c9-49ba-b968-b9350c9f14d5"
    },
    {
      "module_id": ".ARCHIVE.modules.analyze_duplicates.handlers",
      "path": ".ARCHIVE/modules/analyze_duplicates/handlers.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "19171219-b463-4c9b-98d6-4a077efb3e35"
    },
    {
      "module_id": ".ARCHIVE.modules.analyze_duplicates.__init__",
      "path": ".ARCHIVE/modules/analyze_duplicates/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "444d26f2-dd62-48ef-914c-69cd620f9e97"
    },
    {
      "module_id": ".ARCHIVE.modules.parse.handlers",
      "path": ".ARCHIVE/modules/parse/handlers.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "d60e597c-2505-4483-9e7d-1b33f4690007"
    },
    {
      "module_id": ".ARCHIVE.modules.parse.__init__",
      "path": ".ARCHIVE/modules/parse/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "2c50736b-bf23-4954-abda-ef4268e5b2fc"
    },
    {
      "module_id": ".ARCHIVE.modules.audit.handlers",
      "path": ".ARCHIVE/modules/audit/handlers.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "3d2e180f-9e3f-47f3-bd94-249305a09ea3"
    },
    {
      "module_id": ".ARCHIVE.modules.audit.__init__",
      "path": ".ARCHIVE/modules/audit/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "0cab0484-8703-4a4c-83d5-16c84064d7bc"
    },
    {
      "module_id": ".ARCHIVE.modules.review.handlers",
      "path": ".ARCHIVE/modules/review/handlers.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "44ca0f29-6f0a-4da3-9ab2-638fc019e699"
    },
    {
      "module_id": ".ARCHIVE.modules.review.__init__",
      "path": ".ARCHIVE/modules/review/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "9cb69ec3-f129-4524-8c2c-29c38fe66709"
    },
    {
      "module_id": ".ARCHIVE.modules.context.handlers",
      "path": ".ARCHIVE/modules/context/handlers.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "8687cf51-1e44-4a94-b1b0-75ced619742d"
    },
    {
      "module_id": ".ARCHIVE.modules.context.__init__",
      "path": ".ARCHIVE/modules/context/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "ee1401ec-ab47-42e8-bc0e-844ff24ed346"
    },
    {
      "module_id": ".ARCHIVE.modules.copilot.handlers",
      "path": ".ARCHIVE/modules/copilot/handlers.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "071c9d98-ef16-4075-9d8a-bd0eaea5741b"
    },
    {
      "module_id": ".ARCHIVE.modules.copilot.__init__",
      "path": ".ARCHIVE/modules/copilot/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "634298f0-be52-4414-af1c-43ff23201f86"
    },
    {
      "module_id": ".ARCHIVE.modules.api.handlers",
      "path": ".ARCHIVE/modules/api/handlers.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "ebaf2ea4-eb18-46e7-b759-766ef7c05d4b"
    },
    {
      "module_id": ".ARCHIVE.modules.api.__init__",
      "path": ".ARCHIVE/modules/api/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "453cc1dd-cc15-40be-9805-0e4f63090a03"
    },
    {
      "module_id": ".ARCHIVE.modules.interactive.handlers",
      "path": ".ARCHIVE/modules/interactive/handlers.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "1d656ac6-2711-41d4-a60b-920a23e69f77"
    },
    {
      "module_id": ".ARCHIVE.modules.interactive.__init__",
      "path": ".ARCHIVE/modules/interactive/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "fde61514-2514-4e1f-8375-6062b9c31d27"
    },
    {
      "module_id": ".ARCHIVE.modules.dogfood.handlers",
      "path": ".ARCHIVE/modules/dogfood/handlers.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "715a3ab6-b34d-4d70-a362-bfcc6ac0f628"
    },
    {
      "module_id": ".ARCHIVE.modules.dogfood.__init__",
      "path": ".ARCHIVE/modules/dogfood/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "c7aaee79-4662-4910-a5ce-c51c7347a74c"
    },
    {
      "module_id": ".ARCHIVE.modules.services.handlers",
      "path": ".ARCHIVE/modules/services/handlers.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "bd17b032-2494-4966-84ae-9303d82adf83"
    },
    {
      "module_id": ".ARCHIVE.modules.services.__init__",
      "path": ".ARCHIVE/modules/services/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "8f055853-a973-4834-9f20-16424750e2b0"
    },
    {
      "module_id": ".ARCHIVE.temp_boss_missing.scripts.business_planning",
      "path": ".ARCHIVE/temp_boss_missing/scripts/business_planning.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "Business Planning Module",
      "artifact_id": "18a40061-45c3-4708-b3ba-0dc26451eb69"
    },
    {
      "module_id": ".ARCHIVE.temp_boss_missing.scripts.team_management",
      "path": ".ARCHIVE/temp_boss_missing/scripts/team_management.py",
      "category": "core",
      "functions": 13,
      "classes": 1,
      "summary": "Team Management Module",
      "artifact_id": "5d559688-490e-4c7c-a64c-1a0986c0ab3a"
    },
    {
      "module_id": ".ARCHIVE.temp_boss_missing.scripts.boss_cli",
      "path": ".ARCHIVE/temp_boss_missing/scripts/boss_cli.py",
      "category": "core",
      "functions": 25,
      "classes": 1,
      "summary": "Boss CLI - \u041f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 CLI \u0434\u043b\u044f \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f",
      "artifact_id": "8579df0e-7c23-4b1d-ac0f-ddcad534f442"
    },
    {
      "module_id": ".ARCHIVE.temp_boss_missing.scripts.__init__",
      "path": ".ARCHIVE/temp_boss_missing/scripts/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "4733ac46-98a5-4d7e-9745-814ebf61a059"
    },
    {
      "module_id": ".ARCHIVE..PHOENIX.executable_phoenix_plan",
      "path": ".ARCHIVE/.PHOENIX/executable_phoenix_plan.py",
      "category": "core",
      "functions": 17,
      "classes": 1,
      "summary": "PHOENIX: \u0418\u0441\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u044b\u0439 \u043f\u043b\u0430\u043d \u0440\u0435\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0437\u0430\u0446\u0438\u0438",
      "artifact_id": "b267f293-da70-4038-9076-a0b8d9695429"
    },
    {
      "module_id": ".ARCHIVE.temp_personal_analysis.personal.commercial_planning",
      "path": ".ARCHIVE/temp_personal_analysis/personal/commercial_planning.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "5efe3208-fe2d-4319-b2eb-bebadde14173"
    },
    {
      "module_id": ".ARCHIVE.temp_personal_analysis.personal.boss.scripts.business_planning",
      "path": ".ARCHIVE/temp_personal_analysis/personal/boss/scripts/business_planning.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "Business Planning Module",
      "artifact_id": "2095fef0-84c4-46d3-9746-e19fe2eeaddf"
    },
    {
      "module_id": ".ARCHIVE.temp_personal_analysis.personal.boss.scripts.team_management",
      "path": ".ARCHIVE/temp_personal_analysis/personal/boss/scripts/team_management.py",
      "category": "core",
      "functions": 13,
      "classes": 1,
      "summary": "Team Management Module",
      "artifact_id": "9467c9e5-1280-4f1e-adbb-d15c972f6a10"
    },
    {
      "module_id": ".ARCHIVE.temp_personal_analysis.personal.boss.scripts.boss_cli",
      "path": ".ARCHIVE/temp_personal_analysis/personal/boss/scripts/boss_cli.py",
      "category": "core",
      "functions": 25,
      "classes": 1,
      "summary": "Boss CLI - \u041f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 CLI \u0434\u043b\u044f \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f",
      "artifact_id": "9136405a-7a22-492d-b796-7002252e3b44"
    },
    {
      "module_id": ".ARCHIVE.temp_personal_analysis.personal.boss.scripts.__init__",
      "path": ".ARCHIVE/temp_personal_analysis/personal/boss/scripts/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "910e3388-c41c-47c9-add0-0d0ebeb8ecb7"
    },
    {
      "module_id": ".ARCHIVE..personal.boss.scripts.boss_cli",
      "path": ".ARCHIVE/.personal/boss/scripts/boss_cli.py",
      "category": "core",
      "functions": 29,
      "classes": 1,
      "summary": "Boss CLI - \u041f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 CLI \u0434\u043b\u044f \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f",
      "artifact_id": "dbda7b77-7def-4341-9f1a-a81136173f60"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.send_cursor_response",
      "path": ".ARCHIVE/archive/telegram_experiments/send_cursor_response.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "5ca2e424-6177-48e1-9c46-405691c517c9"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.cursor_telegram_reader_enhanced",
      "path": ".ARCHIVE/archive/telegram_experiments/cursor_telegram_reader_enhanced.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "Enhanced Cursor Telegram Reader",
      "artifact_id": "c70dfa82-91e4-4f85-acd2-816e767f50db"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.api_memory_endpoints",
      "path": ".ARCHIVE/archive/telegram_experiments/api_memory_endpoints.py",
      "category": "core",
      "functions": 9,
      "classes": 3,
      "summary": "API Endpoints \u0434\u043b\u044f \u043f\u0430\u043c\u044f\u0442\u0438 Telegram \u0431\u043e\u0442\u0430",
      "artifact_id": "3c2424b6-22e7-4faa-ac6b-6317f9554cd4"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.fastapi_ollama_server",
      "path": ".ARCHIVE/archive/telegram_experiments/fastapi_ollama_server.py",
      "category": "core",
      "functions": 14,
      "classes": 4,
      "summary": "\ud83d\ude80 \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u043d\u044b\u0439 FastAPI \u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f LLMStruct",
      "artifact_id": "66c83520-20bf-48b0-a90e-f9128c375e87"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.test_read_telegram",
      "path": ".ARCHIVE/archive/telegram_experiments/test_read_telegram.py",
      "category": "test",
      "functions": 2,
      "classes": 0,
      "summary": "\u0422\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0441\u043a\u0440\u0438\u043f\u0442 \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0438\u0437 Telegram",
      "artifact_id": "80ebe035-2339-40e3-b7b1-b6989e9fd75b"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.dummy_work_executor",
      "path": ".ARCHIVE/archive/telegram_experiments/dummy_work_executor.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "Dummy Work Executor - \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0432\u0443\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0435\u0439 \u0441\u0432\u044f\u0437\u0438 \u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c \u0447\u0435\u0440\u0435\u0437 Telegram",
      "artifact_id": "7eb88b98-e2a7-498f-86fc-76353acfa1b8"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.cursor_telegram_reader",
      "path": ".ARCHIVE/archive/telegram_experiments/cursor_telegram_reader.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "Cursor Telegram Reader - \u0427\u0438\u0442\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0438\u0437 Telegram \u0431\u043e\u0442\u0430 \u0434\u043b\u044f Cursor",
      "artifact_id": "2b2d265c-1c6d-49d9-9e7a-c0f41fbd7145"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.cursor_bot_messenger",
      "path": ".ARCHIVE/archive/telegram_experiments/cursor_bot_messenger.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "Cursor Bot Messenger - \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0447\u0435\u0440\u0435\u0437 Telegram",
      "artifact_id": "00386914-cda4-46b6-b79f-57a798829f3d"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.send_test_message",
      "path": ".ARCHIVE/archive/telegram_experiments/send_test_message.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "Test message sender to Telegram",
      "artifact_id": "40f5f2fe-1f71-4d75-a492-057d28c90c2e"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.test_master_plan_flow",
      "path": ".ARCHIVE/archive/telegram_experiments/test_master_plan_flow.py",
      "category": "test",
      "functions": 6,
      "classes": 1,
      "summary": "Test Master Plan Flow - \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u043d\u043e\u0433\u043e \u0446\u0438\u043a\u043b\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043c\u0430\u0441\u0442\u0435\u0440-\u043f\u043b\u0430\u043d\u0430",
      "artifact_id": "c4a8a801-6e66-4cc0-8013-60ae34164fce"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.cursor_integration",
      "path": ".ARCHIVE/archive/telegram_experiments/cursor_integration.py",
      "category": "core",
      "functions": 13,
      "classes": 1,
      "summary": "\ud83c\udfaf Cursor Integration for Telegram Master Controller",
      "artifact_id": "572319f5-3cb7-4048-8a9b-f954150f33a4"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.cursor_simple_integration",
      "path": ".ARCHIVE/archive/telegram_experiments/cursor_simple_integration.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "\u041f\u0440\u043e\u0441\u0442\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 Cursor \u0441 Telegram \u0431\u043e\u0442\u043e\u043c",
      "artifact_id": "45e00d8c-2217-4290-a754-0a576abae1c1"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.simple_telegram_bot",
      "path": ".ARCHIVE/archive/telegram_experiments/simple_telegram_bot.py",
      "category": "core",
      "functions": 11,
      "classes": 1,
      "summary": "\u041f\u0440\u043e\u0441\u0442\u043e\u0439 \u043d\u0430\u0434\u0435\u0436\u043d\u044b\u0439 Telegram \u0431\u043e\u0442 \u0434\u043b\u044f \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f Cursor \u2194 Telegram",
      "artifact_id": "8c360926-ac9d-4e9f-a403-ae3133b1acce"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.start_simple_telegram",
      "path": ".ARCHIVE/archive/telegram_experiments/start_simple_telegram.py",
      "category": "core",
      "functions": 6,
      "classes": 0,
      "summary": "\u0421\u043a\u0440\u0438\u043f\u0442 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f Cursor \u2194 Telegram",
      "artifact_id": "239f5eee-7985-4bc4-927c-b18baab07c3c"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.chat_bot_fastapi_enhanced",
      "path": ".ARCHIVE/archive/telegram_experiments/chat_bot_fastapi_enhanced.py",
      "category": "core",
      "functions": 18,
      "classes": 1,
      "summary": "\ud83d\ude80 ENHANCED Telegram Bot \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 FastAPI",
      "artifact_id": "71b7ed69-7c01-449c-b228-fccb962b0814"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.chat_bot_enhanced",
      "path": ".ARCHIVE/archive/telegram_bots/chat_bot_enhanced.py",
      "category": "core",
      "functions": 16,
      "classes": 1,
      "summary": "Enhanced LLMStruct Telegram Bot",
      "artifact_id": "4250c5ff-70eb-4af9-b70b-58bd27e61bf9"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.cursor_telegram_bridge",
      "path": ".ARCHIVE/archive/telegram_bots/cursor_telegram_bridge.py",
      "category": "core",
      "functions": 7,
      "classes": 1,
      "summary": "Cursor \u2194 Telegram Bridge",
      "artifact_id": "b7dd804d-d063-453a-b852-406bdf2b6479"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.test_bot_quick",
      "path": ".ARCHIVE/archive/telegram_bots/test_bot_quick.py",
      "category": "test",
      "functions": 3,
      "classes": 0,
      "summary": "\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0442\u0435\u0441\u0442 Telegram \u0431\u043e\u0442\u0430 \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0441\u0432\u044f\u0437\u0438",
      "artifact_id": "368332a0-caf2-40b5-8bf2-715580b9a2c2"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.start_ollama_bot",
      "path": ".ARCHIVE/archive/telegram_bots/start_ollama_bot.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "Quick launcher for Ollama Chat Bot",
      "artifact_id": "b686bee2-7bec-4713-a2ca-37555d5ff290"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.ollama_chat_bot",
      "path": ".ARCHIVE/archive/telegram_bots/ollama_chat_bot.py",
      "category": "core",
      "functions": 23,
      "classes": 6,
      "summary": "LLMStruct Ollama Chat Bot",
      "artifact_id": "396c4f13-cd82-40b8-8bfc-7d526e67c410"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.demo_bot_features",
      "path": ".ARCHIVE/archive/telegram_bots/demo_bot_features.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 Ollama Chat Bot",
      "artifact_id": "f9c6124a-87ea-4a60-9bdb-0641c4d7ed9e"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.cursor_reporter",
      "path": ".ARCHIVE/archive/telegram_bots/cursor_reporter.py",
      "category": "core",
      "functions": 11,
      "classes": 1,
      "summary": "Cursor Task Reporter",
      "artifact_id": "78da147a-58a3-4445-8702-aff8871a3cec"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.ollama_api_bot",
      "path": ".ARCHIVE/archive/telegram_bots/ollama_api_bot.py",
      "category": "core",
      "functions": 28,
      "classes": 7,
      "summary": "Ollama Chat Bot \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0439 FastAPI API \u0432\u043c\u0435\u0441\u0442\u043e CLI",
      "artifact_id": "8429e426-7354-4c94-ba25-9a5d0918f35a"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.start_api_bot",
      "path": ".ARCHIVE/archive/telegram_bots/start_api_bot.py",
      "category": "core",
      "functions": 6,
      "classes": 0,
      "summary": "\u041b\u0430\u0443\u043d\u0447\u0435\u0440 \u0434\u043b\u044f Ollama API Bot \u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430\u043c\u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u0438 API",
      "artifact_id": "f96cc7d6-3daa-4a69-8a8b-cd21afdd61c6"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.telegram_cursor_master",
      "path": ".ARCHIVE/archive/telegram_bots/telegram_cursor_master.py",
      "category": "core",
      "functions": 17,
      "classes": 1,
      "summary": "\ud83c\udfaf LLMStruct Telegram Master Controller",
      "artifact_id": "21cac09a-1e18-4f04-ac4b-0a95f1c8cc1b"
    },
    {
      "module_id": "src.scripts.session_cli",
      "path": "src/scripts/session_cli.py",
      "category": "core",
      "functions": 10,
      "classes": 1,
      "summary": "Session Management CLI",
      "artifact_id": "8a6bc88b-2294-446d-93f7-2f02801a7c64"
    },
    {
      "module_id": "src.scripts.auto_update_struct",
      "path": "src/scripts/auto_update_struct.py",
      "category": "core",
      "functions": 8,
      "classes": 0,
      "summary": "Automatic struct.json update script",
      "artifact_id": "b7845bbc-262d-4cf3-961a-6f4887a9c890"
    },
    {
      "module_id": "src.scripts.fix_hardcoded_usernames",
      "path": "src/scripts/fix_hardcoded_usernames.py",
      "category": "core",
      "functions": 12,
      "classes": 2,
      "summary": "Fix Hardcoded Usernames Script",
      "artifact_id": "00c48c70-1217-4fc3-af54-334ed528079c"
    },
    {
      "module_id": "src.scripts.create_github_issues",
      "path": "src/scripts/create_github_issues.py",
      "category": "core",
      "functions": 11,
      "classes": 1,
      "summary": "GitHub Issues Creator for AI-Dogfooding Project",
      "artifact_id": "ac1bf729-b934-4881-a9a8-59bb84131994"
    },
    {
      "module_id": "src.scripts.export_to_github_projects",
      "path": "src/scripts/export_to_github_projects.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "Export script for GitHub Projects integration",
      "artifact_id": "a407956d-cb24-40d9-9136-e16bb6f7890a"
    },
    {
      "module_id": "src.scripts.validate_schemas",
      "path": "src/scripts/validate_schemas.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "67b0546c-c68f-4213-a2cf-47d1a3796c33"
    },
    {
      "module_id": "src.scripts.process_926_items",
      "path": "src/scripts/process_926_items.py",
      "category": "core",
      "functions": 16,
      "classes": 1,
      "summary": "926 Items Processing Script - Updated Implementation",
      "artifact_id": "72913f4c-d978-4e6c-a3a5-d3961973010b"
    },
    {
      "module_id": "src.scripts.fix_github_script",
      "path": "src/scripts/fix_github_script.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Quick fix for GitHub issues creation script",
      "artifact_id": "e0c46156-bae3-489b-b74f-1d887bb93459"
    },
    {
      "module_id": "src.scripts.github_sync_manager",
      "path": "src/scripts/github_sync_manager.py",
      "category": "core",
      "functions": 15,
      "classes": 1,
      "summary": "GitHub Sync Manager - \u0418\u0434\u0435\u043c\u043f\u043e\u0442\u0435\u043d\u0442\u043d\u0430\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f processing results \u0441 GitHub",
      "artifact_id": "ff32f4fb-0190-4172-96f5-0abfb08e1b40"
    },
    {
      "module_id": "src.scripts.create_comprehensive_index",
      "path": "src/scripts/create_comprehensive_index.py",
      "category": "core",
      "functions": 37,
      "classes": 2,
      "summary": "Comprehensive Project Index Creator",
      "artifact_id": "433d54ab-98de-412e-8c17-1321c9be140d"
    },
    {
      "module_id": "src.scripts.validate_json",
      "path": "src/scripts/validate_json.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "JSON Validation Script",
      "artifact_id": "8ec595ad-f5aa-41e0-9000-4aea85dd301d"
    },
    {
      "module_id": "src.scripts.validate_refs",
      "path": "src/scripts/validate_refs.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "3b6c0a7d-5f91-4153-b1bb-11491dc9bcfb"
    },
    {
      "module_id": "src.scripts.create_tasks_index",
      "path": "src/scripts/create_tasks_index.py",
      "category": "core",
      "functions": 18,
      "classes": 3,
      "summary": "Tasks Index Creator",
      "artifact_id": "3f7fe688-3514-4281-9042-be498bff7dc4"
    },
    {
      "module_id": "src.scripts.github_sync_manager_enhanced",
      "path": "src/scripts/github_sync_manager_enhanced.py",
      "category": "core",
      "functions": 28,
      "classes": 3,
      "summary": "Enhanced GitHub Sync Manager - \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u043b\u0443\u0447\u0448\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0438\u0437 full_project_rollout",
      "artifact_id": "fded780b-0726-4bb0-a35c-dfc859eb725a"
    },
    {
      "module_id": "src.scripts.collector",
      "path": "src/scripts/collector.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "db344116-29b8-4958-8b89-1b64625f5c5b"
    },
    {
      "module_id": "src.scripts.validate_epics",
      "path": "src/scripts/validate_epics.py",
      "category": "core",
      "functions": 5,
      "classes": 0,
      "summary": "Epic Data Validator",
      "artifact_id": "b7242731-c73f-487c-93e6-733370942e30"
    },
    {
      "module_id": "src.scripts.epic_roadmap_manager",
      "path": "src/scripts/epic_roadmap_manager.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "Epic Roadmap Manager - \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430\u043c\u0438 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0441\u0435\u0441\u0441\u0438\u0439",
      "artifact_id": "05c050bd-4175-4e3b-b1bd-7304a947fb7f"
    },
    {
      "module_id": "src.scripts.deploy_embedded_files",
      "path": "src/scripts/deploy_embedded_files.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "130501be-1b39-4e5f-baaf-fa10e97894aa"
    },
    {
      "module_id": "src.scripts.team.__init__",
      "path": "src/scripts/team/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "a651987e-20fe-4d84-bec3-0f567a0cdf44"
    },
    {
      "module_id": "src.llmstruct.workspace",
      "path": "src/llmstruct/workspace.py",
      "category": "core",
      "functions": 20,
      "classes": 1,
      "summary": "Workspace State & Mode Management System",
      "artifact_id": "29ce66f3-45d5-4549-89d5-a4070c87766f"
    },
    {
      "module_id": "src.llmstruct.cache",
      "path": "src/llmstruct/cache.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "e8d8c52f-0ed5-4acf-9e20-182eb936285e"
    },
    {
      "module_id": "src.llmstruct.json_selector",
      "path": "src/llmstruct/json_selector.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "c8292021-3fa1-4b64-98f5-fe14b7cff962"
    },
    {
      "module_id": "src.llmstruct.workflow_orchestrator",
      "path": "src/llmstruct/workflow_orchestrator.py",
      "category": "core",
      "functions": 29,
      "classes": 5,
      "summary": "AI Workflow Orchestrator - Integration Layer for Existing llmstruct Architecture",
      "artifact_id": "c971b6a5-7cda-425e-80c2-bd4673a1fc2a"
    },
    {
      "module_id": "src.llmstruct.gh_view",
      "path": "src/llmstruct/gh_view.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "GitHub visualization/graph feature (gh-view-v1)",
      "artifact_id": "20f4b6a1-a077-4c8b-8492-666b9b7a7be6"
    },
    {
      "module_id": "src.llmstruct.self_run",
      "path": "src/llmstruct/self_run.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "ef1f2d3e-fe06-438d-b49a-b72488c1c7f7"
    },
    {
      "module_id": "src.llmstruct.copilot",
      "path": "src/llmstruct/copilot.py",
      "category": "core",
      "functions": 26,
      "classes": 5,
      "summary": "LLMStruct Copilot Integration Module",
      "artifact_id": "4f204358-7b56-4e7c-a7c8-ac06c051aa54"
    },
    {
      "module_id": "src.llmstruct.ai_workflow_middleware",
      "path": "src/llmstruct/ai_workflow_middleware.py",
      "category": "core",
      "functions": 22,
      "classes": 4,
      "summary": "AI Workflow Middleware - Forces AI Integration with LLMStruct",
      "artifact_id": "05a25ba8-8330-457d-ac54-ac971161476d"
    },
    {
      "module_id": "src.llmstruct.ai_cli_integration",
      "path": "src/llmstruct/ai_cli_integration.py",
      "category": "core",
      "functions": 14,
      "classes": 1,
      "summary": "AI Self-Awareness CLI Integration Module",
      "artifact_id": "9b00db93-e1bb-4bf7-93ca-c995678384fa"
    },
    {
      "module_id": "src.llmstruct.cursor_integration",
      "path": "src/llmstruct/cursor_integration.py",
      "category": "core",
      "functions": 22,
      "classes": 6,
      "summary": "Cursor IDE Integration Module",
      "artifact_id": "176f02dd-9256-447e-b90b-e3420521f615"
    },
    {
      "module_id": "src.llmstruct.grok",
      "path": "src/llmstruct/grok.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "",
      "artifact_id": "7386c281-367b-4db1-9114-fb32a67c0b1b"
    },
    {
      "module_id": "src.llmstruct.transpiler",
      "path": "src/llmstruct/transpiler.py",
      "category": "core",
      "functions": 10,
      "classes": 3,
      "summary": "AI-Powered Universal Transpiler",
      "artifact_id": "cbc13462-2a70-402e-a1b7-359abb9ca5b3"
    },
    {
      "module_id": "src.llmstruct.llm_client",
      "path": "src/llmstruct/llm_client.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "1d092751-cf10-4c6b-a561-061b6e547a20"
    },
    {
      "module_id": "src.llmstruct.__main__",
      "path": "src/llmstruct/__main__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "96a73c0f-9c75-436b-9496-62f095ff9647"
    },
    {
      "module_id": "src.llmstruct.metrics_tracker",
      "path": "src/llmstruct/metrics_tracker.py",
      "category": "core",
      "functions": 29,
      "classes": 4,
      "summary": "LLMStruct Metrics Tracker - \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043c\u0435\u0442\u0440\u0438\u043a \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
      "artifact_id": "6de55d89-bbea-46d9-a4ec-99212e423107"
    },
    {
      "module_id": "src.llmstruct.cli",
      "path": "src/llmstruct/cli.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "LLMStruct CLI - Main entry point for the command-line interface.",
      "artifact_id": "595413be-c3e2-4e10-931b-91d8c50cec18"
    },
    {
      "module_id": "src.llmstruct.context_orchestrator",
      "path": "src/llmstruct/context_orchestrator.py",
      "category": "core",
      "functions": 20,
      "classes": 5,
      "summary": "Smart Context Orchestration for LLMStruct",
      "artifact_id": "91202e69-fc79-4bb8-b853-b4dc39deb666"
    },
    {
      "module_id": "src.llmstruct.ai_self_monitor",
      "path": "src/llmstruct/ai_self_monitor.py",
      "category": "core",
      "functions": 16,
      "classes": 4,
      "summary": "AI Self-Monitoring System",
      "artifact_id": "adaa67d1-fd0e-4eec-be41-cdb630337506"
    },
    {
      "module_id": "src.llmstruct.cursor_ai_bridge",
      "path": "src/llmstruct/cursor_ai_bridge.py",
      "category": "core",
      "functions": 21,
      "classes": 1,
      "summary": "Cursor AI Bridge - API Layer for AI Assistant Integration",
      "artifact_id": "2dee5eb2-b632-4156-95b3-b09b40938364"
    },
    {
      "module_id": "src.llmstruct.ai_self_awareness",
      "path": "src/llmstruct/ai_self_awareness.py",
      "category": "core",
      "functions": 47,
      "classes": 8,
      "summary": "AI Self-Awareness Enhancement Module",
      "artifact_id": "03f7a4c2-7de9-45f5-ae65-373c87a9b4fc"
    },
    {
      "module_id": "src.llmstruct.__init__",
      "path": "src/llmstruct/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "2a97ca0f-8dc2-484c-b29e-01e67cafd5aa"
    },
    {
      "module_id": "src.llmstruct.modules.cli.handlers_legacy",
      "path": "src/llmstruct/modules/cli/handlers_legacy.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "0c9c7257-074b-47df-b201-0e3b1c8dfb17"
    },
    {
      "module_id": "src.llmstruct.modules.cli.analyze_duplicates",
      "path": "src/llmstruct/modules/cli/analyze_duplicates.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "4bf54f00-ce78-4ad4-bc38-4ad904a09ef8"
    },
    {
      "module_id": "src.llmstruct.modules.cli.copilot",
      "path": "src/llmstruct/modules/cli/copilot.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "2d7d17ff-9616-4f17-80c8-2a50ac134179"
    },
    {
      "module_id": "src.llmstruct.modules.cli.handlers",
      "path": "src/llmstruct/modules/cli/handlers.py",
      "category": "cli",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "f2244641-4aa7-44c3-b476-f1d0ecb077bc"
    },
    {
      "module_id": "src.llmstruct.modules.cli.review",
      "path": "src/llmstruct/modules/cli/review.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "7a6b46e8-a044-4d1f-9630-610e8b86548c"
    },
    {
      "module_id": "src.llmstruct.modules.cli.dogfood",
      "path": "src/llmstruct/modules/cli/dogfood.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "35957f90-e33b-48ce-be77-acb6e204dfda"
    },
    {
      "module_id": "src.llmstruct.modules.cli.parse",
      "path": "src/llmstruct/modules/cli/parse.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "900f29be-23b3-4f6c-866a-622c06f098c9"
    },
    {
      "module_id": "src.llmstruct.modules.cli.audit",
      "path": "src/llmstruct/modules/cli/audit.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "16e6a959-b531-4591-a933-c7d79b26d3d6"
    },
    {
      "module_id": "src.llmstruct.modules.cli.query",
      "path": "src/llmstruct/modules/cli/query.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "29db99fb-c418-41fc-adc0-c889a450921c"
    },
    {
      "module_id": "src.llmstruct.modules.cli.utils",
      "path": "src/llmstruct/modules/cli/utils.py",
      "category": "cli",
      "functions": 16,
      "classes": 0,
      "summary": "",
      "artifact_id": "45174475-d2d2-46e6-99e2-3d55ceb62804"
    },
    {
      "module_id": "src.llmstruct.modules.cli.context",
      "path": "src/llmstruct/modules/cli/context.py",
      "category": "cli",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "b359d97a-6abc-44eb-b28e-574392507d60"
    },
    {
      "module_id": "src.llmstruct.modules.cli.__init__",
      "path": "src/llmstruct/modules/cli/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "66fbe324-bcfa-4891-be1e-4cae40f00f98"
    },
    {
      "module_id": "src.llmstruct.modules.commands.queue",
      "path": "src/llmstruct/modules/commands/queue.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "2e7d67a0-930b-49c5-9ce7-3ab09206eb55"
    },
    {
      "module_id": "src.llmstruct.modules.commands.metrics",
      "path": "src/llmstruct/modules/commands/metrics.py",
      "category": "core",
      "functions": 7,
      "classes": 0,
      "summary": "",
      "artifact_id": "2f4a823f-0f2b-4eaa-8504-0d5fd9072e25"
    },
    {
      "module_id": "src.llmstruct.modules.commands.services",
      "path": "src/llmstruct/modules/commands/services.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "109cc69d-6005-4f19-9c9a-26591d412840"
    },
    {
      "module_id": "src.llmstruct.modules.commands.__init__",
      "path": "src/llmstruct/modules/commands/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "9fbd5d6a-a1b1-4663-997e-17f7731352c6"
    },
    {
      "module_id": "src.llmstruct.templates.__init__",
      "path": "src/llmstruct/templates/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Templates for LLM prompts used in LLMStruct integration.",
      "artifact_id": "28d0107c-d2a1-4ed7-8762-1e3f61eba037"
    },
    {
      "module_id": "src.llmstruct.api.app",
      "path": "src/llmstruct/api/app.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Main FastAPI application for LLMStruct",
      "artifact_id": "df37e467-1e94-48ef-952e-6ca5e887f240"
    },
    {
      "module_id": "src.llmstruct.api.routes.continue_adapter",
      "path": "src/llmstruct/api/routes/continue_adapter.py",
      "category": "core",
      "functions": 5,
      "classes": 2,
      "summary": "Continue API Adapter",
      "artifact_id": "bfb6bbc9-e599-4aef-9f91-3852ffc77c54"
    },
    {
      "module_id": "src.llmstruct.api.middleware.auth",
      "path": "src/llmstruct/api/middleware/auth.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "Authentication middleware for LLMStruct FastAPI",
      "artifact_id": "de01d163-0528-4fdf-8813-7d34fef8ba73"
    },
    {
      "module_id": "src.llmstruct.api.services.llm_service",
      "path": "src/llmstruct/api/services/llm_service.py",
      "category": "core",
      "functions": 17,
      "classes": 4,
      "summary": "LLM Service",
      "artifact_id": "f0f08a4f-f2da-4f3e-a952-5388e6bbedd7"
    },
    {
      "module_id": "src.llmstruct.generators.json_generator",
      "path": "src/llmstruct/generators/json_generator.py",
      "category": "core",
      "functions": 6,
      "classes": 0,
      "summary": "",
      "artifact_id": "4936c1cb-cdda-4760-aa17-0a6e9945b270"
    },
    {
      "module_id": "src.llmstruct.generators.go_json_generator",
      "path": "src/llmstruct/generators/go_json_generator.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "3d116c73-a106-4639-9a8b-5cf7edcad0f0"
    },
    {
      "module_id": "src.llmstruct.generators.__init__",
      "path": "src/llmstruct/generators/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "artifact_id": "144ba44c-ccea-4558-aa9a-712e93549c71"
    },
    {
      "module_id": "src.llmstruct.ARCHIVE.cli_core",
      "path": "src/llmstruct/ARCHIVE/cli_core.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "Core CLI functionality and main loop.",
      "artifact_id": "92888eea-ecc8-4fea-8487-769566224244"
    },
    {
      "module_id": "src.llmstruct.ARCHIVE.cli_config",
      "path": "src/llmstruct/ARCHIVE/cli_config.py",
      "category": "core",
      "functions": 18,
      "classes": 1,
      "summary": "CLI configuration management.",
      "artifact_id": "ee1ba98a-967f-4610-a3f9-aa89d3abeca5"
    },
    {
      "module_id": "src.llmstruct.ARCHIVE.cli_argument_parser",
      "path": "src/llmstruct/ARCHIVE/cli_argument_parser.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "CLI argument parsing for LLMStruct.",
      "artifact_id": "1fe01b16-ef6e-49e4-8f16-b8204306dfe9"
    },
    {
      "module_id": "src.llmstruct.ARCHIVE.cli_main_commands",
      "path": "src/llmstruct/ARCHIVE/cli_main_commands.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "Main CLI command handlers for LLMStruct.",
      "artifact_id": "b9f534a5-a751-4c9f-9a20-28adf093c64c"
    },
    {
      "module_id": "src.llmstruct.ARCHIVE.cli_utils",
      "path": "src/llmstruct/ARCHIVE/cli_utils.py",
      "category": "core",
      "functions": 13,
      "classes": 1,
      "summary": "CLI utility functions.",
      "artifact_id": "20068af6-eecf-41fd-82c8-7905dd142074"
    },
    {
      "module_id": "src.llmstruct.ARCHIVE.cli_commands",
      "path": "src/llmstruct/ARCHIVE/cli_commands.py",
      "category": "core",
      "functions": 22,
      "classes": 1,
      "summary": "CLI command processing and handlers.",
      "artifact_id": "2de02ee2-eed3-4542-be7a-9d5c21ded4ed"
    },
    {
      "module_id": "src.llmstruct.validators.json_validator",
      "path": "src/llmstruct/validators/json_validator.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "34ad1372-0631-46f9-93ef-2f51f4cb20ff"
    },
    {
      "module_id": "src.llmstruct.validators.__init__",
      "path": "src/llmstruct/validators/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "artifact_id": "d405d8a4-9700-48ba-9df4-5b1e605593c0"
    },
    {
      "module_id": "src.llmstruct.parsers.universal_converter",
      "path": "src/llmstruct/parsers/universal_converter.py",
      "category": "core",
      "functions": 14,
      "classes": 3,
      "summary": "Universal Code Converter - Orchestrates all language parsers",
      "artifact_id": "7505fa87-661c-4f62-8330-8ac1707e6c49"
    },
    {
      "module_id": "src.llmstruct.parsers.go_analyzer",
      "path": "src/llmstruct/parsers/go_analyzer.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 Go \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043b\u044f Docker \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430",
      "artifact_id": "2ea3cc83-0cb0-4681-acad-7cebf61a800a"
    },
    {
      "module_id": "src.llmstruct.parsers.javascript_parser",
      "path": "src/llmstruct/parsers/javascript_parser.py",
      "category": "core",
      "functions": 5,
      "classes": 1,
      "summary": "",
      "artifact_id": "fef93721-1e79-40bc-8c81-b1f820581470"
    },
    {
      "module_id": "src.llmstruct.parsers.python_parser",
      "path": "src/llmstruct/parsers/python_parser.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "",
      "artifact_id": "28af2837-80c5-47ed-995e-0c3a5be841bf"
    },
    {
      "module_id": "src.llmstruct.parsers.__init__",
      "path": "src/llmstruct/parsers/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "artifact_id": "73b0f806-f1a7-4dc9-b32f-25ab78cba127"
    },
    {
      "module_id": "examples.python_project_utils",
      "path": "examples/python_project_utils.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "Utility functions for the sample project.",
      "artifact_id": "757c4ab8-197d-4ce4-b436-750c52dd6e9b"
    },
    {
      "module_id": "examples.python_project_main",
      "path": "examples/python_project_main.py",
      "category": "core",
      "functions": 2,
      "classes": 1,
      "summary": "Main module for the sample project.",
      "artifact_id": "f58c8361-db15-4e2b-9503-3da7d3e87825"
    },
    {
      "module_id": "examples.telegram_bot.test_bot",
      "path": "examples/telegram_bot/test_bot.py",
      "category": "test",
      "functions": 4,
      "classes": 0,
      "summary": "\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 Telegram \u0431\u043e\u0442\u0430 \u0431\u0435\u0437 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0433\u043e Telegram",
      "artifact_id": "6b024a7d-38d7-45d9-b93c-dbbd0a709ef2"
    },
    {
      "module_id": "integrations.telegram_bot.test_bot",
      "path": "integrations/telegram_bot/test_bot.py",
      "category": "test",
      "functions": 4,
      "classes": 0,
      "summary": "\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 Telegram \u0431\u043e\u0442\u0430 \u0431\u0435\u0437 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0433\u043e Telegram",
      "artifact_id": "8fd3d5b4-17be-4088-96e8-05e3ece4b5e3"
    },
    {
      "module_id": "integrations.telegram_bot.mp002_progress_bot",
      "path": "integrations/telegram_bot/mp002_progress_bot.py",
      "category": "core",
      "functions": 16,
      "classes": 1,
      "summary": "MP-002A Progress Bot - Telegram \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f Smart Wrapper \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438",
      "artifact_id": "d2284282-8ebc-413b-bd53-f991ce864cdb"
    },
    {
      "module_id": "integrations.telegram_bot.simple_bot",
      "path": "integrations/telegram_bot/simple_bot.py",
      "category": "core",
      "functions": 11,
      "classes": 1,
      "summary": "\u0423\u043f\u0440\u043e\u0449\u0435\u043d\u043d\u044b\u0439 Telegram \u0431\u043e\u0442 \u0434\u043b\u044f LLMStruct \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 \u043c\u0435\u0442\u0440\u0438\u043a",
      "artifact_id": "c433f61c-5e73-4326-aaa7-5d82e42f985b"
    },
    {
      "module_id": "docs.cache",
      "path": "docs/cache.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "8d1c2a22-c6b5-4c96-8626-6905b29ffddf"
    },
    {
      "module_id": "docs.json_selector",
      "path": "docs/json_selector.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "84753da3-9933-4cf9-9ce6-854b7221b3ac"
    },
    {
      "module_id": "docs.self_run",
      "path": "docs/self_run.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "d1a6104e-85fa-4d92-ab54-682f8bd9be89"
    },
    {
      "module_id": "docs.test_self_run",
      "path": "docs/test_self_run.py",
      "category": "test",
      "functions": 5,
      "classes": 0,
      "summary": "",
      "artifact_id": "040816e1-a6e7-4bd3-a7c3-1e291d086a65"
    },
    {
      "module_id": "docs.cli",
      "path": "docs/cli.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "",
      "artifact_id": "84851663-987f-4b96-a384-f9a244a5f4d9"
    },
    {
      "module_id": "tests.test_self_run",
      "path": "tests/test_self_run.py",
      "category": "test",
      "functions": 5,
      "classes": 0,
      "summary": "",
      "artifact_id": "414fe5e2-64aa-4797-95ca-01288e9750be"
    },
    {
      "module_id": "tests.__init__",
      "path": "tests/__init__.py",
      "category": "test",
      "functions": 0,
      "classes": 0,
      "summary": "Test suite for LLMStruct, covering parsers, generators, validators, and integration.",
      "artifact_id": "351a50f6-502d-4d30-be7b-135864ebb3d0"
    },
    {
      "module_id": "cursor_workflow_integration.scripts.install_ai_integration",
      "path": "cursor_workflow_integration/scripts/install_ai_integration.py",
      "category": "core",
      "functions": 5,
      "classes": 0,
      "summary": "\ud83d\ude80 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f Cursor",
      "artifact_id": "e23537ca-140e-4f11-963b-df2c058e45aa"
    },
    {
      "module_id": "cursor_workflow_integration.files.auto_init_ai_system",
      "path": "cursor_workflow_integration/files/auto_init_ai_system.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "\ud83d\ude80 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043f\u0440\u0438 \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0432 Cursor",
      "artifact_id": "01224aa5-a11d-49a1-ad7c-a3cba12152e2"
    }
  ],
  "modules": [
    {
      "module_id": "validate_sessions",
      "path": "validate_sessions.py",
      "category": "core",
      "module_doc": "Session Schema Validation Script for llmstruct\nValidates session management JSON files against their schemas.\nFocused validation for session system only.",
      "functions": [
        {
          "name": "load_json",
          "docstring": "Load JSON file with error handling.",
          "line_range": [
            21,
            31
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_json_against_schema",
          "docstring": "Validate JSON data against schema.",
          "line_range": [
            33,
            52
          ],
          "parameters": [
            "json_data",
            "schema_data",
            "file_name"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            54,
            124
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": [
            13,
            19
          ],
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {
        "load_json": [
          "json.load",
          "open",
          "print"
        ],
        "validate_json_against_schema": [
          "validator.iter_errors",
          "str",
          "print",
          "list",
          "len",
          "Draft7Validator"
        ],
        "main": [
          "validate_json_against_schema",
          "load_json",
          "errors.append",
          "print"
        ]
      },
      "dependencies": [
        "Draft7Validator",
        "ValidationError",
        "json",
        "jsonschema",
        "sys",
        "validate"
      ],
      "hash": null,
      "artifact_id": "6594588c-b49a-44a4-b23d-6f4ea927681c"
    },
    {
      "module_id": "auto_init_ai_system",
      "path": "auto_init_ai_system.py",
      "category": "core",
      "module_doc": "\ud83d\ude80 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043f\u0440\u0438 \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0432 Cursor\n\u042d\u0442\u043e\u0442 \u0444\u0430\u0439\u043b \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0441\u0430\u043c\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0430 AI \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439\nENHANCED: \u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 workflow \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439, \u0441\u0435\u0441\u0441\u0438\u044f\u043c\u0438 \u0438 context tags",
      "functions": [
        {
          "name": "auto_initialize_ai_system",
          "docstring": "\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043f\u0440\u0438 \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            27,
            91
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "get_current_workflow_context",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 workflow \u0441\u0435\u0441\u0441\u0438\u0438 \u0438 workspace mode",
          "line_range": [
            93,
            129
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "get_workflow_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 workflow \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 \u043c\u0435\u0442\u0440\u0438\u043a",
          "line_range": [
            131,
            215
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "switch_workspace_mode",
          "docstring": "\u041f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u0442\u044c workspace mode (\u0434\u043b\u044f CLI integration)",
          "line_range": [
            217,
            233
          ],
          "parameters": [
            "mode_string"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            235,
            245
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "search_ai_capabilities",
          "docstring": "\u041f\u043e\u0438\u0441\u043a \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 AI \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0433\u043e struct.json \u0438 \u043c\u0435\u0442\u0440\u0438\u043a",
          "line_range": [
            247,
            314
          ],
          "parameters": [
            "query"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_context",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0434\u043b\u044f AI \u0432 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435",
          "line_range": [
            316,
            347
          ],
          "parameters": [
            "mode"
          ],
          "decorators": []
        },
        {
          "name": "get_epic_sessions_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 \u0432\u0441\u0435\u0445 \u044d\u043f\u0438\u043a-\u0441\u0435\u0441\u0441\u0438\u0439",
          "line_range": [
            349,
            398
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "create_epic_session",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e \u0434\u043b\u044f \u044d\u043f\u0438\u043a\u0430",
          "line_range": [
            400,
            421
          ],
          "parameters": [
            "epic_id",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "switch_to_session",
          "docstring": "\u041f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0434\u0440\u0443\u0433\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e",
          "line_range": [
            423,
            441
          ],
          "parameters": [
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "get_available_sessions",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u0441\u0435\u0441\u0441\u0438\u0439",
          "line_range": [
            443,
            504
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "session_management_commands",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043c\u0430\u043d\u0434 \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u0435\u0441\u0441\u0438\u044f\u043c\u0438",
          "line_range": [
            506,
            532
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "auto_initialize_ai_system": [
          "str",
          "print",
          "Path",
          "logger.error",
          "logger.info",
          "f.exists",
          "get_current_workflow_context",
          "len",
          "src_path.exists",
          "SystemCapabilityDiscovery",
          "AI_CAPABILITIES.discover_all_capabilities"
        ],
        "get_current_workflow_context": [
          "json.load",
          "workspace_file.exists",
          "Path",
          "session.get",
          "open",
          "logger.info",
          "logger.warning",
          "roadmap.get",
          "workspace.get",
          "session_file.exists",
          "roadmap_file.exists",
          "epic_data.get"
        ],
        "get_workflow_status": [
          "json.load",
          "workspace_manager.get_session_info",
          "workspace_manager._get_git_branch",
          "WorkspaceStateManager",
          "track_workflow_event",
          "struct_status.upper",
          "e.get",
          "time.time",
          "struct_file.exists",
          "get_metrics_tracker",
          "roadmap.get",
          "str",
          "Path",
          "session_info.get",
          "workspace_manager.get_epic_summaries",
          "len",
          "metrics_tracker.get_session_summary",
          "workspace_manager.get_mode_description",
          "open",
          "roadmap_file.exists",
          "workspace_manager.get_current_mode"
        ],
        "switch_workspace_mode": [
          "str",
          "Path",
          "logger.error",
          "ws.set_mode",
          "get_current_workflow_context",
          "logger.info",
          "WorkspaceStateManager"
        ],
        "get_ai_status": [
          "AI_CAPABILITIES.get_enhanced_capabilities_summary",
          "get_workflow_status",
          "auto_initialize_ai_system",
          "AI_STATUS.get"
        ],
        "search_ai_capabilities": [
          "query.lower",
          "struct_file.exists",
          "json.load",
          "results.append",
          "enumerate",
          "str",
          "track_task_start",
          "cls.get",
          "int",
          "Path",
          "open",
          "file_info.get",
          "len",
          "struct_data.get",
          "func.get",
          "track_task_complete",
          "track_workflow_event",
          "time.time"
        ],
        "get_ai_context": [
          "json.dumps",
          "logger.error",
          "get_current_workflow_context",
          "len",
          "auto_initialize_ai_system",
          "AI_CAPABILITIES.discover_all_capabilities"
        ],
        "get_epic_sessions_status": [
          "status_lines.append",
          "json.load",
          "Path",
          "session.get",
          "open",
          "logger.error",
          "sessions_file.exists",
          "roadmap.get",
          "roadmap_file.exists",
          "epic_data.get"
        ],
        "create_epic_session": [
          "os.system",
          "Path",
          "epic_id.split",
          "logger.error",
          "logger.info"
        ],
        "switch_to_session": [
          "os.system",
          "Path",
          "logger.error",
          "logger.info",
          "get_current_workflow_context"
        ],
        "get_available_sessions": [
          "current_data.get",
          "json.load",
          "Path",
          "session.get",
          "open",
          "logger.error",
          "sessions_list.append",
          "sessions_file.exists",
          "current_session_file.exists",
          "roadmap.get",
          "roadmap_file.exists",
          "sessions_data.get",
          "epic_data.get"
        ],
        "session_management_commands": []
      },
      "dependencies": [
        "Path",
        "SystemCapabilityDiscovery",
        "WorkspaceStateManager",
        "datetime",
        "get_metrics_tracker",
        "json",
        "llmstruct.ai_self_awareness",
        "llmstruct.workspace",
        "logging",
        "os",
        "pathlib",
        "src.llmstruct.metrics_tracker",
        "src.llmstruct.workspace",
        "sys",
        "time",
        "track_task_complete",
        "track_task_start",
        "track_workflow_event"
      ],
      "hash": null,
      "artifact_id": "9122ec3d-96a7-43dd-92f1-4c4ee38ff4b5"
    },
    {
      "module_id": "collect_json",
      "path": "collect_json.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_json_files",
          "docstring": "",
          "line_range": [
            5,
            19
          ],
          "parameters": [
            "base_dir"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json_files": [
          "json.load",
          "path.relative_to",
          "path.open",
          "current.setdefault",
          "sorted",
          "base_dir.rglob"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "c169beaf-1339-4a4b-a682-819fef46de29"
    },
    {
      "module_id": "validate_schemas",
      "path": "validate_schemas.py",
      "category": "core",
      "module_doc": "JSON Schema Validation Script for llmstruct\nValidates all enhanced JSON files against their appropriate schemas.\nPart of TSK-130 implementation.",
      "functions": [
        {
          "name": "load_json",
          "docstring": "Load JSON file with error handling.",
          "line_range": [
            24,
            34
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_json_against_schema",
          "docstring": "Validate JSON data against schema.",
          "line_range": [
            37,
            53
          ],
          "parameters": [
            "json_data",
            "schema_data",
            "file_name"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            56,
            193
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": [
            15,
            21
          ],
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {
        "load_json": [
          "json.load",
          "open",
          "print"
        ],
        "validate_json_against_schema": [
          "str",
          "validate",
          "print"
        ],
        "main": [
          "validate_json_against_schema",
          "load_json",
          "errors.append",
          "print"
        ]
      },
      "dependencies": [
        "Draft7Validator",
        "ValidationError",
        "json",
        "jsonschema",
        "sys",
        "validate"
      ],
      "hash": null,
      "artifact_id": "d981b138-170c-4f77-ae66-716d1ba8c93c"
    },
    {
      "module_id": "install_ai_integration",
      "path": "install_ai_integration.py",
      "category": "core",
      "module_doc": "\ud83d\ude80 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f Cursor\n\u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0441\u0430\u043c\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0430 AI \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0432 \u043b\u044e\u0431\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442",
      "functions": [
        {
          "name": "install_ai_integration",
          "docstring": "\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044e \u0432 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442",
          "line_range": [
            12,
            58
          ],
          "parameters": [
            "target_project"
          ],
          "decorators": []
        },
        {
          "name": "adapt_cursorrules",
          "docstring": "\u0410\u0434\u0430\u043f\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c .cursorrules \u043f\u043e\u0434 \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442",
          "line_range": [
            60,
            99
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "adapt_auto_init",
          "docstring": "\u0410\u0434\u0430\u043f\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c auto_init_ai_system.py \u043f\u043e\u0434 \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442",
          "line_range": [
            101,
            123
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "create_simplified_auto_init",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0443\u043f\u0440\u043e\u0449\u0435\u043d\u043d\u0443\u044e \u0432\u0435\u0440\u0441\u0438\u044e auto_init \u0434\u043b\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432 \u0431\u0435\u0437 llmstruct",
          "line_range": [
            125,
            189
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438",
          "line_range": [
            191,
            207
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "install_ai_integration": [
          "source_path.exists",
          "print",
          "Path",
          "target_root.exists",
          "adapt_auto_init",
          "shutil.copy2",
          "adapt_cursorrules",
          "vscode_dir.mkdir"
        ],
        "adapt_cursorrules": [
          "cursorrules_path.write_text",
          "content.replace",
          "list",
          "print",
          "cursorrules_path.read_text",
          "cursorrules_path.exists",
          "len",
          "project_root.rglob"
        ],
        "adapt_auto_init": [
          "auto_init_path.write_text",
          "content.replace",
          "auto_init_path.read_text",
          "print",
          "create_simplified_auto_init",
          "auto_init_path.exists"
        ],
        "create_simplified_auto_init": [],
        "main": [
          "len",
          "install_ai_integration",
          "print"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "os",
        "pathlib",
        "shutil",
        "sys"
      ],
      "hash": null,
      "artifact_id": "d3dc35d3-06f7-4e6e-98b0-63a336278da0"
    },
    {
      "module_id": "run_ai_diagnostics",
      "path": "run_ai_diagnostics.py",
      "category": "core",
      "module_doc": "Comprehensive AI Self-Awareness Diagnostics Runner\nEnhanced with Cursor integration testing, multi-AI orchestration validation,\npersonal planning bridge testing, and real-time performance metrics.",
      "functions": [
        {
          "name": "print_section",
          "docstring": "Print a formatted section header.",
          "line_range": [
            20,
            23
          ],
          "parameters": [
            "title",
            "emoji"
          ],
          "decorators": []
        },
        {
          "name": "print_subsection",
          "docstring": "Print a formatted subsection header.",
          "line_range": [
            25,
            28
          ],
          "parameters": [
            "title",
            "emoji"
          ],
          "decorators": []
        },
        {
          "name": "test_basic_ai_awareness",
          "docstring": "Test basic AI self-awareness capabilities.",
          "line_range": [
            30,
            51
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_cursor_integration",
          "docstring": "Test Cursor IDE integration capabilities.",
          "line_range": [
            53,
            124
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_real_time_metrics",
          "docstring": "Test real-time metrics calculation.",
          "line_range": [
            126,
            146
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_personal_planning_bridge",
          "docstring": "Test personal planning bridge functionality.",
          "line_range": [
            148,
            196
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_session_management",
          "docstring": "Test session management capabilities.",
          "line_range": [
            198,
            233
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_configuration_loading",
          "docstring": "Test configuration file loading.",
          "line_range": [
            235,
            255
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run_performance_benchmark",
          "docstring": "Run performance benchmarks for AI operations.",
          "line_range": [
            257,
            287
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "generate_diagnostic_report",
          "docstring": "Generate a comprehensive diagnostic report.",
          "line_range": [
            289,
            333
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "continuous_monitoring_mode",
          "docstring": "Run continuous monitoring of AI system health.",
          "line_range": [
            335,
            382
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_specific_component",
          "docstring": "Test a specific AI component in detail.",
          "line_range": [
            384,
            423
          ],
          "parameters": [
            "component_name"
          ],
          "decorators": []
        },
        {
          "name": "test_cli_commands",
          "docstring": "Test CLI command processing capabilities.",
          "line_range": [
            425,
            447
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_context_scenarios",
          "docstring": "Test context orchestrator scenarios.",
          "line_range": [
            449,
            466
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_copilot_features",
          "docstring": "Test copilot manager features.",
          "line_range": [
            468,
            485
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run_integration_health_check",
          "docstring": "Run comprehensive integration health check.",
          "line_range": [
            487,
            524
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "generate_optimization_suggestions",
          "docstring": "Generate automated optimization suggestions based on diagnostics.",
          "line_range": [
            526,
            597
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run_stress_test",
          "docstring": "Run stress test on AI system.",
          "line_range": [
            599,
            651
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Run comprehensive AI diagnostics.",
          "line_range": [
            653,
            738
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "print_section": [
          "len",
          "print"
        ],
        "print_subsection": [
          "len",
          "print"
        ],
        "test_basic_ai_awareness": [
          "print_section",
          "print",
          "discovery.discover_all_capabilities",
          "discovery.get_enhanced_capabilities_summary",
          "discovery.get_comprehensive_ai_status",
          "len",
          "SystemCapabilityDiscovery"
        ],
        "test_cursor_integration": [
          "print_section",
          "print",
          "delegation.get",
          "context_data.get",
          "print_subsection",
          "create_cursor_integration",
          "len",
          "response.get",
          "cursor_integration.get_comprehensive_cursor_response"
        ],
        "test_real_time_metrics": [
          "discovery._get_real_system_load",
          "print_section",
          "print",
          "discovery._calculate_real_cache_hit_rate",
          "discovery.get_cursor_status_report",
          "SystemCapabilityDiscovery"
        ],
        "test_personal_planning_bridge": [
          "print_section",
          "enumerate",
          "print",
          "bridge.get_goal_aligned_suggestions",
          "guidance.get",
          "PersonalPlanningCursorBridge",
          "len",
          "top_feature.get",
          "bridge.get_priority_guidance"
        ],
        "test_session_management": [
          "CursorSessionManager",
          "session_manager.start_session",
          "print_section",
          "print",
          "session_manager.save_session_context"
        ],
        "test_configuration_loading": [
          "json.load",
          "print_section",
          "print",
          "Path",
          "open",
          "len",
          "config_path.exists"
        ],
        "run_performance_benchmark": [
          "print_section",
          "print",
          "discovery.discover_all_capabilities",
          "create_cursor_integration",
          "SystemCapabilityDiscovery",
          "time.time"
        ],
        "generate_diagnostic_report": [
          "print_section",
          "print",
          "Path",
          "open",
          "time.strftime",
          "discovery.discover_all_capabilities",
          "json.dump",
          "len",
          "SystemCapabilityDiscovery"
        ],
        "continuous_monitoring_mode": [
          "discovery._get_real_system_load",
          "print_section",
          "print",
          "time.sleep",
          "time.strftime",
          "discovery.discover_all_capabilities",
          "discovery._calculate_real_cache_hit_rate",
          "len",
          "SystemCapabilityDiscovery"
        ],
        "test_specific_component": [
          "print_section",
          "enumerate",
          "print",
          "list",
          "test_copilot_features",
          "test_cli_commands",
          "discovery.discover_all_capabilities",
          "component_name.upper",
          "len",
          "SystemCapabilityDiscovery",
          "test_context_scenarios"
        ],
        "test_cli_commands": [
          "CLIConfig",
          "CommandProcessor",
          "print",
          "CLIUtils"
        ],
        "test_context_scenarios": [
          "create_context_orchestrator",
          "print"
        ],
        "test_copilot_features": [
          "feature.replace",
          "initialize_copilot",
          "print",
          "hasattr"
        ],
        "run_integration_health_check": [
          "print_section",
          "print",
          "create_cursor_integration",
          "response.get",
          "cursor_integration.get_comprehensive_cursor_response"
        ],
        "generate_optimization_suggestions": [
          "print_section",
          "enumerate",
          "print",
          "suggestions.append",
          "discovery.discover_all_capabilities",
          "len",
          "SystemCapabilityDiscovery"
        ],
        "run_stress_test": [
          "range",
          "print_section",
          "enumerate",
          "print",
          "delegation.get",
          "context_data.get",
          "discovery.discover_all_capabilities",
          "create_cursor_integration",
          "SystemCapabilityDiscovery",
          "time.time"
        ],
        "main": [
          "print_section",
          "run_integration_health_check",
          "print",
          "test_specific_component",
          "continuous_monitoring_mode",
          "test_func",
          "len",
          "generate_optimization_suggestions",
          "run_stress_test",
          "time.time"
        ]
      },
      "dependencies": [
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "CursorSessionManager",
        "Path",
        "PersonalPlanningCursorBridge",
        "SystemCapabilityDiscovery",
        "create_context_orchestrator",
        "create_cursor_integration",
        "initialize_copilot",
        "json",
        "llmstruct.ai_self_awareness",
        "llmstruct.cli_commands",
        "llmstruct.cli_config",
        "llmstruct.cli_utils",
        "llmstruct.context_orchestrator",
        "llmstruct.copilot",
        "llmstruct.cursor_integration",
        "os",
        "pathlib",
        "sys",
        "time"
      ],
      "hash": null,
      "artifact_id": "11c71c31-5300-4dbb-a61d-ca1b478200f7"
    },
    {
      "module_id": "start_development",
      "path": "start_development.py",
      "category": "core",
      "module_doc": "LLMStruct Development Startup Script\nConvenient one-command startup for daily development workflow.\nEnhanced with AI Workflow Middleware and Self-Monitoring for seamless llmstruct integration.",
      "functions": [
        {
          "name": "print_header",
          "docstring": "Print startup header.",
          "line_range": [
            17,
            21
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "initialize_ai_integration_layer",
          "docstring": "Initialize AI integration layer - this is the NEW seamless integration",
          "line_range": [
            23,
            73
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "check_environment",
          "docstring": "Check if development environment is properly set up.",
          "line_range": [
            75,
            110
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "initialize_workflow_orchestrator",
          "docstring": "Initialize and test WorkflowOrchestrator integration.",
          "line_range": [
            112,
            156
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "initialize_cursor_ai_bridge",
          "docstring": "Initialize and test CursorAIBridge integration.",
          "line_range": [
            158,
            198
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "sync_architecture_components",
          "docstring": "Sync with existing llmstruct architecture components and AI integration.",
          "line_range": [
            200,
            240
          ],
          "parameters": [
            "orchestrator",
            "ai_integration"
          ],
          "decorators": []
        },
        {
          "name": "run_system_health_check",
          "docstring": "Run comprehensive system health check.",
          "line_range": [
            242,
            263
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "get_optimization_suggestions",
          "docstring": "Get AI optimization suggestions with WorkflowOrchestrator integration.",
          "line_range": [
            265,
            320
          ],
          "parameters": [
            "orchestrator"
          ],
          "decorators": []
        },
        {
          "name": "check_git_status",
          "docstring": "Check git repository status.",
          "line_range": [
            322,
            368
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_current_context",
          "docstring": "Show current project context and priorities.",
          "line_range": [
            370,
            411
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_useful_commands",
          "docstring": "Show useful commands for development.",
          "line_range": [
            413,
            472
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Main startup routine with AI Workflow Middleware and WorkflowOrchestrator integration.",
          "line_range": [
            474,
            593
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "print_header": [
          "print"
        ],
        "initialize_ai_integration_layer": [
          "str",
          "print",
          "record_ai_usage",
          "Path",
          "initialize_ai_monitor",
          "middleware.process_ai_request",
          "initialize_ai_middleware"
        ],
        "check_environment": [
          "Path",
          "missing_files.append",
          "print",
          "hasattr"
        ],
        "initialize_workflow_orchestrator": [
          "print",
          "dup_analysis.get",
          "stats.get",
          "copilot_status.get",
          "struct_analysis.get",
          "orchestrator.get_current_context",
          "len",
          "system_caps.get",
          "WorkflowOrchestrator",
          "context.get"
        ],
        "initialize_cursor_ai_bridge": [
          "bridge.ai_analyze_task",
          "print",
          "ai_rec.get",
          "project_state.get",
          "task_analysis.get",
          "bridge.ai_get_context",
          "CursorAIBridge",
          "len",
          "context.get"
        ],
        "sync_architecture_components": [
          "print",
          "middleware.get_middleware_stats",
          "sync_results.items",
          "orchestrator.sync_with_existing_architecture",
          "ai_integration.get"
        ],
        "run_system_health_check": [
          "subprocess.run",
          "print"
        ],
        "get_optimization_suggestions": [
          "enumerate",
          "print",
          "orchestrator.analyze_codebase_for_duplicates",
          "duplication_analysis.get",
          "suggestions.append",
          "r.get",
          "subprocess.run",
          "line.strip"
        ],
        "check_git_status": [
          "changes.split",
          "len",
          "subprocess.run",
          "print"
        ],
        "show_current_context": [
          "bridge_file.exists",
          "init_data.get",
          "init_file.exists",
          "json.load",
          "bridge_data.get",
          "enumerate",
          "print",
          "vision.get",
          "Path",
          "open",
          "business_obj.get"
        ],
        "show_useful_commands": [
          "print"
        ],
        "main": [
          "sync_architecture_components",
          "check_git_status",
          "show_current_context",
          "initialize_cursor_ai_bridge",
          "show_useful_commands",
          "get_optimization_suggestions",
          "print",
          "initialize_ai_integration_layer",
          "middleware.get_middleware_stats",
          "check_environment",
          "monitor.analyze_behavior_trends",
          "print_header",
          "ai_integration.get",
          "run_system_health_check",
          "initialize_workflow_orchestrator"
        ]
      },
      "dependencies": [
        "AIWorkflowMode",
        "CursorAIBridge",
        "Path",
        "WorkflowOrchestrator",
        "initialize_ai_middleware",
        "initialize_ai_monitor",
        "json",
        "llmstruct.ai_self_monitor",
        "llmstruct.ai_workflow_middleware",
        "llmstruct.cursor_ai_bridge",
        "llmstruct.workflow_orchestrator",
        "os",
        "pathlib",
        "record_ai_usage",
        "subprocess",
        "sys"
      ],
      "hash": null,
      "artifact_id": "1f6e69f0-8203-42a3-bd59-15083ec2b1e0"
    },
    {
      "module_id": "quick_ws_test",
      "path": "quick_ws_test.py",
      "category": "core",
      "module_doc": "Quick WebSocket Test Script",
      "functions": [
        {
          "name": "test_websocket",
          "docstring": "Test WebSocket with automatic messages",
          "line_range": [
            11,
            65
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_websocket": [
          "json.dumps",
          "data.get",
          "json.loads",
          "websockets.connect",
          "print",
          "len",
          "websocket.recv",
          "asyncio.sleep",
          "websocket.send"
        ]
      },
      "dependencies": [
        "asyncio",
        "json",
        "sys",
        "websockets"
      ],
      "hash": null,
      "artifact_id": "5dba3504-ab29-491f-9bf5-0d69bc1db5f9"
    },
    {
      "module_id": "verify_llm_response",
      "path": "verify_llm_response.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_json_file",
          "docstring": "Load a JSON file and return its contents.",
          "line_range": [
            15,
            25
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "verify_response_with_struct",
          "docstring": "Verify llm_response.json against struct.json.",
          "line_range": [
            28,
            71
          ],
          "parameters": [
            "response_text",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "verify_response_without_struct",
          "docstring": "Verify llm_response.json based on LLMstruct principles.",
          "line_range": [
            74,
            108
          ],
          "parameters": [
            "response_text"
          ],
          "decorators": []
        },
        {
          "name": "generate_metrics",
          "docstring": "Generate metrics for the response per EXT-004.",
          "line_range": [
            111,
            141
          ],
          "parameters": [
            "response_data",
            "server_log"
          ],
          "decorators": []
        },
        {
          "name": "update_tasks_json",
          "docstring": "Append a new task to tasks.json.",
          "line_range": [
            144,
            151
          ],
          "parameters": [
            "tasks_file",
            "new_task"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            154,
            225
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json_file": [
          "json.load",
          "logging.error",
          "open"
        ],
        "verify_response_with_struct": [
          "e.startswith",
          "set",
          "expected_goals.issubset",
          "struct_data.get",
          "expected_files.issubset",
          "logging.error",
          "re.findall",
          "expected_extensions.issubset",
          "logging.info"
        ],
        "verify_response_without_struct": [
          "set",
          "response_text.lower",
          "principle.lower",
          "expected_goals.issubset",
          "expected_files.issubset",
          "logging.error",
          "re.findall",
          "expected_extensions.issubset",
          "logging.info"
        ],
        "generate_metrics": [
          "datetime.utcnow",
          "server_log.get",
          "response_text.split",
          "len",
          "re.findall"
        ],
        "update_tasks_json": [
          "open",
          "json.dump",
          "load_json_file",
          "tasks.get",
          "logging.info"
        ],
        "main": [
          "argparse.ArgumentParser",
          "generate_metrics",
          "update_tasks_json",
          "open",
          "json.dump",
          "parser.add_argument",
          "load_json_file",
          "verify_response_with_struct",
          "parser.parse_args",
          "verify_response_without_struct",
          "logging.info"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "argparse",
        "datetime",
        "json",
        "logging",
        "os",
        "re",
        "typing"
      ],
      "hash": null,
      "artifact_id": "669a891d-89a9-419c-ad13-49f3f4d582f5"
    },
    {
      "module_id": "struct_cache_manager",
      "path": "struct_cache_manager.py",
      "category": "core",
      "module_doc": "\ud83d\ude80 Smart struct.json Cache Manager for [code] Mode\n\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u0431\u044b\u0441\u0442\u0440\u043e\u0433\u043e \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
      "functions": [
        {
          "name": "test_cache_performance",
          "docstring": "\u0422\u0435\u0441\u0442 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u0435\u0448\u0430",
          "line_range": [
            321,
            355
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            17,
            29
          ],
          "parameters": [
            "self",
            "struct_file"
          ],
          "decorators": []
        },
        {
          "name": "get_file_hash",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0445\u0435\u0448 \u0444\u0430\u0439\u043b\u0430 struct.json \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439",
          "line_range": [
            31,
            38
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "is_cache_valid",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0441\u0442\u044c \u043a\u0435\u0448\u0430",
          "line_range": [
            40,
            54
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "build_cache",
          "docstring": "\u0421\u0442\u0440\u043e\u0438\u0442 \u043f\u043e\u043b\u043d\u044b\u0439 \u043a\u0435\u0448 \u0438\u0437 struct.json",
          "line_range": [
            56,
            150
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "search_modules",
          "docstring": "\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u043c\u043e\u0434\u0443\u043b\u0435\u0439",
          "line_range": [
            152,
            177
          ],
          "parameters": [
            "self",
            "query"
          ],
          "decorators": []
        },
        {
          "name": "search_functions",
          "docstring": "\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u0444\u0443\u043d\u043a\u0446\u0438\u0439",
          "line_range": [
            179,
            205
          ],
          "parameters": [
            "self",
            "query"
          ],
          "decorators": []
        },
        {
          "name": "search_classes",
          "docstring": "\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u043a\u043b\u0430\u0441\u0441\u043e\u0432",
          "line_range": [
            207,
            233
          ],
          "parameters": [
            "self",
            "query"
          ],
          "decorators": []
        },
        {
          "name": "get_module_details",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0434\u0435\u0442\u0430\u043b\u0438 \u043c\u043e\u0434\u0443\u043b\u044f",
          "line_range": [
            235,
            248
          ],
          "parameters": [
            "self",
            "module_name"
          ],
          "decorators": []
        },
        {
          "name": "get_cache_stats",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u043a\u0435\u0448\u0430",
          "line_range": [
            250,
            265
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "invalidate_cache",
          "docstring": "\u0418\u043d\u0432\u0430\u043b\u0438\u0434\u0438\u0440\u0443\u0435\u0442 \u043a\u0435\u0448",
          "line_range": [
            267,
            281
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "smart_search",
          "docstring": "\u0423\u043c\u043d\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u0432\u0441\u0435\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u043c \u0441 \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432",
          "line_range": [
            283,
            319
          ],
          "parameters": [
            "self",
            "query",
            "search_type"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "StructCacheManager",
          "docstring": "\u0423\u043c\u043d\u044b\u0439 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u043a\u0435\u0448\u0430 \u0434\u043b\u044f struct.json \u0432 \u0440\u0435\u0436\u0438\u043c\u0435 [code]",
          "line_range": [
            14,
            319
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                17,
                29
              ],
              "parameters": [
                "self",
                "struct_file"
              ]
            },
            {
              "name": "get_file_hash",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0445\u0435\u0448 \u0444\u0430\u0439\u043b\u0430 struct.json \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439",
              "line_range": [
                31,
                38
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "is_cache_valid",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0441\u0442\u044c \u043a\u0435\u0448\u0430",
              "line_range": [
                40,
                54
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "build_cache",
              "docstring": "\u0421\u0442\u0440\u043e\u0438\u0442 \u043f\u043e\u043b\u043d\u044b\u0439 \u043a\u0435\u0448 \u0438\u0437 struct.json",
              "line_range": [
                56,
                150
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "search_modules",
              "docstring": "\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u043c\u043e\u0434\u0443\u043b\u0435\u0439",
              "line_range": [
                152,
                177
              ],
              "parameters": [
                "self",
                "query"
              ]
            },
            {
              "name": "search_functions",
              "docstring": "\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u0444\u0443\u043d\u043a\u0446\u0438\u0439",
              "line_range": [
                179,
                205
              ],
              "parameters": [
                "self",
                "query"
              ]
            },
            {
              "name": "search_classes",
              "docstring": "\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u043a\u043b\u0430\u0441\u0441\u043e\u0432",
              "line_range": [
                207,
                233
              ],
              "parameters": [
                "self",
                "query"
              ]
            },
            {
              "name": "get_module_details",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0434\u0435\u0442\u0430\u043b\u0438 \u043c\u043e\u0434\u0443\u043b\u044f",
              "line_range": [
                235,
                248
              ],
              "parameters": [
                "self",
                "module_name"
              ]
            },
            {
              "name": "get_cache_stats",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u043a\u0435\u0448\u0430",
              "line_range": [
                250,
                265
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "invalidate_cache",
              "docstring": "\u0418\u043d\u0432\u0430\u043b\u0438\u0434\u0438\u0440\u0443\u0435\u0442 \u043a\u0435\u0448",
              "line_range": [
                267,
                281
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "smart_search",
              "docstring": "\u0423\u043c\u043d\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u0432\u0441\u0435\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u043c \u0441 \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432",
              "line_range": [
                283,
                319
              ],
              "parameters": [
                "self",
                "query",
                "search_type"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "print"
        ],
        "get_file_hash": [
          "open",
          "hashlib.md5",
          "f.read"
        ],
        "is_cache_valid": [
          "json.load",
          "open",
          "self.get_file_hash",
          "metadata.get"
        ],
        "build_cache": [
          "json.load",
          "f.get",
          "m.get",
          "print",
          "c.get",
          "datetime.now",
          "open",
          "json.dump",
          "len",
          "self.get_file_hash",
          "func.get",
          "cls.get",
          "module.get",
          "data.get",
          "time.time"
        ],
        "search_modules": [
          "query.lower",
          "json.load",
          "print",
          "modules.items",
          "open",
          "self.is_cache_valid",
          "len",
          "self.build_cache",
          "name.lower",
          "results.append"
        ],
        "search_functions": [
          "query.lower",
          "json.load",
          "print",
          "open",
          "self.is_cache_valid",
          "functions.items",
          "self.build_cache",
          "sorted",
          "name.lower",
          "results.append"
        ],
        "search_classes": [
          "query.lower",
          "json.load",
          "print",
          "open",
          "classes.items",
          "self.is_cache_valid",
          "len",
          "self.build_cache",
          "sorted",
          "name.lower",
          "results.append"
        ],
        "get_module_details": [
          "modules.get",
          "json.load",
          "print",
          "open",
          "self.is_cache_valid",
          "self.build_cache"
        ],
        "get_cache_stats": [
          "json.load",
          "open",
          "str",
          "self.is_cache_valid"
        ],
        "invalidate_cache": [
          "cache_file.exists",
          "cache_file.unlink",
          "print"
        ],
        "smart_search": [
          "query.lower",
          "json.load",
          "self.search_modules",
          "print",
          "open",
          "json.dump",
          "self.search_functions",
          "self.search_classes"
        ],
        "test_cache_performance": [
          "print",
          "stats.get",
          "len",
          "cache_manager.smart_search",
          "cache_manager.get_cache_stats",
          "StructCacheManager",
          "cache_manager.build_cache",
          "sum",
          "time.time"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "datetime",
        "hashlib",
        "json",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "cf91a13a-fd55-4d7a-b997-909317b7d1ec"
    },
    {
      "module_id": "grok",
      "path": "grok.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "test_grok",
          "docstring": "",
          "line_range": [
            24,
            30
          ],
          "parameters": [
            "api_key",
            "prompt",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "test_brok",
          "docstring": "",
          "line_range": [
            33,
            39
          ],
          "parameters": [
            "api_key",
            "prompt",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            6,
            11
          ],
          "parameters": [
            "self",
            "api_key",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "generate",
          "docstring": "",
          "line_range": [
            13,
            21
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GrokClient",
          "docstring": "",
          "line_range": [
            5,
            21
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                6,
                11
              ],
              "parameters": [
                "self",
                "api_key",
                "proxy"
              ]
            },
            {
              "name": "generate",
              "docstring": "",
              "line_range": [
                13,
                21
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "requests.Session"
        ],
        "generate": [
          "response.json",
          "prompt.split",
          "response.raise_for_status",
          "len"
        ],
        "test_grok": [
          "time.perf_counter",
          "GrokClient",
          "client.generate"
        ],
        "test_brok": [
          "time.perf_counter",
          "GrokClient",
          "client.generate"
        ]
      },
      "dependencies": [
        "requests",
        "time"
      ],
      "hash": null,
      "artifact_id": "88ace691-cfc7-4471-aa95-38c01dddb947"
    },
    {
      "module_id": "collector",
      "path": "collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "",
          "line_range": [
            13,
            17
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "is_text_file",
          "docstring": "Check if file is likely a text file based on extension.",
          "line_range": [
            20,
            31
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "collect_project",
          "docstring": "",
          "line_range": [
            34,
            66
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "Path",
          "gitignore_parser.parse_gitignore",
          "gitignore_path.exists"
        ],
        "is_text_file": [],
        "collect_project": [
          "is_text_file",
          "doc_files.items",
          "str",
          "any",
          "gitignore",
          "Path",
          "f.read",
          "open",
          "logger.error",
          "file_path.is_file",
          "json.dump",
          "logger.info",
          "logger.warning",
          "len",
          "load_gitignore",
          "root_dir.rglob"
        ]
      },
      "dependencies": [
        "Path",
        "gitignore_parser",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "9deac07d-1509-492b-950f-f3b3f4965d69"
    },
    {
      "module_id": ".ARCHIVE.parse_ollama_models",
      "path": ".ARCHIVE/parse_ollama_models.py",
      "category": "core",
      "module_doc": "\u041f\u0430\u0440\u0441\u0435\u0440 \u0441\u043f\u0438\u0441\u043a\u0430 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 Ollama \u0434\u043b\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430",
      "functions": [
        {
          "name": "parse_ollama_models",
          "docstring": "\u041f\u0430\u0440\u0441\u0438\u0442 \u0444\u0430\u0439\u043b \u0441\u043e \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u043c\u043e\u0434\u0435\u043b\u0435\u0439 Ollama \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435",
          "line_range": [
            8,
            44
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "parse_model_block",
          "docstring": "\u041f\u0430\u0440\u0441\u0438\u0442 \u0431\u043b\u043e\u043a \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043c\u043e\u0434\u0435\u043b\u0438",
          "line_range": [
            46,
            105
          ],
          "parameters": [
            "name",
            "block"
          ],
          "decorators": []
        },
        {
          "name": "categorize_models",
          "docstring": "\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044f\u043c \u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044e",
          "line_range": [
            107,
            156
          ],
          "parameters": [
            "models"
          ],
          "decorators": []
        },
        {
          "name": "analyze_for_rtx3060ti",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441 \u0442\u043e\u0447\u043a\u0438 \u0437\u0440\u0435\u043d\u0438\u044f \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u0438 \u0441 RTX 3060 Ti (8GB VRAM)",
          "line_range": [
            158,
            179
          ],
          "parameters": [
            "models"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "parse_ollama_models": [
          "models.append",
          "f.read",
          "open",
          "line.strip",
          "len",
          "content.split",
          "parse_model_block",
          "re.match",
          "current_block.append"
        ],
        "parse_model_block": [
          "line.isdigit",
          "capabilities.append",
          "enumerate",
          "prev_line.isdigit",
          "int",
          "sizes.append",
          "len",
          "re.match",
          "prev_line.replace"
        ],
        "categorize_models": [
          "any"
        ],
        "analyze_for_rtx3060ti": [
          "float",
          "compatible_models.append",
          "max",
          "sorted",
          "size.endswith"
        ]
      },
      "dependencies": [
        "json",
        "re"
      ],
      "hash": null,
      "artifact_id": "52e18ff3-7d5c-463f-ae12-91560ffdbcd1"
    },
    {
      "module_id": ".ARCHIVE.test_cli_demo",
      "path": ".ARCHIVE/test_cli_demo.py",
      "category": "test",
      "module_doc": "Quick CLI test to demonstrate new commands",
      "functions": [
        {
          "name": "test_interactive_cli",
          "docstring": "Test interactive CLI with new commands",
          "line_range": [
            10,
            69
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_interactive_cli": [
          "subprocess.run",
          "print"
        ]
      },
      "dependencies": [
        "subprocess",
        "sys",
        "time"
      ],
      "hash": null,
      "artifact_id": "499ee701-a1a2-495b-8770-31c7140b5335"
    },
    {
      "module_id": ".ARCHIVE.parse_ollama_full",
      "path": ".ARCHIVE/parse_ollama_full.py",
      "category": "core",
      "module_doc": "Full Ollama List Parser + Context Merger for Grok Consultation\nParses ollama_list.txt (2103 lines) and merges with existing context",
      "functions": [
        {
          "name": "parse_ollama_list",
          "docstring": "Parse ollama_list.txt and return structured data",
          "line_range": [
            11,
            92
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "convert_md_to_json",
          "docstring": "Convert markdown content to structured JSON",
          "line_range": [
            94,
            124
          ],
          "parameters": [
            "md_content"
          ],
          "decorators": []
        },
        {
          "name": "create_flattened_models_structure",
          "docstring": "Create a flattened structure that's more LLM-friendly",
          "line_range": [
            126,
            222
          ],
          "parameters": [
            "models"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            224,
            301
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "parse_pulls",
          "docstring": "",
          "line_range": [
            150,
            157
          ],
          "parameters": [
            "pulls_str"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "parse_ollama_list": [
          "line.isdigit",
          "models.append",
          "f.readlines",
          "any",
          "open",
          "current_model.get",
          "len",
          "line.endswith",
          "c.isdigit"
        ],
        "convert_md_to_json": [
          "current_content.append",
          "line.startswith",
          "md_content.split",
          "line.strip"
        ],
        "create_flattened_models_structure": [
          "len"
        ],
        "parse_pulls": [
          "pulls_str.endswith",
          "float"
        ],
        "main": [
          "parse_ollama_list",
          "create_flattened_models_structure",
          "print",
          "f.read",
          "enumerate",
          "convert_md_to_json",
          "open",
          "json.dump",
          "len"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "pathlib",
        "re"
      ],
      "hash": null,
      "artifact_id": "88df0b30-9f05-4c86-aeaa-3876d31595f9"
    },
    {
      "module_id": ".ARCHIVE.force_ai_integration",
      "path": ".ARCHIVE/force_ai_integration.py",
      "category": "core",
      "module_doc": "Force AI Integration Script\nInitializes middleware and monitoring to ensure AI uses llmstruct system.",
      "functions": [
        {
          "name": "force_ai_integration",
          "docstring": "Force AI to use llmstruct system.",
          "line_range": [
            18,
            106
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "check_integration_status",
          "docstring": "Check current AI integration status.",
          "line_range": [
            109,
            138
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "force_ai_integration": [
          "print",
          "str",
          "record_ai_usage",
          "Path",
          "open",
          "json.dump",
          "monitor.get_real_time_guidance",
          "initialize_ai_monitor",
          "config_file.exists",
          "middleware.process_ai_request",
          "initialize_ai_middleware"
        ],
        "check_integration_status": [
          "print",
          "middleware.get_middleware_stats",
          "get_ai_monitor",
          "get_ai_middleware",
          "monitor.analyze_behavior_trends"
        ]
      },
      "dependencies": [
        "AIWorkflowMode",
        "Path",
        "get_ai_middleware",
        "get_ai_monitor",
        "initialize_ai_middleware",
        "initialize_ai_monitor",
        "json",
        "llmstruct.ai_self_monitor",
        "llmstruct.ai_workflow_middleware",
        "pathlib",
        "record_ai_usage",
        "sys"
      ],
      "hash": null,
      "artifact_id": "20814c88-76e4-446b-8389-1228aca71137"
    },
    {
      "module_id": ".ARCHIVE.test_modular_cli",
      "path": ".ARCHIVE/test_modular_cli.py",
      "category": "test",
      "module_doc": "Test script for modular CLI structure",
      "functions": [
        {
          "name": "test_modular_cli",
          "docstring": "Test basic modular CLI functionality.",
          "line_range": [
            14,
            63
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_copilot_integration",
          "docstring": "Test Copilot integration.",
          "line_range": [
            65,
            100
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_modular_cli": [
          "CommandProcessor",
          "traceback.print_exc",
          "print",
          "CLIUtils",
          "create_cli_core",
          "utils.write_file_content",
          "len",
          "utils.read_file_content",
          "tempfile.TemporaryDirectory",
          "config.get_cache_config",
          "CLIConfig"
        ],
        "test_copilot_integration": [
          "manager.get_context_status",
          "traceback.print_exc",
          "print",
          "manager.close",
          "len",
          "CopilotEvent",
          "initialize_copilot",
          "tempfile.TemporaryDirectory"
        ]
      },
      "dependencies": [
        "CLIConfig",
        "CLICore",
        "CLIUtils",
        "CommandProcessor",
        "CopilotContextManager",
        "CopilotEvent",
        "Path",
        "create_cli_core",
        "initialize_copilot",
        "llmstruct.cli_commands",
        "llmstruct.cli_config",
        "llmstruct.cli_core",
        "llmstruct.cli_utils",
        "llmstruct.copilot",
        "os",
        "pathlib",
        "sys",
        "tempfile",
        "traceback"
      ],
      "hash": null,
      "artifact_id": "e33f37fd-35e3-4f3f-b25a-0375c03e841f"
    },
    {
      "module_id": ".ARCHIVE.test_websocket",
      "path": ".ARCHIVE/test_websocket.py",
      "category": "test",
      "module_doc": "WebSocket Chat Client\n\nSimple client to test WebSocket chat functionality",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            15,
            16
          ],
          "parameters": [
            "self",
            "url"
          ],
          "decorators": []
        },
        {
          "name": "connect_and_chat",
          "docstring": "Connect to WebSocket and start interactive chat",
          "line_range": [
            18,
            53
          ],
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "listen_for_messages",
          "docstring": "Listen for messages from server",
          "line_range": [
            55,
            65
          ],
          "parameters": [
            "self",
            "websocket"
          ],
          "decorators": []
        },
        {
          "name": "handle_server_message",
          "docstring": "Handle incoming server messages",
          "line_range": [
            67,
            97
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ChatClient",
          "docstring": "",
          "line_range": [
            14,
            97
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                15,
                16
              ],
              "parameters": [
                "self",
                "url"
              ]
            },
            {
              "name": "connect_and_chat",
              "docstring": "Connect to WebSocket and start interactive chat",
              "line_range": [
                18,
                53
              ],
              "parameters": [
                "self",
                "session_id"
              ]
            },
            {
              "name": "listen_for_messages",
              "docstring": "Listen for messages from server",
              "line_range": [
                55,
                65
              ],
              "parameters": [
                "self",
                "websocket"
              ]
            },
            {
              "name": "handle_server_message",
              "docstring": "Handle incoming server messages",
              "line_range": [
                67,
                97
              ],
              "parameters": [
                "self",
                "data"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "connect_and_chat": [
          "json.dumps",
          "input",
          "user_input.lower",
          "self.listen_for_messages",
          "websockets.connect",
          "print",
          "asyncio.create_task",
          "websocket.send"
        ],
        "listen_for_messages": [
          "print",
          "json.loads",
          "self.handle_server_message"
        ],
        "handle_server_message": [
          "context_info.get",
          "data.get",
          "print"
        ]
      },
      "dependencies": [
        "asyncio",
        "datetime",
        "json",
        "sys",
        "websockets"
      ],
      "hash": null,
      "artifact_id": "a923ab9a-7ecb-40da-b239-c11719f37103"
    },
    {
      "module_id": ".ARCHIVE.final_system_check",
      "path": ".ARCHIVE/final_system_check.py",
      "category": "core",
      "module_doc": "Final System Status Check - LLMStruct Modular CLI Integration\nComprehensive validation of all completed components",
      "functions": [
        {
          "name": "check_system_status",
          "docstring": "Comprehensive system status check",
          "line_range": [
            12,
            155
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "check_system_status": [
          "json.load",
          "print",
          "open",
          "t.get",
          "i.get",
          "len",
          "data.get"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "os",
        "pathlib",
        "sys"
      ],
      "hash": null,
      "artifact_id": "7c2ea6d6-fad5-4de3-9656-113f4a6cf28e"
    },
    {
      "module_id": ".ARCHIVE.telegram_bot_final",
      "path": ".ARCHIVE/telegram_bot_final.py",
      "category": "core",
      "module_doc": "\ud83c\udfaf \u0424\u0418\u041d\u0410\u041b\u042c\u041d\u0410\u042f \u0432\u0435\u0440\u0441\u0438\u044f Telegram \u0431\u043e\u0442\u0430 \u0434\u043b\u044f LLMStruct\n- \u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 FastAPI \u2705\n- \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 SSL \u043e\u0448\u0438\u0431\u043e\u043a \u2705  \n- \u0410\u0432\u0442\u043e\u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u2705\n- \u041f\u043e\u043b\u043d\u043e\u0435 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u2705",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": [
            292,
            325
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            42,
            53
          ],
          "parameters": [
            "self",
            "token",
            "api_base_url"
          ],
          "decorators": []
        },
        {
          "name": "get_session",
          "docstring": "",
          "line_range": [
            55,
            59
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "api_call",
          "docstring": "\u0423\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u044b\u0439 \u0432\u044b\u0437\u043e\u0432 API \u0441 \u043f\u043e\u0432\u0442\u043e\u0440\u0430\u043c\u0438",
          "line_range": [
            61,
            92
          ],
          "parameters": [
            "self",
            "endpoint",
            "method",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "save_user_message",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            94,
            106
          ],
          "parameters": [
            "self",
            "user_id",
            "username",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "get_user_history",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            108,
            116
          ],
          "parameters": [
            "self",
            "user_id",
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "chat_with_ollama",
          "docstring": "\u0427\u0430\u0442 \u0441 Ollama",
          "line_range": [
            118,
            133
          ],
          "parameters": [
            "self",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "get_system_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            135,
            137
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "setup_handlers",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432",
          "line_range": [
            139,
            150
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "start_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
          "line_range": [
            152,
            176
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "status_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /status",
          "line_range": [
            178,
            200
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "memory_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /memory",
          "line_range": [
            202,
            222
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "help_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /help",
          "line_range": [
            224,
            243
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
          "line_range": [
            245,
            272
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "error_handler",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u043e\u0448\u0438\u0431\u043e\u043a",
          "line_range": [
            274,
            284
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "cleanup",
          "docstring": "\u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432",
          "line_range": [
            286,
            290
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "FinalLLMStructBot",
          "docstring": "",
          "line_range": [
            41,
            290
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                42,
                53
              ],
              "parameters": [
                "self",
                "token",
                "api_base_url"
              ]
            },
            {
              "name": "get_session",
              "docstring": "",
              "line_range": [
                55,
                59
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "api_call",
              "docstring": "\u0423\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u044b\u0439 \u0432\u044b\u0437\u043e\u0432 API \u0441 \u043f\u043e\u0432\u0442\u043e\u0440\u0430\u043c\u0438",
              "line_range": [
                61,
                92
              ],
              "parameters": [
                "self",
                "endpoint",
                "method",
                "data"
              ]
            },
            {
              "name": "save_user_message",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
              "line_range": [
                94,
                106
              ],
              "parameters": [
                "self",
                "user_id",
                "username",
                "message"
              ]
            },
            {
              "name": "get_user_history",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
              "line_range": [
                108,
                116
              ],
              "parameters": [
                "self",
                "user_id",
                "limit"
              ]
            },
            {
              "name": "chat_with_ollama",
              "docstring": "\u0427\u0430\u0442 \u0441 Ollama",
              "line_range": [
                118,
                133
              ],
              "parameters": [
                "self",
                "message"
              ]
            },
            {
              "name": "get_system_status",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
              "line_range": [
                135,
                137
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "setup_handlers",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432",
              "line_range": [
                139,
                150
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "start_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
              "line_range": [
                152,
                176
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "status_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /status",
              "line_range": [
                178,
                200
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "memory_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /memory",
              "line_range": [
                202,
                222
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "help_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /help",
              "line_range": [
                224,
                243
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
              "line_range": [
                245,
                272
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "error_handler",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u043e\u0448\u0438\u0431\u043e\u043a",
              "line_range": [
                274,
                284
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "cleanup",
              "docstring": "\u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432",
              "line_range": [
                286,
                290
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "logger.info",
          "self.setup_handlers",
          "Application.builder"
        ],
        "get_session": [
          "aiohttp.ClientSession",
          "aiohttp.ClientTimeout"
        ],
        "api_call": [
          "range",
          "session.post",
          "response.json",
          "session.get",
          "logger.error",
          "logger.debug",
          "logger.warning",
          "self.get_session",
          "asyncio.sleep"
        ],
        "save_user_message": [
          "logger.info",
          "self.api_call",
          "datetime.now"
        ],
        "get_user_history": [
          "result.get",
          "self.api_call",
          "len",
          "logger.info"
        ],
        "chat_with_ollama": [
          "result.get",
          "self.api_call",
          "logger.error",
          "logger.info"
        ],
        "get_system_status": [
          "self.api_call"
        ],
        "setup_handlers": [
          "MessageHandler",
          "logger.info",
          "CommandHandler"
        ],
        "start_command": [
          "logger.info",
          "self.save_user_message",
          "logger.error"
        ],
        "status_command": [
          "self.get_system_status",
          "logger.error",
          "logger.info",
          "self.save_user_message",
          "status.get"
        ],
        "memory_command": [
          "enumerate",
          "logger.error",
          "logger.info",
          "self.get_user_history",
          "self.save_user_message",
          "msg.get"
        ],
        "help_command": [
          "logger.info",
          "logger.error"
        ],
        "handle_message": [
          "self.chat_with_ollama",
          "logger.error",
          "logger.info",
          "self.save_user_message",
          "thinking_msg.edit_text"
        ],
        "error_handler": [
          "logger.info",
          "asyncio.sleep",
          "logger.error",
          "isinstance"
        ],
        "cleanup": [
          "logger.info"
        ],
        "main": [
          "print",
          "os.getenv",
          "logger.error",
          "logger.info",
          "FinalLLMStructBot",
          "BotCommand"
        ]
      },
      "dependencies": [
        "Application",
        "BotCommand",
        "CommandHandler",
        "ContextTypes",
        "MessageHandler",
        "NetworkError",
        "Path",
        "RetryAfter",
        "TimedOut",
        "Update",
        "aiohttp",
        "asyncio",
        "datetime",
        "filters",
        "json",
        "logging",
        "os",
        "pathlib",
        "telegram",
        "telegram.error",
        "telegram.ext",
        "time"
      ],
      "hash": null,
      "artifact_id": "ecc5ee3f-7ac4-439a-bd80-d07d6f1eaacc"
    },
    {
      "module_id": ".ARCHIVE.parse_ollama_for_grok",
      "path": ".ARCHIVE/parse_ollama_for_grok.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "e3161b75-0f18-46cd-9d6d-5721b725288e"
    },
    {
      "module_id": ".ARCHIVE.final_system_validation",
      "path": ".ARCHIVE/final_system_validation.py",
      "category": "core",
      "module_doc": "Final system validation script for LLMStruct Modular CLI Integration",
      "functions": [
        {
          "name": "main",
          "docstring": "Run comprehensive system validation",
          "line_range": [
            13,
            238
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "main": [
          "status.upper",
          "__import__",
          "next",
          "json.load",
          "print",
          "getattr",
          "open",
          "create_cli_core",
          "subprocess.run",
          "len",
          "task.get"
        ]
      },
      "dependencies": [
        "Path",
        "create_cli_core",
        "json",
        "llmstruct.cli_core",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "time"
      ],
      "hash": null,
      "artifact_id": "3014e990-945c-464e-a5ac-c6dc731f8c87"
    },
    {
      "module_id": ".ARCHIVE.test_ai_cli_debug",
      "path": ".ARCHIVE/test_ai_cli_debug.py",
      "category": "test",
      "module_doc": "Simple test for AI CLI Integration - Debug Version",
      "functions": [
        {
          "name": "test_basic_functionality",
          "docstring": "Test basic functionality step by step.",
          "line_range": [
            14,
            80
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_ai_self_awareness",
          "docstring": "Test the main AI self-awareness system.",
          "line_range": [
            82,
            116
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_basic_functionality": [
          "AISelfAwarenessCLIIntegration",
          "traceback.print_exc",
          "str",
          "print",
          "status_result.get",
          "integration.get_integration_summary",
          "len",
          "integration.integrate_ai_status_command"
        ],
        "test_ai_self_awareness": [
          "traceback.print_exc",
          "print",
          "str",
          "discovery.discover_all_capabilities",
          "discovery.get_enhanced_capabilities_summary",
          "len",
          "SystemCapabilityDiscovery"
        ]
      },
      "dependencies": [
        "AISelfAwarenessCLIIntegration",
        "Path",
        "SystemCapabilityDiscovery",
        "os",
        "pathlib",
        "src.llmstruct.ai_cli_integration",
        "src.llmstruct.ai_self_awareness",
        "sys",
        "traceback"
      ],
      "hash": null,
      "artifact_id": "a963ef38-0890-4c4a-b8d4-9a06166b8a31"
    },
    {
      "module_id": ".ARCHIVE.test_audit",
      "path": ".ARCHIVE/test_audit.py",
      "category": "test",
      "module_doc": "Test script for audit functionality.",
      "functions": [
        {
          "name": "test_audit_status",
          "docstring": "Test audit status directly.",
          "line_range": [
            7,
            49
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_audit_status": [
          "json.load",
          "print",
          "ideas_file.exists",
          "list",
          "Path",
          "open",
          "tasks_data.keys",
          "t.get",
          "i.get",
          "len",
          "ideas_data.keys",
          "tasks_file.exists"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "f966ec6f-5ad2-4211-a0e8-40c36718c6f0"
    },
    {
      "module_id": ".ARCHIVE.test_bot_functionality",
      "path": ".ARCHIVE/test_bot_functionality.py",
      "category": "test",
      "module_doc": "\ud83e\uddea Comprehensive Bot Functionality Test\n\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0432\u0441\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 FastAPI + Telegram Bot:\n- \u0427\u0442\u0435\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u043e\u0432\n- \u0417\u0430\u043f\u0438\u0441\u044c \u0432 /tmp (\u0441\u0438\u043c\u0443\u043b\u044f\u0446\u0438\u044f \u043a\u043e\u0440\u043d\u044f)  \n- \u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u043e\u0432\n- \u041f\u0430\u043c\u044f\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439\n- API \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435\n- struct.json \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            21,
            31
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_api_health",
          "docstring": "Test 1: API Health Check",
          "line_range": [
            33,
            50
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_file_reading",
          "docstring": "Test 2: File Reading Capability",
          "line_range": [
            52,
            69
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_file_writing",
          "docstring": "Test 3: File Writing (\u0432 /tmp \u043a\u0430\u043a \u0441\u0438\u043c\u0443\u043b\u044f\u0446\u0438\u044f \u043a\u043e\u0440\u043d\u044f)",
          "line_range": [
            71,
            96
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_file_editing",
          "docstring": "Test 4: File Editing",
          "line_range": [
            98,
            124
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_memory_system",
          "docstring": "Test 5: Memory System",
          "line_range": [
            126,
            160
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_struct_json_analysis",
          "docstring": "Test 6: struct.json Analysis and Caching Strategy",
          "line_range": [
            162,
            222
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_api_communication",
          "docstring": "Test 7: API Communication",
          "line_range": [
            224,
            254
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_telegram_logs",
          "docstring": "Test 8: Telegram Message Logging",
          "line_range": [
            256,
            295
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_all_tests",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0432\u0441\u0435\u0445 \u0442\u0435\u0441\u0442\u043e\u0432",
          "line_range": [
            297,
            347
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "BotFunctionalityTester",
          "docstring": "",
          "line_range": [
            20,
            347
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                21,
                31
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_api_health",
              "docstring": "Test 1: API Health Check",
              "line_range": [
                33,
                50
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_file_reading",
              "docstring": "Test 2: File Reading Capability",
              "line_range": [
                52,
                69
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_file_writing",
              "docstring": "Test 3: File Writing (\u0432 /tmp \u043a\u0430\u043a \u0441\u0438\u043c\u0443\u043b\u044f\u0446\u0438\u044f \u043a\u043e\u0440\u043d\u044f)",
              "line_range": [
                71,
                96
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_file_editing",
              "docstring": "Test 4: File Editing",
              "line_range": [
                98,
                124
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_memory_system",
              "docstring": "Test 5: Memory System",
              "line_range": [
                126,
                160
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_struct_json_analysis",
              "docstring": "Test 6: struct.json Analysis and Caching Strategy",
              "line_range": [
                162,
                222
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_api_communication",
              "docstring": "Test 7: API Communication",
              "line_range": [
                224,
                254
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_telegram_logs",
              "docstring": "Test 8: Telegram Message Logging",
              "line_range": [
                256,
                295
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run_all_tests",
              "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0432\u0441\u0435\u0445 \u0442\u0435\u0441\u0442\u043e\u0432",
              "line_range": [
                297,
                347
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "print"
        ],
        "test_api_health": [
          "response.json",
          "session.get",
          "aiohttp.ClientSession",
          "print"
        ],
        "test_file_reading": [
          "test_file.write_text",
          "test_file.read_text",
          "len",
          "print"
        ],
        "test_file_writing": [
          "new_file.write_text",
          "datetime.now",
          "print",
          "new_file.stat"
        ],
        "test_file_editing": [
          "edit_file.read_text",
          "content.replace",
          "print",
          "len",
          "edit_file.write_text"
        ],
        "test_memory_system": [
          "json.load",
          "memory_file.exists",
          "print",
          "datetime.now",
          "Path",
          "open",
          "json.dump",
          "len",
          "sum",
          "memory_data.values"
        ],
        "test_struct_json_analysis": [
          "json.load",
          "print",
          "stats.get",
          "open",
          "json.dump",
          "metadata.get",
          "data.get",
          "time.time"
        ],
        "test_api_communication": [
          "session.post",
          "print",
          "response.json",
          "len",
          "response.text",
          "aiohttp.ClientSession",
          "data.get"
        ],
        "test_telegram_logs": [
          "cursor_log.stat",
          "datetime.now",
          "user_log.stat",
          "print",
          "Path",
          "open",
          "cursor_log.exists",
          "logs_dir.mkdir",
          "user_log.exists",
          "f.write"
        ],
        "run_all_tests": [
          "results.append",
          "print",
          "asyncio.iscoroutine",
          "self.test_telegram_logs",
          "self.test_api_communication",
          "self.test_memory_system",
          "self.test_file_reading",
          "self.test_file_writing",
          "self.test_file_editing",
          "self.test_struct_json_analysis",
          "len",
          "self.test_api_health"
        ]
      },
      "dependencies": [
        "Path",
        "aiohttp",
        "asyncio",
        "datetime",
        "json",
        "pathlib",
        "time"
      ],
      "hash": null,
      "artifact_id": "fbd2dd9c-0af5-4d95-a7bf-5af8ebe377a0"
    },
    {
      "module_id": ".ARCHIVE.debug_terminal",
      "path": ".ARCHIVE/debug_terminal.py",
      "category": "core",
      "module_doc": "Debug Terminal Script - Fallback for when terminal output is not visible\nSaves all output to files for manual inspection",
      "functions": [
        {
          "name": "run_with_output_capture",
          "docstring": "Run command and capture output to both console and file.",
          "line_range": [
            13,
            78
          ],
          "parameters": [
            "command",
            "description"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Run common diagnostic commands with output capture.",
          "line_range": [
            80,
            110
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "run_with_output_capture": [
          "print",
          "open",
          "subprocess.run",
          "len",
          "f.write"
        ],
        "main": [
          "run_with_output_capture",
          "print",
          "results.append"
        ]
      },
      "dependencies": [
        "Path",
        "datetime",
        "os",
        "pathlib",
        "subprocess",
        "sys"
      ],
      "hash": null,
      "artifact_id": "bc5ab58b-5510-44ee-b92f-f4544115437c"
    },
    {
      "module_id": ".ARCHIVE.test_export",
      "path": ".ARCHIVE/test_export.py",
      "category": "test",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "Path",
        "json",
        "pathlib",
        "sys"
      ],
      "hash": null,
      "artifact_id": "5bca5035-18e9-47af-a8e2-0b049cfd79b5"
    },
    {
      "module_id": ".ARCHIVE.telegram_bot_enhanced",
      "path": ".ARCHIVE/telegram_bot_enhanced.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "fd78a8f6-a98c-414b-8cd6-fa796a0d22c2"
    },
    {
      "module_id": ".ARCHIVE.test_api",
      "path": ".ARCHIVE/test_api.py",
      "category": "test",
      "module_doc": "Test script for LLMStruct FastAPI",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "app",
        "llmstruct.api.app",
        "os",
        "sys",
        "uvicorn"
      ],
      "hash": null,
      "artifact_id": "e4fc1b07-3ddd-4b9f-a364-45ebbaa601af"
    },
    {
      "module_id": ".ARCHIVE.parse_ollama_minimal",
      "path": ".ARCHIVE/parse_ollama_minimal.py",
      "category": "core",
      "module_doc": "Minimal Ollama Parser - Clean JSON without extra analytics\nJust structure original data properly, remove irrelevant entries",
      "functions": [
        {
          "name": "parse_ollama_minimal",
          "docstring": "Minimal parser - just clean structure",
          "line_range": [
            10,
            90
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "create_compact_json",
          "docstring": "Create compact JSON structure",
          "line_range": [
            92,
            137
          ],
          "parameters": [
            "models",
            "md_content"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            139,
            177
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "parse_ollama_minimal": [
          "line.isdigit",
          "f.readlines",
          "any",
          "models.append",
          "open",
          "line.strip",
          "len",
          "line.endswith",
          "c.isdigit"
        ],
        "create_compact_json": [
          "line.strip",
          "len",
          "current_content.append",
          "line.startswith",
          "md_content.split"
        ],
        "main": [
          "enumerate",
          "print",
          "f.read",
          "create_compact_json",
          "f.readlines",
          "open",
          "json.dump",
          "len",
          "parse_ollama_minimal"
        ]
      },
      "dependencies": [
        "json",
        "os",
        "re"
      ],
      "hash": null,
      "artifact_id": "2da7032d-a328-443f-896d-b196dcd5bde6"
    },
    {
      "module_id": ".ARCHIVE.chat_bot_final",
      "path": ".ARCHIVE/chat_bot_final.py",
      "category": "core",
      "module_doc": "LLMStruct Chat Bot Final - \u041f\u043e\u043b\u043d\u0430\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 FastAPI\n\u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u043f\u0440\u043e\u0431\u043b\u0435\u043c: API \u0432\u043c\u0435\u0441\u0442\u043e CLI, \u0431\u0435\u0437 Markdown parse_mode, \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u043f\u0430\u043c\u044f\u0442\u044c",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            31,
            47
          ],
          "parameters": [
            "self",
            "token"
          ],
          "decorators": []
        },
        {
          "name": "get_http_session",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 HTTP \u0441\u0435\u0441\u0441\u0438\u0438 \u0434\u043b\u044f API \u0432\u044b\u0437\u043e\u0432\u043e\u0432",
          "line_range": [
            49,
            53
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "api_call",
          "docstring": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f API \u0432\u044b\u0437\u043e\u0432\u043e\u0432",
          "line_range": [
            55,
            69
          ],
          "parameters": [
            "self",
            "endpoint",
            "method",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "save_user_memory",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 API",
          "line_range": [
            71,
            78
          ],
          "parameters": [
            "self",
            "user_id",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "get_user_history",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 API",
          "line_range": [
            80,
            83
          ],
          "parameters": [
            "self",
            "user_id",
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "chat_with_ollama",
          "docstring": "\u041e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441 Ollama \u0447\u0435\u0440\u0435\u0437 API",
          "line_range": [
            85,
            100
          ],
          "parameters": [
            "self",
            "message",
            "user_id"
          ],
          "decorators": []
        },
        {
          "name": "get_system_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0447\u0435\u0440\u0435\u0437 API",
          "line_range": [
            102,
            104
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_available_models",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0447\u0435\u0440\u0435\u0437 API",
          "line_range": [
            106,
            109
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "log_user_message",
          "docstring": "\u041b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            111,
            124
          ],
          "parameters": [
            "self",
            "user_info",
            "message",
            "chat_id"
          ],
          "decorators": []
        },
        {
          "name": "setup_handlers",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434",
          "line_range": [
            126,
            133
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "start_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
          "line_range": [
            135,
            162
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "help_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /help",
          "line_range": [
            164,
            186
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "status_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /status",
          "line_range": [
            188,
            205
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "memory_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /memory",
          "line_range": [
            207,
            221
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "models_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /models",
          "line_range": [
            223,
            234
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
          "line_range": [
            236,
            255
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "cleanup",
          "docstring": "\u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432",
          "line_range": [
            257,
            260
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "signal_handler",
          "docstring": "",
          "line_range": [
            266,
            268
          ],
          "parameters": [
            "sig",
            "frame"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "FinalLLMStructBot",
          "docstring": "\u0424\u0438\u043d\u0430\u043b\u044c\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u0431\u043e\u0442\u0430 \u0441 \u043f\u043e\u043b\u043d\u043e\u0439 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 FastAPI",
          "line_range": [
            28,
            260
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                31,
                47
              ],
              "parameters": [
                "self",
                "token"
              ]
            },
            {
              "name": "get_http_session",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 HTTP \u0441\u0435\u0441\u0441\u0438\u0438 \u0434\u043b\u044f API \u0432\u044b\u0437\u043e\u0432\u043e\u0432",
              "line_range": [
                49,
                53
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "api_call",
              "docstring": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f API \u0432\u044b\u0437\u043e\u0432\u043e\u0432",
              "line_range": [
                55,
                69
              ],
              "parameters": [
                "self",
                "endpoint",
                "method",
                "data"
              ]
            },
            {
              "name": "save_user_memory",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 API",
              "line_range": [
                71,
                78
              ],
              "parameters": [
                "self",
                "user_id",
                "message"
              ]
            },
            {
              "name": "get_user_history",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 API",
              "line_range": [
                80,
                83
              ],
              "parameters": [
                "self",
                "user_id",
                "limit"
              ]
            },
            {
              "name": "chat_with_ollama",
              "docstring": "\u041e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441 Ollama \u0447\u0435\u0440\u0435\u0437 API",
              "line_range": [
                85,
                100
              ],
              "parameters": [
                "self",
                "message",
                "user_id"
              ]
            },
            {
              "name": "get_system_status",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0447\u0435\u0440\u0435\u0437 API",
              "line_range": [
                102,
                104
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_available_models",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0447\u0435\u0440\u0435\u0437 API",
              "line_range": [
                106,
                109
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "log_user_message",
              "docstring": "\u041b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
              "line_range": [
                111,
                124
              ],
              "parameters": [
                "self",
                "user_info",
                "message",
                "chat_id"
              ]
            },
            {
              "name": "setup_handlers",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434",
              "line_range": [
                126,
                133
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "start_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
              "line_range": [
                135,
                162
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "help_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /help",
              "line_range": [
                164,
                186
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "status_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /status",
              "line_range": [
                188,
                205
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "memory_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /memory",
              "line_range": [
                207,
                221
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "models_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /models",
              "line_range": [
                223,
                234
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
              "line_range": [
                236,
                255
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "cleanup",
              "docstring": "\u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432",
              "line_range": [
                257,
                260
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "logger.info",
          "Path",
          "Application.builder",
          "self.setup_handlers"
        ],
        "get_http_session": [
          "aiohttp.ClientSession"
        ],
        "api_call": [
          "session.post",
          "self.get_http_session",
          "str",
          "response.json",
          "session.get",
          "logger.error"
        ],
        "save_user_memory": [
          "self.api_call",
          "datetime.now"
        ],
        "get_user_history": [
          "result.get",
          "self.api_call"
        ],
        "chat_with_ollama": [
          "self.api_call",
          "self.get_user_history",
          "h.get",
          "result.get"
        ],
        "get_system_status": [
          "self.api_call"
        ],
        "get_available_models": [
          "result.get",
          "self.api_call"
        ],
        "log_user_message": [
          "user_info.get",
          "open",
          "f.write",
          "datetime.now"
        ],
        "setup_handlers": [
          "MessageHandler",
          "CommandHandler"
        ],
        "start_command": [
          "self.log_user_message"
        ],
        "help_command": [],
        "status_command": [
          "self.get_system_status",
          "status.get"
        ],
        "memory_command": [
          "self.get_user_history",
          "msg.get",
          "enumerate",
          "str"
        ],
        "models_command": [
          "self.get_available_models"
        ],
        "handle_message": [
          "self.log_user_message",
          "self.save_user_memory",
          "self.chat_with_ollama",
          "str"
        ],
        "cleanup": [],
        "signal_handler": [
          "logger.info",
          "sys.exit"
        ]
      },
      "dependencies": [
        "Any",
        "Application",
        "BotCommand",
        "CommandHandler",
        "ContextTypes",
        "Dict",
        "MessageHandler",
        "Optional",
        "Path",
        "Update",
        "aiohttp",
        "asyncio",
        "datetime",
        "filters",
        "json",
        "logging",
        "os",
        "pathlib",
        "signal",
        "sys",
        "telegram",
        "telegram.ext",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "68fc8707-0009-469c-92a5-7f0a0e4a1ac0"
    },
    {
      "module_id": ".ARCHIVE.monitor_system",
      "path": ".ARCHIVE/monitor_system.py",
      "category": "core",
      "module_doc": "System Monitor - Continuous logging for debugging terminal issues\nRuns in background and logs system status to files",
      "functions": [
        {
          "name": "log_system_status",
          "docstring": "Log current system status to file.",
          "line_range": [
            15,
            60
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Run continuous monitoring.",
          "line_range": [
            62,
            86
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "log_system_status": [
          "json.dumps",
          "timestamp.strftime",
          "str",
          "Path",
          "open",
          "len",
          "timestamp.isoformat",
          "wo.get_current_context",
          "f.write",
          "WorkflowOrchestrator",
          "context.get"
        ],
        "main": [
          "log_system_status",
          "time.sleep",
          "len",
          "print"
        ]
      },
      "dependencies": [
        "Path",
        "WorkflowOrchestrator",
        "datetime",
        "json",
        "llmstruct.workflow_orchestrator",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "time"
      ],
      "hash": null,
      "artifact_id": "3a1dbf06-f1c8-4d4e-8756-e138140db996"
    },
    {
      "module_id": ".ARCHIVE.ollama_full_parser",
      "path": ".ARCHIVE/ollama_full_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "1550efa7-d14f-4f82-ad77-a2e07a220867"
    },
    {
      "module_id": ".ARCHIVE.test_enhanced_ai_awareness",
      "path": ".ARCHIVE/test_enhanced_ai_awareness.py",
      "category": "test",
      "module_doc": "Test script for AI Self-Awareness Enhancement with Unused Function Integration",
      "functions": [
        {
          "name": "test_enhanced_ai_self_awareness",
          "docstring": "Test the enhanced AI self-awareness system.",
          "line_range": [
            12,
            48
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_enhanced_ai_self_awareness": [
          "traceback.print_exc",
          "print",
          "discovery.discover_all_capabilities",
          "integration_metrics.get",
          "discovery.get_comprehensive_ai_status",
          "SystemCapabilityDiscovery"
        ]
      },
      "dependencies": [
        "SystemCapabilityDiscovery",
        "os",
        "src.llmstruct.ai_self_awareness",
        "sys",
        "traceback"
      ],
      "hash": null,
      "artifact_id": "d8998ca5-3e5f-4f94-80c7-e559a795b0e2"
    },
    {
      "module_id": ".ARCHIVE.telegram_bot_test",
      "path": ".ARCHIVE/telegram_bot_test.py",
      "category": "core",
      "module_doc": "\ud83e\uddea \u0422\u0435\u0441\u0442\u043e\u0432\u044b\u0439 Telegram \u0431\u043e\u0442 \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0441 FastAPI\n\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u0434\u043b\u044f \u0444\u043e\u0440\u0433\u0440\u0430\u0443\u043d\u0434 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": [
            238,
            266
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            34,
            43
          ],
          "parameters": [
            "self",
            "token",
            "api_base_url"
          ],
          "decorators": []
        },
        {
          "name": "get_session",
          "docstring": "",
          "line_range": [
            45,
            48
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "api_call",
          "docstring": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u0432\u044b\u0437\u043e\u0432 API",
          "line_range": [
            50,
            74
          ],
          "parameters": [
            "self",
            "endpoint",
            "method",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "save_user_message",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            76,
            90
          ],
          "parameters": [
            "self",
            "user_id",
            "username",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "get_user_history",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            92,
            102
          ],
          "parameters": [
            "self",
            "user_id",
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "chat_with_ollama",
          "docstring": "\u0427\u0430\u0442 \u0441 Ollama",
          "line_range": [
            104,
            119
          ],
          "parameters": [
            "self",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "get_system_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            121,
            123
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "setup_handlers",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432",
          "line_range": [
            125,
            133
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "start_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
          "line_range": [
            135,
            153
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "status_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /status",
          "line_range": [
            155,
            174
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "memory_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /memory",
          "line_range": [
            176,
            193
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "chat_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /chat",
          "line_range": [
            195,
            216
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
          "line_range": [
            218,
            230
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "cleanup",
          "docstring": "\u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432",
          "line_range": [
            232,
            236
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TelegramBotTest",
          "docstring": "",
          "line_range": [
            33,
            236
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                34,
                43
              ],
              "parameters": [
                "self",
                "token",
                "api_base_url"
              ]
            },
            {
              "name": "get_session",
              "docstring": "",
              "line_range": [
                45,
                48
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "api_call",
              "docstring": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u0432\u044b\u0437\u043e\u0432 API",
              "line_range": [
                50,
                74
              ],
              "parameters": [
                "self",
                "endpoint",
                "method",
                "data"
              ]
            },
            {
              "name": "save_user_message",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
              "line_range": [
                76,
                90
              ],
              "parameters": [
                "self",
                "user_id",
                "username",
                "message"
              ]
            },
            {
              "name": "get_user_history",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
              "line_range": [
                92,
                102
              ],
              "parameters": [
                "self",
                "user_id",
                "limit"
              ]
            },
            {
              "name": "chat_with_ollama",
              "docstring": "\u0427\u0430\u0442 \u0441 Ollama",
              "line_range": [
                104,
                119
              ],
              "parameters": [
                "self",
                "message"
              ]
            },
            {
              "name": "get_system_status",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
              "line_range": [
                121,
                123
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "setup_handlers",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432",
              "line_range": [
                125,
                133
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "start_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
              "line_range": [
                135,
                153
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "status_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /status",
              "line_range": [
                155,
                174
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "memory_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /memory",
              "line_range": [
                176,
                193
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "chat_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /chat",
              "line_range": [
                195,
                216
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
              "line_range": [
                218,
                230
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "cleanup",
              "docstring": "\u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432",
              "line_range": [
                232,
                236
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "logger.info",
          "self.setup_handlers",
          "Application.builder"
        ],
        "get_session": [
          "aiohttp.ClientSession"
        ],
        "api_call": [
          "session.post",
          "str",
          "response.json",
          "session.get",
          "logger.error",
          "self.get_session"
        ],
        "save_user_message": [
          "datetime.now",
          "result.get",
          "self.api_call",
          "logger.error",
          "logger.info"
        ],
        "get_user_history": [
          "result.get",
          "self.api_call",
          "logger.error",
          "logger.info",
          "len"
        ],
        "chat_with_ollama": [
          "result.get",
          "self.api_call",
          "logger.error",
          "logger.info"
        ],
        "get_system_status": [
          "self.api_call"
        ],
        "setup_handlers": [
          "MessageHandler",
          "logger.info",
          "CommandHandler"
        ],
        "start_command": [
          "logger.info",
          "self.save_user_message"
        ],
        "status_command": [
          "self.get_system_status",
          "self.save_user_message",
          "status.get",
          "logger.info"
        ],
        "memory_command": [
          "logger.info",
          "self.get_user_history",
          "self.save_user_message",
          "msg.get"
        ],
        "chat_command": [
          "logger.info",
          "self.save_user_message",
          "len",
          "self.chat_with_ollama"
        ],
        "handle_message": [
          "logger.info",
          "self.save_user_message",
          "self.chat_with_ollama"
        ],
        "cleanup": [
          "logger.info"
        ],
        "main": [
          "print",
          "os.getenv",
          "logger.error",
          "logger.info",
          "BotCommand",
          "TelegramBotTest"
        ]
      },
      "dependencies": [
        "Application",
        "BotCommand",
        "CommandHandler",
        "ContextTypes",
        "MessageHandler",
        "Update",
        "aiohttp",
        "asyncio",
        "datetime",
        "filters",
        "json",
        "logging",
        "os",
        "telegram",
        "telegram.ext",
        "time"
      ],
      "hash": null,
      "artifact_id": "23d54039-61ab-4a3b-96c1-fd27129b415b"
    },
    {
      "module_id": ".ARCHIVE.parse_ollama_fixed",
      "path": ".ARCHIVE/parse_ollama_fixed.py",
      "category": "core",
      "module_doc": "Fixed Ollama List Parser + Context Merger for Grok Consultation\nCorrectly parses the specific structure of ollama_list.txt",
      "functions": [
        {
          "name": "parse_ollama_list_fixed",
          "docstring": "Parse ollama_list.txt with correct understanding of structure",
          "line_range": [
            11,
            101
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "create_smart_categorization",
          "docstring": "Create intelligent categorization with RTX 3060 Ti focus",
          "line_range": [
            103,
            279
          ],
          "parameters": [
            "models"
          ],
          "decorators": []
        },
        {
          "name": "convert_md_to_json",
          "docstring": "Convert markdown content to structured JSON",
          "line_range": [
            281,
            306
          ],
          "parameters": [
            "md_content"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            308,
            412
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "parse_pulls_number",
          "docstring": "Convert pulls string to number for sorting",
          "line_range": [
            156,
            167
          ],
          "parameters": [
            "pulls_str"
          ],
          "decorators": []
        },
        {
          "name": "get_max_size_gb",
          "docstring": "Get maximum model size in GB",
          "line_range": [
            169,
            182
          ],
          "parameters": [
            "sizes"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "parse_ollama_list_fixed": [
          "line.isdigit",
          "models.append",
          "f.read",
          "any",
          "open",
          "line.strip",
          "len",
          "line.endswith",
          "re.split",
          "block.split",
          "block.strip",
          "c.isdigit"
        ],
        "create_smart_categorization": [
          "len"
        ],
        "parse_pulls_number": [
          "pulls_str.endswith",
          "float"
        ],
        "get_max_size_gb": [
          "max",
          "float",
          "size.endswith"
        ],
        "convert_md_to_json": [
          "current_content.append",
          "line.startswith",
          "md_content.split",
          "line.strip"
        ],
        "main": [
          "enumerate",
          "print",
          "f.read",
          "convert_md_to_json",
          "open",
          "create_smart_categorization",
          "json.dump",
          "parse_ollama_list_fixed",
          "len"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "pathlib",
        "re"
      ],
      "hash": null,
      "artifact_id": "ac67330b-2102-4f1d-9a30-4d9c19066ad5"
    },
    {
      "module_id": ".ARCHIVE.board_cli",
      "path": ".ARCHIVE/board_cli.py",
      "category": "core",
      "module_doc": "CLI Kanban Board for llmstruct tasks and ideas\n- Reads data/tasks.json and data/ideas.json\n- Shows board in terminal: columns by status, rows by priority\n- Supports filtering, sorting, and shows links between tasks/ideas",
      "functions": [
        {
          "name": "load_json",
          "docstring": "",
          "line_range": [
            26,
            28
          ],
          "parameters": [
            "path"
          ],
          "decorators": []
        },
        {
          "name": "group_by_status_and_priority",
          "docstring": "",
          "line_range": [
            30,
            36
          ],
          "parameters": [
            "items",
            "kind"
          ],
          "decorators": []
        },
        {
          "name": "render_board",
          "docstring": "",
          "line_range": [
            38,
            64
          ],
          "parameters": [
            "board",
            "kind"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            66,
            74
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json": [
          "json.load",
          "open"
        ],
        "group_by_status_and_priority": [
          "defaultdict",
          "item.get"
        ],
        "render_board": [
          "kind.capitalize",
          "console.print",
          "table.add_row",
          "links.append",
          "links.extend",
          "table.add_column",
          "Panel",
          "Table",
          "item.get"
        ],
        "main": [
          "group_by_status_and_priority",
          "ideas_data.get",
          "render_board",
          "load_json",
          "tasks_data.get",
          "console.rule"
        ]
      },
      "dependencies": [
        "Console",
        "Panel",
        "Path",
        "Table",
        "box",
        "collections",
        "defaultdict",
        "json",
        "os",
        "pathlib",
        "rich",
        "rich.console",
        "rich.panel",
        "rich.table"
      ],
      "hash": null,
      "artifact_id": "aa94edf0-5fae-4ee3-bd9e-99c11242bbba"
    },
    {
      "module_id": ".ARCHIVE.test_cli_integration",
      "path": ".ARCHIVE/test_cli_integration.py",
      "category": "test",
      "module_doc": "Test script for CLI integration with new commands",
      "functions": [
        {
          "name": "test_modular_cli_commands",
          "docstring": "Test new CLI commands integration",
          "line_range": [
            13,
            164
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_modular_cli_commands": [
          "json.load",
          "print",
          "time.ctime",
          "int",
          "open",
          "events_data.append",
          "subprocess.run",
          "json.dump",
          "create_cli_core",
          "os.stat",
          "os.makedirs",
          "time.time"
        ]
      },
      "dependencies": [
        "CLIConfig",
        "CLICore",
        "CLIUtils",
        "CommandProcessor",
        "CopilotContextManager",
        "Path",
        "create_cli_core",
        "json",
        "llmstruct.cli_commands",
        "llmstruct.cli_config",
        "llmstruct.cli_core",
        "llmstruct.cli_utils",
        "llmstruct.copilot",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "time"
      ],
      "hash": null,
      "artifact_id": "4e0f2f4a-2eab-45e1-b3fd-da80c123528d"
    },
    {
      "module_id": ".ARCHIVE.parse_ollama_improved",
      "path": ".ARCHIVE/parse_ollama_improved.py",
      "category": "core",
      "module_doc": "Improved Ollama List Parser + Context Merger for Grok Consultation\nBetter parsing algorithm for ollama_list.txt structure",
      "functions": [
        {
          "name": "parse_ollama_list_improved",
          "docstring": "Parse ollama_list.txt with improved algorithm",
          "line_range": [
            11,
            95
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "create_better_flattened_structure",
          "docstring": "Create an improved flattened structure for LLM consumption",
          "line_range": [
            97,
            245
          ],
          "parameters": [
            "models"
          ],
          "decorators": []
        },
        {
          "name": "convert_md_to_json",
          "docstring": "Convert markdown content to structured JSON",
          "line_range": [
            247,
            276
          ],
          "parameters": [
            "md_content"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            278,
            373
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "parse_pulls",
          "docstring": "",
          "line_range": [
            146,
            156
          ],
          "parameters": [
            "pulls_str"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "parse_ollama_list_improved": [
          "line.isdigit",
          "models.append",
          "f.read",
          "any",
          "open",
          "line.strip",
          "len",
          "content.split",
          "model_name.isdigit",
          "model_name.lower",
          "line.endswith",
          "block.split",
          "block.strip",
          "c.isdigit"
        ],
        "create_better_flattened_structure": [
          "len"
        ],
        "parse_pulls": [
          "pulls_str.endswith",
          "float"
        ],
        "convert_md_to_json": [
          "current_content.append",
          "line.startswith",
          "md_content.split",
          "line.strip"
        ],
        "main": [
          "print",
          "f.read",
          "convert_md_to_json",
          "open",
          "parse_ollama_list_improved",
          "create_better_flattened_structure",
          "json.dump",
          "len"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "pathlib",
        "re"
      ],
      "hash": null,
      "artifact_id": "385e836c-1b0b-45f4-bb9d-a70ed81078ac"
    },
    {
      "module_id": ".ARCHIVE.test_efficiency",
      "path": ".ARCHIVE/test_efficiency.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "get_system_metrics",
          "docstring": "",
          "line_range": [
            15,
            19
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "is_local_address",
          "docstring": "",
          "line_range": [
            22,
            28
          ],
          "parameters": [
            "url"
          ],
          "decorators": []
        },
        {
          "name": "setup_proxy",
          "docstring": "",
          "line_range": [
            31,
            34
          ],
          "parameters": [
            "proxy_url"
          ],
          "decorators": []
        },
        {
          "name": "check_ollama",
          "docstring": "",
          "line_range": [
            37,
            42
          ],
          "parameters": [
            "api_url"
          ],
          "decorators": []
        },
        {
          "name": "optimize_prompt",
          "docstring": "",
          "line_range": [
            45,
            51
          ],
          "parameters": [
            "struct_data",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "run_llm_request",
          "docstring": "",
          "line_range": [
            54,
            78
          ],
          "parameters": [
            "api_url",
            "payload",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "check_llmstruct_cli",
          "docstring": "",
          "line_range": [
            81,
            82
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_with_llmstruct",
          "docstring": "",
          "line_range": [
            85,
            112
          ],
          "parameters": [
            "api_url",
            "project_path",
            "proxy",
            "use_placeholder"
          ],
          "decorators": []
        },
        {
          "name": "test_without_llmstruct",
          "docstring": "",
          "line_range": [
            115,
            122
          ],
          "parameters": [
            "api_url",
            "project_path",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "test_with_grok",
          "docstring": "",
          "line_range": [
            125,
            147
          ],
          "parameters": [
            "api_key",
            "project_path",
            "proxy",
            "use_placeholder"
          ],
          "decorators": []
        },
        {
          "name": "evaluate_accuracy",
          "docstring": "",
          "line_range": [
            150,
            152
          ],
          "parameters": [
            "response_text",
            "expected"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            155,
            215
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_system_metrics": [
          "psutil.cpu_percent",
          "psutil.virtual_memory"
        ],
        "is_local_address": [
          "ipaddress.ip_address",
          "urlparse"
        ],
        "setup_proxy": [
          "os.getenv"
        ],
        "check_ollama": [
          "response.json",
          "str",
          "requests.get",
          "api_url.replace"
        ],
        "optimize_prompt": [
          "len",
          "struct_data.split",
          "print"
        ],
        "run_llm_request": [
          "session.post",
          "is_local_address",
          "print",
          "response.json",
          "type",
          "time.perf_counter",
          "response.raise_for_status",
          "len",
          "requests.Session",
          "get_system_metrics"
        ],
        "check_llmstruct_cli": [
          "shutil.which"
        ],
        "test_with_llmstruct": [
          "str",
          "f.read",
          "Path",
          "FileNotFoundError",
          "open",
          "json.dump",
          "subprocess.run",
          "optimize_prompt",
          "run_llm_request",
          "check_llmstruct_cli",
          "target_path.exists"
        ],
        "test_without_llmstruct": [
          "f.read",
          "Path",
          "open",
          "optimize_prompt",
          "run_llm_request"
        ],
        "test_with_grok": [
          "f.read",
          "Path",
          "FileNotFoundError",
          "open",
          "json.dump",
          "optimize_prompt",
          "test_grok",
          "target_path.exists"
        ],
        "evaluate_accuracy": [
          "sum",
          "len",
          "response_text.lower"
        ],
        "main": [
          "argparse.ArgumentParser",
          "range",
          "print",
          "test_with_llmstruct",
          "str",
          "setup_proxy",
          "open",
          "json.dump",
          "parser.add_argument",
          "parser.parse_args",
          "check_llmstruct_cli",
          "test_without_llmstruct",
          "test_with_grok",
          "check_ollama",
          "evaluate_accuracy"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "ipaddress",
        "json",
        "os",
        "pathlib",
        "psutil",
        "requests",
        "shutil",
        "src.llmstruct.grok",
        "subprocess",
        "test_grok",
        "time",
        "urllib.parse",
        "urlparse"
      ],
      "hash": null,
      "artifact_id": "886e2375-5801-4d85-8f47-fe8860ab930b"
    },
    {
      "module_id": ".ARCHIVE.bot_api_server",
      "path": ".ARCHIVE/bot_api_server.py",
      "category": "core",
      "module_doc": "\ud83e\udd16 Enhanced Bot API Server\nFastAPI \u0441\u0435\u0440\u0432\u0435\u0440 \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 \u0444\u0430\u0439\u043b\u043e\u0432\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0431\u043e\u0442\u0430",
      "functions": [
        {
          "name": "get_file_ops",
          "docstring": "Lazy loading \u0444\u0430\u0439\u043b\u043e\u0432\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439",
          "line_range": [
            62,
            67
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "get_cache_manager",
          "docstring": "Lazy loading \u043a\u0435\u0448 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430",
          "line_range": [
            69,
            74
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "root",
          "docstring": "\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 API",
          "line_range": [
            94,
            112
          ],
          "parameters": [],
          "decorators": [
            "app.get('/', summary='Bot API Information')"
          ]
        },
        {
          "name": "health_check",
          "docstring": "Health check",
          "line_range": [
            115,
            126
          ],
          "parameters": [],
          "decorators": [
            "app.get('/health')"
          ]
        },
        {
          "name": "list_files",
          "docstring": "\u0421\u043f\u0438\u0441\u043e\u043a \u0444\u0430\u0439\u043b\u043e\u0432 \u0432 \u0440\u0430\u0431\u043e\u0447\u0435\u0439 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438",
          "line_range": [
            131,
            147
          ],
          "parameters": [
            "path"
          ],
          "decorators": [
            "app.get('/api/v1/files/list')"
          ]
        },
        {
          "name": "read_file",
          "docstring": "\u0427\u0442\u0435\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            150,
            166
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": [
            "app.get('/api/v1/files/read')"
          ]
        },
        {
          "name": "write_file",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            169,
            185
          ],
          "parameters": [
            "request"
          ],
          "decorators": [
            "app.post('/api/v1/files/write')"
          ]
        },
        {
          "name": "edit_file",
          "docstring": "\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            188,
            204
          ],
          "parameters": [
            "request"
          ],
          "decorators": [
            "app.post('/api/v1/files/edit')"
          ]
        },
        {
          "name": "create_directory",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438",
          "line_range": [
            207,
            220
          ],
          "parameters": [
            "dir_path"
          ],
          "decorators": [
            "app.post('/api/v1/files/mkdir')"
          ]
        },
        {
          "name": "delete_file",
          "docstring": "\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430 \u0438\u043b\u0438 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438",
          "line_range": [
            223,
            236
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": [
            "app.delete('/api/v1/files/delete')"
          ]
        },
        {
          "name": "search_struct",
          "docstring": "\u041f\u043e\u0438\u0441\u043a \u0432 struct.json \u0441 \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c",
          "line_range": [
            241,
            257
          ],
          "parameters": [
            "query",
            "search_type"
          ],
          "decorators": [
            "app.get('/api/v1/struct/search')"
          ]
        },
        {
          "name": "get_struct_stats",
          "docstring": "\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 struct.json \u043a\u0435\u0448\u0430",
          "line_range": [
            260,
            270
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/struct/stats')"
          ]
        },
        {
          "name": "invalidate_struct_cache",
          "docstring": "\u0418\u043d\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u043a\u0435\u0448\u0430 struct.json",
          "line_range": [
            273,
            283
          ],
          "parameters": [],
          "decorators": [
            "app.post('/api/v1/struct/invalidate')"
          ]
        },
        {
          "name": "rebuild_struct_cache",
          "docstring": "\u041f\u0435\u0440\u0435\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043a\u0435\u0448\u0430 struct.json",
          "line_range": [
            286,
            305
          ],
          "parameters": [],
          "decorators": [
            "app.post('/api/v1/struct/rebuild')"
          ]
        },
        {
          "name": "get_workspace_status",
          "docstring": "\u0421\u0442\u0430\u0442\u0443\u0441 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0430",
          "line_range": [
            310,
            320
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/workspace/status')"
          ]
        },
        {
          "name": "send_message_to_claude",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f Claude \u0447\u0435\u0440\u0435\u0437 API (\u0441\u0438\u043c\u0443\u043b\u044f\u0446\u0438\u044f)",
          "line_range": [
            325,
            338
          ],
          "parameters": [
            "message"
          ],
          "decorators": [
            "app.post('/api/v1/claude/message')"
          ]
        },
        {
          "name": "run_full_test",
          "docstring": "\u041f\u043e\u043b\u043d\u044b\u0439 \u0442\u0435\u0441\u0442 \u0432\u0441\u0435\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0431\u043e\u0442\u0430",
          "line_range": [
            343,
            380
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/test/full')"
          ]
        },
        {
          "name": "startup_event",
          "docstring": "\u0421\u043e\u0431\u044b\u0442\u0438\u044f \u043f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435",
          "line_range": [
            385,
            392
          ],
          "parameters": [],
          "decorators": [
            "app.on_event('startup')"
          ]
        },
        {
          "name": "shutdown_event",
          "docstring": "\u0421\u043e\u0431\u044b\u0442\u0438\u044f \u043f\u0440\u0438 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435",
          "line_range": [
            395,
            400
          ],
          "parameters": [],
          "decorators": [
            "app.on_event('shutdown')"
          ]
        }
      ],
      "classes": [
        {
          "name": "FileWriteRequest",
          "docstring": "",
          "line_range": [
            77,
            80
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "FileEditRequest",
          "docstring": "",
          "line_range": [
            82,
            84
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "ChatMessage",
          "docstring": "",
          "line_range": [
            86,
            89
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        }
      ],
      "callgraph": {
        "get_file_ops": [
          "BotFileOperations"
        ],
        "get_cache_manager": [
          "StructCacheManager"
        ],
        "root": [
          "app.get"
        ],
        "health_check": [
          "track_workflow_event",
          "app.get",
          "datetime.now"
        ],
        "list_files": [
          "get_file_ops",
          "app.get",
          "HTTPException",
          "Query",
          "track_workflow_event",
          "ops.list_files"
        ],
        "read_file": [
          "get_file_ops",
          "app.get",
          "HTTPException",
          "Query",
          "track_workflow_event",
          "ops.read_file"
        ],
        "write_file": [
          "get_file_ops",
          "app.post",
          "HTTPException",
          "track_workflow_event",
          "ops.write_file"
        ],
        "edit_file": [
          "get_file_ops",
          "ops.edit_file",
          "app.post",
          "HTTPException",
          "track_workflow_event"
        ],
        "create_directory": [
          "ops.create_directory",
          "get_file_ops",
          "app.post",
          "HTTPException",
          "Query",
          "track_workflow_event"
        ],
        "delete_file": [
          "get_file_ops",
          "HTTPException",
          "app.delete",
          "Query",
          "track_workflow_event",
          "ops.delete_file"
        ],
        "search_struct": [
          "get_file_ops",
          "app.get",
          "HTTPException",
          "Query",
          "track_workflow_event",
          "ops.search_struct"
        ],
        "get_struct_stats": [
          "app.get",
          "cache.get_cache_stats",
          "get_cache_manager",
          "HTTPException",
          "track_workflow_event"
        ],
        "invalidate_struct_cache": [
          "datetime.now",
          "app.post",
          "get_cache_manager",
          "HTTPException",
          "cache.invalidate_cache",
          "track_workflow_event"
        ],
        "rebuild_struct_cache": [
          "datetime.now",
          "cache.build_cache",
          "cache.get_cache_stats",
          "app.post",
          "get_cache_manager",
          "HTTPException",
          "track_workflow_event"
        ],
        "get_workspace_status": [
          "get_file_ops",
          "app.get",
          "ops.get_workspace_status",
          "HTTPException",
          "track_workflow_event"
        ],
        "send_message_to_claude": [
          "datetime.now",
          "int",
          "app.post",
          "track_workflow_event",
          "time.time"
        ],
        "run_full_test": [
          "get_file_ops",
          "search_result.get",
          "datetime.now",
          "app.get",
          "cache.get_cache_stats",
          "get_cache_manager",
          "cache.smart_search",
          "len",
          "track_workflow_event",
          "ops.read_file",
          "ops.write_file"
        ],
        "startup_event": [
          "track_workflow_event",
          "app.on_event",
          "print"
        ],
        "shutdown_event": [
          "track_workflow_event",
          "app.on_event",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "BaseModel",
        "BotFileOperations",
        "CORSMiddleware",
        "Dict",
        "FastAPI",
        "HTTPException",
        "List",
        "Optional",
        "Path",
        "Query",
        "StructCacheManager",
        "aiohttp",
        "bot_file_operations",
        "datetime",
        "fastapi",
        "fastapi.middleware.cors",
        "get_metrics_tracker",
        "json",
        "pathlib",
        "pydantic",
        "src.llmstruct.metrics_tracker",
        "struct_cache_manager",
        "time",
        "track_task_complete",
        "track_task_start",
        "track_workflow_event",
        "typing",
        "uvicorn"
      ],
      "hash": null,
      "artifact_id": "bccc4328-492a-4d71-8e78-7be06c2251e7"
    },
    {
      "module_id": ".ARCHIVE.bot_file_operations",
      "path": ".ARCHIVE/bot_file_operations.py",
      "category": "core",
      "module_doc": "\ud83d\udcc1 Bot File Operations Module\n\u041c\u043e\u0434\u0443\u043b\u044c \u0444\u0430\u0439\u043b\u043e\u0432\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0434\u043b\u044f Telegram \u0431\u043e\u0442\u0430 \u0432 \u0440\u0435\u0436\u0438\u043c\u0435 [code]",
      "functions": [
        {
          "name": "test_file_operations",
          "docstring": "\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u043e\u0432\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439",
          "line_range": [
            354,
            384
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Args:\n    work_dir: \u0420\u0430\u0431\u043e\u0447\u0430\u044f \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f (\u0434\u043b\u044f \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c /tmp)\n    simulate_root: \u0421\u0438\u043c\u0443\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043a\u0430\u043a \u0432 \u043a\u043e\u0440\u043d\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            19,
            37
          ],
          "parameters": [
            "self",
            "work_dir",
            "simulate_root"
          ],
          "decorators": []
        },
        {
          "name": "setup_simulated_environment",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u0441\u0438\u043c\u0443\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0443\u044e \u0441\u0440\u0435\u0434\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0432 /tmp",
          "line_range": [
            39,
            57
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "list_files",
          "docstring": "\u0421\u043f\u0438\u0441\u043e\u043a \u0444\u0430\u0439\u043b\u043e\u0432 \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438",
          "line_range": [
            59,
            83
          ],
          "parameters": [
            "self",
            "path"
          ],
          "decorators": []
        },
        {
          "name": "read_file",
          "docstring": "\u0427\u0438\u0442\u0430\u0435\u0442 \u0444\u0430\u0439\u043b",
          "line_range": [
            85,
            114
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_file",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0444\u0430\u0439\u043b",
          "line_range": [
            116,
            143
          ],
          "parameters": [
            "self",
            "file_path",
            "content",
            "mode"
          ],
          "decorators": []
        },
        {
          "name": "edit_file",
          "docstring": "\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u0443\u0435\u0442 \u0444\u0430\u0439\u043b (\u0437\u0430\u043c\u0435\u043d\u0430, \u0432\u0441\u0442\u0430\u0432\u043a\u0430, \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a)",
          "line_range": [
            145,
            235
          ],
          "parameters": [
            "self",
            "file_path",
            "operation"
          ],
          "decorators": []
        },
        {
          "name": "create_directory",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044e",
          "line_range": [
            237,
            250
          ],
          "parameters": [
            "self",
            "dir_path"
          ],
          "decorators": []
        },
        {
          "name": "delete_file",
          "docstring": "\u0423\u0434\u0430\u043b\u044f\u0435\u0442 \u0444\u0430\u0439\u043b",
          "line_range": [
            252,
            270
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "copy_file",
          "docstring": "\u041a\u043e\u043f\u0438\u0440\u0443\u0435\u0442 \u0444\u0430\u0439\u043b",
          "line_range": [
            272,
            294
          ],
          "parameters": [
            "self",
            "src_path",
            "dst_path"
          ],
          "decorators": []
        },
        {
          "name": "search_struct",
          "docstring": "\u041f\u043e\u0438\u0441\u043a \u0432 struct.json \u0447\u0435\u0440\u0435\u0437 \u043a\u0435\u0448",
          "line_range": [
            296,
            309
          ],
          "parameters": [
            "self",
            "query",
            "search_type"
          ],
          "decorators": []
        },
        {
          "name": "get_struct_stats",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 struct.json \u043a\u0435\u0448\u0430",
          "line_range": [
            311,
            317
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "invalidate_struct_cache",
          "docstring": "\u0418\u043d\u0432\u0430\u043b\u0438\u0434\u0438\u0440\u0443\u0435\u0442 \u043a\u0435\u0448 struct.json",
          "line_range": [
            319,
            325
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_workspace_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0443\u0441 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0430",
          "line_range": [
            327,
            352
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "BotFileOperations",
          "docstring": "\u0424\u0430\u0439\u043b\u043e\u0432\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f Telegram \u0431\u043e\u0442\u0430",
          "line_range": [
            16,
            352
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Args:\n    work_dir: \u0420\u0430\u0431\u043e\u0447\u0430\u044f \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f (\u0434\u043b\u044f \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c /tmp)\n    simulate_root: \u0421\u0438\u043c\u0443\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043a\u0430\u043a \u0432 \u043a\u043e\u0440\u043d\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
              "line_range": [
                19,
                37
              ],
              "parameters": [
                "self",
                "work_dir",
                "simulate_root"
              ]
            },
            {
              "name": "setup_simulated_environment",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u0441\u0438\u043c\u0443\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0443\u044e \u0441\u0440\u0435\u0434\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0432 /tmp",
              "line_range": [
                39,
                57
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "list_files",
              "docstring": "\u0421\u043f\u0438\u0441\u043e\u043a \u0444\u0430\u0439\u043b\u043e\u0432 \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438",
              "line_range": [
                59,
                83
              ],
              "parameters": [
                "self",
                "path"
              ]
            },
            {
              "name": "read_file",
              "docstring": "\u0427\u0438\u0442\u0430\u0435\u0442 \u0444\u0430\u0439\u043b",
              "line_range": [
                85,
                114
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "write_file",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0444\u0430\u0439\u043b",
              "line_range": [
                116,
                143
              ],
              "parameters": [
                "self",
                "file_path",
                "content",
                "mode"
              ]
            },
            {
              "name": "edit_file",
              "docstring": "\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u0443\u0435\u0442 \u0444\u0430\u0439\u043b (\u0437\u0430\u043c\u0435\u043d\u0430, \u0432\u0441\u0442\u0430\u0432\u043a\u0430, \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a)",
              "line_range": [
                145,
                235
              ],
              "parameters": [
                "self",
                "file_path",
                "operation"
              ]
            },
            {
              "name": "create_directory",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044e",
              "line_range": [
                237,
                250
              ],
              "parameters": [
                "self",
                "dir_path"
              ]
            },
            {
              "name": "delete_file",
              "docstring": "\u0423\u0434\u0430\u043b\u044f\u0435\u0442 \u0444\u0430\u0439\u043b",
              "line_range": [
                252,
                270
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "copy_file",
              "docstring": "\u041a\u043e\u043f\u0438\u0440\u0443\u0435\u0442 \u0444\u0430\u0439\u043b",
              "line_range": [
                272,
                294
              ],
              "parameters": [
                "self",
                "src_path",
                "dst_path"
              ]
            },
            {
              "name": "search_struct",
              "docstring": "\u041f\u043e\u0438\u0441\u043a \u0432 struct.json \u0447\u0435\u0440\u0435\u0437 \u043a\u0435\u0448",
              "line_range": [
                296,
                309
              ],
              "parameters": [
                "self",
                "query",
                "search_type"
              ]
            },
            {
              "name": "get_struct_stats",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 struct.json \u043a\u0435\u0448\u0430",
              "line_range": [
                311,
                317
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "invalidate_struct_cache",
              "docstring": "\u0418\u043d\u0432\u0430\u043b\u0438\u0434\u0438\u0440\u0443\u0435\u0442 \u043a\u0435\u0448 struct.json",
              "line_range": [
                319,
                325
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_workspace_status",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0443\u0441 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0430",
              "line_range": [
                327,
                352
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.setup_simulated_environment",
          "Path",
          "StructCacheManager",
          "print"
        ],
        "setup_simulated_environment": [
          "print"
        ],
        "list_files": [
          "item.stat",
          "datetime.fromtimestamp",
          "target_path.iterdir",
          "str",
          "item.is_dir",
          "item.is_file",
          "sorted",
          "target_path.exists",
          "items.append"
        ],
        "read_file": [
          "target_file.read_text",
          "target_file.is_file",
          "content.splitlines",
          "target_file.stat",
          "target_file.exists",
          "len"
        ],
        "write_file": [
          "open",
          "content.splitlines",
          "target_file.stat",
          "len",
          "target_file.write_text",
          "f.write"
        ],
        "edit_file": [
          "target_file.read_text",
          "new_content.splitlines",
          "content.replace",
          "operation.get",
          "lines.append",
          "content.count",
          "target_file.exists",
          "target_file.write_text",
          "len",
          "lines.insert"
        ],
        "create_directory": [
          "target_dir.mkdir"
        ],
        "delete_file": [
          "target_path.is_file",
          "target_path.is_dir",
          "shutil.rmtree",
          "target_path.exists",
          "target_path.unlink"
        ],
        "copy_file": [
          "src_file.exists",
          "shutil.copy2",
          "dst_file.stat"
        ],
        "search_struct": [
          "sum",
          "len"
        ],
        "get_struct_stats": [],
        "invalidate_struct_cache": [],
        "get_workspace_status": [
          "item.stat",
          "item.is_file",
          "item.is_dir",
          "str"
        ],
        "test_file_operations": [
          "BotFileOperations",
          "ops.edit_file",
          "print",
          "result.get",
          "ops.get_workspace_status",
          "ops.read_file",
          "ops.write_file",
          "ops.search_struct"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "StructCacheManager",
        "datetime",
        "json",
        "os",
        "pathlib",
        "shutil",
        "struct_cache_manager",
        "typing"
      ],
      "hash": null,
      "artifact_id": "918beac6-c240-4fd8-b59f-a6243c73b0cb"
    },
    {
      "module_id": ".ARCHIVE.test_file_operations",
      "path": ".ARCHIVE/test_file_operations.py",
      "category": "test",
      "module_doc": "\u041a\u043e\u043c\u043f\u043b\u0435\u043a\u0441\u043d\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0444\u0430\u0439\u043b\u043e\u0432\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439, \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
      "functions": [
        {
          "name": "test_file_system_integrity",
          "docstring": "\u0422\u0435\u0441\u0442 \u0446\u0435\u043b\u043e\u0441\u0442\u043d\u043e\u0441\u0442\u0438 \u0444\u0430\u0439\u043b\u043e\u0432\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            15,
            38
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_json_cache_operations",
          "docstring": "\u0422\u0435\u0441\u0442 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0441 JSON \u043a\u0435\u0448\u0435\u043c",
          "line_range": [
            40,
            86
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_chat_session_persistence",
          "docstring": "\u0422\u0435\u0441\u0442 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0441\u0435\u0441\u0441\u0438\u0439 \u0447\u0430\u0442\u0430",
          "line_range": [
            88,
            156
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_project_structure_cache",
          "docstring": "\u0422\u0435\u0441\u0442 \u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            158,
            218
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_api_file_interactions",
          "docstring": "\u0422\u0435\u0441\u0442 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f API \u0441 \u0444\u0430\u0439\u043b\u0430\u043c\u0438",
          "line_range": [
            220,
            281
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_logging_system",
          "docstring": "\u0422\u0435\u0441\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f",
          "line_range": [
            283,
            303
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_dependency_integrity",
          "docstring": "\u0422\u0435\u0441\u0442 \u0446\u0435\u043b\u043e\u0441\u0442\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439",
          "line_range": [
            305,
            327
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run_all_tests",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0432\u0441\u0435\u0445 \u0442\u0435\u0441\u0442\u043e\u0432",
          "line_range": [
            329,
            381
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_file_system_integrity": [
          "missing_paths.append",
          "print"
        ],
        "test_json_cache_operations": [
          "json.load",
          "print",
          "os.remove",
          "open",
          "json.dump",
          "time.time"
        ],
        "test_chat_session_persistence": [
          "json.load",
          "print",
          "list",
          "Path",
          "sessions_dir.mkdir",
          "open",
          "json.dump",
          "len",
          "sessions_dir.glob",
          "test_session_file.unlink",
          "time.time"
        ],
        "test_project_structure_cache": [
          "struct_file.exists",
          "json.load",
          "print",
          "Path",
          "stats.get",
          "open",
          "metadata.get",
          "struct_data.get",
          "len"
        ],
        "test_api_file_interactions": [
          "httpx.AsyncClient",
          "print",
          "response.json",
          "health_data.get",
          "client.get",
          "client.post",
          "len"
        ],
        "test_logging_system": [
          "f.readlines",
          "open",
          "print"
        ],
        "test_dependency_integrity": [
          "print"
        ],
        "run_all_tests": [
          "print",
          "test_func",
          "results.items",
          "len",
          "asyncio.iscoroutinefunction"
        ]
      },
      "dependencies": [
        "LLMService",
        "Path",
        "SmartContextOrchestrator",
        "app",
        "asyncio",
        "httpx",
        "json",
        "llmstruct",
        "llmstruct.api.app",
        "llmstruct.api.services.llm_service",
        "llmstruct.context_orchestrator",
        "os",
        "pathlib",
        "shutil",
        "tempfile",
        "time"
      ],
      "hash": null,
      "artifact_id": "c015db6c-8cf2-4b1c-8732-98e8adf464c5"
    },
    {
      "module_id": ".ARCHIVE.chat_bot_working",
      "path": ".ARCHIVE/chat_bot_working.py",
      "category": "core",
      "module_doc": "\ud83d\ude80 ENHANCED Telegram Bot \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 FastAPI\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0432\u0430\u0448 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 FastAPI \u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f:\n- \u041a\u0435\u0448\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0447\u0435\u0440\u0435\u0437 WebSocket\n- \u041f\u0430\u043c\u044f\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0447\u0435\u0440\u0435\u0437 API endpoints\n- \u041c\u0435\u0442\u0440\u0438\u043a \u0447\u0435\u0440\u0435\u0437 API\n\n\u0411\u043e\u043b\u044c\u0448\u0435 \u043d\u0438\u043a\u0430\u043a\u0438\u0445 CLI \u0432\u044b\u0437\u043e\u0432\u043e\u0432 - \u0432\u0441\u0435 \u0447\u0435\u0440\u0435\u0437 API!",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": [
            342,
            378
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            35,
            43
          ],
          "parameters": [
            "self",
            "telegram_token",
            "fastapi_base_url"
          ],
          "decorators": []
        },
        {
          "name": "setup_session",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f aiohttp \u0441\u0435\u0441\u0441\u0438\u0438",
          "line_range": [
            45,
            48
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "close_session",
          "docstring": "\u0417\u0430\u043a\u0440\u044b\u0442\u0438\u0435 aiohttp \u0441\u0435\u0441\u0441\u0438\u0438",
          "line_range": [
            50,
            53
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "health_check_api",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 FastAPI \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
          "line_range": [
            55,
            69
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_user_message_via_api",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 FastAPI",
          "line_range": [
            71,
            102
          ],
          "parameters": [
            "self",
            "user_id",
            "username",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "get_user_history_via_api",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 FastAPI",
          "line_range": [
            104,
            122
          ],
          "parameters": [
            "self",
            "user_id",
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "chat_with_ollama_via_api",
          "docstring": "\u0427\u0430\u0442 \u0441 Ollama \u0447\u0435\u0440\u0435\u0437 FastAPI endpoint",
          "line_range": [
            124,
            150
          ],
          "parameters": [
            "self",
            "message",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "get_system_metrics_via_api",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0447\u0435\u0440\u0435\u0437 FastAPI",
          "line_range": [
            152,
            162
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "setup_handlers",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434",
          "line_range": [
            164,
            172
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "start_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
          "line_range": [
            174,
            198
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "memory_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /memory - \u0442\u0435\u0441\u0442 \u043f\u0430\u043c\u044f\u0442\u0438",
          "line_range": [
            200,
            207
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "history_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /history - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0438\u0441\u0442\u043e\u0440\u0438\u044e",
          "line_range": [
            209,
            228
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "health_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /health - \u0441\u0442\u0430\u0442\u0443\u0441 FastAPI",
          "line_range": [
            230,
            237
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "metrics_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /metrics - \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            239,
            269
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "ollama_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /ollama - \u0447\u0430\u0442 \u0441 Ollama",
          "line_range": [
            271,
            289
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
          "line_range": [
            291,
            321
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0431\u043e\u0442\u0430",
          "line_range": [
            323,
            340
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "FastAPIIntegratedBot",
          "docstring": "Telegram \u0431\u043e\u0442 \u0441 \u043f\u043e\u043b\u043d\u043e\u0439 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 FastAPI",
          "line_range": [
            32,
            340
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                35,
                43
              ],
              "parameters": [
                "self",
                "telegram_token",
                "fastapi_base_url"
              ]
            },
            {
              "name": "setup_session",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f aiohttp \u0441\u0435\u0441\u0441\u0438\u0438",
              "line_range": [
                45,
                48
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "close_session",
              "docstring": "\u0417\u0430\u043a\u0440\u044b\u0442\u0438\u0435 aiohttp \u0441\u0435\u0441\u0441\u0438\u0438",
              "line_range": [
                50,
                53
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "health_check_api",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 FastAPI \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
              "line_range": [
                55,
                69
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_user_message_via_api",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 FastAPI",
              "line_range": [
                71,
                102
              ],
              "parameters": [
                "self",
                "user_id",
                "username",
                "message"
              ]
            },
            {
              "name": "get_user_history_via_api",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 FastAPI",
              "line_range": [
                104,
                122
              ],
              "parameters": [
                "self",
                "user_id",
                "limit"
              ]
            },
            {
              "name": "chat_with_ollama_via_api",
              "docstring": "\u0427\u0430\u0442 \u0441 Ollama \u0447\u0435\u0440\u0435\u0437 FastAPI endpoint",
              "line_range": [
                124,
                150
              ],
              "parameters": [
                "self",
                "message",
                "context"
              ]
            },
            {
              "name": "get_system_metrics_via_api",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0447\u0435\u0440\u0435\u0437 FastAPI",
              "line_range": [
                152,
                162
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "setup_handlers",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434",
              "line_range": [
                164,
                172
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "start_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
              "line_range": [
                174,
                198
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "memory_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /memory - \u0442\u0435\u0441\u0442 \u043f\u0430\u043c\u044f\u0442\u0438",
              "line_range": [
                200,
                207
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "history_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /history - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0438\u0441\u0442\u043e\u0440\u0438\u044e",
              "line_range": [
                209,
                228
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "health_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /health - \u0441\u0442\u0430\u0442\u0443\u0441 FastAPI",
              "line_range": [
                230,
                237
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "metrics_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /metrics - \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
              "line_range": [
                239,
                269
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "ollama_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /ollama - \u0447\u0430\u0442 \u0441 Ollama",
              "line_range": [
                271,
                289
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
              "line_range": [
                291,
                321
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "run",
              "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0431\u043e\u0442\u0430",
              "line_range": [
                323,
                340
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.setup_handlers",
          "Application.builder"
        ],
        "setup_session": [
          "aiohttp.ClientSession"
        ],
        "close_session": [],
        "health_check_api": [
          "self.setup_session",
          "resp.json",
          "logger.error",
          "logger.info",
          "data.get"
        ],
        "save_user_message_via_api": [
          "datetime.now",
          "self.setup_session",
          "logger.error",
          "logger.info",
          "logger.warning"
        ],
        "get_user_history_via_api": [
          "self.setup_session",
          "resp.json",
          "logger.error",
          "logger.info",
          "len",
          "logger.warning",
          "data.get"
        ],
        "chat_with_ollama_via_api": [
          "str",
          "self.setup_session",
          "resp.json",
          "logger.error",
          "logger.info",
          "data.get"
        ],
        "get_system_metrics_via_api": [
          "self.setup_session",
          "resp.json",
          "str"
        ],
        "setup_handlers": [
          "MessageHandler",
          "CommandHandler"
        ],
        "start_command": [
          "self.save_user_message_via_api"
        ],
        "memory_command": [
          "self.save_user_message_via_api"
        ],
        "history_command": [
          "int",
          "len",
          "msg.get",
          "self.get_user_history_via_api"
        ],
        "health_command": [
          "self.health_check_api"
        ],
        "metrics_command": [
          "self.get_system_metrics_via_api",
          "system.get",
          "features.get",
          "struct_json.get",
          "metrics.get"
        ],
        "ollama_command": [
          "self.save_user_message_via_api",
          "status_msg.edit_text",
          "self.chat_with_ollama_via_api"
        ],
        "handle_message": [
          "self.save_user_message_via_api",
          "message_text.replace",
          "enumerate",
          "self.chat_with_ollama_via_api",
          "message_text.startswith",
          "msg.get",
          "message_text.lower",
          "self.get_user_history_via_api"
        ],
        "run": [
          "self.health_check_api",
          "logger.error",
          "logger.info",
          "logger.warning",
          "self.close_session"
        ],
        "main": [
          "traceback.print_exc",
          "print",
          "asyncio.new_event_loop",
          "os.getenv",
          "asyncio.get_event_loop",
          "loop.close",
          "bot.run",
          "FastAPIIntegratedBot",
          "exit",
          "asyncio.set_event_loop",
          "loop.run_until_complete"
        ]
      },
      "dependencies": [
        "Application",
        "CommandHandler",
        "ContextTypes",
        "MessageHandler",
        "Update",
        "aiohttp",
        "asyncio",
        "datetime",
        "filters",
        "json",
        "logging",
        "os",
        "telegram",
        "telegram.ext",
        "timedelta",
        "traceback",
        "websockets"
      ],
      "hash": null,
      "artifact_id": "1b46372f-6b12-4001-96ce-dded975c9752"
    },
    {
      "module_id": ".ARCHIVE.chat_bot",
      "path": ".ARCHIVE/chat_bot.py",
      "category": "core",
      "module_doc": "LLMStruct Chat Bot - \u0423\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u0434\u043b\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 Cursor + Ollama",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": [
            756,
            767
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            41,
            59
          ],
          "parameters": [
            "self",
            "token"
          ],
          "decorators": []
        },
        {
          "name": "load_ollama_config",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e Ollama \u0438\u0437 llmstruct.toml",
          "line_range": [
            61,
            91
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "query_ollama",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441 \u043a Ollama \u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043e\u0442\u0432\u0435\u0442",
          "line_range": [
            93,
            138
          ],
          "parameters": [
            "self",
            "message",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "log_user_message",
          "docstring": "\u041b\u043e\u0433\u0438\u0440\u0443\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0447\u0438\u0442\u0430\u0435\u043c\u044b\u0439 \u0444\u0430\u0439\u043b \u0434\u043b\u044f Cursor",
          "line_range": [
            140,
            158
          ],
          "parameters": [
            "self",
            "user_info",
            "message",
            "message_type",
            "chat_id"
          ],
          "decorators": []
        },
        {
          "name": "setup_handlers",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434",
          "line_range": [
            160,
            171
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "start_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
          "line_range": [
            173,
            220
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "cursor_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /cursor - \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0438 \u0441 Cursor",
          "line_range": [
            222,
            259
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "logs_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /logs - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f",
          "line_range": [
            261,
            300
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "help_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /help",
          "line_range": [
            302,
            341
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "status_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /status",
          "line_range": [
            343,
            424
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "metrics_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /metrics",
          "line_range": [
            426,
            486
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "dev_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /dev - \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432",
          "line_range": [
            488,
            533
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "ollama_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /ollama - \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0432\u044f\u0437\u0438 \u0441 Ollama",
          "line_range": [
            535,
            608
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "model_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /model - \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438 Ollama",
          "line_range": [
            610,
            625
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "\u0423\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0441 Ollama + \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435",
          "line_range": [
            627,
            714
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "run_sync",
          "docstring": "\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0437\u0430\u043f\u0443\u0441\u043a \u0431\u043e\u0442\u0430",
          "line_range": [
            716,
            754
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMStructChatBot",
          "docstring": "\u0423\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u044b\u0439 \u0447\u0430\u0442-\u0431\u043e\u0442 \u0434\u043b\u044f LLMStruct \u0441 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0434\u043b\u044f Cursor + Ollama",
          "line_range": [
            38,
            754
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                41,
                59
              ],
              "parameters": [
                "self",
                "token"
              ]
            },
            {
              "name": "load_ollama_config",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e Ollama \u0438\u0437 llmstruct.toml",
              "line_range": [
                61,
                91
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "query_ollama",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441 \u043a Ollama \u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043e\u0442\u0432\u0435\u0442",
              "line_range": [
                93,
                138
              ],
              "parameters": [
                "self",
                "message",
                "context"
              ]
            },
            {
              "name": "log_user_message",
              "docstring": "\u041b\u043e\u0433\u0438\u0440\u0443\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0447\u0438\u0442\u0430\u0435\u043c\u044b\u0439 \u0444\u0430\u0439\u043b \u0434\u043b\u044f Cursor",
              "line_range": [
                140,
                158
              ],
              "parameters": [
                "self",
                "user_info",
                "message",
                "message_type",
                "chat_id"
              ]
            },
            {
              "name": "setup_handlers",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434",
              "line_range": [
                160,
                171
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "start_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
              "line_range": [
                173,
                220
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "cursor_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /cursor - \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0438 \u0441 Cursor",
              "line_range": [
                222,
                259
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "logs_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /logs - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f",
              "line_range": [
                261,
                300
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "help_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /help",
              "line_range": [
                302,
                341
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "status_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /status",
              "line_range": [
                343,
                424
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "metrics_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /metrics",
              "line_range": [
                426,
                486
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "dev_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /dev - \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432",
              "line_range": [
                488,
                533
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "ollama_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /ollama - \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0432\u044f\u0437\u0438 \u0441 Ollama",
              "line_range": [
                535,
                608
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "model_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /model - \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438 Ollama",
              "line_range": [
                610,
                625
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "\u0423\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0441 Ollama + \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435",
              "line_range": [
                627,
                714
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "run_sync",
              "docstring": "\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0437\u0430\u043f\u0443\u0441\u043a \u0431\u043e\u0442\u0430",
              "line_range": [
                716,
                754
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.setup_handlers",
          "self.load_ollama_config",
          "Application.builder",
          "Path",
          "track_workflow_event"
        ],
        "load_ollama_config": [
          "toml.load",
          "Path",
          "logger.error",
          "logger.info",
          "logger.warning",
          "config_path.exists",
          "config.get"
        ],
        "query_ollama": [
          "message.split",
          "tracker.track_token_usage",
          "session.post",
          "str",
          "response.json",
          "result.get",
          "logger.error",
          "ollama_response.split",
          "len",
          "get_metrics_tracker",
          "response.text",
          "error_msg.lower",
          "aiohttp.ClientSession"
        ],
        "log_user_message": [
          "datetime.now",
          "any",
          "user_info.get",
          "open",
          "message.lower",
          "f.write"
        ],
        "setup_handlers": [
          "MessageHandler",
          "CommandHandler"
        ],
        "start_command": [
          "enumerate",
          "self.log_user_message",
          "len",
          "chr",
          "track_workflow_event"
        ],
        "cursor_command": [
          "track_workflow_event",
          "self.log_user_message"
        ],
        "logs_command": [
          "next",
          "f.read",
          "self.log_user_message",
          "open",
          "message_line.replace",
          "entry.strip",
          "content.split",
          "len",
          "track_workflow_event",
          "line.startswith"
        ],
        "help_command": [
          "track_workflow_event",
          "self.log_user_message"
        ],
        "status_command": [
          "struct_file.stat",
          "struct_file.exists",
          "datetime.now",
          "requests.get",
          "track_task_start",
          "f.readlines",
          "int",
          "self.log_user_message",
          "Path",
          "open",
          "tracker.get_session_summary",
          "str",
          "len",
          "get_metrics_tracker",
          "track_task_complete",
          "track_workflow_event",
          "time.time"
        ],
        "metrics_command": [
          "track_workflow_event",
          "self.log_user_message",
          "get_metrics_tracker",
          "tracker.get_session_summary"
        ],
        "dev_command": [
          "track_workflow_event",
          "self.log_user_message"
        ],
        "ollama_command": [
          "m.get",
          "str",
          "response.json",
          "self.log_user_message",
          "session.get",
          "test_response.startswith",
          "self.query_ollama",
          "len",
          "track_workflow_event",
          "aiohttp.ClientSession",
          "data.get"
        ],
        "model_command": [
          "track_workflow_event",
          "self.log_user_message",
          "enumerate"
        ],
        "handle_message": [
          "int",
          "track_workflow_event",
          "message_text.isdigit",
          "time.time",
          "datetime.now",
          "track_task_start",
          "message_text.lower",
          "str",
          "Path",
          "self.query_ollama",
          "len",
          "track_token_usage",
          "any",
          "self.log_user_message",
          "open",
          "logger.error",
          "response.split",
          "message_text.split",
          "track_task_complete",
          "f.write"
        ],
        "run_sync": [
          "str",
          "asyncio.new_event_loop",
          "logger.error",
          "logger.info",
          "get_metrics_tracker",
          "tracker.save_session",
          "track_workflow_event",
          "BotCommand",
          "asyncio.set_event_loop",
          "loop.run_until_complete"
        ],
        "main": [
          "bot.run_sync",
          "os.getenv",
          "LLMStructChatBot",
          "print"
        ]
      },
      "dependencies": [
        "Application",
        "BotCommand",
        "CommandHandler",
        "ContextTypes",
        "MessageHandler",
        "Optional",
        "Path",
        "Update",
        "aiohttp",
        "asyncio",
        "datetime",
        "filters",
        "get_metrics_tracker",
        "json",
        "logging",
        "os",
        "pathlib",
        "requests",
        "src.llmstruct.metrics_tracker",
        "sys",
        "telegram",
        "telegram.ext",
        "time",
        "toml",
        "track_task_complete",
        "track_task_start",
        "track_token_usage",
        "track_workflow_event",
        "typing"
      ],
      "hash": null,
      "artifact_id": "4311f170-6ca1-45dc-905a-e0fa64b084f2"
    },
    {
      "module_id": ".ARCHIVE.test_api_simple",
      "path": ".ARCHIVE/test_api_simple.py",
      "category": "test",
      "module_doc": "\u0423\u043f\u0440\u043e\u0449\u0435\u043d\u043d\u044b\u0439 API \u0441\u0435\u0440\u0432\u0435\u0440 LLMStruct \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 development\n\u0411\u0435\u0437 \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439, \u0442\u043e\u043b\u044c\u043a\u043e \u0431\u0430\u0437\u043e\u0432\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c",
      "functions": [
        {
          "name": "query_ollama",
          "docstring": "\u0417\u0430\u043f\u0440\u043e\u0441 \u043a Ollama",
          "line_range": [
            93,
            119
          ],
          "parameters": [
            "message",
            "context",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "health_check",
          "docstring": "Health check endpoint",
          "line_range": [
            123,
            133
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/system/health', response_model=HealthResponse)"
          ]
        },
        {
          "name": "system_status",
          "docstring": "Detailed system status",
          "line_range": [
            137,
            172
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/system/status')"
          ]
        },
        {
          "name": "chat_ollama",
          "docstring": "Chat with Ollama through API",
          "line_range": [
            176,
            204
          ],
          "parameters": [
            "request"
          ],
          "decorators": [
            "app.post('/api/v1/chat/ollama')"
          ]
        },
        {
          "name": "get_ollama_models",
          "docstring": "Get available Ollama models",
          "line_range": [
            208,
            220
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/ollama/models')"
          ]
        },
        {
          "name": "save_memory",
          "docstring": "Save user message to memory",
          "line_range": [
            224,
            239
          ],
          "parameters": [
            "request"
          ],
          "decorators": [
            "app.post('/api/v1/memory/save')"
          ]
        },
        {
          "name": "get_memory_history",
          "docstring": "Get user message history",
          "line_range": [
            242,
            251
          ],
          "parameters": [
            "user_id",
            "limit"
          ],
          "decorators": [
            "app.get('/api/v1/memory/history/{user_id}')"
          ]
        },
        {
          "name": "chat_message",
          "docstring": "Simple chat endpoint with metrics tracking",
          "line_range": [
            255,
            286
          ],
          "parameters": [
            "request"
          ],
          "decorators": [
            "app.post('/api/v1/chat/message', response_model=ChatResponse)"
          ]
        },
        {
          "name": "execute_cli_command",
          "docstring": "Execute CLI command via API",
          "line_range": [
            290,
            344
          ],
          "parameters": [
            "request"
          ],
          "decorators": [
            "app.post('/api/v1/cli/execute')"
          ]
        },
        {
          "name": "get_metrics",
          "docstring": "Get current metrics data",
          "line_range": [
            348,
            363
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/metrics')"
          ]
        },
        {
          "name": "root",
          "docstring": "Root endpoint with basic info",
          "line_range": [
            367,
            375
          ],
          "parameters": [],
          "decorators": [
            "app.get('/')"
          ]
        },
        {
          "name": "startup_event",
          "docstring": "Startup initialization",
          "line_range": [
            379,
            386
          ],
          "parameters": [],
          "decorators": [
            "app.on_event('startup')"
          ]
        },
        {
          "name": "shutdown_event",
          "docstring": "Cleanup on shutdown",
          "line_range": [
            390,
            398
          ],
          "parameters": [],
          "decorators": [
            "app.on_event('shutdown')"
          ]
        }
      ],
      "classes": [
        {
          "name": "ChatMessage",
          "docstring": "",
          "line_range": [
            51,
            54
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "OllamaMessage",
          "docstring": "",
          "line_range": [
            56,
            60
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "MemoryMessage",
          "docstring": "",
          "line_range": [
            62,
            65
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "CommandRequest",
          "docstring": "",
          "line_range": [
            67,
            69
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "HealthResponse",
          "docstring": "",
          "line_range": [
            72,
            76
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "ChatResponse",
          "docstring": "",
          "line_range": [
            78,
            82
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        }
      ],
      "callgraph": {
        "query_ollama": [
          "session.post",
          "str",
          "response.json",
          "result.get",
          "aiohttp.ClientSession"
        ],
        "health_check": [
          "track_workflow_event",
          "HealthResponse",
          "time.strftime",
          "app.get"
        ],
        "system_status": [
          "app.get",
          "str",
          "track_task_start",
          "int",
          "session.get",
          "time.strftime",
          "HTTPException",
          "track_task_complete",
          "track_workflow_event",
          "aiohttp.ClientSession",
          "time.time"
        ],
        "chat_ollama": [
          "tracker.track_token_usage",
          "query_ollama",
          "str",
          "track_task_start",
          "int",
          "app.post",
          "time.strftime",
          "response.split",
          "len",
          "get_metrics_tracker",
          "HTTPException",
          "track_task_complete",
          "track_workflow_event",
          "time.time"
        ],
        "get_ollama_models": [
          "app.get",
          "response.json",
          "session.get",
          "aiohttp.ClientSession",
          "data.get"
        ],
        "save_memory": [
          "app.post",
          "len"
        ],
        "get_memory_history": [
          "USER_MEMORY.get",
          "len",
          "app.get"
        ],
        "chat_message": [
          "tracker.track_token_usage",
          "str",
          "track_task_start",
          "int",
          "app.post",
          "time.strftime",
          "response_text.split",
          "ChatResponse",
          "len",
          "get_metrics_tracker",
          "HTTPException",
          "track_task_complete",
          "track_workflow_event",
          "time.time"
        ],
        "execute_cli_command": [
          "str",
          "track_task_start",
          "int",
          "app.post",
          "time.strftime",
          "subprocess.run",
          "HTTPException",
          "cmd_parts.extend",
          "track_task_complete",
          "track_workflow_event",
          "time.time"
        ],
        "get_metrics": [
          "app.get",
          "str",
          "tracker.get_analytics_data",
          "tracker.get_session_summary",
          "get_metrics_tracker",
          "HTTPException",
          "track_workflow_event"
        ],
        "root": [
          "app.get"
        ],
        "startup_event": [
          "track_workflow_event",
          "app.on_event",
          "get_metrics_tracker",
          "print"
        ],
        "shutdown_event": [
          "app.on_event",
          "print",
          "tracker.save_session",
          "get_metrics_tracker",
          "track_workflow_event"
        ]
      },
      "dependencies": [
        "Any",
        "BaseModel",
        "CORSMiddleware",
        "Depends",
        "Dict",
        "FastAPI",
        "HTTPException",
        "List",
        "Optional",
        "Path",
        "aiohttp",
        "asyncio",
        "fastapi",
        "fastapi.middleware.cors",
        "get_metrics_tracker",
        "json",
        "pathlib",
        "pydantic",
        "src.llmstruct.metrics_tracker",
        "subprocess",
        "time",
        "track_task_complete",
        "track_task_start",
        "track_workflow_event",
        "typing",
        "uvicorn"
      ],
      "hash": null,
      "artifact_id": "7fd6c3d0-7228-4c04-adbe-cb1018c3fa3a"
    },
    {
      "module_id": ".ARCHIVE.fastapi_ollama_server_working",
      "path": ".ARCHIVE/fastapi_ollama_server_working.py",
      "category": "core",
      "module_doc": "\ud83d\ude80 \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u043d\u044b\u0439 FastAPI \u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f LLMStruct\n- Ollama \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f\n- \u041f\u0430\u043c\u044f\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \n- \u041c\u0435\u0442\u0440\u0438\u043a\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b\n- \u0412\u0441\u0435 \u0432 \u043e\u0434\u043d\u043e\u043c \u0444\u0430\u0439\u043b\u0435 \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0442\u044b",
      "functions": [
        {
          "name": "load_user_memory",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043f\u0430\u043c\u044f\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439",
          "line_range": [
            56,
            64
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "save_user_memory",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043f\u0430\u043c\u044f\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439",
          "line_range": [
            66,
            72
          ],
          "parameters": [
            "memory"
          ],
          "decorators": []
        },
        {
          "name": "load_ollama_config",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 Ollama",
          "line_range": [
            74,
            82
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "root",
          "docstring": "\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 API",
          "line_range": [
            114,
            131
          ],
          "parameters": [],
          "decorators": [
            "app.get('/', summary='API Information')"
          ]
        },
        {
          "name": "health_check",
          "docstring": "Health check \u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u043e\u0439 Ollama",
          "line_range": [
            134,
            155
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/system/health', response_model=HealthResponse)"
          ]
        },
        {
          "name": "system_status",
          "docstring": "\u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            158,
            246
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/system/status')"
          ]
        },
        {
          "name": "chat_with_ollama",
          "docstring": "\u0427\u0430\u0442 \u0441 Ollama",
          "line_range": [
            251,
            319
          ],
          "parameters": [
            "request"
          ],
          "decorators": [
            "app.post('/api/v1/chat/ollama')"
          ]
        },
        {
          "name": "get_ollama_models",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 Ollama",
          "line_range": [
            322,
            350
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/ollama/models')"
          ]
        },
        {
          "name": "save_user_message",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            355,
            389
          ],
          "parameters": [
            "message"
          ],
          "decorators": [
            "app.post('/api/v1/memory/save')"
          ]
        },
        {
          "name": "get_user_history",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            392,
            415
          ],
          "parameters": [
            "user_id",
            "limit"
          ],
          "decorators": [
            "app.get('/api/v1/memory/history/{user_id}')"
          ]
        },
        {
          "name": "memory_stats",
          "docstring": "\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u043f\u0430\u043c\u044f\u0442\u0438",
          "line_range": [
            418,
            450
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/memory/stats')"
          ]
        },
        {
          "name": "clear_user_memory",
          "docstring": "\u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u043f\u0430\u043c\u044f\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            453,
            476
          ],
          "parameters": [
            "user_id"
          ],
          "decorators": [
            "app.delete('/api/v1/memory/clear/{user_id}')"
          ]
        },
        {
          "name": "read_project_file",
          "docstring": "\u0427\u0442\u0435\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u043e\u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            481,
            566
          ],
          "parameters": [
            "path",
            "lines",
            "start_line"
          ],
          "decorators": [
            "app.get('/api/v1/files/read')"
          ]
        },
        {
          "name": "list_available_files",
          "docstring": "\u0421\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f \u0444\u0430\u0439\u043b\u043e\u0432",
          "line_range": [
            569,
            600
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/files/list')"
          ]
        },
        {
          "name": "startup_event",
          "docstring": "\u0421\u043e\u0431\u044b\u0442\u0438\u044f \u043f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435",
          "line_range": [
            605,
            612
          ],
          "parameters": [],
          "decorators": [
            "app.on_event('startup')"
          ]
        },
        {
          "name": "shutdown_event",
          "docstring": "\u0421\u043e\u0431\u044b\u0442\u0438\u044f \u043f\u0440\u0438 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435",
          "line_range": [
            615,
            623
          ],
          "parameters": [],
          "decorators": [
            "app.on_event('shutdown')"
          ]
        }
      ],
      "classes": [
        {
          "name": "UserMessage",
          "docstring": "",
          "line_range": [
            85,
            90
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "OllamaRequest",
          "docstring": "",
          "line_range": [
            92,
            97
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "ChatMessage",
          "docstring": "",
          "line_range": [
            99,
            102
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "HealthResponse",
          "docstring": "",
          "line_range": [
            104,
            109
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        }
      ],
      "callgraph": {
        "load_user_memory": [
          "json.load",
          "USER_MEMORY_FILE.exists",
          "open",
          "print"
        ],
        "save_user_memory": [
          "open",
          "json.dump",
          "print"
        ],
        "load_ollama_config": [
          "open",
          "toml.load"
        ],
        "root": [
          "app.get"
        ],
        "health_check": [
          "app.get",
          "aiohttp.ClientTimeout",
          "load_ollama_config",
          "session.get",
          "time.strftime",
          "HealthResponse",
          "track_workflow_event",
          "aiohttp.ClientSession"
        ],
        "system_status": [
          "app.get",
          "memory.values",
          "load_ollama_config",
          "int",
          "resp.json",
          "HTTPException",
          "load_user_memory",
          "track_workflow_event",
          "USER_MEMORY_FILE.exists",
          "aiohttp.ClientSession",
          "sum",
          "time.time",
          "struct_file.exists",
          "track_task_start",
          "time.ctime",
          "session.get",
          "tracker.get_session_summary",
          "get_metrics_tracker",
          "aiohttp.ClientTimeout",
          "str",
          "Path",
          "len",
          "struct_file.stat",
          "time.strftime",
          "track_task_complete",
          "data.get"
        ],
        "chat_with_ollama": [
          "load_ollama_config",
          "int",
          "resp.json",
          "HTTPException",
          "track_workflow_event",
          "aiohttp.ClientSession",
          "time.time",
          "tracker.track_token_usage",
          "track_task_start",
          "get_metrics_tracker",
          "aiohttp.ClientTimeout",
          "session.post",
          "str",
          "app.post",
          "len",
          "resp.text",
          "time.strftime",
          "response_text.split",
          "track_task_complete",
          "data.get"
        ],
        "get_ollama_models": [
          "app.get",
          "aiohttp.ClientTimeout",
          "models.append",
          "load_ollama_config",
          "str",
          "session.get",
          "resp.json",
          "model.get",
          "len",
          "HTTPException",
          "aiohttp.ClientSession",
          "data.get"
        ],
        "save_user_message": [
          "str",
          "app.post",
          "time.strftime",
          "len",
          "HTTPException",
          "load_user_memory",
          "track_workflow_event",
          "save_user_memory"
        ],
        "get_user_history": [
          "app.get",
          "str",
          "memory.get",
          "len",
          "HTTPException",
          "load_user_memory",
          "Query",
          "track_workflow_event"
        ],
        "memory_stats": [
          "app.get",
          "memory.values",
          "last_message.get",
          "time.ctime",
          "str",
          "int",
          "user_stats.sort",
          "len",
          "USER_MEMORY_FILE.stat",
          "load_user_memory",
          "HTTPException",
          "memory.items",
          "USER_MEMORY_FILE.exists",
          "sum",
          "user_stats.append"
        ],
        "clear_user_memory": [
          "str",
          "time.strftime",
          "memory.get",
          "len",
          "HTTPException",
          "load_user_memory",
          "app.delete",
          "track_workflow_event",
          "save_user_memory"
        ],
        "read_project_file": [
          "file_path.stat",
          "app.get",
          "f.read",
          "int",
          "HTTPException",
          "track_workflow_event",
          "time.time",
          "track_task_start",
          "time.ctime",
          "file_path.exists",
          "min",
          "content.split",
          "f.readlines",
          "str",
          "Path",
          "len",
          "Query",
          "open",
          "time.strftime",
          "track_task_complete"
        ],
        "list_available_files": [
          "file_path.stat",
          "files_info.append",
          "app.get",
          "time.ctime",
          "Path",
          "time.strftime",
          "file_path.exists",
          "len",
          "track_workflow_event"
        ],
        "startup_event": [
          "track_workflow_event",
          "app.on_event",
          "get_metrics_tracker",
          "print"
        ],
        "shutdown_event": [
          "app.on_event",
          "print",
          "tracker.save_session",
          "get_metrics_tracker",
          "track_workflow_event"
        ]
      },
      "dependencies": [
        "Any",
        "BaseModel",
        "CORSMiddleware",
        "Dict",
        "FastAPI",
        "HTTPException",
        "List",
        "Optional",
        "Path",
        "Query",
        "aiohttp",
        "asyncio",
        "datetime",
        "fastapi",
        "fastapi.middleware.cors",
        "get_metrics_tracker",
        "json",
        "pathlib",
        "pydantic",
        "src.llmstruct.metrics_tracker",
        "time",
        "timedelta",
        "toml",
        "track_task_complete",
        "track_task_start",
        "track_workflow_event",
        "typing",
        "uvicorn"
      ],
      "hash": null,
      "artifact_id": "e0df871d-24ed-41fb-83a4-ca54c022c9a1"
    },
    {
      "module_id": ".ARCHIVE.test_context_orchestration",
      "path": ".ARCHIVE/test_context_orchestration.py",
      "category": "test",
      "module_doc": "LLM Context Orchestration Testing Suite\n\nComprehensive testing framework for validating context modes, token budgets,\nand LLM integration capabilities across different scenarios.",
      "functions": [
        {
          "name": "main",
          "docstring": "Main function for CLI testing.",
          "line_range": [
            422,
            461
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_relationship_context_focused",
          "docstring": "",
          "line_range": [
            467,
            480
          ],
          "parameters": [],
          "decorators": [
            "pytest.mark.asyncio"
          ]
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            44,
            47
          ],
          "parameters": [
            "self",
            "config_path"
          ],
          "decorators": []
        },
        {
          "name": "setup_logging",
          "docstring": "Set up logging for test execution.",
          "line_range": [
            49,
            59
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_test_config",
          "docstring": "Load context orchestration configuration.",
          "line_range": [
            61,
            82
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_context_mode",
          "docstring": "Test a specific context mode with given scenario.",
          "line_range": [
            84,
            132
          ],
          "parameters": [
            "self",
            "mode",
            "scenario"
          ],
          "decorators": []
        },
        {
          "name": "load_context_for_mode",
          "docstring": "Load context data based on mode and token budget.",
          "line_range": [
            134,
            166
          ],
          "parameters": [
            "self",
            "mode",
            "token_budget"
          ],
          "decorators": []
        },
        {
          "name": "load_json_file",
          "docstring": "Load JSON file with error handling.",
          "line_range": [
            168,
            177
          ],
          "parameters": [
            "self",
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "load_file_content",
          "docstring": "Load text file content.",
          "line_range": [
            179,
            188
          ],
          "parameters": [
            "self",
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "load_docs_summary",
          "docstring": "Load documentation summary.",
          "line_range": [
            190,
            193
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_src_summary",
          "docstring": "Load source code summary.",
          "line_range": [
            195,
            198
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_current_context",
          "docstring": "Load current working context.",
          "line_range": [
            200,
            202
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_project_summary",
          "docstring": "Load minimal project summary.",
          "line_range": [
            204,
            206
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_current_task",
          "docstring": "Load current task information.",
          "line_range": [
            208,
            210
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_session_context",
          "docstring": "Load AI session context.",
          "line_range": [
            212,
            214
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "estimate_tokens",
          "docstring": "Estimate token count for context data.",
          "line_range": [
            216,
            226
          ],
          "parameters": [
            "self",
            "context_data"
          ],
          "decorators": []
        },
        {
          "name": "trim_context_to_budget",
          "docstring": "Trim context data to fit within token budget.",
          "line_range": [
            228,
            255
          ],
          "parameters": [
            "self",
            "context_data",
            "budget"
          ],
          "decorators": []
        },
        {
          "name": "truncate_content",
          "docstring": "Truncate content to fit token budget.",
          "line_range": [
            257,
            271
          ],
          "parameters": [
            "self",
            "content",
            "token_budget"
          ],
          "decorators": []
        },
        {
          "name": "assess_response_quality",
          "docstring": "Assess the quality of context for LLM response.",
          "line_range": [
            273,
            295
          ],
          "parameters": [
            "self",
            "context_data",
            "scenario"
          ],
          "decorators": []
        },
        {
          "name": "run_comprehensive_test_suite",
          "docstring": "Run the complete test suite for all context modes and scenarios.",
          "line_range": [
            297,
            318
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "generate_test_report",
          "docstring": "Generate comprehensive test report.",
          "line_range": [
            320,
            370
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "generate_recommendations",
          "docstring": "Generate recommendations based on test results.",
          "line_range": [
            372,
            405
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_relationship_context_in_focused",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0447\u0442\u043e \u0432 FOCUSED \u0440\u0435\u0436\u0438\u043c\u0435 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 relationship_context \u0438 \u043e\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043c\u043e\u0434\u0443\u043b\u0438 \u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438.",
          "line_range": [
            407,
            419
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ContextTestResult",
          "docstring": "Test result for context orchestration testing.",
          "line_range": [
            29,
            39
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "LLMContextTester",
          "docstring": "Main testing class for LLM context capabilities.",
          "line_range": [
            41,
            419
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                44,
                47
              ],
              "parameters": [
                "self",
                "config_path"
              ]
            },
            {
              "name": "setup_logging",
              "docstring": "Set up logging for test execution.",
              "line_range": [
                49,
                59
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_test_config",
              "docstring": "Load context orchestration configuration.",
              "line_range": [
                61,
                82
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_context_mode",
              "docstring": "Test a specific context mode with given scenario.",
              "line_range": [
                84,
                132
              ],
              "parameters": [
                "self",
                "mode",
                "scenario"
              ]
            },
            {
              "name": "load_context_for_mode",
              "docstring": "Load context data based on mode and token budget.",
              "line_range": [
                134,
                166
              ],
              "parameters": [
                "self",
                "mode",
                "token_budget"
              ]
            },
            {
              "name": "load_json_file",
              "docstring": "Load JSON file with error handling.",
              "line_range": [
                168,
                177
              ],
              "parameters": [
                "self",
                "filepath"
              ]
            },
            {
              "name": "load_file_content",
              "docstring": "Load text file content.",
              "line_range": [
                179,
                188
              ],
              "parameters": [
                "self",
                "filepath"
              ]
            },
            {
              "name": "load_docs_summary",
              "docstring": "Load documentation summary.",
              "line_range": [
                190,
                193
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_src_summary",
              "docstring": "Load source code summary.",
              "line_range": [
                195,
                198
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_current_context",
              "docstring": "Load current working context.",
              "line_range": [
                200,
                202
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_project_summary",
              "docstring": "Load minimal project summary.",
              "line_range": [
                204,
                206
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_current_task",
              "docstring": "Load current task information.",
              "line_range": [
                208,
                210
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_session_context",
              "docstring": "Load AI session context.",
              "line_range": [
                212,
                214
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "estimate_tokens",
              "docstring": "Estimate token count for context data.",
              "line_range": [
                216,
                226
              ],
              "parameters": [
                "self",
                "context_data"
              ]
            },
            {
              "name": "trim_context_to_budget",
              "docstring": "Trim context data to fit within token budget.",
              "line_range": [
                228,
                255
              ],
              "parameters": [
                "self",
                "context_data",
                "budget"
              ]
            },
            {
              "name": "truncate_content",
              "docstring": "Truncate content to fit token budget.",
              "line_range": [
                257,
                271
              ],
              "parameters": [
                "self",
                "content",
                "token_budget"
              ]
            },
            {
              "name": "assess_response_quality",
              "docstring": "Assess the quality of context for LLM response.",
              "line_range": [
                273,
                295
              ],
              "parameters": [
                "self",
                "context_data",
                "scenario"
              ]
            },
            {
              "name": "run_comprehensive_test_suite",
              "docstring": "Run the complete test suite for all context modes and scenarios.",
              "line_range": [
                297,
                318
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "generate_test_report",
              "docstring": "Generate comprehensive test report.",
              "line_range": [
                320,
                370
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "generate_recommendations",
              "docstring": "Generate recommendations based on test results.",
              "line_range": [
                372,
                405
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_relationship_context_in_focused",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0447\u0442\u043e \u0432 FOCUSED \u0440\u0435\u0436\u0438\u043c\u0435 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 relationship_context \u0438 \u043e\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043c\u043e\u0434\u0443\u043b\u0438 \u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438.",
              "line_range": [
                407,
                419
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.setup_logging",
          "Path"
        ],
        "setup_logging": [
          "logging.StreamHandler",
          "logging.FileHandler",
          "logging.getLogger",
          "logging.basicConfig"
        ],
        "load_test_config": [
          "json.load",
          "open"
        ],
        "test_context_mode": [
          "self.load_test_config",
          "list",
          "context_data.keys",
          "str",
          "time.time",
          "self.assess_response_quality",
          "ContextTestResult",
          "isinstance",
          "self.load_context_for_mode",
          "self.estimate_tokens",
          "mode_config.get",
          "config.get"
        ],
        "load_context_for_mode": [
          "self.load_json_file",
          "self.load_current_task",
          "self.load_docs_summary",
          "self.trim_context_to_budget",
          "self.load_file_content",
          "self.load_src_summary",
          "self.load_session_context",
          "self.load_current_context",
          "self.load_project_summary"
        ],
        "load_json_file": [
          "json.load",
          "Path",
          "open",
          "path.exists"
        ],
        "load_file_content": [
          "Path",
          "open",
          "path.exists",
          "f.read"
        ],
        "load_docs_summary": [],
        "load_src_summary": [],
        "load_current_context": [],
        "load_project_summary": [],
        "load_current_task": [],
        "load_session_context": [
          "self.load_json_file"
        ],
        "estimate_tokens": [
          "json.dumps",
          "len",
          "str",
          "isinstance"
        ],
        "trim_context_to_budget": [
          "self.estimate_tokens",
          "self.truncate_content"
        ],
        "truncate_content": [
          "len",
          "isinstance"
        ],
        "assess_response_quality": [
          "min",
          "len"
        ],
        "run_comprehensive_test_suite": [
          "self.test_context_mode",
          "self.generate_test_report"
        ],
        "generate_test_report": [
          "Path",
          "open",
          "json.dump",
          "mode_results.items",
          "len",
          "self.generate_recommendations",
          "sum",
          "asdict"
        ],
        "generate_recommendations": [
          "sum",
          "recommendations.append",
          "len",
          "mode_success.items"
        ],
        "test_relationship_context_in_focused": [
          "self.load_context_for_mode",
          "len",
          "print",
          "isinstance"
        ],
        "main": [
          "argparse.ArgumentParser",
          "print",
          "LLMContextTester",
          "parser.add_argument",
          "parser.parse_args",
          "tester.test_context_mode",
          "tester.run_comprehensive_test_suite"
        ],
        "test_relationship_context_focused": [
          "os.getcwd",
          "print",
          "orchestrator.get_context_for_scenario",
          "SmartContextOrchestrator",
          "len",
          "isinstance"
        ]
      },
      "dependencies": [
        "Any",
        "CLICommands",
        "Dict",
        "List",
        "Optional",
        "Path",
        "SmartContextOrchestrator",
        "argparse",
        "asdict",
        "asyncio",
        "dataclass",
        "dataclasses",
        "json",
        "logging",
        "os",
        "pathlib",
        "pytest",
        "src.llmstruct.cli_commands",
        "src.llmstruct.context_orchestrator",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "1462034e-1763-4431-b198-a174fbc5b32d"
    },
    {
      "module_id": ".ARCHIVE.test_cli",
      "path": ".ARCHIVE/test_cli.py",
      "category": "test",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "51ca8203-152d-4560-aa3b-5f33ea4b0b72"
    },
    {
      "module_id": ".ARCHIVE.modules.query.handlers",
      "path": ".ARCHIVE/modules/query/handlers.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": [
            8,
            52
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "query": [
          "create_context_orchestrator",
          "logging.info",
          "Path",
          "LLMClient",
          "orchestrator.get_context_for_scenario",
          "json.dump",
          "JSONCache",
          "client.query",
          "cache.close",
          "client.query_with_context",
          "logging.error",
          "logging.warning",
          "hasattr"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "Path",
        "context_orchestrator",
        "create_context_orchestrator",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "logging",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "3e0b8739-31c8-4a70-b065-5db4fbb9eec0"
    },
    {
      "module_id": ".ARCHIVE.modules.query.__init__",
      "path": ".ARCHIVE/modules/query/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "handlers",
        "query"
      ],
      "hash": null,
      "artifact_id": "d5eccecb-e093-4706-a90a-38aec2041fae"
    },
    {
      "module_id": ".ARCHIVE.modules.bot.handlers",
      "path": ".ARCHIVE/modules/bot/handlers.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "cmd_bot_management",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 Telegram \u0431\u043e\u0442\u0430\u043c\u0438",
          "line_range": [
            6,
            83
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "cmd_bot_management": [
          "psutil.Process",
          "print",
          "str",
          "process.wait",
          "Path",
          "subprocess.Popen",
          "bot_scripts.get",
          "os.getenv",
          "open",
          "process.terminate",
          "int",
          "f.read",
          "process.is_running",
          "active_bots.append",
          "pid_file.unlink",
          "pid_file.exists",
          "f.write"
        ]
      },
      "dependencies": [
        "Path",
        "os",
        "pathlib",
        "psutil",
        "subprocess"
      ],
      "hash": null,
      "artifact_id": "4b351cea-5720-448e-8fd3-cbc1d1d29866"
    },
    {
      "module_id": ".ARCHIVE.modules.bot.__init__",
      "path": ".ARCHIVE/modules/bot/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "cmd_bot_management",
        "handlers"
      ],
      "hash": null,
      "artifact_id": "2bf6ca76-fd47-4608-a5a8-ee893a2b93fb"
    },
    {
      "module_id": ".ARCHIVE.modules.metrics.handlers",
      "path": ".ARCHIVE/modules/metrics/handlers.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "metrics_status",
          "docstring": "",
          "line_range": [
            4,
            22
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "metrics_summary",
          "docstring": "",
          "line_range": [
            24,
            67
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "metrics_analytics",
          "docstring": "",
          "line_range": [
            69,
            102
          ],
          "parameters": [
            "output_file",
            "format"
          ],
          "decorators": []
        },
        {
          "name": "metrics_report",
          "docstring": "",
          "line_range": [
            104,
            130
          ],
          "parameters": [
            "sessions",
            "output_file"
          ],
          "decorators": []
        },
        {
          "name": "metrics_track",
          "docstring": "",
          "line_range": [
            132,
            140
          ],
          "parameters": [
            "event_type",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "metrics_tokens",
          "docstring": "",
          "line_range": [
            142,
            179
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "cmd_metrics",
          "docstring": "",
          "line_range": [
            181,
            198
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "metrics_status": [
          "get_metrics_tracker",
          "tracker.get_session_summary",
          "print"
        ],
        "metrics_summary": [
          "max",
          "get_metrics_tracker",
          "tracker.get_session_summary",
          "print"
        ],
        "metrics_analytics": [
          "json.dumps",
          "enumerate",
          "print",
          "tracker.get_analytics_data",
          "open",
          "tracker.get_session_summary",
          "time.strftime",
          "json.dump",
          "get_metrics_tracker",
          "csv.writer",
          "writer.writerow"
        ],
        "metrics_report": [
          "print",
          "tracker.get_analytics_data",
          "open",
          "time.strftime",
          "min",
          "get_metrics_tracker",
          "len",
          "analytics.get",
          "sum",
          "f.write"
        ],
        "metrics_track": [
          "track_workflow_event",
          "print"
        ],
        "metrics_tokens": [
          "enumerate",
          "print",
          "get_metrics_tracker",
          "interaction.get",
          "summary.get",
          "get_token_summary"
        ],
        "cmd_metrics": [
          "metrics_analytics",
          "metrics_tokens",
          "metrics_report",
          "metrics_track",
          "metrics_summary",
          "print",
          "metrics_status"
        ]
      },
      "dependencies": [
        "csv",
        "get_metrics_tracker",
        "get_token_summary",
        "json",
        "metrics_tracker",
        "time",
        "track_workflow_event"
      ],
      "hash": null,
      "artifact_id": "ab9245f3-9591-4933-8ad5-ceeb0efe01a8"
    },
    {
      "module_id": ".ARCHIVE.modules.metrics.__init__",
      "path": ".ARCHIVE/modules/metrics/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "cmd_metrics",
        "handlers"
      ],
      "hash": null,
      "artifact_id": "dacb5df1-74c9-49ba-b968-b9350c9f14d5"
    },
    {
      "module_id": ".ARCHIVE.modules.analyze_duplicates.handlers",
      "path": ".ARCHIVE/modules/analyze_duplicates/handlers.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "analyze_duplicates",
          "docstring": "Analyze function duplication using struct.json deep analysis.",
          "line_range": [
            4,
            84
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "analyze_duplicates": [
          "json.dumps",
          "f.get",
          "print",
          "orchestrator.analyze_codebase_for_duplicates",
          "getattr",
          "open",
          "json.dump",
          "analysis.get",
          "len",
          "func.get",
          "logging.error",
          "WorkflowOrchestrator"
        ]
      },
      "dependencies": [
        "WorkflowOrchestrator",
        "json",
        "logging",
        "workflow_orchestrator"
      ],
      "hash": null,
      "artifact_id": "19171219-b463-4c9b-98d6-4a077efb3e35"
    },
    {
      "module_id": ".ARCHIVE.modules.analyze_duplicates.__init__",
      "path": ".ARCHIVE/modules/analyze_duplicates/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "analyze_duplicates",
        "handlers"
      ],
      "hash": null,
      "artifact_id": "444d26f2-dd62-48ef-914c-69cd620f9e97"
    },
    {
      "module_id": ".ARCHIVE.modules.parse.handlers",
      "path": ".ARCHIVE/modules/parse/handlers.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": [
            8,
            38
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "parse": [
          "generate_json_with_output_file",
          "JSONCache",
          "cache.close",
          "load_gitignore",
          "attach_to_llm_request",
          "logging.error",
          "logging.info"
        ]
      },
      "dependencies": [
        "JSONCache",
        "Path",
        "attach_to_llm_request",
        "cli",
        "generate_json_with_output_file",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "load_gitignore",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "d60e597c-2505-4483-9e7d-1b33f4690007"
    },
    {
      "module_id": ".ARCHIVE.modules.parse.__init__",
      "path": ".ARCHIVE/modules/parse/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "handlers",
        "parse"
      ],
      "hash": null,
      "artifact_id": "2c50736b-bf23-4954-abda-ef4268e5b2fc"
    },
    {
      "module_id": ".ARCHIVE.modules.audit.handlers",
      "path": ".ARCHIVE/modules/audit/handlers.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "audit",
          "docstring": "Audit project structure and generate reports.",
          "line_range": [
            4,
            17
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "audit": [
          "print",
          "Path",
          "file_path.exists",
          "analyze_duplicates",
          "hasattr"
        ]
      },
      "dependencies": [
        "Path",
        "analyze_duplicates",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "3d2e180f-9e3f-47f3-bd94-249305a09ea3"
    },
    {
      "module_id": ".ARCHIVE.modules.audit.__init__",
      "path": ".ARCHIVE/modules/audit/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "audit",
        "handlers"
      ],
      "hash": null,
      "artifact_id": "0cab0484-8703-4a4c-83d5-16c84064d7bc"
    },
    {
      "module_id": ".ARCHIVE.modules.review.handlers",
      "path": ".ARCHIVE/modules/review/handlers.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": [
            3,
            7
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "review": [
          "print",
          "logging.warning"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": null,
      "artifact_id": "44ca0f29-6f0a-4da3-9ab2-638fc019e699"
    },
    {
      "module_id": ".ARCHIVE.modules.review.__init__",
      "path": ".ARCHIVE/modules/review/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "handlers",
        "review"
      ],
      "hash": null,
      "artifact_id": "9cb69ec3-f129-4524-8c2c-29c38fe66709"
    },
    {
      "module_id": ".ARCHIVE.modules.context.handlers",
      "path": ".ARCHIVE/modules/context/handlers.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": [
            3,
            7
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "context": [
          "print",
          "logging.warning"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": null,
      "artifact_id": "8687cf51-1e44-4a94-b1b0-75ced619742d"
    },
    {
      "module_id": ".ARCHIVE.modules.context.__init__",
      "path": ".ARCHIVE/modules/context/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "context",
        "handlers"
      ],
      "hash": null,
      "artifact_id": "ee1401ec-ab47-42e8-bc0e-844ff24ed346"
    },
    {
      "module_id": ".ARCHIVE.modules.copilot.handlers",
      "path": ".ARCHIVE/modules/copilot/handlers.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "copilot",
          "docstring": "Copilot integration and context management.",
          "line_range": [
            5,
            95
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "copilot": [
          "manager.load_context_layer",
          "manager.refresh_all_contexts",
          "initialize_copilot",
          "config_path.exists",
          "manager.get_context_status",
          "enumerate",
          "manager.unload_context_layer",
          "getattr",
          "manager.export_context",
          "manager.validate_change",
          "Path",
          "manager.close",
          "layers.split",
          "template_path.exists",
          "hasattr",
          "logging.info",
          "print",
          "open",
          "smart_suggest",
          "logging.error",
          "shutil.copy",
          "f.write"
        ]
      },
      "dependencies": [
        "Path",
        "copilot",
        "initialize_copilot",
        "logging",
        "pathlib",
        "shutil",
        "smart_suggest"
      ],
      "hash": null,
      "artifact_id": "071c9d98-ef16-4075-9d8a-bd0eaea5741b"
    },
    {
      "module_id": ".ARCHIVE.modules.copilot.__init__",
      "path": ".ARCHIVE/modules/copilot/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "copilot",
        "handlers"
      ],
      "hash": null,
      "artifact_id": "634298f0-be52-4414-af1c-43ff23201f86"
    },
    {
      "module_id": ".ARCHIVE.modules.api.handlers",
      "path": ".ARCHIVE/modules/api/handlers.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "cmd_api_management",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 API \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c",
          "line_range": [
            7,
            69
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "cmd_api_management": [
          "data.get",
          "requests.post",
          "psutil.Process",
          "requests.get",
          "print",
          "venv_path.exists",
          "Path",
          "subprocess.Popen",
          "open",
          "str",
          "process.wait",
          "process.terminate",
          "response.json",
          "int",
          "f.read",
          "pid_file.unlink",
          "pid_file.exists",
          "f.write"
        ]
      },
      "dependencies": [
        "Path",
        "pathlib",
        "psutil",
        "requests",
        "signal",
        "subprocess"
      ],
      "hash": null,
      "artifact_id": "ebaf2ea4-eb18-46e7-b759-766ef7c05d4b"
    },
    {
      "module_id": ".ARCHIVE.modules.api.__init__",
      "path": ".ARCHIVE/modules/api/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "cmd_api_management",
        "handlers"
      ],
      "hash": null,
      "artifact_id": "453cc1dd-cc15-40be-9805-0e4f63090a03"
    },
    {
      "module_id": ".ARCHIVE.modules.interactive.handlers",
      "path": ".ARCHIVE/modules/interactive/handlers.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with modular structure if available, fallback to legacy.",
          "line_range": [
            7,
            13
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive_modular",
          "docstring": "",
          "line_range": [
            15,
            21
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive_legacy",
          "docstring": "",
          "line_range": [
            23,
            40
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "basic_interactive_processing",
          "docstring": "",
          "line_range": [
            42,
            64
          ],
          "parameters": [
            "args",
            "cache",
            "client"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "interactive": [
          "interactive_modular",
          "interactive_legacy",
          "logging.warning"
        ],
        "interactive_modular": [
          "cli_core.run_interactive_mode",
          "create_cli_core"
        ],
        "interactive_legacy": [
          "print",
          "Path",
          "LLMClient",
          "JSONCache",
          "cache.close",
          "logging.error",
          "basic_interactive_processing"
        ],
        "basic_interactive_processing": [
          "input",
          "user_input.lower",
          "print",
          "f.read",
          "open",
          "user_input.startswith"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "Path",
        "create_cli_core",
        "llmstruct",
        "llmstruct.cache",
        "logging",
        "os",
        "pathlib",
        "src.llmstruct.cli_core"
      ],
      "hash": null,
      "artifact_id": "1d656ac6-2711-41d4-a60b-920a23e69f77"
    },
    {
      "module_id": ".ARCHIVE.modules.interactive.__init__",
      "path": ".ARCHIVE/modules/interactive/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "handlers",
        "interactive"
      ],
      "hash": null,
      "artifact_id": "fde61514-2514-4e1f-8375-6062b9c31d27"
    },
    {
      "module_id": ".ARCHIVE.modules.dogfood.handlers",
      "path": ".ARCHIVE/modules/dogfood/handlers.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": [
            3,
            5
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "dogfood": [
          "logging.warning"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": null,
      "artifact_id": "715a3ab6-b34d-4d70-a362-bfcc6ac0f628"
    },
    {
      "module_id": ".ARCHIVE.modules.dogfood.__init__",
      "path": ".ARCHIVE/modules/dogfood/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "dogfood",
        "handlers"
      ],
      "hash": null,
      "artifact_id": "c7aaee79-4662-4910-a5ce-c51c7347a74c"
    },
    {
      "module_id": ".ARCHIVE.modules.services.handlers",
      "path": ".ARCHIVE/modules/services/handlers.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "cmd_services",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u043c\u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438 (API + Bots)",
          "line_range": [
            4,
            46
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "cmd_services": [
          "print",
          "type",
          "time.sleep",
          "cmd_api_management",
          "cmd_bot_management"
        ]
      },
      "dependencies": [
        "api",
        "bot",
        "cmd_api_management",
        "cmd_bot_management",
        "time"
      ],
      "hash": null,
      "artifact_id": "bd17b032-2494-4966-84ae-9303d82adf83"
    },
    {
      "module_id": ".ARCHIVE.modules.services.__init__",
      "path": ".ARCHIVE/modules/services/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "cmd_services",
        "handlers"
      ],
      "hash": null,
      "artifact_id": "8f055853-a973-4834-9f20-16424750e2b0"
    },
    {
      "module_id": ".ARCHIVE.temp_boss_missing.scripts.business_planning",
      "path": ".ARCHIVE/temp_boss_missing/scripts/business_planning.py",
      "category": "core",
      "module_doc": "Business Planning Module\n\u041c\u043e\u0434\u0443\u043b\u044c \u0434\u043b\u044f \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430.\n\u0414\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044e \u043f\u0440\u043e\u0435\u043a\u0442\u0430.",
      "functions": [
        {
          "name": "create_business_planning_manager",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.",
          "line_range": [
            216,
            218
          ],
          "parameters": [
            "data_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.",
          "line_range": [
            20,
            27
          ],
          "parameters": [
            "self",
            "boss_data_dir"
          ],
          "decorators": []
        },
        {
          "name": "create_business_roadmap",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u0430.",
          "line_range": [
            29,
            55
          ],
          "parameters": [
            "self",
            "roadmap_data"
          ],
          "decorators": []
        },
        {
          "name": "create_financial_plan",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u043e\u0433\u043e \u043f\u043b\u0430\u043d\u0430.",
          "line_range": [
            57,
            82
          ],
          "parameters": [
            "self",
            "plan_data"
          ],
          "decorators": []
        },
        {
          "name": "record_strategic_decision",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f.",
          "line_range": [
            84,
            116
          ],
          "parameters": [
            "self",
            "decision_data"
          ],
          "decorators": []
        },
        {
          "name": "analyze_business_metrics",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.",
          "line_range": [
            118,
            154
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_business_summary",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e.",
          "line_range": [
            156,
            193
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_data",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 JSON \u0444\u0430\u0439\u043b\u0430.",
          "line_range": [
            195,
            204
          ],
          "parameters": [
            "self",
            "file_path",
            "default"
          ],
          "decorators": []
        },
        {
          "name": "_save_data",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JSON \u0444\u0430\u0439\u043b.",
          "line_range": [
            206,
            213
          ],
          "parameters": [
            "self",
            "file_path",
            "data"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "BusinessPlanningManager",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0438 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u043e\u0439 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0435\u0439.",
          "line_range": [
            17,
            213
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.",
              "line_range": [
                20,
                27
              ],
              "parameters": [
                "self",
                "boss_data_dir"
              ]
            },
            {
              "name": "create_business_roadmap",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u0430.",
              "line_range": [
                29,
                55
              ],
              "parameters": [
                "self",
                "roadmap_data"
              ]
            },
            {
              "name": "create_financial_plan",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u043e\u0433\u043e \u043f\u043b\u0430\u043d\u0430.",
              "line_range": [
                57,
                82
              ],
              "parameters": [
                "self",
                "plan_data"
              ]
            },
            {
              "name": "record_strategic_decision",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f.",
              "line_range": [
                84,
                116
              ],
              "parameters": [
                "self",
                "decision_data"
              ]
            },
            {
              "name": "analyze_business_metrics",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.",
              "line_range": [
                118,
                154
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_business_summary",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e.",
              "line_range": [
                156,
                193
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_data",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 JSON \u0444\u0430\u0439\u043b\u0430.",
              "line_range": [
                195,
                204
              ],
              "parameters": [
                "self",
                "file_path",
                "default"
              ]
            },
            {
              "name": "_save_data",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JSON \u0444\u0430\u0439\u043b.",
              "line_range": [
                206,
                213
              ],
              "parameters": [
                "self",
                "file_path",
                "data"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path"
        ],
        "create_business_roadmap": [
          "logger.info",
          "self._save_data",
          "datetime.now",
          "logger.error"
        ],
        "create_financial_plan": [
          "logger.info",
          "self._save_data",
          "datetime.now",
          "logger.error"
        ],
        "record_strategic_decision": [
          "self._load_data",
          "self._save_data",
          "datetime.now",
          "logger.error",
          "isinstance",
          "logger.info",
          "decision_data.get",
          "decisions.append"
        ],
        "analyze_business_metrics": [
          "self._load_data",
          "datetime.now",
          "logger.error",
          "len",
          "isinstance"
        ],
        "get_business_summary": [
          "self._load_data",
          "bool",
          "datetime.now",
          "logger.error",
          "financial.get",
          "len",
          "roadmap.get",
          "isinstance"
        ],
        "_load_data": [
          "file_path.open",
          "json.load",
          "logger.error",
          "file_path.exists"
        ],
        "_save_data": [
          "file_path.open",
          "logger.error",
          "json.dump"
        ],
        "create_business_planning_manager": [
          "BusinessPlanningManager"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "sys",
        "timedelta",
        "typing"
      ],
      "hash": null,
      "artifact_id": "18a40061-45c3-4708-b3ba-0dc26451eb69"
    },
    {
      "module_id": ".ARCHIVE.temp_boss_missing.scripts.team_management",
      "path": ".ARCHIVE/temp_boss_missing/scripts/team_management.py",
      "category": "core",
      "module_doc": "Team Management Module\n\u041c\u043e\u0434\u0443\u043b\u044c \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439, \u043e\u0446\u0435\u043d\u043a\u0438 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432 \u0438 HR-\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432.\n\u0414\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044e \u043f\u0440\u043e\u0435\u043a\u0442\u0430.",
      "functions": [
        {
          "name": "create_team_management_system",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
          "line_range": [
            291,
            293
          ],
          "parameters": [
            "data_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
          "line_range": [
            20,
            27
          ],
          "parameters": [
            "self",
            "boss_data_dir"
          ],
          "decorators": []
        },
        {
          "name": "create_team_strategy",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
          "line_range": [
            29,
            54
          ],
          "parameters": [
            "self",
            "strategy_data"
          ],
          "decorators": []
        },
        {
          "name": "record_team_evaluation",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u0447\u043b\u0435\u043d\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            56,
            88
          ],
          "parameters": [
            "self",
            "evaluation_data"
          ],
          "decorators": []
        },
        {
          "name": "create_hiring_plan",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430 \u043d\u0430\u0439\u043c\u0430.",
          "line_range": [
            90,
            115
          ],
          "parameters": [
            "self",
            "plan_data"
          ],
          "decorators": []
        },
        {
          "name": "analyze_team_performance",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            117,
            156
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_team_summary",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
          "line_range": [
            158,
            195
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "generate_team_report",
          "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043e\u0442\u0447\u0451\u0442\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
          "line_range": [
            197,
            226
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_summarize_strategy",
          "docstring": "\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u0438\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438.",
          "line_range": [
            228,
            238
          ],
          "parameters": [
            "self",
            "strategy"
          ],
          "decorators": []
        },
        {
          "name": "_summarize_evaluations",
          "docstring": "\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u0438\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043e\u0446\u0435\u043d\u043e\u043a.",
          "line_range": [
            240,
            250
          ],
          "parameters": [
            "self",
            "evaluations"
          ],
          "decorators": []
        },
        {
          "name": "_generate_recommendations",
          "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0439.",
          "line_range": [
            252,
            268
          ],
          "parameters": [
            "self",
            "strategy",
            "evaluations"
          ],
          "decorators": []
        },
        {
          "name": "_load_data",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 JSON \u0444\u0430\u0439\u043b\u0430.",
          "line_range": [
            270,
            279
          ],
          "parameters": [
            "self",
            "file_path",
            "default"
          ],
          "decorators": []
        },
        {
          "name": "_save_data",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JSON \u0444\u0430\u0439\u043b.",
          "line_range": [
            281,
            288
          ],
          "parameters": [
            "self",
            "file_path",
            "data"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TeamManagementSystem",
          "docstring": "\u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439 \u0438 HR-\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438.",
          "line_range": [
            17,
            288
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
              "line_range": [
                20,
                27
              ],
              "parameters": [
                "self",
                "boss_data_dir"
              ]
            },
            {
              "name": "create_team_strategy",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
              "line_range": [
                29,
                54
              ],
              "parameters": [
                "self",
                "strategy_data"
              ]
            },
            {
              "name": "record_team_evaluation",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u0447\u043b\u0435\u043d\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                56,
                88
              ],
              "parameters": [
                "self",
                "evaluation_data"
              ]
            },
            {
              "name": "create_hiring_plan",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430 \u043d\u0430\u0439\u043c\u0430.",
              "line_range": [
                90,
                115
              ],
              "parameters": [
                "self",
                "plan_data"
              ]
            },
            {
              "name": "analyze_team_performance",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                117,
                156
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_team_summary",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
              "line_range": [
                158,
                195
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "generate_team_report",
              "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043e\u0442\u0447\u0451\u0442\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
              "line_range": [
                197,
                226
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_summarize_strategy",
              "docstring": "\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u0438\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438.",
              "line_range": [
                228,
                238
              ],
              "parameters": [
                "self",
                "strategy"
              ]
            },
            {
              "name": "_summarize_evaluations",
              "docstring": "\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u0438\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043e\u0446\u0435\u043d\u043e\u043a.",
              "line_range": [
                240,
                250
              ],
              "parameters": [
                "self",
                "evaluations"
              ]
            },
            {
              "name": "_generate_recommendations",
              "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0439.",
              "line_range": [
                252,
                268
              ],
              "parameters": [
                "self",
                "strategy",
                "evaluations"
              ]
            },
            {
              "name": "_load_data",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 JSON \u0444\u0430\u0439\u043b\u0430.",
              "line_range": [
                270,
                279
              ],
              "parameters": [
                "self",
                "file_path",
                "default"
              ]
            },
            {
              "name": "_save_data",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JSON \u0444\u0430\u0439\u043b.",
              "line_range": [
                281,
                288
              ],
              "parameters": [
                "self",
                "file_path",
                "data"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path"
        ],
        "create_team_strategy": [
          "logger.info",
          "self._save_data",
          "datetime.now",
          "logger.error"
        ],
        "record_team_evaluation": [
          "self._load_data",
          "self._save_data",
          "datetime.now",
          "evaluations.append",
          "logger.error",
          "logger.info",
          "isinstance"
        ],
        "create_hiring_plan": [
          "logger.info",
          "self._save_data",
          "datetime.now",
          "logger.error"
        ],
        "analyze_team_performance": [
          "self._load_data",
          "bool",
          "datetime.now",
          "logger.error",
          "len",
          "isinstance"
        ],
        "get_team_summary": [
          "self._load_data",
          "bool",
          "datetime.now",
          "logger.error",
          "len",
          "hiring_plans.get",
          "strategy.get",
          "isinstance"
        ],
        "generate_team_report": [
          "self._load_data",
          "datetime.now",
          "self._summarize_strategy",
          "self._generate_recommendations",
          "logger.error",
          "self._summarize_evaluations"
        ],
        "_summarize_strategy": [
          "strategy.get"
        ],
        "_summarize_evaluations": [
          "len",
          "isinstance"
        ],
        "_generate_recommendations": [
          "len",
          "recommendations.append"
        ],
        "_load_data": [
          "file_path.open",
          "json.load",
          "logger.error",
          "file_path.exists"
        ],
        "_save_data": [
          "file_path.open",
          "logger.error",
          "json.dump"
        ],
        "create_team_management_system": [
          "TeamManagementSystem"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "sys",
        "timedelta",
        "typing"
      ],
      "hash": null,
      "artifact_id": "5d559688-490e-4c7c-a64c-1a0986c0ab3a"
    },
    {
      "module_id": ".ARCHIVE.temp_boss_missing.scripts.boss_cli",
      "path": ".ARCHIVE/temp_boss_missing/scripts/boss_cli.py",
      "category": "core",
      "module_doc": "Boss CLI - \u041f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 CLI \u0434\u043b\u044f \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f\n\u0412\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432\u0441\u0435 \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 + \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u043e\u0434\u0443\u043b\u0438",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f.",
          "line_range": [
            490,
            503
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f Boss CLI.",
          "line_range": [
            42,
            101
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "run_interactive",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0440\u0435\u0436\u0438\u043c\u0430 Boss CLI.",
          "line_range": [
            103,
            126
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "process_command",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            128,
            147
          ],
          "parameters": [
            "self",
            "command_line"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_status",
          "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0441\u0442\u0430\u0442\u0443\u0441.",
          "line_range": [
            150,
            157
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_audit",
          "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0430\u0443\u0434\u0438\u0442.",
          "line_range": [
            159,
            166
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_context",
          "docstring": "AI \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435.",
          "line_range": [
            168,
            175
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_queue",
          "docstring": "AI \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433.",
          "line_range": [
            177,
            184
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_summary",
          "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 summary.",
          "line_range": [
            186,
            193
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_business_roadmap",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u043e\u043c.",
          "line_range": [
            196,
            221
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_financial_plan",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u044b\u043c \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c.",
          "line_range": [
            223,
            256
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_strategic_decision",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439.",
          "line_range": [
            258,
            273
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_business_analysis",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.",
          "line_range": [
            275,
            282
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_business_summary",
          "docstring": "\u0421\u0432\u043e\u0434\u043a\u0430 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441\u0443.",
          "line_range": [
            284,
            291
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_strategy",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            294,
            308
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_evaluation",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            310,
            326
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_hiring_plan",
          "docstring": "\u041f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430\u0439\u043c\u0430.",
          "line_range": [
            328,
            346
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_analysis",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            348,
            355
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_report",
          "docstring": "\u041e\u0442\u0447\u0451\u0442 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
          "line_range": [
            357,
            364
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_technical",
          "docstring": "\u0422\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b (\u043f\u043e\u043b\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f).",
          "line_range": [
            367,
            379
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_context_full",
          "docstring": "\u041d\u0435\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0443.",
          "line_range": [
            381,
            384
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_workspace_override",
          "docstring": "Emergency workspace overrides.",
          "line_range": [
            387,
            396
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_capabilities",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b.",
          "line_range": [
            399,
            422
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_boss_status",
          "docstring": "\u041e\u0431\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 Boss CLI.",
          "line_range": [
            424,
            440
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_help",
          "docstring": "\u0421\u043f\u0440\u0430\u0432\u043a\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c Boss CLI.",
          "line_range": [
            442,
            487
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "BossCLI",
          "docstring": "Boss CLI - \u043f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f.\n\u0412\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432\u0441\u0435 \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 + \u0431\u0438\u0437\u043d\u0435\u0441-\u0444\u0443\u043d\u043a\u0446\u0438\u0438.",
          "line_range": [
            36,
            487
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f Boss CLI.",
              "line_range": [
                42,
                101
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "run_interactive",
              "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0440\u0435\u0436\u0438\u043c\u0430 Boss CLI.",
              "line_range": [
                103,
                126
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "process_command",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                128,
                147
              ],
              "parameters": [
                "self",
                "command_line"
              ]
            },
            {
              "name": "cmd_ai_status",
              "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0441\u0442\u0430\u0442\u0443\u0441.",
              "line_range": [
                150,
                157
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_audit",
              "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0430\u0443\u0434\u0438\u0442.",
              "line_range": [
                159,
                166
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_context",
              "docstring": "AI \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435.",
              "line_range": [
                168,
                175
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_queue",
              "docstring": "AI \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433.",
              "line_range": [
                177,
                184
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_summary",
              "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 summary.",
              "line_range": [
                186,
                193
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_business_roadmap",
              "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u043e\u043c.",
              "line_range": [
                196,
                221
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_financial_plan",
              "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u044b\u043c \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c.",
              "line_range": [
                223,
                256
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_strategic_decision",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439.",
              "line_range": [
                258,
                273
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_business_analysis",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.",
              "line_range": [
                275,
                282
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_business_summary",
              "docstring": "\u0421\u0432\u043e\u0434\u043a\u0430 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441\u0443.",
              "line_range": [
                284,
                291
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_strategy",
              "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                294,
                308
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_evaluation",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                310,
                326
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_hiring_plan",
              "docstring": "\u041f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430\u0439\u043c\u0430.",
              "line_range": [
                328,
                346
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_analysis",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                348,
                355
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_report",
              "docstring": "\u041e\u0442\u0447\u0451\u0442 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
              "line_range": [
                357,
                364
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_technical",
              "docstring": "\u0422\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b (\u043f\u043e\u043b\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f).",
              "line_range": [
                367,
                379
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_context_full",
              "docstring": "\u041d\u0435\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0443.",
              "line_range": [
                381,
                384
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_workspace_override",
              "docstring": "Emergency workspace overrides.",
              "line_range": [
                387,
                396
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_capabilities",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b.",
              "line_range": [
                399,
                422
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_boss_status",
              "docstring": "\u041e\u0431\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 Boss CLI.",
              "line_range": [
                424,
                440
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_help",
              "docstring": "\u0421\u043f\u0440\u0430\u0432\u043a\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c Boss CLI.",
              "line_range": [
                442,
                487
              ],
              "parameters": [
                "self",
                "args"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "CommandProcessor",
          "BusinessPlanningManager",
          "AISelfAwarenessCLIIntegration",
          "CLIUtils",
          "str",
          "Path",
          "TeamManagementSystem",
          "CLIConfig"
        ],
        "run_interactive": [
          "self.process_command",
          "input",
          "user_input.lower",
          "print"
        ],
        "process_command": [
          "command_line.split",
          "len",
          "print",
          "cmd.startswith"
        ],
        "cmd_ai_status": [
          "json.dumps",
          "print"
        ],
        "cmd_ai_audit": [
          "json.dumps",
          "print"
        ],
        "cmd_ai_context": [
          "json.dumps",
          "print"
        ],
        "cmd_ai_queue": [
          "json.dumps",
          "print"
        ],
        "cmd_ai_summary": [
          "json.dumps",
          "print"
        ],
        "cmd_business_roadmap": [
          "json.dumps",
          "print"
        ],
        "cmd_financial_plan": [
          "json.dumps",
          "print"
        ],
        "cmd_strategic_decision": [
          "json.dumps",
          "print"
        ],
        "cmd_business_analysis": [
          "json.dumps",
          "print"
        ],
        "cmd_business_summary": [
          "json.dumps",
          "print"
        ],
        "cmd_team_strategy": [
          "json.dumps",
          "print"
        ],
        "cmd_team_evaluation": [
          "json.dumps",
          "print"
        ],
        "cmd_hiring_plan": [
          "json.dumps",
          "print"
        ],
        "cmd_team_analysis": [
          "json.dumps",
          "print"
        ],
        "cmd_team_report": [
          "json.dumps",
          "print"
        ],
        "cmd_technical": [
          "print"
        ],
        "cmd_context_full": [
          "print"
        ],
        "cmd_workspace_override": [
          "print"
        ],
        "cmd_capabilities": [
          "json.dumps",
          "bool",
          "print"
        ],
        "cmd_boss_status": [
          "json.dumps",
          "print"
        ],
        "cmd_help": [
          "print"
        ],
        "main": [
          "argparse.ArgumentParser",
          "boss_cli.run_interactive",
          "boss_cli.process_command",
          "BossCLI",
          "parser.add_argument",
          "parser.parse_args"
        ]
      },
      "dependencies": [
        "AISelfAwarenessCLIIntegration",
        "Any",
        "BusinessPlanningManager",
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "Dict",
        "Optional",
        "Path",
        "TeamManagementSystem",
        "argparse",
        "business_planning",
        "json",
        "llmstruct.ai_cli_integration",
        "llmstruct.cli_commands",
        "llmstruct.cli_config",
        "llmstruct.cli_utils",
        "os",
        "pathlib",
        "sys",
        "team_management",
        "typing"
      ],
      "hash": null,
      "artifact_id": "8579df0e-7c23-4b1d-ac0f-ddcad534f442"
    },
    {
      "module_id": ".ARCHIVE.temp_boss_missing.scripts.__init__",
      "path": ".ARCHIVE/temp_boss_missing/scripts/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "4733ac46-98a5-4d7e-9745-814ebf61a059"
    },
    {
      "module_id": ".ARCHIVE..PHOENIX.executable_phoenix_plan",
      "path": ".ARCHIVE/.PHOENIX/executable_phoenix_plan.py",
      "category": "core",
      "module_doc": "PHOENIX: \u0418\u0441\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u044b\u0439 \u043f\u043b\u0430\u043d \u0440\u0435\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0437\u0430\u0446\u0438\u0438\n\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u0448\u0430\u0433\u043e\u0432 \u0438\u0437 opus_PHOENIX_FINAL_EXECUTABLE_PLAN.md",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            19,
            23
          ],
          "parameters": [
            "self",
            "workspace_path",
            "ollama_url"
          ],
          "decorators": []
        },
        {
          "name": "setup_workspace",
          "docstring": "\u0424\u0430\u0437\u0430 0: \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0430",
          "line_range": [
            25,
            38
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "analyze_duplicates",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432 \u0441 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u043c\u0438 \u043c\u0435\u0442\u0440\u0438\u043a\u0430\u043c\u0438",
          "line_range": [
            40,
            60
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "query_ollama",
          "docstring": "\u0417\u0430\u043f\u0440\u043e\u0441 \u043a Ollama \u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u043e\u0439 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043e\u0442\u0432\u0435\u0442\u0430",
          "line_range": [
            62,
            92
          ],
          "parameters": [
            "self",
            "message",
            "model",
            "context_file"
          ],
          "decorators": []
        },
        {
          "name": "validate_checkpoint",
          "docstring": "\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f checkpoint \u0441 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u043c\u0438 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u044f\u043c\u0438",
          "line_range": [
            94,
            109
          ],
          "parameters": [
            "self",
            "phase"
          ],
          "decorators": []
        },
        {
          "name": "_validate_phase_0",
          "docstring": "\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0444\u0430\u0437\u044b 0: \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430",
          "line_range": [
            111,
            121
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_validate_phase_1",
          "docstring": "\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0444\u0430\u0437\u044b 1: \u043a\u043e\u043d\u0441\u043e\u043b\u0438\u0434\u0430\u0446\u0438\u044f",
          "line_range": [
            123,
            127
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_validate_phase_2",
          "docstring": "\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0444\u0430\u0437\u044b 2: \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0445\u0435\u043c",
          "line_range": [
            129,
            133
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_validate_phase_3",
          "docstring": "\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0444\u0430\u0437\u044b 3: \u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433",
          "line_range": [
            135,
            143
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_validate_phase_4",
          "docstring": "\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0444\u0430\u0437\u044b 4: \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f",
          "line_range": [
            145,
            148
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "execute_phase",
          "docstring": "\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0444\u0430\u0437\u044b \u043f\u043b\u0430\u043d\u0430",
          "line_range": [
            150,
            173
          ],
          "parameters": [
            "self",
            "phase"
          ],
          "decorators": []
        },
        {
          "name": "_execute_phase_0",
          "docstring": "\u0424\u0430\u0437\u0430 0: \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0438 \u0430\u043d\u0430\u043b\u0438\u0437 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432",
          "line_range": [
            175,
            197
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_execute_phase_1",
          "docstring": "\u0424\u0430\u0437\u0430 1: \u041a\u043e\u043d\u0441\u043e\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0438 \u0430\u0440\u0445\u0438\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435",
          "line_range": [
            199,
            223
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_execute_phase_2",
          "docstring": "\u0424\u0430\u0437\u0430 2: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0445\u0435\u043c \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u044b",
          "line_range": [
            225,
            239
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_execute_phase_3",
          "docstring": "\u0424\u0430\u0437\u0430 3: \u0420\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433 \u0441 LLM-first \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u043c",
          "line_range": [
            241,
            246
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_execute_phase_4",
          "docstring": "\u0424\u0430\u0437\u0430 4: \u0424\u0438\u043d\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f",
          "line_range": [
            248,
            262
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_full_plan",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u043f\u043e\u043b\u043d\u043e\u0433\u043e \u043f\u043b\u0430\u043d\u0430 Phoenix",
          "line_range": [
            264,
            275
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "PhoenixExecutor",
          "docstring": "",
          "line_range": [
            18,
            275
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                19,
                23
              ],
              "parameters": [
                "self",
                "workspace_path",
                "ollama_url"
              ]
            },
            {
              "name": "setup_workspace",
              "docstring": "\u0424\u0430\u0437\u0430 0: \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0430",
              "line_range": [
                25,
                38
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "analyze_duplicates",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432 \u0441 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u043c\u0438 \u043c\u0435\u0442\u0440\u0438\u043a\u0430\u043c\u0438",
              "line_range": [
                40,
                60
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "query_ollama",
              "docstring": "\u0417\u0430\u043f\u0440\u043e\u0441 \u043a Ollama \u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u043e\u0439 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043e\u0442\u0432\u0435\u0442\u0430",
              "line_range": [
                62,
                92
              ],
              "parameters": [
                "self",
                "message",
                "model",
                "context_file"
              ]
            },
            {
              "name": "validate_checkpoint",
              "docstring": "\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f checkpoint \u0441 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u043c\u0438 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u044f\u043c\u0438",
              "line_range": [
                94,
                109
              ],
              "parameters": [
                "self",
                "phase"
              ]
            },
            {
              "name": "_validate_phase_0",
              "docstring": "\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0444\u0430\u0437\u044b 0: \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430",
              "line_range": [
                111,
                121
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_validate_phase_1",
              "docstring": "\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0444\u0430\u0437\u044b 1: \u043a\u043e\u043d\u0441\u043e\u043b\u0438\u0434\u0430\u0446\u0438\u044f",
              "line_range": [
                123,
                127
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_validate_phase_2",
              "docstring": "\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0444\u0430\u0437\u044b 2: \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0445\u0435\u043c",
              "line_range": [
                129,
                133
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_validate_phase_3",
              "docstring": "\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0444\u0430\u0437\u044b 3: \u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433",
              "line_range": [
                135,
                143
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_validate_phase_4",
              "docstring": "\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0444\u0430\u0437\u044b 4: \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f",
              "line_range": [
                145,
                148
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "execute_phase",
              "docstring": "\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0444\u0430\u0437\u044b \u043f\u043b\u0430\u043d\u0430",
              "line_range": [
                150,
                173
              ],
              "parameters": [
                "self",
                "phase"
              ]
            },
            {
              "name": "_execute_phase_0",
              "docstring": "\u0424\u0430\u0437\u0430 0: \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0438 \u0430\u043d\u0430\u043b\u0438\u0437 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432",
              "line_range": [
                175,
                197
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_execute_phase_1",
              "docstring": "\u0424\u0430\u0437\u0430 1: \u041a\u043e\u043d\u0441\u043e\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0438 \u0430\u0440\u0445\u0438\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435",
              "line_range": [
                199,
                223
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_execute_phase_2",
              "docstring": "\u0424\u0430\u0437\u0430 2: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0445\u0435\u043c \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u044b",
              "line_range": [
                225,
                239
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_execute_phase_3",
              "docstring": "\u0424\u0430\u0437\u0430 3: \u0420\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433 \u0441 LLM-first \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u043c",
              "line_range": [
                241,
                246
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_execute_phase_4",
              "docstring": "\u0424\u0430\u0437\u0430 4: \u0424\u0438\u043d\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f",
              "line_range": [
                248,
                262
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run_full_plan",
              "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u043f\u043e\u043b\u043d\u043e\u0433\u043e \u043f\u043b\u0430\u043d\u0430 Phoenix",
              "line_range": [
                264,
                275
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path"
        ],
        "setup_workspace": [
          "logger.info",
          "logger.error"
        ],
        "analyze_duplicates": [
          "json.load",
          "str",
          "open",
          "logger.error",
          "subprocess.run",
          "logger.info",
          "report.get"
        ],
        "query_ollama": [
          "requests.post",
          "response.json",
          "result.get",
          "logger.error",
          "logger.info",
          "len",
          "logger.warning"
        ],
        "validate_checkpoint": [
          "validator",
          "logger.warning",
          "validations.get"
        ],
        "_validate_phase_0": [
          "logger.info",
          "all",
          "checks.values"
        ],
        "_validate_phase_1": [
          "list",
          "len",
          "archive_dir.glob",
          "archive_dir.exists"
        ],
        "_validate_phase_2": [
          "all"
        ],
        "_validate_phase_3": [
          "subprocess.run",
          "list"
        ],
        "_validate_phase_4": [
          "all"
        ],
        "execute_phase": [
          "method",
          "phase_methods.get",
          "logger.error",
          "logger.info",
          "self.validate_checkpoint"
        ],
        "_execute_phase_0": [
          "self.analyze_duplicates",
          "str",
          "open",
          "self.query_ollama",
          "self.setup_workspace",
          "f.write"
        ],
        "_execute_phase_1": [
          "str",
          "list",
          "bot.rename",
          "archive_dir.mkdir",
          "logger.info",
          "len"
        ],
        "_execute_phase_2": [
          "self.query_ollama",
          "open",
          "f.write"
        ],
        "_execute_phase_3": [
          "logger.info"
        ],
        "_execute_phase_4": [
          "self.query_ollama",
          "open",
          "f.write"
        ],
        "run_full_plan": [
          "logger.info",
          "range",
          "logger.error",
          "self.execute_phase"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "json",
        "logging",
        "pathlib",
        "requests",
        "subprocess",
        "typing"
      ],
      "hash": null,
      "artifact_id": "b267f293-da70-4038-9076-a0b8d9695429"
    },
    {
      "module_id": ".ARCHIVE.temp_personal_analysis.personal.commercial_planning",
      "path": ".ARCHIVE/temp_personal_analysis/personal/commercial_planning.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "5efe3208-fe2d-4319-b2eb-bebadde14173"
    },
    {
      "module_id": ".ARCHIVE.temp_personal_analysis.personal.boss.scripts.business_planning",
      "path": ".ARCHIVE/temp_personal_analysis/personal/boss/scripts/business_planning.py",
      "category": "core",
      "module_doc": "Business Planning Module\n\u041c\u043e\u0434\u0443\u043b\u044c \u0434\u043b\u044f \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430.\n\u0414\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044e \u043f\u0440\u043e\u0435\u043a\u0442\u0430.",
      "functions": [
        {
          "name": "create_business_planning_manager",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.",
          "line_range": [
            216,
            218
          ],
          "parameters": [
            "data_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.",
          "line_range": [
            20,
            27
          ],
          "parameters": [
            "self",
            "boss_data_dir"
          ],
          "decorators": []
        },
        {
          "name": "create_business_roadmap",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u0430.",
          "line_range": [
            29,
            55
          ],
          "parameters": [
            "self",
            "roadmap_data"
          ],
          "decorators": []
        },
        {
          "name": "create_financial_plan",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u043e\u0433\u043e \u043f\u043b\u0430\u043d\u0430.",
          "line_range": [
            57,
            82
          ],
          "parameters": [
            "self",
            "plan_data"
          ],
          "decorators": []
        },
        {
          "name": "record_strategic_decision",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f.",
          "line_range": [
            84,
            116
          ],
          "parameters": [
            "self",
            "decision_data"
          ],
          "decorators": []
        },
        {
          "name": "analyze_business_metrics",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.",
          "line_range": [
            118,
            154
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_business_summary",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e.",
          "line_range": [
            156,
            193
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_data",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 JSON \u0444\u0430\u0439\u043b\u0430.",
          "line_range": [
            195,
            204
          ],
          "parameters": [
            "self",
            "file_path",
            "default"
          ],
          "decorators": []
        },
        {
          "name": "_save_data",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JSON \u0444\u0430\u0439\u043b.",
          "line_range": [
            206,
            213
          ],
          "parameters": [
            "self",
            "file_path",
            "data"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "BusinessPlanningManager",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0438 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u043e\u0439 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0435\u0439.",
          "line_range": [
            17,
            213
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.",
              "line_range": [
                20,
                27
              ],
              "parameters": [
                "self",
                "boss_data_dir"
              ]
            },
            {
              "name": "create_business_roadmap",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u0430.",
              "line_range": [
                29,
                55
              ],
              "parameters": [
                "self",
                "roadmap_data"
              ]
            },
            {
              "name": "create_financial_plan",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u043e\u0433\u043e \u043f\u043b\u0430\u043d\u0430.",
              "line_range": [
                57,
                82
              ],
              "parameters": [
                "self",
                "plan_data"
              ]
            },
            {
              "name": "record_strategic_decision",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f.",
              "line_range": [
                84,
                116
              ],
              "parameters": [
                "self",
                "decision_data"
              ]
            },
            {
              "name": "analyze_business_metrics",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.",
              "line_range": [
                118,
                154
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_business_summary",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e.",
              "line_range": [
                156,
                193
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_data",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 JSON \u0444\u0430\u0439\u043b\u0430.",
              "line_range": [
                195,
                204
              ],
              "parameters": [
                "self",
                "file_path",
                "default"
              ]
            },
            {
              "name": "_save_data",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JSON \u0444\u0430\u0439\u043b.",
              "line_range": [
                206,
                213
              ],
              "parameters": [
                "self",
                "file_path",
                "data"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path"
        ],
        "create_business_roadmap": [
          "logger.info",
          "self._save_data",
          "datetime.now",
          "logger.error"
        ],
        "create_financial_plan": [
          "logger.info",
          "self._save_data",
          "datetime.now",
          "logger.error"
        ],
        "record_strategic_decision": [
          "self._load_data",
          "self._save_data",
          "datetime.now",
          "logger.error",
          "isinstance",
          "logger.info",
          "decision_data.get",
          "decisions.append"
        ],
        "analyze_business_metrics": [
          "self._load_data",
          "datetime.now",
          "logger.error",
          "len",
          "isinstance"
        ],
        "get_business_summary": [
          "self._load_data",
          "bool",
          "datetime.now",
          "logger.error",
          "financial.get",
          "len",
          "roadmap.get",
          "isinstance"
        ],
        "_load_data": [
          "file_path.open",
          "json.load",
          "logger.error",
          "file_path.exists"
        ],
        "_save_data": [
          "file_path.open",
          "logger.error",
          "json.dump"
        ],
        "create_business_planning_manager": [
          "BusinessPlanningManager"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "sys",
        "timedelta",
        "typing"
      ],
      "hash": null,
      "artifact_id": "2095fef0-84c4-46d3-9746-e19fe2eeaddf"
    },
    {
      "module_id": ".ARCHIVE.temp_personal_analysis.personal.boss.scripts.team_management",
      "path": ".ARCHIVE/temp_personal_analysis/personal/boss/scripts/team_management.py",
      "category": "core",
      "module_doc": "Team Management Module\n\u041c\u043e\u0434\u0443\u043b\u044c \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439, \u043e\u0446\u0435\u043d\u043a\u0438 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432 \u0438 HR-\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432.\n\u0414\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044e \u043f\u0440\u043e\u0435\u043a\u0442\u0430.",
      "functions": [
        {
          "name": "create_team_management_system",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
          "line_range": [
            291,
            293
          ],
          "parameters": [
            "data_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
          "line_range": [
            20,
            27
          ],
          "parameters": [
            "self",
            "boss_data_dir"
          ],
          "decorators": []
        },
        {
          "name": "create_team_strategy",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
          "line_range": [
            29,
            54
          ],
          "parameters": [
            "self",
            "strategy_data"
          ],
          "decorators": []
        },
        {
          "name": "record_team_evaluation",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u0447\u043b\u0435\u043d\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            56,
            88
          ],
          "parameters": [
            "self",
            "evaluation_data"
          ],
          "decorators": []
        },
        {
          "name": "create_hiring_plan",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430 \u043d\u0430\u0439\u043c\u0430.",
          "line_range": [
            90,
            115
          ],
          "parameters": [
            "self",
            "plan_data"
          ],
          "decorators": []
        },
        {
          "name": "analyze_team_performance",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            117,
            156
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_team_summary",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
          "line_range": [
            158,
            195
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "generate_team_report",
          "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043e\u0442\u0447\u0451\u0442\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
          "line_range": [
            197,
            226
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_summarize_strategy",
          "docstring": "\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u0438\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438.",
          "line_range": [
            228,
            238
          ],
          "parameters": [
            "self",
            "strategy"
          ],
          "decorators": []
        },
        {
          "name": "_summarize_evaluations",
          "docstring": "\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u0438\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043e\u0446\u0435\u043d\u043e\u043a.",
          "line_range": [
            240,
            250
          ],
          "parameters": [
            "self",
            "evaluations"
          ],
          "decorators": []
        },
        {
          "name": "_generate_recommendations",
          "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0439.",
          "line_range": [
            252,
            268
          ],
          "parameters": [
            "self",
            "strategy",
            "evaluations"
          ],
          "decorators": []
        },
        {
          "name": "_load_data",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 JSON \u0444\u0430\u0439\u043b\u0430.",
          "line_range": [
            270,
            279
          ],
          "parameters": [
            "self",
            "file_path",
            "default"
          ],
          "decorators": []
        },
        {
          "name": "_save_data",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JSON \u0444\u0430\u0439\u043b.",
          "line_range": [
            281,
            288
          ],
          "parameters": [
            "self",
            "file_path",
            "data"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TeamManagementSystem",
          "docstring": "\u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439 \u0438 HR-\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438.",
          "line_range": [
            17,
            288
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
              "line_range": [
                20,
                27
              ],
              "parameters": [
                "self",
                "boss_data_dir"
              ]
            },
            {
              "name": "create_team_strategy",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439.",
              "line_range": [
                29,
                54
              ],
              "parameters": [
                "self",
                "strategy_data"
              ]
            },
            {
              "name": "record_team_evaluation",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u0447\u043b\u0435\u043d\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                56,
                88
              ],
              "parameters": [
                "self",
                "evaluation_data"
              ]
            },
            {
              "name": "create_hiring_plan",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430 \u043d\u0430\u0439\u043c\u0430.",
              "line_range": [
                90,
                115
              ],
              "parameters": [
                "self",
                "plan_data"
              ]
            },
            {
              "name": "analyze_team_performance",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                117,
                156
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_team_summary",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
              "line_range": [
                158,
                195
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "generate_team_report",
              "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043e\u0442\u0447\u0451\u0442\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
              "line_range": [
                197,
                226
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_summarize_strategy",
              "docstring": "\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u0438\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438.",
              "line_range": [
                228,
                238
              ],
              "parameters": [
                "self",
                "strategy"
              ]
            },
            {
              "name": "_summarize_evaluations",
              "docstring": "\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u0438\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043e\u0446\u0435\u043d\u043e\u043a.",
              "line_range": [
                240,
                250
              ],
              "parameters": [
                "self",
                "evaluations"
              ]
            },
            {
              "name": "_generate_recommendations",
              "docstring": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0439.",
              "line_range": [
                252,
                268
              ],
              "parameters": [
                "self",
                "strategy",
                "evaluations"
              ]
            },
            {
              "name": "_load_data",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 JSON \u0444\u0430\u0439\u043b\u0430.",
              "line_range": [
                270,
                279
              ],
              "parameters": [
                "self",
                "file_path",
                "default"
              ]
            },
            {
              "name": "_save_data",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 JSON \u0444\u0430\u0439\u043b.",
              "line_range": [
                281,
                288
              ],
              "parameters": [
                "self",
                "file_path",
                "data"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path"
        ],
        "create_team_strategy": [
          "logger.info",
          "self._save_data",
          "datetime.now",
          "logger.error"
        ],
        "record_team_evaluation": [
          "self._load_data",
          "self._save_data",
          "datetime.now",
          "evaluations.append",
          "logger.error",
          "logger.info",
          "isinstance"
        ],
        "create_hiring_plan": [
          "logger.info",
          "self._save_data",
          "datetime.now",
          "logger.error"
        ],
        "analyze_team_performance": [
          "self._load_data",
          "bool",
          "datetime.now",
          "logger.error",
          "len",
          "isinstance"
        ],
        "get_team_summary": [
          "self._load_data",
          "bool",
          "datetime.now",
          "logger.error",
          "len",
          "hiring_plans.get",
          "strategy.get",
          "isinstance"
        ],
        "generate_team_report": [
          "self._load_data",
          "datetime.now",
          "self._summarize_strategy",
          "self._generate_recommendations",
          "logger.error",
          "self._summarize_evaluations"
        ],
        "_summarize_strategy": [
          "strategy.get"
        ],
        "_summarize_evaluations": [
          "len",
          "isinstance"
        ],
        "_generate_recommendations": [
          "len",
          "recommendations.append"
        ],
        "_load_data": [
          "file_path.open",
          "json.load",
          "logger.error",
          "file_path.exists"
        ],
        "_save_data": [
          "file_path.open",
          "logger.error",
          "json.dump"
        ],
        "create_team_management_system": [
          "TeamManagementSystem"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "sys",
        "timedelta",
        "typing"
      ],
      "hash": null,
      "artifact_id": "9467c9e5-1280-4f1e-adbb-d15c972f6a10"
    },
    {
      "module_id": ".ARCHIVE.temp_personal_analysis.personal.boss.scripts.boss_cli",
      "path": ".ARCHIVE/temp_personal_analysis/personal/boss/scripts/boss_cli.py",
      "category": "core",
      "module_doc": "Boss CLI - \u041f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 CLI \u0434\u043b\u044f \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f\n\u0412\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432\u0441\u0435 \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 + \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u043e\u0434\u0443\u043b\u0438",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f.",
          "line_range": [
            490,
            503
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f Boss CLI.",
          "line_range": [
            42,
            101
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "run_interactive",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0440\u0435\u0436\u0438\u043c\u0430 Boss CLI.",
          "line_range": [
            103,
            126
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "process_command",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            128,
            147
          ],
          "parameters": [
            "self",
            "command_line"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_status",
          "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0441\u0442\u0430\u0442\u0443\u0441.",
          "line_range": [
            150,
            157
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_audit",
          "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0430\u0443\u0434\u0438\u0442.",
          "line_range": [
            159,
            166
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_context",
          "docstring": "AI \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435.",
          "line_range": [
            168,
            175
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_queue",
          "docstring": "AI \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433.",
          "line_range": [
            177,
            184
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_summary",
          "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 summary.",
          "line_range": [
            186,
            193
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_business_roadmap",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u043e\u043c.",
          "line_range": [
            196,
            221
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_financial_plan",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u044b\u043c \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c.",
          "line_range": [
            223,
            256
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_strategic_decision",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439.",
          "line_range": [
            258,
            273
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_business_analysis",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.",
          "line_range": [
            275,
            282
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_business_summary",
          "docstring": "\u0421\u0432\u043e\u0434\u043a\u0430 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441\u0443.",
          "line_range": [
            284,
            291
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_strategy",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            294,
            308
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_evaluation",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            310,
            326
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_hiring_plan",
          "docstring": "\u041f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430\u0439\u043c\u0430.",
          "line_range": [
            328,
            346
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_analysis",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            348,
            355
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_report",
          "docstring": "\u041e\u0442\u0447\u0451\u0442 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
          "line_range": [
            357,
            364
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_technical",
          "docstring": "\u0422\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b (\u043f\u043e\u043b\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f).",
          "line_range": [
            367,
            379
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_context_full",
          "docstring": "\u041d\u0435\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0443.",
          "line_range": [
            381,
            384
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_workspace_override",
          "docstring": "Emergency workspace overrides.",
          "line_range": [
            387,
            396
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_capabilities",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b.",
          "line_range": [
            399,
            422
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_boss_status",
          "docstring": "\u041e\u0431\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 Boss CLI.",
          "line_range": [
            424,
            440
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_help",
          "docstring": "\u0421\u043f\u0440\u0430\u0432\u043a\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c Boss CLI.",
          "line_range": [
            442,
            487
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "BossCLI",
          "docstring": "Boss CLI - \u043f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f.\n\u0412\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432\u0441\u0435 \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 + \u0431\u0438\u0437\u043d\u0435\u0441-\u0444\u0443\u043d\u043a\u0446\u0438\u0438.",
          "line_range": [
            36,
            487
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f Boss CLI.",
              "line_range": [
                42,
                101
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "run_interactive",
              "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0440\u0435\u0436\u0438\u043c\u0430 Boss CLI.",
              "line_range": [
                103,
                126
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "process_command",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                128,
                147
              ],
              "parameters": [
                "self",
                "command_line"
              ]
            },
            {
              "name": "cmd_ai_status",
              "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0441\u0442\u0430\u0442\u0443\u0441.",
              "line_range": [
                150,
                157
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_audit",
              "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0430\u0443\u0434\u0438\u0442.",
              "line_range": [
                159,
                166
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_context",
              "docstring": "AI \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435.",
              "line_range": [
                168,
                175
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_queue",
              "docstring": "AI \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433.",
              "line_range": [
                177,
                184
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_summary",
              "docstring": "AI \u0441\u0438\u0441\u0442\u0435\u043c\u0430 summary.",
              "line_range": [
                186,
                193
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_business_roadmap",
              "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u043e\u043c.",
              "line_range": [
                196,
                221
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_financial_plan",
              "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u044b\u043c \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c.",
              "line_range": [
                223,
                256
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_strategic_decision",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439.",
              "line_range": [
                258,
                273
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_business_analysis",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.",
              "line_range": [
                275,
                282
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_business_summary",
              "docstring": "\u0421\u0432\u043e\u0434\u043a\u0430 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441\u0443.",
              "line_range": [
                284,
                291
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_strategy",
              "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                294,
                308
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_evaluation",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                310,
                326
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_hiring_plan",
              "docstring": "\u041f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430\u0439\u043c\u0430.",
              "line_range": [
                328,
                346
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_analysis",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                348,
                355
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_report",
              "docstring": "\u041e\u0442\u0447\u0451\u0442 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
              "line_range": [
                357,
                364
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_technical",
              "docstring": "\u0422\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b (\u043f\u043e\u043b\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f).",
              "line_range": [
                367,
                379
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_context_full",
              "docstring": "\u041d\u0435\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0443.",
              "line_range": [
                381,
                384
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_workspace_override",
              "docstring": "Emergency workspace overrides.",
              "line_range": [
                387,
                396
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_capabilities",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b.",
              "line_range": [
                399,
                422
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_boss_status",
              "docstring": "\u041e\u0431\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 Boss CLI.",
              "line_range": [
                424,
                440
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_help",
              "docstring": "\u0421\u043f\u0440\u0430\u0432\u043a\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c Boss CLI.",
              "line_range": [
                442,
                487
              ],
              "parameters": [
                "self",
                "args"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "CommandProcessor",
          "BusinessPlanningManager",
          "AISelfAwarenessCLIIntegration",
          "CLIUtils",
          "str",
          "Path",
          "TeamManagementSystem",
          "CLIConfig"
        ],
        "run_interactive": [
          "self.process_command",
          "input",
          "user_input.lower",
          "print"
        ],
        "process_command": [
          "command_line.split",
          "len",
          "print",
          "cmd.startswith"
        ],
        "cmd_ai_status": [
          "json.dumps",
          "print"
        ],
        "cmd_ai_audit": [
          "json.dumps",
          "print"
        ],
        "cmd_ai_context": [
          "json.dumps",
          "print"
        ],
        "cmd_ai_queue": [
          "json.dumps",
          "print"
        ],
        "cmd_ai_summary": [
          "json.dumps",
          "print"
        ],
        "cmd_business_roadmap": [
          "json.dumps",
          "print"
        ],
        "cmd_financial_plan": [
          "json.dumps",
          "print"
        ],
        "cmd_strategic_decision": [
          "json.dumps",
          "print"
        ],
        "cmd_business_analysis": [
          "json.dumps",
          "print"
        ],
        "cmd_business_summary": [
          "json.dumps",
          "print"
        ],
        "cmd_team_strategy": [
          "json.dumps",
          "print"
        ],
        "cmd_team_evaluation": [
          "json.dumps",
          "print"
        ],
        "cmd_hiring_plan": [
          "json.dumps",
          "print"
        ],
        "cmd_team_analysis": [
          "json.dumps",
          "print"
        ],
        "cmd_team_report": [
          "json.dumps",
          "print"
        ],
        "cmd_technical": [
          "print"
        ],
        "cmd_context_full": [
          "print"
        ],
        "cmd_workspace_override": [
          "print"
        ],
        "cmd_capabilities": [
          "json.dumps",
          "bool",
          "print"
        ],
        "cmd_boss_status": [
          "json.dumps",
          "print"
        ],
        "cmd_help": [
          "print"
        ],
        "main": [
          "argparse.ArgumentParser",
          "boss_cli.run_interactive",
          "boss_cli.process_command",
          "BossCLI",
          "parser.add_argument",
          "parser.parse_args"
        ]
      },
      "dependencies": [
        "AISelfAwarenessCLIIntegration",
        "Any",
        "BusinessPlanningManager",
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "Dict",
        "Optional",
        "Path",
        "TeamManagementSystem",
        "argparse",
        "business_planning",
        "json",
        "llmstruct.ai_cli_integration",
        "llmstruct.cli_commands",
        "llmstruct.cli_config",
        "llmstruct.cli_utils",
        "os",
        "pathlib",
        "sys",
        "team_management",
        "typing"
      ],
      "hash": null,
      "artifact_id": "9136405a-7a22-492d-b796-7002252e3b44"
    },
    {
      "module_id": ".ARCHIVE.temp_personal_analysis.personal.boss.scripts.__init__",
      "path": ".ARCHIVE/temp_personal_analysis/personal/boss/scripts/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "910e3388-c41c-47c9-add0-0d0ebeb8ecb7"
    },
    {
      "module_id": ".ARCHIVE..personal.boss.scripts.boss_cli",
      "path": ".ARCHIVE/.personal/boss/scripts/boss_cli.py",
      "category": "core",
      "module_doc": "Boss CLI - \u041f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 CLI \u0434\u043b\u044f \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f\n\u0414\u043e\u0441\u0442\u0443\u043f \u043a\u043e \u0432\u0441\u0435\u043c \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0430, \u0432\u043a\u043b\u044e\u0447\u0430\u044f business planning \u0438 team management.",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f.",
          "line_range": [
            493,
            506
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f Boss CLI.",
          "line_range": [
            47,
            95
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "run_interactive",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0440\u0435\u0436\u0438\u043c\u0430 Boss CLI.",
          "line_range": [
            97,
            119
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "process_command",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            121,
            141
          ],
          "parameters": [
            "self",
            "command_line"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_status",
          "docstring": "\u0421\u0442\u0430\u0442\u0443\u0441 AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b.",
          "line_range": [
            144,
            151
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_audit",
          "docstring": "\u0410\u0443\u0434\u0438\u0442 AI \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439.",
          "line_range": [
            153,
            160
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_context",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 AI \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043e\u043c.",
          "line_range": [
            162,
            170
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_queue",
          "docstring": "\u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 AI \u043e\u0447\u0435\u0440\u0435\u0434\u0438.",
          "line_range": [
            172,
            179
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_ai_summary",
          "docstring": "\u0421\u0432\u043e\u0434\u043a\u0430 AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438.",
          "line_range": [
            181,
            188
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_business_roadmap",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u043e\u043c.",
          "line_range": [
            191,
            210
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_financial_plan",
          "docstring": "\u0424\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u043e\u0435 \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435.",
          "line_range": [
            212,
            226
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_strategic_decision",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439.",
          "line_range": [
            228,
            242
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_business_analysis",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.",
          "line_range": [
            244,
            251
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_business_summary",
          "docstring": "\u0421\u0432\u043e\u0434\u043a\u0430 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441\u0443.",
          "line_range": [
            253,
            260
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_strategy",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            263,
            277
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_evaluation",
          "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            279,
            295
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_hiring_plan",
          "docstring": "\u041f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430\u0439\u043c\u0430.",
          "line_range": [
            297,
            315
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_analysis",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            317,
            324
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_team_report",
          "docstring": "\u041e\u0442\u0447\u0451\u0442 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
          "line_range": [
            326,
            333
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_technical",
          "docstring": "\u0422\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b (\u043f\u043e\u043b\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f).",
          "line_range": [
            336,
            348
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_context_full",
          "docstring": "\u041d\u0435\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0443.",
          "line_range": [
            350,
            353
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_workspace_override",
          "docstring": "Emergency workspace overrides.",
          "line_range": [
            356,
            365
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_capabilities",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b.",
          "line_range": [
            368,
            391
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_boss_status",
          "docstring": "\u041e\u0431\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 Boss CLI.",
          "line_range": [
            393,
            409
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_help",
          "docstring": "\u0421\u043f\u0440\u0430\u0432\u043a\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c Boss CLI.",
          "line_range": [
            411,
            456
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "_init_ai_integration",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438.",
          "line_range": [
            458,
            464
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_init_command_processor",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u0430 \u043a\u043e\u043c\u0430\u043d\u0434.",
          "line_range": [
            466,
            472
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_init_business_manager",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430.",
          "line_range": [
            474,
            481
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_init_team_manager",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
          "line_range": [
            483,
            490
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "BossCLI",
          "docstring": "Boss CLI - \u043f\u043e\u043b\u043d\u043e\u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f.\n\u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f \u043a\u043e \u0432\u0441\u0435\u043c \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0430.",
          "line_range": [
            41,
            490
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f Boss CLI.",
              "line_range": [
                47,
                95
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "run_interactive",
              "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0440\u0435\u0436\u0438\u043c\u0430 Boss CLI.",
              "line_range": [
                97,
                119
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "process_command",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                121,
                141
              ],
              "parameters": [
                "self",
                "command_line"
              ]
            },
            {
              "name": "cmd_ai_status",
              "docstring": "\u0421\u0442\u0430\u0442\u0443\u0441 AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b.",
              "line_range": [
                144,
                151
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_audit",
              "docstring": "\u0410\u0443\u0434\u0438\u0442 AI \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439.",
              "line_range": [
                153,
                160
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_context",
              "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 AI \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043e\u043c.",
              "line_range": [
                162,
                170
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_queue",
              "docstring": "\u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 AI \u043e\u0447\u0435\u0440\u0435\u0434\u0438.",
              "line_range": [
                172,
                179
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_ai_summary",
              "docstring": "\u0421\u0432\u043e\u0434\u043a\u0430 AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438.",
              "line_range": [
                181,
                188
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_business_roadmap",
              "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441-\u0440\u043e\u0430\u0434\u043c\u0430\u043f\u043e\u043c.",
              "line_range": [
                191,
                210
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_financial_plan",
              "docstring": "\u0424\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u043e\u0435 \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435.",
              "line_range": [
                212,
                226
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_strategic_decision",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439.",
              "line_range": [
                228,
                242
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_business_analysis",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u0442\u0440\u0438\u043a.",
              "line_range": [
                244,
                251
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_business_summary",
              "docstring": "\u0421\u0432\u043e\u0434\u043a\u0430 \u043f\u043e \u0431\u0438\u0437\u043d\u0435\u0441\u0443.",
              "line_range": [
                253,
                260
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_strategy",
              "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                263,
                277
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_evaluation",
              "docstring": "\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                279,
                295
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_hiring_plan",
              "docstring": "\u041f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430\u0439\u043c\u0430.",
              "line_range": [
                297,
                315
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_analysis",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                317,
                324
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_team_report",
              "docstring": "\u041e\u0442\u0447\u0451\u0442 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435.",
              "line_range": [
                326,
                333
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_technical",
              "docstring": "\u0422\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b (\u043f\u043e\u043b\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f).",
              "line_range": [
                336,
                348
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_context_full",
              "docstring": "\u041d\u0435\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0443.",
              "line_range": [
                350,
                353
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_workspace_override",
              "docstring": "Emergency workspace overrides.",
              "line_range": [
                356,
                365
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_capabilities",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b.",
              "line_range": [
                368,
                391
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_boss_status",
              "docstring": "\u041e\u0431\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 Boss CLI.",
              "line_range": [
                393,
                409
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_help",
              "docstring": "\u0421\u043f\u0440\u0430\u0432\u043a\u0430 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c Boss CLI.",
              "line_range": [
                411,
                456
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "_init_ai_integration",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438.",
              "line_range": [
                458,
                464
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_init_command_processor",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u0430 \u043a\u043e\u043c\u0430\u043d\u0434.",
              "line_range": [
                466,
                472
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_init_business_manager",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u0438\u0437\u043d\u0435\u0441-\u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430.",
              "line_range": [
                474,
                481
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_init_team_manager",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.",
              "line_range": [
                483,
                490
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._init_business_manager",
          "str",
          "Path",
          "self._init_team_manager",
          "self._init_command_processor",
          "self._init_ai_integration"
        ],
        "run_interactive": [
          "self.process_command",
          "input",
          "user_input.lower",
          "print"
        ],
        "process_command": [
          "command_line.split",
          "cmd.startswith",
          "print"
        ],
        "cmd_ai_status": [
          "json.dumps",
          "print"
        ],
        "cmd_ai_audit": [
          "json.dumps",
          "print"
        ],
        "cmd_ai_context": [
          "json.dumps",
          "print"
        ],
        "cmd_ai_queue": [
          "json.dumps",
          "print"
        ],
        "cmd_ai_summary": [
          "json.dumps",
          "print"
        ],
        "cmd_business_roadmap": [
          "json.dumps",
          "print"
        ],
        "cmd_financial_plan": [
          "json.dumps",
          "print"
        ],
        "cmd_strategic_decision": [
          "json.dumps",
          "print"
        ],
        "cmd_business_analysis": [
          "json.dumps",
          "print"
        ],
        "cmd_business_summary": [
          "json.dumps",
          "print"
        ],
        "cmd_team_strategy": [
          "json.dumps",
          "print"
        ],
        "cmd_team_evaluation": [
          "json.dumps",
          "print"
        ],
        "cmd_hiring_plan": [
          "json.dumps",
          "print"
        ],
        "cmd_team_analysis": [
          "json.dumps",
          "print"
        ],
        "cmd_team_report": [
          "json.dumps",
          "print"
        ],
        "cmd_technical": [
          "print"
        ],
        "cmd_context_full": [
          "print"
        ],
        "cmd_workspace_override": [
          "print"
        ],
        "cmd_capabilities": [
          "json.dumps",
          "bool",
          "print"
        ],
        "cmd_boss_status": [
          "json.dumps",
          "print"
        ],
        "cmd_help": [
          "print"
        ],
        "_init_ai_integration": [],
        "_init_command_processor": [],
        "_init_business_manager": [
          "BusinessPlanningManager",
          "logger.error"
        ],
        "_init_team_manager": [
          "TeamManagementSystem",
          "logger.error"
        ],
        "main": [
          "argparse.ArgumentParser",
          "boss_cli.run_interactive",
          "boss_cli.process_command",
          "BossCLI",
          "parser.add_argument",
          "parser.parse_args"
        ]
      },
      "dependencies": [
        "BusinessPlanningManager",
        "Path",
        "TeamManagementSystem",
        "argparse",
        "business_planning",
        "json",
        "logging",
        "pathlib",
        "sys",
        "team_management"
      ],
      "hash": null,
      "artifact_id": "dbda7b77-7def-4341-9f1a-a81136173f60"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.send_cursor_response",
      "path": ".ARCHIVE/archive/telegram_experiments/send_cursor_response.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            5,
            32
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "main": [
          "send_to_user",
          "print"
        ]
      },
      "dependencies": [
        "asyncio",
        "cursor_bot_messenger",
        "send_to_user"
      ],
      "hash": null,
      "artifact_id": "5ca2e424-6177-48e1-9c46-405691c517c9"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.cursor_telegram_reader_enhanced",
      "path": ".ARCHIVE/archive/telegram_experiments/cursor_telegram_reader_enhanced.py",
      "category": "core",
      "module_doc": "Enhanced Cursor Telegram Reader\n\u0427\u0438\u0442\u0430\u0435\u0442 cursor \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0441 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u043e\u0439 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u043e\u0439 reply context",
      "functions": [
        {
          "name": "handle_cursor_command",
          "docstring": "Example handler for cursor commands",
          "line_range": [
            181,
            203
          ],
          "parameters": [
            "command_data"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Main entry point",
          "line_range": [
            205,
            222
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            16,
            20
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "read_cursor_commands",
          "docstring": "\u0427\u0438\u0442\u0430\u0435\u0442 \u043d\u043e\u0432\u044b\u0435 cursor \u043a\u043e\u043c\u0430\u043d\u0434\u044b",
          "line_range": [
            22,
            44
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_parse_cursor_command",
          "docstring": "Parse single cursor command entry",
          "line_range": [
            46,
            84
          ],
          "parameters": [
            "self",
            "entry"
          ],
          "decorators": []
        },
        {
          "name": "get_recent_user_messages",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0434\u043b\u044f \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430",
          "line_range": [
            86,
            108
          ],
          "parameters": [
            "self",
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "_parse_user_message",
          "docstring": "Parse user message entry",
          "line_range": [
            110,
            158
          ],
          "parameters": [
            "self",
            "entry"
          ],
          "decorators": []
        },
        {
          "name": "poll_for_commands",
          "docstring": "Polling \u0434\u043b\u044f \u043d\u043e\u0432\u044b\u0445 \u043a\u043e\u043c\u0430\u043d\u0434",
          "line_range": [
            160,
            179
          ],
          "parameters": [
            "self",
            "callback_func",
            "poll_interval"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "EnhancedCursorTelegramReader",
          "docstring": "Enhanced reader \u0434\u043b\u044f cursor \u043a\u043e\u043c\u0430\u043d\u0434 \u0438\u0437 Telegram \u043b\u043e\u0433\u043e\u0432",
          "line_range": [
            13,
            179
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                16,
                20
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "read_cursor_commands",
              "docstring": "\u0427\u0438\u0442\u0430\u0435\u0442 \u043d\u043e\u0432\u044b\u0435 cursor \u043a\u043e\u043c\u0430\u043d\u0434\u044b",
              "line_range": [
                22,
                44
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_parse_cursor_command",
              "docstring": "Parse single cursor command entry",
              "line_range": [
                46,
                84
              ],
              "parameters": [
                "self",
                "entry"
              ]
            },
            {
              "name": "get_recent_user_messages",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0434\u043b\u044f \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430",
              "line_range": [
                86,
                108
              ],
              "parameters": [
                "self",
                "limit"
              ]
            },
            {
              "name": "_parse_user_message",
              "docstring": "Parse user message entry",
              "line_range": [
                110,
                158
              ],
              "parameters": [
                "self",
                "entry"
              ]
            },
            {
              "name": "poll_for_commands",
              "docstring": "Polling \u0434\u043b\u044f \u043d\u043e\u0432\u044b\u0445 \u043a\u043e\u043c\u0430\u043d\u0434",
              "line_range": [
                160,
                179
              ],
              "parameters": [
                "self",
                "callback_func",
                "poll_interval"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "set"
        ],
        "read_cursor_commands": [
          "print",
          "f.read",
          "open",
          "entry.strip",
          "content.split",
          "commands.append",
          "self._parse_cursor_command"
        ],
        "_parse_cursor_command": [
          "datetime.now",
          "print",
          "timestamp_line.split",
          "datetime.strptime",
          "int",
          "line.strip",
          "entry.strip",
          "len",
          "timestamp.timestamp",
          "line.startswith",
          "timestamp.isoformat"
        ],
        "get_recent_user_messages": [
          "messages.append",
          "print",
          "f.read",
          "open",
          "entry.strip",
          "content.split",
          "self._parse_user_message"
        ],
        "_parse_user_message": [
          "datetime.now",
          "print",
          "datetime.strptime",
          "int",
          "line.strip",
          "entry.strip",
          "len",
          "timestamp_line.replace",
          "line.startswith",
          "timestamp.isoformat"
        ],
        "poll_for_commands": [
          "time.sleep",
          "callback_func",
          "self.read_cursor_commands",
          "print"
        ],
        "handle_cursor_command": [
          "print"
        ],
        "main": [
          "reader.poll_for_commands",
          "EnhancedCursorTelegramReader",
          "reader.get_recent_user_messages",
          "print"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "datetime",
        "json",
        "os",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "c70dfa82-91e4-4f85-acd2-816e767f50db"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.api_memory_endpoints",
      "path": ".ARCHIVE/archive/telegram_experiments/api_memory_endpoints.py",
      "category": "core",
      "module_doc": "API Endpoints \u0434\u043b\u044f \u043f\u0430\u043c\u044f\u0442\u0438 Telegram \u0431\u043e\u0442\u0430\n\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 FastAPI \u0434\u043b\u044f \u043a\u0435\u0448\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439",
      "functions": [
        {
          "name": "load_user_memory",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043f\u0430\u043c\u044f\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            44,
            52
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "save_user_memory",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043f\u0430\u043c\u044f\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0432 \u0444\u0430\u0439\u043b",
          "line_range": [
            54,
            60
          ],
          "parameters": [
            "memory"
          ],
          "decorators": []
        },
        {
          "name": "add_memory_endpoints",
          "docstring": "\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 endpoints \u043f\u0430\u043c\u044f\u0442\u0438 \u043a FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044e",
          "line_range": [
            62,
            273
          ],
          "parameters": [
            "app"
          ],
          "decorators": []
        },
        {
          "name": "save_user_message",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            66,
            97
          ],
          "parameters": [
            "message"
          ],
          "decorators": [
            "app.post('/api/v1/memory/save')"
          ]
        },
        {
          "name": "get_user_history",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            100,
            122
          ],
          "parameters": [
            "user_id",
            "limit"
          ],
          "decorators": [
            "app.get('/api/v1/memory/history/{user_id}')"
          ]
        },
        {
          "name": "search_user_memory",
          "docstring": "\u041f\u043e\u0438\u0441\u043a \u0432 \u043f\u0430\u043c\u044f\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            125,
            152
          ],
          "parameters": [
            "query"
          ],
          "decorators": [
            "app.post('/api/v1/memory/search')"
          ]
        },
        {
          "name": "chat_with_ollama",
          "docstring": "\u0427\u0430\u0442 \u0441 Ollama \u0447\u0435\u0440\u0435\u0437 API",
          "line_range": [
            155,
            215
          ],
          "parameters": [
            "request"
          ],
          "decorators": [
            "app.post('/api/v1/chat/ollama')"
          ]
        },
        {
          "name": "clear_user_memory",
          "docstring": "\u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u043f\u0430\u043c\u044f\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            218,
            238
          ],
          "parameters": [
            "user_id"
          ],
          "decorators": [
            "app.delete('/api/v1/memory/clear/{user_id}')"
          ]
        },
        {
          "name": "memory_stats",
          "docstring": "\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u043f\u0430\u043c\u044f\u0442\u0438",
          "line_range": [
            241,
            273
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/memory/stats')"
          ]
        }
      ],
      "classes": [
        {
          "name": "UserMessage",
          "docstring": "",
          "line_range": [
            21,
            26
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "MemoryQuery",
          "docstring": "",
          "line_range": [
            28,
            31
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "OllamaRequest",
          "docstring": "",
          "line_range": [
            33,
            38
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        }
      ],
      "callgraph": {
        "load_user_memory": [
          "json.load",
          "USER_MEMORY_FILE.exists",
          "open",
          "print"
        ],
        "save_user_memory": [
          "open",
          "json.dump",
          "print"
        ],
        "add_memory_endpoints": [],
        "save_user_message": [
          "str",
          "app.post",
          "time.strftime",
          "len",
          "HTTPException",
          "load_user_memory",
          "save_user_memory"
        ],
        "get_user_history": [
          "app.get",
          "str",
          "memory.get",
          "len",
          "HTTPException",
          "load_user_memory",
          "Query"
        ],
        "search_user_memory": [
          "str",
          "app.post",
          "found_messages.append",
          "memory.get",
          "len",
          "HTTPException",
          "load_user_memory",
          "msg.get"
        ],
        "chat_with_ollama": [
          "aiohttp.ClientTimeout",
          "session.post",
          "toml.load",
          "resp.text",
          "str",
          "app.post",
          "open",
          "resp.json",
          "response_text.split",
          "time.strftime",
          "len",
          "HTTPException",
          "aiohttp.ClientSession",
          "data.get"
        ],
        "clear_user_memory": [
          "str",
          "time.strftime",
          "memory.get",
          "len",
          "HTTPException",
          "load_user_memory",
          "app.delete",
          "save_user_memory"
        ],
        "memory_stats": [
          "app.get",
          "memory.values",
          "last_message.get",
          "time.ctime",
          "str",
          "int",
          "user_stats.sort",
          "len",
          "USER_MEMORY_FILE.stat",
          "load_user_memory",
          "HTTPException",
          "memory.items",
          "USER_MEMORY_FILE.exists",
          "sum",
          "user_stats.append"
        ]
      },
      "dependencies": [
        "Any",
        "BaseModel",
        "Dict",
        "FastAPI",
        "HTTPException",
        "List",
        "Optional",
        "Path",
        "Query",
        "aiohttp",
        "asyncio",
        "datetime",
        "fastapi",
        "json",
        "pathlib",
        "pydantic",
        "time",
        "timedelta",
        "toml",
        "typing"
      ],
      "hash": null,
      "artifact_id": "3c2424b6-22e7-4faa-ac6b-6317f9554cd4"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.fastapi_ollama_server",
      "path": ".ARCHIVE/archive/telegram_experiments/fastapi_ollama_server.py",
      "category": "core",
      "module_doc": "\ud83d\ude80 \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u043d\u044b\u0439 FastAPI \u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f LLMStruct\n- Ollama \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f\n- \u041f\u0430\u043c\u044f\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \n- \u041c\u0435\u0442\u0440\u0438\u043a\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b\n- \u0412\u0441\u0435 \u0432 \u043e\u0434\u043d\u043e\u043c \u0444\u0430\u0439\u043b\u0435 \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0442\u044b",
      "functions": [
        {
          "name": "load_user_memory",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043f\u0430\u043c\u044f\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439",
          "line_range": [
            56,
            64
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "save_user_memory",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043f\u0430\u043c\u044f\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439",
          "line_range": [
            66,
            72
          ],
          "parameters": [
            "memory"
          ],
          "decorators": []
        },
        {
          "name": "load_ollama_config",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 Ollama",
          "line_range": [
            74,
            82
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "root",
          "docstring": "\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 API",
          "line_range": [
            114,
            131
          ],
          "parameters": [],
          "decorators": [
            "app.get('/', summary='API Information')"
          ]
        },
        {
          "name": "health_check",
          "docstring": "Health check \u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u043e\u0439 Ollama",
          "line_range": [
            134,
            155
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/system/health', response_model=HealthResponse)"
          ]
        },
        {
          "name": "system_status",
          "docstring": "\u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            158,
            246
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/system/status')"
          ]
        },
        {
          "name": "chat_with_ollama",
          "docstring": "\u0427\u0430\u0442 \u0441 Ollama",
          "line_range": [
            251,
            319
          ],
          "parameters": [
            "request"
          ],
          "decorators": [
            "app.post('/api/v1/chat/ollama')"
          ]
        },
        {
          "name": "get_ollama_models",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 Ollama",
          "line_range": [
            322,
            350
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/ollama/models')"
          ]
        },
        {
          "name": "save_user_message",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            355,
            389
          ],
          "parameters": [
            "message"
          ],
          "decorators": [
            "app.post('/api/v1/memory/save')"
          ]
        },
        {
          "name": "get_user_history",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            392,
            415
          ],
          "parameters": [
            "user_id",
            "limit"
          ],
          "decorators": [
            "app.get('/api/v1/memory/history/{user_id}')"
          ]
        },
        {
          "name": "memory_stats",
          "docstring": "\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u043f\u0430\u043c\u044f\u0442\u0438",
          "line_range": [
            418,
            450
          ],
          "parameters": [],
          "decorators": [
            "app.get('/api/v1/memory/stats')"
          ]
        },
        {
          "name": "clear_user_memory",
          "docstring": "\u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u043f\u0430\u043c\u044f\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            453,
            476
          ],
          "parameters": [
            "user_id"
          ],
          "decorators": [
            "app.delete('/api/v1/memory/clear/{user_id}')"
          ]
        },
        {
          "name": "startup_event",
          "docstring": "\u0421\u043e\u0431\u044b\u0442\u0438\u044f \u043f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435",
          "line_range": [
            481,
            488
          ],
          "parameters": [],
          "decorators": [
            "app.on_event('startup')"
          ]
        },
        {
          "name": "shutdown_event",
          "docstring": "\u0421\u043e\u0431\u044b\u0442\u0438\u044f \u043f\u0440\u0438 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435",
          "line_range": [
            491,
            499
          ],
          "parameters": [],
          "decorators": [
            "app.on_event('shutdown')"
          ]
        }
      ],
      "classes": [
        {
          "name": "UserMessage",
          "docstring": "",
          "line_range": [
            85,
            90
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "OllamaRequest",
          "docstring": "",
          "line_range": [
            92,
            97
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "ChatMessage",
          "docstring": "",
          "line_range": [
            99,
            102
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        },
        {
          "name": "HealthResponse",
          "docstring": "",
          "line_range": [
            104,
            109
          ],
          "methods": [],
          "bases": [
            "BaseModel"
          ]
        }
      ],
      "callgraph": {
        "load_user_memory": [
          "json.load",
          "USER_MEMORY_FILE.exists",
          "open",
          "print"
        ],
        "save_user_memory": [
          "open",
          "json.dump",
          "print"
        ],
        "load_ollama_config": [
          "open",
          "toml.load"
        ],
        "root": [
          "app.get"
        ],
        "health_check": [
          "app.get",
          "aiohttp.ClientTimeout",
          "load_ollama_config",
          "session.get",
          "time.strftime",
          "HealthResponse",
          "track_workflow_event",
          "aiohttp.ClientSession"
        ],
        "system_status": [
          "app.get",
          "memory.values",
          "load_ollama_config",
          "int",
          "resp.json",
          "HTTPException",
          "load_user_memory",
          "track_workflow_event",
          "USER_MEMORY_FILE.exists",
          "aiohttp.ClientSession",
          "sum",
          "time.time",
          "struct_file.exists",
          "track_task_start",
          "time.ctime",
          "session.get",
          "tracker.get_session_summary",
          "get_metrics_tracker",
          "aiohttp.ClientTimeout",
          "str",
          "Path",
          "len",
          "struct_file.stat",
          "time.strftime",
          "track_task_complete",
          "data.get"
        ],
        "chat_with_ollama": [
          "load_ollama_config",
          "int",
          "resp.json",
          "HTTPException",
          "track_workflow_event",
          "aiohttp.ClientSession",
          "time.time",
          "tracker.track_token_usage",
          "track_task_start",
          "get_metrics_tracker",
          "aiohttp.ClientTimeout",
          "session.post",
          "str",
          "app.post",
          "len",
          "resp.text",
          "time.strftime",
          "response_text.split",
          "track_task_complete",
          "data.get"
        ],
        "get_ollama_models": [
          "app.get",
          "aiohttp.ClientTimeout",
          "models.append",
          "load_ollama_config",
          "str",
          "session.get",
          "resp.json",
          "model.get",
          "len",
          "HTTPException",
          "aiohttp.ClientSession",
          "data.get"
        ],
        "save_user_message": [
          "str",
          "app.post",
          "time.strftime",
          "len",
          "HTTPException",
          "load_user_memory",
          "track_workflow_event",
          "save_user_memory"
        ],
        "get_user_history": [
          "app.get",
          "str",
          "memory.get",
          "len",
          "HTTPException",
          "load_user_memory",
          "Query",
          "track_workflow_event"
        ],
        "memory_stats": [
          "app.get",
          "memory.values",
          "last_message.get",
          "time.ctime",
          "str",
          "int",
          "user_stats.sort",
          "len",
          "USER_MEMORY_FILE.stat",
          "load_user_memory",
          "HTTPException",
          "memory.items",
          "USER_MEMORY_FILE.exists",
          "sum",
          "user_stats.append"
        ],
        "clear_user_memory": [
          "str",
          "time.strftime",
          "memory.get",
          "len",
          "HTTPException",
          "load_user_memory",
          "app.delete",
          "track_workflow_event",
          "save_user_memory"
        ],
        "startup_event": [
          "track_workflow_event",
          "app.on_event",
          "get_metrics_tracker",
          "print"
        ],
        "shutdown_event": [
          "app.on_event",
          "print",
          "tracker.save_session",
          "get_metrics_tracker",
          "track_workflow_event"
        ]
      },
      "dependencies": [
        "Any",
        "BaseModel",
        "CORSMiddleware",
        "Dict",
        "FastAPI",
        "HTTPException",
        "List",
        "Optional",
        "Path",
        "Query",
        "aiohttp",
        "asyncio",
        "datetime",
        "fastapi",
        "fastapi.middleware.cors",
        "get_metrics_tracker",
        "json",
        "pathlib",
        "pydantic",
        "src.llmstruct.metrics_tracker",
        "time",
        "timedelta",
        "toml",
        "track_task_complete",
        "track_task_start",
        "track_workflow_event",
        "typing",
        "uvicorn"
      ],
      "hash": null,
      "artifact_id": "66c83520-20bf-48b0-a90e-f9128c375e87"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.test_read_telegram",
      "path": ".ARCHIVE/archive/telegram_experiments/test_read_telegram.py",
      "category": "test",
      "module_doc": "\u0422\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0441\u043a\u0440\u0438\u043f\u0442 \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0438\u0437 Telegram",
      "functions": [
        {
          "name": "read_latest_message",
          "docstring": "\u0427\u0438\u0442\u0430\u0435\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0438\u0437 \u043b\u043e\u0433\u043e\u0432",
          "line_range": [
            9,
            41
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            43,
            53
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "read_latest_message": [
          "last_entry.strip",
          "print",
          "f.read",
          "Path",
          "open",
          "len",
          "content.split",
          "messages_log.exists"
        ],
        "main": [
          "read_latest_message",
          "print"
        ]
      },
      "dependencies": [
        "Path",
        "pathlib",
        "time"
      ],
      "hash": null,
      "artifact_id": "80ebe035-2339-40e3-b7b1-b6989e9fd75b"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.dummy_work_executor",
      "path": ".ARCHIVE/archive/telegram_experiments/dummy_work_executor.py",
      "category": "core",
      "module_doc": "Dummy Work Executor - \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0432\u0443\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0435\u0439 \u0441\u0432\u044f\u0437\u0438 \u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c \u0447\u0435\u0440\u0435\u0437 Telegram",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": [
            340,
            350
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            31,
            43
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "send_message",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0447\u0435\u0440\u0435\u0437 Telegram",
          "line_range": [
            45,
            61
          ],
          "parameters": [
            "self",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "check_user_response",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043e\u0442\u0432\u0435\u0442\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438\u0437 \u043b\u043e\u0433\u043e\u0432",
          "line_range": [
            63,
            102
          ],
          "parameters": [
            "self",
            "expected_keywords"
          ],
          "decorators": []
        },
        {
          "name": "wait_for_user_input",
          "docstring": "\u041e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u043e\u0442\u0432\u0435\u0442\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441 \u0442\u0430\u0439\u043c\u0430\u0443\u0442\u043e\u043c",
          "line_range": [
            104,
            118
          ],
          "parameters": [
            "self",
            "timeout",
            "expected_keywords"
          ],
          "decorators": []
        },
        {
          "name": "dummy_phase_1",
          "docstring": "Dummy Phase 1: \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0432\u044f\u0437\u0438",
          "line_range": [
            120,
            173
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "dummy_phase_2",
          "docstring": "Dummy Phase 2: \u0413\u043e\u0442\u043e\u0432\u043d\u043e\u0441\u0442\u044c \u043a \u043c\u0430\u0441\u0442\u0435\u0440-\u043f\u043b\u0430\u043d\u0443",
          "line_range": [
            175,
            296
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "execute_dummy_work",
          "docstring": "\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u043d\u043e\u0433\u043e \u0446\u0438\u043a\u043b\u0430 dummy work",
          "line_range": [
            298,
            338
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "DummyWorkExecutor",
          "docstring": "\u0418\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c dummy work \u0441 \u0434\u0432\u0443\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0435\u0439 \u0441\u0432\u044f\u0437\u044c\u044e",
          "line_range": [
            28,
            338
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                31,
                43
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "send_message",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0447\u0435\u0440\u0435\u0437 Telegram",
              "line_range": [
                45,
                61
              ],
              "parameters": [
                "self",
                "message"
              ]
            },
            {
              "name": "check_user_response",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043e\u0442\u0432\u0435\u0442\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438\u0437 \u043b\u043e\u0433\u043e\u0432",
              "line_range": [
                63,
                102
              ],
              "parameters": [
                "self",
                "expected_keywords"
              ]
            },
            {
              "name": "wait_for_user_input",
              "docstring": "\u041e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u043e\u0442\u0432\u0435\u0442\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441 \u0442\u0430\u0439\u043c\u0430\u0443\u0442\u043e\u043c",
              "line_range": [
                104,
                118
              ],
              "parameters": [
                "self",
                "timeout",
                "expected_keywords"
              ]
            },
            {
              "name": "dummy_phase_1",
              "docstring": "Dummy Phase 1: \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0432\u044f\u0437\u0438",
              "line_range": [
                120,
                173
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "dummy_phase_2",
              "docstring": "Dummy Phase 2: \u0413\u043e\u0442\u043e\u0432\u043d\u043e\u0441\u0442\u044c \u043a \u043c\u0430\u0441\u0442\u0435\u0440-\u043f\u043b\u0430\u043d\u0443",
              "line_range": [
                175,
                296
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "execute_dummy_work",
              "docstring": "\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u043d\u043e\u0433\u043e \u0446\u0438\u043a\u043b\u0430 dummy work",
              "line_range": [
                298,
                338
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "int",
          "os.getenv",
          "track_workflow_event",
          "Bot",
          "time.time"
        ],
        "send_message": [
          "print"
        ],
        "check_user_response": [
          "last_entry.strip",
          "next",
          "print",
          "f.read",
          "Path",
          "open",
          "message_line.replace",
          "len",
          "content.split",
          "message.lower",
          "line.startswith",
          "messages_log.exists",
          "keyword.lower"
        ],
        "wait_for_user_input": [
          "self.check_user_response",
          "asyncio.sleep",
          "print",
          "time.time"
        ],
        "dummy_phase_1": [
          "self.send_message",
          "print",
          "track_task_start",
          "track_task_complete",
          "self.wait_for_user_input"
        ],
        "dummy_phase_2": [
          "self.send_message",
          "user_message.lower",
          "print",
          "track_task_start",
          "any",
          "track_workflow_event",
          "track_task_complete",
          "self.wait_for_user_input"
        ],
        "execute_dummy_work": [
          "self.dummy_phase_2",
          "datetime.now",
          "self.dummy_phase_1",
          "print",
          "self.send_message",
          "str",
          "track_workflow_event",
          "asyncio.sleep"
        ],
        "main": [
          "executor.execute_dummy_work",
          "DummyWorkExecutor",
          "print"
        ]
      },
      "dependencies": [
        "Bot",
        "Path",
        "asyncio",
        "datetime",
        "os",
        "pathlib",
        "src.llmstruct.metrics_tracker",
        "sys",
        "telegram",
        "time",
        "track_task_complete",
        "track_task_start",
        "track_workflow_event"
      ],
      "hash": null,
      "artifact_id": "7eb88b98-e2a7-498f-86fc-76353acfa1b8"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.cursor_telegram_reader",
      "path": ".ARCHIVE/archive/telegram_experiments/cursor_telegram_reader.py",
      "category": "core",
      "module_doc": "Cursor Telegram Reader - \u0427\u0438\u0442\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0438\u0437 Telegram \u0431\u043e\u0442\u0430 \u0434\u043b\u044f Cursor",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": [
            153,
            202
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            16,
            20
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_latest_messages",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f",
          "line_range": [
            22,
            56
          ],
          "parameters": [
            "self",
            "count"
          ],
          "decorators": []
        },
        {
          "name": "get_cursor_commands",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0434\u043b\u044f Cursor \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0447\u0430\u0441\u044b",
          "line_range": [
            58,
            91
          ],
          "parameters": [
            "self",
            "hours"
          ],
          "decorators": []
        },
        {
          "name": "watch_new_messages",
          "docstring": "\u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 \u043d\u043e\u0432\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u043c \u0432\u0440\u0435\u043c\u0435\u043d\u0438",
          "line_range": [
            93,
            127
          ],
          "parameters": [
            "self",
            "callback"
          ],
          "decorators": []
        },
        {
          "name": "print_status",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f",
          "line_range": [
            129,
            151
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TelegramLogReader",
          "docstring": "\u0427\u0438\u0442\u0430\u0442\u0435\u043b\u044c \u043b\u043e\u0433\u043e\u0432 Telegram \u0434\u043b\u044f Cursor",
          "line_range": [
            13,
            151
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                16,
                20
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "get_latest_messages",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f",
              "line_range": [
                22,
                56
              ],
              "parameters": [
                "self",
                "count"
              ]
            },
            {
              "name": "get_cursor_commands",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0434\u043b\u044f Cursor \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0447\u0430\u0441\u044b",
              "line_range": [
                58,
                91
              ],
              "parameters": [
                "self",
                "hours"
              ]
            },
            {
              "name": "watch_new_messages",
              "docstring": "\u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 \u043d\u043e\u0432\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u043c \u0432\u0440\u0435\u043c\u0435\u043d\u0438",
              "line_range": [
                93,
                127
              ],
              "parameters": [
                "self",
                "callback"
              ]
            },
            {
              "name": "print_status",
              "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f",
              "line_range": [
                129,
                151
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path"
        ],
        "get_latest_messages": [
          "print",
          "f.read",
          "open",
          "type_line.replace",
          "message_line.replace",
          "user_line.replace",
          "len",
          "content.split",
          "entry.strip",
          "messages.append"
        ],
        "get_cursor_commands": [
          "line.split",
          "datetime.now",
          "f.readlines",
          "datetime.strptime",
          "print",
          "open",
          "len",
          "commands.append",
          "timedelta"
        ],
        "watch_new_messages": [
          "print",
          "f.read",
          "f.seek",
          "time.sleep",
          "open",
          "callback",
          "new_content.strip"
        ],
        "print_status": [
          "datetime.fromtimestamp",
          "print"
        ],
        "main": [
          "reader.get_cursor_commands",
          "reader.watch_new_messages",
          "print",
          "int",
          "len",
          "TelegramLogReader",
          "reader.get_latest_messages",
          "reader.print_status"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "datetime",
        "json",
        "os",
        "pathlib",
        "sys",
        "time",
        "timedelta",
        "typing"
      ],
      "hash": null,
      "artifact_id": "2b2d265c-1c6d-49d9-9e7a-c0f41fbd7145"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.cursor_bot_messenger",
      "path": ".ARCHIVE/archive/telegram_experiments/cursor_bot_messenger.py",
      "category": "core",
      "module_doc": "Cursor Bot Messenger - \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0447\u0435\u0440\u0435\u0437 Telegram",
      "functions": [
        {
          "name": "send_to_user",
          "docstring": "\u0423\u0434\u043e\u0431\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f",
          "line_range": [
            113,
            116
          ],
          "parameters": [
            "message"
          ],
          "decorators": []
        },
        {
          "name": "wait_for_response",
          "docstring": "\u0423\u0434\u043e\u0431\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u043e\u0442\u0432\u0435\u0442\u0430",
          "line_range": [
            118,
            121
          ],
          "parameters": [
            "timeout_minutes"
          ],
          "decorators": []
        },
        {
          "name": "interactive_communication",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0432\u043e\u043f\u0440\u043e\u0441 \u0438 \u0434\u043e\u0436\u0434\u0430\u0442\u044c\u0441\u044f \u043e\u0442\u0432\u0435\u0442\u0430",
          "line_range": [
            123,
            134
          ],
          "parameters": [
            "question",
            "timeout_minutes"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            22,
            30
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_user_chat_id",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 chat_id \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438\u0437 \u043b\u043e\u0433\u043e\u0432",
          "line_range": [
            32,
            50
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "send_message",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e",
          "line_range": [
            52,
            71
          ],
          "parameters": [
            "self",
            "message",
            "parse_mode"
          ],
          "decorators": []
        },
        {
          "name": "wait_for_user_response",
          "docstring": "\u041e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u043e\u0442\u0432\u0435\u0442\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            73,
            111
          ],
          "parameters": [
            "self",
            "timeout_minutes"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            145,
            146
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CursorBotMessenger",
          "docstring": "\u041a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0438\u0437 Cursor \u0432 Telegram",
          "line_range": [
            19,
            111
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                22,
                30
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_user_chat_id",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 chat_id \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438\u0437 \u043b\u043e\u0433\u043e\u0432",
              "line_range": [
                32,
                50
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "send_message",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e",
              "line_range": [
                52,
                71
              ],
              "parameters": [
                "self",
                "message",
                "parse_mode"
              ]
            },
            {
              "name": "wait_for_user_response",
              "docstring": "\u041e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u043e\u0442\u0432\u0435\u0442\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
              "line_range": [
                73,
                111
              ],
              "parameters": [
                "self",
                "timeout_minutes"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "ValueError",
          "os.getenv",
          "Bot"
        ],
        "get_user_chat_id": [
          "line.split",
          "print",
          "f.read",
          "int",
          "open",
          "reversed",
          "content.split",
          "messages_log.exists"
        ],
        "send_message": [
          "self.get_user_chat_id",
          "print"
        ],
        "wait_for_user_response": [
          "datetime.now",
          "print",
          "f.read",
          "open",
          "datetime.fromisoformat",
          "reversed",
          "entry.strip",
          "content.split",
          "len",
          "messages_log.exists",
          "asyncio.sleep",
          "time.time"
        ],
        "send_to_user": [
          "messenger.send_message",
          "CursorBotMessenger"
        ],
        "wait_for_response": [
          "CursorBotMessenger",
          "messenger.wait_for_user_response"
        ],
        "interactive_communication": [
          "messenger.send_message",
          "CursorBotMessenger",
          "messenger.wait_for_user_response"
        ],
        "main": [
          "send_to_user"
        ]
      },
      "dependencies": [
        "Bot",
        "Path",
        "asyncio",
        "datetime",
        "logging",
        "os",
        "pathlib",
        "sys",
        "telegram",
        "time"
      ],
      "hash": null,
      "artifact_id": "00386914-cda4-46b6-b79f-57a798829f3d"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.send_test_message",
      "path": ".ARCHIVE/archive/telegram_experiments/send_test_message.py",
      "category": "core",
      "module_doc": "Test message sender to Telegram\n\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0438 \u0436\u0434\u0435\u0442 \u043e\u0442\u0432\u0435\u0442\u0430 \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
      "functions": [
        {
          "name": "send_test_message",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 Telegram",
          "line_range": [
            13,
            57
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "wait_for_user_response",
          "docstring": "\u0416\u0434\u0435\u0442 \u043e\u0442\u0432\u0435\u0442\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 \u043b\u043e\u0433\u043e\u0432",
          "line_range": [
            59,
            101
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f",
          "line_range": [
            103,
            120
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "send_test_message": [
          "httpx.AsyncClient",
          "datetime.now",
          "print",
          "os.getenv",
          "client.post"
        ],
        "wait_for_user_response": [
          "start_time.strftime",
          "datetime.now",
          "f.readlines",
          "print",
          "line.split",
          "log_time.strftime",
          "open",
          "datetime.fromisoformat",
          "reversed",
          "timestamp_str.replace",
          "asyncio.sleep"
        ],
        "main": [
          "wait_for_user_response",
          "send_test_message",
          "print"
        ]
      },
      "dependencies": [
        "asyncio",
        "datetime",
        "httpx",
        "os",
        "sys"
      ],
      "hash": null,
      "artifact_id": "40f5f2fe-1f71-4d75-a492-057d28c90c2e"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.test_master_plan_flow",
      "path": ".ARCHIVE/archive/telegram_experiments/test_master_plan_flow.py",
      "category": "test",
      "module_doc": "Test Master Plan Flow - \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u043d\u043e\u0433\u043e \u0446\u0438\u043a\u043b\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043c\u0430\u0441\u0442\u0435\u0440-\u043f\u043b\u0430\u043d\u0430",
      "functions": [
        {
          "name": "test_full_flow",
          "docstring": "\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u043d\u043e\u0433\u043e \u0446\u0438\u043a\u043b\u0430",
          "line_range": [
            174,
            208
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            18,
            21
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "dummy_work_phase",
          "docstring": "Dummy \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0441\u0432\u044f\u0437\u0438",
          "line_range": [
            23,
            86
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "wait_for_master_plan_approval",
          "docstring": "\u041e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043c\u0430\u0441\u0442\u0435\u0440-\u043f\u043b\u0430\u043d\u0430",
          "line_range": [
            88,
            114
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "execute_git_operations",
          "docstring": "\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 git \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439",
          "line_range": [
            116,
            155
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "start_master_plan_execution",
          "docstring": "\u041d\u0430\u0447\u0430\u043b\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043c\u0430\u0441\u0442\u0435\u0440-\u043f\u043b\u0430\u043d\u0430",
          "line_range": [
            157,
            172
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "MasterPlanExecutor",
          "docstring": "\u0418\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c \u043c\u0430\u0441\u0442\u0435\u0440-\u043f\u043b\u0430\u043d\u0430 \u0441 \u0434\u0432\u0443\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0435\u0439 \u0441\u0432\u044f\u0437\u044c\u044e",
          "line_range": [
            15,
            172
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                18,
                21
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "dummy_work_phase",
              "docstring": "Dummy \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0441\u0432\u044f\u0437\u0438",
              "line_range": [
                23,
                86
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "wait_for_master_plan_approval",
              "docstring": "\u041e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043c\u0430\u0441\u0442\u0435\u0440-\u043f\u043b\u0430\u043d\u0430",
              "line_range": [
                88,
                114
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "execute_git_operations",
              "docstring": "\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 git \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439",
              "line_range": [
                116,
                155
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "start_master_plan_execution",
              "docstring": "\u041d\u0430\u0447\u0430\u043b\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043c\u0430\u0441\u0442\u0435\u0440-\u043f\u043b\u0430\u043d\u0430",
              "line_range": [
                157,
                172
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "dummy_work_phase": [
          "datetime.now",
          "print",
          "send_to_user",
          "interactive_communication",
          "asyncio.sleep"
        ],
        "wait_for_master_plan_approval": [
          "wait_for_response",
          "print",
          "any",
          "send_to_user",
          "response.lower"
        ],
        "execute_git_operations": [
          "send_to_user",
          "asyncio.sleep",
          "print"
        ],
        "start_master_plan_execution": [
          "send_to_user"
        ],
        "test_full_flow": [
          "print",
          "MasterPlanExecutor",
          "executor.dummy_work_phase",
          "send_to_user",
          "executor.start_master_plan_execution",
          "executor.execute_git_operations",
          "executor.wait_for_master_plan_approval"
        ]
      },
      "dependencies": [
        "Path",
        "asyncio",
        "cursor_bot_messenger",
        "datetime",
        "interactive_communication",
        "os",
        "pathlib",
        "send_to_user",
        "time",
        "wait_for_response"
      ],
      "hash": null,
      "artifact_id": "c4a8a801-6e66-4cc0-8013-60ae34164fce"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.cursor_integration",
      "path": ".ARCHIVE/archive/telegram_experiments/cursor_integration.py",
      "category": "core",
      "module_doc": "\ud83c\udfaf Cursor Integration for Telegram Master Controller\n\u041f\u0440\u043e\u0441\u0442\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 Cursor \u0441 Telegram \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u043e\u043c",
      "functions": [
        {
          "name": "check_telegram_commands",
          "docstring": "\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043a\u043e\u043c\u0430\u043d\u0434",
          "line_range": [
            142,
            144
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "send_telegram_message",
          "docstring": "\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
          "line_range": [
            146,
            148
          ],
          "parameters": [
            "message",
            "msg_type"
          ],
          "decorators": []
        },
        {
          "name": "update_telegram_status",
          "docstring": "\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u0442\u0430\u0442\u0443\u0441\u0430",
          "line_range": [
            150,
            152
          ],
          "parameters": [
            "message",
            "status"
          ],
          "decorators": []
        },
        {
          "name": "send_progress",
          "docstring": "\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430",
          "line_range": [
            154,
            156
          ],
          "parameters": [
            "step",
            "details",
            "progress"
          ],
          "decorators": []
        },
        {
          "name": "send_completion",
          "docstring": "\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f \u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0438",
          "line_range": [
            158,
            160
          ],
          "parameters": [
            "summary",
            "success"
          ],
          "decorators": []
        },
        {
          "name": "ask_confirmation",
          "docstring": "\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f",
          "line_range": [
            162,
            164
          ],
          "parameters": [
            "question",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            16,
            25
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "check_for_commands",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            27,
            48
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "send_response",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043e\u0442\u0432\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0432 Telegram",
          "line_range": [
            50,
            78
          ],
          "parameters": [
            "self",
            "message",
            "response_type"
          ],
          "decorators": []
        },
        {
          "name": "update_status",
          "docstring": "\u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f",
          "line_range": [
            80,
            96
          ],
          "parameters": [
            "self",
            "message",
            "status"
          ],
          "decorators": []
        },
        {
          "name": "send_progress_update",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430",
          "line_range": [
            98,
            109
          ],
          "parameters": [
            "self",
            "step",
            "details",
            "progress"
          ],
          "decorators": []
        },
        {
          "name": "send_completion",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0438",
          "line_range": [
            111,
            124
          ],
          "parameters": [
            "self",
            "summary",
            "success"
          ],
          "decorators": []
        },
        {
          "name": "ask_for_confirmation",
          "docstring": "\u0417\u0430\u043f\u0440\u043e\u0441\u0438\u0442\u044c \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            126,
            137
          ],
          "parameters": [
            "self",
            "question",
            "context"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CursorTelegramIntegration",
          "docstring": "\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f Cursor \u0441 Telegram Master Controller",
          "line_range": [
            13,
            137
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                16,
                25
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "check_for_commands",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
              "line_range": [
                27,
                48
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "send_response",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043e\u0442\u0432\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0432 Telegram",
              "line_range": [
                50,
                78
              ],
              "parameters": [
                "self",
                "message",
                "response_type"
              ]
            },
            {
              "name": "update_status",
              "docstring": "\u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f",
              "line_range": [
                80,
                96
              ],
              "parameters": [
                "self",
                "message",
                "status"
              ]
            },
            {
              "name": "send_progress_update",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430",
              "line_range": [
                98,
                109
              ],
              "parameters": [
                "self",
                "step",
                "details",
                "progress"
              ]
            },
            {
              "name": "send_completion",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0438",
              "line_range": [
                111,
                124
              ],
              "parameters": [
                "self",
                "summary",
                "success"
              ]
            },
            {
              "name": "ask_for_confirmation",
              "docstring": "\u0417\u0430\u043f\u0440\u043e\u0441\u0438\u0442\u044c \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
              "line_range": [
                126,
                137
              ],
              "parameters": [
                "self",
                "question",
                "context"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "set"
        ],
        "check_for_commands": [
          "json.load",
          "new_commands.append",
          "print",
          "open",
          "cmd.get"
        ],
        "send_response": [
          "json.load",
          "datetime.now",
          "print",
          "int",
          "open",
          "responses.append",
          "json.dump",
          "len",
          "time.time"
        ],
        "update_status": [
          "json.dump",
          "open",
          "datetime.now",
          "print"
        ],
        "send_progress_update": [
          "self.send_response",
          "self.update_status"
        ],
        "send_completion": [
          "_integration.send_completion"
        ],
        "ask_for_confirmation": [
          "self.send_response",
          "self.update_status"
        ],
        "check_telegram_commands": [
          "_integration.check_for_commands"
        ],
        "send_telegram_message": [
          "_integration.send_response"
        ],
        "update_telegram_status": [
          "_integration.update_status"
        ],
        "send_progress": [
          "_integration.send_progress_update"
        ],
        "ask_confirmation": [
          "_integration.ask_for_confirmation"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "datetime",
        "json",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "572319f5-3cb7-4048-8a9b-f954150f33a4"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.cursor_simple_integration",
      "path": ".ARCHIVE/archive/telegram_experiments/cursor_simple_integration.py",
      "category": "core",
      "module_doc": "\u041f\u0440\u043e\u0441\u0442\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 Cursor \u0441 Telegram \u0431\u043e\u0442\u043e\u043c\n\u0411\u0430\u0437\u043e\u0432\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0447\u0435\u0440\u0435\u0437 JSON \u0444\u0430\u0439\u043b\u044b \u0431\u0435\u0437 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439",
      "functions": [
        {
          "name": "ensure_data_dir",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u044b\u0445",
          "line_range": [
            20,
            27
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "get_user_messages",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n\nArgs:\n    limit: \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e 10)\n\nReturns:\n    \u0421\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            29,
            50
          ],
          "parameters": [
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "send_to_telegram",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 Telegram \u0447\u0435\u0440\u0435\u0437 \u0431\u043e\u0442\u0430\n\nArgs:\n    text: \u0422\u0435\u043a\u0441\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\n    message_type: \u0422\u0438\u043f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f (response, notification, etc.)\n\nReturns:\n    True \u0435\u0441\u043b\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043e \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c",
          "line_range": [
            52,
            94
          ],
          "parameters": [
            "text",
            "message_type"
          ],
          "decorators": []
        },
        {
          "name": "check_new_messages",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u043e\u0432\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438\n\nArgs:\n    last_check_timestamp: ISO timestamp \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438\n\nReturns:\n    \u0421\u043f\u0438\u0441\u043e\u043a \u043d\u043e\u0432\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
          "line_range": [
            96,
            126
          ],
          "parameters": [
            "last_check_timestamp"
          ],
          "decorators": []
        },
        {
          "name": "get_last_message",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n\nReturns:\n    \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0438\u043b\u0438 None",
          "line_range": [
            128,
            136
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_conversation_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u0430\n\nReturns:\n    \u0421\u0442\u0430\u0442\u0443\u0441 \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u0430 \u0441 \u043c\u0435\u0442\u0440\u0438\u043a\u0430\u043c\u0438",
          "line_range": [
            138,
            178
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "start_conversation_monitor",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430 \u043d\u043e\u0432\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439\n\nArgs:\n    callback_func: \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043d\u043e\u0432\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439\n    check_interval: \u0418\u043d\u0442\u0435\u0440\u0432\u0430\u043b \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445",
          "line_range": [
            180,
            214
          ],
          "parameters": [
            "callback_func",
            "check_interval"
          ],
          "decorators": []
        },
        {
          "name": "quick_reply",
          "docstring": "\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u043e\u0442\u0432\u0435\u0442 \u0432 Telegram",
          "line_range": [
            218,
            220
          ],
          "parameters": [
            "text"
          ],
          "decorators": []
        },
        {
          "name": "quick_status",
          "docstring": "\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            222,
            224
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "quick_notification",
          "docstring": "\u0411\u044b\u0441\u0442\u0440\u043e\u0435 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435",
          "line_range": [
            226,
            228
          ],
          "parameters": [
            "text"
          ],
          "decorators": []
        },
        {
          "name": "list_recent_messages",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f",
          "line_range": [
            230,
            243
          ],
          "parameters": [
            "count"
          ],
          "decorators": []
        },
        {
          "name": "test_integration",
          "docstring": "\u0422\u0435\u0441\u0442 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438",
          "line_range": [
            245,
            264
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "ensure_data_dir": [
          "file.exists",
          "DATA_DIR.mkdir",
          "file.write_text"
        ],
        "get_user_messages": [
          "json.load",
          "ensure_data_dir",
          "open",
          "print"
        ],
        "send_to_telegram": [
          "json.load",
          "datetime.now",
          "print",
          "int",
          "ensure_data_dir",
          "open",
          "json.dump",
          "len",
          "commands.append",
          "time.time"
        ],
        "check_new_messages": [
          "json.load",
          "print",
          "ensure_data_dir",
          "open",
          "new_messages.append",
          "msg.get"
        ],
        "get_last_message": [
          "get_user_messages"
        ],
        "show_conversation_status": [
          "json.load",
          "datetime.now",
          "print",
          "str",
          "Path",
          "ensure_data_dir",
          "open",
          "BOT_RESPONSES_FILE.exists",
          "cmd.get",
          "CURSOR_COMMANDS_FILE.exists",
          "len",
          "USER_MESSAGES_FILE.exists"
        ],
        "start_conversation_monitor": [
          "datetime.now",
          "print",
          "ensure_data_dir",
          "time.sleep",
          "max",
          "len",
          "callback_func",
          "msg.get",
          "check_new_messages"
        ],
        "quick_reply": [
          "send_to_telegram"
        ],
        "quick_status": [
          "send_to_telegram",
          "datetime.now"
        ],
        "quick_notification": [
          "send_to_telegram"
        ],
        "list_recent_messages": [
          "get_user_messages",
          "enumerate",
          "print",
          "len",
          "msg.get"
        ],
        "test_integration": [
          "ensure_data_dir",
          "show_conversation_status",
          "send_to_telegram",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "datetime",
        "json",
        "os",
        "pathlib",
        "sys",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "45e00d8c-2217-4290-a754-0a576abae1c1"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.simple_telegram_bot",
      "path": ".ARCHIVE/archive/telegram_experiments/simple_telegram_bot.py",
      "category": "core",
      "module_doc": "\u041f\u0440\u043e\u0441\u0442\u043e\u0439 \u043d\u0430\u0434\u0435\u0436\u043d\u044b\u0439 Telegram \u0431\u043e\u0442 \u0434\u043b\u044f \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f Cursor \u2194 Telegram\n\u0411\u0435\u0437 asyncio \u043a\u043e\u043d\u0444\u043b\u0438\u043a\u0442\u043e\u0432, \u0441 \u043f\u0440\u043e\u0441\u0442\u044b\u043c threading \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u043c",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": [
            277,
            297
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            34,
            64
          ],
          "parameters": [
            "self",
            "token",
            "chat_id"
          ],
          "decorators": []
        },
        {
          "name": "send_message",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 Telegram",
          "line_range": [
            66,
            84
          ],
          "parameters": [
            "self",
            "text",
            "parse_mode"
          ],
          "decorators": []
        },
        {
          "name": "get_updates",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439 \u043e\u0442 Telegram",
          "line_range": [
            86,
            108
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_user_message",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            110,
            153
          ],
          "parameters": [
            "self",
            "update"
          ],
          "decorators": []
        },
        {
          "name": "process_message",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
          "line_range": [
            155,
            173
          ],
          "parameters": [
            "self",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "handle_update",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0434\u043d\u043e\u0433\u043e \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f",
          "line_range": [
            175,
            193
          ],
          "parameters": [
            "self",
            "update"
          ],
          "decorators": []
        },
        {
          "name": "check_cursor_commands",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434 \u043e\u0442 Cursor",
          "line_range": [
            195,
            225
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0446\u0438\u043a\u043b \u0431\u043e\u0442\u0430",
          "line_range": [
            227,
            258
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cursor_watcher",
          "docstring": "\u041d\u0430\u0431\u043b\u044e\u0434\u0430\u0442\u0435\u043b\u044c \u0437\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c\u0438 Cursor",
          "line_range": [
            260,
            270
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "stop",
          "docstring": "\u041e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0431\u043e\u0442\u0430",
          "line_range": [
            272,
            274
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "SimpleTelegramBot",
          "docstring": "\u041f\u0440\u043e\u0441\u0442\u043e\u0439 Telegram \u0431\u043e\u0442 \u0431\u0435\u0437 asyncio",
          "line_range": [
            31,
            274
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                34,
                64
              ],
              "parameters": [
                "self",
                "token",
                "chat_id"
              ]
            },
            {
              "name": "send_message",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 Telegram",
              "line_range": [
                66,
                84
              ],
              "parameters": [
                "self",
                "text",
                "parse_mode"
              ]
            },
            {
              "name": "get_updates",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439 \u043e\u0442 Telegram",
              "line_range": [
                86,
                108
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_user_message",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
              "line_range": [
                110,
                153
              ],
              "parameters": [
                "self",
                "update"
              ]
            },
            {
              "name": "process_message",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f",
              "line_range": [
                155,
                173
              ],
              "parameters": [
                "self",
                "message"
              ]
            },
            {
              "name": "handle_update",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0434\u043d\u043e\u0433\u043e \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f",
              "line_range": [
                175,
                193
              ],
              "parameters": [
                "self",
                "update"
              ]
            },
            {
              "name": "check_cursor_commands",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434 \u043e\u0442 Cursor",
              "line_range": [
                195,
                225
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run",
              "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0446\u0438\u043a\u043b \u0431\u043e\u0442\u0430",
              "line_range": [
                227,
                258
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cursor_watcher",
              "docstring": "\u041d\u0430\u0431\u043b\u044e\u0434\u0430\u0442\u0435\u043b\u044c \u0437\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c\u0438 Cursor",
              "line_range": [
                260,
                270
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "stop",
              "docstring": "\u041e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0431\u043e\u0442\u0430",
              "line_range": [
                272,
                274
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Retry",
          "file.exists",
          "Path",
          "HTTPAdapter",
          "requests.Session",
          "file.write_text"
        ],
        "send_message": [
          "logger.info",
          "response.raise_for_status",
          "logger.error"
        ],
        "get_updates": [
          "response.json",
          "response.raise_for_status",
          "data.get",
          "logger.error"
        ],
        "save_user_message": [
          "update.get",
          "json.load",
          "user.get",
          "datetime.now",
          "open",
          "logger.error",
          "json.dump",
          "logger.info",
          "message.get",
          "len",
          "messages.append",
          "chat.get"
        ],
        "process_message": [
          "text.startswith",
          "message.get",
          "user.get",
          "datetime.now"
        ],
        "handle_update": [
          "update.get",
          "self.send_message",
          "self.process_message",
          "logger.error",
          "max",
          "self.save_user_message"
        ],
        "check_cursor_commands": [
          "json.load",
          "datetime.now",
          "self.send_message",
          "open",
          "logger.error",
          "cmd.get",
          "json.dump",
          "processed_commands.append"
        ],
        "run": [
          "self.send_message",
          "time.sleep",
          "threading.Thread",
          "self.handle_update",
          "cursor_thread.start",
          "logger.error",
          "logger.info",
          "self.get_updates"
        ],
        "cursor_watcher": [
          "logger.info",
          "time.sleep",
          "logger.error",
          "self.check_cursor_commands"
        ],
        "stop": [],
        "main": [
          "os.getenv",
          "logger.error",
          "logger.info",
          "SimpleTelegramBot",
          "bot.stop",
          "bot.run"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "HTTPAdapter",
        "Optional",
        "Path",
        "Retry",
        "datetime",
        "json",
        "logging",
        "os",
        "pathlib",
        "requests",
        "requests.adapters",
        "threading",
        "time",
        "typing",
        "urllib3.util.retry"
      ],
      "hash": null,
      "artifact_id": "8c360926-ac9d-4e9f-a403-ae3133b1acce"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.start_simple_telegram",
      "path": ".ARCHIVE/archive/telegram_experiments/start_simple_telegram.py",
      "category": "core",
      "module_doc": "\u0421\u043a\u0440\u0438\u043f\u0442 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f Cursor \u2194 Telegram\n\u041f\u0440\u043e\u0441\u0442\u043e\u0435 \u0438 \u043d\u0430\u0434\u0435\u0436\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0431\u0435\u0437 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439",
      "functions": [
        {
          "name": "check_token",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u0430",
          "line_range": [
            14,
            23
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "check_dependencies",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439",
          "line_range": [
            25,
            34
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "start_bot",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0431\u043e\u0442\u0430",
          "line_range": [
            36,
            76
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_integration",
          "docstring": "\u0422\u0435\u0441\u0442 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438",
          "line_range": [
            78,
            87
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_status",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            89,
            112
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": [
            114,
            144
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "check_token": [
          "os.getenv",
          "print"
        ],
        "check_dependencies": [
          "print"
        ],
        "start_bot": [
          "print",
          "check_token",
          "subprocess.Popen",
          "Path.cwd",
          "process.wait",
          "process.terminate",
          "process.kill",
          "check_dependencies"
        ],
        "test_integration": [
          "test_integration",
          "print"
        ],
        "show_status": [
          "print",
          "show_conversation_status",
          "list_recent_messages",
          "status.get",
          "msg.get"
        ],
        "main": [
          "print",
          "show_status",
          "start_bot",
          "len",
          "test_integration"
        ]
      },
      "dependencies": [
        "Path",
        "cursor_simple_integration",
        "list_recent_messages",
        "os",
        "pathlib",
        "requests",
        "show_conversation_status",
        "signal",
        "subprocess",
        "sys",
        "test_integration",
        "time"
      ],
      "hash": null,
      "artifact_id": "239f5eee-7985-4bc4-927c-b18baab07c3c"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_experiments.chat_bot_fastapi_enhanced",
      "path": ".ARCHIVE/archive/telegram_experiments/chat_bot_fastapi_enhanced.py",
      "category": "core",
      "module_doc": "\ud83d\ude80 ENHANCED Telegram Bot \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 FastAPI\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0432\u0430\u0448 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 FastAPI \u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f:\n- \u041a\u0435\u0448\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0447\u0435\u0440\u0435\u0437 WebSocket\n- \u041f\u0430\u043c\u044f\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0447\u0435\u0440\u0435\u0437 API endpoints\n- \u041c\u0435\u0442\u0440\u0438\u043a \u0447\u0435\u0440\u0435\u0437 API\n\n\u0411\u043e\u043b\u044c\u0448\u0435 \u043d\u0438\u043a\u0430\u043a\u0438\u0445 CLI \u0432\u044b\u0437\u043e\u0432\u043e\u0432 - \u0432\u0441\u0435 \u0447\u0435\u0440\u0435\u0437 API!",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": [
            342,
            378
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            35,
            43
          ],
          "parameters": [
            "self",
            "telegram_token",
            "fastapi_base_url"
          ],
          "decorators": []
        },
        {
          "name": "setup_session",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f aiohttp \u0441\u0435\u0441\u0441\u0438\u0438",
          "line_range": [
            45,
            48
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "close_session",
          "docstring": "\u0417\u0430\u043a\u0440\u044b\u0442\u0438\u0435 aiohttp \u0441\u0435\u0441\u0441\u0438\u0438",
          "line_range": [
            50,
            53
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "health_check_api",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 FastAPI \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
          "line_range": [
            55,
            69
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_user_message_via_api",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 FastAPI",
          "line_range": [
            71,
            102
          ],
          "parameters": [
            "self",
            "user_id",
            "username",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "get_user_history_via_api",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 FastAPI",
          "line_range": [
            104,
            122
          ],
          "parameters": [
            "self",
            "user_id",
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "chat_with_ollama_via_api",
          "docstring": "\u0427\u0430\u0442 \u0441 Ollama \u0447\u0435\u0440\u0435\u0437 FastAPI endpoint",
          "line_range": [
            124,
            150
          ],
          "parameters": [
            "self",
            "message",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "get_system_metrics_via_api",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0447\u0435\u0440\u0435\u0437 FastAPI",
          "line_range": [
            152,
            162
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "setup_handlers",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434",
          "line_range": [
            164,
            172
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "start_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
          "line_range": [
            174,
            198
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "memory_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /memory - \u0442\u0435\u0441\u0442 \u043f\u0430\u043c\u044f\u0442\u0438",
          "line_range": [
            200,
            207
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "history_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /history - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0438\u0441\u0442\u043e\u0440\u0438\u044e",
          "line_range": [
            209,
            228
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "health_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /health - \u0441\u0442\u0430\u0442\u0443\u0441 FastAPI",
          "line_range": [
            230,
            237
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "metrics_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /metrics - \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            239,
            269
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "ollama_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /ollama - \u0447\u0430\u0442 \u0441 Ollama",
          "line_range": [
            271,
            289
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
          "line_range": [
            291,
            321
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0431\u043e\u0442\u0430",
          "line_range": [
            323,
            340
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "FastAPIIntegratedBot",
          "docstring": "Telegram \u0431\u043e\u0442 \u0441 \u043f\u043e\u043b\u043d\u043e\u0439 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 FastAPI",
          "line_range": [
            32,
            340
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                35,
                43
              ],
              "parameters": [
                "self",
                "telegram_token",
                "fastapi_base_url"
              ]
            },
            {
              "name": "setup_session",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f aiohttp \u0441\u0435\u0441\u0441\u0438\u0438",
              "line_range": [
                45,
                48
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "close_session",
              "docstring": "\u0417\u0430\u043a\u0440\u044b\u0442\u0438\u0435 aiohttp \u0441\u0435\u0441\u0441\u0438\u0438",
              "line_range": [
                50,
                53
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "health_check_api",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 FastAPI \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
              "line_range": [
                55,
                69
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_user_message_via_api",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 FastAPI",
              "line_range": [
                71,
                102
              ],
              "parameters": [
                "self",
                "user_id",
                "username",
                "message"
              ]
            },
            {
              "name": "get_user_history_via_api",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 FastAPI",
              "line_range": [
                104,
                122
              ],
              "parameters": [
                "self",
                "user_id",
                "limit"
              ]
            },
            {
              "name": "chat_with_ollama_via_api",
              "docstring": "\u0427\u0430\u0442 \u0441 Ollama \u0447\u0435\u0440\u0435\u0437 FastAPI endpoint",
              "line_range": [
                124,
                150
              ],
              "parameters": [
                "self",
                "message",
                "context"
              ]
            },
            {
              "name": "get_system_metrics_via_api",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0447\u0435\u0440\u0435\u0437 FastAPI",
              "line_range": [
                152,
                162
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "setup_handlers",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434",
              "line_range": [
                164,
                172
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "start_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
              "line_range": [
                174,
                198
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "memory_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /memory - \u0442\u0435\u0441\u0442 \u043f\u0430\u043c\u044f\u0442\u0438",
              "line_range": [
                200,
                207
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "history_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /history - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0438\u0441\u0442\u043e\u0440\u0438\u044e",
              "line_range": [
                209,
                228
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "health_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /health - \u0441\u0442\u0430\u0442\u0443\u0441 FastAPI",
              "line_range": [
                230,
                237
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "metrics_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /metrics - \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
              "line_range": [
                239,
                269
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "ollama_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /ollama - \u0447\u0430\u0442 \u0441 Ollama",
              "line_range": [
                271,
                289
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
              "line_range": [
                291,
                321
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "run",
              "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0431\u043e\u0442\u0430",
              "line_range": [
                323,
                340
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.setup_handlers",
          "Application.builder"
        ],
        "setup_session": [
          "aiohttp.ClientSession"
        ],
        "close_session": [],
        "health_check_api": [
          "self.setup_session",
          "resp.json",
          "logger.error",
          "logger.info",
          "data.get"
        ],
        "save_user_message_via_api": [
          "datetime.now",
          "self.setup_session",
          "logger.error",
          "logger.info",
          "logger.warning"
        ],
        "get_user_history_via_api": [
          "self.setup_session",
          "resp.json",
          "logger.error",
          "logger.info",
          "len",
          "logger.warning",
          "data.get"
        ],
        "chat_with_ollama_via_api": [
          "str",
          "self.setup_session",
          "resp.json",
          "logger.error",
          "logger.info",
          "data.get"
        ],
        "get_system_metrics_via_api": [
          "self.setup_session",
          "resp.json",
          "str"
        ],
        "setup_handlers": [
          "MessageHandler",
          "CommandHandler"
        ],
        "start_command": [
          "self.save_user_message_via_api"
        ],
        "memory_command": [
          "self.save_user_message_via_api"
        ],
        "history_command": [
          "int",
          "len",
          "msg.get",
          "self.get_user_history_via_api"
        ],
        "health_command": [
          "self.health_check_api"
        ],
        "metrics_command": [
          "self.get_system_metrics_via_api",
          "system.get",
          "features.get",
          "struct_json.get",
          "metrics.get"
        ],
        "ollama_command": [
          "self.save_user_message_via_api",
          "status_msg.edit_text",
          "self.chat_with_ollama_via_api"
        ],
        "handle_message": [
          "self.save_user_message_via_api",
          "message_text.replace",
          "enumerate",
          "self.chat_with_ollama_via_api",
          "message_text.startswith",
          "msg.get",
          "message_text.lower",
          "self.get_user_history_via_api"
        ],
        "run": [
          "self.health_check_api",
          "logger.error",
          "logger.info",
          "logger.warning",
          "self.close_session"
        ],
        "main": [
          "traceback.print_exc",
          "print",
          "asyncio.new_event_loop",
          "os.getenv",
          "asyncio.get_event_loop",
          "loop.close",
          "bot.run",
          "FastAPIIntegratedBot",
          "exit",
          "asyncio.set_event_loop",
          "loop.run_until_complete"
        ]
      },
      "dependencies": [
        "Application",
        "CommandHandler",
        "ContextTypes",
        "MessageHandler",
        "Update",
        "aiohttp",
        "asyncio",
        "datetime",
        "filters",
        "json",
        "logging",
        "os",
        "telegram",
        "telegram.ext",
        "timedelta",
        "traceback",
        "websockets"
      ],
      "hash": null,
      "artifact_id": "71b7ed69-7c01-449c-b228-fccb962b0814"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.chat_bot_enhanced",
      "path": ".ARCHIVE/archive/telegram_bots/chat_bot_enhanced.py",
      "category": "core",
      "module_doc": "Enhanced LLMStruct Telegram Bot\n- Smart reply detection (reply_to_message support)\n- LLM chain: Ollama \u2192 Grok \u2192 Anthropic\n- Cursor command forwarding to Cursor AI\n- Concise responses by default",
      "functions": [
        {
          "name": "main",
          "docstring": "Main entry point",
          "line_range": [
            439,
            459
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            37,
            68
          ],
          "parameters": [
            "self",
            "token"
          ],
          "decorators": []
        },
        {
          "name": "log_user_message",
          "docstring": "Log user message with reply context",
          "line_range": [
            70,
            83
          ],
          "parameters": [
            "self",
            "user_info",
            "message",
            "message_type",
            "chat_id",
            "reply_to_message"
          ],
          "decorators": []
        },
        {
          "name": "log_cursor_command",
          "docstring": "Log cursor command for processing",
          "line_range": [
            85,
            95
          ],
          "parameters": [
            "self",
            "message",
            "user_info",
            "reply_context"
          ],
          "decorators": []
        },
        {
          "name": "ollama_chat",
          "docstring": "Try Ollama first",
          "line_range": [
            97,
            114
          ],
          "parameters": [
            "self",
            "message",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "grok_chat",
          "docstring": "Fallback to Grok",
          "line_range": [
            116,
            143
          ],
          "parameters": [
            "self",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "anthropic_chat",
          "docstring": "Final fallback to Anthropic",
          "line_range": [
            145,
            173
          ],
          "parameters": [
            "self",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "llm_chain_response",
          "docstring": "LLM chain: Ollama \u2192 Grok \u2192 Anthropic",
          "line_range": [
            175,
            194
          ],
          "parameters": [
            "self",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "setup_handlers",
          "docstring": "Setup bot handlers",
          "line_range": [
            196,
            208
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "start_command",
          "docstring": "Start command handler",
          "line_range": [
            210,
            236
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "help_command",
          "docstring": "Help command",
          "line_range": [
            238,
            260
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "status_command",
          "docstring": "Status command",
          "line_range": [
            262,
            287
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "Handle all text messages with smart routing",
          "line_range": [
            289,
            368
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "run_sync",
          "docstring": "Run bot synchronously with timeout",
          "line_range": [
            370,
            437
          ],
          "parameters": [
            "self",
            "timeout_minutes"
          ],
          "decorators": []
        },
        {
          "name": "signal_handler",
          "docstring": "",
          "line_range": [
            374,
            377
          ],
          "parameters": [
            "signum",
            "frame"
          ],
          "decorators": []
        },
        {
          "name": "run_with_timeout",
          "docstring": "",
          "line_range": [
            396,
            413
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "EnhancedLLMStructChatBot",
          "docstring": "Enhanced Telegram bot with LLM chain and smart reply detection",
          "line_range": [
            34,
            437
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                37,
                68
              ],
              "parameters": [
                "self",
                "token"
              ]
            },
            {
              "name": "log_user_message",
              "docstring": "Log user message with reply context",
              "line_range": [
                70,
                83
              ],
              "parameters": [
                "self",
                "user_info",
                "message",
                "message_type",
                "chat_id",
                "reply_to_message"
              ]
            },
            {
              "name": "log_cursor_command",
              "docstring": "Log cursor command for processing",
              "line_range": [
                85,
                95
              ],
              "parameters": [
                "self",
                "message",
                "user_info",
                "reply_context"
              ]
            },
            {
              "name": "ollama_chat",
              "docstring": "Try Ollama first",
              "line_range": [
                97,
                114
              ],
              "parameters": [
                "self",
                "message",
                "model"
              ]
            },
            {
              "name": "grok_chat",
              "docstring": "Fallback to Grok",
              "line_range": [
                116,
                143
              ],
              "parameters": [
                "self",
                "message"
              ]
            },
            {
              "name": "anthropic_chat",
              "docstring": "Final fallback to Anthropic",
              "line_range": [
                145,
                173
              ],
              "parameters": [
                "self",
                "message"
              ]
            },
            {
              "name": "llm_chain_response",
              "docstring": "LLM chain: Ollama \u2192 Grok \u2192 Anthropic",
              "line_range": [
                175,
                194
              ],
              "parameters": [
                "self",
                "message"
              ]
            },
            {
              "name": "setup_handlers",
              "docstring": "Setup bot handlers",
              "line_range": [
                196,
                208
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "start_command",
              "docstring": "Start command handler",
              "line_range": [
                210,
                236
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "help_command",
              "docstring": "Help command",
              "line_range": [
                238,
                260
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "status_command",
              "docstring": "Status command",
              "line_range": [
                262,
                287
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "Handle all text messages with smart routing",
              "line_range": [
                289,
                368
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "run_sync",
              "docstring": "Run bot synchronously with timeout",
              "line_range": [
                370,
                437
              ],
              "parameters": [
                "self",
                "timeout_minutes"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "logging.getLogger",
          "os.getenv",
          "logging.basicConfig",
          "get_metrics_tracker",
          "track_workflow_event",
          "Bot",
          "os.makedirs"
        ],
        "log_user_message": [
          "datetime.now",
          "user_info.get",
          "open",
          "reply_to_message.get",
          "f.write"
        ],
        "log_cursor_command": [
          "user_info.get",
          "open",
          "f.write",
          "datetime.now"
        ],
        "ollama_chat": [
          "response.json",
          "httpx.AsyncClient",
          "result.get",
          "client.post"
        ],
        "grok_chat": [
          "response.json",
          "httpx.AsyncClient",
          "client.post"
        ],
        "anthropic_chat": [
          "response.json",
          "httpx.AsyncClient",
          "client.post"
        ],
        "llm_chain_response": [
          "self.anthropic_chat",
          "self.grok_chat",
          "self.ollama_chat"
        ],
        "setup_handlers": [
          "MessageHandler",
          "Application.builder",
          "CommandHandler"
        ],
        "start_command": [],
        "help_command": [],
        "status_command": [
          "httpx.AsyncClient",
          "response.json",
          "client.get",
          "status_parts.append",
          "len"
        ],
        "handle_message": [
          "track_task_start",
          "self.log_cursor_command",
          "int",
          "self.log_user_message",
          "self.llm_chain_response",
          "cursor_message.split",
          "text.split",
          "user.to_dict",
          "reply_to_message.get",
          "len",
          "message.reply_text",
          "text.lower",
          "response.split",
          "track_token_usage",
          "track_workflow_event",
          "track_task_complete",
          "time.time"
        ],
        "run_sync": [],
        "signal_handler": [],
        "run_with_timeout": [
          "application.start",
          "time.time",
          "application.initialize",
          "application.shutdown",
          "asyncio.sleep",
          "application.stop"
        ],
        "main": [
          "argparse.ArgumentParser",
          "EnhancedLLMStructChatBot",
          "print",
          "os.getenv",
          "parser.add_argument",
          "parser.parse_args",
          "bot.run_sync"
        ]
      },
      "dependencies": [
        "Any",
        "Application",
        "Bot",
        "CommandHandler",
        "ContextTypes",
        "Dict",
        "MessageHandler",
        "Optional",
        "Update",
        "argparse",
        "asyncio",
        "datetime",
        "filters",
        "get_metrics_tracker",
        "httpx",
        "json",
        "logging",
        "os",
        "signal",
        "src.llmstruct.metrics_tracker",
        "sys",
        "telegram",
        "telegram.ext",
        "time",
        "traceback",
        "track_task_complete",
        "track_task_start",
        "track_token_usage",
        "track_workflow_event",
        "typing"
      ],
      "hash": null,
      "artifact_id": "4250c5ff-70eb-4af9-b70b-58bd27e61bf9"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.cursor_telegram_bridge",
      "path": ".ARCHIVE/archive/telegram_bots/cursor_telegram_bridge.py",
      "category": "core",
      "module_doc": "Cursor \u2194 Telegram Bridge\n\u0427\u0438\u0442\u0430\u0435\u0442 cursor \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0442\u0432\u0435\u0442\u044b \u043e\u0431\u0440\u0430\u0442\u043d\u043e \u0432 Telegram",
      "functions": [
        {
          "name": "main",
          "docstring": "Main entry point",
          "line_range": [
            218,
            226
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            24,
            36
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "send_telegram_message",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 Telegram",
          "line_range": [
            38,
            62
          ],
          "parameters": [
            "self",
            "text",
            "parse_mode"
          ],
          "decorators": []
        },
        {
          "name": "process_cursor_command",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c cursor \u043a\u043e\u043c\u0430\u043d\u0434\u0443",
          "line_range": [
            64,
            85
          ],
          "parameters": [
            "self",
            "command_data"
          ],
          "decorators": []
        },
        {
          "name": "simulate_cursor_processing",
          "docstring": "\u0421\u0438\u043c\u0443\u043b\u044f\u0446\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043a\u043e\u043c\u0430\u043d\u0434s Cursor AI",
          "line_range": [
            87,
            175
          ],
          "parameters": [
            "self",
            "command",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "handle_cursor_command",
          "docstring": "Handle cursor command (sync wrapper)",
          "line_range": [
            177,
            188
          ],
          "parameters": [
            "self",
            "command_data"
          ],
          "decorators": []
        },
        {
          "name": "start_bridge",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c bridge",
          "line_range": [
            190,
            216
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CursorTelegramBridge",
          "docstring": "Bridge \u043c\u0435\u0436\u0434\u0443 cursor \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c\u0438 \u0438 Telegram \u043e\u0442\u0432\u0435\u0442\u0430\u043c\u0438",
          "line_range": [
            21,
            216
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                24,
                36
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "send_telegram_message",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 Telegram",
              "line_range": [
                38,
                62
              ],
              "parameters": [
                "self",
                "text",
                "parse_mode"
              ]
            },
            {
              "name": "process_cursor_command",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c cursor \u043a\u043e\u043c\u0430\u043d\u0434\u0443",
              "line_range": [
                64,
                85
              ],
              "parameters": [
                "self",
                "command_data"
              ]
            },
            {
              "name": "simulate_cursor_processing",
              "docstring": "\u0421\u0438\u043c\u0443\u043b\u044f\u0446\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043a\u043e\u043c\u0430\u043d\u0434s Cursor AI",
              "line_range": [
                87,
                175
              ],
              "parameters": [
                "self",
                "command",
                "context"
              ]
            },
            {
              "name": "handle_cursor_command",
              "docstring": "Handle cursor command (sync wrapper)",
              "line_range": [
                177,
                188
              ],
              "parameters": [
                "self",
                "command_data"
              ]
            },
            {
              "name": "start_bridge",
              "docstring": "\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c bridge",
              "line_range": [
                190,
                216
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "EnhancedCursorTelegramReader",
          "os.getenv"
        ],
        "send_telegram_message": [
          "httpx.AsyncClient",
          "client.post",
          "print"
        ],
        "process_cursor_command": [
          "command_data.get",
          "print",
          "result.get",
          "self.simulate_cursor_processing",
          "self.send_telegram_message"
        ],
        "simulate_cursor_processing": [
          "command.lower",
          "len",
          "asyncio.sleep",
          "any"
        ],
        "handle_cursor_command": [
          "self.process_cursor_command",
          "asyncio.run",
          "print"
        ],
        "start_bridge": [
          "asyncio.run",
          "self.send_telegram_message",
          "print"
        ],
        "main": [
          "CursorTelegramBridge",
          "os.getenv",
          "bridge.start_bridge",
          "print"
        ]
      },
      "dependencies": [
        "Dict",
        "EnhancedCursorTelegramReader",
        "Optional",
        "asyncio",
        "cursor_telegram_reader_enhanced",
        "datetime",
        "httpx",
        "json",
        "os",
        "sys",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "b7dd804d-d063-453a-b852-406bdf2b6479"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.test_bot_quick",
      "path": ".ARCHIVE/archive/telegram_bots/test_bot_quick.py",
      "category": "test",
      "module_doc": "\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0442\u0435\u0441\u0442 Telegram \u0431\u043e\u0442\u0430 \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0441\u0432\u044f\u0437\u0438",
      "functions": [
        {
          "name": "start_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
          "line_range": [
            25,
            30
          ],
          "parameters": [
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
          "line_range": [
            32,
            38
          ],
          "parameters": [
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": [
            40,
            58
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "start_command": [],
        "handle_message": [],
        "main": [
          "Application.builder",
          "MessageHandler",
          "application.add_handler",
          "logger.error",
          "logger.info",
          "application.run_polling",
          "CommandHandler"
        ]
      },
      "dependencies": [
        "Application",
        "CommandHandler",
        "ContextTypes",
        "MessageHandler",
        "Update",
        "filters",
        "logging",
        "os",
        "telegram",
        "telegram.ext"
      ],
      "hash": null,
      "artifact_id": "368332a0-caf2-40b5-8bf2-715580b9a2c2"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.start_ollama_bot",
      "path": ".ARCHIVE/archive/telegram_bots/start_ollama_bot.py",
      "category": "core",
      "module_doc": "Quick launcher for Ollama Chat Bot",
      "functions": [
        {
          "name": "check_dependencies",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438",
          "line_range": [
            11,
            25
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "check_services",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u044c \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432",
          "line_range": [
            27,
            65
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": [
            67,
            118
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "check_ollama",
          "docstring": "",
          "line_range": [
            36,
            51
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "check_dependencies": [
          "__import__",
          "print"
        ],
        "check_services": [
          "print"
        ],
        "check_ollama": [
          "httpx.AsyncClient",
          "print",
          "response.json",
          "client.get",
          "len"
        ],
        "main": [
          "print",
          "Path",
          "Path.cwd",
          "os.getenv",
          "subprocess.run",
          "check_services",
          "check_dependencies"
        ]
      },
      "dependencies": [
        "Path",
        "asyncio",
        "httpx",
        "os",
        "pathlib",
        "subprocess",
        "sys"
      ],
      "hash": null,
      "artifact_id": "b686bee2-7bec-4713-a2ca-37555d5ff290"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.ollama_chat_bot",
      "path": ".ARCHIVE/archive/telegram_bots/ollama_chat_bot.py",
      "category": "core",
      "module_doc": "LLMStruct Ollama Chat Bot\n\u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0439 \u0431\u043e\u0442 \u0441 \u041e\u043b\u043b\u0430\u043c\u043e\u0439, fallback \u043d\u0430 \u0413\u0440\u043e\u043a/\u0410\u043d\u0442\u0440\u043e\u043f\u0438\u043a, \u043f\u0430\u043c\u044f\u0442\u044c\u044e \u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u043e\u043c \u043a \u0444\u0430\u0439\u043b\u0430\u043c",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0422\u043e\u0447\u043a\u0430 \u0432\u0445\u043e\u0434\u0430",
          "line_range": [
            646,
            668
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            53,
            57
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "chat_with_ollama",
          "docstring": "\u041e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441 Ollama",
          "line_range": [
            59,
            83
          ],
          "parameters": [
            "self",
            "messages",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "chat_with_grok",
          "docstring": "Fallback \u043d\u0430 Grok",
          "line_range": [
            85,
            110
          ],
          "parameters": [
            "self",
            "messages"
          ],
          "decorators": []
        },
        {
          "name": "chat_with_anthropic",
          "docstring": "Fallback \u043d\u0430 Anthropic",
          "line_range": [
            112,
            153
          ],
          "parameters": [
            "self",
            "messages"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            158,
            159
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "read_file",
          "docstring": "\u0427\u0438\u0442\u0430\u0435\u0442 \u0444\u0430\u0439\u043b \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e",
          "line_range": [
            161,
            189
          ],
          "parameters": [
            "self",
            "file_path",
            "max_lines"
          ],
          "decorators": []
        },
        {
          "name": "list_directory",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438",
          "line_range": [
            191,
            223
          ],
          "parameters": [
            "self",
            "dir_path"
          ],
          "decorators": []
        },
        {
          "name": "run_cli_command",
          "docstring": "\u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 CLI \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            225,
            269
          ],
          "parameters": [
            "self",
            "command"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            274,
            284
          ],
          "parameters": [
            "self",
            "storage_dir"
          ],
          "decorators": []
        },
        {
          "name": "_load_data",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0444\u0430\u0439\u043b\u043e\u0432",
          "line_range": [
            286,
            315
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_data",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435",
          "line_range": [
            317,
            341
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_or_create_session",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0438\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0441\u0435\u0441\u0441\u0438\u044e",
          "line_range": [
            343,
            360
          ],
          "parameters": [
            "self",
            "chat_id",
            "user_id",
            "user_name"
          ],
          "decorators": []
        },
        {
          "name": "add_message",
          "docstring": "\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 \u0441\u0435\u0441\u0441\u0438\u044e",
          "line_range": [
            362,
            380
          ],
          "parameters": [
            "self",
            "session",
            "role",
            "content",
            "model_used"
          ],
          "decorators": []
        },
        {
          "name": "get_conversation_context",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u0430 \u0434\u043b\u044f LLM",
          "line_range": [
            382,
            394
          ],
          "parameters": [
            "self",
            "session",
            "max_messages"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            399,
            408
          ],
          "parameters": [
            "self",
            "bot_token"
          ],
          "decorators": []
        },
        {
          "name": "send_message",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 Telegram",
          "line_range": [
            410,
            420
          ],
          "parameters": [
            "self",
            "chat_id",
            "text",
            "parse_mode"
          ],
          "decorators": []
        },
        {
          "name": "_send_single_message",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0434\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435",
          "line_range": [
            422,
            438
          ],
          "parameters": [
            "self",
            "chat_id",
            "text",
            "parse_mode"
          ],
          "decorators": []
        },
        {
          "name": "get_updates",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u0442 Telegram",
          "line_range": [
            440,
            455
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "send_task_report",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0442\u0447\u0435\u0442 \u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0447\u0430\u0442 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430",
          "line_range": [
            457,
            472
          ],
          "parameters": [
            "self",
            "task_description",
            "status",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "chat_with_ai",
          "docstring": "\u041e\u0431\u0449\u0430\u0435\u0442\u0441\u044f \u0441 AI (Ollama + fallback)",
          "line_range": [
            474,
            506
          ],
          "parameters": [
            "self",
            "session",
            "user_message"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435",
          "line_range": [
            508,
            621
          ],
          "parameters": [
            "self",
            "update"
          ],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0446\u0438\u043a\u043b \u0431\u043e\u0442\u0430",
          "line_range": [
            623,
            644
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ChatMessage",
          "docstring": "",
          "line_range": [
            31,
            36
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ChatSession",
          "docstring": "",
          "line_range": [
            39,
            48
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ModelManager",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 LLM \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430\u043c\u0438",
          "line_range": [
            50,
            153
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                53,
                57
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "chat_with_ollama",
              "docstring": "\u041e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441 Ollama",
              "line_range": [
                59,
                83
              ],
              "parameters": [
                "self",
                "messages",
                "model"
              ]
            },
            {
              "name": "chat_with_grok",
              "docstring": "Fallback \u043d\u0430 Grok",
              "line_range": [
                85,
                110
              ],
              "parameters": [
                "self",
                "messages"
              ]
            },
            {
              "name": "chat_with_anthropic",
              "docstring": "Fallback \u043d\u0430 Anthropic",
              "line_range": [
                112,
                153
              ],
              "parameters": [
                "self",
                "messages"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "FileManager",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u043e\u043c \u043a \u0444\u0430\u0439\u043b\u0430\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0447\u0435\u0440\u0435\u0437 CLI",
          "line_range": [
            155,
            269
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                158,
                159
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "read_file",
              "docstring": "\u0427\u0438\u0442\u0430\u0435\u0442 \u0444\u0430\u0439\u043b \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e",
              "line_range": [
                161,
                189
              ],
              "parameters": [
                "self",
                "file_path",
                "max_lines"
              ]
            },
            {
              "name": "list_directory",
              "docstring": "\u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438",
              "line_range": [
                191,
                223
              ],
              "parameters": [
                "self",
                "dir_path"
              ]
            },
            {
              "name": "run_cli_command",
              "docstring": "\u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 CLI \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
              "line_range": [
                225,
                269
              ],
              "parameters": [
                "self",
                "command"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "MemoryManager",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u0430\u043c\u044f\u0442\u044c\u044e \u0438 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043e\u043c \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u043e\u0432",
          "line_range": [
            271,
            394
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                274,
                284
              ],
              "parameters": [
                "self",
                "storage_dir"
              ]
            },
            {
              "name": "_load_data",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0444\u0430\u0439\u043b\u043e\u0432",
              "line_range": [
                286,
                315
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_data",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435",
              "line_range": [
                317,
                341
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_or_create_session",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0438\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0441\u0435\u0441\u0441\u0438\u044e",
              "line_range": [
                343,
                360
              ],
              "parameters": [
                "self",
                "chat_id",
                "user_id",
                "user_name"
              ]
            },
            {
              "name": "add_message",
              "docstring": "\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 \u0441\u0435\u0441\u0441\u0438\u044e",
              "line_range": [
                362,
                380
              ],
              "parameters": [
                "self",
                "session",
                "role",
                "content",
                "model_used"
              ]
            },
            {
              "name": "get_conversation_context",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u0430 \u0434\u043b\u044f LLM",
              "line_range": [
                382,
                394
              ],
              "parameters": [
                "self",
                "session",
                "max_messages"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "OllamaChatBot",
          "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043a\u043b\u0430\u0441\u0441 Telegram \u0431\u043e\u0442\u0430",
          "line_range": [
            396,
            644
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                399,
                408
              ],
              "parameters": [
                "self",
                "bot_token"
              ]
            },
            {
              "name": "send_message",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 Telegram",
              "line_range": [
                410,
                420
              ],
              "parameters": [
                "self",
                "chat_id",
                "text",
                "parse_mode"
              ]
            },
            {
              "name": "_send_single_message",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0434\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435",
              "line_range": [
                422,
                438
              ],
              "parameters": [
                "self",
                "chat_id",
                "text",
                "parse_mode"
              ]
            },
            {
              "name": "get_updates",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u0442 Telegram",
              "line_range": [
                440,
                455
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "send_task_report",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0442\u0447\u0435\u0442 \u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0447\u0430\u0442 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430",
              "line_range": [
                457,
                472
              ],
              "parameters": [
                "self",
                "task_description",
                "status",
                "details"
              ]
            },
            {
              "name": "chat_with_ai",
              "docstring": "\u041e\u0431\u0449\u0430\u0435\u0442\u0441\u044f \u0441 AI (Ollama + fallback)",
              "line_range": [
                474,
                506
              ],
              "parameters": [
                "self",
                "session",
                "user_message"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435",
              "line_range": [
                508,
                621
              ],
              "parameters": [
                "self",
                "update"
              ]
            },
            {
              "name": "run",
              "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0446\u0438\u043a\u043b \u0431\u043e\u0442\u0430",
              "line_range": [
                623,
                644
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "logger.info",
          "ModelManager",
          "FileManager",
          "MemoryManager"
        ],
        "chat_with_ollama": [
          "httpx.AsyncClient",
          "response.json",
          "result.get",
          "logger.error",
          "client.post"
        ],
        "chat_with_grok": [
          "response.json",
          "httpx.AsyncClient",
          "logger.error",
          "client.post"
        ],
        "chat_with_anthropic": [
          "httpx.AsyncClient",
          "response.json",
          "logger.error",
          "client.post",
          "user_messages.append"
        ],
        "read_file": [
          "full_path.is_dir",
          "f.readlines",
          "str",
          "open",
          "len",
          "full_path.exists"
        ],
        "list_directory": [
          "full_path.iterdir",
          "item.stat",
          "full_path.is_dir",
          "str",
          "sorted",
          "item.is_dir",
          "len",
          "full_path.exists",
          "items.append"
        ],
        "run_cli_command": [
          "safe_commands.keys",
          "str",
          "subprocess.run",
          "command.split",
          "len"
        ],
        "_load_data": [
          "ChatMessage",
          "json.load",
          "open",
          "logger.error",
          "session_data.get",
          "logger.info",
          "data.values",
          "len",
          "ChatSession"
        ],
        "_save_data": [
          "open",
          "logger.error",
          "json.dump",
          "asdict"
        ],
        "get_or_create_session": [
          "ChatSession",
          "datetime.now"
        ],
        "add_message": [
          "ChatMessage",
          "len",
          "self._save_data",
          "datetime.now"
        ],
        "get_conversation_context": [
          "context.append"
        ],
        "send_message": [
          "self._send_single_message",
          "range",
          "len",
          "enumerate"
        ],
        "_send_single_message": [
          "response.json",
          "httpx.AsyncClient",
          "logger.error",
          "client.post"
        ],
        "get_updates": [
          "response.json",
          "httpx.AsyncClient",
          "logger.error",
          "client.get"
        ],
        "send_task_report": [
          "logger.info",
          "datetime.now",
          "self.send_message"
        ],
        "chat_with_ai": [
          "logger.info",
          "context.append"
        ],
        "handle_message": [
          "update.get",
          "self.send_message",
          "self.chat_with_ai",
          "logger.info",
          "message.get",
          "len",
          "text.startswith"
        ],
        "run": [
          "logger.error",
          "logger.info",
          "self.get_updates",
          "self.handle_message",
          "updates.get",
          "asyncio.sleep"
        ],
        "main": [
          "OllamaChatBot",
          "print",
          "bot.send_task_report",
          "Path",
          "os.getenv",
          "bot.run"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "asdict",
        "asyncio",
        "dataclass",
        "dataclasses",
        "datetime",
        "httpx",
        "json",
        "logging",
        "os",
        "pathlib",
        "subprocess",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "396c4f13-cd82-40b8-8bfc-7d526e67c410"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.demo_bot_features",
      "path": ".ARCHIVE/archive/telegram_bots/demo_bot_features.py",
      "category": "core",
      "module_doc": "\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 Ollama Chat Bot",
      "functions": [
        {
          "name": "demo_task_reporting",
          "docstring": "\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043e\u0442\u0447\u0435\u0442\u043e\u0432",
          "line_range": [
            9,
            57
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_bot_commands",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043a\u043e\u043c\u0430\u043d\u0434 \u0431\u043e\u0442\u0430",
          "line_range": [
            59,
            78
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_architecture",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0443 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            80,
            106
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u0438",
          "line_range": [
            108,
            125
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "demo_task_reporting": [
          "report_started",
          "report_progress",
          "report_completed",
          "print",
          "time.sleep"
        ],
        "show_bot_commands": [
          "print"
        ],
        "show_architecture": [
          "print"
        ],
        "main": [
          "show_architecture",
          "demo_task_reporting",
          "show_bot_commands",
          "print"
        ]
      },
      "dependencies": [
        "cursor_reporter",
        "report_completed",
        "report_progress",
        "report_started",
        "time"
      ],
      "hash": null,
      "artifact_id": "f9c6124a-87ea-4a60-9bdb-0641c4d7ed9e"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.cursor_reporter",
      "path": ".ARCHIVE/archive/telegram_bots/cursor_reporter.py",
      "category": "core",
      "module_doc": "Cursor Task Reporter\n\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u043e\u0442\u0447\u0435\u0442\u043e\u0432 \u043e \u0437\u0430\u0434\u0430\u0447\u0430\u0445 \u0432 Telegram",
      "functions": [
        {
          "name": "report_task_started",
          "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e \u043d\u0430\u0447\u0430\u043b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            93,
            96
          ],
          "parameters": [
            "task",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "report_task_progress",
          "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0435 \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            98,
            101
          ],
          "parameters": [
            "task",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "report_task_completed",
          "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            103,
            106
          ],
          "parameters": [
            "task",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "report_task_failed",
          "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e\u0431 \u043e\u0448\u0438\u0431\u043a\u0435 \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            108,
            111
          ],
          "parameters": [
            "task",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "report_started",
          "docstring": "\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f - \u043e\u0442\u0447\u0435\u0442 \u043e \u043d\u0430\u0447\u0430\u043b\u0435",
          "line_range": [
            114,
            116
          ],
          "parameters": [
            "task",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "report_progress",
          "docstring": "\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f - \u043e\u0442\u0447\u0435\u0442 \u043e \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0435",
          "line_range": [
            118,
            120
          ],
          "parameters": [
            "task",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "report_completed",
          "docstring": "\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f - \u043e\u0442\u0447\u0435\u0442 \u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0438",
          "line_range": [
            122,
            124
          ],
          "parameters": [
            "task",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "report_failed",
          "docstring": "\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f - \u043e\u0442\u0447\u0435\u0442 \u043e\u0431 \u043e\u0448\u0438\u0431\u043a\u0435",
          "line_range": [
            126,
            128
          ],
          "parameters": [
            "task",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            16,
            21
          ],
          "parameters": [
            "self",
            "bot_token",
            "chat_id"
          ],
          "decorators": []
        },
        {
          "name": "send_report",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0442\u0447\u0435\u0442 \u043e \u0437\u0430\u0434\u0430\u0447\u0435",
          "line_range": [
            23,
            90
          ],
          "parameters": [
            "self",
            "task",
            "status",
            "details",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "escape_markdown",
          "docstring": "\u042d\u043a\u0440\u0430\u043d\u0438\u0440\u0443\u0435\u0442 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b Markdown",
          "line_range": [
            48,
            53
          ],
          "parameters": [
            "text"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CursorReporter",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0442\u0447\u0435\u0442\u044b \u043e \u0437\u0430\u0434\u0430\u0447\u0430\u0445 \u0432 Telegram",
          "line_range": [
            13,
            90
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                16,
                21
              ],
              "parameters": [
                "self",
                "bot_token",
                "chat_id"
              ]
            },
            {
              "name": "send_report",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0442\u0447\u0435\u0442 \u043e \u0437\u0430\u0434\u0430\u0447\u0435",
              "line_range": [
                23,
                90
              ],
              "parameters": [
                "self",
                "task",
                "status",
                "details",
                "priority"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "ValueError",
          "os.getenv"
        ],
        "send_report": [
          "priority.lower",
          "priority_emojis.get",
          "status.lower",
          "status_emojis.get"
        ],
        "escape_markdown": [
          "text.replace"
        ],
        "report_task_started": [
          "reporter.send_report",
          "CursorReporter"
        ],
        "report_task_progress": [
          "reporter.send_report",
          "CursorReporter"
        ],
        "report_task_completed": [
          "reporter.send_report",
          "CursorReporter"
        ],
        "report_task_failed": [
          "reporter.send_report",
          "CursorReporter"
        ],
        "report_started": [
          "report_task_started",
          "asyncio.run"
        ],
        "report_progress": [
          "asyncio.run",
          "report_task_progress"
        ],
        "report_completed": [
          "asyncio.run",
          "report_task_completed"
        ],
        "report_failed": [
          "report_task_failed",
          "asyncio.run"
        ]
      },
      "dependencies": [
        "Optional",
        "asyncio",
        "datetime",
        "httpx",
        "os",
        "typing"
      ],
      "hash": null,
      "artifact_id": "78da147a-58a3-4445-8702-aff8871a3cec"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.ollama_api_bot",
      "path": ".ARCHIVE/archive/telegram_bots/ollama_api_bot.py",
      "category": "core",
      "module_doc": "Ollama Chat Bot \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0439 FastAPI API \u0432\u043c\u0435\u0441\u0442\u043e CLI\n\u0411\u043e\u043b\u0435\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0439 API \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043e\u0439",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": [
            468,
            487
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            50,
            52
          ],
          "parameters": [
            "self",
            "api_base_url"
          ],
          "decorators": []
        },
        {
          "name": "__aenter__",
          "docstring": "",
          "line_range": [
            54,
            56
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__aexit__",
          "docstring": "",
          "line_range": [
            58,
            60
          ],
          "parameters": [
            "self",
            "exc_type",
            "exc_val",
            "exc_tb"
          ],
          "decorators": []
        },
        {
          "name": "health_check",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0437\u0434\u043e\u0440\u043e\u0432\u044c\u044f API",
          "line_range": [
            62,
            65
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "system_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            67,
            70
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "chat_message",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 \u0447\u0430\u0442 \u0447\u0435\u0440\u0435\u0437 API",
          "line_range": [
            72,
            80
          ],
          "parameters": [
            "self",
            "message",
            "context_mode",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "execute_cli_command",
          "docstring": "\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 CLI \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0447\u0435\u0440\u0435\u0437 API",
          "line_range": [
            82,
            89
          ],
          "parameters": [
            "self",
            "command",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "get_metrics",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a",
          "line_range": [
            91,
            94
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            99,
            101
          ],
          "parameters": [
            "self",
            "api_client"
          ],
          "decorators": []
        },
        {
          "name": "chat_with_ollama",
          "docstring": "\u041e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441 Ollama \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u044f\u043c\u043e\u0439 API",
          "line_range": [
            103,
            121
          ],
          "parameters": [
            "self",
            "messages",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "chat_with_api_fallback",
          "docstring": "Fallback \u0447\u0435\u0440\u0435\u0437 FastAPI \u0447\u0430\u0442",
          "line_range": [
            123,
            130
          ],
          "parameters": [
            "self",
            "message",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            135,
            137
          ],
          "parameters": [
            "self",
            "api_client"
          ],
          "decorators": []
        },
        {
          "name": "read_file",
          "docstring": "\u0427\u0442\u0435\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430 \u0447\u0435\u0440\u0435\u0437 API \u043a\u043e\u043c\u0430\u043d\u0434\u044b",
          "line_range": [
            139,
            147
          ],
          "parameters": [
            "self",
            "file_path",
            "max_lines"
          ],
          "decorators": []
        },
        {
          "name": "get_system_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            149,
            162
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            167,
            175
          ],
          "parameters": [
            "self",
            "storage_dir",
            "api_client"
          ],
          "decorators": []
        },
        {
          "name": "_load_data",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0441\u0435\u0441\u0441\u0438\u0439 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            177,
            189
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_data",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0435\u0441\u0441\u0438\u0439 \u0432 \u0444\u0430\u0439\u043b",
          "line_range": [
            191,
            208
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_or_create_session",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0435\u0441\u0441\u0438\u0438",
          "line_range": [
            210,
            227
          ],
          "parameters": [
            "self",
            "chat_id",
            "user_id",
            "user_name"
          ],
          "decorators": []
        },
        {
          "name": "add_message",
          "docstring": "\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 \u0441\u0435\u0441\u0441\u0438\u044e",
          "line_range": [
            229,
            246
          ],
          "parameters": [
            "self",
            "session",
            "role",
            "content",
            "model_used"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            251,
            264
          ],
          "parameters": [
            "self",
            "bot_token",
            "api_base_url"
          ],
          "decorators": []
        },
        {
          "name": "_signal_handler",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0441\u0438\u0433\u043d\u0430\u043b\u043e\u0432 \u0434\u043b\u044f graceful shutdown",
          "line_range": [
            266,
            269
          ],
          "parameters": [
            "self",
            "signum",
            "frame"
          ],
          "decorators": []
        },
        {
          "name": "send_message",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 Telegram",
          "line_range": [
            271,
            284
          ],
          "parameters": [
            "self",
            "chat_id",
            "text",
            "parse_mode"
          ],
          "decorators": []
        },
        {
          "name": "get_updates",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439 \u043e\u0442 Telegram",
          "line_range": [
            286,
            295
          ],
          "parameters": [
            "self",
            "offset"
          ],
          "decorators": []
        },
        {
          "name": "chat_with_ai",
          "docstring": "\u041e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441 AI \u0447\u0435\u0440\u0435\u0437 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 API",
          "line_range": [
            297,
            321
          ],
          "parameters": [
            "self",
            "session",
            "user_message"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f",
          "line_range": [
            323,
            361
          ],
          "parameters": [
            "self",
            "update"
          ],
          "decorators": []
        },
        {
          "name": "handle_command",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434 \u0431\u043e\u0442\u0430",
          "line_range": [
            363,
            431
          ],
          "parameters": [
            "self",
            "chat_id",
            "command",
            "session"
          ],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0431\u043e\u0442\u0430",
          "line_range": [
            433,
            466
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ChatMessage",
          "docstring": "",
          "line_range": [
            28,
            33
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ChatSession",
          "docstring": "",
          "line_range": [
            36,
            45
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "APIClient",
          "docstring": "\u041a\u043b\u0438\u0435\u043d\u0442 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 FastAPI \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c",
          "line_range": [
            47,
            94
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                50,
                52
              ],
              "parameters": [
                "self",
                "api_base_url"
              ]
            },
            {
              "name": "__aenter__",
              "docstring": "",
              "line_range": [
                54,
                56
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "__aexit__",
              "docstring": "",
              "line_range": [
                58,
                60
              ],
              "parameters": [
                "self",
                "exc_type",
                "exc_val",
                "exc_tb"
              ]
            },
            {
              "name": "health_check",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0437\u0434\u043e\u0440\u043e\u0432\u044c\u044f API",
              "line_range": [
                62,
                65
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "system_status",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
              "line_range": [
                67,
                70
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "chat_message",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 \u0447\u0430\u0442 \u0447\u0435\u0440\u0435\u0437 API",
              "line_range": [
                72,
                80
              ],
              "parameters": [
                "self",
                "message",
                "context_mode",
                "session_id"
              ]
            },
            {
              "name": "execute_cli_command",
              "docstring": "\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 CLI \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0447\u0435\u0440\u0435\u0437 API",
              "line_range": [
                82,
                89
              ],
              "parameters": [
                "self",
                "command",
                "args"
              ]
            },
            {
              "name": "get_metrics",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a",
              "line_range": [
                91,
                94
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "ModelManager",
          "docstring": "\u041c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 LLM \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0441 API \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439",
          "line_range": [
            96,
            130
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                99,
                101
              ],
              "parameters": [
                "self",
                "api_client"
              ]
            },
            {
              "name": "chat_with_ollama",
              "docstring": "\u041e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441 Ollama \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u044f\u043c\u043e\u0439 API",
              "line_range": [
                103,
                121
              ],
              "parameters": [
                "self",
                "messages",
                "model"
              ]
            },
            {
              "name": "chat_with_api_fallback",
              "docstring": "Fallback \u0447\u0435\u0440\u0435\u0437 FastAPI \u0447\u0430\u0442",
              "line_range": [
                123,
                130
              ],
              "parameters": [
                "self",
                "message",
                "session_id"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "FileManager",
          "docstring": "\u041c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u0444\u0430\u0439\u043b\u043e\u0432 \u0447\u0435\u0440\u0435\u0437 API",
          "line_range": [
            132,
            162
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                135,
                137
              ],
              "parameters": [
                "self",
                "api_client"
              ]
            },
            {
              "name": "read_file",
              "docstring": "\u0427\u0442\u0435\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430 \u0447\u0435\u0440\u0435\u0437 API \u043a\u043e\u043c\u0430\u043d\u0434\u044b",
              "line_range": [
                139,
                147
              ],
              "parameters": [
                "self",
                "file_path",
                "max_lines"
              ]
            },
            {
              "name": "get_system_status",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
              "line_range": [
                149,
                162
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "MemoryManager",
          "docstring": "\u041c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u043f\u0430\u043c\u044f\u0442\u0438 \u0441 API \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439",
          "line_range": [
            164,
            246
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                167,
                175
              ],
              "parameters": [
                "self",
                "storage_dir",
                "api_client"
              ]
            },
            {
              "name": "_load_data",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0441\u0435\u0441\u0441\u0438\u0439 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430",
              "line_range": [
                177,
                189
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_data",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0435\u0441\u0441\u0438\u0439 \u0432 \u0444\u0430\u0439\u043b",
              "line_range": [
                191,
                208
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_or_create_session",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0435\u0441\u0441\u0438\u0438",
              "line_range": [
                210,
                227
              ],
              "parameters": [
                "self",
                "chat_id",
                "user_id",
                "user_name"
              ]
            },
            {
              "name": "add_message",
              "docstring": "\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 \u0441\u0435\u0441\u0441\u0438\u044e",
              "line_range": [
                229,
                246
              ],
              "parameters": [
                "self",
                "session",
                "role",
                "content",
                "model_used"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "OllamaAPIBot",
          "docstring": "Telegram \u0431\u043e\u0442 \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 FastAPI",
          "line_range": [
            248,
            466
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                251,
                264
              ],
              "parameters": [
                "self",
                "bot_token",
                "api_base_url"
              ]
            },
            {
              "name": "_signal_handler",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0441\u0438\u0433\u043d\u0430\u043b\u043e\u0432 \u0434\u043b\u044f graceful shutdown",
              "line_range": [
                266,
                269
              ],
              "parameters": [
                "self",
                "signum",
                "frame"
              ]
            },
            {
              "name": "send_message",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 Telegram",
              "line_range": [
                271,
                284
              ],
              "parameters": [
                "self",
                "chat_id",
                "text",
                "parse_mode"
              ]
            },
            {
              "name": "get_updates",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439 \u043e\u0442 Telegram",
              "line_range": [
                286,
                295
              ],
              "parameters": [
                "self",
                "offset"
              ]
            },
            {
              "name": "chat_with_ai",
              "docstring": "\u041e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441 AI \u0447\u0435\u0440\u0435\u0437 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 API",
              "line_range": [
                297,
                321
              ],
              "parameters": [
                "self",
                "session",
                "user_message"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f",
              "line_range": [
                323,
                361
              ],
              "parameters": [
                "self",
                "update"
              ]
            },
            {
              "name": "handle_command",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434 \u0431\u043e\u0442\u0430",
              "line_range": [
                363,
                431
              ],
              "parameters": [
                "self",
                "chat_id",
                "command",
                "session"
              ]
            },
            {
              "name": "run",
              "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a \u0431\u043e\u0442\u0430",
              "line_range": [
                433,
                466
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "logging.getLogger",
          "signal.signal",
          "MemoryManager"
        ],
        "__aenter__": [
          "aiohttp.ClientSession"
        ],
        "__aexit__": [],
        "health_check": [
          "response.json"
        ],
        "system_status": [
          "response.json"
        ],
        "chat_message": [
          "response.json"
        ],
        "execute_cli_command": [
          "response.json"
        ],
        "get_metrics": [
          "response.json"
        ],
        "chat_with_ollama": [
          "response.json",
          "aiohttp.ClientSession",
          "session.post",
          "logging.error"
        ],
        "chat_with_api_fallback": [
          "result.get",
          "logging.error"
        ],
        "read_file": [
          "result.get"
        ],
        "get_system_status": [],
        "_load_data": [
          "ChatMessage",
          "json.load",
          "open",
          "logging.error",
          "data.get",
          "ChatSession"
        ],
        "_save_data": [
          "datetime.now",
          "open",
          "json.dump",
          "sessions_data.append",
          "logging.error",
          "asdict"
        ],
        "get_or_create_session": [
          "datetime.now",
          "ChatSession"
        ],
        "add_message": [
          "ChatMessage",
          "self._save_data",
          "datetime.now",
          "len",
          "content.split"
        ],
        "_signal_handler": [],
        "send_message": [
          "response.json",
          "aiohttp.ClientSession",
          "session.post"
        ],
        "get_updates": [
          "response.json",
          "session.get",
          "aiohttp.ClientSession"
        ],
        "chat_with_ai": [
          "messages.append",
          "ModelManager",
          "model_manager.chat_with_ollama",
          "model_manager.chat_with_api_fallback"
        ],
        "handle_message": [
          "update.get",
          "self.send_message",
          "self.chat_with_ai",
          "locals",
          "message.get",
          "self.handle_command",
          "text.startswith"
        ],
        "handle_command": [
          "len",
          "FileManager",
          "file_manager.get_system_status",
          "self.send_message"
        ],
        "run": [
          "APIClient",
          "self.get_updates",
          "self.handle_message",
          "updates.get",
          "asyncio.sleep"
        ],
        "main": [
          "OllamaAPIBot",
          "print",
          "os.getenv",
          "bot.run",
          "logging.error",
          "logging.info"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "aiohttp",
        "asdict",
        "asyncio",
        "dataclass",
        "dataclasses",
        "datetime",
        "json",
        "logging",
        "os",
        "signal",
        "typing"
      ],
      "hash": null,
      "artifact_id": "8429e426-7354-4c94-ba25-9a5d0918f35a"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.start_api_bot",
      "path": ".ARCHIVE/archive/telegram_bots/start_api_bot.py",
      "category": "core",
      "module_doc": "\u041b\u0430\u0443\u043d\u0447\u0435\u0440 \u0434\u043b\u044f Ollama API Bot \u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430\u043c\u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u0438 API",
      "functions": [
        {
          "name": "check_environment",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f",
          "line_range": [
            13,
            30
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "check_api_server",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 FastAPI \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
          "line_range": [
            32,
            53
          ],
          "parameters": [
            "api_url"
          ],
          "decorators": []
        },
        {
          "name": "check_ollama",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 Ollama",
          "line_range": [
            55,
            77
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "check_dependencies",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 Python \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439",
          "line_range": [
            79,
            99
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "start_api_server",
          "docstring": "\u041f\u043e\u043f\u044b\u0442\u043a\u0430 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 API \u0441\u0435\u0440\u0432\u0435\u0440\u0430",
          "line_range": [
            101,
            125
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": [
            127,
            183
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "check_environment": [
          "os.getenv",
          "print"
        ],
        "check_api_server": [
          "response.json",
          "session.get",
          "aiohttp.ClientSession",
          "print"
        ],
        "check_ollama": [
          "print",
          "response.json",
          "session.get",
          "len",
          "aiohttp.ClientSession",
          "data.get"
        ],
        "check_dependencies": [
          "__import__",
          "print",
          "missing.append"
        ],
        "start_api_server": [
          "Path",
          "subprocess.Popen",
          "time.sleep",
          "print"
        ],
        "main": [
          "check_api_server",
          "print",
          "bot_main",
          "Path",
          "os.getenv",
          "check_environment",
          "start_api_server",
          "check_ollama",
          "asyncio.sleep",
          "check_dependencies"
        ]
      },
      "dependencies": [
        "Path",
        "aiohttp",
        "asyncio",
        "main",
        "ollama_api_bot",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "time"
      ],
      "hash": null,
      "artifact_id": "f96cc7d6-3daa-4a69-8a8b-cd21afdd61c6"
    },
    {
      "module_id": ".ARCHIVE.archive.telegram_bots.telegram_cursor_master",
      "path": ".ARCHIVE/archive/telegram_bots/telegram_cursor_master.py",
      "category": "core",
      "module_doc": "\ud83c\udfaf LLMStruct Telegram Master Controller\n\u0415\u0434\u0438\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0434\u043b\u044f seamless \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043c\u0430\u0441\u0442\u0435\u0440-\u043f\u043b\u0430\u043d\u043e\u043c \u0447\u0435\u0440\u0435\u0437 Telegram\n\n\u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430:\n- \u041e\u0434\u0438\u043d \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0439 Telegram Bot  \n- File-based communication \u0441 Cursor\n- Clear command protocols\n- Real-time status updates",
      "functions": [
        {
          "name": "main",
          "docstring": "Main function",
          "line_range": [
            355,
            395
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            40,
            60
          ],
          "parameters": [
            "self",
            "token"
          ],
          "decorators": []
        },
        {
          "name": "setup_handlers",
          "docstring": "Setup command and message handlers",
          "line_range": [
            62,
            75
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cmd_start",
          "docstring": "Start command",
          "line_range": [
            77,
            96
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "cmd_status",
          "docstring": "Status command",
          "line_range": [
            98,
            119
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "cmd_master",
          "docstring": "Master plan command",
          "line_range": [
            121,
            149
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "cmd_stop",
          "docstring": "Stop command",
          "line_range": [
            151,
            171
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "cmd_help",
          "docstring": "Help command",
          "line_range": [
            173,
            196
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "Handle regular messages",
          "line_range": [
            198,
            229
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "write_command",
          "docstring": "Write command to file for Cursor",
          "line_range": [
            231,
            251
          ],
          "parameters": [
            "self",
            "command"
          ],
          "decorators": []
        },
        {
          "name": "read_status",
          "docstring": "Read current status",
          "line_range": [
            253,
            262
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "update_status",
          "docstring": "Update status file",
          "line_range": [
            264,
            279
          ],
          "parameters": [
            "self",
            "message",
            "status"
          ],
          "decorators": []
        },
        {
          "name": "start_response_watcher",
          "docstring": "Start watching for responses from Cursor",
          "line_range": [
            281,
            298
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "process_responses",
          "docstring": "Process responses from Cursor",
          "line_range": [
            300,
            316
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "send_response",
          "docstring": "Send response to Telegram",
          "line_range": [
            318,
            332
          ],
          "parameters": [
            "self",
            "response"
          ],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "Run the master controller",
          "line_range": [
            334,
            353
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_in_thread",
          "docstring": "",
          "line_range": [
            372,
            376
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TelegramCursorMaster",
          "docstring": "\u041c\u0430\u0441\u0442\u0435\u0440-\u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440 \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0447\u0435\u0440\u0435\u0437 Telegram",
          "line_range": [
            37,
            353
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                40,
                60
              ],
              "parameters": [
                "self",
                "token"
              ]
            },
            {
              "name": "setup_handlers",
              "docstring": "Setup command and message handlers",
              "line_range": [
                62,
                75
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cmd_start",
              "docstring": "Start command",
              "line_range": [
                77,
                96
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "cmd_status",
              "docstring": "Status command",
              "line_range": [
                98,
                119
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "cmd_master",
              "docstring": "Master plan command",
              "line_range": [
                121,
                149
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "cmd_stop",
              "docstring": "Stop command",
              "line_range": [
                151,
                171
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "cmd_help",
              "docstring": "Help command",
              "line_range": [
                173,
                196
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "Handle regular messages",
              "line_range": [
                198,
                229
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "write_command",
              "docstring": "Write command to file for Cursor",
              "line_range": [
                231,
                251
              ],
              "parameters": [
                "self",
                "command"
              ]
            },
            {
              "name": "read_status",
              "docstring": "Read current status",
              "line_range": [
                253,
                262
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "update_status",
              "docstring": "Update status file",
              "line_range": [
                264,
                279
              ],
              "parameters": [
                "self",
                "message",
                "status"
              ]
            },
            {
              "name": "start_response_watcher",
              "docstring": "Start watching for responses from Cursor",
              "line_range": [
                281,
                298
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "process_responses",
              "docstring": "Process responses from Cursor",
              "line_range": [
                300,
                316
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "send_response",
              "docstring": "Send response to Telegram",
              "line_range": [
                318,
                332
              ],
              "parameters": [
                "self",
                "response"
              ]
            },
            {
              "name": "run",
              "docstring": "Run the master controller",
              "line_range": [
                334,
                353
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.setup_handlers",
          "Application.builder",
          "Path",
          "logger.info",
          "self.update_status",
          "Bot"
        ],
        "setup_handlers": [
          "MessageHandler",
          "CommandHandler"
        ],
        "cmd_start": [
          "logger.info"
        ],
        "cmd_status": [
          "logger.info",
          "status.get",
          "self.read_status"
        ],
        "cmd_master": [
          "self.write_command",
          "datetime.now",
          "int",
          "logger.info",
          "self.update_status",
          "time.time"
        ],
        "cmd_stop": [
          "self.write_command",
          "datetime.now",
          "int",
          "logger.info",
          "self.update_status",
          "time.time"
        ],
        "cmd_help": [],
        "handle_message": [
          "self.write_command",
          "datetime.now",
          "int",
          "logger.info",
          "time.time"
        ],
        "write_command": [
          "json.load",
          "open",
          "logger.error",
          "json.dump",
          "logger.info",
          "len",
          "commands.append"
        ],
        "read_status": [
          "json.load",
          "open",
          "logger.error"
        ],
        "update_status": [
          "datetime.now",
          "open",
          "logger.error",
          "json.dump",
          "logger.info"
        ],
        "start_response_watcher": [
          "logger.info",
          "asyncio.sleep",
          "logger.error",
          "self.process_responses"
        ],
        "process_responses": [
          "self.send_response",
          "json.load",
          "open",
          "logger.error",
          "json.dump",
          "response.get"
        ],
        "send_response": [
          "logger.info",
          "response.get",
          "logger.error"
        ],
        "run": [
          "logger.info",
          "self.start_response_watcher",
          "asyncio.create_task"
        ],
        "main": [
          "os.getenv",
          "asyncio.get_event_loop",
          "TelegramCursorMaster",
          "logger.error",
          "loop.is_running"
        ],
        "run_in_thread": [
          "asyncio.new_event_loop",
          "new_loop.run_until_complete",
          "new_loop.close",
          "master.run",
          "asyncio.set_event_loop"
        ]
      },
      "dependencies": [
        "Application",
        "Bot",
        "CommandHandler",
        "ContextTypes",
        "Dict",
        "List",
        "MessageHandler",
        "Optional",
        "Path",
        "Update",
        "asyncio",
        "datetime",
        "filters",
        "httpx",
        "json",
        "logging",
        "os",
        "pathlib",
        "sys",
        "telegram",
        "telegram.ext",
        "threading",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "21cac09a-1e18-4f04-ac4b-0a95f1c8cc1b"
    },
    {
      "module_id": "src.scripts.session_cli",
      "path": "src/scripts/session_cli.py",
      "category": "core",
      "module_doc": "Session Management CLI\nAutomates session tracking, worklog updates, and session switching for llmstruct.\nPart of the comprehensive session management system.",
      "functions": [
        {
          "name": "get_current_branch",
          "docstring": "Get current git branch.",
          "line_range": [
            24,
            31
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_json_file",
          "docstring": "Load JSON file with error handling.",
          "line_range": [
            33,
            40
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "save_json_file",
          "docstring": "Save JSON file with error handling.",
          "line_range": [
            42,
            51
          ],
          "parameters": [
            "file_path",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "get_current_timestamp",
          "docstring": "Get current timestamp in ISO format.",
          "line_range": [
            53,
            55
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "log_event",
          "docstring": "Log an event to worklog.json.",
          "line_range": [
            57,
            88
          ],
          "parameters": [
            "event_message",
            "author"
          ],
          "decorators": []
        },
        {
          "name": "switch_session",
          "docstring": "Switch to a different session or create new one.",
          "line_range": [
            90,
            141
          ],
          "parameters": [
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "list_sessions",
          "docstring": "List all available sessions.",
          "line_range": [
            143,
            166
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_current_session",
          "docstring": "Show current session details.",
          "line_range": [
            168,
            183
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_worklog",
          "docstring": "Show recent worklog entries.",
          "line_range": [
            185,
            203
          ],
          "parameters": [
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Main CLI interface.",
          "line_range": [
            205,
            244
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": [
            16,
            22
          ],
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {
        "get_current_branch": [
          "subprocess.run"
        ],
        "load_json_file": [
          "json.load",
          "open",
          "print"
        ],
        "save_json_file": [
          "print",
          "open",
          "json.dump",
          "os.makedirs"
        ],
        "get_current_timestamp": [
          "datetime.now"
        ],
        "log_event": [
          "print",
          "save_json_file",
          "get_current_branch",
          "load_json_file",
          "current_session.get",
          "get_current_timestamp"
        ],
        "switch_session": [
          "print",
          "log_event",
          "save_json_file",
          "get_current_branch",
          "load_json_file",
          "get_current_timestamp"
        ],
        "list_sessions": [
          "load_json_file",
          "current_session.get",
          "print"
        ],
        "show_current_session": [
          "load_json_file",
          "current_session.get",
          "print"
        ],
        "show_worklog": [
          "load_json_file",
          "reversed",
          "len",
          "print"
        ],
        "main": [
          "print",
          "list_sessions",
          "switch_session",
          "log_event",
          "int",
          "show_worklog",
          "len",
          "show_current_session"
        ]
      },
      "dependencies": [
        "Path",
        "datetime",
        "json",
        "os",
        "pathlib",
        "subprocess",
        "sys"
      ],
      "hash": null,
      "artifact_id": "8a6bc88b-2294-446d-93f7-2f02801a7c64"
    },
    {
      "module_id": "src.scripts.auto_update_struct",
      "path": "src/scripts/auto_update_struct.py",
      "category": "core",
      "module_doc": "Automatic struct.json update script\nThis script automatically parses the project and updates struct.json\nwithout requiring LLM intervention.",
      "functions": [
        {
          "name": "detect_project_changes",
          "docstring": "Detect if project files have changed since last struct.json generation.\nUses git status to check for modifications.",
          "line_range": [
            44,
            81
          ],
          "parameters": [
            "root_dir",
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_struct_json",
          "docstring": "Create a backup of existing struct.json.",
          "line_range": [
            84,
            97
          ],
          "parameters": [
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_struct_json",
          "docstring": "Validate generated struct.json for basic structure.",
          "line_range": [
            100,
            128
          ],
          "parameters": [
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "update_struct_json",
          "docstring": "Main function to update struct.json automatically.\n\nArgs:\n    root_dir: Project root directory (default: current directory)\n    struct_path: Path to struct.json (default: ./struct.json)\n    force: Force regeneration even if no changes detected\n    config_override: Override default configuration\n\nReturns:\n    bool: True if update was successful",
          "line_range": [
            131,
            225
          ],
          "parameters": [
            "root_dir",
            "struct_path",
            "force",
            "config_override"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for auto-update script.",
          "line_range": [
            228,
            286
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "",
          "line_range": [
            24,
            25
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_gitignore",
          "docstring": "",
          "line_range": [
            26,
            27
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "",
          "line_range": [
            28,
            29
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_config": [],
        "load_gitignore": [],
        "generate_json": [
          "ImportError"
        ],
        "detect_project_changes": [
          "file_path.stat",
          "Path",
          "subprocess.run",
          "logger.info",
          "logger.warning"
        ],
        "backup_struct_json": [
          "datetime.now",
          "Path",
          "logger.error",
          "subprocess.run",
          "logger.info"
        ],
        "validate_struct_json": [
          "json.load",
          "open",
          "logger.error",
          "logger.info"
        ],
        "update_struct_json": [
          "os.getcwd",
          "backup_struct_json",
          "generate_json",
          "open",
          "logger.error",
          "json.dump",
          "load_config",
          "subprocess.run",
          "logger.info",
          "load_gitignore",
          "detect_project_changes",
          "config.update",
          "cli_config.get",
          "validate_struct_json",
          "config.get"
        ],
        "main": [
          "argparse.ArgumentParser",
          "update_struct_json",
          "os.getcwd",
          "print",
          "logging.getLogger",
          "sys.exit",
          "parser.add_argument",
          "parser.parse_args",
          "detect_project_changes"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "generate_json",
        "json",
        "llmstruct.cli",
        "llmstruct.generators.json_generator",
        "load_config",
        "load_gitignore",
        "logging",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "b7845bbc-262d-4cf3-961a-6f4887a9c890"
    },
    {
      "module_id": "src.scripts.fix_hardcoded_usernames",
      "path": "src/scripts/fix_hardcoded_usernames.py",
      "category": "core",
      "module_doc": "Fix Hardcoded Usernames Script\nAutomatically detects and replaces hardcoded usernames with dynamic values from .env or git config.",
      "functions": [
        {
          "name": "main",
          "docstring": "Main execution function.",
          "line_range": [
            234,
            288
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            22,
            24
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_detect_user_info",
          "docstring": "Detect user info from .env, git config, or environment.",
          "line_range": [
            26,
            62
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_from_env",
          "docstring": "Load user info from .env file.",
          "line_range": [
            64,
            86
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_from_git",
          "docstring": "Load user info from git config.",
          "line_range": [
            88,
            120
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_from_environment",
          "docstring": "Load user info from environment variables.",
          "line_range": [
            122,
            128
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_user_info",
          "docstring": "Get detected user information.",
          "line_range": [
            130,
            132
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            138,
            148
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "scan_files",
          "docstring": "Scan for files containing hardcoded usernames.",
          "line_range": [
            150,
            172
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "fix_file",
          "docstring": "Fix hardcoded usernames in a single file.",
          "line_range": [
            174,
            200
          ],
          "parameters": [
            "self",
            "file_path",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "fix_all_files",
          "docstring": "Fix hardcoded usernames in all project files.",
          "line_range": [
            202,
            214
          ],
          "parameters": [
            "self",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "generate_env_template",
          "docstring": "Generate .env template with required variables.",
          "line_range": [
            216,
            231
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "UserInfoDetector",
          "docstring": "Detect user information from various sources.",
          "line_range": [
            19,
            132
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                22,
                24
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_detect_user_info",
              "docstring": "Detect user info from .env, git config, or environment.",
              "line_range": [
                26,
                62
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_from_env",
              "docstring": "Load user info from .env file.",
              "line_range": [
                64,
                86
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_from_git",
              "docstring": "Load user info from git config.",
              "line_range": [
                88,
                120
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_from_environment",
              "docstring": "Load user info from environment variables.",
              "line_range": [
                122,
                128
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_user_info",
              "docstring": "Get detected user information.",
              "line_range": [
                130,
                132
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "HardcodeFixer",
          "docstring": "Fix hardcoded usernames in project files.",
          "line_range": [
            135,
            231
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                138,
                148
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "scan_files",
              "docstring": "Scan for files containing hardcoded usernames.",
              "line_range": [
                150,
                172
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "fix_file",
              "docstring": "Fix hardcoded usernames in a single file.",
              "line_range": [
                174,
                200
              ],
              "parameters": [
                "self",
                "file_path",
                "dry_run"
              ]
            },
            {
              "name": "fix_all_files",
              "docstring": "Fix hardcoded usernames in all project files.",
              "line_range": [
                202,
                214
              ],
              "parameters": [
                "self",
                "dry_run"
              ]
            },
            {
              "name": "generate_env_template",
              "docstring": "Generate .env template with required variables.",
              "line_range": [
                216,
                231
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "UserInfoDetector"
        ],
        "_detect_user_info": [
          "self._load_from_environment",
          "user_info.get",
          "user_info.update",
          "logger.info",
          "self._load_from_git",
          "env_info.items",
          "env_vars.items",
          "self._load_from_env"
        ],
        "_load_from_env": [
          "line.split",
          "value.strip",
          "open",
          "logger.error",
          "line.strip",
          "env_file.exists",
          "key.strip",
          "env_vars.get",
          "line.startswith"
        ],
        "_load_from_git": [
          "match.group",
          "re.search",
          "logger.error",
          "subprocess.run"
        ],
        "_load_from_environment": [],
        "get_user_info": [],
        "scan_files": [
          "files_with_hardcode.append",
          "str",
          "f.read",
          "any",
          "open",
          "content.count",
          "logger.warning"
        ],
        "fix_file": [
          "content.replace",
          "f.read",
          "open",
          "logger.error",
          "content.count",
          "logger.info",
          "f.write"
        ],
        "fix_all_files": [
          "str",
          "self.fix_file",
          "logger.info",
          "len",
          "self.scan_files"
        ],
        "generate_env_template": [],
        "main": [
          "argparse.ArgumentParser",
          "print",
          "HardcodeFixer",
          "Path",
          "open",
          "logger.info",
          "parser.add_argument",
          "fixer.scan_files",
          "len",
          "parser.parse_args",
          "results.items",
          "f.write",
          "fixer.fix_all_files",
          "replacements.items",
          "fixer.generate_env_template"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "argparse",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "subprocess",
        "typing"
      ],
      "hash": null,
      "artifact_id": "00c48c70-1217-4fc3-af54-334ed528079c"
    },
    {
      "module_id": "src.scripts.create_github_issues",
      "path": "src/scripts/create_github_issues.py",
      "category": "core",
      "module_doc": "GitHub Issues Creator for AI-Dogfooding Project\n\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 GitHub issues \u0438\u0437 \u043d\u0430\u0448\u0438\u0445 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0437\u0430\u0434\u0430\u0447",
      "functions": [
        {
          "name": "load_env_file",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            16,
            28
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_epics_data",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438\u0437 JSON",
          "line_range": [
            205,
            213
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f issues",
          "line_range": [
            215,
            252
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            34,
            43
          ],
          "parameters": [
            "self",
            "repo_owner",
            "repo_name",
            "token",
            "use_cli"
          ],
          "decorators": []
        },
        {
          "name": "create_epic_issue",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u044d\u043f\u0438\u043a\u0430",
          "line_range": [
            45,
            83
          ],
          "parameters": [
            "self",
            "epic_data"
          ],
          "decorators": []
        },
        {
          "name": "create_task_issue",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            85,
            128
          ],
          "parameters": [
            "self",
            "task_data",
            "epic_number"
          ],
          "decorators": []
        },
        {
          "name": "_create_issue_via_api",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub API",
          "line_range": [
            130,
            150
          ],
          "parameters": [
            "self",
            "title",
            "body",
            "labels"
          ],
          "decorators": []
        },
        {
          "name": "_create_issue_via_cli",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub CLI",
          "line_range": [
            152,
            186
          ],
          "parameters": [
            "self",
            "title",
            "body",
            "labels"
          ],
          "decorators": []
        },
        {
          "name": "_format_criteria",
          "docstring": "",
          "line_range": [
            188,
            189
          ],
          "parameters": [
            "self",
            "criteria"
          ],
          "decorators": []
        },
        {
          "name": "_format_tasks",
          "docstring": "",
          "line_range": [
            191,
            200
          ],
          "parameters": [
            "self",
            "tasks"
          ],
          "decorators": []
        },
        {
          "name": "_format_metrics",
          "docstring": "",
          "line_range": [
            202,
            203
          ],
          "parameters": [
            "self",
            "metrics"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubIssuesCreator",
          "docstring": "",
          "line_range": [
            33,
            203
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                34,
                43
              ],
              "parameters": [
                "self",
                "repo_owner",
                "repo_name",
                "token",
                "use_cli"
              ]
            },
            {
              "name": "create_epic_issue",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u044d\u043f\u0438\u043a\u0430",
              "line_range": [
                45,
                83
              ],
              "parameters": [
                "self",
                "epic_data"
              ]
            },
            {
              "name": "create_task_issue",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
              "line_range": [
                85,
                128
              ],
              "parameters": [
                "self",
                "task_data",
                "epic_number"
              ]
            },
            {
              "name": "_create_issue_via_api",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub API",
              "line_range": [
                130,
                150
              ],
              "parameters": [
                "self",
                "title",
                "body",
                "labels"
              ]
            },
            {
              "name": "_create_issue_via_cli",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub CLI",
              "line_range": [
                152,
                186
              ],
              "parameters": [
                "self",
                "title",
                "body",
                "labels"
              ]
            },
            {
              "name": "_format_criteria",
              "docstring": "",
              "line_range": [
                188,
                189
              ],
              "parameters": [
                "self",
                "criteria"
              ]
            },
            {
              "name": "_format_tasks",
              "docstring": "",
              "line_range": [
                191,
                200
              ],
              "parameters": [
                "self",
                "tasks"
              ]
            },
            {
              "name": "_format_metrics",
              "docstring": "",
              "line_range": [
                202,
                203
              ],
              "parameters": [
                "self",
                "metrics"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "load_env_file": [
          "line.split",
          "print",
          "Path",
          "value.strip",
          "open",
          "line.strip",
          "env_file.exists",
          "key.strip",
          "line.startswith"
        ],
        "__init__": [],
        "create_epic_issue": [
          "self._format_metrics",
          "self._create_issue_via_api",
          "self._format_tasks",
          "self._create_issue_via_cli",
          "self._format_criteria",
          "epic_data.get"
        ],
        "create_task_issue": [
          "self._format_criteria",
          "task_data.get",
          "self._create_issue_via_api",
          "self._create_issue_via_cli"
        ],
        "_create_issue_via_api": [
          "response.json",
          "requests.post",
          "print"
        ],
        "_create_issue_via_cli": [
          "issue_url.split",
          "print",
          "int",
          "open",
          "subprocess.run",
          "os.getpid",
          "os.unlink",
          "f.write"
        ],
        "_format_criteria": [],
        "_format_tasks": [],
        "_format_metrics": [
          "metrics.items"
        ],
        "load_epics_data": [
          "json.load",
          "print",
          "Path",
          "open",
          "epics_file.exists"
        ],
        "main": [
          "creator.create_epic_issue",
          "epics_data.get",
          "print",
          "os.getenv",
          "creator.create_task_issue",
          "len",
          "GitHubIssuesCreator",
          "load_epics_data",
          "epic_data.get"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "json",
        "os",
        "pathlib",
        "requests",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "ac1bf729-b934-4881-a9a8-59bb84131994"
    },
    {
      "module_id": "src.scripts.export_to_github_projects",
      "path": "src/scripts/export_to_github_projects.py",
      "category": "core",
      "module_doc": "Export script for GitHub Projects integration\nConverts official tasks.json and ideas.json to GitHub Project cards",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            183,
            266
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            23,
            26
          ],
          "parameters": [
            "self",
            "config_path",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "check_github_cli",
          "docstring": "Check if GitHub CLI is installed and authenticated",
          "line_range": [
            28,
            36
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "list_projects",
          "docstring": "List available GitHub Projects (via gh-projects extension)",
          "line_range": [
            38,
            55
          ],
          "parameters": [
            "self",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "create_project_item",
          "docstring": "Create a new item in GitHub Project (via gh-projects extension)\nTODO: \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 GraphQL API \u0438\u043b\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c",
          "line_range": [
            57,
            82
          ],
          "parameters": [
            "self",
            "project_number",
            "title",
            "body",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "export_tasks_to_project",
          "docstring": "Export tasks to GitHub Project",
          "line_range": [
            84,
            123
          ],
          "parameters": [
            "self",
            "tasks",
            "project_number",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "export_ideas_to_project",
          "docstring": "Export ideas to GitHub Project",
          "line_range": [
            125,
            164
          ],
          "parameters": [
            "self",
            "ideas",
            "project_number",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "filter_data",
          "docstring": "Filter data by status and priority",
          "line_range": [
            166,
            180
          ],
          "parameters": [
            "self",
            "data",
            "status_filter",
            "priority_filter"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubProjectsExportScript",
          "docstring": "Extended exporter with command-line interface and GitHub CLI integration",
          "line_range": [
            20,
            180
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                23,
                26
              ],
              "parameters": [
                "self",
                "config_path",
                "dry_run"
              ]
            },
            {
              "name": "check_github_cli",
              "docstring": "Check if GitHub CLI is installed and authenticated",
              "line_range": [
                28,
                36
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "list_projects",
              "docstring": "List available GitHub Projects (via gh-projects extension)",
              "line_range": [
                38,
                55
              ],
              "parameters": [
                "self",
                "owner",
                "repo"
              ]
            },
            {
              "name": "create_project_item",
              "docstring": "Create a new item in GitHub Project (via gh-projects extension)\nTODO: \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 GraphQL API \u0438\u043b\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c",
              "line_range": [
                57,
                82
              ],
              "parameters": [
                "self",
                "project_number",
                "title",
                "body",
                "owner",
                "repo"
              ]
            },
            {
              "name": "export_tasks_to_project",
              "docstring": "Export tasks to GitHub Project",
              "line_range": [
                84,
                123
              ],
              "parameters": [
                "self",
                "tasks",
                "project_number",
                "owner",
                "repo"
              ]
            },
            {
              "name": "export_ideas_to_project",
              "docstring": "Export ideas to GitHub Project",
              "line_range": [
                125,
                164
              ],
              "parameters": [
                "self",
                "ideas",
                "project_number",
                "owner",
                "repo"
              ]
            },
            {
              "name": "filter_data",
              "docstring": "Filter data by status and priority",
              "line_range": [
                166,
                180
              ],
              "parameters": [
                "self",
                "data",
                "status_filter",
                "priority_filter"
              ]
            }
          ],
          "bases": [
            "GitHubProjectsExporter"
          ]
        }
      ],
      "callgraph": {
        "__init__": [
          "super"
        ],
        "check_github_cli": [
          "self._run_gh_command",
          "print"
        ],
        "list_projects": [
          "self._run_gh_command",
          "json.loads",
          "print",
          "isinstance"
        ],
        "create_project_item": [
          "self._run_gh_command",
          "output.strip",
          "print",
          "str"
        ],
        "export_tasks_to_project": [
          "print",
          "self.create_project_item",
          "len",
          "task.get",
          "self.format_task_for_github"
        ],
        "export_ideas_to_project": [
          "print",
          "self.format_idea_for_github",
          "self.create_project_item",
          "len",
          "idea.get"
        ],
        "filter_data": [
          "item.get"
        ],
        "main": [
          "argparse.ArgumentParser",
          "GitHubProjectsExportScript",
          "print",
          "exporter.export_tasks_to_project",
          "sys.exit",
          "exporter.export_ideas_to_project",
          "exporter.load_official_data",
          "exporter._save_mapping",
          "exporter.filter_data",
          "parser.add_argument",
          "exporter.check_github_cli",
          "parser.parse_args"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "GitHubProjectsExporter",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "argparse",
        "datetime",
        "json",
        "llmstruct.gh_view",
        "pathlib",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "a407956d-cb24-40d9-9136-e16bb6f7890a"
    },
    {
      "module_id": "src.scripts.validate_schemas",
      "path": "src/scripts/validate_schemas.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "67b0546c-c68f-4213-a2cf-47d1a3796c33"
    },
    {
      "module_id": "src.scripts.process_926_items",
      "path": "src/scripts/process_926_items.py",
      "category": "core",
      "module_doc": "926 Items Processing Script - Updated Implementation\nProcesses items according to GitHub roadmap + personal management vision\nImplements all decisions from 926_items_processing_execution_plan.md",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            16,
            51
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_comprehensive_index",
          "docstring": "Load the 926 items from comprehensive index",
          "line_range": [
            53,
            111
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "calculate_confidence_score",
          "docstring": "Calculate confidence score for categorization decision",
          "line_range": [
            113,
            146
          ],
          "parameters": [
            "self",
            "item",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "check_t_pot_related",
          "docstring": "Enhanced T-Pot detection",
          "line_range": [
            148,
            155
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "check_team_implementable",
          "docstring": "Check if team can implement without architecture review",
          "line_range": [
            157,
            176
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "check_personal_vs_team_vs_business",
          "docstring": "Classify as personal/team/business",
          "line_range": [
            178,
            214
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "identify_epic_candidates",
          "docstring": "Identify items that should be grouped into epics",
          "line_range": [
            216,
            233
          ],
          "parameters": [
            "self",
            "items"
          ],
          "decorators": []
        },
        {
          "name": "extract_epic_name",
          "docstring": "Extract epic name from item",
          "line_range": [
            235,
            241
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "categorize_item",
          "docstring": "Main categorization logic with confidence scoring",
          "line_range": [
            243,
            278
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "find_duplicates",
          "docstring": "Enhanced duplicate detection with T-Pot special handling",
          "line_range": [
            280,
            319
          ],
          "parameters": [
            "self",
            "items"
          ],
          "decorators": []
        },
        {
          "name": "calculate_similarity",
          "docstring": "Enhanced similarity calculation",
          "line_range": [
            321,
            342
          ],
          "parameters": [
            "self",
            "title1",
            "title2"
          ],
          "decorators": []
        },
        {
          "name": "suggest_merge_strategy",
          "docstring": "Enhanced merge strategy with T-Pot consideration",
          "line_range": [
            344,
            359
          ],
          "parameters": [
            "self",
            "item1",
            "item2"
          ],
          "decorators": []
        },
        {
          "name": "process_items",
          "docstring": "Main processing workflow implementing execution plan",
          "line_range": [
            361,
            468
          ],
          "parameters": [
            "self",
            "items"
          ],
          "decorators": []
        },
        {
          "name": "save_results",
          "docstring": "Save categorized results with enhanced metadata",
          "line_range": [
            470,
            546
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_category_description",
          "docstring": "Category descriptions per execution plan",
          "line_range": [
            548,
            562
          ],
          "parameters": [
            "self",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "Main execution workflow per execution plan",
          "line_range": [
            564,
            606
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TaskProcessor926",
          "docstring": "",
          "line_range": [
            15,
            606
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                16,
                51
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_comprehensive_index",
              "docstring": "Load the 926 items from comprehensive index",
              "line_range": [
                53,
                111
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "calculate_confidence_score",
              "docstring": "Calculate confidence score for categorization decision",
              "line_range": [
                113,
                146
              ],
              "parameters": [
                "self",
                "item",
                "category"
              ]
            },
            {
              "name": "check_t_pot_related",
              "docstring": "Enhanced T-Pot detection",
              "line_range": [
                148,
                155
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "check_team_implementable",
              "docstring": "Check if team can implement without architecture review",
              "line_range": [
                157,
                176
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "check_personal_vs_team_vs_business",
              "docstring": "Classify as personal/team/business",
              "line_range": [
                178,
                214
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "identify_epic_candidates",
              "docstring": "Identify items that should be grouped into epics",
              "line_range": [
                216,
                233
              ],
              "parameters": [
                "self",
                "items"
              ]
            },
            {
              "name": "extract_epic_name",
              "docstring": "Extract epic name from item",
              "line_range": [
                235,
                241
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "categorize_item",
              "docstring": "Main categorization logic with confidence scoring",
              "line_range": [
                243,
                278
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "find_duplicates",
              "docstring": "Enhanced duplicate detection with T-Pot special handling",
              "line_range": [
                280,
                319
              ],
              "parameters": [
                "self",
                "items"
              ]
            },
            {
              "name": "calculate_similarity",
              "docstring": "Enhanced similarity calculation",
              "line_range": [
                321,
                342
              ],
              "parameters": [
                "self",
                "title1",
                "title2"
              ]
            },
            {
              "name": "suggest_merge_strategy",
              "docstring": "Enhanced merge strategy with T-Pot consideration",
              "line_range": [
                344,
                359
              ],
              "parameters": [
                "self",
                "item1",
                "item2"
              ]
            },
            {
              "name": "process_items",
              "docstring": "Main processing workflow implementing execution plan",
              "line_range": [
                361,
                468
              ],
              "parameters": [
                "self",
                "items"
              ]
            },
            {
              "name": "save_results",
              "docstring": "Save categorized results with enhanced metadata",
              "line_range": [
                470,
                546
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_category_description",
              "docstring": "Category descriptions per execution plan",
              "line_range": [
                548,
                562
              ],
              "parameters": [
                "self",
                "category"
              ]
            },
            {
              "name": "run",
              "docstring": "Main execution workflow per execution plan",
              "line_range": [
                564,
                606
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "datetime.now"
        ],
        "load_comprehensive_index": [
          "item_content.lower",
          "unique_items.append",
          "json.load",
          "set",
          "print",
          "any",
          "str",
          "seen_items.add",
          "open",
          "items.extend",
          "value.items",
          "len",
          "data.items",
          "hash",
          "index_path.exists",
          "item.get",
          "items.append",
          "isinstance"
        ],
        "calculate_confidence_score": [
          "str",
          "self.check_t_pot_related",
          "min",
          "item.get",
          "sum"
        ],
        "check_t_pot_related": [
          "str",
          "any"
        ],
        "check_team_implementable": [
          "sum",
          "str"
        ],
        "check_personal_vs_team_vs_business": [
          "max",
          "item.get",
          "sum",
          "str"
        ],
        "identify_epic_candidates": [
          "epic_groups.items",
          "str",
          "any",
          "len",
          "item.get",
          "self.extract_epic_name"
        ],
        "extract_epic_name": [
          "item.get",
          "title.split"
        ],
        "categorize_item": [
          "str",
          "any",
          "self.check_team_implementable",
          "self.check_t_pot_related",
          "self.calculate_confidence_score",
          "self.check_personal_vs_team_vs_business"
        ],
        "find_duplicates": [
          "self.check_t_pot_related",
          "seen_items.items",
          "self.calculate_similarity",
          "self.suggest_merge_strategy",
          "item.get",
          "duplicates.append"
        ],
        "calculate_similarity": [
          "title1.split",
          "words1.union",
          "set",
          "words1.intersection",
          "min",
          "len",
          "title2.split"
        ],
        "suggest_merge_strategy": [
          "str",
          "item1.get",
          "self.check_t_pot_related",
          "len",
          "item2.get"
        ],
        "process_items": [
          "category.startswith",
          "self.categorize_item",
          "set",
          "datetime.now",
          "print",
          "self.check_team_implementable",
          "any",
          "str",
          "processed_item.copy",
          "low_confidence_items.append",
          "self.check_t_pot_related",
          "self.find_duplicates",
          "len",
          "duplicate_item_ids.add",
          "id",
          "self.extract_epic_name"
        ],
        "save_results": [
          "datetime.now",
          "print",
          "open",
          "json.dump",
          "len",
          "self.get_category_description",
          "item.get",
          "sum"
        ],
        "get_category_description": [
          "descriptions.get"
        ],
        "run": [
          "self.load_comprehensive_index",
          "self.save_results",
          "print",
          "self.process_items"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "Tuple",
        "datetime",
        "json",
        "os",
        "pathlib",
        "re",
        "typing"
      ],
      "hash": null,
      "artifact_id": "72913f4c-d978-4e6c-a3a5-d3961973010b"
    },
    {
      "module_id": "src.scripts.fix_github_script",
      "path": "src/scripts/fix_github_script.py",
      "category": "core",
      "module_doc": "Quick fix for GitHub issues creation script\n\u0418\u0441\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u043e\u0439 JSON \u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445",
      "functions": [
        {
          "name": "fix_json_loading",
          "docstring": "\u0418\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0443 JSON \u0434\u0430\u043d\u043d\u044b\u0445",
          "line_range": [
            11,
            42
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "fix_json_loading": [
          "content.replace",
          "print",
          "f.read",
          "Path",
          "open",
          "f.write"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "e0c46156-bae3-489b-b74f-1d887bb93459"
    },
    {
      "module_id": "src.scripts.github_sync_manager",
      "path": "src/scripts/github_sync_manager.py",
      "category": "core",
      "module_doc": "GitHub Sync Manager - \u0418\u0434\u0435\u043c\u043f\u043e\u0442\u0435\u043d\u0442\u043d\u0430\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f processing results \u0441 GitHub\nSupports: Issues, Epics (Projects), Discussions\nSafety: dry-run mode, logging, collision detection",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface",
          "line_range": [
            375,
            408
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            17,
            48
          ],
          "parameters": [
            "self",
            "repo_owner",
            "repo_name",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "load_sync_log",
          "docstring": "Load previous sync results for idempotency",
          "line_range": [
            50,
            60
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_sync_log",
          "docstring": "Save sync log for future idempotency",
          "line_range": [
            62,
            65
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "api_request",
          "docstring": "Safe GitHub API request with rate limiting",
          "line_range": [
            67,
            94
          ],
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "get_existing_issues",
          "docstring": "Get existing GitHub issues for collision detection",
          "line_range": [
            96,
            112
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_existing_discussions",
          "docstring": "Get existing GitHub discussions",
          "line_range": [
            114,
            118
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "item_already_synced",
          "docstring": "Check if item was already synced (idempotency)",
          "line_range": [
            120,
            125
          ],
          "parameters": [
            "self",
            "item",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "find_existing_by_title",
          "docstring": "Find existing GitHub item by title similarity",
          "line_range": [
            127,
            143
          ],
          "parameters": [
            "self",
            "title",
            "existing_items"
          ],
          "decorators": []
        },
        {
          "name": "create_github_issue",
          "docstring": "Create GitHub issue from processed item",
          "line_range": [
            145,
            182
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "create_github_discussion",
          "docstring": "Create GitHub discussion from processed item",
          "line_range": [
            184,
            194
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "create_github_epic",
          "docstring": "Create GitHub epic (as Project or enhanced Issue)",
          "line_range": [
            196,
            214
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "sync_category",
          "docstring": "Sync specific category with GitHub",
          "line_range": [
            216,
            290
          ],
          "parameters": [
            "self",
            "category",
            "filename"
          ],
          "decorators": []
        },
        {
          "name": "validate_before_sync",
          "docstring": "Pre-sync validation checks",
          "line_range": [
            292,
            322
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_sync",
          "docstring": "Main sync execution",
          "line_range": [
            324,
            373
          ],
          "parameters": [
            "self",
            "categories"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubSyncManager",
          "docstring": "",
          "line_range": [
            16,
            373
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                17,
                48
              ],
              "parameters": [
                "self",
                "repo_owner",
                "repo_name",
                "dry_run"
              ]
            },
            {
              "name": "load_sync_log",
              "docstring": "Load previous sync results for idempotency",
              "line_range": [
                50,
                60
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_sync_log",
              "docstring": "Save sync log for future idempotency",
              "line_range": [
                62,
                65
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "api_request",
              "docstring": "Safe GitHub API request with rate limiting",
              "line_range": [
                67,
                94
              ],
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ]
            },
            {
              "name": "get_existing_issues",
              "docstring": "Get existing GitHub issues for collision detection",
              "line_range": [
                96,
                112
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_existing_discussions",
              "docstring": "Get existing GitHub discussions",
              "line_range": [
                114,
                118
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "item_already_synced",
              "docstring": "Check if item was already synced (idempotency)",
              "line_range": [
                120,
                125
              ],
              "parameters": [
                "self",
                "item",
                "category"
              ]
            },
            {
              "name": "find_existing_by_title",
              "docstring": "Find existing GitHub item by title similarity",
              "line_range": [
                127,
                143
              ],
              "parameters": [
                "self",
                "title",
                "existing_items"
              ]
            },
            {
              "name": "create_github_issue",
              "docstring": "Create GitHub issue from processed item",
              "line_range": [
                145,
                182
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "create_github_discussion",
              "docstring": "Create GitHub discussion from processed item",
              "line_range": [
                184,
                194
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "create_github_epic",
              "docstring": "Create GitHub epic (as Project or enhanced Issue)",
              "line_range": [
                196,
                214
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "sync_category",
              "docstring": "Sync specific category with GitHub",
              "line_range": [
                216,
                290
              ],
              "parameters": [
                "self",
                "category",
                "filename"
              ]
            },
            {
              "name": "validate_before_sync",
              "docstring": "Pre-sync validation checks",
              "line_range": [
                292,
                322
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run_sync",
              "docstring": "Main sync execution",
              "line_range": [
                324,
                373
              ],
              "parameters": [
                "self",
                "categories"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self.load_sync_log",
          "os.getenv",
          "print"
        ],
        "load_sync_log": [
          "json.load",
          "open"
        ],
        "save_sync_log": [
          "open",
          "json.dump"
        ],
        "api_request": [
          "requests.post",
          "ValueError",
          "requests.get",
          "print",
          "response.json",
          "int",
          "time.sleep",
          "method.upper",
          "response.raise_for_status",
          "requests.patch"
        ],
        "get_existing_issues": [
          "self.api_request",
          "len",
          "issues.extend"
        ],
        "get_existing_discussions": [],
        "item_already_synced": [
          "item.get"
        ],
        "find_existing_by_title": [
          "title.lower",
          "len",
          "item.get"
        ],
        "create_github_issue": [
          "processing_meta.get",
          "print",
          "self.api_request",
          "labels.append",
          "item.get"
        ],
        "create_github_discussion": [
          "item.get",
          "print"
        ],
        "create_github_epic": [
          "item.get",
          "self.api_request",
          "print"
        ],
        "sync_category": [
          "self.item_already_synced",
          "json.load",
          "self.get_existing_discussions",
          "datetime.now",
          "print",
          "self.create_github_issue",
          "result.get",
          "open",
          "file_path.exists",
          "self.get_existing_issues",
          "self.create_github_epic",
          "self.create_github_discussion",
          "item.get",
          "data.get",
          "existing.get",
          "self.find_existing_by_title"
        ],
        "validate_before_sync": [
          "print",
          "user_info.get",
          "self.api_request",
          "core_limit.get",
          "rate_limit.get",
          "repo_info.get"
        ],
        "run_sync": [
          "results.values",
          "datetime.now",
          "self.sync_category",
          "print",
          "r.get",
          "self.validate_before_sync",
          "self.save_sync_log",
          "sum"
        ],
        "main": [
          "argparse.ArgumentParser",
          "GitHubSyncManager",
          "print",
          "result.get",
          "parser.add_argument",
          "len",
          "parser.parse_args",
          "manager.run_sync"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "json",
        "os",
        "pathlib",
        "requests",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "ff32f4fb-0190-4172-96f5-0abfb08e1b40"
    },
    {
      "module_id": "src.scripts.create_comprehensive_index",
      "path": "src/scripts/create_comprehensive_index.py",
      "category": "core",
      "module_doc": "Comprehensive Project Index Creator\nScans ALL project directories for tasks, ideas, sessions, and concepts.\nProvides complete visibility into project state and unaccounted innovations.",
      "functions": [
        {
          "name": "main",
          "docstring": "Main execution function.",
          "line_range": [
            714,
            735
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            45,
            58
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_init_patterns",
          "docstring": "Initialize comprehensive extraction patterns.",
          "line_range": [
            60,
            92
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "scan_all_directories",
          "docstring": "Scan all configured directories comprehensively.",
          "line_range": [
            94,
            111
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_scan_directory",
          "docstring": "Scan a specific directory according to its configuration.",
          "line_range": [
            113,
            127
          ],
          "parameters": [
            "self",
            "directory",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "_scan_root_files",
          "docstring": "Scan root-level files.",
          "line_range": [
            129,
            133
          ],
          "parameters": [
            "self",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "_should_scan_file",
          "docstring": "Check if file should be scanned based on extension.",
          "line_range": [
            135,
            137
          ],
          "parameters": [
            "self",
            "file_path",
            "allowed_types"
          ],
          "decorators": []
        },
        {
          "name": "_scan_file",
          "docstring": "Scan individual file for project items.",
          "line_range": [
            139,
            152
          ],
          "parameters": [
            "self",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_from_text",
          "docstring": "Extract items from text/markdown files.",
          "line_range": [
            154,
            206
          ],
          "parameters": [
            "self",
            "file_path",
            "content",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_from_json",
          "docstring": "Extract items from JSON files.",
          "line_range": [
            208,
            225
          ],
          "parameters": [
            "self",
            "file_path",
            "content",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_create_item_from_match",
          "docstring": "Create ProjectItem from regex match.",
          "line_range": [
            227,
            249
          ],
          "parameters": [
            "self",
            "match",
            "content",
            "file_path",
            "item_type",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_create_checkbox_item",
          "docstring": "Create ProjectItem from checkbox match.",
          "line_range": [
            251,
            274
          ],
          "parameters": [
            "self",
            "match",
            "content",
            "file_path",
            "item_type",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_create_simple_item",
          "docstring": "Create simple ProjectItem.",
          "line_range": [
            276,
            297
          ],
          "parameters": [
            "self",
            "title",
            "content",
            "file_path",
            "item_type",
            "source_dir",
            "priority",
            "position"
          ],
          "decorators": []
        },
        {
          "name": "_detect_status",
          "docstring": "Detect item status from surrounding content.",
          "line_range": [
            299,
            308
          ],
          "parameters": [
            "self",
            "content",
            "position"
          ],
          "decorators": []
        },
        {
          "name": "_detect_priority",
          "docstring": "Detect item priority from surrounding content.",
          "line_range": [
            310,
            319
          ],
          "parameters": [
            "self",
            "content",
            "position",
            "default"
          ],
          "decorators": []
        },
        {
          "name": "_assess_strategic_value",
          "docstring": "Assess strategic value of item.",
          "line_range": [
            321,
            330
          ],
          "parameters": [
            "self",
            "title",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_context",
          "docstring": "Extract context around position.",
          "line_range": [
            332,
            336
          ],
          "parameters": [
            "self",
            "content",
            "position",
            "length"
          ],
          "decorators": []
        },
        {
          "name": "_detect_category",
          "docstring": "Detect item category.",
          "line_range": [
            338,
            351
          ],
          "parameters": [
            "self",
            "title",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_estimate_effort",
          "docstring": "Estimate effort required.",
          "line_range": [
            353,
            362
          ],
          "parameters": [
            "self",
            "title",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_tags",
          "docstring": "Extract relevant tags.",
          "line_range": [
            364,
            378
          ],
          "parameters": [
            "self",
            "title",
            "content",
            "source_dir"
          ],
          "decorators": []
        },
        {
          "name": "_is_noise_checkbox",
          "docstring": "Check if checkbox is noise (navigation, etc).",
          "line_range": [
            380,
            384
          ],
          "parameters": [
            "self",
            "text"
          ],
          "decorators": []
        },
        {
          "name": "_parse_json_files",
          "docstring": "Parse structured JSON files for existing data.",
          "line_range": [
            386,
            402
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_process_structured_json",
          "docstring": "Process structured JSON data.",
          "line_range": [
            404,
            419
          ],
          "parameters": [
            "self",
            "data",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_add_json_item",
          "docstring": "Add item from JSON structure.",
          "line_range": [
            421,
            441
          ],
          "parameters": [
            "self",
            "item",
            "file_path",
            "item_type"
          ],
          "decorators": []
        },
        {
          "name": "_assess_json_strategic_value",
          "docstring": "Assess strategic value from JSON item.",
          "line_range": [
            443,
            450
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "_extract_innovation_concepts",
          "docstring": "Extract innovation concepts from content.",
          "line_range": [
            452,
            482
          ],
          "parameters": [
            "self",
            "file_path",
            "content",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_enhance_items",
          "docstring": "Post-process items to enhance metadata and find relationships.",
          "line_range": [
            484,
            501
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_find_related_items",
          "docstring": "Find related items based on content similarity.",
          "line_range": [
            503,
            517
          ],
          "parameters": [
            "self",
            "item",
            "id_map",
            "title_map"
          ],
          "decorators": []
        },
        {
          "name": "generate_comprehensive_report",
          "docstring": "Generate comprehensive analysis report.",
          "line_range": [
            519,
            561
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_comprehensive_index",
          "docstring": "Save comprehensive index and reports.",
          "line_range": [
            563,
            582
          ],
          "parameters": [
            "self",
            "output_dir"
          ],
          "decorators": []
        },
        {
          "name": "_generate_analysis_report",
          "docstring": "Generate human-readable analysis report.",
          "line_range": [
            584,
            658
          ],
          "parameters": [
            "self",
            "report"
          ],
          "decorators": []
        },
        {
          "name": "_format_dict",
          "docstring": "Format dictionary for markdown display.",
          "line_range": [
            660,
            662
          ],
          "parameters": [
            "self",
            "d"
          ],
          "decorators": []
        },
        {
          "name": "_format_items_list",
          "docstring": "Format items list for markdown display.",
          "line_range": [
            664,
            677
          ],
          "parameters": [
            "self",
            "items"
          ],
          "decorators": []
        },
        {
          "name": "_extract_json_tasks",
          "docstring": "Extract tasks from JSON tasks array.",
          "line_range": [
            679,
            684
          ],
          "parameters": [
            "self",
            "tasks_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_json_ideas",
          "docstring": "Extract ideas from JSON ideas array.",
          "line_range": [
            686,
            691
          ],
          "parameters": [
            "self",
            "ideas_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_json_sessions",
          "docstring": "Extract sessions from JSON sessions array.",
          "line_range": [
            693,
            698
          ],
          "parameters": [
            "self",
            "sessions_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_json_array",
          "docstring": "Extract items from JSON array.",
          "line_range": [
            700,
            711
          ],
          "parameters": [
            "self",
            "array_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ProjectItem",
          "docstring": "Unified representation of any project item (task, idea, session, concept).",
          "line_range": [
            22,
            39
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ComprehensiveIndexer",
          "docstring": "Comprehensive indexer for all project content.",
          "line_range": [
            42,
            711
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                45,
                58
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_init_patterns",
              "docstring": "Initialize comprehensive extraction patterns.",
              "line_range": [
                60,
                92
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "scan_all_directories",
              "docstring": "Scan all configured directories comprehensively.",
              "line_range": [
                94,
                111
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_scan_directory",
              "docstring": "Scan a specific directory according to its configuration.",
              "line_range": [
                113,
                127
              ],
              "parameters": [
                "self",
                "directory",
                "config"
              ]
            },
            {
              "name": "_scan_root_files",
              "docstring": "Scan root-level files.",
              "line_range": [
                129,
                133
              ],
              "parameters": [
                "self",
                "config"
              ]
            },
            {
              "name": "_should_scan_file",
              "docstring": "Check if file should be scanned based on extension.",
              "line_range": [
                135,
                137
              ],
              "parameters": [
                "self",
                "file_path",
                "allowed_types"
              ]
            },
            {
              "name": "_scan_file",
              "docstring": "Scan individual file for project items.",
              "line_range": [
                139,
                152
              ],
              "parameters": [
                "self",
                "file_path",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_from_text",
              "docstring": "Extract items from text/markdown files.",
              "line_range": [
                154,
                206
              ],
              "parameters": [
                "self",
                "file_path",
                "content",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_from_json",
              "docstring": "Extract items from JSON files.",
              "line_range": [
                208,
                225
              ],
              "parameters": [
                "self",
                "file_path",
                "content",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_create_item_from_match",
              "docstring": "Create ProjectItem from regex match.",
              "line_range": [
                227,
                249
              ],
              "parameters": [
                "self",
                "match",
                "content",
                "file_path",
                "item_type",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_create_checkbox_item",
              "docstring": "Create ProjectItem from checkbox match.",
              "line_range": [
                251,
                274
              ],
              "parameters": [
                "self",
                "match",
                "content",
                "file_path",
                "item_type",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_create_simple_item",
              "docstring": "Create simple ProjectItem.",
              "line_range": [
                276,
                297
              ],
              "parameters": [
                "self",
                "title",
                "content",
                "file_path",
                "item_type",
                "source_dir",
                "priority",
                "position"
              ]
            },
            {
              "name": "_detect_status",
              "docstring": "Detect item status from surrounding content.",
              "line_range": [
                299,
                308
              ],
              "parameters": [
                "self",
                "content",
                "position"
              ]
            },
            {
              "name": "_detect_priority",
              "docstring": "Detect item priority from surrounding content.",
              "line_range": [
                310,
                319
              ],
              "parameters": [
                "self",
                "content",
                "position",
                "default"
              ]
            },
            {
              "name": "_assess_strategic_value",
              "docstring": "Assess strategic value of item.",
              "line_range": [
                321,
                330
              ],
              "parameters": [
                "self",
                "title",
                "content"
              ]
            },
            {
              "name": "_extract_context",
              "docstring": "Extract context around position.",
              "line_range": [
                332,
                336
              ],
              "parameters": [
                "self",
                "content",
                "position",
                "length"
              ]
            },
            {
              "name": "_detect_category",
              "docstring": "Detect item category.",
              "line_range": [
                338,
                351
              ],
              "parameters": [
                "self",
                "title",
                "content"
              ]
            },
            {
              "name": "_estimate_effort",
              "docstring": "Estimate effort required.",
              "line_range": [
                353,
                362
              ],
              "parameters": [
                "self",
                "title",
                "content"
              ]
            },
            {
              "name": "_extract_tags",
              "docstring": "Extract relevant tags.",
              "line_range": [
                364,
                378
              ],
              "parameters": [
                "self",
                "title",
                "content",
                "source_dir"
              ]
            },
            {
              "name": "_is_noise_checkbox",
              "docstring": "Check if checkbox is noise (navigation, etc).",
              "line_range": [
                380,
                384
              ],
              "parameters": [
                "self",
                "text"
              ]
            },
            {
              "name": "_parse_json_files",
              "docstring": "Parse structured JSON files for existing data.",
              "line_range": [
                386,
                402
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_process_structured_json",
              "docstring": "Process structured JSON data.",
              "line_range": [
                404,
                419
              ],
              "parameters": [
                "self",
                "data",
                "file_path"
              ]
            },
            {
              "name": "_add_json_item",
              "docstring": "Add item from JSON structure.",
              "line_range": [
                421,
                441
              ],
              "parameters": [
                "self",
                "item",
                "file_path",
                "item_type"
              ]
            },
            {
              "name": "_assess_json_strategic_value",
              "docstring": "Assess strategic value from JSON item.",
              "line_range": [
                443,
                450
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "_extract_innovation_concepts",
              "docstring": "Extract innovation concepts from content.",
              "line_range": [
                452,
                482
              ],
              "parameters": [
                "self",
                "file_path",
                "content",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_enhance_items",
              "docstring": "Post-process items to enhance metadata and find relationships.",
              "line_range": [
                484,
                501
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_find_related_items",
              "docstring": "Find related items based on content similarity.",
              "line_range": [
                503,
                517
              ],
              "parameters": [
                "self",
                "item",
                "id_map",
                "title_map"
              ]
            },
            {
              "name": "generate_comprehensive_report",
              "docstring": "Generate comprehensive analysis report.",
              "line_range": [
                519,
                561
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_comprehensive_index",
              "docstring": "Save comprehensive index and reports.",
              "line_range": [
                563,
                582
              ],
              "parameters": [
                "self",
                "output_dir"
              ]
            },
            {
              "name": "_generate_analysis_report",
              "docstring": "Generate human-readable analysis report.",
              "line_range": [
                584,
                658
              ],
              "parameters": [
                "self",
                "report"
              ]
            },
            {
              "name": "_format_dict",
              "docstring": "Format dictionary for markdown display.",
              "line_range": [
                660,
                662
              ],
              "parameters": [
                "self",
                "d"
              ]
            },
            {
              "name": "_format_items_list",
              "docstring": "Format items list for markdown display.",
              "line_range": [
                664,
                677
              ],
              "parameters": [
                "self",
                "items"
              ]
            },
            {
              "name": "_extract_json_tasks",
              "docstring": "Extract tasks from JSON tasks array.",
              "line_range": [
                679,
                684
              ],
              "parameters": [
                "self",
                "tasks_data",
                "file_path",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_json_ideas",
              "docstring": "Extract ideas from JSON ideas array.",
              "line_range": [
                686,
                691
              ],
              "parameters": [
                "self",
                "ideas_data",
                "file_path",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_json_sessions",
              "docstring": "Extract sessions from JSON sessions array.",
              "line_range": [
                693,
                698
              ],
              "parameters": [
                "self",
                "sessions_data",
                "file_path",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_json_array",
              "docstring": "Extract items from JSON array.",
              "line_range": [
                700,
                711
              ],
              "parameters": [
                "self",
                "array_data",
                "file_path",
                "source_dir",
                "priority"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self._init_patterns"
        ],
        "_init_patterns": [
          "re.compile"
        ],
        "scan_all_directories": [
          "logger.info",
          "self._scan_root_files",
          "self._scan_directory",
          "len",
          "self._enhance_items",
          "self._parse_json_files"
        ],
        "_scan_directory": [
          "file_path.is_file",
          "logger.info",
          "logger.warning",
          "dir_path.exists",
          "self._should_scan_file",
          "self._scan_file",
          "dir_path.glob"
        ],
        "_scan_root_files": [
          "self._scan_file",
          "self._should_scan_file",
          "file_path.is_file"
        ],
        "_should_scan_file": [],
        "_scan_file": [
          "self._extract_from_text",
          "f.read",
          "open",
          "logger.error",
          "self._extract_from_json"
        ],
        "_extract_from_text": [
          "self._extract_innovation_concepts",
          "self._create_item_from_match",
          "self._create_checkbox_item",
          "match.start",
          "match.group",
          "self._create_simple_item",
          "self._is_noise_checkbox"
        ],
        "_extract_from_json": [
          "json.loads",
          "self._extract_json_array",
          "self._extract_json_sessions",
          "self._extract_json_ideas",
          "logger.warning",
          "self._extract_json_tasks",
          "isinstance"
        ],
        "_create_item_from_match": [
          "ProjectItem",
          "self._extract_tags",
          "datetime.now",
          "str",
          "self._detect_status",
          "match.start",
          "match.group",
          "self._extract_context",
          "self._estimate_effort",
          "self._detect_category",
          "self._assess_strategic_value",
          "self._detect_priority",
          "title.strip"
        ],
        "_create_checkbox_item": [
          "ProjectItem",
          "self._extract_tags",
          "datetime.now",
          "str",
          "match.start",
          "match.group",
          "self._extract_context",
          "self._estimate_effort",
          "self._detect_category",
          "self._assess_strategic_value",
          "self._detect_priority"
        ],
        "_create_simple_item": [
          "ProjectItem",
          "datetime.now",
          "str",
          "self._extract_context",
          "title.strip"
        ],
        "_detect_status": [
          "max"
        ],
        "_detect_priority": [
          "max"
        ],
        "_assess_strategic_value": [],
        "_extract_context": [
          "max",
          "min",
          "len"
        ],
        "_detect_category": [
          "title.lower",
          "any"
        ],
        "_estimate_effort": [
          "any"
        ],
        "_extract_tags": [
          "source_dir.replace",
          "tags.append",
          "title.lower"
        ],
        "_is_noise_checkbox": [
          "len",
          "text.lower",
          "text.strip",
          "any"
        ],
        "_parse_json_files": [
          "json.load",
          "open",
          "logger.error",
          "file_path.exists",
          "self._process_structured_json"
        ],
        "_process_structured_json": [
          "self._add_json_item",
          "isinstance"
        ],
        "_add_json_item": [
          "ProjectItem",
          "self._assess_json_strategic_value",
          "datetime.now",
          "str",
          "len",
          "item.get"
        ],
        "_assess_json_strategic_value": [
          "item.get"
        ],
        "_extract_innovation_concepts": [
          "ProjectItem",
          "source_dir.replace",
          "enumerate",
          "innovation_lines.append",
          "str",
          "datetime.now",
          "content.find",
          "line.strip",
          "self._extract_context",
          "len",
          "content.split"
        ],
        "_enhance_items": [
          "logger.info",
          "self._find_related_items",
          "re.sub"
        ],
        "_find_related_items": [
          "ref_type.upper",
          "related.append",
          "re.findall"
        ],
        "generate_comprehensive_report": [
          "by_strategic_value.get",
          "datetime.now",
          "by_type.get",
          "by_priority.get",
          "len",
          "by_source.get",
          "by_status.get",
          "asdict"
        ],
        "save_comprehensive_index": [
          "self.generate_comprehensive_report",
          "open",
          "json.dump",
          "self._generate_analysis_report",
          "logger.info",
          "len",
          "f.write",
          "os.makedirs"
        ],
        "_generate_analysis_report": [
          "self._format_dict",
          "len",
          "self._format_items_list"
        ],
        "_format_dict": [
          "sorted",
          "d.items"
        ],
        "_format_items_list": [
          "result.append"
        ],
        "_extract_json_tasks": [
          "self._add_json_item",
          "isinstance"
        ],
        "_extract_json_ideas": [
          "self._add_json_item",
          "isinstance"
        ],
        "_extract_json_sessions": [
          "self._add_json_item",
          "isinstance"
        ],
        "_extract_json_array": [
          "self._add_json_item",
          "str",
          "isinstance"
        ],
        "main": [
          "print",
          "indexer.scan_all_directories",
          "indexer.save_comprehensive_index",
          "logger.info",
          "len",
          "ComprehensiveIndexer",
          "by_strategic.get"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "Set",
        "asdict",
        "dataclass",
        "dataclasses",
        "datetime",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "typing"
      ],
      "hash": null,
      "artifact_id": "433d54ab-98de-412e-8c17-1321c9be140d"
    },
    {
      "module_id": "src.scripts.validate_json",
      "path": "src/scripts/validate_json.py",
      "category": "core",
      "module_doc": "JSON Validation Script\nValidates JSON files against their respective schemas.",
      "functions": [
        {
          "name": "load_json",
          "docstring": "Load JSON file with error handling.",
          "line_range": [
            13,
            23
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_json",
          "docstring": "Validate a JSON file against a schema.",
          "line_range": [
            26,
            49
          ],
          "parameters": [
            "file_path",
            "schema_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json": [
          "json.load",
          "open",
          "print"
        ],
        "validate_json": [
          "print",
          "str",
          "Path",
          "validator.validate",
          "Draft7Validator",
          "load_json"
        ]
      },
      "dependencies": [
        "Draft7Validator",
        "Path",
        "ValidationError",
        "json",
        "jsonschema",
        "pathlib",
        "sys",
        "validate"
      ],
      "hash": null,
      "artifact_id": "8ec595ad-f5aa-41e0-9000-4aea85dd301d"
    },
    {
      "module_id": "src.scripts.validate_refs",
      "path": "src/scripts/validate_refs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_references",
          "docstring": "",
          "line_range": [
            11,
            43
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            46,
            47
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_references": [
          "json.load",
          "enumerate",
          "Path",
          "logger.error",
          "json.dump",
          "broken_links.append",
          "logger.info",
          "target_file.exists",
          "logger.warning",
          "source_file.exists",
          "idea.get"
        ],
        "main": [
          "validate_references"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "3b6c0a7d-5f91-4153-b1bb-11491dc9bcfb"
    },
    {
      "module_id": "src.scripts.create_tasks_index",
      "path": "src/scripts/create_tasks_index.py",
      "category": "core",
      "module_doc": "Tasks Index Creator\nScans all documentation files and creates comprehensive index of tasks, EPICs, TODOs, and other actionable items.",
      "functions": [
        {
          "name": "main",
          "docstring": "Main execution function.",
          "line_range": [
            469,
            515
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            42,
            44
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_init_patterns",
          "docstring": "Initialize regex patterns for task extraction.",
          "line_range": [
            46,
            73
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "extract_from_markdown",
          "docstring": "Extract tasks from markdown file.",
          "line_range": [
            75,
            107
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_extract_status",
          "docstring": "Extract document status.",
          "line_range": [
            109,
            120
          ],
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_priority",
          "docstring": "Extract document priority.",
          "line_range": [
            122,
            135
          ],
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_date",
          "docstring": "Extract document date.",
          "line_range": [
            137,
            142
          ],
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_epics",
          "docstring": "Extract EPIC items.",
          "line_range": [
            144,
            168
          ],
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_tasks",
          "docstring": "Extract explicit task items.",
          "line_range": [
            170,
            194
          ],
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_todos",
          "docstring": "Extract TODO items.",
          "line_range": [
            196,
            219
          ],
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_phases",
          "docstring": "Extract phase/step items.",
          "line_range": [
            221,
            245
          ],
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_checkboxes",
          "docstring": "Extract checkbox items as tasks.",
          "line_range": [
            247,
            275
          ],
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_context",
          "docstring": "Extract surrounding context for a match.",
          "line_range": [
            277,
            286
          ],
          "parameters": [
            "self",
            "content",
            "start",
            "end",
            "context_lines"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            292,
            294
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "scan_documentation",
          "docstring": "Scan all documentation files for tasks.",
          "line_range": [
            296,
            314
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "generate_index",
          "docstring": "Generate comprehensive task index.",
          "line_range": [
            316,
            367
          ],
          "parameters": [
            "self",
            "tasks"
          ],
          "decorators": []
        },
        {
          "name": "generate_summary_report",
          "docstring": "Generate human-readable summary report.",
          "line_range": [
            369,
            446
          ],
          "parameters": [
            "self",
            "index"
          ],
          "decorators": []
        },
        {
          "name": "save_index",
          "docstring": "Save index and summary to files.",
          "line_range": [
            448,
            466
          ],
          "parameters": [
            "self",
            "index",
            "summary",
            "output_dir"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Task",
          "docstring": "Represents a single task or actionable item.",
          "line_range": [
            21,
            36
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "TaskExtractor",
          "docstring": "Extract tasks from various document formats.",
          "line_range": [
            39,
            286
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                42,
                44
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_init_patterns",
              "docstring": "Initialize regex patterns for task extraction.",
              "line_range": [
                46,
                73
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "extract_from_markdown",
              "docstring": "Extract tasks from markdown file.",
              "line_range": [
                75,
                107
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_extract_status",
              "docstring": "Extract document status.",
              "line_range": [
                109,
                120
              ],
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "_extract_priority",
              "docstring": "Extract document priority.",
              "line_range": [
                122,
                135
              ],
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "_extract_date",
              "docstring": "Extract document date.",
              "line_range": [
                137,
                142
              ],
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "_extract_epics",
              "docstring": "Extract EPIC items.",
              "line_range": [
                144,
                168
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_tasks",
              "docstring": "Extract explicit task items.",
              "line_range": [
                170,
                194
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_todos",
              "docstring": "Extract TODO items.",
              "line_range": [
                196,
                219
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_phases",
              "docstring": "Extract phase/step items.",
              "line_range": [
                221,
                245
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_checkboxes",
              "docstring": "Extract checkbox items as tasks.",
              "line_range": [
                247,
                275
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_context",
              "docstring": "Extract surrounding context for a match.",
              "line_range": [
                277,
                286
              ],
              "parameters": [
                "self",
                "content",
                "start",
                "end",
                "context_lines"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "TaskIndexGenerator",
          "docstring": "Generate comprehensive task index.",
          "line_range": [
            289,
            466
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                292,
                294
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "scan_documentation",
              "docstring": "Scan all documentation files for tasks.",
              "line_range": [
                296,
                314
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "generate_index",
              "docstring": "Generate comprehensive task index.",
              "line_range": [
                316,
                367
              ],
              "parameters": [
                "self",
                "tasks"
              ]
            },
            {
              "name": "generate_summary_report",
              "docstring": "Generate human-readable summary report.",
              "line_range": [
                369,
                446
              ],
              "parameters": [
                "self",
                "index"
              ]
            },
            {
              "name": "save_index",
              "docstring": "Save index and summary to files.",
              "line_range": [
                448,
                466
              ],
              "parameters": [
                "self",
                "index",
                "summary",
                "output_dir"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "TaskExtractor",
          "Path"
        ],
        "_init_patterns": [
          "re.compile"
        ],
        "extract_from_markdown": [
          "f.read",
          "self._extract_phases",
          "open",
          "self._extract_status",
          "logger.error",
          "self._extract_epics",
          "self._extract_todos",
          "tasks.extend",
          "self._extract_tasks",
          "self._extract_priority",
          "self._extract_checkboxes",
          "self._extract_date"
        ],
        "_extract_status": [
          "match.group"
        ],
        "_extract_priority": [
          "match.group"
        ],
        "_extract_date": [
          "datetime.now",
          "match.group"
        ],
        "_extract_epics": [
          "match.end",
          "str",
          "match.start",
          "match.group",
          "self._extract_context",
          "tasks.append",
          "Task"
        ],
        "_extract_tasks": [
          "match.end",
          "str",
          "match.start",
          "match.group",
          "self._extract_context",
          "tasks.append",
          "Task"
        ],
        "_extract_todos": [
          "str",
          "match.start",
          "match.group",
          "tasks.append",
          "Task"
        ],
        "_extract_phases": [
          "match.end",
          "str",
          "match.start",
          "match.group",
          "self._extract_context",
          "tasks.append",
          "Task"
        ],
        "_extract_checkboxes": [
          "str",
          "any",
          "match.start",
          "match.group",
          "task_title.upper",
          "tasks.append",
          "Task"
        ],
        "_extract_context": [
          "context.strip",
          "max",
          "min",
          "len",
          "content.split"
        ],
        "scan_documentation": [
          "logger.info",
          "all_tasks.extend",
          "docs_dir.exists",
          "docs_dir.glob"
        ],
        "generate_index": [
          "by_priority.items",
          "by_file.items",
          "datetime.now",
          "by_status.items",
          "len",
          "by_category.items",
          "asdict"
        ],
        "generate_summary_report": [
          "status.upper",
          "Path",
          "category.upper",
          "len",
          "file_categories.items",
          "sorted",
          "priority.upper"
        ],
        "save_index": [
          "Path",
          "output_path.mkdir",
          "open",
          "json.dump",
          "logger.info",
          "f.write"
        ],
        "main": [
          "argparse.ArgumentParser",
          "by_category.get",
          "TaskIndexGenerator",
          "print",
          "generator.generate_summary_report",
          "logger.info",
          "parser.add_argument",
          "by_status.items",
          "len",
          "parser.parse_args",
          "generator.scan_documentation",
          "generator.generate_index",
          "generator.save_index",
          "by_status.get",
          "sorted",
          "by_category.items"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "argparse",
        "asdict",
        "dataclass",
        "dataclasses",
        "datetime",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "typing"
      ],
      "hash": null,
      "artifact_id": "3f7fe688-3514-4281-9042-be498bff7dc4"
    },
    {
      "module_id": "src.scripts.github_sync_manager_enhanced",
      "path": "src/scripts/github_sync_manager_enhanced.py",
      "category": "core",
      "module_doc": "Enhanced GitHub Sync Manager - \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u043b\u0443\u0447\u0448\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0438\u0437 full_project_rollout\n\u0418\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u0443\u0435\u0442: processing results + GitHub API + token management + CLI fallback",
      "functions": [
        {
          "name": "print_info",
          "docstring": "",
          "line_range": [
            25,
            26
          ],
          "parameters": [
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "print_success",
          "docstring": "",
          "line_range": [
            28,
            29
          ],
          "parameters": [
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "print_warning",
          "docstring": "",
          "line_range": [
            31,
            32
          ],
          "parameters": [
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "print_error",
          "docstring": "",
          "line_range": [
            34,
            35
          ],
          "parameters": [
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "print_step",
          "docstring": "",
          "line_range": [
            37,
            38
          ],
          "parameters": [
            "step",
            "total",
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Enhanced CLI interface",
          "line_range": [
            620,
            655
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            43,
            44
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_env_file",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            46,
            57
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_github_token",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0442\u043e\u043a\u0435\u043d\u0430",
          "line_range": [
            59,
            73
          ],
          "parameters": [
            "self",
            "token"
          ],
          "decorators": []
        },
        {
          "name": "check_gh_cli",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 GitHub CLI",
          "line_range": [
            75,
            82
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_token_from_gh_cli",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 \u0438\u0437 GitHub CLI",
          "line_range": [
            84,
            93
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_github_token",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c GitHub \u0442\u043e\u043a\u0435\u043d \u0441 multiple fallbacks\n\nReturns:\n    (token, method) \u0433\u0434\u0435 method = 'env' | 'cli' | 'none'",
          "line_range": [
            95,
            117
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            122,
            164
          ],
          "parameters": [
            "self",
            "repo_owner",
            "repo_name",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "detect_repo_from_git",
          "docstring": "\u0410\u0432\u0442\u043e\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 owner/repo \u0438\u0437 git remote",
          "line_range": [
            166,
            198
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_sync_log",
          "docstring": "Load previous sync results",
          "line_range": [
            200,
            211
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_sync_log",
          "docstring": "Save sync log",
          "line_range": [
            213,
            216
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "api_request",
          "docstring": "Enhanced API request with CLI fallback",
          "line_range": [
            218,
            231
          ],
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_api_request_direct",
          "docstring": "Direct API request",
          "line_range": [
            233,
            261
          ],
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_api_request_via_cli",
          "docstring": "API request via GitHub CLI",
          "line_range": [
            263,
            293
          ],
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "create_github_issue_enhanced",
          "docstring": "Enhanced issue creation (\u0438\u0437 create_github_issues.py)",
          "line_range": [
            295,
            359
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "_format_acceptance_criteria",
          "docstring": "Format acceptance criteria from item metadata",
          "line_range": [
            361,
            380
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "_format_implementation_notes",
          "docstring": "Format implementation notes",
          "line_range": [
            382,
            397
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "validate_before_sync",
          "docstring": "Enhanced validation",
          "line_range": [
            399,
            434
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_enhanced_sync",
          "docstring": "Enhanced sync with full project rollout integration",
          "line_range": [
            436,
            494
          ],
          "parameters": [
            "self",
            "categories"
          ],
          "decorators": []
        },
        {
          "name": "sync_category_enhanced",
          "docstring": "Enhanced category sync",
          "line_range": [
            496,
            554
          ],
          "parameters": [
            "self",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "item_already_synced",
          "docstring": "Check if item was already synced",
          "line_range": [
            556,
            560
          ],
          "parameters": [
            "self",
            "item",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "create_github_epic_enhanced",
          "docstring": "Enhanced epic creation",
          "line_range": [
            562,
            607
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "create_github_discussion_enhanced",
          "docstring": "Enhanced discussion creation (placeholder - requires GraphQL)",
          "line_range": [
            609,
            618
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": [
            18,
            23
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "GitHubTokenManager",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 GitHub \u0442\u043e\u043a\u0435\u043d\u0430\u043c\u0438 (\u0438\u0437 setup_github_token.sh)",
          "line_range": [
            40,
            117
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                43,
                44
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_env_file",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430",
              "line_range": [
                46,
                57
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_github_token",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0442\u043e\u043a\u0435\u043d\u0430",
              "line_range": [
                59,
                73
              ],
              "parameters": [
                "self",
                "token"
              ]
            },
            {
              "name": "check_gh_cli",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 GitHub CLI",
              "line_range": [
                75,
                82
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_token_from_gh_cli",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 \u0438\u0437 GitHub CLI",
              "line_range": [
                84,
                93
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_github_token",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c GitHub \u0442\u043e\u043a\u0435\u043d \u0441 multiple fallbacks\n\nReturns:\n    (token, method) \u0433\u0434\u0435 method = 'env' | 'cli' | 'none'",
              "line_range": [
                95,
                117
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "EnhancedGitHubSyncManager",
          "docstring": "\u0423\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u044b\u0439 GitHub Sync Manager \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 \u0432\u0441\u0435\u0445 \u043b\u0443\u0447\u0448\u0438\u0445 \u043f\u0440\u0430\u043a\u0442\u0438\u043a",
          "line_range": [
            119,
            618
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                122,
                164
              ],
              "parameters": [
                "self",
                "repo_owner",
                "repo_name",
                "dry_run"
              ]
            },
            {
              "name": "detect_repo_from_git",
              "docstring": "\u0410\u0432\u0442\u043e\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 owner/repo \u0438\u0437 git remote",
              "line_range": [
                166,
                198
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_sync_log",
              "docstring": "Load previous sync results",
              "line_range": [
                200,
                211
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_sync_log",
              "docstring": "Save sync log",
              "line_range": [
                213,
                216
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "api_request",
              "docstring": "Enhanced API request with CLI fallback",
              "line_range": [
                218,
                231
              ],
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ]
            },
            {
              "name": "_api_request_direct",
              "docstring": "Direct API request",
              "line_range": [
                233,
                261
              ],
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ]
            },
            {
              "name": "_api_request_via_cli",
              "docstring": "API request via GitHub CLI",
              "line_range": [
                263,
                293
              ],
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ]
            },
            {
              "name": "create_github_issue_enhanced",
              "docstring": "Enhanced issue creation (\u0438\u0437 create_github_issues.py)",
              "line_range": [
                295,
                359
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "_format_acceptance_criteria",
              "docstring": "Format acceptance criteria from item metadata",
              "line_range": [
                361,
                380
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "_format_implementation_notes",
              "docstring": "Format implementation notes",
              "line_range": [
                382,
                397
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "validate_before_sync",
              "docstring": "Enhanced validation",
              "line_range": [
                399,
                434
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run_enhanced_sync",
              "docstring": "Enhanced sync with full project rollout integration",
              "line_range": [
                436,
                494
              ],
              "parameters": [
                "self",
                "categories"
              ]
            },
            {
              "name": "sync_category_enhanced",
              "docstring": "Enhanced category sync",
              "line_range": [
                496,
                554
              ],
              "parameters": [
                "self",
                "category"
              ]
            },
            {
              "name": "item_already_synced",
              "docstring": "Check if item was already synced",
              "line_range": [
                556,
                560
              ],
              "parameters": [
                "self",
                "item",
                "category"
              ]
            },
            {
              "name": "create_github_epic_enhanced",
              "docstring": "Enhanced epic creation",
              "line_range": [
                562,
                607
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "create_github_discussion_enhanced",
              "docstring": "Enhanced discussion creation (placeholder - requires GraphQL)",
              "line_range": [
                609,
                618
              ],
              "parameters": [
                "self",
                "item"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "print_info": [
          "print"
        ],
        "print_success": [
          "print"
        ],
        "print_warning": [
          "print"
        ],
        "print_error": [
          "print"
        ],
        "print_step": [
          "print"
        ],
        "__init__": [
          "GitHubTokenManager",
          "self.detect_repo_from_git",
          "Path",
          "print_info",
          "self.load_sync_log"
        ],
        "load_env_file": [
          "line.split",
          "Path",
          "value.strip",
          "open",
          "line.strip",
          "env_file.exists",
          "key.strip",
          "line.startswith"
        ],
        "test_github_token": [
          "response.json",
          "requests.get"
        ],
        "check_gh_cli": [
          "subprocess.run"
        ],
        "get_token_from_gh_cli": [
          "subprocess.run"
        ],
        "get_github_token": [
          "self.check_gh_cli",
          "self.test_github_token",
          "print_warning",
          "os.getenv",
          "self.get_token_from_gh_cli"
        ],
        "detect_repo_from_git": [
          "url.startswith",
          "url.replace",
          "path.split",
          "print_warning",
          "print_info",
          "subprocess.run",
          "len",
          "url.split",
          "url.endswith"
        ],
        "load_sync_log": [
          "json.load",
          "open"
        ],
        "save_sync_log": [
          "open",
          "json.dump"
        ],
        "api_request": [
          "time.sleep",
          "self._api_request_via_cli",
          "print_error",
          "self._api_request_direct"
        ],
        "_api_request_direct": [
          "requests.post",
          "ValueError",
          "requests.get",
          "print_error",
          "response.json",
          "int",
          "print_warning",
          "method.upper",
          "response.raise_for_status",
          "requests.patch"
        ],
        "_api_request_via_cli": [
          "json.dumps",
          "cmd.extend",
          "json.loads",
          "print_error",
          "print_warning",
          "subprocess.run",
          "method.upper"
        ],
        "create_github_issue_enhanced": [
          "processing_meta.get",
          "self.api_request",
          "self._format_implementation_notes",
          "print_info",
          "print_success",
          "labels.append",
          "item.get",
          "self._format_acceptance_criteria"
        ],
        "_format_acceptance_criteria": [
          "criteria.extend",
          "item.get",
          "criteria.append"
        ],
        "_format_implementation_notes": [
          "item.get",
          "processing_meta.get",
          "notes.append"
        ],
        "validate_before_sync": [
          "print_error",
          "print_step",
          "self.api_request",
          "user_info.get",
          "file_path.exists",
          "print_success",
          "repo_info.get"
        ],
        "run_enhanced_sync": [
          "enumerate",
          "print",
          "datetime.now",
          "print_step",
          "result.get",
          "self.validate_before_sync",
          "print_info",
          "self.sync_category_enhanced",
          "print_success",
          "self.save_sync_log"
        ],
        "sync_category_enhanced": [
          "self.item_already_synced",
          "json.load",
          "datetime.now",
          "print_error",
          "result.get",
          "print_warning",
          "open",
          "print_info",
          "self.create_github_issue_enhanced",
          "file_path.exists",
          "self.create_github_epic_enhanced",
          "self.create_github_discussion_enhanced",
          "item.get",
          "data.get"
        ],
        "item_already_synced": [
          "item.get"
        ],
        "create_github_epic_enhanced": [
          "item.get",
          "self.api_request",
          "print_info",
          "print_success"
        ],
        "create_github_discussion_enhanced": [
          "item.get",
          "print_info",
          "print_warning"
        ],
        "main": [
          "argparse.ArgumentParser",
          "print_error",
          "result.get",
          "print_success",
          "parser.add_argument",
          "len",
          "parser.parse_args",
          "manager.run_enhanced_sync",
          "EnhancedGitHubSyncManager"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "json",
        "os",
        "pathlib",
        "requests",
        "subprocess",
        "sys",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "fded780b-0726-4bb0-a35c-dfc859eb725a"
    },
    {
      "module_id": "src.scripts.collector",
      "path": "src/scripts/collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "apply_filters",
          "docstring": "",
          "line_range": [
            13,
            29
          ],
          "parameters": [
            "files",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "collect_files",
          "docstring": "",
          "line_range": [
            32,
            38
          ],
          "parameters": [
            "root_dir",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "generate_struct",
          "docstring": "",
          "line_range": [
            41,
            88
          ],
          "parameters": [
            "root_dir",
            "output"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            91,
            92
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "apply_filters": [
          "filtered.append",
          "fnmatch.fnmatch",
          "pattern.startswith"
        ],
        "collect_files": [
          "path.relative_to",
          "path.is_file",
          "str",
          "apply_filters",
          "files.append",
          "root_dir.rglob"
        ],
        "generate_struct": [
          "json.load",
          "output_path.exists",
          "str",
          "Path",
          "json.dump",
          "logger.info",
          "output_path.open",
          "len",
          "uuid.uuid4",
          "collect_files",
          "existing.get"
        ],
        "main": [
          "generate_struct"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "logging",
        "pathlib",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "db344116-29b8-4958-8b89-1b64625f5c5b"
    },
    {
      "module_id": "src.scripts.validate_epics",
      "path": "src/scripts/validate_epics.py",
      "category": "core",
      "module_doc": "Epic Data Validator\n\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0445 \u044d\u043f\u0438\u043a\u043e\u0432 \u043f\u0435\u0440\u0435\u0434 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435\u043c GitHub issues",
      "functions": [
        {
          "name": "validate_epic_structure",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u044d\u043f\u0438\u043a\u0430",
          "line_range": [
            12,
            35
          ],
          "parameters": [
            "epic"
          ],
          "decorators": []
        },
        {
          "name": "validate_task_structure",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            37,
            53
          ],
          "parameters": [
            "task",
            "epic_id"
          ],
          "decorators": []
        },
        {
          "name": "validate_priorities",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043e\u0432",
          "line_range": [
            55,
            68
          ],
          "parameters": [
            "data"
          ],
          "decorators": []
        },
        {
          "name": "validate_task_ids",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c ID \u0437\u0430\u0434\u0430\u0447",
          "line_range": [
            70,
            82
          ],
          "parameters": [
            "data"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438",
          "line_range": [
            84,
            131
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_epic_structure": [
          "errors.append",
          "isinstance"
        ],
        "validate_task_structure": [
          "errors.append",
          "task.get",
          "isinstance"
        ],
        "validate_priorities": [
          "epic.get",
          "errors.append",
          "task.get",
          "data.get"
        ],
        "validate_task_ids": [
          "epic.get",
          "set",
          "seen_ids.add",
          "errors.append",
          "task.get",
          "data.get"
        ],
        "main": [
          "epic.get",
          "validate_epic_structure",
          "validate_task_ids",
          "json.load",
          "validate_task_structure",
          "print",
          "Path",
          "sys.exit",
          "open",
          "all_errors.append",
          "validate_priorities",
          "len",
          "epics_file.exists",
          "all_errors.extend",
          "sum",
          "e.get",
          "isinstance"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "json",
        "pathlib",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "b7242731-c73f-487c-93e6-733370942e30"
    },
    {
      "module_id": "src.scripts.epic_roadmap_manager",
      "path": "src/scripts/epic_roadmap_manager.py",
      "category": "core",
      "module_doc": "Epic Roadmap Manager - \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430\u043c\u0438 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0441\u0435\u0441\u0441\u0438\u0439\n\n\u0424\u0443\u043d\u043a\u0446\u0438\u0438:\n- \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 roadmap \u0438 \u043f\u043b\u0430\u043d\u043e\u0432\n- \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u0441\u0435\u0441\u0441\u0438\u0439\n- \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u0441 GitHub epics\n- \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u043e\u0432",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            259,
            291
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            19,
            22
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_roadmap",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c roadmap \u0438\u0437 \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            24,
            31
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_roadmap",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c roadmap \u0432 \u0444\u0430\u0439\u043b",
          "line_range": [
            33,
            40
          ],
          "parameters": [
            "self",
            "roadmap"
          ],
          "decorators": []
        },
        {
          "name": "show_overview",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043e\u0431\u0437\u043e\u0440 roadmap",
          "line_range": [
            42,
            80
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "show_epic_details",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u044d\u043f\u0438\u043a\u0430",
          "line_range": [
            82,
            125
          ],
          "parameters": [
            "self",
            "epic_id"
          ],
          "decorators": []
        },
        {
          "name": "start_session",
          "docstring": "\u041d\u0430\u0447\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043d\u0430\u0434 \u0441\u0435\u0441\u0441\u0438\u0435\u0439",
          "line_range": [
            127,
            189
          ],
          "parameters": [
            "self",
            "epic_id",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "complete_session",
          "docstring": "\u0417\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e",
          "line_range": [
            191,
            257
          ],
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "EpicRoadmapManager",
          "docstring": "",
          "line_range": [
            18,
            257
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                19,
                22
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_roadmap",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c roadmap \u0438\u0437 \u0444\u0430\u0439\u043b\u0430",
              "line_range": [
                24,
                31
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_roadmap",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c roadmap \u0432 \u0444\u0430\u0439\u043b",
              "line_range": [
                33,
                40
              ],
              "parameters": [
                "self",
                "roadmap"
              ]
            },
            {
              "name": "show_overview",
              "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043e\u0431\u0437\u043e\u0440 roadmap",
              "line_range": [
                42,
                80
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "show_epic_details",
              "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u044d\u043f\u0438\u043a\u0430",
              "line_range": [
                82,
                125
              ],
              "parameters": [
                "self",
                "epic_id"
              ]
            },
            {
              "name": "start_session",
              "docstring": "\u041d\u0430\u0447\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043d\u0430\u0434 \u0441\u0435\u0441\u0441\u0438\u0435\u0439",
              "line_range": [
                127,
                189
              ],
              "parameters": [
                "self",
                "epic_id",
                "session_id"
              ]
            },
            {
              "name": "complete_session",
              "docstring": "\u0417\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e",
              "line_range": [
                191,
                257
              ],
              "parameters": [
                "self",
                "session_id"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "load_roadmap": [
          "json.load",
          "open",
          "print"
        ],
        "save_roadmap": [
          "json.dump",
          "open",
          "datetime.now",
          "print"
        ],
        "show_overview": [
          "epic.get",
          "self.load_roadmap",
          "print",
          "stats.get",
          "roadmap.get",
          "epics.items"
        ],
        "show_epic_details": [
          "epic.get",
          "self.load_roadmap",
          "print",
          "session.get",
          "len",
          "roadmap.get",
          "epic_data.get"
        ],
        "start_session": [
          "epic.get",
          "self.load_roadmap",
          "datetime.now",
          "print",
          "self.save_roadmap",
          "session.get",
          "open",
          "json.dump",
          "sess.get",
          "roadmap.get",
          "epic_data.get",
          "os.makedirs"
        ],
        "complete_session": [
          "epic.get",
          "json.load",
          "self.load_roadmap",
          "datetime.now",
          "print",
          "all",
          "self.save_roadmap",
          "session.get",
          "os.remove",
          "open",
          "json.dump",
          "sess.get",
          "os.makedirs",
          "roadmap.get",
          "sessions_log.append",
          "current_session.get"
        ],
        "main": [
          "argparse.ArgumentParser",
          "manager.show_epic_details",
          "EpicRoadmapManager",
          "print",
          "manager.start_session",
          "manager.complete_session",
          "parser.add_argument",
          "manager.show_overview",
          "parser.parse_args"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "datetime",
        "json",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "05c050bd-4175-4e3b-b1bd-7304a947fb7f"
    },
    {
      "module_id": "src.scripts.deploy_embedded_files",
      "path": "src/scripts/deploy_embedded_files.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_json",
          "docstring": "",
          "line_range": [
            931,
            941
          ],
          "parameters": [
            "data",
            "schema",
            "base_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_files",
          "docstring": "",
          "line_range": [
            944,
            950
          ],
          "parameters": [
            "target_dir",
            "backup_root"
          ],
          "decorators": []
        },
        {
          "name": "deploy_embedded_files",
          "docstring": "",
          "line_range": [
            953,
            1007
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            1010,
            1011
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_json": [
          "RefResolver",
          "logger.warning",
          "validate",
          "logger.error"
        ],
        "backup_files": [
          "logger.info",
          "target_dir.exists",
          "shutil.copytree",
          "datetime.now"
        ],
        "deploy_embedded_files": [
          "Path",
          "Path.cwd",
          "backup_files",
          "logger.error",
          "target_path.open",
          "json.dump",
          "logger.info",
          "logger.warning",
          "validate_json",
          "EMBEDDED_FILES.get",
          "target_path.exists",
          "f.write"
        ],
        "main": [
          "deploy_embedded_files"
        ]
      },
      "dependencies": [
        "Path",
        "RefResolver",
        "ValidationError",
        "datetime",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "shutil",
        "validate"
      ],
      "hash": null,
      "artifact_id": "130501be-1b39-4e5f-baaf-fa10e97894aa"
    },
    {
      "module_id": "src.scripts.team.__init__",
      "path": "src/scripts/team/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "a651987e-20fe-4d84-bec3-0f567a0cdf44"
    },
    {
      "module_id": "src.llmstruct.workspace",
      "path": "src/llmstruct/workspace.py",
      "category": "core",
      "module_doc": "Workspace State & Mode Management System\nEnhanced AI-Human Collaboration with Context Boundaries",
      "functions": [
        {
          "name": "create_workspace_manager",
          "docstring": "Factory function to create workspace manager",
          "line_range": [
            461,
            463
          ],
          "parameters": [
            "workspace_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            28,
            36
          ],
          "parameters": [
            "self",
            "workspace_dir"
          ],
          "decorators": []
        },
        {
          "name": "_load_or_create_state",
          "docstring": "Load existing workspace state or create default",
          "line_range": [
            38,
            75
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_permission_templates",
          "docstring": "Load permission templates for different modes",
          "line_range": [
            77,
            128
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "set_mode",
          "docstring": "Set workspace mode(s) with smart combination logic.\n\nArgs:\n    modes: Single mode string \"[code]\" or list of modes [\"code\", \"debug\"]\n    session_id: Optional session identifier\n    \nReturns:\n    Dict with mode change result and applied permissions",
          "line_range": [
            130,
            176
          ],
          "parameters": [
            "self",
            "modes",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "_parse_modes_from_string",
          "docstring": "Parse modes from string like '[code][debug]' to ['code', 'debug']",
          "line_range": [
            178,
            182
          ],
          "parameters": [
            "self",
            "mode_string"
          ],
          "decorators": []
        },
        {
          "name": "_combine_mode_permissions",
          "docstring": "Smart combination of mode permissions (Decision: C - Smart Combination)",
          "line_range": [
            184,
            216
          ],
          "parameters": [
            "self",
            "modes"
          ],
          "decorators": []
        },
        {
          "name": "_get_mode_combination_name",
          "docstring": "Get descriptive name for mode combination",
          "line_range": [
            218,
            232
          ],
          "parameters": [
            "self",
            "modes"
          ],
          "decorators": []
        },
        {
          "name": "get_current_state",
          "docstring": "Get current workspace state",
          "line_range": [
            234,
            236
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "check_permission",
          "docstring": "Check if operation is permitted under current mode.\n\nArgs:\n    operation: Operation type (e.g., \"write_file\", \"run_command\")\n    target: Optional target (file path, command, etc.)\n    \nReturns:\n    Dict with permission result and reasoning",
          "line_range": [
            238,
            302
          ],
          "parameters": [
            "self",
            "operation",
            "target"
          ],
          "decorators": []
        },
        {
          "name": "_get_required_capability",
          "docstring": "Map operations to required capabilities",
          "line_range": [
            304,
            320
          ],
          "parameters": [
            "self",
            "operation"
          ],
          "decorators": []
        },
        {
          "name": "_is_restricted_target",
          "docstring": "Check if target matches any file restrictions",
          "line_range": [
            322,
            334
          ],
          "parameters": [
            "self",
            "target"
          ],
          "decorators": []
        },
        {
          "name": "set_emergency_override",
          "docstring": "Grant emergency override (Hybrid B+C: Escalation + Time-boxing)\n\nArgs:\n    level: Override level (1=extend permissions, 2=filesystem, 3=system)\n    reason: Reason for override\n    duration_minutes: Override duration",
          "line_range": [
            336,
            365
          ],
          "parameters": [
            "self",
            "level",
            "reason",
            "duration_minutes"
          ],
          "decorators": []
        },
        {
          "name": "_check_emergency_override",
          "docstring": "Check if emergency override is active and not expired",
          "line_range": [
            367,
            381
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_strict_mode",
          "docstring": "Integration with existing strict mode system",
          "line_range": [
            383,
            387
          ],
          "parameters": [
            "self",
            "strict_tags"
          ],
          "decorators": []
        },
        {
          "name": "add_decision_workflow",
          "docstring": "Add decision to workflow tracking (for [decide] mode)",
          "line_range": [
            389,
            396
          ],
          "parameters": [
            "self",
            "decision_id",
            "decision_data"
          ],
          "decorators": []
        },
        {
          "name": "get_workspace_status",
          "docstring": "Get comprehensive workspace status for debugging and display",
          "line_range": [
            398,
            420
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_override_time_remaining",
          "docstring": "Get formatted time remaining for emergency override",
          "line_range": [
            422,
            437
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_state",
          "docstring": "Save current state to file",
          "line_range": [
            439,
            442
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_mode_status",
          "docstring": "Get formatted status string for CLI display",
          "line_range": [
            444,
            458
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "WorkspaceStateManager",
          "docstring": "Core workspace state management with mode-based permissions and context boundaries.\n\nFeatures:\n- Multi-dimensional mode system ([code][debug], [discuss][meta])\n- Hybrid permission system (capabilities + file restrictions)\n- Smart mode combinations with context awareness\n- Emergency override protocols with time-boxing\n- Integration with existing strict mode system",
          "line_range": [
            16,
            458
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                28,
                36
              ],
              "parameters": [
                "self",
                "workspace_dir"
              ]
            },
            {
              "name": "_load_or_create_state",
              "docstring": "Load existing workspace state or create default",
              "line_range": [
                38,
                75
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_permission_templates",
              "docstring": "Load permission templates for different modes",
              "line_range": [
                77,
                128
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "set_mode",
              "docstring": "Set workspace mode(s) with smart combination logic.\n\nArgs:\n    modes: Single mode string \"[code]\" or list of modes [\"code\", \"debug\"]\n    session_id: Optional session identifier\n    \nReturns:\n    Dict with mode change result and applied permissions",
              "line_range": [
                130,
                176
              ],
              "parameters": [
                "self",
                "modes",
                "session_id"
              ]
            },
            {
              "name": "_parse_modes_from_string",
              "docstring": "Parse modes from string like '[code][debug]' to ['code', 'debug']",
              "line_range": [
                178,
                182
              ],
              "parameters": [
                "self",
                "mode_string"
              ]
            },
            {
              "name": "_combine_mode_permissions",
              "docstring": "Smart combination of mode permissions (Decision: C - Smart Combination)",
              "line_range": [
                184,
                216
              ],
              "parameters": [
                "self",
                "modes"
              ]
            },
            {
              "name": "_get_mode_combination_name",
              "docstring": "Get descriptive name for mode combination",
              "line_range": [
                218,
                232
              ],
              "parameters": [
                "self",
                "modes"
              ]
            },
            {
              "name": "get_current_state",
              "docstring": "Get current workspace state",
              "line_range": [
                234,
                236
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "check_permission",
              "docstring": "Check if operation is permitted under current mode.\n\nArgs:\n    operation: Operation type (e.g., \"write_file\", \"run_command\")\n    target: Optional target (file path, command, etc.)\n    \nReturns:\n    Dict with permission result and reasoning",
              "line_range": [
                238,
                302
              ],
              "parameters": [
                "self",
                "operation",
                "target"
              ]
            },
            {
              "name": "_get_required_capability",
              "docstring": "Map operations to required capabilities",
              "line_range": [
                304,
                320
              ],
              "parameters": [
                "self",
                "operation"
              ]
            },
            {
              "name": "_is_restricted_target",
              "docstring": "Check if target matches any file restrictions",
              "line_range": [
                322,
                334
              ],
              "parameters": [
                "self",
                "target"
              ]
            },
            {
              "name": "set_emergency_override",
              "docstring": "Grant emergency override (Hybrid B+C: Escalation + Time-boxing)\n\nArgs:\n    level: Override level (1=extend permissions, 2=filesystem, 3=system)\n    reason: Reason for override\n    duration_minutes: Override duration",
              "line_range": [
                336,
                365
              ],
              "parameters": [
                "self",
                "level",
                "reason",
                "duration_minutes"
              ]
            },
            {
              "name": "_check_emergency_override",
              "docstring": "Check if emergency override is active and not expired",
              "line_range": [
                367,
                381
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_strict_mode",
              "docstring": "Integration with existing strict mode system",
              "line_range": [
                383,
                387
              ],
              "parameters": [
                "self",
                "strict_tags"
              ]
            },
            {
              "name": "add_decision_workflow",
              "docstring": "Add decision to workflow tracking (for [decide] mode)",
              "line_range": [
                389,
                396
              ],
              "parameters": [
                "self",
                "decision_id",
                "decision_data"
              ]
            },
            {
              "name": "get_workspace_status",
              "docstring": "Get comprehensive workspace status for debugging and display",
              "line_range": [
                398,
                420
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_override_time_remaining",
              "docstring": "Get formatted time remaining for emergency override",
              "line_range": [
                422,
                437
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_state",
              "docstring": "Save current state to file",
              "line_range": [
                439,
                442
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_mode_status",
              "docstring": "Get formatted status string for CLI display",
              "line_range": [
                444,
                458
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._load_or_create_state",
          "Path",
          "self._load_permission_templates"
        ],
        "_load_or_create_state": [
          "json.load",
          "open",
          "datetime.now",
          "self._save_state"
        ],
        "_load_permission_templates": [],
        "set_mode": [
          "self._save_state",
          "datetime.now",
          "combined_permissions.get",
          "self._combine_mode_permissions",
          "isinstance",
          "self._get_mode_combination_name",
          "len",
          "self._parse_modes_from_string"
        ],
        "_parse_modes_from_string": [
          "re.findall"
        ],
        "_combine_mode_permissions": [
          "set",
          "list",
          "template.get",
          "logger.info",
          "sorted"
        ],
        "_get_mode_combination_name": [
          "sorted",
          "combination_names.get"
        ],
        "get_current_state": [],
        "check_permission": [
          "self._check_emergency_override",
          "permissions.get",
          "self._get_required_capability",
          "self._is_restricted_target"
        ],
        "_get_required_capability": [
          "capability_map.items",
          "operation.startswith"
        ],
        "_is_restricted_target": [
          "fnmatch.fnmatch",
          "restriction.startswith",
          "target.startswith"
        ],
        "set_emergency_override": [
          "self._save_state",
          "expires_at.isoformat",
          "datetime.now",
          "timedelta"
        ],
        "_check_emergency_override": [
          "datetime.fromisoformat",
          "override.get",
          "datetime.now",
          "self._save_state"
        ],
        "integrate_strict_mode": [
          "datetime.now",
          "self._save_state"
        ],
        "add_decision_workflow": [
          "datetime.now",
          "self._save_state"
        ],
        "get_workspace_status": [
          "self._get_override_time_remaining",
          "override.get",
          "len",
          "self._get_mode_combination_name"
        ],
        "_get_override_time_remaining": [
          "datetime.now",
          "int",
          "datetime.fromisoformat",
          "remaining.total_seconds",
          "override.get"
        ],
        "_save_state": [
          "open",
          "json.dump"
        ],
        "get_mode_status": [
          "override.get",
          "self._get_mode_combination_name"
        ],
        "create_workspace_manager": [
          "WorkspaceStateManager"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "Set",
        "Union",
        "datetime",
        "fnmatch",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "timedelta",
        "timezone",
        "typing"
      ],
      "hash": null,
      "artifact_id": "29ce66f3-45d5-4549-89d5-a4070c87766f"
    },
    {
      "module_id": "src.llmstruct.cache",
      "path": "src/llmstruct/cache.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize SQLite cache for JSON files.",
          "line_range": [
            21,
            25
          ],
          "parameters": [
            "self",
            "db_path"
          ],
          "decorators": []
        },
        {
          "name": "create_tables",
          "docstring": "Create tables for metadata and file paths.",
          "line_range": [
            27,
            49
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cache_json",
          "docstring": "Cache JSON metadata and store full file path.",
          "line_range": [
            51,
            90
          ],
          "parameters": [
            "self",
            "json_path",
            "artifact_id",
            "summary",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "get_metadata",
          "docstring": "Retrieve metadata by artifact_id.",
          "line_range": [
            92,
            108
          ],
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "get_full_json",
          "docstring": "Load full JSON by artifact_id.",
          "line_range": [
            110,
            126
          ],
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Close database connection.",
          "line_range": [
            128,
            130
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JSONCache",
          "docstring": "",
          "line_range": [
            20,
            130
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize SQLite cache for JSON files.",
              "line_range": [
                21,
                25
              ],
              "parameters": [
                "self",
                "db_path"
              ]
            },
            {
              "name": "create_tables",
              "docstring": "Create tables for metadata and file paths.",
              "line_range": [
                27,
                49
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cache_json",
              "docstring": "Cache JSON metadata and store full file path.",
              "line_range": [
                51,
                90
              ],
              "parameters": [
                "self",
                "json_path",
                "artifact_id",
                "summary",
                "tags"
              ]
            },
            {
              "name": "get_metadata",
              "docstring": "Retrieve metadata by artifact_id.",
              "line_range": [
                92,
                108
              ],
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "get_full_json",
              "docstring": "Load full JSON by artifact_id.",
              "line_range": [
                110,
                126
              ],
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "close",
              "docstring": "Close database connection.",
              "line_range": [
                128,
                130
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "sqlite3.connect",
          "self.create_tables"
        ],
        "create_tables": [],
        "cache_json": [
          "json.dumps",
          "hashlib.sha256",
          "str",
          "f.read",
          "Path",
          "open",
          "content.encode",
          "logging.error",
          "json_file.exists",
          "logging.info"
        ],
        "get_metadata": [
          "json.loads",
          "cursor.fetchone"
        ],
        "get_full_json": [
          "json.load",
          "logging.error",
          "open",
          "cursor.fetchone"
        ],
        "close": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "hashlib",
        "json",
        "logging",
        "pathlib",
        "sqlite3",
        "typing"
      ],
      "hash": null,
      "artifact_id": "e8d8c52f-0ed5-4acf-9e20-182eb936285e"
    },
    {
      "module_id": "src.llmstruct.json_selector",
      "path": "src/llmstruct/json_selector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_json",
          "docstring": "Filter JSON data by key-value pair and select fields.",
          "line_range": [
            20,
            46
          ],
          "parameters": [
            "data",
            "filter_key",
            "filter_value",
            "fields"
          ],
          "decorators": []
        },
        {
          "name": "select_json",
          "docstring": "Load and filter JSON file, optionally parsing partially.",
          "line_range": [
            49,
            116
          ],
          "parameters": [
            "json_path",
            "filter_key",
            "filter_value",
            "fields",
            "partial"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_json": [
          "item.get",
          "filtered.append",
          "data.get",
          "isinstance"
        ],
        "select_json": [
          "filtered.append",
          "json.load",
          "filter_json",
          "path.append",
          "f.seek",
          "Path",
          "open",
          "ijson.parse",
          "current_item.get",
          "logging.error",
          "json_file.exists",
          "prefix.startswith"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "ijson",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "c8292021-3fa1-4b64-98f5-fe14b7cff962"
    },
    {
      "module_id": "src.llmstruct.workflow_orchestrator",
      "path": "src/llmstruct/workflow_orchestrator.py",
      "category": "core",
      "module_doc": "AI Workflow Orchestrator - Integration Layer for Existing llmstruct Architecture\nExtends CopilotContextManager and SmartContextOrchestrator instead of duplicating",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface that integrates with existing llmstruct architecture",
          "line_range": [
            730,
            768
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__post_init__",
          "docstring": "",
          "line_range": [
            68,
            76
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__post_init__",
          "docstring": "",
          "line_range": [
            95,
            107
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            116,
            157
          ],
          "parameters": [
            "self",
            "project_root",
            "debug"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_onboarding_guide",
          "docstring": "Generate comprehensive AI onboarding guide using existing architecture",
          "line_range": [
            159,
            169
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_project_overview_from_struct",
          "docstring": "Get project overview from struct.json analysis",
          "line_range": [
            171,
            189
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_existing_architecture_guide",
          "docstring": "Guide to existing llmstruct architecture",
          "line_range": [
            191,
            213
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_copilot_integration_guide",
          "docstring": "Guide for proper CopilotContextManager usage",
          "line_range": [
            215,
            228
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_context_orchestration_guide",
          "docstring": "Guide for SmartContextOrchestrator usage",
          "line_range": [
            230,
            245
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_struct_analysis_guide",
          "docstring": "Guide for proper struct.json analysis approach",
          "line_range": [
            247,
            265
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_current_context",
          "docstring": "Get comprehensive current context using existing architecture",
          "line_range": [
            267,
            306
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_struct_analysis",
          "docstring": "Analyze struct.json for current codebase state",
          "line_range": [
            308,
            362
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_architecture_from_struct",
          "docstring": "Analyze architecture patterns from struct.json",
          "line_range": [
            364,
            382
          ],
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_function_duplication",
          "docstring": "Analyze function duplication across modules",
          "line_range": [
            384,
            405
          ],
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_complexity_metrics",
          "docstring": "Calculate complexity metrics from struct.json",
          "line_range": [
            407,
            423
          ],
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_complexity_score",
          "docstring": "Calculate overall complexity score",
          "line_range": [
            425,
            438
          ],
          "parameters": [
            "self",
            "stats"
          ],
          "decorators": []
        },
        {
          "name": "_get_orchestrator_state",
          "docstring": "Get SmartContextOrchestrator state",
          "line_range": [
            440,
            451
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "analyze_codebase_for_duplicates",
          "docstring": "Analyze codebase for duplicate functions using struct.json (AST/hash analysis by mode).",
          "line_range": [
            453,
            575
          ],
          "parameters": [
            "self",
            "deep_duplicates",
            "no_prod_filter"
          ],
          "decorators": []
        },
        {
          "name": "sync_with_existing_architecture",
          "docstring": "Sync with existing llmstruct architecture instead of duplicating",
          "line_range": [
            577,
            600
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "create_task",
          "docstring": "Create new task (this is new functionality, not duplication)",
          "line_range": [
            606,
            634
          ],
          "parameters": [
            "self",
            "title",
            "description",
            "priority",
            "tags",
            "dependencies"
          ],
          "decorators": []
        },
        {
          "name": "get_active_tasks",
          "docstring": "Get all active tasks",
          "line_range": [
            636,
            644
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_json_safe",
          "docstring": "Safe JSON loading with error handling",
          "line_range": [
            646,
            656
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_save_json_safe",
          "docstring": "Safe JSON saving with error handling",
          "line_range": [
            658,
            667
          ],
          "parameters": [
            "self",
            "file_path",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_get_active_session_context",
          "docstring": "Get current session context",
          "line_range": [
            670,
            674
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_identify_key_components",
          "docstring": "Identify key components from struct analysis",
          "line_range": [
            676,
            687
          ],
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_get_workflow_patterns",
          "docstring": "Define workflow patterns that integrate with existing architecture",
          "line_range": [
            689,
            709
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_available_commands",
          "docstring": "Available commands that work with existing architecture",
          "line_range": [
            711,
            727
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "is_prod_func",
          "docstring": "",
          "line_range": [
            484,
            486
          ],
          "parameters": [
            "paths"
          ],
          "decorators": []
        },
        {
          "name": "is_only_tests_or_archive",
          "docstring": "",
          "line_range": [
            487,
            489
          ],
          "parameters": [
            "paths"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TaskStatus",
          "docstring": "",
          "line_range": [
            35,
            40
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "SessionType",
          "docstring": "",
          "line_range": [
            43,
            48
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "Task",
          "docstring": "Structured task representation",
          "line_range": [
            52,
            76
          ],
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "",
              "line_range": [
                68,
                76
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "Session",
          "docstring": "AI work session with context and goals",
          "line_range": [
            80,
            107
          ],
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "",
              "line_range": [
                95,
                107
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "WorkflowOrchestrator",
          "docstring": "Integration layer that extends existing llmstruct architecture\nUses CopilotContextManager, SmartContextOrchestrator, and struct.json analysis",
          "line_range": [
            110,
            727
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                116,
                157
              ],
              "parameters": [
                "self",
                "project_root",
                "debug"
              ]
            },
            {
              "name": "get_ai_onboarding_guide",
              "docstring": "Generate comprehensive AI onboarding guide using existing architecture",
              "line_range": [
                159,
                169
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_project_overview_from_struct",
              "docstring": "Get project overview from struct.json analysis",
              "line_range": [
                171,
                189
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_existing_architecture_guide",
              "docstring": "Guide to existing llmstruct architecture",
              "line_range": [
                191,
                213
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_copilot_integration_guide",
              "docstring": "Guide for proper CopilotContextManager usage",
              "line_range": [
                215,
                228
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_context_orchestration_guide",
              "docstring": "Guide for SmartContextOrchestrator usage",
              "line_range": [
                230,
                245
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_struct_analysis_guide",
              "docstring": "Guide for proper struct.json analysis approach",
              "line_range": [
                247,
                265
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_current_context",
              "docstring": "Get comprehensive current context using existing architecture",
              "line_range": [
                267,
                306
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_struct_analysis",
              "docstring": "Analyze struct.json for current codebase state",
              "line_range": [
                308,
                362
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_analyze_architecture_from_struct",
              "docstring": "Analyze architecture patterns from struct.json",
              "line_range": [
                364,
                382
              ],
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_analyze_function_duplication",
              "docstring": "Analyze function duplication across modules",
              "line_range": [
                384,
                405
              ],
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_calculate_complexity_metrics",
              "docstring": "Calculate complexity metrics from struct.json",
              "line_range": [
                407,
                423
              ],
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_calculate_complexity_score",
              "docstring": "Calculate overall complexity score",
              "line_range": [
                425,
                438
              ],
              "parameters": [
                "self",
                "stats"
              ]
            },
            {
              "name": "_get_orchestrator_state",
              "docstring": "Get SmartContextOrchestrator state",
              "line_range": [
                440,
                451
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "analyze_codebase_for_duplicates",
              "docstring": "Analyze codebase for duplicate functions using struct.json (AST/hash analysis by mode).",
              "line_range": [
                453,
                575
              ],
              "parameters": [
                "self",
                "deep_duplicates",
                "no_prod_filter"
              ]
            },
            {
              "name": "sync_with_existing_architecture",
              "docstring": "Sync with existing llmstruct architecture instead of duplicating",
              "line_range": [
                577,
                600
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "create_task",
              "docstring": "Create new task (this is new functionality, not duplication)",
              "line_range": [
                606,
                634
              ],
              "parameters": [
                "self",
                "title",
                "description",
                "priority",
                "tags",
                "dependencies"
              ]
            },
            {
              "name": "get_active_tasks",
              "docstring": "Get all active tasks",
              "line_range": [
                636,
                644
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_json_safe",
              "docstring": "Safe JSON loading with error handling",
              "line_range": [
                646,
                656
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_save_json_safe",
              "docstring": "Safe JSON saving with error handling",
              "line_range": [
                658,
                667
              ],
              "parameters": [
                "self",
                "file_path",
                "data"
              ]
            },
            {
              "name": "_get_active_session_context",
              "docstring": "Get current session context",
              "line_range": [
                670,
                674
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_identify_key_components",
              "docstring": "Identify key components from struct analysis",
              "line_range": [
                676,
                687
              ],
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_get_workflow_patterns",
              "docstring": "Define workflow patterns that integrate with existing architecture",
              "line_range": [
                689,
                709
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_available_commands",
              "docstring": "Available commands that work with existing architecture",
              "line_range": [
                711,
                727
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__post_init__": [],
        "__init__": [
          "UniversalConverter",
          "str",
          "print",
          "Path",
          "load_config",
          "SmartContextOrchestrator",
          "CopilotContextManager",
          "SystemCapabilityDiscovery",
          "time.time"
        ],
        "get_ai_onboarding_guide": [
          "self._get_copilot_integration_guide",
          "self._get_struct_analysis_guide",
          "self._get_available_commands",
          "self._get_project_overview_from_struct",
          "self._get_context_orchestration_guide",
          "self._get_workflow_patterns",
          "self._get_existing_architecture_guide"
        ],
        "_get_project_overview_from_struct": [
          "json.load",
          "struct_path.exists",
          "self._identify_key_components",
          "open",
          "self._analyze_architecture_from_struct",
          "len",
          "struct_data.get",
          "logger.warning"
        ],
        "_get_existing_architecture_guide": [],
        "_get_copilot_integration_guide": [],
        "_get_context_orchestration_guide": [],
        "_get_struct_analysis_guide": [],
        "get_current_context": [
          "str",
          "print",
          "self._get_struct_analysis",
          "time.time",
          "self._get_orchestrator_state",
          "logger.warning",
          "self.get_active_tasks",
          "self._get_active_session_context",
          "isinstance"
        ],
        "_get_struct_analysis": [
          "json.load",
          "struct_path.exists",
          "print",
          "self._calculate_complexity_metrics",
          "str",
          "open",
          "self._analyze_architecture_from_struct",
          "logger.error",
          "self._analyze_function_duplication",
          "len",
          "struct_data.get",
          "time.time"
        ],
        "_analyze_architecture_from_struct": [
          "list",
          "Path",
          "directories.keys",
          "len",
          "struct_data.get",
          "directories.items"
        ],
        "_analyze_function_duplication": [
          "function_names.items",
          "module.get",
          "len",
          "struct_data.get"
        ],
        "_calculate_complexity_metrics": [
          "m.get",
          "round",
          "self._calculate_complexity_score",
          "stats.get",
          "len",
          "struct_data.get",
          "sum"
        ],
        "_calculate_complexity_score": [
          "stats.get",
          "round"
        ],
        "_get_orchestrator_state": [
          "str"
        ],
        "analyze_codebase_for_duplicates": [
          "print",
          "ast.parse",
          "self._get_struct_analysis",
          "all_func_bodies.append",
          "struct_analysis.get",
          "func.get",
          "ast.dump",
          "module.get",
          "hashlib.md5",
          "time.time"
        ],
        "is_prod_func": [
          "p.split",
          "set",
          "any"
        ],
        "is_only_tests_or_archive": [
          "p.split",
          "set",
          "all"
        ],
        "sync_with_existing_architecture": [
          "open",
          "logger.error",
          "json.dump",
          "str"
        ],
        "create_task": [
          "str",
          "logger.info",
          "self._save_json_safe",
          "uuid.uuid4",
          "Task",
          "self._load_json_safe",
          "asdict"
        ],
        "get_active_tasks": [
          "self._load_json_safe",
          "t.get"
        ],
        "_load_json_safe": [
          "json.load",
          "open",
          "logger.error",
          "file_path.exists"
        ],
        "_save_json_safe": [
          "open",
          "logger.error",
          "json.dump"
        ],
        "_get_active_session_context": [
          "asdict"
        ],
        "_identify_key_components": [
          "key_components.append",
          "module.get",
          "len",
          "struct_data.get"
        ],
        "_get_workflow_patterns": [],
        "_get_available_commands": [],
        "main": [
          "argparse.ArgumentParser",
          "json.dumps",
          "orchestrator.get_ai_onboarding_guide",
          "print",
          "orchestrator.analyze_codebase_for_duplicates",
          "getattr",
          "parser.add_argument",
          "orchestrator.get_current_context",
          "len",
          "parser.parse_args",
          "orchestrator.sync_with_existing_architecture",
          "results.items",
          "WorkflowOrchestrator",
          "context.get"
        ]
      },
      "dependencies": [
        "Any",
        "CopilotContextManager",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "SmartContextOrchestrator",
        "SystemCapabilityDiscovery",
        "Union",
        "UniversalConverter",
        "ai_self_awareness",
        "argparse",
        "asdict",
        "ast",
        "context_orchestrator",
        "copilot",
        "dataclass",
        "dataclasses",
        "datetime",
        "enum",
        "get_cache_config",
        "get_context_config",
        "get_context_file_path",
        "get_copilot_config",
        "get_exclude_dirs",
        "get_exclude_patterns",
        "get_include_patterns",
        "get_max_file_size",
        "get_queue_config",
        "get_struct_file_path",
        "hashlib",
        "json",
        "llmstruct.modules.cli.utils",
        "load_config",
        "logging",
        "os",
        "parsers.universal_converter",
        "pathlib",
        "save_config",
        "time",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "c971b6a5-7cda-425e-80c2-bd4673a1fc2a"
    },
    {
      "module_id": "src.llmstruct.gh_view",
      "path": "src/llmstruct/gh_view.py",
      "category": "core",
      "module_doc": "GitHub visualization/graph feature (gh-view-v1)\nExport consolidated tasks/ideas from JSON files to GitHub Project cards",
      "functions": [
        {
          "name": "main",
          "docstring": "Main entry point for GitHub Projects export",
          "line_range": [
            177,
            208
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize exporter with configuration",
          "line_range": [
            19,
            25
          ],
          "parameters": [
            "self",
            "config_path"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load configuration from TOML file",
          "line_range": [
            27,
            35
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_mapping",
          "docstring": "Load existing ID mapping between local and GitHub",
          "line_range": [
            37,
            45
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_mapping",
          "docstring": "Save ID mapping to file",
          "line_range": [
            47,
            53
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_run_gh_command",
          "docstring": "Run GitHub CLI command and return success status and output",
          "line_range": [
            55,
            68
          ],
          "parameters": [
            "self",
            "command"
          ],
          "decorators": []
        },
        {
          "name": "load_official_data",
          "docstring": "Load tasks and ideas from official JSON files",
          "line_range": [
            70,
            98
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "format_task_for_github",
          "docstring": "Format task data for GitHub Project card",
          "line_range": [
            100,
            137
          ],
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "format_idea_for_github",
          "docstring": "Format idea data for GitHub Project card",
          "line_range": [
            139,
            174
          ],
          "parameters": [
            "self",
            "idea"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubProjectsExporter",
          "docstring": "Export tasks and ideas to GitHub Projects as cards",
          "line_range": [
            16,
            174
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize exporter with configuration",
              "line_range": [
                19,
                25
              ],
              "parameters": [
                "self",
                "config_path"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load configuration from TOML file",
              "line_range": [
                27,
                35
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_mapping",
              "docstring": "Load existing ID mapping between local and GitHub",
              "line_range": [
                37,
                45
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_mapping",
              "docstring": "Save ID mapping to file",
              "line_range": [
                47,
                53
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_run_gh_command",
              "docstring": "Run GitHub CLI command and return success status and output",
              "line_range": [
                55,
                68
              ],
              "parameters": [
                "self",
                "command"
              ]
            },
            {
              "name": "load_official_data",
              "docstring": "Load tasks and ideas from official JSON files",
              "line_range": [
                70,
                98
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "format_task_for_github",
              "docstring": "Format task data for GitHub Project card",
              "line_range": [
                100,
                137
              ],
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "format_idea_for_github",
              "docstring": "Format idea data for GitHub Project card",
              "line_range": [
                139,
                174
              ],
              "parameters": [
                "self",
                "idea"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self._load_config",
          "self._load_mapping"
        ],
        "_load_config": [
          "open",
          "toml.load",
          "print",
          "config.get"
        ],
        "_load_mapping": [
          "json.load",
          "open"
        ],
        "_save_mapping": [
          "open",
          "json.dump",
          "print"
        ],
        "_run_gh_command": [
          "subprocess.run"
        ],
        "load_official_data": [
          "json.load",
          "print",
          "ideas_file.exists",
          "ideas_data.get",
          "open",
          "len",
          "tasks_data.get",
          "tasks_file.exists"
        ],
        "format_task_for_github": [
          "task.get",
          "body_parts.append",
          "status_map.get"
        ],
        "format_idea_for_github": [
          "body_parts.append",
          "idea.get",
          "status_map.get"
        ],
        "main": [
          "print",
          "sys.exit",
          "exporter.load_official_data",
          "GitHubProjectsExporter",
          "len",
          "exporter.format_task_for_github",
          "exporter.format_idea_for_github"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "datetime",
        "json",
        "pathlib",
        "subprocess",
        "sys",
        "toml",
        "typing"
      ],
      "hash": null,
      "artifact_id": "20f4b6a1-a077-4c8b-8492-666b9b7a7be6"
    },
    {
      "module_id": "src.llmstruct.self_run",
      "path": "src/llmstruct/self_run.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_struct",
          "docstring": "Filter struct.json or init.json based on prompt keywords. Supports dict or list as root.",
          "line_range": [
            20,
            71
          ],
          "parameters": [
            "struct",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "Attach filtered JSON to LLM prompt, using cache if available.",
          "line_range": [
            74,
            114
          ],
          "parameters": [
            "context_path",
            "prompt",
            "cache"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_struct": [
          "filter_json",
          "str",
          "any",
          "struct.get",
          "prompt.lower",
          "item.get",
          "module.get",
          "isinstance"
        ],
        "attach_to_llm_request": [
          "cache.cache_json",
          "json.dumps",
          "filter_json",
          "select_json",
          "cache.get_metadata",
          "Path",
          "context_file.exists",
          "cache.get_full_json",
          "prompt.lower",
          "filter_struct",
          "logging.error",
          "logging.info"
        ]
      },
      "dependencies": [
        "Any",
        "JSONCache",
        "Optional",
        "Path",
        "cache",
        "filter_json",
        "json",
        "json_selector",
        "logging",
        "pathlib",
        "select_json",
        "typing"
      ],
      "hash": null,
      "artifact_id": "ef1f2d3e-fe06-438d-b49a-b72488c1c7f7"
    },
    {
      "module_id": "src.llmstruct.copilot",
      "path": "src/llmstruct/copilot.py",
      "category": "core",
      "module_doc": "LLMStruct Copilot Integration Module\nProvides context-aware development assistance with hybrid copilot capabilities.",
      "functions": [
        {
          "name": "initialize_copilot",
          "docstring": "Initialize copilot context manager for the project.\n\nArgs:\n    project_root: Project root directory\n\nReturns:\n    Configured CopilotContextManager instance",
          "line_range": [
            649,
            659
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "trigger_copilot_event",
          "docstring": "Trigger a copilot event and get relevant context.\n\nArgs:\n    manager: CopilotContextManager instance\n    event_type: Type of event\n    file_path: Optional file path\n    **kwargs: Additional event metadata\n\nReturns:\n    Dict with event context",
          "line_range": [
            662,
            679
          ],
          "parameters": [
            "manager",
            "event_type",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "smart_suggest",
          "docstring": "Get smart suggestions based on query and context.\n\nArgs:\n    manager: CopilotContextManager instance\n    query: Query string\n    context: Context type (code, workflow, task, etc.)\n\nReturns:\n    List of suggestions",
          "line_range": [
            682,
            702
          ],
          "parameters": [
            "manager",
            "query",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "get_optimized_context_for_scenario",
          "docstring": "Get optimized context for specific scenario - standalone function.\n\nArgs:\n    project_root: Project root directory\n    scenario: Usage scenario (vscode_copilot, cli_direct, etc.)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
          "line_range": [
            705,
            728
          ],
          "parameters": [
            "project_root",
            "scenario",
            "file_path",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize the Copilot Context Manager.\n\nArgs:\n    project_root: Project root directory\n    config_path: Path to copilot_init.json",
          "line_range": [
            68,
            90
          ],
          "parameters": [
            "self",
            "project_root",
            "config_path"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load copilot configuration from JSON file.",
          "line_range": [
            92,
            104
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_initialize_layers",
          "docstring": "Initialize context layers from configuration.",
          "line_range": [
            106,
            116
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_context_layer",
          "docstring": "Load a specific context layer.\n\nArgs:\n    layer_name: Name of the layer to load\n    force: Force reload if already loaded\n\nReturns:\n    bool: True if successful",
          "line_range": [
            118,
            160
          ],
          "parameters": [
            "self",
            "layer_name",
            "force"
          ],
          "decorators": []
        },
        {
          "name": "unload_context_layer",
          "docstring": "Unload a context layer to free memory.\n\nArgs:\n    layer_name: Name of the layer to unload\n\nReturns:\n    bool: True if successful",
          "line_range": [
            162,
            180
          ],
          "parameters": [
            "self",
            "layer_name"
          ],
          "decorators": []
        },
        {
          "name": "get_optimized_context",
          "docstring": "Get optimized context using Smart Context Orchestrator.\n\nArgs:\n    scenario: Usage scenario (vscode_copilot, cli_direct, etc.)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
          "line_range": [
            182,
            225
          ],
          "parameters": [
            "self",
            "scenario",
            "file_path",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "_get_legacy_context",
          "docstring": "Fallback to legacy context loading.",
          "line_range": [
            227,
            235
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_for_vscode",
          "docstring": "Get optimized context specifically for VS Code Copilot integration.\n\nArgs:\n    file_path: Optional file path for focused context\n    \nReturns:\n    Token-optimized context for VS Code",
          "line_range": [
            237,
            251
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "get_context_for_event",
          "docstring": "Get relevant context for a copilot event using Smart Context Orchestrator.\n\nArgs:\n    event: The copilot event\n\nReturns:\n    Dict containing relevant context",
          "line_range": [
            252,
            296
          ],
          "parameters": [
            "self",
            "event"
          ],
          "decorators": []
        },
        {
          "name": "_get_legacy_event_context",
          "docstring": "Legacy event context loading as fallback.",
          "line_range": [
            298,
            350
          ],
          "parameters": [
            "self",
            "event"
          ],
          "decorators": []
        },
        {
          "name": "suggest_completion",
          "docstring": "Generate context-aware code completions.\n\nArgs:\n    current_code: Current code content\n    file_path: Path to the current file\n    cursor_position: Cursor position in the code\n\nReturns:\n    List of completion suggestions",
          "line_range": [
            352,
            397
          ],
          "parameters": [
            "self",
            "current_code",
            "file_path",
            "cursor_position"
          ],
          "decorators": []
        },
        {
          "name": "validate_change",
          "docstring": "Validate a code change against safety rules.\n\nArgs:\n    file_path: Path to the changed file\n    change_type: Type of change (create, edit, delete)\n\nReturns:\n    Dict with validation results",
          "line_range": [
            399,
            445
          ],
          "parameters": [
            "self",
            "file_path",
            "change_type"
          ],
          "decorators": []
        },
        {
          "name": "_matches_scope",
          "docstring": "Check if file matches scope pattern.",
          "line_range": [
            447,
            452
          ],
          "parameters": [
            "self",
            "file_path",
            "scope"
          ],
          "decorators": []
        },
        {
          "name": "_matches_trigger",
          "docstring": "Check if change type matches trigger.",
          "line_range": [
            454,
            463
          ],
          "parameters": [
            "self",
            "change_type",
            "trigger"
          ],
          "decorators": []
        },
        {
          "name": "_validate_json_schema",
          "docstring": "Validate JSON file against schema.",
          "line_range": [
            465,
            480
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_check_circular_dependencies",
          "docstring": "Check for circular dependencies.",
          "line_range": [
            482,
            507
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_validate_task_references",
          "docstring": "Validate task references in tasks.json.",
          "line_range": [
            509,
            536
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "get_workflow_suggestions",
          "docstring": "Get workflow suggestions based on current command context.\n\nArgs:\n    command: Current command or operation\n\nReturns:\n    List of workflow suggestions",
          "line_range": [
            538,
            568
          ],
          "parameters": [
            "self",
            "command"
          ],
          "decorators": []
        },
        {
          "name": "refresh_all_contexts",
          "docstring": "Refresh all loaded context layers.\n\nReturns:\n    bool: True if successful",
          "line_range": [
            570,
            584
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_status",
          "docstring": "Get status of all context layers.\n\nReturns:\n    Dict with context status information",
          "line_range": [
            586,
            607
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "export_context",
          "docstring": "Export context in specified format.\n\nArgs:\n    layers: List of layers to export (None for all loaded)\n    format: Export format (json, yaml, etc.)\n\nReturns:\n    Exported context as string",
          "line_range": [
            609,
            631
          ],
          "parameters": [
            "self",
            "layers",
            "format"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Clean up resources.",
          "line_range": [
            633,
            643
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ContextLayer",
          "docstring": "Context layer priorities for copilot integration.",
          "line_range": [
            22,
            28
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "AttachMode",
          "docstring": "Context attachment modes.",
          "line_range": [
            31,
            37
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextLayerConfig",
          "docstring": "Configuration for a context layer.",
          "line_range": [
            41,
            49
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "CopilotEvent",
          "docstring": "Represents a copilot event for context triggering.",
          "line_range": [
            53,
            59
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "CopilotContextManager",
          "docstring": "Manages context layers and integration with GitHub Copilot.\nProvides intelligent context loading and workflow assistance.",
          "line_range": [
            62,
            643
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize the Copilot Context Manager.\n\nArgs:\n    project_root: Project root directory\n    config_path: Path to copilot_init.json",
              "line_range": [
                68,
                90
              ],
              "parameters": [
                "self",
                "project_root",
                "config_path"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load copilot configuration from JSON file.",
              "line_range": [
                92,
                104
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_initialize_layers",
              "docstring": "Initialize context layers from configuration.",
              "line_range": [
                106,
                116
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_context_layer",
              "docstring": "Load a specific context layer.\n\nArgs:\n    layer_name: Name of the layer to load\n    force: Force reload if already loaded\n\nReturns:\n    bool: True if successful",
              "line_range": [
                118,
                160
              ],
              "parameters": [
                "self",
                "layer_name",
                "force"
              ]
            },
            {
              "name": "unload_context_layer",
              "docstring": "Unload a context layer to free memory.\n\nArgs:\n    layer_name: Name of the layer to unload\n\nReturns:\n    bool: True if successful",
              "line_range": [
                162,
                180
              ],
              "parameters": [
                "self",
                "layer_name"
              ]
            },
            {
              "name": "get_optimized_context",
              "docstring": "Get optimized context using Smart Context Orchestrator.\n\nArgs:\n    scenario: Usage scenario (vscode_copilot, cli_direct, etc.)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
              "line_range": [
                182,
                225
              ],
              "parameters": [
                "self",
                "scenario",
                "file_path",
                "max_tokens"
              ]
            },
            {
              "name": "_get_legacy_context",
              "docstring": "Fallback to legacy context loading.",
              "line_range": [
                227,
                235
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_for_vscode",
              "docstring": "Get optimized context specifically for VS Code Copilot integration.\n\nArgs:\n    file_path: Optional file path for focused context\n    \nReturns:\n    Token-optimized context for VS Code",
              "line_range": [
                237,
                251
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "get_context_for_event",
              "docstring": "Get relevant context for a copilot event using Smart Context Orchestrator.\n\nArgs:\n    event: The copilot event\n\nReturns:\n    Dict containing relevant context",
              "line_range": [
                252,
                296
              ],
              "parameters": [
                "self",
                "event"
              ]
            },
            {
              "name": "_get_legacy_event_context",
              "docstring": "Legacy event context loading as fallback.",
              "line_range": [
                298,
                350
              ],
              "parameters": [
                "self",
                "event"
              ]
            },
            {
              "name": "suggest_completion",
              "docstring": "Generate context-aware code completions.\n\nArgs:\n    current_code: Current code content\n    file_path: Path to the current file\n    cursor_position: Cursor position in the code\n\nReturns:\n    List of completion suggestions",
              "line_range": [
                352,
                397
              ],
              "parameters": [
                "self",
                "current_code",
                "file_path",
                "cursor_position"
              ]
            },
            {
              "name": "validate_change",
              "docstring": "Validate a code change against safety rules.\n\nArgs:\n    file_path: Path to the changed file\n    change_type: Type of change (create, edit, delete)\n\nReturns:\n    Dict with validation results",
              "line_range": [
                399,
                445
              ],
              "parameters": [
                "self",
                "file_path",
                "change_type"
              ]
            },
            {
              "name": "_matches_scope",
              "docstring": "Check if file matches scope pattern.",
              "line_range": [
                447,
                452
              ],
              "parameters": [
                "self",
                "file_path",
                "scope"
              ]
            },
            {
              "name": "_matches_trigger",
              "docstring": "Check if change type matches trigger.",
              "line_range": [
                454,
                463
              ],
              "parameters": [
                "self",
                "change_type",
                "trigger"
              ]
            },
            {
              "name": "_validate_json_schema",
              "docstring": "Validate JSON file against schema.",
              "line_range": [
                465,
                480
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_check_circular_dependencies",
              "docstring": "Check for circular dependencies.",
              "line_range": [
                482,
                507
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_validate_task_references",
              "docstring": "Validate task references in tasks.json.",
              "line_range": [
                509,
                536
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "get_workflow_suggestions",
              "docstring": "Get workflow suggestions based on current command context.\n\nArgs:\n    command: Current command or operation\n\nReturns:\n    List of workflow suggestions",
              "line_range": [
                538,
                568
              ],
              "parameters": [
                "self",
                "command"
              ]
            },
            {
              "name": "refresh_all_contexts",
              "docstring": "Refresh all loaded context layers.\n\nReturns:\n    bool: True if successful",
              "line_range": [
                570,
                584
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_status",
              "docstring": "Get status of all context layers.\n\nReturns:\n    Dict with context status information",
              "line_range": [
                586,
                607
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "export_context",
              "docstring": "Export context in specified format.\n\nArgs:\n    layers: List of layers to export (None for all loaded)\n    format: Export format (json, yaml, etc.)\n\nReturns:\n    Exported context as string",
              "line_range": [
                609,
                631
              ],
              "parameters": [
                "self",
                "layers",
                "format"
              ]
            },
            {
              "name": "close",
              "docstring": "Clean up resources.",
              "line_range": [
                633,
                643
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "create_context_orchestrator",
          "os.getcwd",
          "str",
          "Path",
          "self._initialize_layers",
          "JSONCache",
          "self._load_config"
        ],
        "_load_config": [
          "json.load",
          "Path",
          "open",
          "logger.error",
          "logger.info",
          "logger.warning"
        ],
        "_initialize_layers": [
          "ContextLayerConfig",
          "layer_config.get",
          "layers_config.items"
        ],
        "load_context_layer": [
          "json.load",
          "source_path.exists",
          "open",
          "logger.error",
          "logger.info",
          "logger.debug",
          "logger.warning",
          "time.time"
        ],
        "unload_context_layer": [
          "logger.info"
        ],
        "get_optimized_context": [
          "self._get_legacy_context",
          "scenario_mapping.get",
          "logger.error"
        ],
        "_get_legacy_context": [
          "self.load_context_layer"
        ],
        "get_context_for_vscode": [
          "self.get_optimized_context"
        ],
        "get_context_for_event": [
          "scenario_mapping.get",
          "logger.error",
          "self._get_legacy_event_context",
          "self.get_optimized_context"
        ],
        "_get_legacy_event_context": [
          "source_path.exists",
          "json.load",
          "code_triggers.get",
          "triggers.get",
          "open",
          "logger.error",
          "workflow_triggers.get",
          "self.load_context_layer",
          "file_triggers.get"
        ],
        "suggest_completion": [
          "str",
          "struct_context.get",
          "Path",
          "suggestions.append",
          "current_module.get",
          "func.get",
          "self.load_context_layer",
          "module.get"
        ],
        "validate_change": [
          "self._validate_json_schema",
          "result.get",
          "self._check_circular_dependencies",
          "rule.get",
          "self._matches_trigger",
          "self._validate_task_references",
          "len",
          "self._matches_scope",
          "safety_features.get"
        ],
        "_matches_scope": [
          "Path",
          "str",
          "fnmatch"
        ],
        "_matches_trigger": [
          "trigger_map.get"
        ],
        "_validate_json_schema": [
          "json.load",
          "file_path.endswith",
          "open"
        ],
        "_check_circular_dependencies": [
          "str",
          "Path",
          "len",
          "struct_data.get",
          "self.load_context_layer",
          "module.get"
        ],
        "_validate_task_references": [
          "json.load",
          "file_path.endswith",
          "set",
          "open",
          "task_ids.add",
          "tasks_data.get",
          "task.get"
        ],
        "get_workflow_suggestions": [
          "workflows.items",
          "suggestions.extend",
          "command.lower",
          "suggestions.append",
          "workflow.get",
          "self.load_context_layer"
        ],
        "refresh_all_contexts": [
          "self.load_context_layer",
          "logger.info",
          "list"
        ],
        "get_context_status": [
          "list"
        ],
        "export_context": [
          "json.dumps",
          "str",
          "list"
        ],
        "close": [
          "logger.info",
          "hasattr"
        ],
        "initialize_copilot": [
          "CopilotContextManager"
        ],
        "trigger_copilot_event": [
          "CopilotEvent",
          "manager.get_context_for_event"
        ],
        "smart_suggest": [
          "manager.get_workflow_suggestions"
        ],
        "get_optimized_context_for_scenario": [
          "manager.get_optimized_context",
          "manager.close",
          "initialize_copilot",
          "locals"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "SmartContextOrchestrator",
        "Union",
        "create_context_orchestrator",
        "dataclass",
        "dataclasses",
        "enum",
        "fnmatch",
        "json",
        "llmstruct.cache",
        "llmstruct.context_orchestrator",
        "logging",
        "os",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "4f204358-7b56-4e7c-a7c8-ac06c051aa54"
    },
    {
      "module_id": "src.llmstruct.ai_workflow_middleware",
      "path": "src/llmstruct/ai_workflow_middleware.py",
      "category": "core",
      "module_doc": "AI Workflow Middleware - Forces AI Integration with LLMStruct\nIntercepts all AI requests and ensures they go through our orchestration system.",
      "functions": [
        {
          "name": "initialize_ai_middleware",
          "docstring": "Initialize global AI middleware.",
          "line_range": [
            393,
            397
          ],
          "parameters": [
            "project_root",
            "mode"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_middleware",
          "docstring": "Get current AI middleware instance.",
          "line_range": [
            400,
            402
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "process_ai_query",
          "docstring": "Global function to process AI queries through middleware.",
          "line_range": [
            405,
            410
          ],
          "parameters": [
            "query",
            "ai_handler"
          ],
          "decorators": []
        },
        {
          "name": "ensure_llmstruct_integration",
          "docstring": "Decorator that ensures function uses llmstruct system.",
          "line_range": [
            414,
            431
          ],
          "parameters": [
            "func"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            55,
            74
          ],
          "parameters": [
            "self",
            "project_root",
            "mode"
          ],
          "decorators": []
        },
        {
          "name": "_load_middleware_config",
          "docstring": "Load middleware configuration.",
          "line_range": [
            76,
            101
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "process_ai_request",
          "docstring": "Main middleware entry point - ALL AI requests should go through this.\n\nArgs:\n    raw_query: Raw AI query/request\n    ai_handler: Optional custom AI handler function\n    \nReturns:\n    Processed AI response with llmstruct integration",
          "line_range": [
            103,
            135
          ],
          "parameters": [
            "self",
            "raw_query",
            "ai_handler"
          ],
          "decorators": []
        },
        {
          "name": "_parse_ai_request",
          "docstring": "Parse raw query into structured AI request.",
          "line_range": [
            137,
            160
          ],
          "parameters": [
            "self",
            "raw_query"
          ],
          "decorators": []
        },
        {
          "name": "_should_use_llmstruct",
          "docstring": "Determine if request should use llmstruct system.",
          "line_range": [
            162,
            186
          ],
          "parameters": [
            "self",
            "request"
          ],
          "decorators": []
        },
        {
          "name": "_process_with_llmstruct",
          "docstring": "Process request through full llmstruct system.",
          "line_range": [
            188,
            219
          ],
          "parameters": [
            "self",
            "request",
            "ai_handler"
          ],
          "decorators": []
        },
        {
          "name": "_process_bypass",
          "docstring": "Process request without llmstruct system.",
          "line_range": [
            221,
            236
          ],
          "parameters": [
            "self",
            "request",
            "ai_handler"
          ],
          "decorators": []
        },
        {
          "name": "_optimize_context",
          "docstring": "Optimize context using orchestrator.",
          "line_range": [
            238,
            261
          ],
          "parameters": [
            "self",
            "request"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_ai_delegation",
          "docstring": "Analyze which AI should handle this request.",
          "line_range": [
            263,
            280
          ],
          "parameters": [
            "self",
            "request"
          ],
          "decorators": []
        },
        {
          "name": "_get_enhanced_context",
          "docstring": "Get enhanced context with project awareness.",
          "line_range": [
            282,
            295
          ],
          "parameters": [
            "self",
            "request",
            "context_result"
          ],
          "decorators": []
        },
        {
          "name": "_get_capability_summary",
          "docstring": "Get current system capabilities.",
          "line_range": [
            297,
            310
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_generate_usage_guidance",
          "docstring": "Generate guidance for AI on how to use llmstruct system.",
          "line_range": [
            312,
            331
          ],
          "parameters": [
            "self",
            "request"
          ],
          "decorators": []
        },
        {
          "name": "_map_tags_to_scenario",
          "docstring": "Map context tags to orchestrator scenarios.",
          "line_range": [
            333,
            348
          ],
          "parameters": [
            "self",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "_default_ai_processing",
          "docstring": "Default AI processing when no custom handler provided.",
          "line_range": [
            350,
            365
          ],
          "parameters": [
            "self",
            "request",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "get_middleware_stats",
          "docstring": "Get middleware usage statistics.",
          "line_range": [
            367,
            376
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "force_llmstruct_mode",
          "docstring": "Force all future requests to use llmstruct system.",
          "line_range": [
            378,
            381
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "enable_guidance_mode",
          "docstring": "Enable guided mode with llmstruct suggestions.",
          "line_range": [
            383,
            386
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "wrapper",
          "docstring": "",
          "line_range": [
            416,
            429
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "AIWorkflowMode",
          "docstring": "AI workflow enforcement modes.",
          "line_range": [
            21,
            26
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "AIRequest",
          "docstring": "Standardized AI request structure.",
          "line_range": [
            30,
            36
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "AIResponse",
          "docstring": "Standardized AI response structure.",
          "line_range": [
            40,
            46
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "AIWorkflowMiddleware",
          "docstring": "Middleware that ensures ALL AI interactions go through LLMStruct system.\nThis solves the problem of AI not using its own infrastructure.",
          "line_range": [
            49,
            386
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                55,
                74
              ],
              "parameters": [
                "self",
                "project_root",
                "mode"
              ]
            },
            {
              "name": "_load_middleware_config",
              "docstring": "Load middleware configuration.",
              "line_range": [
                76,
                101
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "process_ai_request",
              "docstring": "Main middleware entry point - ALL AI requests should go through this.\n\nArgs:\n    raw_query: Raw AI query/request\n    ai_handler: Optional custom AI handler function\n    \nReturns:\n    Processed AI response with llmstruct integration",
              "line_range": [
                103,
                135
              ],
              "parameters": [
                "self",
                "raw_query",
                "ai_handler"
              ]
            },
            {
              "name": "_parse_ai_request",
              "docstring": "Parse raw query into structured AI request.",
              "line_range": [
                137,
                160
              ],
              "parameters": [
                "self",
                "raw_query"
              ]
            },
            {
              "name": "_should_use_llmstruct",
              "docstring": "Determine if request should use llmstruct system.",
              "line_range": [
                162,
                186
              ],
              "parameters": [
                "self",
                "request"
              ]
            },
            {
              "name": "_process_with_llmstruct",
              "docstring": "Process request through full llmstruct system.",
              "line_range": [
                188,
                219
              ],
              "parameters": [
                "self",
                "request",
                "ai_handler"
              ]
            },
            {
              "name": "_process_bypass",
              "docstring": "Process request without llmstruct system.",
              "line_range": [
                221,
                236
              ],
              "parameters": [
                "self",
                "request",
                "ai_handler"
              ]
            },
            {
              "name": "_optimize_context",
              "docstring": "Optimize context using orchestrator.",
              "line_range": [
                238,
                261
              ],
              "parameters": [
                "self",
                "request"
              ]
            },
            {
              "name": "_analyze_ai_delegation",
              "docstring": "Analyze which AI should handle this request.",
              "line_range": [
                263,
                280
              ],
              "parameters": [
                "self",
                "request"
              ]
            },
            {
              "name": "_get_enhanced_context",
              "docstring": "Get enhanced context with project awareness.",
              "line_range": [
                282,
                295
              ],
              "parameters": [
                "self",
                "request",
                "context_result"
              ]
            },
            {
              "name": "_get_capability_summary",
              "docstring": "Get current system capabilities.",
              "line_range": [
                297,
                310
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_generate_usage_guidance",
              "docstring": "Generate guidance for AI on how to use llmstruct system.",
              "line_range": [
                312,
                331
              ],
              "parameters": [
                "self",
                "request"
              ]
            },
            {
              "name": "_map_tags_to_scenario",
              "docstring": "Map context tags to orchestrator scenarios.",
              "line_range": [
                333,
                348
              ],
              "parameters": [
                "self",
                "tags"
              ]
            },
            {
              "name": "_default_ai_processing",
              "docstring": "Default AI processing when no custom handler provided.",
              "line_range": [
                350,
                365
              ],
              "parameters": [
                "self",
                "request",
                "context"
              ]
            },
            {
              "name": "get_middleware_stats",
              "docstring": "Get middleware usage statistics.",
              "line_range": [
                367,
                376
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "force_llmstruct_mode",
              "docstring": "Force all future requests to use llmstruct system.",
              "line_range": [
                378,
                381
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "enable_guidance_mode",
              "docstring": "Enable guided mode with llmstruct suggestions.",
              "line_range": [
                383,
                386
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "create_context_orchestrator",
          "self._load_middleware_config",
          "str",
          "Path",
          "logger.info",
          "CursorAIBridge",
          "SystemCapabilityDiscovery"
        ],
        "_load_middleware_config": [
          "json.load",
          "config_path.exists",
          "open"
        ],
        "process_ai_request": [
          "self._process_bypass",
          "str",
          "self._process_with_llmstruct",
          "self._parse_ai_request",
          "logger.error",
          "AIResponse",
          "self._should_use_llmstruct",
          "time.time"
        ],
        "_parse_ai_request": [
          "re.sub",
          "context_tags.extend",
          "AIRequest",
          "re.findall",
          "time.time"
        ],
        "_should_use_llmstruct": [],
        "_process_with_llmstruct": [
          "self._optimize_context",
          "ai_handler",
          "self._default_ai_processing",
          "self._get_enhanced_context",
          "self._analyze_ai_delegation",
          "enhanced_context.get",
          "AIResponse",
          "time.time"
        ],
        "_process_bypass": [
          "AIResponse",
          "ai_handler"
        ],
        "_optimize_context": [
          "str",
          "logger.error",
          "self._map_tags_to_scenario",
          "len",
          "context.get"
        ],
        "_analyze_ai_delegation": [
          "delegation.get",
          "logger.error",
          "str"
        ],
        "_get_enhanced_context": [
          "self._get_capability_summary",
          "self._generate_usage_guidance"
        ],
        "_get_capability_summary": [
          "str"
        ],
        "_generate_usage_guidance": [
          "guidance.append"
        ],
        "_map_tags_to_scenario": [],
        "_default_ai_processing": [],
        "get_middleware_stats": [],
        "force_llmstruct_mode": [
          "logger.info"
        ],
        "enable_guidance_mode": [
          "logger.info"
        ],
        "initialize_ai_middleware": [
          "AIWorkflowMiddleware"
        ],
        "get_ai_middleware": [],
        "process_ai_query": [
          "_middleware_instance.process_ai_request",
          "RuntimeError"
        ],
        "ensure_llmstruct_integration": [],
        "wrapper": [
          "str",
          "func",
          "logger.warning",
          "get_ai_middleware",
          "middleware.process_ai_request",
          "kwargs.get"
        ]
      },
      "dependencies": [
        "Any",
        "Callable",
        "CursorAIBridge",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "SystemCapabilityDiscovery",
        "create_context_orchestrator",
        "dataclass",
        "dataclasses",
        "enum",
        "json",
        "llmstruct.ai_self_awareness",
        "llmstruct.context_orchestrator",
        "llmstruct.cursor_ai_bridge",
        "logging",
        "pathlib",
        "re",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "05a25ba8-8330-457d-ac54-ac971161476d"
    },
    {
      "module_id": "src.llmstruct.ai_cli_integration",
      "path": "src/llmstruct/ai_cli_integration.py",
      "category": "core",
      "module_doc": "AI Self-Awareness CLI Integration Module\nIntegrates unused CLI functions into the AI self-awareness system.",
      "functions": [
        {
          "name": "create_ai_cli_integration",
          "docstring": "Factory function to create AI CLI integration instance.",
          "line_range": [
            304,
            306
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_enhanced_cli_summary",
          "docstring": "Get a formatted summary of AI CLI integration capabilities.",
          "line_range": [
            309,
            346
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize CLI integration system.",
          "line_range": [
            21,
            25
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_discover_available_commands",
          "docstring": "Discover which unused CLI commands are available for integration.",
          "line_range": [
            27,
            69
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_ai_status_command",
          "docstring": "Integrate cmd_status for real-time AI system status awareness.",
          "line_range": [
            71,
            100
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_ai_audit_command",
          "docstring": "Integrate cmd_audit for system health analysis awareness.",
          "line_range": [
            102,
            131
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_ai_context_command",
          "docstring": "Integrate cmd_context for context mode awareness.",
          "line_range": [
            133,
            162
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_ai_queue_command",
          "docstring": "Integrate cmd_queue for workflow queue monitoring.",
          "line_range": [
            164,
            193
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_integration_summary",
          "docstring": "Get summary of CLI command integrations for AI awareness.",
          "line_range": [
            195,
            215
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_ai_enhancement_impact",
          "docstring": "Calculate the impact of integrating unused CLI commands on AI capabilities.",
          "line_range": [
            217,
            241
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_create_fallback_status",
          "docstring": "Create fallback status information if cmd_status is not available.",
          "line_range": [
            243,
            256
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_create_fallback_audit",
          "docstring": "Create fallback audit information if cmd_audit is not available.",
          "line_range": [
            258,
            271
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_create_fallback_context",
          "docstring": "Create fallback context information if cmd_context is not available.",
          "line_range": [
            273,
            286
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_create_fallback_queue",
          "docstring": "Create fallback queue information if cmd_queue is not available.",
          "line_range": [
            288,
            301
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "AISelfAwarenessCLIIntegration",
          "docstring": "Integrates unused CLI functions to enhance AI self-awareness capabilities.\nTransforms 21 unused CLI commands into useful AI interaction tools.",
          "line_range": [
            15,
            301
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize CLI integration system.",
              "line_range": [
                21,
                25
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_discover_available_commands",
              "docstring": "Discover which unused CLI commands are available for integration.",
              "line_range": [
                27,
                69
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_ai_status_command",
              "docstring": "Integrate cmd_status for real-time AI system status awareness.",
              "line_range": [
                71,
                100
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_ai_audit_command",
              "docstring": "Integrate cmd_audit for system health analysis awareness.",
              "line_range": [
                102,
                131
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_ai_context_command",
              "docstring": "Integrate cmd_context for context mode awareness.",
              "line_range": [
                133,
                162
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_ai_queue_command",
              "docstring": "Integrate cmd_queue for workflow queue monitoring.",
              "line_range": [
                164,
                193
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_integration_summary",
              "docstring": "Get summary of CLI command integrations for AI awareness.",
              "line_range": [
                195,
                215
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_calculate_ai_enhancement_impact",
              "docstring": "Calculate the impact of integrating unused CLI commands on AI capabilities.",
              "line_range": [
                217,
                241
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_create_fallback_status",
              "docstring": "Create fallback status information if cmd_status is not available.",
              "line_range": [
                243,
                256
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_create_fallback_audit",
              "docstring": "Create fallback audit information if cmd_audit is not available.",
              "line_range": [
                258,
                271
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_create_fallback_context",
              "docstring": "Create fallback context information if cmd_context is not available.",
              "line_range": [
                273,
                286
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_create_fallback_queue",
              "docstring": "Create fallback queue information if cmd_queue is not available.",
              "line_range": [
                288,
                301
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self._discover_available_commands"
        ],
        "_discover_available_commands": [
          "getattr",
          "unused_command_mapping.items",
          "logger.error",
          "hasattr"
        ],
        "integrate_ai_status_command": [
          "str",
          "self._create_fallback_status",
          "cmd_status",
          "logger.error"
        ],
        "integrate_ai_audit_command": [
          "self._create_fallback_audit",
          "cmd_audit",
          "str",
          "logger.error"
        ],
        "integrate_ai_context_command": [
          "self._create_fallback_context",
          "cmd_context",
          "str",
          "logger.error"
        ],
        "integrate_ai_queue_command": [
          "str",
          "self._create_fallback_queue",
          "logger.error",
          "cmd_queue"
        ],
        "get_integration_summary": [
          "info.get",
          "cmd.get",
          "len",
          "sum",
          "self._calculate_ai_enhancement_impact"
        ],
        "_calculate_ai_enhancement_impact": [
          "info.get",
          "any",
          "enhanced_categories.append",
          "len",
          "capability_categories.items"
        ],
        "_create_fallback_status": [
          "str"
        ],
        "_create_fallback_audit": [
          "str"
        ],
        "_create_fallback_context": [],
        "_create_fallback_queue": [],
        "create_ai_cli_integration": [
          "AISelfAwarenessCLIIntegration"
        ],
        "get_ai_enhanced_cli_summary": [
          "integration.integrate_ai_queue_command",
          "integration.integrate_ai_audit_command",
          "create_ai_cli_integration",
          "integration.get_integration_summary",
          "integration.integrate_ai_context_command",
          "integration.integrate_ai_status_command"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "cli_commands",
        "json",
        "llmstruct",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "9b00db93-e1bb-4bf7-93ca-c995678384fa"
    },
    {
      "module_id": "src.llmstruct.cursor_integration",
      "path": "src/llmstruct/cursor_integration.py",
      "category": "core",
      "module_doc": "Cursor IDE Integration Module\nProvides seamless integration between llmstruct AI capabilities and Cursor IDE.",
      "functions": [
        {
          "name": "create_cursor_integration",
          "docstring": "Create a Cursor integration manager for the project.",
          "line_range": [
            435,
            437
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            31,
            35
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_cursor_optimized_context",
          "docstring": "Provide Cursor with perfectly sized context based on query analysis.",
          "line_range": [
            37,
            71
          ],
          "parameters": [
            "self",
            "query_type",
            "file_context"
          ],
          "decorators": []
        },
        {
          "name": "_load_cursor_config",
          "docstring": "Load Cursor-specific configuration.",
          "line_range": [
            73,
            83
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_apply_privacy_filter",
          "docstring": "Apply privacy filtering based on level.",
          "line_range": [
            85,
            101
          ],
          "parameters": [
            "self",
            "context_data",
            "privacy_level"
          ],
          "decorators": []
        },
        {
          "name": "_filter_sensitive_dict",
          "docstring": "Filter sensitive information from dictionary.",
          "line_range": [
            103,
            115
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            121,
            124
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "delegate_to_optimal_ai",
          "docstring": "Route tasks to best AI model based on preferences.",
          "line_range": [
            126,
            160
          ],
          "parameters": [
            "self",
            "task_type",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_delegation_confidence",
          "docstring": "Calculate confidence in AI delegation decision.",
          "line_range": [
            162,
            175
          ],
          "parameters": [
            "self",
            "task_type",
            "selected_ai"
          ],
          "decorators": []
        },
        {
          "name": "_load_cursor_config",
          "docstring": "Load Cursor configuration.",
          "line_range": [
            177,
            187
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            193,
            195
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_goal_aligned_suggestions",
          "docstring": "Provide suggestions aligned with business goals.",
          "line_range": [
            197,
            242
          ],
          "parameters": [
            "self",
            "technical_context"
          ],
          "decorators": []
        },
        {
          "name": "get_priority_guidance",
          "docstring": "Provide priority guidance based on business objectives.",
          "line_range": [
            244,
            270
          ],
          "parameters": [
            "self",
            "feature_options"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_feature_score",
          "docstring": "Calculate priority score for a feature.",
          "line_range": [
            272,
            292
          ],
          "parameters": [
            "self",
            "feature",
            "prioritization"
          ],
          "decorators": []
        },
        {
          "name": "_get_scoring_reasoning",
          "docstring": "Get reasoning for feature scoring.",
          "line_range": [
            294,
            307
          ],
          "parameters": [
            "self",
            "feature",
            "prioritization"
          ],
          "decorators": []
        },
        {
          "name": "_load_personal_bridge",
          "docstring": "Load personal planning bridge data.",
          "line_range": [
            309,
            319
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            325,
            328
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "start_session",
          "docstring": "Start a new Cursor session.",
          "line_range": [
            330,
            349
          ],
          "parameters": [
            "self",
            "session_id",
            "user_preferences"
          ],
          "decorators": []
        },
        {
          "name": "save_session_context",
          "docstring": "Save important context for next session.",
          "line_range": [
            351,
            377
          ],
          "parameters": [
            "self",
            "session_data"
          ],
          "decorators": []
        },
        {
          "name": "_load_session_context",
          "docstring": "Load context from previous sessions.",
          "line_range": [
            379,
            388
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            394,
            400
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_comprehensive_cursor_response",
          "docstring": "Get comprehensive response optimized for Cursor.",
          "line_range": [
            402,
            431
          ],
          "parameters": [
            "self",
            "query",
            "file_context"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CursorSession",
          "docstring": "Represents a Cursor IDE session with context and preferences.",
          "line_range": [
            19,
            25
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "CursorContextManager",
          "docstring": "Manages context optimization specifically for Cursor interactions.",
          "line_range": [
            28,
            115
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                31,
                35
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "get_cursor_optimized_context",
              "docstring": "Provide Cursor with perfectly sized context based on query analysis.",
              "line_range": [
                37,
                71
              ],
              "parameters": [
                "self",
                "query_type",
                "file_context"
              ]
            },
            {
              "name": "_load_cursor_config",
              "docstring": "Load Cursor-specific configuration.",
              "line_range": [
                73,
                83
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_apply_privacy_filter",
              "docstring": "Apply privacy filtering based on level.",
              "line_range": [
                85,
                101
              ],
              "parameters": [
                "self",
                "context_data",
                "privacy_level"
              ]
            },
            {
              "name": "_filter_sensitive_dict",
              "docstring": "Filter sensitive information from dictionary.",
              "line_range": [
                103,
                115
              ],
              "parameters": [
                "self",
                "data"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "CursorMultiAIOrchestrator",
          "docstring": "Coordinates different AI models through Cursor interface.",
          "line_range": [
            118,
            187
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                121,
                124
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "delegate_to_optimal_ai",
              "docstring": "Route tasks to best AI model based on preferences.",
              "line_range": [
                126,
                160
              ],
              "parameters": [
                "self",
                "task_type",
                "context"
              ]
            },
            {
              "name": "_calculate_delegation_confidence",
              "docstring": "Calculate confidence in AI delegation decision.",
              "line_range": [
                162,
                175
              ],
              "parameters": [
                "self",
                "task_type",
                "selected_ai"
              ]
            },
            {
              "name": "_load_cursor_config",
              "docstring": "Load Cursor configuration.",
              "line_range": [
                177,
                187
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "PersonalPlanningCursorBridge",
          "docstring": "Bridge between personal planning and Cursor without exposing sensitive data.",
          "line_range": [
            190,
            319
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                193,
                195
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "get_goal_aligned_suggestions",
              "docstring": "Provide suggestions aligned with business goals.",
              "line_range": [
                197,
                242
              ],
              "parameters": [
                "self",
                "technical_context"
              ]
            },
            {
              "name": "get_priority_guidance",
              "docstring": "Provide priority guidance based on business objectives.",
              "line_range": [
                244,
                270
              ],
              "parameters": [
                "self",
                "feature_options"
              ]
            },
            {
              "name": "_calculate_feature_score",
              "docstring": "Calculate priority score for a feature.",
              "line_range": [
                272,
                292
              ],
              "parameters": [
                "self",
                "feature",
                "prioritization"
              ]
            },
            {
              "name": "_get_scoring_reasoning",
              "docstring": "Get reasoning for feature scoring.",
              "line_range": [
                294,
                307
              ],
              "parameters": [
                "self",
                "feature",
                "prioritization"
              ]
            },
            {
              "name": "_load_personal_bridge",
              "docstring": "Load personal planning bridge data.",
              "line_range": [
                309,
                319
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "CursorSessionManager",
          "docstring": "Maintains context across Cursor sessions for better continuity.",
          "line_range": [
            322,
            388
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                325,
                328
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "start_session",
              "docstring": "Start a new Cursor session.",
              "line_range": [
                330,
                349
              ],
              "parameters": [
                "self",
                "session_id",
                "user_preferences"
              ]
            },
            {
              "name": "save_session_context",
              "docstring": "Save important context for next session.",
              "line_range": [
                351,
                377
              ],
              "parameters": [
                "self",
                "session_data"
              ]
            },
            {
              "name": "_load_session_context",
              "docstring": "Load context from previous sessions.",
              "line_range": [
                379,
                388
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "CursorIntegrationManager",
          "docstring": "Main integration manager that coordinates all Cursor-specific features.",
          "line_range": [
            391,
            431
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                394,
                400
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "get_comprehensive_cursor_response",
              "docstring": "Get comprehensive response optimized for Cursor.",
              "line_range": [
                402,
                431
              ],
              "parameters": [
                "self",
                "query",
                "file_context"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "CursorSessionManager",
          "PersonalPlanningCursorBridge",
          "CursorContextManager",
          "SystemCapabilityDiscovery",
          "CursorMultiAIOrchestrator"
        ],
        "get_cursor_optimized_context": [
          "json.load",
          "str",
          "open",
          "logger.error",
          "file_path.exists",
          "self._apply_privacy_filter",
          "optimal_config.get",
          "context_rules.get"
        ],
        "_load_cursor_config": [
          "json.load",
          "Path",
          "open",
          "logger.error",
          "config_path.exists"
        ],
        "_apply_privacy_filter": [
          "self._filter_sensitive_dict",
          "context_data.items",
          "isinstance"
        ],
        "_filter_sensitive_dict": [
          "key.lower",
          "any",
          "data.items",
          "self._filter_sensitive_dict",
          "isinstance"
        ],
        "delegate_to_optimal_ai": [
          "self._calculate_delegation_confidence",
          "str",
          "Path",
          "logger.error",
          "delegation_rules.get"
        ],
        "_calculate_delegation_confidence": [
          "delegation_rules.get"
        ],
        "get_goal_aligned_suggestions": [
          "suggestions.extend",
          "any",
          "logger.error",
          "technical_context.lower"
        ],
        "get_priority_guidance": [
          "scored_features.sort",
          "str",
          "scored_features.append",
          "logger.error",
          "self._calculate_feature_score",
          "decision_guidance.get",
          "self._get_scoring_reasoning"
        ],
        "_calculate_feature_score": [
          "float",
          "prioritization.get",
          "feature.lower",
          "any"
        ],
        "_get_scoring_reasoning": [
          "reasons.append",
          "feature.lower",
          "any"
        ],
        "_load_personal_bridge": [
          "json.load",
          "open",
          "bridge_path.exists",
          "logger.error"
        ],
        "start_session": [
          "self._load_session_context",
          "previous_context.get",
          "logger.error",
          "CursorSession"
        ],
        "save_session_context": [
          "str",
          "Path",
          "open",
          "logger.error",
          "json.dump",
          "session_data.get"
        ],
        "_load_session_context": [
          "json.load",
          "open",
          "logger.error"
        ],
        "get_comprehensive_cursor_response": [
          "logger.error",
          "str"
        ],
        "create_cursor_integration": [
          "CursorIntegrationManager"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "SystemCapabilityDiscovery",
        "create_context_orchestrator",
        "dataclass",
        "dataclasses",
        "json",
        "llmstruct.ai_self_awareness",
        "llmstruct.context_orchestrator",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "176f02dd-9256-447e-b90b-e3420521f615"
    },
    {
      "module_id": "src.llmstruct.grok",
      "path": "src/llmstruct/grok.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "test_grok",
          "docstring": "",
          "line_range": [
            24,
            30
          ],
          "parameters": [
            "api_key",
            "prompt",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            6,
            11
          ],
          "parameters": [
            "self",
            "api_key",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "generate",
          "docstring": "",
          "line_range": [
            13,
            21
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GrokClient",
          "docstring": "",
          "line_range": [
            5,
            21
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                6,
                11
              ],
              "parameters": [
                "self",
                "api_key",
                "proxy"
              ]
            },
            {
              "name": "generate",
              "docstring": "",
              "line_range": [
                13,
                21
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "requests.Session"
        ],
        "generate": [
          "response.json",
          "prompt.split",
          "response.raise_for_status",
          "len"
        ],
        "test_grok": [
          "time.perf_counter",
          "GrokClient",
          "client.generate"
        ]
      },
      "dependencies": [
        "requests",
        "time"
      ],
      "hash": null,
      "artifact_id": "7386c281-367b-4db1-9114-fb32a67c0b1b"
    },
    {
      "module_id": "src.llmstruct.transpiler",
      "path": "src/llmstruct/transpiler.py",
      "category": "core",
      "module_doc": "AI-Powered Universal Transpiler\nConverts entire codebases from one language to another using LLM analysis",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface for AI transpiler",
          "line_range": [
            475,
            527
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            142,
            149
          ],
          "parameters": [
            "self",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "analyze_source_project",
          "docstring": "Analyze source project structure",
          "line_range": [
            151,
            155
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "create_target_project_structure",
          "docstring": "Create target project directory structure",
          "line_range": [
            157,
            221
          ],
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "_generate_structure_info",
          "docstring": "Generate structure information for README",
          "line_range": [
            223,
            253
          ],
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "transpile_module",
          "docstring": "Transpile a single module using AI",
          "line_range": [
            255,
            318
          ],
          "parameters": [
            "self",
            "module",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_format_functions",
          "docstring": "Format functions for prompt",
          "line_range": [
            320,
            333
          ],
          "parameters": [
            "self",
            "functions"
          ],
          "decorators": []
        },
        {
          "name": "_format_classes",
          "docstring": "Format classes for prompt",
          "line_range": [
            335,
            348
          ],
          "parameters": [
            "self",
            "classes"
          ],
          "decorators": []
        },
        {
          "name": "determine_target_path",
          "docstring": "Determine target file path for transpiled module",
          "line_range": [
            350,
            388
          ],
          "parameters": [
            "self",
            "module"
          ],
          "decorators": []
        },
        {
          "name": "transpile_project",
          "docstring": "Transpile entire project",
          "line_range": [
            390,
            472
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TranspilerConfig",
          "docstring": "Configuration for AI transpiler",
          "line_range": [
            24,
            35
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "LanguageTemplates",
          "docstring": "Templates and patterns for different target languages",
          "line_range": [
            38,
            136
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "AITranspiler",
          "docstring": "AI-powered code transpiler",
          "line_range": [
            139,
            472
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                142,
                149
              ],
              "parameters": [
                "self",
                "config"
              ]
            },
            {
              "name": "analyze_source_project",
              "docstring": "Analyze source project structure",
              "line_range": [
                151,
                155
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "create_target_project_structure",
              "docstring": "Create target project directory structure",
              "line_range": [
                157,
                221
              ],
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "_generate_structure_info",
              "docstring": "Generate structure information for README",
              "line_range": [
                223,
                253
              ],
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "transpile_module",
              "docstring": "Transpile a single module using AI",
              "line_range": [
                255,
                318
              ],
              "parameters": [
                "self",
                "module",
                "context"
              ]
            },
            {
              "name": "_format_functions",
              "docstring": "Format functions for prompt",
              "line_range": [
                320,
                333
              ],
              "parameters": [
                "self",
                "functions"
              ]
            },
            {
              "name": "_format_classes",
              "docstring": "Format classes for prompt",
              "line_range": [
                335,
                348
              ],
              "parameters": [
                "self",
                "classes"
              ]
            },
            {
              "name": "determine_target_path",
              "docstring": "Determine target file path for transpiled module",
              "line_range": [
                350,
                388
              ],
              "parameters": [
                "self",
                "module"
              ]
            },
            {
              "name": "transpile_project",
              "docstring": "Transpile entire project",
              "line_range": [
                390,
                472
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "UniversalConverter",
          "ConverterConfig",
          "LLMClient"
        ],
        "analyze_source_project": [
          "logger.info"
        ],
        "create_target_project_structure": [
          "output_path.exists",
          "Path",
          "output_path.mkdir",
          "src_dir.mkdir",
          "self._generate_structure_info",
          "shutil.rmtree",
          "logger.warning"
        ],
        "_generate_structure_info": [
          "stats.get",
          "analysis.get",
          "len",
          "categories.items",
          "module.get",
          "category.title"
        ],
        "transpile_module": [
          "self._format_functions",
          "str",
          "response.strip",
          "target_lang.upper",
          "logger.error",
          "self._format_classes",
          "ctx_module.get",
          "len",
          "module.get",
          "target_lang.lower"
        ],
        "_format_functions": [
          "len",
          "func.get"
        ],
        "_format_classes": [
          "len",
          "cls.get"
        ],
        "determine_target_path": [
          "Path",
          "module.get",
          "len",
          "module_id.split"
        ],
        "transpile_project": [
          "json.dumps",
          "range",
          "full_target_path.write_text",
          "self.determine_target_path",
          "report_path.write_text",
          "self.transpile_module",
          "transpiled_files.append",
          "str",
          "self.analyze_source_project",
          "Path",
          "errors.append",
          "logger.error",
          "logger.info",
          "analysis.get",
          "len",
          "self.create_target_project_structure"
        ],
        "main": [
          "argparse.ArgumentParser",
          "transpiler.transpile_project",
          "traceback.print_exc",
          "print",
          "Language",
          "TranspilerConfig",
          "AITranspiler",
          "logger.error",
          "parser.add_argument",
          "len",
          "parser.parse_args",
          "exit"
        ]
      },
      "dependencies": [
        "Any",
        "ConverterConfig",
        "Dict",
        "Enum",
        "LLMClient",
        "Language",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "UniversalConverter",
        "argparse",
        "dataclass",
        "dataclasses",
        "enum",
        "json",
        "llm_client",
        "logging",
        "os",
        "parsers.universal_converter",
        "pathlib",
        "shutil",
        "traceback",
        "typing"
      ],
      "hash": null,
      "artifact_id": "cbc13462-2a70-402e-a1b7-359abb9ca5b3"
    },
    {
      "module_id": "src.llmstruct.llm_client",
      "path": "src/llmstruct/llm_client.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize LLMClient with optional Ollama host.",
          "line_range": [
            28,
            36
          ],
          "parameters": [
            "self",
            "ollama_host"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt, context, and optional model.",
          "line_range": [
            38,
            86
          ],
          "parameters": [
            "self",
            "prompt",
            "context_path",
            "mode",
            "model",
            "artifact_ids"
          ],
          "decorators": []
        },
        {
          "name": "_query_grok",
          "docstring": "Query Grok API.",
          "line_range": [
            88,
            115
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_anthropic",
          "docstring": "Query Anthropic API.",
          "line_range": [
            117,
            141
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_ollama",
          "docstring": "Query Ollama API with specified model.",
          "line_range": [
            143,
            156
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "_query_hybrid",
          "docstring": "Query multiple LLMs and combine results.",
          "line_range": [
            158,
            172
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMClient",
          "docstring": "",
          "line_range": [
            27,
            172
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize LLMClient with optional Ollama host.",
              "line_range": [
                28,
                36
              ],
              "parameters": [
                "self",
                "ollama_host"
              ]
            },
            {
              "name": "query",
              "docstring": "Query LLMs with prompt, context, and optional model.",
              "line_range": [
                38,
                86
              ],
              "parameters": [
                "self",
                "prompt",
                "context_path",
                "mode",
                "model",
                "artifact_ids"
              ]
            },
            {
              "name": "_query_grok",
              "docstring": "Query Grok API.",
              "line_range": [
                88,
                115
              ],
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_anthropic",
              "docstring": "Query Anthropic API.",
              "line_range": [
                117,
                141
              ],
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_ollama",
              "docstring": "Query Ollama API with specified model.",
              "line_range": [
                143,
                156
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            },
            {
              "name": "_query_hybrid",
              "docstring": "Query multiple LLMs and combine results.",
              "line_range": [
                158,
                172
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "int",
          "os.getenv",
          "logging.info"
        ],
        "query": [
          "json.dumps",
          "range",
          "json.load",
          "Path",
          "self._query_anthropic",
          "self._query_hybrid",
          "self._query_ollama",
          "logging.error",
          "asyncio.sleep",
          "self._query_grok",
          "logging.warning",
          "logging.info"
        ],
        "_query_grok": [
          "session.post",
          "response.json",
          "result.get",
          "logging.error",
          "aiohttp.ClientSession",
          "logging.info"
        ],
        "_query_anthropic": [
          "session.post",
          "response.json",
          "result.get",
          "logging.error",
          "aiohttp.ClientSession",
          "logging.info"
        ],
        "_query_ollama": [
          "session.post",
          "response.json",
          "result.get",
          "logging.error",
          "logging.debug",
          "aiohttp.ClientSession",
          "logging.info"
        ],
        "_query_hybrid": [
          "logging.info",
          "self._query_anthropic",
          "asyncio.gather",
          "len",
          "self._query_ollama",
          "self._query_grok",
          "isinstance"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "aiohttp",
        "asyncio",
        "dotenv",
        "json",
        "load_dotenv",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "1d092751-cf10-4c6b-a561-061b6e547a20"
    },
    {
      "module_id": "src.llmstruct.__main__",
      "path": "src/llmstruct/__main__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "llmstruct.cli",
        "main"
      ],
      "hash": null,
      "artifact_id": "96a73c0f-9c75-436b-9496-62f095ff9647"
    },
    {
      "module_id": "src.llmstruct.metrics_tracker",
      "path": "src/llmstruct/metrics_tracker.py",
      "category": "core",
      "module_doc": "LLMStruct Metrics Tracker - \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043c\u0435\u0442\u0440\u0438\u043a \u043f\u0440\u043e\u0435\u043a\u0442\u0430\n\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0435\u0442 \u0442\u043e\u043a\u0435\u043d\u044b, performance, \u043e\u0448\u0438\u0431\u043a\u0438, \u043b\u043e\u0436\u043d\u044b\u0435 \u043f\u0443\u0442\u0438 \u043f\u0440\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 master-plans",
      "functions": [
        {
          "name": "get_metrics_tracker",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 MetricsTracker",
          "line_range": [
            364,
            369
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "track_token_usage",
          "docstring": "\u0423\u0434\u043e\u0431\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u043e\u0432",
          "line_range": [
            371,
            373
          ],
          "parameters": [
            "provider",
            "model",
            "input_tokens",
            "output_tokens",
            "cost"
          ],
          "decorators": []
        },
        {
          "name": "track_task_start",
          "docstring": "\u0423\u0434\u043e\u0431\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            375,
            377
          ],
          "parameters": [
            "task_id",
            "task_type"
          ],
          "decorators": []
        },
        {
          "name": "track_task_complete",
          "docstring": "\u0423\u0434\u043e\u0431\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            379,
            381
          ],
          "parameters": [
            "task_id",
            "status",
            "error"
          ],
          "decorators": []
        },
        {
          "name": "track_false_path",
          "docstring": "\u0423\u0434\u043e\u0431\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u043b\u043e\u0436\u043d\u044b\u0445 \u043f\u0443\u0442\u0435\u0439",
          "line_range": [
            383,
            385
          ],
          "parameters": [
            "task_id",
            "description"
          ],
          "decorators": []
        },
        {
          "name": "track_workflow_event",
          "docstring": "\u0423\u0434\u043e\u0431\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f workflow \u0441\u043e\u0431\u044b\u0442\u0438\u0439",
          "line_range": [
            387,
            389
          ],
          "parameters": [
            "event_type",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "track_telegram_interaction",
          "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0447\u0435\u0440\u0435\u0437 Telegram \u0441 \u043f\u043e\u043b\u043d\u044b\u043c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043e\u043c",
          "line_range": [
            391,
            421
          ],
          "parameters": [
            "user_message",
            "bot_response",
            "context_size"
          ],
          "decorators": []
        },
        {
          "name": "track_api_interaction",
          "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 API \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u043f\u043e\u043b\u043d\u044b\u043c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043e\u043c",
          "line_range": [
            423,
            449
          ],
          "parameters": [
            "endpoint",
            "request_tokens",
            "response_tokens",
            "context_tokens"
          ],
          "decorators": []
        },
        {
          "name": "get_token_summary",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0432\u043e\u0434\u043a\u0443 \u043f\u043e \u0442\u043e\u043a\u0435\u043d\u0430\u043c",
          "line_range": [
            451,
            470
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__post_init__",
          "docstring": "",
          "line_range": [
            41,
            43
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__post_init__",
          "docstring": "",
          "line_range": [
            58,
            60
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            65,
            87
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_generate_session_id",
          "docstring": "\u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 ID \u0441\u0435\u0441\u0441\u0438\u0438",
          "line_range": [
            89,
            92
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_current_branch",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0442\u0435\u043a\u0443\u0449\u0443\u044e git \u0432\u0435\u0442\u043a\u0443",
          "line_range": [
            94,
            104
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_commit_hash",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 commit hash",
          "line_range": [
            106,
            116
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_struct_json_hash",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 hash struct.json \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439",
          "line_range": [
            118,
            124
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "track_token_usage",
          "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u043e\u0432",
          "line_range": [
            126,
            142
          ],
          "parameters": [
            "self",
            "provider",
            "model",
            "input_tokens",
            "output_tokens",
            "cost_estimate"
          ],
          "decorators": []
        },
        {
          "name": "start_task",
          "docstring": "\u041d\u0430\u0447\u0430\u043b\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            144,
            155
          ],
          "parameters": [
            "self",
            "task_id",
            "task_type"
          ],
          "decorators": []
        },
        {
          "name": "complete_task",
          "docstring": "\u0417\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            157,
            174
          ],
          "parameters": [
            "self",
            "task_id",
            "status",
            "error_message"
          ],
          "decorators": []
        },
        {
          "name": "track_false_path",
          "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u043b\u043e\u0436\u043d\u044b\u0445 \u043f\u0443\u0442\u0435\u0439",
          "line_range": [
            176,
            185
          ],
          "parameters": [
            "self",
            "task_id",
            "false_path_description"
          ],
          "decorators": []
        },
        {
          "name": "track_rollback",
          "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u043a\u0430\u0442\u043e\u0432",
          "line_range": [
            187,
            193
          ],
          "parameters": [
            "self",
            "task_id"
          ],
          "decorators": []
        },
        {
          "name": "track_retry",
          "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u044b\u0445 \u043f\u043e\u043f\u044b\u0442\u043e\u043a",
          "line_range": [
            195,
            201
          ],
          "parameters": [
            "self",
            "task_id"
          ],
          "decorators": []
        },
        {
          "name": "track_workflow_event",
          "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 workflow \u0441\u043e\u0431\u044b\u0442\u0438\u0439",
          "line_range": [
            203,
            226
          ],
          "parameters": [
            "self",
            "event_type",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "calculate_efficiency_score",
          "docstring": "\u0420\u0430\u0441\u0447\u0435\u0442 \u043e\u0446\u0435\u043d\u043a\u0438 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438",
          "line_range": [
            228,
            253
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_session_summary",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0441\u0435\u0441\u0441\u0438\u0438",
          "line_range": [
            255,
            277
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_session_duration",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0441\u0435\u0441\u0441\u0438\u0438 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445",
          "line_range": [
            279,
            282
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_session",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u0435\u0441\u0441\u0438\u0438",
          "line_range": [
            284,
            292
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_update_aggregate_metrics",
          "docstring": "\u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0430\u0433\u0440\u0435\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043c\u0435\u0442\u0440\u0438\u043a",
          "line_range": [
            294,
            322
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_analytics_data",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432",
          "line_range": [
            324,
            358
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TokenUsage",
          "docstring": "\u041c\u0435\u0442\u0440\u0438\u043a\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u043e\u0432",
          "line_range": [
            17,
            25
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "TaskExecution",
          "docstring": "\u041c\u0435\u0442\u0440\u0438\u043a\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            28,
            43
          ],
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "",
              "line_range": [
                41,
                43
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "WorkflowMetrics",
          "docstring": "\u041c\u0435\u0442\u0440\u0438\u043a\u0438 workflow",
          "line_range": [
            46,
            60
          ],
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "",
              "line_range": [
                58,
                60
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "MetricsTracker",
          "docstring": "\u0426\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u043c\u0435\u0442\u0440\u0438\u043a",
          "line_range": [
            62,
            358
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                65,
                87
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_generate_session_id",
              "docstring": "\u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 ID \u0441\u0435\u0441\u0441\u0438\u0438",
              "line_range": [
                89,
                92
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_current_branch",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0442\u0435\u043a\u0443\u0449\u0443\u044e git \u0432\u0435\u0442\u043a\u0443",
              "line_range": [
                94,
                104
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_commit_hash",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 commit hash",
              "line_range": [
                106,
                116
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_struct_json_hash",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 hash struct.json \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439",
              "line_range": [
                118,
                124
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "track_token_usage",
              "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u043e\u0432",
              "line_range": [
                126,
                142
              ],
              "parameters": [
                "self",
                "provider",
                "model",
                "input_tokens",
                "output_tokens",
                "cost_estimate"
              ]
            },
            {
              "name": "start_task",
              "docstring": "\u041d\u0430\u0447\u0430\u043b\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
              "line_range": [
                144,
                155
              ],
              "parameters": [
                "self",
                "task_id",
                "task_type"
              ]
            },
            {
              "name": "complete_task",
              "docstring": "\u0417\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438",
              "line_range": [
                157,
                174
              ],
              "parameters": [
                "self",
                "task_id",
                "status",
                "error_message"
              ]
            },
            {
              "name": "track_false_path",
              "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u043b\u043e\u0436\u043d\u044b\u0445 \u043f\u0443\u0442\u0435\u0439",
              "line_range": [
                176,
                185
              ],
              "parameters": [
                "self",
                "task_id",
                "false_path_description"
              ]
            },
            {
              "name": "track_rollback",
              "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u043a\u0430\u0442\u043e\u0432",
              "line_range": [
                187,
                193
              ],
              "parameters": [
                "self",
                "task_id"
              ]
            },
            {
              "name": "track_retry",
              "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u044b\u0445 \u043f\u043e\u043f\u044b\u0442\u043e\u043a",
              "line_range": [
                195,
                201
              ],
              "parameters": [
                "self",
                "task_id"
              ]
            },
            {
              "name": "track_workflow_event",
              "docstring": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 workflow \u0441\u043e\u0431\u044b\u0442\u0438\u0439",
              "line_range": [
                203,
                226
              ],
              "parameters": [
                "self",
                "event_type",
                "details"
              ]
            },
            {
              "name": "calculate_efficiency_score",
              "docstring": "\u0420\u0430\u0441\u0447\u0435\u0442 \u043e\u0446\u0435\u043d\u043a\u0438 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438",
              "line_range": [
                228,
                253
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_session_summary",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0441\u0435\u0441\u0441\u0438\u0438",
              "line_range": [
                255,
                277
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_session_duration",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0441\u0435\u0441\u0441\u0438\u0438 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445",
              "line_range": [
                279,
                282
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_session",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u0435\u0441\u0441\u0438\u0438",
              "line_range": [
                284,
                292
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_update_aggregate_metrics",
              "docstring": "\u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0430\u0433\u0440\u0435\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043c\u0435\u0442\u0440\u0438\u043a",
              "line_range": [
                294,
                322
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_analytics_data",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432",
              "line_range": [
                324,
                358
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__post_init__": [],
        "__init__": [
          "logging.info",
          "self._get_current_branch",
          "datetime.now",
          "self._generate_session_id",
          "Path",
          "self._get_commit_hash",
          "self._get_struct_json_hash",
          "WorkflowMetrics",
          "asdict"
        ],
        "_generate_session_id": [
          "timestamp.encode",
          "datetime.now",
          "hashlib.md5"
        ],
        "_get_current_branch": [
          "subprocess.run"
        ],
        "_get_commit_hash": [
          "subprocess.run"
        ],
        "_get_struct_json_hash": [
          "struct_file.exists",
          "open",
          "hashlib.md5",
          "f.read"
        ],
        "track_token_usage": [
          "get_metrics_tracker"
        ],
        "start_task": [
          "TaskExecution",
          "datetime.now",
          "logging.info",
          "asdict"
        ],
        "complete_task": [
          "task_data.get",
          "datetime.fromisoformat",
          "datetime.now",
          "logging.info"
        ],
        "track_false_path": [
          "get_metrics_tracker"
        ],
        "track_rollback": [
          "logging.warning"
        ],
        "track_retry": [
          "logging.info"
        ],
        "track_workflow_event": [
          "get_metrics_tracker"
        ],
        "calculate_efficiency_score": [
          "t.get",
          "max",
          "min",
          "len",
          "sum"
        ],
        "get_session_summary": [
          "t.get",
          "usage.get",
          "len",
          "self.calculate_efficiency_score",
          "sum",
          "self._get_session_duration"
        ],
        "_get_session_duration": [
          "datetime.fromisoformat",
          "datetime.now"
        ],
        "save_session": [
          "logging.info",
          "open",
          "json.dump",
          "self._update_aggregate_metrics"
        ],
        "_update_aggregate_metrics": [
          "json.load",
          "self.get_session_summary",
          "open",
          "json.dump",
          "len",
          "sum"
        ],
        "get_analytics_data": [
          "json.load",
          "open",
          "max"
        ],
        "get_metrics_tracker": [
          "MetricsTracker"
        ],
        "track_task_start": [
          "get_metrics_tracker"
        ],
        "track_task_complete": [
          "get_metrics_tracker"
        ],
        "track_telegram_interaction": [
          "datetime.now",
          "logger.error",
          "logger.info",
          "get_metrics_tracker",
          "len"
        ],
        "track_api_interaction": [
          "logger.info",
          "get_metrics_tracker",
          "logger.error",
          "datetime.now"
        ],
        "get_token_summary": [
          "get_metrics_tracker",
          "logger.error",
          "len"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "asdict",
        "dataclass",
        "dataclasses",
        "datetime",
        "hashlib",
        "json",
        "logging",
        "pathlib",
        "subprocess",
        "time",
        "timedelta",
        "typing"
      ],
      "hash": null,
      "artifact_id": "6de55d89-bbea-46d9-a4ec-99212e423107"
    },
    {
      "module_id": "src.llmstruct.cli",
      "path": "src/llmstruct/cli.py",
      "category": "core",
      "module_doc": "LLMStruct CLI - Main entry point for the command-line interface.",
      "functions": [
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": [
            54,
            314
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "normalize_patterns",
          "docstring": "",
          "line_range": [
            277,
            288
          ],
          "parameters": [
            "arglist"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "main": [
          "argparse.ArgumentParser",
          "copilot_parser.add_argument",
          "query_parser.add_argument",
          "subparsers.add_parser",
          "parse_parser.add_argument",
          "duplicates_parser.add_argument",
          "parser.add_subparsers",
          "context_parser.add_argument",
          "parser.parse_args",
          "review_parser.add_argument",
          "dogfood_parser.add_argument",
          "audit_parser.add_argument"
        ],
        "normalize_patterns": [
          "item.split",
          "p.strip",
          "result.extend",
          "item.strip",
          "result.append"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "analyze_duplicates",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "audit",
        "cli_core",
        "context",
        "copilot",
        "create_cli_core",
        "dogfood",
        "generate_json",
        "get_folder_structure",
        "initialize_copilot",
        "interactive",
        "interactive_legacy",
        "interactive_modular",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.modules.cli.analyze_duplicates",
        "llmstruct.modules.cli.audit",
        "llmstruct.modules.cli.context",
        "llmstruct.modules.cli.copilot",
        "llmstruct.modules.cli.dogfood",
        "llmstruct.modules.cli.handlers",
        "llmstruct.modules.cli.parse",
        "llmstruct.modules.cli.query",
        "llmstruct.modules.cli.review",
        "llmstruct.modules.cli.utils",
        "llmstruct.modules.commands.queue",
        "llmstruct.self_run",
        "load_config",
        "load_gitignore",
        "logging",
        "os",
        "parse",
        "parse_files_from_response",
        "pathlib",
        "process_cli_queue_enhanced",
        "query",
        "re",
        "read_file_content",
        "review",
        "shutil",
        "sys",
        "time",
        "toml",
        "typing",
        "write_to_file"
      ],
      "hash": null,
      "artifact_id": "595413be-c3e2-4e10-931b-91d8c50cec18"
    },
    {
      "module_id": "src.llmstruct.context_orchestrator",
      "path": "src/llmstruct/context_orchestrator.py",
      "category": "core",
      "module_doc": "Smart Context Orchestration for LLMStruct\nOptimizes context loading for different LLM usage scenarios",
      "functions": [
        {
          "name": "create_context_orchestrator",
          "docstring": "Factory function to create context orchestrator.",
          "line_range": [
            506,
            508
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_optimized_context",
          "docstring": "Get optimized context for scenario - convenience function.\n\nArgs:\n    project_root: Project root directory\n    scenario: Usage scenario (cli_direct, vscode_copilot, session_work)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
          "line_range": [
            511,
            543
          ],
          "parameters": [
            "project_root",
            "scenario",
            "file_path",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            57,
            75
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load context orchestration configuration.",
          "line_range": [
            77,
            119
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_for_scenario",
          "docstring": "Get optimized context for specific usage scenario.\n\nArgs:\n    scenario: Usage scenario (cli_direct, vscode_copilot, etc.)\n    file_path: Optional file path for focused context\n    custom_budget: Optional custom token budget\n    \nReturns:\n    Optimized context dictionary",
          "line_range": [
            121,
            161
          ],
          "parameters": [
            "self",
            "scenario",
            "file_path",
            "custom_budget"
          ],
          "decorators": []
        },
        {
          "name": "_get_budget_for_scenario",
          "docstring": "Create budget configuration for scenario.",
          "line_range": [
            163,
            172
          ],
          "parameters": [
            "self",
            "scenario_config"
          ],
          "decorators": []
        },
        {
          "name": "_load_full_context",
          "docstring": "Load complete context without token restrictions.",
          "line_range": [
            174,
            187
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_extract_relationship_summary",
          "docstring": "\u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u043a\u0440\u0430\u0442\u043a\u0438\u0439 \u0433\u0440\u0430\u0444 \u0441\u0432\u044f\u0437\u0435\u0439 \u043c\u0435\u0436\u0434\u0443 \u043c\u043e\u0434\u0443\u043b\u044f\u043c\u0438 \u0438\u0437 struct.json:\n- module_id, path\n- dependencies (\u0442\u043e\u043b\u044c\u043a\u043e \u0438\u043c\u0435\u043d\u0430 \u043c\u043e\u0434\u0443\u043b\u0435\u0439)\n- \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b/\u0444\u0443\u043d\u043a\u0446\u0438\u0438",
          "line_range": [
            189,
            216
          ],
          "parameters": [
            "self",
            "max_modules"
          ],
          "decorators": []
        },
        {
          "name": "_load_focused_context",
          "docstring": "Load focused context optimized for VS Code Copilot.\n- \u0412\u0441\u0435\u0433\u0434\u0430 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 summary \u0438\u0437 init.json (\u0443\u0440\u043e\u0432\u0435\u043d\u044c 1)\n- relationship_context (structural) \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 file_path \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434 \u0438\u043b\u0438 \u044f\u0432\u043d\u043e structural \u0437\u0430\u043f\u0440\u043e\u0441",
          "line_range": [
            218,
            275
          ],
          "parameters": [
            "self",
            "file_path",
            "budget"
          ],
          "decorators": []
        },
        {
          "name": "_load_session_context",
          "docstring": "Load session-specific context.",
          "line_range": [
            277,
            299
          ],
          "parameters": [
            "self",
            "budget"
          ],
          "decorators": []
        },
        {
          "name": "_load_minimal_context",
          "docstring": "Load minimal context for quick operations.",
          "line_range": [
            301,
            319
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_source_with_filtering",
          "docstring": "Load source with optional filtering based on budget.",
          "line_range": [
            321,
            344
          ],
          "parameters": [
            "self",
            "source_name",
            "budget"
          ],
          "decorators": []
        },
        {
          "name": "_get_file_context",
          "docstring": "Get context specific to a file.",
          "line_range": [
            346,
            357
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_extract_essential_parts",
          "docstring": "Extract essential parts of data to fit token budget.",
          "line_range": [
            359,
            381
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_filter_for_current_session",
          "docstring": "Filter data to items relevant to current session.",
          "line_range": [
            383,
            422
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_extract_summary",
          "docstring": "Extract summary information from data.",
          "line_range": [
            424,
            443
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_apply_section_filtering",
          "docstring": "Apply section filtering to exclude specified sections.",
          "line_range": [
            445,
            457
          ],
          "parameters": [
            "self",
            "data",
            "exclude_sections"
          ],
          "decorators": []
        },
        {
          "name": "_update_metrics",
          "docstring": "Update performance metrics.",
          "line_range": [
            459,
            477
          ],
          "parameters": [
            "self",
            "scenario",
            "context",
            "load_time"
          ],
          "decorators": []
        },
        {
          "name": "get_metrics_summary",
          "docstring": "Get summary of context loading metrics.",
          "line_range": [
            479,
            494
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_metrics",
          "docstring": "Save metrics to file for analysis.",
          "line_range": [
            496,
            501
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ContextMode",
          "docstring": "Context loading modes for different scenarios.",
          "line_range": [
            17,
            22
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextLevel",
          "docstring": "Progressive context levels with token budgets.",
          "line_range": [
            25,
            30
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextBudget",
          "docstring": "Token budget configuration for context loading.",
          "line_range": [
            34,
            39
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ContextMetrics",
          "docstring": "Metrics for context loading performance.",
          "line_range": [
            43,
            48
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "SmartContextOrchestrator",
          "docstring": "Orchestrates context loading based on usage scenario and token budget.\nProvides optimized context for different LLM integration patterns.",
          "line_range": [
            51,
            501
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                57,
                75
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load context orchestration configuration.",
              "line_range": [
                77,
                119
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_for_scenario",
              "docstring": "Get optimized context for specific usage scenario.\n\nArgs:\n    scenario: Usage scenario (cli_direct, vscode_copilot, etc.)\n    file_path: Optional file path for focused context\n    custom_budget: Optional custom token budget\n    \nReturns:\n    Optimized context dictionary",
              "line_range": [
                121,
                161
              ],
              "parameters": [
                "self",
                "scenario",
                "file_path",
                "custom_budget"
              ]
            },
            {
              "name": "_get_budget_for_scenario",
              "docstring": "Create budget configuration for scenario.",
              "line_range": [
                163,
                172
              ],
              "parameters": [
                "self",
                "scenario_config"
              ]
            },
            {
              "name": "_load_full_context",
              "docstring": "Load complete context without token restrictions.",
              "line_range": [
                174,
                187
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_extract_relationship_summary",
              "docstring": "\u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u043a\u0440\u0430\u0442\u043a\u0438\u0439 \u0433\u0440\u0430\u0444 \u0441\u0432\u044f\u0437\u0435\u0439 \u043c\u0435\u0436\u0434\u0443 \u043c\u043e\u0434\u0443\u043b\u044f\u043c\u0438 \u0438\u0437 struct.json:\n- module_id, path\n- dependencies (\u0442\u043e\u043b\u044c\u043a\u043e \u0438\u043c\u0435\u043d\u0430 \u043c\u043e\u0434\u0443\u043b\u0435\u0439)\n- \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b/\u0444\u0443\u043d\u043a\u0446\u0438\u0438",
              "line_range": [
                189,
                216
              ],
              "parameters": [
                "self",
                "max_modules"
              ]
            },
            {
              "name": "_load_focused_context",
              "docstring": "Load focused context optimized for VS Code Copilot.\n- \u0412\u0441\u0435\u0433\u0434\u0430 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 summary \u0438\u0437 init.json (\u0443\u0440\u043e\u0432\u0435\u043d\u044c 1)\n- relationship_context (structural) \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 file_path \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434 \u0438\u043b\u0438 \u044f\u0432\u043d\u043e structural \u0437\u0430\u043f\u0440\u043e\u0441",
              "line_range": [
                218,
                275
              ],
              "parameters": [
                "self",
                "file_path",
                "budget"
              ]
            },
            {
              "name": "_load_session_context",
              "docstring": "Load session-specific context.",
              "line_range": [
                277,
                299
              ],
              "parameters": [
                "self",
                "budget"
              ]
            },
            {
              "name": "_load_minimal_context",
              "docstring": "Load minimal context for quick operations.",
              "line_range": [
                301,
                319
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_source_with_filtering",
              "docstring": "Load source with optional filtering based on budget.",
              "line_range": [
                321,
                344
              ],
              "parameters": [
                "self",
                "source_name",
                "budget"
              ]
            },
            {
              "name": "_get_file_context",
              "docstring": "Get context specific to a file.",
              "line_range": [
                346,
                357
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_extract_essential_parts",
              "docstring": "Extract essential parts of data to fit token budget.",
              "line_range": [
                359,
                381
              ],
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_filter_for_current_session",
              "docstring": "Filter data to items relevant to current session.",
              "line_range": [
                383,
                422
              ],
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_extract_summary",
              "docstring": "Extract summary information from data.",
              "line_range": [
                424,
                443
              ],
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_apply_section_filtering",
              "docstring": "Apply section filtering to exclude specified sections.",
              "line_range": [
                445,
                457
              ],
              "parameters": [
                "self",
                "data",
                "exclude_sections"
              ]
            },
            {
              "name": "_update_metrics",
              "docstring": "Update performance metrics.",
              "line_range": [
                459,
                477
              ],
              "parameters": [
                "self",
                "scenario",
                "context",
                "load_time"
              ]
            },
            {
              "name": "get_metrics_summary",
              "docstring": "Get summary of context loading metrics.",
              "line_range": [
                479,
                494
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_metrics",
              "docstring": "Save metrics to file for analysis.",
              "line_range": [
                496,
                501
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self._load_config"
        ],
        "_load_config": [
          "json.load",
          "config_path.exists",
          "open"
        ],
        "get_context_for_scenario": [
          "self._load_session_context",
          "scenario_config.get",
          "self._load_full_context",
          "self._load_minimal_context",
          "self._get_budget_for_scenario",
          "self._load_focused_context",
          "ContextMode",
          "self._update_metrics",
          "time.time"
        ],
        "_get_budget_for_scenario": [
          "ContextBudget",
          "budget_config.get",
          "scenario_config.get"
        ],
        "_load_full_context": [
          "json.load",
          "full_path.exists",
          "open",
          "logger.warning"
        ],
        "_extract_relationship_summary": [
          "json.load",
          "m.get",
          "struct_path.exists",
          "summary.append",
          "open",
          "struct.get",
          "logger.warning"
        ],
        "_load_focused_context": [
          "json.dumps",
          "json.load",
          "file_path.endswith",
          "init_path.exists",
          "self._extract_summary",
          "self._get_file_context",
          "open",
          "len",
          "logger.warning",
          "self._extract_relationship_summary",
          "session_path.exists"
        ],
        "_load_session_context": [
          "self._load_source_with_filtering",
          "self._filter_for_current_session"
        ],
        "_load_minimal_context": [
          "json.load",
          "source_path.exists",
          "self._extract_summary",
          "open",
          "logger.warning"
        ],
        "_load_source_with_filtering": [
          "self._apply_section_filtering",
          "json.load",
          "source_path.exists",
          "open",
          "logger.warning"
        ],
        "_get_file_context": [
          "Path"
        ],
        "_extract_essential_parts": [
          "task.get",
          "isinstance"
        ],
        "_filter_for_current_session": [
          "json.load",
          "open",
          "current_session_path.exists",
          "logger.warning",
          "data.items",
          "task.get",
          "idea.get",
          "current_session.get"
        ],
        "_extract_summary": [
          "len",
          "t.get",
          "isinstance"
        ],
        "_apply_section_filtering": [
          "data.items"
        ],
        "_update_metrics": [
          "ContextMetrics",
          "len",
          "context.get"
        ],
        "get_metrics_summary": [
          "sum",
          "len"
        ],
        "save_metrics": [
          "open",
          "json.dump",
          "self.get_metrics_summary"
        ],
        "create_context_orchestrator": [
          "SmartContextOrchestrator"
        ],
        "get_optimized_context": [
          "ContextBudget",
          "create_context_orchestrator",
          "orchestrator.get_context_for_scenario"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "Union",
        "dataclass",
        "dataclasses",
        "enum",
        "json",
        "logging",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "91202e69-fc79-4bb8-b853-b4dc39deb666"
    },
    {
      "module_id": "src.llmstruct.ai_self_monitor",
      "path": "src/llmstruct/ai_self_monitor.py",
      "category": "core",
      "module_doc": "AI Self-Monitoring System\nTracks AI usage patterns and ensures proper llmstruct integration.",
      "functions": [
        {
          "name": "initialize_ai_monitor",
          "docstring": "Initialize global AI monitor.",
          "line_range": [
            433,
            437
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_monitor",
          "docstring": "Get current AI monitor instance.",
          "line_range": [
            440,
            442
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "record_ai_usage",
          "docstring": "Global function to record AI usage.",
          "line_range": [
            445,
            456
          ],
          "parameters": [
            "query",
            "tools_used",
            "used_llmstruct",
            "context_tags",
            "metadata"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            60,
            80
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "record_ai_interaction",
          "docstring": "Record an AI interaction for monitoring.",
          "line_range": [
            82,
            121
          ],
          "parameters": [
            "self",
            "query",
            "tools_used",
            "used_llmstruct",
            "context_tags",
            "metadata"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_interaction_patterns",
          "docstring": "Analyze patterns in AI interaction.",
          "line_range": [
            123,
            157
          ],
          "parameters": [
            "self",
            "query",
            "tools_used",
            "used_llmstruct",
            "context_tags"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_effectiveness_score",
          "docstring": "Calculate effectiveness score for interaction.",
          "line_range": [
            159,
            188
          ],
          "parameters": [
            "self",
            "patterns",
            "tools_used",
            "used_llmstruct"
          ],
          "decorators": []
        },
        {
          "name": "_check_immediate_feedback",
          "docstring": "Check if immediate feedback/correction is needed.",
          "line_range": [
            190,
            209
          ],
          "parameters": [
            "self",
            "event"
          ],
          "decorators": []
        },
        {
          "name": "_log_immediate_feedback",
          "docstring": "Log immediate feedback message.",
          "line_range": [
            211,
            214
          ],
          "parameters": [
            "self",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "analyze_behavior_trends",
          "docstring": "Analyze AI behavior trends over specified period.",
          "line_range": [
            216,
            300
          ],
          "parameters": [
            "self",
            "days"
          ],
          "decorators": []
        },
        {
          "name": "_generate_recommendations",
          "docstring": "Generate specific recommendations for improvement.",
          "line_range": [
            302,
            335
          ],
          "parameters": [
            "self",
            "llmstruct_usage",
            "context_awareness",
            "tool_diversity",
            "effectiveness"
          ],
          "decorators": []
        },
        {
          "name": "get_real_time_guidance",
          "docstring": "Get real-time guidance for current query.",
          "line_range": [
            337,
            365
          ],
          "parameters": [
            "self",
            "current_query"
          ],
          "decorators": []
        },
        {
          "name": "_load_events",
          "docstring": "Load events from disk.",
          "line_range": [
            367,
            379
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_events",
          "docstring": "Save events to disk.",
          "line_range": [
            381,
            388
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_analysis",
          "docstring": "Save behavior analysis to disk.",
          "line_range": [
            390,
            397
          ],
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "get_monitoring_report",
          "docstring": "Get comprehensive monitoring report.",
          "line_range": [
            399,
            426
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "AIBehaviorPattern",
          "docstring": "AI behavior patterns to monitor.",
          "line_range": [
            18,
            26
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "AIUsageEvent",
          "docstring": "Single AI usage event.",
          "line_range": [
            30,
            39
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "AIBehaviorAnalysis",
          "docstring": "Analysis of AI behavior patterns.",
          "line_range": [
            43,
            51
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "AISelfMonitor",
          "docstring": "Monitors AI behavior and ensures proper llmstruct integration.\nProvides feedback and corrective guidance.",
          "line_range": [
            54,
            426
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                60,
                80
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "record_ai_interaction",
              "docstring": "Record an AI interaction for monitoring.",
              "line_range": [
                82,
                121
              ],
              "parameters": [
                "self",
                "query",
                "tools_used",
                "used_llmstruct",
                "context_tags",
                "metadata"
              ]
            },
            {
              "name": "_analyze_interaction_patterns",
              "docstring": "Analyze patterns in AI interaction.",
              "line_range": [
                123,
                157
              ],
              "parameters": [
                "self",
                "query",
                "tools_used",
                "used_llmstruct",
                "context_tags"
              ]
            },
            {
              "name": "_calculate_effectiveness_score",
              "docstring": "Calculate effectiveness score for interaction.",
              "line_range": [
                159,
                188
              ],
              "parameters": [
                "self",
                "patterns",
                "tools_used",
                "used_llmstruct"
              ]
            },
            {
              "name": "_check_immediate_feedback",
              "docstring": "Check if immediate feedback/correction is needed.",
              "line_range": [
                190,
                209
              ],
              "parameters": [
                "self",
                "event"
              ]
            },
            {
              "name": "_log_immediate_feedback",
              "docstring": "Log immediate feedback message.",
              "line_range": [
                211,
                214
              ],
              "parameters": [
                "self",
                "message"
              ]
            },
            {
              "name": "analyze_behavior_trends",
              "docstring": "Analyze AI behavior trends over specified period.",
              "line_range": [
                216,
                300
              ],
              "parameters": [
                "self",
                "days"
              ]
            },
            {
              "name": "_generate_recommendations",
              "docstring": "Generate specific recommendations for improvement.",
              "line_range": [
                302,
                335
              ],
              "parameters": [
                "self",
                "llmstruct_usage",
                "context_awareness",
                "tool_diversity",
                "effectiveness"
              ]
            },
            {
              "name": "get_real_time_guidance",
              "docstring": "Get real-time guidance for current query.",
              "line_range": [
                337,
                365
              ],
              "parameters": [
                "self",
                "current_query"
              ]
            },
            {
              "name": "_load_events",
              "docstring": "Load events from disk.",
              "line_range": [
                367,
                379
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_events",
              "docstring": "Save events to disk.",
              "line_range": [
                381,
                388
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_analysis",
              "docstring": "Save behavior analysis to disk.",
              "line_range": [
                390,
                397
              ],
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "get_monitoring_report",
              "docstring": "Get comprehensive monitoring report.",
              "line_range": [
                399,
                426
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "logger.info",
          "Path",
          "self._load_events"
        ],
        "record_ai_interaction": [
          "self._calculate_effectiveness_score",
          "datetime.now",
          "self._analyze_interaction_patterns",
          "len",
          "AIUsageEvent",
          "self._save_events",
          "self._check_immediate_feedback"
        ],
        "_analyze_interaction_patterns": [
          "query.lower",
          "patterns.append",
          "any"
        ],
        "_calculate_effectiveness_score": [
          "min",
          "len",
          "pattern_scores.get",
          "set"
        ],
        "_check_immediate_feedback": [
          "self._log_immediate_feedback",
          "any"
        ],
        "_log_immediate_feedback": [
          "logger.warning",
          "print"
        ],
        "analyze_behavior_trends": [
          "strengths.append",
          "self._save_analysis",
          "set",
          "datetime.now",
          "any",
          "improvements.append",
          "self._generate_recommendations",
          "AIBehaviorAnalysis",
          "datetime.fromisoformat",
          "len",
          "all_tools.update",
          "sum",
          "timedelta"
        ],
        "_generate_recommendations": [
          "recommendations.extend",
          "recommendations.append"
        ],
        "get_real_time_guidance": [
          "current_query.lower",
          "guidance.append",
          "any"
        ],
        "_load_events": [
          "json.load",
          "open",
          "logger.error",
          "logger.info",
          "len",
          "AIUsageEvent"
        ],
        "_save_events": [
          "open",
          "logger.error",
          "json.dump",
          "asdict"
        ],
        "_save_analysis": [
          "open",
          "logger.error",
          "json.dump",
          "asdict"
        ],
        "get_monitoring_report": [
          "self.analyze_behavior_trends",
          "len",
          "chr",
          "datetime.now"
        ],
        "initialize_ai_monitor": [
          "AISelfMonitor"
        ],
        "get_ai_monitor": [],
        "record_ai_usage": [
          "_monitor_instance.record_ai_interaction"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "Set",
        "asdict",
        "dataclass",
        "dataclasses",
        "datetime",
        "enum",
        "json",
        "logging",
        "pathlib",
        "time",
        "timedelta",
        "typing"
      ],
      "hash": null,
      "artifact_id": "adaa67d1-fd0e-4eec-be41-cdb630337506"
    },
    {
      "module_id": "src.llmstruct.cursor_ai_bridge",
      "path": "src/llmstruct/cursor_ai_bridge.py",
      "category": "core",
      "module_doc": "Cursor AI Bridge - API Layer for AI Assistant Integration\nProvides CLI and HTTP endpoints so Cursor AI can use WorkflowOrchestrator",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface for Cursor AI Bridge.",
          "line_range": [
            350,
            401
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            29,
            32
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "ai_get_context",
          "docstring": "Get AI-optimized context for current development state.",
          "line_range": [
            34,
            67
          ],
          "parameters": [
            "self",
            "query_type",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "ai_analyze_task",
          "docstring": "Analyze a task and provide AI-optimized guidance.",
          "line_range": [
            69,
            93
          ],
          "parameters": [
            "self",
            "task_description"
          ],
          "decorators": []
        },
        {
          "name": "ai_create_task",
          "docstring": "Create a task through AI interface.",
          "line_range": [
            95,
            114
          ],
          "parameters": [
            "self",
            "title",
            "description",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "ai_get_onboarding_guide",
          "docstring": "Get comprehensive AI onboarding guide.",
          "line_range": [
            116,
            145
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "ai_check_duplicates",
          "docstring": "Check for code duplicates with AI-friendly output.",
          "line_range": [
            147,
            171
          ],
          "parameters": [
            "self",
            "threshold"
          ],
          "decorators": []
        },
        {
          "name": "ai_suggest",
          "docstring": "Get AI suggestions based on context.",
          "line_range": [
            173,
            199
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_estimate_task_complexity",
          "docstring": "Estimate task complexity based on codebase analysis.",
          "line_range": [
            201,
            215
          ],
          "parameters": [
            "self",
            "task",
            "struct_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_suggest_approach",
          "docstring": "Suggest approach based on task and codebase state.",
          "line_range": [
            217,
            234
          ],
          "parameters": [
            "self",
            "task",
            "struct_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_find_relevant_modules",
          "docstring": "Find modules relevant to the task.",
          "line_range": [
            236,
            248
          ],
          "parameters": [
            "self",
            "task",
            "struct_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_check_potential_duplicates",
          "docstring": "Check if task might create duplicates.",
          "line_range": [
            250,
            253
          ],
          "parameters": [
            "self",
            "task",
            "struct_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_recommend_ai_for_task",
          "docstring": "Recommend which AI to use for the task.",
          "line_range": [
            255,
            264
          ],
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_generate_workflow_steps",
          "docstring": "Generate workflow steps for the task.",
          "line_range": [
            266,
            276
          ],
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_determine_context_requirements",
          "docstring": "Determine what context is needed for the task.",
          "line_range": [
            278,
            290
          ],
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_get_workflow_suggestions",
          "docstring": "Get workflow suggestions based on context.",
          "line_range": [
            292,
            299
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_get_available_ai_commands",
          "docstring": "Get available AI commands.",
          "line_range": [
            301,
            310
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_identify_high_priority_duplicates",
          "docstring": "Identify high-priority duplicates for refactoring.",
          "line_range": [
            312,
            315
          ],
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "_generate_refactoring_suggestions",
          "docstring": "Generate refactoring suggestions.",
          "line_range": [
            317,
            323
          ],
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "_classify_task_type",
          "docstring": "Classify task type for AI delegation.",
          "line_range": [
            325,
            338
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_generate_next_steps",
          "docstring": "Generate next steps based on context.",
          "line_range": [
            340,
            347
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CursorAIBridge",
          "docstring": "Bridge that allows Cursor AI assistant to use WorkflowOrchestrator\nthrough CLI commands and structured JSON responses.",
          "line_range": [
            23,
            347
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                29,
                32
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "ai_get_context",
              "docstring": "Get AI-optimized context for current development state.",
              "line_range": [
                34,
                67
              ],
              "parameters": [
                "self",
                "query_type",
                "file_path"
              ]
            },
            {
              "name": "ai_analyze_task",
              "docstring": "Analyze a task and provide AI-optimized guidance.",
              "line_range": [
                69,
                93
              ],
              "parameters": [
                "self",
                "task_description"
              ]
            },
            {
              "name": "ai_create_task",
              "docstring": "Create a task through AI interface.",
              "line_range": [
                95,
                114
              ],
              "parameters": [
                "self",
                "title",
                "description",
                "priority"
              ]
            },
            {
              "name": "ai_get_onboarding_guide",
              "docstring": "Get comprehensive AI onboarding guide.",
              "line_range": [
                116,
                145
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "ai_check_duplicates",
              "docstring": "Check for code duplicates with AI-friendly output.",
              "line_range": [
                147,
                171
              ],
              "parameters": [
                "self",
                "threshold"
              ]
            },
            {
              "name": "ai_suggest",
              "docstring": "Get AI suggestions based on context.",
              "line_range": [
                173,
                199
              ],
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "_estimate_task_complexity",
              "docstring": "Estimate task complexity based on codebase analysis.",
              "line_range": [
                201,
                215
              ],
              "parameters": [
                "self",
                "task",
                "struct_analysis"
              ]
            },
            {
              "name": "_suggest_approach",
              "docstring": "Suggest approach based on task and codebase state.",
              "line_range": [
                217,
                234
              ],
              "parameters": [
                "self",
                "task",
                "struct_analysis"
              ]
            },
            {
              "name": "_find_relevant_modules",
              "docstring": "Find modules relevant to the task.",
              "line_range": [
                236,
                248
              ],
              "parameters": [
                "self",
                "task",
                "struct_analysis"
              ]
            },
            {
              "name": "_check_potential_duplicates",
              "docstring": "Check if task might create duplicates.",
              "line_range": [
                250,
                253
              ],
              "parameters": [
                "self",
                "task",
                "struct_analysis"
              ]
            },
            {
              "name": "_recommend_ai_for_task",
              "docstring": "Recommend which AI to use for the task.",
              "line_range": [
                255,
                264
              ],
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "_generate_workflow_steps",
              "docstring": "Generate workflow steps for the task.",
              "line_range": [
                266,
                276
              ],
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "_determine_context_requirements",
              "docstring": "Determine what context is needed for the task.",
              "line_range": [
                278,
                290
              ],
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "_get_workflow_suggestions",
              "docstring": "Get workflow suggestions based on context.",
              "line_range": [
                292,
                299
              ],
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "_get_available_ai_commands",
              "docstring": "Get available AI commands.",
              "line_range": [
                301,
                310
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_identify_high_priority_duplicates",
              "docstring": "Identify high-priority duplicates for refactoring.",
              "line_range": [
                312,
                315
              ],
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "_generate_refactoring_suggestions",
              "docstring": "Generate refactoring suggestions.",
              "line_range": [
                317,
                323
              ],
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "_classify_task_type",
              "docstring": "Classify task type for AI delegation.",
              "line_range": [
                325,
                338
              ],
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "_generate_next_steps",
              "docstring": "Generate next steps based on context.",
              "line_range": [
                340,
                347
              ],
              "parameters": [
                "self",
                "context"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "CursorIntegrationManager",
          "WorkflowOrchestrator",
          "str"
        ],
        "ai_get_context": [
          "self._get_available_ai_commands",
          "str",
          "datetime.utcnow",
          "cursor_context.get",
          "self._get_workflow_suggestions",
          "len",
          "context.get"
        ],
        "ai_analyze_task": [
          "self._suggest_approach",
          "self._estimate_task_complexity",
          "str",
          "self._recommend_ai_for_task",
          "self._determine_context_requirements",
          "self._check_potential_duplicates",
          "self._generate_workflow_steps",
          "self._find_relevant_modules",
          "context.get"
        ],
        "ai_create_task": [
          "datetime.utcnow",
          "self.ai_analyze_task",
          "str"
        ],
        "ai_get_onboarding_guide": [
          "str"
        ],
        "ai_check_duplicates": [
          "analysis.get",
          "self._generate_refactoring_suggestions",
          "self._identify_high_priority_duplicates",
          "str"
        ],
        "ai_suggest": [
          "str",
          "delegation.get",
          "self._generate_next_steps",
          "self._get_workflow_suggestions",
          "self._classify_task_type"
        ],
        "_estimate_task_complexity": [
          "complexity_keywords.items",
          "any",
          "task.lower"
        ],
        "_suggest_approach": [
          "approaches.append",
          "task.lower"
        ],
        "_find_relevant_modules": [
          "relevant.append",
          "any",
          "task.lower",
          "struct_analysis.get",
          "module.get"
        ],
        "_check_potential_duplicates": [],
        "_recommend_ai_for_task": [
          "any",
          "task.lower"
        ],
        "_generate_workflow_steps": [],
        "_determine_context_requirements": [
          "requirements.append",
          "task.lower"
        ],
        "_get_workflow_suggestions": [],
        "_get_available_ai_commands": [],
        "_identify_high_priority_duplicates": [],
        "_generate_refactoring_suggestions": [],
        "_classify_task_type": [
          "context.lower",
          "any"
        ],
        "_generate_next_steps": [],
        "main": [
          "argparse.ArgumentParser",
          "bridge.ai_analyze_task",
          "bridge.ai_create_task",
          "json.dumps",
          "print",
          "bridge.ai_get_context",
          "parser.add_argument",
          "CursorAIBridge",
          "parser.parse_args",
          "bridge.ai_onboarding_guide",
          "bridge.ai_suggest",
          "bridge.ai_check_duplicates"
        ]
      },
      "dependencies": [
        "Any",
        "CursorIntegrationManager",
        "Dict",
        "List",
        "Optional",
        "Path",
        "SystemCapabilityDiscovery",
        "WorkflowOrchestrator",
        "ai_self_awareness",
        "argparse",
        "cursor_integration",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "sys",
        "typing",
        "workflow_orchestrator"
      ],
      "hash": null,
      "artifact_id": "2dee5eb2-b632-4156-95b3-b09b40938364"
    },
    {
      "module_id": "src.llmstruct.ai_self_awareness",
      "path": "src/llmstruct/ai_self_awareness.py",
      "category": "core",
      "module_doc": "AI Self-Awareness Enhancement Module\nProvides comprehensive system introspection and capability discovery for llmstruct AI systems.\nEnhanced with Cursor IDE integration and real-time metrics.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize the capability discovery system with CLI integration.",
          "line_range": [
            101,
            107
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_ensure_directories",
          "docstring": "Ensure required directories exist.",
          "line_range": [
            109,
            111
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "discover_all_capabilities",
          "docstring": "Perform comprehensive capability discovery with unused function integration.\n\nArgs:\n    force_refresh: If True, bypass cache and perform fresh discovery\n    \nReturns:\n    Complete system capabilities overview enhanced with integrated unused functions",
          "line_range": [
            113,
            154
          ],
          "parameters": [
            "self",
            "force_refresh"
          ],
          "decorators": []
        },
        {
          "name": "_get_integration_metrics",
          "docstring": "Get metrics about unused function integration success.",
          "line_range": [
            156,
            163
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_enhanced_capabilities_summary",
          "docstring": "Get enhanced capabilities summary including unused function integration.",
          "line_range": [
            165,
            203
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_comprehensive_ai_status",
          "docstring": "Get comprehensive AI status including unused function integration analysis.\nThis is the primary method for AI self-awareness reporting.",
          "line_range": [
            205,
            246
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_discover_tools",
          "docstring": "Discover and check health of all available tools.",
          "line_range": [
            248,
            260
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_cli_processor",
          "docstring": "Check CLI processor health.",
          "line_range": [
            262,
            297
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_copilot_manager",
          "docstring": "Check Copilot manager health.",
          "line_range": [
            299,
            336
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_context_orchestrator",
          "docstring": "Check context orchestrator health.",
          "line_range": [
            338,
            393
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_cache_system",
          "docstring": "Check cache system health.",
          "line_range": [
            395,
            438
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_struct_parser",
          "docstring": "Check struct.json parser health.",
          "line_range": [
            440,
            484
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_docs_system",
          "docstring": "Check docs.json system health.",
          "line_range": [
            486,
            517
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_discover_context_capabilities",
          "docstring": "Discover available context capabilities.",
          "line_range": [
            519,
            556
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_integration_health",
          "docstring": "Check health of all system integrations.",
          "line_range": [
            558,
            567
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_component_status",
          "docstring": "Check status of a specific component.",
          "line_range": [
            569,
            574
          ],
          "parameters": [
            "self",
            "component_name"
          ],
          "decorators": []
        },
        {
          "name": "_discover_vscode_capabilities",
          "docstring": "Discover VS Code specific capabilities.",
          "line_range": [
            576,
            585
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_cache_hit_rate",
          "docstring": "Calculate cache hit rate using real metrics.",
          "line_range": [
            587,
            589
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_estimate_system_load",
          "docstring": "Estimate current system load using real metrics.",
          "line_range": [
            591,
            593
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_is_cache_valid",
          "docstring": "Check if cached capabilities are still valid.",
          "line_range": [
            595,
            602
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_cached_capabilities",
          "docstring": "Load capabilities from cache.",
          "line_range": [
            604,
            618
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_cache_capabilities",
          "docstring": "Cache capabilities to disk.",
          "line_range": [
            620,
            630
          ],
          "parameters": [
            "self",
            "capabilities"
          ],
          "decorators": []
        },
        {
          "name": "get_capabilities_summary",
          "docstring": "Get a human-readable summary of current capabilities.",
          "line_range": [
            632,
            691
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_project_structure",
          "docstring": "Enhanced project structure analysis integrating multiple unused functions\nfor comprehensive AI self-awareness.",
          "line_range": [
            693,
            739
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_enhanced_directory_structure",
          "docstring": "Integration of unused cli_utils.get_directory_structure() function\nfor enhanced AI project awareness.",
          "line_range": [
            741,
            760
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_unused_capabilities",
          "docstring": "Analyze unused functions to discover hidden AI capabilities.\nThis transforms the 115 unused functions into potential AI enhancements.",
          "line_range": [
            762,
            819
          ],
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_discover_config_capabilities",
          "docstring": "Integration of unused cli_config functions for AI configuration awareness.",
          "line_range": [
            821,
            849
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_discover_context_scenarios",
          "docstring": "Integration of unused context_orchestrator functions for scenario awareness.",
          "line_range": [
            851,
            890
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_is_ai_useful_command",
          "docstring": "Determine if a CLI command function would be useful for AI self-awareness.",
          "line_range": [
            892,
            898
          ],
          "parameters": [
            "self",
            "function_name"
          ],
          "decorators": []
        },
        {
          "name": "_is_ai_useful_config",
          "docstring": "Determine if a config function would be useful for AI configuration awareness.",
          "line_range": [
            900,
            906
          ],
          "parameters": [
            "self",
            "function_name"
          ],
          "decorators": []
        },
        {
          "name": "_is_ai_useful_utility",
          "docstring": "Determine if a utility function would be useful for AI operations.",
          "line_range": [
            908,
            914
          ],
          "parameters": [
            "self",
            "function_name"
          ],
          "decorators": []
        },
        {
          "name": "_prioritize_integrations",
          "docstring": "Prioritize which unused functions should be integrated first.",
          "line_range": [
            916,
            932
          ],
          "parameters": [
            "self",
            "capabilities"
          ],
          "decorators": []
        },
        {
          "name": "_basic_directory_scan",
          "docstring": "Basic directory scan for fallback scenarios.",
          "line_range": [
            934,
            946
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_cursor_status_report",
          "docstring": "Generate Cursor-specific status optimized for IDE integration.",
          "line_range": [
            949,
            967
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "optimize_context_for_cursor",
          "docstring": "Provide perfectly sized context for Cursor interactions.",
          "line_range": [
            969,
            1001
          ],
          "parameters": [
            "self",
            "query_analysis"
          ],
          "decorators": []
        },
        {
          "name": "get_goal_aligned_suggestions",
          "docstring": "Provide suggestions aligned with business goals from personal bridge.",
          "line_range": [
            1003,
            1038
          ],
          "parameters": [
            "self",
            "technical_context"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_real_cache_hit_rate",
          "docstring": "Calculate actual cache performance from JSONCache and system metrics.",
          "line_range": [
            1040,
            1066
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_real_system_load",
          "docstring": "Get actual system performance metrics.",
          "line_range": [
            1068,
            1090
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_cursor_config",
          "docstring": "Load Cursor-specific configuration.",
          "line_range": [
            1092,
            1102
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_personal_bridge",
          "docstring": "Load personal planning bridge data.",
          "line_range": [
            1104,
            1114
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_query_type",
          "docstring": "Analyze query to determine optimal context type.",
          "line_range": [
            1116,
            1144
          ],
          "parameters": [
            "self",
            "query_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_apply_privacy_filter",
          "docstring": "Apply privacy filtering based on level.",
          "line_range": [
            1146,
            1163
          ],
          "parameters": [
            "self",
            "context_data",
            "privacy_level"
          ],
          "decorators": []
        },
        {
          "name": "_filter_sensitive_dict",
          "docstring": "Filter sensitive information from dictionary.",
          "line_range": [
            1165,
            1177
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_get_overall_health_emoji",
          "docstring": "Get emoji representing overall system health.",
          "line_range": [
            1179,
            1202
          ],
          "parameters": [
            "self",
            "capabilities"
          ],
          "decorators": []
        },
        {
          "name": "_get_context_status_emoji",
          "docstring": "Get emoji for context engine status.",
          "line_range": [
            1204,
            1214
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_get_ai_integration_emoji",
          "docstring": "Get emoji for AI integration status.",
          "line_range": [
            1216,
            1224
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_goal_alignment_status",
          "docstring": "Get goal alignment status.",
          "line_range": [
            1226,
            1235
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CapabilityStatus",
          "docstring": "Status of system capabilities.",
          "line_range": [
            22,
            27
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextMode",
          "docstring": "Available context modes.",
          "line_range": [
            30,
            35
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ToolHealth",
          "docstring": "Health status of a specific tool.",
          "line_range": [
            39,
            46
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ContextCapabilities",
          "docstring": "Available context capabilities.",
          "line_range": [
            50,
            57
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "IntegrationHealth",
          "docstring": "Status of system integrations.",
          "line_range": [
            61,
            68
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "VSCodeCapabilities",
          "docstring": "VS Code specific capabilities.",
          "line_range": [
            72,
            79
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "SystemCapabilities",
          "docstring": "Complete system capabilities overview.",
          "line_range": [
            83,
            91
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "SystemCapabilityDiscovery",
          "docstring": "Discovers and monitors system capabilities in real-time.\nProvides AI with comprehensive understanding of available tools and systems.\nEnhanced with unused function integration for maximum AI self-awareness.",
          "line_range": [
            94,
            1235
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize the capability discovery system with CLI integration.",
              "line_range": [
                101,
                107
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_ensure_directories",
              "docstring": "Ensure required directories exist.",
              "line_range": [
                109,
                111
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "discover_all_capabilities",
              "docstring": "Perform comprehensive capability discovery with unused function integration.\n\nArgs:\n    force_refresh: If True, bypass cache and perform fresh discovery\n    \nReturns:\n    Complete system capabilities overview enhanced with integrated unused functions",
              "line_range": [
                113,
                154
              ],
              "parameters": [
                "self",
                "force_refresh"
              ]
            },
            {
              "name": "_get_integration_metrics",
              "docstring": "Get metrics about unused function integration success.",
              "line_range": [
                156,
                163
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_enhanced_capabilities_summary",
              "docstring": "Get enhanced capabilities summary including unused function integration.",
              "line_range": [
                165,
                203
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_comprehensive_ai_status",
              "docstring": "Get comprehensive AI status including unused function integration analysis.\nThis is the primary method for AI self-awareness reporting.",
              "line_range": [
                205,
                246
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_discover_tools",
              "docstring": "Discover and check health of all available tools.",
              "line_range": [
                248,
                260
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_cli_processor",
              "docstring": "Check CLI processor health.",
              "line_range": [
                262,
                297
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_copilot_manager",
              "docstring": "Check Copilot manager health.",
              "line_range": [
                299,
                336
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_context_orchestrator",
              "docstring": "Check context orchestrator health.",
              "line_range": [
                338,
                393
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_cache_system",
              "docstring": "Check cache system health.",
              "line_range": [
                395,
                438
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_struct_parser",
              "docstring": "Check struct.json parser health.",
              "line_range": [
                440,
                484
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_docs_system",
              "docstring": "Check docs.json system health.",
              "line_range": [
                486,
                517
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_discover_context_capabilities",
              "docstring": "Discover available context capabilities.",
              "line_range": [
                519,
                556
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_integration_health",
              "docstring": "Check health of all system integrations.",
              "line_range": [
                558,
                567
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_component_status",
              "docstring": "Check status of a specific component.",
              "line_range": [
                569,
                574
              ],
              "parameters": [
                "self",
                "component_name"
              ]
            },
            {
              "name": "_discover_vscode_capabilities",
              "docstring": "Discover VS Code specific capabilities.",
              "line_range": [
                576,
                585
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_calculate_cache_hit_rate",
              "docstring": "Calculate cache hit rate using real metrics.",
              "line_range": [
                587,
                589
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_estimate_system_load",
              "docstring": "Estimate current system load using real metrics.",
              "line_range": [
                591,
                593
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_is_cache_valid",
              "docstring": "Check if cached capabilities are still valid.",
              "line_range": [
                595,
                602
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_cached_capabilities",
              "docstring": "Load capabilities from cache.",
              "line_range": [
                604,
                618
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_cache_capabilities",
              "docstring": "Cache capabilities to disk.",
              "line_range": [
                620,
                630
              ],
              "parameters": [
                "self",
                "capabilities"
              ]
            },
            {
              "name": "get_capabilities_summary",
              "docstring": "Get a human-readable summary of current capabilities.",
              "line_range": [
                632,
                691
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_analyze_project_structure",
              "docstring": "Enhanced project structure analysis integrating multiple unused functions\nfor comprehensive AI self-awareness.",
              "line_range": [
                693,
                739
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_enhanced_directory_structure",
              "docstring": "Integration of unused cli_utils.get_directory_structure() function\nfor enhanced AI project awareness.",
              "line_range": [
                741,
                760
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_analyze_unused_capabilities",
              "docstring": "Analyze unused functions to discover hidden AI capabilities.\nThis transforms the 115 unused functions into potential AI enhancements.",
              "line_range": [
                762,
                819
              ],
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_discover_config_capabilities",
              "docstring": "Integration of unused cli_config functions for AI configuration awareness.",
              "line_range": [
                821,
                849
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_discover_context_scenarios",
              "docstring": "Integration of unused context_orchestrator functions for scenario awareness.",
              "line_range": [
                851,
                890
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_is_ai_useful_command",
              "docstring": "Determine if a CLI command function would be useful for AI self-awareness.",
              "line_range": [
                892,
                898
              ],
              "parameters": [
                "self",
                "function_name"
              ]
            },
            {
              "name": "_is_ai_useful_config",
              "docstring": "Determine if a config function would be useful for AI configuration awareness.",
              "line_range": [
                900,
                906
              ],
              "parameters": [
                "self",
                "function_name"
              ]
            },
            {
              "name": "_is_ai_useful_utility",
              "docstring": "Determine if a utility function would be useful for AI operations.",
              "line_range": [
                908,
                914
              ],
              "parameters": [
                "self",
                "function_name"
              ]
            },
            {
              "name": "_prioritize_integrations",
              "docstring": "Prioritize which unused functions should be integrated first.",
              "line_range": [
                916,
                932
              ],
              "parameters": [
                "self",
                "capabilities"
              ]
            },
            {
              "name": "_basic_directory_scan",
              "docstring": "Basic directory scan for fallback scenarios.",
              "line_range": [
                934,
                946
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_cursor_status_report",
              "docstring": "Generate Cursor-specific status optimized for IDE integration.",
              "line_range": [
                949,
                967
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "optimize_context_for_cursor",
              "docstring": "Provide perfectly sized context for Cursor interactions.",
              "line_range": [
                969,
                1001
              ],
              "parameters": [
                "self",
                "query_analysis"
              ]
            },
            {
              "name": "get_goal_aligned_suggestions",
              "docstring": "Provide suggestions aligned with business goals from personal bridge.",
              "line_range": [
                1003,
                1038
              ],
              "parameters": [
                "self",
                "technical_context"
              ]
            },
            {
              "name": "_calculate_real_cache_hit_rate",
              "docstring": "Calculate actual cache performance from JSONCache and system metrics.",
              "line_range": [
                1040,
                1066
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_real_system_load",
              "docstring": "Get actual system performance metrics.",
              "line_range": [
                1068,
                1090
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_cursor_config",
              "docstring": "Load Cursor-specific configuration.",
              "line_range": [
                1092,
                1102
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_personal_bridge",
              "docstring": "Load personal planning bridge data.",
              "line_range": [
                1104,
                1114
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_analyze_query_type",
              "docstring": "Analyze query to determine optimal context type.",
              "line_range": [
                1116,
                1144
              ],
              "parameters": [
                "self",
                "query_analysis"
              ]
            },
            {
              "name": "_apply_privacy_filter",
              "docstring": "Apply privacy filtering based on level.",
              "line_range": [
                1146,
                1163
              ],
              "parameters": [
                "self",
                "context_data",
                "privacy_level"
              ]
            },
            {
              "name": "_filter_sensitive_dict",
              "docstring": "Filter sensitive information from dictionary.",
              "line_range": [
                1165,
                1177
              ],
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_get_overall_health_emoji",
              "docstring": "Get emoji representing overall system health.",
              "line_range": [
                1179,
                1202
              ],
              "parameters": [
                "self",
                "capabilities"
              ]
            },
            {
              "name": "_get_context_status_emoji",
              "docstring": "Get emoji for context engine status.",
              "line_range": [
                1204,
                1214
              ],
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "_get_ai_integration_emoji",
              "docstring": "Get emoji for AI integration status.",
              "line_range": [
                1216,
                1224
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_goal_alignment_status",
              "docstring": "Get goal alignment status.",
              "line_range": [
                1226,
                1235
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "create_ai_cli_integration",
          "Path",
          "self._ensure_directories"
        ],
        "_ensure_directories": [],
        "discover_all_capabilities": [
          "SystemCapabilities",
          "self._discover_context_capabilities",
          "datetime.now",
          "self._calculate_cache_hit_rate",
          "self._analyze_project_structure",
          "self._get_integration_metrics",
          "time.time",
          "self._is_cache_valid",
          "logger.info",
          "self._check_integration_health",
          "self._cache_capabilities",
          "self._discover_vscode_capabilities",
          "self._estimate_system_load",
          "self._discover_tools",
          "self._load_cached_capabilities"
        ],
        "_get_integration_metrics": [],
        "get_enhanced_capabilities_summary": [
          "self.get_capabilities_summary",
          "enhanced_info.append",
          "str",
          "hasattr"
        ],
        "get_comprehensive_ai_status": [
          "self.get_enhanced_capabilities_summary",
          "get_ai_enhanced_cli_summary",
          "str"
        ],
        "_discover_tools": [
          "self._check_docs_system",
          "self._check_struct_parser",
          "self._check_cli_processor",
          "self._check_context_orchestrator",
          "self._check_copilot_manager",
          "self._check_cache_system"
        ],
        "_check_cli_processor": [
          "CommandProcessor",
          "ToolHealth",
          "datetime.now",
          "CLIUtils",
          "str",
          "CLIConfig",
          "time.time"
        ],
        "_check_copilot_manager": [
          "manager.get_context_status",
          "ToolHealth",
          "datetime.now",
          "str",
          "time.time",
          "initialize_copilot",
          "hasattr"
        ],
        "_check_context_orchestrator": [
          "create_context_orchestrator",
          "ToolHealth",
          "datetime.now",
          "str",
          "get_optimized_context",
          "logger.warning",
          "hasattr",
          "time.time"
        ],
        "_check_cache_system": [
          "cache.cache_json",
          "struct_file.exists",
          "ToolHealth",
          "datetime.now",
          "str",
          "JSONCache",
          "cache.close",
          "cache.get_full_json",
          "time.time"
        ],
        "_check_struct_parser": [
          "struct_file.exists",
          "json.load",
          "ToolHealth",
          "datetime.now",
          "str",
          "FileNotFoundError",
          "open",
          "missing_keys.append",
          "struct_data.get",
          "time.time"
        ],
        "_check_docs_system": [
          "json.load",
          "ToolHealth",
          "datetime.now",
          "str",
          "FileNotFoundError",
          "open",
          "docs_file.exists",
          "time.time"
        ],
        "_discover_context_capabilities": [
          "create_context_orchestrator",
          "scenario_mappings.keys",
          "list",
          "str",
          "ContextCapabilities",
          "logger.error",
          "config.get",
          "isinstance"
        ],
        "_check_integration_health": [
          "self._check_component_status",
          "IntegrationHealth"
        ],
        "_check_component_status": [
          "hasattr"
        ],
        "_discover_vscode_capabilities": [
          "VSCodeCapabilities"
        ],
        "_calculate_cache_hit_rate": [
          "self._calculate_real_cache_hit_rate"
        ],
        "_estimate_system_load": [
          "self._get_real_system_load"
        ],
        "_is_cache_valid": [
          "time.time"
        ],
        "_load_cached_capabilities": [
          "json.load",
          "open",
          "logger.error"
        ],
        "_cache_capabilities": [
          "open",
          "logger.error",
          "json.dump",
          "asdict"
        ],
        "get_capabilities_summary": [
          "self.discover_all_capabilities",
          "len",
          "chr",
          "str"
        ],
        "_analyze_project_structure": [
          "self._discover_config_capabilities",
          "struct_file.exists",
          "json.load",
          "self._discover_context_scenarios",
          "str",
          "open",
          "len",
          "struct_data.get",
          "self._analyze_unused_capabilities",
          "module.get",
          "sum",
          "self._get_enhanced_directory_structure"
        ],
        "_get_enhanced_directory_structure": [
          "str",
          "self._basic_directory_scan",
          "get_directory_structure"
        ],
        "_analyze_unused_capabilities": [
          "modules.get",
          "str",
          "cli_module.get",
          "self._prioritize_integrations",
          "min",
          "self._is_ai_useful_config",
          "len",
          "struct_data.get",
          "f.startswith",
          "self._is_ai_useful_command",
          "self._is_ai_useful_utility",
          "config_module.get",
          "utils_module.get"
        ],
        "_discover_config_capabilities": [
          "get_context_config",
          "str",
          "get_queue_config",
          "get_copilot_config",
          "is_auto_update_enabled"
        ],
        "_discover_context_scenarios": [
          "str",
          "get_context_for_scenario",
          "get_metrics_summary"
        ],
        "_is_ai_useful_command": [],
        "_is_ai_useful_config": [],
        "_is_ai_useful_utility": [],
        "_prioritize_integrations": [
          "priorities.append"
        ],
        "_basic_directory_scan": [
          "item.is_file",
          "item.is_dir",
          "logger.error",
          "str"
        ],
        "get_cursor_status_report": [
          "str",
          "self._get_ai_integration_emoji",
          "self.discover_all_capabilities",
          "self._load_cursor_config",
          "self._get_overall_health_emoji",
          "self._get_context_status_emoji",
          "self._get_goal_alignment_status"
        ],
        "optimize_context_for_cursor": [
          "json.load",
          "str",
          "open",
          "logger.error",
          "file_path.exists",
          "self._load_cursor_config",
          "cursor_config.get",
          "self._apply_privacy_filter",
          "self._analyze_query_type",
          "optimal_config.get",
          "context_rules.get"
        ],
        "get_goal_aligned_suggestions": [
          "suggestions.extend",
          "self._load_personal_bridge",
          "any",
          "logger.error",
          "personal_bridge.get",
          "technical_context.lower"
        ],
        "_calculate_real_cache_hit_rate": [
          "cache_file.stat",
          "list",
          "cache_dir.glob",
          "logger.error",
          "cache_dir.exists",
          "len",
          "time.time"
        ],
        "_get_real_system_load": [
          "str",
          "psutil.cpu_percent",
          "psutil.disk_usage",
          "logger.error",
          "min",
          "psutil.virtual_memory"
        ],
        "_load_cursor_config": [
          "json.load",
          "config_path.exists",
          "open",
          "logger.error"
        ],
        "_load_personal_bridge": [
          "json.load",
          "open",
          "bridge_path.exists",
          "logger.error"
        ],
        "_analyze_query_type": [
          "query_analysis.get",
          "any"
        ],
        "_apply_privacy_filter": [
          "self._filter_sensitive_dict",
          "context_data.items",
          "isinstance"
        ],
        "_filter_sensitive_dict": [
          "key.lower",
          "any",
          "data.items",
          "self._filter_sensitive_dict",
          "isinstance"
        ],
        "_get_overall_health_emoji": [],
        "_get_context_status_emoji": [
          "len"
        ],
        "_get_ai_integration_emoji": [
          "hasattr"
        ],
        "_get_goal_alignment_status": [
          "self._load_personal_bridge"
        ]
      },
      "dependencies": [
        "Any",
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "CopilotContextManager",
        "Dict",
        "Enum",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "asdict",
        "create_ai_cli_integration",
        "create_context_orchestrator",
        "dataclass",
        "dataclasses",
        "datetime",
        "enum",
        "get_ai_enhanced_cli_summary",
        "get_auto_update_config",
        "get_context_config",
        "get_context_for_scenario",
        "get_copilot_config",
        "get_directory_structure",
        "get_metrics_summary",
        "get_optimized_context",
        "get_queue_config",
        "initialize_copilot",
        "is_auto_update_enabled",
        "json",
        "llmstruct.ai_cli_integration",
        "llmstruct.cache",
        "llmstruct.cli_commands",
        "llmstruct.cli_config",
        "llmstruct.cli_utils",
        "llmstruct.context_orchestrator",
        "llmstruct.copilot",
        "logging",
        "os",
        "pathlib",
        "psutil",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "03f7a4c2-7de9-45f5-ae65-373c87a9b4fc"
    },
    {
      "module_id": "src.llmstruct.__init__",
      "path": "src/llmstruct/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "AISelfAwarenessCLIIntegration",
        "LLMClient",
        "SystemCapabilityDiscovery",
        "ai_cli_integration",
        "ai_self_awareness",
        "llm_client"
      ],
      "hash": null,
      "artifact_id": "2a97ca0f-8dc2-484c-b29e-01e67cafd5aa"
    },
    {
      "module_id": "src.llmstruct.modules.cli.handlers_legacy",
      "path": "src/llmstruct/modules/cli/handlers_legacy.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "interactive_legacy",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": [
            14,
            149
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "interactive_legacy": [
          "input",
          "user_input.lower",
          "JSONCache",
          "client.query",
          "attach_to_llm_request",
          "re.match",
          "json.dumps",
          "parse",
          "read_file_content",
          "get_folder_structure",
          "sorted",
          "m.group",
          "Path",
          "cache.close",
          "write_to_file",
          "print",
          "os.listdir",
          "LLMClient",
          "user_input.startswith",
          "args_str.strip",
          "load_gitignore",
          "logging.error",
          "logging.warning"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "Path",
        "attach_to_llm_request",
        "get_folder_structure",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.cli",
        "llmstruct.generators.json_generator",
        "llmstruct.modules.cli.utils",
        "llmstruct.self_run",
        "load_gitignore",
        "logging",
        "os",
        "parse",
        "pathlib",
        "re",
        "read_file_content",
        "time",
        "write_to_file"
      ],
      "hash": null,
      "artifact_id": "0c9c7257-074b-47df-b201-0e3b1c8dfb17"
    },
    {
      "module_id": "src.llmstruct.modules.cli.analyze_duplicates",
      "path": "src/llmstruct/modules/cli/analyze_duplicates.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "analyze_duplicates",
          "docstring": "Analyze function duplication using struct.json deep analysis.",
          "line_range": [
            1,
            81
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "analyze_duplicates": [
          "json.dumps",
          "duplicates.items",
          "enumerate",
          "print",
          "orchestrator.analyze_codebase_for_duplicates",
          "rec.get",
          "traceback.print_exc",
          "filtered_duplicates.items",
          "getattr",
          "r.get",
          "open",
          "json.dump",
          "analysis.get",
          "duplication_data.get",
          "len",
          "sorted",
          "WorkflowOrchestrator",
          "hasattr"
        ]
      },
      "dependencies": [
        "WorkflowOrchestrator",
        "json",
        "llmstruct.workflow_orchestrator",
        "traceback"
      ],
      "hash": null,
      "artifact_id": "4bf54f00-ce78-4ad4-bc38-4ad904a09ef8"
    },
    {
      "module_id": "src.llmstruct.modules.cli.copilot",
      "path": "src/llmstruct/modules/cli/copilot.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "copilot",
          "docstring": "Copilot integration and context management.",
          "line_range": [
            5,
            113
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "copilot": [
          "manager.load_context_layer",
          "manager.refresh_all_contexts",
          "initialize_copilot",
          "config_path.exists",
          "manager.get_context_status",
          "enumerate",
          "manager.unload_context_layer",
          "getattr",
          "manager.export_context",
          "manager.validate_change",
          "Path",
          "manager.close",
          "layers.split",
          "template_path.exists",
          "hasattr",
          "logging.info",
          "print",
          "open",
          "smart_suggest",
          "logging.error",
          "shutil.copy",
          "f.write"
        ]
      },
      "dependencies": [
        "Path",
        "initialize_copilot",
        "llmstruct.copilot",
        "logging",
        "pathlib",
        "shutil",
        "smart_suggest"
      ],
      "hash": null,
      "artifact_id": "2d7d17ff-9616-4f17-80c8-2a50ac134179"
    },
    {
      "module_id": "src.llmstruct.modules.cli.handlers",
      "path": "src/llmstruct/modules/cli/handlers.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with modular structure if available, fallback to legacy.",
          "line_range": [
            14,
            21
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive_modular",
          "docstring": "Run interactive CLI with modular structure.",
          "line_range": [
            23,
            32
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "interactive": [
          "interactive_modular",
          "interactive_legacy",
          "logging.warning"
        ],
        "interactive_modular": [
          "cli_core.run_interactive_mode",
          "logging.info",
          "create_cli_core",
          "hasattr"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "Path",
        "attach_to_llm_request",
        "create_cli_core",
        "get_folder_structure",
        "interactive_legacy",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.cli_core",
        "llmstruct.generators.json_generator",
        "llmstruct.modules.cli.handlers_legacy",
        "llmstruct.modules.cli.utils",
        "llmstruct.self_run",
        "load_gitignore",
        "logging",
        "os",
        "pathlib",
        "re",
        "read_file_content",
        "time",
        "write_to_file"
      ],
      "hash": null,
      "artifact_id": "f2244641-4aa7-44c3-b476-f1d0ecb077bc"
    },
    {
      "module_id": "src.llmstruct.modules.cli.review",
      "path": "src/llmstruct/modules/cli/review.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": [
            3,
            5
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "review": [
          "logging.warning"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": null,
      "artifact_id": "7a6b46e8-a044-4d1f-9630-610e8b86548c"
    },
    {
      "module_id": "src.llmstruct.modules.cli.dogfood",
      "path": "src/llmstruct/modules/cli/dogfood.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": [
            3,
            5
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "dogfood": [
          "logging.warning"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": null,
      "artifact_id": "35957f90-e33b-48ce-be77-acb6e204dfda"
    },
    {
      "module_id": "src.llmstruct.modules.cli.parse",
      "path": "src/llmstruct/modules/cli/parse.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": [
            9,
            93
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "parse": [
          "mod_dir.mkdir",
          "JSONCache",
          "getattr",
          "module.get",
          "parsing_config.get",
          "generate_json",
          "Path",
          "cache.close",
          "struct_path.open",
          "logging.info",
          "cache.cache_json",
          "json.dump",
          "load_config",
          "struct_data.get",
          "func.get",
          "cli_config.get",
          "logging.error",
          "ast_path.open",
          "logging.warning",
          "config.get"
        ]
      },
      "dependencies": [
        "JSONCache",
        "Path",
        "generate_json",
        "json",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.modules.cli.utils",
        "load_config",
        "logging",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "900f29be-23b3-4f6c-866a-622c06f098c9"
    },
    {
      "module_id": "src.llmstruct.modules.cli.audit",
      "path": "src/llmstruct/modules/cli/audit.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "audit",
          "docstring": "Audit project structure and generate reports.",
          "line_range": [
            4,
            17
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "audit": [
          "print",
          "Path",
          "file_path.exists",
          "analyze_duplicates",
          "hasattr"
        ]
      },
      "dependencies": [
        "Path",
        "analyze_duplicates",
        "llmstruct.cli",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "16e6a959-b531-4591-a933-c7d79b26d3d6"
    },
    {
      "module_id": "src.llmstruct.modules.cli.query",
      "path": "src/llmstruct/modules/cli/query.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": [
            7,
            63
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "query": [
          "create_context_orchestrator",
          "logging.info",
          "Path",
          "LLMClient",
          "orchestrator.get_context_for_scenario",
          "json.dump",
          "JSONCache",
          "client.query",
          "cache.close",
          "client.query_with_context",
          "logging.error",
          "logging.warning",
          "hasattr"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "Path",
        "create_context_orchestrator",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.context_orchestrator",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "29db99fb-c418-41fc-adc0-c889a450921c"
    },
    {
      "module_id": "src.llmstruct.modules.cli.utils",
      "path": "src/llmstruct/modules/cli/utils.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": [
            6,
            20
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from llmstruct.toml or return empty dict.",
          "line_range": [
            22,
            32
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": [
            34,
            43
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default ./tmp) and return the path.",
          "line_range": [
            45,
            63
          ],
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": [
            65,
            72
          ],
          "parameters": [
            "response"
          ],
          "decorators": []
        },
        {
          "name": "get_cache_config",
          "docstring": "",
          "line_range": [
            74,
            75
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_copilot_config",
          "docstring": "",
          "line_range": [
            77,
            78
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_queue_config",
          "docstring": "",
          "line_range": [
            80,
            81
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_context_config",
          "docstring": "",
          "line_range": [
            83,
            84
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_dirs",
          "docstring": "",
          "line_range": [
            86,
            93
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_include_patterns",
          "docstring": "",
          "line_range": [
            95,
            98
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_patterns",
          "docstring": "",
          "line_range": [
            100,
            103
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_max_file_size",
          "docstring": "",
          "line_range": [
            105,
            106
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_struct_file_path",
          "docstring": "",
          "line_range": [
            108,
            109
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "get_context_file_path",
          "docstring": "",
          "line_range": [
            111,
            112
          ],
          "parameters": [
            "config"
          ],
          "decorators": []
        },
        {
          "name": "save_config",
          "docstring": "",
          "line_range": [
            114,
            121
          ],
          "parameters": [
            "config",
            "root_dir"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "gitignore_path.open",
          "Path",
          "line.strip",
          "logging.error",
          "line.startswith",
          "gitignore_path.exists"
        ],
        "load_config": [
          "toml.load",
          "config_path.open",
          "Path",
          "config_path.exists",
          "logging.error"
        ],
        "read_file_content": [
          "path.is_file",
          "f.read",
          "Path",
          "path.open",
          "logging.error"
        ],
        "write_to_file": [
          "re.sub",
          "str",
          "Path",
          "file_path.open",
          "file_path.exists",
          "f.write",
          "logging.error",
          "base_path.mkdir",
          "logging.warning",
          "logging.info"
        ],
        "parse_files_from_response": [
          "filename.strip",
          "re.findall",
          "files.append",
          "content.strip"
        ],
        "get_cache_config": [
          "config.get"
        ],
        "get_copilot_config": [
          "config.get"
        ],
        "get_queue_config": [
          "config.get"
        ],
        "get_context_config": [
          "config.get"
        ],
        "get_exclude_dirs": [
          "set",
          "list",
          "cli_config.get",
          "parsing_config.get",
          "config.get"
        ],
        "get_include_patterns": [
          "cli_config.get",
          "parsing_config.get",
          "config.get"
        ],
        "get_exclude_patterns": [
          "cli_config.get",
          "parsing_config.get",
          "config.get"
        ],
        "get_max_file_size": [
          "config.get"
        ],
        "get_struct_file_path": [
          "config.get"
        ],
        "get_context_file_path": [
          "config.get"
        ],
        "save_config": [
          "config_path.open",
          "Path",
          "logging.error",
          "toml.dump"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "logging",
        "pathlib",
        "re",
        "toml",
        "typing"
      ],
      "hash": null,
      "artifact_id": "45174475-d2d2-46e6-99e2-3d55ceb62804"
    },
    {
      "module_id": "src.llmstruct.modules.cli.context",
      "path": "src/llmstruct/modules/cli/context.py",
      "category": "cli",
      "module_doc": "",
      "functions": [
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": [
            3,
            5
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "context": [
          "logging.warning"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": null,
      "artifact_id": "b359d97a-6abc-44eb-b28e-574392507d60"
    },
    {
      "module_id": "src.llmstruct.modules.cli.__init__",
      "path": "src/llmstruct/modules/cli/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "66fbe324-bcfa-4891-be1e-4cae40f00f98"
    },
    {
      "module_id": "src.llmstruct.modules.commands.queue",
      "path": "src/llmstruct/modules/commands/queue.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "process_cli_queue_enhanced",
          "docstring": "Enhanced queue processing with workflow support, performance tracking, and safety validation.",
          "line_range": [
            9,
            208
          ],
          "parameters": [
            "root_dir",
            "context_path",
            "args",
            "cache",
            "client"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "process_cli_queue_enhanced": [
          "logging.info",
          "json.load",
          "write_to_file",
          "enumerate",
          "print",
          "attach_to_llm_request",
          "open",
          "workflow.get",
          "time.time",
          "read_file_content",
          "client.query",
          "options.get",
          "len",
          "get_folder_structure",
          "load_gitignore",
          "item.get",
          "logging.error",
          "isinstance"
        ]
      },
      "dependencies": [
        "attach_to_llm_request",
        "get_folder_structure",
        "json",
        "llmstruct.generators.json_generator",
        "llmstruct.modules.cli.utils",
        "llmstruct.self_run",
        "load_gitignore",
        "logging",
        "os",
        "read_file_content",
        "time",
        "write_to_file"
      ],
      "hash": null,
      "artifact_id": "2e7d67a0-930b-49c5-9ce7-3ab09206eb55"
    },
    {
      "module_id": "src.llmstruct.modules.commands.metrics",
      "path": "src/llmstruct/modules/commands/metrics.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "metrics_status",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 \u043c\u0435\u0442\u0440\u0438\u043a",
          "line_range": [
            1,
            20
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "metrics_summary",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u0443\u044e \u0441\u0432\u043e\u0434\u043a\u0443 \u043c\u0435\u0442\u0440\u0438\u043a",
          "line_range": [
            22,
            66
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "metrics_analytics",
          "docstring": "\u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435",
          "line_range": [
            68,
            104
          ],
          "parameters": [
            "output_file",
            "format"
          ],
          "decorators": []
        },
        {
          "name": "metrics_report",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u0441\u0435\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u0439 \u043e\u0442\u0447\u0435\u0442",
          "line_range": [
            106,
            134
          ],
          "parameters": [
            "sessions",
            "output_file"
          ],
          "decorators": []
        },
        {
          "name": "metrics_track",
          "docstring": "\u0420\u0443\u0447\u043d\u043e\u0435 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u0439",
          "line_range": [
            136,
            145
          ],
          "parameters": [
            "event_type",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "metrics_tokens",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u0443\u044e \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u0442\u043e\u043a\u0435\u043d\u043e\u0432",
          "line_range": [
            147,
            185
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "cmd_metrics",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0430\u043c\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            187,
            205
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "metrics_status": [
          "get_metrics_tracker",
          "tracker.get_session_summary",
          "print"
        ],
        "metrics_summary": [
          "max",
          "get_metrics_tracker",
          "tracker.get_session_summary",
          "print"
        ],
        "metrics_analytics": [
          "json.dumps",
          "enumerate",
          "print",
          "tracker.get_analytics_data",
          "open",
          "tracker.get_session_summary",
          "time.strftime",
          "json.dump",
          "get_metrics_tracker",
          "csv.writer",
          "writer.writerow"
        ],
        "metrics_report": [
          "print",
          "tracker.get_analytics_data",
          "open",
          "time.strftime",
          "min",
          "get_metrics_tracker",
          "len",
          "analytics.get",
          "sum",
          "f.write"
        ],
        "metrics_track": [
          "track_workflow_event",
          "print"
        ],
        "metrics_tokens": [
          "enumerate",
          "print",
          "get_metrics_tracker",
          "interaction.get",
          "summary.get",
          "get_token_summary"
        ],
        "cmd_metrics": [
          "metrics_analytics",
          "metrics_tokens",
          "metrics_report",
          "metrics_track",
          "metrics_summary",
          "print",
          "metrics_status"
        ]
      },
      "dependencies": [
        "csv",
        "get_metrics_tracker",
        "get_token_summary",
        "json",
        "llmstruct.metrics_tracker",
        "time",
        "track_workflow_event"
      ],
      "hash": null,
      "artifact_id": "2f4a823f-0f2b-4eaa-8504-0d5fd9072e25"
    },
    {
      "module_id": "src.llmstruct.modules.commands.services",
      "path": "src/llmstruct/modules/commands/services.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "add_api_bot_commands",
          "docstring": "\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f API \u0438 Bot \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438",
          "line_range": [
            10,
            47
          ],
          "parameters": [
            "subparsers"
          ],
          "decorators": []
        },
        {
          "name": "cmd_api_management",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 API \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c",
          "line_range": [
            49,
            111
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_bot_management",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 Telegram \u0431\u043e\u0442\u0430\u043c\u0438",
          "line_range": [
            113,
            190
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_services",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u043c\u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438 (API + Bots)",
          "line_range": [
            192,
            233
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "add_api_bot_commands": [
          "api_start.add_argument",
          "api_parser.add_subparsers",
          "services_subparsers.add_parser",
          "metrics_parser.add_subparsers",
          "metrics_subparsers.add_parser",
          "metrics_analytics.add_argument",
          "bot_start.add_argument",
          "subparsers.add_parser",
          "metrics_report.add_argument",
          "bot_parser.add_subparsers",
          "bot_subparsers.add_parser",
          "api_subparsers.add_parser",
          "services_parser.add_subparsers",
          "metrics_track.add_argument"
        ],
        "cmd_api_management": [
          "data.get",
          "requests.post",
          "psutil.Process",
          "requests.get",
          "print",
          "venv_path.exists",
          "Path",
          "subprocess.Popen",
          "open",
          "str",
          "process.wait",
          "process.terminate",
          "response.json",
          "int",
          "f.read",
          "pid_file.unlink",
          "pid_file.exists",
          "f.write"
        ],
        "cmd_bot_management": [
          "psutil.Process",
          "print",
          "str",
          "process.wait",
          "Path",
          "subprocess.Popen",
          "bot_scripts.get",
          "os.getenv",
          "open",
          "process.terminate",
          "int",
          "f.read",
          "process.is_running",
          "active_bots.append",
          "pid_file.unlink",
          "pid_file.exists",
          "f.write"
        ],
        "cmd_services": [
          "print",
          "type",
          "time.sleep",
          "cmd_api_management",
          "cmd_bot_management"
        ]
      },
      "dependencies": [
        "Path",
        "os",
        "pathlib",
        "psutil",
        "requests",
        "signal",
        "subprocess",
        "time"
      ],
      "hash": null,
      "artifact_id": "109cc69d-6005-4f19-9c9a-26591d412840"
    },
    {
      "module_id": "src.llmstruct.modules.commands.__init__",
      "path": "src/llmstruct/modules/commands/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "9fbd5d6a-a1b1-4663-997e-17f7731352c6"
    },
    {
      "module_id": "src.llmstruct.templates.__init__",
      "path": "src/llmstruct/templates/__init__.py",
      "category": "cli",
      "module_doc": "Templates for LLM prompts used in LLMStruct integration.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "28d0107c-d2a1-4ed7-8762-1e3f61eba037"
    },
    {
      "module_id": "src.llmstruct.api.app",
      "path": "src/llmstruct/api/app.py",
      "category": "core",
      "module_doc": "Main FastAPI application for LLMStruct",
      "functions": [
        {
          "name": "root",
          "docstring": "Root endpoint with API information",
          "line_range": [
            78,
            86
          ],
          "parameters": [],
          "decorators": [
            "app.get('/', tags=['root'])"
          ]
        }
      ],
      "classes": [],
      "callgraph": {
        "root": [
          "app.get"
        ]
      },
      "dependencies": [
        "CORSMiddleware",
        "Depends",
        "FastAPI",
        "GZipMiddleware",
        "api_key_middleware",
        "chat",
        "config",
        "continue_adapter",
        "fastapi",
        "fastapi.middleware.cors",
        "fastapi.middleware.gzip",
        "logging",
        "middleware.auth",
        "middleware.logging",
        "request_logging_middleware",
        "routes",
        "settings",
        "system",
        "uvicorn"
      ],
      "hash": null,
      "artifact_id": "df37e467-1e94-48ef-952e-6ca5e887f240"
    },
    {
      "module_id": "src.llmstruct.api.routes.continue_adapter",
      "path": "src/llmstruct/api/routes/continue_adapter.py",
      "category": "core",
      "module_doc": "Continue API Adapter\n\nTranslates Continue extension requests to LLMStruct chat API format",
      "functions": [
        {
          "name": "continue_chat_completion",
          "docstring": "Continue-compatible chat completion endpoint\nTranslates Continue requests to our LLMStruct format",
          "line_range": [
            59,
            129
          ],
          "parameters": [
            "request",
            "api_key"
          ],
          "decorators": [
            "router.post('/v1/chat/completions')"
          ]
        },
        {
          "name": "continue_models",
          "docstring": "List available models for Continue",
          "line_range": [
            132,
            158
          ],
          "parameters": [
            "api_key"
          ],
          "decorators": [
            "router.get('/v1/models')"
          ]
        },
        {
          "name": "continue_embeddings",
          "docstring": "Embeddings endpoint for Continue (placeholder)",
          "line_range": [
            161,
            193
          ],
          "parameters": [
            "request",
            "api_key"
          ],
          "decorators": [
            "router.post('/v1/embeddings')"
          ]
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            25,
            35
          ],
          "parameters": [
            "self",
            "messages",
            "model",
            "temperature",
            "max_tokens",
            "stream"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            39,
            56
          ],
          "parameters": [
            "self",
            "content",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ContinueRequest",
          "docstring": "Continue API request format",
          "line_range": [
            23,
            35
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                25,
                35
              ],
              "parameters": [
                "self",
                "messages",
                "model",
                "temperature",
                "max_tokens",
                "stream"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "ContinueResponse",
          "docstring": "Continue API response format (OpenAI-compatible)",
          "line_range": [
            37,
            56
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                39,
                56
              ],
              "parameters": [
                "self",
                "content",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "int",
          "len",
          "content.split",
          "datetime.now"
        ],
        "continue_chat_completion": [
          "router.post",
          "datetime.now",
          "str",
          "llm_service.process_message",
          "logger.error",
          "logger.info",
          "reversed",
          "len",
          "HTTPException",
          "ContinueResponse",
          "request.json",
          "Depends",
          "request_data.get",
          "msg.get"
        ],
        "continue_models": [
          "Depends",
          "int",
          "datetime.now",
          "router.get"
        ],
        "continue_embeddings": [
          "router.post",
          "str",
          "logger.error",
          "input_text.split",
          "len",
          "HTTPException",
          "request.json",
          "Depends",
          "request_data.get"
        ]
      },
      "dependencies": [
        "APIRouter",
        "Any",
        "ChatMessage",
        "ChatResponse",
        "Depends",
        "Dict",
        "HTTPException",
        "LLMService",
        "List",
        "Optional",
        "Request",
        "datetime",
        "fastapi",
        "get_api_key",
        "logging",
        "middleware.auth",
        "models.requests",
        "models.responses",
        "services.llm_service",
        "typing"
      ],
      "hash": null,
      "artifact_id": "bfb6bbc9-e599-4aef-9f91-3852ffc77c54"
    },
    {
      "module_id": "src.llmstruct.api.middleware.auth",
      "path": "src/llmstruct/api/middleware/auth.py",
      "category": "core",
      "module_doc": "Authentication middleware for LLMStruct FastAPI",
      "functions": [
        {
          "name": "get_api_key",
          "docstring": "FastAPI dependency for API key authentication",
          "line_range": [
            16,
            48
          ],
          "parameters": [
            "request",
            "credentials"
          ],
          "decorators": []
        },
        {
          "name": "api_key_middleware",
          "docstring": "API key authentication middleware",
          "line_range": [
            50,
            87
          ],
          "parameters": [
            "request",
            "call_next"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_api_key": [
          "Depends",
          "HTTPException"
        ],
        "api_key_middleware": [
          "auth_header.startswith",
          "call_next",
          "JSONResponse",
          "time.time"
        ]
      },
      "dependencies": [
        "Callable",
        "Depends",
        "HTTPAuthorizationCredentials",
        "HTTPBearer",
        "HTTPException",
        "JSONResponse",
        "Optional",
        "Request",
        "config",
        "fastapi",
        "fastapi.security",
        "settings",
        "starlette.responses",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "de01d163-0528-4fdf-8813-7d34fef8ba73"
    },
    {
      "module_id": "src.llmstruct.api.services.llm_service",
      "path": "src/llmstruct/api/services/llm_service.py",
      "category": "core",
      "module_doc": "LLM Service\n\nIntegrates with existing LLM models and context orchestration",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            24,
            28
          ],
          "parameters": [
            "self",
            "content",
            "context_info",
            "token_usage"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            33,
            36
          ],
          "parameters": [
            "self",
            "api_key"
          ],
          "decorators": []
        },
        {
          "name": "chat_completion",
          "docstring": "Send chat completion request to Anthropic",
          "line_range": [
            38,
            77
          ],
          "parameters": [
            "self",
            "messages",
            "temperature"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            82,
            85
          ],
          "parameters": [
            "self",
            "api_key"
          ],
          "decorators": []
        },
        {
          "name": "chat_completion",
          "docstring": "Send chat completion request to Grok",
          "line_range": [
            87,
            113
          ],
          "parameters": [
            "self",
            "messages",
            "temperature"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            118,
            124
          ],
          "parameters": [
            "self",
            "base_path"
          ],
          "decorators": []
        },
        {
          "name": "_initialize_components",
          "docstring": "Initialize context orchestrator and copilot manager",
          "line_range": [
            126,
            140
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "process_message",
          "docstring": "Process a user message and return AI response",
          "line_range": [
            143,
            168
          ],
          "parameters": [
            "self",
            "message",
            "session_id",
            "context_mode"
          ],
          "decorators": []
        },
        {
          "name": "_try_llm_providers",
          "docstring": "Try LLM providers in order and return response",
          "line_range": [
            170,
            195
          ],
          "parameters": [
            "self",
            "message",
            "context_info"
          ],
          "decorators": []
        },
        {
          "name": "_get_context",
          "docstring": "Get relevant context for the message",
          "line_range": [
            197,
            229
          ],
          "parameters": [
            "self",
            "message",
            "context_mode"
          ],
          "decorators": []
        },
        {
          "name": "_get_full_context",
          "docstring": "Get full project context",
          "line_range": [
            231,
            243
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_focused_context",
          "docstring": "Get focused context based on message content",
          "line_range": [
            245,
            260
          ],
          "parameters": [
            "self",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "_get_minimal_context",
          "docstring": "Get minimal context - basic project info",
          "line_range": [
            262,
            267
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_generate_grok_response",
          "docstring": "Generate response using Grok API",
          "line_range": [
            269,
            287
          ],
          "parameters": [
            "self",
            "message",
            "context_info"
          ],
          "decorators": []
        },
        {
          "name": "_generate_anthropic_response",
          "docstring": "Generate response using Anthropic API",
          "line_range": [
            289,
            307
          ],
          "parameters": [
            "self",
            "message",
            "context_info"
          ],
          "decorators": []
        },
        {
          "name": "_build_system_prompt",
          "docstring": "Build system prompt with project context",
          "line_range": [
            309,
            344
          ],
          "parameters": [
            "self",
            "context_info"
          ],
          "decorators": []
        },
        {
          "name": "_generate_mock_response",
          "docstring": "Generate a mock AI response (placeholder for real LLM)",
          "line_range": [
            346,
            380
          ],
          "parameters": [
            "self",
            "message",
            "context_info"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMResponse",
          "docstring": "Response from LLM processing",
          "line_range": [
            21,
            28
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                24,
                28
              ],
              "parameters": [
                "self",
                "content",
                "context_info",
                "token_usage"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "AnthropicClient",
          "docstring": "Client for Anthropic Claude API",
          "line_range": [
            30,
            77
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                33,
                36
              ],
              "parameters": [
                "self",
                "api_key"
              ]
            },
            {
              "name": "chat_completion",
              "docstring": "Send chat completion request to Anthropic",
              "line_range": [
                38,
                77
              ],
              "parameters": [
                "self",
                "messages",
                "temperature"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "GrokClient",
          "docstring": "Client for Grok API integration",
          "line_range": [
            79,
            113
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                82,
                85
              ],
              "parameters": [
                "self",
                "api_key"
              ]
            },
            {
              "name": "chat_completion",
              "docstring": "Send chat completion request to Grok",
              "line_range": [
                87,
                113
              ],
              "parameters": [
                "self",
                "messages",
                "temperature"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "LLMService",
          "docstring": "Service for LLM processing with context integration",
          "line_range": [
            115,
            380
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                118,
                124
              ],
              "parameters": [
                "self",
                "base_path"
              ]
            },
            {
              "name": "_initialize_components",
              "docstring": "Initialize context orchestrator and copilot manager",
              "line_range": [
                126,
                140
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "process_message",
              "docstring": "Process a user message and return AI response",
              "line_range": [
                143,
                168
              ],
              "parameters": [
                "self",
                "message",
                "session_id",
                "context_mode"
              ]
            },
            {
              "name": "_try_llm_providers",
              "docstring": "Try LLM providers in order and return response",
              "line_range": [
                170,
                195
              ],
              "parameters": [
                "self",
                "message",
                "context_info"
              ]
            },
            {
              "name": "_get_context",
              "docstring": "Get relevant context for the message",
              "line_range": [
                197,
                229
              ],
              "parameters": [
                "self",
                "message",
                "context_mode"
              ]
            },
            {
              "name": "_get_full_context",
              "docstring": "Get full project context",
              "line_range": [
                231,
                243
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_focused_context",
              "docstring": "Get focused context based on message content",
              "line_range": [
                245,
                260
              ],
              "parameters": [
                "self",
                "message"
              ]
            },
            {
              "name": "_get_minimal_context",
              "docstring": "Get minimal context - basic project info",
              "line_range": [
                262,
                267
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_generate_grok_response",
              "docstring": "Generate response using Grok API",
              "line_range": [
                269,
                287
              ],
              "parameters": [
                "self",
                "message",
                "context_info"
              ]
            },
            {
              "name": "_generate_anthropic_response",
              "docstring": "Generate response using Anthropic API",
              "line_range": [
                289,
                307
              ],
              "parameters": [
                "self",
                "message",
                "context_info"
              ]
            },
            {
              "name": "_build_system_prompt",
              "docstring": "Build system prompt with project context",
              "line_range": [
                309,
                344
              ],
              "parameters": [
                "self",
                "context_info"
              ]
            },
            {
              "name": "_generate_mock_response",
              "docstring": "Generate a mock AI response (placeholder for real LLM)",
              "line_range": [
                346,
                380
              ],
              "parameters": [
                "self",
                "message",
                "context_info"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path.cwd",
          "GrokClient",
          "self._initialize_components",
          "AnthropicClient"
        ],
        "chat_completion": [
          "httpx.AsyncClient",
          "ValueError",
          "response.json",
          "client.post",
          "response.raise_for_status"
        ],
        "_initialize_components": [
          "str",
          "logger.error",
          "SmartContextOrchestrator",
          "logger.info",
          "CopilotContextManager"
        ],
        "process_message": [
          "self._try_llm_providers",
          "str",
          "self._get_context",
          "logger.error",
          "LLMResponse"
        ],
        "_try_llm_providers": [
          "self._generate_anthropic_response",
          "self._generate_mock_response",
          "self._generate_grok_response",
          "logger.info",
          "logger.warning",
          "len"
        ],
        "_get_context": [
          "self._get_focused_context",
          "context_info.update",
          "str",
          "logger.error",
          "self._get_full_context",
          "self._get_minimal_context"
        ],
        "_get_full_context": [
          "struct_file.exists",
          "json.load",
          "list",
          "open",
          "len",
          "struct_data.get"
        ],
        "_get_focused_context": [
          "message.lower",
          "any"
        ],
        "_get_minimal_context": [
          "datetime.now",
          "str"
        ],
        "_generate_grok_response": [
          "len",
          "ValueError",
          "self._build_system_prompt"
        ],
        "_generate_anthropic_response": [
          "len",
          "ValueError",
          "self._build_system_prompt"
        ],
        "_build_system_prompt": [
          "context_info.get"
        ],
        "_generate_mock_response": [
          "message.lower",
          "len",
          "context_info.get"
        ]
      },
      "dependencies": [
        "Any",
        "CopilotContextManager",
        "Dict",
        "List",
        "Optional",
        "Path",
        "SmartContextOrchestrator",
        "asyncio",
        "context_orchestrator",
        "copilot",
        "datetime",
        "httpx",
        "json",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "f0f08a4f-f2da-4f3e-a952-5388e6bbedd7"
    },
    {
      "module_id": "src.llmstruct.generators.json_generator",
      "path": "src/llmstruct/generators/json_generator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_folder_structure",
          "docstring": "Capture directory and file structure with artifact_id, respecting .gitignore and patterns.",
          "line_range": [
            15,
            89
          ],
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "build_toc_and_modules",
          "docstring": "Build TOC and modules with artifact_id and robust filtering. \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 include_dirs.",
          "line_range": [
            92,
            161
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "exclude_dirs",
            "include_dirs"
          ],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "Generate JSON structure for project with artifact_id, summary, and tags. \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 include_dirs.",
          "line_range": [
            164,
            233
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals",
            "exclude_dirs",
            "include_dirs"
          ],
          "decorators": []
        },
        {
          "name": "generate_json_with_output_file",
          "docstring": "",
          "line_range": [
            236,
            261
          ],
          "parameters": [
            "root_dir",
            "output_file",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs",
            "include_ranges",
            "include_hashes",
            "goals"
          ],
          "decorators": []
        },
        {
          "name": "norm_dirname",
          "docstring": "",
          "line_range": [
            114,
            115
          ],
          "parameters": [
            "d"
          ],
          "decorators": []
        },
        {
          "name": "is_included_dir",
          "docstring": "",
          "line_range": [
            124,
            128
          ],
          "parameters": [
            "f"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_folder_structure": [
          "set",
          "str",
          "any",
          "abs_dir_path.joinpath",
          "Path",
          "abs_dir_path.match",
          "file_path.match",
          "os.walk",
          "abs_dir_path.relative_to",
          "uuid.uuid4",
          "file_path.relative_to",
          "sorted",
          "p.rstrip",
          "p.endswith",
          "structure.append"
        ],
        "build_toc_and_modules": [],
        "norm_dirname": [],
        "is_included_dir": [
          "norm_dirname",
          "any"
        ],
        "generate_json": [
          "set",
          "list",
          "str",
          "Path",
          "len",
          "get_folder_structure",
          "uuid.uuid4",
          "sum",
          "build_toc_and_modules"
        ],
        "generate_json_with_output_file": [
          "generate_json",
          "open",
          "json.dump"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "analyze_module",
        "datetime",
        "json",
        "logging",
        "os",
        "parsers.python_parser",
        "pathlib",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "4936c1cb-cdda-4760-aa17-0a6e9945b270"
    },
    {
      "module_id": "src.llmstruct.generators.go_json_generator",
      "path": "src/llmstruct/generators/go_json_generator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_go_folder_structure",
          "docstring": "Capture directory and file structure for Go projects with artifact_id, respecting .gitignore and patterns.",
          "line_range": [
            15,
            85
          ],
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "build_go_toc_and_modules",
          "docstring": "Build TOC and modules for Go projects with artifact_id and robust filtering.",
          "line_range": [
            88,
            143
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "extract_go_mod_info",
          "docstring": "Extract information from go.mod file.",
          "line_range": [
            146,
            182
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "generate_go_json",
          "docstring": "Generate JSON structure for Go project with artifact_id, summary, and tags.",
          "line_range": [
            185,
            259
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals",
            "exclude_dirs"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_go_folder_structure": [
          "set",
          "str",
          "any",
          "file_path.match",
          "Path",
          "os.walk",
          "uuid.uuid4",
          "file_path.relative_to",
          "sorted",
          "p.rstrip",
          "p.endswith",
          "structure.append"
        ],
        "build_go_toc_and_modules": [
          "modules.append",
          "set",
          "f.match",
          "any",
          "str",
          "Path",
          "toc.append",
          "len",
          "uuid.uuid4",
          "analyze_module",
          "module.get",
          "p.rstrip",
          "p.endswith"
        ],
        "extract_go_mod_info": [
          "dependencies.append",
          "go_mod_path.exists",
          "line.split",
          "f.read",
          "Path",
          "open",
          "content.strip",
          "line.strip",
          "logging.error",
          "len",
          "line.startswith"
        ],
        "generate_go_json": [
          "m.get",
          "set",
          "list",
          "str",
          "Path",
          "go_mod_info.get",
          "get_go_folder_structure",
          "extract_go_mod_info",
          "build_go_toc_and_modules",
          "len",
          "uuid.uuid4",
          "sum"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "analyze_module",
        "datetime",
        "logging",
        "os",
        "parsers.go_parser",
        "pathlib",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "3d116c73-a106-4639-9a8b-5cf7edcad0f0"
    },
    {
      "module_id": "src.llmstruct.generators.__init__",
      "path": "src/llmstruct/generators/__init__.py",
      "category": "cli",
      "module_doc": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "generate_json",
        "json_generator"
      ],
      "hash": null,
      "artifact_id": "144ba44c-ccea-4558-aa9a-712e93549c71"
    },
    {
      "module_id": "src.llmstruct.ARCHIVE.cli_core",
      "path": "src/llmstruct/ARCHIVE/cli_core.py",
      "category": "core",
      "module_doc": "Core CLI functionality and main loop.",
      "functions": [
        {
          "name": "create_cli_core",
          "docstring": "Factory function to create CLI core instance.",
          "line_range": [
            110,
            112
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize CLI core with root directory.",
          "line_range": [
            28,
            35
          ],
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "setup_cache",
          "docstring": "Initialize cache if enabled in config.",
          "line_range": [
            37,
            53
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "setup_copilot",
          "docstring": "Initialize Copilot integration if enabled.",
          "line_range": [
            55,
            63
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_interactive_mode",
          "docstring": "Run the interactive CLI mode.",
          "line_range": [
            65,
            97
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cleanup",
          "docstring": "Clean up resources.",
          "line_range": [
            99,
            107
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLICore",
          "docstring": "Core CLI class handling main loop and coordination.",
          "line_range": [
            25,
            107
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize CLI core with root directory.",
              "line_range": [
                28,
                35
              ],
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "setup_cache",
              "docstring": "Initialize cache if enabled in config.",
              "line_range": [
                37,
                53
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "setup_copilot",
              "docstring": "Initialize Copilot integration if enabled.",
              "line_range": [
                55,
                63
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run_interactive_mode",
              "docstring": "Run the interactive CLI mode.",
              "line_range": [
                65,
                97
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cleanup",
              "docstring": "Clean up resources.",
              "line_range": [
                99,
                107
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "CLIConfig",
          "CommandProcessor",
          "CLIUtils"
        ],
        "setup_cache": [
          "cache_path.mkdir",
          "str",
          "Path",
          "JSONCache",
          "cache_config.get",
          "logging.warning",
          "logging.info"
        ],
        "setup_copilot": [
          "copilot_config.get",
          "initialize_copilot",
          "logging.warning",
          "logging.info"
        ],
        "run_interactive_mode": [
          "self.setup_cache",
          "input",
          "user_input.lower",
          "print",
          "user_input.startswith",
          "self.cleanup",
          "logging.error",
          "self.setup_copilot"
        ],
        "cleanup": [
          "logging.info"
        ],
        "create_cli_core": [
          "CLICore"
        ]
      },
      "dependencies": [
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "CopilotContextManager",
        "JSONCache",
        "Optional",
        "Path",
        "cli_commands",
        "cli_config",
        "cli_utils",
        "copilot",
        "initialize_copilot",
        "llmstruct.cache",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "92888eea-ecc8-4fea-8487-769566224244"
    },
    {
      "module_id": "src.llmstruct.ARCHIVE.cli_config",
      "path": "src/llmstruct/ARCHIVE/cli_config.py",
      "category": "core",
      "module_doc": "CLI configuration management.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize configuration manager.",
          "line_range": [
            20,
            24
          ],
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load configuration from llmstruct.toml.",
          "line_range": [
            26,
            34
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_cache_config",
          "docstring": "Get cache configuration section.",
          "line_range": [
            36,
            38
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_copilot_config",
          "docstring": "Get Copilot configuration section.",
          "line_range": [
            40,
            42
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_queue_config",
          "docstring": "Get queue configuration section.",
          "line_range": [
            44,
            46
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_config",
          "docstring": "Get context configuration section.",
          "line_range": [
            48,
            50
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_gitignore_patterns",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": [
            52,
            66
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_dirs",
          "docstring": "Get directories to exclude from scanning.",
          "line_range": [
            68,
            82
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_include_patterns",
          "docstring": "Get file patterns to include.",
          "line_range": [
            84,
            89
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_patterns",
          "docstring": "Get file patterns to exclude.",
          "line_range": [
            91,
            96
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_max_file_size",
          "docstring": "Get maximum file size for processing (in bytes).",
          "line_range": [
            98,
            100
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_auto_update_config",
          "docstring": "Get auto-update configuration.",
          "line_range": [
            102,
            104
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "is_auto_update_enabled",
          "docstring": "Check if auto-update is enabled.",
          "line_range": [
            106,
            108
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_struct_file_path",
          "docstring": "Get path to struct.json file.",
          "line_range": [
            110,
            112
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_file_path",
          "docstring": "Get path to context file.",
          "line_range": [
            114,
            116
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_config",
          "docstring": "Save current configuration to file.",
          "line_range": [
            118,
            124
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "update_config",
          "docstring": "Update configuration value.",
          "line_range": [
            126,
            131
          ],
          "parameters": [
            "self",
            "section",
            "key",
            "value"
          ],
          "decorators": []
        },
        {
          "name": "reload_config",
          "docstring": "Reload configuration from file.",
          "line_range": [
            133,
            135
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLIConfig",
          "docstring": "Manages CLI configuration from llmstruct.toml and other sources.",
          "line_range": [
            17,
            135
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize configuration manager.",
              "line_range": [
                20,
                24
              ],
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load configuration from llmstruct.toml.",
              "line_range": [
                26,
                34
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_cache_config",
              "docstring": "Get cache configuration section.",
              "line_range": [
                36,
                38
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_copilot_config",
              "docstring": "Get Copilot configuration section.",
              "line_range": [
                40,
                42
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_queue_config",
              "docstring": "Get queue configuration section.",
              "line_range": [
                44,
                46
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_config",
              "docstring": "Get context configuration section.",
              "line_range": [
                48,
                50
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_gitignore_patterns",
              "docstring": "Load and normalize patterns from .gitignore.",
              "line_range": [
                52,
                66
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_exclude_dirs",
              "docstring": "Get directories to exclude from scanning.",
              "line_range": [
                68,
                82
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_include_patterns",
              "docstring": "Get file patterns to include.",
              "line_range": [
                84,
                89
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_exclude_patterns",
              "docstring": "Get file patterns to exclude.",
              "line_range": [
                91,
                96
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_max_file_size",
              "docstring": "Get maximum file size for processing (in bytes).",
              "line_range": [
                98,
                100
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_auto_update_config",
              "docstring": "Get auto-update configuration.",
              "line_range": [
                102,
                104
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "is_auto_update_enabled",
              "docstring": "Check if auto-update is enabled.",
              "line_range": [
                106,
                108
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_struct_file_path",
              "docstring": "Get path to struct.json file.",
              "line_range": [
                110,
                112
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_file_path",
              "docstring": "Get path to context file.",
              "line_range": [
                114,
                116
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_config",
              "docstring": "Save current configuration to file.",
              "line_range": [
                118,
                124
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "update_config",
              "docstring": "Update configuration value.",
              "line_range": [
                126,
                131
              ],
              "parameters": [
                "self",
                "section",
                "key",
                "value"
              ]
            },
            {
              "name": "reload_config",
              "docstring": "Reload configuration from file.",
              "line_range": [
                133,
                135
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self._load_config"
        ],
        "_load_config": [
          "logging.error",
          "toml.load"
        ],
        "get_cache_config": [],
        "get_copilot_config": [],
        "get_queue_config": [],
        "get_context_config": [],
        "get_gitignore_patterns": [
          "gitignore_path.open",
          "Path",
          "line.strip",
          "logging.error",
          "line.startswith",
          "gitignore_path.exists"
        ],
        "get_exclude_dirs": [
          "cli_config.get",
          "list",
          "set",
          "parsing_config.get"
        ],
        "get_include_patterns": [
          "cli_config.get",
          "parsing_config.get"
        ],
        "get_exclude_patterns": [
          "cli_config.get",
          "parsing_config.get"
        ],
        "get_max_file_size": [],
        "get_auto_update_config": [],
        "is_auto_update_enabled": [
          "self.get_auto_update_config"
        ],
        "get_struct_file_path": [],
        "get_context_file_path": [],
        "save_config": [
          "logging.error",
          "toml.dump"
        ],
        "update_config": [
          "self.save_config"
        ],
        "reload_config": [
          "self._load_config"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "logging",
        "pathlib",
        "toml",
        "typing"
      ],
      "hash": null,
      "artifact_id": "ee1ba98a-967f-4610-a3f9-aa89d3abeca5"
    },
    {
      "module_id": "src.llmstruct.ARCHIVE.cli_argument_parser",
      "path": "src/llmstruct/ARCHIVE/cli_argument_parser.py",
      "category": "core",
      "module_doc": "CLI argument parsing for LLMStruct.",
      "functions": [
        {
          "name": "create_argument_parser",
          "docstring": "Create and configure the main argument parser.",
          "line_range": [
            14,
            113
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "add_api_bot_commands",
          "docstring": "Add API and bot management commands to the parser.",
          "line_range": [
            116,
            126
          ],
          "parameters": [
            "subparsers"
          ],
          "decorators": []
        },
        {
          "name": "create_full_argument_parser",
          "docstring": "Create the full argument parser with all commands.",
          "line_range": [
            129,
            137
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "create_argument_parser": [
          "argparse.ArgumentParser",
          "copilot_parser.add_argument",
          "query_parser.add_argument",
          "subparsers.add_parser",
          "parse_parser.add_argument",
          "duplicates_parser.add_argument",
          "parser.add_subparsers",
          "context_parser.add_argument",
          "review_parser.add_argument",
          "dogfood_parser.add_argument",
          "audit_parser.add_argument",
          "interactive_parser.add_argument"
        ],
        "add_api_bot_commands": [
          "add_api_commands",
          "add_bot_commands"
        ],
        "create_full_argument_parser": [
          "create_argument_parser",
          "add_api_bot_commands"
        ]
      },
      "dependencies": [
        "Path",
        "add_api_commands",
        "add_bot_commands",
        "api_commands",
        "argparse",
        "bot_commands",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "1fe01b16-ef6e-49e4-8f16-b8204306dfe9"
    },
    {
      "module_id": "src.llmstruct.ARCHIVE.cli_main_commands",
      "path": "src/llmstruct/ARCHIVE/cli_main_commands.py",
      "category": "core",
      "module_doc": "Main CLI command handlers for LLMStruct.",
      "functions": [
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": [
            33,
            68
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": [
            71,
            127
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with modular structure if available, fallback to legacy.",
          "line_range": [
            130,
            136
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive_modular",
          "docstring": "Run interactive CLI with modular structure.",
          "line_range": [
            139,
            146
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive_legacy",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": [
            149,
            175
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "basic_interactive_processing",
          "docstring": "Basic interactive processing without enhanced features.",
          "line_range": [
            178,
            230
          ],
          "parameters": [
            "args",
            "cache",
            "client"
          ],
          "decorators": []
        },
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": [
            233,
            235
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": [
            238,
            240
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": [
            243,
            245
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "copilot",
          "docstring": "Copilot integration and context management.",
          "line_range": [
            248,
            366
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "audit",
          "docstring": "Audit project structure and generate reports.",
          "line_range": [
            369,
            387
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "analyze_duplicates",
          "docstring": "Analyze function duplication using struct.json deep analysis.",
          "line_range": [
            390,
            495
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "parse": [
          "generate_json",
          "JSONCache",
          "cache.close",
          "load_gitignore",
          "attach_to_llm_request",
          "logging.error",
          "logging.info"
        ],
        "query": [
          "create_context_orchestrator",
          "logging.info",
          "Path",
          "LLMClient",
          "orchestrator.get_context_for_scenario",
          "json.dump",
          "JSONCache",
          "client.query",
          "cache.close",
          "client.query_with_context",
          "logging.error",
          "logging.warning",
          "hasattr"
        ],
        "interactive": [
          "interactive_modular",
          "interactive_legacy",
          "logging.warning"
        ],
        "interactive_modular": [
          "cli_core.run_interactive_mode",
          "logging.error",
          "create_cli_core",
          "interactive_legacy"
        ],
        "interactive_legacy": [
          "print",
          "Path",
          "LLMClient",
          "JSONCache",
          "process_cli_queue_enhanced",
          "cache.close",
          "logging.error",
          "basic_interactive_processing"
        ],
        "basic_interactive_processing": [
          "input",
          "user_input.lower",
          "print",
          "f.read",
          "open",
          "user_input.startswith",
          "client.query"
        ],
        "context": [
          "logging.warning"
        ],
        "dogfood": [
          "logging.warning"
        ],
        "review": [
          "logging.warning"
        ],
        "copilot": [
          "manager.load_context_layer",
          "manager.refresh_all_contexts",
          "initialize_copilot",
          "config_path.exists",
          "manager.get_context_status",
          "enumerate",
          "manager.unload_context_layer",
          "getattr",
          "manager.export_context",
          "manager.validate_change",
          "Path",
          "manager.close",
          "layers.split",
          "template_path.exists",
          "hasattr",
          "logging.info",
          "print",
          "open",
          "smart_suggest",
          "logging.error",
          "shutil.copy",
          "f.write"
        ],
        "audit": [
          "print",
          "Path",
          "file_path.exists",
          "analyze_duplicates",
          "hasattr"
        ],
        "analyze_duplicates": [
          "json.dumps",
          "f.get",
          "print",
          "orchestrator.analyze_codebase_for_duplicates",
          "getattr",
          "open",
          "json.dump",
          "analysis.get",
          "len",
          "func.get",
          "logging.error",
          "WorkflowOrchestrator"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "Optional",
        "Path",
        "WorkflowOrchestrator",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "cli",
        "cli_core",
        "context_orchestrator",
        "copilot",
        "create_cli_core",
        "create_context_orchestrator",
        "generate_json",
        "initialize_copilot",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "load_gitignore",
        "logging",
        "os",
        "pathlib",
        "process_cli_queue_enhanced",
        "shutil",
        "smart_suggest",
        "typing",
        "workflow_orchestrator"
      ],
      "hash": null,
      "artifact_id": "b9f534a5-a751-4c9f-9a20-28adf093c64c"
    },
    {
      "module_id": "src.llmstruct.ARCHIVE.cli_utils",
      "path": "src/llmstruct/ARCHIVE/cli_utils.py",
      "category": "core",
      "module_doc": "CLI utility functions.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize utils with root directory.",
          "line_range": [
            24,
            26
          ],
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read file content with size limit.",
          "line_range": [
            28,
            50
          ],
          "parameters": [
            "self",
            "file_path",
            "max_size"
          ],
          "decorators": []
        },
        {
          "name": "write_file_content",
          "docstring": "Write content to file.",
          "line_range": [
            52,
            70
          ],
          "parameters": [
            "self",
            "file_path",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "get_directory_structure",
          "docstring": "Get directory structure using folder generator.",
          "line_range": [
            72,
            115
          ],
          "parameters": [
            "self",
            "path",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "validate_json",
          "docstring": "Validate JSON content.",
          "line_range": [
            117,
            123
          ],
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "format_json",
          "docstring": "Format data as JSON string.",
          "line_range": [
            125,
            131
          ],
          "parameters": [
            "self",
            "data",
            "indent"
          ],
          "decorators": []
        },
        {
          "name": "generate_unique_id",
          "docstring": "Generate unique ID for commands, queues, etc.",
          "line_range": [
            133,
            137
          ],
          "parameters": [
            "self",
            "prefix"
          ],
          "decorators": []
        },
        {
          "name": "safe_path_join",
          "docstring": "Safely join path parts, preventing directory traversal.",
          "line_range": [
            139,
            149
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "file_exists",
          "docstring": "Check if file exists.",
          "line_range": [
            151,
            157
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "dir_exists",
          "docstring": "Check if directory exists.",
          "line_range": [
            159,
            165
          ],
          "parameters": [
            "self",
            "dir_path"
          ],
          "decorators": []
        },
        {
          "name": "get_file_size",
          "docstring": "Get file size in bytes.",
          "line_range": [
            167,
            173
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_file",
          "docstring": "Create backup of file with timestamp.",
          "line_range": [
            175,
            191
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "cleanup_old_backups",
          "docstring": "Clean up old backup files, keeping only the most recent ones.",
          "line_range": [
            193,
            222
          ],
          "parameters": [
            "self",
            "file_path",
            "keep_count"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLIUtils",
          "docstring": "Utility functions for CLI operations.",
          "line_range": [
            21,
            222
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize utils with root directory.",
              "line_range": [
                24,
                26
              ],
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "read_file_content",
              "docstring": "Read file content with size limit.",
              "line_range": [
                28,
                50
              ],
              "parameters": [
                "self",
                "file_path",
                "max_size"
              ]
            },
            {
              "name": "write_file_content",
              "docstring": "Write content to file.",
              "line_range": [
                52,
                70
              ],
              "parameters": [
                "self",
                "file_path",
                "content"
              ]
            },
            {
              "name": "get_directory_structure",
              "docstring": "Get directory structure using folder generator.",
              "line_range": [
                72,
                115
              ],
              "parameters": [
                "self",
                "path",
                "gitignore_patterns",
                "include_patterns",
                "exclude_patterns",
                "exclude_dirs"
              ]
            },
            {
              "name": "validate_json",
              "docstring": "Validate JSON content.",
              "line_range": [
                117,
                123
              ],
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "format_json",
              "docstring": "Format data as JSON string.",
              "line_range": [
                125,
                131
              ],
              "parameters": [
                "self",
                "data",
                "indent"
              ]
            },
            {
              "name": "generate_unique_id",
              "docstring": "Generate unique ID for commands, queues, etc.",
              "line_range": [
                133,
                137
              ],
              "parameters": [
                "self",
                "prefix"
              ]
            },
            {
              "name": "safe_path_join",
              "docstring": "Safely join path parts, preventing directory traversal.",
              "line_range": [
                139,
                149
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "file_exists",
              "docstring": "Check if file exists.",
              "line_range": [
                151,
                157
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "dir_exists",
              "docstring": "Check if directory exists.",
              "line_range": [
                159,
                165
              ],
              "parameters": [
                "self",
                "dir_path"
              ]
            },
            {
              "name": "get_file_size",
              "docstring": "Get file size in bytes.",
              "line_range": [
                167,
                173
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "backup_file",
              "docstring": "Create backup of file with timestamp.",
              "line_range": [
                175,
                191
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "cleanup_old_backups",
              "docstring": "Clean up old backup files, keeping only the most recent ones.",
              "line_range": [
                193,
                222
              ],
              "parameters": [
                "self",
                "file_path",
                "keep_count"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "read_file_content": [
          "f.read",
          "open",
          "os.stat",
          "logging.error",
          "logging.warning"
        ],
        "write_file_content": [
          "Path",
          "open",
          "logging.error",
          "f.write",
          "logging.info"
        ],
        "get_directory_structure": [
          "os.listdir",
          "logging.error",
          "get_folder_structure",
          "sorted"
        ],
        "validate_json": [
          "json.loads",
          "str"
        ],
        "format_json": [
          "json.dumps",
          "logging.error",
          "str"
        ],
        "generate_unique_id": [
          "int",
          "uuid.uuid4",
          "str",
          "time.time"
        ],
        "safe_path_join": [
          "ValueError",
          "resolved_path.startswith"
        ],
        "file_exists": [
          "self.safe_path_join"
        ],
        "dir_exists": [
          "self.safe_path_join"
        ],
        "get_file_size": [
          "self.safe_path_join"
        ],
        "backup_file": [
          "src.read",
          "int",
          "open",
          "self.safe_path_join",
          "dst.write",
          "logging.error",
          "time.time"
        ],
        "cleanup_old_backups": [
          "filename.split",
          "backups.sort",
          "filename.startswith",
          "os.listdir",
          "int",
          "os.remove",
          "self.safe_path_join",
          "logging.error",
          "backups.append",
          "logging.warning",
          "logging.info"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "get_folder_structure",
        "json",
        "llmstruct.generators.json_generator",
        "logging",
        "os",
        "pathlib",
        "time",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "20068af6-eecf-41fd-82c8-7905dd142074"
    },
    {
      "module_id": "src.llmstruct.ARCHIVE.cli_commands",
      "path": "src/llmstruct/ARCHIVE/cli_commands.py",
      "category": "core",
      "module_doc": "CLI command processing and handlers.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize command processor.",
          "line_range": [
            33,
            72
          ],
          "parameters": [
            "self",
            "root_dir",
            "config",
            "utils"
          ],
          "decorators": []
        },
        {
          "name": "set_cache",
          "docstring": "Set cache instance.",
          "line_range": [
            74,
            76
          ],
          "parameters": [
            "self",
            "cache"
          ],
          "decorators": []
        },
        {
          "name": "set_copilot",
          "docstring": "Set Copilot manager instance.",
          "line_range": [
            78,
            80
          ],
          "parameters": [
            "self",
            "copilot_manager"
          ],
          "decorators": []
        },
        {
          "name": "process_command",
          "docstring": "Process a command starting with /.",
          "line_range": [
            82,
            98
          ],
          "parameters": [
            "self",
            "command_line"
          ],
          "decorators": []
        },
        {
          "name": "process_prompt",
          "docstring": "Process a regular user prompt (not a command).",
          "line_range": [
            100,
            152
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "cmd_help",
          "docstring": "Show help information.",
          "line_range": [
            154,
            217
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_workspace",
          "docstring": "Handle workspace state and permissions management.",
          "line_range": [
            219,
            334
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_mode",
          "docstring": "Handle context mode operations with workspace integration.",
          "line_range": [
            336,
            437
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_view",
          "docstring": "View file or directory contents.",
          "line_range": [
            439,
            478
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_write",
          "docstring": "Write content to a file.",
          "line_range": [
            480,
            505
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_queue",
          "docstring": "Handle queue operations.",
          "line_range": [
            507,
            549
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_cache",
          "docstring": "Handle cache operations.",
          "line_range": [
            551,
            590
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_copilot",
          "docstring": "Handle Copilot operations.",
          "line_range": [
            592,
            626
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_config",
          "docstring": "Handle configuration operations.",
          "line_range": [
            628,
            660
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_status",
          "docstring": "Show system status.",
          "line_range": [
            662,
            676
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_backup",
          "docstring": "Create backup of a file.",
          "line_range": [
            678,
            693
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_parse",
          "docstring": "Parse project structure.",
          "line_range": [
            695,
            715
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_audit",
          "docstring": "Handle audit operations.",
          "line_range": [
            717,
            743
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_auto_update",
          "docstring": "Handle auto-update operations.",
          "line_range": [
            745,
            765
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_struct_status",
          "docstring": "Handle struct status operations.",
          "line_range": [
            767,
            791
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_context",
          "docstring": "Handle context operations.",
          "line_range": [
            793,
            849
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_session",
          "docstring": "Handle session operations.",
          "line_range": [
            851,
            902
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CommandProcessor",
          "docstring": "Processes CLI commands and user prompts.",
          "line_range": [
            30,
            902
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize command processor.",
              "line_range": [
                33,
                72
              ],
              "parameters": [
                "self",
                "root_dir",
                "config",
                "utils"
              ]
            },
            {
              "name": "set_cache",
              "docstring": "Set cache instance.",
              "line_range": [
                74,
                76
              ],
              "parameters": [
                "self",
                "cache"
              ]
            },
            {
              "name": "set_copilot",
              "docstring": "Set Copilot manager instance.",
              "line_range": [
                78,
                80
              ],
              "parameters": [
                "self",
                "copilot_manager"
              ]
            },
            {
              "name": "process_command",
              "docstring": "Process a command starting with /.",
              "line_range": [
                82,
                98
              ],
              "parameters": [
                "self",
                "command_line"
              ]
            },
            {
              "name": "process_prompt",
              "docstring": "Process a regular user prompt (not a command).",
              "line_range": [
                100,
                152
              ],
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "cmd_help",
              "docstring": "Show help information.",
              "line_range": [
                154,
                217
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_workspace",
              "docstring": "Handle workspace state and permissions management.",
              "line_range": [
                219,
                334
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_mode",
              "docstring": "Handle context mode operations with workspace integration.",
              "line_range": [
                336,
                437
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_view",
              "docstring": "View file or directory contents.",
              "line_range": [
                439,
                478
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_write",
              "docstring": "Write content to a file.",
              "line_range": [
                480,
                505
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_queue",
              "docstring": "Handle queue operations.",
              "line_range": [
                507,
                549
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_cache",
              "docstring": "Handle cache operations.",
              "line_range": [
                551,
                590
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_copilot",
              "docstring": "Handle Copilot operations.",
              "line_range": [
                592,
                626
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_config",
              "docstring": "Handle configuration operations.",
              "line_range": [
                628,
                660
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_status",
              "docstring": "Show system status.",
              "line_range": [
                662,
                676
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_backup",
              "docstring": "Create backup of a file.",
              "line_range": [
                678,
                693
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_parse",
              "docstring": "Parse project structure.",
              "line_range": [
                695,
                715
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_audit",
              "docstring": "Handle audit operations.",
              "line_range": [
                717,
                743
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "handle_auto_update",
              "docstring": "Handle auto-update operations.",
              "line_range": [
                745,
                765
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "handle_struct_status",
              "docstring": "Handle struct status operations.",
              "line_range": [
                767,
                791
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_context",
              "docstring": "Handle context operations.",
              "line_range": [
                793,
                849
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_session",
              "docstring": "Handle session operations.",
              "line_range": [
                851,
                902
              ],
              "parameters": [
                "self",
                "args"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "WorkspaceStateManager",
          "print"
        ],
        "set_cache": [],
        "set_copilot": [],
        "process_command": [
          "print",
          "command_line.strip",
          "command_line.split",
          "len",
          "logging.error"
        ],
        "process_prompt": [
          "print",
          "prompt.strip",
          "context_data.get",
          "get_optimized_context",
          "len",
          "CopilotEvent",
          "context_info.get",
          "logging.error",
          "logging.warning",
          "logging.info"
        ],
        "cmd_help": [
          "print"
        ],
        "cmd_workspace": [
          "entry.get",
          "print",
          "result.get",
          "int",
          "action_args.split",
          "len",
          "override.get",
          "boundaries.get",
          "permissions.get",
          "logging.error",
          "args.strip",
          "state.get"
        ],
        "cmd_mode": [
          "print",
          "result.get",
          "context_data.get",
          "args.lower",
          "get_optimized_context",
          "len",
          "args.upper",
          "metrics.get",
          "permissions.get",
          "re.findall",
          "args.strip"
        ],
        "cmd_view": [
          "args.strip",
          "os.listdir",
          "print",
          "sorted"
        ],
        "cmd_write": [
          "print",
          "content.startswith",
          "len",
          "content.endswith",
          "args.split"
        ],
        "cmd_queue": [
          "queue_data.get",
          "json.load",
          "enumerate",
          "print",
          "os.remove",
          "open",
          "cmd.get",
          "len",
          "args.strip"
        ],
        "cmd_cache": [
          "print",
          "os.listdir",
          "stats.get",
          "len",
          "args.strip"
        ],
        "cmd_copilot": [
          "json.dumps",
          "json.load",
          "print",
          "open",
          "args.strip"
        ],
        "cmd_config": [
          "args.strip",
          "print",
          "json.dumps"
        ],
        "cmd_status": [
          "print"
        ],
        "cmd_backup": [
          "args.strip",
          "print"
        ],
        "cmd_parse": [
          "generate_json",
          "print"
        ],
        "cmd_audit": [
          "args.strip",
          "print"
        ],
        "handle_auto_update": [
          "generate_json",
          "print"
        ],
        "handle_struct_status": [
          "datetime.fromtimestamp",
          "json.load",
          "print",
          "open",
          "os.stat",
          "len",
          "struct_data.get"
        ],
        "cmd_context": [
          "print",
          "context_data.get",
          "get_optimized_context",
          "len",
          "metrics.get",
          "args.strip"
        ],
        "cmd_session": [
          "datetime.now",
          "print",
          "len",
          "args.strip",
          "state.get"
        ]
      },
      "dependencies": [
        "Any",
        "CLIConfig",
        "CLIUtils",
        "CopilotContextManager",
        "CopilotEvent",
        "Dict",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "WorkspaceStateManager",
        "cli_config",
        "cli_utils",
        "copilot",
        "create_context_orchestrator",
        "datetime",
        "generate_json",
        "get_optimized_context",
        "get_optimized_context_for_scenario",
        "initialize_copilot",
        "json",
        "llmstruct.cache",
        "llmstruct.context_orchestrator",
        "llmstruct.copilot",
        "llmstruct.generators.json_generator",
        "logging",
        "os",
        "pathlib",
        "re",
        "subprocess",
        "sys",
        "trigger_copilot_event",
        "typing",
        "workspace"
      ],
      "hash": null,
      "artifact_id": "2de02ee2-eed3-4542-be7a-9d5c21ded4ed"
    },
    {
      "module_id": "src.llmstruct.validators.json_validator",
      "path": "src/llmstruct/validators/json_validator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_struct_json",
          "docstring": "Validate a single JSON file against a schema.",
          "line_range": [
            12,
            40
          ],
          "parameters": [
            "json_path",
            "schema_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_directory",
          "docstring": "Validate all JSON files in a directory against a schema.",
          "line_range": [
            43,
            61
          ],
          "parameters": [
            "directory",
            "schema_path",
            "include_patterns",
            "exclude_patterns"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_struct_json": [
          "json.load",
          "validate",
          "str",
          "Path",
          "open",
          "schema_file.exists",
          "logging.error",
          "json_file.exists",
          "logging.info"
        ],
        "validate_directory": [
          "str",
          "any",
          "Path",
          "json_file.match",
          "validate_struct_json"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "ValidationError",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "sys",
        "typing",
        "validate"
      ],
      "hash": null,
      "artifact_id": "34ad1372-0631-46f9-93ef-2f51f4cb20ff"
    },
    {
      "module_id": "src.llmstruct.validators.__init__",
      "path": "src/llmstruct/validators/__init__.py",
      "category": "cli",
      "module_doc": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "json_validator",
        "validate_struct_json"
      ],
      "hash": null,
      "artifact_id": "d405d8a4-9700-48ba-9df4-5b1e605593c0"
    },
    {
      "module_id": "src.llmstruct.parsers.universal_converter",
      "path": "src/llmstruct/parsers/universal_converter.py",
      "category": "core",
      "module_doc": "Universal Code Converter - Orchestrates all language parsers\nConverts any codebase to llmstruct JSON format",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface for universal converter",
          "line_range": [
            375,
            428
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__post_init__",
          "docstring": "",
          "line_range": [
            55,
            62
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            79,
            82
          ],
          "parameters": [
            "self",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "detect_language",
          "docstring": "Detect programming language from file extension",
          "line_range": [
            84,
            92
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "detect_project_languages",
          "docstring": "Detect all languages in project and count files",
          "line_range": [
            94,
            109
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "get_project_files",
          "docstring": "Get all relevant files for conversion",
          "line_range": [
            111,
            138
          ],
          "parameters": [
            "self",
            "project_path",
            "language"
          ],
          "decorators": []
        },
        {
          "name": "convert_python_project",
          "docstring": "Convert Python project to llmstruct format",
          "line_range": [
            140,
            171
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "convert_go_project",
          "docstring": "Convert Go project to llmstruct format",
          "line_range": [
            173,
            190
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "convert_javascript_project",
          "docstring": "Convert JavaScript project to llmstruct format",
          "line_range": [
            192,
            223
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "convert_project",
          "docstring": "Convert any project to llmstruct format",
          "line_range": [
            225,
            250
          ],
          "parameters": [
            "self",
            "project_path",
            "language"
          ],
          "decorators": []
        },
        {
          "name": "convert_multi_language_project",
          "docstring": "Convert multi-language project with separate sections per language",
          "line_range": [
            252,
            282
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "_build_project_structure",
          "docstring": "Build standard llmstruct project structure",
          "line_range": [
            284,
            312
          ],
          "parameters": [
            "self",
            "language",
            "project_path",
            "modules",
            "toc"
          ],
          "decorators": []
        },
        {
          "name": "_build_empty_project_structure",
          "docstring": "Build empty structure when conversion fails",
          "line_range": [
            314,
            329
          ],
          "parameters": [
            "self",
            "language",
            "project_path",
            "error"
          ],
          "decorators": []
        },
        {
          "name": "_merge_language_results",
          "docstring": "Merge multiple language results into unified structure",
          "line_range": [
            331,
            372
          ],
          "parameters": [
            "self",
            "project_path",
            "language_results"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Language",
          "docstring": "",
          "line_range": [
            33,
            42
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ConverterConfig",
          "docstring": "Configuration for universal converter",
          "line_range": [
            46,
            62
          ],
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "",
              "line_range": [
                55,
                62
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "UniversalConverter",
          "docstring": "Universal code converter for any programming language",
          "line_range": [
            65,
            372
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                79,
                82
              ],
              "parameters": [
                "self",
                "config"
              ]
            },
            {
              "name": "detect_language",
              "docstring": "Detect programming language from file extension",
              "line_range": [
                84,
                92
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "detect_project_languages",
              "docstring": "Detect all languages in project and count files",
              "line_range": [
                94,
                109
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "get_project_files",
              "docstring": "Get all relevant files for conversion",
              "line_range": [
                111,
                138
              ],
              "parameters": [
                "self",
                "project_path",
                "language"
              ]
            },
            {
              "name": "convert_python_project",
              "docstring": "Convert Python project to llmstruct format",
              "line_range": [
                140,
                171
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "convert_go_project",
              "docstring": "Convert Go project to llmstruct format",
              "line_range": [
                173,
                190
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "convert_javascript_project",
              "docstring": "Convert JavaScript project to llmstruct format",
              "line_range": [
                192,
                223
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "convert_project",
              "docstring": "Convert any project to llmstruct format",
              "line_range": [
                225,
                250
              ],
              "parameters": [
                "self",
                "project_path",
                "language"
              ]
            },
            {
              "name": "convert_multi_language_project",
              "docstring": "Convert multi-language project with separate sections per language",
              "line_range": [
                252,
                282
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "_build_project_structure",
              "docstring": "Build standard llmstruct project structure",
              "line_range": [
                284,
                312
              ],
              "parameters": [
                "self",
                "language",
                "project_path",
                "modules",
                "toc"
              ]
            },
            {
              "name": "_build_empty_project_structure",
              "docstring": "Build empty structure when conversion fails",
              "line_range": [
                314,
                329
              ],
              "parameters": [
                "self",
                "language",
                "project_path",
                "error"
              ]
            },
            {
              "name": "_merge_language_results",
              "docstring": "Merge multiple language results into unified structure",
              "line_range": [
                331,
                372
              ],
              "parameters": [
                "self",
                "project_path",
                "language_results"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__post_init__": [],
        "__init__": [
          "JavaScriptParser",
          "GoAnalyzer",
          "ConverterConfig"
        ],
        "detect_language": [
          "Path"
        ],
        "detect_project_languages": [
          "self.detect_language",
          "languages.get",
          "os.walk",
          "any"
        ],
        "get_project_files": [
          "self.detect_language",
          "files.append",
          "os.walk",
          "any"
        ],
        "convert_python_project": [
          "modules.append",
          "toc.append",
          "logger.info",
          "analyze_python",
          "self.get_project_files",
          "len",
          "module_data.get",
          "logger.warning",
          "self._build_project_structure"
        ],
        "convert_go_project": [
          "str",
          "logger.error",
          "logger.info",
          "self._build_empty_project_structure",
          "convert_to_llmstruct_format"
        ],
        "convert_javascript_project": [
          "modules.append",
          "toc.append",
          "logger.info",
          "self.get_project_files",
          "module_data.get",
          "len",
          "logger.warning",
          "self._build_project_structure"
        ],
        "convert_project": [
          "ValueError",
          "NotImplementedError",
          "max",
          "logger.info",
          "self.detect_project_languages",
          "languages.keys",
          "self.convert_python_project",
          "self.convert_javascript_project",
          "self.convert_go_project"
        ],
        "convert_multi_language_project": [
          "ValueError",
          "self._merge_language_results",
          "logger.error",
          "logger.info",
          "languages.keys",
          "self.detect_project_languages",
          "logger.warning",
          "self.convert_python_project",
          "self.convert_javascript_project",
          "self.convert_go_project"
        ],
        "_build_project_structure": [
          "sum",
          "m.get",
          "len",
          "language.title"
        ],
        "_build_empty_project_structure": [],
        "_merge_language_results": [
          "list",
          "result.get",
          "stats.get",
          "all_toc.append",
          "language_results.keys",
          "language_results.items",
          "all_modules.append"
        ],
        "main": [
          "argparse.ArgumentParser",
          "json.dumps",
          "UniversalConverter",
          "traceback.print_exc",
          "print",
          "result.get",
          "stats.get",
          "open",
          "Language",
          "converter.convert_multi_language_project",
          "logger.error",
          "parser.add_argument",
          "parser.parse_args",
          "f.write",
          "exit",
          "ConverterConfig",
          "converter.convert_project"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "GoAnalyzer",
        "JavaScriptParser",
        "List",
        "Optional",
        "Path",
        "Union",
        "analyze_module",
        "argparse",
        "convert_to_llmstruct_format",
        "dataclass",
        "dataclasses",
        "enum",
        "go_analyzer",
        "javascript_parser",
        "json",
        "logging",
        "os",
        "pathlib",
        "python_parser",
        "sys",
        "traceback",
        "typing"
      ],
      "hash": null,
      "artifact_id": "7505fa87-661c-4f62-8330-8ac1707e6c49"
    },
    {
      "module_id": "src.llmstruct.parsers.go_analyzer",
      "path": "src/llmstruct/parsers/go_analyzer.py",
      "category": "core",
      "module_doc": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 Go \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043b\u044f Docker \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b: go/packages, go/analysis",
      "functions": [
        {
          "name": "convert_to_llmstruct_format",
          "docstring": "\u041a\u043e\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 llmstruct",
          "line_range": [
            203,
            337
          ],
          "parameters": [
            "analysis",
            "include_ranges",
            "goals"
          ],
          "decorators": []
        },
        {
          "name": "_compute_file_hash",
          "docstring": "\u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 SHA-256 \u0445\u044d\u0448 \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            339,
            345
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            347,
            402
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            24,
            26
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_setup_analyzer",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0441\u0440\u0435\u0434\u0443 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430",
          "line_range": [
            28,
            66
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_cleanup",
          "docstring": "\u041e\u0447\u0438\u0449\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b",
          "line_range": [
            68,
            72
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "analyze_project",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 Go \u043f\u0440\u043e\u0435\u043a\u0442",
          "line_range": [
            74,
            125
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "_fallback_analysis",
          "docstring": "Fallback \u0430\u043d\u0430\u043b\u0438\u0437 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0444\u0430\u0439\u043b\u043e\u0432",
          "line_range": [
            127,
            201
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GoAnalyzer",
          "docstring": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 Go \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432",
          "line_range": [
            21,
            201
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                24,
                26
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_setup_analyzer",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0441\u0440\u0435\u0434\u0443 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430",
              "line_range": [
                28,
                66
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_cleanup",
              "docstring": "\u041e\u0447\u0438\u0449\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b",
              "line_range": [
                68,
                72
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "analyze_project",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 Go \u043f\u0440\u043e\u0435\u043a\u0442",
              "line_range": [
                74,
                125
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "_fallback_analysis",
              "docstring": "Fallback \u0430\u043d\u0430\u043b\u0438\u0437 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0444\u0430\u0439\u043b\u043e\u0432",
              "line_range": [
                127,
                201
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "_setup_analyzer": [
          "tempfile.mkdtemp",
          "analyzer_file.write_text",
          "str",
          "Path",
          "subprocess.run",
          "analyzer_source.read_text",
          "logging.warning"
        ],
        "_cleanup": [
          "Path",
          "shutil.rmtree"
        ],
        "analyze_project": [
          "json.loads",
          "self._cleanup",
          "subprocess.run",
          "self._fallback_analysis",
          "self._setup_analyzer",
          "logging.error",
          "logging.warning",
          "logging.info"
        ],
        "_fallback_analysis": [
          "go_mod_path.exists",
          "set",
          "line.split",
          "list",
          "str",
          "file_path.relative_to",
          "Path",
          "go_mod_path.read_text",
          "line.strip",
          "len",
          "content.split",
          "packages.add",
          "file_path.read_text",
          "sorted",
          "line.startswith",
          "logging.warning",
          "logging.info"
        ],
        "convert_to_llmstruct_format": [
          "modules.append",
          "iface.get",
          "str",
          "path.replace",
          "toc.append",
          "file_data.get",
          "fn.get",
          "analysis.get",
          "struct.get",
          "_compute_file_hash",
          "module.get",
          "len",
          "uuid.uuid4",
          "functions.append",
          "classes.append",
          "path.endswith",
          "sum"
        ],
        "_compute_file_hash": [
          "hashlib.sha256",
          "open",
          "f.read"
        ],
        "main": [
          "argparse.ArgumentParser",
          "json.dumps",
          "traceback.print_exc",
          "print",
          "analyzer.analyze_project",
          "result.get",
          "Path",
          "sys.exit",
          "open",
          "stats.get",
          "parser.add_argument",
          "len",
          "parser.parse_args",
          "GoAnalyzer",
          "f.write",
          "convert_to_llmstruct_format"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "hashlib",
        "json",
        "logging",
        "os",
        "pathlib",
        "shutil",
        "subprocess",
        "sys",
        "tempfile",
        "traceback",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "2ea3cc83-0cb0-4681-acad-7cebf61a800a"
    },
    {
      "module_id": "src.llmstruct.parsers.javascript_parser",
      "path": "src/llmstruct/parsers/javascript_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            9,
            13
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "file_hash",
          "docstring": "",
          "line_range": [
            15,
            20
          ],
          "parameters": [
            "self",
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_metadata",
          "docstring": "",
          "line_range": [
            22,
            41
          ],
          "parameters": [
            "self",
            "filepath",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "parse_module",
          "docstring": "",
          "line_range": [
            43,
            124
          ],
          "parameters": [
            "self",
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "extract_signature",
          "docstring": "",
          "line_range": [
            78,
            80
          ],
          "parameters": [
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JavaScriptParser",
          "docstring": "",
          "line_range": [
            8,
            124
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                9,
                13
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "file_hash",
              "docstring": "",
              "line_range": [
                15,
                20
              ],
              "parameters": [
                "self",
                "filepath"
              ]
            },
            {
              "name": "compute_file_metadata",
              "docstring": "",
              "line_range": [
                22,
                41
              ],
              "parameters": [
                "self",
                "filepath",
                "include_hashes"
              ]
            },
            {
              "name": "parse_module",
              "docstring": "",
              "line_range": [
                43,
                124
              ],
              "parameters": [
                "self",
                "filepath",
                "root_dir",
                "include_ranges",
                "include_hashes"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "set"
        ],
        "file_hash": [
          "hashlib.sha256",
          "open",
          "f.read"
        ],
        "compute_file_metadata": [
          "os.stat",
          "sum",
          "self.file_hash",
          "open"
        ],
        "parse_module": [
          "str",
          "f.read",
          "esprima.parseModule",
          "open",
          "self.compute_file_metadata"
        ],
        "extract_signature": [
          "hasattr"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "datetime",
        "esprima",
        "hashlib",
        "os",
        "typing"
      ],
      "hash": null,
      "artifact_id": "fef93721-1e79-40bc-8c81-b1f820581470"
    },
    {
      "module_id": "src.llmstruct.parsers.python_parser",
      "path": "src/llmstruct/parsers/python_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "infer_category",
          "docstring": "Infer module category based on its path.",
          "line_range": [
            13,
            20
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_hash",
          "docstring": "Compute SHA-256 hash of file content.",
          "line_range": [
            72,
            79
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "analyze_module",
          "docstring": "Analyze Python module and return structured data.",
          "line_range": [
            82,
            154
          ],
          "parameters": [
            "file_path",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            26,
            29
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "visit_Import",
          "docstring": "Capture import statements.",
          "line_range": [
            31,
            35
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_ImportFrom",
          "docstring": "Capture from-import statements.",
          "line_range": [
            37,
            43
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_FunctionDef",
          "docstring": "Track function definitions and their calls.",
          "line_range": [
            45,
            50
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_AsyncFunctionDef",
          "docstring": "Track async function definitions and their calls.",
          "line_range": [
            52,
            57
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_Call",
          "docstring": "Capture function calls.",
          "line_range": [
            59,
            69
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "AST visitor to collect function calls and dependencies.",
          "line_range": [
            23,
            69
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                26,
                29
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "visit_Import",
              "docstring": "Capture import statements.",
              "line_range": [
                31,
                35
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_ImportFrom",
              "docstring": "Capture from-import statements.",
              "line_range": [
                37,
                43
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_FunctionDef",
              "docstring": "Track function definitions and their calls.",
              "line_range": [
                45,
                50
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_AsyncFunctionDef",
              "docstring": "Track async function definitions and their calls.",
              "line_range": [
                52,
                57
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_Call",
              "docstring": "Capture function calls.",
              "line_range": [
                59,
                69
              ],
              "parameters": [
                "self",
                "node"
              ]
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ]
        }
      ],
      "callgraph": {
        "infer_category": [
          "Path"
        ],
        "__init__": [
          "set"
        ],
        "visit_Import": [
          "self.generic_visit"
        ],
        "visit_ImportFrom": [
          "self.generic_visit"
        ],
        "visit_FunctionDef": [
          "self.generic_visit",
          "set"
        ],
        "visit_AsyncFunctionDef": [
          "self.generic_visit",
          "set"
        ],
        "visit_Call": [
          "self.generic_visit",
          "isinstance"
        ],
        "compute_file_hash": [
          "hashlib.sha256",
          "logging.error",
          "open",
          "f.read"
        ],
        "analyze_module": [
          "ast.unparse",
          "CallVisitor",
          "f.read",
          "ast.parse",
          "str",
          "Path",
          "open",
          "ast.get_docstring",
          "infer_category",
          "list",
          "sorted",
          "compute_file_hash",
          "visitor.visit",
          "functions.append",
          "classes.append",
          "logging.error",
          "ast.walk",
          "isinstance"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "Set",
        "ast",
        "hashlib",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "28af2837-80c5-47ed-995e-0c3a5be841bf"
    },
    {
      "module_id": "src.llmstruct.parsers.__init__",
      "path": "src/llmstruct/parsers/__init__.py",
      "category": "cli",
      "module_doc": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "JavaScriptParser",
        "javascript_parser"
      ],
      "hash": null,
      "artifact_id": "73b0f806-f1a7-4dc9-b32f-25ab78cba127"
    },
    {
      "module_id": "examples.python_project_utils",
      "path": "examples/python_project_utils.py",
      "category": "core",
      "module_doc": "Utility functions for the sample project.",
      "functions": [
        {
          "name": "helper",
          "docstring": "Help the main function.",
          "line_range": [
            6,
            8
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "log",
          "docstring": "Log a message.",
          "line_range": [
            11,
            13
          ],
          "parameters": [
            "message"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "helper": [
          "log"
        ],
        "log": [
          "logging.info"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": null,
      "artifact_id": "757c4ab8-197d-4ce4-b436-750c52dd6e9b"
    },
    {
      "module_id": "examples.python_project_main",
      "path": "examples/python_project_main.py",
      "category": "core",
      "module_doc": "Main module for the sample project.",
      "functions": [
        {
          "name": "main",
          "docstring": "Run the program.",
          "line_range": [
            6,
            9
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "Execute the app.",
          "line_range": [
            15,
            17
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "App",
          "docstring": "Application class.",
          "line_range": [
            12,
            17
          ],
          "methods": [
            {
              "name": "run",
              "docstring": "Execute the app.",
              "line_range": [
                15,
                17
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "main": [
          "utils.helper",
          "print"
        ],
        "run": [
          "utils.log"
        ]
      },
      "dependencies": [
        "utils"
      ],
      "hash": null,
      "artifact_id": "f58c8361-db15-4e2b-9503-3da7d3e87825"
    },
    {
      "module_id": "examples.telegram_bot.test_bot",
      "path": "examples/telegram_bot/test_bot.py",
      "category": "test",
      "module_doc": "\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 Telegram \u0431\u043e\u0442\u0430 \u0431\u0435\u0437 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0433\u043e Telegram",
      "functions": [
        {
          "name": "test_bot_functions",
          "docstring": "\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0431\u043e\u0442\u0430",
          "line_range": [
            15,
            98
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "check_api_status",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 API",
          "line_range": [
            100,
            119
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "mock_send_message",
          "docstring": "",
          "line_range": [
            83,
            85
          ],
          "parameters": [
            "chat_id",
            "text",
            "parse_mode"
          ],
          "decorators": []
        },
        {
          "name": "test_commands_only",
          "docstring": "",
          "line_range": [
            136,
            142
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_bot_functions": [
          "print",
          "bot.chat_with_llm",
          "LLMStructTelegramBot",
          "len",
          "bot.execute_command"
        ],
        "mock_send_message": [
          "len",
          "print"
        ],
        "check_api_status": [
          "client.get",
          "LLMStructTelegramBot",
          "httpx.AsyncClient",
          "print"
        ],
        "test_commands_only": [
          "LLMStructTelegramBot",
          "len",
          "bot.execute_command",
          "print"
        ]
      },
      "dependencies": [
        "LLMStructTelegramBot",
        "asyncio",
        "bot",
        "httpx",
        "os",
        "sys"
      ],
      "hash": null,
      "artifact_id": "6b024a7d-38d7-45d9-b93c-dbbd0a709ef2"
    },
    {
      "module_id": "integrations.telegram_bot.test_bot",
      "path": "integrations/telegram_bot/test_bot.py",
      "category": "test",
      "module_doc": "\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 Telegram \u0431\u043e\u0442\u0430 \u0431\u0435\u0437 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0433\u043e Telegram",
      "functions": [
        {
          "name": "test_bot_functions",
          "docstring": "\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0431\u043e\u0442\u0430",
          "line_range": [
            15,
            98
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "check_api_status",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 API",
          "line_range": [
            100,
            119
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "mock_send_message",
          "docstring": "",
          "line_range": [
            83,
            85
          ],
          "parameters": [
            "chat_id",
            "text",
            "parse_mode"
          ],
          "decorators": []
        },
        {
          "name": "test_commands_only",
          "docstring": "",
          "line_range": [
            136,
            142
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_bot_functions": [
          "print",
          "bot.chat_with_llm",
          "LLMStructTelegramBot",
          "len",
          "bot.execute_command"
        ],
        "mock_send_message": [
          "len",
          "print"
        ],
        "check_api_status": [
          "client.get",
          "LLMStructTelegramBot",
          "httpx.AsyncClient",
          "print"
        ],
        "test_commands_only": [
          "LLMStructTelegramBot",
          "len",
          "bot.execute_command",
          "print"
        ]
      },
      "dependencies": [
        "LLMStructTelegramBot",
        "asyncio",
        "bot",
        "httpx",
        "os",
        "sys"
      ],
      "hash": null,
      "artifact_id": "8fd3d5b4-17be-4088-96e8-05e3ece4b5e3"
    },
    {
      "module_id": "integrations.telegram_bot.mp002_progress_bot",
      "path": "integrations/telegram_bot/mp002_progress_bot.py",
      "category": "core",
      "module_doc": "MP-002A Progress Bot - Telegram \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f Smart Wrapper \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438\n\u042d\u0442\u0430\u043f\u043d\u0430\u044f \u043e\u0442\u0447\u0435\u0442\u043d\u043e\u0441\u0442\u044c, \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430, \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0435 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435",
      "functions": [
        {
          "name": "start_mp002_bot",
          "docstring": "\u0417\u0430\u043f\u0443\u0441\u043a MP-002A \u0431\u043e\u0442\u0430",
          "line_range": [
            431,
            452
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            23,
            82
          ],
          "parameters": [
            "self",
            "token"
          ],
          "decorators": []
        },
        {
          "name": "init_progress_tracking",
          "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430",
          "line_range": [
            84,
            109
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_progress",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430",
          "line_range": [
            111,
            118
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_progress",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430",
          "line_range": [
            120,
            123
          ],
          "parameters": [
            "self",
            "progress"
          ],
          "decorators": []
        },
        {
          "name": "send_message",
          "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 Telegram",
          "line_range": [
            125,
            139
          ],
          "parameters": [
            "self",
            "chat_id",
            "text",
            "parse_mode"
          ],
          "decorators": []
        },
        {
          "name": "report_phase_start",
          "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e \u043d\u0430\u0447\u0430\u043b\u0435 \u0444\u0430\u0437\u044b",
          "line_range": [
            141,
            172
          ],
          "parameters": [
            "self",
            "chat_id",
            "phase_id"
          ],
          "decorators": []
        },
        {
          "name": "report_task_completion",
          "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            174,
            207
          ],
          "parameters": [
            "self",
            "chat_id",
            "phase_id",
            "task_description",
            "details"
          ],
          "decorators": []
        },
        {
          "name": "request_phase_approval",
          "docstring": "\u0417\u0430\u043f\u0440\u043e\u0441 \u043e\u0434\u043e\u0431\u0440\u0435\u043d\u0438\u044f \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0444\u0430\u0437\u044b",
          "line_range": [
            209,
            232
          ],
          "parameters": [
            "self",
            "chat_id",
            "phase_id"
          ],
          "decorators": []
        },
        {
          "name": "report_issue",
          "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0435",
          "line_range": [
            234,
            264
          ],
          "parameters": [
            "self",
            "chat_id",
            "phase_id",
            "issue_description"
          ],
          "decorators": []
        },
        {
          "name": "get_overall_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u0449\u0435\u0433\u043e \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            266,
            307
          ],
          "parameters": [
            "self",
            "chat_id"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
          "line_range": [
            309,
            326
          ],
          "parameters": [
            "self",
            "update"
          ],
          "decorators": []
        },
        {
          "name": "handle_command",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434",
          "line_range": [
            328,
            349
          ],
          "parameters": [
            "self",
            "chat_id",
            "command"
          ],
          "decorators": []
        },
        {
          "name": "send_welcome",
          "docstring": "\u041f\u0440\u0438\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435",
          "line_range": [
            351,
            367
          ],
          "parameters": [
            "self",
            "chat_id"
          ],
          "decorators": []
        },
        {
          "name": "approve_phase",
          "docstring": "\u041e\u0434\u043e\u0431\u0440\u0435\u043d\u0438\u0435 \u0444\u0430\u0437\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c",
          "line_range": [
            369,
            413
          ],
          "parameters": [
            "self",
            "chat_id",
            "phase_id"
          ],
          "decorators": []
        },
        {
          "name": "handle_feedback",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043a\u0430\u043a feedback",
          "line_range": [
            415,
            427
          ],
          "parameters": [
            "self",
            "chat_id",
            "text"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "MP002ProgressBot",
          "docstring": "Telegram \u0431\u043e\u0442 \u0434\u043b\u044f \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 MP-002A Smart Wrapper",
          "line_range": [
            18,
            427
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                23,
                82
              ],
              "parameters": [
                "self",
                "token"
              ]
            },
            {
              "name": "init_progress_tracking",
              "docstring": "\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430",
              "line_range": [
                84,
                109
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_progress",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430",
              "line_range": [
                111,
                118
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_progress",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430",
              "line_range": [
                120,
                123
              ],
              "parameters": [
                "self",
                "progress"
              ]
            },
            {
              "name": "send_message",
              "docstring": "\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 Telegram",
              "line_range": [
                125,
                139
              ],
              "parameters": [
                "self",
                "chat_id",
                "text",
                "parse_mode"
              ]
            },
            {
              "name": "report_phase_start",
              "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e \u043d\u0430\u0447\u0430\u043b\u0435 \u0444\u0430\u0437\u044b",
              "line_range": [
                141,
                172
              ],
              "parameters": [
                "self",
                "chat_id",
                "phase_id"
              ]
            },
            {
              "name": "report_task_completion",
              "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438",
              "line_range": [
                174,
                207
              ],
              "parameters": [
                "self",
                "chat_id",
                "phase_id",
                "task_description",
                "details"
              ]
            },
            {
              "name": "request_phase_approval",
              "docstring": "\u0417\u0430\u043f\u0440\u043e\u0441 \u043e\u0434\u043e\u0431\u0440\u0435\u043d\u0438\u044f \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0444\u0430\u0437\u044b",
              "line_range": [
                209,
                232
              ],
              "parameters": [
                "self",
                "chat_id",
                "phase_id"
              ]
            },
            {
              "name": "report_issue",
              "docstring": "\u041e\u0442\u0447\u0435\u0442 \u043e \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0435",
              "line_range": [
                234,
                264
              ],
              "parameters": [
                "self",
                "chat_id",
                "phase_id",
                "issue_description"
              ]
            },
            {
              "name": "get_overall_status",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u0449\u0435\u0433\u043e \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
              "line_range": [
                266,
                307
              ],
              "parameters": [
                "self",
                "chat_id"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
              "line_range": [
                309,
                326
              ],
              "parameters": [
                "self",
                "update"
              ]
            },
            {
              "name": "handle_command",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434",
              "line_range": [
                328,
                349
              ],
              "parameters": [
                "self",
                "chat_id",
                "command"
              ]
            },
            {
              "name": "send_welcome",
              "docstring": "\u041f\u0440\u0438\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435",
              "line_range": [
                351,
                367
              ],
              "parameters": [
                "self",
                "chat_id"
              ]
            },
            {
              "name": "approve_phase",
              "docstring": "\u041e\u0434\u043e\u0431\u0440\u0435\u043d\u0438\u0435 \u0444\u0430\u0437\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c",
              "line_range": [
                369,
                413
              ],
              "parameters": [
                "self",
                "chat_id",
                "phase_id"
              ]
            },
            {
              "name": "handle_feedback",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043a\u0430\u043a feedback",
              "line_range": [
                415,
                427
              ],
              "parameters": [
                "self",
                "chat_id",
                "text"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self.init_progress_tracking"
        ],
        "init_progress_tracking": [
          "json.dump",
          "open",
          "datetime.now"
        ],
        "load_progress": [
          "json.load",
          "self.init_progress_tracking",
          "open",
          "self.load_progress"
        ],
        "save_progress": [
          "open",
          "json.dump"
        ],
        "send_message": [
          "httpx.AsyncClient",
          "str",
          "print",
          "response.json",
          "client.post"
        ],
        "report_phase_start": [
          "enumerate",
          "datetime.now",
          "self.send_message",
          "phase_id.upper",
          "self.save_progress",
          "self.load_progress"
        ],
        "report_task_completion": [
          "datetime.now",
          "self.send_message",
          "self.request_phase_approval",
          "self.save_progress",
          "len",
          "self.load_progress"
        ],
        "request_phase_approval": [
          "phase_id.upper",
          "enumerate",
          "self.send_message"
        ],
        "report_issue": [
          "self.load_progress",
          "datetime.now",
          "self.send_message",
          "self.save_progress"
        ],
        "get_overall_status": [
          "self.send_message",
          "phase_data.get",
          "len",
          "progress.get",
          "self.load_progress"
        ],
        "handle_message": [
          "text.startswith",
          "self.handle_command",
          "message.get",
          "self.handle_feedback"
        ],
        "handle_command": [
          "self.report_user_issues",
          "self.show_phase_details",
          "self.send_message",
          "command.split",
          "self.approve_phase",
          "self.send_welcome",
          "len",
          "self.get_overall_status",
          "self.show_help",
          "self.continue_work"
        ],
        "send_welcome": [
          "self.send_message"
        ],
        "approve_phase": [
          "datetime.now",
          "list",
          "self.send_message",
          "self.report_phase_start",
          "phase_id.upper",
          "self.save_progress",
          "len",
          "phases_list.index",
          "self.load_progress"
        ],
        "handle_feedback": [
          "datetime.now",
          "self.send_message",
          "self.save_progress",
          "progress.get",
          "self.load_progress"
        ],
        "start_mp002_bot": [
          "MP002ProgressBot",
          "os.getenv",
          "print"
        ]
      },
      "dependencies": [
        "Path",
        "asyncio",
        "datetime",
        "httpx",
        "json",
        "os",
        "pathlib",
        "sys"
      ],
      "hash": null,
      "artifact_id": "d2284282-8ebc-413b-bd53-f991ce864cdb"
    },
    {
      "module_id": "integrations.telegram_bot.simple_bot",
      "path": "integrations/telegram_bot/simple_bot.py",
      "category": "core",
      "module_doc": "\u0423\u043f\u0440\u043e\u0449\u0435\u043d\u043d\u044b\u0439 Telegram \u0431\u043e\u0442 \u0434\u043b\u044f LLMStruct \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 \u043c\u0435\u0442\u0440\u0438\u043a\n\u0411\u0435\u0437 \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439, \u043e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c",
      "functions": [
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f",
          "line_range": [
            360,
            371
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            39,
            45
          ],
          "parameters": [
            "self",
            "token"
          ],
          "decorators": []
        },
        {
          "name": "setup_handlers",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434",
          "line_range": [
            47,
            55
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "start_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
          "line_range": [
            57,
            73
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "help_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /help",
          "line_range": [
            75,
            93
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "status_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /status",
          "line_range": [
            95,
            154
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "metrics_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /metrics",
          "line_range": [
            156,
            188
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "struct_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /struct",
          "line_range": [
            190,
            223
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "parse_command",
          "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /parse",
          "line_range": [
            225,
            270
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "handle_message",
          "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
          "line_range": [
            272,
            321
          ],
          "parameters": [
            "self",
            "update",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "run_sync",
          "docstring": "\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0437\u0430\u043f\u0443\u0441\u043a \u0431\u043e\u0442\u0430",
          "line_range": [
            323,
            358
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "SimpleLLMStructBot",
          "docstring": "\u0423\u043f\u0440\u043e\u0449\u0435\u043d\u043d\u044b\u0439 Telegram \u0431\u043e\u0442 \u0434\u043b\u044f LLMStruct",
          "line_range": [
            36,
            358
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                39,
                45
              ],
              "parameters": [
                "self",
                "token"
              ]
            },
            {
              "name": "setup_handlers",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u043a\u043e\u043c\u0430\u043d\u0434",
              "line_range": [
                47,
                55
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "start_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /start",
              "line_range": [
                57,
                73
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "help_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /help",
              "line_range": [
                75,
                93
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "status_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /status",
              "line_range": [
                95,
                154
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "metrics_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /metrics",
              "line_range": [
                156,
                188
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "struct_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /struct",
              "line_range": [
                190,
                223
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "parse_command",
              "docstring": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 /parse",
              "line_range": [
                225,
                270
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "handle_message",
              "docstring": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439",
              "line_range": [
                272,
                321
              ],
              "parameters": [
                "self",
                "update",
                "context"
              ]
            },
            {
              "name": "run_sync",
              "docstring": "\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0437\u0430\u043f\u0443\u0441\u043a \u0431\u043e\u0442\u0430",
              "line_range": [
                323,
                358
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "track_workflow_event",
          "self.setup_handlers",
          "Application.builder"
        ],
        "setup_handlers": [
          "MessageHandler",
          "CommandHandler"
        ],
        "start_command": [
          "track_workflow_event"
        ],
        "help_command": [
          "track_workflow_event"
        ],
        "status_command": [
          "struct_file.stat",
          "struct_file.exists",
          "requests.get",
          "track_task_start",
          "str",
          "int",
          "Path",
          "time.strftime",
          "tracker.get_session_summary",
          "get_metrics_tracker",
          "track_task_complete",
          "track_workflow_event",
          "time.time"
        ],
        "metrics_command": [
          "track_workflow_event",
          "get_metrics_tracker",
          "tracker.get_session_summary"
        ],
        "struct_command": [
          "struct_file.stat",
          "struct_file.exists",
          "time.ctime",
          "Path",
          "track_workflow_event",
          "time.time"
        ],
        "parse_command": [
          "str",
          "track_task_start",
          "int",
          "os.chdir",
          "subprocess.run",
          "track_task_complete",
          "track_workflow_event",
          "time.time"
        ],
        "handle_message": [
          "tracker.track_token_usage",
          "user_message.lower",
          "track_task_start",
          "self.struct_command",
          "int",
          "str",
          "self.metrics_command",
          "response.split",
          "len",
          "get_metrics_tracker",
          "self.status_command",
          "track_task_complete",
          "track_workflow_event",
          "user_message.split",
          "time.time"
        ],
        "run_sync": [
          "str",
          "asyncio.new_event_loop",
          "logger.error",
          "logger.info",
          "get_metrics_tracker",
          "tracker.save_session",
          "track_workflow_event",
          "BotCommand",
          "asyncio.set_event_loop",
          "loop.run_until_complete"
        ],
        "main": [
          "bot.run_sync",
          "os.getenv",
          "SimpleLLMStructBot",
          "print"
        ]
      },
      "dependencies": [
        "Application",
        "BotCommand",
        "CommandHandler",
        "ContextTypes",
        "MessageHandler",
        "Optional",
        "Path",
        "Update",
        "asyncio",
        "filters",
        "get_metrics_tracker",
        "json",
        "logging",
        "os",
        "pathlib",
        "requests",
        "src.llmstruct.metrics_tracker",
        "subprocess",
        "sys",
        "telegram",
        "telegram.ext",
        "time",
        "track_task_complete",
        "track_task_start",
        "track_workflow_event",
        "typing"
      ],
      "hash": null,
      "artifact_id": "c433f61c-5e73-4326-aaa7-5d82e42f985b"
    },
    {
      "module_id": "docs.cache",
      "path": "docs/cache.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize SQLite cache for JSON files.",
          "line_range": [
            18,
            22
          ],
          "parameters": [
            "self",
            "db_path"
          ],
          "decorators": []
        },
        {
          "name": "create_tables",
          "docstring": "Create tables for metadata and file paths.",
          "line_range": [
            24,
            42
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cache_json",
          "docstring": "Cache JSON metadata and store full file path.",
          "line_range": [
            44,
            64
          ],
          "parameters": [
            "self",
            "json_path",
            "artifact_id",
            "summary",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "get_metadata",
          "docstring": "Retrieve metadata by artifact_id.",
          "line_range": [
            66,
            79
          ],
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "get_full_json",
          "docstring": "Load full JSON by artifact_id.",
          "line_range": [
            81,
            94
          ],
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Close database connection.",
          "line_range": [
            96,
            98
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JSONCache",
          "docstring": "",
          "line_range": [
            17,
            98
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize SQLite cache for JSON files.",
              "line_range": [
                18,
                22
              ],
              "parameters": [
                "self",
                "db_path"
              ]
            },
            {
              "name": "create_tables",
              "docstring": "Create tables for metadata and file paths.",
              "line_range": [
                24,
                42
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cache_json",
              "docstring": "Cache JSON metadata and store full file path.",
              "line_range": [
                44,
                64
              ],
              "parameters": [
                "self",
                "json_path",
                "artifact_id",
                "summary",
                "tags"
              ]
            },
            {
              "name": "get_metadata",
              "docstring": "Retrieve metadata by artifact_id.",
              "line_range": [
                66,
                79
              ],
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "get_full_json",
              "docstring": "Load full JSON by artifact_id.",
              "line_range": [
                81,
                94
              ],
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "close",
              "docstring": "Close database connection.",
              "line_range": [
                96,
                98
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "sqlite3.connect",
          "self.create_tables"
        ],
        "create_tables": [],
        "cache_json": [
          "json.dumps",
          "hashlib.sha256",
          "str",
          "f.read",
          "Path",
          "open",
          "content.encode",
          "logging.error",
          "json_file.exists",
          "logging.info"
        ],
        "get_metadata": [
          "json.loads",
          "cursor.fetchone"
        ],
        "get_full_json": [
          "json.load",
          "logging.error",
          "open",
          "cursor.fetchone"
        ],
        "close": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "hashlib",
        "json",
        "logging",
        "pathlib",
        "sqlite3",
        "typing"
      ],
      "hash": null,
      "artifact_id": "8d1c2a22-c6b5-4c96-8626-6905b29ffddf"
    },
    {
      "module_id": "docs.json_selector",
      "path": "docs/json_selector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_json",
          "docstring": "Filter JSON data by key-value pair and select fields.",
          "line_range": [
            17,
            29
          ],
          "parameters": [
            "data",
            "filter_key",
            "filter_value",
            "fields"
          ],
          "decorators": []
        },
        {
          "name": "select_json",
          "docstring": "Load and filter JSON file, optionally parsing partially.",
          "line_range": [
            31,
            72
          ],
          "parameters": [
            "json_path",
            "filter_key",
            "filter_value",
            "fields",
            "partial"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_json": [
          "item.get",
          "filtered.append",
          "data.get",
          "isinstance"
        ],
        "select_json": [
          "filtered.append",
          "json.load",
          "filter_json",
          "path.append",
          "f.seek",
          "Path",
          "open",
          "ijson.parse",
          "current_item.get",
          "logging.error",
          "json_file.exists",
          "prefix.startswith"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "ijson",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "84753da3-9933-4cf9-9ce6-854b7221b3ac"
    },
    {
      "module_id": "docs.self_run",
      "path": "docs/self_run.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_struct",
          "docstring": "Filter struct.json or init.json based on prompt keywords.",
          "line_range": [
            17,
            35
          ],
          "parameters": [
            "struct",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "Attach filtered JSON to LLM prompt, using cache if available.",
          "line_range": [
            37,
            74
          ],
          "parameters": [
            "context_path",
            "prompt",
            "cache"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_struct": [
          "filter_json",
          "any",
          "struct.get",
          "prompt.lower",
          "module.get"
        ],
        "attach_to_llm_request": [
          "cache.cache_json",
          "json.dumps",
          "filter_json",
          "select_json",
          "cache.get_metadata",
          "Path",
          "context_file.exists",
          "cache.get_full_json",
          "prompt.lower",
          "filter_struct",
          "logging.error",
          "logging.info"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "JSONCache",
        "List",
        "Path",
        "cache",
        "filter_json",
        "json",
        "json_selector",
        "logging",
        "pathlib",
        "select_json",
        "typing"
      ],
      "hash": null,
      "artifact_id": "d1a6104e-85fa-4d92-ab54-682f8bd9be89"
    },
    {
      "module_id": "docs.test_self_run",
      "path": "docs/test_self_run.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "test_filter_json_init_json",
          "docstring": "Test filter_json with init.json structure.",
          "line_range": [
            15,
            22
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_select_json_partial",
          "docstring": "Test partial JSON loading.",
          "line_range": [
            24,
            34
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_cache_json",
          "docstring": "Test JSON caching.",
          "line_range": [
            36,
            48
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_attach_to_llm_request_init_json",
          "docstring": "Test attach_to_llm_request with init.json and cache.",
          "line_range": [
            50,
            67
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_attach_to_llm_request_missing_file",
          "docstring": "Test attach_to_llm_request with missing file.",
          "line_range": [
            69,
            73
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_filter_json_init_json": [
          "filter_json"
        ],
        "test_select_json_partial": [
          "select_json",
          "open",
          "json.dump",
          "str"
        ],
        "test_cache_json": [
          "cache.cache_json",
          "str",
          "cache.get_metadata",
          "open",
          "json.dump",
          "JSONCache",
          "cache.close",
          "cache.get_full_json"
        ],
        "test_attach_to_llm_request_init_json": [
          "str",
          "open",
          "json.dump",
          "JSONCache",
          "cache.close",
          "attach_to_llm_request"
        ],
        "test_attach_to_llm_request_missing_file": [
          "attach_to_llm_request",
          "str"
        ]
      },
      "dependencies": [
        "JSONCache",
        "Path",
        "attach_to_llm_request",
        "filter_json",
        "filter_struct",
        "json",
        "llmstruct.cache",
        "llmstruct.json_selector",
        "llmstruct.self_run",
        "pathlib",
        "pytest",
        "select_json"
      ],
      "hash": null,
      "artifact_id": "040816e1-a6e7-4bd3-a7c3-1e291d086a65"
    },
    {
      "module_id": "docs.cli",
      "path": "docs/cli.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": [
            26,
            36
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from llmstruct.toml or return empty dict.",
          "line_range": [
            38,
            47
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": [
            49,
            58
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default /tmp) and return the path.",
          "line_range": [
            60,
            74
          ],
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": [
            76,
            83
          ],
          "parameters": [
            "response"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": [
            85,
            195
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": [
            197,
            237
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": [
            239,
            260
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": [
            262,
            264
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": [
            266,
            268
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": [
            270,
            272
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": [
            274,
            334
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "gitignore_path.open",
          "Path",
          "line.strip",
          "logging.error",
          "line.startswith",
          "gitignore_path.exists"
        ],
        "load_config": [
          "toml.load",
          "Path",
          "config_path\u30aa\u30fc\u30d7\u30f3",
          "config_path.exists",
          "logging.error"
        ],
        "read_file_content": [
          "path.is_file",
          "f.read",
          "Path",
          "path.open",
          "logging.error"
        ],
        "write_to_file": [
          "str",
          "Path",
          "file_path.open",
          "file_path.exists",
          "f.write",
          "logging.error",
          "base_path.mkdir",
          "logging.warning",
          "logging.info"
        ],
        "parse_files_from_response": [
          "filename.strip",
          "re.findall",
          "files.append",
          "content.strip"
        ],
        "interactive": [
          "parse_files_from_response",
          "input",
          "user_input.lower",
          "write_dir.startswith",
          "JSONCache",
          "client.query",
          "attach_to_llm_request",
          "scan_match.group",
          "json.dumps",
          "parse",
          "read_file_content",
          "get_folder_structure",
          "sorted",
          "Path",
          "cache.close",
          "write_match.group",
          "files_to_write.append",
          "write_to_file",
          "print",
          "os.listdir",
          "LLMClient",
          "load_gitignore",
          "logging.error",
          "re.search",
          "logging.warning"
        ],
        "parse": [
          "cache.cache_json",
          "logging.info",
          "generate_json",
          "Path",
          "json.dump",
          "load_config",
          "JSONCache",
          "cache.close",
          "load_gitignore",
          "logging.error",
          "logging.warning",
          "config.get"
        ],
        "query": [
          "Path",
          "LLMClient",
          "json.dump",
          "client.query",
          "JSONCache",
          "cache.close",
          "logging.error",
          "logging.info"
        ],
        "context": [
          "logging.warning"
        ],
        "dogfood": [
          "logging.warning"
        ],
        "review": [
          "logging.warning"
        ],
        "main": [
          "argparse.ArgumentParser",
          "query",
          "query_parser.add_argument",
          "parse",
          "subparsers.add_parser",
          "parse_parser.add_argument",
          "review",
          "parser.add_subparsers",
          "context_parser.add_argument",
          "context",
          "dogfood",
          "parser.parse_args",
          "review_parser.add_argument",
          "dogfood_parser.add_argument",
          "interactive",
          "asyncio.run",
          "interactive_parser.add_argument"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "generate_json",
        "get_folder_structure",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "logging",
        "os",
        "pathlib",
        "re",
        "toml",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "84851663-987f-4b96-a384-f9a244a5f4d9"
    },
    {
      "module_id": "tests.test_self_run",
      "path": "tests/test_self_run.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "test_filter_json_init_json",
          "docstring": "Test filter_json with init.json structure.",
          "line_range": [
            14,
            21
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_select_json_partial",
          "docstring": "Test partial JSON loading.",
          "line_range": [
            24,
            34
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_cache_json",
          "docstring": "Test JSON caching.",
          "line_range": [
            37,
            49
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_attach_to_llm_request_init_json",
          "docstring": "Test attach_to_llm_request with init.json and cache.",
          "line_range": [
            52,
            69
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_attach_to_llm_request_missing_file",
          "docstring": "Test attach_to_llm_request with missing file.",
          "line_range": [
            72,
            76
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_filter_json_init_json": [
          "filter_json"
        ],
        "test_select_json_partial": [
          "select_json",
          "open",
          "json.dump",
          "str"
        ],
        "test_cache_json": [
          "cache.cache_json",
          "str",
          "cache.get_metadata",
          "open",
          "json.dump",
          "JSONCache",
          "cache.close",
          "cache.get_full_json"
        ],
        "test_attach_to_llm_request_init_json": [
          "str",
          "open",
          "json.dump",
          "JSONCache",
          "cache.close",
          "attach_to_llm_request"
        ],
        "test_attach_to_llm_request_missing_file": [
          "attach_to_llm_request",
          "str"
        ]
      },
      "dependencies": [
        "JSONCache",
        "attach_to_llm_request",
        "filter_json",
        "json",
        "llmstruct.cache",
        "llmstruct.json_selector",
        "llmstruct.self_run",
        "select_json"
      ],
      "hash": null,
      "artifact_id": "414fe5e2-64aa-4797-95ca-01288e9750be"
    },
    {
      "module_id": "tests.__init__",
      "path": "tests/__init__.py",
      "category": "test",
      "module_doc": "Test suite for LLMStruct, covering parsers, generators, validators, and integration.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "351a50f6-502d-4d30-be7b-135864ebb3d0"
    },
    {
      "module_id": "cursor_workflow_integration.scripts.install_ai_integration",
      "path": "cursor_workflow_integration/scripts/install_ai_integration.py",
      "category": "core",
      "module_doc": "\ud83d\ude80 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f Cursor\n\u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0441\u0430\u043c\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0430 AI \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0432 \u043b\u044e\u0431\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442",
      "functions": [
        {
          "name": "install_ai_integration",
          "docstring": "\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c AI \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044e \u0432 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442",
          "line_range": [
            12,
            58
          ],
          "parameters": [
            "target_project"
          ],
          "decorators": []
        },
        {
          "name": "adapt_cursorrules",
          "docstring": "\u0410\u0434\u0430\u043f\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c .cursorrules \u043f\u043e\u0434 \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442",
          "line_range": [
            60,
            99
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "adapt_auto_init",
          "docstring": "\u0410\u0434\u0430\u043f\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c auto_init_ai_system.py \u043f\u043e\u0434 \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442",
          "line_range": [
            101,
            123
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "create_simplified_auto_init",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0443\u043f\u0440\u043e\u0449\u0435\u043d\u043d\u0443\u044e \u0432\u0435\u0440\u0441\u0438\u044e auto_init \u0434\u043b\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432 \u0431\u0435\u0437 llmstruct",
          "line_range": [
            125,
            189
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438",
          "line_range": [
            191,
            207
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "install_ai_integration": [
          "source_path.exists",
          "print",
          "Path",
          "target_root.exists",
          "adapt_auto_init",
          "shutil.copy2",
          "adapt_cursorrules",
          "vscode_dir.mkdir"
        ],
        "adapt_cursorrules": [
          "cursorrules_path.write_text",
          "content.replace",
          "list",
          "print",
          "cursorrules_path.read_text",
          "cursorrules_path.exists",
          "len",
          "project_root.rglob"
        ],
        "adapt_auto_init": [
          "auto_init_path.write_text",
          "content.replace",
          "auto_init_path.read_text",
          "print",
          "create_simplified_auto_init",
          "auto_init_path.exists"
        ],
        "create_simplified_auto_init": [],
        "main": [
          "len",
          "install_ai_integration",
          "print"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "os",
        "pathlib",
        "shutil",
        "sys"
      ],
      "hash": null,
      "artifact_id": "e23537ca-140e-4f11-963b-df2c058e45aa"
    },
    {
      "module_id": "cursor_workflow_integration.files.auto_init_ai_system",
      "path": "cursor_workflow_integration/files/auto_init_ai_system.py",
      "category": "core",
      "module_doc": "\ud83d\ude80 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043f\u0440\u0438 \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0432 Cursor\n\u042d\u0442\u043e\u0442 \u0444\u0430\u0439\u043b \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0441\u0430\u043c\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0430 AI \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439\nENHANCED: \u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 workflow \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439, \u0441\u0435\u0441\u0441\u0438\u044f\u043c\u0438 \u0438 context tags",
      "functions": [
        {
          "name": "auto_initialize_ai_system",
          "docstring": "\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043f\u0440\u0438 \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430",
          "line_range": [
            26,
            90
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "get_current_workflow_context",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 workflow \u0441\u0435\u0441\u0441\u0438\u0438 \u0438 workspace mode",
          "line_range": [
            92,
            128
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "get_workflow_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u043e\u043b\u043d\u044b\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 workflow \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            130,
            178
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "switch_workspace_mode",
          "docstring": "\u041f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u0442\u044c workspace mode (\u0434\u043b\u044f CLI integration)",
          "line_range": [
            180,
            196
          ],
          "parameters": [
            "mode_string"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b",
          "line_range": [
            198,
            208
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "search_ai_capabilities",
          "docstring": "\u041f\u043e\u0438\u0441\u043a \u0432 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044f\u0445 AI \u0441\u0438\u0441\u0442\u0435\u043c\u044b (Enhanced with caching optimization)",
          "line_range": [
            210,
            271
          ],
          "parameters": [
            "query"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_context",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0434\u043b\u044f AI \u0432 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435",
          "line_range": [
            273,
            304
          ],
          "parameters": [
            "mode"
          ],
          "decorators": []
        },
        {
          "name": "get_epic_sessions_status",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 \u0432\u0441\u0435\u0445 \u044d\u043f\u0438\u043a-\u0441\u0435\u0441\u0441\u0438\u0439",
          "line_range": [
            306,
            355
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "create_epic_session",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e \u0434\u043b\u044f \u044d\u043f\u0438\u043a\u0430",
          "line_range": [
            357,
            378
          ],
          "parameters": [
            "epic_id",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "switch_to_session",
          "docstring": "\u041f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0434\u0440\u0443\u0433\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e",
          "line_range": [
            380,
            398
          ],
          "parameters": [
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "get_available_sessions",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u0441\u0435\u0441\u0441\u0438\u0439",
          "line_range": [
            400,
            461
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "session_management_commands",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043c\u0430\u043d\u0434 \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u0435\u0441\u0441\u0438\u044f\u043c\u0438",
          "line_range": [
            463,
            489
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "auto_initialize_ai_system": [
          "str",
          "print",
          "Path",
          "logger.error",
          "logger.info",
          "f.exists",
          "get_current_workflow_context",
          "len",
          "src_path.exists",
          "SystemCapabilityDiscovery",
          "AI_CAPABILITIES.discover_all_capabilities"
        ],
        "get_current_workflow_context": [
          "json.load",
          "workspace_file.exists",
          "Path",
          "session.get",
          "open",
          "logger.info",
          "logger.warning",
          "roadmap.get",
          "workspace.get",
          "session_file.exists",
          "roadmap_file.exists",
          "epic_data.get"
        ],
        "get_workflow_status": [
          "json.load",
          "str",
          "context.get",
          "Path",
          "open",
          "logger.error",
          "get_current_workflow_context",
          "len",
          "WorkspaceStateManager",
          "roadmap.get",
          "roadmap_file.exists",
          "auto_initialize_ai_system",
          "e.get"
        ],
        "switch_workspace_mode": [
          "str",
          "Path",
          "logger.error",
          "ws.set_mode",
          "get_current_workflow_context",
          "logger.info",
          "WorkspaceStateManager"
        ],
        "get_ai_status": [
          "AI_CAPABILITIES.get_enhanced_capabilities_summary",
          "get_workflow_status",
          "auto_initialize_ai_system",
          "AI_STATUS.get"
        ],
        "search_ai_capabilities": [
          "struct_file.stat",
          "data.get",
          "cache_file.stat",
          "json.load",
          "query.lower",
          "Path",
          "open",
          "logger.error",
          "json.dump",
          "logger.info",
          "len",
          "func.get",
          "cache_file.exists",
          "module.get",
          "auto_initialize_ai_system",
          "results.append"
        ],
        "get_ai_context": [
          "json.dumps",
          "logger.error",
          "get_current_workflow_context",
          "len",
          "auto_initialize_ai_system",
          "AI_CAPABILITIES.discover_all_capabilities"
        ],
        "get_epic_sessions_status": [
          "status_lines.append",
          "json.load",
          "Path",
          "session.get",
          "open",
          "logger.error",
          "sessions_file.exists",
          "roadmap.get",
          "roadmap_file.exists",
          "epic_data.get"
        ],
        "create_epic_session": [
          "os.system",
          "Path",
          "epic_id.split",
          "logger.error",
          "logger.info"
        ],
        "switch_to_session": [
          "os.system",
          "Path",
          "logger.error",
          "logger.info",
          "get_current_workflow_context"
        ],
        "get_available_sessions": [
          "current_data.get",
          "json.load",
          "Path",
          "session.get",
          "open",
          "logger.error",
          "sessions_list.append",
          "sessions_file.exists",
          "current_session_file.exists",
          "roadmap.get",
          "roadmap_file.exists",
          "sessions_data.get",
          "epic_data.get"
        ],
        "session_management_commands": []
      },
      "dependencies": [
        "Path",
        "SystemCapabilityDiscovery",
        "WorkspaceStateManager",
        "datetime",
        "json",
        "llmstruct.ai_self_awareness",
        "llmstruct.workspace",
        "logging",
        "os",
        "pathlib",
        "sys"
      ],
      "hash": null,
      "artifact_id": "01224aa5-a11d-49a1-ad7c-a3cba12152e2"
    }
  ]
}