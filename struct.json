{
  "metadata": {
    "project_name": "llmstruct",
    "description": "Utility for generating structured JSON for codebases",
    "version": "2025-05-27T12:40:20.140680Z",
    "authors": [
      {
        "name": "Mikhail Stepanov",
        "github": "kpblcaoo",
        "email": "kpblcaoo@gmail.com"
      }
    ],
    "instructions": [
      "Follow best practices, warn if instructions conflict with them",
      "Preserve functionality, ensure idempotency",
      "Use attached struct.json for context and navigation",
      "Request missing modules or functions if needed",
      "Regenerate JSON for significant changes, track via Git and artifacts",
      "Use internal comments for descriptions, append brief summary"
    ],
    "goals": {
      "goals": [
        "Create universal JSON format for codebase structure (modules, functions, classes, calls, metadata)",
        "Ensure extensibility for new languages and entity types",
        "Develop modular, plugin-based parsers for new languages",
        "Maintain an open, RFC-style documented format",
        "Integrate with LLMs by generating and attaching JSON structure to queries"
      ]
    },
    "stats": {
      "modules_count": 53,
      "functions_count": 298,
      "classes_count": 27,
      "call_edges_count": 980
    },
    "artifact_id": "c0c6b417-bf95-46d7-b0d7-127d2d59223a",
    "summary": "Structured JSON for llmstruct codebase",
    "tags": [
      "codebase",
      "automation"
    ],
    "folder_structure": [
      {
        "path": ".",
        "type": "directory",
        "artifact_id": "61990309-5bfe-42d7-b07f-f930458a2b06",
        "metadata": {}
      },
      {
        "path": "CHANGELOG.md",
        "type": "file",
        "artifact_id": "db11e7e8-351f-4cb9-bd83-7b63dcca3796",
        "metadata": {}
      },
      {
        "path": "CLEAN_COMMIT_MESSAGE.md",
        "type": "file",
        "artifact_id": "1c9d8286-4ad8-4011-abf1-e762cd7a331a",
        "metadata": {}
      },
      {
        "path": "COMMIT_MESSAGE.md",
        "type": "file",
        "artifact_id": "ec6aea8a-dacb-4a45-9203-59fb9ef7dfb9",
        "metadata": {}
      },
      {
        "path": "GITHUB_PROJECTS_README.md",
        "type": "file",
        "artifact_id": "9cef34ea-a1cf-4708-85f3-610de8826273",
        "metadata": {}
      },
      {
        "path": "MODULAR_CLI_COMPLETION_REPORT.md",
        "type": "file",
        "artifact_id": "08ecf4db-0726-480c-9283-72520a46f0e9",
        "metadata": {}
      },
      {
        "path": "QUICK_START.md",
        "type": "file",
        "artifact_id": "ff905975-29c5-4a08-9be2-6b262c82cd07",
        "metadata": {}
      },
      {
        "path": "README.md",
        "type": "file",
        "artifact_id": "dbb518a3-7c13-4a1d-9127-5a7d108c75e0",
        "metadata": {}
      },
      {
        "path": "SECURITY_IMPLEMENTATION_SUMMARY.md",
        "type": "file",
        "artifact_id": "56f479b8-cbaf-4cff-a82f-a03e27819415",
        "metadata": {}
      },
      {
        "path": "SESSION_TASKS.md",
        "type": "file",
        "artifact_id": "3fe45b01-4054-4fe3-841c-3562acf4e240",
        "metadata": {}
      },
      {
        "path": "board_cli.py",
        "type": "file",
        "artifact_id": "ac1c4aa3-ad71-4184-9c24-fc5757a52245",
        "metadata": {}
      },
      {
        "path": "collector.py",
        "type": "file",
        "artifact_id": "826867f4-3bb8-4c81-8297-ac051d5a7cf6",
        "metadata": {}
      },
      {
        "path": "concept_innovative.json",
        "type": "file",
        "artifact_id": "fc7be061-0d34-4b31-8bf5-e7062fa04cb0",
        "metadata": {}
      },
      {
        "path": "concept_v0.3.0.json",
        "type": "file",
        "artifact_id": "bb931b5b-566d-4952-9044-9361c9ef4944",
        "metadata": {}
      },
      {
        "path": "data",
        "type": "directory",
        "artifact_id": "1806d40d-5cd2-4335-8683-d76caf4a4dc9",
        "metadata": {}
      },
      {
        "path": "data/artifacts",
        "type": "directory",
        "artifact_id": "d518c5a5-669b-4f7e-bed0-ca1fb73ed399",
        "metadata": {}
      },
      {
        "path": "data/artifacts_index.json",
        "type": "file",
        "artifact_id": "58e46f6e-920d-43ba-a748-9f978d513394",
        "metadata": {}
      },
      {
        "path": "data/cli.json",
        "type": "file",
        "artifact_id": "e866cb1d-15a5-4cef-affe-be0067d22b78",
        "metadata": {}
      },
      {
        "path": "data/cli_enhanced.json",
        "type": "file",
        "artifact_id": "e26a0ad4-8eb7-42f3-a281-9c1527375b18",
        "metadata": {}
      },
      {
        "path": "data/cli_queue.json",
        "type": "file",
        "artifact_id": "338bce1b-2b1c-4509-b716-25339dc65f0f",
        "metadata": {}
      },
      {
        "path": "data/cli_queue_enhanced.json",
        "type": "file",
        "artifact_id": "1a30ba9a-d22d-4a99-955f-896dc3f1a5db",
        "metadata": {}
      },
      {
        "path": "data/conflicts.json",
        "type": "file",
        "artifact_id": "b3d4703b-0ae4-4fc1-822f-83cddd3c3495",
        "metadata": {}
      },
      {
        "path": "data/context_orchestration.json",
        "type": "file",
        "artifact_id": "66f55793-4076-4ec0-8852-936b064e152f",
        "metadata": {}
      },
      {
        "path": "data/copilot",
        "type": "directory",
        "artifact_id": "8908e647-bd6e-48ca-8bd7-603bf10bb948",
        "metadata": {}
      },
      {
        "path": "data/copilot/ai_constraints.json",
        "type": "file",
        "artifact_id": "acdd07c1-7441-4d63-a74d-8c93a014ad9a",
        "metadata": {}
      },
      {
        "path": "data/copilot/processing_queue.json",
        "type": "file",
        "artifact_id": "a6475d5a-cb3d-4044-8d4c-bc155907dd25",
        "metadata": {}
      },
      {
        "path": "data/copilot/warnings.json",
        "type": "file",
        "artifact_id": "d471a528-a6dd-4ff8-88ab-872115ca90ca",
        "metadata": {}
      },
      {
        "path": "data/copilot_init.json",
        "type": "file",
        "artifact_id": "71105a05-096e-4c45-8047-5bb0c042457b",
        "metadata": {}
      },
      {
        "path": "data/gh_mapping.json",
        "type": "file",
        "artifact_id": "0287f2fd-e42d-4290-91ea-b895b80bac48",
        "metadata": {}
      },
      {
        "path": "data/ideas.json",
        "type": "file",
        "artifact_id": "15c92607-8eb4-46c0-bc08-97f5379c9079",
        "metadata": {}
      },
      {
        "path": "data/ideas_cache.json",
        "type": "file",
        "artifact_id": "e7e2e71b-e071-43cd-86ce-ff0f22febdb4",
        "metadata": {}
      },
      {
        "path": "data/init.json",
        "type": "file",
        "artifact_id": "9e0be67e-7d5e-4285-b4b7-1124e0394060",
        "metadata": {}
      },
      {
        "path": "data/init_enhanced.json",
        "type": "file",
        "artifact_id": "2b48c96c-f5e1-4643-89d2-22ecc352cf95",
        "metadata": {}
      },
      {
        "path": "data/insights.json",
        "type": "file",
        "artifact_id": "e08209e4-8938-4133-8766-7b07ee978903",
        "metadata": {}
      },
      {
        "path": "data/metrics.json",
        "type": "file",
        "artifact_id": "68ad3727-ac87-4aca-950c-31c9c29fc65f",
        "metadata": {}
      },
      {
        "path": "data/prs.json",
        "type": "file",
        "artifact_id": "e52065e9-77e2-4855-af60-4392ec7ba252",
        "metadata": {}
      },
      {
        "path": "data/references.json",
        "type": "file",
        "artifact_id": "c3ce7b31-88e6-4684-a459-a8ad0ae4b108",
        "metadata": {}
      },
      {
        "path": "data/sessions",
        "type": "directory",
        "artifact_id": "30139001-afe5-4b30-9a2d-eaa58c67ca87",
        "metadata": {}
      },
      {
        "path": "data/sessions/README.md",
        "type": "file",
        "artifact_id": "f9b7f376-4e35-475e-bd5d-c64daa5e4929",
        "metadata": {}
      },
      {
        "path": "data/sessions/ai_sessions.json",
        "type": "file",
        "artifact_id": "057ce706-1837-4f9e-b78e-b768fc310c33",
        "metadata": {}
      },
      {
        "path": "data/sessions/current_session.json",
        "type": "file",
        "artifact_id": "3ef8d13d-7f9b-4ebb-bd21-428a2bcfd51f",
        "metadata": {}
      },
      {
        "path": "data/sessions/worklog.json",
        "type": "file",
        "artifact_id": "d1f61e3e-6300-4dd1-9ac4-e23a083fe2df",
        "metadata": {}
      },
      {
        "path": "data/tasks.json",
        "type": "file",
        "artifact_id": "06589116-04e1-4528-a4db-9508e802d7d6",
        "metadata": {}
      },
      {
        "path": "data/vision.json",
        "type": "file",
        "artifact_id": "a33b64d2-da04-4b95-8459-8c7f13bbe817",
        "metadata": {}
      },
      {
        "path": "data/weights.json",
        "type": "file",
        "artifact_id": "1e20b3e4-9498-43d0-a866-370f4a5b4bac",
        "metadata": {}
      },
      {
        "path": "data/workflow_events.json",
        "type": "file",
        "artifact_id": "416815cf-f2bb-499c-bc75-e45b1d651c32",
        "metadata": {}
      },
      {
        "path": "data/workspace",
        "type": "directory",
        "artifact_id": "510f0756-8d72-4416-b0bd-3c564be37661",
        "metadata": {}
      },
      {
        "path": "data/workspace/workspace_state.json",
        "type": "file",
        "artifact_id": "0c97d285-c7cc-42aa-8783-37545e0325db",
        "metadata": {}
      },
      {
        "path": "docs",
        "type": "directory",
        "artifact_id": "be9ed26d-838e-462a-97ad-c3df031b55c3",
        "metadata": {}
      },
      {
        "path": "docs.json",
        "type": "file",
        "artifact_id": "1614bbc2-f7dc-4317-b73e-90df962b8e06",
        "metadata": {}
      },
      {
        "path": "docs/AI_SESSION_MOBILE_CONTROL.md",
        "type": "file",
        "artifact_id": "b03353e9-afe4-4d66-9285-80030da040c4",
        "metadata": {}
      },
      {
        "path": "docs/CONTRIBUTING.md",
        "type": "file",
        "artifact_id": "17a4eb5e-d695-4a45-99df-ab6ebb5a994d",
        "metadata": {}
      },
      {
        "path": "docs/LLM_instructions_api.md",
        "type": "file",
        "artifact_id": "6a40e75c-f790-4d97-a69b-cebe8d8c25f4",
        "metadata": {}
      },
      {
        "path": "docs/SECURITY.md",
        "type": "file",
        "artifact_id": "78a8e0c9-2c9d-4be7-acdd-5c0b410e54b2",
        "metadata": {}
      },
      {
        "path": "docs/ai-constraints-implementation-report.md",
        "type": "file",
        "artifact_id": "53b1d2eb-7bb6-44a5-be7a-0c4a2c642e9e",
        "metadata": {}
      },
      {
        "path": "docs/ai-session-monitor",
        "type": "directory",
        "artifact_id": "79fb9c91-f1bd-4c88-b267-42562feaa93f",
        "metadata": {}
      },
      {
        "path": "docs/ai-session-monitor/README.md",
        "type": "file",
        "artifact_id": "4fd9f461-1129-4a48-8a0c-36f5d6220b12",
        "metadata": {}
      },
      {
        "path": "docs/best_practices.md",
        "type": "file",
        "artifact_id": "8dc1ec0e-e056-4252-8127-0e8109b99d12",
        "metadata": {}
      },
      {
        "path": "docs/cache.py",
        "type": "file",
        "artifact_id": "b6a4e12e-8c88-4cba-91c7-de110f98f93d",
        "metadata": {}
      },
      {
        "path": "docs/cli.py",
        "type": "file",
        "artifact_id": "48d07a2f-c760-40c0-93d2-181eaf45fb9a",
        "metadata": {}
      },
      {
        "path": "docs/cli_modular_architecture.md",
        "type": "file",
        "artifact_id": "4f10045a-4511-4213-9b1f-956f605e075a",
        "metadata": {}
      },
      {
        "path": "docs/context_orchestration_architecture.md",
        "type": "file",
        "artifact_id": "7780055f-a36a-469e-90ed-794053823d4f",
        "metadata": {}
      },
      {
        "path": "docs/examples",
        "type": "directory",
        "artifact_id": "8300157f-6338-459a-b563-c15dcf65b673",
        "metadata": {}
      },
      {
        "path": "docs/examples/struct.json",
        "type": "file",
        "artifact_id": "de0c6bd9-a908-4538-894c-9a9118294b6b",
        "metadata": {}
      },
      {
        "path": "docs/gh_view.md",
        "type": "file",
        "artifact_id": "4bef8362-6635-406c-9a7f-75e6ee9e0e85",
        "metadata": {}
      },
      {
        "path": "docs/github_projects_export.md",
        "type": "file",
        "artifact_id": "f14741ec-907e-4fed-b1fa-fdee5295ad66",
        "metadata": {}
      },
      {
        "path": "docs/ideas_community.md",
        "type": "file",
        "artifact_id": "755e54e3-28e1-403d-b9b5-7458525cddd2",
        "metadata": {}
      },
      {
        "path": "docs/ideas_strategy.md",
        "type": "file",
        "artifact_id": "cd5ef996-a35b-4bc9-86b1-9df5cde5d39a",
        "metadata": {}
      },
      {
        "path": "docs/ideas_technical.md",
        "type": "file",
        "artifact_id": "f4f25650-ad2b-4de3-9e32-e796c8ea8e1c",
        "metadata": {}
      },
      {
        "path": "docs/incremental_indexing_plan.md",
        "type": "file",
        "artifact_id": "6bfe7b9f-aa80-4054-9653-e96a74dc17d4",
        "metadata": {}
      },
      {
        "path": "docs/integration.md",
        "type": "file",
        "artifact_id": "7bb3c0e4-5761-4a6f-b12d-cf1dd40121b3",
        "metadata": {}
      },
      {
        "path": "docs/interactions_diagram.ru.md",
        "type": "file",
        "artifact_id": "6ca1591e-e913-4127-af8c-ba69492313ad",
        "metadata": {}
      },
      {
        "path": "docs/internal",
        "type": "directory",
        "artifact_id": "f3eee985-9e0f-458c-93c4-39ae846eddb5",
        "metadata": {}
      },
      {
        "path": "docs/internal/notes",
        "type": "directory",
        "artifact_id": "d1385b4a-4c79-46a6-97cf-c67419136ce6",
        "metadata": {}
      },
      {
        "path": "docs/internal/notes/session_integration.md",
        "type": "file",
        "artifact_id": "7f0c7015-3f88-4d03-aa82-38b4950d2140",
        "metadata": {}
      },
      {
        "path": "docs/internal/roadmap.md",
        "type": "file",
        "artifact_id": "bb4f4d87-716c-436a-9870-a42f4523b93a",
        "metadata": {}
      },
      {
        "path": "docs/internal/ru",
        "type": "directory",
        "artifact_id": "de21910e-7c4c-4224-906a-170ef75e3a6b",
        "metadata": {}
      },
      {
        "path": "docs/internal/ru/roadmap.md",
        "type": "file",
        "artifact_id": "89b9a342-6b62-4265-9366-76537f448221",
        "metadata": {}
      },
      {
        "path": "docs/internal/ru/setup.md",
        "type": "file",
        "artifact_id": "6af144ea-d5bf-43bd-8476-fa2c809f04ec",
        "metadata": {}
      },
      {
        "path": "docs/internal/ru/team.md",
        "type": "file",
        "artifact_id": "8c0200d1-c9a2-4bd7-b705-87bf3873224a",
        "metadata": {}
      },
      {
        "path": "docs/internal/ses-004-implementation-decisions.md",
        "type": "file",
        "artifact_id": "c7a5f600-608a-49cf-9622-086118c092cc",
        "metadata": {}
      },
      {
        "path": "docs/internal/setup.md",
        "type": "file",
        "artifact_id": "ee46cba6-9615-4a0e-a276-71f85b9b3860",
        "metadata": {}
      },
      {
        "path": "docs/internal/team.md",
        "type": "file",
        "artifact_id": "5dc3ddfc-0268-45da-811a-0fab8af93e65",
        "metadata": {}
      },
      {
        "path": "docs/json_selector.py",
        "type": "file",
        "artifact_id": "ca64801e-21e1-43c1-8d47-c25eb5d6df1a",
        "metadata": {}
      },
      {
        "path": "docs/llmstruct_config.md",
        "type": "file",
        "artifact_id": "dee8fbe1-4db5-4ec2-8624-621effb2bcd6",
        "metadata": {}
      },
      {
        "path": "docs/llmstruct_decision_checklist.md",
        "type": "file",
        "artifact_id": "8274dfe1-8b8f-4a6b-b386-f7203a76a34c",
        "metadata": {}
      },
      {
        "path": "docs/llmstruct_format.md",
        "type": "file",
        "artifact_id": "3991a571-5c03-41c6-94c5-7278999cefae",
        "metadata": {}
      },
      {
        "path": "docs/manifesto.md",
        "type": "file",
        "artifact_id": "c9f8abaf-872c-45cc-87ce-365c7509e34a",
        "metadata": {}
      },
      {
        "path": "docs/onboarding.md",
        "type": "file",
        "artifact_id": "858a06a3-4c96-49f1-a0ec-2e8dbed0a15e",
        "metadata": {}
      },
      {
        "path": "docs/project_structure.md",
        "type": "file",
        "artifact_id": "75477229-b821-467b-8ab8-26b12f65e9cf",
        "metadata": {}
      },
      {
        "path": "docs/ru",
        "type": "directory",
        "artifact_id": "64042d1b-71bf-47c0-a714-ad2070363d20",
        "metadata": {}
      },
      {
        "path": "docs/ru/CONTRIBUTING.md",
        "type": "file",
        "artifact_id": "ad05055d-634e-4315-8eff-03a9bd474750",
        "metadata": {}
      },
      {
        "path": "docs/ru/README.md",
        "type": "file",
        "artifact_id": "1ffa4ebe-9f4d-43de-a724-e1e45deeba66",
        "metadata": {}
      },
      {
        "path": "docs/ru/best_practices.md",
        "type": "file",
        "artifact_id": "2a1ac230-da0a-4c5a-aefe-f551bf2b1334",
        "metadata": {}
      },
      {
        "path": "docs/ru/examples",
        "type": "directory",
        "artifact_id": "d16887de-32a7-4572-b419-879567a7d7a0",
        "metadata": {}
      },
      {
        "path": "docs/ru/examples/struct.json",
        "type": "file",
        "artifact_id": "8e7dc861-155c-47a7-899a-23e44911c3ad",
        "metadata": {}
      },
      {
        "path": "docs/ru/ideas_community.md",
        "type": "file",
        "artifact_id": "047f0e52-816f-4115-b422-a99262b9b982",
        "metadata": {}
      },
      {
        "path": "docs/ru/ideas_strategy.md",
        "type": "file",
        "artifact_id": "5bd1cdbd-c5bc-46bb-94f2-0d1df5ab2cdd",
        "metadata": {}
      },
      {
        "path": "docs/ru/ideas_technical.md",
        "type": "file",
        "artifact_id": "eadbfd50-1603-447a-81fb-65af74b33099",
        "metadata": {}
      },
      {
        "path": "docs/ru/integration.md",
        "type": "file",
        "artifact_id": "19c2b11a-9f1c-4a56-b59c-2bc6a6e7a75f",
        "metadata": {}
      },
      {
        "path": "docs/ru/interactions_diagram.ru.md",
        "type": "file",
        "artifact_id": "04b2c3ee-29df-4ba1-a8d0-c556318290c5",
        "metadata": {}
      },
      {
        "path": "docs/ru/llmstruct_config.md",
        "type": "file",
        "artifact_id": "031b1915-67be-4382-9f40-0cd3a4e86078",
        "metadata": {}
      },
      {
        "path": "docs/ru/llmstruct_format.md",
        "type": "file",
        "artifact_id": "e67554b0-d3c3-4aae-b2ff-0c19336cc873",
        "metadata": {}
      },
      {
        "path": "docs/ru/manifesto.md",
        "type": "file",
        "artifact_id": "3305fdcd-a1c7-4870-8751-af1b7a74351e",
        "metadata": {}
      },
      {
        "path": "docs/ru/onboarding.md",
        "type": "file",
        "artifact_id": "dca08c74-ebcd-4b3b-8e89-68a04d81675c",
        "metadata": {}
      },
      {
        "path": "docs/ru/project_structure.md",
        "type": "file",
        "artifact_id": "5f3110fa-5e8f-4ac9-b15a-5db6efd73b45",
        "metadata": {}
      },
      {
        "path": "docs/self_run.py",
        "type": "file",
        "artifact_id": "635f136a-bc4c-4056-87e5-2a244d4ac576",
        "metadata": {}
      },
      {
        "path": "docs/struct_security.md",
        "type": "file",
        "artifact_id": "fe97a613-3ee5-4ebd-b852-c243692bef25",
        "metadata": {}
      },
      {
        "path": "docs/test_self_run.py",
        "type": "file",
        "artifact_id": "a1f894f8-c0c0-4b22-a036-d14e40459c62",
        "metadata": {}
      },
      {
        "path": "examples",
        "type": "directory",
        "artifact_id": "6042eb27-fca2-4e0a-b832-50e392234d0b",
        "metadata": {}
      },
      {
        "path": "examples/python_project_main.py",
        "type": "file",
        "artifact_id": "0e8b7235-125b-4780-8ad6-3869d8209ab2",
        "metadata": {}
      },
      {
        "path": "examples/python_project_utils.py",
        "type": "file",
        "artifact_id": "19593477-c469-4231-ba11-bce777dd4390",
        "metadata": {}
      },
      {
        "path": "final_system_check.py",
        "type": "file",
        "artifact_id": "5c36043e-a1a5-4782-8489-8b7ae5455f7a",
        "metadata": {}
      },
      {
        "path": "final_system_validation.py",
        "type": "file",
        "artifact_id": "de06c0d0-f028-4875-9f4d-ce06e5086028",
        "metadata": {}
      },
      {
        "path": "internal",
        "type": "directory",
        "artifact_id": "0765c493-e9a8-4b8e-bbd2-845bb05ffca6",
        "metadata": {}
      },
      {
        "path": "metrics.json",
        "type": "file",
        "artifact_id": "210903ca-dcc5-404e-8716-bc3141c06b3d",
        "metadata": {}
      },
      {
        "path": "project_context.json",
        "type": "file",
        "artifact_id": "53fda021-cd10-4c3a-8324-5c4fa6e9b27d",
        "metadata": {}
      },
      {
        "path": "schema",
        "type": "directory",
        "artifact_id": "a3fd107c-0818-4bfa-8223-ffed4bf02dc4",
        "metadata": {}
      },
      {
        "path": "schema/artifacts_simplified.json",
        "type": "file",
        "artifact_id": "79160590-27e3-44b7-a593-0f6f2eb14eda",
        "metadata": {}
      },
      {
        "path": "schema/cli_queue.json",
        "type": "file",
        "artifact_id": "74126b80-b4b9-4764-89de-adcd52d82285",
        "metadata": {}
      },
      {
        "path": "schema/cli_simplified.json",
        "type": "file",
        "artifact_id": "12dec849-d290-41c0-babb-a24055a27388",
        "metadata": {}
      },
      {
        "path": "schema/common",
        "type": "directory",
        "artifact_id": "ea0b3cbe-e935-4478-bff6-c9c4d5907e60",
        "metadata": {}
      },
      {
        "path": "schema/common/definitions.json",
        "type": "file",
        "artifact_id": "530cb415-60f4-4bbf-97f4-9ba90871bf9c",
        "metadata": {}
      },
      {
        "path": "schema/core.json",
        "type": "file",
        "artifact_id": "775cc5c1-4d02-47ad-96ff-7df41e4e4db2",
        "metadata": {}
      },
      {
        "path": "schema/core_simplified.json",
        "type": "file",
        "artifact_id": "641b4de9-7f11-4af0-b5a6-06a56c8a14cc",
        "metadata": {}
      },
      {
        "path": "schema/insights_simplified.json",
        "type": "file",
        "artifact_id": "b4e15c53-55a8-483f-851c-6b16baf66adf",
        "metadata": {}
      },
      {
        "path": "schema/llmstruct_schema.json",
        "type": "file",
        "artifact_id": "1d9496f4-bd88-4ddf-8148-5502126fd2d7",
        "metadata": {}
      },
      {
        "path": "schema/llmstruct_schema_simplified.json",
        "type": "file",
        "artifact_id": "69890164-32e9-487b-96e5-622e6390eeee",
        "metadata": {}
      },
      {
        "path": "schema/plugins",
        "type": "directory",
        "artifact_id": "af4e0fab-4de3-4ef5-b7e2-a12897d581f1",
        "metadata": {}
      },
      {
        "path": "schema/plugins/artifacts.json",
        "type": "file",
        "artifact_id": "c7291dda-42ba-4e94-bb75-77790aded940",
        "metadata": {}
      },
      {
        "path": "schema/plugins/cli.json",
        "type": "file",
        "artifact_id": "ebc4287d-82a5-452d-a002-cbf0a77230f1",
        "metadata": {}
      },
      {
        "path": "schema/plugins/data_sorter.json",
        "type": "file",
        "artifact_id": "e23903b1-6c4b-4a89-94c5-9294f3657048",
        "metadata": {}
      },
      {
        "path": "schema/plugins/insights.json",
        "type": "file",
        "artifact_id": "d9e75ca0-8fdc-4c28-976a-98cfc878de61",
        "metadata": {}
      },
      {
        "path": "scripts",
        "type": "directory",
        "artifact_id": "6198dd79-e5ab-4cd1-a9d2-448e095e3faa",
        "metadata": {}
      },
      {
        "path": "scripts/auto_update_struct.py",
        "type": "file",
        "artifact_id": "2e76f543-30a1-4769-93f7-e0a40779b5a8",
        "metadata": {}
      },
      {
        "path": "scripts/collector.py",
        "type": "file",
        "artifact_id": "cfed8c77-1e7a-4e8e-afac-4de97806faaf",
        "metadata": {}
      },
      {
        "path": "scripts/deploy_embedded_files.py",
        "type": "file",
        "artifact_id": "ad93a910-0774-402f-9ac0-607a36b9f3e6",
        "metadata": {}
      },
      {
        "path": "scripts/export_to_github_projects.py",
        "type": "file",
        "artifact_id": "69be5f3c-cfec-439b-ad1d-9846935e1ad8",
        "metadata": {}
      },
      {
        "path": "scripts/session_cli.py",
        "type": "file",
        "artifact_id": "c58acc7b-d06b-4e5b-a168-2f547873a5da",
        "metadata": {}
      },
      {
        "path": "scripts/validate_refs.py",
        "type": "file",
        "artifact_id": "a781fdd3-d1e6-41a9-8de6-0b3585583c05",
        "metadata": {}
      },
      {
        "path": "src",
        "type": "directory",
        "artifact_id": "838426d9-59e0-4751-b2f4-3fb5515d5048",
        "metadata": {}
      },
      {
        "path": "src/llmstruct",
        "type": "directory",
        "artifact_id": "5c5c7831-dbb4-4226-83db-03c85ae27ea2",
        "metadata": {}
      },
      {
        "path": "src/llmstruct.egg-info",
        "type": "directory",
        "artifact_id": "cad31a51-94c3-41c1-adfc-a1ca25194a45",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/__init__.py",
        "type": "file",
        "artifact_id": "1de54688-5348-4160-9ec7-63083095267c",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/__main__.py",
        "type": "file",
        "artifact_id": "c2e12539-cd37-4a3c-9c82-da8fe8e83dca",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cache.py",
        "type": "file",
        "artifact_id": "4b1c7bdb-04c1-4a80-ba28-abd72a08c2e2",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli.py",
        "type": "file",
        "artifact_id": "5ab66167-6fcf-4305-8edc-ca6486b1d9a2",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli_commands.py",
        "type": "file",
        "artifact_id": "64cdf715-a25e-4da1-a1b0-d37a9d5700b6",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli_config.py",
        "type": "file",
        "artifact_id": "23544cf0-00f1-43a1-a46f-ab4ebe5145f4",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli_core.py",
        "type": "file",
        "artifact_id": "8a488a85-421b-47b7-aa7a-194ed47d8cce",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli_utils.py",
        "type": "file",
        "artifact_id": "c68e641c-27ba-4d67-a433-6b3b6e8cf063",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/context_orchestrator.py",
        "type": "file",
        "artifact_id": "833371db-0a34-427c-83d6-5b4043847bd1",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/copilot.py",
        "type": "file",
        "artifact_id": "34176fad-9420-4301-882c-2871673d3ef9",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators",
        "type": "directory",
        "artifact_id": "7e29cb6a-7959-4299-9abf-2da4d49d45a2",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators/__init__.py",
        "type": "file",
        "artifact_id": "3d5e80c6-9787-439c-8c26-9e9414182b95",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators/json_generator.py",
        "type": "file",
        "artifact_id": "ad07ead8-3da4-4a9d-83ab-2f2e1dd14798",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/gh_view.py",
        "type": "file",
        "artifact_id": "d83503ef-8a91-42f3-88c0-84e7e13e0518",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/grok.py",
        "type": "file",
        "artifact_id": "7d5973b0-5493-40c9-9aef-2e7dca292a23",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/json_selector.py",
        "type": "file",
        "artifact_id": "a0d2abbc-57e3-4680-9948-4e3efa4fe48e",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/llm_client.py",
        "type": "file",
        "artifact_id": "a706cced-9c56-4fce-8f0e-d3cb1d713101",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers",
        "type": "directory",
        "artifact_id": "201bf968-6bd0-49f5-b0ab-c929fb7b4c41",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/__init__.py",
        "type": "file",
        "artifact_id": "5a364c0c-3b53-4ae2-bb9e-4871ee7be422",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/javascript_parser.py",
        "type": "file",
        "artifact_id": "9148085a-b0dc-4b0e-8514-beee2ea5b131",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/python_parser.py",
        "type": "file",
        "artifact_id": "eafa161a-a698-4880-a838-52c2f517cc15",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/self_run.py",
        "type": "file",
        "artifact_id": "aee95365-9dad-44c1-94f9-6ad3d4c210c4",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/templates",
        "type": "directory",
        "artifact_id": "fafa3e1a-f09a-4076-be2c-7da2bf3522e3",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/templates/__init__.py",
        "type": "file",
        "artifact_id": "16fdd00a-001e-4674-aefa-45ca30b20dc3",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/validators",
        "type": "directory",
        "artifact_id": "4d99c4bc-95dc-4380-8cb4-42aac8028408",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/validators/__init__.py",
        "type": "file",
        "artifact_id": "38e0e221-69e7-49b0-84cb-b3405ac8d767",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/validators/json_validator.py",
        "type": "file",
        "artifact_id": "241766b7-70fe-4686-8528-00ecc1123d0c",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/workspace.py",
        "type": "file",
        "artifact_id": "2b89414b-6493-425b-9804-ada521ef77d1",
        "metadata": {}
      },
      {
        "path": "struct.json",
        "type": "file",
        "artifact_id": "451700ff-d6f1-4316-b44a-729b8bc1a8ee",
        "metadata": {}
      },
      {
        "path": "struct_ci_test.json",
        "type": "file",
        "artifact_id": "61060919-1c71-4071-8c47-08fc4dd1a493",
        "metadata": {}
      },
      {
        "path": "struct_final_test.json",
        "type": "file",
        "artifact_id": "7ea06e68-bea4-4d44-8488-aa7cf7ea71a6",
        "metadata": {}
      },
      {
        "path": "struct_fresh.json",
        "type": "file",
        "artifact_id": "627a76ca-5cf2-4611-85f0-36e832b2c88b",
        "metadata": {}
      },
      {
        "path": "struct_test.json",
        "type": "file",
        "artifact_id": "8e7706b6-7b5b-4f44-8aac-69080adb6868",
        "metadata": {}
      },
      {
        "path": "test_audit.py",
        "type": "file",
        "artifact_id": "f318c2a2-749b-490f-ade1-67f45c324eaa",
        "metadata": {}
      },
      {
        "path": "test_cli.py",
        "type": "file",
        "artifact_id": "988387de-ac61-43bd-94b9-e44682477223",
        "metadata": {}
      },
      {
        "path": "test_cli_demo.py",
        "type": "file",
        "artifact_id": "f572662a-1a09-40b7-97d5-4a89bc96da34",
        "metadata": {}
      },
      {
        "path": "test_cli_integration.py",
        "type": "file",
        "artifact_id": "f0e1bbf3-6c24-4a0c-84d9-9df6659b3695",
        "metadata": {}
      },
      {
        "path": "test_efficiency.py",
        "type": "file",
        "artifact_id": "4d70f59b-dbde-40cc-a524-2fa9ffb78bc8",
        "metadata": {}
      },
      {
        "path": "test_export.py",
        "type": "file",
        "artifact_id": "b4691f4e-abc7-43b2-be85-7d94e5125fc0",
        "metadata": {}
      },
      {
        "path": "test_modular_cli.py",
        "type": "file",
        "artifact_id": "da8ffd9c-5f10-4bb6-bca5-a1c14b7ffaac",
        "metadata": {}
      },
      {
        "path": "test_results.json",
        "type": "file",
        "artifact_id": "18b3b26c-a26d-4f81-9301-cbca96f7c214",
        "metadata": {}
      },
      {
        "path": "test_simple.json",
        "type": "file",
        "artifact_id": "dd19b18c-4070-4eec-96c8-2159027f0ee8",
        "metadata": {}
      },
      {
        "path": "test_struct_quick.json",
        "type": "file",
        "artifact_id": "5212b2d3-8234-4acb-b9a4-498cc4139c26",
        "metadata": {}
      },
      {
        "path": "tests",
        "type": "directory",
        "artifact_id": "cf6f4a01-0480-4208-b927-e3d9fa86227d",
        "metadata": {}
      },
      {
        "path": "tests/__init__.py",
        "type": "file",
        "artifact_id": "58664b5c-e9fe-4ad3-9f75-1fbbbb64836e",
        "metadata": {}
      },
      {
        "path": "tests/test_self_run.py",
        "type": "file",
        "artifact_id": "e1bc56df-0ab1-4147-90a8-a75bb8d17b53",
        "metadata": {}
      },
      {
        "path": "validate_schemas.py",
        "type": "file",
        "artifact_id": "2afea570-7d79-44f2-a6f1-5752ccdff6fe",
        "metadata": {}
      },
      {
        "path": "validate_sessions.py",
        "type": "file",
        "artifact_id": "6dcf7201-44ba-414f-bf6a-0896fcd347b9",
        "metadata": {}
      },
      {
        "path": "verify_llm_response.py",
        "type": "file",
        "artifact_id": "3cb90a85-4c63-44ce-aeba-25ebb00b950e",
        "metadata": {}
      },
      {
        "path": "workspace_state.json",
        "type": "file",
        "artifact_id": "b5eb732c-24a6-45bb-9df4-012ec08879e4",
        "metadata": {}
      }
    ]
  },
  "toc": [
    {
      "module_id": "test_cli_integration",
      "path": "test_cli_integration.py",
      "category": "test",
      "functions": 1,
      "classes": 0,
      "summary": "Test script for CLI integration with new commands",
      "artifact_id": "fabebd68-347f-47df-b505-8c6f92d6ebbd"
    },
    {
      "module_id": "test_efficiency",
      "path": "test_efficiency.py",
      "category": "test",
      "functions": 12,
      "classes": 0,
      "summary": "",
      "artifact_id": "ba8fffb2-a05c-4395-b88d-222f5272e7b5"
    },
    {
      "module_id": "test_cli",
      "path": "test_cli.py",
      "category": "test",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "9ef966cb-5e42-4193-bedd-cb948047201e"
    },
    {
      "module_id": "test_audit",
      "path": "test_audit.py",
      "category": "test",
      "functions": 1,
      "classes": 0,
      "summary": "Test script for audit functionality.",
      "artifact_id": "4afaf172-eea1-4235-9d22-21e5025efac9"
    },
    {
      "module_id": "collector",
      "path": "collector.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "69eb5b03-3cea-4e94-bf37-18502808884a"
    },
    {
      "module_id": "final_system_check",
      "path": "final_system_check.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Final System Status Check - LLMStruct Modular CLI Integration",
      "artifact_id": "eaf3b11c-f797-4de6-ab12-561bab4322ed"
    },
    {
      "module_id": "board_cli",
      "path": "board_cli.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "CLI Kanban Board for llmstruct tasks and ideas",
      "artifact_id": "086a98ff-c614-4792-a562-790abe5da99f"
    },
    {
      "module_id": "final_system_validation",
      "path": "final_system_validation.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Final system validation script for LLMStruct Modular CLI Integration",
      "artifact_id": "cff63608-b035-41f8-ba4b-a8e4ca2ecbac"
    },
    {
      "module_id": "validate_schemas",
      "path": "validate_schemas.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "JSON Schema Validation Script for llmstruct",
      "artifact_id": "a658b27c-9e3f-488c-ba40-a80da9723e69"
    },
    {
      "module_id": "test_export",
      "path": "test_export.py",
      "category": "test",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "5d95fe52-32b6-46df-8e19-9eefcc2a7b4d"
    },
    {
      "module_id": "test_modular_cli",
      "path": "test_modular_cli.py",
      "category": "test",
      "functions": 2,
      "classes": 0,
      "summary": "Test script for modular CLI structure",
      "artifact_id": "aa29a487-560b-4cec-8045-970e8509c3b4"
    },
    {
      "module_id": "validate_sessions",
      "path": "validate_sessions.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "Session Schema Validation Script for llmstruct",
      "artifact_id": "8ae00c0a-fb60-4b3d-8c27-1444a461c772"
    },
    {
      "module_id": "verify_llm_response",
      "path": "verify_llm_response.py",
      "category": "core",
      "functions": 6,
      "classes": 0,
      "summary": "",
      "artifact_id": "8636e090-caa7-4280-a8f7-cdb82e3b1fcb"
    },
    {
      "module_id": "test_cli_demo",
      "path": "test_cli_demo.py",
      "category": "test",
      "functions": 1,
      "classes": 0,
      "summary": "Quick CLI test to demonstrate new commands",
      "artifact_id": "b851ae88-b111-42bc-9bb5-dc877cbc21fc"
    },
    {
      "module_id": "examples.python_project_utils",
      "path": "examples/python_project_utils.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "Utility functions for the sample project.",
      "artifact_id": "cb718082-29ad-4311-9f0d-26d06efcdf57"
    },
    {
      "module_id": "examples.python_project_main",
      "path": "examples/python_project_main.py",
      "category": "core",
      "functions": 2,
      "classes": 1,
      "summary": "Main module for the sample project.",
      "artifact_id": "91f7b307-5175-4461-a130-8ffb9e233171"
    },
    {
      "module_id": "docs.test_self_run",
      "path": "docs/test_self_run.py",
      "category": "test",
      "functions": 5,
      "classes": 0,
      "summary": "",
      "artifact_id": "c55f96c3-215c-4e29-af57-10a3d4cbfee4"
    },
    {
      "module_id": "docs.cache",
      "path": "docs/cache.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "dfe5a3f1-d469-4148-9c77-e571b6a4d2ab"
    },
    {
      "module_id": "docs.self_run",
      "path": "docs/self_run.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "60d819d2-12bb-4e39-be7a-ae3e5211d33a"
    },
    {
      "module_id": "docs.json_selector",
      "path": "docs/json_selector.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "e43a1d6b-501a-4ac1-966e-f854517bb800"
    },
    {
      "module_id": "docs.cli",
      "path": "docs/cli.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "",
      "artifact_id": "bed1ffc3-2c37-425f-a217-6edfe0563615"
    },
    {
      "module_id": "src.llmstruct.cli_config",
      "path": "src/llmstruct/cli_config.py",
      "category": "core",
      "functions": 18,
      "classes": 1,
      "summary": "CLI configuration management.",
      "artifact_id": "216524d3-fb89-4300-9a86-d9bd8e1c8af9"
    },
    {
      "module_id": "src.llmstruct.grok",
      "path": "src/llmstruct/grok.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "",
      "artifact_id": "3452bdf2-5eae-46f7-93a1-1cf74294c155"
    },
    {
      "module_id": "src.llmstruct.cli_commands",
      "path": "src/llmstruct/cli_commands.py",
      "category": "core",
      "functions": 22,
      "classes": 1,
      "summary": "CLI command processing and handlers.",
      "artifact_id": "02da2f7e-b4bb-49f3-81ed-b378eddc78ea"
    },
    {
      "module_id": "src.llmstruct.context_orchestrator",
      "path": "src/llmstruct/context_orchestrator.py",
      "category": "core",
      "functions": 19,
      "classes": 5,
      "summary": "Smart Context Orchestration for LLMStruct",
      "artifact_id": "1c1439c8-b8c7-4b6c-96ea-40424940b530"
    },
    {
      "module_id": "src.llmstruct.__init__",
      "path": "src/llmstruct/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "12ce46f8-1e26-4234-9fa0-6318bcc1e720"
    },
    {
      "module_id": "src.llmstruct.__main__",
      "path": "src/llmstruct/__main__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "0d9c841f-a733-43c3-894c-394a64dc3587"
    },
    {
      "module_id": "src.llmstruct.cli_utils",
      "path": "src/llmstruct/cli_utils.py",
      "category": "core",
      "functions": 13,
      "classes": 1,
      "summary": "CLI utility functions.",
      "artifact_id": "4b183043-6615-46cc-a6ef-368857885a17"
    },
    {
      "module_id": "src.llmstruct.copilot",
      "path": "src/llmstruct/copilot.py",
      "category": "core",
      "functions": 26,
      "classes": 5,
      "summary": "LLMStruct Copilot Integration Module",
      "artifact_id": "2866bdf3-6007-4f72-b36d-874df517da13"
    },
    {
      "module_id": "src.llmstruct.gh_view",
      "path": "src/llmstruct/gh_view.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "GitHub visualization/graph feature (gh-view-v1)",
      "artifact_id": "67816857-c813-4f3d-a205-2547d2a5401c"
    },
    {
      "module_id": "src.llmstruct.llm_client",
      "path": "src/llmstruct/llm_client.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "65502382-c005-4575-a8bb-c5e5a9853ebb"
    },
    {
      "module_id": "src.llmstruct.cache",
      "path": "src/llmstruct/cache.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "37a6f9cb-f00e-49de-9163-54272badf9ec"
    },
    {
      "module_id": "src.llmstruct.self_run",
      "path": "src/llmstruct/self_run.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "874ff26c-7992-4a82-9ba5-35cf44729f13"
    },
    {
      "module_id": "src.llmstruct.json_selector",
      "path": "src/llmstruct/json_selector.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "91ce3ae6-02b0-4f3e-9d73-247aad2ab8c6"
    },
    {
      "module_id": "src.llmstruct.cli",
      "path": "src/llmstruct/cli.py",
      "category": "core",
      "functions": 17,
      "classes": 0,
      "summary": "LLMStruct CLI - Main entry point for the command-line interface.",
      "artifact_id": "dc90bf7d-1c19-400a-ae6e-613d146f4e02"
    },
    {
      "module_id": "src.llmstruct.cli_core",
      "path": "src/llmstruct/cli_core.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "Core CLI functionality and main loop.",
      "artifact_id": "4897eaa6-8248-495a-8321-2b26ded76670"
    },
    {
      "module_id": "src.llmstruct.workspace",
      "path": "src/llmstruct/workspace.py",
      "category": "core",
      "functions": 20,
      "classes": 1,
      "summary": "Workspace State & Mode Management System",
      "artifact_id": "97ddfd7f-5dd3-4bb9-a155-fdc147be8a5e"
    },
    {
      "module_id": "src.llmstruct.parsers.__init__",
      "path": "src/llmstruct/parsers/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "artifact_id": "36a3a70d-f819-4640-822b-728c32fe1064"
    },
    {
      "module_id": "src.llmstruct.parsers.javascript_parser",
      "path": "src/llmstruct/parsers/javascript_parser.py",
      "category": "core",
      "functions": 5,
      "classes": 1,
      "summary": "",
      "artifact_id": "6074d7e6-1df0-4ce7-8622-a5487941d998"
    },
    {
      "module_id": "src.llmstruct.parsers.python_parser",
      "path": "src/llmstruct/parsers/python_parser.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "",
      "artifact_id": "219d5ca7-5e7b-44e0-8d16-95393c7a8554"
    },
    {
      "module_id": "src.llmstruct.templates.__init__",
      "path": "src/llmstruct/templates/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Templates for LLM prompts used in LLMStruct integration.",
      "artifact_id": "3bdf0cac-3f59-4717-9ada-3a2e7c54a112"
    },
    {
      "module_id": "src.llmstruct.validators.__init__",
      "path": "src/llmstruct/validators/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "artifact_id": "f524b216-c20c-4122-9350-10759cf0c38b"
    },
    {
      "module_id": "src.llmstruct.validators.json_validator",
      "path": "src/llmstruct/validators/json_validator.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "02724ea6-48c9-4975-803a-7a1e866cf79e"
    },
    {
      "module_id": "src.llmstruct.generators.json_generator",
      "path": "src/llmstruct/generators/json_generator.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "18aa7e97-3db9-41f4-b568-26634f845bb2"
    },
    {
      "module_id": "src.llmstruct.generators.__init__",
      "path": "src/llmstruct/generators/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "artifact_id": "a1ba519f-59c4-412e-9969-26015b61558a"
    },
    {
      "module_id": "tests.test_self_run",
      "path": "tests/test_self_run.py",
      "category": "test",
      "functions": 5,
      "classes": 0,
      "summary": "",
      "artifact_id": "259347cf-4046-49cb-a0ce-58b9d867aa86"
    },
    {
      "module_id": "tests.__init__",
      "path": "tests/__init__.py",
      "category": "test",
      "functions": 0,
      "classes": 0,
      "summary": "Test suite for LLMStruct, covering parsers, generators, validators, and integration.",
      "artifact_id": "4b140b34-2712-45e3-8def-011150bd4059"
    },
    {
      "module_id": "scripts.collector",
      "path": "scripts/collector.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "3e5db7a5-567b-462b-a6d1-d6fb63c0e186"
    },
    {
      "module_id": "scripts.session_cli",
      "path": "scripts/session_cli.py",
      "category": "core",
      "functions": 10,
      "classes": 1,
      "summary": "Session Management CLI",
      "artifact_id": "19f9f4e9-6d17-47b9-b7bd-fc84dae4f454"
    },
    {
      "module_id": "scripts.auto_update_struct",
      "path": "scripts/auto_update_struct.py",
      "category": "core",
      "functions": 8,
      "classes": 0,
      "summary": "Automatic struct.json update script",
      "artifact_id": "fec1edf2-635c-46f7-ac40-cd1714213498"
    },
    {
      "module_id": "scripts.export_to_github_projects",
      "path": "scripts/export_to_github_projects.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "Export script for GitHub Projects integration",
      "artifact_id": "e98876ea-8aba-45ff-87c0-5bef49ed067c"
    },
    {
      "module_id": "scripts.validate_refs",
      "path": "scripts/validate_refs.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "05708df6-7c0c-4836-aa52-89584ebe8162"
    },
    {
      "module_id": "scripts.deploy_embedded_files",
      "path": "scripts/deploy_embedded_files.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "223fd0c9-b2d7-420f-8975-ccefaf9a0a42"
    }
  ],
  "modules": [
    {
      "module_id": "test_cli_integration",
      "path": "test_cli_integration.py",
      "category": "test",
      "module_doc": "Test script for CLI integration with new commands",
      "functions": [
        {
          "name": "test_modular_cli_commands",
          "docstring": "Test new CLI commands integration",
          "line_range": [
            13,
            164
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_modular_cli_commands": [
          "os.makedirs",
          "int",
          "events_data.append",
          "json.dump",
          "os.stat",
          "time.time",
          "create_cli_core",
          "time.ctime",
          "json.load",
          "open",
          "print",
          "subprocess.run"
        ]
      },
      "dependencies": [
        "CLIConfig",
        "CLICore",
        "CLIUtils",
        "CommandProcessor",
        "CopilotContextManager",
        "Path",
        "create_cli_core",
        "json",
        "llmstruct.cli_commands",
        "llmstruct.cli_config",
        "llmstruct.cli_core",
        "llmstruct.cli_utils",
        "llmstruct.copilot",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "time"
      ],
      "hash": null,
      "artifact_id": "fabebd68-347f-47df-b505-8c6f92d6ebbd"
    },
    {
      "module_id": "test_efficiency",
      "path": "test_efficiency.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "get_system_metrics",
          "docstring": "",
          "line_range": [
            15,
            19
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "is_local_address",
          "docstring": "",
          "line_range": [
            22,
            28
          ],
          "parameters": [
            "url"
          ],
          "decorators": []
        },
        {
          "name": "setup_proxy",
          "docstring": "",
          "line_range": [
            31,
            34
          ],
          "parameters": [
            "proxy_url"
          ],
          "decorators": []
        },
        {
          "name": "check_ollama",
          "docstring": "",
          "line_range": [
            37,
            42
          ],
          "parameters": [
            "api_url"
          ],
          "decorators": []
        },
        {
          "name": "optimize_prompt",
          "docstring": "",
          "line_range": [
            45,
            51
          ],
          "parameters": [
            "struct_data",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "run_llm_request",
          "docstring": "",
          "line_range": [
            54,
            78
          ],
          "parameters": [
            "api_url",
            "payload",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "check_llmstruct_cli",
          "docstring": "",
          "line_range": [
            81,
            82
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_with_llmstruct",
          "docstring": "",
          "line_range": [
            85,
            112
          ],
          "parameters": [
            "api_url",
            "project_path",
            "proxy",
            "use_placeholder"
          ],
          "decorators": []
        },
        {
          "name": "test_without_llmstruct",
          "docstring": "",
          "line_range": [
            115,
            122
          ],
          "parameters": [
            "api_url",
            "project_path",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "test_with_grok",
          "docstring": "",
          "line_range": [
            125,
            147
          ],
          "parameters": [
            "api_key",
            "project_path",
            "proxy",
            "use_placeholder"
          ],
          "decorators": []
        },
        {
          "name": "evaluate_accuracy",
          "docstring": "",
          "line_range": [
            150,
            152
          ],
          "parameters": [
            "response_text",
            "expected"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            155,
            215
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_system_metrics": [
          "psutil.virtual_memory",
          "psutil.cpu_percent"
        ],
        "is_local_address": [
          "ipaddress.ip_address",
          "urlparse"
        ],
        "setup_proxy": [
          "os.getenv"
        ],
        "check_ollama": [
          "response.json",
          "requests.get",
          "api_url.replace",
          "str"
        ],
        "optimize_prompt": [
          "struct_data.split",
          "print",
          "len"
        ],
        "run_llm_request": [
          "len",
          "type",
          "time.perf_counter",
          "response.raise_for_status",
          "get_system_metrics",
          "is_local_address",
          "session.post",
          "response.json",
          "print",
          "requests.Session"
        ],
        "check_llmstruct_cli": [
          "shutil.which"
        ],
        "test_with_llmstruct": [
          "subprocess.run",
          "run_llm_request",
          "str",
          "FileNotFoundError",
          "Path",
          "optimize_prompt",
          "f.read",
          "check_llmstruct_cli",
          "target_path.exists",
          "open",
          "json.dump"
        ],
        "test_without_llmstruct": [
          "run_llm_request",
          "optimize_prompt",
          "Path",
          "f.read",
          "open"
        ],
        "test_with_grok": [
          "FileNotFoundError",
          "Path",
          "optimize_prompt",
          "f.read",
          "target_path.exists",
          "open",
          "json.dump",
          "test_grok"
        ],
        "evaluate_accuracy": [
          "response_text.lower",
          "sum",
          "len"
        ],
        "main": [
          "test_with_llmstruct",
          "test_without_llmstruct",
          "parser.parse_args",
          "str",
          "check_ollama",
          "setup_proxy",
          "test_with_grok",
          "evaluate_accuracy",
          "argparse.ArgumentParser",
          "range",
          "check_llmstruct_cli",
          "print",
          "parser.add_argument",
          "open",
          "json.dump"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "ipaddress",
        "json",
        "os",
        "pathlib",
        "psutil",
        "requests",
        "shutil",
        "src.llmstruct.grok",
        "subprocess",
        "test_grok",
        "time",
        "urllib.parse",
        "urlparse"
      ],
      "hash": null,
      "artifact_id": "ba8fffb2-a05c-4395-b88d-222f5272e7b5"
    },
    {
      "module_id": "test_cli",
      "path": "test_cli.py",
      "category": "test",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "9ef966cb-5e42-4193-bedd-cb948047201e"
    },
    {
      "module_id": "test_audit",
      "path": "test_audit.py",
      "category": "test",
      "module_doc": "Test script for audit functionality.",
      "functions": [
        {
          "name": "test_audit_status",
          "docstring": "Test audit status directly.",
          "line_range": [
            7,
            49
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_audit_status": [
          "ideas_data.keys",
          "len",
          "tasks_file.exists",
          "Path",
          "tasks_data.keys",
          "ideas_file.exists",
          "t.get",
          "json.load",
          "open",
          "print",
          "list",
          "i.get"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "4afaf172-eea1-4235-9d22-21e5025efac9"
    },
    {
      "module_id": "collector",
      "path": "collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "",
          "line_range": [
            13,
            17
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "is_text_file",
          "docstring": "Check if file is likely a text file based on extension.",
          "line_range": [
            20,
            31
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "collect_project",
          "docstring": "",
          "line_range": [
            34,
            66
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "Path",
          "gitignore_path.exists",
          "gitignore_parser.parse_gitignore"
        ],
        "is_text_file": [],
        "collect_project": [
          "any",
          "file_path.is_file",
          "gitignore",
          "doc_files.items",
          "len",
          "json.dump",
          "Path",
          "root_dir.rglob",
          "load_gitignore",
          "f.read",
          "logger.info",
          "logger.error",
          "is_text_file",
          "str",
          "open",
          "logger.warning"
        ]
      },
      "dependencies": [
        "Path",
        "gitignore_parser",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "69eb5b03-3cea-4e94-bf37-18502808884a"
    },
    {
      "module_id": "final_system_check",
      "path": "final_system_check.py",
      "category": "core",
      "module_doc": "Final System Status Check - LLMStruct Modular CLI Integration\nComprehensive validation of all completed components",
      "functions": [
        {
          "name": "check_system_status",
          "docstring": "Comprehensive system status check",
          "line_range": [
            12,
            155
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "check_system_status": [
          "len",
          "data.get",
          "t.get",
          "json.load",
          "open",
          "print",
          "i.get"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "os",
        "pathlib",
        "sys"
      ],
      "hash": null,
      "artifact_id": "eaf3b11c-f797-4de6-ab12-561bab4322ed"
    },
    {
      "module_id": "board_cli",
      "path": "board_cli.py",
      "category": "core",
      "module_doc": "CLI Kanban Board for llmstruct tasks and ideas\n- Reads data/tasks.json and data/ideas.json\n- Shows board in terminal: columns by status, rows by priority\n- Supports filtering, sorting, and shows links between tasks/ideas",
      "functions": [
        {
          "name": "load_json",
          "docstring": "",
          "line_range": [
            26,
            28
          ],
          "parameters": [
            "path"
          ],
          "decorators": []
        },
        {
          "name": "group_by_status_and_priority",
          "docstring": "",
          "line_range": [
            30,
            36
          ],
          "parameters": [
            "items",
            "kind"
          ],
          "decorators": []
        },
        {
          "name": "render_board",
          "docstring": "",
          "line_range": [
            38,
            64
          ],
          "parameters": [
            "board",
            "kind"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            66,
            74
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json": [
          "open",
          "json.load"
        ],
        "group_by_status_and_priority": [
          "defaultdict",
          "item.get"
        ],
        "render_board": [
          "table.add_column",
          "console.print",
          "item.get",
          "links.extend",
          "Table",
          "kind.capitalize",
          "table.add_row",
          "links.append",
          "Panel"
        ],
        "main": [
          "tasks_data.get",
          "console.rule",
          "load_json",
          "group_by_status_and_priority",
          "ideas_data.get",
          "render_board"
        ]
      },
      "dependencies": [
        "Console",
        "Panel",
        "Path",
        "Table",
        "box",
        "collections",
        "defaultdict",
        "json",
        "os",
        "pathlib",
        "rich",
        "rich.console",
        "rich.panel",
        "rich.table"
      ],
      "hash": null,
      "artifact_id": "086a98ff-c614-4792-a562-790abe5da99f"
    },
    {
      "module_id": "final_system_validation",
      "path": "final_system_validation.py",
      "category": "core",
      "module_doc": "Final system validation script for LLMStruct Modular CLI Integration",
      "functions": [
        {
          "name": "main",
          "docstring": "Run comprehensive system validation",
          "line_range": [
            13,
            238
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "main": [
          "len",
          "task.get",
          "__import__",
          "create_cli_core",
          "getattr",
          "status.upper",
          "json.load",
          "open",
          "print",
          "next",
          "subprocess.run"
        ]
      },
      "dependencies": [
        "Path",
        "create_cli_core",
        "json",
        "llmstruct.cli_core",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "time"
      ],
      "hash": null,
      "artifact_id": "cff63608-b035-41f8-ba4b-a8e4ca2ecbac"
    },
    {
      "module_id": "validate_schemas",
      "path": "validate_schemas.py",
      "category": "core",
      "module_doc": "JSON Schema Validation Script for llmstruct\nValidates all enhanced JSON files against their appropriate schemas.\nPart of TSK-130 implementation.",
      "functions": [
        {
          "name": "load_json",
          "docstring": "Load JSON file with error handling.",
          "line_range": [
            24,
            34
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_json_against_schema",
          "docstring": "Validate JSON data against schema.",
          "line_range": [
            37,
            53
          ],
          "parameters": [
            "json_data",
            "schema_data",
            "file_name"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            56,
            193
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": [
            15,
            21
          ],
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {
        "load_json": [
          "open",
          "print",
          "json.load"
        ],
        "validate_json_against_schema": [
          "str",
          "print",
          "validate"
        ],
        "main": [
          "errors.append",
          "print",
          "load_json",
          "validate_json_against_schema"
        ]
      },
      "dependencies": [
        "Draft7Validator",
        "ValidationError",
        "json",
        "jsonschema",
        "sys",
        "validate"
      ],
      "hash": null,
      "artifact_id": "a658b27c-9e3f-488c-ba40-a80da9723e69"
    },
    {
      "module_id": "test_export",
      "path": "test_export.py",
      "category": "test",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "Path",
        "json",
        "pathlib",
        "sys"
      ],
      "hash": null,
      "artifact_id": "5d95fe52-32b6-46df-8e19-9eefcc2a7b4d"
    },
    {
      "module_id": "test_modular_cli",
      "path": "test_modular_cli.py",
      "category": "test",
      "module_doc": "Test script for modular CLI structure",
      "functions": [
        {
          "name": "test_modular_cli",
          "docstring": "Test basic modular CLI functionality.",
          "line_range": [
            14,
            63
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_copilot_integration",
          "docstring": "Test Copilot integration.",
          "line_range": [
            65,
            100
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_modular_cli": [
          "traceback.print_exc",
          "len",
          "utils.read_file_content",
          "CLIConfig",
          "CLIUtils",
          "utils.write_file_content",
          "tempfile.TemporaryDirectory",
          "create_cli_core",
          "CommandProcessor",
          "config.get_cache_config",
          "print"
        ],
        "test_copilot_integration": [
          "traceback.print_exc",
          "len",
          "manager.close",
          "initialize_copilot",
          "tempfile.TemporaryDirectory",
          "CopilotEvent",
          "print",
          "manager.get_context_status"
        ]
      },
      "dependencies": [
        "CLIConfig",
        "CLICore",
        "CLIUtils",
        "CommandProcessor",
        "CopilotContextManager",
        "CopilotEvent",
        "Path",
        "create_cli_core",
        "initialize_copilot",
        "llmstruct.cli_commands",
        "llmstruct.cli_config",
        "llmstruct.cli_core",
        "llmstruct.cli_utils",
        "llmstruct.copilot",
        "os",
        "pathlib",
        "sys",
        "tempfile",
        "traceback"
      ],
      "hash": null,
      "artifact_id": "aa29a487-560b-4cec-8045-970e8509c3b4"
    },
    {
      "module_id": "validate_sessions",
      "path": "validate_sessions.py",
      "category": "core",
      "module_doc": "Session Schema Validation Script for llmstruct\nValidates session management JSON files against their schemas.\nFocused validation for session system only.",
      "functions": [
        {
          "name": "load_json",
          "docstring": "Load JSON file with error handling.",
          "line_range": [
            21,
            31
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_json_against_schema",
          "docstring": "Validate JSON data against schema.",
          "line_range": [
            33,
            52
          ],
          "parameters": [
            "json_data",
            "schema_data",
            "file_name"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            54,
            124
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": [
            13,
            19
          ],
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {
        "load_json": [
          "open",
          "print",
          "json.load"
        ],
        "validate_json_against_schema": [
          "Draft7Validator",
          "len",
          "validator.iter_errors",
          "str",
          "print",
          "list"
        ],
        "main": [
          "errors.append",
          "print",
          "load_json",
          "validate_json_against_schema"
        ]
      },
      "dependencies": [
        "Draft7Validator",
        "ValidationError",
        "json",
        "jsonschema",
        "sys",
        "validate"
      ],
      "hash": null,
      "artifact_id": "8ae00c0a-fb60-4b3d-8c27-1444a461c772"
    },
    {
      "module_id": "verify_llm_response",
      "path": "verify_llm_response.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_json_file",
          "docstring": "Load a JSON file and return its contents.",
          "line_range": [
            15,
            25
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "verify_response_with_struct",
          "docstring": "Verify llm_response.json against struct.json.",
          "line_range": [
            28,
            71
          ],
          "parameters": [
            "response_text",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "verify_response_without_struct",
          "docstring": "Verify llm_response.json based on LLMstruct principles.",
          "line_range": [
            74,
            108
          ],
          "parameters": [
            "response_text"
          ],
          "decorators": []
        },
        {
          "name": "generate_metrics",
          "docstring": "Generate metrics for the response per EXT-004.",
          "line_range": [
            111,
            141
          ],
          "parameters": [
            "response_data",
            "server_log"
          ],
          "decorators": []
        },
        {
          "name": "update_tasks_json",
          "docstring": "Append a new task to tasks.json.",
          "line_range": [
            144,
            151
          ],
          "parameters": [
            "tasks_file",
            "new_task"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            154,
            225
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json_file": [
          "open",
          "logging.error",
          "json.load"
        ],
        "verify_response_with_struct": [
          "re.findall",
          "logging.error",
          "struct_data.get",
          "set",
          "expected_extensions.issubset",
          "logging.info",
          "expected_files.issubset",
          "expected_goals.issubset",
          "e.startswith"
        ],
        "verify_response_without_struct": [
          "re.findall",
          "logging.error",
          "principle.lower",
          "response_text.lower",
          "set",
          "expected_extensions.issubset",
          "logging.info",
          "expected_files.issubset",
          "expected_goals.issubset"
        ],
        "generate_metrics": [
          "len",
          "re.findall",
          "server_log.get",
          "response_text.split",
          "datetime.utcnow"
        ],
        "update_tasks_json": [
          "load_json_file",
          "logging.info",
          "tasks.get",
          "open",
          "json.dump"
        ],
        "main": [
          "load_json_file",
          "parser.parse_args",
          "argparse.ArgumentParser",
          "logging.info",
          "verify_response_with_struct",
          "verify_response_without_struct",
          "open",
          "update_tasks_json",
          "parser.add_argument",
          "generate_metrics",
          "json.dump"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "argparse",
        "datetime",
        "json",
        "logging",
        "os",
        "re",
        "typing"
      ],
      "hash": null,
      "artifact_id": "8636e090-caa7-4280-a8f7-cdb82e3b1fcb"
    },
    {
      "module_id": "test_cli_demo",
      "path": "test_cli_demo.py",
      "category": "test",
      "module_doc": "Quick CLI test to demonstrate new commands",
      "functions": [
        {
          "name": "test_interactive_cli",
          "docstring": "Test interactive CLI with new commands",
          "line_range": [
            10,
            69
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_interactive_cli": [
          "print",
          "subprocess.run"
        ]
      },
      "dependencies": [
        "subprocess",
        "sys",
        "time"
      ],
      "hash": null,
      "artifact_id": "b851ae88-b111-42bc-9bb5-dc877cbc21fc"
    },
    {
      "module_id": "examples.python_project_utils",
      "path": "examples/python_project_utils.py",
      "category": "core",
      "module_doc": "Utility functions for the sample project.",
      "functions": [
        {
          "name": "helper",
          "docstring": "Help the main function.",
          "line_range": [
            6,
            8
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "log",
          "docstring": "Log a message.",
          "line_range": [
            11,
            13
          ],
          "parameters": [
            "message"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "helper": [
          "log"
        ],
        "log": [
          "logging.info"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": null,
      "artifact_id": "cb718082-29ad-4311-9f0d-26d06efcdf57"
    },
    {
      "module_id": "examples.python_project_main",
      "path": "examples/python_project_main.py",
      "category": "core",
      "module_doc": "Main module for the sample project.",
      "functions": [
        {
          "name": "main",
          "docstring": "Run the program.",
          "line_range": [
            6,
            9
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "Execute the app.",
          "line_range": [
            15,
            17
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "App",
          "docstring": "Application class.",
          "line_range": [
            12,
            17
          ],
          "methods": [
            {
              "name": "run",
              "docstring": "Execute the app.",
              "line_range": [
                15,
                17
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "main": [
          "print",
          "utils.helper"
        ],
        "run": [
          "utils.log"
        ]
      },
      "dependencies": [
        "utils"
      ],
      "hash": null,
      "artifact_id": "91f7b307-5175-4461-a130-8ffb9e233171"
    },
    {
      "module_id": "docs.test_self_run",
      "path": "docs/test_self_run.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "test_filter_json_init_json",
          "docstring": "Test filter_json with init.json structure.",
          "line_range": [
            15,
            22
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_select_json_partial",
          "docstring": "Test partial JSON loading.",
          "line_range": [
            24,
            34
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_cache_json",
          "docstring": "Test JSON caching.",
          "line_range": [
            36,
            48
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_attach_to_llm_request_init_json",
          "docstring": "Test attach_to_llm_request with init.json and cache.",
          "line_range": [
            50,
            67
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_attach_to_llm_request_missing_file",
          "docstring": "Test attach_to_llm_request with missing file.",
          "line_range": [
            69,
            73
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_filter_json_init_json": [
          "filter_json"
        ],
        "test_select_json_partial": [
          "open",
          "select_json",
          "json.dump",
          "str"
        ],
        "test_cache_json": [
          "str",
          "JSONCache",
          "cache.get_metadata",
          "cache.close",
          "cache.cache_json",
          "open",
          "cache.get_full_json",
          "json.dump"
        ],
        "test_attach_to_llm_request_init_json": [
          "str",
          "JSONCache",
          "cache.close",
          "attach_to_llm_request",
          "open",
          "json.dump"
        ],
        "test_attach_to_llm_request_missing_file": [
          "str",
          "attach_to_llm_request"
        ]
      },
      "dependencies": [
        "JSONCache",
        "Path",
        "attach_to_llm_request",
        "filter_json",
        "filter_struct",
        "json",
        "llmstruct.cache",
        "llmstruct.json_selector",
        "llmstruct.self_run",
        "pathlib",
        "pytest",
        "select_json"
      ],
      "hash": null,
      "artifact_id": "c55f96c3-215c-4e29-af57-10a3d4cbfee4"
    },
    {
      "module_id": "docs.cache",
      "path": "docs/cache.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize SQLite cache for JSON files.",
          "line_range": [
            18,
            22
          ],
          "parameters": [
            "self",
            "db_path"
          ],
          "decorators": []
        },
        {
          "name": "create_tables",
          "docstring": "Create tables for metadata and file paths.",
          "line_range": [
            24,
            42
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cache_json",
          "docstring": "Cache JSON metadata and store full file path.",
          "line_range": [
            44,
            64
          ],
          "parameters": [
            "self",
            "json_path",
            "artifact_id",
            "summary",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "get_metadata",
          "docstring": "Retrieve metadata by artifact_id.",
          "line_range": [
            66,
            79
          ],
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "get_full_json",
          "docstring": "Load full JSON by artifact_id.",
          "line_range": [
            81,
            94
          ],
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Close database connection.",
          "line_range": [
            96,
            98
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JSONCache",
          "docstring": "",
          "line_range": [
            17,
            98
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize SQLite cache for JSON files.",
              "line_range": [
                18,
                22
              ],
              "parameters": [
                "self",
                "db_path"
              ]
            },
            {
              "name": "create_tables",
              "docstring": "Create tables for metadata and file paths.",
              "line_range": [
                24,
                42
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cache_json",
              "docstring": "Cache JSON metadata and store full file path.",
              "line_range": [
                44,
                64
              ],
              "parameters": [
                "self",
                "json_path",
                "artifact_id",
                "summary",
                "tags"
              ]
            },
            {
              "name": "get_metadata",
              "docstring": "Retrieve metadata by artifact_id.",
              "line_range": [
                66,
                79
              ],
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "get_full_json",
              "docstring": "Load full JSON by artifact_id.",
              "line_range": [
                81,
                94
              ],
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "close",
              "docstring": "Close database connection.",
              "line_range": [
                96,
                98
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.create_tables",
          "sqlite3.connect"
        ],
        "create_tables": [],
        "cache_json": [
          "str",
          "logging.error",
          "Path",
          "f.read",
          "hashlib.sha256",
          "json.dumps",
          "logging.info",
          "open",
          "content.encode",
          "json_file.exists"
        ],
        "get_metadata": [
          "json.loads",
          "cursor.fetchone"
        ],
        "get_full_json": [
          "open",
          "json.load",
          "cursor.fetchone",
          "logging.error"
        ],
        "close": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "hashlib",
        "json",
        "logging",
        "pathlib",
        "sqlite3",
        "typing"
      ],
      "hash": null,
      "artifact_id": "dfe5a3f1-d469-4148-9c77-e571b6a4d2ab"
    },
    {
      "module_id": "docs.self_run",
      "path": "docs/self_run.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_struct",
          "docstring": "Filter struct.json or init.json based on prompt keywords.",
          "line_range": [
            17,
            35
          ],
          "parameters": [
            "struct",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "Attach filtered JSON to LLM prompt, using cache if available.",
          "line_range": [
            37,
            74
          ],
          "parameters": [
            "context_path",
            "prompt",
            "cache"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_struct": [
          "any",
          "struct.get",
          "filter_json",
          "module.get",
          "prompt.lower"
        ],
        "attach_to_llm_request": [
          "context_file.exists",
          "select_json",
          "logging.error",
          "Path",
          "cache.get_metadata",
          "filter_struct",
          "filter_json",
          "logging.info",
          "cache.cache_json",
          "cache.get_full_json",
          "prompt.lower",
          "json.dumps"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "JSONCache",
        "List",
        "Path",
        "cache",
        "filter_json",
        "json",
        "json_selector",
        "logging",
        "pathlib",
        "select_json",
        "typing"
      ],
      "hash": null,
      "artifact_id": "60d819d2-12bb-4e39-be7a-ae3e5211d33a"
    },
    {
      "module_id": "docs.json_selector",
      "path": "docs/json_selector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_json",
          "docstring": "Filter JSON data by key-value pair and select fields.",
          "line_range": [
            17,
            29
          ],
          "parameters": [
            "data",
            "filter_key",
            "filter_value",
            "fields"
          ],
          "decorators": []
        },
        {
          "name": "select_json",
          "docstring": "Load and filter JSON file, optionally parsing partially.",
          "line_range": [
            31,
            72
          ],
          "parameters": [
            "json_path",
            "filter_key",
            "filter_value",
            "fields",
            "partial"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_json": [
          "data.get",
          "isinstance",
          "filtered.append",
          "item.get"
        ],
        "select_json": [
          "ijson.parse",
          "current_item.get",
          "logging.error",
          "Path",
          "path.append",
          "filter_json",
          "prefix.startswith",
          "json.load",
          "open",
          "f.seek",
          "filtered.append",
          "json_file.exists"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "ijson",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "e43a1d6b-501a-4ac1-966e-f854517bb800"
    },
    {
      "module_id": "docs.cli",
      "path": "docs/cli.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": [
            26,
            36
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from llmstruct.toml or return empty dict.",
          "line_range": [
            38,
            47
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": [
            49,
            58
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default /tmp) and return the path.",
          "line_range": [
            60,
            74
          ],
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": [
            76,
            83
          ],
          "parameters": [
            "response"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": [
            85,
            195
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": [
            197,
            237
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": [
            239,
            260
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": [
            262,
            264
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": [
            266,
            268
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": [
            270,
            272
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": [
            274,
            334
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "line.startswith",
          "gitignore_path.open",
          "logging.error",
          "Path",
          "line.strip",
          "gitignore_path.exists"
        ],
        "load_config": [
          "logging.error",
          "Path",
          "config_path.exists",
          "toml.load",
          "config_path\u30aa\u30fc\u30d7\u30f3"
        ],
        "read_file_content": [
          "logging.error",
          "Path",
          "path.open",
          "f.read",
          "path.is_file"
        ],
        "write_to_file": [
          "base_path.mkdir",
          "logging.error",
          "Path",
          "logging.info",
          "str",
          "f.write",
          "file_path.exists",
          "file_path.open",
          "logging.warning"
        ],
        "parse_files_from_response": [
          "files.append",
          "filename.strip",
          "content.strip",
          "re.findall"
        ],
        "interactive": [
          "read_file_content",
          "write_dir.startswith",
          "JSONCache",
          "logging.error",
          "load_gitignore",
          "os.listdir",
          "write_match.group",
          "cache.close",
          "json.dumps",
          "LLMClient",
          "sorted",
          "scan_match.group",
          "attach_to_llm_request",
          "print",
          "re.search",
          "files_to_write.append",
          "parse",
          "get_folder_structure",
          "logging.warning",
          "write_to_file",
          "Path",
          "parse_files_from_response",
          "input",
          "client.query",
          "user_input.lower"
        ],
        "parse": [
          "config.get",
          "generate_json",
          "JSONCache",
          "logging.error",
          "load_gitignore",
          "Path",
          "cache.close",
          "load_config",
          "logging.info",
          "cache.cache_json",
          "json.dump",
          "logging.warning"
        ],
        "query": [
          "LLMClient",
          "JSONCache",
          "logging.error",
          "Path",
          "client.query",
          "cache.close",
          "logging.info",
          "json.dump"
        ],
        "context": [
          "logging.warning"
        ],
        "dogfood": [
          "logging.warning"
        ],
        "review": [
          "logging.warning"
        ],
        "main": [
          "context_parser.add_argument",
          "parser.parse_args",
          "interactive",
          "query_parser.add_argument",
          "query",
          "review",
          "parser.add_subparsers",
          "subparsers.add_parser",
          "interactive_parser.add_argument",
          "dogfood_parser.add_argument",
          "parse",
          "review_parser.add_argument",
          "argparse.ArgumentParser",
          "dogfood",
          "asyncio.run",
          "parse_parser.add_argument",
          "context"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "generate_json",
        "get_folder_structure",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "logging",
        "os",
        "pathlib",
        "re",
        "toml",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "bed1ffc3-2c37-425f-a217-6edfe0563615"
    },
    {
      "module_id": "src.llmstruct.cli_config",
      "path": "src/llmstruct/cli_config.py",
      "category": "core",
      "module_doc": "CLI configuration management.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize configuration manager.",
          "line_range": [
            20,
            24
          ],
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load configuration from llmstruct.toml.",
          "line_range": [
            26,
            34
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_cache_config",
          "docstring": "Get cache configuration section.",
          "line_range": [
            36,
            38
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_copilot_config",
          "docstring": "Get Copilot configuration section.",
          "line_range": [
            40,
            42
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_queue_config",
          "docstring": "Get queue configuration section.",
          "line_range": [
            44,
            46
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_config",
          "docstring": "Get context configuration section.",
          "line_range": [
            48,
            50
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_gitignore_patterns",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": [
            52,
            66
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_dirs",
          "docstring": "Get directories to exclude from scanning.",
          "line_range": [
            68,
            82
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_include_patterns",
          "docstring": "Get file patterns to include.",
          "line_range": [
            84,
            89
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_patterns",
          "docstring": "Get file patterns to exclude.",
          "line_range": [
            91,
            96
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_max_file_size",
          "docstring": "Get maximum file size for processing (in bytes).",
          "line_range": [
            98,
            100
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_auto_update_config",
          "docstring": "Get auto-update configuration.",
          "line_range": [
            102,
            104
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "is_auto_update_enabled",
          "docstring": "Check if auto-update is enabled.",
          "line_range": [
            106,
            108
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_struct_file_path",
          "docstring": "Get path to struct.json file.",
          "line_range": [
            110,
            112
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_file_path",
          "docstring": "Get path to context file.",
          "line_range": [
            114,
            116
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_config",
          "docstring": "Save current configuration to file.",
          "line_range": [
            118,
            124
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "update_config",
          "docstring": "Update configuration value.",
          "line_range": [
            126,
            131
          ],
          "parameters": [
            "self",
            "section",
            "key",
            "value"
          ],
          "decorators": []
        },
        {
          "name": "reload_config",
          "docstring": "Reload configuration from file.",
          "line_range": [
            133,
            135
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLIConfig",
          "docstring": "Manages CLI configuration from llmstruct.toml and other sources.",
          "line_range": [
            17,
            135
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize configuration manager.",
              "line_range": [
                20,
                24
              ],
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load configuration from llmstruct.toml.",
              "line_range": [
                26,
                34
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_cache_config",
              "docstring": "Get cache configuration section.",
              "line_range": [
                36,
                38
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_copilot_config",
              "docstring": "Get Copilot configuration section.",
              "line_range": [
                40,
                42
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_queue_config",
              "docstring": "Get queue configuration section.",
              "line_range": [
                44,
                46
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_config",
              "docstring": "Get context configuration section.",
              "line_range": [
                48,
                50
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_gitignore_patterns",
              "docstring": "Load and normalize patterns from .gitignore.",
              "line_range": [
                52,
                66
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_exclude_dirs",
              "docstring": "Get directories to exclude from scanning.",
              "line_range": [
                68,
                82
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_include_patterns",
              "docstring": "Get file patterns to include.",
              "line_range": [
                84,
                89
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_exclude_patterns",
              "docstring": "Get file patterns to exclude.",
              "line_range": [
                91,
                96
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_max_file_size",
              "docstring": "Get maximum file size for processing (in bytes).",
              "line_range": [
                98,
                100
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_auto_update_config",
              "docstring": "Get auto-update configuration.",
              "line_range": [
                102,
                104
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "is_auto_update_enabled",
              "docstring": "Check if auto-update is enabled.",
              "line_range": [
                106,
                108
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_struct_file_path",
              "docstring": "Get path to struct.json file.",
              "line_range": [
                110,
                112
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_file_path",
              "docstring": "Get path to context file.",
              "line_range": [
                114,
                116
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_config",
              "docstring": "Save current configuration to file.",
              "line_range": [
                118,
                124
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "update_config",
              "docstring": "Update configuration value.",
              "line_range": [
                126,
                131
              ],
              "parameters": [
                "self",
                "section",
                "key",
                "value"
              ]
            },
            {
              "name": "reload_config",
              "docstring": "Reload configuration from file.",
              "line_range": [
                133,
                135
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self._load_config"
        ],
        "_load_config": [
          "logging.error",
          "toml.load"
        ],
        "get_cache_config": [],
        "get_copilot_config": [],
        "get_queue_config": [],
        "get_context_config": [],
        "get_gitignore_patterns": [
          "line.startswith",
          "gitignore_path.open",
          "logging.error",
          "Path",
          "line.strip",
          "gitignore_path.exists"
        ],
        "get_exclude_dirs": [
          "set",
          "parsing_config.get",
          "cli_config.get",
          "list"
        ],
        "get_include_patterns": [
          "parsing_config.get",
          "cli_config.get"
        ],
        "get_exclude_patterns": [
          "parsing_config.get",
          "cli_config.get"
        ],
        "get_max_file_size": [],
        "get_auto_update_config": [],
        "is_auto_update_enabled": [
          "self.get_auto_update_config"
        ],
        "get_struct_file_path": [],
        "get_context_file_path": [],
        "save_config": [
          "logging.error",
          "toml.dump"
        ],
        "update_config": [
          "self.save_config"
        ],
        "reload_config": [
          "self._load_config"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "logging",
        "pathlib",
        "toml",
        "typing"
      ],
      "hash": null,
      "artifact_id": "216524d3-fb89-4300-9a86-d9bd8e1c8af9"
    },
    {
      "module_id": "src.llmstruct.grok",
      "path": "src/llmstruct/grok.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "test_grok",
          "docstring": "",
          "line_range": [
            24,
            30
          ],
          "parameters": [
            "api_key",
            "prompt",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            6,
            11
          ],
          "parameters": [
            "self",
            "api_key",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "generate",
          "docstring": "",
          "line_range": [
            13,
            21
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GrokClient",
          "docstring": "",
          "line_range": [
            5,
            21
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                6,
                11
              ],
              "parameters": [
                "self",
                "api_key",
                "proxy"
              ]
            },
            {
              "name": "generate",
              "docstring": "",
              "line_range": [
                13,
                21
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "requests.Session"
        ],
        "generate": [
          "response.json",
          "response.raise_for_status",
          "prompt.split",
          "len"
        ],
        "test_grok": [
          "GrokClient",
          "time.perf_counter",
          "client.generate"
        ]
      },
      "dependencies": [
        "requests",
        "time"
      ],
      "hash": null,
      "artifact_id": "3452bdf2-5eae-46f7-93a1-1cf74294c155"
    },
    {
      "module_id": "src.llmstruct.cli_commands",
      "path": "src/llmstruct/cli_commands.py",
      "category": "core",
      "module_doc": "CLI command processing and handlers.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize command processor.",
          "line_range": [
            33,
            72
          ],
          "parameters": [
            "self",
            "root_dir",
            "config",
            "utils"
          ],
          "decorators": []
        },
        {
          "name": "set_cache",
          "docstring": "Set cache instance.",
          "line_range": [
            74,
            76
          ],
          "parameters": [
            "self",
            "cache"
          ],
          "decorators": []
        },
        {
          "name": "set_copilot",
          "docstring": "Set Copilot manager instance.",
          "line_range": [
            78,
            80
          ],
          "parameters": [
            "self",
            "copilot_manager"
          ],
          "decorators": []
        },
        {
          "name": "process_command",
          "docstring": "Process a command starting with /.",
          "line_range": [
            82,
            98
          ],
          "parameters": [
            "self",
            "command_line"
          ],
          "decorators": []
        },
        {
          "name": "process_prompt",
          "docstring": "Process a regular user prompt (not a command).",
          "line_range": [
            100,
            152
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "cmd_help",
          "docstring": "Show help information.",
          "line_range": [
            154,
            217
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_workspace",
          "docstring": "Handle workspace state and permissions management.",
          "line_range": [
            219,
            334
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_mode",
          "docstring": "Handle context mode operations with workspace integration.",
          "line_range": [
            336,
            437
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_view",
          "docstring": "View file or directory contents.",
          "line_range": [
            439,
            478
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_write",
          "docstring": "Write content to a file.",
          "line_range": [
            480,
            505
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_queue",
          "docstring": "Handle queue operations.",
          "line_range": [
            507,
            549
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_cache",
          "docstring": "Handle cache operations.",
          "line_range": [
            551,
            590
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_copilot",
          "docstring": "Handle Copilot operations.",
          "line_range": [
            592,
            626
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_config",
          "docstring": "Handle configuration operations.",
          "line_range": [
            628,
            660
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_status",
          "docstring": "Show system status.",
          "line_range": [
            662,
            676
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_backup",
          "docstring": "Create backup of a file.",
          "line_range": [
            678,
            693
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_parse",
          "docstring": "Parse project structure.",
          "line_range": [
            695,
            715
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_audit",
          "docstring": "Handle audit operations.",
          "line_range": [
            717,
            743
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_auto_update",
          "docstring": "Handle auto-update operations.",
          "line_range": [
            745,
            765
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_struct_status",
          "docstring": "Handle struct status operations.",
          "line_range": [
            767,
            791
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_context",
          "docstring": "Handle context operations.",
          "line_range": [
            793,
            849
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_session",
          "docstring": "Handle session operations.",
          "line_range": [
            851,
            902
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CommandProcessor",
          "docstring": "Processes CLI commands and user prompts.",
          "line_range": [
            30,
            902
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize command processor.",
              "line_range": [
                33,
                72
              ],
              "parameters": [
                "self",
                "root_dir",
                "config",
                "utils"
              ]
            },
            {
              "name": "set_cache",
              "docstring": "Set cache instance.",
              "line_range": [
                74,
                76
              ],
              "parameters": [
                "self",
                "cache"
              ]
            },
            {
              "name": "set_copilot",
              "docstring": "Set Copilot manager instance.",
              "line_range": [
                78,
                80
              ],
              "parameters": [
                "self",
                "copilot_manager"
              ]
            },
            {
              "name": "process_command",
              "docstring": "Process a command starting with /.",
              "line_range": [
                82,
                98
              ],
              "parameters": [
                "self",
                "command_line"
              ]
            },
            {
              "name": "process_prompt",
              "docstring": "Process a regular user prompt (not a command).",
              "line_range": [
                100,
                152
              ],
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "cmd_help",
              "docstring": "Show help information.",
              "line_range": [
                154,
                217
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_workspace",
              "docstring": "Handle workspace state and permissions management.",
              "line_range": [
                219,
                334
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_mode",
              "docstring": "Handle context mode operations with workspace integration.",
              "line_range": [
                336,
                437
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_view",
              "docstring": "View file or directory contents.",
              "line_range": [
                439,
                478
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_write",
              "docstring": "Write content to a file.",
              "line_range": [
                480,
                505
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_queue",
              "docstring": "Handle queue operations.",
              "line_range": [
                507,
                549
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_cache",
              "docstring": "Handle cache operations.",
              "line_range": [
                551,
                590
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_copilot",
              "docstring": "Handle Copilot operations.",
              "line_range": [
                592,
                626
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_config",
              "docstring": "Handle configuration operations.",
              "line_range": [
                628,
                660
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_status",
              "docstring": "Show system status.",
              "line_range": [
                662,
                676
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_backup",
              "docstring": "Create backup of a file.",
              "line_range": [
                678,
                693
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_parse",
              "docstring": "Parse project structure.",
              "line_range": [
                695,
                715
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_audit",
              "docstring": "Handle audit operations.",
              "line_range": [
                717,
                743
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "handle_auto_update",
              "docstring": "Handle auto-update operations.",
              "line_range": [
                745,
                765
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "handle_struct_status",
              "docstring": "Handle struct status operations.",
              "line_range": [
                767,
                791
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_context",
              "docstring": "Handle context operations.",
              "line_range": [
                793,
                849
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_session",
              "docstring": "Handle session operations.",
              "line_range": [
                851,
                902
              ],
              "parameters": [
                "self",
                "args"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "print",
          "WorkspaceStateManager"
        ],
        "set_cache": [],
        "set_copilot": [],
        "process_command": [
          "len",
          "command_line.split",
          "logging.error",
          "print",
          "command_line.strip"
        ],
        "process_prompt": [
          "len",
          "logging.error",
          "context_data.get",
          "context_info.get",
          "prompt.strip",
          "get_optimized_context",
          "logging.info",
          "CopilotEvent",
          "print",
          "logging.warning"
        ],
        "cmd_help": [
          "print"
        ],
        "cmd_workspace": [
          "args.strip",
          "override.get",
          "int",
          "len",
          "permissions.get",
          "entry.get",
          "state.get",
          "logging.error",
          "action_args.split",
          "result.get",
          "boundaries.get",
          "print"
        ],
        "cmd_mode": [
          "args.strip",
          "permissions.get",
          "len",
          "re.findall",
          "metrics.get",
          "context_data.get",
          "result.get",
          "get_optimized_context",
          "args.lower",
          "args.upper",
          "print"
        ],
        "cmd_view": [
          "args.strip",
          "print",
          "sorted",
          "os.listdir"
        ],
        "cmd_write": [
          "len",
          "content.endswith",
          "content.startswith",
          "args.split",
          "print"
        ],
        "cmd_queue": [
          "args.strip",
          "queue_data.get",
          "len",
          "os.remove",
          "enumerate",
          "json.load",
          "cmd.get",
          "open",
          "print"
        ],
        "cmd_cache": [
          "args.strip",
          "len",
          "stats.get",
          "os.listdir",
          "print"
        ],
        "cmd_copilot": [
          "args.strip",
          "json.load",
          "open",
          "print",
          "json.dumps"
        ],
        "cmd_config": [
          "args.strip",
          "print",
          "json.dumps"
        ],
        "cmd_status": [
          "print"
        ],
        "cmd_backup": [
          "args.strip",
          "print"
        ],
        "cmd_parse": [
          "print",
          "generate_json"
        ],
        "cmd_audit": [
          "args.strip",
          "print"
        ],
        "handle_auto_update": [
          "print",
          "generate_json"
        ],
        "handle_struct_status": [
          "len",
          "os.stat",
          "struct_data.get",
          "datetime.fromtimestamp",
          "json.load",
          "open",
          "print"
        ],
        "cmd_context": [
          "args.strip",
          "len",
          "metrics.get",
          "context_data.get",
          "get_optimized_context",
          "print"
        ],
        "cmd_session": [
          "args.strip",
          "len",
          "state.get",
          "datetime.now",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "CLIConfig",
        "CLIUtils",
        "CopilotContextManager",
        "CopilotEvent",
        "Dict",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "WorkspaceStateManager",
        "cli_config",
        "cli_utils",
        "copilot",
        "create_context_orchestrator",
        "datetime",
        "generate_json",
        "get_optimized_context",
        "get_optimized_context_for_scenario",
        "initialize_copilot",
        "json",
        "llmstruct.cache",
        "llmstruct.context_orchestrator",
        "llmstruct.copilot",
        "llmstruct.generators.json_generator",
        "logging",
        "os",
        "pathlib",
        "re",
        "subprocess",
        "sys",
        "trigger_copilot_event",
        "typing",
        "workspace"
      ],
      "hash": null,
      "artifact_id": "02da2f7e-b4bb-49f3-81ed-b378eddc78ea"
    },
    {
      "module_id": "src.llmstruct.context_orchestrator",
      "path": "src/llmstruct/context_orchestrator.py",
      "category": "core",
      "module_doc": "Smart Context Orchestration for LLMStruct\nOptimizes context loading for different LLM usage scenarios",
      "functions": [
        {
          "name": "create_context_orchestrator",
          "docstring": "Factory function to create context orchestrator.",
          "line_range": [
            461,
            463
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_optimized_context",
          "docstring": "Get optimized context for scenario - convenience function.\n\nArgs:\n    project_root: Project root directory\n    scenario: Usage scenario (cli_direct, vscode_copilot, session_work)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
          "line_range": [
            466,
            498
          ],
          "parameters": [
            "project_root",
            "scenario",
            "file_path",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            57,
            75
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load context orchestration configuration.",
          "line_range": [
            77,
            119
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_for_scenario",
          "docstring": "Get optimized context for specific usage scenario.\n\nArgs:\n    scenario: Usage scenario (cli_direct, vscode_copilot, etc.)\n    file_path: Optional file path for focused context\n    custom_budget: Optional custom token budget\n    \nReturns:\n    Optimized context dictionary",
          "line_range": [
            121,
            161
          ],
          "parameters": [
            "self",
            "scenario",
            "file_path",
            "custom_budget"
          ],
          "decorators": []
        },
        {
          "name": "_get_budget_for_scenario",
          "docstring": "Create budget configuration for scenario.",
          "line_range": [
            163,
            172
          ],
          "parameters": [
            "self",
            "scenario_config"
          ],
          "decorators": []
        },
        {
          "name": "_load_full_context",
          "docstring": "Load complete context without token restrictions.",
          "line_range": [
            174,
            187
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_focused_context",
          "docstring": "Load focused context optimized for VS Code Copilot.",
          "line_range": [
            189,
            230
          ],
          "parameters": [
            "self",
            "file_path",
            "budget"
          ],
          "decorators": []
        },
        {
          "name": "_load_session_context",
          "docstring": "Load session-specific context.",
          "line_range": [
            232,
            254
          ],
          "parameters": [
            "self",
            "budget"
          ],
          "decorators": []
        },
        {
          "name": "_load_minimal_context",
          "docstring": "Load minimal context for quick operations.",
          "line_range": [
            256,
            274
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_source_with_filtering",
          "docstring": "Load source with optional filtering based on budget.",
          "line_range": [
            276,
            299
          ],
          "parameters": [
            "self",
            "source_name",
            "budget"
          ],
          "decorators": []
        },
        {
          "name": "_get_file_context",
          "docstring": "Get context specific to a file.",
          "line_range": [
            301,
            312
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_extract_essential_parts",
          "docstring": "Extract essential parts of data to fit token budget.",
          "line_range": [
            314,
            336
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_filter_for_current_session",
          "docstring": "Filter data to items relevant to current session.",
          "line_range": [
            338,
            377
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_extract_summary",
          "docstring": "Extract summary information from data.",
          "line_range": [
            379,
            398
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_apply_section_filtering",
          "docstring": "Apply section filtering to exclude specified sections.",
          "line_range": [
            400,
            412
          ],
          "parameters": [
            "self",
            "data",
            "exclude_sections"
          ],
          "decorators": []
        },
        {
          "name": "_update_metrics",
          "docstring": "Update performance metrics.",
          "line_range": [
            414,
            432
          ],
          "parameters": [
            "self",
            "scenario",
            "context",
            "load_time"
          ],
          "decorators": []
        },
        {
          "name": "get_metrics_summary",
          "docstring": "Get summary of context loading metrics.",
          "line_range": [
            434,
            449
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_metrics",
          "docstring": "Save metrics to file for analysis.",
          "line_range": [
            451,
            456
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ContextMode",
          "docstring": "Context loading modes for different scenarios.",
          "line_range": [
            17,
            22
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextLevel",
          "docstring": "Progressive context levels with token budgets.",
          "line_range": [
            25,
            30
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextBudget",
          "docstring": "Token budget configuration for context loading.",
          "line_range": [
            34,
            39
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ContextMetrics",
          "docstring": "Metrics for context loading performance.",
          "line_range": [
            43,
            48
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "SmartContextOrchestrator",
          "docstring": "Orchestrates context loading based on usage scenario and token budget.\nProvides optimized context for different LLM integration patterns.",
          "line_range": [
            51,
            456
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                57,
                75
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load context orchestration configuration.",
              "line_range": [
                77,
                119
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_for_scenario",
              "docstring": "Get optimized context for specific usage scenario.\n\nArgs:\n    scenario: Usage scenario (cli_direct, vscode_copilot, etc.)\n    file_path: Optional file path for focused context\n    custom_budget: Optional custom token budget\n    \nReturns:\n    Optimized context dictionary",
              "line_range": [
                121,
                161
              ],
              "parameters": [
                "self",
                "scenario",
                "file_path",
                "custom_budget"
              ]
            },
            {
              "name": "_get_budget_for_scenario",
              "docstring": "Create budget configuration for scenario.",
              "line_range": [
                163,
                172
              ],
              "parameters": [
                "self",
                "scenario_config"
              ]
            },
            {
              "name": "_load_full_context",
              "docstring": "Load complete context without token restrictions.",
              "line_range": [
                174,
                187
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_focused_context",
              "docstring": "Load focused context optimized for VS Code Copilot.",
              "line_range": [
                189,
                230
              ],
              "parameters": [
                "self",
                "file_path",
                "budget"
              ]
            },
            {
              "name": "_load_session_context",
              "docstring": "Load session-specific context.",
              "line_range": [
                232,
                254
              ],
              "parameters": [
                "self",
                "budget"
              ]
            },
            {
              "name": "_load_minimal_context",
              "docstring": "Load minimal context for quick operations.",
              "line_range": [
                256,
                274
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_source_with_filtering",
              "docstring": "Load source with optional filtering based on budget.",
              "line_range": [
                276,
                299
              ],
              "parameters": [
                "self",
                "source_name",
                "budget"
              ]
            },
            {
              "name": "_get_file_context",
              "docstring": "Get context specific to a file.",
              "line_range": [
                301,
                312
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_extract_essential_parts",
              "docstring": "Extract essential parts of data to fit token budget.",
              "line_range": [
                314,
                336
              ],
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_filter_for_current_session",
              "docstring": "Filter data to items relevant to current session.",
              "line_range": [
                338,
                377
              ],
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_extract_summary",
              "docstring": "Extract summary information from data.",
              "line_range": [
                379,
                398
              ],
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_apply_section_filtering",
              "docstring": "Apply section filtering to exclude specified sections.",
              "line_range": [
                400,
                412
              ],
              "parameters": [
                "self",
                "data",
                "exclude_sections"
              ]
            },
            {
              "name": "_update_metrics",
              "docstring": "Update performance metrics.",
              "line_range": [
                414,
                432
              ],
              "parameters": [
                "self",
                "scenario",
                "context",
                "load_time"
              ]
            },
            {
              "name": "get_metrics_summary",
              "docstring": "Get summary of context loading metrics.",
              "line_range": [
                434,
                449
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_metrics",
              "docstring": "Save metrics to file for analysis.",
              "line_range": [
                451,
                456
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self._load_config"
        ],
        "_load_config": [
          "open",
          "config_path.exists",
          "json.load"
        ],
        "get_context_for_scenario": [
          "self._get_budget_for_scenario",
          "self._load_session_context",
          "ContextMode",
          "time.time",
          "self._load_focused_context",
          "self._load_minimal_context",
          "self._update_metrics",
          "self._load_full_context",
          "scenario_config.get"
        ],
        "_get_budget_for_scenario": [
          "scenario_config.get",
          "ContextBudget",
          "budget_config.get"
        ],
        "_load_full_context": [
          "open",
          "full_path.exists",
          "json.load",
          "logger.warning"
        ],
        "_load_focused_context": [
          "self._get_file_context",
          "self._load_source_with_filtering",
          "len",
          "self._extract_essential_parts",
          "json.dumps"
        ],
        "_load_session_context": [
          "self._load_source_with_filtering",
          "self._filter_for_current_session"
        ],
        "_load_minimal_context": [
          "self._extract_summary",
          "json.load",
          "source_path.exists",
          "open",
          "logger.warning"
        ],
        "_load_source_with_filtering": [
          "self._apply_section_filtering",
          "json.load",
          "source_path.exists",
          "open",
          "logger.warning"
        ],
        "_get_file_context": [
          "Path"
        ],
        "_extract_essential_parts": [
          "task.get",
          "isinstance"
        ],
        "_filter_for_current_session": [
          "data.items",
          "task.get",
          "current_session_path.exists",
          "current_session.get",
          "json.load",
          "open",
          "logger.warning",
          "idea.get"
        ],
        "_extract_summary": [
          "t.get",
          "isinstance",
          "len"
        ],
        "_apply_section_filtering": [
          "data.items"
        ],
        "_update_metrics": [
          "ContextMetrics",
          "context.get",
          "len"
        ],
        "get_metrics_summary": [
          "sum",
          "len"
        ],
        "save_metrics": [
          "open",
          "self.get_metrics_summary",
          "json.dump"
        ],
        "create_context_orchestrator": [
          "SmartContextOrchestrator"
        ],
        "get_optimized_context": [
          "ContextBudget",
          "create_context_orchestrator",
          "orchestrator.get_context_for_scenario"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "Union",
        "dataclass",
        "dataclasses",
        "enum",
        "json",
        "logging",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "1c1439c8-b8c7-4b6c-96ea-40424940b530"
    },
    {
      "module_id": "src.llmstruct.__init__",
      "path": "src/llmstruct/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "LLMClient",
        "llm_client"
      ],
      "hash": null,
      "artifact_id": "12ce46f8-1e26-4234-9fa0-6318bcc1e720"
    },
    {
      "module_id": "src.llmstruct.__main__",
      "path": "src/llmstruct/__main__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "llmstruct.cli",
        "main"
      ],
      "hash": null,
      "artifact_id": "0d9c841f-a733-43c3-894c-394a64dc3587"
    },
    {
      "module_id": "src.llmstruct.cli_utils",
      "path": "src/llmstruct/cli_utils.py",
      "category": "core",
      "module_doc": "CLI utility functions.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize utils with root directory.",
          "line_range": [
            24,
            26
          ],
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read file content with size limit.",
          "line_range": [
            28,
            50
          ],
          "parameters": [
            "self",
            "file_path",
            "max_size"
          ],
          "decorators": []
        },
        {
          "name": "write_file_content",
          "docstring": "Write content to file.",
          "line_range": [
            52,
            70
          ],
          "parameters": [
            "self",
            "file_path",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "get_directory_structure",
          "docstring": "Get directory structure using folder generator.",
          "line_range": [
            72,
            115
          ],
          "parameters": [
            "self",
            "path",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "validate_json",
          "docstring": "Validate JSON content.",
          "line_range": [
            117,
            123
          ],
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "format_json",
          "docstring": "Format data as JSON string.",
          "line_range": [
            125,
            131
          ],
          "parameters": [
            "self",
            "data",
            "indent"
          ],
          "decorators": []
        },
        {
          "name": "generate_unique_id",
          "docstring": "Generate unique ID for commands, queues, etc.",
          "line_range": [
            133,
            137
          ],
          "parameters": [
            "self",
            "prefix"
          ],
          "decorators": []
        },
        {
          "name": "safe_path_join",
          "docstring": "Safely join path parts, preventing directory traversal.",
          "line_range": [
            139,
            149
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "file_exists",
          "docstring": "Check if file exists.",
          "line_range": [
            151,
            157
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "dir_exists",
          "docstring": "Check if directory exists.",
          "line_range": [
            159,
            165
          ],
          "parameters": [
            "self",
            "dir_path"
          ],
          "decorators": []
        },
        {
          "name": "get_file_size",
          "docstring": "Get file size in bytes.",
          "line_range": [
            167,
            173
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_file",
          "docstring": "Create backup of file with timestamp.",
          "line_range": [
            175,
            191
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "cleanup_old_backups",
          "docstring": "Clean up old backup files, keeping only the most recent ones.",
          "line_range": [
            193,
            222
          ],
          "parameters": [
            "self",
            "file_path",
            "keep_count"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLIUtils",
          "docstring": "Utility functions for CLI operations.",
          "line_range": [
            21,
            222
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize utils with root directory.",
              "line_range": [
                24,
                26
              ],
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "read_file_content",
              "docstring": "Read file content with size limit.",
              "line_range": [
                28,
                50
              ],
              "parameters": [
                "self",
                "file_path",
                "max_size"
              ]
            },
            {
              "name": "write_file_content",
              "docstring": "Write content to file.",
              "line_range": [
                52,
                70
              ],
              "parameters": [
                "self",
                "file_path",
                "content"
              ]
            },
            {
              "name": "get_directory_structure",
              "docstring": "Get directory structure using folder generator.",
              "line_range": [
                72,
                115
              ],
              "parameters": [
                "self",
                "path",
                "gitignore_patterns",
                "include_patterns",
                "exclude_patterns",
                "exclude_dirs"
              ]
            },
            {
              "name": "validate_json",
              "docstring": "Validate JSON content.",
              "line_range": [
                117,
                123
              ],
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "format_json",
              "docstring": "Format data as JSON string.",
              "line_range": [
                125,
                131
              ],
              "parameters": [
                "self",
                "data",
                "indent"
              ]
            },
            {
              "name": "generate_unique_id",
              "docstring": "Generate unique ID for commands, queues, etc.",
              "line_range": [
                133,
                137
              ],
              "parameters": [
                "self",
                "prefix"
              ]
            },
            {
              "name": "safe_path_join",
              "docstring": "Safely join path parts, preventing directory traversal.",
              "line_range": [
                139,
                149
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "file_exists",
              "docstring": "Check if file exists.",
              "line_range": [
                151,
                157
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "dir_exists",
              "docstring": "Check if directory exists.",
              "line_range": [
                159,
                165
              ],
              "parameters": [
                "self",
                "dir_path"
              ]
            },
            {
              "name": "get_file_size",
              "docstring": "Get file size in bytes.",
              "line_range": [
                167,
                173
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "backup_file",
              "docstring": "Create backup of file with timestamp.",
              "line_range": [
                175,
                191
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "cleanup_old_backups",
              "docstring": "Clean up old backup files, keeping only the most recent ones.",
              "line_range": [
                193,
                222
              ],
              "parameters": [
                "self",
                "file_path",
                "keep_count"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "read_file_content": [
          "logging.error",
          "os.stat",
          "f.read",
          "open",
          "logging.warning"
        ],
        "write_file_content": [
          "logging.error",
          "Path",
          "logging.info",
          "open",
          "f.write"
        ],
        "get_directory_structure": [
          "get_folder_structure",
          "logging.error",
          "sorted",
          "os.listdir"
        ],
        "validate_json": [
          "str",
          "json.loads"
        ],
        "format_json": [
          "str",
          "logging.error",
          "json.dumps"
        ],
        "generate_unique_id": [
          "str",
          "int",
          "uuid.uuid4",
          "time.time"
        ],
        "safe_path_join": [
          "ValueError",
          "resolved_path.startswith"
        ],
        "file_exists": [
          "self.safe_path_join"
        ],
        "dir_exists": [
          "self.safe_path_join"
        ],
        "get_file_size": [
          "self.safe_path_join"
        ],
        "backup_file": [
          "int",
          "src.read",
          "logging.error",
          "dst.write",
          "time.time",
          "self.safe_path_join",
          "open"
        ],
        "cleanup_old_backups": [
          "filename.split",
          "int",
          "os.remove",
          "logging.error",
          "backups.append",
          "backups.sort",
          "os.listdir",
          "self.safe_path_join",
          "logging.info",
          "filename.startswith",
          "logging.warning"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "get_folder_structure",
        "json",
        "llmstruct.generators.json_generator",
        "logging",
        "os",
        "pathlib",
        "time",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "4b183043-6615-46cc-a6ef-368857885a17"
    },
    {
      "module_id": "src.llmstruct.copilot",
      "path": "src/llmstruct/copilot.py",
      "category": "core",
      "module_doc": "LLMStruct Copilot Integration Module\nProvides context-aware development assistance with hybrid copilot capabilities.",
      "functions": [
        {
          "name": "initialize_copilot",
          "docstring": "Initialize copilot context manager for the project.\n\nArgs:\n    project_root: Project root directory\n\nReturns:\n    Configured CopilotContextManager instance",
          "line_range": [
            649,
            659
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "trigger_copilot_event",
          "docstring": "Trigger a copilot event and get relevant context.\n\nArgs:\n    manager: CopilotContextManager instance\n    event_type: Type of event\n    file_path: Optional file path\n    **kwargs: Additional event metadata\n\nReturns:\n    Dict with event context",
          "line_range": [
            662,
            679
          ],
          "parameters": [
            "manager",
            "event_type",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "smart_suggest",
          "docstring": "Get smart suggestions based on query and context.\n\nArgs:\n    manager: CopilotContextManager instance\n    query: Query string\n    context: Context type (code, workflow, task, etc.)\n\nReturns:\n    List of suggestions",
          "line_range": [
            682,
            702
          ],
          "parameters": [
            "manager",
            "query",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "get_optimized_context_for_scenario",
          "docstring": "Get optimized context for specific scenario - standalone function.\n\nArgs:\n    project_root: Project root directory\n    scenario: Usage scenario (vscode_copilot, cli_direct, etc.)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
          "line_range": [
            705,
            728
          ],
          "parameters": [
            "project_root",
            "scenario",
            "file_path",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize the Copilot Context Manager.\n\nArgs:\n    project_root: Project root directory\n    config_path: Path to copilot_init.json",
          "line_range": [
            68,
            90
          ],
          "parameters": [
            "self",
            "project_root",
            "config_path"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load copilot configuration from JSON file.",
          "line_range": [
            92,
            104
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_initialize_layers",
          "docstring": "Initialize context layers from configuration.",
          "line_range": [
            106,
            116
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_context_layer",
          "docstring": "Load a specific context layer.\n\nArgs:\n    layer_name: Name of the layer to load\n    force: Force reload if already loaded\n\nReturns:\n    bool: True if successful",
          "line_range": [
            118,
            160
          ],
          "parameters": [
            "self",
            "layer_name",
            "force"
          ],
          "decorators": []
        },
        {
          "name": "unload_context_layer",
          "docstring": "Unload a context layer to free memory.\n\nArgs:\n    layer_name: Name of the layer to unload\n\nReturns:\n    bool: True if successful",
          "line_range": [
            162,
            180
          ],
          "parameters": [
            "self",
            "layer_name"
          ],
          "decorators": []
        },
        {
          "name": "get_optimized_context",
          "docstring": "Get optimized context using Smart Context Orchestrator.\n\nArgs:\n    scenario: Usage scenario (vscode_copilot, cli_direct, etc.)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
          "line_range": [
            182,
            225
          ],
          "parameters": [
            "self",
            "scenario",
            "file_path",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "_get_legacy_context",
          "docstring": "Fallback to legacy context loading.",
          "line_range": [
            227,
            235
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_for_vscode",
          "docstring": "Get optimized context specifically for VS Code Copilot integration.\n\nArgs:\n    file_path: Optional file path for focused context\n    \nReturns:\n    Token-optimized context for VS Code",
          "line_range": [
            237,
            251
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "get_context_for_event",
          "docstring": "Get relevant context for a copilot event using Smart Context Orchestrator.\n\nArgs:\n    event: The copilot event\n\nReturns:\n    Dict containing relevant context",
          "line_range": [
            252,
            296
          ],
          "parameters": [
            "self",
            "event"
          ],
          "decorators": []
        },
        {
          "name": "_get_legacy_event_context",
          "docstring": "Legacy event context loading as fallback.",
          "line_range": [
            298,
            350
          ],
          "parameters": [
            "self",
            "event"
          ],
          "decorators": []
        },
        {
          "name": "suggest_completion",
          "docstring": "Generate context-aware code completions.\n\nArgs:\n    current_code: Current code content\n    file_path: Path to the current file\n    cursor_position: Cursor position in the code\n\nReturns:\n    List of completion suggestions",
          "line_range": [
            352,
            397
          ],
          "parameters": [
            "self",
            "current_code",
            "file_path",
            "cursor_position"
          ],
          "decorators": []
        },
        {
          "name": "validate_change",
          "docstring": "Validate a code change against safety rules.\n\nArgs:\n    file_path: Path to the changed file\n    change_type: Type of change (create, edit, delete)\n\nReturns:\n    Dict with validation results",
          "line_range": [
            399,
            445
          ],
          "parameters": [
            "self",
            "file_path",
            "change_type"
          ],
          "decorators": []
        },
        {
          "name": "_matches_scope",
          "docstring": "Check if file matches scope pattern.",
          "line_range": [
            447,
            452
          ],
          "parameters": [
            "self",
            "file_path",
            "scope"
          ],
          "decorators": []
        },
        {
          "name": "_matches_trigger",
          "docstring": "Check if change type matches trigger.",
          "line_range": [
            454,
            463
          ],
          "parameters": [
            "self",
            "change_type",
            "trigger"
          ],
          "decorators": []
        },
        {
          "name": "_validate_json_schema",
          "docstring": "Validate JSON file against schema.",
          "line_range": [
            465,
            480
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_check_circular_dependencies",
          "docstring": "Check for circular dependencies.",
          "line_range": [
            482,
            507
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_validate_task_references",
          "docstring": "Validate task references in tasks.json.",
          "line_range": [
            509,
            536
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "get_workflow_suggestions",
          "docstring": "Get workflow suggestions based on current command context.\n\nArgs:\n    command: Current command or operation\n\nReturns:\n    List of workflow suggestions",
          "line_range": [
            538,
            568
          ],
          "parameters": [
            "self",
            "command"
          ],
          "decorators": []
        },
        {
          "name": "refresh_all_contexts",
          "docstring": "Refresh all loaded context layers.\n\nReturns:\n    bool: True if successful",
          "line_range": [
            570,
            584
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_status",
          "docstring": "Get status of all context layers.\n\nReturns:\n    Dict with context status information",
          "line_range": [
            586,
            607
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "export_context",
          "docstring": "Export context in specified format.\n\nArgs:\n    layers: List of layers to export (None for all loaded)\n    format: Export format (json, yaml, etc.)\n\nReturns:\n    Exported context as string",
          "line_range": [
            609,
            631
          ],
          "parameters": [
            "self",
            "layers",
            "format"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Clean up resources.",
          "line_range": [
            633,
            643
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ContextLayer",
          "docstring": "Context layer priorities for copilot integration.",
          "line_range": [
            22,
            28
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "AttachMode",
          "docstring": "Context attachment modes.",
          "line_range": [
            31,
            37
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextLayerConfig",
          "docstring": "Configuration for a context layer.",
          "line_range": [
            41,
            49
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "CopilotEvent",
          "docstring": "Represents a copilot event for context triggering.",
          "line_range": [
            53,
            59
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "CopilotContextManager",
          "docstring": "Manages context layers and integration with GitHub Copilot.\nProvides intelligent context loading and workflow assistance.",
          "line_range": [
            62,
            643
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize the Copilot Context Manager.\n\nArgs:\n    project_root: Project root directory\n    config_path: Path to copilot_init.json",
              "line_range": [
                68,
                90
              ],
              "parameters": [
                "self",
                "project_root",
                "config_path"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load copilot configuration from JSON file.",
              "line_range": [
                92,
                104
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_initialize_layers",
              "docstring": "Initialize context layers from configuration.",
              "line_range": [
                106,
                116
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_context_layer",
              "docstring": "Load a specific context layer.\n\nArgs:\n    layer_name: Name of the layer to load\n    force: Force reload if already loaded\n\nReturns:\n    bool: True if successful",
              "line_range": [
                118,
                160
              ],
              "parameters": [
                "self",
                "layer_name",
                "force"
              ]
            },
            {
              "name": "unload_context_layer",
              "docstring": "Unload a context layer to free memory.\n\nArgs:\n    layer_name: Name of the layer to unload\n\nReturns:\n    bool: True if successful",
              "line_range": [
                162,
                180
              ],
              "parameters": [
                "self",
                "layer_name"
              ]
            },
            {
              "name": "get_optimized_context",
              "docstring": "Get optimized context using Smart Context Orchestrator.\n\nArgs:\n    scenario: Usage scenario (vscode_copilot, cli_direct, etc.)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
              "line_range": [
                182,
                225
              ],
              "parameters": [
                "self",
                "scenario",
                "file_path",
                "max_tokens"
              ]
            },
            {
              "name": "_get_legacy_context",
              "docstring": "Fallback to legacy context loading.",
              "line_range": [
                227,
                235
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_for_vscode",
              "docstring": "Get optimized context specifically for VS Code Copilot integration.\n\nArgs:\n    file_path: Optional file path for focused context\n    \nReturns:\n    Token-optimized context for VS Code",
              "line_range": [
                237,
                251
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "get_context_for_event",
              "docstring": "Get relevant context for a copilot event using Smart Context Orchestrator.\n\nArgs:\n    event: The copilot event\n\nReturns:\n    Dict containing relevant context",
              "line_range": [
                252,
                296
              ],
              "parameters": [
                "self",
                "event"
              ]
            },
            {
              "name": "_get_legacy_event_context",
              "docstring": "Legacy event context loading as fallback.",
              "line_range": [
                298,
                350
              ],
              "parameters": [
                "self",
                "event"
              ]
            },
            {
              "name": "suggest_completion",
              "docstring": "Generate context-aware code completions.\n\nArgs:\n    current_code: Current code content\n    file_path: Path to the current file\n    cursor_position: Cursor position in the code\n\nReturns:\n    List of completion suggestions",
              "line_range": [
                352,
                397
              ],
              "parameters": [
                "self",
                "current_code",
                "file_path",
                "cursor_position"
              ]
            },
            {
              "name": "validate_change",
              "docstring": "Validate a code change against safety rules.\n\nArgs:\n    file_path: Path to the changed file\n    change_type: Type of change (create, edit, delete)\n\nReturns:\n    Dict with validation results",
              "line_range": [
                399,
                445
              ],
              "parameters": [
                "self",
                "file_path",
                "change_type"
              ]
            },
            {
              "name": "_matches_scope",
              "docstring": "Check if file matches scope pattern.",
              "line_range": [
                447,
                452
              ],
              "parameters": [
                "self",
                "file_path",
                "scope"
              ]
            },
            {
              "name": "_matches_trigger",
              "docstring": "Check if change type matches trigger.",
              "line_range": [
                454,
                463
              ],
              "parameters": [
                "self",
                "change_type",
                "trigger"
              ]
            },
            {
              "name": "_validate_json_schema",
              "docstring": "Validate JSON file against schema.",
              "line_range": [
                465,
                480
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_check_circular_dependencies",
              "docstring": "Check for circular dependencies.",
              "line_range": [
                482,
                507
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_validate_task_references",
              "docstring": "Validate task references in tasks.json.",
              "line_range": [
                509,
                536
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "get_workflow_suggestions",
              "docstring": "Get workflow suggestions based on current command context.\n\nArgs:\n    command: Current command or operation\n\nReturns:\n    List of workflow suggestions",
              "line_range": [
                538,
                568
              ],
              "parameters": [
                "self",
                "command"
              ]
            },
            {
              "name": "refresh_all_contexts",
              "docstring": "Refresh all loaded context layers.\n\nReturns:\n    bool: True if successful",
              "line_range": [
                570,
                584
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_status",
              "docstring": "Get status of all context layers.\n\nReturns:\n    Dict with context status information",
              "line_range": [
                586,
                607
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "export_context",
              "docstring": "Export context in specified format.\n\nArgs:\n    layers: List of layers to export (None for all loaded)\n    format: Export format (json, yaml, etc.)\n\nReturns:\n    Exported context as string",
              "line_range": [
                609,
                631
              ],
              "parameters": [
                "self",
                "layers",
                "format"
              ]
            },
            {
              "name": "close",
              "docstring": "Clean up resources.",
              "line_range": [
                633,
                643
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "os.getcwd",
          "JSONCache",
          "Path",
          "self._load_config",
          "create_context_orchestrator",
          "self._initialize_layers",
          "str"
        ],
        "_load_config": [
          "Path",
          "logger.info",
          "logger.error",
          "json.load",
          "open",
          "logger.warning"
        ],
        "_initialize_layers": [
          "layers_config.items",
          "layer_config.get",
          "ContextLayerConfig"
        ],
        "load_context_layer": [
          "time.time",
          "logger.info",
          "logger.error",
          "logger.debug",
          "json.load",
          "source_path.exists",
          "open",
          "logger.warning"
        ],
        "unload_context_layer": [
          "logger.info"
        ],
        "get_optimized_context": [
          "logger.error",
          "scenario_mapping.get",
          "self._get_legacy_context"
        ],
        "_get_legacy_context": [
          "self.load_context_layer"
        ],
        "get_context_for_vscode": [
          "self.get_optimized_context"
        ],
        "get_context_for_event": [
          "logger.error",
          "scenario_mapping.get",
          "self.get_optimized_context",
          "self._get_legacy_event_context"
        ],
        "_get_legacy_event_context": [
          "file_triggers.get",
          "self.load_context_layer",
          "triggers.get",
          "code_triggers.get",
          "logger.error",
          "workflow_triggers.get",
          "source_path.exists",
          "json.load",
          "open"
        ],
        "suggest_completion": [
          "self.load_context_layer",
          "Path",
          "struct_context.get",
          "current_module.get",
          "module.get",
          "str",
          "suggestions.append",
          "func.get"
        ],
        "validate_change": [
          "len",
          "self._matches_scope",
          "safety_features.get",
          "rule.get",
          "self._check_circular_dependencies",
          "self._validate_task_references",
          "result.get",
          "self._validate_json_schema",
          "self._matches_trigger"
        ],
        "_matches_scope": [
          "str",
          "fnmatch",
          "Path"
        ],
        "_matches_trigger": [
          "trigger_map.get"
        ],
        "_validate_json_schema": [
          "open",
          "file_path.endswith",
          "json.load"
        ],
        "_check_circular_dependencies": [
          "len",
          "self.load_context_layer",
          "Path",
          "struct_data.get",
          "module.get",
          "str"
        ],
        "_validate_task_references": [
          "tasks_data.get",
          "task.get",
          "file_path.endswith",
          "set",
          "json.load",
          "open",
          "task_ids.add"
        ],
        "get_workflow_suggestions": [
          "command.lower",
          "self.load_context_layer",
          "workflow.get",
          "workflows.items",
          "suggestions.append",
          "suggestions.extend"
        ],
        "refresh_all_contexts": [
          "self.load_context_layer",
          "list",
          "logger.info"
        ],
        "get_context_status": [
          "list"
        ],
        "export_context": [
          "str",
          "list",
          "json.dumps"
        ],
        "close": [
          "hasattr",
          "logger.info"
        ],
        "initialize_copilot": [
          "CopilotContextManager"
        ],
        "trigger_copilot_event": [
          "manager.get_context_for_event",
          "CopilotEvent"
        ],
        "smart_suggest": [
          "manager.get_workflow_suggestions"
        ],
        "get_optimized_context_for_scenario": [
          "manager.close",
          "initialize_copilot",
          "locals",
          "manager.get_optimized_context"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "SmartContextOrchestrator",
        "Union",
        "create_context_orchestrator",
        "dataclass",
        "dataclasses",
        "enum",
        "fnmatch",
        "json",
        "llmstruct.cache",
        "llmstruct.context_orchestrator",
        "logging",
        "os",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "2866bdf3-6007-4f72-b36d-874df517da13"
    },
    {
      "module_id": "src.llmstruct.gh_view",
      "path": "src/llmstruct/gh_view.py",
      "category": "core",
      "module_doc": "GitHub visualization/graph feature (gh-view-v1)\nExport consolidated tasks/ideas from JSON files to GitHub Project cards",
      "functions": [
        {
          "name": "main",
          "docstring": "Main entry point for GitHub Projects export",
          "line_range": [
            177,
            208
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize exporter with configuration",
          "line_range": [
            19,
            25
          ],
          "parameters": [
            "self",
            "config_path"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load configuration from TOML file",
          "line_range": [
            27,
            35
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_mapping",
          "docstring": "Load existing ID mapping between local and GitHub",
          "line_range": [
            37,
            45
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_mapping",
          "docstring": "Save ID mapping to file",
          "line_range": [
            47,
            53
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_run_gh_command",
          "docstring": "Run GitHub CLI command and return success status and output",
          "line_range": [
            55,
            68
          ],
          "parameters": [
            "self",
            "command"
          ],
          "decorators": []
        },
        {
          "name": "load_official_data",
          "docstring": "Load tasks and ideas from official JSON files",
          "line_range": [
            70,
            98
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "format_task_for_github",
          "docstring": "Format task data for GitHub Project card",
          "line_range": [
            100,
            137
          ],
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "format_idea_for_github",
          "docstring": "Format idea data for GitHub Project card",
          "line_range": [
            139,
            174
          ],
          "parameters": [
            "self",
            "idea"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubProjectsExporter",
          "docstring": "Export tasks and ideas to GitHub Projects as cards",
          "line_range": [
            16,
            174
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize exporter with configuration",
              "line_range": [
                19,
                25
              ],
              "parameters": [
                "self",
                "config_path"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load configuration from TOML file",
              "line_range": [
                27,
                35
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_mapping",
              "docstring": "Load existing ID mapping between local and GitHub",
              "line_range": [
                37,
                45
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_mapping",
              "docstring": "Save ID mapping to file",
              "line_range": [
                47,
                53
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_run_gh_command",
              "docstring": "Run GitHub CLI command and return success status and output",
              "line_range": [
                55,
                68
              ],
              "parameters": [
                "self",
                "command"
              ]
            },
            {
              "name": "load_official_data",
              "docstring": "Load tasks and ideas from official JSON files",
              "line_range": [
                70,
                98
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "format_task_for_github",
              "docstring": "Format task data for GitHub Project card",
              "line_range": [
                100,
                137
              ],
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "format_idea_for_github",
              "docstring": "Format idea data for GitHub Project card",
              "line_range": [
                139,
                174
              ],
              "parameters": [
                "self",
                "idea"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self._load_config",
          "self._load_mapping"
        ],
        "_load_config": [
          "open",
          "config.get",
          "toml.load",
          "print"
        ],
        "_load_mapping": [
          "open",
          "json.load"
        ],
        "_save_mapping": [
          "open",
          "print",
          "json.dump"
        ],
        "_run_gh_command": [
          "subprocess.run"
        ],
        "load_official_data": [
          "tasks_data.get",
          "len",
          "tasks_file.exists",
          "ideas_file.exists",
          "json.load",
          "open",
          "print",
          "ideas_data.get"
        ],
        "format_task_for_github": [
          "task.get",
          "status_map.get",
          "body_parts.append"
        ],
        "format_idea_for_github": [
          "status_map.get",
          "idea.get",
          "body_parts.append"
        ],
        "main": [
          "len",
          "sys.exit",
          "exporter.format_task_for_github",
          "exporter.load_official_data",
          "exporter.format_idea_for_github",
          "GitHubProjectsExporter",
          "print"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "datetime",
        "json",
        "pathlib",
        "subprocess",
        "sys",
        "toml",
        "typing"
      ],
      "hash": null,
      "artifact_id": "67816857-c813-4f3d-a205-2547d2a5401c"
    },
    {
      "module_id": "src.llmstruct.llm_client",
      "path": "src/llmstruct/llm_client.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize LLMClient with optional Ollama host.",
          "line_range": [
            28,
            36
          ],
          "parameters": [
            "self",
            "ollama_host"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt, context, and optional model.",
          "line_range": [
            38,
            86
          ],
          "parameters": [
            "self",
            "prompt",
            "context_path",
            "mode",
            "model",
            "artifact_ids"
          ],
          "decorators": []
        },
        {
          "name": "_query_grok",
          "docstring": "Query Grok API.",
          "line_range": [
            88,
            115
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_anthropic",
          "docstring": "Query Anthropic API.",
          "line_range": [
            117,
            141
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_ollama",
          "docstring": "Query Ollama API with specified model.",
          "line_range": [
            143,
            156
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "_query_hybrid",
          "docstring": "Query multiple LLMs and combine results.",
          "line_range": [
            158,
            172
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMClient",
          "docstring": "",
          "line_range": [
            27,
            172
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize LLMClient with optional Ollama host.",
              "line_range": [
                28,
                36
              ],
              "parameters": [
                "self",
                "ollama_host"
              ]
            },
            {
              "name": "query",
              "docstring": "Query LLMs with prompt, context, and optional model.",
              "line_range": [
                38,
                86
              ],
              "parameters": [
                "self",
                "prompt",
                "context_path",
                "mode",
                "model",
                "artifact_ids"
              ]
            },
            {
              "name": "_query_grok",
              "docstring": "Query Grok API.",
              "line_range": [
                88,
                115
              ],
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_anthropic",
              "docstring": "Query Anthropic API.",
              "line_range": [
                117,
                141
              ],
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_ollama",
              "docstring": "Query Ollama API with specified model.",
              "line_range": [
                143,
                156
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            },
            {
              "name": "_query_hybrid",
              "docstring": "Query multiple LLMs and combine results.",
              "line_range": [
                158,
                172
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "os.getenv",
          "int",
          "logging.info"
        ],
        "query": [
          "self._query_ollama",
          "logging.error",
          "Path",
          "logging.warning",
          "asyncio.sleep",
          "logging.info",
          "json.load",
          "range",
          "self._query_grok",
          "self._query_anthropic",
          "self._query_hybrid",
          "json.dumps"
        ],
        "_query_grok": [
          "logging.error",
          "aiohttp.ClientSession",
          "result.get",
          "logging.info",
          "session.post",
          "response.json"
        ],
        "_query_anthropic": [
          "logging.error",
          "aiohttp.ClientSession",
          "result.get",
          "logging.info",
          "session.post",
          "response.json"
        ],
        "_query_ollama": [
          "aiohttp.ClientSession",
          "logging.error",
          "result.get",
          "logging.info",
          "session.post",
          "response.json",
          "logging.debug"
        ],
        "_query_hybrid": [
          "len",
          "self._query_ollama",
          "isinstance",
          "logging.info",
          "self._query_grok",
          "asyncio.gather",
          "self._query_anthropic"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "aiohttp",
        "asyncio",
        "dotenv",
        "json",
        "load_dotenv",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "65502382-c005-4575-a8bb-c5e5a9853ebb"
    },
    {
      "module_id": "src.llmstruct.cache",
      "path": "src/llmstruct/cache.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize SQLite cache for JSON files.",
          "line_range": [
            21,
            25
          ],
          "parameters": [
            "self",
            "db_path"
          ],
          "decorators": []
        },
        {
          "name": "create_tables",
          "docstring": "Create tables for metadata and file paths.",
          "line_range": [
            27,
            49
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cache_json",
          "docstring": "Cache JSON metadata and store full file path.",
          "line_range": [
            51,
            90
          ],
          "parameters": [
            "self",
            "json_path",
            "artifact_id",
            "summary",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "get_metadata",
          "docstring": "Retrieve metadata by artifact_id.",
          "line_range": [
            92,
            108
          ],
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "get_full_json",
          "docstring": "Load full JSON by artifact_id.",
          "line_range": [
            110,
            126
          ],
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Close database connection.",
          "line_range": [
            128,
            130
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JSONCache",
          "docstring": "",
          "line_range": [
            20,
            130
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize SQLite cache for JSON files.",
              "line_range": [
                21,
                25
              ],
              "parameters": [
                "self",
                "db_path"
              ]
            },
            {
              "name": "create_tables",
              "docstring": "Create tables for metadata and file paths.",
              "line_range": [
                27,
                49
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cache_json",
              "docstring": "Cache JSON metadata and store full file path.",
              "line_range": [
                51,
                90
              ],
              "parameters": [
                "self",
                "json_path",
                "artifact_id",
                "summary",
                "tags"
              ]
            },
            {
              "name": "get_metadata",
              "docstring": "Retrieve metadata by artifact_id.",
              "line_range": [
                92,
                108
              ],
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "get_full_json",
              "docstring": "Load full JSON by artifact_id.",
              "line_range": [
                110,
                126
              ],
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "close",
              "docstring": "Close database connection.",
              "line_range": [
                128,
                130
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.create_tables",
          "sqlite3.connect"
        ],
        "create_tables": [],
        "cache_json": [
          "str",
          "logging.error",
          "Path",
          "f.read",
          "hashlib.sha256",
          "json.dumps",
          "logging.info",
          "open",
          "content.encode",
          "json_file.exists"
        ],
        "get_metadata": [
          "json.loads",
          "cursor.fetchone"
        ],
        "get_full_json": [
          "open",
          "json.load",
          "cursor.fetchone",
          "logging.error"
        ],
        "close": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "hashlib",
        "json",
        "logging",
        "pathlib",
        "sqlite3",
        "typing"
      ],
      "hash": null,
      "artifact_id": "37a6f9cb-f00e-49de-9163-54272badf9ec"
    },
    {
      "module_id": "src.llmstruct.self_run",
      "path": "src/llmstruct/self_run.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_struct",
          "docstring": "Filter struct.json or init.json based on prompt keywords. Supports dict or list as root.",
          "line_range": [
            20,
            71
          ],
          "parameters": [
            "struct",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "Attach filtered JSON to LLM prompt, using cache if available.",
          "line_range": [
            74,
            114
          ],
          "parameters": [
            "context_path",
            "prompt",
            "cache"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_struct": [
          "any",
          "item.get",
          "module.get",
          "filter_json",
          "isinstance",
          "struct.get",
          "str",
          "prompt.lower"
        ],
        "attach_to_llm_request": [
          "context_file.exists",
          "select_json",
          "logging.error",
          "Path",
          "cache.get_metadata",
          "filter_struct",
          "filter_json",
          "logging.info",
          "cache.cache_json",
          "cache.get_full_json",
          "prompt.lower",
          "json.dumps"
        ]
      },
      "dependencies": [
        "Any",
        "JSONCache",
        "Optional",
        "Path",
        "cache",
        "filter_json",
        "json",
        "json_selector",
        "logging",
        "pathlib",
        "select_json",
        "typing"
      ],
      "hash": null,
      "artifact_id": "874ff26c-7992-4a82-9ba5-35cf44729f13"
    },
    {
      "module_id": "src.llmstruct.json_selector",
      "path": "src/llmstruct/json_selector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_json",
          "docstring": "Filter JSON data by key-value pair and select fields.",
          "line_range": [
            20,
            46
          ],
          "parameters": [
            "data",
            "filter_key",
            "filter_value",
            "fields"
          ],
          "decorators": []
        },
        {
          "name": "select_json",
          "docstring": "Load and filter JSON file, optionally parsing partially.",
          "line_range": [
            49,
            116
          ],
          "parameters": [
            "json_path",
            "filter_key",
            "filter_value",
            "fields",
            "partial"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_json": [
          "data.get",
          "isinstance",
          "filtered.append",
          "item.get"
        ],
        "select_json": [
          "ijson.parse",
          "current_item.get",
          "logging.error",
          "Path",
          "path.append",
          "filter_json",
          "prefix.startswith",
          "json.load",
          "open",
          "f.seek",
          "filtered.append",
          "json_file.exists"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "ijson",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "91ce3ae6-02b0-4f3e-9d73-247aad2ab8c6"
    },
    {
      "module_id": "src.llmstruct.cli",
      "path": "src/llmstruct/cli.py",
      "category": "core",
      "module_doc": "LLMStruct CLI - Main entry point for the command-line interface.",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": [
            43,
            57
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from llmstruct.toml or return empty dict.",
          "line_range": [
            60,
            69
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": [
            72,
            81
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default ./tmp) and return the path.",
          "line_range": [
            84,
            104
          ],
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": [
            107,
            114
          ],
          "parameters": [
            "response"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with modular structure if available, fallback to legacy.",
          "line_range": [
            117,
            127
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive_modular",
          "docstring": "Run interactive CLI with modular structure.",
          "line_range": [
            130,
            144
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive_legacy",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": [
            147,
            503
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "process_cli_queue_enhanced",
          "docstring": "Enhanced queue processing with workflow support, performance tracking, and safety validation.",
          "line_range": [
            506,
            705
          ],
          "parameters": [
            "root_dir",
            "context_path",
            "args",
            "cache",
            "client"
          ],
          "decorators": []
        },
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": [
            708,
            759
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": [
            762,
            818
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": [
            821,
            823
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": [
            826,
            828
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": [
            831,
            833
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "copilot",
          "docstring": "Copilot integration and context management.",
          "line_range": [
            836,
            954
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "audit",
          "docstring": "Handle audit command for recovering lost ideas/tasks.",
          "line_range": [
            957,
            980
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": [
            983,
            1198
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "line.startswith",
          "gitignore_path.open",
          "logging.error",
          "Path",
          "line.strip",
          "gitignore_path.exists"
        ],
        "load_config": [
          "logging.error",
          "Path",
          "config_path.exists",
          "toml.load",
          "config_path.open"
        ],
        "read_file_content": [
          "logging.error",
          "Path",
          "path.open",
          "f.read",
          "path.is_file"
        ],
        "write_to_file": [
          "base_path.mkdir",
          "re.sub",
          "logging.error",
          "Path",
          "logging.info",
          "str",
          "f.write",
          "file_path.exists",
          "file_path.open",
          "logging.warning"
        ],
        "parse_files_from_response": [
          "files.append",
          "filename.strip",
          "content.strip",
          "re.findall"
        ],
        "interactive": [
          "interactive_modular",
          "interactive_legacy",
          "logging.warning"
        ],
        "interactive_modular": [
          "hasattr",
          "logging.info",
          "cli_core.run_interactive_mode",
          "create_cli_core"
        ],
        "interactive_legacy": [
          "read_file_content",
          "JSONCache",
          "logging.error",
          "load_gitignore",
          "workflow.get",
          "cache.clear",
          "os.listdir",
          "cache.close",
          "re.match",
          "isinstance",
          "m.group",
          "json.dumps",
          "LLMClient",
          "sorted",
          "events_data.append",
          "args_str.strip",
          "os.stat",
          "struct_data.get",
          "attach_to_llm_request",
          "time.ctime",
          "print",
          "int",
          "len",
          "time.time",
          "parse",
          "get_folder_structure",
          "json.dump",
          "logging.warning",
          "process_cli_queue_enhanced",
          "os.makedirs",
          "user_input.startswith",
          "write_to_file",
          "cache.list_keys",
          "Path",
          "input",
          "cache.get_stats",
          "client.query",
          "user_input.lower",
          "json.load",
          "open",
          "subprocess.run"
        ],
        "process_cli_queue_enhanced": [
          "len",
          "item.get",
          "write_to_file",
          "read_file_content",
          "enumerate",
          "logging.error",
          "workflow.get",
          "load_gitignore",
          "time.time",
          "options.get",
          "get_folder_structure",
          "client.query",
          "isinstance",
          "logging.info",
          "json.load",
          "attach_to_llm_request",
          "open",
          "print"
        ],
        "parse": [
          "config.get",
          "generate_json",
          "JSONCache",
          "logging.error",
          "load_gitignore",
          "Path",
          "cache.close",
          "parsing_config.get",
          "load_config",
          "logging.info",
          "cache.cache_json",
          "json.dump",
          "cli_config.get",
          "logging.warning"
        ],
        "query": [
          "LLMClient",
          "client.query_with_context",
          "JSONCache",
          "logging.error",
          "Path",
          "hasattr",
          "orchestrator.get_context_for_scenario",
          "create_context_orchestrator",
          "client.query",
          "cache.close",
          "logging.info",
          "json.dump",
          "logging.warning"
        ],
        "context": [
          "logging.warning"
        ],
        "dogfood": [
          "logging.warning"
        ],
        "review": [
          "logging.warning"
        ],
        "copilot": [
          "logging.error",
          "template_path.exists",
          "smart_suggest",
          "hasattr",
          "initialize_copilot",
          "manager.refresh_all_contexts",
          "getattr",
          "layers.split",
          "print",
          "open",
          "manager.get_context_status",
          "manager.validate_change",
          "manager.close",
          "config_path.exists",
          "manager.export_context",
          "logging.info",
          "shutil.copy",
          "f.write",
          "manager.unload_context_layer",
          "Path",
          "manager.load_context_layer",
          "enumerate"
        ],
        "audit": [
          "os.getcwd",
          "CLIConfig",
          "logging.error",
          "CLIUtils",
          "CommandProcessor",
          "processor.cmd_audit"
        ],
        "main": [
          "interactive",
          "query_parser.add_argument",
          "review",
          "dogfood_parser.add_argument",
          "dogfood",
          "asyncio.run",
          "context_parser.add_argument",
          "parser.add_subparsers",
          "subparsers.add_parser",
          "interactive_parser.add_argument",
          "review_parser.add_argument",
          "parse_parser.add_argument",
          "audit",
          "audit_parser.add_argument",
          "parser.parse_args",
          "parse",
          "copilot_parser.add_argument",
          "context",
          "argparse.ArgumentParser",
          "copilot",
          "query"
        ]
      },
      "dependencies": [
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "cli_commands",
        "cli_config",
        "cli_core",
        "cli_utils",
        "context_orchestrator",
        "copilot",
        "create_cli_core",
        "create_context_orchestrator",
        "generate_json",
        "get_folder_structure",
        "initialize_copilot",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "logging",
        "os",
        "pathlib",
        "re",
        "shutil",
        "smart_suggest",
        "subprocess",
        "sys",
        "time",
        "toml",
        "typing"
      ],
      "hash": null,
      "artifact_id": "dc90bf7d-1c19-400a-ae6e-613d146f4e02"
    },
    {
      "module_id": "src.llmstruct.cli_core",
      "path": "src/llmstruct/cli_core.py",
      "category": "core",
      "module_doc": "Core CLI functionality and main loop.",
      "functions": [
        {
          "name": "create_cli_core",
          "docstring": "Factory function to create CLI core instance.",
          "line_range": [
            110,
            112
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize CLI core with root directory.",
          "line_range": [
            28,
            35
          ],
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "setup_cache",
          "docstring": "Initialize cache if enabled in config.",
          "line_range": [
            37,
            53
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "setup_copilot",
          "docstring": "Initialize Copilot integration if enabled.",
          "line_range": [
            55,
            63
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_interactive_mode",
          "docstring": "Run the interactive CLI mode.",
          "line_range": [
            65,
            97
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cleanup",
          "docstring": "Clean up resources.",
          "line_range": [
            99,
            107
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLICore",
          "docstring": "Core CLI class handling main loop and coordination.",
          "line_range": [
            25,
            107
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize CLI core with root directory.",
              "line_range": [
                28,
                35
              ],
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "setup_cache",
              "docstring": "Initialize cache if enabled in config.",
              "line_range": [
                37,
                53
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "setup_copilot",
              "docstring": "Initialize Copilot integration if enabled.",
              "line_range": [
                55,
                63
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run_interactive_mode",
              "docstring": "Run the interactive CLI mode.",
              "line_range": [
                65,
                97
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cleanup",
              "docstring": "Clean up resources.",
              "line_range": [
                99,
                107
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "CLIConfig",
          "CLIUtils",
          "CommandProcessor"
        ],
        "setup_cache": [
          "cache_config.get",
          "JSONCache",
          "Path",
          "logging.info",
          "cache_path.mkdir",
          "str",
          "logging.warning"
        ],
        "setup_copilot": [
          "initialize_copilot",
          "logging.info",
          "copilot_config.get",
          "logging.warning"
        ],
        "run_interactive_mode": [
          "user_input.startswith",
          "self.setup_cache",
          "self.setup_copilot",
          "self.cleanup",
          "logging.error",
          "input",
          "user_input.lower",
          "print"
        ],
        "cleanup": [
          "logging.info"
        ],
        "create_cli_core": [
          "CLICore"
        ]
      },
      "dependencies": [
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "CopilotContextManager",
        "JSONCache",
        "Optional",
        "Path",
        "cli_commands",
        "cli_config",
        "cli_utils",
        "copilot",
        "initialize_copilot",
        "llmstruct.cache",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "4897eaa6-8248-495a-8321-2b26ded76670"
    },
    {
      "module_id": "src.llmstruct.workspace",
      "path": "src/llmstruct/workspace.py",
      "category": "core",
      "module_doc": "Workspace State & Mode Management System\nEnhanced AI-Human Collaboration with Context Boundaries",
      "functions": [
        {
          "name": "create_workspace_manager",
          "docstring": "Factory function to create workspace manager",
          "line_range": [
            461,
            463
          ],
          "parameters": [
            "workspace_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            28,
            36
          ],
          "parameters": [
            "self",
            "workspace_dir"
          ],
          "decorators": []
        },
        {
          "name": "_load_or_create_state",
          "docstring": "Load existing workspace state or create default",
          "line_range": [
            38,
            75
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_permission_templates",
          "docstring": "Load permission templates for different modes",
          "line_range": [
            77,
            128
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "set_mode",
          "docstring": "Set workspace mode(s) with smart combination logic.\n\nArgs:\n    modes: Single mode string \"[code]\" or list of modes [\"code\", \"debug\"]\n    session_id: Optional session identifier\n    \nReturns:\n    Dict with mode change result and applied permissions",
          "line_range": [
            130,
            176
          ],
          "parameters": [
            "self",
            "modes",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "_parse_modes_from_string",
          "docstring": "Parse modes from string like '[code][debug]' to ['code', 'debug']",
          "line_range": [
            178,
            182
          ],
          "parameters": [
            "self",
            "mode_string"
          ],
          "decorators": []
        },
        {
          "name": "_combine_mode_permissions",
          "docstring": "Smart combination of mode permissions (Decision: C - Smart Combination)",
          "line_range": [
            184,
            216
          ],
          "parameters": [
            "self",
            "modes"
          ],
          "decorators": []
        },
        {
          "name": "_get_mode_combination_name",
          "docstring": "Get descriptive name for mode combination",
          "line_range": [
            218,
            232
          ],
          "parameters": [
            "self",
            "modes"
          ],
          "decorators": []
        },
        {
          "name": "get_current_state",
          "docstring": "Get current workspace state",
          "line_range": [
            234,
            236
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "check_permission",
          "docstring": "Check if operation is permitted under current mode.\n\nArgs:\n    operation: Operation type (e.g., \"write_file\", \"run_command\")\n    target: Optional target (file path, command, etc.)\n    \nReturns:\n    Dict with permission result and reasoning",
          "line_range": [
            238,
            302
          ],
          "parameters": [
            "self",
            "operation",
            "target"
          ],
          "decorators": []
        },
        {
          "name": "_get_required_capability",
          "docstring": "Map operations to required capabilities",
          "line_range": [
            304,
            320
          ],
          "parameters": [
            "self",
            "operation"
          ],
          "decorators": []
        },
        {
          "name": "_is_restricted_target",
          "docstring": "Check if target matches any file restrictions",
          "line_range": [
            322,
            334
          ],
          "parameters": [
            "self",
            "target"
          ],
          "decorators": []
        },
        {
          "name": "set_emergency_override",
          "docstring": "Grant emergency override (Hybrid B+C: Escalation + Time-boxing)\n\nArgs:\n    level: Override level (1=extend permissions, 2=filesystem, 3=system)\n    reason: Reason for override\n    duration_minutes: Override duration",
          "line_range": [
            336,
            365
          ],
          "parameters": [
            "self",
            "level",
            "reason",
            "duration_minutes"
          ],
          "decorators": []
        },
        {
          "name": "_check_emergency_override",
          "docstring": "Check if emergency override is active and not expired",
          "line_range": [
            367,
            381
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_strict_mode",
          "docstring": "Integration with existing strict mode system",
          "line_range": [
            383,
            387
          ],
          "parameters": [
            "self",
            "strict_tags"
          ],
          "decorators": []
        },
        {
          "name": "add_decision_workflow",
          "docstring": "Add decision to workflow tracking (for [decide] mode)",
          "line_range": [
            389,
            396
          ],
          "parameters": [
            "self",
            "decision_id",
            "decision_data"
          ],
          "decorators": []
        },
        {
          "name": "get_workspace_status",
          "docstring": "Get comprehensive workspace status for debugging and display",
          "line_range": [
            398,
            420
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_override_time_remaining",
          "docstring": "Get formatted time remaining for emergency override",
          "line_range": [
            422,
            437
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_state",
          "docstring": "Save current state to file",
          "line_range": [
            439,
            442
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_mode_status",
          "docstring": "Get formatted status string for CLI display",
          "line_range": [
            444,
            458
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "WorkspaceStateManager",
          "docstring": "Core workspace state management with mode-based permissions and context boundaries.\n\nFeatures:\n- Multi-dimensional mode system ([code][debug], [discuss][meta])\n- Hybrid permission system (capabilities + file restrictions)\n- Smart mode combinations with context awareness\n- Emergency override protocols with time-boxing\n- Integration with existing strict mode system",
          "line_range": [
            16,
            458
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                28,
                36
              ],
              "parameters": [
                "self",
                "workspace_dir"
              ]
            },
            {
              "name": "_load_or_create_state",
              "docstring": "Load existing workspace state or create default",
              "line_range": [
                38,
                75
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_permission_templates",
              "docstring": "Load permission templates for different modes",
              "line_range": [
                77,
                128
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "set_mode",
              "docstring": "Set workspace mode(s) with smart combination logic.\n\nArgs:\n    modes: Single mode string \"[code]\" or list of modes [\"code\", \"debug\"]\n    session_id: Optional session identifier\n    \nReturns:\n    Dict with mode change result and applied permissions",
              "line_range": [
                130,
                176
              ],
              "parameters": [
                "self",
                "modes",
                "session_id"
              ]
            },
            {
              "name": "_parse_modes_from_string",
              "docstring": "Parse modes from string like '[code][debug]' to ['code', 'debug']",
              "line_range": [
                178,
                182
              ],
              "parameters": [
                "self",
                "mode_string"
              ]
            },
            {
              "name": "_combine_mode_permissions",
              "docstring": "Smart combination of mode permissions (Decision: C - Smart Combination)",
              "line_range": [
                184,
                216
              ],
              "parameters": [
                "self",
                "modes"
              ]
            },
            {
              "name": "_get_mode_combination_name",
              "docstring": "Get descriptive name for mode combination",
              "line_range": [
                218,
                232
              ],
              "parameters": [
                "self",
                "modes"
              ]
            },
            {
              "name": "get_current_state",
              "docstring": "Get current workspace state",
              "line_range": [
                234,
                236
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "check_permission",
              "docstring": "Check if operation is permitted under current mode.\n\nArgs:\n    operation: Operation type (e.g., \"write_file\", \"run_command\")\n    target: Optional target (file path, command, etc.)\n    \nReturns:\n    Dict with permission result and reasoning",
              "line_range": [
                238,
                302
              ],
              "parameters": [
                "self",
                "operation",
                "target"
              ]
            },
            {
              "name": "_get_required_capability",
              "docstring": "Map operations to required capabilities",
              "line_range": [
                304,
                320
              ],
              "parameters": [
                "self",
                "operation"
              ]
            },
            {
              "name": "_is_restricted_target",
              "docstring": "Check if target matches any file restrictions",
              "line_range": [
                322,
                334
              ],
              "parameters": [
                "self",
                "target"
              ]
            },
            {
              "name": "set_emergency_override",
              "docstring": "Grant emergency override (Hybrid B+C: Escalation + Time-boxing)\n\nArgs:\n    level: Override level (1=extend permissions, 2=filesystem, 3=system)\n    reason: Reason for override\n    duration_minutes: Override duration",
              "line_range": [
                336,
                365
              ],
              "parameters": [
                "self",
                "level",
                "reason",
                "duration_minutes"
              ]
            },
            {
              "name": "_check_emergency_override",
              "docstring": "Check if emergency override is active and not expired",
              "line_range": [
                367,
                381
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_strict_mode",
              "docstring": "Integration with existing strict mode system",
              "line_range": [
                383,
                387
              ],
              "parameters": [
                "self",
                "strict_tags"
              ]
            },
            {
              "name": "add_decision_workflow",
              "docstring": "Add decision to workflow tracking (for [decide] mode)",
              "line_range": [
                389,
                396
              ],
              "parameters": [
                "self",
                "decision_id",
                "decision_data"
              ]
            },
            {
              "name": "get_workspace_status",
              "docstring": "Get comprehensive workspace status for debugging and display",
              "line_range": [
                398,
                420
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_override_time_remaining",
              "docstring": "Get formatted time remaining for emergency override",
              "line_range": [
                422,
                437
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_state",
              "docstring": "Save current state to file",
              "line_range": [
                439,
                442
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_mode_status",
              "docstring": "Get formatted status string for CLI display",
              "line_range": [
                444,
                458
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self._load_permission_templates",
          "self._load_or_create_state"
        ],
        "_load_or_create_state": [
          "open",
          "self._save_state",
          "json.load",
          "datetime.now"
        ],
        "_load_permission_templates": [],
        "set_mode": [
          "self._save_state",
          "self._parse_modes_from_string",
          "self._combine_mode_permissions",
          "len",
          "datetime.now",
          "isinstance",
          "self._get_mode_combination_name",
          "combined_permissions.get"
        ],
        "_parse_modes_from_string": [
          "re.findall"
        ],
        "_combine_mode_permissions": [
          "sorted",
          "logger.info",
          "set",
          "template.get",
          "list"
        ],
        "_get_mode_combination_name": [
          "sorted",
          "combination_names.get"
        ],
        "get_current_state": [],
        "check_permission": [
          "self._is_restricted_target",
          "permissions.get",
          "self._check_emergency_override",
          "self._get_required_capability"
        ],
        "_get_required_capability": [
          "capability_map.items",
          "operation.startswith"
        ],
        "_is_restricted_target": [
          "target.startswith",
          "restriction.startswith",
          "fnmatch.fnmatch"
        ],
        "set_emergency_override": [
          "self._save_state",
          "timedelta",
          "expires_at.isoformat",
          "datetime.now"
        ],
        "_check_emergency_override": [
          "self._save_state",
          "override.get",
          "datetime.fromisoformat",
          "datetime.now"
        ],
        "integrate_strict_mode": [
          "self._save_state",
          "datetime.now"
        ],
        "add_decision_workflow": [
          "self._save_state",
          "datetime.now"
        ],
        "get_workspace_status": [
          "override.get",
          "len",
          "self._get_override_time_remaining",
          "self._get_mode_combination_name"
        ],
        "_get_override_time_remaining": [
          "int",
          "override.get",
          "datetime.now",
          "remaining.total_seconds",
          "datetime.fromisoformat"
        ],
        "_save_state": [
          "open",
          "json.dump"
        ],
        "get_mode_status": [
          "override.get",
          "self._get_mode_combination_name"
        ],
        "create_workspace_manager": [
          "WorkspaceStateManager"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "Set",
        "Union",
        "datetime",
        "fnmatch",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "timedelta",
        "timezone",
        "typing"
      ],
      "hash": null,
      "artifact_id": "97ddfd7f-5dd3-4bb9-a155-fdc147be8a5e"
    },
    {
      "module_id": "src.llmstruct.parsers.__init__",
      "path": "src/llmstruct/parsers/__init__.py",
      "category": "cli",
      "module_doc": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "JavaScriptParser",
        "javascript_parser"
      ],
      "hash": null,
      "artifact_id": "36a3a70d-f819-4640-822b-728c32fe1064"
    },
    {
      "module_id": "src.llmstruct.parsers.javascript_parser",
      "path": "src/llmstruct/parsers/javascript_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            9,
            13
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "file_hash",
          "docstring": "",
          "line_range": [
            15,
            20
          ],
          "parameters": [
            "self",
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_metadata",
          "docstring": "",
          "line_range": [
            22,
            41
          ],
          "parameters": [
            "self",
            "filepath",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "parse_module",
          "docstring": "",
          "line_range": [
            43,
            124
          ],
          "parameters": [
            "self",
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "extract_signature",
          "docstring": "",
          "line_range": [
            78,
            80
          ],
          "parameters": [
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JavaScriptParser",
          "docstring": "",
          "line_range": [
            8,
            124
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                9,
                13
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "file_hash",
              "docstring": "",
              "line_range": [
                15,
                20
              ],
              "parameters": [
                "self",
                "filepath"
              ]
            },
            {
              "name": "compute_file_metadata",
              "docstring": "",
              "line_range": [
                22,
                41
              ],
              "parameters": [
                "self",
                "filepath",
                "include_hashes"
              ]
            },
            {
              "name": "parse_module",
              "docstring": "",
              "line_range": [
                43,
                124
              ],
              "parameters": [
                "self",
                "filepath",
                "root_dir",
                "include_ranges",
                "include_hashes"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "set"
        ],
        "file_hash": [
          "open",
          "hashlib.sha256",
          "f.read"
        ],
        "compute_file_metadata": [
          "open",
          "sum",
          "os.stat",
          "self.file_hash"
        ],
        "parse_module": [
          "str",
          "f.read",
          "esprima.parseModule",
          "self.compute_file_metadata",
          "open"
        ],
        "extract_signature": [
          "hasattr"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "datetime",
        "esprima",
        "hashlib",
        "os",
        "typing"
      ],
      "hash": null,
      "artifact_id": "6074d7e6-1df0-4ce7-8622-a5487941d998"
    },
    {
      "module_id": "src.llmstruct.parsers.python_parser",
      "path": "src/llmstruct/parsers/python_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "infer_category",
          "docstring": "Infer module category based on its path.",
          "line_range": [
            13,
            20
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_hash",
          "docstring": "Compute SHA-256 hash of file content.",
          "line_range": [
            72,
            79
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "analyze_module",
          "docstring": "Analyze Python module and return structured data.",
          "line_range": [
            82,
            154
          ],
          "parameters": [
            "file_path",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            26,
            29
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "visit_Import",
          "docstring": "Capture import statements.",
          "line_range": [
            31,
            35
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_ImportFrom",
          "docstring": "Capture from-import statements.",
          "line_range": [
            37,
            43
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_FunctionDef",
          "docstring": "Track function definitions and their calls.",
          "line_range": [
            45,
            50
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_AsyncFunctionDef",
          "docstring": "Track async function definitions and their calls.",
          "line_range": [
            52,
            57
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_Call",
          "docstring": "Capture function calls.",
          "line_range": [
            59,
            69
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "AST visitor to collect function calls and dependencies.",
          "line_range": [
            23,
            69
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                26,
                29
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "visit_Import",
              "docstring": "Capture import statements.",
              "line_range": [
                31,
                35
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_ImportFrom",
              "docstring": "Capture from-import statements.",
              "line_range": [
                37,
                43
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_FunctionDef",
              "docstring": "Track function definitions and their calls.",
              "line_range": [
                45,
                50
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_AsyncFunctionDef",
              "docstring": "Track async function definitions and their calls.",
              "line_range": [
                52,
                57
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_Call",
              "docstring": "Capture function calls.",
              "line_range": [
                59,
                69
              ],
              "parameters": [
                "self",
                "node"
              ]
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ]
        }
      ],
      "callgraph": {
        "infer_category": [
          "Path"
        ],
        "__init__": [
          "set"
        ],
        "visit_Import": [
          "self.generic_visit"
        ],
        "visit_ImportFrom": [
          "self.generic_visit"
        ],
        "visit_FunctionDef": [
          "set",
          "self.generic_visit"
        ],
        "visit_AsyncFunctionDef": [
          "set",
          "self.generic_visit"
        ],
        "visit_Call": [
          "isinstance",
          "self.generic_visit"
        ],
        "compute_file_hash": [
          "open",
          "hashlib.sha256",
          "f.read",
          "logging.error"
        ],
        "analyze_module": [
          "functions.append",
          "CallVisitor",
          "classes.append",
          "sorted",
          "compute_file_hash",
          "str",
          "logging.error",
          "ast.parse",
          "Path",
          "f.read",
          "visitor.visit",
          "ast.walk",
          "isinstance",
          "ast.get_docstring",
          "ast.unparse",
          "open",
          "infer_category",
          "list"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "Set",
        "ast",
        "hashlib",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "219d5ca7-5e7b-44e0-8d16-95393c7a8554"
    },
    {
      "module_id": "src.llmstruct.templates.__init__",
      "path": "src/llmstruct/templates/__init__.py",
      "category": "cli",
      "module_doc": "Templates for LLM prompts used in LLMStruct integration.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "3bdf0cac-3f59-4717-9ada-3a2e7c54a112"
    },
    {
      "module_id": "src.llmstruct.validators.__init__",
      "path": "src/llmstruct/validators/__init__.py",
      "category": "cli",
      "module_doc": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "json_validator",
        "validate_struct_json"
      ],
      "hash": null,
      "artifact_id": "f524b216-c20c-4122-9350-10759cf0c38b"
    },
    {
      "module_id": "src.llmstruct.validators.json_validator",
      "path": "src/llmstruct/validators/json_validator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_struct_json",
          "docstring": "Validate a single JSON file against a schema.",
          "line_range": [
            12,
            40
          ],
          "parameters": [
            "json_path",
            "schema_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_directory",
          "docstring": "Validate all JSON files in a directory against a schema.",
          "line_range": [
            43,
            61
          ],
          "parameters": [
            "directory",
            "schema_path",
            "include_patterns",
            "exclude_patterns"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_struct_json": [
          "str",
          "logging.error",
          "Path",
          "validate",
          "logging.info",
          "json.load",
          "schema_file.exists",
          "open",
          "json_file.exists"
        ],
        "validate_directory": [
          "any",
          "validate_struct_json",
          "Path",
          "json_file.match",
          "str"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "ValidationError",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "sys",
        "typing",
        "validate"
      ],
      "hash": null,
      "artifact_id": "02724ea6-48c9-4975-803a-7a1e866cf79e"
    },
    {
      "module_id": "src.llmstruct.generators.json_generator",
      "path": "src/llmstruct/generators/json_generator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_folder_structure",
          "docstring": "Capture directory and file structure with artifact_id, respecting .gitignore and patterns.",
          "line_range": [
            15,
            88
          ],
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "build_toc_and_modules",
          "docstring": "Build TOC and modules with artifact_id and robust filtering.",
          "line_range": [
            91,
            148
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "Generate JSON structure for project with artifact_id, summary, and tags.",
          "line_range": [
            151,
            218
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals",
            "exclude_dirs"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_folder_structure": [
          "p.rstrip",
          "any",
          "file_path.relative_to",
          "sorted",
          "Path",
          "p.endswith",
          "set",
          "uuid.uuid4",
          "file_path.match",
          "str",
          "structure.append",
          "os.walk"
        ],
        "build_toc_and_modules": [
          "p.rstrip",
          "any",
          "len",
          "p.endswith",
          "Path",
          "f.match",
          "set",
          "analyze_module",
          "modules.append",
          "uuid.uuid4",
          "str",
          "toc.append"
        ],
        "generate_json": [
          "len",
          "Path",
          "get_folder_structure",
          "sum",
          "set",
          "uuid.uuid4",
          "str",
          "list",
          "build_toc_and_modules"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "analyze_module",
        "datetime",
        "logging",
        "os",
        "parsers.python_parser",
        "pathlib",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "18aa7e97-3db9-41f4-b568-26634f845bb2"
    },
    {
      "module_id": "src.llmstruct.generators.__init__",
      "path": "src/llmstruct/generators/__init__.py",
      "category": "cli",
      "module_doc": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "generate_json",
        "json_generator"
      ],
      "hash": null,
      "artifact_id": "a1ba519f-59c4-412e-9969-26015b61558a"
    },
    {
      "module_id": "tests.test_self_run",
      "path": "tests/test_self_run.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "test_filter_json_init_json",
          "docstring": "Test filter_json with init.json structure.",
          "line_range": [
            14,
            21
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_select_json_partial",
          "docstring": "Test partial JSON loading.",
          "line_range": [
            24,
            34
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_cache_json",
          "docstring": "Test JSON caching.",
          "line_range": [
            37,
            49
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_attach_to_llm_request_init_json",
          "docstring": "Test attach_to_llm_request with init.json and cache.",
          "line_range": [
            52,
            69
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_attach_to_llm_request_missing_file",
          "docstring": "Test attach_to_llm_request with missing file.",
          "line_range": [
            72,
            76
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_filter_json_init_json": [
          "filter_json"
        ],
        "test_select_json_partial": [
          "open",
          "select_json",
          "json.dump",
          "str"
        ],
        "test_cache_json": [
          "str",
          "JSONCache",
          "cache.get_metadata",
          "cache.close",
          "cache.cache_json",
          "open",
          "cache.get_full_json",
          "json.dump"
        ],
        "test_attach_to_llm_request_init_json": [
          "str",
          "JSONCache",
          "cache.close",
          "attach_to_llm_request",
          "open",
          "json.dump"
        ],
        "test_attach_to_llm_request_missing_file": [
          "str",
          "attach_to_llm_request"
        ]
      },
      "dependencies": [
        "JSONCache",
        "attach_to_llm_request",
        "filter_json",
        "json",
        "llmstruct.cache",
        "llmstruct.json_selector",
        "llmstruct.self_run",
        "select_json"
      ],
      "hash": null,
      "artifact_id": "259347cf-4046-49cb-a0ce-58b9d867aa86"
    },
    {
      "module_id": "tests.__init__",
      "path": "tests/__init__.py",
      "category": "test",
      "module_doc": "Test suite for LLMStruct, covering parsers, generators, validators, and integration.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "4b140b34-2712-45e3-8def-011150bd4059"
    },
    {
      "module_id": "scripts.collector",
      "path": "scripts/collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "apply_filters",
          "docstring": "",
          "line_range": [
            13,
            29
          ],
          "parameters": [
            "files",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "collect_files",
          "docstring": "",
          "line_range": [
            32,
            38
          ],
          "parameters": [
            "root_dir",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "generate_struct",
          "docstring": "",
          "line_range": [
            41,
            88
          ],
          "parameters": [
            "root_dir",
            "output"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            91,
            92
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "apply_filters": [
          "fnmatch.fnmatch",
          "filtered.append",
          "pattern.startswith"
        ],
        "collect_files": [
          "path.relative_to",
          "files.append",
          "root_dir.rglob",
          "apply_filters",
          "path.is_file",
          "str"
        ],
        "generate_struct": [
          "collect_files",
          "existing.get",
          "len",
          "Path",
          "logger.info",
          "output_path.open",
          "output_path.exists",
          "uuid.uuid4",
          "json.load",
          "str",
          "json.dump"
        ],
        "main": [
          "generate_struct"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "logging",
        "pathlib",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "3e5db7a5-567b-462b-a6d1-d6fb63c0e186"
    },
    {
      "module_id": "scripts.session_cli",
      "path": "scripts/session_cli.py",
      "category": "core",
      "module_doc": "Session Management CLI\nAutomates session tracking, worklog updates, and session switching for llmstruct.\nPart of the comprehensive session management system.",
      "functions": [
        {
          "name": "get_current_branch",
          "docstring": "Get current git branch.",
          "line_range": [
            24,
            31
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_json_file",
          "docstring": "Load JSON file with error handling.",
          "line_range": [
            33,
            40
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "save_json_file",
          "docstring": "Save JSON file with error handling.",
          "line_range": [
            42,
            51
          ],
          "parameters": [
            "file_path",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "get_current_timestamp",
          "docstring": "Get current timestamp in ISO format.",
          "line_range": [
            53,
            55
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "log_event",
          "docstring": "Log an event to worklog.json.",
          "line_range": [
            57,
            88
          ],
          "parameters": [
            "event_message",
            "author"
          ],
          "decorators": []
        },
        {
          "name": "switch_session",
          "docstring": "Switch to a different session or create new one.",
          "line_range": [
            90,
            141
          ],
          "parameters": [
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "list_sessions",
          "docstring": "List all available sessions.",
          "line_range": [
            143,
            166
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_current_session",
          "docstring": "Show current session details.",
          "line_range": [
            168,
            183
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_worklog",
          "docstring": "Show recent worklog entries.",
          "line_range": [
            185,
            203
          ],
          "parameters": [
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Main CLI interface.",
          "line_range": [
            205,
            244
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": [
            16,
            22
          ],
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {
        "get_current_branch": [
          "subprocess.run"
        ],
        "load_json_file": [
          "open",
          "print",
          "json.load"
        ],
        "save_json_file": [
          "open",
          "os.makedirs",
          "print",
          "json.dump"
        ],
        "get_current_timestamp": [
          "datetime.now"
        ],
        "log_event": [
          "load_json_file",
          "current_session.get",
          "save_json_file",
          "print",
          "get_current_timestamp",
          "get_current_branch"
        ],
        "switch_session": [
          "load_json_file",
          "save_json_file",
          "log_event",
          "print",
          "get_current_timestamp",
          "get_current_branch"
        ],
        "list_sessions": [
          "load_json_file",
          "print",
          "current_session.get"
        ],
        "show_current_session": [
          "load_json_file",
          "print",
          "current_session.get"
        ],
        "show_worklog": [
          "load_json_file",
          "print",
          "reversed",
          "len"
        ],
        "main": [
          "switch_session",
          "list_sessions",
          "len",
          "int",
          "show_current_session",
          "show_worklog",
          "log_event",
          "print"
        ]
      },
      "dependencies": [
        "Path",
        "datetime",
        "json",
        "os",
        "pathlib",
        "subprocess",
        "sys"
      ],
      "hash": null,
      "artifact_id": "19f9f4e9-6d17-47b9-b7bd-fc84dae4f454"
    },
    {
      "module_id": "scripts.auto_update_struct",
      "path": "scripts/auto_update_struct.py",
      "category": "core",
      "module_doc": "Automatic struct.json update script\nThis script automatically parses the project and updates struct.json\nwithout requiring LLM intervention.",
      "functions": [
        {
          "name": "detect_project_changes",
          "docstring": "Detect if project files have changed since last struct.json generation.\nUses git status to check for modifications.",
          "line_range": [
            44,
            81
          ],
          "parameters": [
            "root_dir",
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_struct_json",
          "docstring": "Create a backup of existing struct.json.",
          "line_range": [
            84,
            97
          ],
          "parameters": [
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_struct_json",
          "docstring": "Validate generated struct.json for basic structure.",
          "line_range": [
            100,
            128
          ],
          "parameters": [
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "update_struct_json",
          "docstring": "Main function to update struct.json automatically.\n\nArgs:\n    root_dir: Project root directory (default: current directory)\n    struct_path: Path to struct.json (default: ./struct.json)\n    force: Force regeneration even if no changes detected\n    config_override: Override default configuration\n\nReturns:\n    bool: True if update was successful",
          "line_range": [
            131,
            225
          ],
          "parameters": [
            "root_dir",
            "struct_path",
            "force",
            "config_override"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for auto-update script.",
          "line_range": [
            228,
            286
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "",
          "line_range": [
            24,
            25
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_gitignore",
          "docstring": "",
          "line_range": [
            26,
            27
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "",
          "line_range": [
            28,
            29
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_config": [],
        "load_gitignore": [],
        "generate_json": [
          "ImportError"
        ],
        "detect_project_changes": [
          "Path",
          "file_path.stat",
          "logger.warning",
          "logger.info",
          "subprocess.run"
        ],
        "backup_struct_json": [
          "datetime.now",
          "Path",
          "logger.info",
          "logger.error",
          "subprocess.run"
        ],
        "validate_struct_json": [
          "open",
          "logger.error",
          "json.load",
          "logger.info"
        ],
        "update_struct_json": [
          "os.getcwd",
          "config.get",
          "validate_struct_json",
          "subprocess.run",
          "generate_json",
          "detect_project_changes",
          "load_gitignore",
          "config.update",
          "logger.info",
          "backup_struct_json",
          "logger.error",
          "load_config",
          "open",
          "json.dump",
          "cli_config.get"
        ],
        "main": [
          "os.getcwd",
          "parser.parse_args",
          "sys.exit",
          "detect_project_changes",
          "logging.getLogger",
          "update_struct_json",
          "argparse.ArgumentParser",
          "print",
          "parser.add_argument"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "generate_json",
        "json",
        "llmstruct.cli",
        "llmstruct.generators.json_generator",
        "load_config",
        "load_gitignore",
        "logging",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "fec1edf2-635c-46f7-ac40-cd1714213498"
    },
    {
      "module_id": "scripts.export_to_github_projects",
      "path": "scripts/export_to_github_projects.py",
      "category": "core",
      "module_doc": "Export script for GitHub Projects integration\nConverts official tasks.json and ideas.json to GitHub Project cards",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            183,
            266
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            23,
            26
          ],
          "parameters": [
            "self",
            "config_path",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "check_github_cli",
          "docstring": "Check if GitHub CLI is installed and authenticated",
          "line_range": [
            28,
            36
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "list_projects",
          "docstring": "List available GitHub Projects (via gh-projects extension)",
          "line_range": [
            38,
            55
          ],
          "parameters": [
            "self",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "create_project_item",
          "docstring": "Create a new item in GitHub Project (via gh-projects extension)\nTODO: \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 GraphQL API \u0438\u043b\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c",
          "line_range": [
            57,
            82
          ],
          "parameters": [
            "self",
            "project_number",
            "title",
            "body",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "export_tasks_to_project",
          "docstring": "Export tasks to GitHub Project",
          "line_range": [
            84,
            123
          ],
          "parameters": [
            "self",
            "tasks",
            "project_number",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "export_ideas_to_project",
          "docstring": "Export ideas to GitHub Project",
          "line_range": [
            125,
            164
          ],
          "parameters": [
            "self",
            "ideas",
            "project_number",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "filter_data",
          "docstring": "Filter data by status and priority",
          "line_range": [
            166,
            180
          ],
          "parameters": [
            "self",
            "data",
            "status_filter",
            "priority_filter"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubProjectsExportScript",
          "docstring": "Extended exporter with command-line interface and GitHub CLI integration",
          "line_range": [
            20,
            180
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                23,
                26
              ],
              "parameters": [
                "self",
                "config_path",
                "dry_run"
              ]
            },
            {
              "name": "check_github_cli",
              "docstring": "Check if GitHub CLI is installed and authenticated",
              "line_range": [
                28,
                36
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "list_projects",
              "docstring": "List available GitHub Projects (via gh-projects extension)",
              "line_range": [
                38,
                55
              ],
              "parameters": [
                "self",
                "owner",
                "repo"
              ]
            },
            {
              "name": "create_project_item",
              "docstring": "Create a new item in GitHub Project (via gh-projects extension)\nTODO: \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 GraphQL API \u0438\u043b\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c",
              "line_range": [
                57,
                82
              ],
              "parameters": [
                "self",
                "project_number",
                "title",
                "body",
                "owner",
                "repo"
              ]
            },
            {
              "name": "export_tasks_to_project",
              "docstring": "Export tasks to GitHub Project",
              "line_range": [
                84,
                123
              ],
              "parameters": [
                "self",
                "tasks",
                "project_number",
                "owner",
                "repo"
              ]
            },
            {
              "name": "export_ideas_to_project",
              "docstring": "Export ideas to GitHub Project",
              "line_range": [
                125,
                164
              ],
              "parameters": [
                "self",
                "ideas",
                "project_number",
                "owner",
                "repo"
              ]
            },
            {
              "name": "filter_data",
              "docstring": "Filter data by status and priority",
              "line_range": [
                166,
                180
              ],
              "parameters": [
                "self",
                "data",
                "status_filter",
                "priority_filter"
              ]
            }
          ],
          "bases": [
            "GitHubProjectsExporter"
          ]
        }
      ],
      "callgraph": {
        "__init__": [
          "super"
        ],
        "check_github_cli": [
          "print",
          "self._run_gh_command"
        ],
        "list_projects": [
          "print",
          "self._run_gh_command",
          "json.loads",
          "isinstance"
        ],
        "create_project_item": [
          "str",
          "print",
          "self._run_gh_command",
          "output.strip"
        ],
        "export_tasks_to_project": [
          "len",
          "self.format_task_for_github",
          "self.create_project_item",
          "task.get",
          "print"
        ],
        "export_ideas_to_project": [
          "len",
          "self.format_idea_for_github",
          "self.create_project_item",
          "print",
          "idea.get"
        ],
        "filter_data": [
          "item.get"
        ],
        "main": [
          "exporter.export_tasks_to_project",
          "parser.parse_args",
          "sys.exit",
          "exporter.check_github_cli",
          "GitHubProjectsExportScript",
          "exporter.load_official_data",
          "exporter._save_mapping",
          "argparse.ArgumentParser",
          "exporter.filter_data",
          "exporter.export_ideas_to_project",
          "print",
          "parser.add_argument"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "GitHubProjectsExporter",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "argparse",
        "datetime",
        "json",
        "llmstruct.gh_view",
        "pathlib",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "e98876ea-8aba-45ff-87c0-5bef49ed067c"
    },
    {
      "module_id": "scripts.validate_refs",
      "path": "scripts/validate_refs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_references",
          "docstring": "",
          "line_range": [
            11,
            43
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            46,
            47
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_references": [
          "json.dump",
          "Path",
          "broken_links.append",
          "source_file.exists",
          "logger.info",
          "logger.error",
          "json.load",
          "enumerate",
          "target_file.exists",
          "logger.warning",
          "idea.get"
        ],
        "main": [
          "validate_references"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "05708df6-7c0c-4836-aa52-89584ebe8162"
    },
    {
      "module_id": "scripts.deploy_embedded_files",
      "path": "scripts/deploy_embedded_files.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_json",
          "docstring": "",
          "line_range": [
            931,
            941
          ],
          "parameters": [
            "data",
            "schema",
            "base_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_files",
          "docstring": "",
          "line_range": [
            944,
            950
          ],
          "parameters": [
            "target_dir",
            "backup_root"
          ],
          "decorators": []
        },
        {
          "name": "deploy_embedded_files",
          "docstring": "",
          "line_range": [
            953,
            1007
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            1010,
            1011
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_json": [
          "logger.error",
          "validate",
          "RefResolver",
          "logger.warning"
        ],
        "backup_files": [
          "shutil.copytree",
          "logger.info",
          "target_dir.exists",
          "datetime.now"
        ],
        "deploy_embedded_files": [
          "json.dump",
          "Path",
          "logger.warning",
          "logger.info",
          "validate_json",
          "logger.error",
          "backup_files",
          "target_path.exists",
          "EMBEDDED_FILES.get",
          "f.write",
          "Path.cwd",
          "target_path.open"
        ],
        "main": [
          "deploy_embedded_files"
        ]
      },
      "dependencies": [
        "Path",
        "RefResolver",
        "ValidationError",
        "datetime",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "shutil",
        "validate"
      ],
      "hash": null,
      "artifact_id": "223fd0c9-b2d7-420f-8975-ccefaf9a0a42"
    }
  ]
}