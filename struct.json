{
  "metadata": {
    "project_name": "llmstruct",
    "description": "Utility for generating structured JSON for codebases",
    "version": "2025-05-29T11:13:30.098596Z",
    "authors": [
      {
        "name": "Mikhail Stepanov",
        "github": "kpblcaoo",
        "email": "kpblcaoo@gmail.com"
      }
    ],
    "instructions": [
      "Follow best practices, warn if instructions conflict with them",
      "Preserve functionality, ensure idempotency",
      "Use attached struct.json for context and navigation",
      "Request missing modules or functions if needed",
      "Regenerate JSON for significant changes, track via Git and artifacts",
      "Use internal comments for descriptions, append brief summary"
    ],
    "goals": {
      "goals": [
        "Create universal JSON format for codebase structure (modules, functions, classes, calls, metadata)",
        "Ensure extensibility for new languages and entity types",
        "Develop modular, plugin-based parsers for new languages",
        "Maintain an open, RFC-style documented format",
        "Integrate with LLMs by generating and attaching JSON structure to queries"
      ]
    },
    "stats": {
      "modules_count": 85,
      "functions_count": 718,
      "classes_count": 79,
      "call_edges_count": 2275
    },
    "artifact_id": "a86f8ebe-fc99-4875-b703-e1cc6c9ae9a8",
    "summary": "Structured JSON for llmstruct codebase",
    "tags": [
      "codebase",
      "automation"
    ],
    "folder_structure": [
      {
        "path": ".",
        "type": "directory",
        "artifact_id": "e66faa92-67dc-4395-b8c0-653c0ad44f59",
        "metadata": {}
      },
      {
        "path": "AI_CLI_INSTRUCTIONS.md",
        "type": "file",
        "artifact_id": "cae5ba99-c337-488e-8afb-2e5deb7454e3",
        "metadata": {}
      },
      {
        "path": "AI_TESTING_INSTRUCTIONS.md",
        "type": "file",
        "artifact_id": "cd086ff6-a494-4ac8-92e3-556ecb3beba9",
        "metadata": {}
      },
      {
        "path": "AI_VSCODE_INSTRUCTIONS.md",
        "type": "file",
        "artifact_id": "659aeda8-7d1a-40bd-884b-5f6214b8bfd5",
        "metadata": {}
      },
      {
        "path": "CHANGELOG.md",
        "type": "file",
        "artifact_id": "f593f461-b73b-4872-a9ba-921848459eca",
        "metadata": {}
      },
      {
        "path": "CLEAN_COMMIT_MESSAGE.md",
        "type": "file",
        "artifact_id": "669cdc4a-0ab5-4031-9975-828c07776a7f",
        "metadata": {}
      },
      {
        "path": "CLEAN_CONTEXT_INIT.md",
        "type": "file",
        "artifact_id": "0e55aa61-30d6-47de-8925-1af1c01fc673",
        "metadata": {}
      },
      {
        "path": "COMMIT_MESSAGE.md",
        "type": "file",
        "artifact_id": "b8602d4f-d861-46fb-a3d2-6dec0345281a",
        "metadata": {}
      },
      {
        "path": "COMPREHENSIVE_PROJECT_OVERVIEW.md",
        "type": "file",
        "artifact_id": "202f1f79-8c1d-4181-8a1d-09bc0d485eb7",
        "metadata": {}
      },
      {
        "path": "CRITICAL_SESSION_STATE_2025-05-28.md",
        "type": "file",
        "artifact_id": "5dcae086-5d28-42c1-b154-521d85bc47a5",
        "metadata": {}
      },
      {
        "path": "CURSOR_EVALUATION_PLAN.md",
        "type": "file",
        "artifact_id": "77157543-8aeb-4911-833c-0f1e2a29659f",
        "metadata": {}
      },
      {
        "path": "GITHUB_PROJECTS_README.md",
        "type": "file",
        "artifact_id": "ee14d2e4-a4d6-4d89-a398-0b469c8759e6",
        "metadata": {}
      },
      {
        "path": "GROK_REVIEW_REQUEST.md",
        "type": "file",
        "artifact_id": "96ecf437-c8ff-46fe-bb8d-268ca11092a6",
        "metadata": {}
      },
      {
        "path": "IDEAS_TASKS_ORGANIZATION_PLAN.md",
        "type": "file",
        "artifact_id": "caab4f8a-33e2-4937-9582-ee9245ca1936",
        "metadata": {}
      },
      {
        "path": "LLM_CONTEXT_CAPABILITY_TESTING_COMPLETION_REPORT.md",
        "type": "file",
        "artifact_id": "c0f55e4d-f70d-4846-8929-7642c799ae36",
        "metadata": {}
      },
      {
        "path": "LLM_CONTEXT_CAPABILITY_TESTING_PLAN.md",
        "type": "file",
        "artifact_id": "e071bfdd-3563-474b-9009-2b5731c05836",
        "metadata": {}
      },
      {
        "path": "META_SESSION_AI_IMPLEMENTATION.md",
        "type": "file",
        "artifact_id": "22f00a29-a366-42a0-b876-9ee765cbe344",
        "metadata": {}
      },
      {
        "path": "META_SESSION_PLAN.md",
        "type": "file",
        "artifact_id": "0655f841-c507-43e5-8e35-2a719af3593d",
        "metadata": {}
      },
      {
        "path": "META_WORKING_NOTE.md",
        "type": "file",
        "artifact_id": "b59dd3f7-9fdd-47b3-a719-aacd06d2801d",
        "metadata": {}
      },
      {
        "path": "MODULAR_CLI_COMPLETION_REPORT.md",
        "type": "file",
        "artifact_id": "5e60b2e5-c17d-4f08-a1e3-912bf0e3f180",
        "metadata": {}
      },
      {
        "path": "QUICK_START.md",
        "type": "file",
        "artifact_id": "77f549d4-1385-469c-8ee5-6dc32f1d872c",
        "metadata": {}
      },
      {
        "path": "README.md",
        "type": "file",
        "artifact_id": "bf88f815-0769-4939-96ec-e51810fda137",
        "metadata": {}
      },
      {
        "path": "README_GITHUB_ROLLOUT.md",
        "type": "file",
        "artifact_id": "15cad811-a9f9-4c74-a551-47601106e247",
        "metadata": {}
      },
      {
        "path": "SEAMLESS_AI_INTEGRATION_PLAN.md",
        "type": "file",
        "artifact_id": "26b7733e-6c6d-4489-aa88-48f959bebae9",
        "metadata": {}
      },
      {
        "path": "SECURITY_IMPLEMENTATION_SUMMARY.md",
        "type": "file",
        "artifact_id": "ae981aef-9b3b-4c88-8364-55ceff28f9c1",
        "metadata": {}
      },
      {
        "path": "SESSION_TASKS.md",
        "type": "file",
        "artifact_id": "45dfdb2d-259a-4e57-8db7-7ffbaa557f6c",
        "metadata": {}
      },
      {
        "path": "STRATEGIC_ROADMAP_VISION_2025-05-29.md",
        "type": "file",
        "artifact_id": "3903106a-2ac0-409a-b73f-e83c8f16a852",
        "metadata": {}
      },
      {
        "path": "TECHNICAL_ROADMAP.md",
        "type": "file",
        "artifact_id": "df9dfdb1-9be2-48cf-a1fd-667e058a1012",
        "metadata": {}
      },
      {
        "path": "board_cli.py",
        "type": "file",
        "artifact_id": "0abdca94-f509-41b5-af13-ee6b271d0bb9",
        "metadata": {}
      },
      {
        "path": "collector.py",
        "type": "file",
        "artifact_id": "c83c25ab-9bf9-41e0-b192-28988ce89e8e",
        "metadata": {}
      },
      {
        "path": "concept_innovative.json",
        "type": "file",
        "artifact_id": "1744bee9-7f4c-409f-90a1-08f06207ef99",
        "metadata": {}
      },
      {
        "path": "concept_v0.3.0.json",
        "type": "file",
        "artifact_id": "45bdb12d-0184-4da6-b5bc-cf6657b78b14",
        "metadata": {}
      },
      {
        "path": "cursor_integration_strategy.md",
        "type": "file",
        "artifact_id": "b5770a54-c8f5-44df-9649-616600abd06f",
        "metadata": {}
      },
      {
        "path": "data",
        "type": "directory",
        "artifact_id": "546357c0-22d3-406d-9611-2be7b1799efe",
        "metadata": {}
      },
      {
        "path": "data/ai_diagnostics_report.json",
        "type": "file",
        "artifact_id": "cda97314-19cb-48c7-be72-c529d5ee006c",
        "metadata": {}
      },
      {
        "path": "data/ai_integration_config.json",
        "type": "file",
        "artifact_id": "a20682c5-7984-4b0f-bab5-39dbc4618d31",
        "metadata": {}
      },
      {
        "path": "data/ai_self_awareness",
        "type": "directory",
        "artifact_id": "ba3fac08-a4a1-4ebb-adc4-eaeb95334950",
        "metadata": {}
      },
      {
        "path": "data/ai_self_awareness/ai_behavior_analysis.json",
        "type": "file",
        "artifact_id": "1e74b4f8-6367-4fb0-ab8d-7cb31d8addc4",
        "metadata": {}
      },
      {
        "path": "data/ai_self_awareness/ai_usage_events.json",
        "type": "file",
        "artifact_id": "ffd8cd27-1196-43d8-bc27-8b4442affca9",
        "metadata": {}
      },
      {
        "path": "data/ai_self_awareness/capability_cache.json",
        "type": "file",
        "artifact_id": "6a690216-0027-41c4-8a0d-a44c147416d4",
        "metadata": {}
      },
      {
        "path": "data/artifacts",
        "type": "directory",
        "artifact_id": "3ce3e810-bdcb-4a1c-ac6c-97da4e673c81",
        "metadata": {}
      },
      {
        "path": "data/artifacts_index.json",
        "type": "file",
        "artifact_id": "b1ec72ca-2fc2-4d54-b065-faf959ca18f2",
        "metadata": {}
      },
      {
        "path": "data/cli.json",
        "type": "file",
        "artifact_id": "dc467aee-0c19-433b-b52c-03e8d88fd5fe",
        "metadata": {}
      },
      {
        "path": "data/cli_enhanced.json",
        "type": "file",
        "artifact_id": "bf4dbac2-0e17-48dd-ab76-aba02d8bf5b8",
        "metadata": {}
      },
      {
        "path": "data/cli_queue.json",
        "type": "file",
        "artifact_id": "c929b7be-ac19-44ad-9754-49de841d8954",
        "metadata": {}
      },
      {
        "path": "data/cli_queue_enhanced.json",
        "type": "file",
        "artifact_id": "130eec1c-c262-44ae-b3cf-d9a77ca03c2a",
        "metadata": {}
      },
      {
        "path": "data/conflicts.json",
        "type": "file",
        "artifact_id": "48cffa3d-846e-4a66-a2fc-187926bc6a28",
        "metadata": {}
      },
      {
        "path": "data/context_orchestration.json",
        "type": "file",
        "artifact_id": "fd9d2543-29ce-4156-b670-0c8d9b3a5880",
        "metadata": {}
      },
      {
        "path": "data/copilot",
        "type": "directory",
        "artifact_id": "9a39dc4f-6feb-4f51-a92f-ddf04c3278c0",
        "metadata": {}
      },
      {
        "path": "data/copilot/ai_constraints.json",
        "type": "file",
        "artifact_id": "10fad8f5-311e-4fd3-b71a-d8ce553aba64",
        "metadata": {}
      },
      {
        "path": "data/copilot/processing_queue.json",
        "type": "file",
        "artifact_id": "bd320748-a461-4e9c-92b4-3d9516c1471d",
        "metadata": {}
      },
      {
        "path": "data/copilot/warnings.json",
        "type": "file",
        "artifact_id": "2b802744-fb69-4af2-82e5-72dcba658353",
        "metadata": {}
      },
      {
        "path": "data/copilot_init.json",
        "type": "file",
        "artifact_id": "b0414f71-20f4-4424-98b8-c629b4828141",
        "metadata": {}
      },
      {
        "path": "data/cursor",
        "type": "directory",
        "artifact_id": "38df4b0c-b229-4f3c-966a-9b09f392264e",
        "metadata": {}
      },
      {
        "path": "data/cursor/cursor_context_config.json",
        "type": "file",
        "artifact_id": "d8f8e76f-68d0-4f02-a4d5-98bde760a114",
        "metadata": {}
      },
      {
        "path": "data/cursor/cursor_personal_bridge.json",
        "type": "file",
        "artifact_id": "275503ee-9ac6-47a8-a24d-0340f97a7e16",
        "metadata": {}
      },
      {
        "path": "data/cursor/cursor_session_memory.json",
        "type": "file",
        "artifact_id": "be7ff61e-9823-42ff-be01-150774a14d23",
        "metadata": {}
      },
      {
        "path": "data/developer_onboarding.json",
        "type": "file",
        "artifact_id": "d48f29f2-a159-4696-a2f0-29cbc00ee45b",
        "metadata": {}
      },
      {
        "path": "data/docs.json",
        "type": "file",
        "artifact_id": "70f831ee-69a9-44cd-a539-f69daf2745bb",
        "metadata": {}
      },
      {
        "path": "data/gh_mapping.json",
        "type": "file",
        "artifact_id": "c4f4f15c-5750-4fa3-9bd6-f70c25be676d",
        "metadata": {}
      },
      {
        "path": "data/ideas.json",
        "type": "file",
        "artifact_id": "6028d507-dd57-45bd-9d55-0f875b80afd2",
        "metadata": {}
      },
      {
        "path": "data/ideas_cache.json",
        "type": "file",
        "artifact_id": "373fb427-e608-4eec-877b-147447e1fda5",
        "metadata": {}
      },
      {
        "path": "data/init.json",
        "type": "file",
        "artifact_id": "9f21d4c0-4a21-497e-8696-92a6a2e448c2",
        "metadata": {}
      },
      {
        "path": "data/init_enhanced.json",
        "type": "file",
        "artifact_id": "afe78448-c4cd-4c9b-91f8-24670e0db6c2",
        "metadata": {}
      },
      {
        "path": "data/init_enhanced_ai.json",
        "type": "file",
        "artifact_id": "d60d7ca7-9db5-4524-815d-17eaff29d188",
        "metadata": {}
      },
      {
        "path": "data/insights.json",
        "type": "file",
        "artifact_id": "ba802e68-cf50-46a2-a76b-788b8dcd545e",
        "metadata": {}
      },
      {
        "path": "data/metrics.json",
        "type": "file",
        "artifact_id": "b68f3884-2dc0-4b83-8b05-629b1daf55f4",
        "metadata": {}
      },
      {
        "path": "data/prs.json",
        "type": "file",
        "artifact_id": "97ad7002-1e5b-4c59-8123-423c04c57529",
        "metadata": {}
      },
      {
        "path": "data/references.json",
        "type": "file",
        "artifact_id": "66307ae8-56e6-405c-b63e-8d3298e32951",
        "metadata": {}
      },
      {
        "path": "data/sessions",
        "type": "directory",
        "artifact_id": "0ae34baa-da1a-48c5-a514-620c04dc3b8e",
        "metadata": {}
      },
      {
        "path": "data/sessions/README.md",
        "type": "file",
        "artifact_id": "c449731b-5f4e-4a75-a7b7-8962a1fb4fb6",
        "metadata": {}
      },
      {
        "path": "data/sessions/ai_sessions.json",
        "type": "file",
        "artifact_id": "6e09a86e-01e0-4a32-979a-165c13bb8902",
        "metadata": {}
      },
      {
        "path": "data/sessions/current_session.json",
        "type": "file",
        "artifact_id": "a2a008d8-4839-45c2-bcab-3c2efa735076",
        "metadata": {}
      },
      {
        "path": "data/sessions/epics_roadmap.json",
        "type": "file",
        "artifact_id": "851d364b-27f9-4a0c-b875-640c543bb336",
        "metadata": {}
      },
      {
        "path": "data/sessions/worklog.json",
        "type": "file",
        "artifact_id": "cf4a2482-9252-453b-b75d-ba72a2aff84f",
        "metadata": {}
      },
      {
        "path": "data/tasks.json",
        "type": "file",
        "artifact_id": "a16474af-a2e4-4c67-b55e-cc04929dd79d",
        "metadata": {}
      },
      {
        "path": "data/vision.json",
        "type": "file",
        "artifact_id": "2564681e-a4c5-4058-b502-0b5e609999d6",
        "metadata": {}
      },
      {
        "path": "data/weights.json",
        "type": "file",
        "artifact_id": "1ccb27f7-dd48-4966-ab35-3b6e0a3ba18e",
        "metadata": {}
      },
      {
        "path": "data/workflow_events.json",
        "type": "file",
        "artifact_id": "d948c2e8-287e-4371-9a4d-2202358a515a",
        "metadata": {}
      },
      {
        "path": "data/workspace",
        "type": "directory",
        "artifact_id": "bacb7d1f-9e2a-4787-b9c6-2f1e78487bd9",
        "metadata": {}
      },
      {
        "path": "data/workspace/workspace_state.json",
        "type": "file",
        "artifact_id": "2771d005-6ad4-4d5a-9ed5-594a6eeb84b8",
        "metadata": {}
      },
      {
        "path": "debug_terminal.py",
        "type": "file",
        "artifact_id": "545e04fc-e63e-48c4-9706-1acdc47fa60b",
        "metadata": {}
      },
      {
        "path": "docker",
        "type": "directory",
        "artifact_id": "8bfc7adf-aea0-4b45-9fa8-795f0fabeb43",
        "metadata": {}
      },
      {
        "path": "docker/parser_go",
        "type": "directory",
        "artifact_id": "a7badc84-a8f7-4c4f-bd07-109756027d5a",
        "metadata": {}
      },
      {
        "path": "docs",
        "type": "directory",
        "artifact_id": "7e3d914a-a408-4d4c-96e7-65b7446d6b00",
        "metadata": {}
      },
      {
        "path": "docs.json",
        "type": "file",
        "artifact_id": "6cbf944a-9f10-44bd-bdf6-e9574beb1820",
        "metadata": {}
      },
      {
        "path": "docs/AI_DOGFOODING_FINAL_PLAN.md",
        "type": "file",
        "artifact_id": "b55c3719-3b4b-4b9b-955f-34109bd52b55",
        "metadata": {}
      },
      {
        "path": "docs/AI_DOGFOODING_IMPLEMENTATION_PLAN.md",
        "type": "file",
        "artifact_id": "0da2a8ce-d498-4618-9f08-dd84728c4807",
        "metadata": {}
      },
      {
        "path": "docs/AI_DOGFOODING_PLANNING_MEMO.md",
        "type": "file",
        "artifact_id": "ca25b438-9ecf-48f1-8f22-fea536d1cf69",
        "metadata": {}
      },
      {
        "path": "docs/AI_INTEGRATION_REALITY_CHECK.md",
        "type": "file",
        "artifact_id": "22657c02-4bf1-46cc-b5c8-1aa1e9ccc301",
        "metadata": {}
      },
      {
        "path": "docs/AI_SESSION_MOBILE_CONTROL.md",
        "type": "file",
        "artifact_id": "f0cb61a0-6b50-47f8-a8ee-ddab5ebedc58",
        "metadata": {}
      },
      {
        "path": "docs/COMPREHENSIVE_ANALYSIS.md",
        "type": "file",
        "artifact_id": "667af0b2-2966-4fad-ab44-d2a5bcd39960",
        "metadata": {}
      },
      {
        "path": "docs/COMPREHENSIVE_INDEX.json",
        "type": "file",
        "artifact_id": "c0a11bc3-33ff-4bbd-a3bd-075d45172545",
        "metadata": {}
      },
      {
        "path": "docs/CONTEXT_TAGS_SYSTEM.md",
        "type": "file",
        "artifact_id": "ddeb34a9-3719-4616-8ec3-198159448ed4",
        "metadata": {}
      },
      {
        "path": "docs/CONTRIBUTING.md",
        "type": "file",
        "artifact_id": "ccd54dec-0d2d-4500-ba58-214fddc799a9",
        "metadata": {}
      },
      {
        "path": "docs/COPILOT_INTEGRATION_CLARIFICATION_QUESTIONS.md",
        "type": "file",
        "artifact_id": "8b85af30-c4e9-4a01-81a0-d1e2bffae113",
        "metadata": {}
      },
      {
        "path": "docs/COPILOT_INTEGRATION_RESEARCH_NOTES.md",
        "type": "file",
        "artifact_id": "a1f98c5d-91cd-4abc-99cc-90c865881350",
        "metadata": {}
      },
      {
        "path": "docs/CURSOR_AI_INTEGRATION.md",
        "type": "file",
        "artifact_id": "443d689d-0b92-4920-bc62-0dc3aa3430b7",
        "metadata": {}
      },
      {
        "path": "docs/CURSOR_ECOSYSTEM_TECHNICAL_ASSESSMENT.md",
        "type": "file",
        "artifact_id": "b1987787-8e75-4b49-b57e-77ee9a380a86",
        "metadata": {}
      },
      {
        "path": "docs/GITHUB_ROLLOUT_STRATEGY.md",
        "type": "file",
        "artifact_id": "cef0c05b-d8e7-42b3-b6ab-ba0c13b9a3fd",
        "metadata": {}
      },
      {
        "path": "docs/GITHUB_TOKEN_SETUP.md",
        "type": "file",
        "artifact_id": "694be779-f944-48e1-9133-d3b299aa5243",
        "metadata": {}
      },
      {
        "path": "docs/HIDDEN_GEMS_ANALYSIS.md",
        "type": "file",
        "artifact_id": "f682fd16-bc9c-4d35-953d-30f86a9e2266",
        "metadata": {}
      },
      {
        "path": "docs/INTEGRATION_AND_WORKFLOW_CLARIFICATIONS.md",
        "type": "file",
        "artifact_id": "e87bded8-7360-4d3b-aeff-3aa2aa91fa49",
        "metadata": {}
      },
      {
        "path": "docs/JSON_OPTIMIZATION_CLARIFICATIONS.md",
        "type": "file",
        "artifact_id": "472d212a-c232-49e9-b2f3-b175f17bc1fa",
        "metadata": {}
      },
      {
        "path": "docs/JSON_OPTIMIZATION_FINAL_PLAN.md",
        "type": "file",
        "artifact_id": "13360ec6-a31a-4999-a3f5-145947d04e2a",
        "metadata": {}
      },
      {
        "path": "docs/JSON_SYSTEM_OPTIMIZATION_RESEARCH.md",
        "type": "file",
        "artifact_id": "8ad3a85d-6b47-4939-b5e1-17a4bcac6fdc",
        "metadata": {}
      },
      {
        "path": "docs/LLM_instructions_api.md",
        "type": "file",
        "artifact_id": "0f9c3ca5-472e-488b-85d4-47cae7790f49",
        "metadata": {}
      },
      {
        "path": "docs/MISSING_INNOVATIONS_SUMMARY.md",
        "type": "file",
        "artifact_id": "0ab29676-33a9-4f5d-a9aa-9771eefca4e0",
        "metadata": {}
      },
      {
        "path": "docs/PRIORITY_DASHBOARD.md",
        "type": "file",
        "artifact_id": "57b0d0ef-1444-4dde-a143-7a517ace0c14",
        "metadata": {}
      },
      {
        "path": "docs/QUICK_START_GUIDE.md",
        "type": "file",
        "artifact_id": "cfd21439-147d-40ee-a4f6-76e11c992ad0",
        "metadata": {}
      },
      {
        "path": "docs/SECURITY.md",
        "type": "file",
        "artifact_id": "78588d61-0cdb-4752-a6c7-a87241a556fd",
        "metadata": {}
      },
      {
        "path": "docs/STRATEGIC_ROADMAP_2025.md",
        "type": "file",
        "artifact_id": "2e9cf94f-bf1f-493d-afa7-f91f23c1c981",
        "metadata": {}
      },
      {
        "path": "docs/TASKS_AND_IDEAS_REASSESSMENT.md",
        "type": "file",
        "artifact_id": "a1bfa0f7-3f06-4176-a0d7-1ec4d4d46149",
        "metadata": {}
      },
      {
        "path": "docs/TASKS_INDEX.json",
        "type": "file",
        "artifact_id": "b9bf2d73-aade-4c45-b55b-04a03fa3ed46",
        "metadata": {}
      },
      {
        "path": "docs/TASKS_SUMMARY.md",
        "type": "file",
        "artifact_id": "63781970-c26c-4e30-b1a5-8c61cc5d6e39",
        "metadata": {}
      },
      {
        "path": "docs/TASK_IDEA_CONSOLIDATION_WORK_NOTE.md",
        "type": "file",
        "artifact_id": "764f56ac-52a1-410c-a9c9-6d96602043d3",
        "metadata": {}
      },
      {
        "path": "docs/TASK_MANAGEMENT_SYSTEM.md",
        "type": "file",
        "artifact_id": "caa5a7e4-bcc1-40b8-9ee6-22b4b35e4b41",
        "metadata": {}
      },
      {
        "path": "docs/TPOT_DEPLOYMENT_WORK_PLAN.md",
        "type": "file",
        "artifact_id": "bd0cb102-d98f-4474-a57d-b4ded57f40d1",
        "metadata": {}
      },
      {
        "path": "docs/ai",
        "type": "directory",
        "artifact_id": "57401e5e-8c26-494d-8277-e9800b5906ae",
        "metadata": {}
      },
      {
        "path": "docs/ai-constraints-implementation-report.md",
        "type": "file",
        "artifact_id": "032b49f3-aedf-42f0-b2ea-b8e7492844c0",
        "metadata": {}
      },
      {
        "path": "docs/ai-session-monitor",
        "type": "directory",
        "artifact_id": "a229666a-e1ce-4cf1-8228-603583523d79",
        "metadata": {}
      },
      {
        "path": "docs/ai-session-monitor/README.md",
        "type": "file",
        "artifact_id": "9bd7fd00-197f-4090-9b6c-98b1495b4eb7",
        "metadata": {}
      },
      {
        "path": "docs/ai/README.md",
        "type": "file",
        "artifact_id": "888a96db-2a7f-4aaf-a3e5-efb96d7eb0aa",
        "metadata": {}
      },
      {
        "path": "docs/ai/system_overview.md",
        "type": "file",
        "artifact_id": "90af18af-a5fa-4ed4-8dd7-6b72271a9a5a",
        "metadata": {}
      },
      {
        "path": "docs/ai/workflow_guide.md",
        "type": "file",
        "artifact_id": "ae655d36-e29d-4c87-96c2-1a5d339918e0",
        "metadata": {}
      },
      {
        "path": "docs/best_practices.md",
        "type": "file",
        "artifact_id": "c3e36970-7105-44ef-86dc-b01589956646",
        "metadata": {}
      },
      {
        "path": "docs/cache.py",
        "type": "file",
        "artifact_id": "e0cd5e52-f178-40af-b2e7-d0b1f6ed95a6",
        "metadata": {}
      },
      {
        "path": "docs/cli.py",
        "type": "file",
        "artifact_id": "801fdef3-b133-47e7-b62c-75e19d45645d",
        "metadata": {}
      },
      {
        "path": "docs/cli_modular_architecture.md",
        "type": "file",
        "artifact_id": "7b43d574-cdf7-423d-a79b-c5a86fcff7e4",
        "metadata": {}
      },
      {
        "path": "docs/context_orchestration_architecture.md",
        "type": "file",
        "artifact_id": "b0baaa12-7ef3-4dcb-b6d9-6a07e1ea2671",
        "metadata": {}
      },
      {
        "path": "docs/copilot_integration.md",
        "type": "file",
        "artifact_id": "5f6a7003-bdc2-416b-9911-c1980581b19d",
        "metadata": {}
      },
      {
        "path": "docs/examples",
        "type": "directory",
        "artifact_id": "3197a829-af90-424d-83d5-1c1a292e4639",
        "metadata": {}
      },
      {
        "path": "docs/examples/struct.json",
        "type": "file",
        "artifact_id": "ac05b8ce-a7cd-4d29-baf3-836949486e70",
        "metadata": {}
      },
      {
        "path": "docs/gh_view.md",
        "type": "file",
        "artifact_id": "96c6d3c8-918f-463b-81d9-f2f79f654093",
        "metadata": {}
      },
      {
        "path": "docs/github_projects_export.md",
        "type": "file",
        "artifact_id": "34045e27-e3e4-478b-a504-284654bebd7c",
        "metadata": {}
      },
      {
        "path": "docs/ideas_community.md",
        "type": "file",
        "artifact_id": "6fdfb2d2-de98-4a5d-940c-39e156e6ec28",
        "metadata": {}
      },
      {
        "path": "docs/ideas_strategy.md",
        "type": "file",
        "artifact_id": "27e906cc-f729-4621-a5f5-63fb28cabb92",
        "metadata": {}
      },
      {
        "path": "docs/ideas_technical.md",
        "type": "file",
        "artifact_id": "812bc630-acaf-4ed9-96e2-2dca132ba6f3",
        "metadata": {}
      },
      {
        "path": "docs/incremental_indexing_plan.md",
        "type": "file",
        "artifact_id": "30586639-d368-411e-84ea-c90c6f153f76",
        "metadata": {}
      },
      {
        "path": "docs/integration.md",
        "type": "file",
        "artifact_id": "88ab5bea-4b2c-46d6-b8ac-38cf375c60d2",
        "metadata": {}
      },
      {
        "path": "docs/interactions_diagram.ru.md",
        "type": "file",
        "artifact_id": "a60a56c5-05c9-4269-9f97-d78dba1a07ad",
        "metadata": {}
      },
      {
        "path": "docs/internal",
        "type": "directory",
        "artifact_id": "6c37e323-5983-4e20-9138-02b92d14db77",
        "metadata": {}
      },
      {
        "path": "docs/internal/collaborative-decision-workflow.md",
        "type": "file",
        "artifact_id": "332230a6-d9c2-4502-9d8b-1c6d5f996b7d",
        "metadata": {}
      },
      {
        "path": "docs/internal/elastic-workflow-concept.md",
        "type": "file",
        "artifact_id": "2d099f4c-8660-4e70-9125-dbe5536b6235",
        "metadata": {}
      },
      {
        "path": "docs/internal/mamay-scenario-onboarding-design.md",
        "type": "file",
        "artifact_id": "9c7475d8-5fe4-4287-8f90-ef243463fbf7",
        "metadata": {}
      },
      {
        "path": "docs/internal/notes",
        "type": "directory",
        "artifact_id": "7f5c8d59-b212-4a3b-8b31-9278ca50756f",
        "metadata": {}
      },
      {
        "path": "docs/internal/notes/session_integration.md",
        "type": "file",
        "artifact_id": "c7a24e82-80ee-413a-a8f8-aa05a81708ff",
        "metadata": {}
      },
      {
        "path": "docs/internal/project-status-summary.md",
        "type": "file",
        "artifact_id": "12eed8eb-420c-479e-a83f-938210e0ceba",
        "metadata": {}
      },
      {
        "path": "docs/internal/roadmap.md",
        "type": "file",
        "artifact_id": "050fab93-b37a-4a1c-935f-7f2494645586",
        "metadata": {}
      },
      {
        "path": "docs/internal/ru",
        "type": "directory",
        "artifact_id": "2b1c5316-ebe3-4fc6-9b19-4e8fa2758700",
        "metadata": {}
      },
      {
        "path": "docs/internal/ru/roadmap.md",
        "type": "file",
        "artifact_id": "05d07089-62af-4c50-b041-bffc08b524d0",
        "metadata": {}
      },
      {
        "path": "docs/internal/ru/ses-003_critical_analysis.md",
        "type": "file",
        "artifact_id": "b85b4c7e-b509-41dc-ac1e-2ffb5af8baaf",
        "metadata": {}
      },
      {
        "path": "docs/internal/ru/setup.md",
        "type": "file",
        "artifact_id": "9d6ac383-b0bc-4afb-b31b-8e3190110db6",
        "metadata": {}
      },
      {
        "path": "docs/internal/ru/team.md",
        "type": "file",
        "artifact_id": "0528baed-7af5-4b10-8a54-8338ef8bf3f6",
        "metadata": {}
      },
      {
        "path": "docs/internal/ses-004-implementation-decisions.md",
        "type": "file",
        "artifact_id": "43450465-b423-4eb4-9b42-5519c69c4620",
        "metadata": {}
      },
      {
        "path": "docs/internal/setup.md",
        "type": "file",
        "artifact_id": "a51afa3a-6f48-476e-9552-75e7647b4736",
        "metadata": {}
      },
      {
        "path": "docs/internal/team.md",
        "type": "file",
        "artifact_id": "f6bc8abd-09ec-4916-abe9-ce310105599a",
        "metadata": {}
      },
      {
        "path": "docs/internal/workspace-mode-design-clarifications.md",
        "type": "file",
        "artifact_id": "701a849d-c56f-42ee-aa64-a77e296ba4d3",
        "metadata": {}
      },
      {
        "path": "docs/internal/workspace-state-mode-system-design.md",
        "type": "file",
        "artifact_id": "4c8565fb-9800-4095-917f-af8de1fe7503",
        "metadata": {}
      },
      {
        "path": "docs/json_selector.py",
        "type": "file",
        "artifact_id": "2b8c426f-1519-4c50-ba14-a9a73e4bbbac",
        "metadata": {}
      },
      {
        "path": "docs/llmstruct_config.md",
        "type": "file",
        "artifact_id": "47bdedf3-e1d2-4ace-bbb3-b8f0573e4eea",
        "metadata": {}
      },
      {
        "path": "docs/llmstruct_decision_checklist.md",
        "type": "file",
        "artifact_id": "90e40553-b690-4698-8e39-14e512c7d06b",
        "metadata": {}
      },
      {
        "path": "docs/llmstruct_format.md",
        "type": "file",
        "artifact_id": "eaf4f3d0-5a6b-49bb-9216-4c2cefdaf1e3",
        "metadata": {}
      },
      {
        "path": "docs/management",
        "type": "directory",
        "artifact_id": "4aaff0df-c826-427e-bd6e-0f8611950def",
        "metadata": {}
      },
      {
        "path": "docs/management/README.md",
        "type": "file",
        "artifact_id": "dafc5584-762e-4928-af65-7c200a03dd0d",
        "metadata": {}
      },
      {
        "path": "docs/manifesto.md",
        "type": "file",
        "artifact_id": "33a908df-84ce-4112-9f71-013b71d8b3bf",
        "metadata": {}
      },
      {
        "path": "docs/onboarding.md",
        "type": "file",
        "artifact_id": "b5378d0b-2a42-4a54-9c33-ca9f27bd6647",
        "metadata": {}
      },
      {
        "path": "docs/project_structure.md",
        "type": "file",
        "artifact_id": "fc71ccbc-17fb-474b-8a90-2ccfa339157e",
        "metadata": {}
      },
      {
        "path": "docs/ru",
        "type": "directory",
        "artifact_id": "28696137-9760-4dba-a409-f1ed27f7bd10",
        "metadata": {}
      },
      {
        "path": "docs/ru/CONTRIBUTING.md",
        "type": "file",
        "artifact_id": "3132bb8b-b633-40cd-a56e-4c6da62a1e82",
        "metadata": {}
      },
      {
        "path": "docs/ru/README.md",
        "type": "file",
        "artifact_id": "2eb40aec-a63f-4305-a574-5e3bc2d2bd66",
        "metadata": {}
      },
      {
        "path": "docs/ru/best_practices.md",
        "type": "file",
        "artifact_id": "729941b6-ab05-4294-9c1a-94b8b87e83b2",
        "metadata": {}
      },
      {
        "path": "docs/ru/examples",
        "type": "directory",
        "artifact_id": "1fec8a14-d10d-4493-a447-c8be053e7f6f",
        "metadata": {}
      },
      {
        "path": "docs/ru/examples/struct.json",
        "type": "file",
        "artifact_id": "5155fc8a-d912-4bf8-be2a-3a1a4dd13e7d",
        "metadata": {}
      },
      {
        "path": "docs/ru/ideas_community.md",
        "type": "file",
        "artifact_id": "e4652509-b738-4573-9059-de86cbab6e2d",
        "metadata": {}
      },
      {
        "path": "docs/ru/ideas_strategy.md",
        "type": "file",
        "artifact_id": "9a9d2024-1831-49b4-8799-876b75095a4f",
        "metadata": {}
      },
      {
        "path": "docs/ru/ideas_technical.md",
        "type": "file",
        "artifact_id": "805043fd-4155-4927-81a5-d7b2fed9b896",
        "metadata": {}
      },
      {
        "path": "docs/ru/integration.md",
        "type": "file",
        "artifact_id": "b5297fa2-9a6c-4ba7-9143-f9a104ccd025",
        "metadata": {}
      },
      {
        "path": "docs/ru/interactions_diagram.ru.md",
        "type": "file",
        "artifact_id": "7d8e8643-ade8-4788-8c30-c587fafa14f6",
        "metadata": {}
      },
      {
        "path": "docs/ru/llmstruct_config.md",
        "type": "file",
        "artifact_id": "bb16dc82-cc1f-423f-a2ae-96b7a9cab76c",
        "metadata": {}
      },
      {
        "path": "docs/ru/llmstruct_format.md",
        "type": "file",
        "artifact_id": "d054b1ba-6b1b-4882-b468-a5922f78ebde",
        "metadata": {}
      },
      {
        "path": "docs/ru/manifesto.md",
        "type": "file",
        "artifact_id": "45c24355-66eb-4a75-8d36-edd55a6d12cc",
        "metadata": {}
      },
      {
        "path": "docs/ru/onboarding.md",
        "type": "file",
        "artifact_id": "04ec1407-a449-4219-828e-950cce1cb6e0",
        "metadata": {}
      },
      {
        "path": "docs/ru/project_structure.md",
        "type": "file",
        "artifact_id": "93cbc3ad-910a-4bf4-b8ad-958e7f4967f9",
        "metadata": {}
      },
      {
        "path": "docs/self_run.py",
        "type": "file",
        "artifact_id": "4fe6ee1a-3982-4da3-917a-8299b8143bad",
        "metadata": {}
      },
      {
        "path": "docs/struct_security.md",
        "type": "file",
        "artifact_id": "79a1ea68-c3b2-4da8-9560-77b5bc4e54ab",
        "metadata": {}
      },
      {
        "path": "duplication_report.json",
        "type": "file",
        "artifact_id": "d1ee15e0-4e6a-435b-bb01-658ba3685249",
        "metadata": {}
      },
      {
        "path": "epics",
        "type": "directory",
        "artifact_id": "9fb87b40-ad33-411a-b432-64f9d250ebee",
        "metadata": {}
      },
      {
        "path": "epics/EPIC-1-AI-BRANCH-SAFETY-SYSTEM.md",
        "type": "file",
        "artifact_id": "76518147-1b80-4eae-9a83-7e4a27a0bd76",
        "metadata": {}
      },
      {
        "path": "epics/EPIC-2-AI-SESSION-MANAGEMENT.md",
        "type": "file",
        "artifact_id": "df727dce-c59b-4d6e-bd19-34d49529783e",
        "metadata": {}
      },
      {
        "path": "epics/EPIC-3-ENHANCED-DOGFOOD-COMMAND.md",
        "type": "file",
        "artifact_id": "d2277647-e73c-4f37-be0b-440ed968648c",
        "metadata": {}
      },
      {
        "path": "epics/EPIC-4-RISK-BASED-DEVELOPMENT-WORKFLOW.md",
        "type": "file",
        "artifact_id": "4c0c91d2-5e6e-4ab5-9152-3b6c3b5987e8",
        "metadata": {}
      },
      {
        "path": "epics/README.md",
        "type": "file",
        "artifact_id": "cc954c95-837d-4e89-bcee-c154439c5bf0",
        "metadata": {}
      },
      {
        "path": "epics/epics_data.json",
        "type": "file",
        "artifact_id": "dbaf8bdb-185a-461e-a2f9-573efb573853",
        "metadata": {}
      },
      {
        "path": "examples",
        "type": "directory",
        "artifact_id": "f9077ea7-b1bd-43ad-93ff-9f6a752c83f5",
        "metadata": {}
      },
      {
        "path": "examples/python_project_main.py",
        "type": "file",
        "artifact_id": "25a19ae3-aee2-4315-b7fc-1cc71c5d177f",
        "metadata": {}
      },
      {
        "path": "examples/python_project_utils.py",
        "type": "file",
        "artifact_id": "f2a30b42-88d3-4ef0-8292-38f481392186",
        "metadata": {}
      },
      {
        "path": "final_system_check.py",
        "type": "file",
        "artifact_id": "84c7fd9a-3578-48d3-82f9-c0c44f980254",
        "metadata": {}
      },
      {
        "path": "final_system_validation.py",
        "type": "file",
        "artifact_id": "98ad9d04-745f-4c5f-b49e-affbbb063a38",
        "metadata": {}
      },
      {
        "path": "force_ai_integration.py",
        "type": "file",
        "artifact_id": "fa371de9-0160-4ce1-af5e-c65b329dd8c8",
        "metadata": {}
      },
      {
        "path": "github_sync_log.json",
        "type": "file",
        "artifact_id": "998cf2a3-ef6e-40c4-aede-28c48175d9b9",
        "metadata": {}
      },
      {
        "path": "internal",
        "type": "directory",
        "artifact_id": "7e589697-2763-4946-915e-035ca72815e6",
        "metadata": {}
      },
      {
        "path": "metrics.json",
        "type": "file",
        "artifact_id": "2c09c886-ef3e-4fea-8ca7-0fc5dfa5f17b",
        "metadata": {}
      },
      {
        "path": "monitor_system.py",
        "type": "file",
        "artifact_id": "be981fe4-bd4e-49a9-bc19-6e3fe44e117a",
        "metadata": {}
      },
      {
        "path": "processing_results",
        "type": "directory",
        "artifact_id": "c48a7feb-a47c-42b2-b653-95db4a9c974f",
        "metadata": {}
      },
      {
        "path": "processing_results/conflicts_manual_2025-05-29.json",
        "type": "file",
        "artifact_id": "f4df335f-41b7-4a02-98ee-43d708c5bcb0",
        "metadata": {}
      },
      {
        "path": "processing_results/duplicates_review_2025-05-29.json",
        "type": "file",
        "artifact_id": "b99b0f82-6490-4c5b-b96c-e042d73943cf",
        "metadata": {}
      },
      {
        "path": "processing_results/future_backlog_2025-05-29.json",
        "type": "file",
        "artifact_id": "93debb96-e68b-4853-8f4e-446be1c22be8",
        "metadata": {}
      },
      {
        "path": "processing_results/github_discussions_2025-05-29.json",
        "type": "file",
        "artifact_id": "d48c7662-fa7f-4384-9ce4-32b1a454cb3b",
        "metadata": {}
      },
      {
        "path": "processing_results/github_epics_2025-05-29.json",
        "type": "file",
        "artifact_id": "31edaa89-828e-4d7f-b83f-5be2ed901369",
        "metadata": {}
      },
      {
        "path": "processing_results/github_issues_2025-05-29.json",
        "type": "file",
        "artifact_id": "61449c79-2207-45b2-b86f-3e7cf41f787f",
        "metadata": {}
      },
      {
        "path": "processing_results/processing_summary_2025-05-29.json",
        "type": "file",
        "artifact_id": "5e9d0796-c7d7-498e-8bee-f95b75f05ee9",
        "metadata": {}
      },
      {
        "path": "processing_results/t_pot_revenue_2025-05-29.json",
        "type": "file",
        "artifact_id": "21119510-4bbe-48f7-9d39-ea5e4d868659",
        "metadata": {}
      },
      {
        "path": "project_context.json",
        "type": "file",
        "artifact_id": "a893dfd6-f9ff-4c97-b769-3027928e398d",
        "metadata": {}
      },
      {
        "path": "run_ai_diagnostics.py",
        "type": "file",
        "artifact_id": "8d1fc366-3772-402c-9a05-9d587cb55561",
        "metadata": {}
      },
      {
        "path": "schema",
        "type": "directory",
        "artifact_id": "b1a0560b-80cd-4cfd-8485-67beee20289c",
        "metadata": {}
      },
      {
        "path": "schema/artifacts_simplified.json",
        "type": "file",
        "artifact_id": "2c486d63-b437-4a06-a69f-72d542a86ca9",
        "metadata": {}
      },
      {
        "path": "schema/cli_queue.json",
        "type": "file",
        "artifact_id": "7afe6d8f-8791-4145-932c-cde10dfa5e0d",
        "metadata": {}
      },
      {
        "path": "schema/cli_simplified.json",
        "type": "file",
        "artifact_id": "5682878c-a151-4eca-bda0-5380923acb88",
        "metadata": {}
      },
      {
        "path": "schema/common",
        "type": "directory",
        "artifact_id": "dd3291bf-50bb-4a9b-ba12-360009480baa",
        "metadata": {}
      },
      {
        "path": "schema/common/definitions.json",
        "type": "file",
        "artifact_id": "9ced0a88-5153-44d2-aa4b-864d9045c504",
        "metadata": {}
      },
      {
        "path": "schema/core.json",
        "type": "file",
        "artifact_id": "f34ab126-ac25-4025-97ba-176180ef7c5d",
        "metadata": {}
      },
      {
        "path": "schema/core_simplified.json",
        "type": "file",
        "artifact_id": "84d6ea22-73bc-4652-94d1-b8e93e9f739b",
        "metadata": {}
      },
      {
        "path": "schema/insights_simplified.json",
        "type": "file",
        "artifact_id": "f57d7c5f-9d94-4125-8050-4a502170efde",
        "metadata": {}
      },
      {
        "path": "schema/llmstruct_schema.json",
        "type": "file",
        "artifact_id": "a2e9864e-cf07-49dc-92dd-5041ea032878",
        "metadata": {}
      },
      {
        "path": "schema/llmstruct_schema_simplified.json",
        "type": "file",
        "artifact_id": "90c62f83-88ab-4e74-b560-104cc7b14ac7",
        "metadata": {}
      },
      {
        "path": "schema/plugins",
        "type": "directory",
        "artifact_id": "799f48f5-5c88-4e39-a4cc-2dbb2db402c4",
        "metadata": {}
      },
      {
        "path": "schema/plugins/artifacts.json",
        "type": "file",
        "artifact_id": "c3182c56-0784-4145-86f2-3574343e58c4",
        "metadata": {}
      },
      {
        "path": "schema/plugins/cli.json",
        "type": "file",
        "artifact_id": "aa753fe4-c605-4bc9-94ca-4b71e22e6325",
        "metadata": {}
      },
      {
        "path": "schema/plugins/data_sorter.json",
        "type": "file",
        "artifact_id": "b280fd95-1f88-4174-8dd9-f37d339d15fe",
        "metadata": {}
      },
      {
        "path": "schema/plugins/insights.json",
        "type": "file",
        "artifact_id": "b92b7991-212b-4187-a775-83cd71d3310b",
        "metadata": {}
      },
      {
        "path": "scripts",
        "type": "directory",
        "artifact_id": "df2bd192-ac3c-469a-ad8e-bd2b116007dc",
        "metadata": {}
      },
      {
        "path": "scripts/auto_update_struct.py",
        "type": "file",
        "artifact_id": "1a36b55a-ef0c-43eb-b81e-c56074d5268d",
        "metadata": {}
      },
      {
        "path": "scripts/collector.py",
        "type": "file",
        "artifact_id": "2e0e796f-58cd-49d4-b269-ccc92070f41d",
        "metadata": {}
      },
      {
        "path": "scripts/create_comprehensive_index.py",
        "type": "file",
        "artifact_id": "a9085dfe-1c95-4ff4-a46d-1dc0be262dd7",
        "metadata": {}
      },
      {
        "path": "scripts/create_github_issues.py",
        "type": "file",
        "artifact_id": "95291de9-1ed3-4b11-8a37-7d31d0db8bc5",
        "metadata": {}
      },
      {
        "path": "scripts/create_tasks_index.py",
        "type": "file",
        "artifact_id": "38b491fa-d1ce-4ff5-bbe0-a917f6ca43dd",
        "metadata": {}
      },
      {
        "path": "scripts/deploy_embedded_files.py",
        "type": "file",
        "artifact_id": "42de06c8-cb6d-4c0f-aca4-e1ab308b1cac",
        "metadata": {}
      },
      {
        "path": "scripts/epic_roadmap_manager.py",
        "type": "file",
        "artifact_id": "27d71d1c-cfc2-41a5-aeb8-749c0371545d",
        "metadata": {}
      },
      {
        "path": "scripts/export_to_github_projects.py",
        "type": "file",
        "artifact_id": "63ad1e9f-4bfa-49f3-b47c-9513ba6ab93c",
        "metadata": {}
      },
      {
        "path": "scripts/fix_github_script.py",
        "type": "file",
        "artifact_id": "498ce198-6383-48d7-967b-2a0b1051ad84",
        "metadata": {}
      },
      {
        "path": "scripts/fix_hardcoded_usernames.py",
        "type": "file",
        "artifact_id": "ae87cb8d-632a-44d7-84dd-d28e025a46f1",
        "metadata": {}
      },
      {
        "path": "scripts/github_sync_manager.py",
        "type": "file",
        "artifact_id": "d71beef2-3cc2-4727-9da0-691d646092e3",
        "metadata": {}
      },
      {
        "path": "scripts/github_sync_manager_enhanced.py",
        "type": "file",
        "artifact_id": "79292f6b-555a-4911-9ede-a43125b9034d",
        "metadata": {}
      },
      {
        "path": "scripts/old",
        "type": "directory",
        "artifact_id": "14025eeb-c5ef-42aa-881d-c46a1fd701e2",
        "metadata": {}
      },
      {
        "path": "scripts/process_926_items.py",
        "type": "file",
        "artifact_id": "ee5b5dee-b6b9-4ee7-8dcd-795c3345d217",
        "metadata": {}
      },
      {
        "path": "scripts/session_cli.py",
        "type": "file",
        "artifact_id": "1b699b33-4a7f-4c37-b226-e6ab9fb03a02",
        "metadata": {}
      },
      {
        "path": "scripts/validate_epics.py",
        "type": "file",
        "artifact_id": "7a08dc01-0e76-4cc5-adf7-d870e1be6e8d",
        "metadata": {}
      },
      {
        "path": "scripts/validate_json.py",
        "type": "file",
        "artifact_id": "69fdf090-df33-4dae-bab9-b8979d9d21ed",
        "metadata": {}
      },
      {
        "path": "scripts/validate_refs.py",
        "type": "file",
        "artifact_id": "598edc73-68aa-4879-86e1-e2bf9e07df05",
        "metadata": {}
      },
      {
        "path": "scripts/validate_schemas.py",
        "type": "file",
        "artifact_id": "a5145240-5ae7-4ae6-a5f5-a1e3985428ed",
        "metadata": {}
      },
      {
        "path": "src",
        "type": "directory",
        "artifact_id": "83928677-222e-4095-ab05-29948b9774d7",
        "metadata": {}
      },
      {
        "path": "src/llmstruct",
        "type": "directory",
        "artifact_id": "27c42408-1008-467e-8437-373ccd4c5d07",
        "metadata": {}
      },
      {
        "path": "src/llmstruct.egg-info",
        "type": "directory",
        "artifact_id": "7a402897-9a2e-4085-bf00-6b9c6fff081a",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/__init__.py",
        "type": "file",
        "artifact_id": "1a1987c2-c5d5-4e1d-9f2f-cc0ffbcb3c95",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/__main__.py",
        "type": "file",
        "artifact_id": "91e68ecb-c012-45b9-847b-2593bcbc13fe",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/ai_cli_integration.py",
        "type": "file",
        "artifact_id": "852948cb-eb6d-43ea-837c-5e7a85f010bd",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/ai_self_awareness.py",
        "type": "file",
        "artifact_id": "85892e6e-590a-4ce9-b8ce-5f2a47237441",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/ai_self_monitor.py",
        "type": "file",
        "artifact_id": "d763679c-ab30-4dcc-974a-f595fd988996",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/ai_workflow_middleware.py",
        "type": "file",
        "artifact_id": "75410003-5e88-499b-90ce-016c54d9d710",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cache.py",
        "type": "file",
        "artifact_id": "1dcff101-6f15-472a-9f69-f7a008591bbe",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli.py",
        "type": "file",
        "artifact_id": "27dca4bb-4a61-4424-85ba-612e4d179f66",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli_commands.py",
        "type": "file",
        "artifact_id": "84b5d5b7-d651-4fab-8855-f01ffc494b2c",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli_config.py",
        "type": "file",
        "artifact_id": "fc2acfa1-7138-4879-955c-9ca863d96657",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli_core.py",
        "type": "file",
        "artifact_id": "a69195ab-01f4-4d3d-98bb-93847eee529d",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli_utils.py",
        "type": "file",
        "artifact_id": "1e7efd1c-0416-4df3-8467-e4e4dd896582",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/context_orchestrator.py",
        "type": "file",
        "artifact_id": "005f22e8-ba03-4585-b88c-6006f2328d92",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/copilot.py",
        "type": "file",
        "artifact_id": "d7111bcb-173d-4c38-b554-286ca2311499",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cursor_ai_bridge.py",
        "type": "file",
        "artifact_id": "8e3dd1de-5982-4ee4-a3cb-f55946643f41",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cursor_integration.py",
        "type": "file",
        "artifact_id": "9edb7bb0-a1ee-4ce6-974f-1d0c89a6b1b3",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators",
        "type": "directory",
        "artifact_id": "6bd5ec40-418a-4e62-a0b0-2b11ed119e84",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators/__init__.py",
        "type": "file",
        "artifact_id": "1144f159-f353-4f16-a6df-97c73bcddff6",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators/go_json_generator.py",
        "type": "file",
        "artifact_id": "2ad097ca-2c62-4869-8141-acd5dde56c63",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators/json_generator.py",
        "type": "file",
        "artifact_id": "01f109f9-c990-4fcd-9937-a06b62e1aaae",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/gh_view.py",
        "type": "file",
        "artifact_id": "8afabb0f-aa42-4a6f-954b-f0fec4f6dd19",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/grok.py",
        "type": "file",
        "artifact_id": "b9c32e82-64aa-447f-b444-66b6b9648f97",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/json_selector.py",
        "type": "file",
        "artifact_id": "9035a0fe-53f8-4dfc-a524-ade56a396f58",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/llm_client.py",
        "type": "file",
        "artifact_id": "cac9f37b-41fe-4d6b-bac2-68ce5c1141c4",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers",
        "type": "directory",
        "artifact_id": "14be8d33-806b-4f65-9689-e6491a8d5fc4",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/__init__.py",
        "type": "file",
        "artifact_id": "8a0044a5-e575-4cc6-95d8-a57de7945cbb",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/go_analyzer.py",
        "type": "file",
        "artifact_id": "210ec08d-3fba-4680-a298-bd9b4d5cab15",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/javascript_parser.py",
        "type": "file",
        "artifact_id": "4bac3833-d202-467b-853e-9988c8525e3a",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/python_parser.py",
        "type": "file",
        "artifact_id": "2805891d-1b03-4c88-8ffc-6847978461cd",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/universal_converter.py",
        "type": "file",
        "artifact_id": "7022b7cd-47be-474d-9eac-4ce8771a0acb",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/self_run.py",
        "type": "file",
        "artifact_id": "91d77544-6249-4259-a2da-96fb01ac1f18",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/templates",
        "type": "directory",
        "artifact_id": "ca2f13a6-3874-4924-9ccd-65f4cbca4252",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/templates/__init__.py",
        "type": "file",
        "artifact_id": "12577dbf-66a8-46ce-829b-751901d0f3e6",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/transpiler.py",
        "type": "file",
        "artifact_id": "b11d7143-96cb-444a-9ee4-946331870747",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/validators",
        "type": "directory",
        "artifact_id": "704b2ac1-848f-491e-a05e-ce7057bc1b9d",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/validators/__init__.py",
        "type": "file",
        "artifact_id": "3d2ce6fb-0520-4b70-8371-3a1486197f36",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/validators/json_validator.py",
        "type": "file",
        "artifact_id": "4c7227d1-4d5d-4577-892e-f9427ce7e110",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/workflow_orchestrator.py",
        "type": "file",
        "artifact_id": "80b49550-1fc0-4e6c-8df8-a472ecaca1c8",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/workspace.py",
        "type": "file",
        "artifact_id": "0009797a-11e9-4c10-a8fa-2aeebc6eeea0",
        "metadata": {}
      },
      {
        "path": "start_development.py",
        "type": "file",
        "artifact_id": "aefb2d16-7403-412c-a649-d053e2436c6f",
        "metadata": {}
      },
      {
        "path": "struct.json",
        "type": "file",
        "artifact_id": "2b788d62-8f3a-44a7-8a07-2a9680fa8990",
        "metadata": {}
      },
      {
        "path": "struct_ci_test.json",
        "type": "file",
        "artifact_id": "50bee980-6daa-4f50-8b74-2d84ee305dab",
        "metadata": {}
      },
      {
        "path": "struct_final_test.json",
        "type": "file",
        "artifact_id": "afbc77c8-dc09-4244-80d4-5a3badaeda70",
        "metadata": {}
      },
      {
        "path": "struct_fresh.json",
        "type": "file",
        "artifact_id": "be9a7b84-fa86-4338-b1b9-7df7e09faf96",
        "metadata": {}
      },
      {
        "path": "struct_test.json",
        "type": "file",
        "artifact_id": "11d3a249-070a-48b3-b62b-f8f551565e63",
        "metadata": {}
      },
      {
        "path": "temp",
        "type": "directory",
        "artifact_id": "497eb54e-d600-46d4-8a96-f00146a87322",
        "metadata": {}
      },
      {
        "path": "temp/discussion_notes.md",
        "type": "file",
        "artifact_id": "f685e735-cfef-41de-9210-d7cd4a9c272a",
        "metadata": {}
      },
      {
        "path": "temp/pause_recovery.md",
        "type": "file",
        "artifact_id": "d514bab4-dacc-4766-8c69-b11931b90008",
        "metadata": {}
      },
      {
        "path": "temp/restore_ai_context.md",
        "type": "file",
        "artifact_id": "74596c6e-0ad1-48fd-8c39-db60abb01c67",
        "metadata": {}
      },
      {
        "path": "temp/update-singbox",
        "type": "directory",
        "artifact_id": "7a539b4f-47f9-403d-b82c-4e1c713b9a15",
        "metadata": {}
      },
      {
        "path": "temp/update-singbox/README.md",
        "type": "file",
        "artifact_id": "c56814f3-0d60-4067-becd-5e96ca58c6ce",
        "metadata": {}
      },
      {
        "path": "temp/update-singbox/backup.json",
        "type": "file",
        "artifact_id": "53a98848-2a16-415a-9c13-9113981b22e1",
        "metadata": {}
      },
      {
        "path": "temp/update-singbox/config.template.json",
        "type": "file",
        "artifact_id": "5f3e3b40-d9a2-4da4-b648-5965b8ea090a",
        "metadata": {}
      },
      {
        "path": "temp/update-singbox/docs",
        "type": "directory",
        "artifact_id": "7814266c-d8d9-4644-94cb-a6a7e1da62eb",
        "metadata": {}
      },
      {
        "path": "temp/update-singbox/docs/CHANGELOG.md",
        "type": "file",
        "artifact_id": "faa0a7d4-8a04-4c70-ab0c-569bfc5f89c4",
        "metadata": {}
      },
      {
        "path": "temp/update-singbox/docs/DEVELOPMENT.md",
        "type": "file",
        "artifact_id": "8d3f13f8-c70e-4781-a772-dce3b1e8936f",
        "metadata": {}
      },
      {
        "path": "temp/update-singbox/docs/TESTING.md",
        "type": "file",
        "artifact_id": "3d956da1-e8cd-4907-9019-8025c82eb0a2",
        "metadata": {}
      },
      {
        "path": "temp/update-singbox/docs/struct.json",
        "type": "file",
        "artifact_id": "5cf342a9-d27e-4404-b1dd-dd5dbd1d7501",
        "metadata": {}
      },
      {
        "path": "temp/update-singbox/exclusions.json",
        "type": "file",
        "artifact_id": "7d277fc8-2d78-4914-bc83-a64994936166",
        "metadata": {}
      },
      {
        "path": "temp/update-singbox/install_wizard.py",
        "type": "file",
        "artifact_id": "3b798c8e-f85e-4dd8-ae18-a66afa4c1a16",
        "metadata": {}
      },
      {
        "path": "temp/update-singbox/logging_setup.py",
        "type": "file",
        "artifact_id": "37c77a2f-a6ec-4c30-bf5b-bfdeae636ee5",
        "metadata": {}
      },
      {
        "path": "temp/update-singbox/modules",
        "type": "directory",
        "artifact_id": "89f60384-db94-4ef6-a4e4-27f1eb62191e",
        "metadata": {}
      },
      {
        "path": "temp/update-singbox/modules/__init__.py",
        "type": "file",
        "artifact_id": "804e3aba-25f4-40da-be19-1f6c03cca492",
        "metadata": {}
      },
      {
        "path": "temp/update-singbox/modules/config_fetch.py",
        "type": "file",
        "artifact_id": "3030d4e2-279f-4c5f-a82a-805c47a01c5d",
        "metadata": {}
      },
      {
        "path": "temp/update-singbox/modules/config_generate.py",
        "type": "file",
        "artifact_id": "568fa341-d03d-4c33-a90e-aafa94fbfeab",
        "metadata": {}
      },
      {
        "path": "temp/update-singbox/modules/module_installer.py",
        "type": "file",
        "artifact_id": "6a2eb54d-dfe5-4c43-9849-9bc34d3d2fca",
        "metadata": {}
      },
      {
        "path": "temp/update-singbox/modules/protocol_validation.py",
        "type": "file",
        "artifact_id": "59ae73e8-fe8a-45af-8ec3-94741b9ff8b8",
        "metadata": {}
      },
      {
        "path": "temp/update-singbox/modules/server_management.py",
        "type": "file",
        "artifact_id": "5a3b9a41-b57e-42da-bb88-98dc59f71ef9",
        "metadata": {}
      },
      {
        "path": "temp/update-singbox/modules/service_manage.py",
        "type": "file",
        "artifact_id": "0b74e835-b35a-4d7d-8b1d-9bb9ccee03fa",
        "metadata": {}
      },
      {
        "path": "temp/update-singbox/modules/utils.py",
        "type": "file",
        "artifact_id": "3d8b61bc-b0b9-4e89-8cbc-19162a9af9b0",
        "metadata": {}
      },
      {
        "path": "temp/update-singbox/selected_config.json",
        "type": "file",
        "artifact_id": "5761add9-456c-404a-8c0e-e99475278d91",
        "metadata": {}
      },
      {
        "path": "temp/update-singbox/struct.json",
        "type": "file",
        "artifact_id": "38722454-4629-4c16-9fc4-8756c9604e49",
        "metadata": {}
      },
      {
        "path": "temp/update-singbox/template.json",
        "type": "file",
        "artifact_id": "44c6d7cf-d666-4379-bc57-e008565cadcc",
        "metadata": {}
      },
      {
        "path": "temp/update-singbox/tests",
        "type": "directory",
        "artifact_id": "1b2ce4f2-2944-4ddc-bab9-80233b98a8dd",
        "metadata": {}
      },
      {
        "path": "temp/update-singbox/update_singbox.py",
        "type": "file",
        "artifact_id": "bed66348-0211-4357-8791-ec7eb3dc342e",
        "metadata": {}
      },
      {
        "path": "temp/update-singbox/utils",
        "type": "directory",
        "artifact_id": "2df4c4e6-90ea-422f-9f56-95d4583bcb98",
        "metadata": {}
      },
      {
        "path": "temp/update-singbox/utils/callgraph.json",
        "type": "file",
        "artifact_id": "71c68e70-7276-468b-bffb-01aa4b43a48c",
        "metadata": {}
      },
      {
        "path": "temp/update-singbox/utils/callgraph.py",
        "type": "file",
        "artifact_id": "b3451b55-3920-46c3-9c8e-1213122dcd18",
        "metadata": {}
      },
      {
        "path": "temp/update-singbox/utils/genstruct.py",
        "type": "file",
        "artifact_id": "040e8700-bb77-47e9-af6b-f3935e573430",
        "metadata": {}
      },
      {
        "path": "temp/update-singbox/utils/struct.json",
        "type": "file",
        "artifact_id": "b930e820-ddda-4a46-b03d-4825e6818914",
        "metadata": {}
      },
      {
        "path": "test_results.json",
        "type": "file",
        "artifact_id": "4af8bfb2-eca7-465a-a92f-0c4043e8d81c",
        "metadata": {}
      },
      {
        "path": "test_simple.json",
        "type": "file",
        "artifact_id": "58d20935-4c43-453d-9016-8b2b7605920a",
        "metadata": {}
      },
      {
        "path": "test_struct_quick.json",
        "type": "file",
        "artifact_id": "a3480ae0-f51b-43fc-976c-472f785fac7d",
        "metadata": {}
      },
      {
        "path": "tests",
        "type": "directory",
        "artifact_id": "69c57a99-f413-4b79-963d-3f409dda3d54",
        "metadata": {}
      },
      {
        "path": "tests/__init__.py",
        "type": "file",
        "artifact_id": "a75c21cb-2285-496c-ad41-629cfbbcc0ab",
        "metadata": {}
      },
      {
        "path": "universal_test.json",
        "type": "file",
        "artifact_id": "41d99745-f461-4890-a33d-782cdf68c3c0",
        "metadata": {}
      },
      {
        "path": "validate_schemas.py",
        "type": "file",
        "artifact_id": "e2616f32-ac50-4e41-bc99-8ce59311e59b",
        "metadata": {}
      },
      {
        "path": "validate_sessions.py",
        "type": "file",
        "artifact_id": "0642cd94-c26a-468c-88e8-d726bf58c206",
        "metadata": {}
      },
      {
        "path": "verify_llm_response.py",
        "type": "file",
        "artifact_id": "3ac3b562-799e-45c9-b665-232e1929211c",
        "metadata": {}
      },
      {
        "path": "workspace_state.json",
        "type": "file",
        "artifact_id": "f22f3716-ae97-46f6-abee-50d08535ce77",
        "metadata": {}
      }
    ]
  },
  "toc": [
    {
      "module_id": "start_development",
      "path": "start_development.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "LLMStruct Development Startup Script",
      "artifact_id": "9c9c4791-57a8-4eb1-820e-0c3331e0e0e4"
    },
    {
      "module_id": "run_ai_diagnostics",
      "path": "run_ai_diagnostics.py",
      "category": "core",
      "functions": 19,
      "classes": 0,
      "summary": "Comprehensive AI Self-Awareness Diagnostics Runner",
      "artifact_id": "84c3e446-0383-4b7e-94b8-bd3e8e1b8b35"
    },
    {
      "module_id": "collector",
      "path": "collector.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "2d7ea0bc-d5f3-4d05-9bd3-303206cdf0bd"
    },
    {
      "module_id": "debug_terminal",
      "path": "debug_terminal.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "Debug Terminal Script - Fallback for when terminal output is not visible",
      "artifact_id": "db863cdf-2aad-45c6-a04b-ed9975fecc7b"
    },
    {
      "module_id": "final_system_check",
      "path": "final_system_check.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Final System Status Check - LLMStruct Modular CLI Integration",
      "artifact_id": "1ad84915-da92-4a24-9f78-eb168fb943a6"
    },
    {
      "module_id": "monitor_system",
      "path": "monitor_system.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "System Monitor - Continuous logging for debugging terminal issues",
      "artifact_id": "ab69ba49-3c9a-49d8-bbf3-4f113114fca3"
    },
    {
      "module_id": "board_cli",
      "path": "board_cli.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "CLI Kanban Board for llmstruct tasks and ideas",
      "artifact_id": "be76e3ae-14d8-4ea3-83d1-b40682b1eee3"
    },
    {
      "module_id": "final_system_validation",
      "path": "final_system_validation.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Final system validation script for LLMStruct Modular CLI Integration",
      "artifact_id": "366d4c68-4a20-4613-b574-210df9ba27be"
    },
    {
      "module_id": "force_ai_integration",
      "path": "force_ai_integration.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "Force AI Integration Script",
      "artifact_id": "1139f57b-6115-49f4-93fa-caa98f3dfef4"
    },
    {
      "module_id": "validate_schemas",
      "path": "validate_schemas.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "JSON Schema Validation Script for llmstruct",
      "artifact_id": "8cf3d5db-62f0-44f9-b153-ecc4756ac544"
    },
    {
      "module_id": "validate_sessions",
      "path": "validate_sessions.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "Session Schema Validation Script for llmstruct",
      "artifact_id": "5600a6d8-c897-4fdc-ac16-3a1631753325"
    },
    {
      "module_id": "verify_llm_response",
      "path": "verify_llm_response.py",
      "category": "core",
      "functions": 6,
      "classes": 0,
      "summary": "",
      "artifact_id": "10392321-baa8-4639-beb0-f44e92b53039"
    },
    {
      "module_id": "examples.python_project_utils",
      "path": "examples/python_project_utils.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "Utility functions for the sample project.",
      "artifact_id": "0452aaca-1b6b-4952-bf19-4f3611763d4f"
    },
    {
      "module_id": "examples.python_project_main",
      "path": "examples/python_project_main.py",
      "category": "core",
      "functions": 2,
      "classes": 1,
      "summary": "Main module for the sample project.",
      "artifact_id": "87e97154-ab92-46b4-9f84-7562f127f54e"
    },
    {
      "module_id": "docs.cache",
      "path": "docs/cache.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "c3bb4176-50fa-41e1-832e-170f97062cf2"
    },
    {
      "module_id": "docs.self_run",
      "path": "docs/self_run.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "6b73a29b-a47e-4fce-9a57-2e0ada883073"
    },
    {
      "module_id": "docs.json_selector",
      "path": "docs/json_selector.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "c6ee0624-83e0-48b8-acbc-59ae89bbf2d9"
    },
    {
      "module_id": "docs.cli",
      "path": "docs/cli.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "",
      "artifact_id": "e5a5716e-66ec-4343-bf86-efc6acef369c"
    },
    {
      "module_id": "temp.update-singbox.logging_setup",
      "path": "temp/update-singbox/logging_setup.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "076fde08-4b06-475c-ac60-068c4744eeda"
    },
    {
      "module_id": "temp.update-singbox.install_wizard",
      "path": "temp/update-singbox/install_wizard.py",
      "category": "core",
      "functions": 16,
      "classes": 1,
      "summary": "",
      "artifact_id": "a89f980c-6559-41f6-9961-250bfc6393f0"
    },
    {
      "module_id": "temp.update-singbox.update_singbox",
      "path": "temp/update-singbox/update_singbox.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "Update sing-box configuration from a remote JSON source.",
      "artifact_id": "43486279-75a6-4ab8-82b4-99807479371d"
    },
    {
      "module_id": "temp.update-singbox.utils.callgraph",
      "path": "temp/update-singbox/utils/callgraph.py",
      "category": "core",
      "functions": 5,
      "classes": 1,
      "summary": "",
      "artifact_id": "42d4c1ed-e4a2-4d24-8911-3deebe3560f0"
    },
    {
      "module_id": "temp.update-singbox.utils.genstruct",
      "path": "temp/update-singbox/utils/genstruct.py",
      "category": "core",
      "functions": 5,
      "classes": 0,
      "summary": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b Python-\u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0432 JSON \u0441 \u0440\u0435\u0436\u0438\u043c\u0430\u043c\u0438 compact \u0438 detailed.",
      "artifact_id": "4ccc50d9-4e5e-4ebb-9b0a-0051e9bd04b6"
    },
    {
      "module_id": "temp.update-singbox.modules.config_fetch",
      "path": "temp/update-singbox/modules/config_fetch.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "40acaf09-f766-4e13-a1bb-d721fc338884"
    },
    {
      "module_id": "temp.update-singbox.modules.__init__",
      "path": "temp/update-singbox/modules/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "143c88ac-3a03-4f24-bf7b-17a7e9d8ff18"
    },
    {
      "module_id": "temp.update-singbox.modules.protocol_validation",
      "path": "temp/update-singbox/modules/protocol_validation.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "76d410c0-3306-4216-8227-ff909b3d1120"
    },
    {
      "module_id": "temp.update-singbox.modules.config_generate",
      "path": "temp/update-singbox/modules/config_generate.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "dd0b1622-75ce-493a-8835-e57b757a147a"
    },
    {
      "module_id": "temp.update-singbox.modules.utils",
      "path": "temp/update-singbox/modules/utils.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "ddcad042-bc17-4e48-ae01-1496c28ac9dd"
    },
    {
      "module_id": "temp.update-singbox.modules.server_management",
      "path": "temp/update-singbox/modules/server_management.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "",
      "artifact_id": "a59761fb-c829-479c-b1e2-305ba527dc91"
    },
    {
      "module_id": "temp.update-singbox.modules.service_manage",
      "path": "temp/update-singbox/modules/service_manage.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "961b61a2-294e-4941-807b-f3f231c1cc93"
    },
    {
      "module_id": "temp.update-singbox.modules.module_installer",
      "path": "temp/update-singbox/modules/module_installer.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "",
      "artifact_id": "4d23efc7-b5d2-4f10-a2c6-cb74d98105cc"
    },
    {
      "module_id": "src.llmstruct.workflow_orchestrator",
      "path": "src/llmstruct/workflow_orchestrator.py",
      "category": "core",
      "functions": 27,
      "classes": 5,
      "summary": "AI Workflow Orchestrator - Integration Layer for Existing llmstruct Architecture",
      "artifact_id": "6997674a-e5ff-4277-96bb-d61a426baa7f"
    },
    {
      "module_id": "src.llmstruct.cli_config",
      "path": "src/llmstruct/cli_config.py",
      "category": "core",
      "functions": 18,
      "classes": 1,
      "summary": "CLI configuration management.",
      "artifact_id": "e0cc95cb-5fd1-4bca-856e-f538691ea7be"
    },
    {
      "module_id": "src.llmstruct.ai_self_monitor",
      "path": "src/llmstruct/ai_self_monitor.py",
      "category": "core",
      "functions": 16,
      "classes": 4,
      "summary": "AI Self-Monitoring System",
      "artifact_id": "1cf7f69f-2d01-42bd-9313-a653bca65ad5"
    },
    {
      "module_id": "src.llmstruct.grok",
      "path": "src/llmstruct/grok.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "",
      "artifact_id": "2d2ba98d-0802-494c-b5b0-9ea707aa9b94"
    },
    {
      "module_id": "src.llmstruct.cli_commands",
      "path": "src/llmstruct/cli_commands.py",
      "category": "core",
      "functions": 22,
      "classes": 1,
      "summary": "CLI command processing and handlers.",
      "artifact_id": "777cc9c8-4507-4f7e-8f78-5acda0a11508"
    },
    {
      "module_id": "src.llmstruct.context_orchestrator",
      "path": "src/llmstruct/context_orchestrator.py",
      "category": "core",
      "functions": 20,
      "classes": 5,
      "summary": "Smart Context Orchestration for LLMStruct",
      "artifact_id": "f24a5a95-a6aa-4e9c-ab85-3bfabaf0f775"
    },
    {
      "module_id": "src.llmstruct.__init__",
      "path": "src/llmstruct/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "3d2e0051-37ee-42d4-9a94-f5cbe9b5e17f"
    },
    {
      "module_id": "src.llmstruct.ai_cli_integration",
      "path": "src/llmstruct/ai_cli_integration.py",
      "category": "core",
      "functions": 14,
      "classes": 1,
      "summary": "AI Self-Awareness CLI Integration Module",
      "artifact_id": "30dc965f-2112-40da-afd3-53c554e85cb2"
    },
    {
      "module_id": "src.llmstruct.__main__",
      "path": "src/llmstruct/__main__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "d44f3df3-cfd9-47da-bcd2-694d8658228f"
    },
    {
      "module_id": "src.llmstruct.cli_utils",
      "path": "src/llmstruct/cli_utils.py",
      "category": "core",
      "functions": 13,
      "classes": 1,
      "summary": "CLI utility functions.",
      "artifact_id": "783190bf-9645-4e99-881b-f9c0539cbd1f"
    },
    {
      "module_id": "src.llmstruct.copilot",
      "path": "src/llmstruct/copilot.py",
      "category": "core",
      "functions": 26,
      "classes": 5,
      "summary": "LLMStruct Copilot Integration Module",
      "artifact_id": "45683038-003f-416e-aad5-ee8d825df431"
    },
    {
      "module_id": "src.llmstruct.gh_view",
      "path": "src/llmstruct/gh_view.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "GitHub visualization/graph feature (gh-view-v1)",
      "artifact_id": "52d22212-99d5-49f3-be45-652b3f541ae8"
    },
    {
      "module_id": "src.llmstruct.llm_client",
      "path": "src/llmstruct/llm_client.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "5c57a17d-4bf1-4a2c-abcb-7860337c5795"
    },
    {
      "module_id": "src.llmstruct.ai_workflow_middleware",
      "path": "src/llmstruct/ai_workflow_middleware.py",
      "category": "core",
      "functions": 22,
      "classes": 4,
      "summary": "AI Workflow Middleware - Forces AI Integration with LLMStruct",
      "artifact_id": "5205c957-1450-4e6c-8160-d0ae444df184"
    },
    {
      "module_id": "src.llmstruct.ai_self_awareness",
      "path": "src/llmstruct/ai_self_awareness.py",
      "category": "core",
      "functions": 47,
      "classes": 8,
      "summary": "AI Self-Awareness Enhancement Module",
      "artifact_id": "b3b52351-5ce9-4796-a306-9552abaad7d9"
    },
    {
      "module_id": "src.llmstruct.cache",
      "path": "src/llmstruct/cache.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "2abed339-e632-42d5-9c71-092ab913ed44"
    },
    {
      "module_id": "src.llmstruct.self_run",
      "path": "src/llmstruct/self_run.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "9d6b74be-f110-4b73-ae78-40234fc66062"
    },
    {
      "module_id": "src.llmstruct.cursor_ai_bridge",
      "path": "src/llmstruct/cursor_ai_bridge.py",
      "category": "core",
      "functions": 21,
      "classes": 1,
      "summary": "Cursor AI Bridge - API Layer for AI Assistant Integration",
      "artifact_id": "eb0f7d5d-d165-47a2-894b-f8b91f877dd4"
    },
    {
      "module_id": "src.llmstruct.transpiler",
      "path": "src/llmstruct/transpiler.py",
      "category": "core",
      "functions": 10,
      "classes": 3,
      "summary": "AI-Powered Universal Transpiler",
      "artifact_id": "5446f633-5db8-4cbc-9c93-051fe4302165"
    },
    {
      "module_id": "src.llmstruct.json_selector",
      "path": "src/llmstruct/json_selector.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "c68b5ca7-ffdb-45db-815e-732d13c82d4e"
    },
    {
      "module_id": "src.llmstruct.cli",
      "path": "src/llmstruct/cli.py",
      "category": "core",
      "functions": 18,
      "classes": 0,
      "summary": "LLMStruct CLI - Main entry point for the command-line interface.",
      "artifact_id": "e4c17da8-ae7d-4900-b44c-f6195a06a49e"
    },
    {
      "module_id": "src.llmstruct.cursor_integration",
      "path": "src/llmstruct/cursor_integration.py",
      "category": "core",
      "functions": 22,
      "classes": 6,
      "summary": "Cursor IDE Integration Module",
      "artifact_id": "289a18a5-0e0f-4019-a201-1841bbf238b3"
    },
    {
      "module_id": "src.llmstruct.cli_core",
      "path": "src/llmstruct/cli_core.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "Core CLI functionality and main loop.",
      "artifact_id": "4ea4d563-e169-4252-950f-5734533cdc34"
    },
    {
      "module_id": "src.llmstruct.workspace",
      "path": "src/llmstruct/workspace.py",
      "category": "core",
      "functions": 20,
      "classes": 1,
      "summary": "Workspace State & Mode Management System",
      "artifact_id": "fab6151e-2c23-493a-adfa-66c7a62c1683"
    },
    {
      "module_id": "src.llmstruct.parsers.__init__",
      "path": "src/llmstruct/parsers/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "artifact_id": "6c954f38-5587-43e4-8b6e-244edbbf54e5"
    },
    {
      "module_id": "src.llmstruct.parsers.javascript_parser",
      "path": "src/llmstruct/parsers/javascript_parser.py",
      "category": "core",
      "functions": 5,
      "classes": 1,
      "summary": "",
      "artifact_id": "b06b75cd-4308-49ff-9e77-ca9aefa3965b"
    },
    {
      "module_id": "src.llmstruct.parsers.universal_converter",
      "path": "src/llmstruct/parsers/universal_converter.py",
      "category": "core",
      "functions": 14,
      "classes": 3,
      "summary": "Universal Code Converter - Orchestrates all language parsers",
      "artifact_id": "b71dac27-8e84-4370-a623-8481fcc47530"
    },
    {
      "module_id": "src.llmstruct.parsers.go_analyzer",
      "path": "src/llmstruct/parsers/go_analyzer.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 Go \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043b\u044f Docker \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430",
      "artifact_id": "a9d58233-6418-46de-bc0a-9d655d9ccbc5"
    },
    {
      "module_id": "src.llmstruct.parsers.python_parser",
      "path": "src/llmstruct/parsers/python_parser.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "",
      "artifact_id": "4b20e315-9c01-4eae-9787-569982eb2bc8"
    },
    {
      "module_id": "src.llmstruct.templates.__init__",
      "path": "src/llmstruct/templates/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Templates for LLM prompts used in LLMStruct integration.",
      "artifact_id": "c10fc4d4-352c-4901-b46b-9ab0bf62ab79"
    },
    {
      "module_id": "src.llmstruct.validators.__init__",
      "path": "src/llmstruct/validators/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "artifact_id": "6a7c6393-90ee-4c2d-9947-b3654e5fe74a"
    },
    {
      "module_id": "src.llmstruct.validators.json_validator",
      "path": "src/llmstruct/validators/json_validator.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "527fc2fe-9782-4896-b76d-2262fbdce02c"
    },
    {
      "module_id": "src.llmstruct.generators.json_generator",
      "path": "src/llmstruct/generators/json_generator.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "5932f3fd-e81a-41c4-a21b-a0b859f3bac0"
    },
    {
      "module_id": "src.llmstruct.generators.__init__",
      "path": "src/llmstruct/generators/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "artifact_id": "83cdc8b8-7bd1-4602-bff0-02b99d0ac118"
    },
    {
      "module_id": "src.llmstruct.generators.go_json_generator",
      "path": "src/llmstruct/generators/go_json_generator.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "13459fd3-2694-443e-8ce6-104a29119275"
    },
    {
      "module_id": "tests.__init__",
      "path": "tests/__init__.py",
      "category": "test",
      "functions": 0,
      "classes": 0,
      "summary": "Test suite for LLMStruct, covering parsers, generators, validators, and integration.",
      "artifact_id": "df4dc2f7-1c0d-40a8-b2b8-34b993019a7e"
    },
    {
      "module_id": "scripts.github_sync_manager",
      "path": "scripts/github_sync_manager.py",
      "category": "core",
      "functions": 15,
      "classes": 1,
      "summary": "GitHub Sync Manager - \u0418\u0434\u0435\u043c\u043f\u043e\u0442\u0435\u043d\u0442\u043d\u0430\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f processing results \u0441 GitHub",
      "artifact_id": "4549aed2-b343-4879-bdf9-5af2250a4682"
    },
    {
      "module_id": "scripts.process_926_items",
      "path": "scripts/process_926_items.py",
      "category": "core",
      "functions": 16,
      "classes": 1,
      "summary": "926 Items Processing Script - Updated Implementation",
      "artifact_id": "cfac1afc-2490-4b87-9111-34b0f96f8f19"
    },
    {
      "module_id": "scripts.github_sync_manager_enhanced",
      "path": "scripts/github_sync_manager_enhanced.py",
      "category": "core",
      "functions": 28,
      "classes": 3,
      "summary": "Enhanced GitHub Sync Manager - \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u043b\u0443\u0447\u0448\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0438\u0437 full_project_rollout",
      "artifact_id": "b42b9015-e913-4705-8ce0-8bf0b73962a0"
    },
    {
      "module_id": "scripts.fix_github_script",
      "path": "scripts/fix_github_script.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Quick fix for GitHub issues creation script",
      "artifact_id": "89a3e3e4-4bae-4275-9a12-7d550216a0fd"
    },
    {
      "module_id": "scripts.collector",
      "path": "scripts/collector.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "0f739884-091f-43f8-b671-b9d5cad11728"
    },
    {
      "module_id": "scripts.create_github_issues",
      "path": "scripts/create_github_issues.py",
      "category": "core",
      "functions": 11,
      "classes": 1,
      "summary": "GitHub Issues Creator for AI-Dogfooding Project",
      "artifact_id": "ba0c9b8f-cd9d-44b7-b32a-462ae2ae512f"
    },
    {
      "module_id": "scripts.session_cli",
      "path": "scripts/session_cli.py",
      "category": "core",
      "functions": 10,
      "classes": 1,
      "summary": "Session Management CLI",
      "artifact_id": "f78a2e34-0631-46ab-8569-3df2c9576fb4"
    },
    {
      "module_id": "scripts.epic_roadmap_manager",
      "path": "scripts/epic_roadmap_manager.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "Epic Roadmap Manager - \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430\u043c\u0438 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0441\u0435\u0441\u0441\u0438\u0439",
      "artifact_id": "6451e939-6f1b-48de-b266-e8d564af42d0"
    },
    {
      "module_id": "scripts.auto_update_struct",
      "path": "scripts/auto_update_struct.py",
      "category": "core",
      "functions": 8,
      "classes": 0,
      "summary": "Automatic struct.json update script",
      "artifact_id": "bcf2dbc5-037c-41b3-955d-13146835bb6a"
    },
    {
      "module_id": "scripts.create_comprehensive_index",
      "path": "scripts/create_comprehensive_index.py",
      "category": "core",
      "functions": 37,
      "classes": 2,
      "summary": "Comprehensive Project Index Creator",
      "artifact_id": "4201bae7-fd07-4cb4-a402-e33c3e74887c"
    },
    {
      "module_id": "scripts.validate_schemas",
      "path": "scripts/validate_schemas.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "fc62b51a-1494-4aa4-86b9-706e12185c37"
    },
    {
      "module_id": "scripts.export_to_github_projects",
      "path": "scripts/export_to_github_projects.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "Export script for GitHub Projects integration",
      "artifact_id": "71a106fa-36d2-419b-8c7b-5892a53582fd"
    },
    {
      "module_id": "scripts.validate_refs",
      "path": "scripts/validate_refs.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "d05e46f1-2303-4884-99ef-37ae2580c849"
    },
    {
      "module_id": "scripts.fix_hardcoded_usernames",
      "path": "scripts/fix_hardcoded_usernames.py",
      "category": "core",
      "functions": 12,
      "classes": 2,
      "summary": "Fix Hardcoded Usernames Script",
      "artifact_id": "4866607b-204e-44c2-a40d-e3c4e521c459"
    },
    {
      "module_id": "scripts.deploy_embedded_files",
      "path": "scripts/deploy_embedded_files.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "872bc006-814a-4684-8d56-dc62bc378583"
    },
    {
      "module_id": "scripts.validate_epics",
      "path": "scripts/validate_epics.py",
      "category": "core",
      "functions": 5,
      "classes": 0,
      "summary": "Epic Data Validator",
      "artifact_id": "b4593fdb-4693-454e-aeaa-4bc4de9e0af2"
    },
    {
      "module_id": "scripts.validate_json",
      "path": "scripts/validate_json.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "JSON Validation Script",
      "artifact_id": "232e70ae-72f8-4e66-8389-8d78eeee0feb"
    },
    {
      "module_id": "scripts.create_tasks_index",
      "path": "scripts/create_tasks_index.py",
      "category": "core",
      "functions": 18,
      "classes": 3,
      "summary": "Tasks Index Creator",
      "artifact_id": "d1a15ea4-dd56-4ac6-b9c1-8f763a6e7555"
    }
  ],
  "modules": [
    {
      "module_id": "start_development",
      "path": "start_development.py",
      "category": "core",
      "module_doc": "LLMStruct Development Startup Script\nConvenient one-command startup for daily development workflow.\nEnhanced with AI Workflow Middleware and Self-Monitoring for seamless llmstruct integration.",
      "functions": [
        {
          "name": "print_header",
          "docstring": "Print startup header.",
          "line_range": [
            17,
            21
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "initialize_ai_integration_layer",
          "docstring": "Initialize AI integration layer - this is the NEW seamless integration",
          "line_range": [
            23,
            73
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "check_environment",
          "docstring": "Check if development environment is properly set up.",
          "line_range": [
            75,
            110
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "initialize_workflow_orchestrator",
          "docstring": "Initialize and test WorkflowOrchestrator integration.",
          "line_range": [
            112,
            156
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "initialize_cursor_ai_bridge",
          "docstring": "Initialize and test CursorAIBridge integration.",
          "line_range": [
            158,
            198
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "sync_architecture_components",
          "docstring": "Sync with existing llmstruct architecture components and AI integration.",
          "line_range": [
            200,
            240
          ],
          "parameters": [
            "orchestrator",
            "ai_integration"
          ],
          "decorators": []
        },
        {
          "name": "run_system_health_check",
          "docstring": "Run comprehensive system health check.",
          "line_range": [
            242,
            263
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "get_optimization_suggestions",
          "docstring": "Get AI optimization suggestions with WorkflowOrchestrator integration.",
          "line_range": [
            265,
            320
          ],
          "parameters": [
            "orchestrator"
          ],
          "decorators": []
        },
        {
          "name": "check_git_status",
          "docstring": "Check git repository status.",
          "line_range": [
            322,
            368
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_current_context",
          "docstring": "Show current project context and priorities.",
          "line_range": [
            370,
            411
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_useful_commands",
          "docstring": "Show useful commands for development.",
          "line_range": [
            413,
            472
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Main startup routine with AI Workflow Middleware and WorkflowOrchestrator integration.",
          "line_range": [
            474,
            593
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "print_header": [
          "print"
        ],
        "initialize_ai_integration_layer": [
          "initialize_ai_middleware",
          "Path",
          "middleware.process_ai_request",
          "str",
          "print",
          "record_ai_usage",
          "initialize_ai_monitor"
        ],
        "check_environment": [
          "Path",
          "missing_files.append",
          "print",
          "hasattr"
        ],
        "initialize_workflow_orchestrator": [
          "context.get",
          "stats.get",
          "dup_analysis.get",
          "len",
          "system_caps.get",
          "WorkflowOrchestrator",
          "orchestrator.get_current_context",
          "print",
          "struct_analysis.get",
          "copilot_status.get"
        ],
        "initialize_cursor_ai_bridge": [
          "context.get",
          "ai_rec.get",
          "task_analysis.get",
          "len",
          "bridge.ai_get_context",
          "bridge.ai_analyze_task",
          "print",
          "project_state.get",
          "CursorAIBridge"
        ],
        "sync_architecture_components": [
          "middleware.get_middleware_stats",
          "orchestrator.sync_with_existing_architecture",
          "print",
          "ai_integration.get",
          "sync_results.items"
        ],
        "run_system_health_check": [
          "subprocess.run",
          "print"
        ],
        "get_optimization_suggestions": [
          "enumerate",
          "subprocess.run",
          "suggestions.append",
          "duplication_analysis.get",
          "r.get",
          "print",
          "orchestrator.analyze_codebase_for_duplicates",
          "line.strip"
        ],
        "check_git_status": [
          "subprocess.run",
          "changes.split",
          "print",
          "len"
        ],
        "show_current_context": [
          "enumerate",
          "init_file.exists",
          "vision.get",
          "Path",
          "bridge_data.get",
          "bridge_file.exists",
          "print",
          "business_obj.get",
          "open",
          "json.load",
          "init_data.get"
        ],
        "show_useful_commands": [
          "print"
        ],
        "main": [
          "get_optimization_suggestions",
          "initialize_workflow_orchestrator",
          "show_current_context",
          "show_useful_commands",
          "middleware.get_middleware_stats",
          "monitor.analyze_behavior_trends",
          "initialize_cursor_ai_bridge",
          "sync_architecture_components",
          "run_system_health_check",
          "print",
          "check_environment",
          "ai_integration.get",
          "check_git_status",
          "initialize_ai_integration_layer",
          "print_header"
        ]
      },
      "dependencies": [
        "AIWorkflowMode",
        "CursorAIBridge",
        "Path",
        "WorkflowOrchestrator",
        "initialize_ai_middleware",
        "initialize_ai_monitor",
        "json",
        "llmstruct.ai_self_monitor",
        "llmstruct.ai_workflow_middleware",
        "llmstruct.cursor_ai_bridge",
        "llmstruct.workflow_orchestrator",
        "os",
        "pathlib",
        "record_ai_usage",
        "subprocess",
        "sys"
      ],
      "hash": null,
      "artifact_id": "9c9c4791-57a8-4eb1-820e-0c3331e0e0e4"
    },
    {
      "module_id": "run_ai_diagnostics",
      "path": "run_ai_diagnostics.py",
      "category": "core",
      "module_doc": "Comprehensive AI Self-Awareness Diagnostics Runner\nEnhanced with Cursor integration testing, multi-AI orchestration validation,\npersonal planning bridge testing, and real-time performance metrics.",
      "functions": [
        {
          "name": "print_section",
          "docstring": "Print a formatted section header.",
          "line_range": [
            20,
            23
          ],
          "parameters": [
            "title",
            "emoji"
          ],
          "decorators": []
        },
        {
          "name": "print_subsection",
          "docstring": "Print a formatted subsection header.",
          "line_range": [
            25,
            28
          ],
          "parameters": [
            "title",
            "emoji"
          ],
          "decorators": []
        },
        {
          "name": "test_basic_ai_awareness",
          "docstring": "Test basic AI self-awareness capabilities.",
          "line_range": [
            30,
            51
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_cursor_integration",
          "docstring": "Test Cursor IDE integration capabilities.",
          "line_range": [
            53,
            124
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_real_time_metrics",
          "docstring": "Test real-time metrics calculation.",
          "line_range": [
            126,
            146
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_personal_planning_bridge",
          "docstring": "Test personal planning bridge functionality.",
          "line_range": [
            148,
            196
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_session_management",
          "docstring": "Test session management capabilities.",
          "line_range": [
            198,
            233
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_configuration_loading",
          "docstring": "Test configuration file loading.",
          "line_range": [
            235,
            255
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run_performance_benchmark",
          "docstring": "Run performance benchmarks for AI operations.",
          "line_range": [
            257,
            287
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "generate_diagnostic_report",
          "docstring": "Generate a comprehensive diagnostic report.",
          "line_range": [
            289,
            333
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "continuous_monitoring_mode",
          "docstring": "Run continuous monitoring of AI system health.",
          "line_range": [
            335,
            382
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_specific_component",
          "docstring": "Test a specific AI component in detail.",
          "line_range": [
            384,
            423
          ],
          "parameters": [
            "component_name"
          ],
          "decorators": []
        },
        {
          "name": "test_cli_commands",
          "docstring": "Test CLI command processing capabilities.",
          "line_range": [
            425,
            447
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_context_scenarios",
          "docstring": "Test context orchestrator scenarios.",
          "line_range": [
            449,
            466
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_copilot_features",
          "docstring": "Test copilot manager features.",
          "line_range": [
            468,
            485
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run_integration_health_check",
          "docstring": "Run comprehensive integration health check.",
          "line_range": [
            487,
            524
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "generate_optimization_suggestions",
          "docstring": "Generate automated optimization suggestions based on diagnostics.",
          "line_range": [
            526,
            597
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run_stress_test",
          "docstring": "Run stress test on AI system.",
          "line_range": [
            599,
            651
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Run comprehensive AI diagnostics.",
          "line_range": [
            653,
            738
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "print_section": [
          "len",
          "print"
        ],
        "print_subsection": [
          "len",
          "print"
        ],
        "test_basic_ai_awareness": [
          "discovery.discover_all_capabilities",
          "discovery.get_enhanced_capabilities_summary",
          "len",
          "print",
          "SystemCapabilityDiscovery",
          "discovery.get_comprehensive_ai_status",
          "print_section"
        ],
        "test_cursor_integration": [
          "response.get",
          "len",
          "print",
          "delegation.get",
          "context_data.get",
          "cursor_integration.get_comprehensive_cursor_response",
          "print_section",
          "create_cursor_integration",
          "print_subsection"
        ],
        "test_real_time_metrics": [
          "discovery._get_real_system_load",
          "discovery.get_cursor_status_report",
          "print",
          "SystemCapabilityDiscovery",
          "discovery._calculate_real_cache_hit_rate",
          "print_section"
        ],
        "test_personal_planning_bridge": [
          "bridge.get_goal_aligned_suggestions",
          "enumerate",
          "PersonalPlanningCursorBridge",
          "len",
          "top_feature.get",
          "bridge.get_priority_guidance",
          "print",
          "guidance.get",
          "print_section"
        ],
        "test_session_management": [
          "session_manager.save_session_context",
          "session_manager.start_session",
          "CursorSessionManager",
          "print",
          "print_section"
        ],
        "test_configuration_loading": [
          "len",
          "Path",
          "config_path.exists",
          "print",
          "open",
          "json.load",
          "print_section"
        ],
        "run_performance_benchmark": [
          "discovery.discover_all_capabilities",
          "time.time",
          "print",
          "SystemCapabilityDiscovery",
          "print_section",
          "create_cursor_integration"
        ],
        "generate_diagnostic_report": [
          "discovery.discover_all_capabilities",
          "len",
          "Path",
          "time.strftime",
          "print",
          "SystemCapabilityDiscovery",
          "open",
          "print_section",
          "json.dump"
        ],
        "continuous_monitoring_mode": [
          "discovery.discover_all_capabilities",
          "discovery._get_real_system_load",
          "time.sleep",
          "len",
          "time.strftime",
          "print",
          "SystemCapabilityDiscovery",
          "discovery._calculate_real_cache_hit_rate",
          "print_section"
        ],
        "test_specific_component": [
          "discovery.discover_all_capabilities",
          "enumerate",
          "list",
          "len",
          "test_copilot_features",
          "component_name.upper",
          "print",
          "SystemCapabilityDiscovery",
          "test_context_scenarios",
          "print_section",
          "test_cli_commands"
        ],
        "test_cli_commands": [
          "CLIConfig",
          "CLIUtils",
          "print",
          "CommandProcessor"
        ],
        "test_context_scenarios": [
          "create_context_orchestrator",
          "print"
        ],
        "test_copilot_features": [
          "feature.replace",
          "initialize_copilot",
          "print",
          "hasattr"
        ],
        "run_integration_health_check": [
          "response.get",
          "print",
          "cursor_integration.get_comprehensive_cursor_response",
          "print_section",
          "create_cursor_integration"
        ],
        "generate_optimization_suggestions": [
          "discovery.discover_all_capabilities",
          "enumerate",
          "len",
          "suggestions.append",
          "print",
          "SystemCapabilityDiscovery",
          "print_section"
        ],
        "run_stress_test": [
          "discovery.discover_all_capabilities",
          "enumerate",
          "time.time",
          "print",
          "SystemCapabilityDiscovery",
          "range",
          "delegation.get",
          "context_data.get",
          "print_section",
          "create_cursor_integration"
        ],
        "main": [
          "test_specific_component",
          "continuous_monitoring_mode",
          "run_stress_test",
          "test_func",
          "len",
          "time.time",
          "print",
          "generate_optimization_suggestions",
          "print_section",
          "run_integration_health_check"
        ]
      },
      "dependencies": [
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "CursorSessionManager",
        "Path",
        "PersonalPlanningCursorBridge",
        "SystemCapabilityDiscovery",
        "create_context_orchestrator",
        "create_cursor_integration",
        "initialize_copilot",
        "json",
        "llmstruct.ai_self_awareness",
        "llmstruct.cli_commands",
        "llmstruct.cli_config",
        "llmstruct.cli_utils",
        "llmstruct.context_orchestrator",
        "llmstruct.copilot",
        "llmstruct.cursor_integration",
        "os",
        "pathlib",
        "sys",
        "time"
      ],
      "hash": null,
      "artifact_id": "84c3e446-0383-4b7e-94b8-bd3e8e1b8b35"
    },
    {
      "module_id": "collector",
      "path": "collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "",
          "line_range": [
            13,
            17
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "is_text_file",
          "docstring": "Check if file is likely a text file based on extension.",
          "line_range": [
            20,
            31
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "collect_project",
          "docstring": "",
          "line_range": [
            34,
            66
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "Path",
          "gitignore_path.exists",
          "gitignore_parser.parse_gitignore"
        ],
        "is_text_file": [],
        "collect_project": [
          "logger.info",
          "any",
          "logger.error",
          "logger.warning",
          "len",
          "Path",
          "json.dump",
          "doc_files.items",
          "str",
          "root_dir.rglob",
          "gitignore",
          "open",
          "is_text_file",
          "f.read",
          "load_gitignore",
          "file_path.is_file"
        ]
      },
      "dependencies": [
        "Path",
        "gitignore_parser",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "2d7ea0bc-d5f3-4d05-9bd3-303206cdf0bd"
    },
    {
      "module_id": "debug_terminal",
      "path": "debug_terminal.py",
      "category": "core",
      "module_doc": "Debug Terminal Script - Fallback for when terminal output is not visible\nSaves all output to files for manual inspection",
      "functions": [
        {
          "name": "run_with_output_capture",
          "docstring": "Run command and capture output to both console and file.",
          "line_range": [
            13,
            78
          ],
          "parameters": [
            "command",
            "description"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Run common diagnostic commands with output capture.",
          "line_range": [
            80,
            110
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "run_with_output_capture": [
          "f.write",
          "len",
          "print",
          "subprocess.run",
          "open"
        ],
        "main": [
          "run_with_output_capture",
          "results.append",
          "print"
        ]
      },
      "dependencies": [
        "Path",
        "datetime",
        "os",
        "pathlib",
        "subprocess",
        "sys"
      ],
      "hash": null,
      "artifact_id": "db863cdf-2aad-45c6-a04b-ed9975fecc7b"
    },
    {
      "module_id": "final_system_check",
      "path": "final_system_check.py",
      "category": "core",
      "module_doc": "Final System Status Check - LLMStruct Modular CLI Integration\nComprehensive validation of all completed components",
      "functions": [
        {
          "name": "check_system_status",
          "docstring": "Comprehensive system status check",
          "line_range": [
            12,
            155
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "check_system_status": [
          "data.get",
          "i.get",
          "len",
          "t.get",
          "print",
          "open",
          "json.load"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "os",
        "pathlib",
        "sys"
      ],
      "hash": null,
      "artifact_id": "1ad84915-da92-4a24-9f78-eb168fb943a6"
    },
    {
      "module_id": "monitor_system",
      "path": "monitor_system.py",
      "category": "core",
      "module_doc": "System Monitor - Continuous logging for debugging terminal issues\nRuns in background and logs system status to files",
      "functions": [
        {
          "name": "log_system_status",
          "docstring": "Log current system status to file.",
          "line_range": [
            15,
            60
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Run continuous monitoring.",
          "line_range": [
            62,
            86
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "log_system_status": [
          "context.get",
          "f.write",
          "len",
          "Path",
          "timestamp.strftime",
          "wo.get_current_context",
          "WorkflowOrchestrator",
          "timestamp.isoformat",
          "str",
          "json.dumps",
          "open"
        ],
        "main": [
          "log_system_status",
          "len",
          "time.sleep",
          "print"
        ]
      },
      "dependencies": [
        "Path",
        "WorkflowOrchestrator",
        "datetime",
        "json",
        "llmstruct.workflow_orchestrator",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "time"
      ],
      "hash": null,
      "artifact_id": "ab69ba49-3c9a-49d8-bbf3-4f113114fca3"
    },
    {
      "module_id": "board_cli",
      "path": "board_cli.py",
      "category": "core",
      "module_doc": "CLI Kanban Board for llmstruct tasks and ideas\n- Reads data/tasks.json and data/ideas.json\n- Shows board in terminal: columns by status, rows by priority\n- Supports filtering, sorting, and shows links between tasks/ideas",
      "functions": [
        {
          "name": "load_json",
          "docstring": "",
          "line_range": [
            26,
            28
          ],
          "parameters": [
            "path"
          ],
          "decorators": []
        },
        {
          "name": "group_by_status_and_priority",
          "docstring": "",
          "line_range": [
            30,
            36
          ],
          "parameters": [
            "items",
            "kind"
          ],
          "decorators": []
        },
        {
          "name": "render_board",
          "docstring": "",
          "line_range": [
            38,
            64
          ],
          "parameters": [
            "board",
            "kind"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            66,
            74
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json": [
          "open",
          "json.load"
        ],
        "group_by_status_and_priority": [
          "defaultdict",
          "item.get"
        ],
        "render_board": [
          "Table",
          "links.append",
          "table.add_row",
          "Panel",
          "table.add_column",
          "links.extend",
          "item.get",
          "console.print",
          "kind.capitalize"
        ],
        "main": [
          "console.rule",
          "load_json",
          "ideas_data.get",
          "tasks_data.get",
          "group_by_status_and_priority",
          "render_board"
        ]
      },
      "dependencies": [
        "Console",
        "Panel",
        "Path",
        "Table",
        "box",
        "collections",
        "defaultdict",
        "json",
        "os",
        "pathlib",
        "rich",
        "rich.console",
        "rich.panel",
        "rich.table"
      ],
      "hash": null,
      "artifact_id": "be76e3ae-14d8-4ea3-83d1-b40682b1eee3"
    },
    {
      "module_id": "final_system_validation",
      "path": "final_system_validation.py",
      "category": "core",
      "module_doc": "Final system validation script for LLMStruct Modular CLI Integration",
      "functions": [
        {
          "name": "main",
          "docstring": "Run comprehensive system validation",
          "line_range": [
            13,
            238
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "main": [
          "status.upper",
          "len",
          "getattr",
          "next",
          "task.get",
          "create_cli_core",
          "__import__",
          "print",
          "subprocess.run",
          "open",
          "json.load"
        ]
      },
      "dependencies": [
        "Path",
        "create_cli_core",
        "json",
        "llmstruct.cli_core",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "time"
      ],
      "hash": null,
      "artifact_id": "366d4c68-4a20-4613-b574-210df9ba27be"
    },
    {
      "module_id": "force_ai_integration",
      "path": "force_ai_integration.py",
      "category": "core",
      "module_doc": "Force AI Integration Script\nInitializes middleware and monitoring to ensure AI uses llmstruct system.",
      "functions": [
        {
          "name": "force_ai_integration",
          "docstring": "Force AI to use llmstruct system.",
          "line_range": [
            18,
            106
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "check_integration_status",
          "docstring": "Check current AI integration status.",
          "line_range": [
            109,
            138
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "force_ai_integration": [
          "monitor.get_real_time_guidance",
          "initialize_ai_middleware",
          "Path",
          "middleware.process_ai_request",
          "str",
          "print",
          "record_ai_usage",
          "config_file.exists",
          "open",
          "initialize_ai_monitor",
          "json.dump"
        ],
        "check_integration_status": [
          "get_ai_monitor",
          "middleware.get_middleware_stats",
          "monitor.analyze_behavior_trends",
          "print",
          "get_ai_middleware"
        ]
      },
      "dependencies": [
        "AIWorkflowMode",
        "Path",
        "get_ai_middleware",
        "get_ai_monitor",
        "initialize_ai_middleware",
        "initialize_ai_monitor",
        "json",
        "llmstruct.ai_self_monitor",
        "llmstruct.ai_workflow_middleware",
        "pathlib",
        "record_ai_usage",
        "sys"
      ],
      "hash": null,
      "artifact_id": "1139f57b-6115-49f4-93fa-caa98f3dfef4"
    },
    {
      "module_id": "validate_schemas",
      "path": "validate_schemas.py",
      "category": "core",
      "module_doc": "JSON Schema Validation Script for llmstruct\nValidates all enhanced JSON files against their appropriate schemas.\nPart of TSK-130 implementation.",
      "functions": [
        {
          "name": "load_json",
          "docstring": "Load JSON file with error handling.",
          "line_range": [
            24,
            34
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_json_against_schema",
          "docstring": "Validate JSON data against schema.",
          "line_range": [
            37,
            53
          ],
          "parameters": [
            "json_data",
            "schema_data",
            "file_name"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            56,
            193
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": [
            15,
            21
          ],
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {
        "load_json": [
          "open",
          "json.load",
          "print"
        ],
        "validate_json_against_schema": [
          "str",
          "print",
          "validate"
        ],
        "main": [
          "errors.append",
          "validate_json_against_schema",
          "load_json",
          "print"
        ]
      },
      "dependencies": [
        "Draft7Validator",
        "ValidationError",
        "json",
        "jsonschema",
        "sys",
        "validate"
      ],
      "hash": null,
      "artifact_id": "8cf3d5db-62f0-44f9-b153-ecc4756ac544"
    },
    {
      "module_id": "validate_sessions",
      "path": "validate_sessions.py",
      "category": "core",
      "module_doc": "Session Schema Validation Script for llmstruct\nValidates session management JSON files against their schemas.\nFocused validation for session system only.",
      "functions": [
        {
          "name": "load_json",
          "docstring": "Load JSON file with error handling.",
          "line_range": [
            21,
            31
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_json_against_schema",
          "docstring": "Validate JSON data against schema.",
          "line_range": [
            33,
            52
          ],
          "parameters": [
            "json_data",
            "schema_data",
            "file_name"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            54,
            124
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": [
            13,
            19
          ],
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {
        "load_json": [
          "open",
          "json.load",
          "print"
        ],
        "validate_json_against_schema": [
          "list",
          "len",
          "str",
          "print",
          "validator.iter_errors",
          "Draft7Validator"
        ],
        "main": [
          "errors.append",
          "validate_json_against_schema",
          "load_json",
          "print"
        ]
      },
      "dependencies": [
        "Draft7Validator",
        "ValidationError",
        "json",
        "jsonschema",
        "sys",
        "validate"
      ],
      "hash": null,
      "artifact_id": "5600a6d8-c897-4fdc-ac16-3a1631753325"
    },
    {
      "module_id": "verify_llm_response",
      "path": "verify_llm_response.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_json_file",
          "docstring": "Load a JSON file and return its contents.",
          "line_range": [
            15,
            25
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "verify_response_with_struct",
          "docstring": "Verify llm_response.json against struct.json.",
          "line_range": [
            28,
            71
          ],
          "parameters": [
            "response_text",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "verify_response_without_struct",
          "docstring": "Verify llm_response.json based on LLMstruct principles.",
          "line_range": [
            74,
            108
          ],
          "parameters": [
            "response_text"
          ],
          "decorators": []
        },
        {
          "name": "generate_metrics",
          "docstring": "Generate metrics for the response per EXT-004.",
          "line_range": [
            111,
            141
          ],
          "parameters": [
            "response_data",
            "server_log"
          ],
          "decorators": []
        },
        {
          "name": "update_tasks_json",
          "docstring": "Append a new task to tasks.json.",
          "line_range": [
            144,
            151
          ],
          "parameters": [
            "tasks_file",
            "new_task"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            154,
            225
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json_file": [
          "logging.error",
          "json.load",
          "open"
        ],
        "verify_response_with_struct": [
          "expected_extensions.issubset",
          "re.findall",
          "set",
          "e.startswith",
          "logging.error",
          "logging.info",
          "expected_files.issubset",
          "struct_data.get",
          "expected_goals.issubset"
        ],
        "verify_response_without_struct": [
          "expected_extensions.issubset",
          "re.findall",
          "set",
          "logging.error",
          "logging.info",
          "principle.lower",
          "expected_files.issubset",
          "response_text.lower",
          "expected_goals.issubset"
        ],
        "generate_metrics": [
          "datetime.utcnow",
          "re.findall",
          "response_text.split",
          "len",
          "server_log.get"
        ],
        "update_tasks_json": [
          "logging.info",
          "load_json_file",
          "open",
          "tasks.get",
          "json.dump"
        ],
        "main": [
          "generate_metrics",
          "argparse.ArgumentParser",
          "json.dump",
          "parser.add_argument",
          "logging.info",
          "parser.parse_args",
          "update_tasks_json",
          "verify_response_without_struct",
          "verify_response_with_struct",
          "load_json_file",
          "open"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "argparse",
        "datetime",
        "json",
        "logging",
        "os",
        "re",
        "typing"
      ],
      "hash": null,
      "artifact_id": "10392321-baa8-4639-beb0-f44e92b53039"
    },
    {
      "module_id": "examples.python_project_utils",
      "path": "examples/python_project_utils.py",
      "category": "core",
      "module_doc": "Utility functions for the sample project.",
      "functions": [
        {
          "name": "helper",
          "docstring": "Help the main function.",
          "line_range": [
            6,
            8
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "log",
          "docstring": "Log a message.",
          "line_range": [
            11,
            13
          ],
          "parameters": [
            "message"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "helper": [
          "log"
        ],
        "log": [
          "logging.info"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": null,
      "artifact_id": "0452aaca-1b6b-4952-bf19-4f3611763d4f"
    },
    {
      "module_id": "examples.python_project_main",
      "path": "examples/python_project_main.py",
      "category": "core",
      "module_doc": "Main module for the sample project.",
      "functions": [
        {
          "name": "main",
          "docstring": "Run the program.",
          "line_range": [
            6,
            9
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "Execute the app.",
          "line_range": [
            15,
            17
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "App",
          "docstring": "Application class.",
          "line_range": [
            12,
            17
          ],
          "methods": [
            {
              "name": "run",
              "docstring": "Execute the app.",
              "line_range": [
                15,
                17
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "main": [
          "utils.helper",
          "print"
        ],
        "run": [
          "utils.log"
        ]
      },
      "dependencies": [
        "utils"
      ],
      "hash": null,
      "artifact_id": "87e97154-ab92-46b4-9f84-7562f127f54e"
    },
    {
      "module_id": "docs.cache",
      "path": "docs/cache.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize SQLite cache for JSON files.",
          "line_range": [
            18,
            22
          ],
          "parameters": [
            "self",
            "db_path"
          ],
          "decorators": []
        },
        {
          "name": "create_tables",
          "docstring": "Create tables for metadata and file paths.",
          "line_range": [
            24,
            42
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cache_json",
          "docstring": "Cache JSON metadata and store full file path.",
          "line_range": [
            44,
            64
          ],
          "parameters": [
            "self",
            "json_path",
            "artifact_id",
            "summary",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "get_metadata",
          "docstring": "Retrieve metadata by artifact_id.",
          "line_range": [
            66,
            79
          ],
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "get_full_json",
          "docstring": "Load full JSON by artifact_id.",
          "line_range": [
            81,
            94
          ],
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Close database connection.",
          "line_range": [
            96,
            98
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JSONCache",
          "docstring": "",
          "line_range": [
            17,
            98
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize SQLite cache for JSON files.",
              "line_range": [
                18,
                22
              ],
              "parameters": [
                "self",
                "db_path"
              ]
            },
            {
              "name": "create_tables",
              "docstring": "Create tables for metadata and file paths.",
              "line_range": [
                24,
                42
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cache_json",
              "docstring": "Cache JSON metadata and store full file path.",
              "line_range": [
                44,
                64
              ],
              "parameters": [
                "self",
                "json_path",
                "artifact_id",
                "summary",
                "tags"
              ]
            },
            {
              "name": "get_metadata",
              "docstring": "Retrieve metadata by artifact_id.",
              "line_range": [
                66,
                79
              ],
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "get_full_json",
              "docstring": "Load full JSON by artifact_id.",
              "line_range": [
                81,
                94
              ],
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "close",
              "docstring": "Close database connection.",
              "line_range": [
                96,
                98
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "sqlite3.connect",
          "self.create_tables"
        ],
        "create_tables": [],
        "cache_json": [
          "json_file.exists",
          "content.encode",
          "Path",
          "logging.error",
          "str",
          "json.dumps",
          "logging.info",
          "hashlib.sha256",
          "open",
          "f.read"
        ],
        "get_metadata": [
          "json.loads",
          "cursor.fetchone"
        ],
        "get_full_json": [
          "open",
          "json.load",
          "logging.error",
          "cursor.fetchone"
        ],
        "close": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "hashlib",
        "json",
        "logging",
        "pathlib",
        "sqlite3",
        "typing"
      ],
      "hash": null,
      "artifact_id": "c3bb4176-50fa-41e1-832e-170f97062cf2"
    },
    {
      "module_id": "docs.self_run",
      "path": "docs/self_run.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_struct",
          "docstring": "Filter struct.json or init.json based on prompt keywords.",
          "line_range": [
            17,
            35
          ],
          "parameters": [
            "struct",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "Attach filtered JSON to LLM prompt, using cache if available.",
          "line_range": [
            37,
            74
          ],
          "parameters": [
            "context_path",
            "prompt",
            "cache"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_struct": [
          "any",
          "module.get",
          "struct.get",
          "filter_json",
          "prompt.lower"
        ],
        "attach_to_llm_request": [
          "cache.get_metadata",
          "select_json",
          "Path",
          "filter_struct",
          "context_file.exists",
          "logging.error",
          "logging.info",
          "filter_json",
          "json.dumps",
          "cache.cache_json",
          "prompt.lower",
          "cache.get_full_json"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "JSONCache",
        "List",
        "Path",
        "cache",
        "filter_json",
        "json",
        "json_selector",
        "logging",
        "pathlib",
        "select_json",
        "typing"
      ],
      "hash": null,
      "artifact_id": "6b73a29b-a47e-4fce-9a57-2e0ada883073"
    },
    {
      "module_id": "docs.json_selector",
      "path": "docs/json_selector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_json",
          "docstring": "Filter JSON data by key-value pair and select fields.",
          "line_range": [
            17,
            29
          ],
          "parameters": [
            "data",
            "filter_key",
            "filter_value",
            "fields"
          ],
          "decorators": []
        },
        {
          "name": "select_json",
          "docstring": "Load and filter JSON file, optionally parsing partially.",
          "line_range": [
            31,
            72
          ],
          "parameters": [
            "json_path",
            "filter_key",
            "filter_value",
            "fields",
            "partial"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_json": [
          "data.get",
          "filtered.append",
          "item.get",
          "isinstance"
        ],
        "select_json": [
          "filtered.append",
          "json_file.exists",
          "ijson.parse",
          "path.append",
          "prefix.startswith",
          "Path",
          "f.seek",
          "logging.error",
          "filter_json",
          "current_item.get",
          "open",
          "json.load"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "ijson",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "c6ee0624-83e0-48b8-acbc-59ae89bbf2d9"
    },
    {
      "module_id": "docs.cli",
      "path": "docs/cli.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": [
            26,
            36
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from llmstruct.toml or return empty dict.",
          "line_range": [
            38,
            47
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": [
            49,
            58
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default /tmp) and return the path.",
          "line_range": [
            60,
            74
          ],
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": [
            76,
            83
          ],
          "parameters": [
            "response"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": [
            85,
            195
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": [
            197,
            237
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": [
            239,
            260
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": [
            262,
            264
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": [
            266,
            268
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": [
            270,
            272
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": [
            274,
            334
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "line.startswith",
          "Path",
          "logging.error",
          "gitignore_path.exists",
          "gitignore_path.open",
          "line.strip"
        ],
        "load_config": [
          "Path",
          "config_path.exists",
          "logging.error",
          "toml.load",
          "config_path\u30aa\u30fc\u30d7\u30f3"
        ],
        "read_file_content": [
          "Path",
          "path.open",
          "logging.error",
          "path.is_file",
          "f.read"
        ],
        "write_to_file": [
          "file_path.exists",
          "f.write",
          "logging.warning",
          "Path",
          "logging.info",
          "str",
          "base_path.mkdir",
          "logging.error",
          "file_path.open"
        ],
        "parse_files_from_response": [
          "filename.strip",
          "files.append",
          "content.strip",
          "re.findall"
        ],
        "interactive": [
          "get_folder_structure",
          "print",
          "load_gitignore",
          "write_to_file",
          "input",
          "files_to_write.append",
          "sorted",
          "read_file_content",
          "cache.close",
          "write_dir.startswith",
          "os.listdir",
          "parse",
          "user_input.lower",
          "parse_files_from_response",
          "write_match.group",
          "json.dumps",
          "scan_match.group",
          "re.search",
          "JSONCache",
          "logging.warning",
          "Path",
          "attach_to_llm_request",
          "LLMClient",
          "logging.error",
          "client.query"
        ],
        "parse": [
          "logging.warning",
          "Path",
          "generate_json",
          "logging.info",
          "logging.error",
          "cache.close",
          "load_config",
          "cache.cache_json",
          "config.get",
          "JSONCache",
          "load_gitignore",
          "json.dump"
        ],
        "query": [
          "Path",
          "LLMClient",
          "client.query",
          "logging.error",
          "logging.info",
          "cache.close",
          "JSONCache",
          "json.dump"
        ],
        "context": [
          "logging.warning"
        ],
        "dogfood": [
          "logging.warning"
        ],
        "review": [
          "logging.warning"
        ],
        "main": [
          "interactive_parser.add_argument",
          "dogfood",
          "subparsers.add_parser",
          "context_parser.add_argument",
          "context",
          "parse_parser.add_argument",
          "argparse.ArgumentParser",
          "interactive",
          "query_parser.add_argument",
          "review",
          "review_parser.add_argument",
          "asyncio.run",
          "parser.add_subparsers",
          "dogfood_parser.add_argument",
          "parser.parse_args",
          "parse",
          "query"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "generate_json",
        "get_folder_structure",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "logging",
        "os",
        "pathlib",
        "re",
        "toml",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "e5a5716e-66ec-4343-bf86-efc6acef369c"
    },
    {
      "module_id": "temp.update-singbox.logging_setup",
      "path": "temp/update-singbox/logging_setup.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "setup_logging",
          "docstring": "Configure logging with file and syslog handlers.",
          "line_range": [
            5,
            27
          ],
          "parameters": [
            "debug_level",
            "log_file",
            "max_log_size"
          ],
          "decorators": []
        },
        {
          "name": "rotate_logs",
          "docstring": "Rotate log file if it exceeds max_log_size.",
          "line_range": [
            29,
            41
          ],
          "parameters": [
            "log_file",
            "max_log_size"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "setup_logging": [
          "syslog_handler.setFormatter",
          "logging.FileHandler",
          "logger.setLevel",
          "logging.warning",
          "file_handler.setFormatter",
          "logger.addHandler",
          "logging.Formatter",
          "logging.getLogger",
          "rotate_logs"
        ],
        "rotate_logs": [
          "os.rename",
          "open",
          "range"
        ]
      },
      "dependencies": [
        "logging",
        "logging.handlers",
        "os"
      ],
      "hash": null,
      "artifact_id": "076fde08-4b06-475c-ac60-068c4744eeda"
    },
    {
      "module_id": "temp.update-singbox.install_wizard",
      "path": "temp/update-singbox/install_wizard.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "check_inquirer_version",
          "docstring": "Check if python-inquirer is installed and log its version.",
          "line_range": [
            18,
            33
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "create_dedicated_user",
          "docstring": "",
          "line_range": [
            42,
            54
          ],
          "parameters": [
            "username"
          ],
          "decorators": []
        },
        {
          "name": "set_directory_permissions",
          "docstring": "",
          "line_range": [
            56,
            59
          ],
          "parameters": [
            "username",
            "directories"
          ],
          "decorators": []
        },
        {
          "name": "create_virtualenv",
          "docstring": "",
          "line_range": [
            61,
            68
          ],
          "parameters": [
            "path"
          ],
          "decorators": []
        },
        {
          "name": "activate_virtualenv",
          "docstring": "",
          "line_range": [
            70,
            73
          ],
          "parameters": [
            "venv_path"
          ],
          "decorators": []
        },
        {
          "name": "get_file_hash",
          "docstring": "Compute SHA-256 hash of a file.",
          "line_range": [
            75,
            83
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "copy_files_to_installation_path",
          "docstring": "Copy files to destination, overwriting if contents differ.",
          "line_range": [
            85,
            116
          ],
          "parameters": [
            "source_files",
            "destination_path"
          ],
          "decorators": []
        },
        {
          "name": "get_server_list",
          "docstring": "Fetch server list using update_singbox.py -l.",
          "line_range": [
            118,
            148
          ],
          "parameters": [
            "url"
          ],
          "decorators": []
        },
        {
          "name": "get_server_list_with_exclusions",
          "docstring": "Fetch server list and mark exclusions.",
          "line_range": [
            150,
            160
          ],
          "parameters": [
            "url"
          ],
          "decorators": []
        },
        {
          "name": "parse_arguments",
          "docstring": "",
          "line_range": [
            162,
            169
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "validate_url",
          "docstring": "",
          "line_range": [
            171,
            180
          ],
          "parameters": [
            "url"
          ],
          "decorators": []
        },
        {
          "name": "ensure_install_path",
          "docstring": "",
          "line_range": [
            182,
            187
          ],
          "parameters": [
            "path"
          ],
          "decorators": []
        },
        {
          "name": "setup_systemd_service",
          "docstring": "",
          "line_range": [
            189,
            232
          ],
          "parameters": [
            "install_path",
            "timer_frequency",
            "service_verbosity",
            "install_link"
          ],
          "decorators": []
        },
        {
          "name": "display_exclusions_table",
          "docstring": "Display exclusions in a table format (Name, ID, Reason).",
          "line_range": [
            234,
            249
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run_installation_wizard",
          "docstring": "",
          "line_range": [
            251,
            424
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "render_choice",
          "docstring": "",
          "line_range": [
            37,
            40
          ],
          "parameters": [
            "self",
            "choice",
            "pointer"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CustomRender",
          "docstring": "Custom renderer to visually distinguish excluded servers.",
          "line_range": [
            35,
            40
          ],
          "methods": [
            {
              "name": "render_choice",
              "docstring": "",
              "line_range": [
                37,
                40
              ],
              "parameters": [
                "self",
                "choice",
                "pointer"
              ]
            }
          ],
          "bases": [
            "ConsoleRender"
          ]
        }
      ],
      "callgraph": {
        "check_inquirer_version": [
          "logging.warning",
          "logging.info",
          "print",
          "logging.error"
        ],
        "render_choice": [],
        "create_dedicated_user": [
          "subprocess.run",
          "open",
          "print",
          "sudoers_file.write"
        ],
        "set_directory_permissions": [
          "subprocess.run",
          "print"
        ],
        "create_virtualenv": [
          "subprocess.run",
          "print"
        ],
        "activate_virtualenv": [
          "subprocess.run"
        ],
        "get_file_hash": [
          "sha256.update",
          "sha256.hexdigest",
          "iter",
          "hashlib.sha256",
          "open",
          "f.read"
        ],
        "copy_files_to_installation_path": [
          "os.walk",
          "shutil.copy",
          "shutil.copytree",
          "os.makedirs",
          "print",
          "get_file_hash"
        ],
        "get_server_list": [
          "len",
          "logging.warning",
          "seen_names.add",
          "line.split",
          "set",
          "logging.info",
          "logging.error",
          "print",
          "server_list.append",
          "subprocess.run",
          "re.sub"
        ],
        "get_server_list_with_exclusions": [
          "load_exclusions",
          "check_inquirer_version",
          "get_server_list"
        ],
        "parse_arguments": [
          "parser.add_argument",
          "parser.parse_args",
          "range",
          "argparse.ArgumentParser"
        ],
        "validate_url": [
          "re.compile",
          "re.match"
        ],
        "ensure_install_path": [
          "print",
          "os.makedirs"
        ],
        "setup_systemd_service": [
          "timer_file.write",
          "service_file.write",
          "print",
          "subprocess.run",
          "open"
        ],
        "display_exclusions_table": [
          "load_exclusions",
          "exclusion_choices.append",
          "ex.get",
          "print"
        ],
        "run_installation_wizard": [
          "inquirer.Text",
          "map",
          "print",
          "subprocess.run",
          "validate_url",
          "inquirer.Checkbox",
          "parse_arguments",
          "get_server_list",
          "logging.info",
          "inquirer.prompt",
          "activate_virtualenv",
          "display_exclusions_table",
          "save_exclusions",
          "selected_indices.append",
          "copy_files_to_installation_path",
          "re.sub",
          "all_servers.index",
          "ensure_install_path",
          "CustomRender",
          "get_server_list_with_exclusions",
          "inquirer.List",
          "logging.error",
          "setup_systemd_service",
          "create_virtualenv"
        ]
      },
      "dependencies": [
        "ConsoleRender",
        "argparse",
        "exclude_servers",
        "get_server_list",
        "hashlib",
        "importlib.metadata",
        "inquirer",
        "inquirer.render.console",
        "load_exclusions",
        "logging",
        "modules.server_management",
        "os",
        "re",
        "save_exclusions",
        "shutil",
        "subprocess",
        "sys",
        "view_exclusions"
      ],
      "hash": null,
      "artifact_id": "a89f980c-6559-41f6-9961-250bfc6393f0"
    },
    {
      "module_id": "temp.update-singbox.update_singbox",
      "path": "temp/update-singbox/update_singbox.py",
      "category": "core",
      "module_doc": "Update sing-box configuration from a remote JSON source.\n\nThis script fetches proxy configurations from a specified URL, validates the\nselected protocol, generates a sing-box configuration file, and manages the\nsing-box service. It supports protocols like VLESS, Shadowsocks, VMess, Trojan,\nTUIC, and Hysteria2. By default, it enables auto-selection of servers using urltest.\nIf a specific server is selected by remarks or index, only that server is included.\n\nUsage:\n    python3 update_singbox.py -u <URL> [-r <remarks> | -i <index>] [-d]\n    Example: python3 update_singbox.py -u https://example.com/config -r \"Server1\"\n    Example: python3 update_singbox.py -u https://example.com/config -i 2 -d\n\nEnvironment Variables:\n    SINGBOX_LOG_FILE: Path to log file (default: /var/log/update_singbox.log)\n    SINGBOX_CONFIG_FILE: Path to config file (default: /etc/sing-box/config.json)\n    SINGBOX_BACKUP_FILE: Path to backup file (default: /etc/sing-box/config.json.bak)\n    SINGBOX_TEMPLATE_FILE: Path to template file (default: ./config.template.json)\n    SINGBOX_MAX_LOG_SIZE: Max log size in bytes (default: 1048576)\n    SINGBOX_URL: URL for proxy configuration (optional)\n    SINGBOX_REMARKS: Select server by remarks\n    SINGBOX_INDEX: Select server by index\n    SINGBOX_DEBUG: Set debug level: 0 for minimal, 1 for detailed, 2 for verbose\n    SINGBOX_PROXY: Proxy URL (e.g., socks5://127.0.0.1:1080 or https://proxy.example.com)",
      "functions": [
        {
          "name": "main",
          "docstring": "Main function to update sing-box configuration.",
          "line_range": [
            49,
            195
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "generate_config_after_exclusion",
          "docstring": "Generate configuration after applying exclusions.",
          "line_range": [
            197,
            234
          ],
          "parameters": [
            "json_data",
            "debug_level"
          ],
          "decorators": []
        },
        {
          "name": "parse_comma_separated_values",
          "docstring": "",
          "line_range": [
            51,
            52
          ],
          "parameters": [
            "value"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "main": [],
        "parse_comma_separated_values": [
          "value.split",
          "v.strip",
          "int"
        ],
        "generate_config_after_exclusion": [
          "chr",
          "enumerate",
          "outbounds.append",
          "isinstance",
          "generate_config",
          "logging.warning",
          "validate_protocol",
          "len",
          "apply_exclusions",
          "outbound.get",
          "load_exclusions",
          "logging.info",
          "excluded_ips.append"
        ]
      },
      "dependencies": [
        "apply_exclusions",
        "argparse",
        "clear_exclusions",
        "exclude_servers",
        "fetch_json",
        "generate_config",
        "generate_server_id",
        "json",
        "list_servers",
        "load_exclusions",
        "load_selected_config",
        "logging",
        "logging_setup",
        "manage_service",
        "modules.config_fetch",
        "modules.config_generate",
        "modules.protocol_validation",
        "modules.server_management",
        "modules.service_manage",
        "os",
        "remove_exclusions",
        "save_selected_config",
        "select_config",
        "setup_logging",
        "sys",
        "validate_protocol",
        "view_exclusions"
      ],
      "hash": null,
      "artifact_id": "43486279-75a6-4ab8-82b4-99807479371d"
    },
    {
      "module_id": "temp.update-singbox.utils.callgraph",
      "path": "temp/update-singbox/utils/callgraph.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "analyze_calls",
          "docstring": "",
          "line_range": [
            21,
            35
          ],
          "parameters": [
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "build_callgraph",
          "docstring": "",
          "line_range": [
            37,
            49
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            51,
            61
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            9,
            10
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "visit_Call",
          "docstring": "",
          "line_range": [
            12,
            19
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "",
          "line_range": [
            8,
            19
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                9,
                10
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "visit_Call",
              "docstring": "",
              "line_range": [
                12,
                19
              ],
              "parameters": [
                "self",
                "node"
              ]
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ]
        }
      ],
      "callgraph": {
        "__init__": [
          "set"
        ],
        "visit_Call": [
          "self.generic_visit",
          "isinstance"
        ],
        "analyze_calls": [
          "isinstance",
          "visitor.visit",
          "sorted",
          "ast.parse",
          "open",
          "f.read",
          "CallVisitor"
        ],
        "build_callgraph": [
          "any",
          "os.walk",
          "dirpath.split",
          "analyze_calls",
          "filename.endswith"
        ],
        "main": [
          "build_callgraph",
          "argparse.ArgumentParser",
          "parser.add_argument",
          "print",
          "parser.parse_args",
          "open",
          "json.dump"
        ]
      },
      "dependencies": [
        "argparse",
        "ast",
        "json",
        "os"
      ],
      "hash": null,
      "artifact_id": "42d4c1ed-e4a2-4d24-8911-3deebe3560f0"
    },
    {
      "module_id": "temp.update-singbox.utils.genstruct",
      "path": "temp/update-singbox/utils/genstruct.py",
      "category": "core",
      "module_doc": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b Python-\u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0432 JSON \u0441 \u0440\u0435\u0436\u0438\u043c\u0430\u043c\u0438 compact \u0438 detailed.",
      "functions": [
        {
          "name": "extract_compact",
          "docstring": "\u0418\u0437\u0432\u043b\u0435\u0447\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0438\u043c\u0435\u043d\u0430 \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0438 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0431\u0435\u0437 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432.",
          "line_range": [
            14,
            28
          ],
          "parameters": [
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "extract_detailed",
          "docstring": "\u0418\u0437\u0432\u043b\u0435\u0447\u044c \u0438\u043c\u0435\u043d\u0430, \u0441\u0438\u0433\u043d\u0430\u0442\u0443\u0440\u044b, \u0434\u043e\u043a\u0441\u0442\u0440\u0438\u043d\u0433\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0438 \u043a\u043b\u0430\u0441\u0441\u043e\u0432, \u0434\u043e\u043a\u0441\u0442\u0440\u0438\u043d\u0433 \u043c\u043e\u0434\u0443\u043b\u044f.",
          "line_range": [
            30,
            65
          ],
          "parameters": [
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "build_struct_json",
          "docstring": "",
          "line_range": [
            67,
            97
          ],
          "parameters": [
            "root_dir",
            "mode"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            99,
            110
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "get_signature",
          "docstring": "",
          "line_range": [
            43,
            48
          ],
          "parameters": [
            "func_node"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "extract_compact": [
          "file.read",
          "isinstance",
          "functions.append",
          "classes.append",
          "ast.parse",
          "ast.walk",
          "open"
        ],
        "extract_detailed": [
          "ast.parse",
          "open",
          "file.read",
          "ast.get_docstring"
        ],
        "get_signature": [
          "args.append"
        ],
        "build_struct_json": [
          "any",
          "os.walk",
          "dirpath.split",
          "extract_compact",
          "filename.endswith",
          "extract_detailed"
        ],
        "main": [
          "argparse.ArgumentParser",
          "build_struct_json",
          "parser.add_argument",
          "print",
          "parser.parse_args",
          "open",
          "json.dump"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Tuple",
        "argparse",
        "ast",
        "json",
        "os",
        "typing"
      ],
      "hash": null,
      "artifact_id": "4ccc50d9-4e5e-4ebb-9b0a-0051e9bd04b6"
    },
    {
      "module_id": "temp.update-singbox.modules.config_fetch",
      "path": "temp/update-singbox/modules/config_fetch.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "fetch_json",
          "docstring": "Fetch JSON from URL with optional proxy.",
          "line_range": [
            5,
            30
          ],
          "parameters": [
            "url",
            "proxy_url"
          ],
          "decorators": []
        },
        {
          "name": "select_config",
          "docstring": "Select proxy configuration by remarks or index.",
          "line_range": [
            32,
            54
          ],
          "parameters": [
            "json_data",
            "remarks",
            "index"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "fetch_json": [
          "requests.get",
          "error",
          "response.json",
          "response.raise_for_status"
        ],
        "select_config": [
          "ValueError",
          "item.get",
          "isinstance",
          "outbound.get"
        ]
      },
      "dependencies": [
        "error",
        "json",
        "logging",
        "requests"
      ],
      "hash": null,
      "artifact_id": "40acaf09-f766-4e13-a1bb-d721fc338884"
    },
    {
      "module_id": "temp.update-singbox.modules.__init__",
      "path": "temp/update-singbox/modules/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "143c88ac-3a03-4f24-bf7b-17a7e9d8ff18"
    },
    {
      "module_id": "temp.update-singbox.modules.protocol_validation",
      "path": "temp/update-singbox/modules/protocol_validation.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_protocol",
          "docstring": "Validate protocol and extract parameters.",
          "line_range": [
            3,
            88
          ],
          "parameters": [
            "config",
            "supported_protocols"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_protocol": [
          "error",
          "outbound.get",
          "ValueError",
          "outbound.update",
          "config.get"
        ]
      },
      "dependencies": [
        "error",
        "logging",
        "warning"
      ],
      "hash": null,
      "artifact_id": "76d410c0-3306-4216-8227-ff909b3d1120"
    },
    {
      "module_id": "temp.update-singbox.modules.config_generate",
      "path": "temp/update-singbox/modules/config_generate.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "generate_config",
          "docstring": "Generate sing-box configuration from template.",
          "line_range": [
            6,
            74
          ],
          "parameters": [
            "outbounds",
            "template_file",
            "config_file",
            "backup_file",
            "excluded_ips"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "generate_config": [
          "config.strip",
          "enumerate",
          "info",
          "f.write",
          "error",
          "rule.get",
          "os.rename",
          "len",
          "o.get",
          "outbound.get",
          "next",
          "FileNotFoundError",
          "json.dumps",
          "current_config_file.read",
          "current_config.strip",
          "subprocess.run",
          "open",
          "json.load"
        ]
      },
      "dependencies": [
        "error",
        "info",
        "json",
        "logging",
        "os",
        "subprocess"
      ],
      "hash": null,
      "artifact_id": "dd0b1622-75ce-493a-8835-e57b757a147a"
    },
    {
      "module_id": "temp.update-singbox.modules.utils",
      "path": "temp/update-singbox/modules/utils.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "handle_temp_file",
          "docstring": "Write content to a temporary file, validate, and move to target path.",
          "line_range": [
            7,
            20
          ],
          "parameters": [
            "content",
            "target_path",
            "validate_fn"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "handle_temp_file": [
          "validate_fn",
          "f.write",
          "error",
          "ValueError",
          "json.dumps",
          "shutil.move",
          "open",
          "tempfile.gettempdir"
        ]
      },
      "dependencies": [
        "error",
        "json",
        "logging",
        "os",
        "shutil",
        "tempfile"
      ],
      "hash": null,
      "artifact_id": "ddcad042-bc17-4e48-ae01-1496c28ac9dd"
    },
    {
      "module_id": "temp.update-singbox.modules.server_management",
      "path": "temp/update-singbox/modules/server_management.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "list_servers",
          "docstring": "List all supported outbounds with indices and details.",
          "line_range": [
            12,
            31
          ],
          "parameters": [
            "json_data",
            "supported_protocols",
            "debug_level"
          ],
          "decorators": []
        },
        {
          "name": "generate_server_id",
          "docstring": "Generate a unique ID for a server based on tag, protocol, and port.",
          "line_range": [
            33,
            36
          ],
          "parameters": [
            "server"
          ],
          "decorators": []
        },
        {
          "name": "handle_temp_file",
          "docstring": "Handle temporary file creation and validation.",
          "line_range": [
            38,
            46
          ],
          "parameters": [
            "content",
            "target_path",
            "validate_fn"
          ],
          "decorators": []
        },
        {
          "name": "load_exclusions",
          "docstring": "Load exclusions from the exclusion file.",
          "line_range": [
            48,
            53
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "save_exclusions",
          "docstring": "Save exclusions to the exclusion file.",
          "line_range": [
            55,
            58
          ],
          "parameters": [
            "exclusions"
          ],
          "decorators": []
        },
        {
          "name": "load_selected_config",
          "docstring": "Load selected configuration from file.",
          "line_range": [
            60,
            65
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "save_selected_config",
          "docstring": "Save selected configuration to file.",
          "line_range": [
            67,
            70
          ],
          "parameters": [
            "selected"
          ],
          "decorators": []
        },
        {
          "name": "apply_exclusions",
          "docstring": "Apply exclusions to the list of server configurations.",
          "line_range": [
            72,
            82
          ],
          "parameters": [
            "configs",
            "excluded_ids",
            "debug_level"
          ],
          "decorators": []
        },
        {
          "name": "exclude_servers",
          "docstring": "Exclude servers by index or name, supporting wildcards.",
          "line_range": [
            84,
            115
          ],
          "parameters": [
            "json_data",
            "exclude_list",
            "supported_protocols",
            "debug_level"
          ],
          "decorators": []
        },
        {
          "name": "remove_exclusions",
          "docstring": "Remove exclusions by index or name.",
          "line_range": [
            117,
            138
          ],
          "parameters": [
            "exclude_list",
            "json_data",
            "supported_protocols",
            "debug_level"
          ],
          "decorators": []
        },
        {
          "name": "view_exclusions",
          "docstring": "View current exclusions in a table format.",
          "line_range": [
            140,
            154
          ],
          "parameters": [
            "debug_level"
          ],
          "decorators": []
        },
        {
          "name": "clear_exclusions",
          "docstring": "Clear all current exclusions.",
          "line_range": [
            156,
            162
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "list_servers": [
          "isinstance",
          "print",
          "server.get"
        ],
        "generate_server_id": [
          "server.get",
          "hashlib.sha256",
          "identifier.encode"
        ],
        "handle_temp_file": [
          "validate_fn",
          "f.write",
          "ValueError",
          "json.dumps",
          "shutil.move",
          "open",
          "tempfile.gettempdir"
        ],
        "load_exclusions": [
          "open",
          "json.load"
        ],
        "save_exclusions": [
          "handle_temp_file"
        ],
        "load_selected_config": [
          "open",
          "json.load"
        ],
        "save_selected_config": [
          "handle_temp_file"
        ],
        "apply_exclusions": [
          "enumerate",
          "generate_server_id",
          "valid_configs.append",
          "print",
          "config.get"
        ],
        "exclude_servers": [
          "enumerate",
          "generate_server_id",
          "any",
          "int",
          "len",
          "fnmatch.fnmatch",
          "load_exclusions",
          "item.isdigit",
          "print",
          "new_exclusions.append",
          "save_exclusions",
          "json_data.get",
          "server.get"
        ],
        "remove_exclusions": [
          "enumerate",
          "generate_server_id",
          "int",
          "len",
          "item.startswith",
          "load_exclusions",
          "print",
          "save_exclusions",
          "json_data.get",
          "server.get"
        ],
        "view_exclusions": [
          "load_exclusions",
          "exclusion.get",
          "json.dumps",
          "print"
        ],
        "clear_exclusions": [
          "os.remove",
          "print"
        ]
      },
      "dependencies": [
        "datetime",
        "fnmatch",
        "hashlib",
        "json",
        "os",
        "shutil",
        "tempfile"
      ],
      "hash": null,
      "artifact_id": "a59761fb-c829-479c-b1e2-305ba527dc91"
    },
    {
      "module_id": "temp.update-singbox.modules.service_manage",
      "path": "temp/update-singbox/modules/service_manage.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "manage_service",
          "docstring": "Restart or start sing-box service.",
          "line_range": [
            5,
            17
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "manage_service": [
          "info",
          "error",
          "shutil.which",
          "EnvironmentError",
          "subprocess.run"
        ]
      },
      "dependencies": [
        "error",
        "info",
        "logging",
        "shutil",
        "subprocess"
      ],
      "hash": null,
      "artifact_id": "961b61a2-294e-4941-807b-f3f231c1cc93"
    },
    {
      "module_id": "temp.update-singbox.modules.module_installer",
      "path": "temp/update-singbox/modules/module_installer.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "install_dependencies",
          "docstring": "",
          "line_range": [
            6,
            11
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "install_dependencies": [
          "subprocess.run",
          "print"
        ]
      },
      "dependencies": [
        "subprocess",
        "sys"
      ],
      "hash": null,
      "artifact_id": "4d23efc7-b5d2-4f10-a2c6-cb74d98105cc"
    },
    {
      "module_id": "src.llmstruct.workflow_orchestrator",
      "path": "src/llmstruct/workflow_orchestrator.py",
      "category": "core",
      "module_doc": "AI Workflow Orchestrator - Integration Layer for Existing llmstruct Architecture\nExtends CopilotContextManager and SmartContextOrchestrator instead of duplicating",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface that integrates with existing llmstruct architecture",
          "line_range": [
            650,
            687
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__post_init__",
          "docstring": "",
          "line_range": [
            62,
            70
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__post_init__",
          "docstring": "",
          "line_range": [
            89,
            101
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            110,
            151
          ],
          "parameters": [
            "self",
            "project_root",
            "debug"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_onboarding_guide",
          "docstring": "Generate comprehensive AI onboarding guide using existing architecture",
          "line_range": [
            153,
            163
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_project_overview_from_struct",
          "docstring": "Get project overview from struct.json analysis",
          "line_range": [
            165,
            183
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_existing_architecture_guide",
          "docstring": "Guide to existing llmstruct architecture",
          "line_range": [
            185,
            207
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_copilot_integration_guide",
          "docstring": "Guide for proper CopilotContextManager usage",
          "line_range": [
            209,
            222
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_context_orchestration_guide",
          "docstring": "Guide for SmartContextOrchestrator usage",
          "line_range": [
            224,
            239
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_struct_analysis_guide",
          "docstring": "Guide for proper struct.json analysis approach",
          "line_range": [
            241,
            259
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_current_context",
          "docstring": "Get comprehensive current context using existing architecture",
          "line_range": [
            261,
            300
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_struct_analysis",
          "docstring": "Analyze struct.json for current codebase state",
          "line_range": [
            302,
            356
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_architecture_from_struct",
          "docstring": "Analyze architecture patterns from struct.json",
          "line_range": [
            358,
            376
          ],
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_function_duplication",
          "docstring": "Analyze function duplication across modules",
          "line_range": [
            378,
            399
          ],
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_complexity_metrics",
          "docstring": "Calculate complexity metrics from struct.json",
          "line_range": [
            401,
            417
          ],
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_complexity_score",
          "docstring": "Calculate overall complexity score",
          "line_range": [
            419,
            432
          ],
          "parameters": [
            "self",
            "stats"
          ],
          "decorators": []
        },
        {
          "name": "_get_orchestrator_state",
          "docstring": "Get SmartContextOrchestrator state",
          "line_range": [
            434,
            445
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "analyze_codebase_for_duplicates",
          "docstring": "Analyze codebase for duplicate functions using struct.json",
          "line_range": [
            447,
            495
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "sync_with_existing_architecture",
          "docstring": "Sync with existing llmstruct architecture instead of duplicating",
          "line_range": [
            497,
            520
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "create_task",
          "docstring": "Create new task (this is new functionality, not duplication)",
          "line_range": [
            526,
            554
          ],
          "parameters": [
            "self",
            "title",
            "description",
            "priority",
            "tags",
            "dependencies"
          ],
          "decorators": []
        },
        {
          "name": "get_active_tasks",
          "docstring": "Get all active tasks",
          "line_range": [
            556,
            564
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_json_safe",
          "docstring": "Safe JSON loading with error handling",
          "line_range": [
            566,
            576
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_save_json_safe",
          "docstring": "Safe JSON saving with error handling",
          "line_range": [
            578,
            587
          ],
          "parameters": [
            "self",
            "file_path",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_get_active_session_context",
          "docstring": "Get current session context",
          "line_range": [
            590,
            594
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_identify_key_components",
          "docstring": "Identify key components from struct analysis",
          "line_range": [
            596,
            607
          ],
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_get_workflow_patterns",
          "docstring": "Define workflow patterns that integrate with existing architecture",
          "line_range": [
            609,
            629
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_available_commands",
          "docstring": "Available commands that work with existing architecture",
          "line_range": [
            631,
            647
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TaskStatus",
          "docstring": "",
          "line_range": [
            29,
            34
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "SessionType",
          "docstring": "",
          "line_range": [
            37,
            42
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "Task",
          "docstring": "Structured task representation",
          "line_range": [
            46,
            70
          ],
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "",
              "line_range": [
                62,
                70
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "Session",
          "docstring": "AI work session with context and goals",
          "line_range": [
            74,
            101
          ],
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "",
              "line_range": [
                89,
                101
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "WorkflowOrchestrator",
          "docstring": "Integration layer that extends existing llmstruct architecture\nUses CopilotContextManager, SmartContextOrchestrator, and struct.json analysis",
          "line_range": [
            104,
            647
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                110,
                151
              ],
              "parameters": [
                "self",
                "project_root",
                "debug"
              ]
            },
            {
              "name": "get_ai_onboarding_guide",
              "docstring": "Generate comprehensive AI onboarding guide using existing architecture",
              "line_range": [
                153,
                163
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_project_overview_from_struct",
              "docstring": "Get project overview from struct.json analysis",
              "line_range": [
                165,
                183
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_existing_architecture_guide",
              "docstring": "Guide to existing llmstruct architecture",
              "line_range": [
                185,
                207
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_copilot_integration_guide",
              "docstring": "Guide for proper CopilotContextManager usage",
              "line_range": [
                209,
                222
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_context_orchestration_guide",
              "docstring": "Guide for SmartContextOrchestrator usage",
              "line_range": [
                224,
                239
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_struct_analysis_guide",
              "docstring": "Guide for proper struct.json analysis approach",
              "line_range": [
                241,
                259
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_current_context",
              "docstring": "Get comprehensive current context using existing architecture",
              "line_range": [
                261,
                300
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_struct_analysis",
              "docstring": "Analyze struct.json for current codebase state",
              "line_range": [
                302,
                356
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_analyze_architecture_from_struct",
              "docstring": "Analyze architecture patterns from struct.json",
              "line_range": [
                358,
                376
              ],
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_analyze_function_duplication",
              "docstring": "Analyze function duplication across modules",
              "line_range": [
                378,
                399
              ],
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_calculate_complexity_metrics",
              "docstring": "Calculate complexity metrics from struct.json",
              "line_range": [
                401,
                417
              ],
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_calculate_complexity_score",
              "docstring": "Calculate overall complexity score",
              "line_range": [
                419,
                432
              ],
              "parameters": [
                "self",
                "stats"
              ]
            },
            {
              "name": "_get_orchestrator_state",
              "docstring": "Get SmartContextOrchestrator state",
              "line_range": [
                434,
                445
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "analyze_codebase_for_duplicates",
              "docstring": "Analyze codebase for duplicate functions using struct.json",
              "line_range": [
                447,
                495
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "sync_with_existing_architecture",
              "docstring": "Sync with existing llmstruct architecture instead of duplicating",
              "line_range": [
                497,
                520
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "create_task",
              "docstring": "Create new task (this is new functionality, not duplication)",
              "line_range": [
                526,
                554
              ],
              "parameters": [
                "self",
                "title",
                "description",
                "priority",
                "tags",
                "dependencies"
              ]
            },
            {
              "name": "get_active_tasks",
              "docstring": "Get all active tasks",
              "line_range": [
                556,
                564
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_json_safe",
              "docstring": "Safe JSON loading with error handling",
              "line_range": [
                566,
                576
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_save_json_safe",
              "docstring": "Safe JSON saving with error handling",
              "line_range": [
                578,
                587
              ],
              "parameters": [
                "self",
                "file_path",
                "data"
              ]
            },
            {
              "name": "_get_active_session_context",
              "docstring": "Get current session context",
              "line_range": [
                590,
                594
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_identify_key_components",
              "docstring": "Identify key components from struct analysis",
              "line_range": [
                596,
                607
              ],
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_get_workflow_patterns",
              "docstring": "Define workflow patterns that integrate with existing architecture",
              "line_range": [
                609,
                629
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_available_commands",
              "docstring": "Available commands that work with existing architecture",
              "line_range": [
                631,
                647
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__post_init__": [],
        "__init__": [
          "CLIConfig",
          "Path",
          "str",
          "time.time",
          "print",
          "SystemCapabilityDiscovery",
          "SmartContextOrchestrator",
          "UniversalConverter",
          "CopilotContextManager"
        ],
        "get_ai_onboarding_guide": [
          "self._get_copilot_integration_guide",
          "self._get_context_orchestration_guide",
          "self._get_available_commands",
          "self._get_struct_analysis_guide",
          "self._get_workflow_patterns",
          "self._get_existing_architecture_guide",
          "self._get_project_overview_from_struct"
        ],
        "_get_project_overview_from_struct": [
          "self._identify_key_components",
          "logger.warning",
          "len",
          "self._analyze_architecture_from_struct",
          "struct_data.get",
          "struct_path.exists",
          "open",
          "json.load"
        ],
        "_get_existing_architecture_guide": [],
        "_get_copilot_integration_guide": [],
        "_get_context_orchestration_guide": [],
        "_get_struct_analysis_guide": [],
        "get_current_context": [
          "self._get_struct_analysis",
          "isinstance",
          "self.get_active_tasks",
          "logger.warning",
          "time.time",
          "str",
          "self._get_orchestrator_state",
          "print",
          "self._get_active_session_context"
        ],
        "_get_struct_analysis": [
          "logger.error",
          "len",
          "self._analyze_architecture_from_struct",
          "self._analyze_function_duplication",
          "time.time",
          "str",
          "print",
          "struct_data.get",
          "struct_path.exists",
          "open",
          "json.load",
          "self._calculate_complexity_metrics"
        ],
        "_analyze_architecture_from_struct": [
          "len",
          "Path",
          "list",
          "directories.items",
          "directories.keys",
          "struct_data.get"
        ],
        "_analyze_function_duplication": [
          "len",
          "function_names.items",
          "module.get",
          "struct_data.get"
        ],
        "_calculate_complexity_metrics": [
          "stats.get",
          "sum",
          "round",
          "len",
          "m.get",
          "struct_data.get",
          "self._calculate_complexity_score"
        ],
        "_calculate_complexity_score": [
          "stats.get",
          "round"
        ],
        "_get_orchestrator_state": [
          "str"
        ],
        "analyze_codebase_for_duplicates": [
          "self._get_struct_analysis",
          "duplication.get",
          "len",
          "time.time",
          "print",
          "struct_analysis.get",
          "recommendations.append"
        ],
        "sync_with_existing_architecture": [
          "json.dump",
          "str",
          "logger.error",
          "open"
        ],
        "create_task": [
          "logger.info",
          "Task",
          "asdict",
          "uuid.uuid4",
          "str",
          "self._load_json_safe",
          "self._save_json_safe"
        ],
        "get_active_tasks": [
          "t.get",
          "self._load_json_safe"
        ],
        "_load_json_safe": [
          "file_path.exists",
          "json.load",
          "logger.error",
          "open"
        ],
        "_save_json_safe": [
          "open",
          "logger.error",
          "json.dump"
        ],
        "_get_active_session_context": [
          "asdict"
        ],
        "_identify_key_components": [
          "len",
          "key_components.append",
          "module.get",
          "struct_data.get"
        ],
        "_get_workflow_patterns": [],
        "_get_available_commands": [],
        "main": [
          "context.get",
          "orchestrator.get_ai_onboarding_guide",
          "argparse.ArgumentParser",
          "len",
          "orchestrator.sync_with_existing_architecture",
          "parser.add_argument",
          "WorkflowOrchestrator",
          "json.dumps",
          "print",
          "orchestrator.get_current_context",
          "parser.parse_args",
          "results.items",
          "orchestrator.analyze_codebase_for_duplicates"
        ]
      },
      "dependencies": [
        "Any",
        "CLIConfig",
        "CopilotContextManager",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "SmartContextOrchestrator",
        "SystemCapabilityDiscovery",
        "Union",
        "UniversalConverter",
        "ai_self_awareness",
        "argparse",
        "asdict",
        "cli_config",
        "context_orchestrator",
        "copilot",
        "dataclass",
        "dataclasses",
        "datetime",
        "enum",
        "json",
        "logging",
        "os",
        "parsers.universal_converter",
        "pathlib",
        "time",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "6997674a-e5ff-4277-96bb-d61a426baa7f"
    },
    {
      "module_id": "src.llmstruct.cli_config",
      "path": "src/llmstruct/cli_config.py",
      "category": "core",
      "module_doc": "CLI configuration management.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize configuration manager.",
          "line_range": [
            20,
            24
          ],
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load configuration from llmstruct.toml.",
          "line_range": [
            26,
            34
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_cache_config",
          "docstring": "Get cache configuration section.",
          "line_range": [
            36,
            38
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_copilot_config",
          "docstring": "Get Copilot configuration section.",
          "line_range": [
            40,
            42
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_queue_config",
          "docstring": "Get queue configuration section.",
          "line_range": [
            44,
            46
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_config",
          "docstring": "Get context configuration section.",
          "line_range": [
            48,
            50
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_gitignore_patterns",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": [
            52,
            66
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_dirs",
          "docstring": "Get directories to exclude from scanning.",
          "line_range": [
            68,
            82
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_include_patterns",
          "docstring": "Get file patterns to include.",
          "line_range": [
            84,
            89
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_patterns",
          "docstring": "Get file patterns to exclude.",
          "line_range": [
            91,
            96
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_max_file_size",
          "docstring": "Get maximum file size for processing (in bytes).",
          "line_range": [
            98,
            100
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_auto_update_config",
          "docstring": "Get auto-update configuration.",
          "line_range": [
            102,
            104
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "is_auto_update_enabled",
          "docstring": "Check if auto-update is enabled.",
          "line_range": [
            106,
            108
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_struct_file_path",
          "docstring": "Get path to struct.json file.",
          "line_range": [
            110,
            112
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_file_path",
          "docstring": "Get path to context file.",
          "line_range": [
            114,
            116
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_config",
          "docstring": "Save current configuration to file.",
          "line_range": [
            118,
            124
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "update_config",
          "docstring": "Update configuration value.",
          "line_range": [
            126,
            131
          ],
          "parameters": [
            "self",
            "section",
            "key",
            "value"
          ],
          "decorators": []
        },
        {
          "name": "reload_config",
          "docstring": "Reload configuration from file.",
          "line_range": [
            133,
            135
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLIConfig",
          "docstring": "Manages CLI configuration from llmstruct.toml and other sources.",
          "line_range": [
            17,
            135
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize configuration manager.",
              "line_range": [
                20,
                24
              ],
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load configuration from llmstruct.toml.",
              "line_range": [
                26,
                34
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_cache_config",
              "docstring": "Get cache configuration section.",
              "line_range": [
                36,
                38
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_copilot_config",
              "docstring": "Get Copilot configuration section.",
              "line_range": [
                40,
                42
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_queue_config",
              "docstring": "Get queue configuration section.",
              "line_range": [
                44,
                46
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_config",
              "docstring": "Get context configuration section.",
              "line_range": [
                48,
                50
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_gitignore_patterns",
              "docstring": "Load and normalize patterns from .gitignore.",
              "line_range": [
                52,
                66
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_exclude_dirs",
              "docstring": "Get directories to exclude from scanning.",
              "line_range": [
                68,
                82
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_include_patterns",
              "docstring": "Get file patterns to include.",
              "line_range": [
                84,
                89
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_exclude_patterns",
              "docstring": "Get file patterns to exclude.",
              "line_range": [
                91,
                96
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_max_file_size",
              "docstring": "Get maximum file size for processing (in bytes).",
              "line_range": [
                98,
                100
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_auto_update_config",
              "docstring": "Get auto-update configuration.",
              "line_range": [
                102,
                104
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "is_auto_update_enabled",
              "docstring": "Check if auto-update is enabled.",
              "line_range": [
                106,
                108
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_struct_file_path",
              "docstring": "Get path to struct.json file.",
              "line_range": [
                110,
                112
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_file_path",
              "docstring": "Get path to context file.",
              "line_range": [
                114,
                116
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_config",
              "docstring": "Save current configuration to file.",
              "line_range": [
                118,
                124
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "update_config",
              "docstring": "Update configuration value.",
              "line_range": [
                126,
                131
              ],
              "parameters": [
                "self",
                "section",
                "key",
                "value"
              ]
            },
            {
              "name": "reload_config",
              "docstring": "Reload configuration from file.",
              "line_range": [
                133,
                135
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._load_config",
          "Path"
        ],
        "_load_config": [
          "logging.error",
          "toml.load"
        ],
        "get_cache_config": [],
        "get_copilot_config": [],
        "get_queue_config": [],
        "get_context_config": [],
        "get_gitignore_patterns": [
          "line.startswith",
          "Path",
          "logging.error",
          "gitignore_path.exists",
          "gitignore_path.open",
          "line.strip"
        ],
        "get_exclude_dirs": [
          "set",
          "list",
          "parsing_config.get",
          "cli_config.get"
        ],
        "get_include_patterns": [
          "parsing_config.get",
          "cli_config.get"
        ],
        "get_exclude_patterns": [
          "parsing_config.get",
          "cli_config.get"
        ],
        "get_max_file_size": [],
        "get_auto_update_config": [],
        "is_auto_update_enabled": [
          "self.get_auto_update_config"
        ],
        "get_struct_file_path": [],
        "get_context_file_path": [],
        "save_config": [
          "toml.dump",
          "logging.error"
        ],
        "update_config": [
          "self.save_config"
        ],
        "reload_config": [
          "self._load_config"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "logging",
        "pathlib",
        "toml",
        "typing"
      ],
      "hash": null,
      "artifact_id": "e0cc95cb-5fd1-4bca-856e-f538691ea7be"
    },
    {
      "module_id": "src.llmstruct.ai_self_monitor",
      "path": "src/llmstruct/ai_self_monitor.py",
      "category": "core",
      "module_doc": "AI Self-Monitoring System\nTracks AI usage patterns and ensures proper llmstruct integration.",
      "functions": [
        {
          "name": "initialize_ai_monitor",
          "docstring": "Initialize global AI monitor.",
          "line_range": [
            433,
            437
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_monitor",
          "docstring": "Get current AI monitor instance.",
          "line_range": [
            440,
            442
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "record_ai_usage",
          "docstring": "Global function to record AI usage.",
          "line_range": [
            445,
            456
          ],
          "parameters": [
            "query",
            "tools_used",
            "used_llmstruct",
            "context_tags",
            "metadata"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            60,
            80
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "record_ai_interaction",
          "docstring": "Record an AI interaction for monitoring.",
          "line_range": [
            82,
            121
          ],
          "parameters": [
            "self",
            "query",
            "tools_used",
            "used_llmstruct",
            "context_tags",
            "metadata"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_interaction_patterns",
          "docstring": "Analyze patterns in AI interaction.",
          "line_range": [
            123,
            157
          ],
          "parameters": [
            "self",
            "query",
            "tools_used",
            "used_llmstruct",
            "context_tags"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_effectiveness_score",
          "docstring": "Calculate effectiveness score for interaction.",
          "line_range": [
            159,
            188
          ],
          "parameters": [
            "self",
            "patterns",
            "tools_used",
            "used_llmstruct"
          ],
          "decorators": []
        },
        {
          "name": "_check_immediate_feedback",
          "docstring": "Check if immediate feedback/correction is needed.",
          "line_range": [
            190,
            209
          ],
          "parameters": [
            "self",
            "event"
          ],
          "decorators": []
        },
        {
          "name": "_log_immediate_feedback",
          "docstring": "Log immediate feedback message.",
          "line_range": [
            211,
            214
          ],
          "parameters": [
            "self",
            "message"
          ],
          "decorators": []
        },
        {
          "name": "analyze_behavior_trends",
          "docstring": "Analyze AI behavior trends over specified period.",
          "line_range": [
            216,
            300
          ],
          "parameters": [
            "self",
            "days"
          ],
          "decorators": []
        },
        {
          "name": "_generate_recommendations",
          "docstring": "Generate specific recommendations for improvement.",
          "line_range": [
            302,
            335
          ],
          "parameters": [
            "self",
            "llmstruct_usage",
            "context_awareness",
            "tool_diversity",
            "effectiveness"
          ],
          "decorators": []
        },
        {
          "name": "get_real_time_guidance",
          "docstring": "Get real-time guidance for current query.",
          "line_range": [
            337,
            365
          ],
          "parameters": [
            "self",
            "current_query"
          ],
          "decorators": []
        },
        {
          "name": "_load_events",
          "docstring": "Load events from disk.",
          "line_range": [
            367,
            379
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_events",
          "docstring": "Save events to disk.",
          "line_range": [
            381,
            388
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_analysis",
          "docstring": "Save behavior analysis to disk.",
          "line_range": [
            390,
            397
          ],
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "get_monitoring_report",
          "docstring": "Get comprehensive monitoring report.",
          "line_range": [
            399,
            426
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "AIBehaviorPattern",
          "docstring": "AI behavior patterns to monitor.",
          "line_range": [
            18,
            26
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "AIUsageEvent",
          "docstring": "Single AI usage event.",
          "line_range": [
            30,
            39
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "AIBehaviorAnalysis",
          "docstring": "Analysis of AI behavior patterns.",
          "line_range": [
            43,
            51
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "AISelfMonitor",
          "docstring": "Monitors AI behavior and ensures proper llmstruct integration.\nProvides feedback and corrective guidance.",
          "line_range": [
            54,
            426
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                60,
                80
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "record_ai_interaction",
              "docstring": "Record an AI interaction for monitoring.",
              "line_range": [
                82,
                121
              ],
              "parameters": [
                "self",
                "query",
                "tools_used",
                "used_llmstruct",
                "context_tags",
                "metadata"
              ]
            },
            {
              "name": "_analyze_interaction_patterns",
              "docstring": "Analyze patterns in AI interaction.",
              "line_range": [
                123,
                157
              ],
              "parameters": [
                "self",
                "query",
                "tools_used",
                "used_llmstruct",
                "context_tags"
              ]
            },
            {
              "name": "_calculate_effectiveness_score",
              "docstring": "Calculate effectiveness score for interaction.",
              "line_range": [
                159,
                188
              ],
              "parameters": [
                "self",
                "patterns",
                "tools_used",
                "used_llmstruct"
              ]
            },
            {
              "name": "_check_immediate_feedback",
              "docstring": "Check if immediate feedback/correction is needed.",
              "line_range": [
                190,
                209
              ],
              "parameters": [
                "self",
                "event"
              ]
            },
            {
              "name": "_log_immediate_feedback",
              "docstring": "Log immediate feedback message.",
              "line_range": [
                211,
                214
              ],
              "parameters": [
                "self",
                "message"
              ]
            },
            {
              "name": "analyze_behavior_trends",
              "docstring": "Analyze AI behavior trends over specified period.",
              "line_range": [
                216,
                300
              ],
              "parameters": [
                "self",
                "days"
              ]
            },
            {
              "name": "_generate_recommendations",
              "docstring": "Generate specific recommendations for improvement.",
              "line_range": [
                302,
                335
              ],
              "parameters": [
                "self",
                "llmstruct_usage",
                "context_awareness",
                "tool_diversity",
                "effectiveness"
              ]
            },
            {
              "name": "get_real_time_guidance",
              "docstring": "Get real-time guidance for current query.",
              "line_range": [
                337,
                365
              ],
              "parameters": [
                "self",
                "current_query"
              ]
            },
            {
              "name": "_load_events",
              "docstring": "Load events from disk.",
              "line_range": [
                367,
                379
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_events",
              "docstring": "Save events to disk.",
              "line_range": [
                381,
                388
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_analysis",
              "docstring": "Save behavior analysis to disk.",
              "line_range": [
                390,
                397
              ],
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "get_monitoring_report",
              "docstring": "Get comprehensive monitoring report.",
              "line_range": [
                399,
                426
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "logger.info",
          "Path",
          "self._load_events"
        ],
        "record_ai_interaction": [
          "datetime.now",
          "len",
          "self._check_immediate_feedback",
          "self._save_events",
          "AIUsageEvent",
          "self._analyze_interaction_patterns",
          "self._calculate_effectiveness_score"
        ],
        "_analyze_interaction_patterns": [
          "patterns.append",
          "any",
          "query.lower"
        ],
        "_calculate_effectiveness_score": [
          "pattern_scores.get",
          "len",
          "set",
          "min"
        ],
        "_check_immediate_feedback": [
          "any",
          "self._log_immediate_feedback"
        ],
        "_log_immediate_feedback": [
          "print",
          "logger.warning"
        ],
        "analyze_behavior_trends": [
          "strengths.append",
          "any",
          "datetime.fromisoformat",
          "sum",
          "all_tools.update",
          "AIBehaviorAnalysis",
          "len",
          "self._generate_recommendations",
          "set",
          "self._save_analysis",
          "timedelta",
          "improvements.append",
          "datetime.now"
        ],
        "_generate_recommendations": [
          "recommendations.extend",
          "recommendations.append"
        ],
        "get_real_time_guidance": [
          "guidance.append",
          "current_query.lower",
          "any"
        ],
        "_load_events": [
          "logger.info",
          "logger.error",
          "len",
          "AIUsageEvent",
          "open",
          "json.load"
        ],
        "_save_events": [
          "logger.error",
          "open",
          "asdict",
          "json.dump"
        ],
        "_save_analysis": [
          "logger.error",
          "open",
          "asdict",
          "json.dump"
        ],
        "get_monitoring_report": [
          "chr",
          "len",
          "self.analyze_behavior_trends",
          "datetime.now"
        ],
        "initialize_ai_monitor": [
          "AISelfMonitor"
        ],
        "get_ai_monitor": [],
        "record_ai_usage": [
          "_monitor_instance.record_ai_interaction"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "Set",
        "asdict",
        "dataclass",
        "dataclasses",
        "datetime",
        "enum",
        "json",
        "logging",
        "pathlib",
        "time",
        "timedelta",
        "typing"
      ],
      "hash": null,
      "artifact_id": "1cf7f69f-2d01-42bd-9313-a653bca65ad5"
    },
    {
      "module_id": "src.llmstruct.grok",
      "path": "src/llmstruct/grok.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "test_grok",
          "docstring": "",
          "line_range": [
            24,
            30
          ],
          "parameters": [
            "api_key",
            "prompt",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            6,
            11
          ],
          "parameters": [
            "self",
            "api_key",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "generate",
          "docstring": "",
          "line_range": [
            13,
            21
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GrokClient",
          "docstring": "",
          "line_range": [
            5,
            21
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                6,
                11
              ],
              "parameters": [
                "self",
                "api_key",
                "proxy"
              ]
            },
            {
              "name": "generate",
              "docstring": "",
              "line_range": [
                13,
                21
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "requests.Session"
        ],
        "generate": [
          "prompt.split",
          "response.json",
          "len",
          "response.raise_for_status"
        ],
        "test_grok": [
          "time.perf_counter",
          "client.generate",
          "GrokClient"
        ]
      },
      "dependencies": [
        "requests",
        "time"
      ],
      "hash": null,
      "artifact_id": "2d2ba98d-0802-494c-b5b0-9ea707aa9b94"
    },
    {
      "module_id": "src.llmstruct.cli_commands",
      "path": "src/llmstruct/cli_commands.py",
      "category": "core",
      "module_doc": "CLI command processing and handlers.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize command processor.",
          "line_range": [
            33,
            72
          ],
          "parameters": [
            "self",
            "root_dir",
            "config",
            "utils"
          ],
          "decorators": []
        },
        {
          "name": "set_cache",
          "docstring": "Set cache instance.",
          "line_range": [
            74,
            76
          ],
          "parameters": [
            "self",
            "cache"
          ],
          "decorators": []
        },
        {
          "name": "set_copilot",
          "docstring": "Set Copilot manager instance.",
          "line_range": [
            78,
            80
          ],
          "parameters": [
            "self",
            "copilot_manager"
          ],
          "decorators": []
        },
        {
          "name": "process_command",
          "docstring": "Process a command starting with /.",
          "line_range": [
            82,
            98
          ],
          "parameters": [
            "self",
            "command_line"
          ],
          "decorators": []
        },
        {
          "name": "process_prompt",
          "docstring": "Process a regular user prompt (not a command).",
          "line_range": [
            100,
            152
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "cmd_help",
          "docstring": "Show help information.",
          "line_range": [
            154,
            217
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_workspace",
          "docstring": "Handle workspace state and permissions management.",
          "line_range": [
            219,
            334
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_mode",
          "docstring": "Handle context mode operations with workspace integration.",
          "line_range": [
            336,
            437
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_view",
          "docstring": "View file or directory contents.",
          "line_range": [
            439,
            478
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_write",
          "docstring": "Write content to a file.",
          "line_range": [
            480,
            505
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_queue",
          "docstring": "Handle queue operations.",
          "line_range": [
            507,
            549
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_cache",
          "docstring": "Handle cache operations.",
          "line_range": [
            551,
            590
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_copilot",
          "docstring": "Handle Copilot operations.",
          "line_range": [
            592,
            626
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_config",
          "docstring": "Handle configuration operations.",
          "line_range": [
            628,
            660
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_status",
          "docstring": "Show system status.",
          "line_range": [
            662,
            676
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_backup",
          "docstring": "Create backup of a file.",
          "line_range": [
            678,
            693
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_parse",
          "docstring": "Parse project structure.",
          "line_range": [
            695,
            715
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_audit",
          "docstring": "Handle audit operations.",
          "line_range": [
            717,
            743
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_auto_update",
          "docstring": "Handle auto-update operations.",
          "line_range": [
            745,
            765
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_struct_status",
          "docstring": "Handle struct status operations.",
          "line_range": [
            767,
            791
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_context",
          "docstring": "Handle context operations.",
          "line_range": [
            793,
            849
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_session",
          "docstring": "Handle session operations.",
          "line_range": [
            851,
            902
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CommandProcessor",
          "docstring": "Processes CLI commands and user prompts.",
          "line_range": [
            30,
            902
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize command processor.",
              "line_range": [
                33,
                72
              ],
              "parameters": [
                "self",
                "root_dir",
                "config",
                "utils"
              ]
            },
            {
              "name": "set_cache",
              "docstring": "Set cache instance.",
              "line_range": [
                74,
                76
              ],
              "parameters": [
                "self",
                "cache"
              ]
            },
            {
              "name": "set_copilot",
              "docstring": "Set Copilot manager instance.",
              "line_range": [
                78,
                80
              ],
              "parameters": [
                "self",
                "copilot_manager"
              ]
            },
            {
              "name": "process_command",
              "docstring": "Process a command starting with /.",
              "line_range": [
                82,
                98
              ],
              "parameters": [
                "self",
                "command_line"
              ]
            },
            {
              "name": "process_prompt",
              "docstring": "Process a regular user prompt (not a command).",
              "line_range": [
                100,
                152
              ],
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "cmd_help",
              "docstring": "Show help information.",
              "line_range": [
                154,
                217
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_workspace",
              "docstring": "Handle workspace state and permissions management.",
              "line_range": [
                219,
                334
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_mode",
              "docstring": "Handle context mode operations with workspace integration.",
              "line_range": [
                336,
                437
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_view",
              "docstring": "View file or directory contents.",
              "line_range": [
                439,
                478
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_write",
              "docstring": "Write content to a file.",
              "line_range": [
                480,
                505
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_queue",
              "docstring": "Handle queue operations.",
              "line_range": [
                507,
                549
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_cache",
              "docstring": "Handle cache operations.",
              "line_range": [
                551,
                590
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_copilot",
              "docstring": "Handle Copilot operations.",
              "line_range": [
                592,
                626
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_config",
              "docstring": "Handle configuration operations.",
              "line_range": [
                628,
                660
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_status",
              "docstring": "Show system status.",
              "line_range": [
                662,
                676
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_backup",
              "docstring": "Create backup of a file.",
              "line_range": [
                678,
                693
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_parse",
              "docstring": "Parse project structure.",
              "line_range": [
                695,
                715
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_audit",
              "docstring": "Handle audit operations.",
              "line_range": [
                717,
                743
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "handle_auto_update",
              "docstring": "Handle auto-update operations.",
              "line_range": [
                745,
                765
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "handle_struct_status",
              "docstring": "Handle struct status operations.",
              "line_range": [
                767,
                791
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_context",
              "docstring": "Handle context operations.",
              "line_range": [
                793,
                849
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_session",
              "docstring": "Handle session operations.",
              "line_range": [
                851,
                902
              ],
              "parameters": [
                "self",
                "args"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "WorkspaceStateManager",
          "print"
        ],
        "set_cache": [],
        "set_copilot": [],
        "process_command": [
          "len",
          "command_line.strip",
          "logging.error",
          "print",
          "command_line.split"
        ],
        "process_prompt": [
          "get_optimized_context",
          "prompt.strip",
          "CopilotEvent",
          "logging.warning",
          "len",
          "context_info.get",
          "logging.info",
          "logging.error",
          "print",
          "context_data.get"
        ],
        "cmd_help": [
          "print"
        ],
        "cmd_workspace": [
          "override.get",
          "permissions.get",
          "len",
          "state.get",
          "entry.get",
          "args.strip",
          "result.get",
          "logging.error",
          "boundaries.get",
          "print",
          "action_args.split",
          "int"
        ],
        "cmd_mode": [
          "get_optimized_context",
          "metrics.get",
          "permissions.get",
          "args.upper",
          "re.findall",
          "len",
          "args.lower",
          "args.strip",
          "result.get",
          "print",
          "context_data.get"
        ],
        "cmd_view": [
          "os.listdir",
          "sorted",
          "print",
          "args.strip"
        ],
        "cmd_write": [
          "len",
          "args.split",
          "print",
          "content.endswith",
          "content.startswith"
        ],
        "cmd_queue": [
          "enumerate",
          "os.remove",
          "queue_data.get",
          "cmd.get",
          "len",
          "args.strip",
          "print",
          "open",
          "json.load"
        ],
        "cmd_cache": [
          "stats.get",
          "len",
          "args.strip",
          "print",
          "os.listdir"
        ],
        "cmd_copilot": [
          "args.strip",
          "json.dumps",
          "print",
          "open",
          "json.load"
        ],
        "cmd_config": [
          "json.dumps",
          "print",
          "args.strip"
        ],
        "cmd_status": [
          "print"
        ],
        "cmd_backup": [
          "print",
          "args.strip"
        ],
        "cmd_parse": [
          "generate_json",
          "print"
        ],
        "cmd_audit": [
          "print",
          "args.strip"
        ],
        "handle_auto_update": [
          "generate_json",
          "print"
        ],
        "handle_struct_status": [
          "datetime.fromtimestamp",
          "os.stat",
          "len",
          "print",
          "struct_data.get",
          "open",
          "json.load"
        ],
        "cmd_context": [
          "get_optimized_context",
          "metrics.get",
          "len",
          "args.strip",
          "print",
          "context_data.get"
        ],
        "cmd_session": [
          "state.get",
          "len",
          "args.strip",
          "print",
          "datetime.now"
        ]
      },
      "dependencies": [
        "Any",
        "CLIConfig",
        "CLIUtils",
        "CopilotContextManager",
        "CopilotEvent",
        "Dict",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "WorkspaceStateManager",
        "cli_config",
        "cli_utils",
        "copilot",
        "create_context_orchestrator",
        "datetime",
        "generate_json",
        "get_optimized_context",
        "get_optimized_context_for_scenario",
        "initialize_copilot",
        "json",
        "llmstruct.cache",
        "llmstruct.context_orchestrator",
        "llmstruct.copilot",
        "llmstruct.generators.json_generator",
        "logging",
        "os",
        "pathlib",
        "re",
        "subprocess",
        "sys",
        "trigger_copilot_event",
        "typing",
        "workspace"
      ],
      "hash": null,
      "artifact_id": "777cc9c8-4507-4f7e-8f78-5acda0a11508"
    },
    {
      "module_id": "src.llmstruct.context_orchestrator",
      "path": "src/llmstruct/context_orchestrator.py",
      "category": "core",
      "module_doc": "Smart Context Orchestration for LLMStruct\nOptimizes context loading for different LLM usage scenarios",
      "functions": [
        {
          "name": "create_context_orchestrator",
          "docstring": "Factory function to create context orchestrator.",
          "line_range": [
            506,
            508
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_optimized_context",
          "docstring": "Get optimized context for scenario - convenience function.\n\nArgs:\n    project_root: Project root directory\n    scenario: Usage scenario (cli_direct, vscode_copilot, session_work)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
          "line_range": [
            511,
            543
          ],
          "parameters": [
            "project_root",
            "scenario",
            "file_path",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            57,
            75
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load context orchestration configuration.",
          "line_range": [
            77,
            119
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_for_scenario",
          "docstring": "Get optimized context for specific usage scenario.\n\nArgs:\n    scenario: Usage scenario (cli_direct, vscode_copilot, etc.)\n    file_path: Optional file path for focused context\n    custom_budget: Optional custom token budget\n    \nReturns:\n    Optimized context dictionary",
          "line_range": [
            121,
            161
          ],
          "parameters": [
            "self",
            "scenario",
            "file_path",
            "custom_budget"
          ],
          "decorators": []
        },
        {
          "name": "_get_budget_for_scenario",
          "docstring": "Create budget configuration for scenario.",
          "line_range": [
            163,
            172
          ],
          "parameters": [
            "self",
            "scenario_config"
          ],
          "decorators": []
        },
        {
          "name": "_load_full_context",
          "docstring": "Load complete context without token restrictions.",
          "line_range": [
            174,
            187
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_extract_relationship_summary",
          "docstring": "\u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u043a\u0440\u0430\u0442\u043a\u0438\u0439 \u0433\u0440\u0430\u0444 \u0441\u0432\u044f\u0437\u0435\u0439 \u043c\u0435\u0436\u0434\u0443 \u043c\u043e\u0434\u0443\u043b\u044f\u043c\u0438 \u0438\u0437 struct.json:\n- module_id, path\n- dependencies (\u0442\u043e\u043b\u044c\u043a\u043e \u0438\u043c\u0435\u043d\u0430 \u043c\u043e\u0434\u0443\u043b\u0435\u0439)\n- \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b/\u0444\u0443\u043d\u043a\u0446\u0438\u0438",
          "line_range": [
            189,
            216
          ],
          "parameters": [
            "self",
            "max_modules"
          ],
          "decorators": []
        },
        {
          "name": "_load_focused_context",
          "docstring": "Load focused context optimized for VS Code Copilot.\n- \u0412\u0441\u0435\u0433\u0434\u0430 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 summary \u0438\u0437 init.json (\u0443\u0440\u043e\u0432\u0435\u043d\u044c 1)\n- relationship_context (structural) \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 file_path \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434 \u0438\u043b\u0438 \u044f\u0432\u043d\u043e structural \u0437\u0430\u043f\u0440\u043e\u0441",
          "line_range": [
            218,
            275
          ],
          "parameters": [
            "self",
            "file_path",
            "budget"
          ],
          "decorators": []
        },
        {
          "name": "_load_session_context",
          "docstring": "Load session-specific context.",
          "line_range": [
            277,
            299
          ],
          "parameters": [
            "self",
            "budget"
          ],
          "decorators": []
        },
        {
          "name": "_load_minimal_context",
          "docstring": "Load minimal context for quick operations.",
          "line_range": [
            301,
            319
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_source_with_filtering",
          "docstring": "Load source with optional filtering based on budget.",
          "line_range": [
            321,
            344
          ],
          "parameters": [
            "self",
            "source_name",
            "budget"
          ],
          "decorators": []
        },
        {
          "name": "_get_file_context",
          "docstring": "Get context specific to a file.",
          "line_range": [
            346,
            357
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_extract_essential_parts",
          "docstring": "Extract essential parts of data to fit token budget.",
          "line_range": [
            359,
            381
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_filter_for_current_session",
          "docstring": "Filter data to items relevant to current session.",
          "line_range": [
            383,
            422
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_extract_summary",
          "docstring": "Extract summary information from data.",
          "line_range": [
            424,
            443
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_apply_section_filtering",
          "docstring": "Apply section filtering to exclude specified sections.",
          "line_range": [
            445,
            457
          ],
          "parameters": [
            "self",
            "data",
            "exclude_sections"
          ],
          "decorators": []
        },
        {
          "name": "_update_metrics",
          "docstring": "Update performance metrics.",
          "line_range": [
            459,
            477
          ],
          "parameters": [
            "self",
            "scenario",
            "context",
            "load_time"
          ],
          "decorators": []
        },
        {
          "name": "get_metrics_summary",
          "docstring": "Get summary of context loading metrics.",
          "line_range": [
            479,
            494
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_metrics",
          "docstring": "Save metrics to file for analysis.",
          "line_range": [
            496,
            501
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ContextMode",
          "docstring": "Context loading modes for different scenarios.",
          "line_range": [
            17,
            22
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextLevel",
          "docstring": "Progressive context levels with token budgets.",
          "line_range": [
            25,
            30
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextBudget",
          "docstring": "Token budget configuration for context loading.",
          "line_range": [
            34,
            39
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ContextMetrics",
          "docstring": "Metrics for context loading performance.",
          "line_range": [
            43,
            48
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "SmartContextOrchestrator",
          "docstring": "Orchestrates context loading based on usage scenario and token budget.\nProvides optimized context for different LLM integration patterns.",
          "line_range": [
            51,
            501
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                57,
                75
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load context orchestration configuration.",
              "line_range": [
                77,
                119
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_for_scenario",
              "docstring": "Get optimized context for specific usage scenario.\n\nArgs:\n    scenario: Usage scenario (cli_direct, vscode_copilot, etc.)\n    file_path: Optional file path for focused context\n    custom_budget: Optional custom token budget\n    \nReturns:\n    Optimized context dictionary",
              "line_range": [
                121,
                161
              ],
              "parameters": [
                "self",
                "scenario",
                "file_path",
                "custom_budget"
              ]
            },
            {
              "name": "_get_budget_for_scenario",
              "docstring": "Create budget configuration for scenario.",
              "line_range": [
                163,
                172
              ],
              "parameters": [
                "self",
                "scenario_config"
              ]
            },
            {
              "name": "_load_full_context",
              "docstring": "Load complete context without token restrictions.",
              "line_range": [
                174,
                187
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_extract_relationship_summary",
              "docstring": "\u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u043a\u0440\u0430\u0442\u043a\u0438\u0439 \u0433\u0440\u0430\u0444 \u0441\u0432\u044f\u0437\u0435\u0439 \u043c\u0435\u0436\u0434\u0443 \u043c\u043e\u0434\u0443\u043b\u044f\u043c\u0438 \u0438\u0437 struct.json:\n- module_id, path\n- dependencies (\u0442\u043e\u043b\u044c\u043a\u043e \u0438\u043c\u0435\u043d\u0430 \u043c\u043e\u0434\u0443\u043b\u0435\u0439)\n- \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b/\u0444\u0443\u043d\u043a\u0446\u0438\u0438",
              "line_range": [
                189,
                216
              ],
              "parameters": [
                "self",
                "max_modules"
              ]
            },
            {
              "name": "_load_focused_context",
              "docstring": "Load focused context optimized for VS Code Copilot.\n- \u0412\u0441\u0435\u0433\u0434\u0430 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 summary \u0438\u0437 init.json (\u0443\u0440\u043e\u0432\u0435\u043d\u044c 1)\n- relationship_context (structural) \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 file_path \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434 \u0438\u043b\u0438 \u044f\u0432\u043d\u043e structural \u0437\u0430\u043f\u0440\u043e\u0441",
              "line_range": [
                218,
                275
              ],
              "parameters": [
                "self",
                "file_path",
                "budget"
              ]
            },
            {
              "name": "_load_session_context",
              "docstring": "Load session-specific context.",
              "line_range": [
                277,
                299
              ],
              "parameters": [
                "self",
                "budget"
              ]
            },
            {
              "name": "_load_minimal_context",
              "docstring": "Load minimal context for quick operations.",
              "line_range": [
                301,
                319
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_source_with_filtering",
              "docstring": "Load source with optional filtering based on budget.",
              "line_range": [
                321,
                344
              ],
              "parameters": [
                "self",
                "source_name",
                "budget"
              ]
            },
            {
              "name": "_get_file_context",
              "docstring": "Get context specific to a file.",
              "line_range": [
                346,
                357
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_extract_essential_parts",
              "docstring": "Extract essential parts of data to fit token budget.",
              "line_range": [
                359,
                381
              ],
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_filter_for_current_session",
              "docstring": "Filter data to items relevant to current session.",
              "line_range": [
                383,
                422
              ],
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_extract_summary",
              "docstring": "Extract summary information from data.",
              "line_range": [
                424,
                443
              ],
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_apply_section_filtering",
              "docstring": "Apply section filtering to exclude specified sections.",
              "line_range": [
                445,
                457
              ],
              "parameters": [
                "self",
                "data",
                "exclude_sections"
              ]
            },
            {
              "name": "_update_metrics",
              "docstring": "Update performance metrics.",
              "line_range": [
                459,
                477
              ],
              "parameters": [
                "self",
                "scenario",
                "context",
                "load_time"
              ]
            },
            {
              "name": "get_metrics_summary",
              "docstring": "Get summary of context loading metrics.",
              "line_range": [
                479,
                494
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_metrics",
              "docstring": "Save metrics to file for analysis.",
              "line_range": [
                496,
                501
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._load_config",
          "Path"
        ],
        "_load_config": [
          "config_path.exists",
          "open",
          "json.load"
        ],
        "get_context_for_scenario": [
          "self._load_full_context",
          "scenario_config.get",
          "time.time",
          "self._load_focused_context",
          "self._load_minimal_context",
          "self._get_budget_for_scenario",
          "self._load_session_context",
          "ContextMode",
          "self._update_metrics"
        ],
        "_get_budget_for_scenario": [
          "scenario_config.get",
          "ContextBudget",
          "budget_config.get"
        ],
        "_load_full_context": [
          "open",
          "json.load",
          "full_path.exists",
          "logger.warning"
        ],
        "_extract_relationship_summary": [
          "summary.append",
          "logger.warning",
          "m.get",
          "struct.get",
          "struct_path.exists",
          "open",
          "json.load"
        ],
        "_load_focused_context": [
          "init_path.exists",
          "self._get_file_context",
          "file_path.endswith",
          "logger.warning",
          "self._extract_relationship_summary",
          "len",
          "self._extract_summary",
          "json.dumps",
          "open",
          "json.load",
          "session_path.exists"
        ],
        "_load_session_context": [
          "self._filter_for_current_session",
          "self._load_source_with_filtering"
        ],
        "_load_minimal_context": [
          "logger.warning",
          "source_path.exists",
          "self._extract_summary",
          "open",
          "json.load"
        ],
        "_load_source_with_filtering": [
          "self._apply_section_filtering",
          "logger.warning",
          "source_path.exists",
          "open",
          "json.load"
        ],
        "_get_file_context": [
          "Path"
        ],
        "_extract_essential_parts": [
          "task.get",
          "isinstance"
        ],
        "_filter_for_current_session": [
          "current_session.get",
          "logger.warning",
          "task.get",
          "current_session_path.exists",
          "idea.get",
          "data.items",
          "open",
          "json.load"
        ],
        "_extract_summary": [
          "len",
          "t.get",
          "isinstance"
        ],
        "_apply_section_filtering": [
          "data.items"
        ],
        "_update_metrics": [
          "context.get",
          "len",
          "ContextMetrics"
        ],
        "get_metrics_summary": [
          "len",
          "sum"
        ],
        "save_metrics": [
          "self.get_metrics_summary",
          "open",
          "json.dump"
        ],
        "create_context_orchestrator": [
          "SmartContextOrchestrator"
        ],
        "get_optimized_context": [
          "orchestrator.get_context_for_scenario",
          "create_context_orchestrator",
          "ContextBudget"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "Union",
        "dataclass",
        "dataclasses",
        "enum",
        "json",
        "logging",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "f24a5a95-a6aa-4e9c-ab85-3bfabaf0f775"
    },
    {
      "module_id": "src.llmstruct.__init__",
      "path": "src/llmstruct/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "AISelfAwarenessCLIIntegration",
        "LLMClient",
        "SystemCapabilityDiscovery",
        "ai_cli_integration",
        "ai_self_awareness",
        "llm_client"
      ],
      "hash": null,
      "artifact_id": "3d2e0051-37ee-42d4-9a94-f5cbe9b5e17f"
    },
    {
      "module_id": "src.llmstruct.ai_cli_integration",
      "path": "src/llmstruct/ai_cli_integration.py",
      "category": "core",
      "module_doc": "AI Self-Awareness CLI Integration Module\nIntegrates unused CLI functions into the AI self-awareness system.",
      "functions": [
        {
          "name": "create_ai_cli_integration",
          "docstring": "Factory function to create AI CLI integration instance.",
          "line_range": [
            304,
            306
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_enhanced_cli_summary",
          "docstring": "Get a formatted summary of AI CLI integration capabilities.",
          "line_range": [
            309,
            346
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize CLI integration system.",
          "line_range": [
            21,
            25
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_discover_available_commands",
          "docstring": "Discover which unused CLI commands are available for integration.",
          "line_range": [
            27,
            69
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_ai_status_command",
          "docstring": "Integrate cmd_status for real-time AI system status awareness.",
          "line_range": [
            71,
            100
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_ai_audit_command",
          "docstring": "Integrate cmd_audit for system health analysis awareness.",
          "line_range": [
            102,
            131
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_ai_context_command",
          "docstring": "Integrate cmd_context for context mode awareness.",
          "line_range": [
            133,
            162
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_ai_queue_command",
          "docstring": "Integrate cmd_queue for workflow queue monitoring.",
          "line_range": [
            164,
            193
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_integration_summary",
          "docstring": "Get summary of CLI command integrations for AI awareness.",
          "line_range": [
            195,
            215
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_ai_enhancement_impact",
          "docstring": "Calculate the impact of integrating unused CLI commands on AI capabilities.",
          "line_range": [
            217,
            241
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_create_fallback_status",
          "docstring": "Create fallback status information if cmd_status is not available.",
          "line_range": [
            243,
            256
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_create_fallback_audit",
          "docstring": "Create fallback audit information if cmd_audit is not available.",
          "line_range": [
            258,
            271
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_create_fallback_context",
          "docstring": "Create fallback context information if cmd_context is not available.",
          "line_range": [
            273,
            286
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_create_fallback_queue",
          "docstring": "Create fallback queue information if cmd_queue is not available.",
          "line_range": [
            288,
            301
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "AISelfAwarenessCLIIntegration",
          "docstring": "Integrates unused CLI functions to enhance AI self-awareness capabilities.\nTransforms 21 unused CLI commands into useful AI interaction tools.",
          "line_range": [
            15,
            301
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize CLI integration system.",
              "line_range": [
                21,
                25
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_discover_available_commands",
              "docstring": "Discover which unused CLI commands are available for integration.",
              "line_range": [
                27,
                69
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_ai_status_command",
              "docstring": "Integrate cmd_status for real-time AI system status awareness.",
              "line_range": [
                71,
                100
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_ai_audit_command",
              "docstring": "Integrate cmd_audit for system health analysis awareness.",
              "line_range": [
                102,
                131
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_ai_context_command",
              "docstring": "Integrate cmd_context for context mode awareness.",
              "line_range": [
                133,
                162
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_ai_queue_command",
              "docstring": "Integrate cmd_queue for workflow queue monitoring.",
              "line_range": [
                164,
                193
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_integration_summary",
              "docstring": "Get summary of CLI command integrations for AI awareness.",
              "line_range": [
                195,
                215
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_calculate_ai_enhancement_impact",
              "docstring": "Calculate the impact of integrating unused CLI commands on AI capabilities.",
              "line_range": [
                217,
                241
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_create_fallback_status",
              "docstring": "Create fallback status information if cmd_status is not available.",
              "line_range": [
                243,
                256
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_create_fallback_audit",
              "docstring": "Create fallback audit information if cmd_audit is not available.",
              "line_range": [
                258,
                271
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_create_fallback_context",
              "docstring": "Create fallback context information if cmd_context is not available.",
              "line_range": [
                273,
                286
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_create_fallback_queue",
              "docstring": "Create fallback queue information if cmd_queue is not available.",
              "line_range": [
                288,
                301
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._discover_available_commands",
          "Path"
        ],
        "_discover_available_commands": [
          "getattr",
          "unused_command_mapping.items",
          "logger.error",
          "hasattr"
        ],
        "integrate_ai_status_command": [
          "cmd_status",
          "logger.error",
          "str",
          "self._create_fallback_status"
        ],
        "integrate_ai_audit_command": [
          "logger.error",
          "str",
          "self._create_fallback_audit",
          "cmd_audit"
        ],
        "integrate_ai_context_command": [
          "logger.error",
          "str",
          "self._create_fallback_context",
          "cmd_context"
        ],
        "integrate_ai_queue_command": [
          "cmd_queue",
          "logger.error",
          "str",
          "self._create_fallback_queue"
        ],
        "get_integration_summary": [
          "sum",
          "len",
          "self._calculate_ai_enhancement_impact",
          "info.get",
          "cmd.get"
        ],
        "_calculate_ai_enhancement_impact": [
          "any",
          "len",
          "capability_categories.items",
          "enhanced_categories.append",
          "info.get"
        ],
        "_create_fallback_status": [
          "str"
        ],
        "_create_fallback_audit": [
          "str"
        ],
        "_create_fallback_context": [],
        "_create_fallback_queue": [],
        "create_ai_cli_integration": [
          "AISelfAwarenessCLIIntegration"
        ],
        "get_ai_enhanced_cli_summary": [
          "integration.integrate_ai_queue_command",
          "integration.integrate_ai_status_command",
          "integration.integrate_ai_context_command",
          "integration.integrate_ai_audit_command",
          "create_ai_cli_integration",
          "integration.get_integration_summary"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "cli_commands",
        "json",
        "llmstruct",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "30dc965f-2112-40da-afd3-53c554e85cb2"
    },
    {
      "module_id": "src.llmstruct.__main__",
      "path": "src/llmstruct/__main__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "llmstruct.cli",
        "main"
      ],
      "hash": null,
      "artifact_id": "d44f3df3-cfd9-47da-bcd2-694d8658228f"
    },
    {
      "module_id": "src.llmstruct.cli_utils",
      "path": "src/llmstruct/cli_utils.py",
      "category": "core",
      "module_doc": "CLI utility functions.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize utils with root directory.",
          "line_range": [
            24,
            26
          ],
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read file content with size limit.",
          "line_range": [
            28,
            50
          ],
          "parameters": [
            "self",
            "file_path",
            "max_size"
          ],
          "decorators": []
        },
        {
          "name": "write_file_content",
          "docstring": "Write content to file.",
          "line_range": [
            52,
            70
          ],
          "parameters": [
            "self",
            "file_path",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "get_directory_structure",
          "docstring": "Get directory structure using folder generator.",
          "line_range": [
            72,
            115
          ],
          "parameters": [
            "self",
            "path",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "validate_json",
          "docstring": "Validate JSON content.",
          "line_range": [
            117,
            123
          ],
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "format_json",
          "docstring": "Format data as JSON string.",
          "line_range": [
            125,
            131
          ],
          "parameters": [
            "self",
            "data",
            "indent"
          ],
          "decorators": []
        },
        {
          "name": "generate_unique_id",
          "docstring": "Generate unique ID for commands, queues, etc.",
          "line_range": [
            133,
            137
          ],
          "parameters": [
            "self",
            "prefix"
          ],
          "decorators": []
        },
        {
          "name": "safe_path_join",
          "docstring": "Safely join path parts, preventing directory traversal.",
          "line_range": [
            139,
            149
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "file_exists",
          "docstring": "Check if file exists.",
          "line_range": [
            151,
            157
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "dir_exists",
          "docstring": "Check if directory exists.",
          "line_range": [
            159,
            165
          ],
          "parameters": [
            "self",
            "dir_path"
          ],
          "decorators": []
        },
        {
          "name": "get_file_size",
          "docstring": "Get file size in bytes.",
          "line_range": [
            167,
            173
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_file",
          "docstring": "Create backup of file with timestamp.",
          "line_range": [
            175,
            191
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "cleanup_old_backups",
          "docstring": "Clean up old backup files, keeping only the most recent ones.",
          "line_range": [
            193,
            222
          ],
          "parameters": [
            "self",
            "file_path",
            "keep_count"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLIUtils",
          "docstring": "Utility functions for CLI operations.",
          "line_range": [
            21,
            222
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize utils with root directory.",
              "line_range": [
                24,
                26
              ],
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "read_file_content",
              "docstring": "Read file content with size limit.",
              "line_range": [
                28,
                50
              ],
              "parameters": [
                "self",
                "file_path",
                "max_size"
              ]
            },
            {
              "name": "write_file_content",
              "docstring": "Write content to file.",
              "line_range": [
                52,
                70
              ],
              "parameters": [
                "self",
                "file_path",
                "content"
              ]
            },
            {
              "name": "get_directory_structure",
              "docstring": "Get directory structure using folder generator.",
              "line_range": [
                72,
                115
              ],
              "parameters": [
                "self",
                "path",
                "gitignore_patterns",
                "include_patterns",
                "exclude_patterns",
                "exclude_dirs"
              ]
            },
            {
              "name": "validate_json",
              "docstring": "Validate JSON content.",
              "line_range": [
                117,
                123
              ],
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "format_json",
              "docstring": "Format data as JSON string.",
              "line_range": [
                125,
                131
              ],
              "parameters": [
                "self",
                "data",
                "indent"
              ]
            },
            {
              "name": "generate_unique_id",
              "docstring": "Generate unique ID for commands, queues, etc.",
              "line_range": [
                133,
                137
              ],
              "parameters": [
                "self",
                "prefix"
              ]
            },
            {
              "name": "safe_path_join",
              "docstring": "Safely join path parts, preventing directory traversal.",
              "line_range": [
                139,
                149
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "file_exists",
              "docstring": "Check if file exists.",
              "line_range": [
                151,
                157
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "dir_exists",
              "docstring": "Check if directory exists.",
              "line_range": [
                159,
                165
              ],
              "parameters": [
                "self",
                "dir_path"
              ]
            },
            {
              "name": "get_file_size",
              "docstring": "Get file size in bytes.",
              "line_range": [
                167,
                173
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "backup_file",
              "docstring": "Create backup of file with timestamp.",
              "line_range": [
                175,
                191
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "cleanup_old_backups",
              "docstring": "Clean up old backup files, keeping only the most recent ones.",
              "line_range": [
                193,
                222
              ],
              "parameters": [
                "self",
                "file_path",
                "keep_count"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "read_file_content": [
          "os.stat",
          "logging.warning",
          "logging.error",
          "open",
          "f.read"
        ],
        "write_file_content": [
          "f.write",
          "Path",
          "logging.info",
          "logging.error",
          "open"
        ],
        "get_directory_structure": [
          "get_folder_structure",
          "sorted",
          "logging.error",
          "os.listdir"
        ],
        "validate_json": [
          "str",
          "json.loads"
        ],
        "format_json": [
          "logging.error",
          "json.dumps",
          "str"
        ],
        "generate_unique_id": [
          "time.time",
          "int",
          "str",
          "uuid.uuid4"
        ],
        "safe_path_join": [
          "resolved_path.startswith",
          "ValueError"
        ],
        "file_exists": [
          "self.safe_path_join"
        ],
        "dir_exists": [
          "self.safe_path_join"
        ],
        "get_file_size": [
          "self.safe_path_join"
        ],
        "backup_file": [
          "self.safe_path_join",
          "src.read",
          "time.time",
          "logging.error",
          "open",
          "int",
          "dst.write"
        ],
        "cleanup_old_backups": [
          "backups.append",
          "backups.sort",
          "os.remove",
          "self.safe_path_join",
          "logging.warning",
          "logging.info",
          "filename.startswith",
          "logging.error",
          "filename.split",
          "os.listdir",
          "int"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "get_folder_structure",
        "json",
        "llmstruct.generators.json_generator",
        "logging",
        "os",
        "pathlib",
        "time",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "783190bf-9645-4e99-881b-f9c0539cbd1f"
    },
    {
      "module_id": "src.llmstruct.copilot",
      "path": "src/llmstruct/copilot.py",
      "category": "core",
      "module_doc": "LLMStruct Copilot Integration Module\nProvides context-aware development assistance with hybrid copilot capabilities.",
      "functions": [
        {
          "name": "initialize_copilot",
          "docstring": "Initialize copilot context manager for the project.\n\nArgs:\n    project_root: Project root directory\n\nReturns:\n    Configured CopilotContextManager instance",
          "line_range": [
            649,
            659
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "trigger_copilot_event",
          "docstring": "Trigger a copilot event and get relevant context.\n\nArgs:\n    manager: CopilotContextManager instance\n    event_type: Type of event\n    file_path: Optional file path\n    **kwargs: Additional event metadata\n\nReturns:\n    Dict with event context",
          "line_range": [
            662,
            679
          ],
          "parameters": [
            "manager",
            "event_type",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "smart_suggest",
          "docstring": "Get smart suggestions based on query and context.\n\nArgs:\n    manager: CopilotContextManager instance\n    query: Query string\n    context: Context type (code, workflow, task, etc.)\n\nReturns:\n    List of suggestions",
          "line_range": [
            682,
            702
          ],
          "parameters": [
            "manager",
            "query",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "get_optimized_context_for_scenario",
          "docstring": "Get optimized context for specific scenario - standalone function.\n\nArgs:\n    project_root: Project root directory\n    scenario: Usage scenario (vscode_copilot, cli_direct, etc.)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
          "line_range": [
            705,
            728
          ],
          "parameters": [
            "project_root",
            "scenario",
            "file_path",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize the Copilot Context Manager.\n\nArgs:\n    project_root: Project root directory\n    config_path: Path to copilot_init.json",
          "line_range": [
            68,
            90
          ],
          "parameters": [
            "self",
            "project_root",
            "config_path"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load copilot configuration from JSON file.",
          "line_range": [
            92,
            104
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_initialize_layers",
          "docstring": "Initialize context layers from configuration.",
          "line_range": [
            106,
            116
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_context_layer",
          "docstring": "Load a specific context layer.\n\nArgs:\n    layer_name: Name of the layer to load\n    force: Force reload if already loaded\n\nReturns:\n    bool: True if successful",
          "line_range": [
            118,
            160
          ],
          "parameters": [
            "self",
            "layer_name",
            "force"
          ],
          "decorators": []
        },
        {
          "name": "unload_context_layer",
          "docstring": "Unload a context layer to free memory.\n\nArgs:\n    layer_name: Name of the layer to unload\n\nReturns:\n    bool: True if successful",
          "line_range": [
            162,
            180
          ],
          "parameters": [
            "self",
            "layer_name"
          ],
          "decorators": []
        },
        {
          "name": "get_optimized_context",
          "docstring": "Get optimized context using Smart Context Orchestrator.\n\nArgs:\n    scenario: Usage scenario (vscode_copilot, cli_direct, etc.)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
          "line_range": [
            182,
            225
          ],
          "parameters": [
            "self",
            "scenario",
            "file_path",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "_get_legacy_context",
          "docstring": "Fallback to legacy context loading.",
          "line_range": [
            227,
            235
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_for_vscode",
          "docstring": "Get optimized context specifically for VS Code Copilot integration.\n\nArgs:\n    file_path: Optional file path for focused context\n    \nReturns:\n    Token-optimized context for VS Code",
          "line_range": [
            237,
            251
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "get_context_for_event",
          "docstring": "Get relevant context for a copilot event using Smart Context Orchestrator.\n\nArgs:\n    event: The copilot event\n\nReturns:\n    Dict containing relevant context",
          "line_range": [
            252,
            296
          ],
          "parameters": [
            "self",
            "event"
          ],
          "decorators": []
        },
        {
          "name": "_get_legacy_event_context",
          "docstring": "Legacy event context loading as fallback.",
          "line_range": [
            298,
            350
          ],
          "parameters": [
            "self",
            "event"
          ],
          "decorators": []
        },
        {
          "name": "suggest_completion",
          "docstring": "Generate context-aware code completions.\n\nArgs:\n    current_code: Current code content\n    file_path: Path to the current file\n    cursor_position: Cursor position in the code\n\nReturns:\n    List of completion suggestions",
          "line_range": [
            352,
            397
          ],
          "parameters": [
            "self",
            "current_code",
            "file_path",
            "cursor_position"
          ],
          "decorators": []
        },
        {
          "name": "validate_change",
          "docstring": "Validate a code change against safety rules.\n\nArgs:\n    file_path: Path to the changed file\n    change_type: Type of change (create, edit, delete)\n\nReturns:\n    Dict with validation results",
          "line_range": [
            399,
            445
          ],
          "parameters": [
            "self",
            "file_path",
            "change_type"
          ],
          "decorators": []
        },
        {
          "name": "_matches_scope",
          "docstring": "Check if file matches scope pattern.",
          "line_range": [
            447,
            452
          ],
          "parameters": [
            "self",
            "file_path",
            "scope"
          ],
          "decorators": []
        },
        {
          "name": "_matches_trigger",
          "docstring": "Check if change type matches trigger.",
          "line_range": [
            454,
            463
          ],
          "parameters": [
            "self",
            "change_type",
            "trigger"
          ],
          "decorators": []
        },
        {
          "name": "_validate_json_schema",
          "docstring": "Validate JSON file against schema.",
          "line_range": [
            465,
            480
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_check_circular_dependencies",
          "docstring": "Check for circular dependencies.",
          "line_range": [
            482,
            507
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_validate_task_references",
          "docstring": "Validate task references in tasks.json.",
          "line_range": [
            509,
            536
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "get_workflow_suggestions",
          "docstring": "Get workflow suggestions based on current command context.\n\nArgs:\n    command: Current command or operation\n\nReturns:\n    List of workflow suggestions",
          "line_range": [
            538,
            568
          ],
          "parameters": [
            "self",
            "command"
          ],
          "decorators": []
        },
        {
          "name": "refresh_all_contexts",
          "docstring": "Refresh all loaded context layers.\n\nReturns:\n    bool: True if successful",
          "line_range": [
            570,
            584
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_status",
          "docstring": "Get status of all context layers.\n\nReturns:\n    Dict with context status information",
          "line_range": [
            586,
            607
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "export_context",
          "docstring": "Export context in specified format.\n\nArgs:\n    layers: List of layers to export (None for all loaded)\n    format: Export format (json, yaml, etc.)\n\nReturns:\n    Exported context as string",
          "line_range": [
            609,
            631
          ],
          "parameters": [
            "self",
            "layers",
            "format"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Clean up resources.",
          "line_range": [
            633,
            643
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ContextLayer",
          "docstring": "Context layer priorities for copilot integration.",
          "line_range": [
            22,
            28
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "AttachMode",
          "docstring": "Context attachment modes.",
          "line_range": [
            31,
            37
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextLayerConfig",
          "docstring": "Configuration for a context layer.",
          "line_range": [
            41,
            49
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "CopilotEvent",
          "docstring": "Represents a copilot event for context triggering.",
          "line_range": [
            53,
            59
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "CopilotContextManager",
          "docstring": "Manages context layers and integration with GitHub Copilot.\nProvides intelligent context loading and workflow assistance.",
          "line_range": [
            62,
            643
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize the Copilot Context Manager.\n\nArgs:\n    project_root: Project root directory\n    config_path: Path to copilot_init.json",
              "line_range": [
                68,
                90
              ],
              "parameters": [
                "self",
                "project_root",
                "config_path"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load copilot configuration from JSON file.",
              "line_range": [
                92,
                104
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_initialize_layers",
              "docstring": "Initialize context layers from configuration.",
              "line_range": [
                106,
                116
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_context_layer",
              "docstring": "Load a specific context layer.\n\nArgs:\n    layer_name: Name of the layer to load\n    force: Force reload if already loaded\n\nReturns:\n    bool: True if successful",
              "line_range": [
                118,
                160
              ],
              "parameters": [
                "self",
                "layer_name",
                "force"
              ]
            },
            {
              "name": "unload_context_layer",
              "docstring": "Unload a context layer to free memory.\n\nArgs:\n    layer_name: Name of the layer to unload\n\nReturns:\n    bool: True if successful",
              "line_range": [
                162,
                180
              ],
              "parameters": [
                "self",
                "layer_name"
              ]
            },
            {
              "name": "get_optimized_context",
              "docstring": "Get optimized context using Smart Context Orchestrator.\n\nArgs:\n    scenario: Usage scenario (vscode_copilot, cli_direct, etc.)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
              "line_range": [
                182,
                225
              ],
              "parameters": [
                "self",
                "scenario",
                "file_path",
                "max_tokens"
              ]
            },
            {
              "name": "_get_legacy_context",
              "docstring": "Fallback to legacy context loading.",
              "line_range": [
                227,
                235
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_for_vscode",
              "docstring": "Get optimized context specifically for VS Code Copilot integration.\n\nArgs:\n    file_path: Optional file path for focused context\n    \nReturns:\n    Token-optimized context for VS Code",
              "line_range": [
                237,
                251
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "get_context_for_event",
              "docstring": "Get relevant context for a copilot event using Smart Context Orchestrator.\n\nArgs:\n    event: The copilot event\n\nReturns:\n    Dict containing relevant context",
              "line_range": [
                252,
                296
              ],
              "parameters": [
                "self",
                "event"
              ]
            },
            {
              "name": "_get_legacy_event_context",
              "docstring": "Legacy event context loading as fallback.",
              "line_range": [
                298,
                350
              ],
              "parameters": [
                "self",
                "event"
              ]
            },
            {
              "name": "suggest_completion",
              "docstring": "Generate context-aware code completions.\n\nArgs:\n    current_code: Current code content\n    file_path: Path to the current file\n    cursor_position: Cursor position in the code\n\nReturns:\n    List of completion suggestions",
              "line_range": [
                352,
                397
              ],
              "parameters": [
                "self",
                "current_code",
                "file_path",
                "cursor_position"
              ]
            },
            {
              "name": "validate_change",
              "docstring": "Validate a code change against safety rules.\n\nArgs:\n    file_path: Path to the changed file\n    change_type: Type of change (create, edit, delete)\n\nReturns:\n    Dict with validation results",
              "line_range": [
                399,
                445
              ],
              "parameters": [
                "self",
                "file_path",
                "change_type"
              ]
            },
            {
              "name": "_matches_scope",
              "docstring": "Check if file matches scope pattern.",
              "line_range": [
                447,
                452
              ],
              "parameters": [
                "self",
                "file_path",
                "scope"
              ]
            },
            {
              "name": "_matches_trigger",
              "docstring": "Check if change type matches trigger.",
              "line_range": [
                454,
                463
              ],
              "parameters": [
                "self",
                "change_type",
                "trigger"
              ]
            },
            {
              "name": "_validate_json_schema",
              "docstring": "Validate JSON file against schema.",
              "line_range": [
                465,
                480
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_check_circular_dependencies",
              "docstring": "Check for circular dependencies.",
              "line_range": [
                482,
                507
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_validate_task_references",
              "docstring": "Validate task references in tasks.json.",
              "line_range": [
                509,
                536
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "get_workflow_suggestions",
              "docstring": "Get workflow suggestions based on current command context.\n\nArgs:\n    command: Current command or operation\n\nReturns:\n    List of workflow suggestions",
              "line_range": [
                538,
                568
              ],
              "parameters": [
                "self",
                "command"
              ]
            },
            {
              "name": "refresh_all_contexts",
              "docstring": "Refresh all loaded context layers.\n\nReturns:\n    bool: True if successful",
              "line_range": [
                570,
                584
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_status",
              "docstring": "Get status of all context layers.\n\nReturns:\n    Dict with context status information",
              "line_range": [
                586,
                607
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "export_context",
              "docstring": "Export context in specified format.\n\nArgs:\n    layers: List of layers to export (None for all loaded)\n    format: Export format (json, yaml, etc.)\n\nReturns:\n    Exported context as string",
              "line_range": [
                609,
                631
              ],
              "parameters": [
                "self",
                "layers",
                "format"
              ]
            },
            {
              "name": "close",
              "docstring": "Clean up resources.",
              "line_range": [
                633,
                643
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._initialize_layers",
          "Path",
          "os.getcwd",
          "self._load_config",
          "str",
          "create_context_orchestrator",
          "JSONCache"
        ],
        "_load_config": [
          "logger.info",
          "logger.error",
          "logger.warning",
          "Path",
          "open",
          "json.load"
        ],
        "_initialize_layers": [
          "ContextLayerConfig",
          "layer_config.get",
          "layers_config.items"
        ],
        "load_context_layer": [
          "logger.info",
          "logger.error",
          "source_path.exists",
          "logger.warning",
          "logger.debug",
          "time.time",
          "open",
          "json.load"
        ],
        "unload_context_layer": [
          "logger.info"
        ],
        "get_optimized_context": [
          "scenario_mapping.get",
          "logger.error",
          "self._get_legacy_context"
        ],
        "_get_legacy_context": [
          "self.load_context_layer"
        ],
        "get_context_for_vscode": [
          "self.get_optimized_context"
        ],
        "get_context_for_event": [
          "scenario_mapping.get",
          "self.get_optimized_context",
          "logger.error",
          "self._get_legacy_event_context"
        ],
        "_get_legacy_event_context": [
          "triggers.get",
          "self.load_context_layer",
          "logger.error",
          "source_path.exists",
          "code_triggers.get",
          "open",
          "json.load",
          "file_triggers.get",
          "workflow_triggers.get"
        ],
        "suggest_completion": [
          "self.load_context_layer",
          "module.get",
          "struct_context.get",
          "func.get",
          "Path",
          "suggestions.append",
          "str",
          "current_module.get"
        ],
        "validate_change": [
          "self._matches_scope",
          "self._check_circular_dependencies",
          "rule.get",
          "len",
          "self._validate_json_schema",
          "self._matches_trigger",
          "result.get",
          "self._validate_task_references",
          "safety_features.get"
        ],
        "_matches_scope": [
          "str",
          "fnmatch",
          "Path"
        ],
        "_matches_trigger": [
          "trigger_map.get"
        ],
        "_validate_json_schema": [
          "file_path.endswith",
          "open",
          "json.load"
        ],
        "_check_circular_dependencies": [
          "self.load_context_layer",
          "module.get",
          "len",
          "Path",
          "str",
          "struct_data.get"
        ],
        "_validate_task_references": [
          "file_path.endswith",
          "tasks_data.get",
          "set",
          "task.get",
          "task_ids.add",
          "open",
          "json.load"
        ],
        "get_workflow_suggestions": [
          "self.load_context_layer",
          "workflows.items",
          "workflow.get",
          "command.lower",
          "suggestions.append",
          "suggestions.extend"
        ],
        "refresh_all_contexts": [
          "logger.info",
          "list",
          "self.load_context_layer"
        ],
        "get_context_status": [
          "list"
        ],
        "export_context": [
          "list",
          "str",
          "json.dumps"
        ],
        "close": [
          "logger.info",
          "hasattr"
        ],
        "initialize_copilot": [
          "CopilotContextManager"
        ],
        "trigger_copilot_event": [
          "manager.get_context_for_event",
          "CopilotEvent"
        ],
        "smart_suggest": [
          "manager.get_workflow_suggestions"
        ],
        "get_optimized_context_for_scenario": [
          "manager.get_optimized_context",
          "locals",
          "initialize_copilot",
          "manager.close"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "SmartContextOrchestrator",
        "Union",
        "create_context_orchestrator",
        "dataclass",
        "dataclasses",
        "enum",
        "fnmatch",
        "json",
        "llmstruct.cache",
        "llmstruct.context_orchestrator",
        "logging",
        "os",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "45683038-003f-416e-aad5-ee8d825df431"
    },
    {
      "module_id": "src.llmstruct.gh_view",
      "path": "src/llmstruct/gh_view.py",
      "category": "core",
      "module_doc": "GitHub visualization/graph feature (gh-view-v1)\nExport consolidated tasks/ideas from JSON files to GitHub Project cards",
      "functions": [
        {
          "name": "main",
          "docstring": "Main entry point for GitHub Projects export",
          "line_range": [
            177,
            208
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize exporter with configuration",
          "line_range": [
            19,
            25
          ],
          "parameters": [
            "self",
            "config_path"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load configuration from TOML file",
          "line_range": [
            27,
            35
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_mapping",
          "docstring": "Load existing ID mapping between local and GitHub",
          "line_range": [
            37,
            45
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_mapping",
          "docstring": "Save ID mapping to file",
          "line_range": [
            47,
            53
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_run_gh_command",
          "docstring": "Run GitHub CLI command and return success status and output",
          "line_range": [
            55,
            68
          ],
          "parameters": [
            "self",
            "command"
          ],
          "decorators": []
        },
        {
          "name": "load_official_data",
          "docstring": "Load tasks and ideas from official JSON files",
          "line_range": [
            70,
            98
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "format_task_for_github",
          "docstring": "Format task data for GitHub Project card",
          "line_range": [
            100,
            137
          ],
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "format_idea_for_github",
          "docstring": "Format idea data for GitHub Project card",
          "line_range": [
            139,
            174
          ],
          "parameters": [
            "self",
            "idea"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubProjectsExporter",
          "docstring": "Export tasks and ideas to GitHub Projects as cards",
          "line_range": [
            16,
            174
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize exporter with configuration",
              "line_range": [
                19,
                25
              ],
              "parameters": [
                "self",
                "config_path"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load configuration from TOML file",
              "line_range": [
                27,
                35
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_mapping",
              "docstring": "Load existing ID mapping between local and GitHub",
              "line_range": [
                37,
                45
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_mapping",
              "docstring": "Save ID mapping to file",
              "line_range": [
                47,
                53
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_run_gh_command",
              "docstring": "Run GitHub CLI command and return success status and output",
              "line_range": [
                55,
                68
              ],
              "parameters": [
                "self",
                "command"
              ]
            },
            {
              "name": "load_official_data",
              "docstring": "Load tasks and ideas from official JSON files",
              "line_range": [
                70,
                98
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "format_task_for_github",
              "docstring": "Format task data for GitHub Project card",
              "line_range": [
                100,
                137
              ],
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "format_idea_for_github",
              "docstring": "Format idea data for GitHub Project card",
              "line_range": [
                139,
                174
              ],
              "parameters": [
                "self",
                "idea"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._load_config",
          "Path",
          "self._load_mapping"
        ],
        "_load_config": [
          "config.get",
          "open",
          "toml.load",
          "print"
        ],
        "_load_mapping": [
          "open",
          "json.load"
        ],
        "_save_mapping": [
          "open",
          "print",
          "json.dump"
        ],
        "_run_gh_command": [
          "subprocess.run"
        ],
        "load_official_data": [
          "len",
          "ideas_data.get",
          "tasks_data.get",
          "ideas_file.exists",
          "tasks_file.exists",
          "print",
          "open",
          "json.load"
        ],
        "format_task_for_github": [
          "task.get",
          "status_map.get",
          "body_parts.append"
        ],
        "format_idea_for_github": [
          "idea.get",
          "status_map.get",
          "body_parts.append"
        ],
        "main": [
          "len",
          "exporter.format_idea_for_github",
          "GitHubProjectsExporter",
          "print",
          "exporter.format_task_for_github",
          "exporter.load_official_data",
          "sys.exit"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "datetime",
        "json",
        "pathlib",
        "subprocess",
        "sys",
        "toml",
        "typing"
      ],
      "hash": null,
      "artifact_id": "52d22212-99d5-49f3-be45-652b3f541ae8"
    },
    {
      "module_id": "src.llmstruct.llm_client",
      "path": "src/llmstruct/llm_client.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize LLMClient with optional Ollama host.",
          "line_range": [
            28,
            36
          ],
          "parameters": [
            "self",
            "ollama_host"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt, context, and optional model.",
          "line_range": [
            38,
            86
          ],
          "parameters": [
            "self",
            "prompt",
            "context_path",
            "mode",
            "model",
            "artifact_ids"
          ],
          "decorators": []
        },
        {
          "name": "_query_grok",
          "docstring": "Query Grok API.",
          "line_range": [
            88,
            115
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_anthropic",
          "docstring": "Query Anthropic API.",
          "line_range": [
            117,
            141
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_ollama",
          "docstring": "Query Ollama API with specified model.",
          "line_range": [
            143,
            156
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "_query_hybrid",
          "docstring": "Query multiple LLMs and combine results.",
          "line_range": [
            158,
            172
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMClient",
          "docstring": "",
          "line_range": [
            27,
            172
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize LLMClient with optional Ollama host.",
              "line_range": [
                28,
                36
              ],
              "parameters": [
                "self",
                "ollama_host"
              ]
            },
            {
              "name": "query",
              "docstring": "Query LLMs with prompt, context, and optional model.",
              "line_range": [
                38,
                86
              ],
              "parameters": [
                "self",
                "prompt",
                "context_path",
                "mode",
                "model",
                "artifact_ids"
              ]
            },
            {
              "name": "_query_grok",
              "docstring": "Query Grok API.",
              "line_range": [
                88,
                115
              ],
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_anthropic",
              "docstring": "Query Anthropic API.",
              "line_range": [
                117,
                141
              ],
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_ollama",
              "docstring": "Query Ollama API with specified model.",
              "line_range": [
                143,
                156
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            },
            {
              "name": "_query_hybrid",
              "docstring": "Query multiple LLMs and combine results.",
              "line_range": [
                158,
                172
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "logging.info",
          "int",
          "os.getenv"
        ],
        "query": [
          "self._query_grok",
          "self._query_hybrid",
          "Path",
          "self._query_ollama",
          "logging.warning",
          "asyncio.sleep",
          "logging.info",
          "logging.error",
          "json.dumps",
          "self._query_anthropic",
          "range",
          "json.load"
        ],
        "_query_grok": [
          "aiohttp.ClientSession",
          "result.get",
          "logging.error",
          "session.post",
          "logging.info",
          "response.json"
        ],
        "_query_anthropic": [
          "aiohttp.ClientSession",
          "result.get",
          "logging.error",
          "session.post",
          "logging.info",
          "response.json"
        ],
        "_query_ollama": [
          "logging.debug",
          "aiohttp.ClientSession",
          "result.get",
          "session.post",
          "logging.info",
          "logging.error",
          "response.json"
        ],
        "_query_hybrid": [
          "isinstance",
          "self._query_grok",
          "len",
          "self._query_ollama",
          "logging.info",
          "asyncio.gather",
          "self._query_anthropic"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "aiohttp",
        "asyncio",
        "dotenv",
        "json",
        "load_dotenv",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "5c57a17d-4bf1-4a2c-abcb-7860337c5795"
    },
    {
      "module_id": "src.llmstruct.ai_workflow_middleware",
      "path": "src/llmstruct/ai_workflow_middleware.py",
      "category": "core",
      "module_doc": "AI Workflow Middleware - Forces AI Integration with LLMStruct\nIntercepts all AI requests and ensures they go through our orchestration system.",
      "functions": [
        {
          "name": "initialize_ai_middleware",
          "docstring": "Initialize global AI middleware.",
          "line_range": [
            393,
            397
          ],
          "parameters": [
            "project_root",
            "mode"
          ],
          "decorators": []
        },
        {
          "name": "get_ai_middleware",
          "docstring": "Get current AI middleware instance.",
          "line_range": [
            400,
            402
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "process_ai_query",
          "docstring": "Global function to process AI queries through middleware.",
          "line_range": [
            405,
            410
          ],
          "parameters": [
            "query",
            "ai_handler"
          ],
          "decorators": []
        },
        {
          "name": "ensure_llmstruct_integration",
          "docstring": "Decorator that ensures function uses llmstruct system.",
          "line_range": [
            414,
            431
          ],
          "parameters": [
            "func"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            55,
            74
          ],
          "parameters": [
            "self",
            "project_root",
            "mode"
          ],
          "decorators": []
        },
        {
          "name": "_load_middleware_config",
          "docstring": "Load middleware configuration.",
          "line_range": [
            76,
            101
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "process_ai_request",
          "docstring": "Main middleware entry point - ALL AI requests should go through this.\n\nArgs:\n    raw_query: Raw AI query/request\n    ai_handler: Optional custom AI handler function\n    \nReturns:\n    Processed AI response with llmstruct integration",
          "line_range": [
            103,
            135
          ],
          "parameters": [
            "self",
            "raw_query",
            "ai_handler"
          ],
          "decorators": []
        },
        {
          "name": "_parse_ai_request",
          "docstring": "Parse raw query into structured AI request.",
          "line_range": [
            137,
            160
          ],
          "parameters": [
            "self",
            "raw_query"
          ],
          "decorators": []
        },
        {
          "name": "_should_use_llmstruct",
          "docstring": "Determine if request should use llmstruct system.",
          "line_range": [
            162,
            186
          ],
          "parameters": [
            "self",
            "request"
          ],
          "decorators": []
        },
        {
          "name": "_process_with_llmstruct",
          "docstring": "Process request through full llmstruct system.",
          "line_range": [
            188,
            219
          ],
          "parameters": [
            "self",
            "request",
            "ai_handler"
          ],
          "decorators": []
        },
        {
          "name": "_process_bypass",
          "docstring": "Process request without llmstruct system.",
          "line_range": [
            221,
            236
          ],
          "parameters": [
            "self",
            "request",
            "ai_handler"
          ],
          "decorators": []
        },
        {
          "name": "_optimize_context",
          "docstring": "Optimize context using orchestrator.",
          "line_range": [
            238,
            261
          ],
          "parameters": [
            "self",
            "request"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_ai_delegation",
          "docstring": "Analyze which AI should handle this request.",
          "line_range": [
            263,
            280
          ],
          "parameters": [
            "self",
            "request"
          ],
          "decorators": []
        },
        {
          "name": "_get_enhanced_context",
          "docstring": "Get enhanced context with project awareness.",
          "line_range": [
            282,
            295
          ],
          "parameters": [
            "self",
            "request",
            "context_result"
          ],
          "decorators": []
        },
        {
          "name": "_get_capability_summary",
          "docstring": "Get current system capabilities.",
          "line_range": [
            297,
            310
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_generate_usage_guidance",
          "docstring": "Generate guidance for AI on how to use llmstruct system.",
          "line_range": [
            312,
            331
          ],
          "parameters": [
            "self",
            "request"
          ],
          "decorators": []
        },
        {
          "name": "_map_tags_to_scenario",
          "docstring": "Map context tags to orchestrator scenarios.",
          "line_range": [
            333,
            348
          ],
          "parameters": [
            "self",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "_default_ai_processing",
          "docstring": "Default AI processing when no custom handler provided.",
          "line_range": [
            350,
            365
          ],
          "parameters": [
            "self",
            "request",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "get_middleware_stats",
          "docstring": "Get middleware usage statistics.",
          "line_range": [
            367,
            376
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "force_llmstruct_mode",
          "docstring": "Force all future requests to use llmstruct system.",
          "line_range": [
            378,
            381
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "enable_guidance_mode",
          "docstring": "Enable guided mode with llmstruct suggestions.",
          "line_range": [
            383,
            386
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "wrapper",
          "docstring": "",
          "line_range": [
            416,
            429
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "AIWorkflowMode",
          "docstring": "AI workflow enforcement modes.",
          "line_range": [
            21,
            26
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "AIRequest",
          "docstring": "Standardized AI request structure.",
          "line_range": [
            30,
            36
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "AIResponse",
          "docstring": "Standardized AI response structure.",
          "line_range": [
            40,
            46
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "AIWorkflowMiddleware",
          "docstring": "Middleware that ensures ALL AI interactions go through LLMStruct system.\nThis solves the problem of AI not using its own infrastructure.",
          "line_range": [
            49,
            386
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                55,
                74
              ],
              "parameters": [
                "self",
                "project_root",
                "mode"
              ]
            },
            {
              "name": "_load_middleware_config",
              "docstring": "Load middleware configuration.",
              "line_range": [
                76,
                101
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "process_ai_request",
              "docstring": "Main middleware entry point - ALL AI requests should go through this.\n\nArgs:\n    raw_query: Raw AI query/request\n    ai_handler: Optional custom AI handler function\n    \nReturns:\n    Processed AI response with llmstruct integration",
              "line_range": [
                103,
                135
              ],
              "parameters": [
                "self",
                "raw_query",
                "ai_handler"
              ]
            },
            {
              "name": "_parse_ai_request",
              "docstring": "Parse raw query into structured AI request.",
              "line_range": [
                137,
                160
              ],
              "parameters": [
                "self",
                "raw_query"
              ]
            },
            {
              "name": "_should_use_llmstruct",
              "docstring": "Determine if request should use llmstruct system.",
              "line_range": [
                162,
                186
              ],
              "parameters": [
                "self",
                "request"
              ]
            },
            {
              "name": "_process_with_llmstruct",
              "docstring": "Process request through full llmstruct system.",
              "line_range": [
                188,
                219
              ],
              "parameters": [
                "self",
                "request",
                "ai_handler"
              ]
            },
            {
              "name": "_process_bypass",
              "docstring": "Process request without llmstruct system.",
              "line_range": [
                221,
                236
              ],
              "parameters": [
                "self",
                "request",
                "ai_handler"
              ]
            },
            {
              "name": "_optimize_context",
              "docstring": "Optimize context using orchestrator.",
              "line_range": [
                238,
                261
              ],
              "parameters": [
                "self",
                "request"
              ]
            },
            {
              "name": "_analyze_ai_delegation",
              "docstring": "Analyze which AI should handle this request.",
              "line_range": [
                263,
                280
              ],
              "parameters": [
                "self",
                "request"
              ]
            },
            {
              "name": "_get_enhanced_context",
              "docstring": "Get enhanced context with project awareness.",
              "line_range": [
                282,
                295
              ],
              "parameters": [
                "self",
                "request",
                "context_result"
              ]
            },
            {
              "name": "_get_capability_summary",
              "docstring": "Get current system capabilities.",
              "line_range": [
                297,
                310
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_generate_usage_guidance",
              "docstring": "Generate guidance for AI on how to use llmstruct system.",
              "line_range": [
                312,
                331
              ],
              "parameters": [
                "self",
                "request"
              ]
            },
            {
              "name": "_map_tags_to_scenario",
              "docstring": "Map context tags to orchestrator scenarios.",
              "line_range": [
                333,
                348
              ],
              "parameters": [
                "self",
                "tags"
              ]
            },
            {
              "name": "_default_ai_processing",
              "docstring": "Default AI processing when no custom handler provided.",
              "line_range": [
                350,
                365
              ],
              "parameters": [
                "self",
                "request",
                "context"
              ]
            },
            {
              "name": "get_middleware_stats",
              "docstring": "Get middleware usage statistics.",
              "line_range": [
                367,
                376
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "force_llmstruct_mode",
              "docstring": "Force all future requests to use llmstruct system.",
              "line_range": [
                378,
                381
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "enable_guidance_mode",
              "docstring": "Enable guided mode with llmstruct suggestions.",
              "line_range": [
                383,
                386
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "logger.info",
          "self._load_middleware_config",
          "CursorAIBridge",
          "Path",
          "str",
          "SystemCapabilityDiscovery",
          "create_context_orchestrator"
        ],
        "_load_middleware_config": [
          "config_path.exists",
          "open",
          "json.load"
        ],
        "process_ai_request": [
          "self._parse_ai_request",
          "self._should_use_llmstruct",
          "self._process_with_llmstruct",
          "logger.error",
          "self._process_bypass",
          "time.time",
          "str",
          "AIResponse"
        ],
        "_parse_ai_request": [
          "re.findall",
          "context_tags.extend",
          "time.time",
          "re.sub",
          "AIRequest"
        ],
        "_should_use_llmstruct": [],
        "_process_with_llmstruct": [
          "self._default_ai_processing",
          "enhanced_context.get",
          "ai_handler",
          "self._get_enhanced_context",
          "time.time",
          "self._optimize_context",
          "self._analyze_ai_delegation",
          "AIResponse"
        ],
        "_process_bypass": [
          "ai_handler",
          "AIResponse"
        ],
        "_optimize_context": [
          "context.get",
          "logger.error",
          "len",
          "str",
          "self._map_tags_to_scenario"
        ],
        "_analyze_ai_delegation": [
          "delegation.get",
          "str",
          "logger.error"
        ],
        "_get_enhanced_context": [
          "self._get_capability_summary",
          "self._generate_usage_guidance"
        ],
        "_get_capability_summary": [
          "str"
        ],
        "_generate_usage_guidance": [
          "guidance.append"
        ],
        "_map_tags_to_scenario": [],
        "_default_ai_processing": [],
        "get_middleware_stats": [],
        "force_llmstruct_mode": [
          "logger.info"
        ],
        "enable_guidance_mode": [
          "logger.info"
        ],
        "initialize_ai_middleware": [
          "AIWorkflowMiddleware"
        ],
        "get_ai_middleware": [],
        "process_ai_query": [
          "RuntimeError",
          "_middleware_instance.process_ai_request"
        ],
        "ensure_llmstruct_integration": [],
        "wrapper": [
          "kwargs.get",
          "logger.warning",
          "middleware.process_ai_request",
          "str",
          "func",
          "get_ai_middleware"
        ]
      },
      "dependencies": [
        "Any",
        "Callable",
        "CursorAIBridge",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "SystemCapabilityDiscovery",
        "create_context_orchestrator",
        "dataclass",
        "dataclasses",
        "enum",
        "json",
        "llmstruct.ai_self_awareness",
        "llmstruct.context_orchestrator",
        "llmstruct.cursor_ai_bridge",
        "logging",
        "pathlib",
        "re",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "5205c957-1450-4e6c-8160-d0ae444df184"
    },
    {
      "module_id": "src.llmstruct.ai_self_awareness",
      "path": "src/llmstruct/ai_self_awareness.py",
      "category": "core",
      "module_doc": "AI Self-Awareness Enhancement Module\nProvides comprehensive system introspection and capability discovery for llmstruct AI systems.\nEnhanced with Cursor IDE integration and real-time metrics.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize the capability discovery system with CLI integration.",
          "line_range": [
            101,
            107
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_ensure_directories",
          "docstring": "Ensure required directories exist.",
          "line_range": [
            109,
            111
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "discover_all_capabilities",
          "docstring": "Perform comprehensive capability discovery with unused function integration.\n\nArgs:\n    force_refresh: If True, bypass cache and perform fresh discovery\n    \nReturns:\n    Complete system capabilities overview enhanced with integrated unused functions",
          "line_range": [
            113,
            154
          ],
          "parameters": [
            "self",
            "force_refresh"
          ],
          "decorators": []
        },
        {
          "name": "_get_integration_metrics",
          "docstring": "Get metrics about unused function integration success.",
          "line_range": [
            156,
            163
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_enhanced_capabilities_summary",
          "docstring": "Get enhanced capabilities summary including unused function integration.",
          "line_range": [
            165,
            203
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_comprehensive_ai_status",
          "docstring": "Get comprehensive AI status including unused function integration analysis.\nThis is the primary method for AI self-awareness reporting.",
          "line_range": [
            205,
            246
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_discover_tools",
          "docstring": "Discover and check health of all available tools.",
          "line_range": [
            248,
            260
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_cli_processor",
          "docstring": "Check CLI processor health.",
          "line_range": [
            262,
            297
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_copilot_manager",
          "docstring": "Check Copilot manager health.",
          "line_range": [
            299,
            336
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_context_orchestrator",
          "docstring": "Check context orchestrator health.",
          "line_range": [
            338,
            393
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_cache_system",
          "docstring": "Check cache system health.",
          "line_range": [
            395,
            438
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_struct_parser",
          "docstring": "Check struct.json parser health.",
          "line_range": [
            440,
            484
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_docs_system",
          "docstring": "Check docs.json system health.",
          "line_range": [
            486,
            517
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_discover_context_capabilities",
          "docstring": "Discover available context capabilities.",
          "line_range": [
            519,
            556
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_integration_health",
          "docstring": "Check health of all system integrations.",
          "line_range": [
            558,
            567
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_check_component_status",
          "docstring": "Check status of a specific component.",
          "line_range": [
            569,
            574
          ],
          "parameters": [
            "self",
            "component_name"
          ],
          "decorators": []
        },
        {
          "name": "_discover_vscode_capabilities",
          "docstring": "Discover VS Code specific capabilities.",
          "line_range": [
            576,
            585
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_cache_hit_rate",
          "docstring": "Calculate cache hit rate using real metrics.",
          "line_range": [
            587,
            589
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_estimate_system_load",
          "docstring": "Estimate current system load using real metrics.",
          "line_range": [
            591,
            593
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_is_cache_valid",
          "docstring": "Check if cached capabilities are still valid.",
          "line_range": [
            595,
            602
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_cached_capabilities",
          "docstring": "Load capabilities from cache.",
          "line_range": [
            604,
            618
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_cache_capabilities",
          "docstring": "Cache capabilities to disk.",
          "line_range": [
            620,
            630
          ],
          "parameters": [
            "self",
            "capabilities"
          ],
          "decorators": []
        },
        {
          "name": "get_capabilities_summary",
          "docstring": "Get a human-readable summary of current capabilities.",
          "line_range": [
            632,
            691
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_project_structure",
          "docstring": "Enhanced project structure analysis integrating multiple unused functions\nfor comprehensive AI self-awareness.",
          "line_range": [
            693,
            739
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_enhanced_directory_structure",
          "docstring": "Integration of unused cli_utils.get_directory_structure() function\nfor enhanced AI project awareness.",
          "line_range": [
            741,
            760
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_unused_capabilities",
          "docstring": "Analyze unused functions to discover hidden AI capabilities.\nThis transforms the 115 unused functions into potential AI enhancements.",
          "line_range": [
            762,
            819
          ],
          "parameters": [
            "self",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "_discover_config_capabilities",
          "docstring": "Integration of unused cli_config functions for AI configuration awareness.",
          "line_range": [
            821,
            849
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_discover_context_scenarios",
          "docstring": "Integration of unused context_orchestrator functions for scenario awareness.",
          "line_range": [
            851,
            890
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_is_ai_useful_command",
          "docstring": "Determine if a CLI command function would be useful for AI self-awareness.",
          "line_range": [
            892,
            898
          ],
          "parameters": [
            "self",
            "function_name"
          ],
          "decorators": []
        },
        {
          "name": "_is_ai_useful_config",
          "docstring": "Determine if a config function would be useful for AI configuration awareness.",
          "line_range": [
            900,
            906
          ],
          "parameters": [
            "self",
            "function_name"
          ],
          "decorators": []
        },
        {
          "name": "_is_ai_useful_utility",
          "docstring": "Determine if a utility function would be useful for AI operations.",
          "line_range": [
            908,
            914
          ],
          "parameters": [
            "self",
            "function_name"
          ],
          "decorators": []
        },
        {
          "name": "_prioritize_integrations",
          "docstring": "Prioritize which unused functions should be integrated first.",
          "line_range": [
            916,
            932
          ],
          "parameters": [
            "self",
            "capabilities"
          ],
          "decorators": []
        },
        {
          "name": "_basic_directory_scan",
          "docstring": "Basic directory scan for fallback scenarios.",
          "line_range": [
            934,
            946
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_cursor_status_report",
          "docstring": "Generate Cursor-specific status optimized for IDE integration.",
          "line_range": [
            949,
            967
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "optimize_context_for_cursor",
          "docstring": "Provide perfectly sized context for Cursor interactions.",
          "line_range": [
            969,
            1001
          ],
          "parameters": [
            "self",
            "query_analysis"
          ],
          "decorators": []
        },
        {
          "name": "get_goal_aligned_suggestions",
          "docstring": "Provide suggestions aligned with business goals from personal bridge.",
          "line_range": [
            1003,
            1038
          ],
          "parameters": [
            "self",
            "technical_context"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_real_cache_hit_rate",
          "docstring": "Calculate actual cache performance from JSONCache and system metrics.",
          "line_range": [
            1040,
            1066
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_real_system_load",
          "docstring": "Get actual system performance metrics.",
          "line_range": [
            1068,
            1090
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_cursor_config",
          "docstring": "Load Cursor-specific configuration.",
          "line_range": [
            1092,
            1102
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_personal_bridge",
          "docstring": "Load personal planning bridge data.",
          "line_range": [
            1104,
            1114
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_analyze_query_type",
          "docstring": "Analyze query to determine optimal context type.",
          "line_range": [
            1116,
            1144
          ],
          "parameters": [
            "self",
            "query_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_apply_privacy_filter",
          "docstring": "Apply privacy filtering based on level.",
          "line_range": [
            1146,
            1163
          ],
          "parameters": [
            "self",
            "context_data",
            "privacy_level"
          ],
          "decorators": []
        },
        {
          "name": "_filter_sensitive_dict",
          "docstring": "Filter sensitive information from dictionary.",
          "line_range": [
            1165,
            1177
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_get_overall_health_emoji",
          "docstring": "Get emoji representing overall system health.",
          "line_range": [
            1179,
            1202
          ],
          "parameters": [
            "self",
            "capabilities"
          ],
          "decorators": []
        },
        {
          "name": "_get_context_status_emoji",
          "docstring": "Get emoji for context engine status.",
          "line_range": [
            1204,
            1214
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_get_ai_integration_emoji",
          "docstring": "Get emoji for AI integration status.",
          "line_range": [
            1216,
            1224
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_goal_alignment_status",
          "docstring": "Get goal alignment status.",
          "line_range": [
            1226,
            1235
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CapabilityStatus",
          "docstring": "Status of system capabilities.",
          "line_range": [
            22,
            27
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextMode",
          "docstring": "Available context modes.",
          "line_range": [
            30,
            35
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ToolHealth",
          "docstring": "Health status of a specific tool.",
          "line_range": [
            39,
            46
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ContextCapabilities",
          "docstring": "Available context capabilities.",
          "line_range": [
            50,
            57
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "IntegrationHealth",
          "docstring": "Status of system integrations.",
          "line_range": [
            61,
            68
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "VSCodeCapabilities",
          "docstring": "VS Code specific capabilities.",
          "line_range": [
            72,
            79
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "SystemCapabilities",
          "docstring": "Complete system capabilities overview.",
          "line_range": [
            83,
            91
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "SystemCapabilityDiscovery",
          "docstring": "Discovers and monitors system capabilities in real-time.\nProvides AI with comprehensive understanding of available tools and systems.\nEnhanced with unused function integration for maximum AI self-awareness.",
          "line_range": [
            94,
            1235
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize the capability discovery system with CLI integration.",
              "line_range": [
                101,
                107
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_ensure_directories",
              "docstring": "Ensure required directories exist.",
              "line_range": [
                109,
                111
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "discover_all_capabilities",
              "docstring": "Perform comprehensive capability discovery with unused function integration.\n\nArgs:\n    force_refresh: If True, bypass cache and perform fresh discovery\n    \nReturns:\n    Complete system capabilities overview enhanced with integrated unused functions",
              "line_range": [
                113,
                154
              ],
              "parameters": [
                "self",
                "force_refresh"
              ]
            },
            {
              "name": "_get_integration_metrics",
              "docstring": "Get metrics about unused function integration success.",
              "line_range": [
                156,
                163
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_enhanced_capabilities_summary",
              "docstring": "Get enhanced capabilities summary including unused function integration.",
              "line_range": [
                165,
                203
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_comprehensive_ai_status",
              "docstring": "Get comprehensive AI status including unused function integration analysis.\nThis is the primary method for AI self-awareness reporting.",
              "line_range": [
                205,
                246
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_discover_tools",
              "docstring": "Discover and check health of all available tools.",
              "line_range": [
                248,
                260
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_cli_processor",
              "docstring": "Check CLI processor health.",
              "line_range": [
                262,
                297
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_copilot_manager",
              "docstring": "Check Copilot manager health.",
              "line_range": [
                299,
                336
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_context_orchestrator",
              "docstring": "Check context orchestrator health.",
              "line_range": [
                338,
                393
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_cache_system",
              "docstring": "Check cache system health.",
              "line_range": [
                395,
                438
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_struct_parser",
              "docstring": "Check struct.json parser health.",
              "line_range": [
                440,
                484
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_docs_system",
              "docstring": "Check docs.json system health.",
              "line_range": [
                486,
                517
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_discover_context_capabilities",
              "docstring": "Discover available context capabilities.",
              "line_range": [
                519,
                556
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_integration_health",
              "docstring": "Check health of all system integrations.",
              "line_range": [
                558,
                567
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_check_component_status",
              "docstring": "Check status of a specific component.",
              "line_range": [
                569,
                574
              ],
              "parameters": [
                "self",
                "component_name"
              ]
            },
            {
              "name": "_discover_vscode_capabilities",
              "docstring": "Discover VS Code specific capabilities.",
              "line_range": [
                576,
                585
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_calculate_cache_hit_rate",
              "docstring": "Calculate cache hit rate using real metrics.",
              "line_range": [
                587,
                589
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_estimate_system_load",
              "docstring": "Estimate current system load using real metrics.",
              "line_range": [
                591,
                593
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_is_cache_valid",
              "docstring": "Check if cached capabilities are still valid.",
              "line_range": [
                595,
                602
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_cached_capabilities",
              "docstring": "Load capabilities from cache.",
              "line_range": [
                604,
                618
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_cache_capabilities",
              "docstring": "Cache capabilities to disk.",
              "line_range": [
                620,
                630
              ],
              "parameters": [
                "self",
                "capabilities"
              ]
            },
            {
              "name": "get_capabilities_summary",
              "docstring": "Get a human-readable summary of current capabilities.",
              "line_range": [
                632,
                691
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_analyze_project_structure",
              "docstring": "Enhanced project structure analysis integrating multiple unused functions\nfor comprehensive AI self-awareness.",
              "line_range": [
                693,
                739
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_enhanced_directory_structure",
              "docstring": "Integration of unused cli_utils.get_directory_structure() function\nfor enhanced AI project awareness.",
              "line_range": [
                741,
                760
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_analyze_unused_capabilities",
              "docstring": "Analyze unused functions to discover hidden AI capabilities.\nThis transforms the 115 unused functions into potential AI enhancements.",
              "line_range": [
                762,
                819
              ],
              "parameters": [
                "self",
                "struct_data"
              ]
            },
            {
              "name": "_discover_config_capabilities",
              "docstring": "Integration of unused cli_config functions for AI configuration awareness.",
              "line_range": [
                821,
                849
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_discover_context_scenarios",
              "docstring": "Integration of unused context_orchestrator functions for scenario awareness.",
              "line_range": [
                851,
                890
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_is_ai_useful_command",
              "docstring": "Determine if a CLI command function would be useful for AI self-awareness.",
              "line_range": [
                892,
                898
              ],
              "parameters": [
                "self",
                "function_name"
              ]
            },
            {
              "name": "_is_ai_useful_config",
              "docstring": "Determine if a config function would be useful for AI configuration awareness.",
              "line_range": [
                900,
                906
              ],
              "parameters": [
                "self",
                "function_name"
              ]
            },
            {
              "name": "_is_ai_useful_utility",
              "docstring": "Determine if a utility function would be useful for AI operations.",
              "line_range": [
                908,
                914
              ],
              "parameters": [
                "self",
                "function_name"
              ]
            },
            {
              "name": "_prioritize_integrations",
              "docstring": "Prioritize which unused functions should be integrated first.",
              "line_range": [
                916,
                932
              ],
              "parameters": [
                "self",
                "capabilities"
              ]
            },
            {
              "name": "_basic_directory_scan",
              "docstring": "Basic directory scan for fallback scenarios.",
              "line_range": [
                934,
                946
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_cursor_status_report",
              "docstring": "Generate Cursor-specific status optimized for IDE integration.",
              "line_range": [
                949,
                967
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "optimize_context_for_cursor",
              "docstring": "Provide perfectly sized context for Cursor interactions.",
              "line_range": [
                969,
                1001
              ],
              "parameters": [
                "self",
                "query_analysis"
              ]
            },
            {
              "name": "get_goal_aligned_suggestions",
              "docstring": "Provide suggestions aligned with business goals from personal bridge.",
              "line_range": [
                1003,
                1038
              ],
              "parameters": [
                "self",
                "technical_context"
              ]
            },
            {
              "name": "_calculate_real_cache_hit_rate",
              "docstring": "Calculate actual cache performance from JSONCache and system metrics.",
              "line_range": [
                1040,
                1066
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_real_system_load",
              "docstring": "Get actual system performance metrics.",
              "line_range": [
                1068,
                1090
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_cursor_config",
              "docstring": "Load Cursor-specific configuration.",
              "line_range": [
                1092,
                1102
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_personal_bridge",
              "docstring": "Load personal planning bridge data.",
              "line_range": [
                1104,
                1114
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_analyze_query_type",
              "docstring": "Analyze query to determine optimal context type.",
              "line_range": [
                1116,
                1144
              ],
              "parameters": [
                "self",
                "query_analysis"
              ]
            },
            {
              "name": "_apply_privacy_filter",
              "docstring": "Apply privacy filtering based on level.",
              "line_range": [
                1146,
                1163
              ],
              "parameters": [
                "self",
                "context_data",
                "privacy_level"
              ]
            },
            {
              "name": "_filter_sensitive_dict",
              "docstring": "Filter sensitive information from dictionary.",
              "line_range": [
                1165,
                1177
              ],
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_get_overall_health_emoji",
              "docstring": "Get emoji representing overall system health.",
              "line_range": [
                1179,
                1202
              ],
              "parameters": [
                "self",
                "capabilities"
              ]
            },
            {
              "name": "_get_context_status_emoji",
              "docstring": "Get emoji for context engine status.",
              "line_range": [
                1204,
                1214
              ],
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "_get_ai_integration_emoji",
              "docstring": "Get emoji for AI integration status.",
              "line_range": [
                1216,
                1224
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_goal_alignment_status",
              "docstring": "Get goal alignment status.",
              "line_range": [
                1226,
                1235
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "create_ai_cli_integration",
          "self._ensure_directories"
        ],
        "_ensure_directories": [],
        "discover_all_capabilities": [
          "logger.info",
          "SystemCapabilities",
          "self._estimate_system_load",
          "self._discover_context_capabilities",
          "self._is_cache_valid",
          "self._discover_tools",
          "self._check_integration_health",
          "self._load_cached_capabilities",
          "time.time",
          "self._discover_vscode_capabilities",
          "self._calculate_cache_hit_rate",
          "self._cache_capabilities",
          "self._get_integration_metrics",
          "datetime.now",
          "self._analyze_project_structure"
        ],
        "_get_integration_metrics": [],
        "get_enhanced_capabilities_summary": [
          "str",
          "enhanced_info.append",
          "hasattr",
          "self.get_capabilities_summary"
        ],
        "get_comprehensive_ai_status": [
          "get_ai_enhanced_cli_summary",
          "self.get_enhanced_capabilities_summary",
          "str"
        ],
        "_discover_tools": [
          "self._check_context_orchestrator",
          "self._check_struct_parser",
          "self._check_docs_system",
          "self._check_copilot_manager",
          "self._check_cache_system",
          "self._check_cli_processor"
        ],
        "_check_cli_processor": [
          "ToolHealth",
          "CLIConfig",
          "CLIUtils",
          "CommandProcessor",
          "time.time",
          "str",
          "datetime.now"
        ],
        "_check_copilot_manager": [
          "ToolHealth",
          "manager.get_context_status",
          "hasattr",
          "time.time",
          "str",
          "initialize_copilot",
          "datetime.now"
        ],
        "_check_context_orchestrator": [
          "get_optimized_context",
          "ToolHealth",
          "logger.warning",
          "hasattr",
          "time.time",
          "str",
          "datetime.now",
          "create_context_orchestrator"
        ],
        "_check_cache_system": [
          "ToolHealth",
          "time.time",
          "str",
          "cache.get_full_json",
          "cache.close",
          "cache.cache_json",
          "datetime.now",
          "struct_file.exists",
          "JSONCache"
        ],
        "_check_struct_parser": [
          "ToolHealth",
          "time.time",
          "str",
          "FileNotFoundError",
          "struct_data.get",
          "datetime.now",
          "missing_keys.append",
          "open",
          "json.load",
          "struct_file.exists"
        ],
        "_check_docs_system": [
          "ToolHealth",
          "docs_file.exists",
          "time.time",
          "str",
          "FileNotFoundError",
          "datetime.now",
          "open",
          "json.load"
        ],
        "_discover_context_capabilities": [
          "isinstance",
          "logger.error",
          "list",
          "scenario_mappings.keys",
          "str",
          "ContextCapabilities",
          "config.get",
          "create_context_orchestrator"
        ],
        "_check_integration_health": [
          "self._check_component_status",
          "IntegrationHealth"
        ],
        "_check_component_status": [
          "hasattr"
        ],
        "_discover_vscode_capabilities": [
          "VSCodeCapabilities"
        ],
        "_calculate_cache_hit_rate": [
          "self._calculate_real_cache_hit_rate"
        ],
        "_estimate_system_load": [
          "self._get_real_system_load"
        ],
        "_is_cache_valid": [
          "time.time"
        ],
        "_load_cached_capabilities": [
          "open",
          "json.load",
          "logger.error"
        ],
        "_cache_capabilities": [
          "logger.error",
          "open",
          "asdict",
          "json.dump"
        ],
        "get_capabilities_summary": [
          "chr",
          "len",
          "str",
          "self.discover_all_capabilities"
        ],
        "_analyze_project_structure": [
          "sum",
          "module.get",
          "len",
          "self._analyze_unused_capabilities",
          "str",
          "self._discover_config_capabilities",
          "struct_data.get",
          "open",
          "json.load",
          "struct_file.exists",
          "self._get_enhanced_directory_structure",
          "self._discover_context_scenarios"
        ],
        "_get_enhanced_directory_structure": [
          "self._basic_directory_scan",
          "str",
          "get_directory_structure"
        ],
        "_analyze_unused_capabilities": [
          "modules.get",
          "self._is_ai_useful_command",
          "cli_module.get",
          "config_module.get",
          "self._is_ai_useful_config",
          "self._is_ai_useful_utility",
          "self._prioritize_integrations",
          "utils_module.get",
          "len",
          "f.startswith",
          "str",
          "min",
          "struct_data.get"
        ],
        "_discover_config_capabilities": [
          "get_queue_config",
          "is_auto_update_enabled",
          "get_copilot_config",
          "get_context_config",
          "str"
        ],
        "_discover_context_scenarios": [
          "get_context_for_scenario",
          "str",
          "get_metrics_summary"
        ],
        "_is_ai_useful_command": [],
        "_is_ai_useful_config": [],
        "_is_ai_useful_utility": [],
        "_prioritize_integrations": [
          "priorities.append"
        ],
        "_basic_directory_scan": [
          "item.is_dir",
          "str",
          "logger.error",
          "item.is_file"
        ],
        "get_cursor_status_report": [
          "str",
          "self._get_context_status_emoji",
          "self._load_cursor_config",
          "self.discover_all_capabilities",
          "self._get_overall_health_emoji",
          "self._get_ai_integration_emoji",
          "self._get_goal_alignment_status"
        ],
        "optimize_context_for_cursor": [
          "file_path.exists",
          "self._apply_privacy_filter",
          "logger.error",
          "optimal_config.get",
          "cursor_config.get",
          "str",
          "self._load_cursor_config",
          "self._analyze_query_type",
          "json.load",
          "context_rules.get",
          "open"
        ],
        "get_goal_aligned_suggestions": [
          "any",
          "logger.error",
          "self._load_personal_bridge",
          "personal_bridge.get",
          "technical_context.lower",
          "suggestions.extend"
        ],
        "_calculate_real_cache_hit_rate": [
          "logger.error",
          "list",
          "len",
          "cache_dir.exists",
          "cache_file.stat",
          "time.time",
          "cache_dir.glob"
        ],
        "_get_real_system_load": [
          "logger.error",
          "psutil.virtual_memory",
          "str",
          "psutil.disk_usage",
          "min",
          "psutil.cpu_percent"
        ],
        "_load_cursor_config": [
          "config_path.exists",
          "open",
          "json.load",
          "logger.error"
        ],
        "_load_personal_bridge": [
          "bridge_path.exists",
          "open",
          "json.load",
          "logger.error"
        ],
        "_analyze_query_type": [
          "query_analysis.get",
          "any"
        ],
        "_apply_privacy_filter": [
          "self._filter_sensitive_dict",
          "context_data.items",
          "isinstance"
        ],
        "_filter_sensitive_dict": [
          "any",
          "isinstance",
          "self._filter_sensitive_dict",
          "data.items",
          "key.lower"
        ],
        "_get_overall_health_emoji": [],
        "_get_context_status_emoji": [
          "len"
        ],
        "_get_ai_integration_emoji": [
          "hasattr"
        ],
        "_get_goal_alignment_status": [
          "self._load_personal_bridge"
        ]
      },
      "dependencies": [
        "Any",
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "CopilotContextManager",
        "Dict",
        "Enum",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "asdict",
        "create_ai_cli_integration",
        "create_context_orchestrator",
        "dataclass",
        "dataclasses",
        "datetime",
        "enum",
        "get_ai_enhanced_cli_summary",
        "get_auto_update_config",
        "get_context_config",
        "get_context_for_scenario",
        "get_copilot_config",
        "get_directory_structure",
        "get_metrics_summary",
        "get_optimized_context",
        "get_queue_config",
        "initialize_copilot",
        "is_auto_update_enabled",
        "json",
        "llmstruct.ai_cli_integration",
        "llmstruct.cache",
        "llmstruct.cli_commands",
        "llmstruct.cli_config",
        "llmstruct.cli_utils",
        "llmstruct.context_orchestrator",
        "llmstruct.copilot",
        "logging",
        "os",
        "pathlib",
        "psutil",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "b3b52351-5ce9-4796-a306-9552abaad7d9"
    },
    {
      "module_id": "src.llmstruct.cache",
      "path": "src/llmstruct/cache.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize SQLite cache for JSON files.",
          "line_range": [
            21,
            25
          ],
          "parameters": [
            "self",
            "db_path"
          ],
          "decorators": []
        },
        {
          "name": "create_tables",
          "docstring": "Create tables for metadata and file paths.",
          "line_range": [
            27,
            49
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cache_json",
          "docstring": "Cache JSON metadata and store full file path.",
          "line_range": [
            51,
            90
          ],
          "parameters": [
            "self",
            "json_path",
            "artifact_id",
            "summary",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "get_metadata",
          "docstring": "Retrieve metadata by artifact_id.",
          "line_range": [
            92,
            108
          ],
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "get_full_json",
          "docstring": "Load full JSON by artifact_id.",
          "line_range": [
            110,
            126
          ],
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Close database connection.",
          "line_range": [
            128,
            130
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JSONCache",
          "docstring": "",
          "line_range": [
            20,
            130
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize SQLite cache for JSON files.",
              "line_range": [
                21,
                25
              ],
              "parameters": [
                "self",
                "db_path"
              ]
            },
            {
              "name": "create_tables",
              "docstring": "Create tables for metadata and file paths.",
              "line_range": [
                27,
                49
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cache_json",
              "docstring": "Cache JSON metadata and store full file path.",
              "line_range": [
                51,
                90
              ],
              "parameters": [
                "self",
                "json_path",
                "artifact_id",
                "summary",
                "tags"
              ]
            },
            {
              "name": "get_metadata",
              "docstring": "Retrieve metadata by artifact_id.",
              "line_range": [
                92,
                108
              ],
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "get_full_json",
              "docstring": "Load full JSON by artifact_id.",
              "line_range": [
                110,
                126
              ],
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "close",
              "docstring": "Close database connection.",
              "line_range": [
                128,
                130
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "sqlite3.connect",
          "self.create_tables"
        ],
        "create_tables": [],
        "cache_json": [
          "json_file.exists",
          "content.encode",
          "Path",
          "logging.error",
          "str",
          "json.dumps",
          "logging.info",
          "hashlib.sha256",
          "open",
          "f.read"
        ],
        "get_metadata": [
          "json.loads",
          "cursor.fetchone"
        ],
        "get_full_json": [
          "open",
          "json.load",
          "logging.error",
          "cursor.fetchone"
        ],
        "close": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "hashlib",
        "json",
        "logging",
        "pathlib",
        "sqlite3",
        "typing"
      ],
      "hash": null,
      "artifact_id": "2abed339-e632-42d5-9c71-092ab913ed44"
    },
    {
      "module_id": "src.llmstruct.self_run",
      "path": "src/llmstruct/self_run.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_struct",
          "docstring": "Filter struct.json or init.json based on prompt keywords. Supports dict or list as root.",
          "line_range": [
            20,
            71
          ],
          "parameters": [
            "struct",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "Attach filtered JSON to LLM prompt, using cache if available.",
          "line_range": [
            74,
            114
          ],
          "parameters": [
            "context_path",
            "prompt",
            "cache"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_struct": [
          "any",
          "isinstance",
          "module.get",
          "str",
          "struct.get",
          "item.get",
          "filter_json",
          "prompt.lower"
        ],
        "attach_to_llm_request": [
          "cache.get_metadata",
          "select_json",
          "Path",
          "filter_struct",
          "context_file.exists",
          "logging.error",
          "logging.info",
          "filter_json",
          "json.dumps",
          "cache.cache_json",
          "prompt.lower",
          "cache.get_full_json"
        ]
      },
      "dependencies": [
        "Any",
        "JSONCache",
        "Optional",
        "Path",
        "cache",
        "filter_json",
        "json",
        "json_selector",
        "logging",
        "pathlib",
        "select_json",
        "typing"
      ],
      "hash": null,
      "artifact_id": "9d6b74be-f110-4b73-ae78-40234fc66062"
    },
    {
      "module_id": "src.llmstruct.cursor_ai_bridge",
      "path": "src/llmstruct/cursor_ai_bridge.py",
      "category": "core",
      "module_doc": "Cursor AI Bridge - API Layer for AI Assistant Integration\nProvides CLI and HTTP endpoints so Cursor AI can use WorkflowOrchestrator",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface for Cursor AI Bridge.",
          "line_range": [
            350,
            401
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            29,
            32
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "ai_get_context",
          "docstring": "Get AI-optimized context for current development state.",
          "line_range": [
            34,
            67
          ],
          "parameters": [
            "self",
            "query_type",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "ai_analyze_task",
          "docstring": "Analyze a task and provide AI-optimized guidance.",
          "line_range": [
            69,
            93
          ],
          "parameters": [
            "self",
            "task_description"
          ],
          "decorators": []
        },
        {
          "name": "ai_create_task",
          "docstring": "Create a task through AI interface.",
          "line_range": [
            95,
            114
          ],
          "parameters": [
            "self",
            "title",
            "description",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "ai_get_onboarding_guide",
          "docstring": "Get comprehensive AI onboarding guide.",
          "line_range": [
            116,
            145
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "ai_check_duplicates",
          "docstring": "Check for code duplicates with AI-friendly output.",
          "line_range": [
            147,
            171
          ],
          "parameters": [
            "self",
            "threshold"
          ],
          "decorators": []
        },
        {
          "name": "ai_suggest",
          "docstring": "Get AI suggestions based on context.",
          "line_range": [
            173,
            199
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_estimate_task_complexity",
          "docstring": "Estimate task complexity based on codebase analysis.",
          "line_range": [
            201,
            215
          ],
          "parameters": [
            "self",
            "task",
            "struct_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_suggest_approach",
          "docstring": "Suggest approach based on task and codebase state.",
          "line_range": [
            217,
            234
          ],
          "parameters": [
            "self",
            "task",
            "struct_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_find_relevant_modules",
          "docstring": "Find modules relevant to the task.",
          "line_range": [
            236,
            248
          ],
          "parameters": [
            "self",
            "task",
            "struct_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_check_potential_duplicates",
          "docstring": "Check if task might create duplicates.",
          "line_range": [
            250,
            253
          ],
          "parameters": [
            "self",
            "task",
            "struct_analysis"
          ],
          "decorators": []
        },
        {
          "name": "_recommend_ai_for_task",
          "docstring": "Recommend which AI to use for the task.",
          "line_range": [
            255,
            264
          ],
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_generate_workflow_steps",
          "docstring": "Generate workflow steps for the task.",
          "line_range": [
            266,
            276
          ],
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_determine_context_requirements",
          "docstring": "Determine what context is needed for the task.",
          "line_range": [
            278,
            290
          ],
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "_get_workflow_suggestions",
          "docstring": "Get workflow suggestions based on context.",
          "line_range": [
            292,
            299
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_get_available_ai_commands",
          "docstring": "Get available AI commands.",
          "line_range": [
            301,
            310
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_identify_high_priority_duplicates",
          "docstring": "Identify high-priority duplicates for refactoring.",
          "line_range": [
            312,
            315
          ],
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "_generate_refactoring_suggestions",
          "docstring": "Generate refactoring suggestions.",
          "line_range": [
            317,
            323
          ],
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "_classify_task_type",
          "docstring": "Classify task type for AI delegation.",
          "line_range": [
            325,
            338
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_generate_next_steps",
          "docstring": "Generate next steps based on context.",
          "line_range": [
            340,
            347
          ],
          "parameters": [
            "self",
            "context"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CursorAIBridge",
          "docstring": "Bridge that allows Cursor AI assistant to use WorkflowOrchestrator\nthrough CLI commands and structured JSON responses.",
          "line_range": [
            23,
            347
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                29,
                32
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "ai_get_context",
              "docstring": "Get AI-optimized context for current development state.",
              "line_range": [
                34,
                67
              ],
              "parameters": [
                "self",
                "query_type",
                "file_path"
              ]
            },
            {
              "name": "ai_analyze_task",
              "docstring": "Analyze a task and provide AI-optimized guidance.",
              "line_range": [
                69,
                93
              ],
              "parameters": [
                "self",
                "task_description"
              ]
            },
            {
              "name": "ai_create_task",
              "docstring": "Create a task through AI interface.",
              "line_range": [
                95,
                114
              ],
              "parameters": [
                "self",
                "title",
                "description",
                "priority"
              ]
            },
            {
              "name": "ai_get_onboarding_guide",
              "docstring": "Get comprehensive AI onboarding guide.",
              "line_range": [
                116,
                145
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "ai_check_duplicates",
              "docstring": "Check for code duplicates with AI-friendly output.",
              "line_range": [
                147,
                171
              ],
              "parameters": [
                "self",
                "threshold"
              ]
            },
            {
              "name": "ai_suggest",
              "docstring": "Get AI suggestions based on context.",
              "line_range": [
                173,
                199
              ],
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "_estimate_task_complexity",
              "docstring": "Estimate task complexity based on codebase analysis.",
              "line_range": [
                201,
                215
              ],
              "parameters": [
                "self",
                "task",
                "struct_analysis"
              ]
            },
            {
              "name": "_suggest_approach",
              "docstring": "Suggest approach based on task and codebase state.",
              "line_range": [
                217,
                234
              ],
              "parameters": [
                "self",
                "task",
                "struct_analysis"
              ]
            },
            {
              "name": "_find_relevant_modules",
              "docstring": "Find modules relevant to the task.",
              "line_range": [
                236,
                248
              ],
              "parameters": [
                "self",
                "task",
                "struct_analysis"
              ]
            },
            {
              "name": "_check_potential_duplicates",
              "docstring": "Check if task might create duplicates.",
              "line_range": [
                250,
                253
              ],
              "parameters": [
                "self",
                "task",
                "struct_analysis"
              ]
            },
            {
              "name": "_recommend_ai_for_task",
              "docstring": "Recommend which AI to use for the task.",
              "line_range": [
                255,
                264
              ],
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "_generate_workflow_steps",
              "docstring": "Generate workflow steps for the task.",
              "line_range": [
                266,
                276
              ],
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "_determine_context_requirements",
              "docstring": "Determine what context is needed for the task.",
              "line_range": [
                278,
                290
              ],
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "_get_workflow_suggestions",
              "docstring": "Get workflow suggestions based on context.",
              "line_range": [
                292,
                299
              ],
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "_get_available_ai_commands",
              "docstring": "Get available AI commands.",
              "line_range": [
                301,
                310
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_identify_high_priority_duplicates",
              "docstring": "Identify high-priority duplicates for refactoring.",
              "line_range": [
                312,
                315
              ],
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "_generate_refactoring_suggestions",
              "docstring": "Generate refactoring suggestions.",
              "line_range": [
                317,
                323
              ],
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "_classify_task_type",
              "docstring": "Classify task type for AI delegation.",
              "line_range": [
                325,
                338
              ],
              "parameters": [
                "self",
                "context"
              ]
            },
            {
              "name": "_generate_next_steps",
              "docstring": "Generate next steps based on context.",
              "line_range": [
                340,
                347
              ],
              "parameters": [
                "self",
                "context"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "CursorIntegrationManager",
          "Path",
          "WorkflowOrchestrator",
          "str"
        ],
        "ai_get_context": [
          "context.get",
          "datetime.utcnow",
          "self._get_available_ai_commands",
          "self._get_workflow_suggestions",
          "len",
          "cursor_context.get",
          "str"
        ],
        "ai_analyze_task": [
          "context.get",
          "self._determine_context_requirements",
          "str",
          "self._suggest_approach",
          "self._check_potential_duplicates",
          "self._find_relevant_modules",
          "self._estimate_task_complexity",
          "self._recommend_ai_for_task",
          "self._generate_workflow_steps"
        ],
        "ai_create_task": [
          "self.ai_analyze_task",
          "datetime.utcnow",
          "str"
        ],
        "ai_get_onboarding_guide": [
          "str"
        ],
        "ai_check_duplicates": [
          "analysis.get",
          "self._generate_refactoring_suggestions",
          "self._identify_high_priority_duplicates",
          "str"
        ],
        "ai_suggest": [
          "self._classify_task_type",
          "self._get_workflow_suggestions",
          "self._generate_next_steps",
          "str",
          "delegation.get"
        ],
        "_estimate_task_complexity": [
          "task.lower",
          "any",
          "complexity_keywords.items"
        ],
        "_suggest_approach": [
          "task.lower",
          "approaches.append"
        ],
        "_find_relevant_modules": [
          "task.lower",
          "any",
          "module.get",
          "struct_analysis.get",
          "relevant.append"
        ],
        "_check_potential_duplicates": [],
        "_recommend_ai_for_task": [
          "task.lower",
          "any"
        ],
        "_generate_workflow_steps": [],
        "_determine_context_requirements": [
          "task.lower",
          "requirements.append"
        ],
        "_get_workflow_suggestions": [],
        "_get_available_ai_commands": [],
        "_identify_high_priority_duplicates": [],
        "_generate_refactoring_suggestions": [],
        "_classify_task_type": [
          "any",
          "context.lower"
        ],
        "_generate_next_steps": [],
        "main": [
          "bridge.ai_suggest",
          "bridge.ai_check_duplicates",
          "bridge.ai_create_task",
          "argparse.ArgumentParser",
          "parser.add_argument",
          "bridge.ai_get_context",
          "bridge.ai_analyze_task",
          "print",
          "json.dumps",
          "parser.parse_args",
          "CursorAIBridge",
          "bridge.ai_onboarding_guide"
        ]
      },
      "dependencies": [
        "Any",
        "CursorIntegrationManager",
        "Dict",
        "List",
        "Optional",
        "Path",
        "SystemCapabilityDiscovery",
        "WorkflowOrchestrator",
        "ai_self_awareness",
        "argparse",
        "cursor_integration",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "sys",
        "typing",
        "workflow_orchestrator"
      ],
      "hash": null,
      "artifact_id": "eb0f7d5d-d165-47a2-894b-f8b91f877dd4"
    },
    {
      "module_id": "src.llmstruct.transpiler",
      "path": "src/llmstruct/transpiler.py",
      "category": "core",
      "module_doc": "AI-Powered Universal Transpiler\nConverts entire codebases from one language to another using LLM analysis",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface for AI transpiler",
          "line_range": [
            475,
            527
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            142,
            149
          ],
          "parameters": [
            "self",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "analyze_source_project",
          "docstring": "Analyze source project structure",
          "line_range": [
            151,
            155
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "create_target_project_structure",
          "docstring": "Create target project directory structure",
          "line_range": [
            157,
            221
          ],
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "_generate_structure_info",
          "docstring": "Generate structure information for README",
          "line_range": [
            223,
            253
          ],
          "parameters": [
            "self",
            "analysis"
          ],
          "decorators": []
        },
        {
          "name": "transpile_module",
          "docstring": "Transpile a single module using AI",
          "line_range": [
            255,
            318
          ],
          "parameters": [
            "self",
            "module",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_format_functions",
          "docstring": "Format functions for prompt",
          "line_range": [
            320,
            333
          ],
          "parameters": [
            "self",
            "functions"
          ],
          "decorators": []
        },
        {
          "name": "_format_classes",
          "docstring": "Format classes for prompt",
          "line_range": [
            335,
            348
          ],
          "parameters": [
            "self",
            "classes"
          ],
          "decorators": []
        },
        {
          "name": "determine_target_path",
          "docstring": "Determine target file path for transpiled module",
          "line_range": [
            350,
            388
          ],
          "parameters": [
            "self",
            "module"
          ],
          "decorators": []
        },
        {
          "name": "transpile_project",
          "docstring": "Transpile entire project",
          "line_range": [
            390,
            472
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TranspilerConfig",
          "docstring": "Configuration for AI transpiler",
          "line_range": [
            24,
            35
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "LanguageTemplates",
          "docstring": "Templates and patterns for different target languages",
          "line_range": [
            38,
            136
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "AITranspiler",
          "docstring": "AI-powered code transpiler",
          "line_range": [
            139,
            472
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                142,
                149
              ],
              "parameters": [
                "self",
                "config"
              ]
            },
            {
              "name": "analyze_source_project",
              "docstring": "Analyze source project structure",
              "line_range": [
                151,
                155
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "create_target_project_structure",
              "docstring": "Create target project directory structure",
              "line_range": [
                157,
                221
              ],
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "_generate_structure_info",
              "docstring": "Generate structure information for README",
              "line_range": [
                223,
                253
              ],
              "parameters": [
                "self",
                "analysis"
              ]
            },
            {
              "name": "transpile_module",
              "docstring": "Transpile a single module using AI",
              "line_range": [
                255,
                318
              ],
              "parameters": [
                "self",
                "module",
                "context"
              ]
            },
            {
              "name": "_format_functions",
              "docstring": "Format functions for prompt",
              "line_range": [
                320,
                333
              ],
              "parameters": [
                "self",
                "functions"
              ]
            },
            {
              "name": "_format_classes",
              "docstring": "Format classes for prompt",
              "line_range": [
                335,
                348
              ],
              "parameters": [
                "self",
                "classes"
              ]
            },
            {
              "name": "determine_target_path",
              "docstring": "Determine target file path for transpiled module",
              "line_range": [
                350,
                388
              ],
              "parameters": [
                "self",
                "module"
              ]
            },
            {
              "name": "transpile_project",
              "docstring": "Transpile entire project",
              "line_range": [
                390,
                472
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "LLMClient",
          "UniversalConverter",
          "ConverterConfig"
        ],
        "analyze_source_project": [
          "logger.info"
        ],
        "create_target_project_structure": [
          "output_path.mkdir",
          "self._generate_structure_info",
          "logger.warning",
          "Path",
          "shutil.rmtree",
          "output_path.exists",
          "src_dir.mkdir"
        ],
        "_generate_structure_info": [
          "stats.get",
          "categories.items",
          "module.get",
          "len",
          "category.title",
          "analysis.get"
        ],
        "transpile_module": [
          "response.strip",
          "logger.error",
          "module.get",
          "len",
          "target_lang.upper",
          "ctx_module.get",
          "str",
          "target_lang.lower",
          "self._format_classes",
          "self._format_functions"
        ],
        "_format_functions": [
          "func.get",
          "len"
        ],
        "_format_classes": [
          "len",
          "cls.get"
        ],
        "determine_target_path": [
          "len",
          "Path",
          "module_id.split",
          "module.get"
        ],
        "transpile_project": [
          "logger.info",
          "report_path.write_text",
          "self.create_target_project_structure",
          "self.determine_target_path",
          "transpiled_files.append",
          "logger.error",
          "len",
          "self.transpile_module",
          "Path",
          "full_target_path.write_text",
          "str",
          "json.dumps",
          "self.analyze_source_project",
          "range",
          "analysis.get",
          "errors.append"
        ],
        "main": [
          "AITranspiler",
          "TranspilerConfig",
          "logger.error",
          "argparse.ArgumentParser",
          "len",
          "traceback.print_exc",
          "exit",
          "parser.add_argument",
          "print",
          "parser.parse_args",
          "Language",
          "transpiler.transpile_project"
        ]
      },
      "dependencies": [
        "Any",
        "ConverterConfig",
        "Dict",
        "Enum",
        "LLMClient",
        "Language",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "UniversalConverter",
        "argparse",
        "dataclass",
        "dataclasses",
        "enum",
        "json",
        "llm_client",
        "logging",
        "os",
        "parsers.universal_converter",
        "pathlib",
        "shutil",
        "traceback",
        "typing"
      ],
      "hash": null,
      "artifact_id": "5446f633-5db8-4cbc-9c93-051fe4302165"
    },
    {
      "module_id": "src.llmstruct.json_selector",
      "path": "src/llmstruct/json_selector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_json",
          "docstring": "Filter JSON data by key-value pair and select fields.",
          "line_range": [
            20,
            46
          ],
          "parameters": [
            "data",
            "filter_key",
            "filter_value",
            "fields"
          ],
          "decorators": []
        },
        {
          "name": "select_json",
          "docstring": "Load and filter JSON file, optionally parsing partially.",
          "line_range": [
            49,
            116
          ],
          "parameters": [
            "json_path",
            "filter_key",
            "filter_value",
            "fields",
            "partial"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_json": [
          "data.get",
          "filtered.append",
          "item.get",
          "isinstance"
        ],
        "select_json": [
          "filtered.append",
          "json_file.exists",
          "ijson.parse",
          "path.append",
          "prefix.startswith",
          "Path",
          "f.seek",
          "logging.error",
          "filter_json",
          "current_item.get",
          "open",
          "json.load"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "ijson",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "c68b5ca7-ffdb-45db-815e-732d13c82d4e"
    },
    {
      "module_id": "src.llmstruct.cli",
      "path": "src/llmstruct/cli.py",
      "category": "core",
      "module_doc": "LLMStruct CLI - Main entry point for the command-line interface.",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": [
            43,
            57
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from llmstruct.toml or return empty dict.",
          "line_range": [
            60,
            69
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": [
            72,
            81
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default ./tmp) and return the path.",
          "line_range": [
            84,
            104
          ],
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": [
            107,
            114
          ],
          "parameters": [
            "response"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with modular structure if available, fallback to legacy.",
          "line_range": [
            117,
            127
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive_modular",
          "docstring": "Run interactive CLI with modular structure.",
          "line_range": [
            130,
            144
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive_legacy",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": [
            147,
            503
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "process_cli_queue_enhanced",
          "docstring": "Enhanced queue processing with workflow support, performance tracking, and safety validation.",
          "line_range": [
            506,
            705
          ],
          "parameters": [
            "root_dir",
            "context_path",
            "args",
            "cache",
            "client"
          ],
          "decorators": []
        },
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": [
            708,
            759
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": [
            762,
            818
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": [
            821,
            823
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": [
            826,
            828
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": [
            831,
            833
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "copilot",
          "docstring": "Copilot integration and context management.",
          "line_range": [
            836,
            954
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "audit",
          "docstring": "Audit project structure and generate reports.",
          "line_range": [
            957,
            975
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "analyze_duplicates",
          "docstring": "Analyze function duplication using struct.json deep analysis.",
          "line_range": [
            978,
            1081
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": [
            1084,
            1314
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "line.startswith",
          "Path",
          "logging.error",
          "gitignore_path.exists",
          "gitignore_path.open",
          "line.strip"
        ],
        "load_config": [
          "Path",
          "config_path.exists",
          "logging.error",
          "toml.load",
          "config_path.open"
        ],
        "read_file_content": [
          "Path",
          "path.open",
          "logging.error",
          "path.is_file",
          "f.read"
        ],
        "write_to_file": [
          "file_path.exists",
          "f.write",
          "logging.warning",
          "Path",
          "logging.error",
          "logging.info",
          "base_path.mkdir",
          "str",
          "re.sub",
          "file_path.open"
        ],
        "parse_files_from_response": [
          "filename.strip",
          "files.append",
          "content.strip",
          "re.findall"
        ],
        "interactive": [
          "logging.warning",
          "interactive_modular",
          "interactive_legacy"
        ],
        "interactive_modular": [
          "cli_core.run_interactive_mode",
          "create_cli_core",
          "logging.info",
          "hasattr"
        ],
        "interactive_legacy": [
          "process_cli_queue_enhanced",
          "get_folder_structure",
          "time.time",
          "print",
          "user_input.startswith",
          "cache.clear",
          "subprocess.run",
          "load_gitignore",
          "args_str.strip",
          "write_to_file",
          "input",
          "os.stat",
          "sorted",
          "read_file_content",
          "os.makedirs",
          "cache.close",
          "m.group",
          "os.listdir",
          "parse",
          "user_input.lower",
          "int",
          "workflow.get",
          "cache.list_keys",
          "time.ctime",
          "json.dumps",
          "cache.get_stats",
          "struct_data.get",
          "JSONCache",
          "json.dump",
          "events_data.append",
          "isinstance",
          "re.match",
          "logging.warning",
          "Path",
          "len",
          "attach_to_llm_request",
          "LLMClient",
          "logging.error",
          "client.query",
          "open",
          "json.load"
        ],
        "process_cli_queue_enhanced": [
          "enumerate",
          "write_to_file",
          "isinstance",
          "workflow.get",
          "len",
          "get_folder_structure",
          "read_file_content",
          "attach_to_llm_request",
          "client.query",
          "logging.info",
          "logging.error",
          "time.time",
          "print",
          "item.get",
          "options.get",
          "open",
          "json.load",
          "load_gitignore"
        ],
        "parse": [
          "logging.warning",
          "Path",
          "cli_config.get",
          "generate_json",
          "logging.info",
          "logging.error",
          "cache.close",
          "load_config",
          "cache.cache_json",
          "config.get",
          "parsing_config.get",
          "JSONCache",
          "load_gitignore",
          "json.dump"
        ],
        "query": [
          "client.query_with_context",
          "logging.warning",
          "Path",
          "hasattr",
          "orchestrator.get_context_for_scenario",
          "LLMClient",
          "logging.error",
          "logging.info",
          "client.query",
          "cache.close",
          "create_context_orchestrator",
          "JSONCache",
          "json.dump"
        ],
        "context": [
          "logging.warning"
        ],
        "dogfood": [
          "logging.warning"
        ],
        "review": [
          "logging.warning"
        ],
        "copilot": [
          "f.write",
          "manager.load_context_layer",
          "shutil.copy",
          "manager.get_context_status",
          "layers.split",
          "template_path.exists",
          "print",
          "smart_suggest",
          "enumerate",
          "logging.info",
          "manager.export_context",
          "manager.unload_context_layer",
          "hasattr",
          "config_path.exists",
          "manager.close",
          "manager.validate_change",
          "Path",
          "getattr",
          "logging.error",
          "initialize_copilot",
          "manager.refresh_all_contexts",
          "open"
        ],
        "audit": [
          "file_path.exists",
          "Path",
          "analyze_duplicates",
          "hasattr",
          "print"
        ],
        "analyze_duplicates": [
          "enumerate",
          "filtered_duplicates.items",
          "duplicates.items",
          "len",
          "json.dump",
          "sorted",
          "hasattr",
          "getattr",
          "traceback.print_exc",
          "WorkflowOrchestrator",
          "json.dumps",
          "print",
          "duplication_data.get",
          "r.get",
          "rec.get",
          "orchestrator.analyze_codebase_for_duplicates",
          "analysis.get",
          "open"
        ],
        "main": [
          "context_parser.add_argument",
          "copilot_parser.add_argument",
          "query",
          "interactive_parser.add_argument",
          "subparsers.add_parser",
          "parse_parser.add_argument",
          "analyze_duplicates",
          "review_parser.add_argument",
          "asyncio.run",
          "parser.add_subparsers",
          "audit",
          "parser.parse_args",
          "parse",
          "audit_parser.add_argument",
          "duplicates_parser.add_argument",
          "interactive",
          "dogfood_parser.add_argument",
          "argparse.ArgumentParser",
          "review",
          "query_parser.add_argument",
          "context",
          "copilot",
          "dogfood"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "WorkflowOrchestrator",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "cli_core",
        "context_orchestrator",
        "copilot",
        "create_cli_core",
        "create_context_orchestrator",
        "generate_json",
        "get_folder_structure",
        "initialize_copilot",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "logging",
        "os",
        "pathlib",
        "re",
        "shutil",
        "smart_suggest",
        "subprocess",
        "sys",
        "time",
        "toml",
        "traceback",
        "typing",
        "workflow_orchestrator"
      ],
      "hash": null,
      "artifact_id": "e4c17da8-ae7d-4900-b44c-f6195a06a49e"
    },
    {
      "module_id": "src.llmstruct.cursor_integration",
      "path": "src/llmstruct/cursor_integration.py",
      "category": "core",
      "module_doc": "Cursor IDE Integration Module\nProvides seamless integration between llmstruct AI capabilities and Cursor IDE.",
      "functions": [
        {
          "name": "create_cursor_integration",
          "docstring": "Create a Cursor integration manager for the project.",
          "line_range": [
            435,
            437
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            31,
            35
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_cursor_optimized_context",
          "docstring": "Provide Cursor with perfectly sized context based on query analysis.",
          "line_range": [
            37,
            71
          ],
          "parameters": [
            "self",
            "query_type",
            "file_context"
          ],
          "decorators": []
        },
        {
          "name": "_load_cursor_config",
          "docstring": "Load Cursor-specific configuration.",
          "line_range": [
            73,
            83
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_apply_privacy_filter",
          "docstring": "Apply privacy filtering based on level.",
          "line_range": [
            85,
            101
          ],
          "parameters": [
            "self",
            "context_data",
            "privacy_level"
          ],
          "decorators": []
        },
        {
          "name": "_filter_sensitive_dict",
          "docstring": "Filter sensitive information from dictionary.",
          "line_range": [
            103,
            115
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            121,
            124
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "delegate_to_optimal_ai",
          "docstring": "Route tasks to best AI model based on preferences.",
          "line_range": [
            126,
            160
          ],
          "parameters": [
            "self",
            "task_type",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_delegation_confidence",
          "docstring": "Calculate confidence in AI delegation decision.",
          "line_range": [
            162,
            175
          ],
          "parameters": [
            "self",
            "task_type",
            "selected_ai"
          ],
          "decorators": []
        },
        {
          "name": "_load_cursor_config",
          "docstring": "Load Cursor configuration.",
          "line_range": [
            177,
            187
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            193,
            195
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_goal_aligned_suggestions",
          "docstring": "Provide suggestions aligned with business goals.",
          "line_range": [
            197,
            242
          ],
          "parameters": [
            "self",
            "technical_context"
          ],
          "decorators": []
        },
        {
          "name": "get_priority_guidance",
          "docstring": "Provide priority guidance based on business objectives.",
          "line_range": [
            244,
            270
          ],
          "parameters": [
            "self",
            "feature_options"
          ],
          "decorators": []
        },
        {
          "name": "_calculate_feature_score",
          "docstring": "Calculate priority score for a feature.",
          "line_range": [
            272,
            292
          ],
          "parameters": [
            "self",
            "feature",
            "prioritization"
          ],
          "decorators": []
        },
        {
          "name": "_get_scoring_reasoning",
          "docstring": "Get reasoning for feature scoring.",
          "line_range": [
            294,
            307
          ],
          "parameters": [
            "self",
            "feature",
            "prioritization"
          ],
          "decorators": []
        },
        {
          "name": "_load_personal_bridge",
          "docstring": "Load personal planning bridge data.",
          "line_range": [
            309,
            319
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            325,
            328
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "start_session",
          "docstring": "Start a new Cursor session.",
          "line_range": [
            330,
            349
          ],
          "parameters": [
            "self",
            "session_id",
            "user_preferences"
          ],
          "decorators": []
        },
        {
          "name": "save_session_context",
          "docstring": "Save important context for next session.",
          "line_range": [
            351,
            377
          ],
          "parameters": [
            "self",
            "session_data"
          ],
          "decorators": []
        },
        {
          "name": "_load_session_context",
          "docstring": "Load context from previous sessions.",
          "line_range": [
            379,
            388
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            394,
            400
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_comprehensive_cursor_response",
          "docstring": "Get comprehensive response optimized for Cursor.",
          "line_range": [
            402,
            431
          ],
          "parameters": [
            "self",
            "query",
            "file_context"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CursorSession",
          "docstring": "Represents a Cursor IDE session with context and preferences.",
          "line_range": [
            19,
            25
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "CursorContextManager",
          "docstring": "Manages context optimization specifically for Cursor interactions.",
          "line_range": [
            28,
            115
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                31,
                35
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "get_cursor_optimized_context",
              "docstring": "Provide Cursor with perfectly sized context based on query analysis.",
              "line_range": [
                37,
                71
              ],
              "parameters": [
                "self",
                "query_type",
                "file_context"
              ]
            },
            {
              "name": "_load_cursor_config",
              "docstring": "Load Cursor-specific configuration.",
              "line_range": [
                73,
                83
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_apply_privacy_filter",
              "docstring": "Apply privacy filtering based on level.",
              "line_range": [
                85,
                101
              ],
              "parameters": [
                "self",
                "context_data",
                "privacy_level"
              ]
            },
            {
              "name": "_filter_sensitive_dict",
              "docstring": "Filter sensitive information from dictionary.",
              "line_range": [
                103,
                115
              ],
              "parameters": [
                "self",
                "data"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "CursorMultiAIOrchestrator",
          "docstring": "Coordinates different AI models through Cursor interface.",
          "line_range": [
            118,
            187
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                121,
                124
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "delegate_to_optimal_ai",
              "docstring": "Route tasks to best AI model based on preferences.",
              "line_range": [
                126,
                160
              ],
              "parameters": [
                "self",
                "task_type",
                "context"
              ]
            },
            {
              "name": "_calculate_delegation_confidence",
              "docstring": "Calculate confidence in AI delegation decision.",
              "line_range": [
                162,
                175
              ],
              "parameters": [
                "self",
                "task_type",
                "selected_ai"
              ]
            },
            {
              "name": "_load_cursor_config",
              "docstring": "Load Cursor configuration.",
              "line_range": [
                177,
                187
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "PersonalPlanningCursorBridge",
          "docstring": "Bridge between personal planning and Cursor without exposing sensitive data.",
          "line_range": [
            190,
            319
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                193,
                195
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "get_goal_aligned_suggestions",
              "docstring": "Provide suggestions aligned with business goals.",
              "line_range": [
                197,
                242
              ],
              "parameters": [
                "self",
                "technical_context"
              ]
            },
            {
              "name": "get_priority_guidance",
              "docstring": "Provide priority guidance based on business objectives.",
              "line_range": [
                244,
                270
              ],
              "parameters": [
                "self",
                "feature_options"
              ]
            },
            {
              "name": "_calculate_feature_score",
              "docstring": "Calculate priority score for a feature.",
              "line_range": [
                272,
                292
              ],
              "parameters": [
                "self",
                "feature",
                "prioritization"
              ]
            },
            {
              "name": "_get_scoring_reasoning",
              "docstring": "Get reasoning for feature scoring.",
              "line_range": [
                294,
                307
              ],
              "parameters": [
                "self",
                "feature",
                "prioritization"
              ]
            },
            {
              "name": "_load_personal_bridge",
              "docstring": "Load personal planning bridge data.",
              "line_range": [
                309,
                319
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "CursorSessionManager",
          "docstring": "Maintains context across Cursor sessions for better continuity.",
          "line_range": [
            322,
            388
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                325,
                328
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "start_session",
              "docstring": "Start a new Cursor session.",
              "line_range": [
                330,
                349
              ],
              "parameters": [
                "self",
                "session_id",
                "user_preferences"
              ]
            },
            {
              "name": "save_session_context",
              "docstring": "Save important context for next session.",
              "line_range": [
                351,
                377
              ],
              "parameters": [
                "self",
                "session_data"
              ]
            },
            {
              "name": "_load_session_context",
              "docstring": "Load context from previous sessions.",
              "line_range": [
                379,
                388
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "CursorIntegrationManager",
          "docstring": "Main integration manager that coordinates all Cursor-specific features.",
          "line_range": [
            391,
            431
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                394,
                400
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "get_comprehensive_cursor_response",
              "docstring": "Get comprehensive response optimized for Cursor.",
              "line_range": [
                402,
                431
              ],
              "parameters": [
                "self",
                "query",
                "file_context"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "CursorMultiAIOrchestrator",
          "PersonalPlanningCursorBridge",
          "CursorContextManager",
          "CursorSessionManager",
          "SystemCapabilityDiscovery"
        ],
        "get_cursor_optimized_context": [
          "file_path.exists",
          "self._apply_privacy_filter",
          "logger.error",
          "optimal_config.get",
          "str",
          "open",
          "json.load",
          "context_rules.get"
        ],
        "_load_cursor_config": [
          "logger.error",
          "Path",
          "config_path.exists",
          "open",
          "json.load"
        ],
        "_apply_privacy_filter": [
          "self._filter_sensitive_dict",
          "context_data.items",
          "isinstance"
        ],
        "_filter_sensitive_dict": [
          "any",
          "isinstance",
          "self._filter_sensitive_dict",
          "data.items",
          "key.lower"
        ],
        "delegate_to_optimal_ai": [
          "logger.error",
          "self._calculate_delegation_confidence",
          "Path",
          "delegation_rules.get",
          "str"
        ],
        "_calculate_delegation_confidence": [
          "delegation_rules.get"
        ],
        "get_goal_aligned_suggestions": [
          "logger.error",
          "any",
          "technical_context.lower",
          "suggestions.extend"
        ],
        "get_priority_guidance": [
          "logger.error",
          "scored_features.sort",
          "decision_guidance.get",
          "str",
          "self._get_scoring_reasoning",
          "self._calculate_feature_score",
          "scored_features.append"
        ],
        "_calculate_feature_score": [
          "float",
          "any",
          "feature.lower",
          "prioritization.get"
        ],
        "_get_scoring_reasoning": [
          "any",
          "reasons.append",
          "feature.lower"
        ],
        "_load_personal_bridge": [
          "bridge_path.exists",
          "open",
          "json.load",
          "logger.error"
        ],
        "start_session": [
          "CursorSession",
          "self._load_session_context",
          "logger.error",
          "previous_context.get"
        ],
        "save_session_context": [
          "logger.error",
          "session_data.get",
          "Path",
          "str",
          "open",
          "json.dump"
        ],
        "_load_session_context": [
          "open",
          "json.load",
          "logger.error"
        ],
        "get_comprehensive_cursor_response": [
          "str",
          "logger.error"
        ],
        "create_cursor_integration": [
          "CursorIntegrationManager"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "SystemCapabilityDiscovery",
        "create_context_orchestrator",
        "dataclass",
        "dataclasses",
        "json",
        "llmstruct.ai_self_awareness",
        "llmstruct.context_orchestrator",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "289a18a5-0e0f-4019-a201-1841bbf238b3"
    },
    {
      "module_id": "src.llmstruct.cli_core",
      "path": "src/llmstruct/cli_core.py",
      "category": "core",
      "module_doc": "Core CLI functionality and main loop.",
      "functions": [
        {
          "name": "create_cli_core",
          "docstring": "Factory function to create CLI core instance.",
          "line_range": [
            110,
            112
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize CLI core with root directory.",
          "line_range": [
            28,
            35
          ],
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "setup_cache",
          "docstring": "Initialize cache if enabled in config.",
          "line_range": [
            37,
            53
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "setup_copilot",
          "docstring": "Initialize Copilot integration if enabled.",
          "line_range": [
            55,
            63
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_interactive_mode",
          "docstring": "Run the interactive CLI mode.",
          "line_range": [
            65,
            97
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cleanup",
          "docstring": "Clean up resources.",
          "line_range": [
            99,
            107
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLICore",
          "docstring": "Core CLI class handling main loop and coordination.",
          "line_range": [
            25,
            107
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize CLI core with root directory.",
              "line_range": [
                28,
                35
              ],
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "setup_cache",
              "docstring": "Initialize cache if enabled in config.",
              "line_range": [
                37,
                53
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "setup_copilot",
              "docstring": "Initialize Copilot integration if enabled.",
              "line_range": [
                55,
                63
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run_interactive_mode",
              "docstring": "Run the interactive CLI mode.",
              "line_range": [
                65,
                97
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cleanup",
              "docstring": "Clean up resources.",
              "line_range": [
                99,
                107
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "CLIConfig",
          "CLIUtils",
          "CommandProcessor"
        ],
        "setup_cache": [
          "logging.warning",
          "Path",
          "cache_path.mkdir",
          "str",
          "logging.info",
          "cache_config.get",
          "JSONCache"
        ],
        "setup_copilot": [
          "logging.warning",
          "logging.info",
          "initialize_copilot",
          "copilot_config.get"
        ],
        "run_interactive_mode": [
          "self.setup_cache",
          "self.cleanup",
          "input",
          "logging.error",
          "print",
          "user_input.startswith",
          "user_input.lower",
          "self.setup_copilot"
        ],
        "cleanup": [
          "logging.info"
        ],
        "create_cli_core": [
          "CLICore"
        ]
      },
      "dependencies": [
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "CopilotContextManager",
        "JSONCache",
        "Optional",
        "Path",
        "cli_commands",
        "cli_config",
        "cli_utils",
        "copilot",
        "initialize_copilot",
        "llmstruct.cache",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "4ea4d563-e169-4252-950f-5734533cdc34"
    },
    {
      "module_id": "src.llmstruct.workspace",
      "path": "src/llmstruct/workspace.py",
      "category": "core",
      "module_doc": "Workspace State & Mode Management System\nEnhanced AI-Human Collaboration with Context Boundaries",
      "functions": [
        {
          "name": "create_workspace_manager",
          "docstring": "Factory function to create workspace manager",
          "line_range": [
            461,
            463
          ],
          "parameters": [
            "workspace_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            28,
            36
          ],
          "parameters": [
            "self",
            "workspace_dir"
          ],
          "decorators": []
        },
        {
          "name": "_load_or_create_state",
          "docstring": "Load existing workspace state or create default",
          "line_range": [
            38,
            75
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_permission_templates",
          "docstring": "Load permission templates for different modes",
          "line_range": [
            77,
            128
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "set_mode",
          "docstring": "Set workspace mode(s) with smart combination logic.\n\nArgs:\n    modes: Single mode string \"[code]\" or list of modes [\"code\", \"debug\"]\n    session_id: Optional session identifier\n    \nReturns:\n    Dict with mode change result and applied permissions",
          "line_range": [
            130,
            176
          ],
          "parameters": [
            "self",
            "modes",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "_parse_modes_from_string",
          "docstring": "Parse modes from string like '[code][debug]' to ['code', 'debug']",
          "line_range": [
            178,
            182
          ],
          "parameters": [
            "self",
            "mode_string"
          ],
          "decorators": []
        },
        {
          "name": "_combine_mode_permissions",
          "docstring": "Smart combination of mode permissions (Decision: C - Smart Combination)",
          "line_range": [
            184,
            216
          ],
          "parameters": [
            "self",
            "modes"
          ],
          "decorators": []
        },
        {
          "name": "_get_mode_combination_name",
          "docstring": "Get descriptive name for mode combination",
          "line_range": [
            218,
            232
          ],
          "parameters": [
            "self",
            "modes"
          ],
          "decorators": []
        },
        {
          "name": "get_current_state",
          "docstring": "Get current workspace state",
          "line_range": [
            234,
            236
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "check_permission",
          "docstring": "Check if operation is permitted under current mode.\n\nArgs:\n    operation: Operation type (e.g., \"write_file\", \"run_command\")\n    target: Optional target (file path, command, etc.)\n    \nReturns:\n    Dict with permission result and reasoning",
          "line_range": [
            238,
            302
          ],
          "parameters": [
            "self",
            "operation",
            "target"
          ],
          "decorators": []
        },
        {
          "name": "_get_required_capability",
          "docstring": "Map operations to required capabilities",
          "line_range": [
            304,
            320
          ],
          "parameters": [
            "self",
            "operation"
          ],
          "decorators": []
        },
        {
          "name": "_is_restricted_target",
          "docstring": "Check if target matches any file restrictions",
          "line_range": [
            322,
            334
          ],
          "parameters": [
            "self",
            "target"
          ],
          "decorators": []
        },
        {
          "name": "set_emergency_override",
          "docstring": "Grant emergency override (Hybrid B+C: Escalation + Time-boxing)\n\nArgs:\n    level: Override level (1=extend permissions, 2=filesystem, 3=system)\n    reason: Reason for override\n    duration_minutes: Override duration",
          "line_range": [
            336,
            365
          ],
          "parameters": [
            "self",
            "level",
            "reason",
            "duration_minutes"
          ],
          "decorators": []
        },
        {
          "name": "_check_emergency_override",
          "docstring": "Check if emergency override is active and not expired",
          "line_range": [
            367,
            381
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_strict_mode",
          "docstring": "Integration with existing strict mode system",
          "line_range": [
            383,
            387
          ],
          "parameters": [
            "self",
            "strict_tags"
          ],
          "decorators": []
        },
        {
          "name": "add_decision_workflow",
          "docstring": "Add decision to workflow tracking (for [decide] mode)",
          "line_range": [
            389,
            396
          ],
          "parameters": [
            "self",
            "decision_id",
            "decision_data"
          ],
          "decorators": []
        },
        {
          "name": "get_workspace_status",
          "docstring": "Get comprehensive workspace status for debugging and display",
          "line_range": [
            398,
            420
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_override_time_remaining",
          "docstring": "Get formatted time remaining for emergency override",
          "line_range": [
            422,
            437
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_state",
          "docstring": "Save current state to file",
          "line_range": [
            439,
            442
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_mode_status",
          "docstring": "Get formatted status string for CLI display",
          "line_range": [
            444,
            458
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "WorkspaceStateManager",
          "docstring": "Core workspace state management with mode-based permissions and context boundaries.\n\nFeatures:\n- Multi-dimensional mode system ([code][debug], [discuss][meta])\n- Hybrid permission system (capabilities + file restrictions)\n- Smart mode combinations with context awareness\n- Emergency override protocols with time-boxing\n- Integration with existing strict mode system",
          "line_range": [
            16,
            458
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                28,
                36
              ],
              "parameters": [
                "self",
                "workspace_dir"
              ]
            },
            {
              "name": "_load_or_create_state",
              "docstring": "Load existing workspace state or create default",
              "line_range": [
                38,
                75
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_permission_templates",
              "docstring": "Load permission templates for different modes",
              "line_range": [
                77,
                128
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "set_mode",
              "docstring": "Set workspace mode(s) with smart combination logic.\n\nArgs:\n    modes: Single mode string \"[code]\" or list of modes [\"code\", \"debug\"]\n    session_id: Optional session identifier\n    \nReturns:\n    Dict with mode change result and applied permissions",
              "line_range": [
                130,
                176
              ],
              "parameters": [
                "self",
                "modes",
                "session_id"
              ]
            },
            {
              "name": "_parse_modes_from_string",
              "docstring": "Parse modes from string like '[code][debug]' to ['code', 'debug']",
              "line_range": [
                178,
                182
              ],
              "parameters": [
                "self",
                "mode_string"
              ]
            },
            {
              "name": "_combine_mode_permissions",
              "docstring": "Smart combination of mode permissions (Decision: C - Smart Combination)",
              "line_range": [
                184,
                216
              ],
              "parameters": [
                "self",
                "modes"
              ]
            },
            {
              "name": "_get_mode_combination_name",
              "docstring": "Get descriptive name for mode combination",
              "line_range": [
                218,
                232
              ],
              "parameters": [
                "self",
                "modes"
              ]
            },
            {
              "name": "get_current_state",
              "docstring": "Get current workspace state",
              "line_range": [
                234,
                236
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "check_permission",
              "docstring": "Check if operation is permitted under current mode.\n\nArgs:\n    operation: Operation type (e.g., \"write_file\", \"run_command\")\n    target: Optional target (file path, command, etc.)\n    \nReturns:\n    Dict with permission result and reasoning",
              "line_range": [
                238,
                302
              ],
              "parameters": [
                "self",
                "operation",
                "target"
              ]
            },
            {
              "name": "_get_required_capability",
              "docstring": "Map operations to required capabilities",
              "line_range": [
                304,
                320
              ],
              "parameters": [
                "self",
                "operation"
              ]
            },
            {
              "name": "_is_restricted_target",
              "docstring": "Check if target matches any file restrictions",
              "line_range": [
                322,
                334
              ],
              "parameters": [
                "self",
                "target"
              ]
            },
            {
              "name": "set_emergency_override",
              "docstring": "Grant emergency override (Hybrid B+C: Escalation + Time-boxing)\n\nArgs:\n    level: Override level (1=extend permissions, 2=filesystem, 3=system)\n    reason: Reason for override\n    duration_minutes: Override duration",
              "line_range": [
                336,
                365
              ],
              "parameters": [
                "self",
                "level",
                "reason",
                "duration_minutes"
              ]
            },
            {
              "name": "_check_emergency_override",
              "docstring": "Check if emergency override is active and not expired",
              "line_range": [
                367,
                381
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_strict_mode",
              "docstring": "Integration with existing strict mode system",
              "line_range": [
                383,
                387
              ],
              "parameters": [
                "self",
                "strict_tags"
              ]
            },
            {
              "name": "add_decision_workflow",
              "docstring": "Add decision to workflow tracking (for [decide] mode)",
              "line_range": [
                389,
                396
              ],
              "parameters": [
                "self",
                "decision_id",
                "decision_data"
              ]
            },
            {
              "name": "get_workspace_status",
              "docstring": "Get comprehensive workspace status for debugging and display",
              "line_range": [
                398,
                420
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_override_time_remaining",
              "docstring": "Get formatted time remaining for emergency override",
              "line_range": [
                422,
                437
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_state",
              "docstring": "Save current state to file",
              "line_range": [
                439,
                442
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_mode_status",
              "docstring": "Get formatted status string for CLI display",
              "line_range": [
                444,
                458
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._load_or_create_state",
          "Path",
          "self._load_permission_templates"
        ],
        "_load_or_create_state": [
          "datetime.now",
          "open",
          "json.load",
          "self._save_state"
        ],
        "_load_permission_templates": [],
        "set_mode": [
          "isinstance",
          "len",
          "self._combine_mode_permissions",
          "combined_permissions.get",
          "self._save_state",
          "datetime.now",
          "self._parse_modes_from_string",
          "self._get_mode_combination_name"
        ],
        "_parse_modes_from_string": [
          "re.findall"
        ],
        "_combine_mode_permissions": [
          "logger.info",
          "template.get",
          "list",
          "sorted",
          "set"
        ],
        "_get_mode_combination_name": [
          "combination_names.get",
          "sorted"
        ],
        "get_current_state": [],
        "check_permission": [
          "self._check_emergency_override",
          "self._get_required_capability",
          "permissions.get",
          "self._is_restricted_target"
        ],
        "_get_required_capability": [
          "operation.startswith",
          "capability_map.items"
        ],
        "_is_restricted_target": [
          "restriction.startswith",
          "target.startswith",
          "fnmatch.fnmatch"
        ],
        "set_emergency_override": [
          "datetime.now",
          "expires_at.isoformat",
          "timedelta",
          "self._save_state"
        ],
        "_check_emergency_override": [
          "datetime.now",
          "override.get",
          "datetime.fromisoformat",
          "self._save_state"
        ],
        "integrate_strict_mode": [
          "datetime.now",
          "self._save_state"
        ],
        "add_decision_workflow": [
          "datetime.now",
          "self._save_state"
        ],
        "get_workspace_status": [
          "self._get_override_time_remaining",
          "len",
          "self._get_mode_combination_name",
          "override.get"
        ],
        "_get_override_time_remaining": [
          "override.get",
          "datetime.fromisoformat",
          "remaining.total_seconds",
          "datetime.now",
          "int"
        ],
        "_save_state": [
          "open",
          "json.dump"
        ],
        "get_mode_status": [
          "override.get",
          "self._get_mode_combination_name"
        ],
        "create_workspace_manager": [
          "WorkspaceStateManager"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "Set",
        "Union",
        "datetime",
        "fnmatch",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "timedelta",
        "timezone",
        "typing"
      ],
      "hash": null,
      "artifact_id": "fab6151e-2c23-493a-adfa-66c7a62c1683"
    },
    {
      "module_id": "src.llmstruct.parsers.__init__",
      "path": "src/llmstruct/parsers/__init__.py",
      "category": "cli",
      "module_doc": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "JavaScriptParser",
        "javascript_parser"
      ],
      "hash": null,
      "artifact_id": "6c954f38-5587-43e4-8b6e-244edbbf54e5"
    },
    {
      "module_id": "src.llmstruct.parsers.javascript_parser",
      "path": "src/llmstruct/parsers/javascript_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            9,
            13
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "file_hash",
          "docstring": "",
          "line_range": [
            15,
            20
          ],
          "parameters": [
            "self",
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_metadata",
          "docstring": "",
          "line_range": [
            22,
            41
          ],
          "parameters": [
            "self",
            "filepath",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "parse_module",
          "docstring": "",
          "line_range": [
            43,
            124
          ],
          "parameters": [
            "self",
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "extract_signature",
          "docstring": "",
          "line_range": [
            78,
            80
          ],
          "parameters": [
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JavaScriptParser",
          "docstring": "",
          "line_range": [
            8,
            124
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                9,
                13
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "file_hash",
              "docstring": "",
              "line_range": [
                15,
                20
              ],
              "parameters": [
                "self",
                "filepath"
              ]
            },
            {
              "name": "compute_file_metadata",
              "docstring": "",
              "line_range": [
                22,
                41
              ],
              "parameters": [
                "self",
                "filepath",
                "include_hashes"
              ]
            },
            {
              "name": "parse_module",
              "docstring": "",
              "line_range": [
                43,
                124
              ],
              "parameters": [
                "self",
                "filepath",
                "root_dir",
                "include_ranges",
                "include_hashes"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "set"
        ],
        "file_hash": [
          "open",
          "f.read",
          "hashlib.sha256"
        ],
        "compute_file_metadata": [
          "self.file_hash",
          "os.stat",
          "open",
          "sum"
        ],
        "parse_module": [
          "esprima.parseModule",
          "self.compute_file_metadata",
          "str",
          "open",
          "f.read"
        ],
        "extract_signature": [
          "hasattr"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "datetime",
        "esprima",
        "hashlib",
        "os",
        "typing"
      ],
      "hash": null,
      "artifact_id": "b06b75cd-4308-49ff-9e77-ca9aefa3965b"
    },
    {
      "module_id": "src.llmstruct.parsers.universal_converter",
      "path": "src/llmstruct/parsers/universal_converter.py",
      "category": "core",
      "module_doc": "Universal Code Converter - Orchestrates all language parsers\nConverts any codebase to llmstruct JSON format",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface for universal converter",
          "line_range": [
            375,
            428
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__post_init__",
          "docstring": "",
          "line_range": [
            55,
            62
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            79,
            82
          ],
          "parameters": [
            "self",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "detect_language",
          "docstring": "Detect programming language from file extension",
          "line_range": [
            84,
            92
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "detect_project_languages",
          "docstring": "Detect all languages in project and count files",
          "line_range": [
            94,
            109
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "get_project_files",
          "docstring": "Get all relevant files for conversion",
          "line_range": [
            111,
            138
          ],
          "parameters": [
            "self",
            "project_path",
            "language"
          ],
          "decorators": []
        },
        {
          "name": "convert_python_project",
          "docstring": "Convert Python project to llmstruct format",
          "line_range": [
            140,
            171
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "convert_go_project",
          "docstring": "Convert Go project to llmstruct format",
          "line_range": [
            173,
            190
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "convert_javascript_project",
          "docstring": "Convert JavaScript project to llmstruct format",
          "line_range": [
            192,
            223
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "convert_project",
          "docstring": "Convert any project to llmstruct format",
          "line_range": [
            225,
            250
          ],
          "parameters": [
            "self",
            "project_path",
            "language"
          ],
          "decorators": []
        },
        {
          "name": "convert_multi_language_project",
          "docstring": "Convert multi-language project with separate sections per language",
          "line_range": [
            252,
            282
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "_build_project_structure",
          "docstring": "Build standard llmstruct project structure",
          "line_range": [
            284,
            312
          ],
          "parameters": [
            "self",
            "language",
            "project_path",
            "modules",
            "toc"
          ],
          "decorators": []
        },
        {
          "name": "_build_empty_project_structure",
          "docstring": "Build empty structure when conversion fails",
          "line_range": [
            314,
            329
          ],
          "parameters": [
            "self",
            "language",
            "project_path",
            "error"
          ],
          "decorators": []
        },
        {
          "name": "_merge_language_results",
          "docstring": "Merge multiple language results into unified structure",
          "line_range": [
            331,
            372
          ],
          "parameters": [
            "self",
            "project_path",
            "language_results"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Language",
          "docstring": "",
          "line_range": [
            33,
            42
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ConverterConfig",
          "docstring": "Configuration for universal converter",
          "line_range": [
            46,
            62
          ],
          "methods": [
            {
              "name": "__post_init__",
              "docstring": "",
              "line_range": [
                55,
                62
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "UniversalConverter",
          "docstring": "Universal code converter for any programming language",
          "line_range": [
            65,
            372
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                79,
                82
              ],
              "parameters": [
                "self",
                "config"
              ]
            },
            {
              "name": "detect_language",
              "docstring": "Detect programming language from file extension",
              "line_range": [
                84,
                92
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "detect_project_languages",
              "docstring": "Detect all languages in project and count files",
              "line_range": [
                94,
                109
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "get_project_files",
              "docstring": "Get all relevant files for conversion",
              "line_range": [
                111,
                138
              ],
              "parameters": [
                "self",
                "project_path",
                "language"
              ]
            },
            {
              "name": "convert_python_project",
              "docstring": "Convert Python project to llmstruct format",
              "line_range": [
                140,
                171
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "convert_go_project",
              "docstring": "Convert Go project to llmstruct format",
              "line_range": [
                173,
                190
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "convert_javascript_project",
              "docstring": "Convert JavaScript project to llmstruct format",
              "line_range": [
                192,
                223
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "convert_project",
              "docstring": "Convert any project to llmstruct format",
              "line_range": [
                225,
                250
              ],
              "parameters": [
                "self",
                "project_path",
                "language"
              ]
            },
            {
              "name": "convert_multi_language_project",
              "docstring": "Convert multi-language project with separate sections per language",
              "line_range": [
                252,
                282
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "_build_project_structure",
              "docstring": "Build standard llmstruct project structure",
              "line_range": [
                284,
                312
              ],
              "parameters": [
                "self",
                "language",
                "project_path",
                "modules",
                "toc"
              ]
            },
            {
              "name": "_build_empty_project_structure",
              "docstring": "Build empty structure when conversion fails",
              "line_range": [
                314,
                329
              ],
              "parameters": [
                "self",
                "language",
                "project_path",
                "error"
              ]
            },
            {
              "name": "_merge_language_results",
              "docstring": "Merge multiple language results into unified structure",
              "line_range": [
                331,
                372
              ],
              "parameters": [
                "self",
                "project_path",
                "language_results"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__post_init__": [],
        "__init__": [
          "GoAnalyzer",
          "ConverterConfig",
          "JavaScriptParser"
        ],
        "detect_language": [
          "Path"
        ],
        "detect_project_languages": [
          "any",
          "os.walk",
          "self.detect_language",
          "languages.get"
        ],
        "get_project_files": [
          "files.append",
          "any",
          "os.walk",
          "self.detect_language"
        ],
        "convert_python_project": [
          "logger.info",
          "modules.append",
          "logger.warning",
          "len",
          "self.get_project_files",
          "toc.append",
          "self._build_project_structure",
          "module_data.get",
          "analyze_python"
        ],
        "convert_go_project": [
          "logger.info",
          "self._build_empty_project_structure",
          "logger.error",
          "str",
          "convert_to_llmstruct_format"
        ],
        "convert_javascript_project": [
          "logger.info",
          "modules.append",
          "logger.warning",
          "len",
          "self.get_project_files",
          "toc.append",
          "self._build_project_structure",
          "module_data.get"
        ],
        "convert_project": [
          "logger.info",
          "self.detect_project_languages",
          "self.convert_go_project",
          "languages.keys",
          "ValueError",
          "self.convert_python_project",
          "self.convert_javascript_project",
          "NotImplementedError",
          "max"
        ],
        "convert_multi_language_project": [
          "logger.info",
          "logger.error",
          "logger.warning",
          "self.detect_project_languages",
          "self.convert_go_project",
          "languages.keys",
          "ValueError",
          "self.convert_python_project",
          "self.convert_javascript_project",
          "self._merge_language_results"
        ],
        "_build_project_structure": [
          "len",
          "language.title",
          "m.get",
          "sum"
        ],
        "_build_empty_project_structure": [],
        "_merge_language_results": [
          "stats.get",
          "all_toc.append",
          "all_modules.append",
          "list",
          "language_results.keys",
          "result.get",
          "language_results.items"
        ],
        "main": [
          "stats.get",
          "f.write",
          "converter.convert_project",
          "logger.error",
          "argparse.ArgumentParser",
          "converter.convert_multi_language_project",
          "traceback.print_exc",
          "exit",
          "parser.add_argument",
          "result.get",
          "json.dumps",
          "print",
          "ConverterConfig",
          "parser.parse_args",
          "Language",
          "open",
          "UniversalConverter"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "GoAnalyzer",
        "JavaScriptParser",
        "List",
        "Optional",
        "Path",
        "Union",
        "analyze_module",
        "argparse",
        "convert_to_llmstruct_format",
        "dataclass",
        "dataclasses",
        "enum",
        "go_analyzer",
        "javascript_parser",
        "json",
        "logging",
        "os",
        "pathlib",
        "python_parser",
        "sys",
        "traceback",
        "typing"
      ],
      "hash": null,
      "artifact_id": "b71dac27-8e84-4370-a623-8481fcc47530"
    },
    {
      "module_id": "src.llmstruct.parsers.go_analyzer",
      "path": "src/llmstruct/parsers/go_analyzer.py",
      "category": "core",
      "module_doc": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 Go \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043b\u044f Docker \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b: go/packages, go/analysis",
      "functions": [
        {
          "name": "convert_to_llmstruct_format",
          "docstring": "\u041a\u043e\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 llmstruct",
          "line_range": [
            203,
            337
          ],
          "parameters": [
            "analysis",
            "include_ranges",
            "goals"
          ],
          "decorators": []
        },
        {
          "name": "_compute_file_hash",
          "docstring": "\u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 SHA-256 \u0445\u044d\u0448 \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            339,
            345
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            347,
            402
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            24,
            26
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_setup_analyzer",
          "docstring": "\u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0441\u0440\u0435\u0434\u0443 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430",
          "line_range": [
            28,
            66
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_cleanup",
          "docstring": "\u041e\u0447\u0438\u0449\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b",
          "line_range": [
            68,
            72
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "analyze_project",
          "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 Go \u043f\u0440\u043e\u0435\u043a\u0442",
          "line_range": [
            74,
            125
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        },
        {
          "name": "_fallback_analysis",
          "docstring": "Fallback \u0430\u043d\u0430\u043b\u0438\u0437 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0444\u0430\u0439\u043b\u043e\u0432",
          "line_range": [
            127,
            201
          ],
          "parameters": [
            "self",
            "project_path"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GoAnalyzer",
          "docstring": "\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 Go \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432",
          "line_range": [
            21,
            201
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                24,
                26
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_setup_analyzer",
              "docstring": "\u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0441\u0440\u0435\u0434\u0443 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430",
              "line_range": [
                28,
                66
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_cleanup",
              "docstring": "\u041e\u0447\u0438\u0449\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b",
              "line_range": [
                68,
                72
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "analyze_project",
              "docstring": "\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 Go \u043f\u0440\u043e\u0435\u043a\u0442",
              "line_range": [
                74,
                125
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            },
            {
              "name": "_fallback_analysis",
              "docstring": "Fallback \u0430\u043d\u0430\u043b\u0438\u0437 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0444\u0430\u0439\u043b\u043e\u0432",
              "line_range": [
                127,
                201
              ],
              "parameters": [
                "self",
                "project_path"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "_setup_analyzer": [
          "logging.warning",
          "Path",
          "analyzer_source.read_text",
          "tempfile.mkdtemp",
          "str",
          "analyzer_file.write_text",
          "subprocess.run"
        ],
        "_cleanup": [
          "Path",
          "shutil.rmtree"
        ],
        "analyze_project": [
          "logging.warning",
          "self._cleanup",
          "self._fallback_analysis",
          "logging.info",
          "logging.error",
          "json.loads",
          "subprocess.run",
          "self._setup_analyzer"
        ],
        "_fallback_analysis": [
          "logging.warning",
          "file_path.read_text",
          "line.startswith",
          "Path",
          "go_mod_path.read_text",
          "list",
          "len",
          "line.split",
          "go_mod_path.exists",
          "content.split",
          "set",
          "logging.info",
          "str",
          "sorted",
          "file_path.relative_to",
          "packages.add",
          "line.strip"
        ],
        "convert_to_llmstruct_format": [
          "modules.append",
          "module.get",
          "sum",
          "path.endswith",
          "file_data.get",
          "functions.append",
          "classes.append",
          "len",
          "toc.append",
          "uuid.uuid4",
          "_compute_file_hash",
          "struct.get",
          "fn.get",
          "str",
          "analysis.get",
          "path.replace",
          "iface.get"
        ],
        "_compute_file_hash": [
          "open",
          "f.read",
          "hashlib.sha256"
        ],
        "main": [
          "stats.get",
          "f.write",
          "GoAnalyzer",
          "argparse.ArgumentParser",
          "analyzer.analyze_project",
          "len",
          "Path",
          "traceback.print_exc",
          "parser.add_argument",
          "result.get",
          "convert_to_llmstruct_format",
          "json.dumps",
          "print",
          "parser.parse_args",
          "open",
          "sys.exit"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "hashlib",
        "json",
        "logging",
        "os",
        "pathlib",
        "shutil",
        "subprocess",
        "sys",
        "tempfile",
        "traceback",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "a9d58233-6418-46de-bc0a-9d655d9ccbc5"
    },
    {
      "module_id": "src.llmstruct.parsers.python_parser",
      "path": "src/llmstruct/parsers/python_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "infer_category",
          "docstring": "Infer module category based on its path.",
          "line_range": [
            13,
            20
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_hash",
          "docstring": "Compute SHA-256 hash of file content.",
          "line_range": [
            72,
            79
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "analyze_module",
          "docstring": "Analyze Python module and return structured data.",
          "line_range": [
            82,
            154
          ],
          "parameters": [
            "file_path",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            26,
            29
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "visit_Import",
          "docstring": "Capture import statements.",
          "line_range": [
            31,
            35
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_ImportFrom",
          "docstring": "Capture from-import statements.",
          "line_range": [
            37,
            43
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_FunctionDef",
          "docstring": "Track function definitions and their calls.",
          "line_range": [
            45,
            50
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_AsyncFunctionDef",
          "docstring": "Track async function definitions and their calls.",
          "line_range": [
            52,
            57
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_Call",
          "docstring": "Capture function calls.",
          "line_range": [
            59,
            69
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "AST visitor to collect function calls and dependencies.",
          "line_range": [
            23,
            69
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                26,
                29
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "visit_Import",
              "docstring": "Capture import statements.",
              "line_range": [
                31,
                35
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_ImportFrom",
              "docstring": "Capture from-import statements.",
              "line_range": [
                37,
                43
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_FunctionDef",
              "docstring": "Track function definitions and their calls.",
              "line_range": [
                45,
                50
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_AsyncFunctionDef",
              "docstring": "Track async function definitions and their calls.",
              "line_range": [
                52,
                57
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_Call",
              "docstring": "Capture function calls.",
              "line_range": [
                59,
                69
              ],
              "parameters": [
                "self",
                "node"
              ]
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ]
        }
      ],
      "callgraph": {
        "infer_category": [
          "Path"
        ],
        "__init__": [
          "set"
        ],
        "visit_Import": [
          "self.generic_visit"
        ],
        "visit_ImportFrom": [
          "self.generic_visit"
        ],
        "visit_FunctionDef": [
          "set",
          "self.generic_visit"
        ],
        "visit_AsyncFunctionDef": [
          "set",
          "self.generic_visit"
        ],
        "visit_Call": [
          "self.generic_visit",
          "isinstance"
        ],
        "compute_file_hash": [
          "logging.error",
          "open",
          "f.read",
          "hashlib.sha256"
        ],
        "analyze_module": [
          "isinstance",
          "infer_category",
          "compute_file_hash",
          "visitor.visit",
          "Path",
          "ast.get_docstring",
          "functions.append",
          "classes.append",
          "list",
          "sorted",
          "ast.unparse",
          "ast.parse",
          "logging.error",
          "str",
          "ast.walk",
          "open",
          "f.read",
          "CallVisitor"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "Set",
        "ast",
        "hashlib",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "4b20e315-9c01-4eae-9787-569982eb2bc8"
    },
    {
      "module_id": "src.llmstruct.templates.__init__",
      "path": "src/llmstruct/templates/__init__.py",
      "category": "cli",
      "module_doc": "Templates for LLM prompts used in LLMStruct integration.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "c10fc4d4-352c-4901-b46b-9ab0bf62ab79"
    },
    {
      "module_id": "src.llmstruct.validators.__init__",
      "path": "src/llmstruct/validators/__init__.py",
      "category": "cli",
      "module_doc": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "json_validator",
        "validate_struct_json"
      ],
      "hash": null,
      "artifact_id": "6a7c6393-90ee-4c2d-9947-b3654e5fe74a"
    },
    {
      "module_id": "src.llmstruct.validators.json_validator",
      "path": "src/llmstruct/validators/json_validator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_struct_json",
          "docstring": "Validate a single JSON file against a schema.",
          "line_range": [
            12,
            40
          ],
          "parameters": [
            "json_path",
            "schema_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_directory",
          "docstring": "Validate all JSON files in a directory against a schema.",
          "line_range": [
            43,
            61
          ],
          "parameters": [
            "directory",
            "schema_path",
            "include_patterns",
            "exclude_patterns"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_struct_json": [
          "json_file.exists",
          "schema_file.exists",
          "validate",
          "Path",
          "logging.error",
          "logging.info",
          "str",
          "open",
          "json.load"
        ],
        "validate_directory": [
          "validate_struct_json",
          "any",
          "Path",
          "str",
          "json_file.match"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "ValidationError",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "sys",
        "typing",
        "validate"
      ],
      "hash": null,
      "artifact_id": "527fc2fe-9782-4896-b76d-2262fbdce02c"
    },
    {
      "module_id": "src.llmstruct.generators.json_generator",
      "path": "src/llmstruct/generators/json_generator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_folder_structure",
          "docstring": "Capture directory and file structure with artifact_id, respecting .gitignore and patterns.",
          "line_range": [
            15,
            88
          ],
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "build_toc_and_modules",
          "docstring": "Build TOC and modules with artifact_id and robust filtering.",
          "line_range": [
            91,
            148
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "Generate JSON structure for project with artifact_id, summary, and tags.",
          "line_range": [
            151,
            218
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals",
            "exclude_dirs"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_folder_structure": [
          "file_path.match",
          "os.walk",
          "any",
          "p.endswith",
          "structure.append",
          "Path",
          "sorted",
          "uuid.uuid4",
          "set",
          "str",
          "p.rstrip",
          "file_path.relative_to"
        ],
        "build_toc_and_modules": [
          "f.match",
          "any",
          "modules.append",
          "p.endswith",
          "len",
          "Path",
          "toc.append",
          "uuid.uuid4",
          "set",
          "str",
          "p.rstrip",
          "analyze_module"
        ],
        "generate_json": [
          "sum",
          "len",
          "Path",
          "list",
          "get_folder_structure",
          "uuid.uuid4",
          "set",
          "str",
          "build_toc_and_modules"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "analyze_module",
        "datetime",
        "logging",
        "os",
        "parsers.python_parser",
        "pathlib",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "5932f3fd-e81a-41c4-a21b-a0b859f3bac0"
    },
    {
      "module_id": "src.llmstruct.generators.__init__",
      "path": "src/llmstruct/generators/__init__.py",
      "category": "cli",
      "module_doc": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "generate_json",
        "json_generator"
      ],
      "hash": null,
      "artifact_id": "83cdc8b8-7bd1-4602-bff0-02b99d0ac118"
    },
    {
      "module_id": "src.llmstruct.generators.go_json_generator",
      "path": "src/llmstruct/generators/go_json_generator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_go_folder_structure",
          "docstring": "Capture directory and file structure for Go projects with artifact_id, respecting .gitignore and patterns.",
          "line_range": [
            15,
            85
          ],
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "build_go_toc_and_modules",
          "docstring": "Build TOC and modules for Go projects with artifact_id and robust filtering.",
          "line_range": [
            88,
            143
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "extract_go_mod_info",
          "docstring": "Extract information from go.mod file.",
          "line_range": [
            146,
            182
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "generate_go_json",
          "docstring": "Generate JSON structure for Go project with artifact_id, summary, and tags.",
          "line_range": [
            185,
            259
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals",
            "exclude_dirs"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_go_folder_structure": [
          "file_path.match",
          "os.walk",
          "any",
          "p.endswith",
          "structure.append",
          "Path",
          "sorted",
          "uuid.uuid4",
          "set",
          "str",
          "p.rstrip",
          "file_path.relative_to"
        ],
        "build_go_toc_and_modules": [
          "f.match",
          "any",
          "modules.append",
          "module.get",
          "p.endswith",
          "len",
          "Path",
          "toc.append",
          "uuid.uuid4",
          "set",
          "str",
          "p.rstrip",
          "analyze_module"
        ],
        "extract_go_mod_info": [
          "content.strip",
          "line.startswith",
          "Path",
          "len",
          "line.split",
          "go_mod_path.exists",
          "logging.error",
          "dependencies.append",
          "open",
          "f.read",
          "line.strip"
        ],
        "generate_go_json": [
          "sum",
          "extract_go_mod_info",
          "len",
          "Path",
          "m.get",
          "list",
          "go_mod_info.get",
          "set",
          "uuid.uuid4",
          "str",
          "build_go_toc_and_modules",
          "get_go_folder_structure"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "analyze_module",
        "datetime",
        "logging",
        "os",
        "parsers.go_parser",
        "pathlib",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "13459fd3-2694-443e-8ce6-104a29119275"
    },
    {
      "module_id": "tests.__init__",
      "path": "tests/__init__.py",
      "category": "test",
      "module_doc": "Test suite for LLMStruct, covering parsers, generators, validators, and integration.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "df4dc2f7-1c0d-40a8-b2b8-34b993019a7e"
    },
    {
      "module_id": "scripts.github_sync_manager",
      "path": "scripts/github_sync_manager.py",
      "category": "core",
      "module_doc": "GitHub Sync Manager - \u0418\u0434\u0435\u043c\u043f\u043e\u0442\u0435\u043d\u0442\u043d\u0430\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f processing results \u0441 GitHub\nSupports: Issues, Epics (Projects), Discussions\nSafety: dry-run mode, logging, collision detection",
      "functions": [
        {
          "name": "main",
          "docstring": "CLI interface",
          "line_range": [
            375,
            408
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            17,
            48
          ],
          "parameters": [
            "self",
            "repo_owner",
            "repo_name",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "load_sync_log",
          "docstring": "Load previous sync results for idempotency",
          "line_range": [
            50,
            60
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_sync_log",
          "docstring": "Save sync log for future idempotency",
          "line_range": [
            62,
            65
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "api_request",
          "docstring": "Safe GitHub API request with rate limiting",
          "line_range": [
            67,
            94
          ],
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "get_existing_issues",
          "docstring": "Get existing GitHub issues for collision detection",
          "line_range": [
            96,
            112
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_existing_discussions",
          "docstring": "Get existing GitHub discussions",
          "line_range": [
            114,
            118
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "item_already_synced",
          "docstring": "Check if item was already synced (idempotency)",
          "line_range": [
            120,
            125
          ],
          "parameters": [
            "self",
            "item",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "find_existing_by_title",
          "docstring": "Find existing GitHub item by title similarity",
          "line_range": [
            127,
            143
          ],
          "parameters": [
            "self",
            "title",
            "existing_items"
          ],
          "decorators": []
        },
        {
          "name": "create_github_issue",
          "docstring": "Create GitHub issue from processed item",
          "line_range": [
            145,
            182
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "create_github_discussion",
          "docstring": "Create GitHub discussion from processed item",
          "line_range": [
            184,
            194
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "create_github_epic",
          "docstring": "Create GitHub epic (as Project or enhanced Issue)",
          "line_range": [
            196,
            214
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "sync_category",
          "docstring": "Sync specific category with GitHub",
          "line_range": [
            216,
            290
          ],
          "parameters": [
            "self",
            "category",
            "filename"
          ],
          "decorators": []
        },
        {
          "name": "validate_before_sync",
          "docstring": "Pre-sync validation checks",
          "line_range": [
            292,
            322
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_sync",
          "docstring": "Main sync execution",
          "line_range": [
            324,
            373
          ],
          "parameters": [
            "self",
            "categories"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubSyncManager",
          "docstring": "",
          "line_range": [
            16,
            373
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                17,
                48
              ],
              "parameters": [
                "self",
                "repo_owner",
                "repo_name",
                "dry_run"
              ]
            },
            {
              "name": "load_sync_log",
              "docstring": "Load previous sync results for idempotency",
              "line_range": [
                50,
                60
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_sync_log",
              "docstring": "Save sync log for future idempotency",
              "line_range": [
                62,
                65
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "api_request",
              "docstring": "Safe GitHub API request with rate limiting",
              "line_range": [
                67,
                94
              ],
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ]
            },
            {
              "name": "get_existing_issues",
              "docstring": "Get existing GitHub issues for collision detection",
              "line_range": [
                96,
                112
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_existing_discussions",
              "docstring": "Get existing GitHub discussions",
              "line_range": [
                114,
                118
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "item_already_synced",
              "docstring": "Check if item was already synced (idempotency)",
              "line_range": [
                120,
                125
              ],
              "parameters": [
                "self",
                "item",
                "category"
              ]
            },
            {
              "name": "find_existing_by_title",
              "docstring": "Find existing GitHub item by title similarity",
              "line_range": [
                127,
                143
              ],
              "parameters": [
                "self",
                "title",
                "existing_items"
              ]
            },
            {
              "name": "create_github_issue",
              "docstring": "Create GitHub issue from processed item",
              "line_range": [
                145,
                182
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "create_github_discussion",
              "docstring": "Create GitHub discussion from processed item",
              "line_range": [
                184,
                194
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "create_github_epic",
              "docstring": "Create GitHub epic (as Project or enhanced Issue)",
              "line_range": [
                196,
                214
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "sync_category",
              "docstring": "Sync specific category with GitHub",
              "line_range": [
                216,
                290
              ],
              "parameters": [
                "self",
                "category",
                "filename"
              ]
            },
            {
              "name": "validate_before_sync",
              "docstring": "Pre-sync validation checks",
              "line_range": [
                292,
                322
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run_sync",
              "docstring": "Main sync execution",
              "line_range": [
                324,
                373
              ],
              "parameters": [
                "self",
                "categories"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self.load_sync_log",
          "print",
          "os.getenv"
        ],
        "load_sync_log": [
          "open",
          "json.load"
        ],
        "save_sync_log": [
          "open",
          "json.dump"
        ],
        "api_request": [
          "method.upper",
          "time.sleep",
          "response.raise_for_status",
          "requests.get",
          "requests.patch",
          "ValueError",
          "requests.post",
          "print",
          "response.json",
          "int"
        ],
        "get_existing_issues": [
          "self.api_request",
          "issues.extend",
          "len"
        ],
        "get_existing_discussions": [],
        "item_already_synced": [
          "item.get"
        ],
        "find_existing_by_title": [
          "title.lower",
          "len",
          "item.get"
        ],
        "create_github_issue": [
          "labels.append",
          "self.api_request",
          "processing_meta.get",
          "item.get",
          "print"
        ],
        "create_github_discussion": [
          "item.get",
          "print"
        ],
        "create_github_epic": [
          "self.api_request",
          "item.get",
          "print"
        ],
        "sync_category": [
          "datetime.now",
          "file_path.exists",
          "self.create_github_epic",
          "self.create_github_discussion",
          "self.get_existing_discussions",
          "result.get",
          "self.item_already_synced",
          "print",
          "item.get",
          "self.find_existing_by_title",
          "self.create_github_issue",
          "self.get_existing_issues",
          "data.get",
          "json.load",
          "existing.get",
          "open"
        ],
        "validate_before_sync": [
          "self.api_request",
          "repo_info.get",
          "user_info.get",
          "print",
          "rate_limit.get",
          "core_limit.get"
        ],
        "run_sync": [
          "sum",
          "self.save_sync_log",
          "self.validate_before_sync",
          "results.values",
          "self.sync_category",
          "print",
          "r.get",
          "datetime.now"
        ],
        "main": [
          "argparse.ArgumentParser",
          "len",
          "GitHubSyncManager",
          "parser.add_argument",
          "manager.run_sync",
          "result.get",
          "print",
          "parser.parse_args"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "json",
        "os",
        "pathlib",
        "requests",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "4549aed2-b343-4879-bdf9-5af2250a4682"
    },
    {
      "module_id": "scripts.process_926_items",
      "path": "scripts/process_926_items.py",
      "category": "core",
      "module_doc": "926 Items Processing Script - Updated Implementation\nProcesses items according to GitHub roadmap + personal management vision\nImplements all decisions from 926_items_processing_execution_plan.md",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            16,
            51
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_comprehensive_index",
          "docstring": "Load the 926 items from comprehensive index",
          "line_range": [
            53,
            111
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "calculate_confidence_score",
          "docstring": "Calculate confidence score for categorization decision",
          "line_range": [
            113,
            146
          ],
          "parameters": [
            "self",
            "item",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "check_t_pot_related",
          "docstring": "Enhanced T-Pot detection",
          "line_range": [
            148,
            155
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "check_team_implementable",
          "docstring": "Check if team can implement without architecture review",
          "line_range": [
            157,
            176
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "check_personal_vs_team_vs_business",
          "docstring": "Classify as personal/team/business",
          "line_range": [
            178,
            214
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "identify_epic_candidates",
          "docstring": "Identify items that should be grouped into epics",
          "line_range": [
            216,
            233
          ],
          "parameters": [
            "self",
            "items"
          ],
          "decorators": []
        },
        {
          "name": "extract_epic_name",
          "docstring": "Extract epic name from item",
          "line_range": [
            235,
            241
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "categorize_item",
          "docstring": "Main categorization logic with confidence scoring",
          "line_range": [
            243,
            278
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "find_duplicates",
          "docstring": "Enhanced duplicate detection with T-Pot special handling",
          "line_range": [
            280,
            319
          ],
          "parameters": [
            "self",
            "items"
          ],
          "decorators": []
        },
        {
          "name": "calculate_similarity",
          "docstring": "Enhanced similarity calculation",
          "line_range": [
            321,
            342
          ],
          "parameters": [
            "self",
            "title1",
            "title2"
          ],
          "decorators": []
        },
        {
          "name": "suggest_merge_strategy",
          "docstring": "Enhanced merge strategy with T-Pot consideration",
          "line_range": [
            344,
            359
          ],
          "parameters": [
            "self",
            "item1",
            "item2"
          ],
          "decorators": []
        },
        {
          "name": "process_items",
          "docstring": "Main processing workflow implementing execution plan",
          "line_range": [
            361,
            468
          ],
          "parameters": [
            "self",
            "items"
          ],
          "decorators": []
        },
        {
          "name": "save_results",
          "docstring": "Save categorized results with enhanced metadata",
          "line_range": [
            470,
            546
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_category_description",
          "docstring": "Category descriptions per execution plan",
          "line_range": [
            548,
            562
          ],
          "parameters": [
            "self",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "Main execution workflow per execution plan",
          "line_range": [
            564,
            606
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "TaskProcessor926",
          "docstring": "",
          "line_range": [
            15,
            606
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                16,
                51
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_comprehensive_index",
              "docstring": "Load the 926 items from comprehensive index",
              "line_range": [
                53,
                111
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "calculate_confidence_score",
              "docstring": "Calculate confidence score for categorization decision",
              "line_range": [
                113,
                146
              ],
              "parameters": [
                "self",
                "item",
                "category"
              ]
            },
            {
              "name": "check_t_pot_related",
              "docstring": "Enhanced T-Pot detection",
              "line_range": [
                148,
                155
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "check_team_implementable",
              "docstring": "Check if team can implement without architecture review",
              "line_range": [
                157,
                176
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "check_personal_vs_team_vs_business",
              "docstring": "Classify as personal/team/business",
              "line_range": [
                178,
                214
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "identify_epic_candidates",
              "docstring": "Identify items that should be grouped into epics",
              "line_range": [
                216,
                233
              ],
              "parameters": [
                "self",
                "items"
              ]
            },
            {
              "name": "extract_epic_name",
              "docstring": "Extract epic name from item",
              "line_range": [
                235,
                241
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "categorize_item",
              "docstring": "Main categorization logic with confidence scoring",
              "line_range": [
                243,
                278
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "find_duplicates",
              "docstring": "Enhanced duplicate detection with T-Pot special handling",
              "line_range": [
                280,
                319
              ],
              "parameters": [
                "self",
                "items"
              ]
            },
            {
              "name": "calculate_similarity",
              "docstring": "Enhanced similarity calculation",
              "line_range": [
                321,
                342
              ],
              "parameters": [
                "self",
                "title1",
                "title2"
              ]
            },
            {
              "name": "suggest_merge_strategy",
              "docstring": "Enhanced merge strategy with T-Pot consideration",
              "line_range": [
                344,
                359
              ],
              "parameters": [
                "self",
                "item1",
                "item2"
              ]
            },
            {
              "name": "process_items",
              "docstring": "Main processing workflow implementing execution plan",
              "line_range": [
                361,
                468
              ],
              "parameters": [
                "self",
                "items"
              ]
            },
            {
              "name": "save_results",
              "docstring": "Save categorized results with enhanced metadata",
              "line_range": [
                470,
                546
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_category_description",
              "docstring": "Category descriptions per execution plan",
              "line_range": [
                548,
                562
              ],
              "parameters": [
                "self",
                "category"
              ]
            },
            {
              "name": "run",
              "docstring": "Main execution workflow per execution plan",
              "line_range": [
                564,
                606
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "datetime.now",
          "Path"
        ],
        "load_comprehensive_index": [
          "any",
          "isinstance",
          "items.append",
          "item_content.lower",
          "len",
          "unique_items.append",
          "set",
          "data.items",
          "str",
          "items.extend",
          "print",
          "item.get",
          "hash",
          "seen_items.add",
          "open",
          "json.load",
          "index_path.exists",
          "value.items"
        ],
        "calculate_confidence_score": [
          "sum",
          "self.check_t_pot_related",
          "str",
          "item.get",
          "min"
        ],
        "check_t_pot_related": [
          "str",
          "any"
        ],
        "check_team_implementable": [
          "str",
          "sum"
        ],
        "check_personal_vs_team_vs_business": [
          "str",
          "item.get",
          "sum",
          "max"
        ],
        "identify_epic_candidates": [
          "any",
          "len",
          "str",
          "item.get",
          "self.extract_epic_name",
          "epic_groups.items"
        ],
        "extract_epic_name": [
          "item.get",
          "title.split"
        ],
        "categorize_item": [
          "any",
          "self.check_t_pot_related",
          "self.calculate_confidence_score",
          "str",
          "self.check_personal_vs_team_vs_business",
          "self.check_team_implementable"
        ],
        "find_duplicates": [
          "seen_items.items",
          "self.check_t_pot_related",
          "self.calculate_similarity",
          "duplicates.append",
          "self.suggest_merge_strategy",
          "item.get"
        ],
        "calculate_similarity": [
          "words1.union",
          "len",
          "title2.split",
          "title1.split",
          "set",
          "min",
          "words1.intersection"
        ],
        "suggest_merge_strategy": [
          "item2.get",
          "self.check_t_pot_related",
          "len",
          "item1.get",
          "str"
        ],
        "process_items": [
          "any",
          "self.check_t_pot_related",
          "len",
          "duplicate_item_ids.add",
          "processed_item.copy",
          "self.find_duplicates",
          "category.startswith",
          "set",
          "str",
          "print",
          "id",
          "self.extract_epic_name",
          "datetime.now",
          "low_confidence_items.append",
          "self.categorize_item",
          "self.check_team_implementable"
        ],
        "save_results": [
          "self.get_category_description",
          "sum",
          "len",
          "item.get",
          "print",
          "datetime.now",
          "open",
          "json.dump"
        ],
        "get_category_description": [
          "descriptions.get"
        ],
        "run": [
          "self.load_comprehensive_index",
          "self.process_items",
          "print",
          "self.save_results"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "Tuple",
        "datetime",
        "json",
        "os",
        "pathlib",
        "re",
        "typing"
      ],
      "hash": null,
      "artifact_id": "cfac1afc-2490-4b87-9111-34b0f96f8f19"
    },
    {
      "module_id": "scripts.github_sync_manager_enhanced",
      "path": "scripts/github_sync_manager_enhanced.py",
      "category": "core",
      "module_doc": "Enhanced GitHub Sync Manager - \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u043b\u0443\u0447\u0448\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0438\u0437 full_project_rollout\n\u0418\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u0443\u0435\u0442: processing results + GitHub API + token management + CLI fallback",
      "functions": [
        {
          "name": "print_info",
          "docstring": "",
          "line_range": [
            25,
            26
          ],
          "parameters": [
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "print_success",
          "docstring": "",
          "line_range": [
            28,
            29
          ],
          "parameters": [
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "print_warning",
          "docstring": "",
          "line_range": [
            31,
            32
          ],
          "parameters": [
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "print_error",
          "docstring": "",
          "line_range": [
            34,
            35
          ],
          "parameters": [
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "print_step",
          "docstring": "",
          "line_range": [
            37,
            38
          ],
          "parameters": [
            "step",
            "total",
            "msg"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Enhanced CLI interface",
          "line_range": [
            620,
            655
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            43,
            44
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_env_file",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            46,
            57
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "test_github_token",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0442\u043e\u043a\u0435\u043d\u0430",
          "line_range": [
            59,
            73
          ],
          "parameters": [
            "self",
            "token"
          ],
          "decorators": []
        },
        {
          "name": "check_gh_cli",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 GitHub CLI",
          "line_range": [
            75,
            82
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_token_from_gh_cli",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 \u0438\u0437 GitHub CLI",
          "line_range": [
            84,
            93
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_github_token",
          "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c GitHub \u0442\u043e\u043a\u0435\u043d \u0441 multiple fallbacks\n\nReturns:\n    (token, method) \u0433\u0434\u0435 method = 'env' | 'cli' | 'none'",
          "line_range": [
            95,
            117
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            122,
            164
          ],
          "parameters": [
            "self",
            "repo_owner",
            "repo_name",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "detect_repo_from_git",
          "docstring": "\u0410\u0432\u0442\u043e\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 owner/repo \u0438\u0437 git remote",
          "line_range": [
            166,
            198
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_sync_log",
          "docstring": "Load previous sync results",
          "line_range": [
            200,
            211
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_sync_log",
          "docstring": "Save sync log",
          "line_range": [
            213,
            216
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "api_request",
          "docstring": "Enhanced API request with CLI fallback",
          "line_range": [
            218,
            231
          ],
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_api_request_direct",
          "docstring": "Direct API request",
          "line_range": [
            233,
            261
          ],
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_api_request_via_cli",
          "docstring": "API request via GitHub CLI",
          "line_range": [
            263,
            293
          ],
          "parameters": [
            "self",
            "method",
            "endpoint",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "create_github_issue_enhanced",
          "docstring": "Enhanced issue creation (\u0438\u0437 create_github_issues.py)",
          "line_range": [
            295,
            359
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "_format_acceptance_criteria",
          "docstring": "Format acceptance criteria from item metadata",
          "line_range": [
            361,
            380
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "_format_implementation_notes",
          "docstring": "Format implementation notes",
          "line_range": [
            382,
            397
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "validate_before_sync",
          "docstring": "Enhanced validation",
          "line_range": [
            399,
            434
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_enhanced_sync",
          "docstring": "Enhanced sync with full project rollout integration",
          "line_range": [
            436,
            494
          ],
          "parameters": [
            "self",
            "categories"
          ],
          "decorators": []
        },
        {
          "name": "sync_category_enhanced",
          "docstring": "Enhanced category sync",
          "line_range": [
            496,
            554
          ],
          "parameters": [
            "self",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "item_already_synced",
          "docstring": "Check if item was already synced",
          "line_range": [
            556,
            560
          ],
          "parameters": [
            "self",
            "item",
            "category"
          ],
          "decorators": []
        },
        {
          "name": "create_github_epic_enhanced",
          "docstring": "Enhanced epic creation",
          "line_range": [
            562,
            607
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "create_github_discussion_enhanced",
          "docstring": "Enhanced discussion creation (placeholder - requires GraphQL)",
          "line_range": [
            609,
            618
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": [
            18,
            23
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "GitHubTokenManager",
          "docstring": "\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 GitHub \u0442\u043e\u043a\u0435\u043d\u0430\u043c\u0438 (\u0438\u0437 setup_github_token.sh)",
          "line_range": [
            40,
            117
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                43,
                44
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_env_file",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430",
              "line_range": [
                46,
                57
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "test_github_token",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0442\u043e\u043a\u0435\u043d\u0430",
              "line_range": [
                59,
                73
              ],
              "parameters": [
                "self",
                "token"
              ]
            },
            {
              "name": "check_gh_cli",
              "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 GitHub CLI",
              "line_range": [
                75,
                82
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_token_from_gh_cli",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 \u0438\u0437 GitHub CLI",
              "line_range": [
                84,
                93
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_github_token",
              "docstring": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c GitHub \u0442\u043e\u043a\u0435\u043d \u0441 multiple fallbacks\n\nReturns:\n    (token, method) \u0433\u0434\u0435 method = 'env' | 'cli' | 'none'",
              "line_range": [
                95,
                117
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "EnhancedGitHubSyncManager",
          "docstring": "\u0423\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u044b\u0439 GitHub Sync Manager \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 \u0432\u0441\u0435\u0445 \u043b\u0443\u0447\u0448\u0438\u0445 \u043f\u0440\u0430\u043a\u0442\u0438\u043a",
          "line_range": [
            119,
            618
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                122,
                164
              ],
              "parameters": [
                "self",
                "repo_owner",
                "repo_name",
                "dry_run"
              ]
            },
            {
              "name": "detect_repo_from_git",
              "docstring": "\u0410\u0432\u0442\u043e\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 owner/repo \u0438\u0437 git remote",
              "line_range": [
                166,
                198
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_sync_log",
              "docstring": "Load previous sync results",
              "line_range": [
                200,
                211
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_sync_log",
              "docstring": "Save sync log",
              "line_range": [
                213,
                216
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "api_request",
              "docstring": "Enhanced API request with CLI fallback",
              "line_range": [
                218,
                231
              ],
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ]
            },
            {
              "name": "_api_request_direct",
              "docstring": "Direct API request",
              "line_range": [
                233,
                261
              ],
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ]
            },
            {
              "name": "_api_request_via_cli",
              "docstring": "API request via GitHub CLI",
              "line_range": [
                263,
                293
              ],
              "parameters": [
                "self",
                "method",
                "endpoint",
                "data"
              ]
            },
            {
              "name": "create_github_issue_enhanced",
              "docstring": "Enhanced issue creation (\u0438\u0437 create_github_issues.py)",
              "line_range": [
                295,
                359
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "_format_acceptance_criteria",
              "docstring": "Format acceptance criteria from item metadata",
              "line_range": [
                361,
                380
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "_format_implementation_notes",
              "docstring": "Format implementation notes",
              "line_range": [
                382,
                397
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "validate_before_sync",
              "docstring": "Enhanced validation",
              "line_range": [
                399,
                434
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run_enhanced_sync",
              "docstring": "Enhanced sync with full project rollout integration",
              "line_range": [
                436,
                494
              ],
              "parameters": [
                "self",
                "categories"
              ]
            },
            {
              "name": "sync_category_enhanced",
              "docstring": "Enhanced category sync",
              "line_range": [
                496,
                554
              ],
              "parameters": [
                "self",
                "category"
              ]
            },
            {
              "name": "item_already_synced",
              "docstring": "Check if item was already synced",
              "line_range": [
                556,
                560
              ],
              "parameters": [
                "self",
                "item",
                "category"
              ]
            },
            {
              "name": "create_github_epic_enhanced",
              "docstring": "Enhanced epic creation",
              "line_range": [
                562,
                607
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "create_github_discussion_enhanced",
              "docstring": "Enhanced discussion creation (placeholder - requires GraphQL)",
              "line_range": [
                609,
                618
              ],
              "parameters": [
                "self",
                "item"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "print_info": [
          "print"
        ],
        "print_success": [
          "print"
        ],
        "print_warning": [
          "print"
        ],
        "print_error": [
          "print"
        ],
        "print_step": [
          "print"
        ],
        "__init__": [
          "print_info",
          "Path",
          "self.load_sync_log",
          "GitHubTokenManager",
          "self.detect_repo_from_git"
        ],
        "load_env_file": [
          "value.strip",
          "line.startswith",
          "Path",
          "line.split",
          "env_file.exists",
          "open",
          "key.strip",
          "line.strip"
        ],
        "test_github_token": [
          "requests.get",
          "response.json"
        ],
        "check_gh_cli": [
          "subprocess.run"
        ],
        "get_token_from_gh_cli": [
          "subprocess.run"
        ],
        "get_github_token": [
          "print_warning",
          "self.test_github_token",
          "os.getenv",
          "self.get_token_from_gh_cli",
          "self.check_gh_cli"
        ],
        "detect_repo_from_git": [
          "print_info",
          "print_warning",
          "url.endswith",
          "url.split",
          "len",
          "url.replace",
          "path.split",
          "subprocess.run",
          "url.startswith"
        ],
        "load_sync_log": [
          "open",
          "json.load"
        ],
        "save_sync_log": [
          "open",
          "json.dump"
        ],
        "api_request": [
          "time.sleep",
          "print_error",
          "self._api_request_direct",
          "self._api_request_via_cli"
        ],
        "_api_request_direct": [
          "method.upper",
          "print_warning",
          "print_error",
          "response.raise_for_status",
          "requests.get",
          "requests.patch",
          "ValueError",
          "requests.post",
          "response.json",
          "int"
        ],
        "_api_request_via_cli": [
          "method.upper",
          "print_warning",
          "cmd.extend",
          "print_error",
          "json.loads",
          "json.dumps",
          "subprocess.run"
        ],
        "create_github_issue_enhanced": [
          "labels.append",
          "print_info",
          "self.api_request",
          "self._format_acceptance_criteria",
          "processing_meta.get",
          "item.get",
          "self._format_implementation_notes",
          "print_success"
        ],
        "_format_acceptance_criteria": [
          "criteria.append",
          "item.get",
          "criteria.extend"
        ],
        "_format_implementation_notes": [
          "processing_meta.get",
          "item.get",
          "notes.append"
        ],
        "validate_before_sync": [
          "self.api_request",
          "file_path.exists",
          "print_error",
          "repo_info.get",
          "user_info.get",
          "print_success",
          "print_step"
        ],
        "run_enhanced_sync": [
          "datetime.now",
          "print_info",
          "enumerate",
          "self.save_sync_log",
          "self.validate_before_sync",
          "result.get",
          "print",
          "print_success",
          "self.sync_category_enhanced",
          "print_step"
        ],
        "sync_category_enhanced": [
          "print_info",
          "file_path.exists",
          "print_warning",
          "self.create_github_epic_enhanced",
          "print_error",
          "result.get",
          "self.item_already_synced",
          "item.get",
          "self.create_github_issue_enhanced",
          "datetime.now",
          "self.create_github_discussion_enhanced",
          "data.get",
          "json.load",
          "open"
        ],
        "item_already_synced": [
          "item.get"
        ],
        "create_github_epic_enhanced": [
          "print_info",
          "item.get",
          "print_success",
          "self.api_request"
        ],
        "create_github_discussion_enhanced": [
          "print_info",
          "item.get",
          "print_warning"
        ],
        "main": [
          "argparse.ArgumentParser",
          "len",
          "manager.run_enhanced_sync",
          "print_error",
          "parser.add_argument",
          "result.get",
          "EnhancedGitHubSyncManager",
          "print_success",
          "parser.parse_args"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "json",
        "os",
        "pathlib",
        "requests",
        "subprocess",
        "sys",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "b42b9015-e913-4705-8ce0-8bf0b73962a0"
    },
    {
      "module_id": "scripts.fix_github_script",
      "path": "scripts/fix_github_script.py",
      "category": "core",
      "module_doc": "Quick fix for GitHub issues creation script\n\u0418\u0441\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u043e\u0439 JSON \u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445",
      "functions": [
        {
          "name": "fix_json_loading",
          "docstring": "\u0418\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0443 JSON \u0434\u0430\u043d\u043d\u044b\u0445",
          "line_range": [
            11,
            42
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "fix_json_loading": [
          "content.replace",
          "f.write",
          "Path",
          "print",
          "open",
          "f.read"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "89a3e3e4-4bae-4275-9a12-7d550216a0fd"
    },
    {
      "module_id": "scripts.collector",
      "path": "scripts/collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "apply_filters",
          "docstring": "",
          "line_range": [
            13,
            29
          ],
          "parameters": [
            "files",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "collect_files",
          "docstring": "",
          "line_range": [
            32,
            38
          ],
          "parameters": [
            "root_dir",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "generate_struct",
          "docstring": "",
          "line_range": [
            41,
            88
          ],
          "parameters": [
            "root_dir",
            "output"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            91,
            92
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "apply_filters": [
          "pattern.startswith",
          "filtered.append",
          "fnmatch.fnmatch"
        ],
        "collect_files": [
          "files.append",
          "str",
          "apply_filters",
          "path.relative_to",
          "root_dir.rglob",
          "path.is_file"
        ],
        "generate_struct": [
          "logger.info",
          "collect_files",
          "len",
          "Path",
          "uuid.uuid4",
          "str",
          "output_path.open",
          "existing.get",
          "json.load",
          "output_path.exists",
          "json.dump"
        ],
        "main": [
          "generate_struct"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "logging",
        "pathlib",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "0f739884-091f-43f8-b671-b9d5cad11728"
    },
    {
      "module_id": "scripts.create_github_issues",
      "path": "scripts/create_github_issues.py",
      "category": "core",
      "module_doc": "GitHub Issues Creator for AI-Dogfooding Project\n\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 GitHub issues \u0438\u0437 \u043d\u0430\u0448\u0438\u0445 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0437\u0430\u0434\u0430\u0447",
      "functions": [
        {
          "name": "load_env_file",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 .env \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            16,
            28
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_epics_data",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438\u0437 JSON",
          "line_range": [
            205,
            213
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f issues",
          "line_range": [
            215,
            252
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            34,
            43
          ],
          "parameters": [
            "self",
            "repo_owner",
            "repo_name",
            "token",
            "use_cli"
          ],
          "decorators": []
        },
        {
          "name": "create_epic_issue",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u044d\u043f\u0438\u043a\u0430",
          "line_range": [
            45,
            83
          ],
          "parameters": [
            "self",
            "epic_data"
          ],
          "decorators": []
        },
        {
          "name": "create_task_issue",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            85,
            128
          ],
          "parameters": [
            "self",
            "task_data",
            "epic_number"
          ],
          "decorators": []
        },
        {
          "name": "_create_issue_via_api",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub API",
          "line_range": [
            130,
            150
          ],
          "parameters": [
            "self",
            "title",
            "body",
            "labels"
          ],
          "decorators": []
        },
        {
          "name": "_create_issue_via_cli",
          "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub CLI",
          "line_range": [
            152,
            186
          ],
          "parameters": [
            "self",
            "title",
            "body",
            "labels"
          ],
          "decorators": []
        },
        {
          "name": "_format_criteria",
          "docstring": "",
          "line_range": [
            188,
            189
          ],
          "parameters": [
            "self",
            "criteria"
          ],
          "decorators": []
        },
        {
          "name": "_format_tasks",
          "docstring": "",
          "line_range": [
            191,
            200
          ],
          "parameters": [
            "self",
            "tasks"
          ],
          "decorators": []
        },
        {
          "name": "_format_metrics",
          "docstring": "",
          "line_range": [
            202,
            203
          ],
          "parameters": [
            "self",
            "metrics"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubIssuesCreator",
          "docstring": "",
          "line_range": [
            33,
            203
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                34,
                43
              ],
              "parameters": [
                "self",
                "repo_owner",
                "repo_name",
                "token",
                "use_cli"
              ]
            },
            {
              "name": "create_epic_issue",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u044d\u043f\u0438\u043a\u0430",
              "line_range": [
                45,
                83
              ],
              "parameters": [
                "self",
                "epic_data"
              ]
            },
            {
              "name": "create_task_issue",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c GitHub issue \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438",
              "line_range": [
                85,
                128
              ],
              "parameters": [
                "self",
                "task_data",
                "epic_number"
              ]
            },
            {
              "name": "_create_issue_via_api",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub API",
              "line_range": [
                130,
                150
              ],
              "parameters": [
                "self",
                "title",
                "body",
                "labels"
              ]
            },
            {
              "name": "_create_issue_via_cli",
              "docstring": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c issue \u0447\u0435\u0440\u0435\u0437 GitHub CLI",
              "line_range": [
                152,
                186
              ],
              "parameters": [
                "self",
                "title",
                "body",
                "labels"
              ]
            },
            {
              "name": "_format_criteria",
              "docstring": "",
              "line_range": [
                188,
                189
              ],
              "parameters": [
                "self",
                "criteria"
              ]
            },
            {
              "name": "_format_tasks",
              "docstring": "",
              "line_range": [
                191,
                200
              ],
              "parameters": [
                "self",
                "tasks"
              ]
            },
            {
              "name": "_format_metrics",
              "docstring": "",
              "line_range": [
                202,
                203
              ],
              "parameters": [
                "self",
                "metrics"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "load_env_file": [
          "value.strip",
          "line.startswith",
          "Path",
          "line.split",
          "print",
          "env_file.exists",
          "open",
          "key.strip",
          "line.strip"
        ],
        "__init__": [],
        "create_epic_issue": [
          "self._format_metrics",
          "self._format_criteria",
          "epic_data.get",
          "self._create_issue_via_api",
          "self._create_issue_via_cli",
          "self._format_tasks"
        ],
        "create_task_issue": [
          "self._create_issue_via_api",
          "self._create_issue_via_cli",
          "task_data.get",
          "self._format_criteria"
        ],
        "_create_issue_via_api": [
          "response.json",
          "requests.post",
          "print"
        ],
        "_create_issue_via_cli": [
          "f.write",
          "os.unlink",
          "issue_url.split",
          "print",
          "os.getpid",
          "subprocess.run",
          "open",
          "int"
        ],
        "_format_criteria": [],
        "_format_tasks": [],
        "_format_metrics": [
          "metrics.items"
        ],
        "load_epics_data": [
          "epics_file.exists",
          "Path",
          "print",
          "open",
          "json.load"
        ],
        "main": [
          "os.getenv",
          "load_epics_data",
          "len",
          "creator.create_epic_issue",
          "epic_data.get",
          "epics_data.get",
          "creator.create_task_issue",
          "print",
          "GitHubIssuesCreator"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "json",
        "os",
        "pathlib",
        "requests",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "ba0c9b8f-cd9d-44b7-b32a-462ae2ae512f"
    },
    {
      "module_id": "scripts.session_cli",
      "path": "scripts/session_cli.py",
      "category": "core",
      "module_doc": "Session Management CLI\nAutomates session tracking, worklog updates, and session switching for llmstruct.\nPart of the comprehensive session management system.",
      "functions": [
        {
          "name": "get_current_branch",
          "docstring": "Get current git branch.",
          "line_range": [
            24,
            31
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_json_file",
          "docstring": "Load JSON file with error handling.",
          "line_range": [
            33,
            40
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "save_json_file",
          "docstring": "Save JSON file with error handling.",
          "line_range": [
            42,
            51
          ],
          "parameters": [
            "file_path",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "get_current_timestamp",
          "docstring": "Get current timestamp in ISO format.",
          "line_range": [
            53,
            55
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "log_event",
          "docstring": "Log an event to worklog.json.",
          "line_range": [
            57,
            88
          ],
          "parameters": [
            "event_message",
            "author"
          ],
          "decorators": []
        },
        {
          "name": "switch_session",
          "docstring": "Switch to a different session or create new one.",
          "line_range": [
            90,
            141
          ],
          "parameters": [
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "list_sessions",
          "docstring": "List all available sessions.",
          "line_range": [
            143,
            166
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_current_session",
          "docstring": "Show current session details.",
          "line_range": [
            168,
            183
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_worklog",
          "docstring": "Show recent worklog entries.",
          "line_range": [
            185,
            203
          ],
          "parameters": [
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Main CLI interface.",
          "line_range": [
            205,
            244
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": [
            16,
            22
          ],
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {
        "get_current_branch": [
          "subprocess.run"
        ],
        "load_json_file": [
          "open",
          "json.load",
          "print"
        ],
        "save_json_file": [
          "json.dump",
          "open",
          "print",
          "os.makedirs"
        ],
        "get_current_timestamp": [
          "datetime.now"
        ],
        "log_event": [
          "current_session.get",
          "get_current_branch",
          "load_json_file",
          "print",
          "save_json_file",
          "get_current_timestamp"
        ],
        "switch_session": [
          "get_current_branch",
          "load_json_file",
          "print",
          "save_json_file",
          "log_event",
          "get_current_timestamp"
        ],
        "list_sessions": [
          "current_session.get",
          "print",
          "load_json_file"
        ],
        "show_current_session": [
          "current_session.get",
          "print",
          "load_json_file"
        ],
        "show_worklog": [
          "len",
          "print",
          "load_json_file",
          "reversed"
        ],
        "main": [
          "list_sessions",
          "show_current_session",
          "int",
          "show_worklog",
          "len",
          "print",
          "switch_session",
          "log_event"
        ]
      },
      "dependencies": [
        "Path",
        "datetime",
        "json",
        "os",
        "pathlib",
        "subprocess",
        "sys"
      ],
      "hash": null,
      "artifact_id": "f78a2e34-0631-46ab-8569-3df2c9576fb4"
    },
    {
      "module_id": "scripts.epic_roadmap_manager",
      "path": "scripts/epic_roadmap_manager.py",
      "category": "core",
      "module_doc": "Epic Roadmap Manager - \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430\u043c\u0438 \u044d\u043f\u0438\u043a\u043e\u0432 \u0438 \u0441\u0435\u0441\u0441\u0438\u0439\n\n\u0424\u0443\u043d\u043a\u0446\u0438\u0438:\n- \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 roadmap \u0438 \u043f\u043b\u0430\u043d\u043e\u0432\n- \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u0441\u0435\u0441\u0441\u0438\u0439\n- \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u0441 GitHub epics\n- \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u043e\u0432",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            259,
            291
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            19,
            22
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_roadmap",
          "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c roadmap \u0438\u0437 \u0444\u0430\u0439\u043b\u0430",
          "line_range": [
            24,
            31
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_roadmap",
          "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c roadmap \u0432 \u0444\u0430\u0439\u043b",
          "line_range": [
            33,
            40
          ],
          "parameters": [
            "self",
            "roadmap"
          ],
          "decorators": []
        },
        {
          "name": "show_overview",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043e\u0431\u0437\u043e\u0440 roadmap",
          "line_range": [
            42,
            80
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "show_epic_details",
          "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u044d\u043f\u0438\u043a\u0430",
          "line_range": [
            82,
            125
          ],
          "parameters": [
            "self",
            "epic_id"
          ],
          "decorators": []
        },
        {
          "name": "start_session",
          "docstring": "\u041d\u0430\u0447\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043d\u0430\u0434 \u0441\u0435\u0441\u0441\u0438\u0435\u0439",
          "line_range": [
            127,
            189
          ],
          "parameters": [
            "self",
            "epic_id",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "complete_session",
          "docstring": "\u0417\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e",
          "line_range": [
            191,
            257
          ],
          "parameters": [
            "self",
            "session_id"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "EpicRoadmapManager",
          "docstring": "",
          "line_range": [
            18,
            257
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                19,
                22
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_roadmap",
              "docstring": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c roadmap \u0438\u0437 \u0444\u0430\u0439\u043b\u0430",
              "line_range": [
                24,
                31
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_roadmap",
              "docstring": "\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c roadmap \u0432 \u0444\u0430\u0439\u043b",
              "line_range": [
                33,
                40
              ],
              "parameters": [
                "self",
                "roadmap"
              ]
            },
            {
              "name": "show_overview",
              "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043e\u0431\u0437\u043e\u0440 roadmap",
              "line_range": [
                42,
                80
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "show_epic_details",
              "docstring": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u044d\u043f\u0438\u043a\u0430",
              "line_range": [
                82,
                125
              ],
              "parameters": [
                "self",
                "epic_id"
              ]
            },
            {
              "name": "start_session",
              "docstring": "\u041d\u0430\u0447\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043d\u0430\u0434 \u0441\u0435\u0441\u0441\u0438\u0435\u0439",
              "line_range": [
                127,
                189
              ],
              "parameters": [
                "self",
                "epic_id",
                "session_id"
              ]
            },
            {
              "name": "complete_session",
              "docstring": "\u0417\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0441\u0435\u0441\u0441\u0438\u044e",
              "line_range": [
                191,
                257
              ],
              "parameters": [
                "self",
                "session_id"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "load_roadmap": [
          "open",
          "json.load",
          "print"
        ],
        "save_roadmap": [
          "datetime.now",
          "open",
          "print",
          "json.dump"
        ],
        "show_overview": [
          "roadmap.get",
          "self.load_roadmap",
          "stats.get",
          "epics.items",
          "epic.get",
          "print"
        ],
        "show_epic_details": [
          "roadmap.get",
          "self.load_roadmap",
          "len",
          "epic.get",
          "epic_data.get",
          "session.get",
          "print"
        ],
        "start_session": [
          "roadmap.get",
          "self.load_roadmap",
          "epic.get",
          "sess.get",
          "epic_data.get",
          "os.makedirs",
          "session.get",
          "print",
          "datetime.now",
          "open",
          "self.save_roadmap",
          "json.dump"
        ],
        "complete_session": [
          "roadmap.get",
          "self.load_roadmap",
          "current_session.get",
          "os.remove",
          "sessions_log.append",
          "json.dump",
          "epic.get",
          "sess.get",
          "os.makedirs",
          "session.get",
          "print",
          "datetime.now",
          "open",
          "json.load",
          "self.save_roadmap",
          "all"
        ],
        "main": [
          "manager.start_session",
          "argparse.ArgumentParser",
          "EpicRoadmapManager",
          "parser.add_argument",
          "print",
          "manager.show_epic_details",
          "parser.parse_args",
          "manager.complete_session",
          "manager.show_overview"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "datetime",
        "json",
        "os",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "6451e939-6f1b-48de-b266-e8d564af42d0"
    },
    {
      "module_id": "scripts.auto_update_struct",
      "path": "scripts/auto_update_struct.py",
      "category": "core",
      "module_doc": "Automatic struct.json update script\nThis script automatically parses the project and updates struct.json\nwithout requiring LLM intervention.",
      "functions": [
        {
          "name": "detect_project_changes",
          "docstring": "Detect if project files have changed since last struct.json generation.\nUses git status to check for modifications.",
          "line_range": [
            44,
            81
          ],
          "parameters": [
            "root_dir",
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_struct_json",
          "docstring": "Create a backup of existing struct.json.",
          "line_range": [
            84,
            97
          ],
          "parameters": [
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_struct_json",
          "docstring": "Validate generated struct.json for basic structure.",
          "line_range": [
            100,
            128
          ],
          "parameters": [
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "update_struct_json",
          "docstring": "Main function to update struct.json automatically.\n\nArgs:\n    root_dir: Project root directory (default: current directory)\n    struct_path: Path to struct.json (default: ./struct.json)\n    force: Force regeneration even if no changes detected\n    config_override: Override default configuration\n\nReturns:\n    bool: True if update was successful",
          "line_range": [
            131,
            225
          ],
          "parameters": [
            "root_dir",
            "struct_path",
            "force",
            "config_override"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for auto-update script.",
          "line_range": [
            228,
            286
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "",
          "line_range": [
            24,
            25
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_gitignore",
          "docstring": "",
          "line_range": [
            26,
            27
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "",
          "line_range": [
            28,
            29
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_config": [],
        "load_gitignore": [],
        "generate_json": [
          "ImportError"
        ],
        "detect_project_changes": [
          "logger.info",
          "logger.warning",
          "file_path.stat",
          "Path",
          "subprocess.run"
        ],
        "backup_struct_json": [
          "logger.info",
          "logger.error",
          "Path",
          "datetime.now",
          "subprocess.run"
        ],
        "validate_struct_json": [
          "logger.info",
          "open",
          "json.load",
          "logger.error"
        ],
        "update_struct_json": [
          "logger.info",
          "validate_struct_json",
          "logger.error",
          "detect_project_changes",
          "config.update",
          "cli_config.get",
          "os.getcwd",
          "generate_json",
          "backup_struct_json",
          "load_config",
          "config.get",
          "subprocess.run",
          "open",
          "load_gitignore",
          "json.dump"
        ],
        "main": [
          "detect_project_changes",
          "argparse.ArgumentParser",
          "update_struct_json",
          "os.getcwd",
          "logging.getLogger",
          "parser.add_argument",
          "print",
          "parser.parse_args",
          "sys.exit"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "generate_json",
        "json",
        "llmstruct.cli",
        "llmstruct.generators.json_generator",
        "load_config",
        "load_gitignore",
        "logging",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "bcf2dbc5-037c-41b3-955d-13146835bb6a"
    },
    {
      "module_id": "scripts.create_comprehensive_index",
      "path": "scripts/create_comprehensive_index.py",
      "category": "core",
      "module_doc": "Comprehensive Project Index Creator\nScans ALL project directories for tasks, ideas, sessions, and concepts.\nProvides complete visibility into project state and unaccounted innovations.",
      "functions": [
        {
          "name": "main",
          "docstring": "Main execution function.",
          "line_range": [
            714,
            735
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            45,
            58
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_init_patterns",
          "docstring": "Initialize comprehensive extraction patterns.",
          "line_range": [
            60,
            92
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "scan_all_directories",
          "docstring": "Scan all configured directories comprehensively.",
          "line_range": [
            94,
            111
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_scan_directory",
          "docstring": "Scan a specific directory according to its configuration.",
          "line_range": [
            113,
            127
          ],
          "parameters": [
            "self",
            "directory",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "_scan_root_files",
          "docstring": "Scan root-level files.",
          "line_range": [
            129,
            133
          ],
          "parameters": [
            "self",
            "config"
          ],
          "decorators": []
        },
        {
          "name": "_should_scan_file",
          "docstring": "Check if file should be scanned based on extension.",
          "line_range": [
            135,
            137
          ],
          "parameters": [
            "self",
            "file_path",
            "allowed_types"
          ],
          "decorators": []
        },
        {
          "name": "_scan_file",
          "docstring": "Scan individual file for project items.",
          "line_range": [
            139,
            152
          ],
          "parameters": [
            "self",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_from_text",
          "docstring": "Extract items from text/markdown files.",
          "line_range": [
            154,
            206
          ],
          "parameters": [
            "self",
            "file_path",
            "content",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_from_json",
          "docstring": "Extract items from JSON files.",
          "line_range": [
            208,
            225
          ],
          "parameters": [
            "self",
            "file_path",
            "content",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_create_item_from_match",
          "docstring": "Create ProjectItem from regex match.",
          "line_range": [
            227,
            249
          ],
          "parameters": [
            "self",
            "match",
            "content",
            "file_path",
            "item_type",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_create_checkbox_item",
          "docstring": "Create ProjectItem from checkbox match.",
          "line_range": [
            251,
            274
          ],
          "parameters": [
            "self",
            "match",
            "content",
            "file_path",
            "item_type",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_create_simple_item",
          "docstring": "Create simple ProjectItem.",
          "line_range": [
            276,
            297
          ],
          "parameters": [
            "self",
            "title",
            "content",
            "file_path",
            "item_type",
            "source_dir",
            "priority",
            "position"
          ],
          "decorators": []
        },
        {
          "name": "_detect_status",
          "docstring": "Detect item status from surrounding content.",
          "line_range": [
            299,
            308
          ],
          "parameters": [
            "self",
            "content",
            "position"
          ],
          "decorators": []
        },
        {
          "name": "_detect_priority",
          "docstring": "Detect item priority from surrounding content.",
          "line_range": [
            310,
            319
          ],
          "parameters": [
            "self",
            "content",
            "position",
            "default"
          ],
          "decorators": []
        },
        {
          "name": "_assess_strategic_value",
          "docstring": "Assess strategic value of item.",
          "line_range": [
            321,
            330
          ],
          "parameters": [
            "self",
            "title",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_context",
          "docstring": "Extract context around position.",
          "line_range": [
            332,
            336
          ],
          "parameters": [
            "self",
            "content",
            "position",
            "length"
          ],
          "decorators": []
        },
        {
          "name": "_detect_category",
          "docstring": "Detect item category.",
          "line_range": [
            338,
            351
          ],
          "parameters": [
            "self",
            "title",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_estimate_effort",
          "docstring": "Estimate effort required.",
          "line_range": [
            353,
            362
          ],
          "parameters": [
            "self",
            "title",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_tags",
          "docstring": "Extract relevant tags.",
          "line_range": [
            364,
            378
          ],
          "parameters": [
            "self",
            "title",
            "content",
            "source_dir"
          ],
          "decorators": []
        },
        {
          "name": "_is_noise_checkbox",
          "docstring": "Check if checkbox is noise (navigation, etc).",
          "line_range": [
            380,
            384
          ],
          "parameters": [
            "self",
            "text"
          ],
          "decorators": []
        },
        {
          "name": "_parse_json_files",
          "docstring": "Parse structured JSON files for existing data.",
          "line_range": [
            386,
            402
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_process_structured_json",
          "docstring": "Process structured JSON data.",
          "line_range": [
            404,
            419
          ],
          "parameters": [
            "self",
            "data",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_add_json_item",
          "docstring": "Add item from JSON structure.",
          "line_range": [
            421,
            441
          ],
          "parameters": [
            "self",
            "item",
            "file_path",
            "item_type"
          ],
          "decorators": []
        },
        {
          "name": "_assess_json_strategic_value",
          "docstring": "Assess strategic value from JSON item.",
          "line_range": [
            443,
            450
          ],
          "parameters": [
            "self",
            "item"
          ],
          "decorators": []
        },
        {
          "name": "_extract_innovation_concepts",
          "docstring": "Extract innovation concepts from content.",
          "line_range": [
            452,
            482
          ],
          "parameters": [
            "self",
            "file_path",
            "content",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_enhance_items",
          "docstring": "Post-process items to enhance metadata and find relationships.",
          "line_range": [
            484,
            501
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_find_related_items",
          "docstring": "Find related items based on content similarity.",
          "line_range": [
            503,
            517
          ],
          "parameters": [
            "self",
            "item",
            "id_map",
            "title_map"
          ],
          "decorators": []
        },
        {
          "name": "generate_comprehensive_report",
          "docstring": "Generate comprehensive analysis report.",
          "line_range": [
            519,
            561
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_comprehensive_index",
          "docstring": "Save comprehensive index and reports.",
          "line_range": [
            563,
            582
          ],
          "parameters": [
            "self",
            "output_dir"
          ],
          "decorators": []
        },
        {
          "name": "_generate_analysis_report",
          "docstring": "Generate human-readable analysis report.",
          "line_range": [
            584,
            658
          ],
          "parameters": [
            "self",
            "report"
          ],
          "decorators": []
        },
        {
          "name": "_format_dict",
          "docstring": "Format dictionary for markdown display.",
          "line_range": [
            660,
            662
          ],
          "parameters": [
            "self",
            "d"
          ],
          "decorators": []
        },
        {
          "name": "_format_items_list",
          "docstring": "Format items list for markdown display.",
          "line_range": [
            664,
            677
          ],
          "parameters": [
            "self",
            "items"
          ],
          "decorators": []
        },
        {
          "name": "_extract_json_tasks",
          "docstring": "Extract tasks from JSON tasks array.",
          "line_range": [
            679,
            684
          ],
          "parameters": [
            "self",
            "tasks_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_json_ideas",
          "docstring": "Extract ideas from JSON ideas array.",
          "line_range": [
            686,
            691
          ],
          "parameters": [
            "self",
            "ideas_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_json_sessions",
          "docstring": "Extract sessions from JSON sessions array.",
          "line_range": [
            693,
            698
          ],
          "parameters": [
            "self",
            "sessions_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        },
        {
          "name": "_extract_json_array",
          "docstring": "Extract items from JSON array.",
          "line_range": [
            700,
            711
          ],
          "parameters": [
            "self",
            "array_data",
            "file_path",
            "source_dir",
            "priority"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ProjectItem",
          "docstring": "Unified representation of any project item (task, idea, session, concept).",
          "line_range": [
            22,
            39
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ComprehensiveIndexer",
          "docstring": "Comprehensive indexer for all project content.",
          "line_range": [
            42,
            711
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                45,
                58
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_init_patterns",
              "docstring": "Initialize comprehensive extraction patterns.",
              "line_range": [
                60,
                92
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "scan_all_directories",
              "docstring": "Scan all configured directories comprehensively.",
              "line_range": [
                94,
                111
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_scan_directory",
              "docstring": "Scan a specific directory according to its configuration.",
              "line_range": [
                113,
                127
              ],
              "parameters": [
                "self",
                "directory",
                "config"
              ]
            },
            {
              "name": "_scan_root_files",
              "docstring": "Scan root-level files.",
              "line_range": [
                129,
                133
              ],
              "parameters": [
                "self",
                "config"
              ]
            },
            {
              "name": "_should_scan_file",
              "docstring": "Check if file should be scanned based on extension.",
              "line_range": [
                135,
                137
              ],
              "parameters": [
                "self",
                "file_path",
                "allowed_types"
              ]
            },
            {
              "name": "_scan_file",
              "docstring": "Scan individual file for project items.",
              "line_range": [
                139,
                152
              ],
              "parameters": [
                "self",
                "file_path",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_from_text",
              "docstring": "Extract items from text/markdown files.",
              "line_range": [
                154,
                206
              ],
              "parameters": [
                "self",
                "file_path",
                "content",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_from_json",
              "docstring": "Extract items from JSON files.",
              "line_range": [
                208,
                225
              ],
              "parameters": [
                "self",
                "file_path",
                "content",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_create_item_from_match",
              "docstring": "Create ProjectItem from regex match.",
              "line_range": [
                227,
                249
              ],
              "parameters": [
                "self",
                "match",
                "content",
                "file_path",
                "item_type",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_create_checkbox_item",
              "docstring": "Create ProjectItem from checkbox match.",
              "line_range": [
                251,
                274
              ],
              "parameters": [
                "self",
                "match",
                "content",
                "file_path",
                "item_type",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_create_simple_item",
              "docstring": "Create simple ProjectItem.",
              "line_range": [
                276,
                297
              ],
              "parameters": [
                "self",
                "title",
                "content",
                "file_path",
                "item_type",
                "source_dir",
                "priority",
                "position"
              ]
            },
            {
              "name": "_detect_status",
              "docstring": "Detect item status from surrounding content.",
              "line_range": [
                299,
                308
              ],
              "parameters": [
                "self",
                "content",
                "position"
              ]
            },
            {
              "name": "_detect_priority",
              "docstring": "Detect item priority from surrounding content.",
              "line_range": [
                310,
                319
              ],
              "parameters": [
                "self",
                "content",
                "position",
                "default"
              ]
            },
            {
              "name": "_assess_strategic_value",
              "docstring": "Assess strategic value of item.",
              "line_range": [
                321,
                330
              ],
              "parameters": [
                "self",
                "title",
                "content"
              ]
            },
            {
              "name": "_extract_context",
              "docstring": "Extract context around position.",
              "line_range": [
                332,
                336
              ],
              "parameters": [
                "self",
                "content",
                "position",
                "length"
              ]
            },
            {
              "name": "_detect_category",
              "docstring": "Detect item category.",
              "line_range": [
                338,
                351
              ],
              "parameters": [
                "self",
                "title",
                "content"
              ]
            },
            {
              "name": "_estimate_effort",
              "docstring": "Estimate effort required.",
              "line_range": [
                353,
                362
              ],
              "parameters": [
                "self",
                "title",
                "content"
              ]
            },
            {
              "name": "_extract_tags",
              "docstring": "Extract relevant tags.",
              "line_range": [
                364,
                378
              ],
              "parameters": [
                "self",
                "title",
                "content",
                "source_dir"
              ]
            },
            {
              "name": "_is_noise_checkbox",
              "docstring": "Check if checkbox is noise (navigation, etc).",
              "line_range": [
                380,
                384
              ],
              "parameters": [
                "self",
                "text"
              ]
            },
            {
              "name": "_parse_json_files",
              "docstring": "Parse structured JSON files for existing data.",
              "line_range": [
                386,
                402
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_process_structured_json",
              "docstring": "Process structured JSON data.",
              "line_range": [
                404,
                419
              ],
              "parameters": [
                "self",
                "data",
                "file_path"
              ]
            },
            {
              "name": "_add_json_item",
              "docstring": "Add item from JSON structure.",
              "line_range": [
                421,
                441
              ],
              "parameters": [
                "self",
                "item",
                "file_path",
                "item_type"
              ]
            },
            {
              "name": "_assess_json_strategic_value",
              "docstring": "Assess strategic value from JSON item.",
              "line_range": [
                443,
                450
              ],
              "parameters": [
                "self",
                "item"
              ]
            },
            {
              "name": "_extract_innovation_concepts",
              "docstring": "Extract innovation concepts from content.",
              "line_range": [
                452,
                482
              ],
              "parameters": [
                "self",
                "file_path",
                "content",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_enhance_items",
              "docstring": "Post-process items to enhance metadata and find relationships.",
              "line_range": [
                484,
                501
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_find_related_items",
              "docstring": "Find related items based on content similarity.",
              "line_range": [
                503,
                517
              ],
              "parameters": [
                "self",
                "item",
                "id_map",
                "title_map"
              ]
            },
            {
              "name": "generate_comprehensive_report",
              "docstring": "Generate comprehensive analysis report.",
              "line_range": [
                519,
                561
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_comprehensive_index",
              "docstring": "Save comprehensive index and reports.",
              "line_range": [
                563,
                582
              ],
              "parameters": [
                "self",
                "output_dir"
              ]
            },
            {
              "name": "_generate_analysis_report",
              "docstring": "Generate human-readable analysis report.",
              "line_range": [
                584,
                658
              ],
              "parameters": [
                "self",
                "report"
              ]
            },
            {
              "name": "_format_dict",
              "docstring": "Format dictionary for markdown display.",
              "line_range": [
                660,
                662
              ],
              "parameters": [
                "self",
                "d"
              ]
            },
            {
              "name": "_format_items_list",
              "docstring": "Format items list for markdown display.",
              "line_range": [
                664,
                677
              ],
              "parameters": [
                "self",
                "items"
              ]
            },
            {
              "name": "_extract_json_tasks",
              "docstring": "Extract tasks from JSON tasks array.",
              "line_range": [
                679,
                684
              ],
              "parameters": [
                "self",
                "tasks_data",
                "file_path",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_json_ideas",
              "docstring": "Extract ideas from JSON ideas array.",
              "line_range": [
                686,
                691
              ],
              "parameters": [
                "self",
                "ideas_data",
                "file_path",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_json_sessions",
              "docstring": "Extract sessions from JSON sessions array.",
              "line_range": [
                693,
                698
              ],
              "parameters": [
                "self",
                "sessions_data",
                "file_path",
                "source_dir",
                "priority"
              ]
            },
            {
              "name": "_extract_json_array",
              "docstring": "Extract items from JSON array.",
              "line_range": [
                700,
                711
              ],
              "parameters": [
                "self",
                "array_data",
                "file_path",
                "source_dir",
                "priority"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._init_patterns",
          "Path"
        ],
        "_init_patterns": [
          "re.compile"
        ],
        "scan_all_directories": [
          "logger.info",
          "self._enhance_items",
          "self._parse_json_files",
          "len",
          "self._scan_root_files",
          "self._scan_directory"
        ],
        "_scan_directory": [
          "logger.info",
          "logger.warning",
          "self._scan_file",
          "dir_path.exists",
          "dir_path.glob",
          "self._should_scan_file",
          "file_path.is_file"
        ],
        "_scan_root_files": [
          "self._should_scan_file",
          "self._scan_file",
          "file_path.is_file"
        ],
        "_should_scan_file": [],
        "_scan_file": [
          "self._extract_from_text",
          "logger.error",
          "self._extract_from_json",
          "open",
          "f.read"
        ],
        "_extract_from_text": [
          "self._create_item_from_match",
          "self._extract_innovation_concepts",
          "self._create_checkbox_item",
          "match.group",
          "match.start",
          "self._create_simple_item",
          "self._is_noise_checkbox"
        ],
        "_extract_from_json": [
          "self._extract_json_ideas",
          "isinstance",
          "logger.warning",
          "self._extract_json_sessions",
          "json.loads",
          "self._extract_json_array",
          "self._extract_json_tasks"
        ],
        "_create_item_from_match": [
          "self._assess_strategic_value",
          "self._extract_context",
          "ProjectItem",
          "self._detect_priority",
          "self._detect_category",
          "match.start",
          "match.group",
          "self._extract_tags",
          "self._estimate_effort",
          "self._detect_status",
          "str",
          "datetime.now",
          "title.strip"
        ],
        "_create_checkbox_item": [
          "self._assess_strategic_value",
          "self._extract_context",
          "ProjectItem",
          "self._detect_priority",
          "self._detect_category",
          "match.start",
          "match.group",
          "self._extract_tags",
          "self._estimate_effort",
          "str",
          "datetime.now"
        ],
        "_create_simple_item": [
          "self._extract_context",
          "ProjectItem",
          "str",
          "datetime.now",
          "title.strip"
        ],
        "_detect_status": [
          "max"
        ],
        "_detect_priority": [
          "max"
        ],
        "_assess_strategic_value": [],
        "_extract_context": [
          "len",
          "max",
          "min"
        ],
        "_detect_category": [
          "title.lower",
          "any"
        ],
        "_estimate_effort": [
          "any"
        ],
        "_extract_tags": [
          "title.lower",
          "tags.append",
          "source_dir.replace"
        ],
        "_is_noise_checkbox": [
          "len",
          "text.strip",
          "any",
          "text.lower"
        ],
        "_parse_json_files": [
          "file_path.exists",
          "logger.error",
          "self._process_structured_json",
          "open",
          "json.load"
        ],
        "_process_structured_json": [
          "isinstance",
          "self._add_json_item"
        ],
        "_add_json_item": [
          "self._assess_json_strategic_value",
          "ProjectItem",
          "len",
          "str",
          "item.get",
          "datetime.now"
        ],
        "_assess_json_strategic_value": [
          "item.get"
        ],
        "_extract_innovation_concepts": [
          "content.find",
          "enumerate",
          "self._extract_context",
          "ProjectItem",
          "innovation_lines.append",
          "len",
          "source_dir.replace",
          "content.split",
          "str",
          "datetime.now",
          "line.strip"
        ],
        "_enhance_items": [
          "logger.info",
          "re.sub",
          "self._find_related_items"
        ],
        "_find_related_items": [
          "ref_type.upper",
          "related.append",
          "re.findall"
        ],
        "generate_comprehensive_report": [
          "by_status.get",
          "len",
          "by_type.get",
          "asdict",
          "by_source.get",
          "by_strategic_value.get",
          "by_priority.get",
          "datetime.now"
        ],
        "save_comprehensive_index": [
          "logger.info",
          "f.write",
          "len",
          "self._generate_analysis_report",
          "os.makedirs",
          "self.generate_comprehensive_report",
          "open",
          "json.dump"
        ],
        "_generate_analysis_report": [
          "len",
          "self._format_dict",
          "self._format_items_list"
        ],
        "_format_dict": [
          "sorted",
          "d.items"
        ],
        "_format_items_list": [
          "result.append"
        ],
        "_extract_json_tasks": [
          "isinstance",
          "self._add_json_item"
        ],
        "_extract_json_ideas": [
          "isinstance",
          "self._add_json_item"
        ],
        "_extract_json_sessions": [
          "isinstance",
          "self._add_json_item"
        ],
        "_extract_json_array": [
          "str",
          "isinstance",
          "self._add_json_item"
        ],
        "main": [
          "logger.info",
          "len",
          "indexer.scan_all_directories",
          "indexer.save_comprehensive_index",
          "print",
          "by_strategic.get",
          "ComprehensiveIndexer"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "Set",
        "asdict",
        "dataclass",
        "dataclasses",
        "datetime",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "typing"
      ],
      "hash": null,
      "artifact_id": "4201bae7-fd07-4cb4-a402-e33c3e74887c"
    },
    {
      "module_id": "scripts.validate_schemas",
      "path": "scripts/validate_schemas.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "fc62b51a-1494-4aa4-86b9-706e12185c37"
    },
    {
      "module_id": "scripts.export_to_github_projects",
      "path": "scripts/export_to_github_projects.py",
      "category": "core",
      "module_doc": "Export script for GitHub Projects integration\nConverts official tasks.json and ideas.json to GitHub Project cards",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            183,
            266
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            23,
            26
          ],
          "parameters": [
            "self",
            "config_path",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "check_github_cli",
          "docstring": "Check if GitHub CLI is installed and authenticated",
          "line_range": [
            28,
            36
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "list_projects",
          "docstring": "List available GitHub Projects (via gh-projects extension)",
          "line_range": [
            38,
            55
          ],
          "parameters": [
            "self",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "create_project_item",
          "docstring": "Create a new item in GitHub Project (via gh-projects extension)\nTODO: \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 GraphQL API \u0438\u043b\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c",
          "line_range": [
            57,
            82
          ],
          "parameters": [
            "self",
            "project_number",
            "title",
            "body",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "export_tasks_to_project",
          "docstring": "Export tasks to GitHub Project",
          "line_range": [
            84,
            123
          ],
          "parameters": [
            "self",
            "tasks",
            "project_number",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "export_ideas_to_project",
          "docstring": "Export ideas to GitHub Project",
          "line_range": [
            125,
            164
          ],
          "parameters": [
            "self",
            "ideas",
            "project_number",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "filter_data",
          "docstring": "Filter data by status and priority",
          "line_range": [
            166,
            180
          ],
          "parameters": [
            "self",
            "data",
            "status_filter",
            "priority_filter"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubProjectsExportScript",
          "docstring": "Extended exporter with command-line interface and GitHub CLI integration",
          "line_range": [
            20,
            180
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                23,
                26
              ],
              "parameters": [
                "self",
                "config_path",
                "dry_run"
              ]
            },
            {
              "name": "check_github_cli",
              "docstring": "Check if GitHub CLI is installed and authenticated",
              "line_range": [
                28,
                36
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "list_projects",
              "docstring": "List available GitHub Projects (via gh-projects extension)",
              "line_range": [
                38,
                55
              ],
              "parameters": [
                "self",
                "owner",
                "repo"
              ]
            },
            {
              "name": "create_project_item",
              "docstring": "Create a new item in GitHub Project (via gh-projects extension)\nTODO: \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 GraphQL API \u0438\u043b\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c",
              "line_range": [
                57,
                82
              ],
              "parameters": [
                "self",
                "project_number",
                "title",
                "body",
                "owner",
                "repo"
              ]
            },
            {
              "name": "export_tasks_to_project",
              "docstring": "Export tasks to GitHub Project",
              "line_range": [
                84,
                123
              ],
              "parameters": [
                "self",
                "tasks",
                "project_number",
                "owner",
                "repo"
              ]
            },
            {
              "name": "export_ideas_to_project",
              "docstring": "Export ideas to GitHub Project",
              "line_range": [
                125,
                164
              ],
              "parameters": [
                "self",
                "ideas",
                "project_number",
                "owner",
                "repo"
              ]
            },
            {
              "name": "filter_data",
              "docstring": "Filter data by status and priority",
              "line_range": [
                166,
                180
              ],
              "parameters": [
                "self",
                "data",
                "status_filter",
                "priority_filter"
              ]
            }
          ],
          "bases": [
            "GitHubProjectsExporter"
          ]
        }
      ],
      "callgraph": {
        "__init__": [
          "super"
        ],
        "check_github_cli": [
          "self._run_gh_command",
          "print"
        ],
        "list_projects": [
          "isinstance",
          "self._run_gh_command",
          "json.loads",
          "print"
        ],
        "create_project_item": [
          "output.strip",
          "str",
          "self._run_gh_command",
          "print"
        ],
        "export_tasks_to_project": [
          "len",
          "task.get",
          "print",
          "self.create_project_item",
          "self.format_task_for_github"
        ],
        "export_ideas_to_project": [
          "len",
          "idea.get",
          "print",
          "self.create_project_item",
          "self.format_idea_for_github"
        ],
        "filter_data": [
          "item.get"
        ],
        "main": [
          "exporter.export_tasks_to_project",
          "GitHubProjectsExportScript",
          "argparse.ArgumentParser",
          "exporter._save_mapping",
          "exporter.check_github_cli",
          "parser.add_argument",
          "print",
          "exporter.export_ideas_to_project",
          "parser.parse_args",
          "exporter.filter_data",
          "exporter.load_official_data",
          "sys.exit"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "GitHubProjectsExporter",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "argparse",
        "datetime",
        "json",
        "llmstruct.gh_view",
        "pathlib",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "71a106fa-36d2-419b-8c7b-5892a53582fd"
    },
    {
      "module_id": "scripts.validate_refs",
      "path": "scripts/validate_refs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_references",
          "docstring": "",
          "line_range": [
            11,
            43
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            46,
            47
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_references": [
          "logger.info",
          "enumerate",
          "logger.error",
          "logger.warning",
          "Path",
          "target_file.exists",
          "json.dump",
          "source_file.exists",
          "idea.get",
          "json.load",
          "broken_links.append"
        ],
        "main": [
          "validate_references"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "d05e46f1-2303-4884-99ef-37ae2580c849"
    },
    {
      "module_id": "scripts.fix_hardcoded_usernames",
      "path": "scripts/fix_hardcoded_usernames.py",
      "category": "core",
      "module_doc": "Fix Hardcoded Usernames Script\nAutomatically detects and replaces hardcoded usernames with dynamic values from .env or git config.",
      "functions": [
        {
          "name": "main",
          "docstring": "Main execution function.",
          "line_range": [
            234,
            288
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            22,
            24
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_detect_user_info",
          "docstring": "Detect user info from .env, git config, or environment.",
          "line_range": [
            26,
            62
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_from_env",
          "docstring": "Load user info from .env file.",
          "line_range": [
            64,
            86
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_from_git",
          "docstring": "Load user info from git config.",
          "line_range": [
            88,
            120
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_from_environment",
          "docstring": "Load user info from environment variables.",
          "line_range": [
            122,
            128
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_user_info",
          "docstring": "Get detected user information.",
          "line_range": [
            130,
            132
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            138,
            148
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "scan_files",
          "docstring": "Scan for files containing hardcoded usernames.",
          "line_range": [
            150,
            172
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "fix_file",
          "docstring": "Fix hardcoded usernames in a single file.",
          "line_range": [
            174,
            200
          ],
          "parameters": [
            "self",
            "file_path",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "fix_all_files",
          "docstring": "Fix hardcoded usernames in all project files.",
          "line_range": [
            202,
            214
          ],
          "parameters": [
            "self",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "generate_env_template",
          "docstring": "Generate .env template with required variables.",
          "line_range": [
            216,
            231
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "UserInfoDetector",
          "docstring": "Detect user information from various sources.",
          "line_range": [
            19,
            132
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                22,
                24
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_detect_user_info",
              "docstring": "Detect user info from .env, git config, or environment.",
              "line_range": [
                26,
                62
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_from_env",
              "docstring": "Load user info from .env file.",
              "line_range": [
                64,
                86
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_from_git",
              "docstring": "Load user info from git config.",
              "line_range": [
                88,
                120
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_from_environment",
              "docstring": "Load user info from environment variables.",
              "line_range": [
                122,
                128
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_user_info",
              "docstring": "Get detected user information.",
              "line_range": [
                130,
                132
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "HardcodeFixer",
          "docstring": "Fix hardcoded usernames in project files.",
          "line_range": [
            135,
            231
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                138,
                148
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "scan_files",
              "docstring": "Scan for files containing hardcoded usernames.",
              "line_range": [
                150,
                172
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "fix_file",
              "docstring": "Fix hardcoded usernames in a single file.",
              "line_range": [
                174,
                200
              ],
              "parameters": [
                "self",
                "file_path",
                "dry_run"
              ]
            },
            {
              "name": "fix_all_files",
              "docstring": "Fix hardcoded usernames in all project files.",
              "line_range": [
                202,
                214
              ],
              "parameters": [
                "self",
                "dry_run"
              ]
            },
            {
              "name": "generate_env_template",
              "docstring": "Generate .env template with required variables.",
              "line_range": [
                216,
                231
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "UserInfoDetector"
        ],
        "_detect_user_info": [
          "logger.info",
          "self._load_from_environment",
          "env_info.items",
          "env_vars.items",
          "user_info.update",
          "user_info.get",
          "self._load_from_env",
          "self._load_from_git"
        ],
        "_load_from_env": [
          "value.strip",
          "logger.error",
          "line.startswith",
          "line.split",
          "env_vars.get",
          "env_file.exists",
          "open",
          "key.strip",
          "line.strip"
        ],
        "_load_from_git": [
          "subprocess.run",
          "match.group",
          "re.search",
          "logger.error"
        ],
        "_load_from_environment": [],
        "get_user_info": [],
        "scan_files": [
          "any",
          "logger.warning",
          "content.count",
          "str",
          "files_with_hardcode.append",
          "open",
          "f.read"
        ],
        "fix_file": [
          "logger.info",
          "content.replace",
          "f.write",
          "logger.error",
          "content.count",
          "open",
          "f.read"
        ],
        "fix_all_files": [
          "logger.info",
          "self.fix_file",
          "len",
          "self.scan_files",
          "str"
        ],
        "generate_env_template": [],
        "main": [
          "logger.info",
          "f.write",
          "argparse.ArgumentParser",
          "fixer.generate_env_template",
          "len",
          "Path",
          "parser.add_argument",
          "fixer.fix_all_files",
          "HardcodeFixer",
          "print",
          "parser.parse_args",
          "results.items",
          "replacements.items",
          "open",
          "fixer.scan_files"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "argparse",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "subprocess",
        "typing"
      ],
      "hash": null,
      "artifact_id": "4866607b-204e-44c2-a40d-e3c4e521c459"
    },
    {
      "module_id": "scripts.deploy_embedded_files",
      "path": "scripts/deploy_embedded_files.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_json",
          "docstring": "",
          "line_range": [
            931,
            941
          ],
          "parameters": [
            "data",
            "schema",
            "base_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_files",
          "docstring": "",
          "line_range": [
            944,
            950
          ],
          "parameters": [
            "target_dir",
            "backup_root"
          ],
          "decorators": []
        },
        {
          "name": "deploy_embedded_files",
          "docstring": "",
          "line_range": [
            953,
            1007
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            1010,
            1011
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_json": [
          "RefResolver",
          "logger.error",
          "logger.warning",
          "validate"
        ],
        "backup_files": [
          "datetime.now",
          "logger.info",
          "target_dir.exists",
          "shutil.copytree"
        ],
        "deploy_embedded_files": [
          "logger.info",
          "validate_json",
          "f.write",
          "EMBEDDED_FILES.get",
          "logger.error",
          "logger.warning",
          "Path",
          "target_path.exists",
          "backup_files",
          "target_path.open",
          "Path.cwd",
          "json.dump"
        ],
        "main": [
          "deploy_embedded_files"
        ]
      },
      "dependencies": [
        "Path",
        "RefResolver",
        "ValidationError",
        "datetime",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "shutil",
        "validate"
      ],
      "hash": null,
      "artifact_id": "872bc006-814a-4684-8d56-dc62bc378583"
    },
    {
      "module_id": "scripts.validate_epics",
      "path": "scripts/validate_epics.py",
      "category": "core",
      "module_doc": "Epic Data Validator\n\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0445 \u044d\u043f\u0438\u043a\u043e\u0432 \u043f\u0435\u0440\u0435\u0434 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435\u043c GitHub issues",
      "functions": [
        {
          "name": "validate_epic_structure",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u044d\u043f\u0438\u043a\u0430",
          "line_range": [
            12,
            35
          ],
          "parameters": [
            "epic"
          ],
          "decorators": []
        },
        {
          "name": "validate_task_structure",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0437\u0430\u0434\u0430\u0447\u0438",
          "line_range": [
            37,
            53
          ],
          "parameters": [
            "task",
            "epic_id"
          ],
          "decorators": []
        },
        {
          "name": "validate_priorities",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u043e\u0432",
          "line_range": [
            55,
            68
          ],
          "parameters": [
            "data"
          ],
          "decorators": []
        },
        {
          "name": "validate_task_ids",
          "docstring": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c ID \u0437\u0430\u0434\u0430\u0447",
          "line_range": [
            70,
            82
          ],
          "parameters": [
            "data"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438",
          "line_range": [
            84,
            131
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_epic_structure": [
          "errors.append",
          "isinstance"
        ],
        "validate_task_structure": [
          "task.get",
          "errors.append",
          "isinstance"
        ],
        "validate_priorities": [
          "task.get",
          "errors.append",
          "data.get",
          "epic.get"
        ],
        "validate_task_ids": [
          "seen_ids.add",
          "epic.get",
          "set",
          "task.get",
          "data.get",
          "errors.append"
        ],
        "main": [
          "isinstance",
          "epics_file.exists",
          "validate_priorities",
          "sum",
          "all_errors.append",
          "Path",
          "len",
          "epic.get",
          "validate_epic_structure",
          "validate_task_ids",
          "e.get",
          "all_errors.extend",
          "validate_task_structure",
          "print",
          "open",
          "json.load",
          "sys.exit"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "json",
        "pathlib",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "b4593fdb-4693-454e-aeaa-4bc4de9e0af2"
    },
    {
      "module_id": "scripts.validate_json",
      "path": "scripts/validate_json.py",
      "category": "core",
      "module_doc": "JSON Validation Script\nValidates JSON files against their respective schemas.",
      "functions": [
        {
          "name": "load_json",
          "docstring": "Load JSON file with error handling.",
          "line_range": [
            13,
            23
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_json",
          "docstring": "Validate a JSON file against a schema.",
          "line_range": [
            26,
            49
          ],
          "parameters": [
            "file_path",
            "schema_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json": [
          "open",
          "json.load",
          "print"
        ],
        "validate_json": [
          "validator.validate",
          "load_json",
          "Path",
          "str",
          "print",
          "Draft7Validator"
        ]
      },
      "dependencies": [
        "Draft7Validator",
        "Path",
        "ValidationError",
        "json",
        "jsonschema",
        "pathlib",
        "sys",
        "validate"
      ],
      "hash": null,
      "artifact_id": "232e70ae-72f8-4e66-8389-8d78eeee0feb"
    },
    {
      "module_id": "scripts.create_tasks_index",
      "path": "scripts/create_tasks_index.py",
      "category": "core",
      "module_doc": "Tasks Index Creator\nScans all documentation files and creates comprehensive index of tasks, EPICs, TODOs, and other actionable items.",
      "functions": [
        {
          "name": "main",
          "docstring": "Main execution function.",
          "line_range": [
            469,
            515
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            42,
            44
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_init_patterns",
          "docstring": "Initialize regex patterns for task extraction.",
          "line_range": [
            46,
            73
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "extract_from_markdown",
          "docstring": "Extract tasks from markdown file.",
          "line_range": [
            75,
            107
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_extract_status",
          "docstring": "Extract document status.",
          "line_range": [
            109,
            120
          ],
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_priority",
          "docstring": "Extract document priority.",
          "line_range": [
            122,
            135
          ],
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_date",
          "docstring": "Extract document date.",
          "line_range": [
            137,
            142
          ],
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "_extract_epics",
          "docstring": "Extract EPIC items.",
          "line_range": [
            144,
            168
          ],
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_tasks",
          "docstring": "Extract explicit task items.",
          "line_range": [
            170,
            194
          ],
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_todos",
          "docstring": "Extract TODO items.",
          "line_range": [
            196,
            219
          ],
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_phases",
          "docstring": "Extract phase/step items.",
          "line_range": [
            221,
            245
          ],
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_checkboxes",
          "docstring": "Extract checkbox items as tasks.",
          "line_range": [
            247,
            275
          ],
          "parameters": [
            "self",
            "content",
            "file_path",
            "doc_status",
            "doc_priority",
            "doc_date"
          ],
          "decorators": []
        },
        {
          "name": "_extract_context",
          "docstring": "Extract surrounding context for a match.",
          "line_range": [
            277,
            286
          ],
          "parameters": [
            "self",
            "content",
            "start",
            "end",
            "context_lines"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            292,
            294
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "scan_documentation",
          "docstring": "Scan all documentation files for tasks.",
          "line_range": [
            296,
            314
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "generate_index",
          "docstring": "Generate comprehensive task index.",
          "line_range": [
            316,
            367
          ],
          "parameters": [
            "self",
            "tasks"
          ],
          "decorators": []
        },
        {
          "name": "generate_summary_report",
          "docstring": "Generate human-readable summary report.",
          "line_range": [
            369,
            446
          ],
          "parameters": [
            "self",
            "index"
          ],
          "decorators": []
        },
        {
          "name": "save_index",
          "docstring": "Save index and summary to files.",
          "line_range": [
            448,
            466
          ],
          "parameters": [
            "self",
            "index",
            "summary",
            "output_dir"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Task",
          "docstring": "Represents a single task or actionable item.",
          "line_range": [
            21,
            36
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "TaskExtractor",
          "docstring": "Extract tasks from various document formats.",
          "line_range": [
            39,
            286
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                42,
                44
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_init_patterns",
              "docstring": "Initialize regex patterns for task extraction.",
              "line_range": [
                46,
                73
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "extract_from_markdown",
              "docstring": "Extract tasks from markdown file.",
              "line_range": [
                75,
                107
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_extract_status",
              "docstring": "Extract document status.",
              "line_range": [
                109,
                120
              ],
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "_extract_priority",
              "docstring": "Extract document priority.",
              "line_range": [
                122,
                135
              ],
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "_extract_date",
              "docstring": "Extract document date.",
              "line_range": [
                137,
                142
              ],
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "_extract_epics",
              "docstring": "Extract EPIC items.",
              "line_range": [
                144,
                168
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_tasks",
              "docstring": "Extract explicit task items.",
              "line_range": [
                170,
                194
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_todos",
              "docstring": "Extract TODO items.",
              "line_range": [
                196,
                219
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_phases",
              "docstring": "Extract phase/step items.",
              "line_range": [
                221,
                245
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_checkboxes",
              "docstring": "Extract checkbox items as tasks.",
              "line_range": [
                247,
                275
              ],
              "parameters": [
                "self",
                "content",
                "file_path",
                "doc_status",
                "doc_priority",
                "doc_date"
              ]
            },
            {
              "name": "_extract_context",
              "docstring": "Extract surrounding context for a match.",
              "line_range": [
                277,
                286
              ],
              "parameters": [
                "self",
                "content",
                "start",
                "end",
                "context_lines"
              ]
            }
          ],
          "bases": []
        },
        {
          "name": "TaskIndexGenerator",
          "docstring": "Generate comprehensive task index.",
          "line_range": [
            289,
            466
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                292,
                294
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "scan_documentation",
              "docstring": "Scan all documentation files for tasks.",
              "line_range": [
                296,
                314
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "generate_index",
              "docstring": "Generate comprehensive task index.",
              "line_range": [
                316,
                367
              ],
              "parameters": [
                "self",
                "tasks"
              ]
            },
            {
              "name": "generate_summary_report",
              "docstring": "Generate human-readable summary report.",
              "line_range": [
                369,
                446
              ],
              "parameters": [
                "self",
                "index"
              ]
            },
            {
              "name": "save_index",
              "docstring": "Save index and summary to files.",
              "line_range": [
                448,
                466
              ],
              "parameters": [
                "self",
                "index",
                "summary",
                "output_dir"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "TaskExtractor"
        ],
        "_init_patterns": [
          "re.compile"
        ],
        "extract_from_markdown": [
          "self._extract_epics",
          "self._extract_phases",
          "logger.error",
          "self._extract_checkboxes",
          "self._extract_date",
          "self._extract_todos",
          "tasks.extend",
          "self._extract_status",
          "self._extract_tasks",
          "open",
          "f.read",
          "self._extract_priority"
        ],
        "_extract_status": [
          "match.group"
        ],
        "_extract_priority": [
          "match.group"
        ],
        "_extract_date": [
          "datetime.now",
          "match.group"
        ],
        "_extract_epics": [
          "Task",
          "self._extract_context",
          "match.end",
          "match.start",
          "match.group",
          "str",
          "tasks.append"
        ],
        "_extract_tasks": [
          "Task",
          "self._extract_context",
          "match.end",
          "match.start",
          "match.group",
          "str",
          "tasks.append"
        ],
        "_extract_todos": [
          "Task",
          "match.start",
          "match.group",
          "str",
          "tasks.append"
        ],
        "_extract_phases": [
          "Task",
          "self._extract_context",
          "match.end",
          "match.start",
          "match.group",
          "str",
          "tasks.append"
        ],
        "_extract_checkboxes": [
          "Task",
          "any",
          "match.start",
          "match.group",
          "task_title.upper",
          "str",
          "tasks.append"
        ],
        "_extract_context": [
          "len",
          "content.split",
          "min",
          "context.strip",
          "max"
        ],
        "scan_documentation": [
          "logger.info",
          "docs_dir.glob",
          "all_tasks.extend",
          "docs_dir.exists"
        ],
        "generate_index": [
          "by_status.items",
          "len",
          "asdict",
          "by_file.items",
          "datetime.now",
          "by_priority.items",
          "by_category.items"
        ],
        "generate_summary_report": [
          "status.upper",
          "len",
          "Path",
          "sorted",
          "file_categories.items",
          "category.upper",
          "priority.upper"
        ],
        "save_index": [
          "output_path.mkdir",
          "logger.info",
          "f.write",
          "Path",
          "open",
          "json.dump"
        ],
        "main": [
          "logger.info",
          "by_status.get",
          "by_status.items",
          "TaskIndexGenerator",
          "generator.generate_summary_report",
          "argparse.ArgumentParser",
          "len",
          "generator.save_index",
          "sorted",
          "generator.scan_documentation",
          "generator.generate_index",
          "parser.add_argument",
          "by_category.get",
          "print",
          "parser.parse_args",
          "by_category.items"
        ]
      },
      "dependencies": [
        "Dict",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "argparse",
        "asdict",
        "dataclass",
        "dataclasses",
        "datetime",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "typing"
      ],
      "hash": null,
      "artifact_id": "d1a15ea4-dd56-4ac6-b9c1-8f763a6e7555"
    }
  ]
}