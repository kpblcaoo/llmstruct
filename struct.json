{
  "metadata": {
    "project_name": "llmstruct",
    "description": "Utility for generating structured JSON for codebases",
    "version": "2025-05-23T21:48:42.961044Z",
    "authors": [
      {
        "name": "Mikhail Stepanov",
        "github": "kpblcaoo",
        "email": "kpblcaoo@gmail.com"
      }
    ],
    "instructions": [
      "Follow best practices, warn if instructions conflict with them",
      "Preserve functionality, ensure idempotency",
      "Use attached struct.json for context and navigation",
      "Request missing modules or functions if needed",
      "Regenerate JSON for significant changes, track via Git and artifacts",
      "Use internal comments for descriptions, append brief summary"
    ],
    "goals": {
      "goals": [
        "Create universal JSON format for codebase structure (modules, functions, classes, calls, metadata)",
        "Ensure extensibility for new languages and entity types",
        "Develop modular, plugin-based parsers for new languages",
        "Maintain an open, RFC-style documented format",
        "Integrate with LLMs by generating and attaching JSON structure to queries"
      ]
    },
    "stats": {
      "modules_count": 30,
      "functions_count": 105,
      "classes_count": 6,
      "call_edges_count": 448
    },
    "artifact_id": "2670123c-7bb0-4538-b97d-6a23a33ebca6",
    "summary": "Structured JSON for llmstruct codebase",
    "tags": [
      "codebase",
      "automation"
    ],
    "folder_structure": [
      {
        "path": ".",
        "type": "directory",
        "artifact_id": "96910852-6725-48b1-870e-8ca209ab9554",
        "metadata": {}
      },
      {
        "path": ".github",
        "type": "directory",
        "artifact_id": "ea163073-2d9b-4a0d-bc69-5d0ac2317ef0",
        "metadata": {}
      },
      {
        "path": ".github/workflows",
        "type": "directory",
        "artifact_id": "12762d5f-e778-4193-a6cc-b573ba0196da",
        "metadata": {}
      },
      {
        "path": "bak",
        "type": "directory",
        "artifact_id": "091fc399-e294-4757-87b8-129c6ca7fbe8",
        "metadata": {}
      },
      {
        "path": "collector.py",
        "type": "file",
        "artifact_id": "659f81f5-050c-4cbf-bd58-be31b425d574",
        "metadata": {}
      },
      {
        "path": "data",
        "type": "directory",
        "artifact_id": "1284c208-0e7b-46ed-8ba3-2fac4be0f130",
        "metadata": {}
      },
      {
        "path": "data/artifacts",
        "type": "directory",
        "artifact_id": "a6c82fcd-70c8-471a-ae91-b7d99fef7e1c",
        "metadata": {}
      },
      {
        "path": "docs",
        "type": "directory",
        "artifact_id": "d40da7d8-e63a-42b7-8667-a2584eba7752",
        "metadata": {}
      },
      {
        "path": "docs/examples",
        "type": "directory",
        "artifact_id": "93a2be48-10bf-42e9-bbec-101aa2770110",
        "metadata": {}
      },
      {
        "path": "docs/internal",
        "type": "directory",
        "artifact_id": "99e38f87-72a3-48c9-8d66-e84241e7d0a0",
        "metadata": {}
      },
      {
        "path": "docs/internal/ru",
        "type": "directory",
        "artifact_id": "c7474970-9a2e-4fb4-b2a1-0a711063e8f2",
        "metadata": {}
      },
      {
        "path": "docs/ru",
        "type": "directory",
        "artifact_id": "6f97e95c-3b65-4c63-b4be-e10918dd4fdc",
        "metadata": {}
      },
      {
        "path": "docs/ru/examples",
        "type": "directory",
        "artifact_id": "c558e9c7-a52f-4046-ae86-7e5017307431",
        "metadata": {}
      },
      {
        "path": "examples",
        "type": "directory",
        "artifact_id": "7d5aa3b6-903c-4335-b277-a6474a9a9aba",
        "metadata": {}
      },
      {
        "path": "examples/python_project_main.py",
        "type": "file",
        "artifact_id": "7b80ffe4-720c-417c-9a17-f357ad10ff25",
        "metadata": {}
      },
      {
        "path": "examples/python_project_utils.py",
        "type": "file",
        "artifact_id": "5a0318ef-199b-4e8b-bff1-3433e1c72756",
        "metadata": {}
      },
      {
        "path": "internal",
        "type": "directory",
        "artifact_id": "108495b1-71d1-46ba-833f-4f7d02d7d489",
        "metadata": {}
      },
      {
        "path": "schema",
        "type": "directory",
        "artifact_id": "b8f53020-2928-4e1e-8e08-1dba69067826",
        "metadata": {}
      },
      {
        "path": "schema/common",
        "type": "directory",
        "artifact_id": "969cdf2f-7391-464c-a65d-5adba9519ad5",
        "metadata": {}
      },
      {
        "path": "schema/plugins",
        "type": "directory",
        "artifact_id": "43280908-6d26-4f3c-a453-e5ece8a864f9",
        "metadata": {}
      },
      {
        "path": "scripts",
        "type": "directory",
        "artifact_id": "c46030e3-ad1f-4775-925e-d4c722dea47c",
        "metadata": {}
      },
      {
        "path": "scripts/collector.py",
        "type": "file",
        "artifact_id": "6e10be01-08b5-450d-908f-9a011b00400f",
        "metadata": {}
      },
      {
        "path": "scripts/deploy_embedded_files.py",
        "type": "file",
        "artifact_id": "d6a06dab-d261-4642-a54c-d1e7c5c5746e",
        "metadata": {}
      },
      {
        "path": "scripts/validate_refs.py",
        "type": "file",
        "artifact_id": "b35f61e4-4f05-468a-bf9b-b18065cf89e4",
        "metadata": {}
      },
      {
        "path": "src",
        "type": "directory",
        "artifact_id": "537b447e-37e1-4ed1-9308-dafb710cd5e0",
        "metadata": {}
      },
      {
        "path": "src/llmstruct",
        "type": "directory",
        "artifact_id": "9a1e39d4-e067-4fe7-8d71-b87a0a98c55b",
        "metadata": {}
      },
      {
        "path": "src/llmstruct.egg-info",
        "type": "directory",
        "artifact_id": "1f29b87b-d6da-475b-9c17-0583ffa81e37",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/__init__.py",
        "type": "file",
        "artifact_id": "9fc3169f-734b-40d5-b274-14dc29e7ac8c",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/__main__.py",
        "type": "file",
        "artifact_id": "1c5adf4d-44b5-4d62-8cfe-9852c172f7ea",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cache.py",
        "type": "file",
        "artifact_id": "63f23ab8-7719-4959-aaae-c846ba948836",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli.py",
        "type": "file",
        "artifact_id": "c3ed6e85-4757-478b-afef-cf6b87a6c4cd",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators",
        "type": "directory",
        "artifact_id": "8ed9c267-c7fa-487c-b0dd-b7a8461fd4d1",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators/__init__.py",
        "type": "file",
        "artifact_id": "4a706dcb-a94e-4c5b-bfe0-1f269f01fa15",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators/json_generator.py",
        "type": "file",
        "artifact_id": "e78de5b2-a055-4c04-b77c-35bf7f3dfdec",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/grok.py",
        "type": "file",
        "artifact_id": "63564499-c4ed-497a-a2bd-da1857fdc334",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/json_selector.py",
        "type": "file",
        "artifact_id": "661f9a50-cd33-4296-9c45-75b03a765c47",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/llm_client.py",
        "type": "file",
        "artifact_id": "a870cdfc-6116-42cb-8dbf-e29629273360",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers",
        "type": "directory",
        "artifact_id": "a76afb82-3afc-4826-b7d0-22dc80818b92",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/__init__.py",
        "type": "file",
        "artifact_id": "e230b8f1-3881-4fdd-a4f2-103212aa54a4",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/javascript_parser.py",
        "type": "file",
        "artifact_id": "a685bed7-d19e-4846-acaf-7581e672492d",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/python_parser.py",
        "type": "file",
        "artifact_id": "2a06a4ad-b6d2-4e90-aedb-fa5c6870a537",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/self_run.py",
        "type": "file",
        "artifact_id": "e6369ae1-1850-4024-a857-19a6d1b69e1d",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/templates",
        "type": "directory",
        "artifact_id": "9f2dd7e8-5bc7-4c5a-8832-f9a400483da0",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/templates/__init__.py",
        "type": "file",
        "artifact_id": "e8c62a15-7667-4090-979f-ba42e419bbfc",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/validators",
        "type": "directory",
        "artifact_id": "75579aae-a5c1-4982-889b-9ea2424c1a4e",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/validators/__init__.py",
        "type": "file",
        "artifact_id": "dc0b18ce-e9e3-43be-a9d9-b5c43b32f629",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/validators/json_validator.py",
        "type": "file",
        "artifact_id": "4bdd6f99-c6b2-4cde-a20b-7946075bf191",
        "metadata": {}
      },
      {
        "path": "test_efficiency.py",
        "type": "file",
        "artifact_id": "e5c7dd3f-0785-4f2b-8b1b-e805553fd2e0",
        "metadata": {}
      },
      {
        "path": "tests",
        "type": "directory",
        "artifact_id": "06962e3d-493b-4d55-887c-a8aae606ed66",
        "metadata": {}
      },
      {
        "path": "tmp",
        "type": "directory",
        "artifact_id": "61ba6be5-cdca-4c04-8a7c-4056dc8d922a",
        "metadata": {}
      },
      {
        "path": "verify_llm_response.py",
        "type": "file",
        "artifact_id": "e80bce17-18f4-4f56-82b9-8bfdc762a220",
        "metadata": {}
      }
    ]
  },
  "toc": [
    {
      "module_id": "test_efficiency",
      "path": "test_efficiency.py",
      "category": "test",
      "functions": 12,
      "classes": 0,
      "summary": "",
      "artifact_id": "e1a29354-aea7-426f-a21f-602d67b468c3"
    },
    {
      "module_id": "collector",
      "path": "collector.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "ac600783-9226-4197-937a-1d88c1c589e2"
    },
    {
      "module_id": "verify_llm_response",
      "path": "verify_llm_response.py",
      "category": "core",
      "functions": 6,
      "classes": 0,
      "summary": "",
      "artifact_id": "9430c32f-30b5-4386-8e07-f2ea116fb5fe"
    },
    {
      "module_id": "examples.python_project_utils",
      "path": "examples/python_project_utils.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "Utility functions for the sample project.",
      "artifact_id": "ae328e78-4142-4000-afcf-8d75582503af"
    },
    {
      "module_id": "examples.python_project_main",
      "path": "examples/python_project_main.py",
      "category": "core",
      "functions": 2,
      "classes": 1,
      "summary": "Main module for the sample project.",
      "artifact_id": "623db842-4072-49f8-876d-9de76b494859"
    },
    {
      "module_id": "src.llmstruct.grok",
      "path": "src/llmstruct/grok.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "",
      "artifact_id": "c96a8674-88ed-40c8-9f7b-eaace0b8258a"
    },
    {
      "module_id": "src.llmstruct.__init__",
      "path": "src/llmstruct/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "3390faf2-f15a-4746-9caf-504b3dd0b0a8"
    },
    {
      "module_id": "src.llmstruct.__main__",
      "path": "src/llmstruct/__main__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "89928b34-c538-4b6e-a335-1b5c67877392"
    },
    {
      "module_id": "src.llmstruct.llm_client",
      "path": "src/llmstruct/llm_client.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "3723664b-cd2e-414f-b982-1dd313d89b0f"
    },
    {
      "module_id": "src.llmstruct.cache",
      "path": "src/llmstruct/cache.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "7e322eec-00dc-4609-86dc-67b5c864cb1d"
    },
    {
      "module_id": "src.llmstruct.self_run",
      "path": "src/llmstruct/self_run.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "83cd3be9-9c24-488d-9776-8e316a73c441"
    },
    {
      "module_id": "src.llmstruct.json_selector",
      "path": "src/llmstruct/json_selector.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "f4509a02-5852-4595-adab-8412ac0167ab"
    },
    {
      "module_id": "src.llmstruct.cli",
      "path": "src/llmstruct/cli.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "",
      "artifact_id": "3244109a-1ec2-4973-b0ab-7d6c9e1dda7a"
    },
    {
      "module_id": "src.llmstruct.parsers.__init__",
      "path": "src/llmstruct/parsers/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "artifact_id": "919bd17c-c71b-45af-b427-ff40facf14a6"
    },
    {
      "module_id": "src.llmstruct.parsers.javascript_parser",
      "path": "src/llmstruct/parsers/javascript_parser.py",
      "category": "core",
      "functions": 5,
      "classes": 1,
      "summary": "",
      "artifact_id": "61544120-6f6f-4f5c-b11d-40d79c53db31"
    },
    {
      "module_id": "src.llmstruct.parsers.python_parser",
      "path": "src/llmstruct/parsers/python_parser.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "",
      "artifact_id": "d8443ba9-37f3-4c3d-bf53-ff02f0558839"
    },
    {
      "module_id": "src.llmstruct.templates.__init__",
      "path": "src/llmstruct/templates/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Templates for LLM prompts used in LLMStruct integration.",
      "artifact_id": "6980f741-0401-41ac-a452-6fac92cdac9b"
    },
    {
      "module_id": "src.llmstruct.validators.__init__",
      "path": "src/llmstruct/validators/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "artifact_id": "637f6730-0853-4679-a67d-26f6f6019ebb"
    },
    {
      "module_id": "src.llmstruct.validators.json_validator",
      "path": "src/llmstruct/validators/json_validator.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "aea82ecc-2193-41a9-9edd-2166033021db"
    },
    {
      "module_id": "src.llmstruct.generators.json_generator",
      "path": "src/llmstruct/generators/json_generator.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "05b6187d-7dd5-44e2-a9df-02ccbd571b93"
    },
    {
      "module_id": "src.llmstruct.generators.__init__",
      "path": "src/llmstruct/generators/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "artifact_id": "fe4fd0ef-6cb2-456d-889d-a9e8a4c520c7"
    },
    {
      "module_id": "bak.20250522_102827.scripts.collector",
      "path": "bak/20250522_102827/scripts/collector.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "4b80078d-49d0-4cbc-ac39-8e71a1e76777"
    },
    {
      "module_id": "bak.20250522_102827.scripts.validate_refs",
      "path": "bak/20250522_102827/scripts/validate_refs.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "b9a0d618-61a8-475c-8443-b8df0ec294a5"
    },
    {
      "module_id": "bak.20250522_102827.scripts.deploy_embedded_files",
      "path": "bak/20250522_102827/scripts/deploy_embedded_files.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "6bc90a63-7a92-4196-a7e6-3d9356222a6b"
    },
    {
      "module_id": "bak.20250522_131121.scripts.collector",
      "path": "bak/20250522_131121/scripts/collector.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "2707f682-b686-42cd-be96-f2a2b0bf49b2"
    },
    {
      "module_id": "bak.20250522_131121.scripts.validate_refs",
      "path": "bak/20250522_131121/scripts/validate_refs.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "325488d3-eb79-41cf-ac60-167bf20db76a"
    },
    {
      "module_id": "bak.20250522_131121.scripts.deploy_embedded_files",
      "path": "bak/20250522_131121/scripts/deploy_embedded_files.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "9c3541d4-42c5-4ba1-acd2-4f0175e45c00"
    },
    {
      "module_id": "scripts.collector",
      "path": "scripts/collector.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "8477689f-ce68-485a-b737-1369c566e82c"
    },
    {
      "module_id": "scripts.validate_refs",
      "path": "scripts/validate_refs.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "d82c87d0-37b4-4c09-be15-66ac2b4481b4"
    },
    {
      "module_id": "scripts.deploy_embedded_files",
      "path": "scripts/deploy_embedded_files.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "fa8cbcb4-430e-472d-a4c7-be5fabb1ff54"
    }
  ],
  "modules": [
    {
      "module_id": "test_efficiency",
      "path": "test_efficiency.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "get_system_metrics",
          "docstring": "",
          "line_range": [
            14,
            18
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "is_local_address",
          "docstring": "",
          "line_range": [
            20,
            26
          ],
          "parameters": [
            "url"
          ],
          "decorators": []
        },
        {
          "name": "setup_proxy",
          "docstring": "",
          "line_range": [
            28,
            31
          ],
          "parameters": [
            "proxy_url"
          ],
          "decorators": []
        },
        {
          "name": "check_ollama",
          "docstring": "",
          "line_range": [
            33,
            38
          ],
          "parameters": [
            "api_url"
          ],
          "decorators": []
        },
        {
          "name": "optimize_prompt",
          "docstring": "",
          "line_range": [
            40,
            45
          ],
          "parameters": [
            "struct_data",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "run_llm_request",
          "docstring": "",
          "line_range": [
            47,
            71
          ],
          "parameters": [
            "api_url",
            "payload",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "check_llmstruct_cli",
          "docstring": "",
          "line_range": [
            73,
            74
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_with_llmstruct",
          "docstring": "",
          "line_range": [
            76,
            102
          ],
          "parameters": [
            "api_url",
            "project_path",
            "proxy",
            "use_placeholder"
          ],
          "decorators": []
        },
        {
          "name": "test_without_llmstruct",
          "docstring": "",
          "line_range": [
            104,
            111
          ],
          "parameters": [
            "api_url",
            "project_path",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "test_with_grok",
          "docstring": "",
          "line_range": [
            113,
            135
          ],
          "parameters": [
            "api_key",
            "project_path",
            "proxy",
            "use_placeholder"
          ],
          "decorators": []
        },
        {
          "name": "evaluate_accuracy",
          "docstring": "",
          "line_range": [
            137,
            139
          ],
          "parameters": [
            "response_text",
            "expected"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            141,
            188
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_system_metrics": [
          "psutil.virtual_memory",
          "psutil.cpu_percent"
        ],
        "is_local_address": [
          "urlparse",
          "ipaddress.ip_address"
        ],
        "setup_proxy": [
          "os.getenv"
        ],
        "check_ollama": [
          "response.json",
          "str",
          "requests.get",
          "api_url.replace"
        ],
        "optimize_prompt": [
          "len",
          "struct_data.split",
          "print"
        ],
        "run_llm_request": [
          "session.post",
          "get_system_metrics",
          "print",
          "is_local_address",
          "requests.Session",
          "len",
          "response.json",
          "time.perf_counter",
          "response.raise_for_status",
          "type"
        ],
        "check_llmstruct_cli": [
          "shutil.which"
        ],
        "test_with_llmstruct": [
          "optimize_prompt",
          "run_llm_request",
          "json.dump",
          "Path",
          "check_llmstruct_cli",
          "subprocess.run",
          "str",
          "FileNotFoundError",
          "open",
          "target_path.exists",
          "f.read"
        ],
        "test_without_llmstruct": [
          "optimize_prompt",
          "run_llm_request",
          "Path",
          "open",
          "f.read"
        ],
        "test_with_grok": [
          "optimize_prompt",
          "test_grok",
          "json.dump",
          "Path",
          "FileNotFoundError",
          "open",
          "target_path.exists",
          "f.read"
        ],
        "evaluate_accuracy": [
          "response_text.lower",
          "sum",
          "len"
        ],
        "main": [
          "evaluate_accuracy",
          "parser.parse_args",
          "test_without_llmstruct",
          "test_with_grok",
          "check_ollama",
          "parser.add_argument",
          "json.dump",
          "print",
          "check_llmstruct_cli",
          "test_with_llmstruct",
          "str",
          "open",
          "range",
          "setup_proxy",
          "argparse.ArgumentParser"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "ipaddress",
        "json",
        "os",
        "pathlib",
        "psutil",
        "requests",
        "shutil",
        "src.llmstruct.grok",
        "subprocess",
        "test_grok",
        "time",
        "urllib.parse",
        "urlparse"
      ],
      "hash": null,
      "artifact_id": "e1a29354-aea7-426f-a21f-602d67b468c3"
    },
    {
      "module_id": "collector",
      "path": "collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "",
          "line_range": [
            10,
            14
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "is_text_file",
          "docstring": "Check if file is likely a text file based on extension.",
          "line_range": [
            16,
            19
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "collect_project",
          "docstring": "",
          "line_range": [
            21,
            44
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "gitignore_path.exists",
          "gitignore_parser.parse_gitignore",
          "Path"
        ],
        "is_text_file": [],
        "collect_project": [
          "logger.info",
          "logger.warning",
          "json.dump",
          "file_path.is_file",
          "Path",
          "gitignore",
          "len",
          "is_text_file",
          "root_dir.rglob",
          "logger.error",
          "load_gitignore",
          "open",
          "str",
          "f.read",
          "any",
          "doc_files.items"
        ]
      },
      "dependencies": [
        "Path",
        "gitignore_parser",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "ac600783-9226-4197-937a-1d88c1c589e2"
    },
    {
      "module_id": "verify_llm_response",
      "path": "verify_llm_response.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_json_file",
          "docstring": "Load a JSON file and return its contents.",
          "line_range": [
            12,
            22
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "verify_response_with_struct",
          "docstring": "Verify llm_response.json against struct.json.",
          "line_range": [
            24,
            58
          ],
          "parameters": [
            "response_text",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "verify_response_without_struct",
          "docstring": "Verify llm_response.json based on LLMstruct principles.",
          "line_range": [
            60,
            90
          ],
          "parameters": [
            "response_text"
          ],
          "decorators": []
        },
        {
          "name": "generate_metrics",
          "docstring": "Generate metrics for the response per EXT-004.",
          "line_range": [
            92,
            120
          ],
          "parameters": [
            "response_data",
            "server_log"
          ],
          "decorators": []
        },
        {
          "name": "update_tasks_json",
          "docstring": "Append a new task to tasks.json.",
          "line_range": [
            122,
            129
          ],
          "parameters": [
            "tasks_file",
            "new_task"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            131,
            193
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json_file": [
          "open",
          "logging.error",
          "json.load"
        ],
        "verify_response_with_struct": [
          "expected_goals.issubset",
          "struct_data.get",
          "logging.error",
          "e.startswith",
          "set",
          "expected_files.issubset",
          "re.findall",
          "expected_extensions.issubset",
          "logging.info"
        ],
        "verify_response_without_struct": [
          "principle.lower",
          "expected_goals.issubset",
          "logging.error",
          "expected_files.issubset",
          "response_text.lower",
          "set",
          "re.findall",
          "expected_extensions.issubset",
          "logging.info"
        ],
        "generate_metrics": [
          "datetime.utcnow",
          "server_log.get",
          "len",
          "re.findall",
          "response_text.split"
        ],
        "update_tasks_json": [
          "tasks.get",
          "json.dump",
          "load_json_file",
          "open",
          "logging.info"
        ],
        "main": [
          "verify_response_with_struct",
          "parser.add_argument",
          "json.dump",
          "verify_response_without_struct",
          "load_json_file",
          "open",
          "generate_metrics",
          "parser.parse_args",
          "argparse.ArgumentParser",
          "logging.info",
          "update_tasks_json"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "argparse",
        "datetime",
        "json",
        "logging",
        "os",
        "re",
        "typing"
      ],
      "hash": null,
      "artifact_id": "9430c32f-30b5-4386-8e07-f2ea116fb5fe"
    },
    {
      "module_id": "examples.python_project_utils",
      "path": "examples/python_project_utils.py",
      "category": "core",
      "module_doc": "Utility functions for the sample project.",
      "functions": [
        {
          "name": "helper",
          "docstring": "Help the main function.",
          "line_range": [
            5,
            7
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "log",
          "docstring": "Log a message.",
          "line_range": [
            9,
            11
          ],
          "parameters": [
            "message"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "helper": [
          "log"
        ],
        "log": [
          "logging.info"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": null,
      "artifact_id": "ae328e78-4142-4000-afcf-8d75582503af"
    },
    {
      "module_id": "examples.python_project_main",
      "path": "examples/python_project_main.py",
      "category": "core",
      "module_doc": "Main module for the sample project.",
      "functions": [
        {
          "name": "main",
          "docstring": "Run the program.",
          "line_range": [
            5,
            8
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "Execute the app.",
          "line_range": [
            12,
            14
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "App",
          "docstring": "Application class.",
          "line_range": [
            10,
            14
          ],
          "methods": [
            {
              "name": "run",
              "docstring": "Execute the app.",
              "line_range": [
                12,
                14
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "main": [
          "utils.helper",
          "print"
        ],
        "run": [
          "utils.log"
        ]
      },
      "dependencies": [
        "utils"
      ],
      "hash": null,
      "artifact_id": "623db842-4072-49f8-876d-9de76b494859"
    },
    {
      "module_id": "src.llmstruct.grok",
      "path": "src/llmstruct/grok.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "test_grok",
          "docstring": "",
          "line_range": [
            22,
            28
          ],
          "parameters": [
            "api_key",
            "prompt",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            5,
            10
          ],
          "parameters": [
            "self",
            "api_key",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "generate",
          "docstring": "",
          "line_range": [
            12,
            20
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GrokClient",
          "docstring": "",
          "line_range": [
            4,
            20
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                5,
                10
              ],
              "parameters": [
                "self",
                "api_key",
                "proxy"
              ]
            },
            {
              "name": "generate",
              "docstring": "",
              "line_range": [
                12,
                20
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "requests.Session"
        ],
        "generate": [
          "len",
          "response.json",
          "response.raise_for_status",
          "prompt.split"
        ],
        "test_grok": [
          "client.generate",
          "time.perf_counter",
          "GrokClient"
        ]
      },
      "dependencies": [
        "os",
        "requests"
      ],
      "hash": null,
      "artifact_id": "c96a8674-88ed-40c8-9f7b-eaace0b8258a"
    },
    {
      "module_id": "src.llmstruct.__init__",
      "path": "src/llmstruct/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "LLMClient",
        "llm_client"
      ],
      "hash": null,
      "artifact_id": "3390faf2-f15a-4746-9caf-504b3dd0b0a8"
    },
    {
      "module_id": "src.llmstruct.__main__",
      "path": "src/llmstruct/__main__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "LLMClient",
        "llm_client",
        "llmstruct.cli",
        "main"
      ],
      "hash": null,
      "artifact_id": "89928b34-c538-4b6e-a335-1b5c67877392"
    },
    {
      "module_id": "src.llmstruct.llm_client",
      "path": "src/llmstruct/llm_client.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize LLMClient with optional Ollama host.",
          "line_range": [
            30,
            36
          ],
          "parameters": [
            "self",
            "ollama_host"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt, context, and optional model.",
          "line_range": [
            38,
            86
          ],
          "parameters": [
            "self",
            "prompt",
            "context_path",
            "mode",
            "model",
            "artifact_ids"
          ],
          "decorators": []
        },
        {
          "name": "_query_grok",
          "docstring": "Query Grok API.",
          "line_range": [
            88,
            111
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_anthropic",
          "docstring": "Query Anthropic API.",
          "line_range": [
            113,
            137
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_ollama",
          "docstring": "Query Ollama API with specified model.",
          "line_range": [
            139,
            156
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "_query_hybrid",
          "docstring": "Query multiple LLMs and combine results.",
          "line_range": [
            158,
            168
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMClient",
          "docstring": "",
          "line_range": [
            29,
            168
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize LLMClient with optional Ollama host.",
              "line_range": [
                30,
                36
              ],
              "parameters": [
                "self",
                "ollama_host"
              ]
            },
            {
              "name": "query",
              "docstring": "Query LLMs with prompt, context, and optional model.",
              "line_range": [
                38,
                86
              ],
              "parameters": [
                "self",
                "prompt",
                "context_path",
                "mode",
                "model",
                "artifact_ids"
              ]
            },
            {
              "name": "_query_grok",
              "docstring": "Query Grok API.",
              "line_range": [
                88,
                111
              ],
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_anthropic",
              "docstring": "Query Anthropic API.",
              "line_range": [
                113,
                137
              ],
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_ollama",
              "docstring": "Query Ollama API with specified model.",
              "line_range": [
                139,
                156
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            },
            {
              "name": "_query_hybrid",
              "docstring": "Query multiple LLMs and combine results.",
              "line_range": [
                158,
                168
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "os.getenv",
          "logging.info",
          "int"
        ],
        "query": [
          "asyncio.sleep",
          "self._query_anthropic",
          "self._query_grok",
          "logging.warning",
          "logging.error",
          "Path",
          "json.dumps",
          "json.load",
          "self._query_ollama",
          "self._query_hybrid",
          "range",
          "logging.info"
        ],
        "_query_grok": [
          "result.get",
          "session.post",
          "logging.error",
          "aiohttp.ClientSession",
          "response.json",
          "logging.info"
        ],
        "_query_anthropic": [
          "result.get",
          "session.post",
          "logging.error",
          "aiohttp.ClientSession",
          "response.json",
          "logging.info"
        ],
        "_query_ollama": [
          "result.get",
          "session.post",
          "logging.error",
          "aiohttp.ClientSession",
          "response.json",
          "logging.debug",
          "logging.info"
        ],
        "_query_hybrid": [
          "self._query_anthropic",
          "self._query_grok",
          "asyncio.gather",
          "isinstance",
          "self._query_ollama",
          "len",
          "logging.info"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "aiohttp",
        "asyncio",
        "dotenv",
        "json",
        "load_dotenv",
        "logging",
        "os",
        "pathlib",
        "requests",
        "typing",
        "urljoin",
        "urllib.parse"
      ],
      "hash": null,
      "artifact_id": "3723664b-cd2e-414f-b982-1dd313d89b0f"
    },
    {
      "module_id": "src.llmstruct.cache",
      "path": "src/llmstruct/cache.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize SQLite cache for JSON files.",
          "line_range": [
            18,
            22
          ],
          "parameters": [
            "self",
            "db_path"
          ],
          "decorators": []
        },
        {
          "name": "create_tables",
          "docstring": "Create tables for metadata and file paths.",
          "line_range": [
            24,
            42
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cache_json",
          "docstring": "Cache JSON metadata and store full file path.",
          "line_range": [
            44,
            64
          ],
          "parameters": [
            "self",
            "json_path",
            "artifact_id",
            "summary",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "get_metadata",
          "docstring": "Retrieve metadata by artifact_id.",
          "line_range": [
            66,
            79
          ],
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "get_full_json",
          "docstring": "Load full JSON by artifact_id.",
          "line_range": [
            81,
            94
          ],
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Close database connection.",
          "line_range": [
            96,
            98
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JSONCache",
          "docstring": "",
          "line_range": [
            17,
            98
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize SQLite cache for JSON files.",
              "line_range": [
                18,
                22
              ],
              "parameters": [
                "self",
                "db_path"
              ]
            },
            {
              "name": "create_tables",
              "docstring": "Create tables for metadata and file paths.",
              "line_range": [
                24,
                42
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cache_json",
              "docstring": "Cache JSON metadata and store full file path.",
              "line_range": [
                44,
                64
              ],
              "parameters": [
                "self",
                "json_path",
                "artifact_id",
                "summary",
                "tags"
              ]
            },
            {
              "name": "get_metadata",
              "docstring": "Retrieve metadata by artifact_id.",
              "line_range": [
                66,
                79
              ],
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "get_full_json",
              "docstring": "Load full JSON by artifact_id.",
              "line_range": [
                81,
                94
              ],
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "close",
              "docstring": "Close database connection.",
              "line_range": [
                96,
                98
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "sqlite3.connect",
          "self.create_tables"
        ],
        "create_tables": [],
        "cache_json": [
          "json_file.exists",
          "logging.error",
          "Path",
          "json.dumps",
          "content.encode",
          "hashlib.sha256",
          "open",
          "str",
          "f.read",
          "logging.info"
        ],
        "get_metadata": [
          "cursor.fetchone",
          "json.loads"
        ],
        "get_full_json": [
          "cursor.fetchone",
          "open",
          "logging.error",
          "json.load"
        ],
        "close": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "hashlib",
        "json",
        "logging",
        "pathlib",
        "sqlite3",
        "typing"
      ],
      "hash": null,
      "artifact_id": "7e322eec-00dc-4609-86dc-67b5c864cb1d"
    },
    {
      "module_id": "src.llmstruct.self_run",
      "path": "src/llmstruct/self_run.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_struct",
          "docstring": "Filter struct.json or init.json based on prompt keywords.",
          "line_range": [
            17,
            35
          ],
          "parameters": [
            "struct",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "Attach filtered JSON to LLM prompt, using cache if available.",
          "line_range": [
            37,
            74
          ],
          "parameters": [
            "context_path",
            "prompt",
            "cache"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_struct": [
          "module.get",
          "filter_json",
          "prompt.lower",
          "struct.get",
          "any"
        ],
        "attach_to_llm_request": [
          "select_json",
          "logging.error",
          "Path",
          "json.dumps",
          "filter_json",
          "cache.get_full_json",
          "prompt.lower",
          "filter_struct",
          "cache.cache_json",
          "context_file.exists",
          "logging.info",
          "cache.get_metadata"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "cache",
        "filter_json",
        "json",
        "json_selector",
        "logging",
        "pathlib",
        "select_json",
        "typing"
      ],
      "hash": null,
      "artifact_id": "83cd3be9-9c24-488d-9776-8e316a73c441"
    },
    {
      "module_id": "src.llmstruct.json_selector",
      "path": "src/llmstruct/json_selector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_json",
          "docstring": "Filter JSON data by key-value pair and select fields.",
          "line_range": [
            17,
            29
          ],
          "parameters": [
            "data",
            "filter_key",
            "filter_value",
            "fields"
          ],
          "decorators": []
        },
        {
          "name": "select_json",
          "docstring": "Load and filter JSON file, optionally parsing partially.",
          "line_range": [
            31,
            72
          ],
          "parameters": [
            "json_path",
            "filter_key",
            "filter_value",
            "fields",
            "partial"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_json": [
          "data.get",
          "filtered.append",
          "item.get",
          "isinstance"
        ],
        "select_json": [
          "prefix.startswith",
          "filtered.append",
          "json_file.exists",
          "logging.error",
          "Path",
          "ijson.parse",
          "json.load",
          "f.seek",
          "filter_json",
          "open",
          "current_item.get",
          "path.append"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "ijson",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "f4509a02-5852-4595-adab-8412ac0167ab"
    },
    {
      "module_id": "src.llmstruct.cli",
      "path": "src/llmstruct/cli.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": [
            26,
            36
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from llmstruct.toml or return empty dict.",
          "line_range": [
            38,
            47
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": [
            49,
            58
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default /tmp) and return the path.",
          "line_range": [
            60,
            74
          ],
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": [
            76,
            83
          ],
          "parameters": [
            "response"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": [
            85,
            195
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": [
            197,
            237
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": [
            239,
            260
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": [
            262,
            264
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": [
            266,
            268
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": [
            270,
            272
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": [
            274,
            334
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "gitignore_path.exists",
          "line.startswith",
          "Path",
          "gitignore_path.open",
          "logging.error",
          "line.strip"
        ],
        "load_config": [
          "config_path.open",
          "logging.error",
          "Path",
          "config_path.exists",
          "toml.load"
        ],
        "read_file_content": [
          "path.open",
          "logging.error",
          "Path",
          "path.is_file",
          "f.read"
        ],
        "write_to_file": [
          "f.write",
          "logging.warning",
          "logging.error",
          "Path",
          "str",
          "base_path.mkdir",
          "file_path.exists",
          "file_path.open",
          "logging.info"
        ],
        "parse_files_from_response": [
          "filename.strip",
          "files.append",
          "re.findall",
          "content.strip"
        ],
        "interactive": [
          "input",
          "re.search",
          "get_folder_structure",
          "Path",
          "write_match.group",
          "write_dir.startswith",
          "attach_to_llm_request",
          "client.query",
          "parse_files_from_response",
          "parse",
          "json.dumps",
          "write_to_file",
          "read_file_content",
          "JSONCache",
          "scan_match.group",
          "user_input.lower",
          "files_to_write.append",
          "cache.close",
          "logging.warning",
          "print",
          "logging.error",
          "os.listdir",
          "LLMClient",
          "load_gitignore",
          "sorted"
        ],
        "parse": [
          "logging.warning",
          "config.get",
          "json.dump",
          "logging.error",
          "Path",
          "cache.cache_json",
          "load_config",
          "cache.close",
          "JSONCache",
          "load_gitignore",
          "generate_json",
          "logging.info"
        ],
        "query": [
          "json.dump",
          "logging.error",
          "Path",
          "client.query",
          "cache.close",
          "LLMClient",
          "JSONCache",
          "logging.info"
        ],
        "context": [
          "logging.warning"
        ],
        "dogfood": [
          "logging.warning"
        ],
        "review": [
          "logging.warning"
        ],
        "main": [
          "parser.parse_args",
          "interactive_parser.add_argument",
          "dogfood",
          "context",
          "parser.add_subparsers",
          "review_parser.add_argument",
          "parse_parser.add_argument",
          "interactive",
          "review",
          "context_parser.add_argument",
          "query_parser.add_argument",
          "parse",
          "asyncio.run",
          "subparsers.add_parser",
          "query",
          "argparse.ArgumentParser",
          "dogfood_parser.add_argument"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "generate_json",
        "get_folder_structure",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "logging",
        "os",
        "pathlib",
        "re",
        "toml",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "3244109a-1ec2-4973-b0ab-7d6c9e1dda7a"
    },
    {
      "module_id": "src.llmstruct.parsers.__init__",
      "path": "src/llmstruct/parsers/__init__.py",
      "category": "cli",
      "module_doc": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "JavaScriptParser",
        "analyze_module",
        "javascript_parser",
        "python_parser"
      ],
      "hash": null,
      "artifact_id": "919bd17c-c71b-45af-b427-ff40facf14a6"
    },
    {
      "module_id": "src.llmstruct.parsers.javascript_parser",
      "path": "src/llmstruct/parsers/javascript_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            8,
            12
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "file_hash",
          "docstring": "",
          "line_range": [
            14,
            19
          ],
          "parameters": [
            "self",
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_metadata",
          "docstring": "",
          "line_range": [
            21,
            35
          ],
          "parameters": [
            "self",
            "filepath",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "parse_module",
          "docstring": "",
          "line_range": [
            37,
            89
          ],
          "parameters": [
            "self",
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "extract_signature",
          "docstring": "",
          "line_range": [
            61,
            63
          ],
          "parameters": [
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JavaScriptParser",
          "docstring": "",
          "line_range": [
            7,
            89
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                8,
                12
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "file_hash",
              "docstring": "",
              "line_range": [
                14,
                19
              ],
              "parameters": [
                "self",
                "filepath"
              ]
            },
            {
              "name": "compute_file_metadata",
              "docstring": "",
              "line_range": [
                21,
                35
              ],
              "parameters": [
                "self",
                "filepath",
                "include_hashes"
              ]
            },
            {
              "name": "parse_module",
              "docstring": "",
              "line_range": [
                37,
                89
              ],
              "parameters": [
                "self",
                "filepath",
                "root_dir",
                "include_ranges",
                "include_hashes"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "set"
        ],
        "file_hash": [
          "open",
          "f.read",
          "hashlib.sha256"
        ],
        "compute_file_metadata": [
          "open",
          "self.file_hash",
          "os.stat",
          "sum"
        ],
        "parse_module": [
          "self.compute_file_metadata",
          "esprima.parseModule",
          "open",
          "str",
          "f.read"
        ],
        "extract_signature": [
          "hasattr"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "datetime",
        "esprima",
        "hashlib",
        "os",
        "typing"
      ],
      "hash": null,
      "artifact_id": "61544120-6f6f-4f5c-b11d-40d79c53db31"
    },
    {
      "module_id": "src.llmstruct.parsers.python_parser",
      "path": "src/llmstruct/parsers/python_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "infer_category",
          "docstring": "Infer module category based on its path.",
          "line_range": [
            10,
            17
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_hash",
          "docstring": "Compute SHA-256 hash of file content.",
          "line_range": [
            64,
            71
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "analyze_module",
          "docstring": "Analyze Python module and return structured data.",
          "line_range": [
            73,
            130
          ],
          "parameters": [
            "file_path",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            21,
            24
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "visit_Import",
          "docstring": "Capture import statements.",
          "line_range": [
            26,
            30
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_ImportFrom",
          "docstring": "Capture from-import statements.",
          "line_range": [
            32,
            38
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_FunctionDef",
          "docstring": "Track function definitions and their calls.",
          "line_range": [
            40,
            45
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_AsyncFunctionDef",
          "docstring": "Track async function definitions and their calls.",
          "line_range": [
            47,
            52
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_Call",
          "docstring": "Capture function calls.",
          "line_range": [
            54,
            62
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "AST visitor to collect function calls and dependencies.",
          "line_range": [
            19,
            62
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                21,
                24
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "visit_Import",
              "docstring": "Capture import statements.",
              "line_range": [
                26,
                30
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_ImportFrom",
              "docstring": "Capture from-import statements.",
              "line_range": [
                32,
                38
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_FunctionDef",
              "docstring": "Track function definitions and their calls.",
              "line_range": [
                40,
                45
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_AsyncFunctionDef",
              "docstring": "Track async function definitions and their calls.",
              "line_range": [
                47,
                52
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_Call",
              "docstring": "Capture function calls.",
              "line_range": [
                54,
                62
              ],
              "parameters": [
                "self",
                "node"
              ]
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ]
        }
      ],
      "callgraph": {
        "infer_category": [
          "Path"
        ],
        "__init__": [
          "set"
        ],
        "visit_Import": [
          "self.generic_visit"
        ],
        "visit_ImportFrom": [
          "self.generic_visit"
        ],
        "visit_FunctionDef": [
          "set",
          "self.generic_visit"
        ],
        "visit_AsyncFunctionDef": [
          "set",
          "self.generic_visit"
        ],
        "visit_Call": [
          "self.generic_visit",
          "isinstance"
        ],
        "compute_file_hash": [
          "open",
          "logging.error",
          "f.read",
          "hashlib.sha256"
        ],
        "analyze_module": [
          "functions.append",
          "ast.walk",
          "infer_category",
          "list",
          "logging.error",
          "ast.get_docstring",
          "Path",
          "isinstance",
          "visitor.visit",
          "compute_file_hash",
          "CallVisitor",
          "ast.parse",
          "open",
          "str",
          "ast.unparse",
          "sorted",
          "f.read",
          "classes.append"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "Set",
        "ast",
        "hashlib",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "d8443ba9-37f3-4c3d-bf53-ff02f0558839"
    },
    {
      "module_id": "src.llmstruct.templates.__init__",
      "path": "src/llmstruct/templates/__init__.py",
      "category": "cli",
      "module_doc": "Templates for LLM prompts used in LLMStruct integration.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "6980f741-0401-41ac-a452-6fac92cdac9b"
    },
    {
      "module_id": "src.llmstruct.validators.__init__",
      "path": "src/llmstruct/validators/__init__.py",
      "category": "cli",
      "module_doc": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "json_validator",
        "validate_struct_json"
      ],
      "hash": null,
      "artifact_id": "637f6730-0853-4679-a67d-26f6f6019ebb"
    },
    {
      "module_id": "src.llmstruct.validators.json_validator",
      "path": "src/llmstruct/validators/json_validator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_struct_json",
          "docstring": "Validate a single JSON file against a schema.",
          "line_range": [
            9,
            37
          ],
          "parameters": [
            "json_path",
            "schema_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_directory",
          "docstring": "Validate all JSON files in a directory against a schema.",
          "line_range": [
            39,
            50
          ],
          "parameters": [
            "directory",
            "schema_path",
            "include_patterns",
            "exclude_patterns"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_struct_json": [
          "json_file.exists",
          "logging.error",
          "Path",
          "json.load",
          "validate",
          "open",
          "str",
          "schema_file.exists",
          "logging.info"
        ],
        "validate_directory": [
          "Path",
          "json_file.match",
          "validate_struct_json",
          "str",
          "any"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "ValidationError",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "sys",
        "typing",
        "validate"
      ],
      "hash": null,
      "artifact_id": "aea82ecc-2193-41a9-9edd-2166033021db"
    },
    {
      "module_id": "src.llmstruct.generators.json_generator",
      "path": "src/llmstruct/generators/json_generator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_folder_structure",
          "docstring": "Capture directory and file structure with artifact_id, respecting .gitignore and patterns.",
          "line_range": [
            13,
            50
          ],
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "build_toc_and_modules",
          "docstring": "Build TOC and modules with artifact_id and robust filtering.",
          "line_range": [
            52,
            83
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "Generate JSON structure for project with artifact_id, summary, and tags.",
          "line_range": [
            85,
            126
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals",
            "exclude_dirs"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_folder_structure": [
          "sorted",
          "os.walk",
          "file_path.relative_to",
          "Path",
          "set",
          "p.rstrip",
          "file_path.match",
          "uuid.uuid4",
          "str",
          "structure.append",
          "p.endswith",
          "any"
        ],
        "build_toc_and_modules": [
          "toc.append",
          "analyze_module",
          "set",
          "Path",
          "p.rstrip",
          "modules.append",
          "len",
          "f.match",
          "uuid.uuid4",
          "str",
          "p.endswith",
          "any"
        ],
        "generate_json": [
          "build_toc_and_modules",
          "list",
          "get_folder_structure",
          "Path",
          "set",
          "len",
          "sum",
          "str",
          "uuid.uuid4"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "analyze_module",
        "datetime",
        "json",
        "logging",
        "os",
        "parsers.python_parser",
        "pathlib",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "05b6187d-7dd5-44e2-a9df-02ccbd571b93"
    },
    {
      "module_id": "src.llmstruct.generators.__init__",
      "path": "src/llmstruct/generators/__init__.py",
      "category": "cli",
      "module_doc": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "generate_json",
        "json_generator"
      ],
      "hash": null,
      "artifact_id": "fe4fd0ef-6cb2-456d-889d-a9e8a4c520c7"
    },
    {
      "module_id": "bak.20250522_102827.scripts.collector",
      "path": "bak/20250522_102827/scripts/collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "apply_filters",
          "docstring": "",
          "line_range": [
            10,
            26
          ],
          "parameters": [
            "files",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "collect_files",
          "docstring": "",
          "line_range": [
            28,
            34
          ],
          "parameters": [
            "root_dir",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "generate_struct",
          "docstring": "",
          "line_range": [
            36,
            79
          ],
          "parameters": [
            "root_dir",
            "output"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            81,
            82
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "apply_filters": [
          "pattern.startswith",
          "fnmatch.fnmatch",
          "filtered.append"
        ],
        "collect_files": [
          "files.append",
          "apply_filters",
          "path.relative_to",
          "root_dir.rglob",
          "path.is_file",
          "str"
        ],
        "generate_struct": [
          "output_path.open",
          "output_path.exists",
          "logger.info",
          "json.dump",
          "collect_files",
          "Path",
          "json.load",
          "len",
          "existing.get",
          "str",
          "uuid.uuid4"
        ],
        "main": [
          "generate_struct"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "logging",
        "pathlib",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "4b80078d-49d0-4cbc-ac39-8e71a1e76777"
    },
    {
      "module_id": "bak.20250522_102827.scripts.validate_refs",
      "path": "bak/20250522_102827/scripts/validate_refs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_references",
          "docstring": "",
          "line_range": [
            8,
            39
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            41,
            42
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_references": [
          "broken_links.append",
          "logger.info",
          "logger.warning",
          "json.dump",
          "source_file.exists",
          "Path",
          "idea.get",
          "json.load",
          "target_file.exists",
          "logger.error",
          "enumerate"
        ],
        "main": [
          "validate_references"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "b9a0d618-61a8-475c-8443-b8df0ec294a5"
    },
    {
      "module_id": "bak.20250522_102827.scripts.deploy_embedded_files",
      "path": "bak/20250522_102827/scripts/deploy_embedded_files.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_json",
          "docstring": "",
          "line_range": [
            922,
            928
          ],
          "parameters": [
            "data",
            "schema"
          ],
          "decorators": []
        },
        {
          "name": "backup_files",
          "docstring": "",
          "line_range": [
            930,
            936
          ],
          "parameters": [
            "target_dir",
            "backup_root"
          ],
          "decorators": []
        },
        {
          "name": "deploy_embedded_files",
          "docstring": "",
          "line_range": [
            938,
            964
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            966,
            967
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_json": [
          "logger.warning",
          "validate"
        ],
        "backup_files": [
          "logger.info",
          "shutil.copytree",
          "target_dir.exists",
          "datetime.now"
        ],
        "deploy_embedded_files": [
          "f.write",
          "logger.info",
          "EMBEDDED_FILES.items",
          "json.dump",
          "Path",
          "validate_json",
          "logger.error",
          "EMBEDDED_FILES.get",
          "target_path.exists",
          "target_path.open",
          "backup_files"
        ],
        "main": [
          "deploy_embedded_files"
        ]
      },
      "dependencies": [
        "Path",
        "ValidationError",
        "datetime",
        "json",
        "jsonschema",
        "logging",
        "os",
        "pathlib",
        "shutil",
        "validate"
      ],
      "hash": null,
      "artifact_id": "6bc90a63-7a92-4196-a7e6-3d9356222a6b"
    },
    {
      "module_id": "bak.20250522_131121.scripts.collector",
      "path": "bak/20250522_131121/scripts/collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "apply_filters",
          "docstring": "",
          "line_range": [
            10,
            26
          ],
          "parameters": [
            "files",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "collect_files",
          "docstring": "",
          "line_range": [
            28,
            34
          ],
          "parameters": [
            "root_dir",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "generate_struct",
          "docstring": "",
          "line_range": [
            36,
            79
          ],
          "parameters": [
            "root_dir",
            "output"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            81,
            82
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "apply_filters": [
          "pattern.startswith",
          "fnmatch.fnmatch",
          "filtered.append"
        ],
        "collect_files": [
          "files.append",
          "apply_filters",
          "path.relative_to",
          "root_dir.rglob",
          "path.is_file",
          "str"
        ],
        "generate_struct": [
          "output_path.open",
          "output_path.exists",
          "logger.info",
          "json.dump",
          "collect_files",
          "Path",
          "json.load",
          "len",
          "existing.get",
          "str",
          "uuid.uuid4"
        ],
        "main": [
          "generate_struct"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "logging",
        "pathlib",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "2707f682-b686-42cd-be96-f2a2b0bf49b2"
    },
    {
      "module_id": "bak.20250522_131121.scripts.validate_refs",
      "path": "bak/20250522_131121/scripts/validate_refs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_references",
          "docstring": "",
          "line_range": [
            8,
            39
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            41,
            42
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_references": [
          "broken_links.append",
          "logger.info",
          "logger.warning",
          "json.dump",
          "source_file.exists",
          "Path",
          "idea.get",
          "json.load",
          "target_file.exists",
          "logger.error",
          "enumerate"
        ],
        "main": [
          "validate_references"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "325488d3-eb79-41cf-ac60-167bf20db76a"
    },
    {
      "module_id": "bak.20250522_131121.scripts.deploy_embedded_files",
      "path": "bak/20250522_131121/scripts/deploy_embedded_files.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_json",
          "docstring": "",
          "line_range": [
            929,
            939
          ],
          "parameters": [
            "data",
            "schema",
            "base_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_files",
          "docstring": "",
          "line_range": [
            941,
            947
          ],
          "parameters": [
            "target_dir",
            "backup_root"
          ],
          "decorators": []
        },
        {
          "name": "deploy_embedded_files",
          "docstring": "",
          "line_range": [
            949,
            1003
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            1005,
            1006
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_json": [
          "logger.warning",
          "logger.error",
          "RefResolver",
          "validate"
        ],
        "backup_files": [
          "logger.info",
          "shutil.copytree",
          "target_dir.exists",
          "datetime.now"
        ],
        "deploy_embedded_files": [
          "f.write",
          "logger.info",
          "logger.warning",
          "json.dump",
          "Path",
          "validate_json",
          "logger.error",
          "Path.cwd",
          "EMBEDDED_FILES.get",
          "target_path.exists",
          "target_path.open",
          "backup_files"
        ],
        "main": [
          "deploy_embedded_files"
        ]
      },
      "dependencies": [
        "Path",
        "RefResolver",
        "ValidationError",
        "datetime",
        "json",
        "jsonschema",
        "logging",
        "os",
        "pathlib",
        "shutil",
        "validate"
      ],
      "hash": null,
      "artifact_id": "9c3541d4-42c5-4ba1-acd2-4f0175e45c00"
    },
    {
      "module_id": "scripts.collector",
      "path": "scripts/collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "apply_filters",
          "docstring": "",
          "line_range": [
            10,
            26
          ],
          "parameters": [
            "files",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "collect_files",
          "docstring": "",
          "line_range": [
            28,
            34
          ],
          "parameters": [
            "root_dir",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "generate_struct",
          "docstring": "",
          "line_range": [
            36,
            79
          ],
          "parameters": [
            "root_dir",
            "output"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            81,
            82
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "apply_filters": [
          "pattern.startswith",
          "fnmatch.fnmatch",
          "filtered.append"
        ],
        "collect_files": [
          "files.append",
          "apply_filters",
          "path.relative_to",
          "root_dir.rglob",
          "path.is_file",
          "str"
        ],
        "generate_struct": [
          "output_path.open",
          "output_path.exists",
          "logger.info",
          "json.dump",
          "collect_files",
          "Path",
          "json.load",
          "len",
          "existing.get",
          "str",
          "uuid.uuid4"
        ],
        "main": [
          "generate_struct"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "logging",
        "pathlib",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "8477689f-ce68-485a-b737-1369c566e82c"
    },
    {
      "module_id": "scripts.validate_refs",
      "path": "scripts/validate_refs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_references",
          "docstring": "",
          "line_range": [
            8,
            39
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            41,
            42
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_references": [
          "broken_links.append",
          "logger.info",
          "logger.warning",
          "json.dump",
          "source_file.exists",
          "Path",
          "idea.get",
          "json.load",
          "target_file.exists",
          "logger.error",
          "enumerate"
        ],
        "main": [
          "validate_references"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "d82c87d0-37b4-4c09-be15-66ac2b4481b4"
    },
    {
      "module_id": "scripts.deploy_embedded_files",
      "path": "scripts/deploy_embedded_files.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_json",
          "docstring": "",
          "line_range": [
            929,
            939
          ],
          "parameters": [
            "data",
            "schema",
            "base_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_files",
          "docstring": "",
          "line_range": [
            941,
            947
          ],
          "parameters": [
            "target_dir",
            "backup_root"
          ],
          "decorators": []
        },
        {
          "name": "deploy_embedded_files",
          "docstring": "",
          "line_range": [
            949,
            1003
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            1005,
            1006
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_json": [
          "logger.warning",
          "logger.error",
          "RefResolver",
          "validate"
        ],
        "backup_files": [
          "logger.info",
          "shutil.copytree",
          "target_dir.exists",
          "datetime.now"
        ],
        "deploy_embedded_files": [
          "f.write",
          "logger.info",
          "logger.warning",
          "json.dump",
          "Path",
          "validate_json",
          "logger.error",
          "Path.cwd",
          "EMBEDDED_FILES.get",
          "target_path.exists",
          "target_path.open",
          "backup_files"
        ],
        "main": [
          "deploy_embedded_files"
        ]
      },
      "dependencies": [
        "Path",
        "RefResolver",
        "ValidationError",
        "datetime",
        "json",
        "jsonschema",
        "logging",
        "os",
        "pathlib",
        "shutil",
        "validate"
      ],
      "hash": null,
      "artifact_id": "fa8cbcb4-430e-472d-a4c7-be5fabb1ff54"
    }
  ]
}