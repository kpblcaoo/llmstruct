{
  "metadata": {
    "project_name": "llmstruct",
    "description": "Utility for generating structured JSON for codebases",
    "version": "2025-05-27T13:47:51.325044Z",
    "authors": [
      {
        "name": "Mikhail Stepanov",
        "github": "kpblcaoo",
        "email": "kpblcaoo@gmail.com"
      }
    ],
    "instructions": [
      "Follow best practices, warn if instructions conflict with them",
      "Preserve functionality, ensure idempotency",
      "Use attached struct.json for context and navigation",
      "Request missing modules or functions if needed",
      "Regenerate JSON for significant changes, track via Git and artifacts",
      "Use internal comments for descriptions, append brief summary"
    ],
    "goals": {
      "goals": [
        "Create universal JSON format for codebase structure (modules, functions, classes, calls, metadata)",
        "Ensure extensibility for new languages and entity types",
        "Develop modular, plugin-based parsers for new languages",
        "Maintain an open, RFC-style documented format",
        "Integrate with LLMs by generating and attaching JSON structure to queries"
      ]
    },
    "stats": {
      "modules_count": 55,
      "functions_count": 298,
      "classes_count": 27,
      "call_edges_count": 980
    },
    "artifact_id": "83afdbde-03d9-43ab-b3b5-e644a3b51a31",
    "summary": "Structured JSON for llmstruct codebase",
    "tags": [
      "codebase",
      "automation"
    ],
    "folder_structure": [
      {
        "path": ".",
        "type": "directory",
        "artifact_id": "45619242-c7c5-438f-9005-666723b29646",
        "metadata": {}
      },
      {
        "path": "CHANGELOG.md",
        "type": "file",
        "artifact_id": "e49c8f25-662c-4f86-b4a8-efa20c5b01d9",
        "metadata": {}
      },
      {
        "path": "CLEAN_COMMIT_MESSAGE.md",
        "type": "file",
        "artifact_id": "4f0404e9-aa60-4000-823a-bdf446940315",
        "metadata": {}
      },
      {
        "path": "COMMIT_MESSAGE.md",
        "type": "file",
        "artifact_id": "5c196afa-38a3-4f0a-bab4-015cbe4032ce",
        "metadata": {}
      },
      {
        "path": "GITHUB_PROJECTS_README.md",
        "type": "file",
        "artifact_id": "f4396064-c1a1-4fdf-bcec-f375a3bb1637",
        "metadata": {}
      },
      {
        "path": "META_SESSION_PLAN.md",
        "type": "file",
        "artifact_id": "b1fd6d19-a81a-4f52-a877-c4cbb22260ee",
        "metadata": {}
      },
      {
        "path": "MODULAR_CLI_COMPLETION_REPORT.md",
        "type": "file",
        "artifact_id": "73181783-4aeb-4cac-867c-c006f8caa505",
        "metadata": {}
      },
      {
        "path": "QUICK_START.md",
        "type": "file",
        "artifact_id": "3f269bdc-c6b9-4e55-9081-fdc2a03b50cc",
        "metadata": {}
      },
      {
        "path": "README.md",
        "type": "file",
        "artifact_id": "a50e8740-31b3-4778-b583-02ae3aefe05a",
        "metadata": {}
      },
      {
        "path": "SECURITY_IMPLEMENTATION_SUMMARY.md",
        "type": "file",
        "artifact_id": "fca3082b-9a74-478c-a40c-952449b10a4d",
        "metadata": {}
      },
      {
        "path": "SESSION_TASKS.md",
        "type": "file",
        "artifact_id": "a726e9e4-0475-49f8-ae4d-9b41a2533a1f",
        "metadata": {}
      },
      {
        "path": "board_cli.py",
        "type": "file",
        "artifact_id": "f3e0889c-580f-43d7-8a3d-33286ff358e2",
        "metadata": {}
      },
      {
        "path": "collector.py",
        "type": "file",
        "artifact_id": "2fdea9d2-6740-4092-8529-aec24e1a38ac",
        "metadata": {}
      },
      {
        "path": "concept_innovative.json",
        "type": "file",
        "artifact_id": "38a54a82-897b-4458-9a2e-49c657030458",
        "metadata": {}
      },
      {
        "path": "concept_v0.3.0.json",
        "type": "file",
        "artifact_id": "6ed122aa-55ab-45ee-a9a0-d1a0882047e0",
        "metadata": {}
      },
      {
        "path": "data",
        "type": "directory",
        "artifact_id": "2386f85f-1bfe-4c20-96fa-259c141613e1",
        "metadata": {}
      },
      {
        "path": "data/artifacts",
        "type": "directory",
        "artifact_id": "bb2b7cc4-077d-4d5c-815b-83592f43b759",
        "metadata": {}
      },
      {
        "path": "data/artifacts_index.json",
        "type": "file",
        "artifact_id": "562bcbd7-3eae-47bc-be3f-33cebd49764e",
        "metadata": {}
      },
      {
        "path": "data/cli.json",
        "type": "file",
        "artifact_id": "399a0800-90f7-4e5e-9206-a5d8a735eddf",
        "metadata": {}
      },
      {
        "path": "data/cli_enhanced.json",
        "type": "file",
        "artifact_id": "15dc15f3-d0ec-4e64-ad4f-5e577e2336d2",
        "metadata": {}
      },
      {
        "path": "data/cli_queue.json",
        "type": "file",
        "artifact_id": "ce21c580-9372-4907-b163-081a45d0f5d8",
        "metadata": {}
      },
      {
        "path": "data/cli_queue_enhanced.json",
        "type": "file",
        "artifact_id": "69482e50-60ec-4289-a1b1-cfe5f100377d",
        "metadata": {}
      },
      {
        "path": "data/conflicts.json",
        "type": "file",
        "artifact_id": "7a8caa9d-5692-49d9-8e0a-3908a91602b7",
        "metadata": {}
      },
      {
        "path": "data/context_orchestration.json",
        "type": "file",
        "artifact_id": "7507efd6-e2eb-428f-939f-eaaaa0ae7fa5",
        "metadata": {}
      },
      {
        "path": "data/copilot",
        "type": "directory",
        "artifact_id": "1ad4e649-5be9-4058-bced-d33a17f22f53",
        "metadata": {}
      },
      {
        "path": "data/copilot/ai_constraints.json",
        "type": "file",
        "artifact_id": "e885a2fd-e2db-49bd-81b3-4e1420d678fe",
        "metadata": {}
      },
      {
        "path": "data/copilot/processing_queue.json",
        "type": "file",
        "artifact_id": "b643c103-47a5-4e1e-b107-e5a1fcc71aa9",
        "metadata": {}
      },
      {
        "path": "data/copilot/warnings.json",
        "type": "file",
        "artifact_id": "22a13bda-8e39-4870-a2a8-07640a4196b7",
        "metadata": {}
      },
      {
        "path": "data/copilot_init.json",
        "type": "file",
        "artifact_id": "fbfb4fed-97ce-416c-823e-66c778c5540d",
        "metadata": {}
      },
      {
        "path": "data/docs.json",
        "type": "file",
        "artifact_id": "19e33d34-d456-4b7a-b825-ad49edaf4531",
        "metadata": {}
      },
      {
        "path": "data/gh_mapping.json",
        "type": "file",
        "artifact_id": "ab042d47-d120-484c-9c18-37ce98c43810",
        "metadata": {}
      },
      {
        "path": "data/ideas.json",
        "type": "file",
        "artifact_id": "aa5a3cb4-8df0-423a-ba68-eb3c8cd06388",
        "metadata": {}
      },
      {
        "path": "data/ideas_cache.json",
        "type": "file",
        "artifact_id": "230b0d20-5ad6-4d86-9ed6-975319d7c566",
        "metadata": {}
      },
      {
        "path": "data/init.json",
        "type": "file",
        "artifact_id": "65a8530d-7926-4806-8c6e-425587b1c6d9",
        "metadata": {}
      },
      {
        "path": "data/init_enhanced.json",
        "type": "file",
        "artifact_id": "5ca243c1-6ad7-4069-80e8-42b2c9be791d",
        "metadata": {}
      },
      {
        "path": "data/insights.json",
        "type": "file",
        "artifact_id": "8a84ee99-6c60-4b47-afb7-30ad0ac8b965",
        "metadata": {}
      },
      {
        "path": "data/metrics.json",
        "type": "file",
        "artifact_id": "9128c957-8780-42e3-8cd8-d429ff3b7a2f",
        "metadata": {}
      },
      {
        "path": "data/prs.json",
        "type": "file",
        "artifact_id": "0517ca07-709e-469a-b507-d8cac45f6b0f",
        "metadata": {}
      },
      {
        "path": "data/references.json",
        "type": "file",
        "artifact_id": "695ecc5c-f888-47fc-82a1-af04374900c6",
        "metadata": {}
      },
      {
        "path": "data/sessions",
        "type": "directory",
        "artifact_id": "62fdb232-fd26-4344-820e-3ac163942c50",
        "metadata": {}
      },
      {
        "path": "data/sessions/README.md",
        "type": "file",
        "artifact_id": "5c04990e-65de-46e4-bcb1-8b37bebfe876",
        "metadata": {}
      },
      {
        "path": "data/sessions/ai_sessions.json",
        "type": "file",
        "artifact_id": "8c851498-e07e-4d09-8dc6-9468505b9f97",
        "metadata": {}
      },
      {
        "path": "data/sessions/current_session.json",
        "type": "file",
        "artifact_id": "2b8c96b6-bcfd-4e81-ba29-0fc9b793b2dc",
        "metadata": {}
      },
      {
        "path": "data/sessions/worklog.json",
        "type": "file",
        "artifact_id": "b7b4fd22-9a11-4902-83e4-bf328ba5f2ad",
        "metadata": {}
      },
      {
        "path": "data/tasks.json",
        "type": "file",
        "artifact_id": "fd646c85-4baa-42e8-8d31-221618ebe59c",
        "metadata": {}
      },
      {
        "path": "data/vision.json",
        "type": "file",
        "artifact_id": "a85de8bb-2e05-4440-8b11-f4db651661a5",
        "metadata": {}
      },
      {
        "path": "data/weights.json",
        "type": "file",
        "artifact_id": "e32b9093-c7ce-4e7b-bd83-da901cce90ad",
        "metadata": {}
      },
      {
        "path": "data/workflow_events.json",
        "type": "file",
        "artifact_id": "04da9bb9-a1c8-4c35-a713-336daf7049c4",
        "metadata": {}
      },
      {
        "path": "data/workspace",
        "type": "directory",
        "artifact_id": "9759f18c-5c88-4ca6-89ce-47201741fb23",
        "metadata": {}
      },
      {
        "path": "data/workspace/workspace_state.json",
        "type": "file",
        "artifact_id": "e4568117-a2ec-43e4-90d6-e9887dd17447",
        "metadata": {}
      },
      {
        "path": "docs",
        "type": "directory",
        "artifact_id": "2a62b102-dfe6-4634-aa3f-3f0400095c6a",
        "metadata": {}
      },
      {
        "path": "docs.json",
        "type": "file",
        "artifact_id": "67df08d5-fb0d-469e-bc45-0a74d761df17",
        "metadata": {}
      },
      {
        "path": "docs/AI_SESSION_MOBILE_CONTROL.md",
        "type": "file",
        "artifact_id": "35b4e6d9-fcc2-4390-8efe-9e1eb9eb06b4",
        "metadata": {}
      },
      {
        "path": "docs/CONTRIBUTING.md",
        "type": "file",
        "artifact_id": "e5e6a57d-100d-438d-b2d1-a7fb81c65fde",
        "metadata": {}
      },
      {
        "path": "docs/LLM_instructions_api.md",
        "type": "file",
        "artifact_id": "0dbb3c4d-37a1-43d5-b9a7-e6a493f817ea",
        "metadata": {}
      },
      {
        "path": "docs/SECURITY.md",
        "type": "file",
        "artifact_id": "19cb80bc-1e08-47e6-b303-8d8e779ea025",
        "metadata": {}
      },
      {
        "path": "docs/ai-constraints-implementation-report.md",
        "type": "file",
        "artifact_id": "77a602cd-8854-4eb8-8ef0-054a9df4f6f1",
        "metadata": {}
      },
      {
        "path": "docs/ai-session-monitor",
        "type": "directory",
        "artifact_id": "62cb7c86-ca11-42e6-97e4-4be25e8663d5",
        "metadata": {}
      },
      {
        "path": "docs/ai-session-monitor/README.md",
        "type": "file",
        "artifact_id": "c00b1073-7e9f-4779-865a-d8ed082318b5",
        "metadata": {}
      },
      {
        "path": "docs/best_practices.md",
        "type": "file",
        "artifact_id": "1de2e1dc-f755-4874-9450-05f815c79106",
        "metadata": {}
      },
      {
        "path": "docs/cache.py",
        "type": "file",
        "artifact_id": "296b6e41-3412-4c74-9eb0-8a45df1efcbf",
        "metadata": {}
      },
      {
        "path": "docs/cli.py",
        "type": "file",
        "artifact_id": "fb77590f-81a9-4de2-a7ad-832ac9bcccd1",
        "metadata": {}
      },
      {
        "path": "docs/cli_modular_architecture.md",
        "type": "file",
        "artifact_id": "015a8f93-1f8e-4d51-88fb-538da7ed02b7",
        "metadata": {}
      },
      {
        "path": "docs/context_orchestration_architecture.md",
        "type": "file",
        "artifact_id": "1828c4d5-464d-40b7-b01b-88572cc8bd91",
        "metadata": {}
      },
      {
        "path": "docs/copilot_integration.md",
        "type": "file",
        "artifact_id": "0448eb2e-2ba2-426a-a4d6-002f7841497c",
        "metadata": {}
      },
      {
        "path": "docs/examples",
        "type": "directory",
        "artifact_id": "75da0f6d-08bf-4fc4-86f5-d867ddf49d94",
        "metadata": {}
      },
      {
        "path": "docs/examples/struct.json",
        "type": "file",
        "artifact_id": "613284ec-453c-4a75-8025-f0c3c6e0867f",
        "metadata": {}
      },
      {
        "path": "docs/gh_view.md",
        "type": "file",
        "artifact_id": "0891c823-e456-437e-ac37-77dc9297c802",
        "metadata": {}
      },
      {
        "path": "docs/github_projects_export.md",
        "type": "file",
        "artifact_id": "e45f071f-4147-49da-855b-ccb85055bbb4",
        "metadata": {}
      },
      {
        "path": "docs/ideas_community.md",
        "type": "file",
        "artifact_id": "bf877b3f-f380-46eb-9d83-aacd2c06be4c",
        "metadata": {}
      },
      {
        "path": "docs/ideas_strategy.md",
        "type": "file",
        "artifact_id": "4009202f-1787-41bc-80e6-6c554ef67928",
        "metadata": {}
      },
      {
        "path": "docs/ideas_technical.md",
        "type": "file",
        "artifact_id": "b5b3fd4a-d3b5-4f8c-9753-52e67740a58e",
        "metadata": {}
      },
      {
        "path": "docs/incremental_indexing_plan.md",
        "type": "file",
        "artifact_id": "a903573c-3b05-4d6e-9b05-97003dc43c45",
        "metadata": {}
      },
      {
        "path": "docs/integration.md",
        "type": "file",
        "artifact_id": "edadb625-bd96-45ed-9309-4c0d44ee2308",
        "metadata": {}
      },
      {
        "path": "docs/interactions_diagram.ru.md",
        "type": "file",
        "artifact_id": "dcaded1d-b19d-4a69-a84d-2ebfc6c8e477",
        "metadata": {}
      },
      {
        "path": "docs/internal",
        "type": "directory",
        "artifact_id": "93ae7a54-1461-4a5d-82bd-028da4e44af1",
        "metadata": {}
      },
      {
        "path": "docs/internal/notes",
        "type": "directory",
        "artifact_id": "01b4ae4e-368f-486b-b6d4-4fafe7d42afb",
        "metadata": {}
      },
      {
        "path": "docs/internal/notes/session_integration.md",
        "type": "file",
        "artifact_id": "76fffe17-16da-4245-b1fa-7740f99a4ec4",
        "metadata": {}
      },
      {
        "path": "docs/internal/roadmap.md",
        "type": "file",
        "artifact_id": "affed9fe-d2a2-491f-a374-c41ec0e600ec",
        "metadata": {}
      },
      {
        "path": "docs/internal/ru",
        "type": "directory",
        "artifact_id": "04a462bf-9707-45a2-9e77-a7fe99945260",
        "metadata": {}
      },
      {
        "path": "docs/internal/ru/roadmap.md",
        "type": "file",
        "artifact_id": "62ed7c77-5df7-411c-8de4-366183db7fdc",
        "metadata": {}
      },
      {
        "path": "docs/internal/ru/setup.md",
        "type": "file",
        "artifact_id": "ba9bcdd5-41f1-4fac-93d5-dd07efdce755",
        "metadata": {}
      },
      {
        "path": "docs/internal/ru/team.md",
        "type": "file",
        "artifact_id": "e8428906-b55c-4f43-836b-6ec69358d9c4",
        "metadata": {}
      },
      {
        "path": "docs/internal/ses-004-implementation-decisions.md",
        "type": "file",
        "artifact_id": "5eededd3-5e6f-463d-b559-68f17588b904",
        "metadata": {}
      },
      {
        "path": "docs/internal/setup.md",
        "type": "file",
        "artifact_id": "e9e10cf6-153d-4c7a-8807-e2a474aac923",
        "metadata": {}
      },
      {
        "path": "docs/internal/team.md",
        "type": "file",
        "artifact_id": "e7320b29-bafb-4108-81e9-0487b5c19d68",
        "metadata": {}
      },
      {
        "path": "docs/json_selector.py",
        "type": "file",
        "artifact_id": "69ed7a34-e08f-4202-a326-2bb42265a3f5",
        "metadata": {}
      },
      {
        "path": "docs/llmstruct_config.md",
        "type": "file",
        "artifact_id": "6cc4d5a0-bdf0-48c8-accc-66448a6bf79c",
        "metadata": {}
      },
      {
        "path": "docs/llmstruct_decision_checklist.md",
        "type": "file",
        "artifact_id": "895aefb9-7c3e-4dcb-9cc8-66fe39156a15",
        "metadata": {}
      },
      {
        "path": "docs/llmstruct_format.md",
        "type": "file",
        "artifact_id": "2a2ff600-2787-401c-92d9-7144b2545447",
        "metadata": {}
      },
      {
        "path": "docs/manifesto.md",
        "type": "file",
        "artifact_id": "74094518-500c-489b-a619-832c994cf5ca",
        "metadata": {}
      },
      {
        "path": "docs/onboarding.md",
        "type": "file",
        "artifact_id": "145bcdc5-08d0-4aa3-a9a3-b9eeeec1c557",
        "metadata": {}
      },
      {
        "path": "docs/project_structure.md",
        "type": "file",
        "artifact_id": "4968c155-b471-4c18-a2f5-c124a58c217c",
        "metadata": {}
      },
      {
        "path": "docs/ru",
        "type": "directory",
        "artifact_id": "7a870dd8-6b56-4256-b05b-cf922c970039",
        "metadata": {}
      },
      {
        "path": "docs/ru/CONTRIBUTING.md",
        "type": "file",
        "artifact_id": "6b4b1ca6-d0e8-470b-ba56-49f6648a51d0",
        "metadata": {}
      },
      {
        "path": "docs/ru/README.md",
        "type": "file",
        "artifact_id": "97196462-8b4c-4146-be40-550bbef96f1b",
        "metadata": {}
      },
      {
        "path": "docs/ru/best_practices.md",
        "type": "file",
        "artifact_id": "31128b1f-d4c6-4339-861b-a082f1d3abd8",
        "metadata": {}
      },
      {
        "path": "docs/ru/examples",
        "type": "directory",
        "artifact_id": "9cd3ca66-6ff8-48ef-9e0e-7c207ce2a238",
        "metadata": {}
      },
      {
        "path": "docs/ru/examples/struct.json",
        "type": "file",
        "artifact_id": "4f70dbce-1567-4a0c-ae26-31248071d68c",
        "metadata": {}
      },
      {
        "path": "docs/ru/ideas_community.md",
        "type": "file",
        "artifact_id": "7fb207ec-2b87-4f76-8c2e-163db98c3ea1",
        "metadata": {}
      },
      {
        "path": "docs/ru/ideas_strategy.md",
        "type": "file",
        "artifact_id": "d17a5654-83d7-4896-ade3-5f821c8f70b4",
        "metadata": {}
      },
      {
        "path": "docs/ru/ideas_technical.md",
        "type": "file",
        "artifact_id": "8062af1c-86c0-479a-9c8c-11c7329fe5bd",
        "metadata": {}
      },
      {
        "path": "docs/ru/integration.md",
        "type": "file",
        "artifact_id": "826da35b-da27-480e-8065-e4c30f974075",
        "metadata": {}
      },
      {
        "path": "docs/ru/interactions_diagram.ru.md",
        "type": "file",
        "artifact_id": "76e8d183-cbfd-46cb-b9d2-10dbae160d55",
        "metadata": {}
      },
      {
        "path": "docs/ru/llmstruct_config.md",
        "type": "file",
        "artifact_id": "a8f5c507-3dcd-4844-a7fc-2c4347453538",
        "metadata": {}
      },
      {
        "path": "docs/ru/llmstruct_format.md",
        "type": "file",
        "artifact_id": "2cc9a044-4d11-403b-b579-698db6a8be52",
        "metadata": {}
      },
      {
        "path": "docs/ru/manifesto.md",
        "type": "file",
        "artifact_id": "9d6c9483-3265-411a-a8ec-00020f623b4b",
        "metadata": {}
      },
      {
        "path": "docs/ru/onboarding.md",
        "type": "file",
        "artifact_id": "6599786b-f18e-4a29-9819-b8c577e1f126",
        "metadata": {}
      },
      {
        "path": "docs/ru/project_structure.md",
        "type": "file",
        "artifact_id": "b0192164-39bc-4cd0-9575-3c46b86e0703",
        "metadata": {}
      },
      {
        "path": "docs/self_run.py",
        "type": "file",
        "artifact_id": "139059fa-c54e-4969-a6ee-80ea42301215",
        "metadata": {}
      },
      {
        "path": "docs/struct_security.md",
        "type": "file",
        "artifact_id": "7975ea8b-2eb6-4039-87d5-d390a4842937",
        "metadata": {}
      },
      {
        "path": "docs/test_self_run.py",
        "type": "file",
        "artifact_id": "10ba04a4-c065-40dc-a15a-50c1efce9d90",
        "metadata": {}
      },
      {
        "path": "examples",
        "type": "directory",
        "artifact_id": "99e13780-470d-41a2-8da3-63d591064d79",
        "metadata": {}
      },
      {
        "path": "examples/python_project_main.py",
        "type": "file",
        "artifact_id": "df72c816-19a0-42b9-9093-adccfb92b6df",
        "metadata": {}
      },
      {
        "path": "examples/python_project_utils.py",
        "type": "file",
        "artifact_id": "276c81e8-95e5-4782-a4a1-f1747ca6f587",
        "metadata": {}
      },
      {
        "path": "final_system_check.py",
        "type": "file",
        "artifact_id": "b62082f1-ec07-4f22-ac9e-7f9e9d12d99c",
        "metadata": {}
      },
      {
        "path": "final_system_validation.py",
        "type": "file",
        "artifact_id": "980a632e-c487-4ff2-b0a8-fad32cd2efc9",
        "metadata": {}
      },
      {
        "path": "internal",
        "type": "directory",
        "artifact_id": "04ede254-a310-44cd-a641-040fbeb50ca1",
        "metadata": {}
      },
      {
        "path": "metrics.json",
        "type": "file",
        "artifact_id": "f7c1179b-738f-4093-94bc-403a35198651",
        "metadata": {}
      },
      {
        "path": "project_context.json",
        "type": "file",
        "artifact_id": "5bfd77ba-a6cf-4b98-b50f-16cbd3558da2",
        "metadata": {}
      },
      {
        "path": "schema",
        "type": "directory",
        "artifact_id": "00d3a4c9-9893-439e-80c8-231431ed6040",
        "metadata": {}
      },
      {
        "path": "schema/artifacts_simplified.json",
        "type": "file",
        "artifact_id": "6a9b95a1-aedf-431c-b742-85064f9e71af",
        "metadata": {}
      },
      {
        "path": "schema/cli_queue.json",
        "type": "file",
        "artifact_id": "567eeaf1-f764-4650-bbc6-e73c39fcc2bf",
        "metadata": {}
      },
      {
        "path": "schema/cli_simplified.json",
        "type": "file",
        "artifact_id": "e34b1b30-b97e-4d3a-9fc6-5a4d5b0e799c",
        "metadata": {}
      },
      {
        "path": "schema/common",
        "type": "directory",
        "artifact_id": "28a05931-2d20-4f0d-924f-9e111c1db9ec",
        "metadata": {}
      },
      {
        "path": "schema/common/definitions.json",
        "type": "file",
        "artifact_id": "c2d4d5a3-bc0b-4820-a5ae-620bdb37cbcb",
        "metadata": {}
      },
      {
        "path": "schema/core.json",
        "type": "file",
        "artifact_id": "d3e69ee0-6c0b-49a2-b877-020ae7107806",
        "metadata": {}
      },
      {
        "path": "schema/core_simplified.json",
        "type": "file",
        "artifact_id": "eec2337e-15a0-4ea2-ab8f-8230b8b911bd",
        "metadata": {}
      },
      {
        "path": "schema/insights_simplified.json",
        "type": "file",
        "artifact_id": "07dc2b50-8314-4e5b-96bf-3d778b060cf1",
        "metadata": {}
      },
      {
        "path": "schema/llmstruct_schema.json",
        "type": "file",
        "artifact_id": "92701259-aff9-4c66-9c0f-64cb301e7590",
        "metadata": {}
      },
      {
        "path": "schema/llmstruct_schema_simplified.json",
        "type": "file",
        "artifact_id": "4fc80a73-00e7-4758-a00f-550787e26c44",
        "metadata": {}
      },
      {
        "path": "schema/plugins",
        "type": "directory",
        "artifact_id": "42bdb11e-2185-43e7-a20a-8d5b5fe71c2e",
        "metadata": {}
      },
      {
        "path": "schema/plugins/artifacts.json",
        "type": "file",
        "artifact_id": "867e7777-9fee-4d63-8330-94ff95757197",
        "metadata": {}
      },
      {
        "path": "schema/plugins/cli.json",
        "type": "file",
        "artifact_id": "18e8f738-289e-403b-8755-d7a2c6a2faa8",
        "metadata": {}
      },
      {
        "path": "schema/plugins/data_sorter.json",
        "type": "file",
        "artifact_id": "e9a24d8c-1be5-4e6a-b111-a854fde2d1ee",
        "metadata": {}
      },
      {
        "path": "schema/plugins/insights.json",
        "type": "file",
        "artifact_id": "68733ce6-a987-4078-9540-071444bb4de9",
        "metadata": {}
      },
      {
        "path": "scripts",
        "type": "directory",
        "artifact_id": "ee4e4190-1215-4162-b815-056a9909f485",
        "metadata": {}
      },
      {
        "path": "scripts/auto_update_struct.py",
        "type": "file",
        "artifact_id": "6fd12479-6e40-4ed2-92fc-a468bfd94825",
        "metadata": {}
      },
      {
        "path": "scripts/collector.py",
        "type": "file",
        "artifact_id": "a6a5b59e-4666-41bf-9dce-8b4df8a606a4",
        "metadata": {}
      },
      {
        "path": "scripts/deploy_embedded_files.py",
        "type": "file",
        "artifact_id": "9bf6c1df-7e3a-4109-ad91-f08e162d8dda",
        "metadata": {}
      },
      {
        "path": "scripts/export_to_github_projects.py",
        "type": "file",
        "artifact_id": "41c120fd-71f4-45e0-be46-4f1f97f7a56f",
        "metadata": {}
      },
      {
        "path": "scripts/session_cli.py",
        "type": "file",
        "artifact_id": "19c91a93-acf4-4130-9453-cf9d26087053",
        "metadata": {}
      },
      {
        "path": "scripts/validate_json.py",
        "type": "file",
        "artifact_id": "dd9fdf28-3d9e-49e8-a797-1ec9181980a4",
        "metadata": {}
      },
      {
        "path": "scripts/validate_refs.py",
        "type": "file",
        "artifact_id": "279eb899-533d-433a-a23c-132239b5ec01",
        "metadata": {}
      },
      {
        "path": "scripts/validate_schemas.py",
        "type": "file",
        "artifact_id": "fac4d8cd-b146-42ba-8278-294120d8591b",
        "metadata": {}
      },
      {
        "path": "src",
        "type": "directory",
        "artifact_id": "7adb4f7a-d01e-4ab7-a8aa-b7a4598e7aa9",
        "metadata": {}
      },
      {
        "path": "src/llmstruct",
        "type": "directory",
        "artifact_id": "b71f9c5a-7b97-4a8b-970d-c86c9f6b9758",
        "metadata": {}
      },
      {
        "path": "src/llmstruct.egg-info",
        "type": "directory",
        "artifact_id": "66686be6-6cfe-4fb8-960c-ff89139fe60c",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/__init__.py",
        "type": "file",
        "artifact_id": "ca8a218d-56f3-4c3c-8245-498ced4c0a29",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/__main__.py",
        "type": "file",
        "artifact_id": "4a33a53c-f57c-4d78-a4e2-96f3dfa78f5a",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cache.py",
        "type": "file",
        "artifact_id": "8a8f203a-a29c-4954-a5ce-8e0d501c0d7d",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli.py",
        "type": "file",
        "artifact_id": "40927e93-e72a-4f07-a743-7a465d0d4bee",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli_commands.py",
        "type": "file",
        "artifact_id": "ce731438-c612-4246-9d02-e0d99f2aaef0",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli_config.py",
        "type": "file",
        "artifact_id": "b5575068-6141-4d4e-a7ae-7e0dc5dc8991",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli_core.py",
        "type": "file",
        "artifact_id": "4dabda0f-d6d8-4f59-bf8a-906bb340967c",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/cli_utils.py",
        "type": "file",
        "artifact_id": "f2d37cee-ab04-4b56-9193-552b497c9023",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/context_orchestrator.py",
        "type": "file",
        "artifact_id": "5675526a-b42c-4faf-822d-3978113f027f",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/copilot.py",
        "type": "file",
        "artifact_id": "0bb21675-7137-4536-a131-52aa012a02c7",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators",
        "type": "directory",
        "artifact_id": "429a187f-85d9-4d72-9065-ec415977ac59",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators/__init__.py",
        "type": "file",
        "artifact_id": "94c4e202-92c2-4d86-9cc6-2a04c8039d02",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/generators/json_generator.py",
        "type": "file",
        "artifact_id": "98f203ef-721e-43b1-ac1f-2477b641872a",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/gh_view.py",
        "type": "file",
        "artifact_id": "74afd43e-b0f7-46c7-9892-c2c2d1d5fa54",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/grok.py",
        "type": "file",
        "artifact_id": "62cc55de-17d4-4d75-b036-f843220c890a",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/json_selector.py",
        "type": "file",
        "artifact_id": "fb1e528c-6c4d-4f8f-81f0-c8da45dd7b7d",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/llm_client.py",
        "type": "file",
        "artifact_id": "5d189e90-8165-404b-9bd2-0a5e17eeaaac",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers",
        "type": "directory",
        "artifact_id": "17b032cf-f890-470d-9cfd-df43c8731190",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/__init__.py",
        "type": "file",
        "artifact_id": "4c65626e-d5d1-4081-8504-ee7ae6e5447e",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/javascript_parser.py",
        "type": "file",
        "artifact_id": "33be9ca8-98b3-4d7a-b863-b6eb3979581c",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/parsers/python_parser.py",
        "type": "file",
        "artifact_id": "9a92fa46-37fd-4443-8a4f-089afb5f983c",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/self_run.py",
        "type": "file",
        "artifact_id": "7889d3c5-4474-470c-888b-1554c87c2099",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/templates",
        "type": "directory",
        "artifact_id": "91fd632e-e354-44b0-a5a3-dd7aa1864516",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/templates/__init__.py",
        "type": "file",
        "artifact_id": "c80ecc23-1516-4e4b-9b3e-93d6dbda7139",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/validators",
        "type": "directory",
        "artifact_id": "1844c71d-37d4-406a-b394-86117dbeb09f",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/validators/__init__.py",
        "type": "file",
        "artifact_id": "436ba7ed-465b-4973-8dcc-543f3e153449",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/validators/json_validator.py",
        "type": "file",
        "artifact_id": "c2477f9e-e8b4-4474-927f-0795bfda408a",
        "metadata": {}
      },
      {
        "path": "src/llmstruct/workspace.py",
        "type": "file",
        "artifact_id": "b7b79668-d51a-41be-a811-63565f157af3",
        "metadata": {}
      },
      {
        "path": "struct.json",
        "type": "file",
        "artifact_id": "26c2e750-8773-4e63-b2e2-01239e43a6c6",
        "metadata": {}
      },
      {
        "path": "struct_ci_test.json",
        "type": "file",
        "artifact_id": "57c8b4c0-6c72-40c5-b0a8-33da4280e7d4",
        "metadata": {}
      },
      {
        "path": "struct_final_test.json",
        "type": "file",
        "artifact_id": "b76a2a41-b983-4cbc-9e84-f8e49e1331c5",
        "metadata": {}
      },
      {
        "path": "struct_fresh.json",
        "type": "file",
        "artifact_id": "c7d35f54-6460-489e-9c48-d19c1a879b88",
        "metadata": {}
      },
      {
        "path": "struct_test.json",
        "type": "file",
        "artifact_id": "8866aaf5-a9be-42ab-b754-60f8a5674f74",
        "metadata": {}
      },
      {
        "path": "test_audit.py",
        "type": "file",
        "artifact_id": "6d228dcb-e8c1-4fb7-a272-db232436f7fa",
        "metadata": {}
      },
      {
        "path": "test_cli.py",
        "type": "file",
        "artifact_id": "97a67873-22f2-4222-8bcc-93e58467618b",
        "metadata": {}
      },
      {
        "path": "test_cli_demo.py",
        "type": "file",
        "artifact_id": "b05b393e-d40b-458b-8ea1-678fd3489d2a",
        "metadata": {}
      },
      {
        "path": "test_cli_integration.py",
        "type": "file",
        "artifact_id": "b1a92845-eef1-4547-b5b9-5199aff283b8",
        "metadata": {}
      },
      {
        "path": "test_efficiency.py",
        "type": "file",
        "artifact_id": "4333c55c-d8dd-4add-af11-a78909fb682f",
        "metadata": {}
      },
      {
        "path": "test_export.py",
        "type": "file",
        "artifact_id": "ebdc75fc-3df2-4d3e-a9de-4740a4764059",
        "metadata": {}
      },
      {
        "path": "test_modular_cli.py",
        "type": "file",
        "artifact_id": "e8cf296f-7816-4a0b-a5fb-3d2cb8759425",
        "metadata": {}
      },
      {
        "path": "test_results.json",
        "type": "file",
        "artifact_id": "5daa7677-1262-47f9-8354-5acf49ce2ff8",
        "metadata": {}
      },
      {
        "path": "test_simple.json",
        "type": "file",
        "artifact_id": "bf689182-967a-4973-b190-13b50921262f",
        "metadata": {}
      },
      {
        "path": "test_struct_quick.json",
        "type": "file",
        "artifact_id": "75463f29-69de-481f-94ae-7cedafe48f83",
        "metadata": {}
      },
      {
        "path": "tests",
        "type": "directory",
        "artifact_id": "9320aba8-4236-4d2c-90b5-da6987a94db6",
        "metadata": {}
      },
      {
        "path": "tests/__init__.py",
        "type": "file",
        "artifact_id": "efa745ce-f14c-4719-9381-24e950d92b26",
        "metadata": {}
      },
      {
        "path": "tests/test_self_run.py",
        "type": "file",
        "artifact_id": "fb2bd853-e31c-4539-8323-d05eafbde88d",
        "metadata": {}
      },
      {
        "path": "validate_schemas.py",
        "type": "file",
        "artifact_id": "63176b3e-c3bc-4e47-a2fd-4afe77d9006a",
        "metadata": {}
      },
      {
        "path": "validate_sessions.py",
        "type": "file",
        "artifact_id": "84e9687b-a819-41a6-9f45-f42a5110e5c5",
        "metadata": {}
      },
      {
        "path": "verify_llm_response.py",
        "type": "file",
        "artifact_id": "532750ff-8261-4e87-a680-babe2df658b1",
        "metadata": {}
      },
      {
        "path": "workspace_state.json",
        "type": "file",
        "artifact_id": "6df1511d-4272-42bf-a45a-9f092b3cd190",
        "metadata": {}
      }
    ]
  },
  "toc": [
    {
      "module_id": "test_cli_integration",
      "path": "test_cli_integration.py",
      "category": "test",
      "functions": 1,
      "classes": 0,
      "summary": "Test script for CLI integration with new commands",
      "artifact_id": "889d73b8-047e-4810-8a23-f95b86acfe76"
    },
    {
      "module_id": "test_efficiency",
      "path": "test_efficiency.py",
      "category": "test",
      "functions": 12,
      "classes": 0,
      "summary": "",
      "artifact_id": "26e16bcd-8df3-4df0-90b9-432d6306b085"
    },
    {
      "module_id": "test_cli",
      "path": "test_cli.py",
      "category": "test",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "d9ddb694-05ec-4c44-8503-8b96c8b1f7e7"
    },
    {
      "module_id": "test_audit",
      "path": "test_audit.py",
      "category": "test",
      "functions": 1,
      "classes": 0,
      "summary": "Test script for audit functionality.",
      "artifact_id": "6c848c22-b06d-45d3-ae18-72a3be014008"
    },
    {
      "module_id": "collector",
      "path": "collector.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "4eab6e3c-9844-42bb-a51b-5140897b2e53"
    },
    {
      "module_id": "final_system_check",
      "path": "final_system_check.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Final System Status Check - LLMStruct Modular CLI Integration",
      "artifact_id": "5eae2956-10f6-493e-ae4a-3f5cc692548f"
    },
    {
      "module_id": "board_cli",
      "path": "board_cli.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "CLI Kanban Board for llmstruct tasks and ideas",
      "artifact_id": "22329372-96c5-4575-8527-2051c6d89af5"
    },
    {
      "module_id": "final_system_validation",
      "path": "final_system_validation.py",
      "category": "core",
      "functions": 1,
      "classes": 0,
      "summary": "Final system validation script for LLMStruct Modular CLI Integration",
      "artifact_id": "14afb78a-cf6d-407d-b10e-8fd7ac9276b1"
    },
    {
      "module_id": "validate_schemas",
      "path": "validate_schemas.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "JSON Schema Validation Script for llmstruct",
      "artifact_id": "ebc08b99-6a99-4a70-9a34-1e689e4d8b02"
    },
    {
      "module_id": "test_export",
      "path": "test_export.py",
      "category": "test",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "f8d0a207-eea1-4879-8f74-1a77ef44d99b"
    },
    {
      "module_id": "test_modular_cli",
      "path": "test_modular_cli.py",
      "category": "test",
      "functions": 2,
      "classes": 0,
      "summary": "Test script for modular CLI structure",
      "artifact_id": "c5f1712d-de88-47c7-acb4-bca112fe0464"
    },
    {
      "module_id": "validate_sessions",
      "path": "validate_sessions.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "Session Schema Validation Script for llmstruct",
      "artifact_id": "95ecd2a5-6a8a-4a4c-9d7a-cccd67d2d311"
    },
    {
      "module_id": "verify_llm_response",
      "path": "verify_llm_response.py",
      "category": "core",
      "functions": 6,
      "classes": 0,
      "summary": "",
      "artifact_id": "eeddbb02-7e4e-4fbc-850e-999f98edffa5"
    },
    {
      "module_id": "test_cli_demo",
      "path": "test_cli_demo.py",
      "category": "test",
      "functions": 1,
      "classes": 0,
      "summary": "Quick CLI test to demonstrate new commands",
      "artifact_id": "c7137232-f425-4e40-9a82-be6b22055f24"
    },
    {
      "module_id": "examples.python_project_utils",
      "path": "examples/python_project_utils.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "Utility functions for the sample project.",
      "artifact_id": "c3c039bd-19cb-4610-bae1-64c533ad7ce8"
    },
    {
      "module_id": "examples.python_project_main",
      "path": "examples/python_project_main.py",
      "category": "core",
      "functions": 2,
      "classes": 1,
      "summary": "Main module for the sample project.",
      "artifact_id": "bdd65296-034d-46f8-91c4-018b4e9bd961"
    },
    {
      "module_id": "docs.test_self_run",
      "path": "docs/test_self_run.py",
      "category": "test",
      "functions": 5,
      "classes": 0,
      "summary": "",
      "artifact_id": "9beba158-88f5-42c6-8c28-9820d2d606ab"
    },
    {
      "module_id": "docs.cache",
      "path": "docs/cache.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "3ce1a4b7-0f06-4b88-9a0b-683dfb033eba"
    },
    {
      "module_id": "docs.self_run",
      "path": "docs/self_run.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "ec96e841-e8b1-429a-8fad-79af51758d8b"
    },
    {
      "module_id": "docs.json_selector",
      "path": "docs/json_selector.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "588586bd-0521-4e4e-9254-d0a80b480089"
    },
    {
      "module_id": "docs.cli",
      "path": "docs/cli.py",
      "category": "core",
      "functions": 12,
      "classes": 0,
      "summary": "",
      "artifact_id": "4dc23025-459e-4ba6-a938-bc69e208d321"
    },
    {
      "module_id": "src.llmstruct.cli_config",
      "path": "src/llmstruct/cli_config.py",
      "category": "core",
      "functions": 18,
      "classes": 1,
      "summary": "CLI configuration management.",
      "artifact_id": "1c3ed4bb-7d57-4a9b-b6ba-78e63ebf2f68"
    },
    {
      "module_id": "src.llmstruct.grok",
      "path": "src/llmstruct/grok.py",
      "category": "core",
      "functions": 3,
      "classes": 1,
      "summary": "",
      "artifact_id": "52c3400d-f5ca-4173-aa0c-c17ad569b20d"
    },
    {
      "module_id": "src.llmstruct.cli_commands",
      "path": "src/llmstruct/cli_commands.py",
      "category": "core",
      "functions": 22,
      "classes": 1,
      "summary": "CLI command processing and handlers.",
      "artifact_id": "d6ead956-232d-4472-b9e5-55a16c891cb0"
    },
    {
      "module_id": "src.llmstruct.context_orchestrator",
      "path": "src/llmstruct/context_orchestrator.py",
      "category": "core",
      "functions": 19,
      "classes": 5,
      "summary": "Smart Context Orchestration for LLMStruct",
      "artifact_id": "d106583e-6634-4a20-b8ad-4fbad477df31"
    },
    {
      "module_id": "src.llmstruct.__init__",
      "path": "src/llmstruct/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "2f767ad9-6098-4d6a-ba4b-bc992911d13b"
    },
    {
      "module_id": "src.llmstruct.__main__",
      "path": "src/llmstruct/__main__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "fb8b2fd8-9cc0-4c0e-9860-fc9af9f4ff22"
    },
    {
      "module_id": "src.llmstruct.cli_utils",
      "path": "src/llmstruct/cli_utils.py",
      "category": "core",
      "functions": 13,
      "classes": 1,
      "summary": "CLI utility functions.",
      "artifact_id": "7b73a56a-9978-4a35-a4f1-9e6ed3024d6e"
    },
    {
      "module_id": "src.llmstruct.copilot",
      "path": "src/llmstruct/copilot.py",
      "category": "core",
      "functions": 26,
      "classes": 5,
      "summary": "LLMStruct Copilot Integration Module",
      "artifact_id": "945c9bdd-57e7-4583-b7db-a9abde6d4415"
    },
    {
      "module_id": "src.llmstruct.gh_view",
      "path": "src/llmstruct/gh_view.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "GitHub visualization/graph feature (gh-view-v1)",
      "artifact_id": "51aeeff3-abd1-4d46-980f-62446a2558ec"
    },
    {
      "module_id": "src.llmstruct.llm_client",
      "path": "src/llmstruct/llm_client.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "246f7401-6a04-47e3-84b1-6e1e0de7a4d9"
    },
    {
      "module_id": "src.llmstruct.cache",
      "path": "src/llmstruct/cache.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "",
      "artifact_id": "bfed92e6-7fb1-4f38-a633-99e2fe69f089"
    },
    {
      "module_id": "src.llmstruct.self_run",
      "path": "src/llmstruct/self_run.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "068a4a68-7801-4572-9309-6b6d92ac9016"
    },
    {
      "module_id": "src.llmstruct.json_selector",
      "path": "src/llmstruct/json_selector.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "73e96456-9576-4ade-8ca4-a48e1a31e9d9"
    },
    {
      "module_id": "src.llmstruct.cli",
      "path": "src/llmstruct/cli.py",
      "category": "core",
      "functions": 17,
      "classes": 0,
      "summary": "LLMStruct CLI - Main entry point for the command-line interface.",
      "artifact_id": "78c55481-5d25-4b44-9a37-cb85ece7ec47"
    },
    {
      "module_id": "src.llmstruct.cli_core",
      "path": "src/llmstruct/cli_core.py",
      "category": "core",
      "functions": 6,
      "classes": 1,
      "summary": "Core CLI functionality and main loop.",
      "artifact_id": "366d3a1f-2153-4066-a7dd-04bd5d1f46d2"
    },
    {
      "module_id": "src.llmstruct.workspace",
      "path": "src/llmstruct/workspace.py",
      "category": "core",
      "functions": 20,
      "classes": 1,
      "summary": "Workspace State & Mode Management System",
      "artifact_id": "13f36528-db73-40ee-835f-1a4d84f3de77"
    },
    {
      "module_id": "src.llmstruct.parsers.__init__",
      "path": "src/llmstruct/parsers/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "artifact_id": "7b5ad127-28fc-4f96-a33f-08822907c393"
    },
    {
      "module_id": "src.llmstruct.parsers.javascript_parser",
      "path": "src/llmstruct/parsers/javascript_parser.py",
      "category": "core",
      "functions": 5,
      "classes": 1,
      "summary": "",
      "artifact_id": "588e0719-f9d5-4deb-9137-cb20053b595c"
    },
    {
      "module_id": "src.llmstruct.parsers.python_parser",
      "path": "src/llmstruct/parsers/python_parser.py",
      "category": "core",
      "functions": 9,
      "classes": 1,
      "summary": "",
      "artifact_id": "6e9dd654-462f-4f00-9546-383fa7d43ecb"
    },
    {
      "module_id": "src.llmstruct.templates.__init__",
      "path": "src/llmstruct/templates/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Templates for LLM prompts used in LLMStruct integration.",
      "artifact_id": "ba1ef0a3-04d7-488a-98e0-12cb44fa2629"
    },
    {
      "module_id": "src.llmstruct.validators.__init__",
      "path": "src/llmstruct/validators/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "artifact_id": "1179f33f-e284-4aa8-bab7-565ce9beded3"
    },
    {
      "module_id": "src.llmstruct.validators.json_validator",
      "path": "src/llmstruct/validators/json_validator.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "29d48f91-6138-4b0b-800b-d6f350340f4e"
    },
    {
      "module_id": "src.llmstruct.generators.json_generator",
      "path": "src/llmstruct/generators/json_generator.py",
      "category": "core",
      "functions": 3,
      "classes": 0,
      "summary": "",
      "artifact_id": "847d20e7-5ceb-4ec0-ad18-3e5b59ab7166"
    },
    {
      "module_id": "src.llmstruct.generators.__init__",
      "path": "src/llmstruct/generators/__init__.py",
      "category": "cli",
      "functions": 0,
      "classes": 0,
      "summary": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "artifact_id": "bd4cd2ca-4555-412d-9bcf-1892bd28a563"
    },
    {
      "module_id": "tests.test_self_run",
      "path": "tests/test_self_run.py",
      "category": "test",
      "functions": 5,
      "classes": 0,
      "summary": "",
      "artifact_id": "631d7e4e-61e5-44e6-9ce3-95cc0411939c"
    },
    {
      "module_id": "tests.__init__",
      "path": "tests/__init__.py",
      "category": "test",
      "functions": 0,
      "classes": 0,
      "summary": "Test suite for LLMStruct, covering parsers, generators, validators, and integration.",
      "artifact_id": "04b7d814-bf0f-4391-a830-2d59212b3b54"
    },
    {
      "module_id": "scripts.collector",
      "path": "scripts/collector.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "3f0e2f9c-a253-4ffa-889a-a70d4dbe8f8e"
    },
    {
      "module_id": "scripts.session_cli",
      "path": "scripts/session_cli.py",
      "category": "core",
      "functions": 10,
      "classes": 1,
      "summary": "Session Management CLI",
      "artifact_id": "6a926ef7-b565-4295-9a29-aa57dc3c8287"
    },
    {
      "module_id": "scripts.auto_update_struct",
      "path": "scripts/auto_update_struct.py",
      "category": "core",
      "functions": 8,
      "classes": 0,
      "summary": "Automatic struct.json update script",
      "artifact_id": "2fd05c1d-c2e5-4be4-a0cc-7e9b7ad67120"
    },
    {
      "module_id": "scripts.validate_schemas",
      "path": "scripts/validate_schemas.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "2834c466-fac8-4d9e-bcda-e8571afe0312"
    },
    {
      "module_id": "scripts.export_to_github_projects",
      "path": "scripts/export_to_github_projects.py",
      "category": "core",
      "functions": 8,
      "classes": 1,
      "summary": "Export script for GitHub Projects integration",
      "artifact_id": "ed4271a6-20e4-4b5c-930a-af16ed69e083"
    },
    {
      "module_id": "scripts.validate_refs",
      "path": "scripts/validate_refs.py",
      "category": "core",
      "functions": 2,
      "classes": 0,
      "summary": "",
      "artifact_id": "5ea3152b-dccc-4ac2-a7d7-a2d37d4ab1d9"
    },
    {
      "module_id": "scripts.deploy_embedded_files",
      "path": "scripts/deploy_embedded_files.py",
      "category": "core",
      "functions": 4,
      "classes": 0,
      "summary": "",
      "artifact_id": "b5dd0442-3254-4184-b2c4-31b6a7b16096"
    },
    {
      "module_id": "scripts.validate_json",
      "path": "scripts/validate_json.py",
      "category": "core",
      "functions": 0,
      "classes": 0,
      "summary": "",
      "artifact_id": "b1cfb061-6a5c-4b17-a39a-c87186da104d"
    }
  ],
  "modules": [
    {
      "module_id": "test_cli_integration",
      "path": "test_cli_integration.py",
      "category": "test",
      "module_doc": "Test script for CLI integration with new commands",
      "functions": [
        {
          "name": "test_modular_cli_commands",
          "docstring": "Test new CLI commands integration",
          "line_range": [
            13,
            164
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_modular_cli_commands": [
          "create_cli_core",
          "time.ctime",
          "os.stat",
          "print",
          "json.load",
          "subprocess.run",
          "events_data.append",
          "json.dump",
          "open",
          "int",
          "time.time",
          "os.makedirs"
        ]
      },
      "dependencies": [
        "CLIConfig",
        "CLICore",
        "CLIUtils",
        "CommandProcessor",
        "CopilotContextManager",
        "Path",
        "create_cli_core",
        "json",
        "llmstruct.cli_commands",
        "llmstruct.cli_config",
        "llmstruct.cli_core",
        "llmstruct.cli_utils",
        "llmstruct.copilot",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "time"
      ],
      "hash": null,
      "artifact_id": "889d73b8-047e-4810-8a23-f95b86acfe76"
    },
    {
      "module_id": "test_efficiency",
      "path": "test_efficiency.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "get_system_metrics",
          "docstring": "",
          "line_range": [
            15,
            19
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "is_local_address",
          "docstring": "",
          "line_range": [
            22,
            28
          ],
          "parameters": [
            "url"
          ],
          "decorators": []
        },
        {
          "name": "setup_proxy",
          "docstring": "",
          "line_range": [
            31,
            34
          ],
          "parameters": [
            "proxy_url"
          ],
          "decorators": []
        },
        {
          "name": "check_ollama",
          "docstring": "",
          "line_range": [
            37,
            42
          ],
          "parameters": [
            "api_url"
          ],
          "decorators": []
        },
        {
          "name": "optimize_prompt",
          "docstring": "",
          "line_range": [
            45,
            51
          ],
          "parameters": [
            "struct_data",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "run_llm_request",
          "docstring": "",
          "line_range": [
            54,
            78
          ],
          "parameters": [
            "api_url",
            "payload",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "check_llmstruct_cli",
          "docstring": "",
          "line_range": [
            81,
            82
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_with_llmstruct",
          "docstring": "",
          "line_range": [
            85,
            112
          ],
          "parameters": [
            "api_url",
            "project_path",
            "proxy",
            "use_placeholder"
          ],
          "decorators": []
        },
        {
          "name": "test_without_llmstruct",
          "docstring": "",
          "line_range": [
            115,
            122
          ],
          "parameters": [
            "api_url",
            "project_path",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "test_with_grok",
          "docstring": "",
          "line_range": [
            125,
            147
          ],
          "parameters": [
            "api_key",
            "project_path",
            "proxy",
            "use_placeholder"
          ],
          "decorators": []
        },
        {
          "name": "evaluate_accuracy",
          "docstring": "",
          "line_range": [
            150,
            152
          ],
          "parameters": [
            "response_text",
            "expected"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            155,
            215
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_system_metrics": [
          "psutil.cpu_percent",
          "psutil.virtual_memory"
        ],
        "is_local_address": [
          "urlparse",
          "ipaddress.ip_address"
        ],
        "setup_proxy": [
          "os.getenv"
        ],
        "check_ollama": [
          "api_url.replace",
          "response.json",
          "str",
          "requests.get"
        ],
        "optimize_prompt": [
          "len",
          "struct_data.split",
          "print"
        ],
        "run_llm_request": [
          "len",
          "time.perf_counter",
          "is_local_address",
          "requests.Session",
          "print",
          "type",
          "response.json",
          "session.post",
          "get_system_metrics",
          "response.raise_for_status"
        ],
        "check_llmstruct_cli": [
          "shutil.which"
        ],
        "test_with_llmstruct": [
          "target_path.exists",
          "Path",
          "run_llm_request",
          "f.read",
          "optimize_prompt",
          "subprocess.run",
          "check_llmstruct_cli",
          "FileNotFoundError",
          "json.dump",
          "open",
          "str"
        ],
        "test_without_llmstruct": [
          "Path",
          "run_llm_request",
          "f.read",
          "optimize_prompt",
          "open"
        ],
        "test_with_grok": [
          "test_grok",
          "target_path.exists",
          "Path",
          "f.read",
          "optimize_prompt",
          "FileNotFoundError",
          "json.dump",
          "open"
        ],
        "evaluate_accuracy": [
          "len",
          "response_text.lower",
          "sum"
        ],
        "main": [
          "check_ollama",
          "parser.add_argument",
          "range",
          "parser.parse_args",
          "test_with_llmstruct",
          "print",
          "test_without_llmstruct",
          "argparse.ArgumentParser",
          "evaluate_accuracy",
          "check_llmstruct_cli",
          "setup_proxy",
          "json.dump",
          "open",
          "test_with_grok",
          "str"
        ]
      },
      "dependencies": [
        "Path",
        "argparse",
        "ipaddress",
        "json",
        "os",
        "pathlib",
        "psutil",
        "requests",
        "shutil",
        "src.llmstruct.grok",
        "subprocess",
        "test_grok",
        "time",
        "urllib.parse",
        "urlparse"
      ],
      "hash": null,
      "artifact_id": "26e16bcd-8df3-4df0-90b9-432d6306b085"
    },
    {
      "module_id": "test_cli",
      "path": "test_cli.py",
      "category": "test",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "d9ddb694-05ec-4c44-8503-8b96c8b1f7e7"
    },
    {
      "module_id": "test_audit",
      "path": "test_audit.py",
      "category": "test",
      "module_doc": "Test script for audit functionality.",
      "functions": [
        {
          "name": "test_audit_status",
          "docstring": "Test audit status directly.",
          "line_range": [
            7,
            49
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_audit_status": [
          "t.get",
          "Path",
          "len",
          "ideas_file.exists",
          "print",
          "tasks_file.exists",
          "ideas_data.keys",
          "json.load",
          "list",
          "i.get",
          "tasks_data.keys",
          "open"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "6c848c22-b06d-45d3-ae18-72a3be014008"
    },
    {
      "module_id": "collector",
      "path": "collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "",
          "line_range": [
            13,
            17
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "is_text_file",
          "docstring": "Check if file is likely a text file based on extension.",
          "line_range": [
            20,
            31
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "collect_project",
          "docstring": "",
          "line_range": [
            34,
            66
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "gitignore_parser.parse_gitignore",
          "gitignore_path.exists",
          "Path"
        ],
        "is_text_file": [],
        "collect_project": [
          "gitignore",
          "Path",
          "len",
          "logger.info",
          "doc_files.items",
          "root_dir.rglob",
          "f.read",
          "is_text_file",
          "logger.warning",
          "json.dump",
          "load_gitignore",
          "any",
          "open",
          "logger.error",
          "str",
          "file_path.is_file"
        ]
      },
      "dependencies": [
        "Path",
        "gitignore_parser",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "4eab6e3c-9844-42bb-a51b-5140897b2e53"
    },
    {
      "module_id": "final_system_check",
      "path": "final_system_check.py",
      "category": "core",
      "module_doc": "Final System Status Check - LLMStruct Modular CLI Integration\nComprehensive validation of all completed components",
      "functions": [
        {
          "name": "check_system_status",
          "docstring": "Comprehensive system status check",
          "line_range": [
            12,
            155
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "check_system_status": [
          "t.get",
          "data.get",
          "len",
          "print",
          "json.load",
          "i.get",
          "open"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "os",
        "pathlib",
        "sys"
      ],
      "hash": null,
      "artifact_id": "5eae2956-10f6-493e-ae4a-3f5cc692548f"
    },
    {
      "module_id": "board_cli",
      "path": "board_cli.py",
      "category": "core",
      "module_doc": "CLI Kanban Board for llmstruct tasks and ideas\n- Reads data/tasks.json and data/ideas.json\n- Shows board in terminal: columns by status, rows by priority\n- Supports filtering, sorting, and shows links between tasks/ideas",
      "functions": [
        {
          "name": "load_json",
          "docstring": "",
          "line_range": [
            26,
            28
          ],
          "parameters": [
            "path"
          ],
          "decorators": []
        },
        {
          "name": "group_by_status_and_priority",
          "docstring": "",
          "line_range": [
            30,
            36
          ],
          "parameters": [
            "items",
            "kind"
          ],
          "decorators": []
        },
        {
          "name": "render_board",
          "docstring": "",
          "line_range": [
            38,
            64
          ],
          "parameters": [
            "board",
            "kind"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            66,
            74
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json": [
          "json.load",
          "open"
        ],
        "group_by_status_and_priority": [
          "defaultdict",
          "item.get"
        ],
        "render_board": [
          "table.add_row",
          "table.add_column",
          "Table",
          "item.get",
          "links.extend",
          "console.print",
          "links.append",
          "kind.capitalize",
          "Panel"
        ],
        "main": [
          "console.rule",
          "load_json",
          "ideas_data.get",
          "render_board",
          "tasks_data.get",
          "group_by_status_and_priority"
        ]
      },
      "dependencies": [
        "Console",
        "Panel",
        "Path",
        "Table",
        "box",
        "collections",
        "defaultdict",
        "json",
        "os",
        "pathlib",
        "rich",
        "rich.console",
        "rich.panel",
        "rich.table"
      ],
      "hash": null,
      "artifact_id": "22329372-96c5-4575-8527-2051c6d89af5"
    },
    {
      "module_id": "final_system_validation",
      "path": "final_system_validation.py",
      "category": "core",
      "module_doc": "Final system validation script for LLMStruct Modular CLI Integration",
      "functions": [
        {
          "name": "main",
          "docstring": "Run comprehensive system validation",
          "line_range": [
            13,
            238
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "main": [
          "create_cli_core",
          "len",
          "print",
          "getattr",
          "__import__",
          "json.load",
          "subprocess.run",
          "next",
          "task.get",
          "status.upper",
          "open"
        ]
      },
      "dependencies": [
        "Path",
        "create_cli_core",
        "json",
        "llmstruct.cli_core",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "time"
      ],
      "hash": null,
      "artifact_id": "14afb78a-cf6d-407d-b10e-8fd7ac9276b1"
    },
    {
      "module_id": "validate_schemas",
      "path": "validate_schemas.py",
      "category": "core",
      "module_doc": "JSON Schema Validation Script for llmstruct\nValidates all enhanced JSON files against their appropriate schemas.\nPart of TSK-130 implementation.",
      "functions": [
        {
          "name": "load_json",
          "docstring": "Load JSON file with error handling.",
          "line_range": [
            24,
            34
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_json_against_schema",
          "docstring": "Validate JSON data against schema.",
          "line_range": [
            37,
            53
          ],
          "parameters": [
            "json_data",
            "schema_data",
            "file_name"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            56,
            193
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": [
            15,
            21
          ],
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {
        "load_json": [
          "print",
          "json.load",
          "open"
        ],
        "validate_json_against_schema": [
          "validate",
          "str",
          "print"
        ],
        "main": [
          "load_json",
          "validate_json_against_schema",
          "errors.append",
          "print"
        ]
      },
      "dependencies": [
        "Draft7Validator",
        "ValidationError",
        "json",
        "jsonschema",
        "sys",
        "validate"
      ],
      "hash": null,
      "artifact_id": "ebc08b99-6a99-4a70-9a34-1e689e4d8b02"
    },
    {
      "module_id": "test_export",
      "path": "test_export.py",
      "category": "test",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "Path",
        "json",
        "pathlib",
        "sys"
      ],
      "hash": null,
      "artifact_id": "f8d0a207-eea1-4879-8f74-1a77ef44d99b"
    },
    {
      "module_id": "test_modular_cli",
      "path": "test_modular_cli.py",
      "category": "test",
      "module_doc": "Test script for modular CLI structure",
      "functions": [
        {
          "name": "test_modular_cli",
          "docstring": "Test basic modular CLI functionality.",
          "line_range": [
            14,
            63
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "test_copilot_integration",
          "docstring": "Test Copilot integration.",
          "line_range": [
            65,
            100
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_modular_cli": [
          "create_cli_core",
          "utils.read_file_content",
          "len",
          "print",
          "CLIUtils",
          "utils.write_file_content",
          "tempfile.TemporaryDirectory",
          "CLIConfig",
          "CommandProcessor",
          "traceback.print_exc",
          "config.get_cache_config"
        ],
        "test_copilot_integration": [
          "len",
          "print",
          "CopilotEvent",
          "initialize_copilot",
          "tempfile.TemporaryDirectory",
          "manager.get_context_status",
          "traceback.print_exc",
          "manager.close"
        ]
      },
      "dependencies": [
        "CLIConfig",
        "CLICore",
        "CLIUtils",
        "CommandProcessor",
        "CopilotContextManager",
        "CopilotEvent",
        "Path",
        "create_cli_core",
        "initialize_copilot",
        "llmstruct.cli_commands",
        "llmstruct.cli_config",
        "llmstruct.cli_core",
        "llmstruct.cli_utils",
        "llmstruct.copilot",
        "os",
        "pathlib",
        "sys",
        "tempfile",
        "traceback"
      ],
      "hash": null,
      "artifact_id": "c5f1712d-de88-47c7-acb4-bca112fe0464"
    },
    {
      "module_id": "validate_sessions",
      "path": "validate_sessions.py",
      "category": "core",
      "module_doc": "Session Schema Validation Script for llmstruct\nValidates session management JSON files against their schemas.\nFocused validation for session system only.",
      "functions": [
        {
          "name": "load_json",
          "docstring": "Load JSON file with error handling.",
          "line_range": [
            21,
            31
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_json_against_schema",
          "docstring": "Validate JSON data against schema.",
          "line_range": [
            33,
            52
          ],
          "parameters": [
            "json_data",
            "schema_data",
            "file_name"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            54,
            124
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": [
            13,
            19
          ],
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {
        "load_json": [
          "print",
          "json.load",
          "open"
        ],
        "validate_json_against_schema": [
          "len",
          "print",
          "validator.iter_errors",
          "list",
          "Draft7Validator",
          "str"
        ],
        "main": [
          "load_json",
          "validate_json_against_schema",
          "errors.append",
          "print"
        ]
      },
      "dependencies": [
        "Draft7Validator",
        "ValidationError",
        "json",
        "jsonschema",
        "sys",
        "validate"
      ],
      "hash": null,
      "artifact_id": "95ecd2a5-6a8a-4a4c-9d7a-cccd67d2d311"
    },
    {
      "module_id": "verify_llm_response",
      "path": "verify_llm_response.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_json_file",
          "docstring": "Load a JSON file and return its contents.",
          "line_range": [
            15,
            25
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "verify_response_with_struct",
          "docstring": "Verify llm_response.json against struct.json.",
          "line_range": [
            28,
            71
          ],
          "parameters": [
            "response_text",
            "struct_data"
          ],
          "decorators": []
        },
        {
          "name": "verify_response_without_struct",
          "docstring": "Verify llm_response.json based on LLMstruct principles.",
          "line_range": [
            74,
            108
          ],
          "parameters": [
            "response_text"
          ],
          "decorators": []
        },
        {
          "name": "generate_metrics",
          "docstring": "Generate metrics for the response per EXT-004.",
          "line_range": [
            111,
            141
          ],
          "parameters": [
            "response_data",
            "server_log"
          ],
          "decorators": []
        },
        {
          "name": "update_tasks_json",
          "docstring": "Append a new task to tasks.json.",
          "line_range": [
            144,
            151
          ],
          "parameters": [
            "tasks_file",
            "new_task"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            154,
            225
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_json_file": [
          "logging.error",
          "json.load",
          "open"
        ],
        "verify_response_with_struct": [
          "re.findall",
          "struct_data.get",
          "logging.info",
          "expected_goals.issubset",
          "expected_extensions.issubset",
          "expected_files.issubset",
          "set",
          "logging.error",
          "e.startswith"
        ],
        "verify_response_without_struct": [
          "response_text.lower",
          "re.findall",
          "logging.info",
          "expected_goals.issubset",
          "expected_extensions.issubset",
          "expected_files.issubset",
          "set",
          "logging.error",
          "principle.lower"
        ],
        "generate_metrics": [
          "response_text.split",
          "len",
          "re.findall",
          "datetime.utcnow",
          "server_log.get"
        ],
        "update_tasks_json": [
          "logging.info",
          "json.dump",
          "open",
          "load_json_file",
          "tasks.get"
        ],
        "main": [
          "parser.add_argument",
          "parser.parse_args",
          "generate_metrics",
          "update_tasks_json",
          "verify_response_with_struct",
          "logging.info",
          "argparse.ArgumentParser",
          "json.dump",
          "open",
          "load_json_file",
          "verify_response_without_struct"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "argparse",
        "datetime",
        "json",
        "logging",
        "os",
        "re",
        "typing"
      ],
      "hash": null,
      "artifact_id": "eeddbb02-7e4e-4fbc-850e-999f98edffa5"
    },
    {
      "module_id": "test_cli_demo",
      "path": "test_cli_demo.py",
      "category": "test",
      "module_doc": "Quick CLI test to demonstrate new commands",
      "functions": [
        {
          "name": "test_interactive_cli",
          "docstring": "Test interactive CLI with new commands",
          "line_range": [
            10,
            69
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_interactive_cli": [
          "subprocess.run",
          "print"
        ]
      },
      "dependencies": [
        "subprocess",
        "sys",
        "time"
      ],
      "hash": null,
      "artifact_id": "c7137232-f425-4e40-9a82-be6b22055f24"
    },
    {
      "module_id": "examples.python_project_utils",
      "path": "examples/python_project_utils.py",
      "category": "core",
      "module_doc": "Utility functions for the sample project.",
      "functions": [
        {
          "name": "helper",
          "docstring": "Help the main function.",
          "line_range": [
            6,
            8
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "log",
          "docstring": "Log a message.",
          "line_range": [
            11,
            13
          ],
          "parameters": [
            "message"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "helper": [
          "log"
        ],
        "log": [
          "logging.info"
        ]
      },
      "dependencies": [
        "logging"
      ],
      "hash": null,
      "artifact_id": "c3c039bd-19cb-4610-bae1-64c533ad7ce8"
    },
    {
      "module_id": "examples.python_project_main",
      "path": "examples/python_project_main.py",
      "category": "core",
      "module_doc": "Main module for the sample project.",
      "functions": [
        {
          "name": "main",
          "docstring": "Run the program.",
          "line_range": [
            6,
            9
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "run",
          "docstring": "Execute the app.",
          "line_range": [
            15,
            17
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "App",
          "docstring": "Application class.",
          "line_range": [
            12,
            17
          ],
          "methods": [
            {
              "name": "run",
              "docstring": "Execute the app.",
              "line_range": [
                15,
                17
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "main": [
          "utils.helper",
          "print"
        ],
        "run": [
          "utils.log"
        ]
      },
      "dependencies": [
        "utils"
      ],
      "hash": null,
      "artifact_id": "bdd65296-034d-46f8-91c4-018b4e9bd961"
    },
    {
      "module_id": "docs.test_self_run",
      "path": "docs/test_self_run.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "test_filter_json_init_json",
          "docstring": "Test filter_json with init.json structure.",
          "line_range": [
            15,
            22
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_select_json_partial",
          "docstring": "Test partial JSON loading.",
          "line_range": [
            24,
            34
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_cache_json",
          "docstring": "Test JSON caching.",
          "line_range": [
            36,
            48
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_attach_to_llm_request_init_json",
          "docstring": "Test attach_to_llm_request with init.json and cache.",
          "line_range": [
            50,
            67
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_attach_to_llm_request_missing_file",
          "docstring": "Test attach_to_llm_request with missing file.",
          "line_range": [
            69,
            73
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_filter_json_init_json": [
          "filter_json"
        ],
        "test_select_json_partial": [
          "select_json",
          "json.dump",
          "str",
          "open"
        ],
        "test_cache_json": [
          "JSONCache",
          "cache.close",
          "json.dump",
          "cache.get_full_json",
          "open",
          "cache.get_metadata",
          "cache.cache_json",
          "str"
        ],
        "test_attach_to_llm_request_init_json": [
          "attach_to_llm_request",
          "JSONCache",
          "cache.close",
          "json.dump",
          "open",
          "str"
        ],
        "test_attach_to_llm_request_missing_file": [
          "attach_to_llm_request",
          "str"
        ]
      },
      "dependencies": [
        "JSONCache",
        "Path",
        "attach_to_llm_request",
        "filter_json",
        "filter_struct",
        "json",
        "llmstruct.cache",
        "llmstruct.json_selector",
        "llmstruct.self_run",
        "pathlib",
        "pytest",
        "select_json"
      ],
      "hash": null,
      "artifact_id": "9beba158-88f5-42c6-8c28-9820d2d606ab"
    },
    {
      "module_id": "docs.cache",
      "path": "docs/cache.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize SQLite cache for JSON files.",
          "line_range": [
            18,
            22
          ],
          "parameters": [
            "self",
            "db_path"
          ],
          "decorators": []
        },
        {
          "name": "create_tables",
          "docstring": "Create tables for metadata and file paths.",
          "line_range": [
            24,
            42
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cache_json",
          "docstring": "Cache JSON metadata and store full file path.",
          "line_range": [
            44,
            64
          ],
          "parameters": [
            "self",
            "json_path",
            "artifact_id",
            "summary",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "get_metadata",
          "docstring": "Retrieve metadata by artifact_id.",
          "line_range": [
            66,
            79
          ],
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "get_full_json",
          "docstring": "Load full JSON by artifact_id.",
          "line_range": [
            81,
            94
          ],
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Close database connection.",
          "line_range": [
            96,
            98
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JSONCache",
          "docstring": "",
          "line_range": [
            17,
            98
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize SQLite cache for JSON files.",
              "line_range": [
                18,
                22
              ],
              "parameters": [
                "self",
                "db_path"
              ]
            },
            {
              "name": "create_tables",
              "docstring": "Create tables for metadata and file paths.",
              "line_range": [
                24,
                42
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cache_json",
              "docstring": "Cache JSON metadata and store full file path.",
              "line_range": [
                44,
                64
              ],
              "parameters": [
                "self",
                "json_path",
                "artifact_id",
                "summary",
                "tags"
              ]
            },
            {
              "name": "get_metadata",
              "docstring": "Retrieve metadata by artifact_id.",
              "line_range": [
                66,
                79
              ],
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "get_full_json",
              "docstring": "Load full JSON by artifact_id.",
              "line_range": [
                81,
                94
              ],
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "close",
              "docstring": "Close database connection.",
              "line_range": [
                96,
                98
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.create_tables",
          "sqlite3.connect"
        ],
        "create_tables": [],
        "cache_json": [
          "Path",
          "hashlib.sha256",
          "f.read",
          "logging.info",
          "content.encode",
          "open",
          "logging.error",
          "json_file.exists",
          "str",
          "json.dumps"
        ],
        "get_metadata": [
          "json.loads",
          "cursor.fetchone"
        ],
        "get_full_json": [
          "logging.error",
          "open",
          "json.load",
          "cursor.fetchone"
        ],
        "close": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "hashlib",
        "json",
        "logging",
        "pathlib",
        "sqlite3",
        "typing"
      ],
      "hash": null,
      "artifact_id": "3ce1a4b7-0f06-4b88-9a0b-683dfb033eba"
    },
    {
      "module_id": "docs.self_run",
      "path": "docs/self_run.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_struct",
          "docstring": "Filter struct.json or init.json based on prompt keywords.",
          "line_range": [
            17,
            35
          ],
          "parameters": [
            "struct",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "Attach filtered JSON to LLM prompt, using cache if available.",
          "line_range": [
            37,
            74
          ],
          "parameters": [
            "context_path",
            "prompt",
            "cache"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_struct": [
          "struct.get",
          "filter_json",
          "prompt.lower",
          "any",
          "module.get"
        ],
        "attach_to_llm_request": [
          "Path",
          "logging.info",
          "filter_json",
          "select_json",
          "prompt.lower",
          "cache.get_full_json",
          "json.dumps",
          "cache.get_metadata",
          "logging.error",
          "context_file.exists",
          "cache.cache_json",
          "filter_struct"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "JSONCache",
        "List",
        "Path",
        "cache",
        "filter_json",
        "json",
        "json_selector",
        "logging",
        "pathlib",
        "select_json",
        "typing"
      ],
      "hash": null,
      "artifact_id": "ec96e841-e8b1-429a-8fad-79af51758d8b"
    },
    {
      "module_id": "docs.json_selector",
      "path": "docs/json_selector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_json",
          "docstring": "Filter JSON data by key-value pair and select fields.",
          "line_range": [
            17,
            29
          ],
          "parameters": [
            "data",
            "filter_key",
            "filter_value",
            "fields"
          ],
          "decorators": []
        },
        {
          "name": "select_json",
          "docstring": "Load and filter JSON file, optionally parsing partially.",
          "line_range": [
            31,
            72
          ],
          "parameters": [
            "json_path",
            "filter_key",
            "filter_value",
            "fields",
            "partial"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_json": [
          "data.get",
          "item.get",
          "filtered.append",
          "isinstance"
        ],
        "select_json": [
          "ijson.parse",
          "Path",
          "prefix.startswith",
          "filtered.append",
          "json.load",
          "filter_json",
          "path.append",
          "open",
          "current_item.get",
          "logging.error",
          "f.seek",
          "json_file.exists"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "ijson",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "588586bd-0521-4e4e-9254-d0a80b480089"
    },
    {
      "module_id": "docs.cli",
      "path": "docs/cli.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": [
            26,
            36
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from llmstruct.toml or return empty dict.",
          "line_range": [
            38,
            47
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": [
            49,
            58
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default /tmp) and return the path.",
          "line_range": [
            60,
            74
          ],
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": [
            76,
            83
          ],
          "parameters": [
            "response"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": [
            85,
            195
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": [
            197,
            237
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": [
            239,
            260
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": [
            262,
            264
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": [
            266,
            268
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": [
            270,
            272
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": [
            274,
            334
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "gitignore_path.exists",
          "Path",
          "gitignore_path.open",
          "line.startswith",
          "line.strip",
          "logging.error"
        ],
        "load_config": [
          "toml.load",
          "Path",
          "config_path\u30aa\u30fc\u30d7\u30f3",
          "logging.error",
          "config_path.exists"
        ],
        "read_file_content": [
          "path.is_file",
          "Path",
          "f.read",
          "path.open",
          "logging.error"
        ],
        "write_to_file": [
          "Path",
          "logging.info",
          "file_path.open",
          "f.write",
          "base_path.mkdir",
          "file_path.exists",
          "logging.error",
          "str",
          "logging.warning"
        ],
        "parse_files_from_response": [
          "re.findall",
          "content.strip",
          "files.append",
          "filename.strip"
        ],
        "interactive": [
          "print",
          "write_to_file",
          "user_input.lower",
          "Path",
          "attach_to_llm_request",
          "JSONCache",
          "cache.close",
          "client.query",
          "write_match.group",
          "get_folder_structure",
          "write_dir.startswith",
          "logging.error",
          "parse",
          "files_to_write.append",
          "scan_match.group",
          "parse_files_from_response",
          "load_gitignore",
          "re.search",
          "LLMClient",
          "logging.warning",
          "read_file_content",
          "os.listdir",
          "sorted",
          "input",
          "json.dumps"
        ],
        "parse": [
          "load_config",
          "logging.warning",
          "Path",
          "JSONCache",
          "cache.close",
          "logging.info",
          "json.dump",
          "load_gitignore",
          "logging.error",
          "cache.cache_json",
          "generate_json",
          "config.get"
        ],
        "query": [
          "Path",
          "JSONCache",
          "cache.close",
          "logging.info",
          "json.dump",
          "logging.error",
          "LLMClient",
          "client.query"
        ],
        "context": [
          "logging.warning"
        ],
        "dogfood": [
          "logging.warning"
        ],
        "review": [
          "logging.warning"
        ],
        "main": [
          "context_parser.add_argument",
          "interactive_parser.add_argument",
          "query",
          "parser.parse_args",
          "interactive",
          "context",
          "dogfood",
          "review_parser.add_argument",
          "dogfood_parser.add_argument",
          "argparse.ArgumentParser",
          "subparsers.add_parser",
          "query_parser.add_argument",
          "parse_parser.add_argument",
          "parse",
          "parser.add_subparsers",
          "review",
          "asyncio.run"
        ]
      },
      "dependencies": [
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "generate_json",
        "get_folder_structure",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "logging",
        "os",
        "pathlib",
        "re",
        "toml",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "4dc23025-459e-4ba6-a938-bc69e208d321"
    },
    {
      "module_id": "src.llmstruct.cli_config",
      "path": "src/llmstruct/cli_config.py",
      "category": "core",
      "module_doc": "CLI configuration management.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize configuration manager.",
          "line_range": [
            20,
            24
          ],
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load configuration from llmstruct.toml.",
          "line_range": [
            26,
            34
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_cache_config",
          "docstring": "Get cache configuration section.",
          "line_range": [
            36,
            38
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_copilot_config",
          "docstring": "Get Copilot configuration section.",
          "line_range": [
            40,
            42
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_queue_config",
          "docstring": "Get queue configuration section.",
          "line_range": [
            44,
            46
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_config",
          "docstring": "Get context configuration section.",
          "line_range": [
            48,
            50
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_gitignore_patterns",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": [
            52,
            66
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_dirs",
          "docstring": "Get directories to exclude from scanning.",
          "line_range": [
            68,
            82
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_include_patterns",
          "docstring": "Get file patterns to include.",
          "line_range": [
            84,
            89
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_exclude_patterns",
          "docstring": "Get file patterns to exclude.",
          "line_range": [
            91,
            96
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_max_file_size",
          "docstring": "Get maximum file size for processing (in bytes).",
          "line_range": [
            98,
            100
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_auto_update_config",
          "docstring": "Get auto-update configuration.",
          "line_range": [
            102,
            104
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "is_auto_update_enabled",
          "docstring": "Check if auto-update is enabled.",
          "line_range": [
            106,
            108
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_struct_file_path",
          "docstring": "Get path to struct.json file.",
          "line_range": [
            110,
            112
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_file_path",
          "docstring": "Get path to context file.",
          "line_range": [
            114,
            116
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_config",
          "docstring": "Save current configuration to file.",
          "line_range": [
            118,
            124
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "update_config",
          "docstring": "Update configuration value.",
          "line_range": [
            126,
            131
          ],
          "parameters": [
            "self",
            "section",
            "key",
            "value"
          ],
          "decorators": []
        },
        {
          "name": "reload_config",
          "docstring": "Reload configuration from file.",
          "line_range": [
            133,
            135
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLIConfig",
          "docstring": "Manages CLI configuration from llmstruct.toml and other sources.",
          "line_range": [
            17,
            135
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize configuration manager.",
              "line_range": [
                20,
                24
              ],
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load configuration from llmstruct.toml.",
              "line_range": [
                26,
                34
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_cache_config",
              "docstring": "Get cache configuration section.",
              "line_range": [
                36,
                38
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_copilot_config",
              "docstring": "Get Copilot configuration section.",
              "line_range": [
                40,
                42
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_queue_config",
              "docstring": "Get queue configuration section.",
              "line_range": [
                44,
                46
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_config",
              "docstring": "Get context configuration section.",
              "line_range": [
                48,
                50
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_gitignore_patterns",
              "docstring": "Load and normalize patterns from .gitignore.",
              "line_range": [
                52,
                66
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_exclude_dirs",
              "docstring": "Get directories to exclude from scanning.",
              "line_range": [
                68,
                82
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_include_patterns",
              "docstring": "Get file patterns to include.",
              "line_range": [
                84,
                89
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_exclude_patterns",
              "docstring": "Get file patterns to exclude.",
              "line_range": [
                91,
                96
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_max_file_size",
              "docstring": "Get maximum file size for processing (in bytes).",
              "line_range": [
                98,
                100
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_auto_update_config",
              "docstring": "Get auto-update configuration.",
              "line_range": [
                102,
                104
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "is_auto_update_enabled",
              "docstring": "Check if auto-update is enabled.",
              "line_range": [
                106,
                108
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_struct_file_path",
              "docstring": "Get path to struct.json file.",
              "line_range": [
                110,
                112
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_file_path",
              "docstring": "Get path to context file.",
              "line_range": [
                114,
                116
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_config",
              "docstring": "Save current configuration to file.",
              "line_range": [
                118,
                124
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "update_config",
              "docstring": "Update configuration value.",
              "line_range": [
                126,
                131
              ],
              "parameters": [
                "self",
                "section",
                "key",
                "value"
              ]
            },
            {
              "name": "reload_config",
              "docstring": "Reload configuration from file.",
              "line_range": [
                133,
                135
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self._load_config"
        ],
        "_load_config": [
          "logging.error",
          "toml.load"
        ],
        "get_cache_config": [],
        "get_copilot_config": [],
        "get_queue_config": [],
        "get_context_config": [],
        "get_gitignore_patterns": [
          "gitignore_path.exists",
          "Path",
          "gitignore_path.open",
          "line.startswith",
          "line.strip",
          "logging.error"
        ],
        "get_exclude_dirs": [
          "set",
          "parsing_config.get",
          "cli_config.get",
          "list"
        ],
        "get_include_patterns": [
          "parsing_config.get",
          "cli_config.get"
        ],
        "get_exclude_patterns": [
          "parsing_config.get",
          "cli_config.get"
        ],
        "get_max_file_size": [],
        "get_auto_update_config": [],
        "is_auto_update_enabled": [
          "self.get_auto_update_config"
        ],
        "get_struct_file_path": [],
        "get_context_file_path": [],
        "save_config": [
          "logging.error",
          "toml.dump"
        ],
        "update_config": [
          "self.save_config"
        ],
        "reload_config": [
          "self._load_config"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Path",
        "logging",
        "pathlib",
        "toml",
        "typing"
      ],
      "hash": null,
      "artifact_id": "1c3ed4bb-7d57-4a9b-b6ba-78e63ebf2f68"
    },
    {
      "module_id": "src.llmstruct.grok",
      "path": "src/llmstruct/grok.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "test_grok",
          "docstring": "",
          "line_range": [
            24,
            30
          ],
          "parameters": [
            "api_key",
            "prompt",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            6,
            11
          ],
          "parameters": [
            "self",
            "api_key",
            "proxy"
          ],
          "decorators": []
        },
        {
          "name": "generate",
          "docstring": "",
          "line_range": [
            13,
            21
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GrokClient",
          "docstring": "",
          "line_range": [
            5,
            21
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                6,
                11
              ],
              "parameters": [
                "self",
                "api_key",
                "proxy"
              ]
            },
            {
              "name": "generate",
              "docstring": "",
              "line_range": [
                13,
                21
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "requests.Session"
        ],
        "generate": [
          "prompt.split",
          "response.raise_for_status",
          "len",
          "response.json"
        ],
        "test_grok": [
          "GrokClient",
          "time.perf_counter",
          "client.generate"
        ]
      },
      "dependencies": [
        "requests",
        "time"
      ],
      "hash": null,
      "artifact_id": "52c3400d-f5ca-4173-aa0c-c17ad569b20d"
    },
    {
      "module_id": "src.llmstruct.cli_commands",
      "path": "src/llmstruct/cli_commands.py",
      "category": "core",
      "module_doc": "CLI command processing and handlers.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize command processor.",
          "line_range": [
            33,
            72
          ],
          "parameters": [
            "self",
            "root_dir",
            "config",
            "utils"
          ],
          "decorators": []
        },
        {
          "name": "set_cache",
          "docstring": "Set cache instance.",
          "line_range": [
            74,
            76
          ],
          "parameters": [
            "self",
            "cache"
          ],
          "decorators": []
        },
        {
          "name": "set_copilot",
          "docstring": "Set Copilot manager instance.",
          "line_range": [
            78,
            80
          ],
          "parameters": [
            "self",
            "copilot_manager"
          ],
          "decorators": []
        },
        {
          "name": "process_command",
          "docstring": "Process a command starting with /.",
          "line_range": [
            82,
            98
          ],
          "parameters": [
            "self",
            "command_line"
          ],
          "decorators": []
        },
        {
          "name": "process_prompt",
          "docstring": "Process a regular user prompt (not a command).",
          "line_range": [
            100,
            152
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "cmd_help",
          "docstring": "Show help information.",
          "line_range": [
            154,
            217
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_workspace",
          "docstring": "Handle workspace state and permissions management.",
          "line_range": [
            219,
            334
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_mode",
          "docstring": "Handle context mode operations with workspace integration.",
          "line_range": [
            336,
            437
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_view",
          "docstring": "View file or directory contents.",
          "line_range": [
            439,
            478
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_write",
          "docstring": "Write content to a file.",
          "line_range": [
            480,
            505
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_queue",
          "docstring": "Handle queue operations.",
          "line_range": [
            507,
            549
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_cache",
          "docstring": "Handle cache operations.",
          "line_range": [
            551,
            590
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_copilot",
          "docstring": "Handle Copilot operations.",
          "line_range": [
            592,
            626
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_config",
          "docstring": "Handle configuration operations.",
          "line_range": [
            628,
            660
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_status",
          "docstring": "Show system status.",
          "line_range": [
            662,
            676
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_backup",
          "docstring": "Create backup of a file.",
          "line_range": [
            678,
            693
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_parse",
          "docstring": "Parse project structure.",
          "line_range": [
            695,
            715
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_audit",
          "docstring": "Handle audit operations.",
          "line_range": [
            717,
            743
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_auto_update",
          "docstring": "Handle auto-update operations.",
          "line_range": [
            745,
            765
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "handle_struct_status",
          "docstring": "Handle struct status operations.",
          "line_range": [
            767,
            791
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_context",
          "docstring": "Handle context operations.",
          "line_range": [
            793,
            849
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        },
        {
          "name": "cmd_session",
          "docstring": "Handle session operations.",
          "line_range": [
            851,
            902
          ],
          "parameters": [
            "self",
            "args"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CommandProcessor",
          "docstring": "Processes CLI commands and user prompts.",
          "line_range": [
            30,
            902
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize command processor.",
              "line_range": [
                33,
                72
              ],
              "parameters": [
                "self",
                "root_dir",
                "config",
                "utils"
              ]
            },
            {
              "name": "set_cache",
              "docstring": "Set cache instance.",
              "line_range": [
                74,
                76
              ],
              "parameters": [
                "self",
                "cache"
              ]
            },
            {
              "name": "set_copilot",
              "docstring": "Set Copilot manager instance.",
              "line_range": [
                78,
                80
              ],
              "parameters": [
                "self",
                "copilot_manager"
              ]
            },
            {
              "name": "process_command",
              "docstring": "Process a command starting with /.",
              "line_range": [
                82,
                98
              ],
              "parameters": [
                "self",
                "command_line"
              ]
            },
            {
              "name": "process_prompt",
              "docstring": "Process a regular user prompt (not a command).",
              "line_range": [
                100,
                152
              ],
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "cmd_help",
              "docstring": "Show help information.",
              "line_range": [
                154,
                217
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_workspace",
              "docstring": "Handle workspace state and permissions management.",
              "line_range": [
                219,
                334
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_mode",
              "docstring": "Handle context mode operations with workspace integration.",
              "line_range": [
                336,
                437
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_view",
              "docstring": "View file or directory contents.",
              "line_range": [
                439,
                478
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_write",
              "docstring": "Write content to a file.",
              "line_range": [
                480,
                505
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_queue",
              "docstring": "Handle queue operations.",
              "line_range": [
                507,
                549
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_cache",
              "docstring": "Handle cache operations.",
              "line_range": [
                551,
                590
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_copilot",
              "docstring": "Handle Copilot operations.",
              "line_range": [
                592,
                626
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_config",
              "docstring": "Handle configuration operations.",
              "line_range": [
                628,
                660
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_status",
              "docstring": "Show system status.",
              "line_range": [
                662,
                676
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_backup",
              "docstring": "Create backup of a file.",
              "line_range": [
                678,
                693
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_parse",
              "docstring": "Parse project structure.",
              "line_range": [
                695,
                715
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_audit",
              "docstring": "Handle audit operations.",
              "line_range": [
                717,
                743
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "handle_auto_update",
              "docstring": "Handle auto-update operations.",
              "line_range": [
                745,
                765
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "handle_struct_status",
              "docstring": "Handle struct status operations.",
              "line_range": [
                767,
                791
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_context",
              "docstring": "Handle context operations.",
              "line_range": [
                793,
                849
              ],
              "parameters": [
                "self",
                "args"
              ]
            },
            {
              "name": "cmd_session",
              "docstring": "Handle session operations.",
              "line_range": [
                851,
                902
              ],
              "parameters": [
                "self",
                "args"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "WorkspaceStateManager",
          "print"
        ],
        "set_cache": [],
        "set_copilot": [],
        "process_command": [
          "len",
          "command_line.strip",
          "print",
          "command_line.split",
          "logging.error"
        ],
        "process_prompt": [
          "context_data.get",
          "get_optimized_context",
          "len",
          "logging.error",
          "print",
          "CopilotEvent",
          "logging.info",
          "context_info.get",
          "prompt.strip",
          "logging.warning"
        ],
        "cmd_help": [
          "print"
        ],
        "cmd_workspace": [
          "result.get",
          "entry.get",
          "len",
          "state.get",
          "print",
          "boundaries.get",
          "override.get",
          "permissions.get",
          "action_args.split",
          "int",
          "logging.error",
          "args.strip"
        ],
        "cmd_mode": [
          "result.get",
          "args.lower",
          "len",
          "get_optimized_context",
          "context_data.get",
          "print",
          "re.findall",
          "permissions.get",
          "args.strip",
          "metrics.get",
          "args.upper"
        ],
        "cmd_view": [
          "os.listdir",
          "args.strip",
          "sorted",
          "print"
        ],
        "cmd_write": [
          "len",
          "content.startswith",
          "print",
          "content.endswith",
          "args.split"
        ],
        "cmd_queue": [
          "len",
          "print",
          "enumerate",
          "json.load",
          "cmd.get",
          "queue_data.get",
          "open",
          "args.strip",
          "os.remove"
        ],
        "cmd_cache": [
          "len",
          "print",
          "os.listdir",
          "stats.get",
          "args.strip"
        ],
        "cmd_copilot": [
          "print",
          "json.load",
          "open",
          "args.strip",
          "json.dumps"
        ],
        "cmd_config": [
          "json.dumps",
          "args.strip",
          "print"
        ],
        "cmd_status": [
          "print"
        ],
        "cmd_backup": [
          "args.strip",
          "print"
        ],
        "cmd_parse": [
          "generate_json",
          "print"
        ],
        "cmd_audit": [
          "args.strip",
          "print"
        ],
        "handle_auto_update": [
          "generate_json",
          "print"
        ],
        "handle_struct_status": [
          "len",
          "os.stat",
          "print",
          "struct_data.get",
          "json.load",
          "open",
          "datetime.fromtimestamp"
        ],
        "cmd_context": [
          "context_data.get",
          "len",
          "get_optimized_context",
          "print",
          "args.strip",
          "metrics.get"
        ],
        "cmd_session": [
          "len",
          "state.get",
          "print",
          "datetime.now",
          "args.strip"
        ]
      },
      "dependencies": [
        "Any",
        "CLIConfig",
        "CLIUtils",
        "CopilotContextManager",
        "CopilotEvent",
        "Dict",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "WorkspaceStateManager",
        "cli_config",
        "cli_utils",
        "copilot",
        "create_context_orchestrator",
        "datetime",
        "generate_json",
        "get_optimized_context",
        "get_optimized_context_for_scenario",
        "initialize_copilot",
        "json",
        "llmstruct.cache",
        "llmstruct.context_orchestrator",
        "llmstruct.copilot",
        "llmstruct.generators.json_generator",
        "logging",
        "os",
        "pathlib",
        "re",
        "subprocess",
        "sys",
        "trigger_copilot_event",
        "typing",
        "workspace"
      ],
      "hash": null,
      "artifact_id": "d6ead956-232d-4472-b9e5-55a16c891cb0"
    },
    {
      "module_id": "src.llmstruct.context_orchestrator",
      "path": "src/llmstruct/context_orchestrator.py",
      "category": "core",
      "module_doc": "Smart Context Orchestration for LLMStruct\nOptimizes context loading for different LLM usage scenarios",
      "functions": [
        {
          "name": "create_context_orchestrator",
          "docstring": "Factory function to create context orchestrator.",
          "line_range": [
            461,
            463
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "get_optimized_context",
          "docstring": "Get optimized context for scenario - convenience function.\n\nArgs:\n    project_root: Project root directory\n    scenario: Usage scenario (cli_direct, vscode_copilot, session_work)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
          "line_range": [
            466,
            498
          ],
          "parameters": [
            "project_root",
            "scenario",
            "file_path",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            57,
            75
          ],
          "parameters": [
            "self",
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load context orchestration configuration.",
          "line_range": [
            77,
            119
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_for_scenario",
          "docstring": "Get optimized context for specific usage scenario.\n\nArgs:\n    scenario: Usage scenario (cli_direct, vscode_copilot, etc.)\n    file_path: Optional file path for focused context\n    custom_budget: Optional custom token budget\n    \nReturns:\n    Optimized context dictionary",
          "line_range": [
            121,
            161
          ],
          "parameters": [
            "self",
            "scenario",
            "file_path",
            "custom_budget"
          ],
          "decorators": []
        },
        {
          "name": "_get_budget_for_scenario",
          "docstring": "Create budget configuration for scenario.",
          "line_range": [
            163,
            172
          ],
          "parameters": [
            "self",
            "scenario_config"
          ],
          "decorators": []
        },
        {
          "name": "_load_full_context",
          "docstring": "Load complete context without token restrictions.",
          "line_range": [
            174,
            187
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_focused_context",
          "docstring": "Load focused context optimized for VS Code Copilot.",
          "line_range": [
            189,
            230
          ],
          "parameters": [
            "self",
            "file_path",
            "budget"
          ],
          "decorators": []
        },
        {
          "name": "_load_session_context",
          "docstring": "Load session-specific context.",
          "line_range": [
            232,
            254
          ],
          "parameters": [
            "self",
            "budget"
          ],
          "decorators": []
        },
        {
          "name": "_load_minimal_context",
          "docstring": "Load minimal context for quick operations.",
          "line_range": [
            256,
            274
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_source_with_filtering",
          "docstring": "Load source with optional filtering based on budget.",
          "line_range": [
            276,
            299
          ],
          "parameters": [
            "self",
            "source_name",
            "budget"
          ],
          "decorators": []
        },
        {
          "name": "_get_file_context",
          "docstring": "Get context specific to a file.",
          "line_range": [
            301,
            312
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_extract_essential_parts",
          "docstring": "Extract essential parts of data to fit token budget.",
          "line_range": [
            314,
            336
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_filter_for_current_session",
          "docstring": "Filter data to items relevant to current session.",
          "line_range": [
            338,
            377
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_extract_summary",
          "docstring": "Extract summary information from data.",
          "line_range": [
            379,
            398
          ],
          "parameters": [
            "self",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "_apply_section_filtering",
          "docstring": "Apply section filtering to exclude specified sections.",
          "line_range": [
            400,
            412
          ],
          "parameters": [
            "self",
            "data",
            "exclude_sections"
          ],
          "decorators": []
        },
        {
          "name": "_update_metrics",
          "docstring": "Update performance metrics.",
          "line_range": [
            414,
            432
          ],
          "parameters": [
            "self",
            "scenario",
            "context",
            "load_time"
          ],
          "decorators": []
        },
        {
          "name": "get_metrics_summary",
          "docstring": "Get summary of context loading metrics.",
          "line_range": [
            434,
            449
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "save_metrics",
          "docstring": "Save metrics to file for analysis.",
          "line_range": [
            451,
            456
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ContextMode",
          "docstring": "Context loading modes for different scenarios.",
          "line_range": [
            17,
            22
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextLevel",
          "docstring": "Progressive context levels with token budgets.",
          "line_range": [
            25,
            30
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextBudget",
          "docstring": "Token budget configuration for context loading.",
          "line_range": [
            34,
            39
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "ContextMetrics",
          "docstring": "Metrics for context loading performance.",
          "line_range": [
            43,
            48
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "SmartContextOrchestrator",
          "docstring": "Orchestrates context loading based on usage scenario and token budget.\nProvides optimized context for different LLM integration patterns.",
          "line_range": [
            51,
            456
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                57,
                75
              ],
              "parameters": [
                "self",
                "project_root"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load context orchestration configuration.",
              "line_range": [
                77,
                119
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_for_scenario",
              "docstring": "Get optimized context for specific usage scenario.\n\nArgs:\n    scenario: Usage scenario (cli_direct, vscode_copilot, etc.)\n    file_path: Optional file path for focused context\n    custom_budget: Optional custom token budget\n    \nReturns:\n    Optimized context dictionary",
              "line_range": [
                121,
                161
              ],
              "parameters": [
                "self",
                "scenario",
                "file_path",
                "custom_budget"
              ]
            },
            {
              "name": "_get_budget_for_scenario",
              "docstring": "Create budget configuration for scenario.",
              "line_range": [
                163,
                172
              ],
              "parameters": [
                "self",
                "scenario_config"
              ]
            },
            {
              "name": "_load_full_context",
              "docstring": "Load complete context without token restrictions.",
              "line_range": [
                174,
                187
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_focused_context",
              "docstring": "Load focused context optimized for VS Code Copilot.",
              "line_range": [
                189,
                230
              ],
              "parameters": [
                "self",
                "file_path",
                "budget"
              ]
            },
            {
              "name": "_load_session_context",
              "docstring": "Load session-specific context.",
              "line_range": [
                232,
                254
              ],
              "parameters": [
                "self",
                "budget"
              ]
            },
            {
              "name": "_load_minimal_context",
              "docstring": "Load minimal context for quick operations.",
              "line_range": [
                256,
                274
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_source_with_filtering",
              "docstring": "Load source with optional filtering based on budget.",
              "line_range": [
                276,
                299
              ],
              "parameters": [
                "self",
                "source_name",
                "budget"
              ]
            },
            {
              "name": "_get_file_context",
              "docstring": "Get context specific to a file.",
              "line_range": [
                301,
                312
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_extract_essential_parts",
              "docstring": "Extract essential parts of data to fit token budget.",
              "line_range": [
                314,
                336
              ],
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_filter_for_current_session",
              "docstring": "Filter data to items relevant to current session.",
              "line_range": [
                338,
                377
              ],
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_extract_summary",
              "docstring": "Extract summary information from data.",
              "line_range": [
                379,
                398
              ],
              "parameters": [
                "self",
                "data"
              ]
            },
            {
              "name": "_apply_section_filtering",
              "docstring": "Apply section filtering to exclude specified sections.",
              "line_range": [
                400,
                412
              ],
              "parameters": [
                "self",
                "data",
                "exclude_sections"
              ]
            },
            {
              "name": "_update_metrics",
              "docstring": "Update performance metrics.",
              "line_range": [
                414,
                432
              ],
              "parameters": [
                "self",
                "scenario",
                "context",
                "load_time"
              ]
            },
            {
              "name": "get_metrics_summary",
              "docstring": "Get summary of context loading metrics.",
              "line_range": [
                434,
                449
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "save_metrics",
              "docstring": "Save metrics to file for analysis.",
              "line_range": [
                451,
                456
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self._load_config"
        ],
        "_load_config": [
          "json.load",
          "config_path.exists",
          "open"
        ],
        "get_context_for_scenario": [
          "self._load_session_context",
          "self._get_budget_for_scenario",
          "self._update_metrics",
          "self._load_minimal_context",
          "scenario_config.get",
          "ContextMode",
          "self._load_full_context",
          "self._load_focused_context",
          "time.time"
        ],
        "_get_budget_for_scenario": [
          "ContextBudget",
          "budget_config.get",
          "scenario_config.get"
        ],
        "_load_full_context": [
          "logger.warning",
          "json.load",
          "full_path.exists",
          "open"
        ],
        "_load_focused_context": [
          "len",
          "self._extract_essential_parts",
          "self._get_file_context",
          "self._load_source_with_filtering",
          "json.dumps"
        ],
        "_load_session_context": [
          "self._filter_for_current_session",
          "self._load_source_with_filtering"
        ],
        "_load_minimal_context": [
          "json.load",
          "logger.warning",
          "self._extract_summary",
          "source_path.exists",
          "open"
        ],
        "_load_source_with_filtering": [
          "self._apply_section_filtering",
          "json.load",
          "logger.warning",
          "source_path.exists",
          "open"
        ],
        "_get_file_context": [
          "Path"
        ],
        "_extract_essential_parts": [
          "task.get",
          "isinstance"
        ],
        "_filter_for_current_session": [
          "task.get",
          "current_session_path.exists",
          "json.load",
          "data.items",
          "logger.warning",
          "current_session.get",
          "open",
          "idea.get"
        ],
        "_extract_summary": [
          "t.get",
          "len",
          "isinstance"
        ],
        "_apply_section_filtering": [
          "data.items"
        ],
        "_update_metrics": [
          "len",
          "ContextMetrics",
          "context.get"
        ],
        "get_metrics_summary": [
          "len",
          "sum"
        ],
        "save_metrics": [
          "self.get_metrics_summary",
          "json.dump",
          "open"
        ],
        "create_context_orchestrator": [
          "SmartContextOrchestrator"
        ],
        "get_optimized_context": [
          "orchestrator.get_context_for_scenario",
          "ContextBudget",
          "create_context_orchestrator"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "List",
        "Optional",
        "Path",
        "Union",
        "dataclass",
        "dataclasses",
        "enum",
        "json",
        "logging",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "d106583e-6634-4a20-b8ad-4fbad477df31"
    },
    {
      "module_id": "src.llmstruct.__init__",
      "path": "src/llmstruct/__init__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "LLMClient",
        "llm_client"
      ],
      "hash": null,
      "artifact_id": "2f767ad9-6098-4d6a-ba4b-bc992911d13b"
    },
    {
      "module_id": "src.llmstruct.__main__",
      "path": "src/llmstruct/__main__.py",
      "category": "cli",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "llmstruct.cli",
        "main"
      ],
      "hash": null,
      "artifact_id": "fb8b2fd8-9cc0-4c0e-9860-fc9af9f4ff22"
    },
    {
      "module_id": "src.llmstruct.cli_utils",
      "path": "src/llmstruct/cli_utils.py",
      "category": "core",
      "module_doc": "CLI utility functions.",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize utils with root directory.",
          "line_range": [
            24,
            26
          ],
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read file content with size limit.",
          "line_range": [
            28,
            50
          ],
          "parameters": [
            "self",
            "file_path",
            "max_size"
          ],
          "decorators": []
        },
        {
          "name": "write_file_content",
          "docstring": "Write content to file.",
          "line_range": [
            52,
            70
          ],
          "parameters": [
            "self",
            "file_path",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "get_directory_structure",
          "docstring": "Get directory structure using folder generator.",
          "line_range": [
            72,
            115
          ],
          "parameters": [
            "self",
            "path",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "validate_json",
          "docstring": "Validate JSON content.",
          "line_range": [
            117,
            123
          ],
          "parameters": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "format_json",
          "docstring": "Format data as JSON string.",
          "line_range": [
            125,
            131
          ],
          "parameters": [
            "self",
            "data",
            "indent"
          ],
          "decorators": []
        },
        {
          "name": "generate_unique_id",
          "docstring": "Generate unique ID for commands, queues, etc.",
          "line_range": [
            133,
            137
          ],
          "parameters": [
            "self",
            "prefix"
          ],
          "decorators": []
        },
        {
          "name": "safe_path_join",
          "docstring": "Safely join path parts, preventing directory traversal.",
          "line_range": [
            139,
            149
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "file_exists",
          "docstring": "Check if file exists.",
          "line_range": [
            151,
            157
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "dir_exists",
          "docstring": "Check if directory exists.",
          "line_range": [
            159,
            165
          ],
          "parameters": [
            "self",
            "dir_path"
          ],
          "decorators": []
        },
        {
          "name": "get_file_size",
          "docstring": "Get file size in bytes.",
          "line_range": [
            167,
            173
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_file",
          "docstring": "Create backup of file with timestamp.",
          "line_range": [
            175,
            191
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "cleanup_old_backups",
          "docstring": "Clean up old backup files, keeping only the most recent ones.",
          "line_range": [
            193,
            222
          ],
          "parameters": [
            "self",
            "file_path",
            "keep_count"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLIUtils",
          "docstring": "Utility functions for CLI operations.",
          "line_range": [
            21,
            222
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize utils with root directory.",
              "line_range": [
                24,
                26
              ],
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "read_file_content",
              "docstring": "Read file content with size limit.",
              "line_range": [
                28,
                50
              ],
              "parameters": [
                "self",
                "file_path",
                "max_size"
              ]
            },
            {
              "name": "write_file_content",
              "docstring": "Write content to file.",
              "line_range": [
                52,
                70
              ],
              "parameters": [
                "self",
                "file_path",
                "content"
              ]
            },
            {
              "name": "get_directory_structure",
              "docstring": "Get directory structure using folder generator.",
              "line_range": [
                72,
                115
              ],
              "parameters": [
                "self",
                "path",
                "gitignore_patterns",
                "include_patterns",
                "exclude_patterns",
                "exclude_dirs"
              ]
            },
            {
              "name": "validate_json",
              "docstring": "Validate JSON content.",
              "line_range": [
                117,
                123
              ],
              "parameters": [
                "self",
                "content"
              ]
            },
            {
              "name": "format_json",
              "docstring": "Format data as JSON string.",
              "line_range": [
                125,
                131
              ],
              "parameters": [
                "self",
                "data",
                "indent"
              ]
            },
            {
              "name": "generate_unique_id",
              "docstring": "Generate unique ID for commands, queues, etc.",
              "line_range": [
                133,
                137
              ],
              "parameters": [
                "self",
                "prefix"
              ]
            },
            {
              "name": "safe_path_join",
              "docstring": "Safely join path parts, preventing directory traversal.",
              "line_range": [
                139,
                149
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "file_exists",
              "docstring": "Check if file exists.",
              "line_range": [
                151,
                157
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "dir_exists",
              "docstring": "Check if directory exists.",
              "line_range": [
                159,
                165
              ],
              "parameters": [
                "self",
                "dir_path"
              ]
            },
            {
              "name": "get_file_size",
              "docstring": "Get file size in bytes.",
              "line_range": [
                167,
                173
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "backup_file",
              "docstring": "Create backup of file with timestamp.",
              "line_range": [
                175,
                191
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "cleanup_old_backups",
              "docstring": "Clean up old backup files, keeping only the most recent ones.",
              "line_range": [
                193,
                222
              ],
              "parameters": [
                "self",
                "file_path",
                "keep_count"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [],
        "read_file_content": [
          "os.stat",
          "f.read",
          "open",
          "logging.error",
          "logging.warning"
        ],
        "write_file_content": [
          "Path",
          "logging.info",
          "f.write",
          "open",
          "logging.error"
        ],
        "get_directory_structure": [
          "os.listdir",
          "logging.error",
          "sorted",
          "get_folder_structure"
        ],
        "validate_json": [
          "json.loads",
          "str"
        ],
        "format_json": [
          "logging.error",
          "str",
          "json.dumps"
        ],
        "generate_unique_id": [
          "int",
          "uuid.uuid4",
          "time.time",
          "str"
        ],
        "safe_path_join": [
          "ValueError",
          "resolved_path.startswith"
        ],
        "file_exists": [
          "self.safe_path_join"
        ],
        "dir_exists": [
          "self.safe_path_join"
        ],
        "get_file_size": [
          "self.safe_path_join"
        ],
        "backup_file": [
          "dst.write",
          "self.safe_path_join",
          "open",
          "int",
          "logging.error",
          "time.time",
          "src.read"
        ],
        "cleanup_old_backups": [
          "backups.sort",
          "self.safe_path_join",
          "logging.info",
          "filename.split",
          "os.listdir",
          "backups.append",
          "int",
          "logging.error",
          "os.remove",
          "filename.startswith",
          "logging.warning"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "get_folder_structure",
        "json",
        "llmstruct.generators.json_generator",
        "logging",
        "os",
        "pathlib",
        "time",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "7b73a56a-9978-4a35-a4f1-9e6ed3024d6e"
    },
    {
      "module_id": "src.llmstruct.copilot",
      "path": "src/llmstruct/copilot.py",
      "category": "core",
      "module_doc": "LLMStruct Copilot Integration Module\nProvides context-aware development assistance with hybrid copilot capabilities.",
      "functions": [
        {
          "name": "initialize_copilot",
          "docstring": "Initialize copilot context manager for the project.\n\nArgs:\n    project_root: Project root directory\n\nReturns:\n    Configured CopilotContextManager instance",
          "line_range": [
            649,
            659
          ],
          "parameters": [
            "project_root"
          ],
          "decorators": []
        },
        {
          "name": "trigger_copilot_event",
          "docstring": "Trigger a copilot event and get relevant context.\n\nArgs:\n    manager: CopilotContextManager instance\n    event_type: Type of event\n    file_path: Optional file path\n    **kwargs: Additional event metadata\n\nReturns:\n    Dict with event context",
          "line_range": [
            662,
            679
          ],
          "parameters": [
            "manager",
            "event_type",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "smart_suggest",
          "docstring": "Get smart suggestions based on query and context.\n\nArgs:\n    manager: CopilotContextManager instance\n    query: Query string\n    context: Context type (code, workflow, task, etc.)\n\nReturns:\n    List of suggestions",
          "line_range": [
            682,
            702
          ],
          "parameters": [
            "manager",
            "query",
            "context"
          ],
          "decorators": []
        },
        {
          "name": "get_optimized_context_for_scenario",
          "docstring": "Get optimized context for specific scenario - standalone function.\n\nArgs:\n    project_root: Project root directory\n    scenario: Usage scenario (vscode_copilot, cli_direct, etc.)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
          "line_range": [
            705,
            728
          ],
          "parameters": [
            "project_root",
            "scenario",
            "file_path",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize the Copilot Context Manager.\n\nArgs:\n    project_root: Project root directory\n    config_path: Path to copilot_init.json",
          "line_range": [
            68,
            90
          ],
          "parameters": [
            "self",
            "project_root",
            "config_path"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load copilot configuration from JSON file.",
          "line_range": [
            92,
            104
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_initialize_layers",
          "docstring": "Initialize context layers from configuration.",
          "line_range": [
            106,
            116
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "load_context_layer",
          "docstring": "Load a specific context layer.\n\nArgs:\n    layer_name: Name of the layer to load\n    force: Force reload if already loaded\n\nReturns:\n    bool: True if successful",
          "line_range": [
            118,
            160
          ],
          "parameters": [
            "self",
            "layer_name",
            "force"
          ],
          "decorators": []
        },
        {
          "name": "unload_context_layer",
          "docstring": "Unload a context layer to free memory.\n\nArgs:\n    layer_name: Name of the layer to unload\n\nReturns:\n    bool: True if successful",
          "line_range": [
            162,
            180
          ],
          "parameters": [
            "self",
            "layer_name"
          ],
          "decorators": []
        },
        {
          "name": "get_optimized_context",
          "docstring": "Get optimized context using Smart Context Orchestrator.\n\nArgs:\n    scenario: Usage scenario (vscode_copilot, cli_direct, etc.)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
          "line_range": [
            182,
            225
          ],
          "parameters": [
            "self",
            "scenario",
            "file_path",
            "max_tokens"
          ],
          "decorators": []
        },
        {
          "name": "_get_legacy_context",
          "docstring": "Fallback to legacy context loading.",
          "line_range": [
            227,
            235
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_for_vscode",
          "docstring": "Get optimized context specifically for VS Code Copilot integration.\n\nArgs:\n    file_path: Optional file path for focused context\n    \nReturns:\n    Token-optimized context for VS Code",
          "line_range": [
            237,
            251
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "get_context_for_event",
          "docstring": "Get relevant context for a copilot event using Smart Context Orchestrator.\n\nArgs:\n    event: The copilot event\n\nReturns:\n    Dict containing relevant context",
          "line_range": [
            252,
            296
          ],
          "parameters": [
            "self",
            "event"
          ],
          "decorators": []
        },
        {
          "name": "_get_legacy_event_context",
          "docstring": "Legacy event context loading as fallback.",
          "line_range": [
            298,
            350
          ],
          "parameters": [
            "self",
            "event"
          ],
          "decorators": []
        },
        {
          "name": "suggest_completion",
          "docstring": "Generate context-aware code completions.\n\nArgs:\n    current_code: Current code content\n    file_path: Path to the current file\n    cursor_position: Cursor position in the code\n\nReturns:\n    List of completion suggestions",
          "line_range": [
            352,
            397
          ],
          "parameters": [
            "self",
            "current_code",
            "file_path",
            "cursor_position"
          ],
          "decorators": []
        },
        {
          "name": "validate_change",
          "docstring": "Validate a code change against safety rules.\n\nArgs:\n    file_path: Path to the changed file\n    change_type: Type of change (create, edit, delete)\n\nReturns:\n    Dict with validation results",
          "line_range": [
            399,
            445
          ],
          "parameters": [
            "self",
            "file_path",
            "change_type"
          ],
          "decorators": []
        },
        {
          "name": "_matches_scope",
          "docstring": "Check if file matches scope pattern.",
          "line_range": [
            447,
            452
          ],
          "parameters": [
            "self",
            "file_path",
            "scope"
          ],
          "decorators": []
        },
        {
          "name": "_matches_trigger",
          "docstring": "Check if change type matches trigger.",
          "line_range": [
            454,
            463
          ],
          "parameters": [
            "self",
            "change_type",
            "trigger"
          ],
          "decorators": []
        },
        {
          "name": "_validate_json_schema",
          "docstring": "Validate JSON file against schema.",
          "line_range": [
            465,
            480
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_check_circular_dependencies",
          "docstring": "Check for circular dependencies.",
          "line_range": [
            482,
            507
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "_validate_task_references",
          "docstring": "Validate task references in tasks.json.",
          "line_range": [
            509,
            536
          ],
          "parameters": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "get_workflow_suggestions",
          "docstring": "Get workflow suggestions based on current command context.\n\nArgs:\n    command: Current command or operation\n\nReturns:\n    List of workflow suggestions",
          "line_range": [
            538,
            568
          ],
          "parameters": [
            "self",
            "command"
          ],
          "decorators": []
        },
        {
          "name": "refresh_all_contexts",
          "docstring": "Refresh all loaded context layers.\n\nReturns:\n    bool: True if successful",
          "line_range": [
            570,
            584
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_context_status",
          "docstring": "Get status of all context layers.\n\nReturns:\n    Dict with context status information",
          "line_range": [
            586,
            607
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "export_context",
          "docstring": "Export context in specified format.\n\nArgs:\n    layers: List of layers to export (None for all loaded)\n    format: Export format (json, yaml, etc.)\n\nReturns:\n    Exported context as string",
          "line_range": [
            609,
            631
          ],
          "parameters": [
            "self",
            "layers",
            "format"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Clean up resources.",
          "line_range": [
            633,
            643
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "ContextLayer",
          "docstring": "Context layer priorities for copilot integration.",
          "line_range": [
            22,
            28
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "AttachMode",
          "docstring": "Context attachment modes.",
          "line_range": [
            31,
            37
          ],
          "methods": [],
          "bases": [
            "Enum"
          ]
        },
        {
          "name": "ContextLayerConfig",
          "docstring": "Configuration for a context layer.",
          "line_range": [
            41,
            49
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "CopilotEvent",
          "docstring": "Represents a copilot event for context triggering.",
          "line_range": [
            53,
            59
          ],
          "methods": [],
          "bases": []
        },
        {
          "name": "CopilotContextManager",
          "docstring": "Manages context layers and integration with GitHub Copilot.\nProvides intelligent context loading and workflow assistance.",
          "line_range": [
            62,
            643
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize the Copilot Context Manager.\n\nArgs:\n    project_root: Project root directory\n    config_path: Path to copilot_init.json",
              "line_range": [
                68,
                90
              ],
              "parameters": [
                "self",
                "project_root",
                "config_path"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load copilot configuration from JSON file.",
              "line_range": [
                92,
                104
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_initialize_layers",
              "docstring": "Initialize context layers from configuration.",
              "line_range": [
                106,
                116
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "load_context_layer",
              "docstring": "Load a specific context layer.\n\nArgs:\n    layer_name: Name of the layer to load\n    force: Force reload if already loaded\n\nReturns:\n    bool: True if successful",
              "line_range": [
                118,
                160
              ],
              "parameters": [
                "self",
                "layer_name",
                "force"
              ]
            },
            {
              "name": "unload_context_layer",
              "docstring": "Unload a context layer to free memory.\n\nArgs:\n    layer_name: Name of the layer to unload\n\nReturns:\n    bool: True if successful",
              "line_range": [
                162,
                180
              ],
              "parameters": [
                "self",
                "layer_name"
              ]
            },
            {
              "name": "get_optimized_context",
              "docstring": "Get optimized context using Smart Context Orchestrator.\n\nArgs:\n    scenario: Usage scenario (vscode_copilot, cli_direct, etc.)\n    file_path: Optional file path for focused context\n    max_tokens: Optional token limit override\n    \nReturns:\n    Optimized context dictionary",
              "line_range": [
                182,
                225
              ],
              "parameters": [
                "self",
                "scenario",
                "file_path",
                "max_tokens"
              ]
            },
            {
              "name": "_get_legacy_context",
              "docstring": "Fallback to legacy context loading.",
              "line_range": [
                227,
                235
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_for_vscode",
              "docstring": "Get optimized context specifically for VS Code Copilot integration.\n\nArgs:\n    file_path: Optional file path for focused context\n    \nReturns:\n    Token-optimized context for VS Code",
              "line_range": [
                237,
                251
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "get_context_for_event",
              "docstring": "Get relevant context for a copilot event using Smart Context Orchestrator.\n\nArgs:\n    event: The copilot event\n\nReturns:\n    Dict containing relevant context",
              "line_range": [
                252,
                296
              ],
              "parameters": [
                "self",
                "event"
              ]
            },
            {
              "name": "_get_legacy_event_context",
              "docstring": "Legacy event context loading as fallback.",
              "line_range": [
                298,
                350
              ],
              "parameters": [
                "self",
                "event"
              ]
            },
            {
              "name": "suggest_completion",
              "docstring": "Generate context-aware code completions.\n\nArgs:\n    current_code: Current code content\n    file_path: Path to the current file\n    cursor_position: Cursor position in the code\n\nReturns:\n    List of completion suggestions",
              "line_range": [
                352,
                397
              ],
              "parameters": [
                "self",
                "current_code",
                "file_path",
                "cursor_position"
              ]
            },
            {
              "name": "validate_change",
              "docstring": "Validate a code change against safety rules.\n\nArgs:\n    file_path: Path to the changed file\n    change_type: Type of change (create, edit, delete)\n\nReturns:\n    Dict with validation results",
              "line_range": [
                399,
                445
              ],
              "parameters": [
                "self",
                "file_path",
                "change_type"
              ]
            },
            {
              "name": "_matches_scope",
              "docstring": "Check if file matches scope pattern.",
              "line_range": [
                447,
                452
              ],
              "parameters": [
                "self",
                "file_path",
                "scope"
              ]
            },
            {
              "name": "_matches_trigger",
              "docstring": "Check if change type matches trigger.",
              "line_range": [
                454,
                463
              ],
              "parameters": [
                "self",
                "change_type",
                "trigger"
              ]
            },
            {
              "name": "_validate_json_schema",
              "docstring": "Validate JSON file against schema.",
              "line_range": [
                465,
                480
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_check_circular_dependencies",
              "docstring": "Check for circular dependencies.",
              "line_range": [
                482,
                507
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "_validate_task_references",
              "docstring": "Validate task references in tasks.json.",
              "line_range": [
                509,
                536
              ],
              "parameters": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "get_workflow_suggestions",
              "docstring": "Get workflow suggestions based on current command context.\n\nArgs:\n    command: Current command or operation\n\nReturns:\n    List of workflow suggestions",
              "line_range": [
                538,
                568
              ],
              "parameters": [
                "self",
                "command"
              ]
            },
            {
              "name": "refresh_all_contexts",
              "docstring": "Refresh all loaded context layers.\n\nReturns:\n    bool: True if successful",
              "line_range": [
                570,
                584
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_context_status",
              "docstring": "Get status of all context layers.\n\nReturns:\n    Dict with context status information",
              "line_range": [
                586,
                607
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "export_context",
              "docstring": "Export context in specified format.\n\nArgs:\n    layers: List of layers to export (None for all loaded)\n    format: Export format (json, yaml, etc.)\n\nReturns:\n    Exported context as string",
              "line_range": [
                609,
                631
              ],
              "parameters": [
                "self",
                "layers",
                "format"
              ]
            },
            {
              "name": "close",
              "docstring": "Clean up resources.",
              "line_range": [
                633,
                643
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "JSONCache",
          "self._initialize_layers",
          "create_context_orchestrator",
          "os.getcwd",
          "self._load_config",
          "str"
        ],
        "_load_config": [
          "Path",
          "logger.info",
          "json.load",
          "logger.warning",
          "open",
          "logger.error"
        ],
        "_initialize_layers": [
          "ContextLayerConfig",
          "layer_config.get",
          "layers_config.items"
        ],
        "load_context_layer": [
          "logger.info",
          "json.load",
          "logger.debug",
          "logger.warning",
          "source_path.exists",
          "open",
          "time.time",
          "logger.error"
        ],
        "unload_context_layer": [
          "logger.info"
        ],
        "get_optimized_context": [
          "self._get_legacy_context",
          "scenario_mapping.get",
          "logger.error"
        ],
        "_get_legacy_context": [
          "self.load_context_layer"
        ],
        "get_context_for_vscode": [
          "self.get_optimized_context"
        ],
        "get_context_for_event": [
          "self.get_optimized_context",
          "scenario_mapping.get",
          "logger.error",
          "self._get_legacy_event_context"
        ],
        "_get_legacy_event_context": [
          "code_triggers.get",
          "json.load",
          "triggers.get",
          "source_path.exists",
          "open",
          "self.load_context_layer",
          "file_triggers.get",
          "workflow_triggers.get",
          "logger.error"
        ],
        "suggest_completion": [
          "func.get",
          "Path",
          "current_module.get",
          "suggestions.append",
          "struct_context.get",
          "self.load_context_layer",
          "str",
          "module.get"
        ],
        "validate_change": [
          "result.get",
          "len",
          "self._matches_scope",
          "self._check_circular_dependencies",
          "rule.get",
          "safety_features.get",
          "self._validate_task_references",
          "self._matches_trigger",
          "self._validate_json_schema"
        ],
        "_matches_scope": [
          "fnmatch",
          "Path",
          "str"
        ],
        "_matches_trigger": [
          "trigger_map.get"
        ],
        "_validate_json_schema": [
          "file_path.endswith",
          "json.load",
          "open"
        ],
        "_check_circular_dependencies": [
          "Path",
          "len",
          "struct_data.get",
          "self.load_context_layer",
          "str",
          "module.get"
        ],
        "_validate_task_references": [
          "task_ids.add",
          "task.get",
          "json.load",
          "file_path.endswith",
          "set",
          "tasks_data.get",
          "open"
        ],
        "get_workflow_suggestions": [
          "suggestions.append",
          "workflows.items",
          "command.lower",
          "workflow.get",
          "self.load_context_layer",
          "suggestions.extend"
        ],
        "refresh_all_contexts": [
          "self.load_context_layer",
          "logger.info",
          "list"
        ],
        "get_context_status": [
          "list"
        ],
        "export_context": [
          "json.dumps",
          "str",
          "list"
        ],
        "close": [
          "logger.info",
          "hasattr"
        ],
        "initialize_copilot": [
          "CopilotContextManager"
        ],
        "trigger_copilot_event": [
          "CopilotEvent",
          "manager.get_context_for_event"
        ],
        "smart_suggest": [
          "manager.get_workflow_suggestions"
        ],
        "get_optimized_context_for_scenario": [
          "manager.get_optimized_context",
          "initialize_copilot",
          "manager.close",
          "locals"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Enum",
        "JSONCache",
        "List",
        "Optional",
        "Path",
        "SmartContextOrchestrator",
        "Union",
        "create_context_orchestrator",
        "dataclass",
        "dataclasses",
        "enum",
        "fnmatch",
        "json",
        "llmstruct.cache",
        "llmstruct.context_orchestrator",
        "logging",
        "os",
        "pathlib",
        "time",
        "typing"
      ],
      "hash": null,
      "artifact_id": "945c9bdd-57e7-4583-b7db-a9abde6d4415"
    },
    {
      "module_id": "src.llmstruct.gh_view",
      "path": "src/llmstruct/gh_view.py",
      "category": "core",
      "module_doc": "GitHub visualization/graph feature (gh-view-v1)\nExport consolidated tasks/ideas from JSON files to GitHub Project cards",
      "functions": [
        {
          "name": "main",
          "docstring": "Main entry point for GitHub Projects export",
          "line_range": [
            177,
            208
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize exporter with configuration",
          "line_range": [
            19,
            25
          ],
          "parameters": [
            "self",
            "config_path"
          ],
          "decorators": []
        },
        {
          "name": "_load_config",
          "docstring": "Load configuration from TOML file",
          "line_range": [
            27,
            35
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_mapping",
          "docstring": "Load existing ID mapping between local and GitHub",
          "line_range": [
            37,
            45
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_mapping",
          "docstring": "Save ID mapping to file",
          "line_range": [
            47,
            53
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_run_gh_command",
          "docstring": "Run GitHub CLI command and return success status and output",
          "line_range": [
            55,
            68
          ],
          "parameters": [
            "self",
            "command"
          ],
          "decorators": []
        },
        {
          "name": "load_official_data",
          "docstring": "Load tasks and ideas from official JSON files",
          "line_range": [
            70,
            98
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "format_task_for_github",
          "docstring": "Format task data for GitHub Project card",
          "line_range": [
            100,
            137
          ],
          "parameters": [
            "self",
            "task"
          ],
          "decorators": []
        },
        {
          "name": "format_idea_for_github",
          "docstring": "Format idea data for GitHub Project card",
          "line_range": [
            139,
            174
          ],
          "parameters": [
            "self",
            "idea"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubProjectsExporter",
          "docstring": "Export tasks and ideas to GitHub Projects as cards",
          "line_range": [
            16,
            174
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize exporter with configuration",
              "line_range": [
                19,
                25
              ],
              "parameters": [
                "self",
                "config_path"
              ]
            },
            {
              "name": "_load_config",
              "docstring": "Load configuration from TOML file",
              "line_range": [
                27,
                35
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_mapping",
              "docstring": "Load existing ID mapping between local and GitHub",
              "line_range": [
                37,
                45
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_mapping",
              "docstring": "Save ID mapping to file",
              "line_range": [
                47,
                53
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_run_gh_command",
              "docstring": "Run GitHub CLI command and return success status and output",
              "line_range": [
                55,
                68
              ],
              "parameters": [
                "self",
                "command"
              ]
            },
            {
              "name": "load_official_data",
              "docstring": "Load tasks and ideas from official JSON files",
              "line_range": [
                70,
                98
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "format_task_for_github",
              "docstring": "Format task data for GitHub Project card",
              "line_range": [
                100,
                137
              ],
              "parameters": [
                "self",
                "task"
              ]
            },
            {
              "name": "format_idea_for_github",
              "docstring": "Format idea data for GitHub Project card",
              "line_range": [
                139,
                174
              ],
              "parameters": [
                "self",
                "idea"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self._load_mapping",
          "self._load_config",
          "Path"
        ],
        "_load_config": [
          "config.get",
          "toml.load",
          "print",
          "open"
        ],
        "_load_mapping": [
          "json.load",
          "open"
        ],
        "_save_mapping": [
          "print",
          "json.dump",
          "open"
        ],
        "_run_gh_command": [
          "subprocess.run"
        ],
        "load_official_data": [
          "len",
          "ideas_data.get",
          "ideas_file.exists",
          "print",
          "tasks_file.exists",
          "json.load",
          "open",
          "tasks_data.get"
        ],
        "format_task_for_github": [
          "task.get",
          "body_parts.append",
          "status_map.get"
        ],
        "format_idea_for_github": [
          "idea.get",
          "body_parts.append",
          "status_map.get"
        ],
        "main": [
          "exporter.load_official_data",
          "len",
          "GitHubProjectsExporter",
          "print",
          "exporter.format_idea_for_github",
          "sys.exit",
          "exporter.format_task_for_github"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "datetime",
        "json",
        "pathlib",
        "subprocess",
        "sys",
        "toml",
        "typing"
      ],
      "hash": null,
      "artifact_id": "51aeeff3-abd1-4d46-980f-62446a2558ec"
    },
    {
      "module_id": "src.llmstruct.llm_client",
      "path": "src/llmstruct/llm_client.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize LLMClient with optional Ollama host.",
          "line_range": [
            28,
            36
          ],
          "parameters": [
            "self",
            "ollama_host"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt, context, and optional model.",
          "line_range": [
            38,
            86
          ],
          "parameters": [
            "self",
            "prompt",
            "context_path",
            "mode",
            "model",
            "artifact_ids"
          ],
          "decorators": []
        },
        {
          "name": "_query_grok",
          "docstring": "Query Grok API.",
          "line_range": [
            88,
            115
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_anthropic",
          "docstring": "Query Anthropic API.",
          "line_range": [
            117,
            141
          ],
          "parameters": [
            "self",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "_query_ollama",
          "docstring": "Query Ollama API with specified model.",
          "line_range": [
            143,
            156
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        },
        {
          "name": "_query_hybrid",
          "docstring": "Query multiple LLMs and combine results.",
          "line_range": [
            158,
            172
          ],
          "parameters": [
            "self",
            "prompt",
            "model"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "LLMClient",
          "docstring": "",
          "line_range": [
            27,
            172
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize LLMClient with optional Ollama host.",
              "line_range": [
                28,
                36
              ],
              "parameters": [
                "self",
                "ollama_host"
              ]
            },
            {
              "name": "query",
              "docstring": "Query LLMs with prompt, context, and optional model.",
              "line_range": [
                38,
                86
              ],
              "parameters": [
                "self",
                "prompt",
                "context_path",
                "mode",
                "model",
                "artifact_ids"
              ]
            },
            {
              "name": "_query_grok",
              "docstring": "Query Grok API.",
              "line_range": [
                88,
                115
              ],
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_anthropic",
              "docstring": "Query Anthropic API.",
              "line_range": [
                117,
                141
              ],
              "parameters": [
                "self",
                "prompt"
              ]
            },
            {
              "name": "_query_ollama",
              "docstring": "Query Ollama API with specified model.",
              "line_range": [
                143,
                156
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            },
            {
              "name": "_query_hybrid",
              "docstring": "Query multiple LLMs and combine results.",
              "line_range": [
                158,
                172
              ],
              "parameters": [
                "self",
                "prompt",
                "model"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "int",
          "logging.info",
          "os.getenv"
        ],
        "query": [
          "range",
          "self._query_hybrid",
          "Path",
          "self._query_grok",
          "logging.info",
          "json.load",
          "asyncio.sleep",
          "self._query_anthropic",
          "logging.error",
          "self._query_ollama",
          "logging.warning",
          "json.dumps"
        ],
        "_query_grok": [
          "aiohttp.ClientSession",
          "result.get",
          "logging.info",
          "response.json",
          "session.post",
          "logging.error"
        ],
        "_query_anthropic": [
          "aiohttp.ClientSession",
          "result.get",
          "logging.info",
          "response.json",
          "session.post",
          "logging.error"
        ],
        "_query_ollama": [
          "aiohttp.ClientSession",
          "result.get",
          "logging.info",
          "logging.debug",
          "response.json",
          "session.post",
          "logging.error"
        ],
        "_query_hybrid": [
          "asyncio.gather",
          "len",
          "self._query_grok",
          "logging.info",
          "self._query_anthropic",
          "self._query_ollama",
          "isinstance"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "aiohttp",
        "asyncio",
        "dotenv",
        "json",
        "load_dotenv",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "246f7401-6a04-47e3-84b1-6e1e0de7a4d9"
    },
    {
      "module_id": "src.llmstruct.cache",
      "path": "src/llmstruct/cache.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "Initialize SQLite cache for JSON files.",
          "line_range": [
            21,
            25
          ],
          "parameters": [
            "self",
            "db_path"
          ],
          "decorators": []
        },
        {
          "name": "create_tables",
          "docstring": "Create tables for metadata and file paths.",
          "line_range": [
            27,
            49
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cache_json",
          "docstring": "Cache JSON metadata and store full file path.",
          "line_range": [
            51,
            90
          ],
          "parameters": [
            "self",
            "json_path",
            "artifact_id",
            "summary",
            "tags"
          ],
          "decorators": []
        },
        {
          "name": "get_metadata",
          "docstring": "Retrieve metadata by artifact_id.",
          "line_range": [
            92,
            108
          ],
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "get_full_json",
          "docstring": "Load full JSON by artifact_id.",
          "line_range": [
            110,
            126
          ],
          "parameters": [
            "self",
            "artifact_id"
          ],
          "decorators": []
        },
        {
          "name": "close",
          "docstring": "Close database connection.",
          "line_range": [
            128,
            130
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JSONCache",
          "docstring": "",
          "line_range": [
            20,
            130
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize SQLite cache for JSON files.",
              "line_range": [
                21,
                25
              ],
              "parameters": [
                "self",
                "db_path"
              ]
            },
            {
              "name": "create_tables",
              "docstring": "Create tables for metadata and file paths.",
              "line_range": [
                27,
                49
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cache_json",
              "docstring": "Cache JSON metadata and store full file path.",
              "line_range": [
                51,
                90
              ],
              "parameters": [
                "self",
                "json_path",
                "artifact_id",
                "summary",
                "tags"
              ]
            },
            {
              "name": "get_metadata",
              "docstring": "Retrieve metadata by artifact_id.",
              "line_range": [
                92,
                108
              ],
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "get_full_json",
              "docstring": "Load full JSON by artifact_id.",
              "line_range": [
                110,
                126
              ],
              "parameters": [
                "self",
                "artifact_id"
              ]
            },
            {
              "name": "close",
              "docstring": "Close database connection.",
              "line_range": [
                128,
                130
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "self.create_tables",
          "sqlite3.connect"
        ],
        "create_tables": [],
        "cache_json": [
          "Path",
          "hashlib.sha256",
          "f.read",
          "logging.info",
          "content.encode",
          "open",
          "logging.error",
          "json_file.exists",
          "str",
          "json.dumps"
        ],
        "get_metadata": [
          "json.loads",
          "cursor.fetchone"
        ],
        "get_full_json": [
          "logging.error",
          "open",
          "json.load",
          "cursor.fetchone"
        ],
        "close": []
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "hashlib",
        "json",
        "logging",
        "pathlib",
        "sqlite3",
        "typing"
      ],
      "hash": null,
      "artifact_id": "bfed92e6-7fb1-4f38-a633-99e2fe69f089"
    },
    {
      "module_id": "src.llmstruct.self_run",
      "path": "src/llmstruct/self_run.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_struct",
          "docstring": "Filter struct.json or init.json based on prompt keywords. Supports dict or list as root.",
          "line_range": [
            20,
            71
          ],
          "parameters": [
            "struct",
            "prompt"
          ],
          "decorators": []
        },
        {
          "name": "attach_to_llm_request",
          "docstring": "Attach filtered JSON to LLM prompt, using cache if available.",
          "line_range": [
            74,
            114
          ],
          "parameters": [
            "context_path",
            "prompt",
            "cache"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_struct": [
          "struct.get",
          "item.get",
          "filter_json",
          "prompt.lower",
          "module.get",
          "any",
          "str",
          "isinstance"
        ],
        "attach_to_llm_request": [
          "Path",
          "logging.info",
          "filter_json",
          "select_json",
          "prompt.lower",
          "cache.get_full_json",
          "json.dumps",
          "cache.get_metadata",
          "logging.error",
          "context_file.exists",
          "cache.cache_json",
          "filter_struct"
        ]
      },
      "dependencies": [
        "Any",
        "JSONCache",
        "Optional",
        "Path",
        "cache",
        "filter_json",
        "json",
        "json_selector",
        "logging",
        "pathlib",
        "select_json",
        "typing"
      ],
      "hash": null,
      "artifact_id": "068a4a68-7801-4572-9309-6b6d92ac9016"
    },
    {
      "module_id": "src.llmstruct.json_selector",
      "path": "src/llmstruct/json_selector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "filter_json",
          "docstring": "Filter JSON data by key-value pair and select fields.",
          "line_range": [
            20,
            46
          ],
          "parameters": [
            "data",
            "filter_key",
            "filter_value",
            "fields"
          ],
          "decorators": []
        },
        {
          "name": "select_json",
          "docstring": "Load and filter JSON file, optionally parsing partially.",
          "line_range": [
            49,
            116
          ],
          "parameters": [
            "json_path",
            "filter_key",
            "filter_value",
            "fields",
            "partial"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "filter_json": [
          "data.get",
          "item.get",
          "filtered.append",
          "isinstance"
        ],
        "select_json": [
          "ijson.parse",
          "Path",
          "prefix.startswith",
          "filtered.append",
          "json.load",
          "filter_json",
          "path.append",
          "open",
          "current_item.get",
          "logging.error",
          "f.seek",
          "json_file.exists"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "argparse",
        "ijson",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "73e96456-9576-4ade-8ca4-a48e1a31e9d9"
    },
    {
      "module_id": "src.llmstruct.cli",
      "path": "src/llmstruct/cli.py",
      "category": "core",
      "module_doc": "LLMStruct CLI - Main entry point for the command-line interface.",
      "functions": [
        {
          "name": "load_gitignore",
          "docstring": "Load and normalize patterns from .gitignore.",
          "line_range": [
            43,
            57
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "Load settings from llmstruct.toml or return empty dict.",
          "line_range": [
            60,
            69
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "read_file_content",
          "docstring": "Read content of a file if it exists and is a text file.",
          "line_range": [
            72,
            81
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "write_to_file",
          "docstring": "Write content to a file in base_dir (default ./tmp) and return the path.",
          "line_range": [
            84,
            104
          ],
          "parameters": [
            "content",
            "filename",
            "base_dir"
          ],
          "decorators": []
        },
        {
          "name": "parse_files_from_response",
          "docstring": "Extract filenames and content from LLM response (e.g., ```filename\ncontent```).",
          "line_range": [
            107,
            114
          ],
          "parameters": [
            "response"
          ],
          "decorators": []
        },
        {
          "name": "interactive",
          "docstring": "Run interactive CLI with modular structure if available, fallback to legacy.",
          "line_range": [
            117,
            127
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive_modular",
          "docstring": "Run interactive CLI with modular structure.",
          "line_range": [
            130,
            144
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "interactive_legacy",
          "docstring": "Run interactive CLI with LLM, supporting file/folder viewing and writing.",
          "line_range": [
            147,
            503
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "process_cli_queue_enhanced",
          "docstring": "Enhanced queue processing with workflow support, performance tracking, and safety validation.",
          "line_range": [
            506,
            705
          ],
          "parameters": [
            "root_dir",
            "context_path",
            "args",
            "cache",
            "client"
          ],
          "decorators": []
        },
        {
          "name": "parse",
          "docstring": "Parse codebase and generate struct.json.",
          "line_range": [
            708,
            759
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "query",
          "docstring": "Query LLMs with prompt and context.",
          "line_range": [
            762,
            818
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "context",
          "docstring": "Generate context.json from input JSON.",
          "line_range": [
            821,
            823
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "dogfood",
          "docstring": "Run dogfooding analysis.",
          "line_range": [
            826,
            828
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "review",
          "docstring": "Review codebase with LLM.",
          "line_range": [
            831,
            833
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "copilot",
          "docstring": "Copilot integration and context management.",
          "line_range": [
            836,
            954
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "audit",
          "docstring": "Handle audit command for recovering lost ideas/tasks.",
          "line_range": [
            957,
            980
          ],
          "parameters": [
            "args"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for LLMstruct.",
          "line_range": [
            983,
            1198
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_gitignore": [
          "gitignore_path.exists",
          "Path",
          "gitignore_path.open",
          "line.startswith",
          "line.strip",
          "logging.error"
        ],
        "load_config": [
          "toml.load",
          "Path",
          "config_path.open",
          "logging.error",
          "config_path.exists"
        ],
        "read_file_content": [
          "path.is_file",
          "Path",
          "f.read",
          "path.open",
          "logging.error"
        ],
        "write_to_file": [
          "Path",
          "file_path.exists",
          "logging.info",
          "file_path.open",
          "f.write",
          "base_path.mkdir",
          "re.sub",
          "logging.error",
          "str",
          "logging.warning"
        ],
        "parse_files_from_response": [
          "re.findall",
          "content.strip",
          "files.append",
          "filename.strip"
        ],
        "interactive": [
          "logging.warning",
          "interactive_legacy",
          "interactive_modular"
        ],
        "interactive_modular": [
          "create_cli_core",
          "cli_core.run_interactive_mode",
          "logging.info",
          "hasattr"
        ],
        "interactive_legacy": [
          "os.stat",
          "print",
          "write_to_file",
          "struct_data.get",
          "events_data.append",
          "time.time",
          "user_input.lower",
          "m.group",
          "Path",
          "len",
          "attach_to_llm_request",
          "JSONCache",
          "cache.close",
          "user_input.startswith",
          "client.query",
          "cache.clear",
          "get_folder_structure",
          "logging.error",
          "parse",
          "os.makedirs",
          "isinstance",
          "cache.get_stats",
          "time.ctime",
          "json.load",
          "re.match",
          "json.dump",
          "load_gitignore",
          "open",
          "process_cli_queue_enhanced",
          "LLMClient",
          "logging.warning",
          "read_file_content",
          "args_str.strip",
          "subprocess.run",
          "os.listdir",
          "sorted",
          "workflow.get",
          "cache.list_keys",
          "int",
          "input",
          "json.dumps"
        ],
        "process_cli_queue_enhanced": [
          "len",
          "attach_to_llm_request",
          "print",
          "write_to_file",
          "read_file_content",
          "logging.info",
          "json.load",
          "enumerate",
          "item.get",
          "options.get",
          "workflow.get",
          "get_folder_structure",
          "load_gitignore",
          "open",
          "logging.error",
          "time.time",
          "client.query",
          "isinstance"
        ],
        "parse": [
          "load_config",
          "Path",
          "JSONCache",
          "generate_json",
          "cache.close",
          "logging.info",
          "parsing_config.get",
          "load_gitignore",
          "cli_config.get",
          "json.dump",
          "logging.error",
          "cache.cache_json",
          "logging.warning",
          "config.get"
        ],
        "query": [
          "client.query_with_context",
          "Path",
          "JSONCache",
          "cache.close",
          "client.query",
          "logging.info",
          "json.dump",
          "hasattr",
          "create_context_orchestrator",
          "orchestrator.get_context_for_scenario",
          "logging.error",
          "LLMClient",
          "logging.warning"
        ],
        "context": [
          "logging.warning"
        ],
        "dogfood": [
          "logging.warning"
        ],
        "review": [
          "logging.warning"
        ],
        "copilot": [
          "shutil.copy",
          "print",
          "enumerate",
          "hasattr",
          "Path",
          "initialize_copilot",
          "getattr",
          "template_path.exists",
          "manager.validate_change",
          "logging.error",
          "config_path.exists",
          "manager.refresh_all_contexts",
          "layers.split",
          "manager.load_context_layer",
          "smart_suggest",
          "f.write",
          "open",
          "logging.info",
          "manager.get_context_status",
          "manager.unload_context_layer",
          "manager.export_context",
          "manager.close"
        ],
        "audit": [
          "CLIUtils",
          "CLIConfig",
          "CommandProcessor",
          "logging.error",
          "os.getcwd",
          "processor.cmd_audit"
        ],
        "main": [
          "context_parser.add_argument",
          "dogfood",
          "dogfood_parser.add_argument",
          "copilot_parser.add_argument",
          "subparsers.add_parser",
          "audit_parser.add_argument",
          "parse_parser.add_argument",
          "review",
          "parser.add_subparsers",
          "interactive_parser.add_argument",
          "query",
          "parser.parse_args",
          "argparse.ArgumentParser",
          "copilot",
          "parse",
          "context",
          "review_parser.add_argument",
          "audit",
          "query_parser.add_argument",
          "asyncio.run",
          "interactive"
        ]
      },
      "dependencies": [
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "JSONCache",
        "LLMClient",
        "List",
        "Optional",
        "Path",
        "argparse",
        "asyncio",
        "attach_to_llm_request",
        "cli_commands",
        "cli_config",
        "cli_core",
        "cli_utils",
        "context_orchestrator",
        "copilot",
        "create_cli_core",
        "create_context_orchestrator",
        "generate_json",
        "get_folder_structure",
        "initialize_copilot",
        "json",
        "llmstruct",
        "llmstruct.cache",
        "llmstruct.generators.json_generator",
        "llmstruct.self_run",
        "logging",
        "os",
        "pathlib",
        "re",
        "shutil",
        "smart_suggest",
        "subprocess",
        "sys",
        "time",
        "toml",
        "typing"
      ],
      "hash": null,
      "artifact_id": "78c55481-5d25-4b44-9a37-cb85ece7ec47"
    },
    {
      "module_id": "src.llmstruct.cli_core",
      "path": "src/llmstruct/cli_core.py",
      "category": "core",
      "module_doc": "Core CLI functionality and main loop.",
      "functions": [
        {
          "name": "create_cli_core",
          "docstring": "Factory function to create CLI core instance.",
          "line_range": [
            110,
            112
          ],
          "parameters": [
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "Initialize CLI core with root directory.",
          "line_range": [
            28,
            35
          ],
          "parameters": [
            "self",
            "root_dir"
          ],
          "decorators": []
        },
        {
          "name": "setup_cache",
          "docstring": "Initialize cache if enabled in config.",
          "line_range": [
            37,
            53
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "setup_copilot",
          "docstring": "Initialize Copilot integration if enabled.",
          "line_range": [
            55,
            63
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "run_interactive_mode",
          "docstring": "Run the interactive CLI mode.",
          "line_range": [
            65,
            97
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "cleanup",
          "docstring": "Clean up resources.",
          "line_range": [
            99,
            107
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CLICore",
          "docstring": "Core CLI class handling main loop and coordination.",
          "line_range": [
            25,
            107
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "Initialize CLI core with root directory.",
              "line_range": [
                28,
                35
              ],
              "parameters": [
                "self",
                "root_dir"
              ]
            },
            {
              "name": "setup_cache",
              "docstring": "Initialize cache if enabled in config.",
              "line_range": [
                37,
                53
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "setup_copilot",
              "docstring": "Initialize Copilot integration if enabled.",
              "line_range": [
                55,
                63
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "run_interactive_mode",
              "docstring": "Run the interactive CLI mode.",
              "line_range": [
                65,
                97
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "cleanup",
              "docstring": "Clean up resources.",
              "line_range": [
                99,
                107
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "CLIUtils",
          "CLIConfig",
          "CommandProcessor"
        ],
        "setup_cache": [
          "Path",
          "JSONCache",
          "cache_path.mkdir",
          "logging.info",
          "cache_config.get",
          "str",
          "logging.warning"
        ],
        "setup_copilot": [
          "initialize_copilot",
          "copilot_config.get",
          "logging.warning",
          "logging.info"
        ],
        "run_interactive_mode": [
          "self.cleanup",
          "print",
          "user_input.startswith",
          "self.setup_copilot",
          "self.setup_cache",
          "logging.error",
          "user_input.lower",
          "input"
        ],
        "cleanup": [
          "logging.info"
        ],
        "create_cli_core": [
          "CLICore"
        ]
      },
      "dependencies": [
        "CLIConfig",
        "CLIUtils",
        "CommandProcessor",
        "CopilotContextManager",
        "JSONCache",
        "Optional",
        "Path",
        "cli_commands",
        "cli_config",
        "cli_utils",
        "copilot",
        "initialize_copilot",
        "llmstruct.cache",
        "logging",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "366d3a1f-2153-4066-a7dd-04bd5d1f46d2"
    },
    {
      "module_id": "src.llmstruct.workspace",
      "path": "src/llmstruct/workspace.py",
      "category": "core",
      "module_doc": "Workspace State & Mode Management System\nEnhanced AI-Human Collaboration with Context Boundaries",
      "functions": [
        {
          "name": "create_workspace_manager",
          "docstring": "Factory function to create workspace manager",
          "line_range": [
            461,
            463
          ],
          "parameters": [
            "workspace_dir"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            28,
            36
          ],
          "parameters": [
            "self",
            "workspace_dir"
          ],
          "decorators": []
        },
        {
          "name": "_load_or_create_state",
          "docstring": "Load existing workspace state or create default",
          "line_range": [
            38,
            75
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_load_permission_templates",
          "docstring": "Load permission templates for different modes",
          "line_range": [
            77,
            128
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "set_mode",
          "docstring": "Set workspace mode(s) with smart combination logic.\n\nArgs:\n    modes: Single mode string \"[code]\" or list of modes [\"code\", \"debug\"]\n    session_id: Optional session identifier\n    \nReturns:\n    Dict with mode change result and applied permissions",
          "line_range": [
            130,
            176
          ],
          "parameters": [
            "self",
            "modes",
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "_parse_modes_from_string",
          "docstring": "Parse modes from string like '[code][debug]' to ['code', 'debug']",
          "line_range": [
            178,
            182
          ],
          "parameters": [
            "self",
            "mode_string"
          ],
          "decorators": []
        },
        {
          "name": "_combine_mode_permissions",
          "docstring": "Smart combination of mode permissions (Decision: C - Smart Combination)",
          "line_range": [
            184,
            216
          ],
          "parameters": [
            "self",
            "modes"
          ],
          "decorators": []
        },
        {
          "name": "_get_mode_combination_name",
          "docstring": "Get descriptive name for mode combination",
          "line_range": [
            218,
            232
          ],
          "parameters": [
            "self",
            "modes"
          ],
          "decorators": []
        },
        {
          "name": "get_current_state",
          "docstring": "Get current workspace state",
          "line_range": [
            234,
            236
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "check_permission",
          "docstring": "Check if operation is permitted under current mode.\n\nArgs:\n    operation: Operation type (e.g., \"write_file\", \"run_command\")\n    target: Optional target (file path, command, etc.)\n    \nReturns:\n    Dict with permission result and reasoning",
          "line_range": [
            238,
            302
          ],
          "parameters": [
            "self",
            "operation",
            "target"
          ],
          "decorators": []
        },
        {
          "name": "_get_required_capability",
          "docstring": "Map operations to required capabilities",
          "line_range": [
            304,
            320
          ],
          "parameters": [
            "self",
            "operation"
          ],
          "decorators": []
        },
        {
          "name": "_is_restricted_target",
          "docstring": "Check if target matches any file restrictions",
          "line_range": [
            322,
            334
          ],
          "parameters": [
            "self",
            "target"
          ],
          "decorators": []
        },
        {
          "name": "set_emergency_override",
          "docstring": "Grant emergency override (Hybrid B+C: Escalation + Time-boxing)\n\nArgs:\n    level: Override level (1=extend permissions, 2=filesystem, 3=system)\n    reason: Reason for override\n    duration_minutes: Override duration",
          "line_range": [
            336,
            365
          ],
          "parameters": [
            "self",
            "level",
            "reason",
            "duration_minutes"
          ],
          "decorators": []
        },
        {
          "name": "_check_emergency_override",
          "docstring": "Check if emergency override is active and not expired",
          "line_range": [
            367,
            381
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "integrate_strict_mode",
          "docstring": "Integration with existing strict mode system",
          "line_range": [
            383,
            387
          ],
          "parameters": [
            "self",
            "strict_tags"
          ],
          "decorators": []
        },
        {
          "name": "add_decision_workflow",
          "docstring": "Add decision to workflow tracking (for [decide] mode)",
          "line_range": [
            389,
            396
          ],
          "parameters": [
            "self",
            "decision_id",
            "decision_data"
          ],
          "decorators": []
        },
        {
          "name": "get_workspace_status",
          "docstring": "Get comprehensive workspace status for debugging and display",
          "line_range": [
            398,
            420
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_get_override_time_remaining",
          "docstring": "Get formatted time remaining for emergency override",
          "line_range": [
            422,
            437
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "_save_state",
          "docstring": "Save current state to file",
          "line_range": [
            439,
            442
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "get_mode_status",
          "docstring": "Get formatted status string for CLI display",
          "line_range": [
            444,
            458
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "WorkspaceStateManager",
          "docstring": "Core workspace state management with mode-based permissions and context boundaries.\n\nFeatures:\n- Multi-dimensional mode system ([code][debug], [discuss][meta])\n- Hybrid permission system (capabilities + file restrictions)\n- Smart mode combinations with context awareness\n- Emergency override protocols with time-boxing\n- Integration with existing strict mode system",
          "line_range": [
            16,
            458
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                28,
                36
              ],
              "parameters": [
                "self",
                "workspace_dir"
              ]
            },
            {
              "name": "_load_or_create_state",
              "docstring": "Load existing workspace state or create default",
              "line_range": [
                38,
                75
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_load_permission_templates",
              "docstring": "Load permission templates for different modes",
              "line_range": [
                77,
                128
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "set_mode",
              "docstring": "Set workspace mode(s) with smart combination logic.\n\nArgs:\n    modes: Single mode string \"[code]\" or list of modes [\"code\", \"debug\"]\n    session_id: Optional session identifier\n    \nReturns:\n    Dict with mode change result and applied permissions",
              "line_range": [
                130,
                176
              ],
              "parameters": [
                "self",
                "modes",
                "session_id"
              ]
            },
            {
              "name": "_parse_modes_from_string",
              "docstring": "Parse modes from string like '[code][debug]' to ['code', 'debug']",
              "line_range": [
                178,
                182
              ],
              "parameters": [
                "self",
                "mode_string"
              ]
            },
            {
              "name": "_combine_mode_permissions",
              "docstring": "Smart combination of mode permissions (Decision: C - Smart Combination)",
              "line_range": [
                184,
                216
              ],
              "parameters": [
                "self",
                "modes"
              ]
            },
            {
              "name": "_get_mode_combination_name",
              "docstring": "Get descriptive name for mode combination",
              "line_range": [
                218,
                232
              ],
              "parameters": [
                "self",
                "modes"
              ]
            },
            {
              "name": "get_current_state",
              "docstring": "Get current workspace state",
              "line_range": [
                234,
                236
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "check_permission",
              "docstring": "Check if operation is permitted under current mode.\n\nArgs:\n    operation: Operation type (e.g., \"write_file\", \"run_command\")\n    target: Optional target (file path, command, etc.)\n    \nReturns:\n    Dict with permission result and reasoning",
              "line_range": [
                238,
                302
              ],
              "parameters": [
                "self",
                "operation",
                "target"
              ]
            },
            {
              "name": "_get_required_capability",
              "docstring": "Map operations to required capabilities",
              "line_range": [
                304,
                320
              ],
              "parameters": [
                "self",
                "operation"
              ]
            },
            {
              "name": "_is_restricted_target",
              "docstring": "Check if target matches any file restrictions",
              "line_range": [
                322,
                334
              ],
              "parameters": [
                "self",
                "target"
              ]
            },
            {
              "name": "set_emergency_override",
              "docstring": "Grant emergency override (Hybrid B+C: Escalation + Time-boxing)\n\nArgs:\n    level: Override level (1=extend permissions, 2=filesystem, 3=system)\n    reason: Reason for override\n    duration_minutes: Override duration",
              "line_range": [
                336,
                365
              ],
              "parameters": [
                "self",
                "level",
                "reason",
                "duration_minutes"
              ]
            },
            {
              "name": "_check_emergency_override",
              "docstring": "Check if emergency override is active and not expired",
              "line_range": [
                367,
                381
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "integrate_strict_mode",
              "docstring": "Integration with existing strict mode system",
              "line_range": [
                383,
                387
              ],
              "parameters": [
                "self",
                "strict_tags"
              ]
            },
            {
              "name": "add_decision_workflow",
              "docstring": "Add decision to workflow tracking (for [decide] mode)",
              "line_range": [
                389,
                396
              ],
              "parameters": [
                "self",
                "decision_id",
                "decision_data"
              ]
            },
            {
              "name": "get_workspace_status",
              "docstring": "Get comprehensive workspace status for debugging and display",
              "line_range": [
                398,
                420
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_get_override_time_remaining",
              "docstring": "Get formatted time remaining for emergency override",
              "line_range": [
                422,
                437
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "_save_state",
              "docstring": "Save current state to file",
              "line_range": [
                439,
                442
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "get_mode_status",
              "docstring": "Get formatted status string for CLI display",
              "line_range": [
                444,
                458
              ],
              "parameters": [
                "self"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "Path",
          "self._load_permission_templates",
          "self._load_or_create_state"
        ],
        "_load_or_create_state": [
          "datetime.now",
          "json.load",
          "self._save_state",
          "open"
        ],
        "_load_permission_templates": [],
        "set_mode": [
          "self._combine_mode_permissions",
          "len",
          "combined_permissions.get",
          "self._save_state",
          "self._parse_modes_from_string",
          "datetime.now",
          "self._get_mode_combination_name",
          "isinstance"
        ],
        "_parse_modes_from_string": [
          "re.findall"
        ],
        "_combine_mode_permissions": [
          "logger.info",
          "template.get",
          "list",
          "sorted",
          "set"
        ],
        "_get_mode_combination_name": [
          "sorted",
          "combination_names.get"
        ],
        "get_current_state": [],
        "check_permission": [
          "self._check_emergency_override",
          "self._is_restricted_target",
          "self._get_required_capability",
          "permissions.get"
        ],
        "_get_required_capability": [
          "operation.startswith",
          "capability_map.items"
        ],
        "_is_restricted_target": [
          "restriction.startswith",
          "fnmatch.fnmatch",
          "target.startswith"
        ],
        "set_emergency_override": [
          "datetime.now",
          "expires_at.isoformat",
          "self._save_state",
          "timedelta"
        ],
        "_check_emergency_override": [
          "datetime.now",
          "self._save_state",
          "datetime.fromisoformat",
          "override.get"
        ],
        "integrate_strict_mode": [
          "datetime.now",
          "self._save_state"
        ],
        "add_decision_workflow": [
          "datetime.now",
          "self._save_state"
        ],
        "get_workspace_status": [
          "self._get_mode_combination_name",
          "self._get_override_time_remaining",
          "len",
          "override.get"
        ],
        "_get_override_time_remaining": [
          "datetime.fromisoformat",
          "int",
          "override.get",
          "remaining.total_seconds",
          "datetime.now"
        ],
        "_save_state": [
          "json.dump",
          "open"
        ],
        "get_mode_status": [
          "self._get_mode_combination_name",
          "override.get"
        ],
        "create_workspace_manager": [
          "WorkspaceStateManager"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "Set",
        "Union",
        "datetime",
        "fnmatch",
        "json",
        "logging",
        "os",
        "pathlib",
        "re",
        "timedelta",
        "timezone",
        "typing"
      ],
      "hash": null,
      "artifact_id": "13f36528-db73-40ee-835f-1a4d84f3de77"
    },
    {
      "module_id": "src.llmstruct.parsers.__init__",
      "path": "src/llmstruct/parsers/__init__.py",
      "category": "cli",
      "module_doc": "Language-specific parsers for extracting code structure data for LLMStruct JSON.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "JavaScriptParser",
        "javascript_parser"
      ],
      "hash": null,
      "artifact_id": "7b5ad127-28fc-4f96-a33f-08822907c393"
    },
    {
      "module_id": "src.llmstruct.parsers.javascript_parser",
      "path": "src/llmstruct/parsers/javascript_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            9,
            13
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "file_hash",
          "docstring": "",
          "line_range": [
            15,
            20
          ],
          "parameters": [
            "self",
            "filepath"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_metadata",
          "docstring": "",
          "line_range": [
            22,
            41
          ],
          "parameters": [
            "self",
            "filepath",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "parse_module",
          "docstring": "",
          "line_range": [
            43,
            124
          ],
          "parameters": [
            "self",
            "filepath",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "extract_signature",
          "docstring": "",
          "line_range": [
            78,
            80
          ],
          "parameters": [
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "JavaScriptParser",
          "docstring": "",
          "line_range": [
            8,
            124
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                9,
                13
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "file_hash",
              "docstring": "",
              "line_range": [
                15,
                20
              ],
              "parameters": [
                "self",
                "filepath"
              ]
            },
            {
              "name": "compute_file_metadata",
              "docstring": "",
              "line_range": [
                22,
                41
              ],
              "parameters": [
                "self",
                "filepath",
                "include_hashes"
              ]
            },
            {
              "name": "parse_module",
              "docstring": "",
              "line_range": [
                43,
                124
              ],
              "parameters": [
                "self",
                "filepath",
                "root_dir",
                "include_ranges",
                "include_hashes"
              ]
            }
          ],
          "bases": []
        }
      ],
      "callgraph": {
        "__init__": [
          "set"
        ],
        "file_hash": [
          "hashlib.sha256",
          "f.read",
          "open"
        ],
        "compute_file_metadata": [
          "self.file_hash",
          "os.stat",
          "sum",
          "open"
        ],
        "parse_module": [
          "esprima.parseModule",
          "f.read",
          "self.compute_file_metadata",
          "open",
          "str"
        ],
        "extract_signature": [
          "hasattr"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "datetime",
        "esprima",
        "hashlib",
        "os",
        "typing"
      ],
      "hash": null,
      "artifact_id": "588e0719-f9d5-4deb-9137-cb20053b595c"
    },
    {
      "module_id": "src.llmstruct.parsers.python_parser",
      "path": "src/llmstruct/parsers/python_parser.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "infer_category",
          "docstring": "Infer module category based on its path.",
          "line_range": [
            13,
            20
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "compute_file_hash",
          "docstring": "Compute SHA-256 hash of file content.",
          "line_range": [
            72,
            79
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "analyze_module",
          "docstring": "Analyze Python module and return structured data.",
          "line_range": [
            82,
            154
          ],
          "parameters": [
            "file_path",
            "root_dir",
            "include_ranges",
            "include_hashes"
          ],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            26,
            29
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "visit_Import",
          "docstring": "Capture import statements.",
          "line_range": [
            31,
            35
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_ImportFrom",
          "docstring": "Capture from-import statements.",
          "line_range": [
            37,
            43
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_FunctionDef",
          "docstring": "Track function definitions and their calls.",
          "line_range": [
            45,
            50
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_AsyncFunctionDef",
          "docstring": "Track async function definitions and their calls.",
          "line_range": [
            52,
            57
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "visit_Call",
          "docstring": "Capture function calls.",
          "line_range": [
            59,
            69
          ],
          "parameters": [
            "self",
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "CallVisitor",
          "docstring": "AST visitor to collect function calls and dependencies.",
          "line_range": [
            23,
            69
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                26,
                29
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "visit_Import",
              "docstring": "Capture import statements.",
              "line_range": [
                31,
                35
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_ImportFrom",
              "docstring": "Capture from-import statements.",
              "line_range": [
                37,
                43
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_FunctionDef",
              "docstring": "Track function definitions and their calls.",
              "line_range": [
                45,
                50
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_AsyncFunctionDef",
              "docstring": "Track async function definitions and their calls.",
              "line_range": [
                52,
                57
              ],
              "parameters": [
                "self",
                "node"
              ]
            },
            {
              "name": "visit_Call",
              "docstring": "Capture function calls.",
              "line_range": [
                59,
                69
              ],
              "parameters": [
                "self",
                "node"
              ]
            }
          ],
          "bases": [
            "ast.NodeVisitor"
          ]
        }
      ],
      "callgraph": {
        "infer_category": [
          "Path"
        ],
        "__init__": [
          "set"
        ],
        "visit_Import": [
          "self.generic_visit"
        ],
        "visit_ImportFrom": [
          "self.generic_visit"
        ],
        "visit_FunctionDef": [
          "self.generic_visit",
          "set"
        ],
        "visit_AsyncFunctionDef": [
          "self.generic_visit",
          "set"
        ],
        "visit_Call": [
          "self.generic_visit",
          "isinstance"
        ],
        "compute_file_hash": [
          "logging.error",
          "hashlib.sha256",
          "f.read",
          "open"
        ],
        "analyze_module": [
          "compute_file_hash",
          "Path",
          "functions.append",
          "f.read",
          "infer_category",
          "list",
          "ast.parse",
          "ast.unparse",
          "sorted",
          "visitor.visit",
          "open",
          "ast.walk",
          "logging.error",
          "ast.get_docstring",
          "CallVisitor",
          "str",
          "classes.append",
          "isinstance"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "Set",
        "ast",
        "hashlib",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "hash": null,
      "artifact_id": "6e9dd654-462f-4f00-9546-383fa7d43ecb"
    },
    {
      "module_id": "src.llmstruct.templates.__init__",
      "path": "src/llmstruct/templates/__init__.py",
      "category": "cli",
      "module_doc": "Templates for LLM prompts used in LLMStruct integration.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "ba1ef0a3-04d7-488a-98e0-12cb44fa2629"
    },
    {
      "module_id": "src.llmstruct.validators.__init__",
      "path": "src/llmstruct/validators/__init__.py",
      "category": "cli",
      "module_doc": "Validation modules for ensuring LLMStruct JSON complies with the schema.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "json_validator",
        "validate_struct_json"
      ],
      "hash": null,
      "artifact_id": "1179f33f-e284-4aa8-bab7-565ce9beded3"
    },
    {
      "module_id": "src.llmstruct.validators.json_validator",
      "path": "src/llmstruct/validators/json_validator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_struct_json",
          "docstring": "Validate a single JSON file against a schema.",
          "line_range": [
            12,
            40
          ],
          "parameters": [
            "json_path",
            "schema_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_directory",
          "docstring": "Validate all JSON files in a directory against a schema.",
          "line_range": [
            43,
            61
          ],
          "parameters": [
            "directory",
            "schema_path",
            "include_patterns",
            "exclude_patterns"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_struct_json": [
          "Path",
          "logging.info",
          "json.load",
          "schema_file.exists",
          "open",
          "logging.error",
          "validate",
          "json_file.exists",
          "str"
        ],
        "validate_directory": [
          "json_file.match",
          "Path",
          "validate_struct_json",
          "any",
          "str"
        ]
      },
      "dependencies": [
        "List",
        "Optional",
        "Path",
        "ValidationError",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "sys",
        "typing",
        "validate"
      ],
      "hash": null,
      "artifact_id": "29d48f91-6138-4b0b-800b-d6f350340f4e"
    },
    {
      "module_id": "src.llmstruct.generators.json_generator",
      "path": "src/llmstruct/generators/json_generator.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "get_folder_structure",
          "docstring": "Capture directory and file structure with artifact_id, respecting .gitignore and patterns.",
          "line_range": [
            15,
            88
          ],
          "parameters": [
            "root_dir",
            "gitignore_patterns",
            "include_patterns",
            "exclude_patterns",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "build_toc_and_modules",
          "docstring": "Build TOC and modules with artifact_id and robust filtering.",
          "line_range": [
            91,
            148
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "exclude_dirs"
          ],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "Generate JSON structure for project with artifact_id, summary, and tags.",
          "line_range": [
            151,
            218
          ],
          "parameters": [
            "root_dir",
            "include_patterns",
            "exclude_patterns",
            "gitignore_patterns",
            "include_ranges",
            "include_hashes",
            "goals",
            "exclude_dirs"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "get_folder_structure": [
          "p.endswith",
          "Path",
          "p.rstrip",
          "file_path.match",
          "uuid.uuid4",
          "structure.append",
          "file_path.relative_to",
          "sorted",
          "os.walk",
          "set",
          "any",
          "str"
        ],
        "build_toc_and_modules": [
          "set",
          "p.endswith",
          "Path",
          "len",
          "p.rstrip",
          "uuid.uuid4",
          "modules.append",
          "toc.append",
          "f.match",
          "any",
          "str",
          "analyze_module"
        ],
        "generate_json": [
          "len",
          "Path",
          "sum",
          "uuid.uuid4",
          "list",
          "get_folder_structure",
          "set",
          "str",
          "build_toc_and_modules"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "List",
        "Optional",
        "Path",
        "analyze_module",
        "datetime",
        "logging",
        "os",
        "parsers.python_parser",
        "pathlib",
        "typing",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "847d20e7-5ceb-4ec0-ad18-3e5b59ab7166"
    },
    {
      "module_id": "src.llmstruct.generators.__init__",
      "path": "src/llmstruct/generators/__init__.py",
      "category": "cli",
      "module_doc": "Generator modules for creating LLMStruct JSON outputs from parsed code data.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [
        "generate_json",
        "json_generator"
      ],
      "hash": null,
      "artifact_id": "bd4cd2ca-4555-412d-9bcf-1892bd28a563"
    },
    {
      "module_id": "tests.test_self_run",
      "path": "tests/test_self_run.py",
      "category": "test",
      "module_doc": "",
      "functions": [
        {
          "name": "test_filter_json_init_json",
          "docstring": "Test filter_json with init.json structure.",
          "line_range": [
            14,
            21
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_select_json_partial",
          "docstring": "Test partial JSON loading.",
          "line_range": [
            24,
            34
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_cache_json",
          "docstring": "Test JSON caching.",
          "line_range": [
            37,
            49
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_attach_to_llm_request_init_json",
          "docstring": "Test attach_to_llm_request with init.json and cache.",
          "line_range": [
            52,
            69
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        },
        {
          "name": "test_attach_to_llm_request_missing_file",
          "docstring": "Test attach_to_llm_request with missing file.",
          "line_range": [
            72,
            76
          ],
          "parameters": [
            "tmp_path"
          ],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "test_filter_json_init_json": [
          "filter_json"
        ],
        "test_select_json_partial": [
          "select_json",
          "json.dump",
          "str",
          "open"
        ],
        "test_cache_json": [
          "JSONCache",
          "cache.close",
          "json.dump",
          "cache.get_full_json",
          "open",
          "cache.get_metadata",
          "cache.cache_json",
          "str"
        ],
        "test_attach_to_llm_request_init_json": [
          "attach_to_llm_request",
          "JSONCache",
          "cache.close",
          "json.dump",
          "open",
          "str"
        ],
        "test_attach_to_llm_request_missing_file": [
          "attach_to_llm_request",
          "str"
        ]
      },
      "dependencies": [
        "JSONCache",
        "attach_to_llm_request",
        "filter_json",
        "json",
        "llmstruct.cache",
        "llmstruct.json_selector",
        "llmstruct.self_run",
        "select_json"
      ],
      "hash": null,
      "artifact_id": "631d7e4e-61e5-44e6-9ce3-95cc0411939c"
    },
    {
      "module_id": "tests.__init__",
      "path": "tests/__init__.py",
      "category": "test",
      "module_doc": "Test suite for LLMStruct, covering parsers, generators, validators, and integration.",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "04b7d814-bf0f-4391-a830-2d59212b3b54"
    },
    {
      "module_id": "scripts.collector",
      "path": "scripts/collector.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "apply_filters",
          "docstring": "",
          "line_range": [
            13,
            29
          ],
          "parameters": [
            "files",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "collect_files",
          "docstring": "",
          "line_range": [
            32,
            38
          ],
          "parameters": [
            "root_dir",
            "filters"
          ],
          "decorators": []
        },
        {
          "name": "generate_struct",
          "docstring": "",
          "line_range": [
            41,
            88
          ],
          "parameters": [
            "root_dir",
            "output"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            91,
            92
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "apply_filters": [
          "fnmatch.fnmatch",
          "filtered.append",
          "pattern.startswith"
        ],
        "collect_files": [
          "path.is_file",
          "files.append",
          "apply_filters",
          "root_dir.rglob",
          "path.relative_to",
          "str"
        ],
        "generate_struct": [
          "Path",
          "len",
          "collect_files",
          "logger.info",
          "output_path.exists",
          "uuid.uuid4",
          "json.load",
          "existing.get",
          "output_path.open",
          "json.dump",
          "str"
        ],
        "main": [
          "generate_struct"
        ]
      },
      "dependencies": [
        "Path",
        "fnmatch",
        "json",
        "logging",
        "pathlib",
        "uuid"
      ],
      "hash": null,
      "artifact_id": "3f0e2f9c-a253-4ffa-889a-a70d4dbe8f8e"
    },
    {
      "module_id": "scripts.session_cli",
      "path": "scripts/session_cli.py",
      "category": "core",
      "module_doc": "Session Management CLI\nAutomates session tracking, worklog updates, and session switching for llmstruct.\nPart of the comprehensive session management system.",
      "functions": [
        {
          "name": "get_current_branch",
          "docstring": "Get current git branch.",
          "line_range": [
            24,
            31
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_json_file",
          "docstring": "Load JSON file with error handling.",
          "line_range": [
            33,
            40
          ],
          "parameters": [
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "save_json_file",
          "docstring": "Save JSON file with error handling.",
          "line_range": [
            42,
            51
          ],
          "parameters": [
            "file_path",
            "data"
          ],
          "decorators": []
        },
        {
          "name": "get_current_timestamp",
          "docstring": "Get current timestamp in ISO format.",
          "line_range": [
            53,
            55
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "log_event",
          "docstring": "Log an event to worklog.json.",
          "line_range": [
            57,
            88
          ],
          "parameters": [
            "event_message",
            "author"
          ],
          "decorators": []
        },
        {
          "name": "switch_session",
          "docstring": "Switch to a different session or create new one.",
          "line_range": [
            90,
            141
          ],
          "parameters": [
            "session_id"
          ],
          "decorators": []
        },
        {
          "name": "list_sessions",
          "docstring": "List all available sessions.",
          "line_range": [
            143,
            166
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_current_session",
          "docstring": "Show current session details.",
          "line_range": [
            168,
            183
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "show_worklog",
          "docstring": "Show recent worklog entries.",
          "line_range": [
            185,
            203
          ],
          "parameters": [
            "limit"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Main CLI interface.",
          "line_range": [
            205,
            244
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "Colors",
          "docstring": "",
          "line_range": [
            16,
            22
          ],
          "methods": [],
          "bases": []
        }
      ],
      "callgraph": {
        "get_current_branch": [
          "subprocess.run"
        ],
        "load_json_file": [
          "print",
          "json.load",
          "open"
        ],
        "save_json_file": [
          "print",
          "json.dump",
          "os.makedirs",
          "open"
        ],
        "get_current_timestamp": [
          "datetime.now"
        ],
        "log_event": [
          "print",
          "save_json_file",
          "get_current_branch",
          "current_session.get",
          "get_current_timestamp",
          "load_json_file"
        ],
        "switch_session": [
          "print",
          "save_json_file",
          "get_current_branch",
          "log_event",
          "get_current_timestamp",
          "load_json_file"
        ],
        "list_sessions": [
          "current_session.get",
          "load_json_file",
          "print"
        ],
        "show_current_session": [
          "current_session.get",
          "load_json_file",
          "print"
        ],
        "show_worklog": [
          "reversed",
          "len",
          "load_json_file",
          "print"
        ],
        "main": [
          "switch_session",
          "len",
          "print",
          "show_worklog",
          "show_current_session",
          "list_sessions",
          "log_event",
          "int"
        ]
      },
      "dependencies": [
        "Path",
        "datetime",
        "json",
        "os",
        "pathlib",
        "subprocess",
        "sys"
      ],
      "hash": null,
      "artifact_id": "6a926ef7-b565-4295-9a29-aa57dc3c8287"
    },
    {
      "module_id": "scripts.auto_update_struct",
      "path": "scripts/auto_update_struct.py",
      "category": "core",
      "module_doc": "Automatic struct.json update script\nThis script automatically parses the project and updates struct.json\nwithout requiring LLM intervention.",
      "functions": [
        {
          "name": "detect_project_changes",
          "docstring": "Detect if project files have changed since last struct.json generation.\nUses git status to check for modifications.",
          "line_range": [
            44,
            81
          ],
          "parameters": [
            "root_dir",
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_struct_json",
          "docstring": "Create a backup of existing struct.json.",
          "line_range": [
            84,
            97
          ],
          "parameters": [
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "validate_struct_json",
          "docstring": "Validate generated struct.json for basic structure.",
          "line_range": [
            100,
            128
          ],
          "parameters": [
            "struct_path"
          ],
          "decorators": []
        },
        {
          "name": "update_struct_json",
          "docstring": "Main function to update struct.json automatically.\n\nArgs:\n    root_dir: Project root directory (default: current directory)\n    struct_path: Path to struct.json (default: ./struct.json)\n    force: Force regeneration even if no changes detected\n    config_override: Override default configuration\n\nReturns:\n    bool: True if update was successful",
          "line_range": [
            131,
            225
          ],
          "parameters": [
            "root_dir",
            "struct_path",
            "force",
            "config_override"
          ],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "Command-line interface for auto-update script.",
          "line_range": [
            228,
            286
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_config",
          "docstring": "",
          "line_range": [
            24,
            25
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "load_gitignore",
          "docstring": "",
          "line_range": [
            26,
            27
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "generate_json",
          "docstring": "",
          "line_range": [
            28,
            29
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "load_config": [],
        "load_gitignore": [],
        "generate_json": [
          "ImportError"
        ],
        "detect_project_changes": [
          "Path",
          "logger.info",
          "file_path.stat",
          "subprocess.run",
          "logger.warning"
        ],
        "backup_struct_json": [
          "Path",
          "logger.info",
          "subprocess.run",
          "datetime.now",
          "logger.error"
        ],
        "validate_struct_json": [
          "logger.error",
          "json.load",
          "logger.info",
          "open"
        ],
        "update_struct_json": [
          "load_config",
          "logger.info",
          "backup_struct_json",
          "subprocess.run",
          "config.update",
          "validate_struct_json",
          "json.dump",
          "load_gitignore",
          "cli_config.get",
          "open",
          "detect_project_changes",
          "os.getcwd",
          "logger.error",
          "generate_json",
          "config.get"
        ],
        "main": [
          "parser.add_argument",
          "parser.parse_args",
          "print",
          "argparse.ArgumentParser",
          "detect_project_changes",
          "os.getcwd",
          "update_struct_json",
          "sys.exit",
          "logging.getLogger"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "Optional",
        "Path",
        "argparse",
        "datetime",
        "generate_json",
        "json",
        "llmstruct.cli",
        "llmstruct.generators.json_generator",
        "load_config",
        "load_gitignore",
        "logging",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "2fd05c1d-c2e5-4be4-a0cc-7e9b7ad67120"
    },
    {
      "module_id": "scripts.validate_schemas",
      "path": "scripts/validate_schemas.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "2834c466-fac8-4d9e-bcda-e8571afe0312"
    },
    {
      "module_id": "scripts.export_to_github_projects",
      "path": "scripts/export_to_github_projects.py",
      "category": "core",
      "module_doc": "Export script for GitHub Projects integration\nConverts official tasks.json and ideas.json to GitHub Project cards",
      "functions": [
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            183,
            266
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "docstring": "",
          "line_range": [
            23,
            26
          ],
          "parameters": [
            "self",
            "config_path",
            "dry_run"
          ],
          "decorators": []
        },
        {
          "name": "check_github_cli",
          "docstring": "Check if GitHub CLI is installed and authenticated",
          "line_range": [
            28,
            36
          ],
          "parameters": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "list_projects",
          "docstring": "List available GitHub Projects (via gh-projects extension)",
          "line_range": [
            38,
            55
          ],
          "parameters": [
            "self",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "create_project_item",
          "docstring": "Create a new item in GitHub Project (via gh-projects extension)\nTODO: \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 GraphQL API \u0438\u043b\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c",
          "line_range": [
            57,
            82
          ],
          "parameters": [
            "self",
            "project_number",
            "title",
            "body",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "export_tasks_to_project",
          "docstring": "Export tasks to GitHub Project",
          "line_range": [
            84,
            123
          ],
          "parameters": [
            "self",
            "tasks",
            "project_number",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "export_ideas_to_project",
          "docstring": "Export ideas to GitHub Project",
          "line_range": [
            125,
            164
          ],
          "parameters": [
            "self",
            "ideas",
            "project_number",
            "owner",
            "repo"
          ],
          "decorators": []
        },
        {
          "name": "filter_data",
          "docstring": "Filter data by status and priority",
          "line_range": [
            166,
            180
          ],
          "parameters": [
            "self",
            "data",
            "status_filter",
            "priority_filter"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitHubProjectsExportScript",
          "docstring": "Extended exporter with command-line interface and GitHub CLI integration",
          "line_range": [
            20,
            180
          ],
          "methods": [
            {
              "name": "__init__",
              "docstring": "",
              "line_range": [
                23,
                26
              ],
              "parameters": [
                "self",
                "config_path",
                "dry_run"
              ]
            },
            {
              "name": "check_github_cli",
              "docstring": "Check if GitHub CLI is installed and authenticated",
              "line_range": [
                28,
                36
              ],
              "parameters": [
                "self"
              ]
            },
            {
              "name": "list_projects",
              "docstring": "List available GitHub Projects (via gh-projects extension)",
              "line_range": [
                38,
                55
              ],
              "parameters": [
                "self",
                "owner",
                "repo"
              ]
            },
            {
              "name": "create_project_item",
              "docstring": "Create a new item in GitHub Project (via gh-projects extension)\nTODO: \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 GraphQL API \u0438\u043b\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c",
              "line_range": [
                57,
                82
              ],
              "parameters": [
                "self",
                "project_number",
                "title",
                "body",
                "owner",
                "repo"
              ]
            },
            {
              "name": "export_tasks_to_project",
              "docstring": "Export tasks to GitHub Project",
              "line_range": [
                84,
                123
              ],
              "parameters": [
                "self",
                "tasks",
                "project_number",
                "owner",
                "repo"
              ]
            },
            {
              "name": "export_ideas_to_project",
              "docstring": "Export ideas to GitHub Project",
              "line_range": [
                125,
                164
              ],
              "parameters": [
                "self",
                "ideas",
                "project_number",
                "owner",
                "repo"
              ]
            },
            {
              "name": "filter_data",
              "docstring": "Filter data by status and priority",
              "line_range": [
                166,
                180
              ],
              "parameters": [
                "self",
                "data",
                "status_filter",
                "priority_filter"
              ]
            }
          ],
          "bases": [
            "GitHubProjectsExporter"
          ]
        }
      ],
      "callgraph": {
        "__init__": [
          "super"
        ],
        "check_github_cli": [
          "self._run_gh_command",
          "print"
        ],
        "list_projects": [
          "self._run_gh_command",
          "json.loads",
          "isinstance",
          "print"
        ],
        "create_project_item": [
          "self._run_gh_command",
          "str",
          "output.strip",
          "print"
        ],
        "export_tasks_to_project": [
          "len",
          "print",
          "task.get",
          "self.format_task_for_github",
          "self.create_project_item"
        ],
        "export_ideas_to_project": [
          "len",
          "print",
          "self.format_idea_for_github",
          "idea.get",
          "self.create_project_item"
        ],
        "filter_data": [
          "item.get"
        ],
        "main": [
          "exporter.filter_data",
          "parser.add_argument",
          "exporter.load_official_data",
          "exporter.export_ideas_to_project",
          "parser.parse_args",
          "exporter._save_mapping",
          "GitHubProjectsExportScript",
          "print",
          "exporter.export_tasks_to_project",
          "argparse.ArgumentParser",
          "exporter.check_github_cli",
          "sys.exit"
        ]
      },
      "dependencies": [
        "Any",
        "Dict",
        "GitHubProjectsExporter",
        "List",
        "Optional",
        "Path",
        "Tuple",
        "argparse",
        "datetime",
        "json",
        "llmstruct.gh_view",
        "pathlib",
        "subprocess",
        "sys",
        "typing"
      ],
      "hash": null,
      "artifact_id": "ed4271a6-20e4-4b5c-930a-af16ed69e083"
    },
    {
      "module_id": "scripts.validate_refs",
      "path": "scripts/validate_refs.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_references",
          "docstring": "",
          "line_range": [
            11,
            43
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            46,
            47
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_references": [
          "Path",
          "source_file.exists",
          "target_file.exists",
          "logger.info",
          "enumerate",
          "json.load",
          "broken_links.append",
          "logger.warning",
          "json.dump",
          "idea.get",
          "logger.error"
        ],
        "main": [
          "validate_references"
        ]
      },
      "dependencies": [
        "Path",
        "json",
        "logging",
        "pathlib"
      ],
      "hash": null,
      "artifact_id": "5ea3152b-dccc-4ac2-a7d7-a2d37d4ab1d9"
    },
    {
      "module_id": "scripts.deploy_embedded_files",
      "path": "scripts/deploy_embedded_files.py",
      "category": "core",
      "module_doc": "",
      "functions": [
        {
          "name": "validate_json",
          "docstring": "",
          "line_range": [
            931,
            941
          ],
          "parameters": [
            "data",
            "schema",
            "base_path"
          ],
          "decorators": []
        },
        {
          "name": "backup_files",
          "docstring": "",
          "line_range": [
            944,
            950
          ],
          "parameters": [
            "target_dir",
            "backup_root"
          ],
          "decorators": []
        },
        {
          "name": "deploy_embedded_files",
          "docstring": "",
          "line_range": [
            953,
            1007
          ],
          "parameters": [],
          "decorators": []
        },
        {
          "name": "main",
          "docstring": "",
          "line_range": [
            1010,
            1011
          ],
          "parameters": [],
          "decorators": []
        }
      ],
      "classes": [],
      "callgraph": {
        "validate_json": [
          "logger.warning",
          "validate",
          "logger.error",
          "RefResolver"
        ],
        "backup_files": [
          "datetime.now",
          "target_dir.exists",
          "logger.info",
          "shutil.copytree"
        ],
        "deploy_embedded_files": [
          "target_path.exists",
          "Path",
          "backup_files",
          "logger.info",
          "Path.cwd",
          "f.write",
          "logger.warning",
          "json.dump",
          "EMBEDDED_FILES.get",
          "target_path.open",
          "logger.error",
          "validate_json"
        ],
        "main": [
          "deploy_embedded_files"
        ]
      },
      "dependencies": [
        "Path",
        "RefResolver",
        "ValidationError",
        "datetime",
        "json",
        "jsonschema",
        "logging",
        "pathlib",
        "shutil",
        "validate"
      ],
      "hash": null,
      "artifact_id": "b5dd0442-3254-4184-b2c4-31b6a7b16096"
    },
    {
      "module_id": "scripts.validate_json",
      "path": "scripts/validate_json.py",
      "category": "core",
      "module_doc": "",
      "functions": [],
      "classes": [],
      "callgraph": {},
      "dependencies": [],
      "hash": null,
      "artifact_id": "b1cfb061-6a5c-4b17-a39a-c87186da104d"
    }
  ]
}